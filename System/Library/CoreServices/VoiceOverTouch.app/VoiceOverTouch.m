uint64_t start(uint64_t a1, uint64_t a2)
{
  AXSetThreadPriority(62LL);
  SCRCArgumentParserRunWithClassName(a1, a2, "VOTMain");
  return 0LL;
}

void sub_100006008(uint64_t a1)
{
  mach_msg_return_t v5;
  uint64_t v6;
  os_log_s *v7;
  v2 = (mach_msg_header_t *)malloc(0x800uLL);
  *(void *)&v2->msgh_bits = 0x80000000000LL;
  mach_port_name_t v3 = *(_DWORD *)(a1 + 32);
  v2->msgh_remote_port = 0;
  v2->msgh_local_port = v3;
  v2->msgh_id = 0;
  p_msgh_id = &v2->msgh_id;
  v5 = mach_msg(v2, 258, 0, 0x800u, v3, 0x3E8u, 0);
  if (v5 || *p_msgh_id != 1776)
  {
    v6 = VOTLogLifeCycle();
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000EECC4(p_msgh_id, v5, v7);
    }
  }

  free(v2);
}

void sub_100006644()
{
}

void sub_100006CF8(id a1)
{
  v1 = objc_alloc_init(&OBJC_CLASS___NSLock);
  v2 = (void *)qword_1001ACBA8;
  qword_1001ACBA8 = (uint64_t)v1;

  mach_port_name_t v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  v4 = (void *)qword_1001ACBB0;
  qword_1001ACBB0 = (uint64_t)v3;
}

void sub_100006FE8(id a1)
{
  v1 = objc_opt_new(&OBJC_CLASS___NSLock);
  v2 = (void *)qword_1001ACBC0;
  qword_1001ACBC0 = (uint64_t)v1;
}

uint64_t sub_1000073A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((_DWORD)v4) {
    [v3 setOutputRequest:0];
  }

  return v4;
}

LABEL_12:
LABEL_13:
}
      }
}

    v14 = 0LL;
    v23 = 0;
    v57 = 1;
    goto LABEL_27;
  }

  v19 = [v18 hasPrefix:v17];
  v20 = 0LL;
  v21 = 1;
  if (v19 && (a3 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_19:
  v57 = v21;
  if (([v14 isEqualToString:@"zh-hans"] & 1) != 0
    || [v14 isEqualToString:@"zh-hant"])
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue([v18 lowercaseString]);
    v31 = [v30 hasPrefix:@"zh"];

    if (v31)
    {
      v32 = v18;

      v20 = v32;
    }
  }

  if (!v20)
  {
    v33 = AXLanguageConvertToCanonicalForm(v14);
    v20 = (__CFString *)objc_claimAutoreleasedReturnValue(v33);
LABEL_26:
    v23 = 1;
    if (v20) {
      goto LABEL_35;
    }
LABEL_27:
    v34 = AXCLanguageToLocales();
    v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v36 = (void *)objc_claimAutoreleasedReturnValue([v35 allKeys]);
    v37 = [v36 containsObject:v14];

    if (v37)
    {
      v20 = (__CFString *)v14;
      if (v20) {
        goto LABEL_35;
      }
    }

    else
    {
      v20 = 0LL;
    }

    if (v14)
    {
      v38 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByReplacingOccurrencesOfString:@"_" withString:@"-"]);

      v39 = [v38 rangeOfString:@"-"];
      if (v39 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v40 = objc_claimAutoreleasedReturnValue([v38 substringToIndex:v39]);

        v38 = (void *)v40;
      }

      v41 = AXLanguageConvertToCanonicalForm(v38);
      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(v41);
      v14 = v38;
    }

    goto LABEL_35;
  }

  v23 = 1;
LABEL_35:
  if ((AXLanguageSupportedBySynthesizer(v20) & 1) == 0)
  {
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString lowercaseString](v20, "lowercaseString"));
    v43 = -[__CFString rangeOfString:](v42, "rangeOfString:", @"-");
    if (v43 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v44 = 0LL;
    }

    else
    {
      v45 = v43;
      v46 = @"zh-hans";
      if ((-[__CFString hasPrefix:](v42, "hasPrefix:", @"zh-hans") & 1) == 0)
      {
        v46 = @"zh-hant";
      }

      if (AXLanguageSupportedBySynthesizer(v46))
      {
        v42 = v46;
        v44 = v42;
      }

      else
      {
        v44 = 0LL;
        v42 = v46;
      }
    }

    v20 = v44;
  }

  v47 = v23 ^ 1;
  if (v20) {
    v47 = 1;
  }
  if ((v47 & 1) != 0)
  {
    v52 = v58;
  }

  else
  {
    v20 = v18;
    v48 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForVariant:28]);
    v49 = [v48 BOOLValue];

    v50 = (void *)objc_claimAutoreleasedReturnValue([v10 string]);
    v51 = sub_10004A930(v50);

    v52 = v58;
    if ((v57 & 1) == 0 && !v51 | v49)
    {
      v53 = sub_10004AE68(off_1001AC148, @"unpronounceable", &stru_10017A920, 0LL);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      v55 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@, %@", v54, v9));

      [v10 setString:v55];
      v9 = (id)v55;
    }
  }

LABEL_53:
  return v20;
}

    -[VOTElementManager _outputNextTextSegmentUnit:direction:](self, "_outputNextTextSegmentUnit:direction:", 1LL, a4);
    goto LABEL_13;
  }

  -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:]( self,  "_handleBookContentMovement:direction:unit:generateOutput:",  obj,  a4,  1LL,  1LL);
LABEL_13:
}

    goto LABEL_44;
  }

  if (-[VOTElementManager _shouldSendTapStraightToSystem](self, "_shouldSendTapStraightToSystem"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForIndex:101]);
    [v6 pointValue];
    v8 = v7;
    v10 = v9;

    v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    -[os_log_s performSimpleTapAtPoint:forElement:](v11, "performSimpleTapAtPoint:forElement:", 0LL, v8, v10);
    goto LABEL_12;
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  if ([v12 isEqualToString:kVOTEventCommandSplitTapTap])
  {
    v13 = -[VOTElementManager currentElementAllowsDirectTouch](self, "currentElementAllowsDirectTouch");

    if ((v13 & 1) != 0) {
      goto LABEL_44;
    }
  }

  else
  {
  }

  if (self->_flags.tapShouldHandleAutofill)
  {
    -[VOTElementManager _handlePerformTapAutofill:](self, "_handlePerformTapAutofill:", v4);
  }

  else if (self->_flags.tapShouldHandleTextOperation)
  {
    -[VOTElementManager _handlePerformTextOperation:](self, "_handlePerformTextOperation:", v4);
  }

  else
  {
    v23 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
    if (v23 != 48
      || (customActionIndex = self->_customActionIndex, customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
      || (v25 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCustomActions](self, "_currentCustomActions")),
          v26 = [v25 count],
          v25,
          customActionIndex >= (unint64_t)v26))
    {
      if (AXDeviceSupportsSonification(v23)
        && (id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)59
        && self->_audiographActionIdentifier
        && -[VOTElement supportsAudiographs](self->_currentElement, "supportsAudiographs"))
      {
        -[VOTElementManager _handlePerformAudiographAction:](self, "_handlePerformAudiographAction:", v4);
      }

      else if (self->_inTextProcessingRotorMode && self->_misspelledWordReplacementCycleIndex != 0x7FFFFFFFFFFFFFFFLL)
      {
        -[VOTElementManager _processMisspelledWordTextReplacement](self, "_processMisspelledWordTextReplacement");
      }

      else
      {
        if (self->_flags.wasSendingToNativeSlide) {
          -[VOTElementManager _endNativeSliding:](self, "_endNativeSliding:", 1LL);
        }
        -[VOTElementManager _handlePerformPressAction:](self, "_handlePerformPressAction:", v4);
        v27 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
        v28 = (void *)objc_claimAutoreleasedReturnValue([v27 bundleIdentifier]);

        if (([v28 hasPrefix:@"com.apple."] & 1) == 0)
        {
          v30[0] = _NSConcreteStackBlock;
          v30[1] = 3221225472LL;
          v30[2] = sub_100070F2C;
          v30[3] = &unk_100176D38;
          v30[4] = self;
          AXPerformBlockOnMainThreadAfterDelay(v30, v29, 0.5);
        }
      }
    }

    else
    {
      -[VOTElementManager _handlePerformCustomAction:](self, "_handlePerformCustomAction:", v4);
    }
  }

  return (char)v6;
}

  return a3;
}
  }

  return v5;
}
}

BOOL sub_100007D44(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 component];
  return v3 != [*(id *)(a1 + 32) limitToComponentType];
}

LABEL_22:
  }

  else
  {
    v19 = 0;
  }

  return v19;
}

  v37 = *(id *)(a1 + 40);
  if (v5 == v37)
  {
LABEL_27:
    v42 = 0;
    goto LABEL_29;
  }

  if (*(id *)(*(void *)(a1 + 32) + 192LL) == v37)
  {
    v38 = VOTLogAudio(v35, v36);
    v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *(void *)(a1 + 40);
      v41 = *(void *)(*(void *)(a1 + 32) + 192LL);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v62 = 1;
      *(_WORD *)&v62[4] = 2048;
      *(void *)&v62[6] = v41;
      *(_WORD *)&v62[14] = 2048;
      *(void *)&v62[16] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Not really different options (different: %d) (lastSet: %lu, newSet: %lu)",  buf,  0x1Cu);
    }

    goto LABEL_27;
  }

  v42 = 1;
LABEL_29:
  v43 = [v3 isEqualToString:v6];
  v44 = (int)v43;
  v46 = VOTLogAudio(v43, v45);
  v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
  v48 = v42 | v44 ^ 1;
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    v49 = @"NO";
    v50 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138544386;
    if (v48) {
      v49 = @"YES";
    }
    *(void *)v62 = v49;
    *(_WORD *)&v62[8] = 2114;
    *(void *)&v62[10] = v3;
    *(_WORD *)&v62[18] = 2114;
    *(void *)&v62[20] = v6;
    v63 = 2048;
    v64 = v5;
    v65 = 2048;
    v66 = v50;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Changing route? [%{public}@] - categories [%{public}@/%{public}@], options: [%lu/%lu]",  buf,  0x34u);
  }

  if (v48)
  {
    *(void *)(*(void *)(a1 + 32) + 192LL) = *(void *)(a1 + 40);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_100029CC8;
    v53[3] = &unk_100177300;
    v51 = v6;
    v52 = *(void *)(a1 + 40);
    v54 = v51;
    v55 = v59;
    v56 = v52;
    ((void (*)(void *, void *))v9[2])(v9, v53);
  }

  _Block_object_dispose(v59, 8);
}

    goto LABEL_23;
  }

  -[VOTElementManager _reupdateTextSelectionInformation](self, "_reupdateTextSelectionInformation");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  v7 = [v6 ignoreLogging];

  if ((v7 & 1) == 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    v9 = AXLoggerForFacility(v8);
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);

    v11 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = AXColorizeFormatLog(2LL, @"Supressing selection change (remaining: %d");
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v186 = [(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
      v14 = _AXStringForArgs(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v10, v11))
      {
        *(_DWORD *)buf = 138543362;
        v211 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}@", buf, 0xCu);
      }
    }
  }

  objc_msgSend( (id)VOTSharedWorkspace,  "setSuppressSelectionChangeNotificationCount:",  (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount", v186) - 1);
LABEL_40:
}

  v34 = VOTLogWebPageMovement(v26);
  v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3A90(v35, v36, v37, v38, v39, v40, v41, v42);
  }

LABEL_25:
}
      }

      v10 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v41,  v46,  16LL);
    }

    while (v10);

    self = v30;
    uint64_t v4 = v31;
    v7 = v29;
    if ((v35 & 1) != 0) {
      CFArrayAppendValue(v30->super._currentRotors, (const void *)0x30);
    }
  }

  else
  {
  }

  Count = CFArrayGetCount(self->super._currentRotors);
  if (CFArrayGetCount(v7) == Count && Count >= 1)
  {
    v24 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v24);
      if (Count == ++v24)
      {
        v24 = Count;
        break;
      }
    }

    if (v24 == Count)
    {
      v27 = v32;
      v26 = (void *)v33;
      if (!v7) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
  }

  if (CFArrayGetCount(self->super._currentRotors) < 1) {
    v28 = 48LL;
  }
  else {
    v28 = (int)CFArrayGetValueAtIndex(self->super._currentRotors, 0LL);
  }
  v27 = v32;
  v26 = (void *)v33;
  -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( self,  "setCurrentRotorType:saveToPreferences:userInitiated:",  v28,  0LL,  0LL);
  if (v7) {
LABEL_40:
  }
    CFRelease(v7);
LABEL_41:
}

    v10 = (void *)objc_claimAutoreleasedReturnValue([v8 elementManager]);
    [v10 handleNotification:a3 withData:a4 forElement:a2];
    goto LABEL_23;
  }

  if ((_DWORD)a3 == 1051)
  {
    [v8 _simulatePreviewActionGesture];
    goto LABEL_24;
  }

  if ((_DWORD)a3 == 2027)
  {
    [(id)VOTSharedWorkspace handleRingerSwitchSwitched:0];
    goto LABEL_24;
  }

  if ((_DWORD)a3 != 3030) {
    goto LABEL_22;
  }
  [v8 _handleSOSMedicalIDShown];
LABEL_24:
  objc_autoreleasePoolPop(v9);
}
}

    v16 = 0LL;
    return v16;
  }

  if (currentRotorType != 47) {
    goto LABEL_22;
  }
  uint64_t v4 = (uint64_t)-[NSMutableArray count](self->_customPublicRotors, "count");
  v5 = v4 - 1;
  if (v4 < 1) {
    goto LABEL_22;
  }
  customPublicRotors = self->_customPublicRotors;
  v7 = self->_publicCustomRotorIndex >= v5 ? v5 : self->_publicCustomRotorIndex;
  self->_publicCustomRotorIndex = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndex:]( self->_customPublicRotors,  "objectAtIndex:",  self->_publicCustomRotorIndex));
  v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"name"]);

  v10 = +[VOTRotor rotorTypeForSystemRotorType:](&OBJC_CLASS___VOTRotor, "rotorTypeForSystemRotorType:", v9);
  if (v10)
  {
    v11 = (id)objc_claimAutoreleasedReturnValue(+[VOTRotor stringForRotorType:](&OBJC_CLASS___VOTRotor, "stringForRotorType:", v10));
  }

  else
  {
    v11 = v9;
    v9 = v11;
  }

LABEL_11:
}

    [v5 appendStringWithComma:@"numbers"];
    if ((a3 & 8) == 0) {
      return v5;
    }
    goto LABEL_7;
  }

  [v4 appendString:@"all"];
  return v5;
}

  if (v8 >= (unint64_t)[v7 count])
  {
    self->_misspelledWordReplacementCycleIndex = 0LL;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidWrapForwards](&OBJC_CLASS___VOSOutputEvent, "DidWrapForwards"));
LABEL_14:
    v18 = (void *)v17;
    [v16 sendEvent:v17];
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  v20 = v19;
  if (v19)
  {
    v14 = v19;
  }

  else
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
    v14 = (id)objc_claimAutoreleasedReturnValue([v21 currentSoftwareKeyboardLanguage]);
  }

  v15 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  v22 = (void *)objc_claimAutoreleasedReturnValue([v25 objectAtIndexedSubscript:self->_misspelledWordReplacementCycleIndex]);
  v23 = [v15 addString:v22 withLanguage:v14];

  v24 = (void *)objc_claimAutoreleasedReturnValue([v15 lastAction]);
  [v24 setObject:kCFBooleanTrue forVariant:50];

  [v15 setGeneratesBraille:1];
  -[VOTElementManager sendRequest:](self, "sendRequest:", v15);
LABEL_19:
}

    v21 = 0;
    goto LABEL_12;
  }

  if (x < CGRectGetMinX(*(CGRect *)&v16) + -10.0) {
    goto LABEL_11;
  }
  v23.origin.x = v8;
  v23.origin.y = v10;
  v23.size.width = v12;
  v23.size.height = v14;
  if (x >= CGRectGetMaxX(v23) + 10.0) {
    goto LABEL_11;
  }
  v24.origin.x = v8;
  v24.origin.y = v10;
  v24.size.width = v12;
  v24.size.height = v14;
  x = CGRectGetMidX(v24);
LABEL_10:
  v20 = -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", x, y);
  v21 = -[VOTElement isEqual:](v20, "isEqual:", v6);

LABEL_12:
  return v21;
}

  return v7;
}
}
}

  if ((keyboardHelpMask & 4) != 0) {
LABEL_5:
  }
    v6 = v6 | 4;
LABEL_6:
  if ((v4 & 0x40) != 0)
  {
    if ((keyboardHelpMask & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if ((keyboardHelpMask & 0x40) != 0) {
LABEL_14:
  }
    v6 = v6 | 0x40;
LABEL_15:
  if ((v4 & 2) != 0)
  {
    if ((keyboardHelpMask & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  if ((keyboardHelpMask & 2) != 0) {
LABEL_19:
  }
    v6 = v6 | 2;
LABEL_20:
  if ((v4 & 1) != 0)
  {
    if ((keyboardHelpMask & 1) != 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  if ((keyboardHelpMask & 1) != 0) {
LABEL_24:
  }
    v6 = v6 | 1;
LABEL_25:
  if ((v4 & 0x10) == 0)
  {
    if ((keyboardHelpMask & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }

  if ((keyboardHelpMask & 0x10) == 0) {
LABEL_29:
  }
    v6 = v6 | 0x10;
LABEL_30:
  self->_keyboardHelpMask = [v7 modifierState];
  [v7 setChangedModifiers:v6];
}

  return (char)v5;
}
}

  return v9;
}
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1LL);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_1000EDB1C(v15, a4 & 1);
  v21 = sub_1000ED9D8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

void sub_1000081D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000081E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000081F8(uint64_t a1)
{
}

void sub_100008200(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (![v9 component])
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    v8 = (void *)objc_claimAutoreleasedReturnValue([v9 string]);
    uint64_t v4 = __AXStringForVariables(v3);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

void sub_10000833C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100008354(uint64_t a1, void *a2)
{
  id v9 = a2;
  if (![v9 component])
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    v8 = (void *)objc_claimAutoreleasedReturnValue([v9 originalString]);
    uint64_t v4 = __AXStringForVariables(v3);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

LABEL_21:
    v39 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](self, "outputActions"));
    v40 = [v39 count];

    v130 = v24;
    v41 = (char *)[v130 rangeOfString:v130];
    else {
      v42 = v41;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:UIAccessibilityTokenListItemLabel]);

    if (v43 && &v42[v35] != (char *)0x7FFFFFFFFFFFFFFFLL && (char *)v136 == &v42[v35])
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:UIAccessibilityTokenListItemIdentifier]);
      v45 = [v44 unsignedIntegerValue];
      if (v45 != [v129 unsignedIntegerValue])
      {
        v46 = v44;

        v47 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:UIAccessibilityTokenListItemLabel]);
        v48 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v47));

        v10 = v123;
        [v48 setAttribute:kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
        v49 =  -[VOTOutputRequest addAttributedString:withLanguage:category:]( self,  "addAttributedString:withLanguage:category:",  v48,  0LL,  v123);

        v129 = v46;
      }
    }

    v50 = objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v121]);
    v51 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);
    [v130 removeAttributes:v51];

    v127 = (void *)v50;
    v126 = (void *)objc_claimAutoreleasedReturnValue( -[VOTOutputRequest addString:brailleString:breakWords:withLanguage:atIndex:category:]( self,  "addString:brailleString:breakWords:withLanguage:atIndex:category:",  v130,  v50,  0LL,  v9,  0x7FFFFFFFFFFFFFFFLL,  v10));
    objc_msgSend(v125, "axSafelyAddObjectsFromArray:");
    v52 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](self, "outputActions"));
    v53 = [v52 count];

    if ([v23 count])
    {
      v124 = v9;
      v54 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](self, "outputActions"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "subarrayWithRange:", v40, v53 - v40));

      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      obj = v55;
      v56 = [obj countByEnumeratingWithState:&v132 objects:v141 count:16];
      if (!v56) {
        goto LABEL_86;
      }
      v57 = v56;
      v58 = *(void *)v133;
      while (1)
      {
        for (i = 0LL; i != v57; i = (char *)i + 1)
        {
          if (*(void *)v133 != v58) {
            objc_enumerationMutation(obj);
          }
          v60 = *(void **)(*((void *)&v132 + 1) + 8LL * (void)i);
          v61 =  +[AXOutputRequest addAttributesToAction:fromDictionary:]( &OBJC_CLASS___AXOutputRequest,  "addAttributesToAction:fromDictionary:",  v60,  v23);
          v62 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:53]);

          if (v62)
          {
            v63 = sub_10004A988(off_1001AC148, @"element.header.text.nolevel", 0LL);
            v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
            v65 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v64));

            [v65 setAttribute:kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
            v66 =  -[VOTOutputRequest addAttributedString:withLanguage:]( self,  "addAttributedString:withLanguage:",  v65,  0LL);
          }

          v67 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:52]);

          if (v67)
          {
            v68 = sub_10004A988(off_1001AC148, @"element.link.text", 0LL);
            v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
            v70 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v69));

            v71 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
            v72 = (unint64_t)[v71 voiceOverLinkFeedback];

            if ((v72 & 2) != 0)
            {
              v73 =  -[VOTOutputRequest addAttributedString:withLanguage:]( self,  "addAttributedString:withLanguage:",  v70,  0LL);
              v74 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](self, "lastAction"));
              [v74 setIsVoiceOverGeneratedContent:1];

              if ((v72 & 8) != 0) {
                [v60 setObject:&off_100187360 forVariant:32];
              }
              v75 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](self, "lastAction"));
              [v75 setGeneratesBraille:(v72 >> 4) & 1];
            }

            if ((v72 & 4) != 0)
            {
              v76 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](self, "lastAction"));
              [v76 setObject:@"Sounds/LinkBegin.aiff" forVariant:75];
            }
          }

          v77 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:62]);

          if (v77)
          {
            v78 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:62]);
            v80 = objc_opt_class(&OBJC_CLASS___NSString, v79);
            if ((objc_opt_isKindOfClass(v78, v80) & 1) != 0)
            {
              v82 = v78;
LABEL_49:
              v83 = v82;
              if (v82)
              {
                v84 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v82));
                [v84 setAttribute:kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
                v85 =  -[VOTOutputRequest addAttributedString:withLanguage:]( self,  "addAttributedString:withLanguage:",  v84,  0LL);
              }
            }

            else
            {
              v86 = objc_opt_class(&OBJC_CLASS___NSNumber, v81);
              if ((objc_opt_isKindOfClass(v78, v86) & 1) != 0 && [v78 BOOLValue])
              {
                v87 = sub_10004A988(off_1001AC148, @"highlighted", 0LL);
                v82 = (id)objc_claimAutoreleasedReturnValue(v87);
                goto LABEL_49;
              }
            }
          }

          v88 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:85]);

          if (v88)
          {
            v89 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:85]);
            -[VOTOutputRequest _handleAttachmentInRequest:](self, "_handleAttachmentInRequest:", v89);
          }

          v90 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:88]);

          if (v90)
          {
            v91 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
            v92 = [v91 voiceOverInlineTextCompletionAppearanceFeedback];

            if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
            {
              if ((v92 & 8) != 0) {
                [v60 setObject:UIAccessibilityTokenLowPitch forVariant:32];
              }
            }
          }

          v93 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:30]);
          if (v93)
          {
            [v60 removeObjectForVariant:30];
            v94 = [v93 isEqualToString:UIAccessibilityTokenSpeakLiteralPunctuation];
            v95 = &AXSSVoiceOverPunctuationGroupAll;
            if ((v94 & 1) != 0
              || (v96 = [v93 isEqualToString:UIAccessibilityTokenSpeakNoPunctuation],
                  v95 = &AXSSVoiceOverPunctuationGroupNone,
                  v96))
            {
              v97 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace punctuationGroupForUUID:*v95]);
              [v60 setObject:v97 forVariant:30];
            }
          }

          v98 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:32]);

          if (v98)
          {
            if (![(id)VOTSharedWorkspace typingPitchChangeEnabled])
            {
              [v60 removeObjectForVariant:32];
              goto LABEL_84;
            }

            v99 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForVariant:32]);
            v101 = objc_opt_class(&OBJC_CLASS___NSString, v100);
            if ((objc_opt_isKindOfClass(v99, v101) & 1) != 0)
            {
              v103 = v99;
              if ([v103 isEqualToString:UIAccessibilityTokenHighPitch])
              {
                LODWORD(v104) = 1.5;
                goto LABEL_77;
              }

              if ([v103 isEqualToString:UIAccessibilityTokenLowPitch])
              {
                LODWORD(v104) = 0.75;
LABEL_77:
                v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v104));
                [v60 setObject:v111 forVariant:32];

LABEL_82:
LABEL_83:

                goto LABEL_84;
              }

              v112 = [v103 isEqualToString:UIAccessibilityTokenPlaceholder];
              if (!(_DWORD)v112)
              {
                v114 = v103;
                _AXAssert( v112,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTOutputRequest.m",  716LL,  "-[VOTOutputRequest addAttributedString:withLanguage:category:]",  @"Unrecognized pitch variant: %@");
              }

              v109 = v60;
              v110 = &off_100187360;
            }

            else
            {
              v105 = objc_opt_class(&OBJC_CLASS___NSNumber, v102);
              if ((objc_opt_isKindOfClass(v99, v105) & 1) == 0) {
                goto LABEL_83;
              }
              [v99 floatValue];
              v107 = v106;
              if (v107 > 2.0) {
                v107 = 2.0;
              }
              v108 = fmax(v107, 0.0);
              *(float *)&v108 = v108;
              v103 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v108));
              v109 = v60;
              v110 = (_UNKNOWN **)v103;
            }

            objc_msgSend(v109, "setObject:forVariant:", v110, 32, v114);
            goto LABEL_82;
          }
        }

        v18 = [obj countByEnumeratingWithState:&v86 objects:v92 count:16];
      }

      while (v18);
    }

    v30 = v69;
    id v9 = v71;
    a4 = v74;
  }

  else
  {
    v30 = v13;
  }

  if (![v30 count]) {
    goto LABEL_56;
  }
  *a4 = 1;
  obja = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  v65 = (char *)[v9 length];
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v70 = v30;
  v68 = v30;
  v75 = [v68 countByEnumeratingWithState:&v78 objects:v90 count:16];
  v31 = 0LL;
  if (!v75) {
    goto LABEL_51;
  }
  v32 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
  v72 = *(void *)v79;
  do
  {
    for (k = 0LL; k != v75; k = (char *)k + 1)
    {
      if (*(void *)v79 != v72) {
        objc_enumerationMutation(v68);
      }
      v34 = (char *)[*(id *)(*((void *)&v78 + 1) + 8 * (void)k) range];
      v36 = v35;
      if (v34 != v31)
      {
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v31, v34 - v31));
        [obja appendString:v37];
      }

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v34, v36));
      v39 = (void *)objc_claimAutoreleasedReturnValue([v32[462] currentCalendar]);
      v40 = (void *)objc_claimAutoreleasedReturnValue([v39 AMSymbol]);
      if ([v38 rangeOfString:v40 options:1] != (id)0x7FFFFFFFFFFFFFFFLL)
      {

LABEL_40:
        [obja appendString:v38];
        goto LABEL_49;
      }

      v41 = (void *)objc_claimAutoreleasedReturnValue([v32[462] currentCalendar]);
      v42 = (void *)objc_claimAutoreleasedReturnValue([v41 PMSymbol]);
      v43 = [v38 rangeOfString:v42 options:1];

      v32 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
      id v9 = v71;

      if (v43 != (id)0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_40;
      }
      v44 = (char *)[v38 rangeOfString:@":"];
      v45 = (void *)objc_claimAutoreleasedReturnValue([v38 substringToIndex:v44]);
      v46 = (__CFString *)objc_claimAutoreleasedReturnValue([v38 substringFromIndex:v44 + 1]);
      v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet decimalDigitCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "decimalDigitCharacterSet"));
      v48 = [v45 rangeOfCharacterFromSet:v47];

      if (v48 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v49 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v45 intValue]));

        v45 = (void *)v49;
      }

      v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet decimalDigitCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "decimalDigitCharacterSet"));
      v51 = -[__CFString rangeOfCharacterFromSet:](v46, "rangeOfCharacterFromSet:", v50);

      if (v51 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v32 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
      }

      else
      {
        v53 = -[__CFString integerValue](v46, "integerValue");
        v32 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
        if (v53)
        {
          v54 = (uint64_t)v53;
          v55 = -[__CFString intValue](v46, "intValue");
          if (v54 >= 10) {
            v56 = @"%d";
          }
          else {
            v56 = @"0%d";
          }
          v57 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  v56,  v55));
        }

        else
        {
          v57 = &stru_10017A920;
        }

        v46 = (__CFString *)v57;
        id v9 = v71;
      }

      *(float *)&v52 = a6;
      v58 = (void *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent pauseStringForType:voiceIdentifier:rate:]( self,  "pauseStringForType:voiceIdentifier:rate:",  6LL,  v67,  v52));
      [obja appendFormat:@" %@ %@ %@ ", v45, v58, v46];

LABEL_49:
      v31 = &v34[v36];
    }

    v75 = [v68 countByEnumeratingWithState:&v78 objects:v90 count:16];
  }

  while (v75);
LABEL_51:

  if ((uint64_t)v31 < (uint64_t)v65)
  {
    v62 = (void *)objc_claimAutoreleasedReturnValue([v9 substringFromIndex:v31]);
    [obja appendString:v62];
  }

  v63 = VOTLogSpeech(v59, v60, v61);
  v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
  v30 = v70;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
    sub_1000F0850();
  }

  [v9 setString:obja];
LABEL_56:
}

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v12 stopSpeakingAtBoundary:0];

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v13 sendEvent:v14];

LABEL_23:
}

LABEL_84:
        }

        v57 = [obj countByEnumeratingWithState:&v132 objects:v141 count:16];
        if (!v57)
        {
LABEL_86:

          v10 = v123;
          id v9 = v124;
          break;
        }
      }
    }

    v136 += v137;

    v21 = v136;
    if (v136 == 0x7FFFFFFFFFFFFFFFLL) {
      break;
    }
    v8 = v122;
    v20 = v129;
  }

  v8 = v122;
  v20 = v129;
LABEL_96:
  -[VOTOutputRequest _mergeActionsStartingAtIndex:](self, "_mergeActionsStartingAtIndex:", &v118[-((uint64_t)v118 > 0)]);

LABEL_97:
  return v125;
}

void sub_100009200(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v14 = a2;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v14, v8) & 1) != 0)
  {
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) string]);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "substringWithRange:", a3, a4));
    [v10 setObject:v14 forKey:v12];
  }

  else
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
    if ((objc_opt_isKindOfClass(v14, v13) & 1) != 0) {
      [*(id *)(a1 + 32) addEntriesFromDictionary:v14];
    }
  }
}

void sub_100009938( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_100009974(uint64_t a1, uint64_t a2)
{
  if (a2 != 54)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForIndex:a2]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForIndex:a2]);
    unsigned __int8 v6 = [v4 isEqual:v5];

    if ((v6 & 1) == 0)
    {
      uint64_t v7 = *(void **)(a1 + 48);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
      [v7 addObject:v8];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
    }
  }

BOOL sub_100009A28(id a1, NSNumber *a2, BOOL *a3)
{
  return ((-[NSNumber intValue](a2, "intValue", a3) - 15) & 0xFFFFFFFD) != 0;
}

LABEL_47:
        v44 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager doNotTranslateWords](&OBJC_CLASS___AXLanguageManager, "doNotTranslateWords"));
        if (([v44 containsObject:v35] & 1) != 0
          || [v44 containsObject:v37])
        {
          if ([v35 isEqualToString:@"VoiceOver"])
          {
            v20 = 0LL;
            v132 = 1LL;
            v31 = 1;
            uint64_t v7 = v142;
LABEL_73:

            v18 = v136;
            goto LABEL_74;
          }

          if (v19 >= 1)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "substringWithRange:", v137, v19 - v137));
            v181[0] = @"string";
            v181[1] = @"language";
            v182[0] = v45;
            v46 = v146;
            if (!v146)
            {
              v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              v46 = (uint64_t)v120;
            }

            v182[1] = v46;
            v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v182,  v181,  2LL));
            [(id)v126 addObject:v47];

            if (!v146) {
            v19 = v36;
            }
          }

          v137 = v19;
          v19 = v38 - 1;
          LODWORD(v132) = 1;
          v146 = (uint64_t)@"en-US";
        }

        else
        {
          LODWORD(v132) = 0;
        }

        uint64_t v7 = v142;
      }

      v48 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace languageRotorItems]);
      v165 = 0u;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v35 = v48;
      v49 = [v35 countByEnumeratingWithState:&v165 objects:v180 count:16];
      if (v49)
      {
        v50 = v49;
        v143 = v19;
        v51 = *(void *)v166;
        while (2)
        {
          for (i = 0LL; i != v50; i = (char *)i + 1)
          {
            if (*(void *)v166 != v51) {
              objc_enumerationMutation(v35);
            }
            v53 = *(void **)(*((void *)&v165 + 1) + 8LL * (void)i);
            v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:@"RotorItem"]);
            v55 = AXLanguageCanonicalFormToGeneralLanguage();
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            v57 = [v56 hasPrefix:@"en"];

            if (v57)
            {
              v37 = (__CFString *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:@"RotorItem"]);
              goto LABEL_70;
            }
          }

          v50 = [v35 countByEnumeratingWithState:&v165 objects:v180 count:16];
          if (v50) {
            continue;
          }
          break;
        }

        v37 = @"en-US";
LABEL_70:
        uint64_t v7 = v142;
        v19 = v143;
      }

      else
      {
        v37 = @"en-US";
      }

      v44 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
      v20 = (id)objc_claimAutoreleasedReturnValue([v44 dialectForLanguageID:v37]);
      v31 = 0;
      BYTE4(v132) = 1;
      goto LABEL_73;
    }

    LODWORD(v132) = 0;
    v31 = 0;
    v20 = 0LL;
LABEL_74:
    v33 = v151;
LABEL_75:
    v147 = (unint64_t)v20;
    if (sub_10004AA50(v33) && !sub_10004AA40(v33))
    {
      v59 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      v58 = [v59 replacesCharacterAsPunctuation:v33];
    }

    else
    {
      v58 = 0;
    }

    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v58 & ~v31));
    -[AXIndexMap setObject:forIndex:](v134, "setObject:forIndex:", v60, v19);

    v61 = v18;
    if ((((v31 | v58) & 1) != 0
       || (AXLanguageIsSpeakableEmojiString(v61) & 1) != 0
       || sub_10004B218(v19, v7))
      && ([v130 characterIsMember:v151] & 1) == 0)
    {
      if (v146)
      {
        v84 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v129, "dialectForLanguageID:"));
        v62 = v84;
        if ((v58 & ~v31) != 0
          && (([v84 canSpeakCharacter:v151] & 1) != 0
           || ([v62 canSpeakString:v61] & 1) != 0))
        {
          goto LABEL_167;
        }

        v64 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "substringWithRange:", v137, v19 - v137));
        v178[0] = @"string";
        v178[1] = @"language";
        v179[0] = v64;
        v179[1] = v146;
        v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v179,  v178,  2LL));
        [(id)v126 addObject:v85];
      }

      else
      {
        if (!(_DWORD)v132)
        {
          v146 = 0LL;
          goto LABEL_168;
        }

        v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "substringWithRange:", v137, v19 - v137));
        v176[0] = @"string";
        v176[1] = @"skipsUnpronounceable";
        v177[0] = v62;
        v177[1] = &__kCFBooleanTrue;
        v64 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v177,  v176,  2LL));
        [(id)v126 addObject:v64];
      }

      v146 = 0LL;
      v137 = v19;
      goto LABEL_166;
    }

    v144 = v19;
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v63 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace languageRotorItems]);
    v161 = 0u;
    v162 = 0u;
    v163 = 0u;
    v164 = 0u;
    v64 = v63;
    v65 = [v64 countByEnumeratingWithState:&v161 objects:v175 count:16];
    if (v65)
    {
      v66 = v65;
      v67 = *(void *)v162;
      do
      {
        for (j = 0LL; j != v66; j = (char *)j + 1)
        {
          if (*(void *)v162 != v67) {
            objc_enumerationMutation(v64);
          }
          v69 = *(void **)(*((void *)&v161 + 1) + 8LL * (void)j);
          v70 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:@"Enabled"]);
          v71 = [v70 BOOLValue];

          if (v71)
          {
            v72 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:@"RotorItem"]);
            if (v72) {
              [v62 addObject:v72];
            }
          }
        }

        v66 = [v64 countByEnumeratingWithState:&v161 objects:v175 count:16];
      }

      while (v66);
    }

    v20 = (id)v147;

    if (!(v133 | v147))
    {
      v73 = v151;
      v74 = (void *)objc_claimAutoreleasedReturnValue([v129 dialectsThatCanSpeakCharacter:v151 overridePreferredLanguages:v62]);
      v157 = 0u;
      v158 = 0u;
      v159 = 0u;
      v160 = 0u;
      v75 = v74;
      v19 = v144;
      v148 = [v75 countByEnumeratingWithState:&v157 objects:v174 count:16];
      if (v148)
      {
        v76 = *(void *)v158;
        v139 = *(void *)v158;
        while (2)
        {
          for (k = 0LL; k != v148; k = (char *)k + 1)
          {
            if (*(void *)v158 != v76) {
              objc_enumerationMutation(v75);
            }
            v78 = *(void **)(*((void *)&v157 + 1) + 8LL * (void)k);
            if (([v78 isDialectSecondaryForCharacter:v73] & 1) == 0)
            {
              v79 = (void *)objc_claimAutoreleasedReturnValue([v78 langMap]);
              v80 = v75;
              v81 = (void *)objc_claimAutoreleasedReturnValue([v145 langMap]);
              if (![v81 isWestern] || v19 <= 0)
              {

                v75 = v80;
LABEL_130:

LABEL_131:
                v20 = v78;
                goto LABEL_132;
              }

              v82 = (void *)objc_claimAutoreleasedReturnValue([v78 specificLanguageID]);
              v83 = [(id)v146 isEqual:v82];

              v19 = v144;
              v75 = v80;
              v76 = v139;
              if ((v83 & 1) != 0) {
                goto LABEL_131;
              }
            }

            v73 = v151;
          }

          v148 = [v75 countByEnumeratingWithState:&v157 objects:v174 count:16];
          if (v148) {
            continue;
          }
          break;
        }
      }

      v20 = 0LL;
LABEL_132:

      goto LABEL_137;
    }

    v19 = v144;
    v86 = v151;
    if (v147)
    {
LABEL_138:
      v96 = (void *)objc_claimAutoreleasedReturnValue([v20 specificLanguageID]);
      if ([(id)v146 isEqualToString:v96])
      {
        v97 = (id)v137;
        goto LABEL_163;
      }

      if (v146)
      {

LABEL_143:
        if (v19 < 1)
        {
          v137 = v19;
        }

        else
        {
          v150 = v20;
          v97 = (id)v19;
          v99 = (id)v137;
          if (v19 > v137)
          {
            v100 = (id)v144;
            v101 = v144;
            while (1)
            {
              v102 = (void *)objc_claimAutoreleasedReturnValue(-[AXIndexMap objectForIndex:](v134, "objectForIndex:", --v101));
              v103 = [v102 BOOLValue];

              if (!v103) {
                break;
              }
              v152 = [v142 rangeOfComposedCharacterSequenceAtIndex:v101];
              v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "substringWithRange:"));
              v105 = [v104 characterAtIndex:0];
              v106 = (void *)objc_claimAutoreleasedReturnValue([v150 speakableCharacters]);
              if (v106 && ([v150 canSpeakCharacter:v105] & 1) == 0)
              {
                v107 = [v150 canSpeakString:v104];

                if ((v107 & 1) == 0)
                {

                  break;
                }
              }

              else
              {
              }

              v97 = v152;
              v100 = v152;
              v99 = (id)v137;
              if (v101 <= v137) {
                goto LABEL_156;
              }
            }

            v97 = v100;
            v99 = (id)v137;
          }
}

  return v8;
}

LABEL_156:
          if (v97 == v99)
          {
            v19 = v144;
            v20 = v150;
          }

          else
          {
            v96 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "substringWithRange:"));
            v172[0] = v96;
            v171[0] = @"string";
            v171[1] = @"language";
            v108 = v146;
            if (!v146)
            {
              v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              v108 = (uint64_t)v121;
            }

            v172[1] = v108;
            v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v172,  v171,  2LL));
            [(id)v126 addObject:v109];

            if (!v146) {
            v19 = v144;
            }
            v20 = v150;
LABEL_163:

            v137 = (uint64_t)v97;
          }
        }
      }

      else
      {
        v98 = [v145 isEqual:v20];

        if ((v98 & 1) == 0) {
          goto LABEL_143;
        }
      }

      if (([v20 isEqual:v145] & 1) == 0)
      {
        v110 = objc_claimAutoreleasedReturnValue([v20 specificLanguageID]);

        v146 = v110;
      }

      goto LABEL_166;
    }

    v87 = (void *)objc_claimAutoreleasedReturnValue([v129 dialectsThatCanSpeakCharacter:v151 overridePreferredLanguages:v62]);
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v156 = 0u;
    v75 = v87;
    v149 = [v75 countByEnumeratingWithState:&v153 objects:v173 count:16];
    if (!v149)
    {
LABEL_124:

      goto LABEL_135;
    }

    v88 = *(void *)v154;
    v140 = *(void *)v154;
LABEL_116:
    v89 = 0LL;
    while (1)
    {
      if (*(void *)v154 != v88) {
        objc_enumerationMutation(v75);
      }
      v90 = *(void **)(*((void *)&v153 + 1) + 8 * v89);
      v91 = v75;
      v92 = (void *)objc_claimAutoreleasedReturnValue([v90 langMap]);
      v93 = (void *)objc_claimAutoreleasedReturnValue([v92 generalLanguageID]);
      v94 = (void *)objc_claimAutoreleasedReturnValue([v90 specificLanguageID]);
      v95 = [v94 isEqualToString:v133];

      v86 = v151;
      v75 = v91;
      v88 = v140;
      if ((v95 & 1) != 0) {
        goto LABEL_134;
      }
LABEL_122:
      if (v149 == (id)++v89)
      {
        v149 = [v75 countByEnumeratingWithState:&v153 objects:v173 count:16];
        if (v149) {
          goto LABEL_116;
        }
        goto LABEL_124;
      }
    }

    v75 = v91;
LABEL_134:
    v20 = v90;

    if (v20) {
      goto LABEL_136;
    }
LABEL_135:
    v20 = (id)objc_claimAutoreleasedReturnValue([v75 firstObject]);
LABEL_136:
    v19 = v144;
LABEL_137:

    if (v20) {
      goto LABEL_138;
    }
LABEL_166:

    v18 = v136;
LABEL_167:

    uint64_t v7 = v142;
LABEL_168:

    ++v19;
  }

  while (v19 < v141);
LABEL_171:
  if (v146 | v126)
  {
    v111 = v123;
    v112 = (void *)v133;
    if (v141 == 1)
    {
      v113 = sub_10004AA50((uint64_t)[v7 characterAtIndex:0]);
      if (!v133 && v113)
      {

        v146 = 0LL;
      }
    }

    if (v141 != v137)
    {
      v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "substringWithRange:", v137, v141 - v137));
      v169[0] = @"string";
      v169[1] = @"language";
      v170[0] = v114;
      v115 = (void *)v146;
      if (!v146) {
        v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      }
      v170[1] = v115;
      v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v170,  v169,  2LL));
      [(id)v126 addObject:v116];

      if (!v146) {
    }
      }

    v117 = (void *)v146;
  }

  else
  {
    v117 = 0LL;
    v111 = v123;
    v112 = (void *)v133;
  }

  v118 = (NSMutableArray *)(id)v126;

  return v118;
}

void sub_10000BB58(void *a1)
{
  id v2 = a1;
  [v2 setGeneratesBraille:1];
  else {
    uint64_t v1 = 1LL;
  }
  [v2 setBrailleType:v1];
}

id sub_10000BBB0(void *a1, char a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!v5)
  {
    id v7 = 0LL;
    goto LABEL_9;
  }

  id v7 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v8 = [v7 addString:v5 withLanguage:v6];
  if ((a2 & 1) != 0)
  {
    [v7 setCannotBeInterrupted:1];
    if ((a2 & 2) == 0)
    {
LABEL_4:
      if ((a2 & 4) != 0) {
        goto LABEL_5;
      }
LABEL_12:
      sub_10000BB58(v7);
      if ((a2 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }

  else if ((a2 & 2) == 0)
  {
    goto LABEL_4;
  }

  [v7 setDoesNotInterrupt:1];
  if ((a2 & 4) == 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((a2 & 8) != 0) {
LABEL_6:
  }
    [v7 setLimitToComponentType:3];
LABEL_7:
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 outputActions]);
  v10 = (void *)objc_claimAutoreleasedReturnValue([v9 lastObject]);
  [v10 setObject:&__kCFBooleanTrue forVariant:76];

  [v7 send];
LABEL_9:

  return v7;
}

id sub_10000C690(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 textualContexts]);
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

id sub_10000C6D0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 appIdentifiers]);
  id v4 = [v3 containsObject:*(void *)(a1 + 32)];

  return v4;
}

LABEL_10:
  return v15;
}

LABEL_11:
    v11 = 0LL;
    goto LABEL_12;
  }

  v11 = 1LL;
LABEL_12:
  -[VOTOutputManager setSoundCurtainEnabled:](self, "setSoundCurtainEnabled:", v11, v13);
}

  self->_originalKBAttachedStateIsValid = 1;
  v22 = VOTLogKeyboard();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v23 = self->_originalKBAttachedState;
    v24 = 67109120;
    LODWORD(v25) = v23;
    v10 = "Original KB attached state is: %d";
    v11 = v8;
    v12 = 8;
    goto LABEL_12;
  }

  v12 = *((_BYTE *)v18 + 24);
  _Block_object_dispose(&v17, 8);

  return v12;
}

  v11 = 1;
  if (elementMathSegments) {
LABEL_19:
  }
    -[VOTElementManager _refreshMathSegmentsIfNeededWithPreferredDirection:]( self,  "_refreshMathSegmentsIfNeededWithPreferredDirection:",  a3);
LABEL_20:
  if (!v11)
  {
    -[VOTElementManager _handleUpdatedMathElementIndex](self, "_handleUpdatedMathElementIndex");
    goto LABEL_23;
  }
}

  return v7;
}

  if (_AXSZoomTouchEnabled(v9))
  {
    LODWORD(v15) = dword_1001ACF68;
    if (*(float *)&dword_1001ACF68 > 1.0)
    {
      IsEmpty = CGRectIsEmpty(*(CGRect *)ymmword_1001ACF70);
      if (!IsEmpty
        && (AXInPreboardScenario(IsEmpty) & 1) == 0
        && (AXInCheckerBoardScenario() & 1) == 0
        && ([(id)VOTSharedWorkspace brailleInputActive] & 1) == 0)
      {
        -[VOTEventFactory _convertZoomRecordToDeviceRecord:](self, "_convertZoomRecordToDeviceRecord:", v4);
      }
    }
  }

  v17 = objc_msgSend(v4, "type", v15);
  if (v17 > 1199)
  {
    if ((v17 - 1200) <= 7)
    {
      if (((1 << (v17 + 80)) & 0xAF) != 0)
      {
        WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        v19 = WeakRetained;
        v20 = v4;
        v21 = 0LL;
      }

      else
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory currentElement](self, "currentElement"));
        v37 = [v36 isRTL];

        WeakRetained = objc_loadWeakRetained((id *)&self->_delegate);
        v19 = WeakRetained;
        v20 = v4;
        v21 = v37;
      }

      [WeakRetained handleAppleTVRemoteEvent:v20 eventOrigin:7 isRTL:v21];
      goto LABEL_44;
    }

    if ((v17 - 4500) >= 2)
    {
      if (v17 != 3001) {
        goto LABEL_45;
      }
      v25 = (void *)objc_claimAutoreleasedReturnValue([v4 handInfo]);
      v26 = [v25 eventType];

      if (v26 == 10) {
        goto LABEL_45;
      }
      v27 = (void *)objc_claimAutoreleasedReturnValue([v4 handInfo]);
      v28 = [v27 eventType];

      if (v28 == 11) {
        goto LABEL_45;
      }
      [v4 neuterUpdates];
      if (-[VOTEventFactory shouldSnarfEventForTapWakeGesture:](self, "shouldSnarfEventForTapWakeGesture:", v4))
      {
        v29 = sub_1000AB630((unint64_t)[v4 HIDTime]);
        v30 = (void *)objc_claimAutoreleasedReturnValue([v4 handInfo]);
        v31 = [v30 eventType];

        if (v31 == 6)
        {
          wakeTapTimer = self->_wakeTapTimer;
          ++self->_watchWakeTapCount;
          self->_lastWatchWakeUpTime = v29;
          -[SCRCTargetSelectorTimer cancel](wakeTapTimer, "cancel");
          v33 = AXLogTapticTime( -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_wakeTapTimer,  "dispatchAfterDelay:",  0.699999988));
          v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            watchWakeTapCount = self->_watchWakeTapCount;
            v51 = 134218240;
            v52 = watchWakeTapCount;
            v53 = 2048;
            v54 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "watchWakeTapCount=%lu, timestamp=%f",  (uint8_t *)&v51,  0x16u);
          }
        }

        -[NSMutableArray addObject:](self->_snarfedWatchWakeRecords, "addObject:", v4);
        goto LABEL_45;
      }

      v50 = (void *)objc_claimAutoreleasedReturnValue( +[VOTGestureEvent gestureEventWithEventRepresentation:]( &OBJC_CLASS___VOTGestureEvent,  "gestureEventWithEventRepresentation:",  v4));
      -[VOTEventFactory _processGestureEvent:](self, "_processGestureEvent:", v50);
      self->_watchWakeTapCount = 0LL;
      -[NSMutableArray removeAllObjects](self->_snarfedWatchWakeRecords, "removeAllObjects");
LABEL_62:

      goto LABEL_45;
    }
}
}

uint64_t sub_10000CB70(uint64_t a1)
{
  return NSRequestConcreteImplementation(v2, v1, a1);
}

uint64_t sub_10000CB80()
{
  return objc_opt_class();
}

void sub_10000CBB4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSLock);
  uint64_t v2 = (void *)qword_1001ACBF0;
  qword_1001ACBF0 = (uint64_t)v1;

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v4 = (void *)qword_1001ACBE8;
  qword_1001ACBE8 = (uint64_t)v3;
}

id sub_10000D130(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _voiceOverVolumeChanged:0];
}

id sub_10000D13C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _voiceOverVolumeChanged:0];
}

id sub_10000D148(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSoundCurtain];
}

id sub_10000D150(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSoundCurtain];
}

void sub_10000D224(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTOutputManager) init];
  uint64_t v2 = (void *)qword_1001ACBE0;
  qword_1001ACBE0 = (uint64_t)v1;
}

LABEL_8:
}

  if (v3) {
    -[VOTElement setPreviousSpokenValueParts:](self, "setPreviousSpokenValueParts:", 0LL);
  }
}
}

  id v14 = 0;
LABEL_9:

  return v14;
}

      ((void (**)(void, const __CFString *))v13)[2](v13, @"VOSKey.down");
      goto LABEL_9;
    }

  return v7;
}

    id v8 = 1;
    goto LABEL_9;
  }

  if (a3 != 3 || !v4) {
    goto LABEL_8;
  }
  id v7 = -[BRLTTable supportsTranslationModeContracted](v5, "supportsTranslationModeContracted");
LABEL_7:
  id v8 = v7;
LABEL_9:

  return v8;
}

id sub_10000D458(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
}

id sub_10000D4BC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 32) setCannotBeInterrupted:0];
}

void sub_10000D620(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 32) isEqual:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 32);
    *(void *)(v2 + 32) = 0LL;
  }

  *(_DWORD *)(*(void *)(a1 + 32) + 48LL) = 0;
  [*(id *)(*(void *)(a1 + 32) + 40) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  if (([*(id *)(a1 + 40) finishedSuccessfully] & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) firstObject]);
    unsigned int v5 = [v4 isComputerVisionAsynchrousRequest];

    if (v5) {
      [*(id *)(*(void *)(a1 + 32) + 8) removeObjectAtIndex:0];
    }
  }

void sub_10000D810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10000D828(uint64_t a1)
{
  if (([*(id *)(a1 + 32) doesNotInterrupt]
     && [*(id *)(*(void *)(a1 + 40) + 40) count]
     || [*(id *)(*(void *)(a1 + 40) + 40) count]
     && [*(id *)(*(void *)(a1 + 40) + 32) cannotBeInterrupted]
     && ([*(id *)(a1 + 32) interruptsEverything] & 1) == 0)
    && (uint64_t v2 = *(void *)(a1 + 40), *(_DWORD *)(v2 + 48) <= 4u))
  {
    [*(id *)(v2 + 8) addObject:*(void *)(a1 + 32)];
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v4 = *(id *)(*(void *)(a1 + 40) + 8LL);
    id v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v21;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
          if ((objc_msgSend(v9, "cannotBeInterrupted", (void)v20) & 1) == 0)
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestQueueMixinBehavior]);

            if (!v10) {
              continue;
            }
            v11 = (uint64_t (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestQueueMixinBehavior]);
            uint64_t v12 = ((uint64_t (**)(void, void *))v11)[2](v11, v9);

            if (v12 != 1) {
              continue;
            }
          }

          [v3 addObject:v9];
        }

        id v6 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v6);
    }

    [*(id *)(*(void *)(a1 + 40) + 8) removeAllObjects];
    [v3 addObject:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(a1 + 40) + 8) addObjectsFromArray:v3];
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestQueueMixinBehavior]);
    if (!v13) {
      goto LABEL_23;
    }
    id v14 = (void *)v13;
    v15 = (uint64_t (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) requestQueueMixinBehavior]);
    v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) firstObject]);
    v17 = (void *)objc_claimAutoreleasedReturnValue([v16 currentRequest]);
    uint64_t v18 = ((uint64_t (**)(void, void *))v15)[2](v15, v17);

    if (v18 == 1) {
      char v19 = 0;
    }
    else {
LABEL_23:
    }
      char v19 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v19;
  }

void sub_10000DC2C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000DC44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000DC54(uint64_t a1)
{
}

id sub_10000DC5C(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
  if (result)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) firstObject]);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    [*(id *)(*(void *)(a1 + 32) + 8) removeObjectAtIndex:0];
    return _[*(id *)(a1 + 40) setIsActive:1];
  }

  return result;
}

id sub_10000DCD0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_10000E55C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) speechComponent]);
  [v2 callStatusChanged];

  return [*(id *)(a1 + 32) _updateSoundCurtain];
}

id sub_10000E5F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateActiveRoutes];
}

void sub_10000E8C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10000E8F4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "isRoutePicked:"))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

LABEL_17:
    -[VOTOutputManager _updateExternalRoutesAvailable](self, "_updateExternalRoutesAvailable");
  }

  return v3;
}
}

    goto LABEL_18;
  }
}

  v16 = 0LL;
LABEL_18:

LABEL_20:
  return v13;
}

    -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
    goto LABEL_18;
  }

          v26 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:kSCROBrailleDisplayTransport]);
          v27 = [v26 unsignedIntegerValue];

          if (v27 == (id)4)
          {
            [(id)VOTSharedWorkspace handleUSBMFiBrailleDisplayConnected];
          }

          else
          {
            v28 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:kSCROBrailleDisplayTransport]);
            v29 = [v28 unsignedIntegerValue];

            if (v29 == (id)2) {
              [(id)VOTSharedWorkspace handleBluetoothBrailleDisplayConnected];
            }
          }

          if (-[VOTBrailleManager _isActiveUserDisplayConfig:](self, "_isActiveUserDisplayConfig:", v15)) {
            self->_hasActiveDisplay = 1;
          }
          continue;
        }
      }

      uint64_t v12 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v12);
  }

  -[VOTBrailleManager _updateOnscreenKeyboardSettings](self, "_updateOnscreenKeyboardSettings");
  v30 = (void *)objc_claimAutoreleasedReturnValue( +[SCROMobileBrailleDisplayInputManager sharedManager]( &OBJC_CLASS___SCROMobileBrailleDisplayInputManager,  "sharedManager"));
  [v30 configureWithDriverConfiguration:v10];

  -[SCROBrailleClient setKeepConnectionAlive:](self->_brailleClient, "setKeepConnectionAlive:", 1LL);
  if (self->_hasActiveDisplay)
  {
    -[VOTBrailleManager _setBrailleTable:](self, "_setBrailleTable:", self->_currentSetTable, (void)v34);
    -[VOTBrailleManager _setBrailleInputTable:](self, "_setBrailleInputTable:", self->_currentSetInputTable);
  }

  else
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace softwareKeyboardManager]);
    [v31 removeReasonToDisableSoftwareKeyboard:@"BrailleManager"];

    brailleElement = self->_brailleElement;
    self->_brailleElement = 0LL;

    -[VOTBrailleManager _resetBrailleCursor](self, "_resetBrailleCursor");
  }

  _AXSBrailleInputDeviceSetConnected(-[VOTBrailleManager bluetoothBrailleDisplayConnected](self, "bluetoothBrailleDisplayConnected", (void)v34));
  AXPerformBlockAsynchronouslyOnMainThread(&stru_100179A98, v33);
}

    goto LABEL_18;
  }

  return v29;
}

  return v9;
}
}

LABEL_4:
  _AXSVoiceOverTouchSetSpeakingRate(a3);
LABEL_7:
  -[VOTOutputManager resetSpeechRate](self, "resetSpeechRate");
}

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
    if (([v6 isEqualToString:kVOTEventCommandToggleMute] & 1) == 0)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
      if (([v7 isEqualToString:kVOTEventCommandToggleScreenCurtain] & 1) == 0)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
        if (([v8 isEqualToString:kVOTEventCommandCopySpeechToClipboard] & 1) == 0)
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
          if (([v9 isEqualToString:kVOTEventCommandStartHelp] & 1) == 0)
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
            if (([v10 isEqualToString:kVOTEventCommandItemChooser] & 1) == 0)
            {
              v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
              if (([v11 isEqualToString:kVOTEventCommandFirstElement] & 1) == 0)
              {
                uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
                if (([v12 isEqualToString:kVOTEventCommandLastElement] & 1) == 0)
                {
                  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
                  if (([v13 isEqualToString:kVOTEventCommandCenterElement] & 1) == 0)
                  {
                    v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
                    if (([v16 isEqualToString:kVOTEventCommandIdle] & 1) == 0)
                    {
                      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
                      v15 = [v14 isEqualToString:kVOTEventCommandTracking];

                      if ((v15 & 1) == 0) {
                        goto LABEL_24;
                      }
                      goto LABEL_23;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

LABEL_23:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

LABEL_13:
  if (fabs(v7 + -3.40282347e38) < 2.22044605e-16)
  {
    [(id)VOTSharedWorkspace speechRateFromSettings];
    id v7 = v18;
  }

  return v7;
}
    }
  }

  __int128 v23 = 1;
LABEL_16:

  return v23;
}
}

  return (v9 | v10) & 1;
}

    id v6 = ++v7 >= v5;
    if (v5 == v7) {
      goto LABEL_19;
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 attributeValueForKey:UIAccessibilityCustomRotorActionIdentifierToken]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v11 attributeValueForKey:UIAccessibilityCustomRotorActionIdentifierToken]);
  id v14 = (void *)v13;
  if (v12) {
    v15 = v13 == 0;
  }
  else {
    v15 = 1;
  }
  if (v15 || [v12 isEqualToString:v13])
  {

    goto LABEL_13;
  }

LABEL_18:
LABEL_19:

  return v6;
}

  v16 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _convertTextMarkerArrayToString:addInContentExtras:]( self,  "_convertTextMarkerArrayToString:addInContentExtras:",  v9,  v5,  (void)v20));
  v17 = v16;
  if ((v11 & 1) != 0 || [v16 rangeOfString:@"\n"] == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v18 = v17;
  }

  else
  {
    lineArray = self->_lineArray;
    self->_lineArray = 0LL;

    uint64_t v18 = 0LL;
  }

  return v18;
}

    if ([v22 isSafari])
    {
      v10 = kAXWebContentTrait;
      if (([v9 doesHaveTraits:kAXWebContentTrait] & 1) == 0)
      {
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v11 = (id)objc_claimAutoreleasedReturnValue([v9 elementsInDirection:1 withCount:10]);
        uint64_t v12 = [v11 countByEnumeratingWithState:&v26 objects:v41 count:16];
        if (v12)
        {
          uint64_t v13 = *(void *)v27;
          while (2)
          {
            for (i = 0LL; i != v12; i = (char *)i + 1)
            {
              if (*(void *)v27 != v13) {
                objc_enumerationMutation(v11);
              }
              v15 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
              if ([v15 doesHaveTraits:v10])
              {
                uint64_t v18 = v15;

                uint64_t v9 = v18;
                goto LABEL_26;
              }
            }

            uint64_t v12 = [v11 countByEnumeratingWithState:&v26 objects:v41 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }

  -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:]( self,  "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:",  v9,  [v9 shouldPlaySoundWhenFocused],  0,  0);
LABEL_15:
}
}

  char v19 = (VOTElement *)objc_claimAutoreleasedReturnValue([v8 objectAtIndex:v10]);
  __int128 v20 = self->_autofillCurrentElement;
  self->_autofillCurrentElement = v19;

  __int128 v21 = self->_autofillCurrentElement;
  __int128 v22 = self->_autofillCurrentElement;
  __int128 v23 = !v4;
  v16 = 1;
  if (v23) {
    v24 = 1LL;
  }
  else {
    v24 = 2LL;
  }
  v29 = _NSConcreteStackBlock;
  v30 = 3221225472LL;
  v31 = sub_10006D814;
  v32 = &unk_100176DA8;
  v33 = self;
  v25 = v21;
  v34 = v25;
  -[VOTElement scrollToElementForDirectional:withCompletion:]( v22,  "scrollToElementForDirectional:withCompletion:",  v24,  &v29);
  v26 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v25, "label", v29, v30, v31, v32, v33));
  if ([v26 length])
  {
    v27 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    -[VOTElement addTextualInformationToRequest:options:dataPackage:]( v25,  "addTextualInformationToRequest:options:dataPackage:",  v27,  6LL,  0LL);
    -[VOTElementManager sendRequest:](self, "sendRequest:", v27);
  }

  self->_flags.tapShouldHandleAutofill = 1;

LABEL_19:
  return v16;
}
}

  return v12;
}
  }

  return v8;
}
}

    v15 = 0;
    goto LABEL_14;
  }

  id v7 = IOHIDEventGetIntegerValue(v6, 720903LL);
  id v8 = IOHIDEventGetPhase(v6);
  uint64_t v9 = IOHIDEventGetIntegerValue(v6, 720897LL);
  if ((unint64_t)(v9 - 1) > 2)
  {
    v11 = 0LL;
    if (v7)
    {
LABEL_18:
      if ((v7 & 2) != 0 && (v8 & 2) != 0)
      {
        v17 = 2;
      }

      else if ((v7 & 0x20000) != 0)
      {
        v17 = 3;
      }

      else if ((v7 & 2) != 0 && (v8 & 1) != 0)
      {
        v17 = 4;
      }

      else
      {
        char v19 = (v7 >> 1) & ((v8 & 4) >> 2);
        if (v19) {
          v17 = 5;
        }
        else {
          v17 = 0;
        }
        if ((v7 & 2) != 0 && (v19 & 1) == 0) {
          v17 = (v8 << 28 >> 31) & 6;
        }
      }

      goto LABEL_49;
    }
  }

  else
  {
    v11 = qword_100132CF8[v9 - 1];
    if (v7) {
      goto LABEL_18;
    }
  }

  if ((v8 & 0x80) == 0) {
    goto LABEL_18;
  }
  v17 = 1;
LABEL_49:
  __int128 v21 = VOTLogEvent(v9, v10);
  __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v11));
    *(_DWORD *)buf = 138412290;
    v30 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Handling event button: %@", buf, 0xCu);
  }

  else {
    v24 = 3LL;
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1000AC5F8;
  v28[3] = &unk_100176D38;
  v28[4] = self;
  v25 = objc_retainBlock(v28);
  v26 = v25;
  if (v24)
  {
    switch(v17)
    {
      case 1:
        *((_BYTE *)&self->_menuButtonInterceptor + 5 * v24 + 3) = 1;
        -[VOTEventFactory setAudioAccTapDownEventForRepost:](self, "setAudioAccTapDownEventForRepost:", v4);
        ++self->_audioAccTouchGeneration;
        break;
      case 2:
        *((_BYTE *)&self->_menuButtonInterceptor + 5 * v24 + 4) = 1;
        break;
      case 3:
        -[VOTEventFactory setAudioAccTapUpEventForRepost:](self, "setAudioAccTapUpEventForRepost:", v4);
        *((_BYTE *)&self->_menuButtonInterceptor + 5 * v24 + 5) = 1;
        break;
      case 4:
        *((_BYTE *)&self->_menuButtonInterceptor + 5 * v24 + 6) = 1;
        -[VOTEventFactory setAudioAccHeldEventForRepost:](self, "setAudioAccHeldEventForRepost:", v4);
        break;
      case 5:
      case 6:
        v27 = &self->_audioAccButtonStates[v24 - 1];
        if (v27->heldDown) {
          v27->heldUp = 1;
        }
        if (v27->tapDown) {
          self->_audioAccButtonStates[v24 - 1].tapUp = 1;
        }
        ((void (*)(void *))v25[2])(v25);
        -[VOTEventFactory setAudioAccHeldUpEventForRepost:](self, "setAudioAccHeldUpEventForRepost:", v4);
        break;
      default:
        break;
    }
  }

  -[VOTEventFactory _audioAccProcessTapUpdates](self, "_audioAccProcessTapUpdates");

  v15 = 1;
LABEL_14:

  return v15;
}

    if (-[SCRCTargetSelectorTimer isPending](self->_systemControlLocationTimer, "isPending")
      && (-[SCRCTargetSelectorTimer isCancelled](self->_systemControlLocationTimer, "isCancelled") & 1) == 0)
    {
      if (SCRCMathGetDistanceBetweenPoints(self->_systemControlStartPoint.x, self->_systemControlStartPoint.y, x, y) > 20.0)
      {
        self->_systemControlStartPoint = CGPointZero;
        self->_systemControlPosition = 0;
        -[SCRCTargetSelectorTimer cancel](self->_systemControlLocationTimer, "cancel");
      }
    }

    else
    {
      -[VOTEventFactory _averagePointForLastDownEvent](self, "_averagePointForLastDownEvent");
      if (SCRCMathGetDistanceBetweenPoints(v14, v15, x, y) <= 30.0)
      {
        Current = CFAbsoluteTimeGetCurrent();
        -[VOTGestureEvent time](self->_lastDownEvent, "time");
        if (Current - v17 <= 1.75)
        {
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory currentElement](self, "currentElement"));
          char v19 = [v18 doesHaveTraits:kAXKeyboardKeyTrait];
          [v18 frame];
          if (!v19 || (v33.x = x, v33.y = y, !CGRectContainsPoint(*(CGRect *)&v20, v33)))
          {
            if (!self->_systemControlActivated)
            {
              self->_systemControlStartPoint.x = x;
              self->_systemControlStartPoint.y = y;
              self->_systemControlPosition = v9;
              -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_systemControlLocationTimer,  "dispatchAfterDelay:",  self->_systemControlFingerDownFollowupTime);
            }
          }
        }
      }
    }

    return 0;
  }

  if (self->_systemControlStartSwipeTime == -3061152000.0) {
    self->_systemControlStartSwipeTime = CFAbsoluteTimeGetCurrent();
  }
  SCRCMathGetVectorAndDistanceForPoints( &v31,  &v32,  self->_systemControlStartPoint.x,  self->_systemControlStartPoint.y,  x,  y);
  if (v32 <= 37.5 || CFAbsoluteTimeGetCurrent() - self->_systemControlStartSwipeTime >= 0.65)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_systemControlStartSwipeTime <= 0.65) {
      return 0;
    }
    -[VOTEventFactory _resetSystemControlStatus](self, "_resetSystemControlStatus");
    goto LABEL_13;
  }

  v10 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  v11 = 0.0;
  uint64_t v12 = v11 + v31;
  v31 = v12;
  uint64_t v13 = 360.0;
  if (v12 <= 360.0)
  {
    if (v12 >= 0.0) {
      goto LABEL_31;
    }
  }

  else
  {
    uint64_t v13 = -360.0;
  }

  uint64_t v12 = v12 + v13;
  v31 = v12;
LABEL_31:
  systemControlPosition = self->_systemControlPosition;
  switch(systemControlPosition)
  {
    case 1:
    case 5:
      if (fabs(v12 + -270.0) < 20.0) {
        goto LABEL_43;
      }
      if (systemControlPosition != 3)
      {
        if (systemControlPosition != 4) {
          return 0;
        }
LABEL_35:
        if (v12 <= 340.0 && v12 >= 20.0) {
          return 0;
        }
LABEL_43:
        v30 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent touchEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "touchEventWithCommand:info:",  kVOTEventCommandTracking,  0LL,  *(void *)&v31));
        objc_msgSend(v30, "setTouchPoint:", x, y);
        [v30 setObject:self->_currentGestureEvent forIndex:108];
        -[VOTEventFactory _sendSystemControlEvent:](self, "_sendSystemControlEvent:", v30);

        return 1;
      }

    abort();
  }

id sub_10000F9BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) performSelector:"_resumeCurrentRequest" withThreadKey:*(void *)(*(void *)(a1 + 32) + 136) count:0 objects:0];
}

void sub_10000FD44(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 112) cancel];
  uint64_t v4 = VOTLogAudio(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 128LL);
    int v14 = 134218498;
    CFAbsoluteTime v15 = Current;
    __int16 v16 = 2114;
    uint64_t v17 = v7;
    __int16 v18 = 2114;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "TRY ACTIVATE: %f [new user:%{public}@] %{public}@",  (uint8_t *)&v14,  0x20u);
  }

  if (([*(id *)(a1 + 32) audioSessionActive] & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 32) toggleAudioSessionActive:1];
    uint64_t v11 = VOTLogAudio(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      CFAbsoluteTime v13 = CFAbsoluteTimeGetCurrent();
      int v14 = 134217984;
      CFAbsoluteTime v15 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "ACTIVATE audio session: %f",  (uint8_t *)&v14,  0xCu);
    }
  }

void sub_10000FFF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_100010024(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 128) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000100F0(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  [*(id *)(*(void *)(a1 + 32) + 128) removeObject:*(void *)(a1 + 40)];
  else {
    double v3 = 1.0;
  }
  id v4 = [(id)VOTSharedWorkspace screenOn];
  double v6 = 0.0;
  if ((_DWORD)v4)
  {
    uint64_t v7 = VOTLogAudio(v4, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_1000EF03C(v2, v8);
    }

    id v4 = [*v2 externalAudioRouteSelected];
    if ((_DWORD)v4)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
      unsigned __int8 v10 = [v9 isOtherAudioPlaying];

      if ((v10 & 1) == 0)
      {
        uint64_t v11 = VOTLogAudio(v4, v5);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          sub_1000EEFFC(v12);
        }

        id v4 = [*v2 isRouteAirplayMirroring];
        if ((_DWORD)v4)
        {
          CFAbsoluteTime v13 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVOTAudio sharedInstance](&OBJC_CLASS___AXSubsystemVOTAudio, "sharedInstance"));
          unsigned __int8 v14 = [v13 ignoreLogging];

          if ((v14 & 1) == 0)
          {
            CFAbsoluteTime v15 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVOTAudio identifier](&OBJC_CLASS___AXSubsystemVOTAudio, "identifier"));
            uint64_t v16 = AXLoggerForFacility();
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);

            os_log_type_t v18 = AXOSLogLevelFromAXLogLevel(2LL);
            if (os_log_type_enabled(v17, v18))
            {
              uint64_t v19 = AXColorizeFormatLog(2LL, @"Air play mirroring detected, setting session timeout to %f");
              __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              uint64_t v21 = _AXStringForArgs(v20);
              __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
              if (os_log_type_enabled(v17, v18))
              {
                *(_DWORD *)buf = 138543362;
                double v31 = *(double *)&v22;
                _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}@", buf, 0xCu);
              }
            }
          }

          double v3 = 120.0;
        }

        else
        {
          double v3 = v3 * 6.0;
          double v6 = v3;
          if (v3 <= 0.0) {
            goto LABEL_23;
          }
        }
      }
    }

    else {
      double v6 = v3;
    }
  }

LABEL_23:
  uint64_t v23 = VOTLogAudio(v4, v5);
  v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    double v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Audio session de-activate delay: %f", buf, 0xCu);
  }

  uint64_t v25 = *(void *)(a1 + 32);
  v26 = *(void **)(a1 + 40);
  v27 = *(void **)(v25 + 112);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1000103DC;
  v28[3] = &unk_100176DA8;
  v28[4] = v25;
  id v29 = v26;
  [v27 afterDelay:v28 processBlock:v6];
}

    v30 = -[VOTOutputSpeechComponent _processActionForLiteralEmojis:](self, "_processActionForLiteralEmojis:", v47);
    v39 = v47;
    v35 = v28 & ~v30;
    goto LABEL_26;
  }

  if (v30) {
    goto LABEL_23;
  }
  v35 = 1;
LABEL_25:
  v39 = v47;
LABEL_26:
  v40 = (void *)objc_claimAutoreleasedReturnValue([v39 string]);
  if ([v40 length] == (id)1) {
    v41 = v34;
  }
  else {
    v41 = 1;
  }
  if (((v30 | v46 | v41 | v33 | v32 | v31) & 1) == 0 || v35)
  {

    goto LABEL_35;
  }

  v42 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForVariant:42]);

  if (v42)
  {
LABEL_35:
    -[VOTOutputSpeechComponent _speakAsLiteralText:](self, "_speakAsLiteralText:", v47);
    goto LABEL_36;
  }

  v43 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForVariant:64]);
  v44 = [v43 BOOLValue];

  if (v44)
  {
    -[VOTOutputSpeechComponent _speakAsPhoneticText:](self, "_speakAsPhoneticText:", v47);
  }

  else
  {
    v45 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForVariant:29]);
    if (v45) {
      -[VOTOutputSpeechComponent _speakAsMixOfLiteralAndNormalText:withLiteralRanges:]( self,  "_speakAsMixOfLiteralAndNormalText:withLiteralRanges:",  v47,  v45);
    }
    else {
      -[VOTOutputSpeechComponent _speakAsNormalText:](self, "_speakAsNormalText:", v47);
    }
  }

  -[VOTElement minValue](self, "minValue");
  v34 = v33;
  -[VOTElement maxValue](self, "maxValue");
  v36 = v35;
  if (!-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", v19) || v34 <= 0.0 && v36 <= 0.0) {
    goto LABEL_41;
  }
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner localizedScannerWithString:](&OBJC_CLASS___NSScanner, "localizedScannerWithString:", v25));
  v95 = 0.0;
  if ([v37 scanFloat:&v95] && objc_msgSend(v37, "isAtEnd"))
  {
    v38 = (v95 - v34) / (v36 - v34);
    v39 = v38;
    v40 = AXFormatFloatWithPercentage(1LL, v39);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    v42 = v41;
    if (fabs(-(v95 - v38 * 100.0)) >= 0.001)
    {
      v82 = v41;
      v83 = @"__AXStringForVariablesSentinel";
      v51 = __AXStringForVariables(v25);
      v43 = (id)objc_claimAutoreleasedReturnValue(v51);
    }

    else
    {
      if (v34 != 0.0 || v36 != 100.0) {
        goto LABEL_39;
      }
      v43 = v41;
    }

    v52 = v43;

    uint64_t v25 = v52;
LABEL_39:
  }

LABEL_41:
  v53 = -[VOTElement applySelectedText:language:](self, "applySelectedText:language:", v10, v12, v82, v83);
  if ([v25 length] && (v53 & 1) == 0)
  {
    if ([v25 isAXAttributedString])
    {
      v54 = v25;
      if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXLinkTrait))
      {
        v97 = UIAccessibilityTokenLink;
        v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v97, 1LL));
        [v54 removeAttributes:v55];
      }

      v56 = UIAccessibilityTokenSpeakValuePartOnDifference;
      if ([v54 hasAttribute:UIAccessibilityTokenSpeakValuePartOnDifference])
      {
        v85 = v25;
        v86 = v11;
        v87 = v10;
        v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
        v58 = [v54 length];
        v92[0] = _NSConcreteStackBlock;
        v92[1] = 3221225472LL;
        v92[2] = sub_1000A1DCC;
        v92[3] = &unk_100176C60;
        v59 = v57;
        v93 = v59;
        v84 = v54;
        v60 = v54;
        v94 = v60;
        objc_msgSend(v60, "enumerateAttribute:inRange:options:usingBlock:", v56, 0, v58, 0, v92);
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v61 = v59;
        v62 = [v61 countByEnumeratingWithState:&v88 objects:v96 count:16];
        if (v62)
        {
          v63 = v62;
          v64 = *(void *)v89;
          do
          {
            for (i = 0LL; i != v63; i = (char *)i + 1)
            {
              if (*(void *)v89 != v64) {
                objc_enumerationMutation(v61);
              }
              v66 = *(void *)(*((void *)&v88 + 1) + 8LL * (void)i);
              v67 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement previousSpokenValueParts](self, "previousSpokenValueParts"));
              v68 = [v67 containsObject:v66];

              if (v68)
              {
                v69 = (void *)objc_claimAutoreleasedReturnValue([v60 string]);
                v70 = [v69 rangeOfString:v66];
                v72 = v71;

                if (v70 != (id)0x7FFFFFFFFFFFFFFFLL) {
                  objc_msgSend(v60, "deleteCharactersInRange:", v70, v72);
                }
              }
            }

            v63 = [v61 countByEnumeratingWithState:&v88 objects:v96 count:16];
          }

          while (v63);
        }

        -[VOTElement setPreviousSpokenValueParts:](self, "setPreviousSpokenValueParts:", v61);
        uint64_t v11 = v86;
        unsigned __int8 v10 = v87;
        uint64_t v25 = v85;
        v54 = v84;
      }

      -[VOTElement _applyAttributesFromText:toRequest:withLanguage:]( self,  "_applyAttributesFromText:toRequest:withLanguage:",  v54,  v10,  v12);
    }

    else
    {
      v73 = [v10 addString:v25 withLanguage:v12];
      v74 = (void *)objc_claimAutoreleasedReturnValue([v10 lastAction]);
      [v74 setPerformPunctuationTranslation:1];

      v54 = (id)objc_claimAutoreleasedReturnValue([v10 lastAction]);
      [v54 setReplaceCommas:v15];
    }
  }

  if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXImageTrait) && ![v25 length])
  {
    LOWORD(v95) = 160;
    v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCharacters:length:]( &OBJC_CLASS___NSString,  "stringWithCharacters:length:",  &v95,  1LL));
    v76 = [v10 addString:v75];

    v77 = (void *)objc_claimAutoreleasedReturnValue([v10 lastAction]);
    v78 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self, "uiElement"));
    objc_msgSend(v77, "setObject:forVariant:", objc_msgSend(v78, "axElement"), 67);
  }

  if (-[VOTElement readingContentCausesPageTurn](self, "readingContentCausesPageTurn"))
  {
    v79 = (void *)objc_claimAutoreleasedReturnValue([v10 lastAction]);
    v80 = kCFBooleanTrue;
    [v79 setObject:kCFBooleanTrue forVariant:59];
  }

  else
  {
    v80 = kCFBooleanTrue;
  }

  v81 = (void *)objc_claimAutoreleasedReturnValue([v10 lastAction]);
  [v81 setObject:v80 forVariant:37];

LABEL_68:
}
}

id sub_1000103DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = VOTLogAudio(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unsigned int v5 = [*(id *)(a1 + 32) audioSessionActive];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 128LL);
    *(_DWORD *)buf = 67109634;
    unsigned int v19 = v5;
    __int16 v20 = 2114;
    uint64_t v21 = v6;
    __int16 v22 = 2114;
    uint64_t v23 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Attempt session deactivate. is active: %d - remove user: %{public}@, all users: %{public}@ ",  buf,  0x1Cu);
  }

  if (AXDeviceSupportsSonification())
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    if ([v8 isPlaying])
    {
      unsigned int v9 = 1;
    }

    else
    {
      unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
      unsigned int v9 = [v10 isScrubbing];
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  id result = [*(id *)(a1 + 32) audioSessionActive];
  if ((_DWORD)result)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 128) count];
    if (!result)
    {
      id result = [*(id *)(a1 + 32) isSpeaking];
      if ((_DWORD)result)
      {
        id result = [*(id *)(a1 + 32) isPaused];
      }

      else if ((v9 & 1) != 0)
      {
        return result;
      }

      id v12 = [*(id *)(a1 + 32) toggleAudioSessionActive:0];
      uint64_t v14 = VOTLogAudio(v12, v13);
      CFAbsoluteTime v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_1000EF0C4(v15);
      }

      uint64_t v16 = *(void *)(a1 + 32);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_1000105B4;
      v17[3] = &unk_100176D38;
      v17[4] = v16;
      return (id)AX_PERFORM_WITH_LOCK(v16 + 184, v17);
    }
  }

  return result;
}

void sub_1000105B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;
}

LABEL_18:
}

  unsigned __int8 v10 = v7 & 0xFFFFFFFB;
  if (v4) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = 0;
  }
  LODWORD(v7) = v10 | v11;
  -[VOTWorkspace _postKeyboardEventWithKeyCode:modifierState:isKeyDown:]( self,  "_postKeyboardEventWithKeyCode:modifierState:isKeyDown:",  224LL,  v10 | v11,  v4);
  if ((v5 & 8) != 0)
  {
LABEL_22:
    if (v4) {
      id v12 = 8;
    }
    else {
      id v12 = 0;
    }
    -[VOTWorkspace _postKeyboardEventWithKeyCode:modifierState:isKeyDown:]( self,  "_postKeyboardEventWithKeyCode:modifierState:isKeyDown:",  225LL,  v7 & 0xFFFFFFF7 | v12,  v4);
  }

  v37 = kAXRadioButtonTrait;
  if ((kAXRadioButtonTrait & v9) != 0)
  {
    v38 = sub_10004AE68(off_1001AC148, @"radio.button.text", @"button", v7);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    [v8 addObject:v39];

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v37));
    [v6 addObject:v40];
  }

  v41 = v178;
  if ((v26 & v9) == 0)
  {
    v42 = kAXTabButtonTrait;
    if ((kAXTabButtonTrait & v9) == kAXTabButtonTrait)
    {
      v43 = sub_10004AE68(off_1001AC148, @"tab.button.element.text", @"tab", v7);
      v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
      [v8 addObject:v44];

      v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v42));
      [v6 addObject:v45];
    }
  }

  v46 = kAXPopupButtonTrait;
  if ((kAXPopupButtonTrait & v9) != 0)
  {
    v47 = sub_10004AE68(off_1001AC148, @"popup.button.element.text", @"popup", v7);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    [v8 addObject:v48];

    v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v46));
    [v6 addObject:v49];
  }

  if ((v27 & v9) != 0)
  {
    if (-[VOTElement supportsPressedState](v178, "supportsPressedState"))
    {
      v50 = off_1001AC148;
      if (-[VOTElement isPressed](v178, "isPressed")) {
        v51 = @"pressed.button";
      }
      else {
        v51 = @"not.pressed.button";
      }
      if (-[VOTElement isPressed](v178, "isPressed")) {
        v52 = @"pressed";
      }
      else {
        v52 = @"not pressed";
      }
      v53 = sub_10004AE68(v50, v51, v52, v7);
      v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
      [v8 addObject:v54];

      v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v27));
      [v6 addObject:v55];
    }

    else
    {
      v55 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement toggleStatusLabel](v178, "toggleStatusLabel"));
      if (v55)
      {
        [v8 addObject:v55];
        v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v27));
        [v6 addObject:v56];
      }
    }
  }

  v57 = kAXHeaderTrait;
  if ((kAXHeaderTrait & v9) != 0)
  {
    if ((kAXWebContentTrait & v9) != 0) {
      v58 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](v178, "value"));
    }
    else {
      v58 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement headingLevelValue](v178, "headingLevelValue"));
    }
    v59 = v58;
    v60 = [v58 intValue];

    if (v60)
    {
      v61 = sub_10004AE68(off_1001AC148, @"element.header.text", @"heading", v7);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
      v63 = AXFormatInteger(v60);
      v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v62, v64));
      [v8 addObject:v65];
    }

    else
    {
      v66 = sub_10004AE68(off_1001AC148, @"element.header.text.nolevel", @"heading", v7);
      v62 = (void *)objc_claimAutoreleasedReturnValue(v66);
      [v8 addObject:v62];
    }

    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v57));
    [v6 addObject:v67];
  }

  v68 = kAXFooterTrait;
  if ((kAXFooterTrait & v9) != 0)
  {
    v69 = sub_10004AE68(off_1001AC148, @"element.footer.text", @"footer", v7);
    v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
    [v8 addObject:v70];

    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v68));
    [v6 addObject:v71];
  }

  v72 = kAXVisitedTrait;
  if ((kAXVisitedTrait & v9) != 0)
  {
    v73 = sub_10004AE68(off_1001AC148, @"element.visited.text", @"visited", v7);
    v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    [v8 addObject:v74];

    v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v72));
    [v6 addObject:v75];
  }

  v76 = kAXLinkTrait;
  if ((kAXLinkTrait & v9) != 0)
  {
    v77 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement linkedElement](v178, "linkedElement"));

    if (v77) {
      v78 = @"element.link.internal.text";
    }
    else {
      v78 = @"element.link.text";
    }
    v79 = sub_10004AE68(off_1001AC148, v78, @"link", v7);
    v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
    [v8 addObject:v80];

    v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v76));
    [v6 addObject:v81];
  }

  v82 = kAXPickerElementTrait;
  if ((kAXPickerElementTrait & v9) != 0)
  {
    v83 = sub_10004AE68(off_1001AC148, @"picker.element.text", @"picker", v7);
    v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
    [v8 addObject:v84];

    v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v82));
    [v6 addObject:v85];
  }

  v86 = kAXAdjustableTrait;
  if ((kAXAdjustableTrait & v9) != 0)
  {
    v87 = sub_10004AE68(off_1001AC148, @"incrementable.element.text", @"adjustable", v7);
    v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
    [v8 addObject:v88];

    v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v86));
    [v6 addObject:v89];
  }

  v90 = kAXImageTrait;
  if ((kAXImageTrait & v9) != 0
    && !-[VOTElement shouldSkipImageTraitDescription](v178, "shouldSkipImageTraitDescription"))
  {
    v91 = sub_10004AE68(off_1001AC148, @"image.element.text", @"image", v7);
    v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
    [v8 addObject:v92];

    v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v90));
    [v6 addObject:v93];
  }

  v94 = kAXMathEquationTrait;
  if ((kAXMathEquationTrait & v9) != 0
    && -[VOTElement shouldSpeakMathEquationTrait](v178, "shouldSpeakMathEquationTrait"))
  {
    v95 = sub_10004AE68(off_1001AC148, @"mathequation.element.text", @"math", v7);
    v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
    [v8 addObject:v96];

    v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v94));
    [v6 addObject:v97];
  }

  v98 = kAXSearchFieldTrait;
  if ((kAXSearchFieldTrait & v9) != 0)
  {
    v99 = sub_10004AE68(off_1001AC148, @"element.status.search.field", @"search", v7);
    v100 = (void *)objc_claimAutoreleasedReturnValue(v99);
    [v8 addObject:v100];

    v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v98));
    [v6 addObject:v101];
  }

  v102 = kAXTextEntryTrait;
  if ((kAXTextEntryTrait & v9) != 0 && ((kAXStaticTextTrait | v98) & v9) == 0)
  {
    if (((kAXTextAreaTrait | kAXWebContentTrait) & ~v9) != 0)
    {
      v106 = off_1001AC148;
      if ((kAXSecureTextFieldTrait & v9) != 0)
      {
        if (-[VOTElement isStrongPasswordField](v178, "isStrongPasswordField")) {
          v104 = @"element.strongpasswordfield.text";
        }
        else {
          v104 = @"element.securetextfield.text";
        }
        v105 = @"secure";
      }

      else
      {
        v104 = @"element.textentry.text";
        v105 = @"text field";
      }

      v103 = v106;
    }

    else
    {
      v103 = off_1001AC148;
      v104 = @"element.multiline.text";
      v105 = @"multi-line text field";
    }

    v107 = sub_10004AE68(v103, v104, v105, v7);
    v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
    [v8 addObject:v108];

    v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v102));
    [v6 addObject:v109];
  }

  v110 = kAXStatusBarElementTrait;
  if ((kAXStatusBarElementTrait & v9) != 0)
  {
    v111 = sub_10004AE68(off_1001AC148, @"element.status.bar.item", @"status bar item", v7);
    v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
    [v8 addObject:v112];

    v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v110));
    [v6 addObject:v113];
  }

  v114 = kAXDraggableTrait;
  if ((kAXDraggableTrait & v9) != 0)
  {
    v115 = sub_10004AE68(off_1001AC148, @"element.draggable.item", @"draggable", v7);
    v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
    [v8 addObject:v116];

    v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v114));
    [v6 addObject:v117];
  }

  v118 = kAXFolderIconTrait;
  if ((kAXFolderIconTrait & v9) != 0)
  {
    v119 = sub_10004AE68(off_1001AC148, @"element.folder.text", @"folder", v7);
    v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
    [v8 addObject:v120];

    v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v118));
    [v6 addObject:v121];
  }

  v122 = kAXWebInteractiveVideoTrait;
  if ((kAXWebInteractiveVideoTrait & v9) != 0)
  {
    v123 = sub_10004AE68(off_1001AC148, @"web.interactive.video.control.text", @"video playback", v7);
    v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
    [v8 addObject:v124];

    v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v122));
    [v6 addObject:v125];
  }

  v126 = kAXProminentIconTrait;
  if ((kAXProminentIconTrait & v9) != 0)
  {
    v127 = sub_10004AE68(off_1001AC148, @"element.prominent.icon", @"icon", v7);
    v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
    [v8 addObject:v128];

    v129 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v126));
    [v6 addObject:v129];
  }

  v130 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v178, "containerTypes"));
  if ([v130 containsObject:&off_1001879D0])
  {
    v131 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
    v132 = [v131 speakTableHeadersForElement:v178];

    if (v132)
    {
      if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  2LL))
      {
        v133 = sub_10004AE68(off_1001AC148, @"element.startOfTable.item", @"table", v7);
        v134 = (void *)objc_claimAutoreleasedReturnValue(v133);
        [v8 addObject:v134];

        [v6 addObject:&off_1001879E8];
        -[VOTElement setIsFirstItemInTable:](v178, "setIsFirstItemInTable:", 1LL);
      }

      else if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  2LL))
      {
        v135 = sub_10004AE68(off_1001AC148, @"element.endOfTable.item", @"table", v7);
        v136 = (void *)objc_claimAutoreleasedReturnValue(v135);
        [v8 addObject:v136];

        [v6 addObject:&off_1001879E8];
      }
    }
  }

  if (([v130 containsObject:&off_100187A00] & 1) != 0
    || [v130 containsObject:&off_100187A18])
  {
    if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  4LL)
      || -[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  0x2000LL))
    {
      v137 = sub_10004AE68(off_1001AC148, @"element.startOfList.item", @"list start", v7);
      v138 = (void *)objc_claimAutoreleasedReturnValue(v137);
      [v8 addObject:v138];

      -[VOTElement setIsFirstItemInList:](v178, "setIsFirstItemInList:", 1LL);
LABEL_101:
      [v6 addObject:&off_1001879E8];
      goto LABEL_102;
    }

    if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  4LL)
      || -[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  0x2000LL))
    {
      v155 = sub_10004AE68(off_1001AC148, @"element.endOfList.item", @"list end", v7);
      v156 = (void *)objc_claimAutoreleasedReturnValue(v155);
      [v8 addObject:v156];

      goto LABEL_101;
    }
  }

  self->_watchWakeTapCount = 0LL;
  -[NSMutableArray removeAllObjects](self->_snarfedWatchWakeRecords, "removeAllObjects", (void)v11);
}

void sub_100010DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 176) allValues]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100010E58;
  v6[3] = &unk_100176E98;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

uint64_t sub_100010E58(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_100010E6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) allValues]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100010F00;
  v6[3] = &unk_100176E98;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

uint64_t sub_100010F00(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 32));
}

void sub_100011394( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000113A4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_100011690(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001ACC18;
  qword_1001ACC18 = (uint64_t)v1;
}

void sub_100011754()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[VOTLockStateManager sharedInstance](&OBJC_CLASS___VOTLockStateManager, "sharedInstance"));
  [v0 _notifyObserversLockStateDidChange];
}

uint64_t sub_100012790(uint64_t a1)
{
  return CFPreferencesAppSynchronize(kAXSAccessibilityPreferenceDomain);
}

uint64_t sub_100012888(uint64_t a1)
{
  return CFPreferencesAppSynchronize(kAXSAccessibilityPreferenceDomain);
}

LABEL_9:
LABEL_10:
        uint64_t v16 = v28;
      }
    }
  }
}

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(-[UIElementProtocol arrayWithAXAttribute:](self->_uiElement, "arrayWithAXAttribute:", 2036LL));
  if (v9) {
    [v3 addObjectsFromArray:v9];
  }
  if (-[VOTElement remoteParentIsViewHost](self, "remoteParentIsViewHost"))
  {
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self, "application"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uiElement]);
    [v11 updateCache:2148];

    if (-[VOTElement shouldAddAlternateActionForLinkElement](self, "shouldAddAlternateActionForLinkElement"))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      uint64_t v13 = sub_10004AE68(off_1001AC148, @"action.open.other.side", @"action.open.other.side", v12);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v19[0] = @"CustomActionName";
      v19[1] = @"CustomActionIdentifier";
      v20[0] = v14;
      v20[1] = @"alternateActionForURLIdentifier";
      CFAbsoluteTime v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  2LL));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v15));

      [v3 addObject:v16];
    }
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 axMapObjectsUsingBlock:&stru_1001770F8]);

  return v17;
}

  [v3 appendString:@"Traits|"];
  if ((v5 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (!v5)
  {
    uint64_t v6 = @"None|";
LABEL_11:
    [v3 appendString:v6];
  }

  uiElement = self->_uiElement;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self, "application"));
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"VOTElement %p { %@ } %@ %@",  self,  uiElement,  v9,  v3));

  return (NSString *)v10;
}

  *os_log_type_t v18 = v30 >= v25;
}

  ;
}

    uint64_t v8 = -[VOTElement initWithAXElement:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithAXElement:", v8);
    unsigned int v9 = 0LL;
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }

  return v5;
}

  return v6;
}

  if (-[VOTBrailleGestureTranslator areDotNumberPositionsCalibrated]( self->_gestureTranslator,  "areDotNumberPositionsCalibrated")
    || (uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance")),
        uint64_t v17 = [v16 voiceOverTouchBrailleGesturesDidPlayCalibrationHint],
        v16,
        (v17 & 1) != 0))
  {
    os_log_type_t v18 = 0LL;
  }

  else
  {
    if (-[VOTBrailleGestureManager _deviceSupportsMoreThanFiveTouches](self, "_deviceSupportsMoreThanFiveTouches")) {
      __int16 v22 = @"braille.calibrate.instructions.ideal";
    }
    else {
      __int16 v22 = @"braille.calibrate.instructions.fallback";
    }
    uint64_t v23 = sub_10004A988(off_1001AC148, v22, 0LL);
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue(v23);
  }

  -[VOTBrailleGestureManager _speakText:hint:](self, "_speakText:hint:", v24, v18);
  -[VOTBrailleGestureManager setDidAnnounceBrailleTypingProperties:]( self,  "setDidAnnounceBrailleTypingProperties:",  1LL);
}

void sub_100012FB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100012FDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateAudioSessionProperties];
}

LABEL_7:
  return soundChannels;
}

    uint64_t v8 = 0;
    goto LABEL_8;
  }

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tutorialRestrictedCommands](self, "tutorialRestrictedCommands"));
  unsigned __int8 v10 = [v9 containsObject:v4];

  if (v10) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v8 = 1;
LABEL_8:

  return v8;
}
}

  self->_flags.elementCenterSoundPlaying = 0;
}

  return v5;
}

  return v6;
}

  return (NSString *)v9;
}

id sub_100013D88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelHelperFired:*(void *)(a1 + 40)];
}

uint64_t sub_100013D94(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  id v2 = [*(id *)(a1 + 32) _finishedPlaying];
  uint64_t v4 = VOTLogAudio(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1000EF510(v1, v5, v6, v7, v8, v9, v10, v11);
  }

  *(_BYTE *)(*(void *)v1 + 136LL) = 0;
  uint64_t v14 = VOTLogAudio(v12, v13);
  CFAbsoluteTime v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
    sub_1000EF4D0(v15);
  }

  int inPropertyData = 0;
  return AudioServicesSetProperty(0x61637421u, 4u, (const void *)(*(void *)v1 + 32LL), 4u, &inPropertyData);
}

void sub_100013FFC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100014008( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100014B38(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSLock);
  id v2 = (void *)qword_1001ACC50;
  qword_1001ACC50 = (uint64_t)v1;

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSLock);
  uint64_t v4 = (void *)qword_1001ACC58;
  qword_1001ACC58 = (uint64_t)v3;
}

void sub_100014C3C(id a1)
{
  id v3 = objc_alloc_init(&OBJC_CLASS___AXUIMockElement);
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v3));
  id v2 = (void *)qword_1001ACC38;
  qword_1001ACC38 = v1;
}

void sub_100014C8C(uint64_t a1)
{
  id v1 = objc_allocWithZone(*(Class *)(a1 + 32));
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AXUIElement uiSystemWideApplication](&OBJC_CLASS___AXUIElement, "uiSystemWideApplication"));
  id v2 = [v1 initWithUIElement:v4];
  id v3 = (void *)qword_1001ACC38;
  qword_1001ACC38 = (uint64_t)v2;
}

void sub_100014E30(id a1)
{
}

void sub_100014F58(id a1)
{
}

void sub_100016654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10001666C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001667C(uint64_t a1)
{
}

void sub_100016684(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 localOpaqueParent]);
  if (v3)
  {
    id v4 = v3;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), v3);
    id v3 = v4;
  }
}

void sub_100016A40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100016A58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:UIAccessibilityTokenReplaceWithWiFiSSID]);
  unsigned int v8 = [v7 BOOLValue];

  if (v8)
  {
    objc_msgSend( *(id *)(a1 + 32),  "replaceCharactersInRange:withString:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) + a3,  a4,  *(void *)(a1 + 40));
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += (char *)[*(id *)(a1 + 40) length] - a4;
  }

LABEL_15:
  return v3;
}

        -[VOTOutputSpeechComponent _didStartSpeakingAction:](self, "_didStartSpeakingAction:", v4);
        -[VOTOutputSpeechComponent _notifyDidFinishSpeakingWithFakeRequestForEvent:]( self,  "_notifyDidFinishSpeakingWithFakeRequestForEvent:",  v4);
LABEL_16:

        goto LABEL_22;
      }

      uint64_t v25 = v147;
    }

    goto LABEL_15;
  }

  v33 = (void *)objc_claimAutoreleasedReturnValue([v13 outputRequest]);
  [v33 setStartedRequest:1];

  v36 = VOTLogAudio(v34, v35);
  v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v157 = v14;
    *(_WORD *)&v157[4] = 1024;
    *(_DWORD *)&v157[6] = v15;
    LOWORD(v15_Block_object_dispose(va, 8) = 1024;
    *(_DWORD *)((char *)&v158 + 2) = v16;
    HIWORD(v15_Block_object_dispose(va, 8) = 1024;
    *(_DWORD *)v159 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "VO muted for reason: speech muted: %d, vo is idle: %d, activity says so: %d, siri talking: %d",  buf,  0x1Au);
  }

  if ((-[TTSSpeechSynthesizer isSpeaking](self->_synthesizer, "isSpeaking") & 1) == 0) {
    -[VOTOutputSpeechComponent _notifyDidFinishSpeakingWithFakeRequestForEvent:]( self,  "_notifyDidFinishSpeakingWithFakeRequestForEvent:",  v4);
  }
  [v13 setObject:&__kCFBooleanTrue forVariant:82];
LABEL_22:
}

      uint64_t v12 = -1LL;
LABEL_16:
      uint64_t v13 = self->_customContentIndex + v12;
      if (v11 >= v13) {
        uint64_t v11 = v13;
      }
      goto LABEL_18;
    }

    uint64_t v11 = 0LL;
    goto LABEL_18;
  }

  if (a4 != 2) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v9 = (char *)[v6 count];
  uint64_t v11 = (unint64_t)(v9 - 1);
LABEL_18:
  self->_customContentIndex = v11;
  uint64_t v14 = VOTLogAudio(v9, v10);
  CFAbsoluteTime v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = self->_customContentIndex;
    v27[0] = 67109120;
    v27[1] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Content: %d", (uint8_t *)v27, 8u);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:self->_customContentIndex]);
  os_log_type_t v18 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
  unsigned int v19 = objc_alloc(&OBJC_CLASS___AXAttributedString);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v17 attributedValue]);
  uint64_t v21 = [v19 initWithStringOrAttributedString:v20];
  __int16 v22 = [v18 addAttributedString:v21 withLanguage:v7];

  uint64_t v23 = objc_alloc(&OBJC_CLASS___AXAttributedString);
  v24 = (void *)objc_claimAutoreleasedReturnValue([v17 attributedLabel]);
  uint64_t v25 = [v23 initWithStringOrAttributedString:v24];
  v26 = [v18 addAttributedString:v25 withLanguage:v7];

  [v18 setGeneratesBraille:1];
  [v18 setBrailleType:1];
  -[VOTElementManager sendRequest:](self, "sendRequest:", v18);
  -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");

LABEL_21:
}

      goto LABEL_16;
    }

    CFAbsoluteTime v15 = -[VOTElement _elementActionsEquivalent:withElement:](self, "_elementActionsEquivalent:withElement:", v7, v8);
LABEL_14:

    uint64_t v12 = v15;
    goto LABEL_15;
  }

  uint64_t v12 = 0;
LABEL_17:

  return v12;
}

    uint64_t v23 = 0;
LABEL_17:

    uint64_t v16 = v60;
    goto LABEL_18;
  }

  __int16 v22 = -[BRLTTable isEqual:](self->_currentDefaultTable, "isEqual:", self->_currentSetTable);
  uint64_t v23 = 0;
LABEL_18:
  v33 = AXLogBrailleHW(v22);
  v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    v65 = v14;
    v66 = 1024;
    v67 = [v15 intValue];
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "set braille string: %{private}@ type: %d",  buf,  0x12u);
  }

  switch([v15 intValue])
  {
    case 1u:
      if ([v14 length])
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue([v14 attributesAtIndex:0 effectiveRange:0]);
        v36 = (void *)objc_claimAutoreleasedReturnValue([v35 allKeys]);
        v37 = [v36 containsObject:kSCROTokenAttribute];

        if ((v37 & 1) == 0)
        {
          v38 = kSCROTokenAttribute;
          v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  self->_brailleElementIndex));
          objc_msgSend(v14, "addAttribute:value:range:", v38, v39, 0, objc_msgSend(v14, "length"));
        }
      }

      -[SCROBrailleClient setMainAttributedString:](self->_brailleClient, "setMainAttributedString:", v14);
      goto LABEL_31;
    case 2u:
      brailleClient = self->_brailleClient;
      v41 = (void *)objc_claimAutoreleasedReturnValue([v14 string]);
      [v16 doubleValue];
      -[SCROBrailleClient setAlertString:timeout:priority:]( brailleClient,  "setAlertString:timeout:priority:",  v41,  [v61 intValue],  v42);
      goto LABEL_30;
    case 3u:
      if (![v14 length]) {
        goto LABEL_36;
      }
      v43 = self->_brailleClient;
      v41 = (void *)objc_claimAutoreleasedReturnValue([v14 string]);
      -[SCROBrailleClient setAnnouncementString:](v43, "setAnnouncementString:", v41);
LABEL_30:

LABEL_31:
      v44 = 1LL;
      break;
    case 4u:
      if (v62)
      {
        self->_brailleLineRange.location = (NSUInteger)[v62 rangeValue];
        self->_brailleLineRange.length = v45;
        v46 = self;
        v47 = 1LL;
      }

      else
      {
        v46 = self;
        v47 = 0LL;
      }

      -[VOTBrailleManager _refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:]( v46,  "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:",  0LL,  v47,  0LL);
      goto LABEL_36;
    default:
LABEL_36:
      v44 = 0LL;
      break;
  }

  -[VOTBrailleManager _updateStatusCells](self, "_updateStatusCells");
  -[SCROBrailleClient displayIfNeeded](self->_brailleClient, "displayIfNeeded");
  v48 = (void *)objc_claimAutoreleasedReturnValue(-[VOTBrailleManager brailleStringSetCallback](self, "brailleStringSetCallback"));

  if (v48)
  {
    v49 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue( -[VOTBrailleManager brailleStringSetCallback]( self,  "brailleStringSetCallback"));
    ((void (**)(void, id, id, uint64_t))v49)[2](v49, v14, [v15 intValue], v44);
  }

  if (v23) {
    -[VOTBrailleManager _setBrailleTable:](self, "_setBrailleTable:", v63);
  }
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  v51 = [v50 ignoreLogging];

  if ((v51 & 1) == 0)
  {
    v52 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    v53 = AXLoggerForFacility(v52);
    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);

    v55 = AXOSLogLevelFromAXLogLevel(3LL);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = AXColorizeFormatLog(3LL, @"BRAILLE[%{private}@]: %{private}@");
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      v58 = _AXStringForArgs(v57);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v54, v55))
      {
        *(_DWORD *)buf = 138543362;
        v65 = v59;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}@", buf, 0xCu);
      }
    }
  }
}

        uint64_t v7 = *v6;
        if (!v7) {
          goto LABEL_17;
        }
        unsigned int v8 = v7;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
        id v5 = [v9 handleCommandIfActiveBrailleRelated:v8];

        break;
    }
  }

  else
  {
LABEL_17:
    id v5 = 0;
  }

  return v5;
}

    uint64_t v16 = 0LL;
    if ((v9 & 8) != 0)
    {
LABEL_11:
      uint64_t v17 = a4;
      os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue([v31 fourthDot]);
      unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue( -[VOTBrailleGestureDataRepository _adjustPointValue:withDrift:]( v30,  "_adjustPointValue:withDrift:",  v18,  v12,  v13));
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[VOTBrailleGestureHalfPattern halfPatternWithTopDot:middleDot:bottomDot:fourthDot:]( &OBJC_CLASS___VOTBrailleGestureHalfPattern,  "halfPatternWithTopDot:middleDot:bottomDot:fourthDot:",  v14,  v15,  v16,  v19));

      a4 = v17;
      a3 = v22;
      if ((v9 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000178D4(id a1)
{
  id v3 = objc_alloc_init(&OBJC_CLASS___AXUIMockElement);
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v3));
  id v2 = (void *)qword_1001ACC98;
  qword_1001ACC98 = v1;
}

LABEL_30:
      uint64_t v14 = v10;
LABEL_31:
      CFAbsoluteTime v15 = sub_10004AE68(v9, v10, v14, v7);
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v15);
LABEL_32:

      return v4;
    }
  }

  id v4 = 0LL;
  return v4;
}

  if (-[VOTElementManager _handleMovementForElementFollowingElement:direction:unit:mode:]( self,  "_handleMovementForElementFollowingElement:direction:unit:mode:",  v92,  a4,  a5,  1LL))
  {
    goto LABEL_87;
  }

  if ([v92 readingContentCausesPageTurn])
  {
    v28 = self;
    id v29 = a4;
    v30 = a5;
LABEL_33:
    if (-[VOTElementManager _handleBookNavigateOverPageBoundary:unit:]( v28,  "_handleBookNavigateOverPageBoundary:unit:",  v29,  v30))
    {
      goto LABEL_87;
    }
  }

LABEL_19:
        uint64_t v17 = (char *)v17 + 1;
      }

      while (v14 != v17);
      uint64_t v14 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    }

    while (v14);
  }

  return v35;
}

        id v5 = v14;
      }
    }

    [v5 setString:v4];
  }
}

    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
    uint64_t v21 = (uint64_t)[v20 notificationCount];

    if (v21 >= 1)
    {
      __int16 v22 = [(id)VOTSharedWorkspace userRecentlyUnlockedDevice] ^ 1;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
      v32 = objc_claimAutoreleasedReturnValue([v23 notificationSummary:v22]);

      v24 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      uint64_t v25 = sub_10004AE68(off_1001AC148, @"number.of.alerts", 0LL, v24);
      v26 = v11;
      v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v27,  v21));

      if (v26 == (id)1)
      {
        id v29 = (void *)v32;
      }

      else
      {
        if (v16 && ([(id)VOTSharedWorkspace userUnlockedDevice] & 1) == 0)
        {
          *a5 = v16;
          [v8 removeActions];
        }

        id v29 = (void *)v32;
        if (v26 == (id)16) {
          [v8 setLimitToComponentType:3];
        }
      }
    }
  }

  else
  {
    self->_lastSilencedAlertTime = CFAbsoluteTimeGetCurrent();
    *a4 = 0;
  }
}
}

  v30 = objc_autoreleasePoolPush();
  [(id)VOTSharedWorkspace handleSystemWideServerDied];
  objc_autoreleasePoolPop(v30);
  return 0;
}

  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTDirectInteractionKeyboardManager delegate](self, "delegate"));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 currentElement]);

  if (-[VOTDirectInteractionKeyboardManager isEmojiKeyboard](self, "isEmojiKeyboard")
    && -[VOTDirectInteractionKeyboardManager isEmojiKey](self, "isEmojiKey"))
  {
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 activeKeyboard]);
    if (v22) {
      objc_storeStrong((id *)&self->_keyboardElement, v22);
    }
  }

  if (*p_keyboardElement
    || (uint64_t v23 = objc_claimAutoreleasedReturnValue([v21 activeKeyboard]),
        v24 = *p_keyboardElement,
        *p_keyboardElement = (id)v23,
        v24,
        *p_keyboardElement))
  {
    uint64_t v25 = v21;
  }

  else
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace currentElement]);

    v39 = (void *)objc_claimAutoreleasedReturnValue([v25 remoteParent]);
    if (v39)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue([v25 application]);
      v41 = objc_claimAutoreleasedReturnValue([v40 activeKeyboard]);
      v42 = *p_keyboardElement;
      *p_keyboardElement = (id)v41;
    }
  }

  if (objc_msgSend(*p_keyboardElement, "isRemoteElement", (void)v43))
  {
    v26 = objc_claimAutoreleasedReturnValue([*p_keyboardElement activeKeyboard]);
    v27 = *p_keyboardElement;
    *p_keyboardElement = (id)v26;
  }

LABEL_30:
  v28 = VOTLogKeyboard(v9);
  id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    v30 = *p_keyboardElement;
    double v31 = (void *)objc_claimAutoreleasedReturnValue([*p_keyboardElement application]);
    v32 = [v31 isSoftwareKeyboardActive];
    v33 = [*p_keyboardElement isSoftwareKeyboardMimic];
    *(_DWORD *)buf = 138412802;
    v48 = v30;
    v49 = 1024;
    v50 = v32;
    v51 = 1024;
    v52 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Got gesture keyboard: %@ [SW active: %d, IsMimic: %d]",  buf,  0x18u);
  }

  v34 = (void *)objc_claimAutoreleasedReturnValue([*p_keyboardElement application]);
  if ([v34 isSoftwareKeyboardActive])
  {
  }

  else
  {
    v35 = [*p_keyboardElement isSoftwareKeyboardMimic];

    if ((v35 & 1) == 0)
    {
      os_log_type_t v18 = 0LL;
      goto LABEL_37;
    }
  }

  v36 = [*p_keyboardElement updateFrame];
  os_log_type_t v18 = 1LL;
LABEL_37:
  v37 = VOTLogKeyboard(v36);
  v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v4_Block_object_dispose(va, 8) = v18;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Is in mode: %d", buf, 8u);
  }

LABEL_40:
  -[VOTDirectInteractionKeyboardManager setInDirectInteractionTypingMode:]( self,  "setInDirectInteractionTypingMode:",  v18);
}

  if (self->_currentRotorType == 84)
  {
    customContentIndex = self->_customContentIndex;
    v24 = v9 ? customContentIndex + 1 : customContentIndex - 1;
    self->_customContentIndex = v24;
    if ((v24 & 0x8000000000000000LL) == 0)
    {
      uint64_t v16 = -[NSArray count](self->_customContent, "count");
    }
  }

  v45 = v7;
  *a4 = 0;
  v46.location = 0LL;
  v46.length = v12;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(self->_currentRotors, v46, (const void *)self->_currentRotorType);
  v26 = FirstIndexOfValue;
  ValueAtIndex = 0LL;
  v42 = v9;
  v28 = !v9;
  if (v9) {
    id v29 = 1LL;
  }
  else {
    id v29 = -1LL;
  }
  if (v28) {
    v30 = v12 - 1;
  }
  else {
    v30 = 0LL;
  }
  double v31 = FirstIndexOfValue;
  do
  {
    if (-[VOTRotor rotorTypeIsValid:eventOrigin:](self, "rotorTypeIsValid:eventOrigin:", ValueAtIndex, a6)) {
      break;
    }
    if (v31 == -1) {
      double v31 = 0LL;
    }
    else {
      v31 += v29;
    }
    if (v31 < 0 || v31 >= v12)
    {
      *a4 = 1;
      double v31 = v30;
    }

    ValueAtIndex = CFArrayGetValueAtIndex(self->_currentRotors, v31);
  }

  while (v31 != v26);
  -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( self,  "setCurrentRotorType:saveToPreferences:userInitiated:",  (int)ValueAtIndex,  0LL,  v45);
  v32 = self->_currentRotorType;
  if (v32 == 47)
  {
    if (v42)
    {
      v33 = 0LL;
      v32 = 47LL;
    }

    else
    {
      v33 = (char *)-[NSMutableArray count](self->_customPublicRotors, "count") - 1;
      v32 = self->_currentRotorType;
    }

    self->_publicCustomRotorIndex = (int64_t)v33;
  }

  if (v32 == 48)
  {
    v34 = v42 ? 0LL : (char *)-[NSArray count](self->_customRotorActionCategories, "count") - 1;
    self->_customActionIndex = (int64_t)v34;
    v35 = (void *)objc_claimAutoreleasedReturnValue( -[NSArray objectAtIndexedSubscript:]( self->_customRotorActionCategories,  "objectAtIndexedSubscript:"));
    v36 = (void *)objc_claimAutoreleasedReturnValue([v35 categoryName]);
    v37 = [v36 isEqualToString:@"UIAccessibilityCustomActionCategoryEdit"];

    if (v37)
    {
      if (v42) {
        v38 = 1LL;
      }
      else {
        v38 = (int64_t)-[NSArray count](self->_customRotorActionCategories, "count") - 2;
      }
      self->_customActionIndex = v38;
    }
  }

  if (self->_currentRotorType == 84)
  {
    if (v42) {
      v39 = 0LL;
    }
    else {
      v39 = (char *)-[NSArray count](self->_customContent, "count") - 1;
    }
    self->_customContentIndex = (int64_t)v39;
  }

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", self->_currentRotorType));
  [v40 setPreference:v41 forKey:self->_typeKey];

  [(id)VOTSharedWorkspace setRotorType:self->_currentRotorType];
}

  -[VOTBrailleGestureManager _cleanUpTouchesIncludingCalibrationStartPoints:]( self,  "_cleanUpTouchesIncludingCalibrationStartPoints:",  v4 ^ 1u);
  return v5;
}

uint64_t sub_100019B64(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiElement]);
  v27 = @"direction";
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", *(void *)(a1 + 48)));
  v28 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
  [v2 performAXAction:2003 withValue:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiElement]);
  LODWORD(v3) = [v5 BOOLWithAXAttribute:2093];

  if ((_DWORD)v3)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteParent]);
    if (v6)
    {
      [*(id *)(a1 + 32) updateFrame];
      [*(id *)(a1 + 32) frame];
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;
      CFAbsoluteTime v15 = (void *)objc_claimAutoreleasedReturnValue(+[AXBackBoardServer server](&OBJC_CLASS___AXBackBoardServer, "server"));
      objc_msgSend( v15,  "convertFrame:fromContextId:",  objc_msgSend(*(id *)(a1 + 32), "windowContextId"),  v8,  v10,  v12,  v14);
      double v17 = v16;
      double v19 = v18;
      double v21 = v20;
      double v23 = v22;

      v24 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRect:](&OBJC_CLASS___NSValue, "valueWithRect:", v17, v19, v21, v23));
      [v24 performAXAction:2039 withValue:v25];
    }
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10001A804( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001A81C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 uiElement]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 performAXAction:2013];

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    *a3 = 1;
  }
}

LABEL_40:
  return v32;
}

      id v29 = -180.0;
LABEL_42:
      if (fabs(v12 + v29) < 20.0) {
        goto LABEL_43;
      }
      break;
    case 2:
      id v29 = -90.0;
      goto LABEL_42;
    case 3:
      goto LABEL_40;
    case 4:
      goto LABEL_35;
    default:
      return 0;
  }

  return 0;
}

    if ((id)++v12 == v10)
    {
      v56 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v81,  v87,  16LL);
      double v10 = v56;
      if (!v56)
      {
        double v9 = v69;
        goto LABEL_60;
      }

      goto LABEL_8;
    }
  }

  v58 = objc_loadWeakRetained((id *)&self->_elementManager);
  v59 = (void *)objc_claimAutoreleasedReturnValue([v58 currentElement]);

  if (-[NSArray containsObject:](self->_directInteractionElements, "containsObject:", v59))
  {
    double v9 = v69;
  }

  else
  {
    directInteractionElements = self->_directInteractionElements;
    v61 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory lastTouchedDirectTouchElement](self, "lastTouchedDirectTouchElement"));
    LODWORD(directInteractionElements) = -[NSArray containsObject:](directInteractionElements, "containsObject:", v61);

    double v9 = v69;
    if ((_DWORD)directInteractionElements)
    {
      v62 = objc_claimAutoreleasedReturnValue(-[VOTEventFactory lastTouchedDirectTouchElement](self, "lastTouchedDirectTouchElement"));
    }

    else
    {
      _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"Could not use current element as direct touch element, and last touched direct touch element was not in our list.  Using the first direct touch element in our list instead.");
      v62 = objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_directInteractionElements, "firstObject"));
    }

    v63 = (void *)v62;

    v59 = v63;
  }

  v64 = [v59 windowContextId];
  v65 = (void *)objc_claimAutoreleasedReturnValue(-[VOTGestureEvent eventRepresentation](v4, "eventRepresentation"));
  [v65 setContextId:v64];

  double v10 = (id)objc_claimAutoreleasedReturnValue(-[VOTGestureEvent eventRepresentation](v4, "eventRepresentation"));
  [v10 setSenderID:0x8000000817319373];

  v66 = (void *)objc_claimAutoreleasedReturnValue(+[AXBackBoardServer server](&OBJC_CLASS___AXBackBoardServer, "server"));
  v67 = (void *)objc_claimAutoreleasedReturnValue(-[VOTGestureEvent eventRepresentation](v4, "eventRepresentation"));
  LOBYTE(v10) = 1;
  v68 = (void *)objc_claimAutoreleasedReturnValue([v67 normalizedEventRepresentation:0 scale:1]);
  [v66 postEvent:v68 systemEvent:0];

  self->_flags.sendingToDirectTouch = 1;
LABEL_60:

LABEL_61:
LABEL_51:

  return (char)v10;
}

LABEL_73:
    v98 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    *(float *)&v99 = v86;
    double v11 = [v98 performSimpleTapAtPoint:v62 withForce:self withContextId:v119 withDelay:0.0 forElement:v99];

    v102 = VOTLogSimpleTap(v100, v101);
    v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
    {
      v116 = NSStringFromCGPoint(v119);
      v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v117;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v62;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v86;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEBUG,  "Performed simple tap at dispatch point %@, context id %u, delay %1.1f .",  buf,  0x1Cu);
    }

    if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", v10))
    {
      +[NSThread sleepForTimeInterval:](&OBJC_CLASS___NSThread, "sleepForTimeInterval:", 0.5);
      -[VOTElement updateFrame](self, "updateFrame");
      -[VOTElement updateCenterPoint](self, "updateCenterPoint");
      -[VOTElement updateTraits](self, "updateTraits");
      -[VOTElement updateCustomPublicRotors](self, "updateCustomPublicRotors");
    }

        return;
      }
    }

    else
    {
      v50 = 0;
      if (!v5) {
        goto LABEL_71;
      }
    }

    if ([v5 differenceAspectMask:v47]) {
      v57 = v50;
    }
    else {
      v57 = 1;
    }
    if ((v57 & 1) == 0) {
      -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:]( self,  "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:",  v5,  [v5 shouldPlaySoundWhenFocused],  0,  0);
    }
    goto LABEL_71;
  }

      p_edgePanGesturePausePoint = &self->_edgePanGesturePausePoint;
      if (vabdd_f64(self->_edgePanGesturePausePoint.y, v26) > 0.00999999978
        || vabdd_f64(p_edgePanGesturePausePoint->x, v25) > 0.00999999978)
      {
        -[SCRCTargetSelectorTimer cancel](self->_edgePanGestureSpeakHintTimer, "cancel");
        uint64_t v6 = 0LL;
        *p_edgePanGesturePausePoint = CGPointZero;
        return v6;
      }

LABEL_77:
    if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXPlaysSoundTrait)) {
      return v11;
    }
    v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    v104 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
    -[os_log_s sendEvent:](v81, "sendEvent:", v104);

LABEL_79:
    return v11;
  }

  -[VOTElement updateFrame](self, "updateFrame");
  double v18 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  double v19 = [v18 ignoreLogging];

  if ((v19 & 1) == 0)
  {
    double v20 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    double v21 = AXLoggerForFacility();
    double v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);

    double v23 = AXOSLogLevelFromAXLogLevel(3LL);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = AXColorizeFormatLog(3LL, @"THIS ELEMENT SUPPORTS ACTIVATE ACTION... NO HIT TEST IS BEING SENT");
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = _AXStringForArgs(v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v22, v23))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}@", buf, 0xCu);
      }
    }
  }

  if (!-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXPlaysSoundTrait))
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
    [v28 sendEvent:v29];
  }

  return 1;
}

LABEL_18:
    if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXLaunchIconTrait)
      && !-[VOTElement isInFolder](self->_currentElement, "isInFolder"))
    {
      -[NSMutableArray removeAllObjects](self->_cachedLaunchIcons, "removeAllObjects");
    }

    -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
    goto LABEL_22;
  }

  v42 = VOTLogElement(v28);
  v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_signpost_enabled(v43))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v43,  OS_SIGNPOST_INTERVAL_BEGIN,  0xEEEEB0B5B2B2EEEELL,  "ElementTraversal",  "",  buf,  2u);
  }

  if ((_DWORD)v6) {
    v44 = 1LL;
  }
  else {
    v44 = 2LL;
  }
  self->_flags.lastElementMovement = v44;
  if (!v8 || !-[NSMutableDictionary count](self->_flowFromElements, "count"))
  {
LABEL_65:
    v66 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v66 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

    if (sub_10004A018()
      && !v15
      && (v67 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer")),
          v67,
          v67))
    {
      v68 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer"));
      v69 = v68;
      else {
        v70 = objc_claimAutoreleasedReturnValue([v68 lastContainedElement]);
      }
      v52 = (void *)v70;

      -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v52, 0LL);
    }

    else
    {
      self->_flags.performedKeyboardNavigation = [v4 isKeyEvent];
      self->_flags.performedFlickNavigation = 1;
      if ((v8 & 1) == 0 && -[VOTElementManager _moveElementToFlowTo:](self, "_moveElementToFlowTo:", v15)) {
        goto LABEL_18;
      }
      if ([v15 elementVisibilityAffectsLayout])
      {
        [v15 scrollToElementForDirectional:2 withCompletion:0];
        -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
      }

      v52 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockAnyElement](self, "_copyMatchBlockAnyElement"));
      v71 = self->_fetchManager;
      elementSearchGeneration = self->_elementSearchGeneration;
      v73 = [v15 selectedTextRange];
      v74 = v15;
      v76 = v75;
      LOBYTE(v7_Block_object_dispose(va, 8) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
      v77 = v76;
      CFAbsoluteTime v15 = v74;
      -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( v71,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  v44,  v74,  v52,  0LL,  0LL,  elementSearchGeneration,  v73,  v77,  v78);
    }

    goto LABEL_77;
  }

  v45 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  *(void *)buf = [v45 nonPersistentUniqueId];
  v81 = v46;

  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue value:withObjCType:](&OBJC_CLASS___NSValue, "value:withObjCType:", buf, "{?=QQ}"));
  v48 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_flowFromElements, "objectForKey:", v47));
  if (!v48)
  {

    goto LABEL_65;
  }

  v49 = (void *)v48;
  -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v48, 0LL);

LABEL_22:
LABEL_26:
}

LABEL_25:
  return v13;
}

  v36 = sub_10004A070(v14);
  v37 = objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent _literalStringMarkupForString:languageCode:action:]( self,  "_literalStringMarkupForString:languageCode:action:",  v14,  v21,  v16));

  [v15 appendString:v37];
  if (!v36) {
    goto LABEL_31;
  }
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  v39 = [v38 voiceOverCapitalLetterFeedback];

  if (v39 == (id)2)
  {
    v40 = @"Sounds/Capitals.aiff";
    v41 = v16;
    v42 = 75LL;
  }

  else
  {
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v44 = [v43 voiceOverCapitalLetterFeedback];

    if (v44 != (id)1) {
      goto LABEL_31;
    }
    v40 = (const __CFString *)&off_100187370;
    v41 = v16;
    v42 = 32LL;
  }

  [v41 setObject:v40 forVariant:v42];
LABEL_31:
  double v14 = (id)v37;
  if (a8) {
LABEL_32:
  }
    *a8 = v27;
LABEL_33:
}
}

    double v7 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    goto LABEL_26;
  }

  if (([v10 activateIfSupported] & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    goto LABEL_25;
  }

    double v8 = 0;
    goto LABEL_26;
  }

  brailleClient = self->_brailleClient;
LABEL_6:
  -[SCROBrailleClient exitCurrentDisplayMode](brailleClient, "exitCurrentDisplayMode");
LABEL_12:
  double v8 = 1;
LABEL_26:

  return v8;
}

  double v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTKeyboardManager testingProcessEventCallback](self, "testingProcessEventCallback"));

  double v20 = v22;
  if (v19)
  {
    double v21 = (void (**)(void, void))objc_claimAutoreleasedReturnValue( -[VOTKeyboardManager testingProcessEventCallback]( self,  "testingProcessEventCallback"));
    ((void (**)(void, id))v21)[2](v21, v22);

    double v20 = v22;
  }
}

    double v12 = (v23 - 1) & v23;
    CFAbsoluteTime v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    double v16 = 16 * v15;
    double v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    double v18 = v17[1];
    double v19 = 8 * v15;
    double v20 = *(void *)(*(void *)(v2 + 56) + v19);
    double v21 = (void *)(*(void *)(v4 + 48) + v16);
    *double v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_retain(v20);
  }

  v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  double v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    double v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    double v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

void sub_10001BDAC(_Unwind_Exception *a1)
{
}

void sub_10001BE64(_Unwind_Exception *a1)
{
}

void sub_10001BFA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001BFC0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v8 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 performAXAction:*(unsigned int *)(a1 + 40)];

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)
    || (uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]),
        unsigned __int8 v7 = [v6 BOOLWithAXAttribute:2093],
        v6,
        (v7 & 1) == 0))
  {
    *a3 = 1;
  }
}

uint64_t sub_10001C18C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSValue valueWithRect:]( &OBJC_CLASS___NSValue,  "valueWithRect:",  *(double *)(a1 + 48),  *(double *)(a1 + 56),  *(double *)(a1 + 64),  *(double *)(a1 + 72)));
  [v2 performAXAction:2039 withValue:v3];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

LABEL_14:
    double v16 = VOTLogCommon(v15);
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v28 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "First remote element in app focus: %@",  buf,  0xCu);
    }

    if (v11)
    {
      double v18 = v11;

      uint64_t v6 = v18;
    }
  }

  else {
    double v19 = v6;
  }
  double v20 = v19;

  return v20;
}

    double v21 = (void *)objc_claimAutoreleasedReturnValue([v9 uiElement]);
    double v22 = (void *)objc_claimAutoreleasedReturnValue([v21 numberWithAXAttribute:2123]);
    double v23 = [v22 unsignedIntValue];

    double v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTDisplayManager uiClient](self, "uiClient"));
    v30[0] = @"FocusChangeFrameKey";
    v32.origin.x = x;
    v32.origin.y = y;
    v32.size.width = width;
    v32.size.height = height;
    v24 = NSStringFromRect(v32);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v31[0] = v25;
    v30[1] = @"FocusChangeTypeKey";
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10));
    v31[1] = v26;
    v30[2] = @"display";
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v23));
    v31[2] = v27;
    v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  3LL));
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[AXAccessQueue mainAccessQueue](&OBJC_CLASS___AXAccessQueue, "mainAccessQueue"));
    [v19 sendAsynchronousMessage:v28 withIdentifier:20 targetAccessQueue:v29 completion:0];

    goto LABEL_15;
  }
}

  return v15;
}

  return v14;
}

    v49 = 0;
    goto LABEL_19;
  }

  v51 = v15;
LABEL_16:
  -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:]( self,  "_moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:",  v14,  [v14 shouldPlaySoundWhenFocused],  objc_msgSend(v16, "BOOLValue"),  objc_msgSend(v17, "BOOLValue"),  1,  objc_msgSend(v18, "BOOLValue"));
  CFAbsoluteTime v15 = v51;
  self->_lastFirstResponderChangeTime = CFAbsoluteTimeGetCurrent();
  self->_flags.tapShouldHandleTextOperation = 0;
  v49 = 1;
LABEL_19:

  return v49;
}
}

  double v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  double v20 = [v19 ignoreLogging];

  if ((v20 & 1) == 0)
  {
    double v21 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    double v22 = AXLoggerForFacility(v21);
    double v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);

    v24 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = AXColorizeFormatLog(2LL, @"Output frequently text %{private}@");
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v30 = v10;
      v27 = _AXStringForArgs(v26);
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v23, v24))
      {
        *(_DWORD *)buf = 138543362;
        v32 = v28;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}@", buf, 0xCu);
      }
    }
  }

  -[VOTElementManager sendRequest:](self, "sendRequest:", v10, v30);
  double v18 = 1;
LABEL_21:

  return v18;
}

  [v6 addObject:@"→"];
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_9:
  if ((v4 & 8) != 0) {
LABEL_10:
  }
    [v6 addObject:@"↓"];
LABEL_11:
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXSSKeyChord keyChordWithKeys:](&OBJC_CLASS___AXSSKeyChord, "keyChordWithKeys:", v6));

  return v7;
}
}

  uint64_t result = (id)v21(v60, 1LL, v19);
  if ((_DWORD)result != 1)
  {
    v38 = swift_getKeyPath(&unk_1001331E8);
    v62[0] = v23;
    v39 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v62, v38, v39);
    swift_release(v38);
    v40 = v23 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
    swift_beginAccess(v23 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, v62, 0LL, 0LL);
    v41 = v59;
    sub_1000EE798(v40, v59, &qword_1001ACA40);
    LODWORD(v40) = v21(v41, 1LL, v19);
    uint64_t result = (id)sub_1000EE648(v41, &qword_1001ACA40);
    if ((_DWORD)v40 == 1)
    {
      AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter(result);
      v43 = v42;
      uint64_t result = (id)swift_bridgeObjectRelease(v42);
      if (!v43)
      {
        AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter(result);
        v45 = v44;
        swift_bridgeObjectRelease(v44);
        if (!v45)
        {
          v46 =  [*(id *)(v61 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) previousRotorVoiceIdentifier];
          if (v46)
          {
            v47 = v46;
            v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v50 = v49;
          }

          else
          {
            v48 = 0LL;
            v50 = 0LL;
          }

          AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter(v48, v50);
        }

        return [*(id *)(v61 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) setPreviousRotorVoiceIdentifier:0];
      }
    }
  }

  return result;
}

BOOL sub_10001CE6C(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (!*(_BYTE *)(a1 + 32)) {
    return vabds_f32(a2, a3) < (float)(a4 / 3.0);
  }
  v6.location = (unint64_t)a2;
  v6.length = (unint64_t)a4;
  v7.location = (unint64_t)a3;
  v7.length = (unint64_t)a5;
  return NSIntersectionRange(v6, v7).length != 0;
}

id sub_10001D5C8(id a1, id a2, unint64_t a3)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0) {
    NSRange v6 = -[VOTCustomAction initWithWireDictionary:]( objc_alloc(&OBJC_CLASS___VOTCustomAction),  "initWithWireDictionary:",  v3);
  }
  else {
    NSRange v6 = (VOTCustomAction *)v3;
  }
  NSRange v7 = v6;

  return v7;
}

BOOL sub_10001D834(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 categoryName]);
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    BOOL v5 = 1LL;
  }

  else if (*(void *)(a1 + 32))
  {
    BOOL v5 = 0LL;
  }

  else
  {
    NSRange v6 = (void *)objc_claimAutoreleasedReturnValue([v3 categoryName]);
    BOOL v5 = v6 == 0LL;
  }

  return v5;
}

int64_t sub_10001D8B4(id a1, VOTCustomActionCategory *a2, VOTCustomActionCategory *a3)
{
  uint64_t v4 = a3;
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTCustomActionCategory categoryName](a2, "categoryName"));
  NSRange v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTCustomActionCategory categoryName](v4, "categoryName"));

  id v7 = [v5 localizedCompare:v6];
  return (int64_t)v7;
}

void sub_10001EC48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001EC60(uint64_t a1, void *a2, _BYTE *a3)
{
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([a2 application]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 activeKeyboard]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    *a3 = 1;
  }
}

void sub_10001EF3C(uint64_t a1, void *a2)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 uiElement]);
  [v3 setAXAttribute:2018 withObject:*(void *)(a1 + 32) synchronous:0];
}

void sub_100021B5C(_Unwind_Exception *a1)
{
}

BOOL sub_10002425C(void *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (unint64_t)[a1 traits];
  unint64_t v5 = (unint64_t)[v3 traits];

  if (((kAXButtonTrait & v4) != 0) == ((kAXButtonTrait & v5) == 0)
    || ((kAXHeaderTrait & v4) != 0) == ((kAXHeaderTrait & v5) == 0))
  {
    return 1LL;
  }

  unint64_t v6 = kAXTextEntryTrait & v5;
  if ((kAXTextEntryTrait & v4) != 0 && v6 == 0) {
    return 1LL;
  }
  return (kAXTextEntryTrait & v4) == 0 && v6 != 0;
}

void sub_100024320( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1000251C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_1000251F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = VOTLogAudio(v3, v4);
  unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sound complete: %@", (uint8_t *)&v11, 0xCu);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v8 disableAudioSession:*(void *)(a1 + 32)];

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v3);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained setCompletionBlock:0];
  }
}

void sub_100025D88(id a1)
{
  id v1 = -[VOTCrashManager _init](objc_alloc(&OBJC_CLASS___VOTCrashManager), "_init");
  id v2 = (void *)qword_1001ACCC0;
  qword_1001ACCC0 = (uint64_t)v1;
}

void sub_100025FAC(id a1)
{
  uint64_t v1 = VOTLogCommon(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "VoiceOver alive for 10s. Resetting crash count",  v4,  2u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCrashManager sharedInstance](&OBJC_CLASS___VOTCrashManager, "sharedInstance"));
  [v3 _resetConsecutiveCrashCount];
}

void sub_1000263CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000263F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetTranslator];
}

void sub_100027808(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = VOTLogBrailleGestures(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1000EFFA8(a1, v4, v5, v6, v7, v8, v9, v10);
  }
}

void sub_100027DD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100027DF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100027E08(uint64_t a1)
{
}

void sub_100027E10(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100028060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100028084(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100028180(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_100028194(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

__CFString *sub_1000281B4( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a1;
  id v11 = a2;
  v22[1] = &a9;
  uint64_t v12 = objc_alloc(&OBJC_CLASS___NSString);
  double v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  @"en-US"));
  v22[0] = 0LL;
  double v14 = -[NSString initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:]( v12,  "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:",  v10,  v11,  v13,  &a9,  v22);
  id v15 = v22[0];

  if (v15)
  {
    uint64_t v18 = AXLogCommon(v16, v17);
    double v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412802;
      id v24 = v15;
      __int16 v25 = 2112;
      id v26 = v10;
      __int16 v27 = 2112;
      id v28 = v11;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_FAULT,  "Error creating string: %@ [%@/%@]",  buf,  0x20u);
    }

    double v20 = &stru_10017A920;
  }

  else
  {
    double v20 = v14;
  }

  return v20;
}

void sub_100028ADC(_Unwind_Exception *a1)
{
}

void sub_100028B14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateUserSubstitutions:*(void *)(*(void *)(a1 + 32) + 224)];
}

void sub_100028B5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend(WeakRetained, "setShouldOutputToHearingAid:", objc_msgSend(v1, "voiceOverShouldOutputToHearingAid"));
}

void sub_100028BB4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_100028BE4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_100028C14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateAudioSessionProperties:0];
}

void sub_100028C44(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateDuckingMode:0];
}

void sub_10002963C(uint64_t a1)
{
  v59[0] = 0LL;
  v59[1] = v59;
  v59[2] = 0x3032000000LL;
  v59[3] = sub_100029C14;
  v59[4] = sub_100029C24;
  id v60 = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 category]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  id v5 = [v4 categoryOptions];

  uint64_t v6 = (NSString *)AVAudioSessionCategoryVoiceOver;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  unsigned __int8 v8 = [v7 audioSessionActive];

  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472LL;
  v57[2] = sub_100029C2C;
  v57[3] = &unk_1001772D8;
  unsigned __int8 v58 = v8;
  uint64_t v9 = objc_retainBlock(v57);
  id v10 = [(id)VOTSharedWorkspace audioDestinationRequestExternal];
  double v22 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  if ([v22 voiceOverAudioFollowsHDMIAudio])
  {
    double v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned int v24 = [v23 selectedRouteIsHDMI];

    if (v24)
    {
LABEL_2:
      uint64_t v12 = VOTLogAudio(v10, v11);
      double v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio destination is External", buf, 2u);
      }

      double v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      unsigned int v15 = [v14 externalAudioRouteSelected];

      if (v15)
      {
        uint64_t v18 = VOTLogAudio(v16, v17);
        double v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "External audio selected - changing to playback category",  buf,  2u);
        }

        double v20 = AVAudioSessionCategoryPlayback;
        double v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        [v21 updateWithCurrentRoute];
        uint64_t v6 = v20;
      }

      else
      {
        uint64_t v25 = VOTLogAudio(v16, v17);
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Changing route name to external audio",  buf,  2u);
        }

        double v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        [v21 selectExternalAudioRoute];
      }

      goto LABEL_22;
    }
  }

  else
  {
  }

  __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  unsigned int v28 = [v27 externalAudioRouteSelected];

  if (v28)
  {
    uint64_t v31 = VOTLogAudio(v29, v30);
    v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "External audio already selected - going back to local",  buf,  2u);
    }

    double v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v21 selectLocalAudioRoute];
  }

  else
  {
    uint64_t v33 = VOTLogAudio(v29, v30);
    v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Update to current route when external audio route not selected",  buf,  2u);
    }

    double v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v21 updateWithCurrentRoute];
  }

void sub_100029BC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100029C14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100029C24(uint64_t a1)
{
}

void sub_100029C2C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v6 = v3;
  if (*(_BYTE *)(a1 + 32))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v4 toggleAudioSessionActive:0];

    uint64_t v3 = v6;
  }

  if (v3)
  {
    v3[2](v6);
    uint64_t v3 = v6;
  }

  if (*(_BYTE *)(a1 + 32))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v5 toggleAudioSessionActive:1];

    uint64_t v3 = v6;
  }
}

void sub_100029CC8(void *a1, uint64_t a2)
{
  uint64_t v3 = VOTLogAudio(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[6];
    *(_DWORD *)buf = 138412546;
    uint64_t v33 = v5;
    __int16 v34 = 1024;
    int v35 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Setting category to %@ with options: %d",  buf,  0x12u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  id obj = *(id *)(v8 + 40);
  [v7 setDuckingFadeOutDuration:&off_1001873E0 fadeInDuration:&off_1001873F0 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);

  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    uint64_t v11 = VOTLogAudio(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1000F0140();
    }
  }

  double v13 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[4];
  uint64_t v16 = *(void *)(a1[5] + 8LL);
  id v30 = *(id *)(v16 + 40);
  [v13 setCategory:v15 withOptions:v14 error:&v30];
  objc_storeStrong((id *)(v16 + 40), v30);

  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
  {
    uint64_t v19 = VOTLogAudio(v17, v18);
    double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1000F00DC();
    }
  }

  uint64_t v21 = VOTLogAudio(v17, v18);
  double v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Opting VoiceOver out of audio session participatesInMutePriority",  buf,  2u);
  }

  double v23 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession sharedInstance](&OBJC_CLASS___AVAudioSession, "sharedInstance"));
  id v29 = 0LL;
  [v23 setParticipatesInMutePriority:0 error:&v29];
  id v24 = v29;

  if (v24)
  {
    uint64_t v27 = VOTLogAudio(v25, v26);
    unsigned int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      sub_1000F007C();
    }
  }
}

void sub_10002B014(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("vot-language-reload-queue", v7);
  uint64_t v3 = (void *)qword_1001ACCD8;
  qword_1001ACCD8 = (uint64_t)v2;

  id v4 = objc_alloc(&OBJC_CLASS___AXDispatchTimer);
  uint64_t v5 = -[AXDispatchTimer initWithTargetSerialQueue:](v4, "initWithTargetSerialQueue:", qword_1001ACCD8);
  uint64_t v6 = (void *)qword_1001ACCD0;
  qword_1001ACCD0 = (uint64_t)v5;

  [(id)qword_1001ACCD0 setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:1];
}

void sub_10002B0A0(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 208) isEqualToString:*(void *)(a1 + 40)] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 208LL), *(id *)(a1 + 40));
    dispatch_queue_t v2 = objc_alloc_init(&OBJC_CLASS___AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v2 withLevel:1 language:*(void *)(a1 + 40)];
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v3 withLevel:2 language:*(void *)(a1 + 40)];
    id v4 = objc_alloc_init(&OBJC_CLASS___AXIndexMap);
    [*(id *)(a1 + 32) _loadPunctuationTable:v4 withLevel:3 language:*(void *)(a1 + 40)];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 40);
    v8[0] = v2;
    v8[1] = v3;
    v8[2] = v4;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 3LL));
    objc_msgSend( v6,  "performSelector:onTarget:count:objects:",  "_resetLanguageDataOnSpeechThread:language:",  v5,  2,  v7,  *(void *)(a1 + 40),  0);
  }

void sub_10002B1F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_queue_t v2 = *(void **)(v1 + 208);
  *(void *)(v1 + 20_Block_object_dispose(va, 8) = 0LL;
}

LABEL_83:
              v84 = VOTLogSpeech(v70, v71, v72);
              v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
              v61 = (unint64_t)&v64[v66];
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
              {
                v91 = (char *)[v60 length];
                *(_DWORD *)buf = 134218240;
                v126 = v61;
                v127 = 2048;
                v128 = v91;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEBUG,  "old info %lu -- %lu",  buf,  0x16u);
              }

              v86 = (char *)[v60 length];
              if (v61 >= (unint64_t)v86)
              {
                v62 = 0LL;
                v61 = 0x7FFFFFFFFFFFFFFFLL;
              }

              else
              {
                v86 = (char *)[v60 length];
                v62 = &v86[-v61];
              }

              v89 = VOTLogSpeech(v86, v87, v88);
              v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134218240;
                v126 = v61;
                v127 = 2048;
                v128 = v62;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEBUG,  "new text range: %lu, %lu",  buf,  0x16u);
              }

              uint64_t v46 = v115;
              if (&v62[v61] > [v60 length]) {
                goto LABEL_96;
              }
            }

            if ((unint64_t)[v16 length] < 2
              || (v73 = [v60 characterAtIndex:1],
                  v70 = (unint64_t)[(id)qword_1001ACD00 characterIsMember:v73],
                  (v70 & 1) == 0))
            {
              v70 = (unint64_t)objc_msgSend( v60,  "replaceOccurrencesOfString:withString:options:range:",  v15,  &stru_10017A920,  0,  0,  v66);
            }

      goto LABEL_86;
    }

LABEL_67:
            v74 = 0;
LABEL_68:
            if (v36 && (v70 = (unint64_t)[v60 length], (unint64_t)(v64 + 1) < v70))
            {
              v70 = (unint64_t)objc_msgSend( v108,  "characterIsMember:",  objc_msgSend(v60, "characterAtIndex:", v64 + 1));
            }

            else if (v74)
            {
              goto LABEL_73;
            }

            goto LABEL_83;
          }

LABEL_96:
          v54 = (unint64_t)&v109[v112];
          int v44 = v105;
          [v105 appendString:v60];

          v55 = v110 + 1;
        }

        while ((id)(v110 + 1) != v106);
        v106 = [obj countByEnumeratingWithState:&v116 objects:v133 count:16];
      }

      while (v106);
    }

    if (v54 < (unint64_t)[v16 length])
    {
      *(float *)&v92 = a9;
      v93 = (void *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent pauseStringForType:voiceIdentifier:rate:]( self,  "pauseStringForType:voiceIdentifier:rate:",  6LL,  v99,  v92));
      v94 = (void *)objc_claimAutoreleasedReturnValue([v16 substringFromIndex:v54]);
      [v44 appendFormat:@"%@ %@", v93, v94];
    }

    uint64_t v17 = v97;
    id v43 = v103;
  }

  else
  {
    uint64_t v46 = v44;
    int v44 = v16;
    uint64_t v17 = v96;
  }

  [v16 setString:v44];
LABEL_7:
}

void sub_10002DE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002DE34(id a1)
{
  id v9 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"(?<!\\b[[:lower:]\\d]{1})[[:upper:]]+[[:lower:]\\d]+",  0LL,  &v9));
  id v2 = v9;
  uint64_t v3 = (void *)qword_1001ACD08;
  qword_1001ACD08 = v1;

  if (v2)
  {
    uint64_t v7 = VOTLogSpeech(v4, v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000F061C();
    }
  }
}

void sub_10002DECC(uint64_t a1, void *a2)
{
  id v19 = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  [*(id *)(a1 + 32) rangeOfString:@"VoiceOver"];
  if (!v6)
  {
    [*(id *)(a1 + 32) rangeOfString:@"Hz"];
    if (!v7)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceNewlineAndSpecialCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceNewlineAndSpecialCharacterSet"));
      id v9 = [v8 mutableCopy];

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](&OBJC_CLASS___NSCharacterSet, "punctuationCharacterSet"));
      [v9 formUnionWithCharacterSet:v10];

      if ([v19 numberOfRanges])
      {
        unint64_t v11 = 0LL;
        do
        {
          uint64_t v12 = (char *)[v19 rangeAtIndex:v11];
          uint64_t v14 = v13;
          uint64_t v15 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
          uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v16, &v12[-v16]));
          [v15 appendString:v17];

          if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) length]
            && (objc_msgSend( v9,  "characterIsMember:",  objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "characterAtIndex:",  (char *)objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40),  "length")
                                - 1)) & 1) == 0
            && !*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
          {
            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendString:@" "];
          }

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v12, v14));
          *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v18 isEqualToString:@"Mc"];
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendString:v18];
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = &v12[v14];

          ++v11;
        }

        while ((unint64_t)[v19 numberOfRanges] > v11);
      }
    }
  }
}

id sub_10002E6C0(id a1, NSTextCheckingResult *a2, unint64_t a3)
{
  id v3 = -[NSTextCheckingResult range](a2, "range", a3);
  return +[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", v3, v4);
}

void sub_10002F0CC(id a1)
{
  id v4 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"\\bJP¥[0-9.,]+\\b",  1LL,  &v4));
  id v2 = v4;
  id v3 = (void *)qword_1001ACD38;
  qword_1001ACD38 = v1;
}

void sub_10002F750(id a1)
{
  id v4 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"([\\d])+",  1LL,  &v4));
  id v2 = v4;
  id v3 = (void *)qword_1001ACD48;
  qword_1001ACD48 = v1;
}

id sub_10002F7B8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@ ", a2];
}

void sub_10002FB10(id a1)
{
  id v4 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"([1-9]){1}(′|')\\s?([0-9]{1,2})(″|)",  1LL,  &v4));
  id v2 = v4;
  id v3 = (void *)qword_1001ACD58;
  qword_1001ACD58 = v1;
}

void sub_10002FD54(id a1)
{
  id v4 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"\\b(([0-9]{1,2})h)?([0-9]{1,2})(min|m)\\b",  1LL,  &v4));
  id v2 = v4;
  id v3 = (void *)qword_1001ACD68;
  qword_1001ACD68 = v1;
}

LABEL_42:
  v93 = 0;
  v55 = (void *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent _determinePunctuationGroupForAction:isDefault:]( self,  "_determinePunctuationGroupForAction:isDefault:",  v16,  &v93));
  uint64_t v56 = v55;
  if (v93) {
    v57 = 1;
  }
  else {
    v57 = v18;
  }
  if ((v57 & 1) != 0)
  {
    uint64_t v25 = 0LL;
  }

  else
  {
    v89 = v55;
    unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue([v55 entries]);
    v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "ax_filteredArrayUsingBlock:", &stru_100177490));
    id v60 = [v59 count] != 0;

    uint64_t v56 = v89;
    LOBYTE(v86) = 0;
    uint64_t v25 = (__CFString *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent _replacePunctuation:punctuationGroup:hasMathContext:hasPhoneContext:isText:replaceCommas:languageCode:speakPunctuationCounts:]( self,  "_replacePunctuation:punctuationGroup:hasMathContext:hasPhoneContext:isText:replaceCommas:lan guageCode:speakPunctuationCounts:",  v14,  v89,  0LL,  0LL,  0LL,  v60,  v21,  v86));
    if (-[__CFString length](v25, "length")
      && (-[__CFString isEqualToString:](v25, "isEqualToString:", v14) & 1) == 0)
    {
      if (!sub_1000CDC90( (uint64_t)-[__CFString characterAtIndex:](v25, "characterAtIndex:", 0),  (uint64_t)[v14 characterAtIndex:0]))
      {
        uint64_t v31 = 1;
        uint64_t v56 = v89;
        goto LABEL_83;
      }

      uint64_t v56 = v89;
    }
  }

  if (v92 >= 0x10000)
  {
    uint64_t v66 = sub_10004B314(v92, @"UnicodeHex.", @"VOTOutputPunctuation", v21);
    v67 = (__CFString *)objc_claimAutoreleasedReturnValue(v66);
    uint64_t v31 = 0;
  }

  else
  {
    if ([v14 length] != (id)1)
    {
      v90 = a8;
      v61 = self;
      v62 = v56;
      __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForVariant:28]);
      id v64 = [v63 BOOLValue];

      uint64_t v56 = v62;
      self = v61;
      a8 = v90;
      if (!v64) {
        goto LABEL_58;
      }
    }

    __int16 v65 = v21 ? v18 : 0;
    if ((v65 & 1) != 0)
    {
LABEL_58:
      uint64_t v31 = 0;
      goto LABEL_83;
    }

    v91 = v56;
    v68 = objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    v69 = objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    v70 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputSpeechComponent currentAllPunctuationTable](self, "currentAllPunctuationTable"));
    v87 = (void *)v69;
    v88 = (__CFString *)v68;
    v67 = (__CFString *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:]( self,  "punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:",  v14,  0LL,  v70,  v21,  v68,  v69));

    if (-[__CFString length](v67, "length") == (id)1)
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
      v72 = objc_msgSend( v71,  "characterIsMember:",  -[__CFString characterAtIndex:](v67, "characterAtIndex:", 0));

      if (v72)
      {
        v73 = v88;
        if (!v73 && v21)
        {
          v74 = AXCLanguageCanonicalFormToGeneralLanguage(v21);
          v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
          v76 = AXCLanguageCanonicalFormToGeneralLanguage(v87);
          v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
          v78 = [v75 isEqualToString:v77];

          if ((v78 & 1) != 0) {
            v73 = 0LL;
          }
          else {
            v73 = v21;
          }
        }

        v79 = sub_10004B314(v92, @"UnicodeHex.", @"VOTOutputPunctuation", v73);
        v80 = objc_claimAutoreleasedReturnValue(v79);

        if (v80) {
          v67 = (__CFString *)v80;
        }
        else {
          v67 = @" ";
        }
      }
    }

    uint64_t v31 = v67 != 0LL;
    uint64_t v56 = v91;
    if (!v67)
    {
      v81 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
      v82 = v81;
      if (v21)
      {
        v83 = (void *)objc_claimAutoreleasedReturnValue([v81 dialectForLanguageID:v21]);
      }

      else
      {
        v84 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
        v83 = (void *)objc_claimAutoreleasedReturnValue([v82 dialectForLanguageID:v84]);
      }

      if (v83
        && [v83 hasSpeakableCharacters]
        && ([v83 canSpeakCharacter:(unsigned __int16)v92] & 1) == 0)
      {
        v85 = AXVOLocalizedStringForCharacter(v92, v21);
        v67 = (__CFString *)objc_claimAutoreleasedReturnValue(v85);
        if (!v67) {
          v67 = (__CFString *)AXCopyUnicodeDescriptionStringForCharacter(v92);
        }
      }

      else
      {
        v67 = 0LL;
      }

      uint64_t v56 = v91;
    }

    uint64_t v25 = v88;
  }

  uint64_t v25 = v67;
LABEL_83:

  if (!v21) {
LABEL_17:
  }
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
LABEL_18:
  if ([v14 length] == (id)1)
  {
    v32 = sub_10003132C((uint64_t)[v14 characterAtIndex:0]);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    __int16 v34 = v33;
    if (v33)
    {
      int v35 = v33;

      uint64_t v25 = v35;
    }
  }

  uint64_t v27 = v31;
  if (v25)
  {
    [v16 removeObjectForVariant:15];
    [v15 appendString:@" "];
    [v15 appendString:v25];
    [v15 appendString:@" "];

    if (!a8) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }

  id v37 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v37 descriptionOfWord:v5 forLanguage:v35]);

  if (!v12)
  {
LABEL_45:
    if ([v6 hasPrefix:@"en"])
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      v39 = objc_claimAutoreleasedReturnValue([v38 speechVoiceIdentifierForLanguage:@"en" sourceKey:v20 exists:0]);

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace phoneticStringForCharacter:v5 andVoiceIdentifier:v39]);
      uint64_t v21 = (void *)v39;
    }
  }

      uint64_t v6 = 0LL;
      return v6;
    case 8LL:
      -[VOTEventFactory _transitionToGestureState:](self, "_transitionToGestureState:", 0LL);
      goto LABEL_42;
    default:
      return v6;
  }

BOOL sub_1000312F4(id a1, AXSSPunctuationEntry *a2, unint64_t a3, BOOL *a4)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AXSSPunctuationEntry punctuation](a2, "punctuation", a3, a4));
  char v5 = sub_10004AB38(v4);

  return v5;
}

CFStringRef sub_10003132C(uint64_t a1)
{
  uint64_t v1 = &stru_10017A920;
  if ((a1 - 56319) >= 2 && (_DWORD)a1 != 65532)
  {
    if ((_DWORD)a1 == 8233)
    {
      return @"\n";
    }

    else
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet controlCharacterSet](&OBJC_CLASS___NSCharacterSet, "controlCharacterSet"));
      if ([v4 characterIsMember:a1])
      {
        char v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
        unsigned int v6 = [v5 characterIsMember:a1];

        if (v6) {
          uint64_t v1 = 0LL;
        }
      }

      else
      {
        uint64_t v1 = 0LL;
      }
    }
  }

  return v1;
}

NSString *__cdecl sub_100031A98(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v2 = sub_10004B314(46LL, @"UnicodeHex.Alternate1.", @"VOTOutputPunctuation", v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  return (NSString *)v3;
}

LABEL_31:
  return v26;
}

    double v20 = (void *)objc_claimAutoreleasedReturnValue(-[AXIndexMap objectForIndex:](self->_commands, "objectForIndex:", v11));
    if ((v11 == [kVOTEventCommandSearchRotorUp hash]
       || v11 == [kVOTEventCommandSearchRotorDown hash])
      && self->_lastHandledEventWasRotorMovement)
    {
      self->_flags.shouldUpdateRotorForElement = 0;
    }

    if (v20)
    {
      double v23 = (void *)objc_claimAutoreleasedReturnValue([v20 target]);
      objc_msgSend(v23, "performSelector:withObject:", objc_msgSend(v20, "selector"), v4);
    }

    else if ([v4 isKeyEvent] && self->_flags.inSearchTextMode)
    {
      -[VOTElementManager _handleSearchTextEvent:](self, "_handleSearchTextEvent:", v4);
    }

    goto LABEL_40;
  }

    if (!v7 && v25 && ([v24 containsObject:v17] & 1) == 0)
    {
      if ([v24 count]) {
        [v24 addObject:off_1001AC290];
      }
      [v24 addObject:v17];
    }

    goto LABEL_43;
  }

  if (v7)
  {
    [v24 axSafelyAddObject:v17];
    if (v25)
    {
LABEL_27:
      uint64_t v27 = 2LL;
      goto LABEL_31;
    }
  }

  else
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString stringByReplacingOccurrencesOfString:withString:]( v19,  "stringByReplacingOccurrencesOfString:withString:",  v17,  &stru_10017A920));
    if ([v30 length]) {
      [v24 axSafelyAddObject:v30];
    }

    if (v25) {
      goto LABEL_27;
    }
  }

  if (!-[VOTElementManager _isDictationInProgressForCurrentApp](self, "_isDictationInProgressForCurrentApp")
    && ![v24 count])
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v31 sendEvent:v32];

    goto LABEL_44;
  }

  uint64_t v27 = 2LL;
LABEL_43:
  -[VOTElementManager _speakMessages:cannotBeInterrupted:pitch:]( self,  "_speakMessages:cannotBeInterrupted:pitch:",  v24,  0LL,  v27);
LABEL_44:
}
}

  -[VOTBrailleGestureSpellingSuggestionHandler clearSpellingSuggestions]( self->_spellingSuggestionHandler,  "clearSpellingSuggestions");
  -[VOTBrailleGestureCandidateManager deactivate](self->_candidateManager, "deactivate");
}

        -[VOTClickAndHoldButtonInterceptor _resetStateAndSendPendingEventsToSystem:]( v17,  "_resetStateAndSendPendingEventsToSystem:",  v14);
      }

      else
      {
        -[NSMutableArray addObject:](self->_eventQueue, "addObject:", v6);
        -[SCRCTargetSelectorTimer cancel](self->_releaseTimer, "cancel");
        -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_holdTimer, "dispatchAfterDelay:", self->_holdDuration);
        uint64_t v10 = 3LL;
LABEL_26:
        *p_state = v10;
      }

LABEL_28:
    uint64_t v41 = (unint64_t)v19;
    if (v34)
    {
      int v42 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
      id v43 = objc_claimAutoreleasedReturnValue([v42 dialectForLanguageID:v34]);
    }

    else
    {
      int v42 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v43 = objc_claimAutoreleasedReturnValue([v42 currentLanguageMap]);
    }

    int v44 = (void *)v43;

    v137 = v44;
    uint64_t v45 = sub_10004A990(v44, v34, v153);
    uint64_t v46 = v45;
    v136 = v32;
    if (v45 && ([(id)qword_1001ACDA0 characterIsMember:(unsigned __int16)v160] & 1) != 0)
    {
      v138 = 0LL;
      v47 = 0LL;
      int v48 = v41;
    }

    else
    {
      v49 = (__CFString *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:]( v150,  "punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:",  v153,  v148,  v147,  v152,  v145,  v144));
      v138 = (void *)objc_claimAutoreleasedReturnValue( -[VOTOutputSpeechComponent punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:]( v150,  "punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:",  v153,  0LL,  v146,  v152,  v145,  v144));
      if ((v46 & 1) != 0)
      {
        int v48 = v41;
        v47 = v49;
        double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
      }

      else
      {
        int v48 = v41;
        v47 = v49;
        if (-[__CFString isEqualToString:](v49, "isEqualToString:", v153))
        {
          double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
          if ([v138 length])
          {
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputSpeechComponent currentAllPunctuationTable](v150, "currentAllPunctuationTable"));
            v51 = objc_claimAutoreleasedReturnValue([v50 objectForIndex:(unsigned __int16)v160]);

            v47 = (__CFString *)v51;
          }
        }

        else
        {
          double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
        }
      }
    }

    if (!a8 && (unsigned __int16)v160 == 44)
    {
      uint64_t v38 = (id)v48;
      uint64_t v52 = v47;
      v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "substringWithRange:", v162, 1));
      [v16 appendString:v53];

      v47 = v52;
      v162 += v32;
LABEL_139:

      uint64_t v40 = v137;
LABEL_140:

      id v19 = v38;
      goto LABEL_141;
    }

    v54 = -[__CFString length](v47, "length");
    v55 = (unsigned __int16)v160;
    if (v54 && (unsigned __int16)v160 != 45)
    {
LABEL_87:
      if (v55 != 35)
      {
LABEL_100:
        if (v55 == 186)
        {
          v86 = [v12 length];
          if ((unint64_t)v86 > v162 + 1)
          {
            v87 = objc_msgSend(v12, "characterAtIndex:") - 67;
            if (v87 <= 8 && ((1 << v87) & 0x109) != 0)
            {

              v47 = @"°";
LABEL_106:
              if (!-[__CFString isEqualToString:](v47, "isEqualToString:", v153))
              {
                v132 = 1;
                goto LABEL_113;
              }
}

  uint64_t v25 = VOSLocString(@"VOSKey.option");
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  [v14 appendStringWithComma:v26];

  if ((v18 & 4) == 0)
  {
LABEL_15:
    if ((v18 & 0x10) == 0) {
      goto LABEL_16;
    }
LABEL_30:
    id v29 = VOSLocString(@"VOSKey.capslock");
    id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    [v14 appendStringWithComma:v30];

    if ((v18 & 0x40) == 0) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

LABEL_107:
              v88 = sub_10003132C((unsigned __int16)v160);
              v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
              if (v89 && ([v12 rangeOfComposedCharacterSequenceAtIndex:v162], v90 == 1))
              {
                v91 = v89;

                v132 = 0;
                v47 = v91;
              }

              else
              {
                v132 = 1;
              }

LABEL_113:
              if (a7 || (unsigned __int16)v160 != 10)
              {
                v92 = (void *)v48;
                if (!v47) {
                  goto LABEL_124;
                }
                v94 = v47;
                v95 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v150->_languageExceptions, "objectForKey:", v143));
                v96 = [v95 count];

                if (!v96)
                {
                  uint64_t v16 = v151;
                  v47 = v94;
                  double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
                  goto LABEL_124;
                }

                v97 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v150->_languageExceptions, "objectForKey:", v143));
                v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCharacters:length:]( &OBJC_CLASS___NSString,  "stringWithCharacters:length:",  &v160,  1LL));
                v93 = (__CFString *)objc_claimAutoreleasedReturnValue([v97 objectForKey:v98]);

                if (v93)
                {
                  v93 = v93;

                  v132 = 0;
                  v47 = v93;
                  uint64_t v16 = v151;
                }

                else
                {
                  uint64_t v16 = v151;
                  v47 = v94;
                }

                double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
              }

              else
              {
                v92 = (void *)v48;
                v93 = v47;
                v47 = 0LL;
              }

LABEL_124:
              if (-[VOTOutputSpeechComponent _replaceRepeatedPuntuationAndEmoji:newString:charReplacementString:charSequence:charIndex:speakPunctuationCounts:languageCode:]( v150,  "_replaceRepeatedPuntuationAndEmoji:newString:charReplacementString:charSequence:charIndex:speakPunc tuationCounts:languageCode:",  qword_1001ACD98,  v12,  v16,  v153,  &v162,  a10,  v152))
              {
                uint64_t v38 = v92;
                goto LABEL_139;
              }

              v99 = (void *)objc_claimAutoreleasedReturnValue( -[AXIndexMap objectForIndex:]( v150->_noneTableOverrides,  "objectForIndex:",  (unsigned __int16)v160));
              v100 = (void *)objc_claimAutoreleasedReturnValue( -[AXIndexMap objectForIndex:]( v150->_specialPunctionTable,  "objectForIndex:",  (unsigned __int16)v160));
              if (v100)
              {

                goto LABEL_128;
              }

              if (v99 && ([v99 isEqual:v47] & 1) != 0)
              {
LABEL_128:
                v101 = v92;
                if (v47)
                {
LABEL_129:
                  [v16 appendString:v47];
                  v102 = v136;
LABEL_138:
                  uint64_t v38 = v101;
                  v162 += v102;

                  goto LABEL_139;
                }

LABEL_137:
                v102 = v136;
                v107 = v99;
                v108 = v23;
                v109 = v47;
                v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "substringWithRange:", v134, v136));
                [v16 appendString:v110];

                v47 = v109;
                double v23 = v108;
                v99 = v107;
                goto LABEL_138;
              }

              v101 = v92;
              if (!v47) {
                goto LABEL_137;
              }
              if (!v132) {
                goto LABEL_129;
              }
              v102 = v136;
              if (!-[__CFString length](v47, "length"))
              {
                [v16 appendString:@" "];
                goto LABEL_138;
              }

              v103 = v99;
              v104 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceCharacterSet"));
              v105 = v47;
              v106 = -[__CFString isEqualToString:](v47, "isEqualToString:", v153);
              v130 = v105;
              v135 = v104;
              if (-[__CFString length](v105, "length") == (id)1) {
                v133 = objc_msgSend( v104,  "characterIsMember:",  -[__CFString characterAtIndex:](v105, "characterAtIndex:", 0));
              }
              else {
                v133 = 0;
              }
              if ([v16 length]) {
                v111 = v106;
              }
              else {
                v111 = 1;
              }
              double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
              v99 = v103;
              if ((v111 & 1) == 0)
              {
                v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "substringFromIndex:", (char *)objc_msgSend(v16, "length") - 1));
                if ([v112 length] == (id)1
                  && (objc_msgSend( v135,  "characterIsMember:",  objc_msgSend(v112, "characterAtIndex:", 0)) & 1) == 0)
                {
                  [v16 appendString:@" "];
                }
              }

              if ((v133 & 1) != 0)
              {
                v113 = v135;
                if (!v106) {
                  goto LABEL_158;
                }
              }

              else
              {
                [v16 appendString:v130];
                v113 = v135;
                if ((v106 & 1) != 0)
                {
LABEL_158:

                  v47 = v130;
                  goto LABEL_138;
                }
              }

              [v16 appendString:@" "];
              goto LABEL_158;
            }
          }
        }

              if (sub_10004A018() && (_DWORD)v71 == 31)
              {
                currentRotors = v66->super._currentRotors;
                v86 = 31LL;
                goto LABEL_150;
              }

              switch((_DWORD)v71)
              {
                case 0x16:
                  v94 = (void *)objc_claimAutoreleasedReturnValue([v223 language]);
                  v95 = AXLanguageCanonicalFormToGeneralLanguage(v94);
                  v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
                  v97 = AXLanguageConvertToCanonicalForm(v96);
                  v98 = (void *)objc_claimAutoreleasedReturnValue(v97);

                  v99 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
                  sub_1000D4914(v66->super._currentRotors, (const void *)0x16);

                  goto LABEL_151;
                case 0x17:
                  v100 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace brailleLanguageRotorItems]);
                  if ((unint64_t)[v100 count] > 1)
                  {
                    v101 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
                    if ([v101 brailleEnabled])
                    {
                      v196 = v100;
                      v102 = (void *)objc_claimAutoreleasedReturnValue([v67 valueForKey:@"Enabled"]);
                      v103 = [v102 BOOLValue];

                      if (v103)
                      {
                        currentRotors = v66->super._currentRotors;
                        v86 = 23LL;
                        break;
                      }

  if (v287)
  {
    if (-[VOTElement shouldIncludeRowRangeInDescription](self, "shouldIncludeRowRangeInDescription"))
    {
      v104 = (char *)-[VOTElement rowRange](self, "rowRange");
      v106 = v105;
      if (v105)
      {
        v107 = v104;
        if (v104 != (char *)0x7FFFFFFF && v104 != (char *)0x7FFFFFFFFFFFFFFFLL)
        {
          if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXKeyboardKeyTrait))
          {
            v108 = AXFormatInteger(v107 + 1);
            v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
            v110 = [v303 addString:v109];

            v111 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
            [v111 setIsVoiceOverGeneratedContent:1];
LABEL_148:

            goto LABEL_149;
          }

          v112 = sub_10004AE68(off_1001AC148, @"one.of.many", 0LL, v298);
          v111 = (void *)objc_claimAutoreleasedReturnValue(v112);
          if ([v111 length])
          {
            v113 = v107 + 1;
            v114 = AXCFormattedString(v111, @"%d%d");
            v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
            v116 = sub_10004AE68(off_1001AC148, @"one.of.many.abbreviated", 0LL, v298);
            v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
            v285 = v106;
            v118 = AXCFormattedString(v117, @"%d%d");
            v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
            v120 = objc_msgSend(v303, "addString:brailleString:withLanguage:", v115, v119, v298, v113, v285);
            v121 = (os_log_s *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
            -[os_log_s setIsVoiceOverGeneratedContent:](v121, "setIsVoiceOverGeneratedContent:", 1LL);
          }

          else
          {
            v277 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOver sharedInstance]( &OBJC_CLASS___AXSubsystemVoiceOver,  "sharedInstance"));
            v278 = [v277 ignoreLogging];

            if ((v278 & 1) != 0) {
              goto LABEL_148;
            }
            v279 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
            v280 = AXLoggerForFacility(v279);
            v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v280);

            v281 = AXOSLogLevelFromAXLogLevel(0LL);
            if (!os_log_type_enabled(v115, v281)) {
              goto LABEL_147;
            }
            v282 = AXColorizeFormatLog(0LL, @"VO loc string unexpectedly nil. key:'one.of.many'. language:%@");
            v117 = (void *)objc_claimAutoreleasedReturnValue(v282);
            v284 = v298;
            v283 = _AXStringForArgs(v117);
            v119 = (void *)objc_claimAutoreleasedReturnValue(v283);
            v121 = v115;
            if (os_log_type_enabled(v121, v281))
            {
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v119;
              _os_log_impl((void *)&_mh_execute_header, v121, v281, "%{public}@", (uint8_t *)&buf, 0xCu);
            }

            v115 = v121;
          }

LABEL_147:
          goto LABEL_148;
        }
      }
    }
  }

LABEL_105:
        if (!v47) {
          goto LABEL_107;
        }
        goto LABEL_106;
      }

      v72 = v162 + 1;
      if (v72 < (unint64_t)[v12 length])
      {
        v73 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet letterCharacterSet](&OBJC_CLASS___NSCharacterSet, "letterCharacterSet"));
        v74 = [v12 rangeOfComposedCharacterSequenceAtIndex:v162 + 1];
        if (v74 != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v76 = v74;
          v77 = v75;
          if (-[__CFString characterIsMember:]( v73,  "characterIsMember:",  [v12 characterAtIndex:v74]) & 1) != 0 || (v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "substringWithRange:", v76, v77)),  v79 = TTSisSpeakableEmojiString(),  v78,  (v79))
          {
            v80 = sub_10004B314( (unsigned __int16)v160,  @"UnicodeHex.Alternate1.",  @"VOTOutputPunctuation",  v152);
            v81 = objc_claimAutoreleasedReturnValue(v80);

            uint64_t v16 = v151;
            goto LABEL_97;
          }
        }
      }

      v82 = v162 + 1;
      if (v82 >= (unint64_t)[v12 length])
      {
        uint64_t v16 = v151;
        goto LABEL_99;
      }

      v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet decimalDigitCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "decimalDigitCharacterSet"));
      v84 = objc_msgSend(v83, "characterIsMember:", objc_msgSend(v12, "characterAtIndex:", v162 + 1));

      uint64_t v16 = v151;
      if (!v84)
      {
LABEL_99:
        v55 = (unsigned __int16)v160;
        goto LABEL_100;
      }

      v85 = sub_10004B314((unsigned __int16)v160, @"UnicodeHex.Alternate2.", @"VOTOutputPunctuation", v152);
      v81 = objc_claimAutoreleasedReturnValue(v85);
      v73 = v47;
LABEL_97:

      v47 = (__CFString *)v81;
      goto LABEL_99;
    }

    if (![(id)qword_1001ACD98 characterIsMember:(unsigned __int16)v160])
    {
LABEL_86:
      v55 = (unsigned __int16)v160;
      goto LABEL_87;
    }

    if (v148)
    {
      uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue([v148 basePunctuationUUID]);
      if (-[__CFString isEqual:](v56, "isEqual:", AXSSVoiceOverPunctuationGroupSome))
      {
        v57 = (unsigned __int16)v160;
        if ((unsigned __int16)v160 != 44)
        {

          unsigned __int8 v58 = v57 == 38;
          uint64_t v16 = v151;
          if (v58) {
            goto LABEL_86;
          }
          goto LABEL_55;
        }

        uint64_t v16 = v151;
      }
}

LABEL_55:
    v131 = v48;
    v59 = v12;
    id v60 = (uint64_t)[v12 length];
    v61 = v162;
    v62 = v47;
    __int16 v63 = v162 - 1;
    if (v162 < 1)
    {
      v129 = 0;
    }

    else
    {
      if (v63 >= 2) {
        id v64 = 2LL;
      }
      else {
        id v64 = v162 - 1;
      }
      do
      {
        __int16 v65 = objc_msgSend(v149, "characterIsMember:", objc_msgSend(v59, "characterAtIndex:", v63));
        v67 = v64-- != 0;
        if (!v65) {
          break;
        }
        --v63;
      }

      while (v67);
      v129 = v65 ^ 1;
      v61 = v162;
    }

    if (v61 + 1 < v60)
    {
      v68 = 0LL;
      while (1)
      {
        v69 = v61 + v68;
        if ((objc_msgSend( v149,  "characterIsMember:",  objc_msgSend(v59, "characterAtIndex:", v61 + v68 + 1)) & 1) == 0 && (v69 != v162 || objc_msgSend(v59, "characterAtIndex:", v61 + v68 + 1) != 44))
        {
          break;
        }

        if (v68 <= 1)
        {
          ++v68;
        }

        goto LABEL_74;
      }

      uint64_t v12 = v59;
      uint64_t v16 = v151;
      goto LABEL_85;
    }

LABEL_74:
    else {
      v71 = 1;
    }
    uint64_t v16 = v151;
    if ((v71 & 1) != 0)
    {
      uint64_t v12 = v59;
LABEL_85:
      int v48 = v131;
      v47 = v62;
      double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
      goto LABEL_86;
    }

    v47 = v138;
    uint64_t v56 = v62;
    uint64_t v12 = v59;
    int v48 = v131;
    double v23 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
    goto LABEL_83;
  }

LABEL_159:
  -[VOTOutputSpeechComponent _replaceRepeatedEmoji:](v150, "_replaceRepeatedEmoji:", v16);
  v114 = v155;
  if (v155)
  {
    v154 = v12;
    v115 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v16));
    v156 = 0u;
    v157 = 0u;
    v158 = 0u;
    v159 = 0u;
    v116 = v155;
    v117 = [v116 countByEnumeratingWithState:&v156 objects:v163 count:16];
    if (v117)
    {
      v118 = v117;
      v119 = *(void *)v157;
      do
      {
        for (i = 0LL; i != v118; i = (char *)i + 1)
        {
          if (*(void *)v157 != v119) {
            objc_enumerationMutation(v116);
          }
          v121 = *(void **)(*((void *)&v156 + 1) + 8LL * (void)i);
          v122 = (void *)objc_claimAutoreleasedReturnValue([v121 objectForKey:@"_VORangeValue"]);
          v123 = [v122 rangeValue];
          v125 = v124;

          objc_msgSend(v115, "setAttributes:withRange:", v121, v123, v125);
        }

        v118 = [v116 countByEnumeratingWithState:&v156 objects:v163 count:16];
      }

      while (v118);
    }

    v126 = v115;
    uint64_t v12 = v154;
    v114 = v155;
    v127 = v148;
    uint64_t v16 = v151;
  }

  else
  {
    v126 = v16;
    v127 = v148;
  }

  return v126;
}

void sub_100032D94(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](&OBJC_CLASS___NSCharacterSet, "punctuationCharacterSet"));
  id v2 = [v1 mutableCopy];
  id v3 = (void *)qword_1001ACD98;
  qword_1001ACD98 = (uint64_t)v2;

  id v4 = (void *)qword_1001ACD98;
  char v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet symbolCharacterSet](&OBJC_CLASS___NSCharacterSet, "symbolCharacterSet"));
  [v4 formUnionWithCharacterSet:v5];

  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](&OBJC_CLASS___NSCharacterSet, "alphanumericCharacterSet"));
  uint64_t v7 = (void *)qword_1001ACDA0;
  qword_1001ACDA0 = v6;
}

void sub_100032FE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100033020(uint64_t a1, uint64_t a2)
{
  if (a2 && *(uint64_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) >= 3)
  {
    id v4 = sub_10004A988(off_1001AC148, @"repeat.filter.no.spaces", 0LL);
    char v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = AXFormatInteger(*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v5, v7, CEMEmojiTokenGetString(a2));
    id v15 = (id)objc_claimAutoreleasedReturnValue(v8);

    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v10 = *(void *)(v9 + 40);
    uint64_t v11 = *(void *)(v9 + 32) + *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    if (v11)
    {
      uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @", %@", v15));

      id v13 = (id)v12;
    }

    else
    {
      id v13 = v15;
    }

    id v16 = v13;
    objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", v11, v10, v13);
    uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += (char *)[v16 length] - v14;
  }

void sub_10003318C(void *a1, CFTypeRef cf, unint64_t a3, uint64_t a4)
{
  if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    if (a3 <= *(void *)(*(void *)(a1[6] + 8LL) + 40LL) + *(void *)(*(void *)(a1[6] + 8LL) + 32LL)
      && CEMEmojiTokensAreEquivalent(*(void *)(*(void *)(a1[5] + 8LL) + 24LL), cf, 0LL))
    {
      if (*(void *)(*(void *)(a1[5] + 8LL) + 24LL)) {
        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      }
    }

    else
    {
      (*(void (**)(void))(a1[4] + 16LL))();
      uint64_t v8 = *(const void **)(*(void *)(a1[5] + 8LL) + 24LL);
      if (v8)
      {
        CFRelease(v8);
        *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
      }
    }
  }

  if (!*(void *)(*(void *)(a1[5] + 8LL) + 24LL))
  {
    *(void *)(*(void *)(a1[6] + 8LL) + 32LL) = a3;
    *(void *)(*(void *)(a1[6] + 8LL) + 40LL) = 0LL;
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = CFRetain(cf);
    *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = 1LL;
  }

  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) += a4;
}

LABEL_5:
  return v10;
}

  LOBYTE(v6) = 0;
LABEL_6:
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000AC1C4;
  v15[3] = &unk_100176D38;
  v15[4] = self;
  AXPerformBlockOnMainThread(v15);
LABEL_7:

  return v6;
}

LABEL_7:
}

void sub_1000342DC(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([*(id *)(a1 + 32) length])
  {
    unint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = (char *)objc_msgSend( *(id *)(a1 + 32),  "rangeOfString:options:range:",  v5,  2,  v6,  (char *)objc_msgSend(*(id *)(a1 + 32), "length") - v6);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      if (!v7) {
        goto LABEL_13;
      }
      if (objc_msgSend( *(id *)(a1 + 40),  "characterIsMember:",  objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", v7 - 1)))
      {
LABEL_13:
        if (&v10[(void)v8] == [*(id *)(a1 + 32) length]
          || objc_msgSend( *(id *)(a1 + 40),  "characterIsMember:",  objc_msgSend(*(id *)(a1 + 32), "characterAtIndex:", &v10[(void)v8])))
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringToIndex:", objc_msgSend(v14, "rangeOfString:", @".")));

          id v12 = sub_10004A988(off_1001AC148, v11, 0LL);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", v8, v10, v13);
          uint64_t v10 = (char *)[v13 length];

          id v14 = v11;
        }
      }

      unint64_t v6 = (unint64_t)&v8[(void)v10];
    }

    while (v6 < (unint64_t)[*(id *)(a1 + 32) length]);
  }
}

void sub_100034A9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100034B24(void *a1)
{
  id v1 = a1;
  else {
    uint64_t v2 = (uint64_t)[v1 hasPrefix:@"ar"];
  }

  return v2;
}

uint64_t sub_100034B78()
{
  return 0LL;
}

id sub_100034B80()
{
  if (qword_1001ACDC0 != -1) {
    dispatch_once(&qword_1001ACDC0, &stru_100177588);
  }
  return (id)qword_1001ACDB8;
}

void sub_100034BC0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"1234567890"));
  uint64_t v2 = (void *)qword_1001ACDB8;
  qword_1001ACDB8 = v1;
}

id sub_100034BF4()
{
  if (qword_1001ACDD0 != -1) {
    dispatch_once(&qword_1001ACDD0, &stru_1001775A8);
  }
  return (id)qword_1001ACDC8;
}

void sub_100034C34(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
  uint64_t v2 = (void *)qword_1001ACDC8;
  qword_1001ACDC8 = v1;
}

void sub_100035748( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a2 == 1)
  {
    id v16 = objc_begin_catch(exception_object);
    uint64_t v19 = VOTLogSpeech(v16, v17, v18);
    double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_1000F0AB8();
    }

    [a15 mutableCopy];
    objc_end_catch();
    JUMPOUT(0x1000356C4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100035A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100035A98(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v9 = v7 + v8;
  if (a2 != v7 + v8)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", v7 + v8, a2 - (v7 + v8)));
    if (v9) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *(_BYTE *)(a1 + 72) == 0;
    }
    uint64_t v12 = !v11;
    id v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _stringForNormalText:v10 action:*(void *)(a1 + 48) allowPausingAtBoundaries:1 ignoreLeadingCommas:v12]);
    [*(id *)(a1 + 56) appendString:v13];
  }

  id v14 = (char *)[*(id *)(a1 + 32) length];
  if (a3 >= &v14[-a2]) {
    a3 = &v14[-a2];
  }
  if (&a3[a2] <= [*(id *)(a1 + 32) length])
  {
    id v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", a2, a3));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _stringForLiteralText:v17 action:*(void *)(a1 + 48) allowChangingLanguageForPunctuation:0]);
    [*(id *)(a1 + 56) appendString:v15];
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8LL);
    *(void *)(v16 + 32) = a2;
    *(void *)(v16 + 40) = a3;
  }

void sub_100035EEC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:AXUIAccessibilitySpeechAttributePhonemeSubstitution]);
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    id v3 = v4;
  }
}

void sub_100035F44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc_init(&OBJC_CLASS___TTSSubstitution);
  [v7 setOriginalString:v6];

  [v7 setPhonemes:v5];
  [*(id *)(a1 + 32) addObject:v7];
}

LABEL_36:
}

            uint64_t v27 = v68;
            [v68 addObject:v33];
          }
        }

        id v30 = [v28 countByEnumeratingWithState:&v82 objects:v93 count:16];
      }

      while (v30);
    }

    int v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    uint64_t v45 = v65;
    uint64_t v46 = [v45 countByEnumeratingWithState:&v74 objects:v91 count:16];
    if (v46)
    {
      v47 = v46;
      int v48 = *(void *)v75;
      uint64_t v66 = *(void *)v75;
      v67 = v45;
      do
      {
        for (m = 0LL; m != v47; m = (char *)m + 1)
        {
          if (*(void *)v75 != v48) {
            objc_enumerationMutation(v45);
          }
          uint64_t v50 = *(void **)(*((void *)&v74 + 1) + 8LL * (void)m);
          if (([v28 containsObject:v50] & 1) == 0)
          {
            v51 = (void *)objc_claimAutoreleasedReturnValue(-[VOTTVSpeechRequestManager requestHeaders](self, "requestHeaders"));
            uint64_t v52 = [v51 containsObject:v50];

            if (v52)
            {
              v53 = (void *)objc_claimAutoreleasedReturnValue(-[VOTTVSpeechRequestManager requestHeaders](self, "requestHeaders"));
              v54 = (void *)objc_claimAutoreleasedReturnValue([v53 originalElementforElement:v50]);

              v55 = (void *)objc_claimAutoreleasedReturnValue([v54 snapshot]);
              [v54 updateCache];
              objc_msgSend(v54, "setAspectMask:", objc_msgSend(v54, "differenceAspectMask:", v55));
              [v44 addObject:v54];
            }

            else
            {
              uint64_t v56 = v28;
              v57 = v44;
              v72 = 0u;
              v73 = 0u;
              v70 = 0u;
              v71 = 0u;
              unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue(-[VOTTVSpeechRequestManager requestHeaders](self, "requestHeaders"));
              v59 = [v58 countByEnumeratingWithState:&v70 objects:v90 count:16];
              if (v59)
              {
                id v60 = v59;
                v61 = *(void *)v71;
                while (2)
                {
                  for (n = 0LL; n != v60; n = (char *)n + 1)
                  {
                    if (*(void *)v71 != v61) {
                      objc_enumerationMutation(v58);
                    }
                    if (![*(id *)(*((void *)&v70 + 1) + 8 * (void)n) differenceAspectMask:v50])
                    {
                      [v50 setAspectMask:0];
                      goto LABEL_57;
                    }
                  }

                  id v60 = [v58 countByEnumeratingWithState:&v70 objects:v90 count:16];
                  if (v60) {
                    continue;
                  }
                  break;
                }
              }
}
}
}

void sub_100036D70(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithRange:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithRange:",  10240LL,  256LL));
  uint64_t v2 = (void *)qword_1001ACDD8;
  qword_1001ACDD8 = v1;
}

void sub_100038040(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"(\\s{1})?(\\[\\[SSMLESCAPED\\]\\])|▓\\\\lt;break time=▓\\\\quot;\\d*(ms|s)▓\\\\quot; ▓\\\\#47;▓\\\\gt;|▓\\\\lt;say-as interpret-as=▓\\\\quot;(.+?)▓\\\\quot;▓\\\\gt;|▓\\\\lt;▓\\\\#47;say-as▓\\\\gt;|(\\[\\[\\[SSMLESCAPED\\]\\]\\][,]?)",
           0LL,
           0LL));
  uint64_t v2 = (void *)qword_1001ACDE8;
  qword_1001ACDE8 = v1;

  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"(\\s{1})?(\\e\\\\pause=(\\d{1,4})\\\\ |\\[\\[slnc \\d{1,4}\\]\\])([,]\\s{1})?",  0LL,  0LL));
  id v4 = (void *)qword_1001ACDF0;
  qword_1001ACDF0 = v3;

  uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSRegularExpression regularExpressionWithPattern:options:error:]( &OBJC_CLASS___NSRegularExpression,  "regularExpressionWithPattern:options:error:",  @"(\\x1b\\\\tn=[a-z]+\\\\|\\[\\[char [a-z]+\\]\\]|\\x1b\\\\rst\\\\)",  0LL,  0LL));
  id v6 = (void *)qword_1001ACDF8;
  qword_1001ACDF8 = v5;
}

void sub_100038F8C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

  ;
}

void sub_100038FE0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

void sub_10003901C(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_100039030(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_10003951C(int a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection"));
  unsigned __int8 v5 = [v4 isConnected];

  if ((v5 & 1) == 0)
  {
    _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"No SpringBoard connection... restarting.");
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection"));
    [v6 restartConnection];
  }

  unsigned int v12 = 0;
  *(void *)&v11[1] = 0LL;
  v11[0] = 0;
  if (!a2 || !AXSerializeWrapper(a2, 1LL, v13, &v12, &v11[1], v11))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection"));
    uint64_t v8 = (__CFMachPort *)[v7 _sbPort];

    if (v8) {
      mach_port_t Port = CFMachPortGetPort(v8);
    }
    else {
      mach_port_t Port = 0;
    }
    if (sub_1000E7060(Port, 0, a1, (uint64_t)v13, v12, *(uint64_t *)&v11[1], v11[0]))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection"));
      [v10 _sbPort];
      _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"Was not able to post to SB: %@ (accessory %d)-- %d");
    }

    if (v11[0]) {
      munmap(*(void **)&v11[1], v11[0]);
    }
  }

void sub_10003986C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableCharacterSet controlCharacterSet]( &OBJC_CLASS___NSMutableCharacterSet,  "controlCharacterSet"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
  [v1 formUnionWithCharacterSet:v2];

  [v1 addCharactersInString:@"\u200E"];
  uint64_t v3 = (void *)qword_1001ACE08;
  qword_1001ACE08 = (uint64_t)v1;
}

void sub_100039C88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[VOTNameSearcherLaunchableApp initWithName:displayID:]( objc_alloc(&OBJC_CLASS___VOTNameSearcherLaunchableApp),  "initWithName:displayID:",  v6,  v5);

  [*(id *)(a1 + 32) addObject:v7];
}

void sub_100039D00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[VOTNameSearcherLaunchableApp initWithName:displayID:]( objc_alloc(&OBJC_CLASS___VOTNameSearcherLaunchableApp),  "initWithName:displayID:",  v6,  v5);

  [*(id *)(a1 + 32) addObject:v7];
}

int64_t sub_100039D78(id a1, VOTNameSearcherLaunchableApp *a2, VOTNameSearcherLaunchableApp *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTNameSearcherLaunchableApp name](a2, "name"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTNameSearcherLaunchableApp name](v4, "name"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_100039F14(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"x"]);
    [v2 floatValue];
    double v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"y"]);

    [v5 floatValue];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue ax_valueWithCGPoint:](&OBJC_CLASS___NSValue, "ax_valueWithCGPoint:", v4, v6));
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id sub_100039FBC(void *a1)
{
  id v1 = a1;
  if (!v1) {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTBrailleGestureUtilities.m",  27LL,  "NSDictionary *VOTDictionaryFromPointValue(NSValue *__strong)",  @"Should not have tried to make a plist dictionary for a nil point value.");
  }
  objc_msgSend(v1, "ax_CGPointValue");
  double v3 = v2;
  v8[0] = @"x";
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v8[1] = @"y";
  v9[0] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v3));
  v9[1] = v5;
  float v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  2LL));

  return v6;
}

double sub_10003A0C4(void *a1)
{
  id v1 = a1;
  double x = CGPointZero.x;
  double y = CGPointZero.y;
  id v4 = [v1 count];
  if (v4)
  {
    unint64_t v5 = (unint64_t)v4;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = v1;
    id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v15;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v15 != v9) {
            objc_enumerationMutation(v6);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v10), "ax_CGPointValue", (void)v14);
          double x = x + v11;
          double y = y + v12;
          uint64_t v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v8);
    }

    double x = x / (double)v5;
  }

  return x;
}

void sub_10003A2E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003A2FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003A30C(uint64_t a1)
{
}

void sub_10003A314( NSRange *a1, void *a2, NSUInteger a3, uint64_t a4, NSUInteger a5, NSUInteger a6, _BYTE *a7)
{
  id v14 = a2;
  NSRange v15 = a1[3];
  id v22 = v14;
  if (v15.length)
  {
    v23.NSUInteger location = a5;
    v23.NSUInteger length = a6;
    NSRange v16 = NSIntersectionRange(v15, v23);
    NSUInteger length = a1[3].length;
    if (v16.length != length)
    {
      v15.NSUInteger location = a1[3].location;
      goto LABEL_10;
    }
  }

  else if (v15.location < a5 || v15.location - a5 > a6)
  {
    NSUInteger length = 0LL;
LABEL_10:
    NSUInteger v19 = length + v15.location;
    double v20 = v22;
    if (a3 <= v19) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  NSUInteger location = a1[2].location;
  *(void *)(location + 24) = a3;
  *(void *)(location + 32) = a4;
  objc_storeStrong((id *)(*(void *)(a1[2].length + 8) + 40LL), a2);
  double v20 = v22;
LABEL_13:
  *a7 = 1;
LABEL_14:
}

void sub_10003A500( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10003A95C(uint64_t a1)
{
  double v3 = 0LL;
  if (!qword_1001ACE20)
  {
    __int128 v4 = off_100177758;
    uint64_t v5 = 0LL;
    qword_1001ACE20 = _sl_dlopen(&v4, &v3);
  }

  if (!qword_1001ACE20) {
    sub_1000F0E6C(&v3);
  }
  if (v3) {
    free(v3);
  }
  Class result = objc_getClass("UITextChecker");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1000F0EE8();
  }
  qword_1001ACE18 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10003AB68(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTDisplayManager) init];
  double v2 = (void *)qword_1001ACE30;
  qword_1001ACE30 = (uint64_t)v1;
}

id sub_10003AE70(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setCursorFrameForElement:*(void *)(a1 + 40) animated:*(unsigned __int8 *)(a1 + 48)];
}

LABEL_16:
}

        uint64_t v31 = 0u;
        v32 = 0u;
        uint64_t v29 = 0u;
        id v30 = 0u;
        NSUInteger v19 = v12;
        __int128 v17 = [v19 countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v17)
        {
          double v20 = *(void *)v30;
          while (2)
          {
            for (i = 0LL; i != v17; i = (char *)i + 1)
            {
              if (*(void *)v30 != v20) {
                objc_enumerationMutation(v19);
              }
              id v22 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
              objc_msgSend(v22, "frame", (void)v29);
              v34.double x = x;
              v34.double y = y;
              if (CGRectContainsPoint(v35, v34))
              {
                __int128 v17 = v22;
                goto LABEL_26;
              }
            }

            __int128 v17 = [v19 countByEnumeratingWithState:&v29 objects:v33 count:16];
            if (v17) {
              continue;
            }
            break;
          }
        }
}

      LOBYTE(v6) = 1;
      goto LABEL_17;
    }

    if ([v5 type] == 1032)
    {
      playButtonInterceptor = self->_playButtonInterceptor;
LABEL_26:
      [playButtonInterceptor buttonDownOccurred:v5];
      goto LABEL_27;
    }

    if ([v5 type] == 1033)
    {
      menuButtonInterceptor = self->_playButtonInterceptor;
    }

    else
    {
      if ([v5 type] == 1220 || objc_msgSend(v5, "type") == 1218)
      {
        playButtonInterceptor = self->_selectButtonInterceptor;
        goto LABEL_26;
      }

      if ([v5 type] == 1216)
      {
        playButtonInterceptor = self->_menuButtonInterceptor;
        goto LABEL_26;
      }

      if ([v5 type] == 1217)
      {
        menuButtonInterceptor = self->_menuButtonInterceptor;
      }

      else
      {
        if ([v5 type] != 1221 && objc_msgSend(v5, "type") != 1219)
        {
          id v6 = objc_claimAutoreleasedReturnValue([v5 keyInfo]);

          if (!v6) {
            goto LABEL_6;
          }
          if (AXEventTypeIsVolumeButtonPress([v5 type])) {
            goto LABEL_5;
          }
          goto LABEL_16;
        }

        id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        [v14 postNotificationName:@"VOTEventFactoryDidReceiveSelectButtonUpEvent" object:0];

        menuButtonInterceptor = self->_selectButtonInterceptor;
      }
    }

    [menuButtonInterceptor buttonUpOccurred:v5];
LABEL_27:
    LOBYTE(v6) = 1;
    goto LABEL_6;
  }

  p_brailleLineRange = &self->_brailleLineRange;
  if (self->_brailleLineRange.location != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_48;
  }
  if (!self->_lastBraillePanSucceeded)
  {
    uint64_t v27 = self->_lastBraillePanDirection ? 0 : v12;
    if (v27 == 1)
    {
      if (v19)
      {
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v13 value]);
        if (&v15[v17])
        {
          uint64_t v29 = &v15[v17 - 1];
LABEL_44:
          int v35 = 1LL;
LABEL_47:
          self->_brailleLineRange.NSUInteger location = (NSUInteger)objc_msgSend(v28, "lineRangeForRange:", v29, v35);
          self->_brailleLineRange.NSUInteger length = v38;

          goto LABEL_48;
        }
      }

      else
      {
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_brailleElement, "value"));
        if ([v28 length])
        {
          uint64_t v29 = (char *)[v28 length] - 1;
          goto LABEL_44;
        }
      }

      uint64_t v29 = 0LL;
      int v35 = 0LL;
      goto LABEL_47;
    }
  }

  if (v12)
  {
    if ((v19 & 1) != 0)
    {
      id v30 = (char *)[v13 selectedTextRange];
      v32 = &v30[v31];
      if (&v30[v31] < v15 || v32 > &v15[v17]) {
        goto LABEL_41;
      }
    }

    else
    {
      if (self->_lastBraillePanDirection == 1)
      {
        uint64_t v33 = 0LL;
        __int16 v34 = 0LL;
      }

      else
      {
        uint64_t v33 = (char *)-[VOTElement selectedTextRange](self->_brailleElement, "selectedTextRange");
      }

      if (v33 == (char *)0x7FFFFFFF)
      {
        NSRange v15 = 0LL;
LABEL_41:
        p_brailleLineRange->NSUInteger location = (NSUInteger)v15;
        goto LABEL_48;
      }

      v32 = &v33[v34];
    }

    NSRange v15 = v32;
    goto LABEL_41;
  }

  if (v20 && !self->_lastBraillePanDirection)
  {
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement pageContent](self->_brailleElement, "pageContent"));
    self->_brailleLineRange.NSUInteger location = (NSUInteger)objc_msgSend( v36,  "lineRangeForRange:",  (char *)objc_msgSend(v36, "length") - 1,  1);
    self->_brailleLineRange.NSUInteger length = v37;
  }

  else
  {
    p_brailleLineRange->NSUInteger location = 0LL;
  }

    double v20 = (void *)objc_claimAutoreleasedReturnValue( +[VOTBrailleGestureHalfPattern halfPatternWithTopDot:middleDot:bottomDot:fourthDot:]( &OBJC_CLASS___VOTBrailleGestureHalfPattern,  "halfPatternWithTopDot:middleDot:bottomDot:fourthDot:",  v14,  v15,  v16,  0LL));
    if ((v9 & 4) == 0)
    {
LABEL_18:
      self = v30;
      if ((v9 & 2) != 0)
      {
      }

      if ((v9 & 1) != 0)
      {
      }

      [v29 addObject:v20];

      goto LABEL_23;
    }

void sub_10003B614(uint64_t a1)
{
  id v6 = @"frame";
  v8.origin.double x = CGRectZero.origin.x;
  v8.origin.double y = CGRectZero.origin.y;
  v8.size.width = CGRectZero.size.width;
  v8.size.height = CGRectZero.size.height;
  double v2 = NSStringFromRect(v8);
  double v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v7 = v3;
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uiClient]);
  [v5 sendAsynchronousMessage:v4 withIdentifier:1 targetAccessQueue:0 completion:0];
}

void sub_10003BB10(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(double, double, double, double))(*(void *)(a1 + 32) + 16LL))( CGRectNull.origin.x,  CGRectNull.origin.y,  CGRectNull.size.width,  CGRectNull.size.height);
  }

  else
  {
    uint64_t v5 = (NSString *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"convertedFrame"]);
    uint64_t v4 = *(void *)(a1 + 32);
    CGRect v6 = CGRectFromString(v5);
    (*(void (**)(uint64_t, CGPoint, __n128, CGSize, __n128))(v4 + 16))( v4,  v6.origin,  *(__n128 *)&v6.origin.y,  v6.size,  *(__n128 *)&v6.size.height);
  }

void sub_10003BCC4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    (*(void (**)(void, void))(v3 + 16))(*(void *)(a1 + 32), 0LL);
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"convertedFramesStrings"]);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }

id sub_10003BF4C(void *a1)
{
  id v1 = a1;
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  2 * (void)[v1 count]));
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * (void)v7), "pointValue", (void)v13);
        double v9 = v8;
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
        [v2 addObject:v10];

        double v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v9));
        [v2 addObject:v11];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }

  return v2;
}

void sub_10003CA5C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] && objc_msgSend(*(id *)(a1 + 40), "_isSystemReadyForUI"))
  {
    double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uiClient]);
    uint64_t v3 = *(void *)(a1 + 32);
    v11[0] = @"VoiceOverCaptionText";
    v11[1] = @"VoiceOverCaptionLanguage";
    id v4 = *(const __CFString **)(a1 + 48);
    if (!v4) {
      id v4 = &stru_10017A920;
    }
    v12[0] = v3;
    v12[1] = v4;
    v11[2] = @"VoiceOverCaptionSpokenRange";
    id v5 = NSStringFromRange(*(NSRange *)(a1 + 64));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v12[2] = v6;
    v11[3] = @"VoiceOverCaptionVoiceName";
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) name]);
    double v8 = (void *)v7;
    if (v7) {
      double v9 = (const __CFString *)v7;
    }
    else {
      double v9 = &stru_10017A920;
    }
    v12[3] = v9;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  4LL));
    [v2 sendAsynchronousMessage:v10 withIdentifier:8 targetAccessQueue:0 completion:0];
  }

id sub_10003DA6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _crystalBMigrateDuckingVolumePreferences];
}

void sub_10003ECBC(id a1)
{
  id v1 = -[AXUIClient initWithIdentifier:serviceBundleName:]( objc_alloc(&OBJC_CLASS___AXUIClient),  "initWithIdentifier:serviceBundleName:",  @"AXAssetClient-VoiceOver",  @"AXAssetAndDataServer");
  double v2 = (void *)qword_1001ACE38;
  qword_1001ACE38 = (uint64_t)v1;
}

void sub_1000401A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100040204(id a1, NSNotification *a2)
{
  uint64_t v7 = a2;
  double v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSNotification object](v7, "object"));
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___AXMDisplayManager, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSNotification object](v7, "object"));
    sub_10004A170(v6);
  }
}

void sub_100040278(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained userCommandManager]);
  [v1 reloadPreferringUserProfile];
}

void sub_1000402BC()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  [v0 stop:1];
}

uint64_t sub_100040304(int a1, int a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, kAXSVoiceOverTouchUsageConfirmedNotification)) {
    return (uint64_t)_objc_msgSend((id)VOTSharedWorkspace, "_voiceOverUsageConfirmed", v4);
  }
  if (CFEqual(cf1, @"com.apple.preferences.sounds.changed")) {
    return (uint64_t)[(id)VOTSharedWorkspace preferencesKeyboardClickStatusChange:0];
  }
  if (CFEqual(cf1, @"com.apple.language.changed"))
  {
    id v5 = (void *)VOTSharedWorkspace;
    uint64_t v6 = "_languageChanged";
    return (uint64_t)[v5 performSelector:v6 withObject:0 afterDelay:2.0];
  }

  if (CFEqual(cf1, @"com.apple.purplebuddy.LanguageResetReady"))
  {
    id v5 = (void *)VOTSharedWorkspace;
    uint64_t v6 = "_languageChangedInBuddy";
    return (uint64_t)[v5 performSelector:v6 withObject:0 afterDelay:2.0];
  }

  if (CFEqual(cf1, kAXSVoiceOverTouchSpeakingRateChangedNotification)) {
    return (uint64_t)_objc_msgSend((id)VOTSharedWorkspace, "_preferencesSpeechRateChange", v7);
  }
  if (CFEqual(cf1, kAXSVoiceOverTouchEnabledNotification)) {
    return (uint64_t)_[(id)VOTSharedWorkspace _voiceOverTouchEnabledChange:kAXSVoiceOverTouchEnabledNotification];
  }
  if (CFEqual(cf1, kAXSVoiceOverTouchLanguageRotorChangedNotification)) {
    return (uint64_t)[(id)VOTSharedWorkspace preferencesLanguageRotorItemsChanged:0];
  }
  if (CFEqual(cf1, kAXSVoiceOverTouchBrailleLanguageRotorChangedNotification)) {
    return (uint64_t)[(id)VOTSharedWorkspace preferencesBrailleLanguageRotorItemsChanged:0];
  }
  if (CFEqual(cf1, kTTSPreferencesSpokenLanguageChangedNotification)) {
    return (uint64_t)[(id)VOTSharedWorkspace systemSpokenLanguageChanged:0];
  }
  if (CFEqual(cf1, kAXSVoiceOverTouchTypingModeChangedNotification)) {
    return (uint64_t)_[(id)VOTSharedWorkspace _preferencesTypingModeChanged:0];
  }
  uint64_t result = CFEqual(cf1, kAXSVoiceOverTouchScreenCurtainNotification);
  if ((_DWORD)result) {
    return (uint64_t)_[(id)VOTSharedWorkspace _preferencesScreenCurtainChanged:0];
  }
  return result;
}

void sub_100040524(id a1)
{
  if (_AXSVoiceOverTouchEnabledThroughAccessory(a1))
  {
    uint64_t v1 = AXLogSystemApp();
    double v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "VOT requesting system-app wake-up for enabled-through-accessory",  v4,  2u);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSystemAppServer server](&OBJC_CLASS___AXSystemAppServer, "server"));
    [v3 wakeUpDeviceIfNecessary];
  }

void sub_1000405AC(id a1)
{
}

uint64_t sub_1000405C4(uint64_t a1)
{
  uint64_t result = AXInPreboardScenario(a1);
  if ((result & 1) == 0)
  {
    [(id)VOTSharedWorkspace setDisableVoiceOverSettingOnStop:0];
    double v2 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle sharedInstance]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "sharedInstance"));
    unsigned __int8 v3 = [v2 ignoreLogging];

    if ((v3 & 1) == 0)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle identifier]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "identifier"));
      uint64_t v5 = AXLoggerForFacility(v4);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);

      os_log_type_t v7 = AXOSLogLevelFromAXLogLevel(1LL);
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = AXColorizeFormatLog( 1LL,  @"No longer in PreBoard scenario.  Killing ourselves so we can relaunch with a proper SpringBoard server.");
        double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = _AXStringForArgs(v9);
        double v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v6, v7))
        {
          int v12 = 138543362;
          __int128 v13 = v11;
          _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}@", (uint8_t *)&v12, 0xCu);
        }
      }
    }

    exit(0);
  }

  return result;
}

void sub_100040F78(id a1)
{
}

void sub_100040F84(id a1)
{
}

void sub_100040F90(id a1)
{
}

void sub_100040F9C(id a1)
{
}

void sub_100040FA8(id a1)
{
}

void sub_100040FB4(id a1)
{
}

void sub_100040FC0(id a1)
{
}

void sub_100040FCC(id a1)
{
}

void sub_100040FD8(id a1)
{
}

void sub_100040FE4(id a1)
{
}

void sub_100040FF0(id a1)
{
}

void sub_100040FFC(id a1)
{
}

void sub_100041008(id a1)
{
}

void sub_100041014(id a1)
{
}

void sub_100041020(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(void **)(v1 + 408);
  *(void *)(v1 + 40_Block_object_dispose(va, 8) = 0LL;
}

void sub_100041030(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1 + 32) + 447) = [v2 voiceOverImageCaptionsEnabled];
}

void sub_100041078(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1 + 32) + 448) = [v2 voiceOverShouldSpeakDiscoveredText];
}

void sub_1000410C0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1 + 32) + 449) = [v2 voiceOverAutomaticButtonLabels];
}

void sub_100041108(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 544) = [v2 voiceOverContentDescriptionLevel];
}

void sub_100041150(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 56[(id)VOTSharedWorkspace setDisableVoiceOverSettingOnStop:0] = objc_msgSend(v2, "voiceOverContainerOutputFeedback");
}

void sub_100041198(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 568) = [v2 voiceOverMoreContentOutputFeedback];
}

void sub_1000411E0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1 + 32) + 45[(id)VOTSharedWorkspace setDisableVoiceOverSettingOnStop:0] = objc_msgSend(v2, "voiceOverSoundEffectsEnabled");
}

void sub_100041228(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 576) = [v2 voiceOverNumberFeedback];
}

void sub_100041270(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(void *)(*(void *)(a1 + 32) + 584) = [v2 voiceOverVerbosityEmojiFeedback];
}

void sub_1000412B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  *(_BYTE *)(*(void *)(a1 + 32) + 456) = [v2 voiceOverBrailleAlertsEnabled];
}

void sub_100041300(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 imageCaptioningDisabledApps]);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 552);
  *(void *)(v3 + 552) = v2;
}

void sub_100041354(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend(*(id *)(a1 + 32), "setNavigationDirection:", objc_msgSend(v2, "voiceOverNavigationDirectionMode"));
}

void sub_1000413A0(id a1)
{
}

void sub_1000413AC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend(*(id *)(a1 + 32), "setUpdateRotorWithElement:", objc_msgSend(v2, "voiceOverRotorUpdatesWithElement"));
}

void sub_1000413F8(id a1)
{
}

void sub_100041404(id a1)
{
}

void sub_100041410(id a1)
{
}

void sub_10004141C(id a1)
{
}

void sub_100041574(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:off_1001ABEF0 object:0];
}

id sub_100041624(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateActivityListeners];
}

void sub_100041A00(_Unwind_Exception *a1)
{
}

void sub_100041AE0(_Unwind_Exception *a1)
{
}

void sub_10004279C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithPath:]( &OBJC_CLASS___NSBundle,  "bundleWithPath:",  @"/System/Library/Frameworks/UIKit.framework"));
  [v1 load];
}

id sub_1000432D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postKeyboardEventsForModifiers:*(unsigned int *)(a1 + 40) isKeyDown:*(unsigned __int8 *)(a1 + 44)];
}

id sub_1000432E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _postKeyboardEventWithKeyCode:*(unsigned __int16 *)(a1 + 44) characters:0 originalCharacters:0 modifierState:*(unsigned int *)(a1 + 40) isKeyDown:*(unsigned __int8 *)(a1 + 46)];
}

void sub_100043368(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 46)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 44)));
  [v2 _postKeyboardEvent:v5 modifiers:v3 keyCode:v4];
}

void sub_1000434C0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 56)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  *(unsigned __int16 *)(a1 + 60)));
  [v2 _postKeyboardEventWithCharacters:v3 originalCharacters:v4 modifiers:v6 keyCode:v5];
}

id sub_100043EF8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uuid]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100043FE8(_Unwind_Exception *a1)
{
}

void sub_1000440B4(_Unwind_Exception *a1)
{
}

void sub_1000441B4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  [*(id *)(*(void *)(a1 + 32) + 400) removeAllObjects];
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 400LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSSPunctuationManager sharedDatabase](&OBJC_CLASS___AXSSPunctuationManager, "sharedDatabase"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 punctuationGroups]);
  [v3 axSafelyAddObjectsFromArray:v5];

  uint64_t v6 = AXLogPunctuationStorage();
  os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 400LL);
    int v14 = 138412290;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "resetting punc groups: %@", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 408);
  *(void *)(v9 + 40_Block_object_dispose(va, 8) = 0LL;

  double v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) punctuationGroupsUpdatedHandler]);
  BOOL v12 = v11 == 0LL;

  if (!v12)
  {
    __int128 v13 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) punctuationGroupsUpdatedHandler]);
    v13[2]();
  }

  objc_sync_exit(v2);
}

void sub_10004431C(_Unwind_Exception *a1)
{
}

void sub_100044484(id a1, VOTOutputRequest *a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManagerIfExists](&OBJC_CLASS___VOTOutputManager, "outputManagerIfExists"));
  [v2 updateAudioSessionProperties];
}

void sub_100044D44(id a1, BOOL a2)
{
  if (!a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidChangeVolume](&OBJC_CLASS___VOSOutputEvent, "DidChangeVolume"));
    [v3 sendEvent:v2];
  }

void sub_1000450A4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  [v1 _temporarilyChangeQuickNav:v2];
}

void sub_1000452D4(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = off_1001AC148;
  id v5 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v3 = sub_10004A988(v2, @"system.unmuted", v5);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v1 speakSimpleString:v4];
}

void sub_100045348(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eventRecord]);
  [*(id *)(*(void *)(a1 + 40) + 40) postEvent:v2];
  id v3 = [v2 copy];

  [v3 setType:1026];
  [v3 setOriginalType:1026];
  [*(id *)(*(void *)(a1 + 40) + 40) postEvent:v3];
}

id sub_1000461E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _postNextLanguageEvent];
}

void sub_100046550(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 attributeForKey:AVSystemController_ActiveAudioRouteAttribute]);
  *(_BYTE *)(*(void *)(a1 + 32) + 355) = [v2 isEqualToString:@"Speaker"];
}

void sub_100046C08(uint64_t a1)
{
  int out_token = -1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100046CAC;
  v3[3] = &unk_100177CA0;
  v3[4] = *(void *)(a1 + 32);
  if (notify_register_dispatch( "com.apple.MobileAsset.VoiceServices.GryphonVoice.ma.new-asset-installed",  &out_token,  &_dispatch_main_q,  v3))
  {
    uint64_t v1 = AXLogSpeechAssetDownload();
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1000F0F60(v2);
    }
  }

id sub_100046CAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 264);
  *(void *)(v2 + 264) = 0LL;

  return [*(id *)(*(void *)(a1 + 32) + 360) unlock];
}

void sub_1000477F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100047808(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100047818(uint64_t a1)
{
}

void sub_100047820(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 320) objectForKey:a1[5]]);
  id v2 = [v5 copyWithCache];
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100047874(uint64_t a1)
{
  id result = *(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (result)
  {
    if (*(_DWORD *)(a1 + 64) != -1)
    {
      if ([result pid] == *(_DWORD *)(a1 + 64)) {
        return [*(id *)(*(void *)(a1 + 40) + 320) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKey:*(void *)(a1 + 48)];
      }
      id result = [*(id *)(a1 + 32) doesHaveTraits:kAXWebContentTrait];
      if ((_DWORD)result) {
        return [*(id *)(*(void *)(a1 + 40) + 320) setObject:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) forKey:*(void *)(a1 + 48)];
      }
    }
  }

  return result;
}

void sub_1000479AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000479C4(uint64_t a1)
{
  id v2 = (unsigned int *)(a1 + 48);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 328LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);
  uint64_t v6 = *(void *)(*((void *)v2 - 1) + 8LL);
  os_log_type_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (!*(void *)(*(void *)(*((void *)v2 - 1) + 8LL) + 40LL))
  {
    uint64_t AppElementWithPid = _AXUIElementCreateAppElementWithPid(*v2);
    if (AppElementWithPid)
    {
      uint64_t v9 = (const void *)AppElementWithPid;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AXUIElement uiElementWithAXElement:]( &OBJC_CLASS___AXUIElement,  "uiElementWithAXElement:",  AppElementWithPid));
      double v11 = -[VOTElement initWithUIElement:initializeAssociatedPids:]( objc_alloc(&OBJC_CLASS___VOTElement),  "initWithUIElement:initializeAssociatedPids:",  v10,  0LL);
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      __int128 v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      id v14 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isApplication];
      if ((v14 & 1) == 0)
      {
        uint64_t v15 = VOTLogCommon(v14);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
          sub_1000F0FE0(v2, (uint64_t)v10, v16);
        }
      }

      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      uint64_t v18 = *(void **)(*(void *)(a1 + 32) + 328LL);
      NSUInteger v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
      [v18 setObject:v17 forKeyedSubscript:v19];

      CFRelease(v9);
    }
  }

void sub_100049D68(double a1, float a2)
{
  double v3 = a2;
  TTSSpeechRateToNashvilleRate(a2);
  if (a2 >= 0.5) {
    TTSSpeechRateToNashvilleRate(v3);
  }
}

void sub_100049DEC(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle sharedInstance]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "sharedInstance"));
  unsigned __int8 v3 = [v2 ignoreLogging];

  if ((v3 & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle identifier]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "identifier"));
    uint64_t v5 = AXLoggerForFacility();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);

    os_log_type_t v7 = AXOSLogLevelFromAXLogLevel(1LL);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = AXColorizeFormatLog(1LL, @"VoiceOverTouch: %{public}@");
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = _AXStringForArgs(v9);
      double v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v6, v7))
      {
        *(_DWORD *)buf = 138543362;
        id v24 = v11;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}@", buf, 0xCu);
      }
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle sharedInstance]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "sharedInstance"));
  unsigned __int8 v13 = [v12 ignoreLogging];

  if ((v13 & 1) == 0)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOverLifeCycle identifier]( &OBJC_CLASS___AXSubsystemVoiceOverLifeCycle,  "identifier"));
    uint64_t v15 = AXLoggerForFacility();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);

    os_log_type_t v17 = AXOSLogLevelFromAXLogLevel(1LL);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = AXColorizeFormatLog(1LL, @"Backtrace: %{public}@");
      NSUInteger v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v1 callStackSymbols]);
      uint64_t v20 = _AXStringForArgs(v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

      if (os_log_type_enabled(v16, v17))
      {
        *(_DWORD *)buf = 138543362;
        id v24 = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}@", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_10004A018()
{
  return 1LL;
}

BOOL sub_10004A020()
{
  if (byte_1001ACE69 == 1) {
    return byte_1001ACE68 != 0;
  }
  byte_1001ACE69 = 1;
  BOOL result = *(double *)&xmmword_1001AD170 > 640.0;
  byte_1001ACE68 = *(double *)&xmmword_1001AD170 > 640.0;
  return result;
}

id sub_10004A070(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet uppercaseLetterCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "uppercaseLetterCharacterSet"));
    id v3 = objc_msgSend(v2, "characterIsMember:", objc_msgSend(v1, "characterAtIndex:", 0));
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

id sub_10004A0E8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  BOOL v6 = [v5 voiceOverCapitalLetterFeedback] == 0;

  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[TTSSpeechManager literalStringMarkup:string:speakCap:]( &OBJC_CLASS___TTSSpeechManager,  "literalStringMarkup:string:speakCap:",  v3,  v4,  v6));
  return v7;
}

double sub_10004A170(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 coreAnimationMainDisplay]);
  [v2 referenceBounds];
  *(void *)&xmmword_1001AD170 = v3;
  *((void *)&xmmword_1001AD170 + 1) = v4;

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 coreAnimationMainDisplay]);
  [v5 scale];
  qword_1001AD180 = v6;

  if (*((double *)&xmmword_1001AD170 + 1) == 2272.0
    && *(double *)&xmmword_1001AD170 == 1280.0
    && *(double *)&qword_1001AD180 == 3.0)
  {
    qword_1001AD180 = 0x4010000000000000LL;
  }

  __asm { FMOV            V3.2D, #0.5 }

  xmmword_1001AD190 = (__int128)vmulq_f64((float64x2_t)xmmword_1001AD170, _Q3);
  double result = *((double *)&xmmword_1001AD170 + 1) / 3.0;
  qword_1001AD1A0 = xmmword_1001AD190;
  *(double *)algn_1001AD1A8 = *((double *)&xmmword_1001AD170 + 1) / 3.0;
  return result;
}

__CFString *sub_10004A27C(void *a1, void *a2, char a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a4;
  id v11 = a5;
  id v12 = a1;
  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
  id v14 = (id)objc_claimAutoreleasedReturnValue([v12 stringByTrimmingCharactersInSet:v13]);

  if (![v14 length])
  {
    uint64_t v20 = 0LL;
    goto LABEL_53;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 lowercaseString]);

  id v14 = v15;
  id v16 = [v14 rangeOfString:@"-"];
  uint64_t v17 = (uint64_t)v14;
  if (v16 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v14 substringToIndex:v16]);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
  unsigned __int8 v58 = (void *)v17;
  if ((sub_10004A7CC(v11, v14, v9) & 1) == 0)
  {
    char IsSpeakableEmojiString = AXLanguageIsSpeakableEmojiString(v9);
    if (![v18 hasPrefix:v17] || (a3 & 1) != 0)
    {
      if ((IsSpeakableEmojiString & 1) != 0)
      {
        uint64_t v20 = 0LL;
        char v21 = 1;
      }

      else if ([v14 isEqualToString:@"emoji"])
      {
        id v24 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 dialectsThatCanSpeakString:v9]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 firstObject]);
        uint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue([v26 specificLanguageID]);

        char v21 = 0;
      }

      else
      {
        char v21 = 0;
        uint64_t v20 = 0LL;
      }

      goto LABEL_19;
    }

    if ((IsSpeakableEmojiString & 1) == 0)
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
      unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v27 dialectsThatCanSpeakString:v9]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 firstObject]);
      uint64_t v20 = (__CFString *)objc_claimAutoreleasedReturnValue([v29 specificLanguageID]);

      char v57 = 0;
      goto LABEL_26;
    }

uint64_t sub_10004A7CC(void *a1, void *a2, void *a3)
{
  id v20 = a1;
  id v19 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)[v5 length];
  if (v6 < 1)
  {
    char v9 = 0;
    char v10 = 1;
  }

  else
  {
    uint64_t v7 = v6;
    uint64_t v8 = 0LL;
    char v9 = 0;
    char v10 = 1;
    while (1)
    {
      id v11 = objc_msgSend(v5, "rangeOfComposedCharacterSequenceAtIndex:", v8, v19);
      uint64_t v13 = v12;
      id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringWithRange:", v11, v12));
      if ((AXLanguageIsSpeakableEmojiString(v14) & 1) != 0) {
        break;
      }
      id v15 = [v5 characterAtIndex:v8];
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
      unsigned __int8 v17 = [v16 characterIsMember:v15];

      if ((v17 & 1) == 0)
      {
        char v10 = 0;
        v9 |= (_DWORD)v15 == 65532;
      }

      v8 += v13;
      if (v8 >= v7) {
        goto LABEL_13;
      }
    }

    char v9 = 1;
  }

BOOL sub_10004A930(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 length] == (id)1
    && (unsigned __int16)((unsigned __int16)((unsigned __int16)[v1 characterAtIndex:0] + 0x2000) >> 1) < 0xC7Fu;

  return v2;
}

id sub_10004A988(void *a1, void *a2, void *a3)
{
  return sub_10004AE68(a1, a2, a3, 0LL);
}

id sub_10004A990(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 speakableCharacters]);
  if (v8)
  {
    id v9 = [v5 canSpeakString:v7];
  }

  else
  {
    char v10 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace votSettings]);
    id v9 = [v10 stringIsSupported:v7 language:v6];
  }

  return v9;
}

BOOL sub_10004AA40(int a1)
{
  return (a1 - 900) < 0x7C;
}

BOOL sub_10004AA50(uint64_t a1)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___NSString);
  else {
    uint64_t v3 = @"%@%04lx";
  }
  id v4 = objc_msgSend(v2, "initWithFormat:", v3, @"UnicodeHex.", a1);
  id v5 = sub_10004AE68(@"VOTOutputPunctuation", v4, 0LL, 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    BOOL v7 = 1LL;
  }

  else
  {
    id v8 = objc_msgSend(objc_allocWithZone(NSString), "initWithFormat:", v3, @"UnicodeHex.Math.", a1);

    id v9 = sub_10004AE68(@"VOTOutputPunctuation", v8, 0LL, 0LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v7 = v6 != 0LL;
    id v4 = v8;
  }

  return v7;
}

uint64_t sub_10004AB38(void *a1)
{
  id v1 = a1;
  else {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"·"];
  }

  return v2;
}

id sub_10004AB8C(char a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v6 = vcvtmd_s64_f64(a3);
  if (v6 > 59 || (a1 & 1) != 0)
  {
    if (v6 > 3599)
    {
      unint64_t v17 = v6 / 0xE10uLL;
      int64_t v23 = v6 % 0xE10uLL;
      unint64_t v18 = v6 % 0x3CuLL;
      id v19 = off_1001AC148;
      if ((unint64_t)(v23 + 59) > 0x76)
      {
        uint64_t v25 = v23 / 60;
        if (v18)
        {
          id v26 = sub_10004AE68(off_1001AC148, @"hours.minutes.seconds.format", 0LL, v5);
          char v10 = (void *)objc_claimAutoreleasedReturnValue(v26);
          unint64_t v32 = v18;
        }

        else
        {
          id v29 = sub_10004AE68(off_1001AC148, @"hours.minutes.format", 0LL, v5);
          char v10 = (void *)objc_claimAutoreleasedReturnValue(v29);
        }

        unint64_t v31 = v25;
        goto LABEL_22;
      }

      if (v18)
      {
        id v20 = @"hours.seconds.format";
        goto LABEL_14;
      }

      uint64_t v27 = @"hours.format";
    }

    else
    {
      unint64_t v17 = v6 / 60;
      unint64_t v18 = v6 % 60;
      id v19 = off_1001AC148;
      if (v18)
      {
        id v20 = @"minutes.seconds.format";
LABEL_14:
        id v24 = sub_10004AE68(v19, v20, 0LL, v5);
        char v10 = (void *)objc_claimAutoreleasedReturnValue(v24);
        unint64_t v31 = v18;
LABEL_22:
        id v22 = +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v10,  v17,  v31,  v32);
        goto LABEL_23;
      }

      uint64_t v27 = @"minutes.format";
    }

    id v28 = sub_10004AE68(v19, v27, 0LL, v5);
    char v10 = (void *)objc_claimAutoreleasedReturnValue(v28);
    goto LABEL_22;
  }

  double v7 = a3 - (double)(uint64_t)floor(a3);
  if (v7 <= 0.0)
  {
    id v21 = sub_10004AE68(off_1001AC148, @"seconds.format", 0LL, v5);
    char v10 = (void *)objc_claimAutoreleasedReturnValue(v21);
    id v22 = +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v10,  v6,  v31,  v32);
LABEL_23:
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v22);
    goto LABEL_24;
  }

  float v8 = v7 + (float)v6;
  uint64_t v9 = AXFormatFloat(1LL, v8);
  char v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:NSLocaleDecimalSeparator]);

  if (v12)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v10 stringByReplacingOccurrencesOfString:v12 withString:@"."]);

    char v10 = (void *)v13;
  }

  id v14 = sub_10004AE68(off_1001AC148, @"seconds.with.subseconds", 0LL, v5);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v15, v10));

LABEL_24:
  return v16;
}

id sub_10004AE68(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v9) {
    id v11 = v9;
  }
  else {
    id v11 = v8;
  }
  id v12 = v11;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByAppendingString:@"ATV~appletv"]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v15 = AXNSLocalizedStringForLocale(v8, 0LL, v13, v14, v10);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  if ((!v16 || [v16 isEqualToString:v8])
    && (unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle")),
        uint64_t v18 = AXNSLocalizedStringForLocale(v8, v9, v7, v17, v10),
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v18),
        v16,
        v17,
        (id v16 = (void *)v19) == 0LL)
    || [v16 isEqualToString:v12])
  {
    id v20 = v9;

    id v16 = v20;
  }

  return v16;
}

double sub_10004AFBC(double a1)
{
  return a1 / *(double *)&xmmword_1001AD170;
}

double sub_10004AFD4(double a1)
{
  return a1 * *(double *)&xmmword_1001AD170;
}

double sub_10004AFEC(double a1)
{
  double v1 = *(double *)&xmmword_1001AD170;
  return v1 * a1;
}

void sub_10004B008( BOOL *a1, BOOL *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, double a12)
{
  uint64_t v18 = a1;
  double v25 = 0.0 - a12;
  if (a3 == 2)
  {
    v32.origin.double x = a8;
    v32.origin.double y = a9;
    v32.size.width = a10;
    v32.size.height = a11;
    *a1 = a5 - CGRectGetMaxY(v32) >= v25;
    v33.origin.double x = a4;
    v33.origin.double y = a5;
    v33.size.width = a6;
    v33.size.height = a7;
    double v30 = a9 - CGRectGetMaxY(v33);
LABEL_7:
    uint64_t v18 = a2;
    goto LABEL_9;
  }

  if (a3 == 3)
  {
    v34.origin.double x = a8;
    v34.origin.double y = a9;
    v34.size.width = a10;
    v34.size.height = a11;
    *a1 = a4 - CGRectGetMaxX(v34) >= v25;
    v35.origin.double x = a4;
    v35.origin.double y = a5;
    v35.size.width = a6;
    v35.size.height = a7;
    double v30 = a8 - CGRectGetMaxX(v35);
    goto LABEL_7;
  }

  CGFloat v26 = a8;
  if (a3 == 4)
  {
    *a2 = a4 - CGRectGetMaxX(*(CGRect *)&v26) >= v25;
    v31.origin.double x = a4;
    v31.origin.double y = a5;
    v31.size.width = a6;
    v31.size.height = a7;
    double v30 = a8 - CGRectGetMaxX(v31);
  }

  else
  {
    *a2 = a5 - CGRectGetMaxY(*(CGRect *)&v26) >= v25;
    v36.origin.double x = a4;
    v36.origin.double y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    double v30 = a9 - CGRectGetMaxY(v36);
  }

double sub_10004B1F8(uint64_t a1)
{
  else {
    return *((double *)&xmmword_1001AD170 + 1);
  }
}

uint64_t sub_10004B218(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 rangeOfComposedCharacterSequenceAtIndex:a1];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "substringWithRange:", v4, v5));
  uint64_t v7 = 1LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 wordStringFromPosition:a1 inDirection:1]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 speechComponent]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 emoticonReplacements]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allValues]);
  unsigned __int8 v13 = [v12 containsObject:v8];

  if ((v13 & 1) == 0) {
LABEL_3:
  }
    uint64_t v7 = 0LL;

  return v7;
}

id sub_10004B314(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = objc_allocWithZone(&OBJC_CLASS___NSString);
  else {
    id v11 = @"%@%04lx";
  }
  id v12 = objc_msgSend(v10, "initWithFormat:", v11, v7, a1);
  id v13 = sub_10004AE68(v8, v12, 0LL, v9);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  if ([v14 containsString:@"unicodehex"])
  {
    uint64_t v15 = AXCFormattedString(v14, @"%d");
    id v16 = (id)objc_claimAutoreleasedReturnValue(v15);
  }

  else
  {
    id v16 = v14;
  }

  unint64_t v17 = v16;

  return v17;
}

id sub_10004B404(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  id v12 = objc_allocWithZone(&OBJC_CLASS___NSString);
  else {
    id v13 = @"%@%04lx.withCount";
  }
  id v14 = objc_msgSend(v12, "initWithFormat:", v13, v11, a1);

  id v15 = sub_10004B4C4(v10, v14, 0LL, v9, a5);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  return v16;
}

id sub_10004B4C4(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  if (v11) {
    id v13 = v11;
  }
  else {
    id v13 = v10;
  }
  id v29 = v13;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 stringByAppendingString:@"ATV~appletv"]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
  uint64_t v16 = AXNSLocalizedStringForLocale(v10, 0LL, v14, v15, v12);
  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  uint64_t v28 = a5;
  uint64_t v18 = AXCFormattedString(v17, @"%d");
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

  if (v19 && !objc_msgSend(v19, "isEqualToString:", v10, a5))
  {
    double v25 = v29;
  }

  else
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle", v28));
    uint64_t v21 = AXNSLocalizedStringForLocale(v10, v11, v9, v20, v12);
    id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    uint64_t v28 = a5;
    uint64_t v23 = AXCFormattedString(v22, @"%d");
    uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);

    uint64_t v19 = (void *)v24;
    double v25 = v29;
    if (!v24) {
      goto LABEL_10;
    }
  }

  if (objc_msgSend(v19, "isEqualToString:", v25, v28))
  {
LABEL_10:
    id v26 = v11;

    uint64_t v19 = v26;
  }

  return v19;
}

id sub_10004B668(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  id v6 = 0LL;
  if (v3 && v4)
  {
    id v7 = [v3 rangeOfString:@"-"];
    if (v7 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 substringToIndex:v7]);

      id v3 = (id)v8;
    }

    id v9 = [v5 rangeOfString:@"-"];
    if (v9 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 substringToIndex:v9]);

      uint64_t v5 = (void *)v10;
    }

    id v6 = [v3 isEqualToString:v5];
  }

  return v6;
}

void sub_10004B730()
{
  uint64_t v0 = AXSystemRootDirectory();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v0);
  double v1 = (void *)objc_claimAutoreleasedReturnValue( [v3 stringByAppendingString:@"System/Library/PrivateFrameworks/ScreenReaderOutput.framework"]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithPath:](&OBJC_CLASS___NSBundle, "bundleWithPath:", v1));
  [v2 load];
}

void sub_10004B79C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithPath:]( &OBJC_CLASS___NSBundle,  "bundleWithPath:",  @"/System/Library/AccessibilityBundles/VoiceOverTouch.axbundle"));
  if (v0)
  {
    id v1 = v0;
    [v0 load];
    objc_msgSend(objc_msgSend(v1, "principalClass"), "initialize");
    uint64_t v0 = v1;
  }
}

uint64_t sub_10004B7E8(uint64_t result)
{
  return result;
}

BOOL sub_10004B7F8()
{
  return (char *)[(id)VOTSharedWorkspace deviceOrientation] - 3 < (char *)2;
}

id sub_10004B824(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)VOTSharedWorkspace;
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 voiceOverPunctuationGroup]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 punctuationGroupForUUID:v9]);

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 speechComponent]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 replacePunctuation:v7 punctuationGroup:v10 replaceCommas:a2 languageCode:v6]);
  return v13;
}

uint64_t sub_10004B908(uint64_t a1)
{
  if (a1 == 1) {
    return 1LL;
  }
  else {
    return 2LL * (a1 == 2);
  }
}

id sub_10004B920(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v5)
  {
    id v12 = 0LL;
    goto LABEL_51;
  }

  if (!v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[VOTOutputRequest stringShouldSeparateDueToLanguage:language:keyboardLanguageHint:]( &OBJC_CLASS___VOTOutputRequest,  "stringShouldSeparateDueToLanguage:language:keyboardLanguageHint:",  v5,  0LL,  v7));
    if ([v8 count])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"language"]);

      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      if (v10 == v11) {
        id v6 = 0LL;
      }
      else {
        id v6 = v10;
      }
    }

    else
    {
      id v6 = 0LL;
    }
  }

  id v13 = v6;
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  char v15 = [v14 voiceOverLanguageDetectionEnabled] ^ 1;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 currentLanguageMap]);
  uint64_t v18 = sub_10004A27C(v13, v5, v15, 0LL, v17);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v18);

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  uint64_t v20 = AXSpeechSourceKeyVoiceOver;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( [v19 speechVoiceIdentifierForLanguage:v6 sourceKey:AXSpeechSourceKeyVoiceOver exists:0]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace phoneticStringForCharacter:v5 andVoiceIdentifier:v21]);
  if ([v6 hasPrefix:@"ko"])
  {
    unsigned int v22 = 1;
    if (v12) {
      goto LABEL_32;
    }
  }

  else
  {
    if (v6)
    {
      if (v12) {
        goto LABEL_48;
      }
      uint64_t v23 = (__CFString *)v6;
      goto LABEL_36;
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    else {
      unsigned int v22 = [v7 hasPrefix:@"ko"];
    }

    if (v12) {
      goto LABEL_32;
    }
  }

  if (v22)
  {
    if ([v5 length] != (id)1) {
      goto LABEL_33;
    }
    uint64_t v41 = v20;
    int v42 = v21;
    double v25 = (__CFString *)[v5 mutableCopy];
    CFStringNormalize(v25, kCFStringNormalizationFormD);
    CFStringFold(v25, 0x181uLL, 0LL);
    id v12 = 0LL;
    if ((-[__CFString isEqualToString:](v25, "isEqualToString:", v5) & 1) == 0)
    {
      if (-[__CFString length](v25, "length"))
      {
        unint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
        do
        {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringWithRange:](v25, "substringWithRange:", v26, 1LL));
          uint64_t v29 = sub_10004B920(v28, v6, v7);
          double v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          if (!v30)
          {
            uint64_t v31 = TTSChoseong_JongseongToHangul(v28);
            CGRect v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
            uint64_t v33 = sub_10004B920(v32, v6, v7);
            double v30 = (void *)objc_claimAutoreleasedReturnValue(v33);
          }

          uint64_t v34 = __AXStringForVariables(v27);
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v34);

          ++v26;
          uint64_t v27 = v12;
        }

        while (v26 < (unint64_t)-[__CFString length]( v25,  "length",  v30,  @"__AXStringForVariablesSentinel"));
      }

      else
      {
        id v12 = 0LL;
      }
    }

    uint64_t v20 = v41;
    uint64_t v21 = v42;
  }

LABEL_32:
  if (v12) {
    goto LABEL_48;
  }
LABEL_33:
  CGRect v35 = (__CFString *)v6;
  if (!v35)
  {
    CGRect v35 = (__CFString *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    if (!v35)
    {
      uint64_t v23 = (__CFString *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
LABEL_36:
      CGRect v35 = v23;
    }
  }

  if ([v5 length] != (id)1)
  {

    goto LABEL_45;
  }

  if ((-[__CFString isEqualToString:](v35, "isEqualToString:", @"zh-CN") & 1) != 0
    || (-[__CFString isEqualToString:](v35, "isEqualToString:", @"cmn-CN") & 1) != 0)
  {
    CGRect v36 = @"zh-Hans";
LABEL_41:

    CGRect v35 = (__CFString *)v36;
    goto LABEL_42;
  }

  if ((-[__CFString isEqualToString:](v35, "isEqualToString:", @"zh-TW") & 1) != 0
    || (-[__CFString isEqualToString:](v35, "isEqualToString:", @"cmn-TW") & 1) != 0)
  {
    CGRect v36 = @"zh-Hant";
    goto LABEL_41;
  }

  if ((-[__CFString isEqualToString:](v35, "isEqualToString:", @"zh-HK") & 1) != 0
    || -[__CFString isEqualToString:](v35, "isEqualToString:", @"yue-HK"))
  {
    CGRect v36 = @"yue-Hant";
    goto LABEL_41;
  }

      return;
    case 3LL:
      if (a3 == 1) {
        goto LABEL_20;
      }
      if (a3 != 2) {
        goto LABEL_27;
      }
      char v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTClickAndHoldButtonInterceptor clickAndHoldHandler](self, "clickAndHoldHandler"));

      if (v15)
      {
        uint64_t v16 = (void (**)(void))objc_claimAutoreleasedReturnValue(-[VOTClickAndHoldButtonInterceptor clickAndHoldHandler](self, "clickAndHoldHandler"));
        v16[2]();
      }

      id v6 = -[NSMutableArray count](self->_eventQueue, "count");
      if (v6 != (id)3) {
        goto LABEL_27;
      }
      -[NSMutableArray removeObjectsInRange:](self->_eventQueue, "removeObjectsInRange:", 0LL, 2LL);
      -[VOTClickAndHoldButtonInterceptor _drainQueueAndSendEventsToSystem:]( self,  "_drainQueueAndSendEventsToSystem:",  1LL);
      uint64_t v10 = 5LL;
      goto LABEL_26;
    case 4LL:
      if (a3 != 1) {
        goto LABEL_27;
      }
      goto LABEL_30;
    case 5LL:
      if (a3 != 1) {
        goto LABEL_27;
      }
LABEL_20:
      -[NSMutableArray addObject:](self->_eventQueue, "addObject:", v6);
      unint64_t v17 = self;
      id v14 = 1LL;
      goto LABEL_31;
    default:
      goto LABEL_27;
  }

LABEL_48:
  if ([v5 isEqualToString:v12])
  {

    id v12 = 0LL;
  }

LABEL_51:
  return v12;
}

  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement touchContainer](self->_brailleElement, "touchContainer"));
  if (v67) {
    NSUInteger location = [v67 integerValue];
  }
  else {
    NSUInteger location = (id)self->_brailleLineRange.location;
  }
  __int16 v65 = v13;
  v62 = v12;
  if (!v20)
  {
    int v44 = v11;
    goto LABEL_64;
  }

  uint64_t v40 = self->_brailleLineRange.location;
  if (!self->_lastBraillePanDirection)
  {
    NSUInteger length = self->_brailleLineRange.length;
LABEL_61:
    NSUInteger location = (id)(length + v40);
    goto LABEL_62;
  }

  bookCursorPosition = self->_bookCursorPosition;
  NSUInteger length = self->_brailleLineRange.length;
  id v43 = bookCursorPosition - v40 < length && bookCursorPosition > v40;
  if (v43 || bookCursorPosition == length + v40) {
    goto LABEL_61;
  }
LABEL_62:
  int v44 = v11;
  if (self->_lastRefreshTrigger == 1) {
    NSUInteger location = (id)self->_bookCursorPosition;
  }
LABEL_64:
  rotorSelection = self->_rotorSelection;
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[VOTBrailleManager previousTouchContainer](self, "previousTouchContainer"));
  char v47 = [v66 isEqual:v46] ^ 1;
  int v48 = (void *)objc_claimAutoreleasedReturnValue(-[VOTBrailleManager previousElement](self, "previousElement"));
  LOWORD(v61) = 256;
  BYTE1(v60) = v47;
  LOBYTE(v60) = v63;
  uint64_t v23 = v44;
  unsigned int v49 = v44;
  uint64_t v21 = v64;
  -[VOTElement addTextualInformationToBrailleLine:forPosition:rotorSelection:shouldPreferRotorSelection:lineRange:descriptionRange:lineRangeKnown:isNewTouchContainer:previousElement:updateValue:singleLine:]( v49,  "addTextualInformationToBrailleLine:forPosition:rotorSelection:shouldPreferRotorSelection:lineRange:descriptionRange: lineRangeKnown:isNewTouchContainer:previousElement:updateValue:singleLine:",  v64,  location,  rotorSelection,  !v8,  &self->_brailleLineRange,  &self->_brailleDescriptionRange,  v60,  v48,  v61);

  if (self->_lastRefreshTrigger == 1)
  {
    uint64_t v50 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  self->_trailingBookCursorPosition - self->_brailleLineRange.location));

    v67 = (id)v50;
  }

  -[VOTBrailleManager setPreviousTouchContainer:](self, "setPreviousTouchContainer:", v66);
  -[VOTBrailleManager setPreviousElement:](self, "setPreviousElement:", v23);
  if (v67) {
    BOOL v51 = v62;
  }
  else {
    BOOL v51 = 1;
  }
  if ((v51 & 1) != 0)
  {
    if (v67 || self->_lastBraillePanSucceeded) {
      goto LABEL_78;
    }
    lastBraillePanDirection = self->_lastBraillePanDirection;
    if (!lastBraillePanDirection)
    {
      id v53 = &off_100188240;
      goto LABEL_83;
    }

    if (lastBraillePanDirection == 1)
    {
      id v53 = &off_100188258;
LABEL_83:
      uint64_t v55 = &kSCROLineFocusAttribute;
      goto LABEL_77;
    }
  }

  else
  {
    v54 = [v67 integerValue];
    if (v54 < [v64 length])
    {
      uint64_t v55 = &kSCROBrailleOffsetAttribute;
      id v53 = (_UNKNOWN **)v67;
LABEL_77:
      objc_msgSend(v64, "addAttribute:value:range:", *v55, v53, 0, objc_msgSend(v64, "length"));
    }
  }

uint64_t sub_10004BE40(void *a1)
{
  id v1 = a1;
  else {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"Kana-Flick"];
  }

  return v2;
}

double sub_10004BE94(void *a1)
{
  int v1 = sub_10004BE40(a1);
  double result = 2.25;
  if (v1) {
    return 0.25;
  }
  return result;
}

__CFString *sub_10004BEB8()
{
  if ([(id)VOTSharedWorkspace inUnitTestMode])
  {
    uint64_t v0 = @"AppleWeeFee";
  }

  else
  {
    id v1 = [[CWFInterface alloc] init];
    [v1 activate];
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 currentKnownNetworkProfile]);
    uint64_t v0 = (__CFString *)objc_claimAutoreleasedReturnValue([v2 networkName]);

    [v1 invalidate];
  }

  return v0;
}

uint64_t sub_10004BF40(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:kVOTEventCommandToggleMute])
  {
    uint64_t v2 = 1LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandToggleScreenCurtain])
  {
    uint64_t v2 = 2LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandCopySpeechToClipboard])
  {
    uint64_t v2 = 29LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandScrollUpPage])
  {
    uint64_t v2 = 3LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandScrollDownPage])
  {
    uint64_t v2 = 4LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandScrollLeftPage])
  {
    uint64_t v2 = 5LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandScrollRightPage])
  {
    uint64_t v2 = 6LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandOutputElementSummary])
  {
    uint64_t v2 = 7LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandNextElement])
  {
    uint64_t v2 = 9LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandPreviousElement])
  {
    uint64_t v2 = 8LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandFirstElement])
  {
    uint64_t v2 = 10LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandLastElement])
  {
    uint64_t v2 = 11LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandMoveToStatusBar])
  {
    uint64_t v2 = 12LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSearchRotorRight])
  {
    uint64_t v2 = 14LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSearchRotorLeft])
  {
    uint64_t v2 = 15LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSearchRotorDown])
  {
    uint64_t v2 = 17LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSearchRotorUp])
  {
    uint64_t v2 = 16LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandEscape])
  {
    uint64_t v2 = 13LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandItemChooser])
  {
    uint64_t v2 = 18LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSimpleTap])
  {
    uint64_t v2 = 19LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandPauseSpeaking])
  {
    uint64_t v2 = 20LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandToggleCrownNaviation])
  {
    uint64_t v2 = 21LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandStartStopToggle])
  {
    uint64_t v2 = 28LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandNextElementCommunity])
  {
    uint64_t v2 = 36LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandPreviousElementCommunity])
  {
    uint64_t v2 = 37LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandReadAll])
  {
    uint64_t v2 = 38LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandShowEditingHUD])
  {
    uint64_t v2 = 39LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandCopy])
  {
    uint64_t v2 = 40LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandPaste])
  {
    uint64_t v2 = 41LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandUndo])
  {
    uint64_t v2 = 42LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandRedo])
  {
    uint64_t v2 = 43LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandToggleNavigationStyle])
  {
    uint64_t v2 = 44LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandToggleSyncNativeAndExploreFocus])
  {
    uint64_t v2 = 45LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSystemSwitchToNextApp])
  {
    uint64_t v2 = 46LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandSystemSwitchToPreviousApp])
  {
    uint64_t v2 = 47LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandStartHelp])
  {
    uint64_t v2 = 48LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandToggleMute])
  {
    uint64_t v2 = 49LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandDescribeCameraScene])
  {
    uint64_t v2 = 50LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandActivateBrailleScreenInput])
  {
    uint64_t v2 = 53LL;
  }

  else if ([v1 isEqualToString:kVOTEventCommandBSIExit])
  {
    uint64_t v2 = 54LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

__CFString *sub_10004C45C(int a1)
{
  if (a1 > 4999)
  {
    switch(a1)
    {
      case 5700:
        double result = @"Siri started speaking";
        break;
      case 5701:
        double result = @"Siri finished speaking";
        break;
      case 5702:
        double result = @"Siri started listening";
        break;
      case 5703:
        double result = @"Siri finished listening";
        break;
      default:
        if (a1 == 5000)
        {
          double result = @"App Was Activated";
        }

        else if (a1 == 5001)
        {
          double result = @"Focused Apps Did Change";
        }

        else
        {
LABEL_54:
          id v1 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown Notification (%ld)",  a1));
LABEL_4:
          double result = v1;
        }

        break;
    }
  }

  else
  {
    switch(a1)
    {
      case 1000:
        double result = @"Screen Changed";
        break;
      case 1001:
        double result = @"Layout Changed";
        break;
      case 1002:
        double result = @"Action Performed";
        break;
      case 1004:
        double result = @"Screen Locked";
        break;
      case 1005:
        double result = @"Value Changed";
        break;
      case 1006:
        double result = @"Alert";
        break;
      case 1007:
      case 1072:
        id v1 = @"Webpage Loaded";
        goto LABEL_4;
      case 1008:
        double result = @"Announcement";
        break;
      case 1009:
        double result = @"Element Scrolled by Page";
        break;
      case 1010:
        double result = @"Auto Correction Mode";
        break;
      case 1011:
        double result = @"Orientation Changed";
        break;
      case 1012:
        double result = @"Keyboard Key Selected";
        break;
      case 1013:
        double result = @"Auto Correction Displayed";
        break;
      case 1014:
        double result = @"Keyboard Changed";
        break;
      case 1015:
        double result = @"SpringBoard Return";
        break;
      case 1016:
        double result = @"Element Moved";
        break;
      case 1017:
        double result = @"Selection Changed";
        break;
      case 1018:
        double result = @"First Responder Changed";
        break;
      case 1019:
        double result = @"Low Battery";
        break;
      case 1020:
        double result = @"Move to Element";
        break;
      case 1021:
        double result = @"PID Status Changed";
        break;
      case 1022:
        double result = @"Web Selection Changed";
        break;
      case 1023:
        double result = @"Invalid Text Input";
        break;
      case 1026:
        double result = @"Invalid Status Changed";
        break;
      case 1028:
        double result = @"HID Event Received";
        break;
      case 1044:
        double result = @"Update element Visuals";
        break;
      case 1050:
        double result = @"Unmute Eligible Event Occured";
        break;
      case 1052:
        double result = @"Text Replacement Occurred";
        break;
      case 1053:
        double result = @"Native Focus Item Changed With Context";
        break;
      case 1055:
        double result = @"Screen will change";
        break;
      case 1056:
        double result = @"Vision engine did produce result";
        break;
      case 1059:
        double result = @"Screen will wake";
        break;
      case 1061:
        double result = @"Web Form Control Interaction Start";
        break;
      case 1062:
        double result = @"Web Form Control Interaction End";
        break;
      case 1063:
        double result = @"cont. path began";
        break;
      case 1064:
        double result = @"Live Continuous Sonification Begin";
        break;
      case 1065:
        double result = @"Live Continuous Sonification Update";
        break;
      case 1066:
        double result = @"Live Continuous Sonification End";
        break;
      case 1068:
        double result = @"Captions were displayed onscreen";
        break;
      case 1070:
        double result = @"Context Menu Status";
        break;
      default:
        goto LABEL_54;
    }
  }

  return result;
}

uint64_t sub_10004C730(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0LL;
  if (v3 && v4)
  {
    id v7 = (char *)[v3 length];
    if ([v5 length] >= v7)
    {
      if (v7)
      {
        uint64_t v8 = 0LL;
        id v9 = v7 - 1;
        do
        {
          id v10 = [v3 indexAtPosition:v8];
          BOOL v11 = v10 == [v5 indexAtPosition:v8];
          uint64_t v6 = v11;
          if (!v11) {
            break;
          }
          BOOL v11 = v9 == v8++;
        }

        while (!v11);
      }

      else
      {
        uint64_t v6 = 1LL;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  return v6;
}

uint64_t sub_10004C7F4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0LL;
  if (v3 && v4)
  {
    id v7 = (char *)[v3 length];
    uint64_t v8 = (char *)[v5 length];
    if (v7 >= v8) {
      id v9 = v8;
    }
    else {
      id v9 = v7;
    }
    if (v9)
    {
      id v10 = 0LL;
      BOOL v11 = v9 - 1;
      do
      {
        id v12 = [v3 indexAtPosition:v10];
        BOOL v13 = v12 == [v5 indexAtPosition:v10];
        uint64_t v6 = v13;
        if (!v13) {
          break;
        }
        BOOL v13 = v11 == v10++;
      }

      while (!v13);
    }

    else
    {
      uint64_t v6 = 1LL;
    }
  }

  return v6;
}

BOOL sub_10004C8B0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = (uint64_t)[v3 count];
  if ((id)v5 != [v4 count])
  {
    BOOL v6 = 0;
    goto LABEL_19;
  }

  if (v5 < 1)
  {
    BOOL v6 = 1;
    goto LABEL_19;
  }

  BOOL v6 = 0;
  uint64_t v7 = 0LL;
  while (1)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:v7]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:v7]);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);

    if ([v9 isAXAttributedString])
    {
    }

id sub_10004CA3C(void *a1, char **a2)
{
  id v3 = a1;
  [v3 updateValue];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
  uint64_t v5 = (char *)[v3 selectedTextRange];
  uint64_t v7 = v6;

  uint64_t v8 = (char *)objc_msgSend(v4, "ax_wordFromPosition:inDirection:", v5 - 1, 1);
  uint64_t v10 = v9;
  if (&v8[v9] <= [v4 length])
  {
    if (a2)
    {
      *a2 = v8;
      a2[1] = (char *)v10;
    }

    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringWithRange:", v8, v10));
  }

  else
  {
    BOOL v11 = 0LL;
  }

  return v11;
}

id sub_10004CB24(void *a1)
{
  id v1 = a1;
  id v3 = +[NSBundle bundleForClass:](&OBJC_CLASS___NSBundle, "bundleForClass:", objc_opt_class(&OBJC_CLASS___VOTMain, v2));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedStringForKey:v1 value:&stru_10017A920 table:off_1001AC148]);

  return v5;
}

id sub_10004CBA4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (char *)[v1 count];
  id v3 = [v1 mutableCopy];
  if ((uint64_t)(v2 - 1) >= 0)
  {
    do
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:--v2]);
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___VOTElement, v5);
      if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0
        && [v4 isAccessibilityOpaqueElementProvider]
        && ([(id)VOTSharedWorkspace navigationStyleHonorsGroups] & 1) == 0)
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 visibleOpaqueElements]);
        if ([v7 count]) {
          objc_msgSend(v3, "replaceObjectsInRange:withObjectsFromArray:", v2, 1, v7);
        }
        else {
          [v3 removeObjectAtIndex:v2];
        }
      }
    }

    while ((uint64_t)v2 > 0);
  }

  [v3 sortUsingComparator:&stru_100177D78];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](&OBJC_CLASS___NSCharacterSet, "alphanumericCharacterSet"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 invertedSet]);

  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  uint64_t v16 = sub_10004CE2C;
  unint64_t v17 = &unk_100177DA0;
  id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
  id v19 = v9;
  id v10 = v9;
  id v11 = v18;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 indexesOfObjectsPassingTest:&v14]);
  objc_msgSend(v3, "removeObjectsAtIndexes:", v12, v14, v15, v16, v17);

  return v3;
}

int64_t sub_10004CD68(id a1, VOTElement *a2, VOTElement *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  if (v6 == v4
    || (uint64_t v7 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null")),
        v7,
        v7 == v5))
  {
    int64_t v10 = -1LL;
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v4, "label"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v5, "label"));
    int64_t v10 = (int64_t)[v8 localizedCaseInsensitiveCompare:v9];
  }

  return v10;
}

BOOL sub_10004CE2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  if (v4 == v3)
  {
    BOOL v6 = 1LL;
  }

  else
  {
    id v5 = v3;
    if (([v5 doesHaveTraits:kAXIgnoreItemChooserTrait] & 1) != 0
      || ([v5 doesHaveTraits:kAXSpacerTrait] & 1) != 0)
    {
      BOOL v6 = 1LL;
    }

    else
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 label]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByTrimmingCharactersInSet:*(void *)(a1 + 32)]);

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 value]);
      int64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stringByTrimmingCharactersInSet:*(void *)(a1 + 32)]);

      BOOL v6 = 1;
      if ([v8 length] || objc_msgSend(v10, "length"))
      {
        [v8 rangeOfCharacterFromSet:*(void *)(a1 + 40)];
        if (v11 != [v8 length] || !objc_msgSend(v8, "length")) {
          BOOL v6 = 0;
        }
      }
    }
  }

  return v6;
}

NSMutableArray *sub_10004CF70(void *a1, NSMutableArray **a2)
{
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    if ([v3 isAXAttributedString])
    {
      id v5 = v4;
      if (!-[NSMutableArray hasAttribute:](v5, "hasAttribute:", UIAccessibilityTokenPlaceholder))
      {
        uint64_t v29 = v4;
        double v30 = a2;
        uint64_t v7 = (NSMutableArray *)[[AXAttributedString alloc] initWithString:&stru_10017A920];
        id v12 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        if (-[NSMutableArray length](v5, "length"))
        {
          unint64_t v13 = 0LL;
          id v14 = &OBJC_CLASS___VOTSound;
          uint64_t v15 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
          uint64_t v31 = v5;
          do
          {
            uint64_t v16 = v15[443];
            unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray attributesAtIndex:effectiveRange:]( v5,  "attributesAtIndex:effectiveRange:",  v13,  0LL));
            id v18 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v16,  "uiElementWithAXElement:",  objc_msgSend(v17, "objectForKey:", UIAccessibilityTokenAttachment)));
            id v19 = (void *)objc_claimAutoreleasedReturnValue([&v14[6] elementWithUIElement:v18]);

            if (v19)
            {
              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 label]);
              -[NSMutableArray appendString:](v7, "appendString:", v20);
              if ([v20 length])
              {
                uint64_t v21 = v15;
                unsigned int v22 = v7;
                uint64_t v23 = v14;
                unint64_t v24 = 0LL;
                do
                {
                  double v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13));
                  -[NSMutableArray addObject:](v12, "addObject:", v25);

                  ++v24;
                }

                while (v24 < (unint64_t)[v20 length]);
                id v14 = v23;
                uint64_t v7 = v22;
                uint64_t v15 = v21;
                id v5 = v31;
              }
            }

            else
            {
              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray substringWithRange:](v5, "substringWithRange:", v13, 1LL));
              -[NSMutableArray appendString:](v7, "appendString:", v20);
              unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13));
              -[NSMutableArray addObject:](v12, "addObject:", v26);
            }

            ++v13;
          }

          while (v13 < (unint64_t)-[NSMutableArray length](v5, "length"));
        }

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableArray length](v5, "length")));
        -[NSMutableArray addObject:](v12, "addObject:", v27);

        if (v30) {
          *double v30 = v12;
        }

        id v4 = v29;
        goto LABEL_23;
      }

      *a2 = (NSMutableArray *)&off_100188C40;
      BOOL v6 = v5;
    }

    else
    {
      uint64_t v8 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v4 length]);
      if ([v4 length])
      {
        unint64_t v9 = 0LL;
        do
        {
          int64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v9));
          -[NSMutableArray addObject:](v8, "addObject:", v10);

          ++v9;
        }

        while (v9 < (unint64_t)[v4 length]);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v4 length]));
      -[NSMutableArray addObject:](v8, "addObject:", v11);

      id v5 = v8;
      *a2 = v5;
      BOOL v6 = (NSMutableArray *)[[AXAttributedString alloc] initWithString:v4];
    }

    uint64_t v7 = v6;
LABEL_23:

    goto LABEL_24;
  }

  *a2 = (NSMutableArray *)&off_100188C28;
  uint64_t v7 = (NSMutableArray *)[[AXAttributedString alloc] initWithString:&stru_10017A920];
LABEL_24:

  return v7;
}

unint64_t sub_10004D2F0(unint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  if (v4)
  {
    unint64_t v5 = (unint64_t)v4;
    unint64_t v6 = 0LL;
    do
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndexedSubscript:(v6 + v5) >> 1]);
      id v8 = [v7 unsignedIntegerValue];

      else {
        unint64_t v5 = (v6 + v5) >> 1;
      }
    }

    while (v6 < v5);
  }

  else
  {
    unint64_t v6 = 0LL;
  }

  return v6;
}

unint64_t sub_10004D388(unint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = sub_10004D2F0(a1, v5);
  sub_10004D2F0(a1 + a2, v5);

  return v6;
}

id sub_10004D3E4(unint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    else {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectAtIndex:a1]);
    }
    unint64_t v6 = v4;
    id v5 = [v4 unsignedIntegerValue];
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

id sub_10004D468(unint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_10004D3E4(a1, v5);
  sub_10004D3E4(a1 + a2, v5);

  return v6;
}

LABEL_57:
              int v44 = v57;
              [v57 addObject:v50];
              uint64_t v28 = v56;
              int v48 = v66;
              id v45 = v67;
            }
          }
        }

        char v47 = [v45 countByEnumeratingWithState:&v74 objects:v91 count:16];
      }

      while (v47);
    }

    unint64_t v26 = v68;
    -[VOTTVSpeechRequestManager setRequestElements:](self, "setRequestElements:", v68);
    -[VOTTVSpeechRequestManager setRequestHeaders:](self, "setRequestHeaders:", v44);

    id v6 = v64;
    uint64_t v7 = v65;
  }

  unint64_t v24 = 1;
LABEL_62:

  return v24;
}

void sub_10004E59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (__CFString *)*(id *)(a1 + 32);
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = &stru_10017A920;
  }
  uint64_t v6 = VOTLogHandwriting();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v34 = 138543362;
    id v35 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "handwriting element: %{public}@",  (uint8_t *)&v34,  0xCu);
  }

  [v3 updateGesturedTextInputAttributes];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 gesturedTextInputAttributes]);
  if ([v8 shouldPlayKeyboardSecureClickSound])
  {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    int64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterSecureText](&OBJC_CLASS___VOSOutputEvent, "DidEnterSecureText"));
    [v9 sendEvent:v10];
  }

  if ([v8 acceptsRawInput])
  {
    if ([v3 doesHaveAllTraits:kAXSecureTextFieldTrait | kAXWebContentTrait])
    {
      id v11 = 0LL;
    }

    else
    {
      unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentInputString]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v17 commonPrefixWithString:v5 options:0]);
    }

    unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringFromIndex:](v5, "substringFromIndex:", [v11 length]));
    id v18 = [v11 length];
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentInputString]);
    id v20 = [v19 length];

    if (v18 == v20)
    {
      if ([v13 length]) {
        objc_msgSend(v3, "insertText:source:", v13, objc_msgSend(*(id *)(a1 + 40), "valueChangeOriginator"));
      }
    }

    else
    {
      unsigned int v22 = *(void **)(a1 + 40);
      id v23 = [v11 length];
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentInputString]);
      id v25 = [v22 _numberOfCharactersToDeleteToDesiredLength:v23 fromString:v24];

      objc_msgSend( v3,  "replaceCharactersAtCursor:withString:source:",  v25,  v13,  objc_msgSend(*(id *)(a1 + 40), "valueChangeOriginator"));
    }

    [*(id *)(a1 + 40) setCurrentInputString:v5];
LABEL_35:

    goto LABEL_36;
  }

  if ([v3 doesHaveTraits:kAXWebContentTrait])
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentInputString]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 lowercaseString]);

    unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lowercaseString](v5, "lowercaseString"));
    unint64_t v14 = 0LL;
    if ([v11 length])
    {
      do
      {
        unsigned int v15 = [v11 characterAtIndex:v14];
        ++v14;
      }

      while (v14 < (unint64_t)[v11 length]);
    }

    else {
      uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "substringWithRange:", v14, 1));
    }
    unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localizedWebRotorMap]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:v16]);

    if (v27)
    {
      objc_msgSend(*(id *)(a1 + 40), "setRotorType:", objc_msgSend(v27, "integerValue"));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[VOTRotor stringForRotorType:]( VOTRotor,  "stringForRotorType:",  [*(id *)(a1 + 40) rotorType]));
      +[VOTOutputRequest sendRequestWithString:](&OBJC_CLASS___VOTOutputRequest, "sendRequestWithString:", v28);

      [*(id *)(a1 + 40) clearCurrentString];
    }

    else if (-[__CFString length](v16, "length"))
    {
      id v32 = sub_10004A988(off_1001AC148, @"handwrite.notrecognized", 0LL);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      +[VOTOutputRequest sendRequestWithString:](&OBJC_CLASS___VOTOutputRequest, "sendRequestWithString:", v33);

      [*(id *)(a1 + 40) setCurrentInputString:v5];
    }

    goto LABEL_35;
  }

  if ([v3 doesHaveTraits:kAXTableIndexTrait])
  {
    uint64_t v21 = objc_claimAutoreleasedReturnValue(-[__CFString lowercaseString](v5, "lowercaseString"));

    [v3 jumpToTableIndex:v21];
    [*(id *)(a1 + 40) clearCurrentString];
    id v5 = (__CFString *)v21;
  }

  else
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nameSearcherMonitorElement]);
    unsigned __int8 v30 = [v3 isEqual:v29];

    if ((v30 & 1) == 0)
    {
      [*(id *)(a1 + 40) setNameSearcherMonitorElement:v3];
      [*(id *)(a1 + 40) setNameSearcher:0];
    }

    [*(id *)(a1 + 40) _prepareNameSearcherForElement:v3];
    [*(id *)(a1 + 40) setPendingInputString:v5];
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) nameSearcher]);
    [v31 updateMatchingItems];

    [*(id *)(a1 + 40) setCurrentInputString:v5];
  }

void sub_10004EB64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10004EB7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004EB8C(uint64_t a1)
{
}

void sub_10004EB94(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 gesturedTextInputAttributes]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10004ED74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10004ED8C(uint64_t a1, void *a2)
{
  id v17 = a2;
  [v17 updateGesturedTextInputAttributes];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v17 gesturedTextInputAttributes]);
  if ([*(id *)(a1 + 32) isNextBrailleTableEvent:*(void *)(a1 + 40)])
  {
    unsigned __int8 v4 = [*(id *)(a1 + 32) performNextBrailleTableCommand];
    uint64_t v5 = a1 + 48;
LABEL_3:
    *(_BYTE *)(*(void *)(*(void *)v5 + 8LL) + 24LL) = v4;
    goto LABEL_4;
  }

  if ([v3 acceptsRawInput])
  {
    uint64_t v5 = a1 + 48;
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      unsigned __int8 v4 = [*(id *)(a1 + 32) _processRawInputEvent:*(void *)(a1 + 40) forElement:v17 withAttributes:v3];
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v5 = a1 + 48;
    if ([v17 doesHaveTraits:kAXWebContentTrait])
    {
      if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
      {
        unsigned __int8 v4 = [*(id *)(a1 + 32) _processWebRotorEvent:*(void *)(a1 + 40)];
        goto LABEL_3;
      }
    }

    else if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      [*(id *)(a1 + 32) _prepareNameSearcherForElement:v17];
      unsigned __int8 v4 = [*(id *)(a1 + 32) _processSearchEvent:*(void *)(a1 + 40) forElement:v17];
      goto LABEL_3;
    }
  }

LABEL_24:
}

  if ((v6 & 1) != 0 && self->_audioAccHoldSent)
  {
    self->_audioAccHoldSent = 0;
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory audioAccHeldUpEventForRepost](self, "audioAccHeldUpEventForRepost"));
    -[VOTEventFactory _audioAccPostEvent:withButton:]( self,  "_audioAccPostEvent:withButton:",  v18,  self->_currentSoundButton);
  }

  if (((self->_currentSoundButton != 0) & v9) == 1)
  {
    id v19 = CFAbsoluteTimeGetCurrent() - self->_audioAccLastDownTime;
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v20 voiceOverDoubleTapInterval];
    unsigned int v22 = v19 >= v21;

    if (((v22 | v7) & 1) == 0)
    {
      ++self->_audioAccTapCount;
      self->_audioAccLastTapTime = CFAbsoluteTimeGetCurrent();
      audioAccTapTimer = self->_audioAccTapTimer;
      unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      [v24 voiceOverDoubleTapInterval];
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](audioAccTapTimer, "dispatchAfterDelay:");
    }
  }

  id v25 = CFAbsoluteTimeGetCurrent() - self->_audioAccLastDownTime;
  unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v26 voiceOverDoubleTapInterval];
  if (v25 > v27)
  {
    uint64_t v28 = CFAbsoluteTimeGetCurrent() - self->_audioAccLastTapTime;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v29 voiceOverDoubleTapInterval];
    if (!((v28 <= v30) | v7 & 1))
    {
      int v44 = v15;
      audioAccTapCount = self->_audioAccTapCount;

      if (audioAccTapCount)
      {
        CGRect v36 = self->_audioAccTapCount;
        if (v36 >= 2)
        {
          unsigned int v37 = 0LL;
          do
          {
            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory audioAccTapDownEventForRepost](self, "audioAccTapDownEventForRepost"));
            -[VOTEventFactory _audioAccPostEvent:withButton:timeOffset:]( self,  "_audioAccPostEvent:withButton:timeOffset:",  v38,  self->_currentSoundButton,  (double)(int)v37 * 0.1);

            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory audioAccTapUpEventForRepost](self, "audioAccTapUpEventForRepost"));
            -[VOTEventFactory _audioAccPostEvent:withButton:timeOffset:]( self,  "_audioAccPostEvent:withButton:timeOffset:",  v39,  self->_currentSoundButton,  (double)(int)v37 * 0.1);

            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
            [v40 sendEvent:v41];

            CGRect v36 = self->_audioAccTapCount;
            int v42 = v37 + 2;
            ++v37;
          }

          while (v36 > v42);
        }

        if (v36 == 1)
        {
          pendingSoundButton = self->_pendingSoundButton;
          unsigned __int8 v15 = v44;
          if (pendingSoundButton)
          {
            self->_currentSoundButton = pendingSoundButton;
            self->_pendingSoundButton = 0LL;
            unsigned __int8 v15 = 1;
          }
        }

        else
        {
          unsigned __int8 v15 = v44;
        }

        self->_audioAccTapCount = 0LL;
      }

      else
      {
        unsigned __int8 v15 = v44;
      }

      goto LABEL_34;
    }
  }

LABEL_34:
  for (j = 728LL; j != 743; j += 5LL)
  {
    if ((v9 & 1) != 0)
    {
      id v32 = (char *)self + j;
      *(_WORD *)id v32 = 0;
      v32[2] = 0;
      if ((v6 & 1) == 0)
      {
LABEL_37:
        if ((v8 & 1) == 0) {
          continue;
        }
LABEL_38:
        *((_BYTE *)&self->super.isa + j + 1) = 0;
        continue;
      }
    }

    else if ((v6 & 1) == 0)
    {
      goto LABEL_37;
    }

    *(_WORD *)((char *)&self->super.isa + j + 3) = 0;
    if ((v8 & 1) != 0) {
      goto LABEL_38;
    }
  }

  uint64_t v33 = self->_currentSoundButton;
  if (v33 == currentSoundButton) {
    int v34 = v15;
  }
  else {
    int v34 = 1;
  }
  if (v33)
  {
    if ((v34 & 1) != 0) {
      -[VOTEventFactory _audioAccAnnounceButton](self, "_audioAccAnnounceButton");
    }
  }

void sub_1000500F4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageForSelectingItem:*(void *)(a1 + 40)]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v3 = sub_10000BBB0(v4, 1, v2);

  [*(id *)(a1 + 48) setNameSearcher:0];
  [*(id *)(a1 + 48) didSelectItem];
}

uint64_t sub_1000509FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSRequestConcreteImplementation(a1, a2, a3);
}

void sub_100050B88(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) repeaterTimer]);
  [v2 cancel];

  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 8LL) = 4LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 1;
}

void sub_100051754( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005290C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100052940(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateRotorForCurrentElement:1 completion:0];
}

void sub_100052974(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v5 voiceOverDirectTouchEnabledApps]);
  id v3 = [v2 mutableCopy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setDirectTouchApps:v3];
}

void sub_1000529EC(id a1)
{
  if ([(id)VOTSharedWorkspace tvInteractionMode] != (id)2)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v1 = [v2 voiceOverPrefersFollowFocusNavigationStyle];
    [(id)VOTSharedWorkspace setTvInteractionMode:v1 ^ 1];
  }

void sub_1000575E4(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  kVOTEventCommandHomeButtonPress,  kVOTEventCommandSystemShowNotificationCenter,  kVOTEventCommandSystemShowControlCenter,  kVOTEventCommandSystemActivateSpeakScreen,  kVOTEventCommandSystemToggleDock,  kVOTEventCommandSystemToggleAppSwitcher,  kVOTEventCommandSystemActivateLockButton,  kVOTEventCommandSystemShowSpotlight,  kVOTEventCommandSystemActivateAccessibilityShortcut,  kVOTEventCommandSystemToggleReachability,  kVOTEventCommandSystemTakeScreenshot,  kVOTEventCommandSystemSwitchToPreviousApp,  kVOTEventCommandSystemSwitchToNextApp,  kVOTEventCommandEdgeRight,  kVOTEventCommandEdgeLeft,  kVOTEventCommandEdgeTop,  kVOTEventCommandEdgeBottom,  kVOTEventCommandBottomEdgePanDown,  kVOTEventCommandBottomEdgePanShort,  kVOTEventCommandBottomEdgePanLong,  kVOTEventCommandTopEdgePanShort,  kVOTEventCommandTopEdgePanLong,  kVOTEventCommandSystemToggleTypeToSiri,  0LL));
  id v2 = (void *)qword_1001ACE78;
  qword_1001ACE78 = v1;
}

void sub_100057980(id a1)
{
  v3[0] = kVOTEventCommandSimpleTap;
  v3[1] = kVOTEventCommandBottomEdgePanShort;
  v3[2] = kVOTEventCommandBottomEdgePanLong;
  v3[3] = kVOTEventCommandTopEdgePanShort;
  v3[4] = kVOTEventCommandTopEdgePanLong;
  void v3[5] = kVOTEventCommandSearchRotorRight;
  v3[6] = kVOTEventCommandSearchRotorLeft;
  v3[7] = kVOTEventCommandSearchRotorUp;
  v3[8] = kVOTEventCommandSearchRotorDown;
  v3[9] = kVOTEventCommandNextElement;
  v3[10] = kVOTEventCommandPreviousElement;
  v3[11] = kVOTEventCommandTracking;
  v3[12] = kVOTEventCommandEscape;
  v3[13] = kVOTEventCommandToggleSpeaking;
  v3[14] = kVOTEventCommandSimulatedLongPress;
  v3[15] = kVOTEventCommandStartStopToggle;
  v3[16] = kVOTEventCommandScrollUpPage;
  v3[17] = kVOTEventCommandScrollDownPage;
  v3[18] = kVOTEventCommandScrollLeftPage;
  v3[19] = kVOTEventCommandScrollRightPage;
  v3[20] = kVOTEventCommandToggleScreenCurtain;
  v3[21] = kVOTEventCommandToggleMute;
  v3[22] = @"RotorWords";
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 23LL));
  id v2 = (void *)qword_1001ACE88;
  qword_1001ACE88 = v1;
}

void sub_100057ECC(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("UserEventOccurred", 0LL);
  id v2 = (void *)qword_1001ACE98;
  qword_1001ACE98 = (uint64_t)v1;
}

void sub_100057EF8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VOTUserEventManager sharedInstance](&OBJC_CLASS___VOTUserEventManager, "sharedInstance"));
  [v1 userEventOccurred];
}

id sub_1000585E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _monitorElements];
}

LABEL_3:
  return v6;
}

LABEL_72:
}

void sub_100058F08(id a1)
{
  v3[0] = kVOTEventCommandNextElement;
  v3[1] = kVOTEventCommandPreviousElement;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 2LL));
  id v2 = (void *)qword_1001ACEA8;
  qword_1001ACEA8 = v1;
}

id sub_100058F90(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isValidForApplication:a2];
}

LABEL_69:
    if (!v8)
    {
      unint64_t v9 = 0LL;
      goto LABEL_23;
    }

void sub_1000595AC(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  v5[0] = kAXScreenChangePopup;
  v5[1] = kAXForceUpdateChangeToken;
  v5[2] = kAXPerformElementUpdateImmediatelyToken;
  v5[3] = kAXAnnouncementTypeStopSpeech;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v5, 4LL));
  id v3 = -[NSSet initWithArray:](v1, "initWithArray:", v2);
  id v4 = (void *)qword_1001ACEB8;
  qword_1001ACEB8 = (uint64_t)v3;
}

LABEL_101:
    uint64_t v38 = 0LL;
    unint64_t v24 = self;
    id v25 = 0LL;
LABEL_102:
    CGRect v36 = 1LL;
LABEL_103:
    unsigned int v37 = v8;
LABEL_104:
    -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  v14,  v24,  v25,  v36,  v37,  v38,  v39);
    goto LABEL_105;
  }

  if (a3 > 5000)
  {
    switch(a3)
    {
      case 5700:
        elementManagerThread = self->_elementManagerThread;
        unint64_t v14 = "_handleSiriStartedTalking:";
        goto LABEL_101;
      case 5701:
        elementManagerThread = self->_elementManagerThread;
        unint64_t v14 = "_handleSiriFinishedTalking:";
        goto LABEL_101;
      case 5702:
        elementManagerThread = self->_elementManagerThread;
        unint64_t v14 = "_handleSiriStartedListening:";
        goto LABEL_101;
      case 5703:
        elementManagerThread = self->_elementManagerThread;
        unint64_t v14 = "_handleSiriFinishedListening:";
        goto LABEL_101;
      default:
        if (a3 != 5001) {
          goto LABEL_105;
        }
        elementManagerThread = self->_elementManagerThread;
        unint64_t v14 = "_handleScreenChange:sound:";
LABEL_32:
        uint64_t v38 = 0LL;
        uint64_t v39 = 0LL;
        unint64_t v24 = self;
        id v25 = 0x80000LL;
LABEL_109:
        CGRect v36 = 2LL;
        break;
    }

    goto LABEL_103;
  }

  switch(a3)
  {
    case 3026:
      elementManagerThread = self->_elementManagerThread;
      unint64_t v14 = "_handleWebTextAvailableNotification:";
      goto LABEL_101;
    case 3027:
      elementManagerThread = self->_elementManagerThread;
      unint64_t v14 = "_handleWebTextMatchSelectedNotification:";
      goto LABEL_101;
    case 3028:
    case 3029:
    case 3030:
    case 3031:
      break;
    case 3032:
      elementManagerThread = self->_elementManagerThread;
      unint64_t v14 = "_handleCurrentStateChanged:";
      goto LABEL_101;
    case 3033:
      elementManagerThread = self->_elementManagerThread;
      unint64_t v14 = "_handleSortDirectionChanged:";
      goto LABEL_101;
    default:
      if (a3 == 5000)
      {
        unsigned __int8 v15 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
        if ((objc_opt_isKindOfClass(v8, v15) & 1) != 0)
        {
          uint64_t v16 = (id)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v8));
          [v16 setObject:&__kCFBooleanTrue forKeyedSubscript:kAXPerformElementUpdateImmediatelyToken];
        }

        else
        {
          uint64_t v16 = kAXPerformElementUpdateImmediatelyToken;
        }

        -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_handleScreenChange:sound:",  self,  2LL,  v16,  0LL,  0LL);
        id v8 = v16;
      }

      break;
  }
        }

        else
        {
          v76 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
          v77 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
          [v76 sendEvent:v77];

          v79 = VOTLogElement(v78);
          v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG)) {
            sub_1000F17A0();
          }
        }

        v98 = v113;

        uint64_t v16 = v116;
LABEL_103:

        a5 = v114;
        uint64_t v7 = v115;
        goto LABEL_104;
      }

      if (!-[NSData count](v57, "count"))
      {
        if (a4 == 1) {
          v68 = objc_claimAutoreleasedReturnValue([v8 textNextMarker:v22]);
        }
        else {
          v68 = objc_claimAutoreleasedReturnValue([v8 textPreviousMarker:v22]);
        }
        v69 = (NSData *)v68;

        unsigned int v22 = v69;
      }

      v54 = -[NSData count](v57, "count");
      unsigned __int8 v58 = v57;
      if (v54) {
        goto LABEL_77;
      }
    }
  }

  if ([v17 count])
  {
    p_textMarker = &self->_textMarker;
    unsigned int v22 = (NSData *)objc_claimAutoreleasedReturnValue([v18 objectAtIndex:0]);
    BOOL v51 = VOTLogElement(v22);
    unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEBUG)) {
      sub_1000F1800();
    }
    goto LABEL_39;
  }

  v98 = v18;
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  v101 = [v100 ignoreLogging];

  if ((v101 & 1) != 0)
  {
    unsigned int v22 = 0LL;
  }

  else
  {
    v103 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    v104 = AXLoggerForFacility(v103);
    char v57 = (NSData *)objc_claimAutoreleasedReturnValue(v104);

    v105 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled((os_log_t)v57, v105))
    {
      v106 = AXColorizeFormatLog(2LL, @"Had no working markers! What happened");
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(v106);
      v107 = _AXStringForArgs(v56);
      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v107);
      if (os_log_type_enabled((os_log_t)v57, v105))
      {
        *(_DWORD *)buf = 138543362;
        v128 = v55;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v57, v105, "%{public}@", buf, 0xCu);
      }

      unsigned int v22 = 0LL;
      goto LABEL_103;
    }

    unsigned int v22 = 0LL;
LABEL_104:
  }

LABEL_106:
}

void sub_10005A144(uint64_t a1)
{
  id v2 = [objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:*(void *)(a1 + 32) selector:"_handleInvalidStatusChanged:" thread:*(void *)(*(void *)(a1 + 32) + 1608)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 336);
  *(void *)(v3 + 336) = v2;
}

LABEL_45:
      id v23 = v22 - v15;
      self->_bookCursorPosition = v22;
      NSUInteger location = v15;
      goto LABEL_71;
    }

    if (a4 == 1)
    {
      if (v15 == location) {
        goto LABEL_45;
      }
      v89 = 1LL;
    }

    else
    {
      v89 = -1LL;
      if (a4 == 2 && v22 == v15) {
        goto LABEL_56;
      }
    }

    v84 = a4;
    int v42 = v89 + bookLineNumber;
    if (v89 + bookLineNumber < 0)
    {
      a4 = v84;
      if (-[VOTElementManager _handleMovementForElementFollowingElement:direction:unit:mode:]( self,  "_handleMovementForElementFollowingElement:direction:unit:mode:",  v92,  v84,  3LL,  1LL))
      {
        goto LABEL_87;
      }

      id v23 = 0LL;
      NSUInteger location = 0x7FFFFFFFFFFFFFFFLL;
    }

    else
    {
      v86 = v6;
      v85 = bookCursorPosition;
      while (1)
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue([v24 stringForLineNumber:v42]);
        if (![v43 length])
        {

LABEL_89:
          id v23 = 0LL;
          NSUInteger location = 0x7FFFFFFFFFFFFFFFLL;
          a4 = v84;
          goto LABEL_90;
        }

        if ([v92 supportsRangeForLineNumber])
        {
          NSUInteger location = (NSUInteger)[v92 rangeForLineNumber:v42];
          v88 = v44;
        }

        else
        {
          id v45 = (void *)objc_claimAutoreleasedReturnValue([v92 pageContent]);
          NSUInteger location = (NSUInteger)-[VOTElementManager _rangeOfLine:inBookContent:]( self,  "_rangeOfLine:inBookContent:",  v43,  v45);
          v88 = v46;
        }

        char v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
        int v48 = (void *)objc_claimAutoreleasedReturnValue([v43 stringByTrimmingCharactersInSet:v47]);

        if ([v48 length]) {
          break;
        }
        v42 += v89;

        unint64_t v24 = v92;
        uint64_t v6 = v86;
        bookCursorPosition = v85;
        if (v42 < 0) {
          goto LABEL_89;
        }
      }

      self->_bookLineRange.NSUInteger location = location;
      self->_bookLineRange.NSUInteger length = v88;
      self->_bookLineNumber = v42;
      bookLineString = self->_bookLineString;
      self->_bookLineString = (NSString *)v43;

      v82 = self->_bookLineRange.location;
      a4 = v84;
      uint64_t v6 = v86;
      if (v84 == 1) {
        v82 += self->_bookLineRange.length;
      }
      self->_bookCursorPosition = v82;

      bookCursorPosition = v85;
      id v23 = v88;
      if (location < v91) {
        goto LABEL_71;
      }
    }
}

      uint64_t v33 = [v26 readingContentCausesPageTurn];
LABEL_46:
      int v34 = v33;
      if ((v8 & 1) == 0 && v33 | v10)
      {
        [v26 updateCache];
        [v26 updatePageContent];
        lastValidElement = self->_lastValidElement;
        self->_lastValidElement = 0LL;

        -[VOTElementManager _resetElementUnitIndexes](self, "_resetElementUnitIndexes");
        self->_flags.shouldUpdateRotorForElement = 1;
        if (!self->_flags.previousScrollWasBookContentMovement)
        {
          v74 = [v26 isReadingContent];
          CGRect v36 = v108;
          unsigned int v37 = v27;
          if ((v74 & v34 & 1) != 0
            || (v74 & 1) == 0 && (self->_flags.isReadingAll || self->_flags.userInitiatedBooksScroll))
          {
            v111[0] = _NSConcreteStackBlock;
            v111[1] = 3221225472LL;
            v111[2] = sub_100091140;
            v111[3] = &unk_100176D38;
            v111[4] = self;
            AXPerformBlockOnMainThreadAfterDelay(v111, v75, 0.25);
            objc_storeStrong((id *)&self->_lastScrollStatus, v5);
            self->_flags.previousScrollWasBookContentMovement = 0;
LABEL_126:
            v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
            [v106 postNotificationName:@"UpdateElement" object:0];

            -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
            goto LABEL_127;
          }

  [(id)VOTSharedWorkspace userInteractedWithDevice];
}

LABEL_90:
    if (-[VOTElementManager _handleMovementForElementFollowingElement:direction:unit:mode:]( self,  "_handleMovementForElementFollowingElement:direction:unit:mode:",  v92,  a4,  3LL,  1LL))
    {
      goto LABEL_87;
    }

    self->_bookDidTurnPage = 1;
    uint64_t v28 = self;
    uint64_t v29 = a4;
    unsigned __int8 v30 = 3LL;
    goto LABEL_33;
  }

  v90 = (int64_t)v14;
  if (a5 != 1)
  {
    id v25 = [v12 wordFromPosition:v15 inDirection:a4];
LABEL_28:
    NSUInteger location = (NSUInteger)v25;
    id v23 = v26;
    if (v25 != (id)0x7FFFFFFF && v25 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      if (a4 == 1) {
        uint64_t v31 = v26;
      }
      else {
        uint64_t v31 = 0LL;
      }
      id v32 = (unint64_t)v25 + v31;
      self->_bookCursorPosition = v32;
      uint64_t v33 = self->_bookLineRange.location;
      if (v32 >= v33)
      {
        if (v32 > self->_bookLineRange.length + v33)
        {
          ++self->_bookLineNumber;
          unsigned int v37 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "stringForLineNumber:"));
          if (v37
            || (unsigned int v37 = (NSString *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentTextLineInBookElement:]( self,  "_currentTextLineInBookElement:",  0LL))) != 0LL)
          {
            v83 = a4;
            uint64_t v38 = self->_bookLineString;
            self->_bookLineString = v37;
            v87 = v23;
            uint64_t v39 = v37;

            a4 = v83;
            id v23 = v87;
          }

          else
          {
            --self->_bookLineNumber;
            self->_bookCursorPosition = v90;
          }
        }
      }

      else
      {
        int v34 = self->_bookLineNumber;
        uint64_t v27 = v34 - 1;
        if (v34 >= 1)
        {
          self->_bookLineNumber = v27;
          id v35 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "stringForLineNumber:"));
          if (!v35) {
            id v35 = (NSString *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentTextLineInBookElement:]( self,  "_currentTextLineInBookElement:",  0LL));
          }
          CGRect v36 = self->_bookLineString;
          self->_bookLineString = v35;
        }
      }

      if (self->_bookLineNumber != bookLineNumber && -[NSString length](self->_bookLineString, "length", v27))
      {
        else {
          uint64_t v40 = -[VOTElementManager _rangeOfLine:inBookContent:]( self,  "_rangeOfLine:inBookContent:",  self->_bookLineString,  v12);
        }
        self->_bookLineRange.NSUInteger location = (NSUInteger)v40;
        self->_bookLineRange.NSUInteger length = v41;
      }

      goto LABEL_71;
    }

    goto LABEL_30;
  }

  if (a4 == 1 && v15 < (uint64_t)v14)
  {
    id v20 = v15 & ~(v15 >> 63);
LABEL_27:
    id v25 = [v12 rangeOfComposedCharacterSequenceAtIndex:v20];
    goto LABEL_28;
  }

  id v23 = 0LL;
  NSUInteger location = 0x7FFFFFFFFFFFFFFFLL;
  if (a4 == 2)
  {
    id v20 = v15 - 1;
    if (v15 >= 1) {
      goto LABEL_27;
    }
  }

LABEL_71:
  if (bookLineNumber != self->_bookLineNumber)
  {
    objc_msgSend(v92, "frameForLineNumber:");
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    v54 = v53;
    uint64_t v56 = v55;
    char v57 = v23;
    unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v58, "convertRect:fromContextId:", objc_msgSend(v92, "windowContextId"), v50, v52, v54, v56);
    self->_lineFrame.origin.double x = v59;
    self->_lineFrame.origin.double y = v60;
    self->_lineFrame.size.width = v61;
    self->_lineFrame.size.height = v62;

    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    objc_msgSend( v63,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);

    id v23 = v57;
  }

  if (a5 == 4 || v15 != self->_bookCursorPosition)
  {
    if (a5 == 2)
    {
      if ([v92 supportsFrameForRange]
        && (objc_msgSend(v92, "frameForRange:", location, v23),
            double x = v93.origin.x,
            double y = v93.origin.y,
            width = v93.size.width,
            height = v93.size.height,
            !CGRectIsEmpty(v93)))
      {
        v68 = (id)v23;
        v69 = a4;
        v70 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
        objc_msgSend(v70, "convertRect:fromContextId:", objc_msgSend(v92, "windowContextId"), x, y, width, height);
        self->_lineFrame.origin.double x = v71;
        self->_lineFrame.origin.double y = v72;
        self->_lineFrame.size.width = v73;
        self->_lineFrame.size.height = v74;

        v75 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
        objc_msgSend( v75,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);
      }

      else
      {
        v68 = (id)v23;
        v69 = a4;
      }
    }

    else
    {
      v68 = (id)v23;
      v69 = a4;
      if (a5 == 4)
      {
        v68 = [v12 length];
        NSUInteger location = 0LL;
      }
    }

    v76 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v76 setLastRefreshTrigger:1];

    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  self->_bookCursorPosition,  0LL,  v92,  1LL);
    if (v69 != 1) {
      bookCursorPosition = self->_bookCursorPosition;
    }
    v77 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v77 setTrailingBookCursorPosition:bookCursorPosition];

    v78 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v78 setBookCursorPosition:self->_bookCursorPosition];

    v79 = [v92 selectedTextRange];
    -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v79,  v80,  0LL);
    id v23 = (NSUInteger)v68;
  }

  self->_highlightedCharacterRange.NSUInteger location = location;
  self->_highlightedCharacterRange.NSUInteger length = v23;
  if (v6) {
    -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:]( self,  "outputTextSegmentForRange:string:element:usePhonetics:segment:",  location,  v23,  v12,  v92,  0LL,  a5);
  }
LABEL_87:
}

LABEL_20:
  return v14;
}

  id v19 = VOTLogElement(v15);
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1F10(location);
  }

  unsigned int v22 = VOTLogElement(v21);
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1E9C((uint64_t)v10);
  }

  id v25 = VOTLogElement(v24);
  unint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1E28(v17);
  }

  if (v18 && &v18[v17] <= [v12 length])
  {
    uint64_t v27 = v53->_firstResponderElement;
    if (!v27) {
      uint64_t v27 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](v53, "_currentElement"));
    }
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement attributedValueForRange:](v27, "attributedValueForRange:", v17, v18));
    if (!v28)
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement valueForRange:](v27, "valueForRange:", v17, v18));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v29));
    }

    unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%C", 65532LL));
    BOOL v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  v30));
    if ([v28 rangeOfCharacterFromSet:v51] != (id)0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v28, "length"))
    {
      uint64_t v56 = 0LL;
      char v57 = &v56;
      unsigned __int8 v58 = 0x3032000000LL;
      v59 = sub_10005EA98;
      id v60 = sub_10005EAA8;
      v61 = [v28 copy];
      v55[0] = 0LL;
      v55[1] = v55;
      v55[2] = 0x2020000000LL;
      v55[3] = 0LL;
      v54[0] = _NSConcreteStackBlock;
      v54[1] = 3221225472LL;
      v54[2] = sub_100073DC4;
      v54[3] = &unk_100178C10;
      v54[4] = v53;
      v54[5] = v55;
      v54[6] = &v56;
      objc_msgSend( v28,  "enumerateAttribute:inRange:options:usingBlock:",  UIAccessibilityTokenAttachment,  0,  objc_msgSend(v28, "length"),  0,  v54);
      uint64_t v31 = (void *)v57[5];
      id v32 = sub_10004AE68(off_1001AC148, @"attachment", 0LL, v14);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      int v34 = objc_claimAutoreleasedReturnValue([v31 axAttributedStringByReplacingOccurrencesOfString:v30 withString:v33]);

      _Block_object_dispose(v55, 8);
      _Block_object_dispose(&v56, 8);

      uint64_t v28 = (void *)v34;
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
    CGRect v36 = [v28 rangeOfCharacterFromSet:v35];
    uint64_t v38 = v37;
    uint64_t v39 = [v28 length];

    if (v36 || v38 != v39)
    {
      uint64_t v40 = objc_claimAutoreleasedReturnValue([v28 axAttributedStringByReplacingOccurrencesOfString:@"\n" withString:@" "]);

      uint64_t v28 = (void *)v40;
    }

    uint64_t v41 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    int v42 = [v41 addString:v28 withLanguage:v13];
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v41 lastAction]);
    [v43 setObject:kCFBooleanTrue forVariant:50];

    int v44 = sub_10004AE68(off_1001AC148, v52, 0LL, v14);
    id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    uint64_t v46 = [v41 addString:v45 withLanguage:v14];

    -[VOTElementManager sendRequest:](v53, "sendRequest:", v41);
    goto LABEL_49;
  }

  if (v10)
  {
    if (!v9)
    {
LABEL_44:
      uint64_t v27 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      if (v10)
      {
        if (v10 != [v12 length])
        {
LABEL_50:

          goto LABEL_51;
        }

        int v48 = @"bottom.document";
      }

      else
      {
        int v48 = @"top.document";
      }

      unsigned int v49 = sub_10004AE68(off_1001AC148, v48, 0LL, v14);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      -[VOTElement speakSimpleString:braille:language:](v27, "speakSimpleString:braille:language:", v50, 0LL, v14);

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      -[VOTElement sendEvent:](v27, "sendEvent:", v28);
LABEL_49:

      goto LABEL_50;
    }
  }

  else
  {
    char v47 = [v12 length];
    if (!v9 && v47) {
      goto LABEL_44;
    }
  }

        if (v97)
        {
          -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v103 + v101,  0LL,  0LL);
          if (!v101)
          {
            uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v8 value]);
            v67 = [v66 length];

            if (v103 < (unint64_t)v67) {
              -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  self->_elementSelectionRangeBufferInternal.location + 1,  self->_elementSelectionRangeBufferInternal.length,  0LL);
            }
          }
        }

        v68 = [objc_allocWithZone((Class)VOTOutputRequest) init];
        if ([v102 length])
        {
          v69 = [v68 addString:v102];
          v70 = (void *)objc_claimAutoreleasedReturnValue([v68 lastAction]);
          LODWORD(v71) = 1062836634;
          v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v71));
          [v70 setObject:v72 forVariant:32];
        }

        if (v98)
        {
          v73 = (void *)objc_claimAutoreleasedReturnValue([v8 label]);
          v74 = [v68 addString:v73];

          if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
          {
            v75 = (void *)objc_claimAutoreleasedReturnValue([v68 lastAction]);
            LODWORD(v76) = 1062836634;
            v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v76));
            [v75 setObject:v77 forVariant:32];
          }
        }

        v78 = -[VOTElementManager stringIsTextAttachment:](self, "stringIsTextAttachment:", v28);
        if ((v78 & 1) == 0)
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"\r\n"));
          v80 = objc_claimAutoreleasedReturnValue([v28 stringByTrimmingCharactersInSet:v79]);

          uint64_t v28 = (void *)v80;
        }

        if ([v28 length])
        {
          v81 = [v68 addString:v28];
          v82 = (void *)objc_claimAutoreleasedReturnValue([v68 lastAction]);
          [v82 setPerformPunctuationTranslation:v78 ^ 1];

          v83 = (void *)objc_claimAutoreleasedReturnValue([v68 lastAction]);
          [v83 setReplaceCommas:v78 ^ 1];

          v84 = (void *)objc_claimAutoreleasedReturnValue([v8 language]);
          v85 = "-[VOTExplorerElementManager _nextExplorerElementInDirection:fromElement:didWrap:]" + 15;
          v86 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
          if (!v84)
          {
LABEL_38:
            if ([v56 length])
            {
              v90 = [v68 addString:v56];
              v91 = (void *)objc_claimAutoreleasedReturnValue([v68 lastAction]);
              LODWORD(v92) = *((_DWORD *)v85 + 606);
              v93 = (void *)objc_claimAutoreleasedReturnValue([v86[491] numberWithFloat:v92]);
              [v91 setObject:v93 forVariant:32];
            }

            [v68 setGeneratesBraille:1];
            objc_msgSend(v68, "setBrailleLineRange:", v103, v101);
            [v68 setBrailleType:4];
            -[VOTElementManager sendRequest:](self, "sendRequest:", v68);
            if (v103 != 0x7FFFFFFF)
            {
              v94 = sub_10000BBB0(v100, 2, v104);
              v106.origin.double x = CGRectZero.origin.x;
              v106.origin.double y = CGRectZero.origin.y;
              v106.size.width = CGRectZero.size.width;
              v106.size.height = CGRectZero.size.height;
              v105.origin.double x = v39;
              v105.origin.double y = v41;
              v105.size.width = v43;
              v105.size.height = v45;
              if (!CGRectEqualToRect(v105, v106))
              {
                v95 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
                objc_msgSend(v95, "setCursorFrame:", v39, v41, v43, v45);

                self->_textRangeBeingDisplayed = 1;
              }

              self->_highlightedCharacterRange.NSUInteger location = v103;
              self->_highlightedCharacterRange.NSUInteger length = v101;
            }

            goto LABEL_45;
          }

          v87 = (void *)objc_claimAutoreleasedReturnValue([v8 language]);
          [v68 setLanguage:v87];
        }

        else
        {
          v88 = sub_10004AE68(off_1001AC148, @"empty.line", 0LL, v104);
          v87 = (void *)objc_claimAutoreleasedReturnValue(v88);
          v89 = [v68 addString:v87];
          v85 = "ementManager _nextExplorerElementInDirection:fromElement:didWrap:]";
          v86 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
        }

        goto LABEL_38;
      }

      [(id)VOTSharedWorkspace addMisspellingsForString:v28];
      BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([v28 coalescedFontAttributes]);
      if (v46)
      {
        char v57 = sub_10004AE68(off_1001AC148, @"data-detector.http", 0LL, v104);
        unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
        v59 = [v46 isEqualToString:v58];

        lastSeenFontProperties = self->_lastSeenFontProperties;
        if (v59)
        {
          v61 = self;
          v62 = v51;
          __int16 v63 = 0LL;
LABEL_19:
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _computeChangedFontAttributes:storedAttributes:haveMisspellCheck:]( v61,  "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:",  v62,  lastSeenFontProperties,  v63));
          goto LABEL_20;
        }
      }

      else
      {
        lastSeenFontProperties = self->_lastSeenFontProperties;
      }

      v61 = self;
      v62 = v51;
      __int16 v63 = 1LL;
      goto LABEL_19;
    }
  }

  int v48 = 0;
LABEL_46:

  return v48;
}
}
        }

        id v12 = -[NSArray countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v27,  v32,  16LL);
      }

      while (v12);
    }

    else
    {
      unint64_t v9 = 0;
    }
  }

  else
  {
    v22.receiver = self;
    v22.super_class = (Class)&OBJC_CLASS___VOTElementRotor;
    unint64_t v9 = -[VOTRotor rotorTypeIsValid:eventOrigin:](&v22, "rotorTypeIsValid:eventOrigin:", a3, a4);
  }

  return v9 & 1;
}

    ((void (**)(void, const __CFString *))v13)[2](v13, @"VOSKey.up");
    if ((v10 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 keyInfo]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 eventRecord]);
  id v17 = [v15 changedModifiers];
  if (!v17)
  {
    if ([v15 isAppleVendorKey])
    {
      id v19 = [v15 mediaKeyCode];
      if (v19 == 32)
      {
        id v20 = @"brightnessUp";
        goto LABEL_42;
      }

      if (v19 == 33)
      {
        id v20 = @"brightnessDown";
        goto LABEL_42;
      }
    }

    else
    {
      if ([v15 isMediaKey])
      {
        CGRect v36 = [v15 mediaKeyCode];
        id v35 = 0LL;
        if (v36 <= 204)
        {
          unint64_t v14 = 0LL;
          switch(v36)
          {
            case 178:
              id v20 = @"record";
              goto LABEL_42;
            case 179:
            case 181:
              id v20 = @"nextTrack";
              goto LABEL_42;
            case 180:
            case 182:
              id v20 = @"previousTrack";
              goto LABEL_42;
            case 183:
              id v20 = @"stop";
              goto LABEL_42;
            case 184:
              id v20 = @"eject";
              goto LABEL_42;
            default:
              goto LABEL_44;
          }

          goto LABEL_44;
        }

        if (v36 <= 429)
        {
          if (v36 == 205)
          {
            id v20 = @"playPause";
          }

          else
          {
            unint64_t v14 = 0LL;
            if (v36 != 226) {
              goto LABEL_44;
            }
            id v20 = @"mute";
          }
        }

        else if (v36 == 430)
        {
          id v20 = @"layout";
        }

        else if (v36 == 433)
        {
          id v20 = @"screensaver";
        }

        else
        {
          unint64_t v14 = 0LL;
          if (v36 != 545) {
            goto LABEL_44;
          }
          id v20 = @"search";
        }

        goto LABEL_42;
      }

      if (v16)
      {
        if ([v16 originalType] == 1007)
        {
          id v20 = @"volumeUp";
          goto LABEL_42;
        }

        if ([v16 originalType] == 1009)
        {
          id v20 = @"volumeDown";
          goto LABEL_42;
        }
      }

      uint64_t v46 = [v15 keyCode];
      if ((v46 - 58) >= 0xC)
      {
        id v35 = 0LL;
        id v20 = @"enter";
        if (v46 > 73)
        {
          unint64_t v14 = 0LL;
          switch(v46)
          {
            case 'J':
              id v20 = @"home";
              goto LABEL_42;
            case 'K':
              id v20 = @"pageup";
              goto LABEL_42;
            case 'L':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
              goto LABEL_44;
            case 'M':
              id v20 = @"end";
              goto LABEL_42;
            case 'N':
              id v20 = @"pagedown";
              goto LABEL_42;
            case 'O':
              id v20 = @"right";
              goto LABEL_42;
            case 'P':
              id v20 = @"left";
              goto LABEL_42;
            case 'Q':
              id v20 = @"down";
              goto LABEL_42;
            case 'R':
              id v20 = @"up";
              goto LABEL_42;
            case 'X':
              goto LABEL_42;
            default:
              unint64_t v14 = 0LL;
              break;
          }

          goto LABEL_44;
        }

        if (v46 != 40)
        {
          if (v46 == 41)
          {
            id v20 = @"escape";
          }

          else
          {
            unint64_t v14 = 0LL;
            if (v46 != 42) {
              goto LABEL_44;
            }
            id v20 = @"backspace";
          }
        }

        goto LABEL_42;
      }

      id v20 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"F%i",  (v46 - 57)));
      if (v20)
      {
LABEL_42:
        int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"VOSKey.%@",  v20));
        unsigned int v37 = VOSLocString(v34);
        unint64_t v14 = (id)objc_claimAutoreleasedReturnValue(v37);
        goto LABEL_43;
      }
    }

    id v35 = 0LL;
    unint64_t v14 = 0LL;
    goto LABEL_44;
  }

  id v18 = v17;
  unint64_t v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  if ((v18 & 8) != 0)
  {
    uint64_t v21 = VOSLocString(@"VOSKey.shift");
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    [v14 appendStringWithComma:v22];

    if ((v18 & 1) == 0)
    {
LABEL_13:
      if ((v18 & 2) == 0) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
  }

  else if ((v18 & 1) == 0)
  {
    goto LABEL_13;
  }

  id v23 = VOSLocString(@"VOSKey.command");
  unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  [v14 appendStringWithComma:v24];

  if ((v18 & 2) == 0)
  {
LABEL_14:
    if ((v18 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }

  -[SCRCTargetSelectorTimer cancel](self->_tapHoldTimer, "cancel", a4, a3.x, a3.y);
}

    goto LABEL_21;
  }

  uint64_t v16 = v11;
LABEL_21:

  return v16;
}

LABEL_68:
}

    -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
    self->_flags.shouldUpdateRotorForElement = 0;
    self->_flags.preventCustomRotorItemIndexReset = preventCustomRotorItemIndexReset;
    goto LABEL_69;
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  unint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v23 sendEvent:v24];

LABEL_70:
}

uint64_t sub_10005CE1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 readingContentCausesPageTurn] & 1) != 0
    || ([v3 isReadingContent] & 1) != 0
    || ([v3 includeDuringContentReading] & 1) != 0
    || [v3 doesHaveTraits:kAXWebContentTrait])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pageContent]);
    uint64_t v5 = [v4 isEqualToString:*(void *)(a1 + 32)] ^ 1;
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_10005CEB4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"updateFrame" onTarget:*(void *)(a1 + 40) count:0 objects:0];
}

$85E40A55691FE2F31975A98F57E3065D sub_10005D1EC(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if (-[VOTElement readingContentCausesPageTurn](v3, "readingContentCausesPageTurn")
    || -[VOTElement isReadingContent](v3, "isReadingContent"))
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v4 = -[VOTElement includeDuringContentReading](v3, "includeDuringContentReading");
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_10005D644(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

LABEL_26:
      }
    }

    if ([v9 shouldPlaySoundWhenFocused])
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
      [v19 sendEvent:v20];
    }

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10005EB94;
    v24[3] = &unk_100176DA8;
    v24[4] = self;
    id v25 = v9;
    uint64_t v21 = v9;
    [v21 scrollToElementForDirectional:1 withCompletion:v24];
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v21);
    -[VOTElementManager setInitialReadAllElement:](self, "setInitialReadAllElement:", v21);
    -[VOTElementManager _continueReadAllWithElement:setCurrentElement:]( self,  "_continueReadAllWithElement:setCurrentElement:",  v21,  0LL);

    goto LABEL_30;
  }

  id v35 = 0LL;
  CGRect v36 = &v35;
  unsigned int v37 = 0x3032000000LL;
  uint64_t v38 = sub_10005EA98;
  uint64_t v39 = sub_10005EAA8;
  uint64_t v40 = 0LL;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10005EAB0;
  v32[3] = &unk_100178098;
  uint64_t v4 = v4;
  uint64_t v33 = v4;
  int v34 = &v35;
  BOOL v5 =  -[VOTElementManager _nearestElementWithMatch:startElement:forward:itemCheckCount:]( self,  "_nearestElementWithMatch:startElement:forward:itemCheckCount:",  v32,  v4,  0LL,  30LL);
  int64_t v6 = (void *)v36[5];
  if (v6)
  {
    uint64_t v7 = v6;

    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10005EB24;
    v30[3] = &unk_100176DA8;
    v30[4] = self;
    uint64_t v4 = v7;
    uint64_t v31 = v4;
    [v4 scrollToElementForDirectional:1 withCompletion:v30];
    -[VOTElementManager _resetElementUnitIndexes](self, "_resetElementUnitIndexes");
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v4);
  }

  -[VOTElementManager _handleReadAllBookContent:fromTop:](self, "_handleReadAllBookContent:fromTop:", v4, 1LL);

  _Block_object_dispose(&v35, 8);
LABEL_31:
}

LABEL_27:
        if (objc_msgSend(v10, "BOOLValue", (void)v29))
        {
          if (v17 && [v12 containsObject:v17])
          {
            id v23 = self;
            unint64_t v24 = v17;
          }

          else
          {
            id v23 = self;
            unint64_t v24 = 0LL;
          }

          -[VOTElementManager setFirstTrackedAppInGesture:](v23, "setFirstTrackedAppInGesture:", v24);
        }

        else
        {
          id v25 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager firstTrackedAppInGesture](self, "firstTrackedAppInGesture"));

          id v18 = 0LL;
          if (!v25 || !v17) {
            goto LABEL_39;
          }
          if ([v12 containsObject:v17])
          {
            unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager firstTrackedAppInGesture](self, "firstTrackedAppInGesture"));
            uint64_t v27 = [v17 isEqual:v26];

            if ((v27 & 1) == 0)
            {
              id v18 = v17;
LABEL_39:

              goto LABEL_40;
            }
          }
        }

        id v18 = 0LL;
        goto LABEL_39;
      }

      LOBYTE(v16) = 0;
    }

    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }

  id v18 = 0LL;
LABEL_41:

  return v18;
}

  unint64_t v13 = v20;
LABEL_27:

  return v13;
}
}

void sub_10005EA78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_10005EA98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005EAA8(uint64_t a1)
{
}

uint64_t sub_10005EAB0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ((([v4 isReadingContent] & 1) != 0
     || [v4 includeDuringContentReading])
    && ([v4 isEqual:*(void *)(a1 + 32)] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }

  return 0LL;
}

id sub_10005EB24(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"updateFrame" onTarget:*(void *)(a1 + 40) count:0 objects:0];
}

$85E40A55691FE2F31975A98F57E3065D sub_10005EB40(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if (-[VOTElement readingContentCausesPageTurn](v3, "readingContentCausesPageTurn")
    || -[VOTElement isReadingContent](v3, "isReadingContent"))
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v4 = -[VOTElement includeDuringContentReading](v3, "includeDuringContentReading");
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

id sub_10005EB94(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

void sub_10005F5A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 2016LL));
  [WeakRetained directInteractionElementsUpdated:0];
}

void sub_10005FEE4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTItemChooserAdapter sharedInstance](&OBJC_CLASS___VOTItemChooserAdapter, "sharedInstance"));
  [v2 showItemChooser:1 withItems:*(void *)(a1 + 32)];

  *(_BYTE *)(*(void *)(a1 + 40) + 1662LL) = 1;
}

void sub_10005FF38(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = objc_msgSend( objc_allocWithZone(NSMutableArray),  "initWithCapacity:",  objc_msgSend(*(id *)(a1 + 32), "count"));
  if ([*(id *)(a1 + 32) count])
  {
    unint64_t v4 = 0LL;
    do
    {
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndex:v4]);
      if ((unint64_t)[v8 count] > v4)
      {
        int64_t v6 = (NSString *)objc_claimAutoreleasedReturnValue([v8 objectAtIndex:v4]);
        CGRect v9 = CGRectFromString(v6);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v5,  "regionDescriptionWithFrame:",  v9.origin.x,  v9.origin.y,  v9.size.width,  v9.size.height));
        [v3 addObject:v7];
      }

      ++v4;
    }

    while ((unint64_t)[*(id *)(a1 + 32) count] > v4);
  }

  [*(id *)(a1 + 40) setObject:v3 forKey:@"regionDescriptions"];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

$85E40A55691FE2F31975A98F57E3065D sub_1000603D0(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement identifier](a2, "identifier", a3));
  unsigned int v4 = [v3 isEqualToString:@"SFFindOnPageBarIdentifier"];

  uint64_t v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

id sub_1000607A8(uint64_t a1)
{
  id result = objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
  if (*(_BYTE *)(a1 + 48)) {
    return [*(id *)(a1 + 40) performSimpleTap];
  }
  return result;
}

LABEL_59:
LABEL_60:
LABEL_61:

      return;
    case '5':
      id v23 = (uint64_t)[(id)VOTSharedWorkspace hintsEnabled];
      goto LABEL_35;
    case '9':
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      unint64_t v24 = AXVoiceOverMediaDescriptionLocString(-[__CFString voiceOverDescribedMedia](v13, "voiceOverDescribedMedia"));
      unsigned int v22 = objc_claimAutoreleasedReturnValue(v24);
      goto LABEL_56;
    case '<':
      id v11 = (__CFString *)-[VOTElementManager _appInfoForCurrentElement](self, "_appInfoForCurrentElement");
      unint64_t v13 = v25;
      unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 imageCaptioningDisabledApps]);
      id v17 = [v27 mutableCopy];

      uint64_t v28 = ((uint64_t (*)(void *, void))v9[2])( v9,  [v17 containsObject:v11] ^ 1);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      unsigned __int8 v30 = [v6 addString:v29 withLanguage:v8];

      goto LABEL_53;
    case 'H':
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      -[__CFString voiceOverEffectiveSpeakingVolume](v13, "voiceOverEffectiveSpeakingVolume");
      id v32 = AXFormatFloatWithPercentage(0LL, v31);
      id v11 = (__CFString *)objc_claimAutoreleasedReturnValue(v32);
      uint64_t v33 = v6;
      int v34 = v11;
      goto LABEL_70;
    case 'I':
      id v35 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v35 speechRateForLanguage:v8];
      unsigned int v37 = v36;

      uint64_t v38 = AXFormatFloatWithPercentage(0LL, v37);
      uint64_t v39 = objc_claimAutoreleasedReturnValue(v38);
LABEL_50:
      unint64_t v13 = (__CFString *)v39;
      v72 = [v6 addString:v39];
      goto LABEL_60;
    case 'J':
      id v19 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _typingEchoString](self, "_typingEchoString"));
      goto LABEL_37;
    case 'K':
      id v19 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _speechPhoneticsString](self, "_speechPhoneticsString"));
      goto LABEL_37;
    case 'L':
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      uint64_t v40 = -[__CFString voiceOverPitchChangeEnabled](v13, "voiceOverPitchChangeEnabled");
      goto LABEL_55;
    case 'M':
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      id v11 = (__CFString *)objc_claimAutoreleasedReturnValue([v41 voiceOverPunctuationGroup]);

      if (v11)
      {
        int v42 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace punctuationGroups]);
        v83[0] = _NSConcreteStackBlock;
        v83[1] = 3221225472LL;
        v83[2] = sub_100061700;
        v83[3] = &unk_100177BA8;
        v84 = v11;
        id v43 = [v42 indexOfObjectPassingTest:v83];
        if (v43 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          unint64_t v13 = 0LL;
        }

        else
        {
          v80 = (void *)objc_claimAutoreleasedReturnValue([v42 objectAtIndexedSubscript:v43]);
          unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue([v80 name]);
        }
      }

      else
      {
        int v42 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace defaultPunctuationGroup]);
        unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue([v42 name]);
      }

      uint64_t v33 = v6;
      int v34 = v13;
LABEL_70:
      v81 = [v33 addString:v34];
      goto LABEL_59;
    case 'N':
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      uint64_t v40 = -[__CFString voiceOverSoundEffectsEnabled](v13, "voiceOverSoundEffectsEnabled");
      goto LABEL_55;
    case 'O':
      if (AXRuntimeCheck_SupportsVoiceoverIndepedentVolume())
      {
        int v44 = off_1001AC148;
        unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _audioDuckingModeString](self, "_audioDuckingModeString"));
        id v45 = v44;
        uint64_t v46 = v13;
LABEL_26:
        uint64_t v52 = sub_10004AE68(v45, v46, 0LL, v8);
        unsigned int v22 = objc_claimAutoreleasedReturnValue(v52);
      }

      else
      {
        unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
        uint64_t v40 = -[__CFString voiceOverAudioDuckingEnabled](v13, "voiceOverAudioDuckingEnabled");
LABEL_55:
        v74 = ((uint64_t (*)(void *, id))v9[2])(v9, v40);
        unsigned int v22 = objc_claimAutoreleasedReturnValue(v74);
      }

      goto LABEL_56;
    case 'P':
      char v47 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      [v47 voiceOverMediaDuckingAmount];
      unsigned int v49 = v48;

      uint64_t v50 = sub_10004AE68(off_1001AC148, @"ducking.amount.short", 0LL, v8);
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue(v50);
      v82 = v49 * 100.0;
      BOOL v51 = AXCFormattedString(v13, @"%.0f");
      unsigned int v22 = objc_claimAutoreleasedReturnValue(v51);
      goto LABEL_56;
    case 'R':
      id v19 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _navigationDirectionModeString:]( self,  "_navigationDirectionModeString:",  [(id)VOTSharedWorkspace navigationDirection]));
      goto LABEL_37;
    case 'S':
      unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedActivity]);
      id v11 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString name](v13, "name"));
      if (v11) {
        goto LABEL_57;
      }
      id v45 = off_1001AC148;
      uint64_t v46 = @"no.activity.selected";
      goto LABEL_26;
    case 'U':
      id v53 = [(id)VOTSharedWorkspace tvInteractionMode] == 0;
      goto LABEL_29;
    case 'V':
      id v53 = [(id)VOTSharedWorkspace tvInteractionMode] == (id)2;
LABEL_29:
      v54 = v53;
      goto LABEL_36;
    case 'W':
      id v23 = -[VOTElementManager speakNonfocusableElementsAfterDelay](self, "speakNonfocusableElementsAfterDelay");
      goto LABEL_35;
    case 'X':
      id v23 = -[VOTElementManager shouldSilenceAnnouncements](self, "shouldSilenceAnnouncements");
      goto LABEL_35;
    case 'Y':
      id v23 = -[VOTElementManager exploreFocusAffectsNativeFocus](self, "exploreFocusAffectsNativeFocus");
LABEL_35:
      v54 = v23;
LABEL_36:
      uint64_t v55 = ((uint64_t (*)(void *, uint64_t))v9[2])(v9, v54);
      id v19 = objc_claimAutoreleasedReturnValue(v55);
LABEL_37:
      unint64_t v13 = (__CFString *)v19;
      uint64_t v56 = [v6 addString:v19 withLanguage:v8];
      goto LABEL_60;
    case 'Z':
      char v57 = -[VOTElementManager _appInfoForCurrentElement](self, "_appInfoForCurrentElement");
      unint64_t v13 = v58;
      id v11 = (__CFString *)v57;
      v59 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement webAreaURL](self->_currentElement, "webAreaURL"));
      id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 host]);

      v61 = v11;
      if ([v60 length])
      {
        v61 = v60;
      }

      v62 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v62 liveRegionStatusForWebOrApp:v61]);

      if (v63) {
        id v64 = (uint64_t)[v63 BOOLValue];
      }
      else {
        id v64 = 1LL;
      }
      v76 = ((uint64_t (*)(void *, uint64_t))v9[2])(v9, v64);
      v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
      v78 = [v6 addString:v77 withLanguage:v8];

      goto LABEL_59;
    default:
      switch((unint64_t)v10)
      {
        case 0x14uLL:
          id v19 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _localizedTypingModeStringForCurrentMode]( self,  "_localizedTypingModeStringForCurrentMode"));
          goto LABEL_37;
        case 0x16uLL:
          unint64_t v13 = (__CFString *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
          if (v13)
          {
            __int16 v65 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _languageNameForCode:](self, "_languageNameForCode:", v13));
          }

          else
          {
            v79 = sub_10004A988(off_1001AC148, @"default.action.suffix", 0LL);
            __int16 v65 = objc_claimAutoreleasedReturnValue(v79);
          }

          id v11 = (__CFString *)v65;
          v69 = v6;
          v70 = v11;
          v71 = v13;
          goto LABEL_58;
        case 0x17uLL:
          uint64_t v66 = objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedBrailleTable]);
          goto LABEL_46;
        case 0x18uLL:
          uint64_t v66 = objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedBrailleInputTable]);
LABEL_46:
          unint64_t v13 = (__CFString *)v66;
          v67 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
          id v11 = (__CFString *)objc_claimAutoreleasedReturnValue([v67 nameForSpokenAnnouncementOfBrailleTable:v13]);

          if (!v11)
          {
            v68 = sub_10004A988(off_1001AC148, @"default.action.suffix", 0LL);
            id v11 = (__CFString *)objc_claimAutoreleasedReturnValue(v68);
          }

          v69 = v6;
          v70 = v11;
          v71 = 0LL;
          goto LABEL_58;
        case 0x19uLL:
          uint64_t v39 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _brailleAutoAdvanceSpeedString](self, "_brailleAutoAdvanceSpeedString"));
          goto LABEL_50;
        default:
          goto LABEL_61;
      }
  }

        goto LABEL_60;
      }

      if (v20) {
        self->_flags.performedElementUpdateForSelectionChange = 1;
      }
      char v47 = v7;
      int v48 = (uint64_t (**)(void))v18;
      if (([v17 includeDuringContentReading] & 1) != 0
        || ([v17 isReadingContent] & 1) != 0
        || self->_flags.performedElementUpdateForSelectionChange
        || self->_flags.isReadingAll)
      {
        [v17 shouldPlaySoundWhenFocused];
      }

      else if ([v17 shouldPlaySoundWhenFocused])
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        int v44 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
        [v43 sendEvent:v44];
      }

      uint64_t v31 = objc_claimAutoreleasedReturnValue([v17 localOpaqueParent]);
      if (v31
        && (id v32 = (void *)v31,
            uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v17 remoteParent]),
            v33,
            v32,
            !v33))
      {
        id v35 = 1;
      }

      else
      {
        if (!self->_flags.performedElementUpdateForSelectionChange)
        {
          int v34 = sub_10004B908(self->_flags.lastElementMovement);
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472LL;
          v50[2] = sub_100063890;
          v50[3] = &unk_100176DA8;
          v50[4] = self;
          BOOL v51 = v17;
          [v51 scrollToElementForDirectional:v34 withCompletion:v50];
        }

        id v35 = 0;
      }

      uint64_t v7 = v47;
      [v17 updateCache];
      buf[0] = 0;
      if (self->_flags.isReadingAll)
      {
        if ((v48[2]() & 1) == 0)
        {
          -[VOTElementManager _continueReadAllWithElement:setCurrentElement:]( self,  "_continueReadAllWithElement:setCurrentElement:",  v17,  buf);
          unsigned int v37 = -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v16);
          if (buf[0])
          {
            if (!v35) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
        }
      }

      else if (self->_flags.performedFlickNavigation)
      {
        -[VOTElementManager _echoFlickNavigationElement:](self, "_echoFlickNavigationElement:", v17);
        -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v17);
      }

      else if (self->_flags.performedSearch)
      {
        [v4 range];
        if (v40)
        {
          uint64_t v41 = [v4 range];
          -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:]( self,  "_moveFocusToUpdatedRange:element:searchType:",  v41,  v42,  v17,  [v4 searchType]);
          self->_flags.performedElementUpdateForSelectionChange = 1;
          -[VOTElementManager _echoSearchNavigationElement:forRangeAdjustment:]( self,  "_echoSearchNavigationElement:forRangeAdjustment:",  v17,  v20 != 0);
          unsigned int v37 = (id)-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAcces sibilityElementCheck:",  v17,  0LL,  1LL,  0LL,  0LL);
          goto LABEL_56;
        }

        -[VOTElementManager _echoSearchNavigationElement:forRangeAdjustment:]( self,  "_echoSearchNavigationElement:forRangeAdjustment:",  v17,  v20 != 0);
      }

      else if (self->_flags.performedElementUpdateForSelectionChange)
      {
        unsigned int v37 = (id)-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessi bilityElementCheck:",  v17,  0LL,  0LL,  0LL,  0LL);
        buf[0] = 1;
        if ((v35 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }

      unsigned int v37 = (id)-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibi lityElementCheck:",  v17,  0LL,  1LL,  1LL,  0LL);
      if ((v35 & 1) != 0) {
LABEL_55:
      }
        unsigned int v37 = -[VOTElementManager _updateCursorFrameForElementIfNeeded:]( self,  "_updateCursorFrameForElementIfNeeded:",  v17);
LABEL_56:
      uint64_t v38 = VOTLogElement(v37);
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_signpost_enabled(v39))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v39,  OS_SIGNPOST_INTERVAL_END,  0xEEEEB0B5B2B2EEEELL,  "ElementTraversal",  "",  buf,  2u);
      }

      -[VOTElementManager _resetSearchType](self, "_resetSearchType");
      id v18 = v48;
      goto LABEL_59;
    }

    if (!self->_flags.performedElementUpdateForSelectionChange && !self->_flags.performedSearch)
    {
      unint64_t v26 = v18;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v27 sendEvent:v28];

      id v18 = v26;
    }

    int v48 = (uint64_t (**)(void))v18;
    if (self->_flags.performedSearch)
    {
      -[VOTElementManager _echoSearchTypeNotFound:](self, "_echoSearchTypeNotFound:", [v4 searchType]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent NoResultsFound](&OBJC_CLASS___VOSOutputEvent, "NoResultsFound"));
      [v29 sendEvent:v30];
    }

    else
    {
      if (!self->_flags.performedFlickNavigation)
      {
        if (self->_flags.isReadingAll)
        {
          ((void (*)(void))v18[2])();
        }

        else if (([v16 verifyElementExists:0] & 1) == 0)
        {
          -[VOTElementManager _handleLayoutChange:](self, "_handleLayoutChange:", 0LL);
        }

        goto LABEL_43;
      }

      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      LOWORD(v45) = 257;
      -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:]( self,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound :isProtectedApp:includeHint:boundaryHit:",  v29,  0LL,  0LL,  0LL,  0LL,  0LL,  v45);
    }

LABEL_43:
    self->_flags.isReadingAll = 0;
    CGRect v36 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v36 setAutoAdvanceEnabled:0];

    goto LABEL_56;
  }

void sub_1000616AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000616CC(uint64_t a1, int a2)
{
  if (a2) {
    id v2 = @"element.on.text";
  }
  else {
    id v2 = @"element.off.text";
  }
  return sub_10004AE68(off_1001AC148, v2, 0LL, *(void **)(a1 + 32));
}

id sub_100061700(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uuid]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_100061D7C(uint64_t a1)
{
  id v2 = (unsigned int *)(*(void *)(a1 + 32) + 1592LL);
  do
    unsigned int v3 = __ldaxr(v2);
  while (__stlxr(v3, v2));
  if (v3 == *(_DWORD *)(a1 + 56))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v5 = [v4 voiceOverRotorSummaryFeedback];

    int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v7 = [v6 voiceOverRotorSummaryFeedback];

    if (v7 & 2 | (unint64_t)(v5 & 0x10))
    {
      if ((v7 & 2) != 0) {
        char v8 = 2;
      }
      else {
        char v8 = 10;
      }
      if ((v5 & 0x10) != 0) {
        char v9 = v8;
      }
      else {
        char v9 = 6;
      }
      id v10 = sub_10000BBB0(*(void **)(a1 + 40), v9, *(void **)(a1 + 48));
    }
  }

void sub_100062440(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  [v4 frame];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  double v10 = v9;
  double v12 = v11;
  [v3 frame];
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  v32.origin.double x = v6;
  v32.origin.double y = v8;
  v32.size.width = v10;
  v32.size.height = v12;
  v33.origin.double x = v14;
  v33.origin.double y = v16;
  v33.size.width = v18;
  v33.size.height = v20;
  if (!CGRectEqualToRect(v32, v33))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
    unsigned int v22 = (char *)[v21 applicationOrientation];

    if ((unint64_t)(v22 - 3) >= 2)
    {
    }

    else if (v12 > *((double *)&xmmword_1001AD170 + 1) + -50.0)
    {
      goto LABEL_13;
    }

    __int16 v31 = 0;
    uint64_t v23 = kAXLaunchIconTrait;
    unsigned __int8 v24 = [v4 doesHaveTraits:kAXLaunchIconTrait];
    double v25 = 10.0;
    if ((v24 & 1) == 0)
    {
      unsigned int v26 = objc_msgSend(v3, "doesHaveTraits:", v23, 10.0);
      double v25 = 0.0;
      if (v26) {
        double v25 = 10.0;
      }
    }

    sub_10004B008((BOOL *)&v31, (BOOL *)&v31 + 1, (uint64_t)v22, v14, v16, v18, v20, v6, v8, v10, v12, v25);
    if (HIBYTE(v31))
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidWrapForwards](&OBJC_CLASS___VOSOutputEvent, "DidWrapForwards"));
      [v27 sendEvent:v28];
    }

    if ((_BYTE)v31)
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidWrapBackwards](&OBJC_CLASS___VOSOutputEvent, "DidWrapBackwards"));
      [v29 sendEvent:v30];
    }
  }

LABEL_61:
}

id sub_1000637D8(uint64_t a1)
{
  uint64_t v2 = kAXWebContentTrait;
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) immediateRemoteParent]);
  if (!v3) {
    return 0LL;
  }
  id v4 = (void *)v3;
  uint64_t v5 = kAXCausesPageTurnTrait;
  while (![v4 doesHaveTraits:v5])
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 directParent]);

    id v4 = (void *)v6;
    if (!v6) {
      return 0LL;
    }
  }

  id v8 = [v4 scrollNextPage];

  return v8;
}

id sub_100063890(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

$85E40A55691FE2F31975A98F57E3065D sub_1000638E0(id a1, VOTElement *a2, VOTElement *a3)
{
  uint64_t v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTTextSearchManager sharedManager](&OBJC_CLASS___VOTTextSearchManager, "sharedManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentSearchValue]);

  if ([v5 length])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v3, "label"));
    if ([v6 length]
      && (uint64_t v7 = 1, [v6 rangeOfString:v5 options:1] != (id)0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v9 = 2LL;
    }

    else
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](v3, "value"));
      if ([v8 length]
        && (uint64_t v7 = 1, [v8 rangeOfString:v5 options:1] != (id)0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v9 = 2LL;
      }

      else
      {
        uint64_t v7 = 0LL;
        uint64_t v9 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  BOOL v10 = v7;
  int64_t v11 = v9;
  result.var1 = v11;
  result.var0 = v10;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100063A1C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = 0LL;
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

BOOL sub_100063A94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 groupedParent]);
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 groupedParent]);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v5 groupedParent]);
    unsigned int v11 = [v9 isEqual:v10];

    if (!v11)
    {
      BOOL v12 = 0LL;
      goto LABEL_29;
    }
  }

  if (([v5 isAccessibleGroup] & 1) == 0)
  {
LABEL_36:
    if ([v5 doesHaveTraits:kAXStaticTextTrait]
      && [v5 doesHaveTraits:kAXWebContentTrait])
    {
      double v13 = (void *)objc_claimAutoreleasedReturnValue([v5 nextElement]);
      uint64_t v14 = kAXRadioButtonTrait | kAXToggleTrait;
      if (([v13 doesHaveTraits:kAXRadioButtonTrait | kAXToggleTrait] & 1) == 0)
      {
        double v15 = (void *)objc_claimAutoreleasedReturnValue([v13 titleElements]);
        if (([v15 containsObject:v5] & 1) != 0
          || [*(id *)(a1 + 32) shouldElement:v13 beCombined:v5 combineLinks:0]
          && ![v15 count])
        {
          goto LABEL_18;
        }
      }

      double v15 = (void *)objc_claimAutoreleasedReturnValue([v5 previousElement]);
      if ([v15 doesHaveTraits:v14]
        && [*(id *)(a1 + 32) shouldElement:v15 beCombined:v5 combineLinks:0])
      {
        CGFloat v16 = (void *)objc_claimAutoreleasedReturnValue([v15 titleElements]);
        if (![v16 count])
        {

          goto LABEL_18;
        }

        double v17 = (void *)objc_claimAutoreleasedReturnValue([v15 titleElements]);
        unsigned __int8 v18 = [v17 containsObject:v5];

        if ((v18 & 1) != 0) {
          goto LABEL_18;
        }
      }

      double v19 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
      unsigned int v20 = [v19 elementActsAsTitleElement:v5];

      if (v20)
      {
LABEL_18:

LABEL_19:
        BOOL v12 = 0LL;
        goto LABEL_29;
      }
    }

    if ([v5 doesHaveTraits:kAXImageTrait]
      && ([v5 doesHaveTraits:kAXLinkTrait] & 1) == 0
      && ([v5 doesHaveTraits:kAXHeaderTrait] & 1) == 0)
    {
      id v21 = [(id)VOTSharedWorkspace navigateImagesOption];
      if (v21 == (id)3) {
        goto LABEL_19;
      }
      if (v21 == (id)2)
      {
        unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v5 originalLabel]);
        id v23 = [v22 length];

        if (!v23)
        {
          uint64_t v26 = VOTLogCommon(v24);
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v28 = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Skipping image with no label", v28, 2u);
          }

          goto LABEL_19;
        }
      }
    }

    BOOL v12 = v5 != 0LL;
    goto LABEL_29;
  }

  BOOL v12 = 1LL;
LABEL_29:

  return v12;
}

$85E40A55691FE2F31975A98F57E3065D sub_100063DD8(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXImageTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100063E20(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveAllTraits:](a2, "doesHaveAllTraits:", kAXLinkTrait | kAXVisitedTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100063E78(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = a2;
  if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXHeaderTrait)) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = -[VOTElement servesAsHeadingLandmark](v3, "servesAsHeadingLandmark");
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_100063F5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_100063F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXHeaderTrait])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    unsigned int v5 = [v4 intValue];

    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    unint64_t v7 = v6 - 40;
    uint64_t v8 = v6 - 10;
    if (v7 < 5)
    {
      int v9 = v7 + 2;
    }

    else
    {
      uint64_t v8 = 29LL;
      int v9 = 1;
    }

    **(void **)(a1 + 40) = v8;
    BOOL v10 = v5 == v9;
  }

  else
  {
    BOOL v10 = 0LL;
  }

  return v10;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064034(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXVisitedTrait)) {
    BOOL v4 = 0LL;
  }
  else {
    BOOL v4 = -[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXLinkTrait);
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_1000640B0(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXLinkTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

uint64_t sub_100064188(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXStaticTextTrait])
  {
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 label]);
    [v4 rangeOfCharacterFromSet:*(void *)(a1 + 32)];
    if (v5 == [v4 length])
    {
    }

    else
    {
      unsigned int v6 = [v3 doesHaveTraits:kAXHeaderTrait | kAXLinkTrait];

      if (!v6)
      {
        uint64_t v7 = 1LL;
        goto LABEL_6;
      }
    }
  }

  uint64_t v7 = 0LL;
LABEL_6:

  return v7;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064268(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = -[VOTElement traits](a2, "traits", a3);
  BOOL v4 = ((kAXButtonTrait | kAXTextEntryTrait | kAXPickerElementTrait | kAXPopupButtonTrait | kAXRadioButtonTrait | kAXTabButtonTrait | kAXSecureTextFieldTrait) & v3) != 0;
  int64_t v5 = 0LL;
  result.var1 = v5;
  result.var0 = v4;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064314(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
  if ([v4 containsObject:&off_100187760])
  {
    uint64_t v5 = 1LL;
    if (!-[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  4LL)) {
      uint64_t v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  0x2000LL);
    }
  }

  else
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
    if ([v6 containsObject:&off_100187778])
    {
      uint64_t v5 = 1LL;
      if (!-[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  4LL)) {
        uint64_t v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  0x2000LL);
      }
    }

    else
    {
      uint64_t v5 = 0LL;
    }
  }

  BOOL v7 = v5;
  int64_t v8 = 0LL;
  result.var1 = v8;
  result.var0 = v7;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006441C(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
  if ([v4 containsObject:&off_100187790]) {
    BOOL v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  64LL);
  }
  else {
    BOOL v5 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = 0LL;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_1000644AC(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
  if ([v4 containsObject:&off_100187748]) {
    BOOL v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  2LL);
  }
  else {
    BOOL v5 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = 0LL;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006453C(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
  if ([v4 containsObject:&off_1001877A8]) {
    BOOL v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  128LL);
  }
  else {
    BOOL v5 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = 0LL;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_1000645CC(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v3, "containerTypes"));
  if ([v4 containsObject:&off_1001877C0]) {
    BOOL v5 = -[VOTElement isElementFirstElement:orLastElement:withType:]( v3,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  1LL);
  }
  else {
    BOOL v5 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = 0LL;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10006465C(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXLinkTrait))
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement linkedElement](v3, "linkedElement"));
    BOOL v5 = v4 != 0LL;
  }

  else
  {
    BOOL v5 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = 0LL;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_1000646D8(id a1, VOTElement *a2, VOTElement *a3)
{
  unint64_t v3 = a2;
  if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXRadioButtonTrait))
  {
    uint64_t v4 = 2LL;
    uint64_t v5 = 1LL;
  }

  else if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXPopupButtonTrait | kAXButtonTrait))
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = -[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXToggleTrait) ^ 1;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = 0LL;
  }

  BOOL v6 = v5;
  int64_t v7 = v4;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064864(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement blockquoteLevel](a2, "blockquoteLevel", a3) != 0;
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

BOOL sub_1000648F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((uint64_t)[*(id *)(a1 + 32) lastElementBlockquoteLevel] < 1)
  {
    BOOL v5 = 0LL;
  }

  else
  {
    id v4 = [v3 blockquoteLevel];
    BOOL v5 = v4 == [*(id *)(a1 + 32) lastElementBlockquoteLevel];
  }

  return v5;
}

BOOL sub_1000649CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveAllTraits:kAXHeaderTrait])
  {
    if ([*(id *)(a1 + 32) lastElementHeadingLevel])
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
      signed int v5 = [v4 intValue];
      BOOL v6 = [*(id *)(a1 + 32) lastElementHeadingLevel] == (id)v5;
    }

    else
    {
      BOOL v6 = 1LL;
    }
  }

  else
  {
    BOOL v6 = 0LL;
  }

  return v6;
}

uint64_t sub_100064B18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  LODWORD(v2) = objc_msgSend(v3, "doesHaveAllTraits:", objc_msgSend(v2, "currentSimilarTraits"));

  return v2;
}

uint64_t sub_100064C18(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  LODWORD(v2) = objc_msgSend(v3, "doesHaveAllTraits:", objc_msgSend(v2, "currentSimilarTraits"));

  return v2 ^ 1;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064C7C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXTextEntryTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064CC4(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXRadioButtonTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064D0C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXToggleTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_100064D54(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXSearchFieldTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

uint64_t sub_100065230(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = a3;
  v15[1] = a4;
  int64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v14 = a2;
  id v10 = a2;
  [v8 _customPublicRotorMatchForType:v9 range:v15 element:&v14 direction:a5 lastSearchUUID:a6];
  id v11 = v14;

  uint64_t v12 = v15[0];
  return v12;
}

void sub_10006563C(id a1)
{
  v3[0] = kVOTEventCommandNextGraphic;
  v3[1] = kVOTEventCommandPreviousGraphic;
  v4[0] = &stru_1001784A8;
  v4[1] = &stru_1001784C8;
  void v3[2] = kVOTEventCommandNextHeading;
  v3[3] = kVOTEventCommandPreviousHeading;
  v4[2] = &stru_1001784E8;
  v4[3] = &stru_100178508;
  v3[4] = kVOTEventCommandNextHeading;
  void v3[5] = kVOTEventCommandPreviousHeading;
  v4[4] = &stru_100178528;
  v4[5] = &stru_100178548;
  v3[6] = kVOTEventCommandNextSameElement;
  v3[7] = kVOTEventCommandPreviousSameElement;
  v4[6] = &stru_100178568;
  v4[7] = &stru_100178588;
  v3[8] = kVOTEventCommandNextSameHeading;
  v3[9] = kVOTEventCommandPreviousSameHeading;
  v4[8] = &stru_1001785A8;
  v4[9] = &stru_1001785C8;
  v3[10] = kVOTEventCommandNextDifferentElement;
  v3[11] = kVOTEventCommandPreviousDifferentElement;
  v4[10] = &stru_1001785E8;
  v4[11] = &stru_100178608;
  v3[12] = kVOTEventCommandNextTable;
  v3[13] = kVOTEventCommandPreviousTable;
  v4[12] = &stru_100178628;
  v4[13] = &stru_100178648;
  v3[14] = kVOTEventCommandNextFrame;
  v3[15] = kVOTEventCommandPreviousFrame;
  v4[14] = &stru_100178668;
  v4[15] = &stru_100178688;
  v3[16] = kVOTEventCommandNextControl;
  v3[17] = kVOTEventCommandPreviousControl;
  uint8_t v4[16] = &stru_1001786A8;
  v4[17] = &stru_1001786C8;
  v3[18] = kVOTEventCommandNextList;
  v3[19] = kVOTEventCommandPreviousList;
  v4[18] = &stru_1001786E8;
  v4[19] = &stru_100178708;
  v3[20] = kVOTEventCommandNextLink;
  v3[21] = kVOTEventCommandPreviousLink;
  v4[20] = &stru_100178728;
  v4[21] = &stru_100178748;
  v3[22] = kVOTEventCommandNextBoldText;
  void v3[23] = kVOTEventCommandPreviousBoldText;
  v4[22] = &stru_100178768;
  v4[23] = &stru_100178788;
  v3[24] = kVOTEventCommandNextItalicText;
  v3[25] = kVOTEventCommandPreviousItalicText;
  v4[24] = &stru_1001787A8;
  v4[25] = &stru_1001787C8;
  v3[26] = kVOTEventCommandNextUnderlineText;
  v3[27] = kVOTEventCommandPreviousUnderlineText;
  v4[26] = &stru_1001787E8;
  v4[27] = &stru_100178808;
  v3[28] = kVOTEventCommandNextMisspelledWord;
  v3[29] = kVOTEventCommandPreviousMisspelledWord;
  v4[28] = &stru_100178828;
  v4[29] = &stru_100178848;
  v3[30] = kVOTEventCommandNextPlainText;
  v3[31] = kVOTEventCommandPreviousPlainText;
  v4[30] = &stru_100178868;
  v4[31] = &stru_100178888;
  v3[32] = kVOTEventCommandNextColorChange;
  v3[33] = kVOTEventCommandPreviousColorChange;
  v4[32] = &stru_1001788A8;
  v4[33] = &stru_1001788C8;
  v3[34] = kVOTEventCommandNextFontChange;
  v3[35] = kVOTEventCommandPreviousFontChange;
  v4[34] = &stru_1001788E8;
  v4[35] = &stru_100178908;
  v3[36] = kVOTEventCommandNextStyleChange;
  v3[37] = kVOTEventCommandPreviousStyleChange;
  v4[36] = &stru_100178928;
  v4[37] = &stru_100178948;
  v3[38] = kVOTEventCommandNextBlockquote;
  v3[39] = kVOTEventCommandPreviousBlockquote;
  v4[38] = &stru_100178968;
  v4[39] = &stru_100178988;
  v3[40] = kVOTEventCommandNextSameBlockquote;
  v3[41] = kVOTEventCommandPreviousSameBlockquote;
  v4[40] = &stru_1001789A8;
  v4[41] = &stru_1001789C8;
  v3[42] = kVOTEventCommandNextVisitedLink;
  v3[43] = kVOTEventCommandPreviousVisitedLink;
  v4[42] = &stru_1001789E8;
  v4[43] = &stru_100178A08;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  44LL));
  uint64_t v2 = (void *)qword_1001ACED8;
  qword_1001ACED8 = v1;
}

void sub_100065AEC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 16LL;
  *a3 = 1LL;
}

void sub_100065B00(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 16LL;
  *a3 = 2LL;
}

void sub_100065B14(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8LL;
  *a3 = 1LL;
}

void sub_100065B28(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8LL;
  *a3 = 2LL;
}

void sub_100065B3C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8LL;
  *a3 = 1LL;
}

void sub_100065B50(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 8LL;
  *a3 = 2LL;
}

void sub_100065B64(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 37LL;
  *a3 = 1LL;
}

void sub_100065B78(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 37LL;
  *a3 = 2LL;
}

void sub_100065B8C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 45LL;
  *a3 = 1LL;
}

void sub_100065BA0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 45LL;
  *a3 = 2LL;
}

void sub_100065BB4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 46LL;
  *a3 = 1LL;
}

void sub_100065BC8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 46LL;
  *a3 = 2LL;
}

void sub_100065BDC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 11LL;
  *a3 = 1LL;
}

void sub_100065BF0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 11LL;
  *a3 = 2LL;
}

void sub_100065C04(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 12LL;
  *a3 = 1LL;
}

void sub_100065C18(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 12LL;
  *a3 = 2LL;
}

void sub_100065C2C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 10LL;
  *a3 = 1LL;
}

void sub_100065C40(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 10LL;
  *a3 = 2LL;
}

void sub_100065C54(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 13LL;
  *a3 = 1LL;
}

void sub_100065C68(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 13LL;
  *a3 = 2LL;
}

void sub_100065C7C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 9LL;
  *a3 = 1LL;
}

void sub_100065C90(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 9LL;
  *a3 = 2LL;
}

void sub_100065CA4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 62LL;
  *a3 = 1LL;
}

void sub_100065CB8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 62LL;
  *a3 = 2LL;
}

void sub_100065CCC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 63LL;
  *a3 = 1LL;
}

void sub_100065CE0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 63LL;
  *a3 = 2LL;
}

void sub_100065CF4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 64LL;
  *a3 = 1LL;
}

void sub_100065D08(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 64LL;
  *a3 = 2LL;
}

void sub_100065D1C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 65LL;
  *a3 = 1LL;
}

void sub_100065D30(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 65LL;
  *a3 = 2LL;
}

void sub_100065D44(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 66LL;
  *a3 = 1LL;
}

void sub_100065D58(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 66LL;
  *a3 = 2LL;
}

void sub_100065D6C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 67LL;
  *a3 = 1LL;
}

void sub_100065D80(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 67LL;
  *a3 = 2LL;
}

void sub_100065D94(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 68LL;
  *a3 = 1LL;
}

void sub_100065DA8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 68LL;
  *a3 = 2LL;
}

void sub_100065DBC(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 69LL;
  *a3 = 1LL;
}

void sub_100065DD0(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 69LL;
  *a3 = 2LL;
}

void sub_100065DE4(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 70LL;
  *a3 = 1LL;
}

void sub_100065DF8(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 70LL;
  *a3 = 2LL;
}

void sub_100065E0C(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 71LL;
  *a3 = 1LL;
}

void sub_100065E20(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 71LL;
  *a3 = 2LL;
}

void sub_100065E34(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 14LL;
  *a3 = 1LL;
}

void sub_100065E48(id a1, int64_t *a2, int64_t *a3)
{
  *a2 = 14LL;
  *a3 = 2LL;
}

void sub_100066480(id a1)
{
  uint64_t v1 = (void *)qword_1001ACEE8;
  qword_1001ACEE8 = (uint64_t)&off_100189018;
}

BOOL sub_100066C60(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v2, "objectForKey:", @"Default"));
  unsigned __int8 v4 = [v3 BOOLValue];

  if ((v4 & 1) != 0)
  {
    BOOL v5 = 1;
  }

  else
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v2, "objectForKey:", @"RotorItem"));
    uint64_t v7 = AXLanguageConvertToCanonicalForm(v6);
    int64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue( [v9 speechVoiceIdentifierForLanguage:v8 sourceKey:AXSpeechSourceKeyVoiceOver exists:0]);

    BOOL v5 = v10 != 0LL;
  }

  return v5;
}

void sub_100067348(id a1)
{
  id v1 = objc_allocWithZone(&OBJC_CLASS___NSArray);
  id v2 = objc_msgSend( v1,  "initWithObjects:",  UIAccessibilityTokenMisspelled,  AXUIAccessibilityTextAttributeHeadingLevel,  AXUIAccessibilityTextAttributeCustom,  UIAccessibilityTokenBlockquoteLevel,  UIAccessibilityTokenStyleName,  UIAccessibilityTokenFontFamily,  UIAccessibilityTokenFontSize,  UIAccessibilityTokenLineSpacing,  UIAccessibilityTokenForegroundColor,  UIAccessibilityTokenBold,  UIAccessibilityTokenItalic,  UIAccessibilityTokenUnderline,  UIAccessibilityTokenStrikethrough,  UIAccessibilityTokenParagraphAlignment,  UIAccessibilityTokenHighlightedText,  UIAccessibilityTokenFontName,  UIAccessibilityTokenListItemLabel,  UIAccessibilityTokenIndentationLevel,  0);
  BOOL v3 = (void *)qword_1001ACF00;
  qword_1001ACF00 = (uint64_t)v2;
}

LABEL_93:
          if (objc_msgSend(v16, "isEqualToString:", v155, v147))
          {
            v101 = objc_opt_class(&OBJC_CLASS___NSArray, v100);
            if ((objc_opt_isKindOfClass(v17, v101) & 1) != 0) {
              v102 = v17;
            }
            else {
              v102 = 0LL;
            }
            v103 = v102;
            v104 = v103;
            if (v103 && ([v103 isEqual:v19] & 1) == 0)
            {
              v148 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "componentsJoinedByString:", @", "));
              v151 = @"__AXStringForVariablesSentinel";
              v105 = __AXStringForVariables(v9);
              v106 = objc_claimAutoreleasedReturnValue(v105);

              uint64_t v9 = (void *)v106;
              uint64_t v7 = v161;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenBlockquoteLevel, v148))
          {
            v107 = [v17 integerValue];
            v108 = v107;
            if ((uint64_t)v107 > 0 || !v107 && (!v19 || [v19 integerValue]))
            {
              v109 = sub_10004A988(off_1001AC148, @"blockquote.level", 0LL);
              v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
              v111 = AXFormatInteger(v108);
              v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
              v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v110, v112));
              v151 = @"__AXStringForVariablesSentinel";
              v113 = __AXStringForVariables(v9);
              v114 = objc_claimAutoreleasedReturnValue(v113);

              uint64_t v7 = v161;
              uint64_t v9 = (void *)v114;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenIndentationLevel, v149))
          {
            v115 = [v17 integerValue];
            v116 = v115;
            if ((uint64_t)v115 > 0 || !v115 && (!v19 || [v19 integerValue]))
            {
              v117 = sub_10004A988(off_1001AC148, @"indentation.level", 0LL);
              v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
              v119 = AXFormatInteger(v116);
              v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
              v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v118, v120));
              v151 = @"__AXStringForVariablesSentinel";
              v121 = __AXStringForVariables(v9);
              v122 = objc_claimAutoreleasedReturnValue(v121);

              uint64_t v9 = (void *)v122;
            }

            uint64_t v7 = v161;
          }

          id v14 = v162;
          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenParagraphAlignment, v150))
          {
            v123 = [v17 integerValue];
            if ((unint64_t)v123 <= 4)
            {
              v124 = sub_10004A988(off_1001AC148, *(&off_100179250 + (void)v123), 0LL);
              v136 = (void *)objc_claimAutoreleasedReturnValue(v124);
              v151 = @"__AXStringForVariablesSentinel";
              v125 = __AXStringForVariables(v9);
              v126 = objc_claimAutoreleasedReturnValue(v125);

              id v14 = v162;
              uint64_t v9 = (void *)v126;
              uint64_t v7 = v161;
            }
          }
        }

        if (![v19 length])
        {
          v128 = [v17 length];
          v127 = @"entered.list";
          if (v128) {
            goto LABEL_119;
          }
        }

        if ([v19 length] && !objc_msgSend(v17, "length"))
        {
          v127 = @"exited.list";
LABEL_119:
          v129 = sub_10004A988(off_1001AC148, v127, 0LL);
          v135 = (void *)objc_claimAutoreleasedReturnValue(v129);
          v151 = @"__AXStringForVariablesSentinel";
          v130 = __AXStringForVariables(v9);
          v131 = objc_claimAutoreleasedReturnValue(v130);

          id v14 = v162;
          uint64_t v9 = (void *)v131;
        }

LABEL_120:
        double v15 = (char *)v15 + 1;
      }

      while (v158 != v15);
      v132 = [obj countByEnumeratingWithState:&v164 objects:v168 count:16];
      v158 = v132;
    }

    while (v132);
  }

  if (![v8 count] || objc_msgSend(v7, "count"))
  {
    objc_msgSend(v8, "removeAllObjects", v135);
    [v8 addEntriesFromDictionary:v7];
  }

  v133 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v9,  v135));

  return v133;
}

id sub_10006A350(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

void sub_10006A384(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  unsigned __int8 v4 = *(void **)(v2 + 1608);
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[10]));
  objc_msgSend( v4,  "performSelector:onTarget:count:objects:",  "_finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:",  v2,  6,  v3,  v5,  a1[6],  a1[7],  a1[8],  a1[9],  0);
}

id sub_10006AD30(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

id sub_10006B8D4(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForLineFrameMovement:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

LABEL_44:
  double v25 = var0;
  uint64_t v26 = var1;
  result.var1 = v26;
  result.var0 = v25;
  return result;
}
}

void sub_10006CD2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10006CD44(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _treePositionForMathSegment:a2]);
  if (sub_10004C7F4(v7, *(void **)(a1 + 40)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }
}

id sub_10006D814(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_finishHandlingNextAutofillWithElement:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

void sub_10006DA70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10006DA98(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) value]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unsigned __int8 v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(a1 + 40) isEqualToString:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)] ^ 1;
}

id sub_10006EB94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _monitorElements];
}

void sub_10006F0BC(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentElement]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) application]);
  unsigned int v3 = [v2 isDictationListening];

  if (!v3
    || (unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) application]),
        unsigned __int8 v5 = [v4 startStopToggle],
        v4,
        (v5 & 1) == 0))
  {
    if ((![v10 doesHaveTraits:kAXStatusBarElementTrait]
       || ([*(id *)(a1 + 40) startStopToggle] & 1) == 0)
      && ([v10 startStopToggle] & 1) == 0)
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v10 remoteParent]);
      if (v6)
      {
        id v7 = (void *)v6;
        int64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 immediateRemoteParent]);
        if ([v8 startStopToggle])
        {

          goto LABEL_13;
        }

        if ([v8 isEqual:v7])
        {
        }

        else
        {
          unsigned __int8 v9 = [v7 startStopToggle];

          if ((v9 & 1) != 0) {
            goto LABEL_13;
          }
        }
      }

      [*(id *)(a1 + 40) startStopToggle];
    }
  }

id sub_10006F3D0(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:cancelMask:count:objects:",  "_handlePressActionResultAtTime:",  *(void *)(a1 + 32),  0,  1,  *(void *)(a1 + 40),  0);
}

id sub_10007041C(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:cancelMask:count:objects:",  "_handlePressActionResultAtTime:",  *(void *)(a1 + 32),  0,  1,  *(void *)(a1 + 40),  0);
}

void sub_100070454(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v2 setCursorFrameForElement:*(void *)(a1 + 32)];
}

id sub_100070498(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) updateValue];
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) toggleStatusLabel]);
    if (([v2 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
    {
      id v3 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      [v3 setDoesNotInterrupt:1];
      id v4 = [v3 addString:v2];
      [*(id *)(a1 + 48) sendRequest:v3];
    }
  }

  return [*(id *)(*(void *)(a1 + 48) + 1608) performSelector:"forceUpdate" onTarget:*(void *)(*(void *)(a1 + 48) + 112) cancelMask:0 count:0 objects:0];
}

id sub_100070F2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"_handleElementChangedNotification:" onTarget:*(void *)(a1 + 32) cancelMask:1024 count:1 objects:0];
}

void sub_1000713E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100071400(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___AXEventPathInfoRepresentation);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fingersFromTouchCommands]);
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v3]);

  [v5 pointValue];
  objc_msgSend(v6, "setPathLocation:");
  LOBYTE(v4) = [v3 intValue];

  [v6 setPathIndex:v4];
  objc_msgSend(v6, "setPathProximity:", objc_msgSend(v6, "pathProximity") | 3);
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
}

void sub_100071FE8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend( v2,  "postFingerLiftAtPoint:withContextId:",  *(unsigned int *)(a1 + 48),  *(double *)(a1 + 32),  *(double *)(a1 + 40));
}

int64_t sub_1000729D4(id a1, VOTOutputRequest *a2)
{
  return (id)-[VOTOutputRequest originationType](a2, "originationType") == (id)1;
}

LABEL_56:
}

BOOL sub_10007354C(id a1, VOTCustomActionCategory *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[VOTCustomActionCategory categoryName](a2, "categoryName"));
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

BOOL sub_100073770(id a1, VOTCustomActionCategory *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[VOTCustomActionCategory categoryName](a2, "categoryName"));
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

LABEL_51:
}
}
}

void sub_100073DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100073DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) + a3;
    id v16 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_textAttachmentElementForString:inRange:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  v6,  a4));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    int64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v16 value]);
    [v7 axSafelyAddObject:v8];

    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v16 label]);
    [v7 axSafelyAddObject:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "componentsJoinedByString:", @", "));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 label]);
    id v12 = [v11 length];

    if (v12)
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40),  "axStringByReplacingCharactersInRange:withString:",  v6,  a4,  v10));
      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += (char *)[v10 length] - a4;
    }
  }

BOOL sub_100074C84(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  return -[VOTElement isAccessibleElement](a2, "isAccessibleElement", a3, a4);
}

id sub_1000754D0(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

uint64_t sub_100075A84(uint64_t a1, double a2, double a3)
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", a2, a3);
  if (([v4 isEqual:*(void *)(*(void *)(a1 + 32) + 64)] & 1) != 0
    || ![v4 isAccessibleElement])
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 32),  "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:",  v4,  objc_msgSend(v4, "shouldPlaySoundWhenFocused"),  0,  0);
    uint64_t v5 = 1LL;
  }

  return v5;
}

LABEL_33:
    if (!v31
      || [v31 isEqual:v22]
      && (void)valuePtr == 0x7FFFFFFFLL
      && (!v40 || -[__AXValue count](v40, "count") != (id)2))
    {
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      BOOL v51 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v50 sendEvent:v51];

LABEL_69:
      goto LABEL_70;
    }

    preventCustomRotorItemIndexReset = self->_flags.preventCustomRotorItemIndexReset;
    self->_flags.preventCustomRotorItemIndexReset = 1;
    id v43 = objc_msgSend(v31, "isEqual:", v22, v20);
    int v44 = v43;
    int v48 = (self->_highlightedCharacterRange.location != (void)valuePtr
        || self->_highlightedCharacterRange.length != *((void *)&valuePtr + 1))
       && (void)valuePtr != 0x7FFFFFFFLL
       || v40 != 0LL;
    if ((v43 & 1) != 0 || v48)
    {
      if (((v43 | !v48) & 1) == 0)
      {
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v31);
        [v31 scrollToElementForDirectional:sub_10004B908(a4) withCompletion:0];
      }
    }

    else
    {
      -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v31, 0LL);
      self->_flags.focusIsOnElement = 1;
      unsigned int v49 = sub_10004B908(a4);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472LL;
      v59[2] = sub_100076400;
      v59[3] = &unk_100176DA8;
      v59[4] = self;
      id v60 = v31;
      [v60 scrollToElementForDirectional:v49 withCompletion:v59];
    }

    if (v48)
    {
      self->_performedTextSelectionOperation = CFAbsoluteTimeGetCurrent();
      if ((void)valuePtr == 0x7FFFFFFFLL)
      {
        unsigned int v20 = v55;
        if (v40)
        {
          uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[__AXValue firstObject](v40, "firstObject"));
          [v31 setSelectionToTextMarker:v52];

          id v53 = (void *)objc_claimAutoreleasedReturnValue([v31 customPublicRotorName:v57]);
          if ((id)+[VOTRotor rotorTypeForSystemRotorType:](&OBJC_CLASS___VOTRotor, "rotorTypeForSystemRotorType:", v53) == (id)65) {
            [v31 increaseWebSelection:2];
          }
          goto LABEL_67;
        }
      }

      else
      {
        -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:]( self,  "_moveFocusToUpdatedRange:element:searchType:",  valuePtr,  v31,  0LL);
        unsigned int v20 = v55;
      }
    }

    else
    {
      self->_performedTextSelectionOperation = -3061152000.0;
      unsigned int v20 = v55;
      if (v44)
      {
        if (*(_OWORD *)&self->_highlightedCharacterRange != valuePtr)
        {
          id v53 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
          [v53 sendEvent:v54];

LABEL_67:
          goto LABEL_68;
        }

        -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:]( self,  "_moveFocusToUpdatedRange:element:searchType:");
      }
    }

  id v35 = 0LL;
LABEL_44:
  if (![v14 length])
  {
    else {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v15 characters]);
    }
    uint64_t v39 = v38;
    if ([v38 length])
    {
      if ([v39 length] == (id)1
        && (uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet uppercaseLetterCharacterSet]( NSCharacterSet,  "uppercaseLetterCharacterSet")),  v41 = objc_msgSend(v40, "characterIsMember:", objc_msgSend(v39, "characterAtIndex:", 0)),  v40,  v41))
      {
        int v42 = sub_10004A988(off_1001AC148, @"CapitalLetterFormat", 0LL);
        id v43 = objc_claimAutoreleasedReturnValue(v42);
        int v44 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v43, v39));

        uint64_t v14 = (id)v43;
      }

      else
      {
        int v44 = v39;
      }

      uint64_t v14 = v44;
    }
  }

LABEL_56:
  return v14;
}

    id v11 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    unsigned __int8 v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    CGRect v32 = *v30;
    __int16 v31 = v30[1];
    CGRect v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }

    Hasher.init(_seed:)(v38, *(void *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    $85E40A55691FE2F31975A98F57E3065D result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unsigned __int8 v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      unsigned __int8 v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    double v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *double v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v1_Block_object_dispose(va, 8) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  int v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *id v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  $85E40A55691FE2F31975A98F57E3065D result = swift_release(v5);
  *unsigned __int8 v3 = v8;
  return result;
}

id sub_100076400(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

id sub_1000768E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  else {
    id v4 = [v3 isValidForContext:*(void *)(a1 + 40)];
  }

  return v4;
}

void sub_10007754C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100077828( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100077B60(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

id sub_100077EA0(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

id sub_1000792C4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 968)];

  return v4;
}

id sub_100079558(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_10007A5E8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uuid]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10007AEE0(id a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v1 = off_1001AC148;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  else {
    id v3 = @"audioducking.off";
  }
  id v4 = sub_10004AE68(v1, v3, 0LL, v7);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10000BBB0(v5, 0, v7);
}

$85E40A55691FE2F31975A98F57E3065D sub_10007B45C(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXWebContentTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

$85E40A55691FE2F31975A98F57E3065D sub_10007B498(id a1, VOTElement *a2, VOTElement *a3)
{
  BOOL v3 = -[VOTElement doesHaveTraits:](a2, "doesHaveTraits:", kAXScrollableTrait);
  int64_t v4 = 0LL;
  result.var1 = v4;
  result.var0 = v3;
  return result;
}

LABEL_39:
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472LL;
  v54[2] = sub_10007C650;
  v54[3] = &unk_100177E90;
  int v48 = v5;
  uint64_t v55 = v48;
  uint64_t v56 = self;
  unsigned int v49 = v6;
  char v57 = v49;
  uint64_t v50 = objc_retainBlock(v54);
  if (v20 && [v48 shouldIncludeRegionDescription])
  {
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472LL;
    v51[2] = sub_10007C7A4;
    v51[3] = &unk_100178D78;
    uint64_t v52 = v49;
    id v53 = v50;
    -[VOTElementManager regionDescriptionForElement:withCompletion:]( self,  "regionDescriptionForElement:withCompletion:",  v48,  v51);
  }

  else
  {
    ((void (*)(void *))v50[2])(v50);
  }
}

void sub_10007C650(id *a1)
{
  id v2 = [a1[4] mapFeatureType];
  if (v2)
  {
    if (v2 == (id)1)
    {
      id v3 = a1[4];
      int64_t v4 = (double *)a1[5];
      double v5 = v4[59];
      double v6 = v4[60];
    }

    else
    {
      id v7 = a1[4];
      [v7 centerPoint];
      id v3 = v7;
    }

    int64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mapDetailedInformationAtPoint:", v5, v6));
    id v9 = [a1[6] addString:v8];
  }

  if ([a1[4] shouldAnnounceTableInfo])
  {
    id v10 = a1[4];
    id v11 = a1[6];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 language]);
    [v10 announceTableInfo:v11 options:0 language:v12];
  }

  [a1[4] announceAdditionalTextualInformation:a1[6]];
  id v18 = (id)objc_claimAutoreleasedReturnValue([a1[4] hint]);
  if ([v18 length]) {
    id v13 = [a1[6] addString:v18];
  }
  id v14 = a1[6];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] application]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 label]);
  id v17 = [v14 addString:v16];

  [a1[6] setGeneratesBraille:1];
  [a1[6] setBrailleType:2];
  [a1[5] sendRequest:a1[6]];
}

void sub_10007C7A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 length]) {
    id v3 = [*(id *)(a1 + 32) addString:v4];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10007C874(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

LABEL_34:
      id v13 = v18;
      goto LABEL_18;
    }

    id v13 = 0LL;
    unsigned int v20 = v12 + 1;
    while (1)
    {
      id v21 = [v9 count];
      unsigned int v22 = v20 == v21 ? 0LL : (char *)v20;
      if (v20 == v21 && !v5) {
        break;
      }
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:v22]);
      id v16 = v23;
      if (v6) {
        uint64_t v24 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _elementToFocusWhenSwitchingToElementCommunity:]( self,  "_elementToFocusWhenSwitchingToElementCommunity:",  v23));
      }
      else {
        uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 firstElementInApplication]);
      }
      id v18 = (void *)v24;

      unsigned int v20 = v22 + 1;
      id v13 = v18;
      if (v22 + 1 == v12)
      {
LABEL_33:
        id v16 = 0LL;
        goto LABEL_34;
      }
    }
  }

LABEL_51:
      id v9 = 0LL;
      id v12 = 0LL;
      goto LABEL_77;
    case 27LL:
      uint64_t v29 = (id *)&kVOTEventCommandTouchCancel;
      goto LABEL_37;
    case 28LL:
      uint64_t v29 = (id *)&kVOTEventCommandStartStopToggle;
LABEL_37:
      id v12 = *v29;
      id v9 = 0LL;
      goto LABEL_38;
    case 29LL:
      id v13 = (id *)&kVOTEventCommandCopySpeechToClipboard;
      goto LABEL_70;
    case 30LL:
      CGRect v32 = (void *)objc_claimAutoreleasedReturnValue([v3 payload]);
      CGRect v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:@"argument"]);

      if ([v33 length])
      {
        id v12 = kVOTEventCommandAnnouncement;
        [v7 setObject:v33 forIndex:116];
      }

      else
      {
        id v12 = 0LL;
      }

      goto LABEL_75;
    case 31LL:
      int v34 = (void *)objc_claimAutoreleasedReturnValue([v3 payload]);
      id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:@"argument"]);
      CGRect v36 = [v35 BOOLValue];

      [(id)VOTSharedWorkspace setInPerformanceTestMode:v36];
      goto LABEL_53;
    case 32LL:
      [(id)VOTSharedWorkspace setInPerformanceTestMode:1];
      id v12 = kVOTEventCommandAnnouncement;
      [v7 setObject:@"A reasonably long piece of text to announce!" forIndex:116];
      if (!v12) {
        goto LABEL_76;
      }
      goto LABEL_71;
    case 33LL:
      unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v3 payload]);
      CGRect v33 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKey:@"argument"]);

      uint64_t v38 = [(id)VOTSharedWorkspace systemVisualizationState];
      uint64_t v39 = [v33 integerValue];
      [(id)VOTSharedWorkspace setSystemVisualizationState:v39];
      id v12 = 0LL;
      if (v39 == (id)3 && v38 != (id)3)
      {
        id v12 = kVOTEventCommandAnnouncement;
        uint64_t v40 = sub_10004A988(off_1001AC148, @"apple.care.starting.diagnostics", 0LL);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        [v7 setObject:v41 forIndex:116];
      }

id sub_10007D598(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

uint64_t sub_10007DE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isSystemApp] & 1) != 0
    || ([v3 isSpotlight] & 1) != 0)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    double v5 = *(void **)(*(void *)(a1 + 32) + 1632LL);
    double v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
    uint64_t v4 = [v5 containsObject:v6] ^ 1;
  }

  return v4;
}

BOOL sub_10007E148(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  return -[VOTElement isVisible](a2, "isVisible", a3, a4);
}

uint64_t sub_100080364(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 1512LL) = 0;
  return result;
}

void sub_100081284(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue([a2 outputActions]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  unsigned int v8 = [v7 isEqual:v5];

  if (v8)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v11 = VOTLogCommon(v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 activeKeyboard]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 activeKeyboard]);
      int v26 = 138412546;
      double v27 = *(double *)&v14;
      __int16 v28 = 1024;
      LODWORD(v29) = [v16 isKeyboardContinuousPathAvailable];
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Continuous path activation? %@ %d",  (uint8_t *)&v26,  0x12u);
    }

    *(_BYTE *)(*(void *)(a1 + 40) + 1674LL) = 1;
    [*(id *)(a1 + 40) continuousPathTimeout];
    double v18 = v17;
    double v19 = Current - *(double *)(a1 + 48);
    id v20 = [*(id *)(a1 + 40) continuousPathTimeout];
    if (v19 < v21)
    {
      id v20 = [*(id *)(a1 + 40) continuousPathTimeout];
      double v18 = v22 - (Current - *(double *)(a1 + 48));
    }

    uint64_t v23 = VOTLogCommon(v20);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 40) continuousPathTimeout];
      int v26 = 134218240;
      double v27 = v18;
      __int16 v28 = 2048;
      uint64_t v29 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Continuous path waiting for %f (user choice: %f)",  (uint8_t *)&v26,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 40) + 408) dispatchAfterDelay:*(void *)(a1 + 32) withObject:v18];
  }

id sub_1000814A8(uint64_t a1, void *a2)
{
  id result = [a2 finishedSuccessfully];
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      [*(id *)(a1 + 32) _alternativeKeyActivateTime];
      *(_BYTE *)(*(void *)(a1 + 32) + 1674LL) = 0;
      return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 408), "dispatchAfterDelay:withObject:", *(void *)(a1 + 40));
    }
  }

  return result;
}

id sub_1000814FC(uint64_t a1)
{
  uint64_t v2 = VOTLogElement(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_1000F2420();
  }

  return [*(id *)(a1 + 32) resetBannerTimer];
}

LABEL_29:
    -[VOTOutputRequest setCompletionDelegate:](self->_bookPageContentOutputRequest, "setCompletionDelegate:", 0LL);
    bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
    self->_bookPageContentOutputRequest = 0LL;
    goto LABEL_30;
  }

  if (self->_readAllOutputRequest == v4)
  {
    if (!self->_flags.isReadingAll)
    {
LABEL_35:
      -[VOTElementManager _resetReadAllRequest](self, "_resetReadAllRequest");
      goto LABEL_36;
    }

    if (-[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully"))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      unsigned int v8 = [v7 readingContentCausesPageTurn];

      if (v8)
      {
LABEL_19:
        -[VOTElementManager _handleBookPageFlipAndContinue](self, "_handleBookPageFlipAndContinue");
        goto LABEL_35;
      }

      id v16 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      double v17 = [v16 includeDuringContentReading];

      if (v17)
      {
        double v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        double v19 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:forward:]( self,  "_nearestElementWithMatch:startElement:forward:",  &stru_100178E80,  v18,  1LL));

        if (!v19) {
          goto LABEL_19;
        }
      }
    }

    -[VOTElementManager _handleReadAllNextElement](self, "_handleReadAllNextElement");
    goto LABEL_35;
  }

  if (self->_switchRoadsOutputRequest == v4)
  {
    if (-[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully")) {
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_switchRoadsAtIntersectionTimer, "dispatchAfterDelay:", 0.01);
    }
    -[VOTOutputRequest setCompletionDelegate:](self->_switchRoadsOutputRequest, "setCompletionDelegate:", 0LL);
    bookPageContentOutputRequest = self->_switchRoadsOutputRequest;
    self->_switchRoadsOutputRequest = 0LL;
    goto LABEL_30;
  }

  if (self->_endOfRoadApproachingRequest == v4)
  {
    -[VOTOutputRequest setCompletionDelegate:](v4, "setCompletionDelegate:", 0LL);
    bookPageContentOutputRequest = self->_endOfRoadApproachingRequest;
    self->_endOfRoadApproachingRequest = 0LL;
LABEL_30:

    goto LABEL_36;
  }

  if (self->_startTrackingRoadRequest == v4)
  {
    if (-[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully"))
    {
      *(_WORD *)&self->_playingMapSound = 256;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v10 playSoundFast:@"Sounds/RoadWalking.aiff"];

      uint64_t v11 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
      id v12 = sub_10004A988(off_1001AC148, @"map-interaction.switch.to.road", 0LL);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      -[VOTElementManager _addFormattedStringToRequest:formattedString:withElement:]( self,  "_addFormattedStringToRequest:formattedString:withElement:",  v11,  v13,  self->_currentElement);
      -[VOTElementManager sendRequest:](self, "sendRequest:", v11);
    }

    -[VOTOutputRequest setCompletionDelegate:](self->_startTrackingRoadRequest, "setCompletionDelegate:", 0LL);
    bookPageContentOutputRequest = self->_startTrackingRoadRequest;
    self->_startTrackingRoadRequest = 0LL;
    goto LABEL_30;
  }

  if (self->_announcementRequest == v4)
  {
    if (self->_announcementPid == -1)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
      double v21 = (void *)objc_claimAutoreleasedReturnValue([v20 focusedApplications]);

      __int16 v31 = 0u;
      CGRect v32 = 0u;
      uint64_t v29 = 0u;
      unsigned __int8 v30 = 0u;
      id v5 = v21;
      double v22 = [v5 countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)v30;
        do
        {
          for (i = 0LL; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v30 != v24) {
              objc_enumerationMutation(v5);
            }
            objc_msgSend( *(id *)(*((void *)&v29 + 1) + 8 * (void)i),  "notifyAnnouncementFinishedWithString:didFinishSuccessfully:",  self->_announcementOriginalString,  -[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully", (void)v29));
          }

          uint64_t v23 = [v5 countByEnumeratingWithState:&v29 objects:v33 count:16];
        }

        while (v23);
      }
    }

    else
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "applicationForPID:"));
      objc_msgSend( v5,  "notifyAnnouncementFinishedWithString:didFinishSuccessfully:",  self->_announcementOriginalString,  -[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully"));
    }

    -[VOTOutputRequest setCompletionDelegate:](self->_announcementRequest, "setCompletionDelegate:", 0LL);
    announcementRequest = self->_announcementRequest;
    self->_announcementRequest = 0LL;

    self->_announcementPid = -1;
    announcementOriginalString = self->_announcementOriginalString;
    self->_announcementOriginalString = 0LL;

    if (self->_readAllOutputRequest)
    {
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v28 resumeCurrentRequest];
    }
  }

    webSelectionText = 0LL;
LABEL_36:
    id v20 = @"element.unselected.text";
    goto LABEL_37;
  }

  double v22 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentApplicationMatchingBlock:]( self,  "_currentApplicationMatchingBlock:",  &stru_100178F68));
  unsigned int v8 = v22;
  if (v22)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v22 firstElementInApplicationForFocus]);
    webSelectionText = (NSString *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestWebElement:](self, "_nearestWebElement:", v9));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSString textMarkerRangeForSelection](webSelectionText, "textMarkerRangeForSelection"));
    -[VOTElementManager _outputWebLineWithMarkerRange:withElement:]( self,  "_outputWebLineWithMarkerRange:withElement:",  v23,  webSelectionText);

    goto LABEL_40;
  }
}

  double v27 = VOSLocString(@"VOSKey.control");
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  [v14 appendStringWithComma:v28];

  if ((v18 & 0x10) != 0) {
    goto LABEL_30;
  }
LABEL_16:
  if ((v18 & 0x40) == 0) {
    goto LABEL_33;
  }
LABEL_31:
  __int16 v31 = VOSLocString(@"VOSKey.fn");
  CGRect v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  [v14 appendStringWithComma:v32];

  if ([v15 isKeyboardSelectKey])
  {
    CGRect v33 = VOSLocString(@"VOSKey.keyboard_layout");
    int v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    [v14 appendStringWithComma:v34];
    id v20 = 0LL;
LABEL_43:

    id v35 = (__CFString *)v20;
    goto LABEL_44;
  }
}

$85E40A55691FE2F31975A98F57E3065D sub_100081BF8(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if (-[VOTElement isReadingContent](v3, "isReadingContent")) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = -[VOTElement includeDuringContentReading](v3, "includeDuringContentReading");
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

BOOL sub_10008276C(id a1, VOTElement *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  if (-[VOTElement isSafari](v4, "isSafari")) {
    unsigned __int8 v5 = 1;
  }
  else {
    unsigned __int8 v5 = -[VOTElement isGoogleChrome](v4, "isGoogleChrome");
  }

  return v5;
}

LABEL_185:
          if (-[VOTElementManager _shouldMoveToLastWebFormControl](self, "_shouldMoveToLastWebFormControl"))
          {
            v133 = v7;
            p_webFormControlBeforeInteraction = &self->_webFormControlBeforeInteraction;
            -[VOTElement updateLabel](self->_webFormControlBeforeInteraction, "updateLabel");
            -[VOTElement updateValue](self->_webFormControlBeforeInteraction, "updateValue");
            v134 = self->_webFormControlBeforeInteraction;

            v241 = VOTLogWebPageMovement(v240);
            v242 = (os_log_s *)objc_claimAutoreleasedReturnValue(v241);
            if (os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG)) {
              sub_1000F24AC();
            }

            v243 = *p_webFormControlBeforeInteraction;
            *p_webFormControlBeforeInteraction = 0LL;
LABEL_189:

            goto LABEL_211;
          }

          v244 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v54, "application"));
          v245 = [v244 isSafari];

          if (v245)
          {
            v247 = VOTLogWebPageMovement(v246);
            v248 = (os_log_s *)objc_claimAutoreleasedReturnValue(v247);
            if (os_log_type_enabled(v248, OS_LOG_TYPE_DEBUG))
            {
              v327 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
              v328 = self->_currentElement;
              *(_DWORD *)buf = 134218498;
              *(void *)v366 = v327;
              *(_WORD *)&v366[8] = 1024;
              *(_DWORD *)v367 = v337;
              *(_WORD *)&v367[4] = 2112;
              *(void *)&v367[6] = v328;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v248,  OS_LOG_TYPE_DEBUG,  "In safari, web generation: %lld\nstill valid: %d current: %@",  buf,  0x1Cu);
            }

            if (-[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark"))
            {
              v249 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s immediateRemoteParent](v54, "immediateRemoteParent"));
              v250 = (void *)objc_claimAutoreleasedReturnValue([v249 firstWebElement]);

              v343 = v54;
              if (v250)
              {
                v252 = v15;
                v253 = 0LL;
              }

              else
              {
                v280 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v54, "application"));
                v253 = (os_log_s *)objc_claimAutoreleasedReturnValue([v280 firstElementInApplication]);

                if (!v253)
                {
                  v282 = VOTLogWebPageMovement(v281);
                  v283 = (os_log_s *)objc_claimAutoreleasedReturnValue(v282);
                  if (os_log_type_enabled(v283, OS_LOG_TYPE_DEBUG)) {
                    sub_1000F2598();
                  }

                  v253 = v54;
                }

                v252 = v15;
                v251 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestWebElement:](self, "_nearestWebElement:", v253));
                v250 = (void *)v251;
              }

              v284 = VOTLogWebPageMovement(v251);
              v285 = (os_log_s *)objc_claimAutoreleasedReturnValue(v284);
              if (os_log_type_enabled(v285, OS_LOG_TYPE_DEBUG))
              {
                v329 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
                *(_DWORD *)buf = 134218498;
                *(void *)v366 = v329;
                *(_WORD *)&v366[8] = 2112;
                *(void *)v367 = v250;
                *(_WORD *)&v367[8] = 2112;
                *(void *)&v367[10] = v253;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v285,  OS_LOG_TYPE_DEBUG,  "Looking for webPageElement: %lld Nearest web element %@\n - starting with: %@",  buf,  0x20u);
              }

              if (!v250)
              {
                v287 = VOTLogWebPageMovement(v286);
                v288 = (os_log_s *)objc_claimAutoreleasedReturnValue(v287);
                uint64_t v15 = v252;
                if (os_log_type_enabled(v288, OS_LOG_TYPE_DEBUG)) {
                  sub_1000F256C();
                }

                unsigned __int8 v5 = v354;
                goto LABEL_106;
              }

              v133 = v7;
              v134 = v250;

              v243 = v134;
              goto LABEL_189;
            }

            if (v337
              || (v264 = CFAbsoluteTimeGetCurrent(),
                  -[VOTElementManager lastElementChangeTime](self, "lastElementChangeTime"),
                  v264 - v265 < 1.0))
            {
              v266 = -[VOTElement doesHaveTraits:](*p_currentElement, "doesHaveTraits:", kAXWebContentTrait);
              if (v266)
              {
                v267 = VOTLogWebPageMovement(v266);
                v268 = (os_log_s *)objc_claimAutoreleasedReturnValue(v267);
                if (os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG)) {
                  sub_1000F250C();
                }

                goto LABEL_292;
              }
            }
          }

          else if (-[VOTElement hasNativeFocus](*p_currentElement, "hasNativeFocus"))
          {
            v254 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](*p_currentElement, "application"));
            v255 = [v254 isVisible];

            if (v255)
            {
              v256 = &self->_currentElement;
              -[VOTElement updateIsVisible](*p_currentElement, "updateIsVisible");
              v257 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement immediateRemoteParent](*p_currentElement, "immediateRemoteParent"));
              [v257 updateIsVisible];

              if (-[VOTElement isVisible](*p_currentElement, "isVisible"))
              {
                v344 = (VOTElement *)v54;
                v258 = objc_claimAutoreleasedReturnValue(-[VOTElement immediateRemoteParent](*p_currentElement, "immediateRemoteParent"));
                if (!v258
                  || (v259 = (void *)v258,
                      v260 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement immediateRemoteParent](*p_currentElement, "immediateRemoteParent")),
                      v261 = [v260 isVisible],
                      v260,
                      v256 = &self->_currentElement,
                      v259,
                      v261))
                {
                  v133 = v7;
                  v262 = VOTLogWebPageMovement(v258);
                  v263 = (os_log_s *)objc_claimAutoreleasedReturnValue(v262);
                  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEBUG)) {
                    sub_1000F25F8();
                  }

                  v134 = *v256;
                  v243 = v344;
                  goto LABEL_189;
                }

                v133 = v7;
                v134 = v344;
LABEL_211:
                v269 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
                v270 = -[VOTElement isEqual:](v134, "isEqual:", v269);

                if ((v270 & 1) != 0)
                {
                  v272 = 1;
                  goto LABEL_234;
                }

                v273 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v134, "label"));
                v274 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
                v275 = (void *)objc_claimAutoreleasedReturnValue([v274 label]);
                if ([v273 isEqualToString:v275])
                {
                  v276 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
                  v277 = sub_10002425C(v134, v276);

                  if (v277)
                  {
                    v272 = 0;
                    uint64_t v56 = v339;
                    goto LABEL_234;
                  }

                  v278 = !v277;
                  v279 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v134, "application"));
                  v273 = (void *)objc_claimAutoreleasedReturnValue([v279 titleElements]);

                  if ([v273 count])
                  {
                    v274 = (id)objc_claimAutoreleasedReturnValue([v273 objectAtIndex:0]);
                  }

                  else
                  {
                    v274 = 0LL;
                  }

                  v289 = (void *)objc_claimAutoreleasedReturnValue([v274 label]);
                  v290 = [v289 isEqualToString:self->_lastTitleElemenTitle];

                  v272 = v290 & v278;
                  uint64_t v56 = v339;
                }

                else
                {

                  v272 = 0;
                }

LABEL_234:
                v291 = VOTLogLayoutChange(v271);
                v292 = (os_log_s *)objc_claimAutoreleasedReturnValue(v291);
                if (os_log_type_enabled(v292, OS_LOG_TYPE_DEBUG)) {
                  sub_1000F244C();
                }

                v130 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _firstResponderForApplications:]( self,  "_firstResponderForApplications:",  v19));
                v293 = [(id)VOTSharedWorkspace brailleInputActive];
                v294 = -[VOTElement traits](v130, "traits");
                if ((kAXIsEditingTrait & v294) != 0) {
                  v295 = v293;
                }
                else {
                  v295 = 0;
                }
                if (((v272 | v295) & 1) == 0) {
                  -[VOTElementManager deactivateGesturedTextInputIfNeeded:]( self,  "deactivateGesturedTextInputIfNeeded:",  0LL);
                }
                -[VOTElement scrollToElementForDirectional:withCompletion:]( v134,  "scrollToElementForDirectional:withCompletion:",  1LL,  0LL);
                -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v134);
                if ([v133 length]) {
                  v296 = [v355 addAttributedString:v133];
                }
                if ((v272 & 1) != 0)
                {
                  if (-[VOTElement isInAppSwitcher](v134, "isInAppSwitcher")) {
                    goto LABEL_253;
                  }
LABEL_251:
                  v54 = (os_log_s *)v134;
                  id v7 = v133;
                  uint64_t v15 = v352;
                  unsigned __int8 v5 = v354;
                  goto LABEL_275;
                }

                v297 = objc_claimAutoreleasedReturnValue(-[VOTElement label](v134, "label"));
                if (v297)
                {
                  v298 = (void *)v297;
                  v299 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v134, "label"));
                  if ([v350 containsObject:v299])
                  {
                    v300 = -[VOTElement isInAppSwitcher](v134, "isInAppSwitcher");

                    if ((v300 & 1) == 0) {
                      goto LABEL_251;
                    }
                  }

                  else
                  {
                  }
                }

LABEL_253:
                [v56 updateTitleElements];
                v54 = (os_log_s *)objc_claimAutoreleasedReturnValue([v56 titleElements]);
                if (-[os_log_s count](v54, "count"))
                {
                  v301 = (id)objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndex:](v54, "objectAtIndex:", 0LL));

                  if (v301 && ([v301 isEqual:v134] & 1) == 0)
                  {
                    v302 = (NSString *)objc_claimAutoreleasedReturnValue([v301 label]);
                    lastTitleElemenTitle = self->_lastTitleElemenTitle;
                    self->_lastTitleElemenTitle = v302;

                    -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v301,  v355,  128LL);
                  }
                }

                else
                {
                  v301 = 0LL;
                }

                if (self->_flags.watchDisplayDidTurnOn)
                {
                  v345 = v54;
                  v358 = 0u;
                  v359 = 0u;
                  v360 = 0u;
                  v361 = 0u;
                  v304 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _getAutoSpeakWatchFaceElements:]( self,  "_getAutoSpeakWatchFaceElements:",  v134));
                  v305 = [v304 countByEnumeratingWithState:&v358 objects:v364 count:16];
                  if (v305)
                  {
                    v306 = v305;
                    v307 = *(void *)v359;
                    do
                    {
                      for (i = 0LL; i != v306; i = (char *)i + 1)
                      {
                        if (*(void *)v359 != v307) {
                          objc_enumerationMutation(v304);
                        }
                        -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  *(void *)(*((void *)&v358 + 1) + 8LL * (void)i),  v355,  2LL);
                      }

                      v306 = [v304 countByEnumeratingWithState:&v358 objects:v364 count:16];
                    }

                    while (v306);
                  }

                  self->_flags.watchDisplayDidTurnOn = 0;
                  uint64_t v56 = v339;
                  v54 = v345;
                }

                else
                {
                  v309 = -[VOTElement traits](v134, "traits");
                  if (!v295 || ((kAXKeyboardKeyTrait | kAXAutoCorrectCandidateTrait) & v309) == 0)
                  {
                    if (-[VOTElementManager _shouldAnnounceCustomRotorHintForElement:]( self,  "_shouldAnnounceCustomRotorHintForElement:",  v134))
                    {
                      v310 = 0x200000822LL;
                    }

                    else
                    {
                      v310 = 2082LL;
                    }

                    -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v134,  v355,  v310);
                  }
                }

                uint64_t v15 = v352;
LABEL_274:

                v54 = (os_log_s *)v134;
                id v7 = v133;
                unsigned __int8 v5 = v354;
LABEL_275:

                v312 = VOTLogCommon(v311);
                v313 = (os_log_s *)objc_claimAutoreleasedReturnValue(v312);
                if (os_log_type_enabled(v313, OS_LOG_TYPE_INFO))
                {
                  v314 = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement);
                  v315 = (void *)objc_claimAutoreleasedReturnValue(v314);
                  *(_DWORD *)buf = 138412290;
                  *(void *)v366 = v315;
                  _os_log_impl( (void *)&_mh_execute_header,  v313,  OS_LOG_TYPE_INFO,  "Screen change should send? %@",  buf,  0xCu);
                }

                v316 = CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement;
                double v19 = v336;
                if (([v355 containsActions] & 1) != 0
                  || (v317 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement")),
                      v318 = -[os_log_s isEqual:](v54, "isEqual:", v317),
                      v317,
                      (v318 & 1) == 0))
                {
                  if (v316 >= 3.5) {
                    -[VOTElementManager sendRequest:](self, "sendRequest:", v355);
                  }
                }

                if (!v54) {
                  goto LABEL_286;
                }
                v319 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s label](v54, "label"));
                if ([v319 length])
                {
                }

                else
                {
                  v320 = -[os_log_s traits](v54, "traits");

                  if (!v320) {
                    goto LABEL_286;
                  }
                }

                v356[0] = _NSConcreteStackBlock;
                v356[1] = 3221225472LL;
                v356[2] = sub_1000847B8;
                v356[3] = &unk_100176DA8;
                v356[4] = self;
                v357 = v54;
                AXPerformBlockOnMainThreadAfterDelay(v356, v321, 0.0);

LABEL_286:
                -[NSMutableString setString:](self->_elementTypingBuffer, "setString:", &stru_10017A920);
                -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  0x7FFFFFFFLL,  0LL,  0LL);
                -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v54);
                -[VOTElementFetcher setTriggerSignpostCollection:]( self->_fetchManager,  "setTriggerSignpostCollection:",  1LL);
                -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
                fetchManager = self->_fetchManager;
                v323 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
                -[VOTElementFetcher updateCacheWithElement:](fetchManager, "updateCacheWithElement:", v323);

                lastValidElement = self->_lastValidElement;
                self->_lastValidElement = 0LL;

                if (-[VOTElementManager _isElementValidForFirstResponder:]( self,  "_isElementValidForFirstResponder:",  v54)
                  && -[os_log_s doesHaveTraits:](v54, "doesHaveTraits:", kAXTextEntryTrait))
                {
                  -[VOTElementManager _disableQuickNavStateTemporarily](self, "_disableQuickNavStateTemporarily");
                }

                self->_flags.focusIsOnElement = 1;
                byte_1001ACF20 = 0;
                v325 = VOTLogElement(-[VOTElementManager _resetDirectInteractionCache](self, "_resetDirectInteractionCache"));
                v326 = (os_log_s *)objc_claimAutoreleasedReturnValue(v325);
                if (os_signpost_enabled(v326))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v326,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "EndAppUpdate",  "",  buf,  2u);
                }

                goto LABEL_292;
              }
            }
          }

          v133 = v7;
          v134 = (VOTElement *)v54;
          goto LABEL_211;
        }

        v183 = v7;
        v184 = VOTLogWebPageMovement(v181);
        v185 = (os_log_s *)objc_claimAutoreleasedReturnValue(v184);
        if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2718();
        }

        v186 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement application](*p_elementBeforePopup, "application"));
        v187 = (void *)objc_claimAutoreleasedReturnValue([v186 uiElement]);
        v188 = [v187 pid];
        v189 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](*p_elementBeforePopup, "uiElement"));
        v190 = [v189 pid];

        v191 = v186;
        if (v188 != v190)
        {
          v192 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](*p_elementBeforePopup, "uiElement"));
          v193 = (const void *)AXUICreateApplicationElementForElement([v192 axElement]);

          v191 = v186;
          if (v193)
          {
            v194 = (void *)objc_claimAutoreleasedReturnValue( +[AXUIElement uiElementWithAXElement:]( &OBJC_CLASS___AXUIElement,  "uiElementWithAXElement:",  v193));
            v195 = objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v194));

            CFRelease(v193);
            v191 = (id)v195;
          }
        }

        v348 = v191;
        v196 = -[VOTElement isValidForApplication:](*p_elementBeforePopup, "isValidForApplication:", v191);
        v197 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
        -[VOTElement centerPoint](*p_elementBeforePopup, "centerPoint");
        objc_msgSend( v197,  "convertPoint:fromContextId:",  -[VOTElement windowContextId](*p_elementBeforePopup, "windowContextId"),  v198,  v199);
        v201 = v200;
        v203 = v202;

        v204 = -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", v201, v203);
        if ([v19 containsObject:v186])
        {
          id v7 = v183;
          v205 = v343;
          if (!v196)
          {
LABEL_158:
            v182 = 0;
            v206 = v205;
            unsigned __int8 v5 = v354;
LABEL_175:

            v54 = v206;
            uint64_t v15 = v352;
            uint64_t v56 = v339;
            goto LABEL_176;
          }
        }

        else
        {
          id v7 = v183;
          v205 = v343;
          if ((-[VOTElement isChronod](*p_elementBeforePopup, "isChronod") & v196 & 1) == 0) {
            goto LABEL_158;
          }
        }

        -[VOTElement frame](v204, "frame");
        v219 = v218;
        v221 = v220;
        v223 = v222;
        v225 = v224;
        -[VOTElement frame](*p_elementBeforePopup, "frame");
        v373.origin.double x = v226;
        v373.origin.double y = v227;
        v373.size.width = v228;
        v373.size.height = v229;
        v370.origin.double x = v219;
        v370.origin.double y = v221;
        v370.size.width = v223;
        v370.size.height = v225;
        v371 = CGRectIntersection(v370, v373);
        unsigned __int8 v5 = v354;
        if (v371.size.width <= 0.0)
        {
          v182 = 0;
          v206 = v205;
        }

        else
        {
          v206 = v204;

          v231 = VOTLogLayoutChange(v230);
          v232 = (os_log_s *)objc_claimAutoreleasedReturnValue(v231);
          if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG)) {
            sub_1000F26B8();
          }

          v233 = *p_elementBeforePopup;
          *p_elementBeforePopup = 0LL;

          v182 = 1;
        }

        goto LABEL_175;
      }

      v333 = v7;
      v78 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager previousTableOrCollectionViewList](self, "previousTableOrCollectionViewList"));
      v79 = [v78 count];

      if ((uint64_t)(v79 - 1) < 0)
      {
        v75 = 0LL;
        v80 = 0LL;
        id v7 = v333;
LABEL_75:
        v95 = [v15 isEqual:v75];
        if (!(_DWORD)v95) {
          goto LABEL_79;
        }
        v96 = VOTLogLayoutChange(v95);
        v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_INFO,  "Not restoring focus to previous table cell because the previous table cell element is the same as the elemen t we are currently focused on.",  buf,  2u);
        }
      }

      else
      {
        v342 = v54;
        v335 = v19;
        v353 = v5;
        v332 = v4;
        v80 = 0LL;
        while (1)
        {
          v81 = v80;
          v82 = (uint64_t)(v79 - 1);
          v83 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewList]( self,  "previousTableOrCollectionViewList"));
          v84 = (void *)objc_claimAutoreleasedReturnValue([v83 objectAtIndexedSubscript:v79 - 1]);

          v85 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewToMetadata]( self,  "previousTableOrCollectionViewToMetadata"));
          v86 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKey:v84]);
          v87 = [v86 indexPath];
          v89 = v88;

          v90 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewToMetadata]( self,  "previousTableOrCollectionViewToMetadata"));
          v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKey:v84]);
          v80 = (void *)objc_claimAutoreleasedReturnValue([v91 label]);

          if (v87 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            v92 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewApplication]( self,  "previousTableOrCollectionViewApplication"));
            v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "cellWithRowIndexPath:parentView:", v87, v89, v84));

            if (v75) {
              break;
            }
          }

          --v79;
          if (v82 <= 0)
          {
            v75 = 0LL;
            uint64_t v4 = v332;
            id v7 = v333;
            uint64_t v15 = v352;
            unsigned __int8 v5 = v353;
            goto LABEL_73;
          }
        }

        v93 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewList]( self,  "previousTableOrCollectionViewList"));
        v94 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewList]( self,  "previousTableOrCollectionViewList"));
        objc_msgSend(v93, "removeObjectsInRange:", v79, (_BYTE *)objc_msgSend(v94, "count") - v79);

        uint64_t v15 = v352;
        if ([v352 isEqual:v75])
        {
          uint64_t v4 = v332;
          id v7 = v333;
          unsigned __int8 v5 = v353;
LABEL_73:
          double v19 = v335;
LABEL_74:
          v54 = v342;
          goto LABEL_75;
        }

        v207 = (void *)objc_claimAutoreleasedReturnValue([v75 application]);
        v208 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v342, "application"));
        v209 = [v207 isEqual:v208];

        uint64_t v4 = v332;
        id v7 = v333;
        unsigned __int8 v5 = v353;
        double v19 = v335;
        if (!v209)
        {
          uint64_t v15 = v352;
          goto LABEL_74;
        }

        v210 = (os_log_s *)objc_claimAutoreleasedReturnValue([v75 label]);
        v211 = +[_PASLevenshtein distanceBetweenStrings:and:]( &OBJC_CLASS____PASLevenshtein,  "distanceBetweenStrings:and:",  v80,  v210);
        v212 = [v80 length];
        v331 = v210;
        v213 = -[os_log_s length](v210, "length");
        if (v212 <= v213) {
          v214 = (unint64_t)v213;
        }
        else {
          v214 = (unint64_t)v212;
        }
        if (v214 && ((double)v214 - (double)(unint64_t)v211) / (double)v214 <= 0.8)
        {
          v330 = VOTLogLayoutChange(v213);
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue(v330);
          v54 = v342;
          if (os_log_type_enabled(v217, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v217,  OS_LOG_TYPE_INFO,  "Not restoring focus to previous table cell because the previous table cell element has a different label f rom its current counterpart - table view may have changed out from under us.",  buf,  2u);
          }
        }

        else
        {
          v54 = v75;

          v216 = VOTLogLayoutChange(v215);
          v217 = (os_log_s *)objc_claimAutoreleasedReturnValue(v216);
          if (os_log_type_enabled(v217, OS_LOG_TYPE_DEBUG)) {
            sub_1000F2A70();
          }
        }

        uint64_t v15 = v352;
        v97 = v331;
      }

LABEL_79:
      goto LABEL_80;
    }

    v54 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _firstElementWithCurrentElement:focusedApplications:]( self,  "_firstElementWithCurrentElement:focusedApplications:",  v352,  v19));

    unsigned __int8 v5 = 0LL;
    id v60 = 1;
    goto LABEL_49;
  }

LABEL_294:
}

void sub_1000847A8(id a1)
{
}

id sub_1000847B8(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

LABEL_50:
        v194 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s opaqueParent](v11, "opaqueParent"));
        if ([v13 isValid])
        {
          uint64_t v52 = v13;
          goto LABEL_98;
        }

        if (-[os_log_s doesHaveTraits:](v11, "doesHaveTraits:", kAXMenuItemTrait)
          && (p_firstResponderElement = &self->_firstResponderElement,
              firstResponderElement = self->_firstResponderElement,
              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](firstResponderElement, "application")),
              LODWORD(firstResponderElement) = -[VOTElement isValidForApplication:]( firstResponderElement,  "isValidForApplication:",  v55),  v55,  (_DWORD)firstResponderElement))
        {
          if (!-[VOTElement isAccessibleElement](*p_firstResponderElement, "isAccessibleElement")) {
            goto LABEL_103;
          }
          uint64_t v52 = *p_firstResponderElement;
          uint64_t v56 = VOTLogLayoutChange(v52);
          char v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
            sub_1000F3094();
          }
        }

        else if (-[VOTElementManager _isElementValidForFirstResponder:](self, "_isElementValidForFirstResponder:", v11) {
               && -[os_log_s isAlive](v11, "isAlive")
        }
               && (v32 != CGPointZero.x || v34 != CGPointZero.y)
               && (currentApplications = self->_currentApplications,
                   v59 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application")),
                   LODWORD(currentApplications) = -[NSArray containsObject:]( currentApplications,  "containsObject:",  v59),  v59,  (_DWORD)currentApplications))
        {
          uint64_t v52 = v11;
          id v60 = VOTLogLayoutChange(v52);
          char v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
            sub_1000F3310();
          }
        }

        else if (v194 {
               && ((v61 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s remoteParent](v11, "remoteParent"))) == 0LL
        }
                || (v62 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localOpaqueParent](v11, "localOpaqueParent")),
                    __int16 v63 = [v194 isEqual:v62],
                    v62,
                    v61,
                    v63)))
        {
          id v64 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s opaqueParent](v11, "opaqueParent"));
          uint64_t v52 = (VOTElement *)objc_claimAutoreleasedReturnValue([v64 currentOpaqueElement]);

          uint64_t v66 = VOTLogLayoutChange(v65);
          char v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
            sub_1000F32B0();
          }
        }

        else if (-[os_log_s doesHaveTraits:](v11, "doesHaveTraits:", v196) {
               && ((v67 = -[os_log_s isAlive](v11, "isAlive"), v28 != 0.0) ? (v68 = v67) : (v68 = 0),
        }
                   v68 == 1 && v30 != 0.0))
        {
          uint64_t v52 = v11;
          v69 = VOTLogLayoutChange(v52);
          char v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
            sub_1000F30F4(v52);
          }
        }

        else
        {
          if (-[os_log_s verifyElementExists:](v11, "verifyElementExists:", 0LL))
          {
            v70 = v11;
          }

          else
          {
            v71 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
            objc_msgSend( v71,  "convertPoint:fromContextId:",  -[os_log_s windowContextId](v11, "windowContextId"),  v32,  v34);
            v73 = v72;
            v75 = v74;

            v76 = objc_allocWithZone((Class)&OBJC_CLASS___VOTElement);
            v77 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application"));
            v70 = (os_log_s *)objc_msgSend( v76,  "initWithPosition:application:contextId:",  v77,  -[os_log_s windowContextId](v11, "windowContextId"),  v73,  v75);

            if (!v70)
            {
              v78 = (os_log_s *)objc_msgSend( objc_allocWithZone((Class)VOTElement),  "initWithPosition:",  v73,  v75);
              v70 = v78;
            }

            v79 = VOTLogLayoutChange(v78);
            v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG)) {
              sub_1000F3214(v73, v75, (uint64_t)v70, v80);
            }
          }

          if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups]
            && -[VOTElement isAccessibleGroup](self->_currentElement, "isAccessibleGroup")
            && -[VOTElement elementIsDescendant:](self->_currentElement, "elementIsDescendant:", v70))
          {
            uint64_t v52 = self->_currentElement;

            goto LABEL_98;
          }

          if ((-[os_log_s updateVisiblePoint](v11, "updateVisiblePoint"),
                -[os_log_s visiblePoint](v11, "visiblePoint"),
                v83 = v81,
                v84 = v82,
                v81 == CGPointZero.x)
            && v82 == CGPointZero.y
            || v81 == -1.0 && v82 == -1.0)
          {
LABEL_97:
            uint64_t v52 = (VOTElement *)v70;
            goto LABEL_98;
          }

          v176 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend( v176,  "convertPoint:fromContextId:",  -[os_log_s windowContextId](v11, "windowContextId"),  v83,  v84);
          v178 = v177;
          v180 = v179;

          uint64_t v52 = (VOTElement *)objc_msgSend( objc_allocWithZone((Class)VOTElement),  "initWithPosition:",  v178,  v180);
          v182 = VOTLogLayoutChange(v181);
          char v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v182);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG)) {
            sub_1000F3178(v178, v180, (uint64_t)v52, v57);
          }
        }

LABEL_98:
        if (v52)
        {
          if (!-[VOTElement isTouchContainer](v52, "isTouchContainer")
            || [(id)VOTSharedWorkspace navigationStyleHonorsGroups]
            && -[VOTElement isAccessibleGroup](v52, "isAccessibleGroup"))
          {
            v85 = v52;
            goto LABEL_114;
          }

          v85 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElement firstContainedElement](v52, "firstContainedElement"));

          v92 = VOTLogLayoutChange(v91);
          v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG)) {
            sub_1000F3034();
          }
          goto LABEL_113;
        }
  }
}

            -[VOTBrailleManager _refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:]( self,  "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:",  1LL,  0LL,  0LL);
LABEL_51:
            unsigned int v37 = 0LL;
            goto LABEL_54;
          }

          if (-[VOTElement isLiveCaptionsTextView](self->_brailleElement, "isLiveCaptionsTextView"))
          {
            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement previousElement](self->_brailleElement, "previousElement"));
            uint64_t v39 = [v38 isLiveCaptionsTextView];

            if (!v39) {
              goto LABEL_51;
            }
          }

          if (-[VOTBrailleManager _brailleShouldTryToTurnPage:direction:]( self,  "_brailleShouldTryToTurnPage:direction:",  self->_brailleElement,  2LL))
          {
            CGRect v33 = (void *)kVOTEventCommandScrollLeftPage;
            goto LABEL_45;
          }

          int v42 = (id *)&kVOTEventCommandPreviousElement;
        }

        unsigned int v37 = *v42;
LABEL_54:
        if (v37 == (id)kVOTEventCommandScrollLeftPage || v37 == (id)kVOTEventCommandScrollRightPage)
        {
          -[VOTBrailleManager setPanEnabled:](self, "setPanEnabled:", 0LL);
          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472LL;
          v45[2] = sub_1000C1BD8;
          v45[3] = &unk_100176D38;
          v45[4] = self;
          AXPerformBlockOnMainThreadAfterDelay(v45, v43, 0.5);
        }

        if (v37)
        {
          int v44 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent brailleEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "brailleEventWithCommand:info:",  v37,  0LL));
          [v44 setObject:&__kCFBooleanTrue forIndex:119];
          [(id)VOTSharedWorkspace dispatchCommand:v44];
        }

        break;
      case 1u:
      case 3u:
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        double v22 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
        [v23 sendEvent:v22];
        goto LABEL_10;
      case 2u:
        uint64_t v24 = [v13 intValue];
        brailleClient = self->_brailleClient;
        if (v24) {
          -[SCROBrailleClient showNextAnnouncement](brailleClient, "showNextAnnouncement");
        }
        else {
          -[SCROBrailleClient showPreviousAnnouncement](brailleClient, "showPreviousAnnouncement");
        }
        break;
      default:
        break;
    }
  }

LABEL_103:
        v85 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _sonarElementInForwardDirection:limit:]( self,  "_sonarElementInForwardDirection:limit:",  0LL,  20LL));
        v86 = VOTLogLayoutChange(v85);
        v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2FD4();
        }

        if (v85)
        {
LABEL_114:
          if (-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", kAXStatusBarElementTrait)
            && !-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", kAXAllowsLayoutChangeInStatusBarTrait))
          {

            v94 = VOTLogLayoutChange(v93);
            v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG)) {
              sub_1000F2F48();
            }

            v85 = 0LL;
          }

          if (-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", v196))
          {
            v96 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v85, "application"));
            v97 = (void *)objc_claimAutoreleasedReturnValue([v96 firstResponderElement]);

            if ([v97 doesHaveAllTraits:v17]
              && (-[os_log_s doesHaveTraits:](v11, "doesHaveTraits:", kAXKeyboardKeyTrait) & 1) == 0
              && (self->_lastActivationTime > self->_lastElementChangeTime || v13))
            {
              v98 = v97;

              v85 = v98;
            }
          }

          if (-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", kAXAutoCorrectCandidateTrait))
          {
            v99 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement firstVisibleElementInList](v85, "firstVisibleElementInList"));
            v100 = v99;
            if (v99)
            {
              v101 = v99;

              v85 = v101;
            }
          }

          if (-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", kAXLaunchIconTrait)
            && CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch > 1.0)
          {
            v102 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _cachedLaunchIcon:](self, "_cachedLaunchIcon:", v85));
            v103 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemVoiceOver sharedInstance]( &OBJC_CLASS___AXSubsystemVoiceOver,  "sharedInstance"));
            v104 = [v103 ignoreLogging];

            if ((v104 & 1) == 0)
            {
              v105 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
              v106 = AXLoggerForFacility(v105);
              v107 = (void *)objc_claimAutoreleasedReturnValue(v106);

              v108 = AXOSLogLevelFromAXLogLevel(3LL);
              if (os_log_type_enabled((os_log_t)v107, v108))
              {
                v109 = AXColorizeFormatLog(3LL, @"replacement icon: %{public}@");
                v192 = (void *)objc_claimAutoreleasedReturnValue(v109);
                v188 = v102;
                v110 = _AXStringForArgs(v192);
                v190 = (void *)objc_claimAutoreleasedReturnValue(v110);
                v111 = v107;
                if (os_log_type_enabled(v111, v108))
                {
                  LODWORD(buf) = 138543362;
                  *(void *)((char *)&buf + 4) = v190;
                  _os_log_impl((void *)&_mh_execute_header, v111, v108, "%{public}@", (uint8_t *)&buf, 0xCu);
                }
              }
            }

            if (v102)
            {
              v112 = v102;

              v85 = v112;
            }
          }

          v113 = kAXKeyboardKeyTrait;
          if (-[os_log_s doesHaveTraits:](v11, "doesHaveTraits:", kAXKeyboardKeyTrait, v188)
            && -[os_log_s isInternationalKeyboardKey](v11, "isInternationalKeyboardKey")
            && !-[VOTElement isInternationalKeyboardKey](v85, "isInternationalKeyboardKey"))
          {
            v114 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_100178EE0,  v85));
            v115 = v114;
            if (v114)
            {
              v116 = v114;

              v85 = v116;
            }
          }

          if (-[VOTElement isBannerNotification](v85, "isBannerNotification"))
          {
            v117 = -[os_log_s isBannerNotification](v11, "isBannerNotification");
            if ((v117 & 1) == 0)
            {
              v118 = VOTLogElement(v117);
              v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
              if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG)) {
                sub_1000F2F1C();
              }

              v85 = 0LL;
            }
          }

          v193 = [(id)VOTSharedWorkspace fingerCount];
          if (!v85 || !v3)
          {
            double v22 = (os_log_s *)v85;
LABEL_207:
            v154 = v196;
            if (v22)
            {
              if (!v193)
              {
                if ((-[os_log_s isSiriTalkingOrListening](v22, "isSiriTalkingOrListening", v196) & 1) == 0)
                {
                  -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v22);

                  -[os_log_s updateFrame](v22, "updateFrame");
                  -[os_log_s updateCenterPoint](v22, "updateCenterPoint");
                  -[os_log_s updateTraits](v22, "updateTraits");
                  -[os_log_s updateEquivalenceTag](v22, "updateEquivalenceTag");
                  NSUInteger location = self->_highlightedCharacterRange.location;
                  if (location == 0x7FFFFFFF) {
                    goto LABEL_212;
                  }
                  -[os_log_s boundsForRange:](v22, "boundsForRange:", location, self->_highlightedCharacterRange.length);
                  v156 = v211.origin.x;
                  v157 = v211.origin.y;
                  width = v211.size.width;
                  height = v211.size.height;
                  v212.origin.double x = CGRectZero.origin.x;
                  v212.origin.double y = CGRectZero.origin.y;
                  v212.size.width = CGRectZero.size.width;
                  v212.size.height = CGRectZero.size.height;
                  if (CGRectEqualToRect(v211, v212))
                  {
LABEL_212:
                    v160 = (void *)objc_claimAutoreleasedReturnValue( +[VOTDisplayManager displayManager]( &OBJC_CLASS___VOTDisplayManager,  "displayManager"));
                    [v160 setCursorFrameForElement:v22];
                  }

                  else
                  {
                    v165 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
                    objc_msgSend( v165,  "convertRect:fromContextId:",  -[os_log_s windowContextId](v22, "windowContextId"),  v156,  v157,  width,  height);
                    v167 = v166;
                    v169 = v168;
                    v171 = v170;
                    v173 = v172;

                    v160 = (void *)objc_claimAutoreleasedReturnValue( +[VOTDisplayManager displayManager]( &OBJC_CLASS___VOTDisplayManager,  "displayManager"));
                    objc_msgSend(v160, "setCursorFrame:", v167, v169, v171, v173);
                  }

                  uint64_t v11 = 0LL;
                }

                v154 = v196;
              }

              if ((-[os_log_s doesHaveTraits:](v22, "doesHaveTraits:", v154) & 1) == 0)
              {
                -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
                -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v22);
              }
            }

            else
            {
              v161 = (void *)objc_claimAutoreleasedReturnValue( +[VOTDisplayManager displayManager]( &OBJC_CLASS___VOTDisplayManager,  "displayManager",  v196));
              [v161 setCursorFrameForElement:0];

              -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", 0LL);
            }

            v174 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
            v175 = [v174 doesHaveTraits:kAXAllowsDirectInteractionTrait];

            if ((v175 & 1) == 0) {
              -[VOTElementManager _resetDirectInteractionCache](self, "_resetDirectInteractionCache");
            }
            -[VOTElementManager setLastLayoutChangeNotificationTime:]( self,  "setLastLayoutChangeNotificationTime:",  CFAbsoluteTimeGetCurrent());
            -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");

            goto LABEL_225;
          }

          v189 = -[os_log_s isEqual:](v11, "isEqual:", v85);
          v120 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application"));
          v121 = [v120 isSpringBoard];
          if (v11) {
            v122 = v121;
          }
          else {
            v122 = 1;
          }
          if (v122 == 1)
          {
            v123 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
            v191 = [v123 isSystemLocked];
          }

          else
          {
            v191 = 0;
          }

          v124 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s equivalenceTag](v11, "equivalenceTag"));
          v125 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement equivalenceTag](v85, "equivalenceTag"));
          v126 = [v124 isEqualToString:v125];
          if ((v126 & v191) == 1)
          {
            v127 = -[os_log_s isAwayAlertItem](v11, "isAwayAlertItem");

            if (((v127 ^ 1 | v189) & 1) == 0) {
              goto LABEL_163;
            }
          }

          else
          {

            if (!v126)
            {
LABEL_163:
              if (v189) {
                v128 = -[os_log_s doesHaveTraits:](v11, "doesHaveTraits:", kAXUpdatesFrequentlyTrait) ^ 1 | v191;
              }
              else {
                v128 = 1;
              }
LABEL_168:
              *(void *)&buf = 0LL;
              *((void *)&buf + 1) = &buf;
              v207 = 0x3032000000LL;
              v208 = sub_10005EA98;
              v209 = sub_10005EAA8;
              v210 = 0LL;
              if (!v128)
              {
                double v22 = (os_log_s *)v85;
LABEL_206:
                _Block_object_dispose(&buf, 8);

                goto LABEL_207;
              }

              if (!v13)
              {
                v130 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement opaqueParent](v85, "opaqueParent"));
                v131 = v130 == 0LL;

                if (v131)
                {
                  -[os_log_s frame](v11, "frame");
                  v199[0] = _NSConcreteStackBlock;
                  v199[1] = 3221225472LL;
                  v199[2] = sub_100086550;
                  v199[3] = &unk_100178F08;
                  v202 = v132;
                  v203 = v133;
                  v204 = v134;
                  v205 = v135;
                  v200 = v11;
                  p_buf = &buf;
                  v136 = objc_retainBlock(v199);
                  v137 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement elementsInDirection:withCount:]( v85,  "elementsInDirection:withCount:",  2LL,  10LL));
                  [v137 enumerateObjectsUsingBlock:v136];
                  if (!*(void *)(*((void *)&buf + 1) + 40LL))
                  {
                    v138 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement elementsInDirection:withCount:]( v85,  "elementsInDirection:withCount:",  1LL,  10LL));
                    [v138 enumerateObjectsUsingBlock:v136];
                  }
                }
              }

              double Current = CFAbsoluteTimeGetCurrent();
              v140 = (void *)objc_claimAutoreleasedReturnValue([v13 bundleIdentifier]);
              if ([v140 isEqualToString:AXInCallServiceName])
              {
                v141 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
                v142 = [v141 currentCallState] == 1;
              }

              else
              {
                v142 = 0;
              }

              v143 = -[VOTElementManager _shouldNotSpeakForIncomingCall](self, "_shouldNotSpeakForIncomingCall");
              if (Current - self->_lastLiveRegionUpdate > 1.0
                && Current - self->_lastPressOnMediaSessionElement > 3.5
                && !v193)
              {
                v144 = v143;
                v145 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
                if (([v145 isSiriTalkingOrListening] | v142 | v144))
                {
                }

                else
                {
                  v162 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
                  if ([v162 isSystemLocked])
                  {
                    v163 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElement systemAppApplication]( &OBJC_CLASS___VOTElement,  "systemAppApplication"));
                    v164 = [v163 isAlarmRinging];

                    v198 = v164 ^ 1;
                    if ((v164 & 1) != 0) {
                      goto LABEL_184;
                    }
                  }

                  else
                  {

                    v198 = 1;
                  }

                  if (!-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", v113)) {
                    goto LABEL_247;
                  }
                  if (-[VOTElement doesHaveTraits:]( self->_firstResponderElement,  "doesHaveTraits:",  kAXSecureTextFieldTrait)
                    || Current + -0.75 - self->_lastValueChangeTime < 0.5
                    || Current - self->_lastSelectionChangeTime < 1.0)
                  {
                    v198 = 0;
                  }

                  v183 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s label](v11, "label"));
                  v184 = (void *)objc_claimAutoreleasedReturnValue([v183 lowercaseString]);
                  v185 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v85, "label"));
                  v186 = (void *)objc_claimAutoreleasedReturnValue([v185 lowercaseString]);
                  v187 = [v184 isEqualToString:v186];

                  if (!v187)
                  {
LABEL_247:
                    if (!v198
                      || Current - self->_lastValueChangeTime >= 1.5 && Current - self->_lastSelectionChangeTime >= 1.5
                      || !-[VOTElement doesHaveTraits:](v85, "doesHaveTraits:", v195))
                    {
                      goto LABEL_184;
                    }
                  }
                }
              }

              v198 = 0;
LABEL_184:
              v146 = [objc_allocWithZone((Class)VOTOutputRequest) init];
              v147 = *(void **)(*((void *)&buf + 1) + 40LL);
              if (v147)
              {
                double v22 = v147;
              }

              else
              {
                if (-[VOTElementManager _shouldIncludeContainerInDescriptionForCurrentElement:previousElement:]( self,  "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:",  v85,  v11))
                {
                  v148 = 34LL;
                }

                else
                {
                  v148 = 2LL;
                }

                -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v85,  v146,  v148);
                if ((v189 & 1) != 0
                  || -[os_log_s rowRange](v11, "rowRange") != (id)0x7FFFFFFF
                  && -[VOTElement rowRange](v85, "rowRange") != (id)0x7FFFFFFF
                  || (systemNotificationInProgress = self->_systemNotificationInProgress))
                {
                  [v146 setDoesNotInterrupt:1];
                  systemNotificationInProgress = self->_systemNotificationInProgress;
                }

                if (systemNotificationInProgress) {
                  v150 = 0;
                }
                else {
                  v150 = v191;
                }
                if (v150 == 1
                  && (v151 = CFAbsoluteTimeGetCurrent(),
                      [(id)VOTSharedWorkspace screenOnTime],
                      v151 - v152 < 2.0))
                {
                  v197 = v85;
                  -[VOTElementManager _handleSystemLockedOutputBehavior:shouldSendRequest:startElement:]( self,  "_handleSystemLockedOutputBehavior:shouldSendRequest:startElement:",  v146,  &v198,  &v197);
                  double v22 = v197;

                  if (v198 && -[os_log_s isAwayAlertItem](v22, "isAwayAlertItem"))
                  {
                    self->_lastLockScreenAlertSpokenTime = CFAbsoluteTimeGetCurrent();
                    [v146 setCannotBeInterrupted:1];
                  }
                }

                else
                {
                  double v22 = (os_log_s *)v85;
                }

                [v146 setGeneratesBraille:0];
                v153 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
                [v153 setBrailleElement:v22 resetBrailleCursor:0 rotorSelection:0];

                if (v198) {
                  -[VOTElementManager sendRequest:](self, "sendRequest:", v146);
                }
              }

              goto LABEL_206;
            }
          }

          v129 = -[os_log_s traits](v11, "traits");
          v128 = v129 != (id)-[VOTElement traits](v85, "traits");
          goto LABEL_168;
        }

        v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application"));
        if (!v88) {
          v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
        }
        v85 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[os_log_s firstElementInApplication](v88, "firstElementInApplication"));
        v89 = VOTLogLayoutChange(v85);
        v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2F74();
        }

LABEL_113:
        goto LABEL_114;
      }
    }

    double x = CGPointZero.x;
    double y = CGPointZero.y;
    if (v34 != y) {
      goto LABEL_50;
    }
    goto LABEL_36;
  }

void sub_1000864B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

$85E40A55691FE2F31975A98F57E3065D sub_1000864FC(id a1, VOTElement *a2, VOTElement *a3)
{
  id v3 = a2;
  if (-[VOTElement doesHaveTraits:](v3, "doesHaveTraits:", kAXKeyboardKeyTrait)) {
    BOOL v4 = -[VOTElement isInternationalKeyboardKey](v3, "isInternationalKeyboardKey");
  }
  else {
    BOOL v4 = 0LL;
  }

  BOOL v5 = v4;
  int64_t v6 = 0LL;
  result.var1 = v6;
  result.var0 = v5;
  return result;
}

void sub_100086550(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v14 = a2;
  [v14 frame];
  v16.origin.double x = v7;
  v16.origin.double y = v8;
  v16.size.width = v9;
  v16.size.height = v10;
  CGRect v15 = CGRectIntersection(*(CGRect *)(a1 + 48), v16);
  if (v15.size.width >= *(double *)(a1 + 64) * 0.5 && v15.size.height >= *(double *)(a1 + 72) * 0.5)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v14 equivalenceTag]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) equivalenceTag]);
    unsigned int v13 = [v11 isEqualToString:v12];

    if (v13)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      *a4 = 1;
    }
  }
}

void sub_100086DE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 2016LL));
  [WeakRetained directInteractionElementsUpdated:*(void *)(a1 + 40)];
}

id sub_100087C24(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  *(void *)(a1 + 32),  1,  *(void *)(a1 + 40),  0);
}

LABEL_52:
}

LABEL_27:
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v6);
    fetchManager = self->_fetchManager;
    CGRect v36 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    -[VOTElementFetcher updateCacheWithElement:](fetchManager, "updateCacheWithElement:", v36);

    if (!-[VOTElementManager _shouldSuppressSpeechForPlayPause](self, "_shouldSuppressSpeechForPlayPause")
      && !-[VOTElement isInAlert](v6, "isInAlert"))
    {
      unsigned int v37 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      if (-[VOTElementManager _shouldAnnounceCustomRotorHintForElement:]( self,  "_shouldAnnounceCustomRotorHintForElement:",  v6))
      {
        uint64_t v38 = 0x200800802LL;
      }

      else
      {
        uint64_t v38 = 8390658LL;
      }

      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v6,  v37,  v38);
      [v37 setOriginationType:2];
      [v37 setRequestQueueMixinBehavior:&stru_100178F28];
      -[VOTElementManager sendRequest:](self, "sendRequest:", v37);
    }

    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v39 setCursorFrameForElement:v6];

    -[VOTElementManager _disableQuickNavStateTemporarily](self, "_disableQuickNavStateTemporarily");
    goto LABEL_34;
  }

  CGFloat v10 = objc_opt_class(&OBJC_CLASS___NSString, v9);
  if ((objc_opt_isKindOfClass(v4, v10) & 1) == 0 || ![v4 isEqualToString:@"retry"])
  {
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_100088918;
    v44[3] = &unk_100176D38;
    v44[4] = self;
    AXPerformBlockOnMainThreadAfterDelay(v44, v11, 0.25);
    goto LABEL_12;
  }

  currentElement = self->_currentElement;
  if (!currentElement
    || (currentElement = (VOTElement *)-[VOTElement isVisible](currentElement, "isVisible"),
        (currentElement & 1) == 0))
  {
    unsigned int v13 = VOTLogCommon(currentElement);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      CGRect v15 = self->_currentElement;
      *(_DWORD *)buf = 138412290;
      uint64_t v46 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "First responder failed to retrieve twice, update app: %@",  buf,  0xCu);
    }

    -[VOTElementManager _handleUpdateAppFromTimer](self, "_handleUpdateAppFromTimer");
  }

    double v19 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (![v5 length] || v10 && self->_flags.isReadingAllBook)
    {
      v107 = 0;
LABEL_37:
      v108 = v19;
      [v19 setCannotBeInterrupted:1];
      int v26 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      double v27 = self->_currentOpaqueParent;
      v110 = (void *)objc_claimAutoreleasedReturnValue([v26 application]);
      if ((v109 & 1) == 0 && ([v26 isValidForApplication:v110] & 1) == 0)
      {
        __int16 v28 = objc_claimAutoreleasedReturnValue([v26 firstVisibleElementInList]);
        if (v28)
        {
          uint64_t v29 = (id)v28;
          unsigned __int8 v30 = 27LL;
          while (1)
          {
            if ([v29 isValidForApplication:v110])
            {
              [v26 readingContentCausesPageTurn];
              CGRect v36 = v108;
              goto LABEL_108;
            }

            __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v29 nextElement]);
            CGRect v32 = v31;

            if (!--v30)
            {
              uint64_t v29 = v32;
              break;
            }

            uint64_t v29 = v32;
            if (!v32) {
              goto LABEL_45;
            }
          }

          CGRect v36 = v108;

          CGRect v33 = [v26 readingContentCausesPageTurn];
          if (!v29) {
            goto LABEL_46;
          }
LABEL_108:
          -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v29);
          if (([v29 doesHaveTraits:kAXLaunchIconTrait] | v107) == 1) {
            -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v29,  v36,  0x800000LL);
          }
          unsigned int v37 = v27;
          if (!self->_flags.previousScrollWasBookContentMovement)
          {
            v82 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
            [v82 setCursorFrameForElement:v29];
          }

          fetchManager = self->_fetchManager;
          v84 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
          -[VOTElementFetcher updateCacheWithElement:](fetchManager, "updateCacheWithElement:", v84);

          goto LABEL_124;
        }
      }
}

          int v26 = [v13 addAttributedString:v23];

LABEL_16:
          double v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        double v27 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
        CGRect v16 = v27;
      }

      while (v27);
    }

    [v13 setGeneratesBraille:0];
    [v13 setCannotBeInterrupted:v30];
    if (v31)
    {
      objc_storeStrong((id *)&self->_announcementRequest, v13);
      self->_announcementPid = -1;
      __int16 v28 = (NSString *)objc_claimAutoreleasedReturnValue([v14 firstObject]);
      announcementOriginalString = self->_announcementOriginalString;
      self->_announcementOriginalString = v28;

      [v13 setCompletionDelegate:self];
    }

    -[VOTElementManager sendRequest:](self, "sendRequest:", v13);
  }
}

      mach_msg_destroy(&v10);
      return v8;
    }

    mig_dealloc_reply_port(v10.msgh_local_port);
  }

  if ((v8 - 268435459) <= 1)
  {
    if ((v10.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, v10.msgh_local_port);
    }
    goto LABEL_27;
  }

  return v8;
}

id sub_100088918(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:cancelMask:count:objects:",  "_handleFirstResponderChangedNotification:",  *(void *)(a1 + 32),  0x20000,  1,  @"retry",  0);
}

id sub_100088958(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:cancelMask:count:objects:",  "_handleFirstResponderChangedNotification:",  *(void *)(a1 + 32),  0x20000,  1,  *(void *)(a1 + 40),  0);
}

int64_t sub_100088990(id a1, VOTOutputRequest *a2)
{
  uint64_t v2 = a2;
  int64_t v3 = -[VOTOutputRequest doesNotInterrupt](v2, "doesNotInterrupt")
    && (id)-[VOTOutputRequest originationType](v2, "originationType") == (id)1;

  return v3;
}

LABEL_41:
}

    double v19 = objc_loadWeakRetained((id *)&self->_delegate);
    [v19 handleKeyboardKeyEvent:v4 eventOrigin:4];
LABEL_44:

    goto LABEL_45;
  }

  if (v17 <= 1028)
  {
    goto LABEL_41;
  }

  if (v17 == 1100)
  {
    uint64_t v38 = sub_1000AB630((unint64_t)[v4 HIDTime]);
    if (v38 - self->_lastScrollEventTime >= 0.25)
    {
      uint64_t v39 = 0;
      self->_currentAccumulatedScroll = 0LL;
    }

    else
    {
      uint64_t v39 = 1;
    }

    self->_scrollWheelIsActive = v39;
    self->_lastScrollEventTime = v38;
    uint64_t v40 = (uint64_t)[v4 scrollAmount];
    if ([(id)VOTSharedWorkspace deviceOrientation] == (id)2) {
      uint64_t v41 = -v40;
    }
    else {
      uint64_t v41 = v40;
    }
    int v42 = v41 + self->_currentAccumulatedScroll;
    self->_currentAccumulatedScroll = v42;
    if (!self->_scrollWheelIsActive) {
      goto LABEL_61;
    }
    if (v42 <= 50)
    {
      if (v42 > -51)
      {
LABEL_61:
        unsigned int v49 = (void *)VOTSharedWorkspace;
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
        objc_msgSend( v49,  "setTvInteractionModeWithoutSaving:",  objc_msgSend(v50, "voiceOverPreferredTVInteractionMode"));
        goto LABEL_62;
      }

      int v44 = &kVOTEventCommandNextElement;
      id v43 = 50LL;
    }

    else
    {
      id v43 = -50LL;
      int v44 = &kVOTEventCommandPreviousElement;
    }

    int v48 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent internalEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "internalEventWithCommand:info:",  *v44,  0LL));
    self->_currentAccumulatedScroll += v43;
    -[VOTEventFactory processEvent:](self, "processEvent:", v48);

    goto LABEL_61;
  }

  if (v17 == 1102)
  {
    self->_lastWatchWakeUpTime = sub_1000AB630((unint64_t)[v4 HIDTime]);
    if (!self->_aotEnabled || ([v4 location], v23 == CGPointZero.x) && v22 == CGPointZero.y)
    {
      snarfedWatchWakeRecords = self->_snarfedWatchWakeRecords;
      self->_snarfedWatchWakeRecords = 0LL;
    }

    else
    {
      id v45 = self->_snarfedWatchWakeRecords;
      if (!v45)
      {
        uint64_t v46 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        char v47 = self->_snarfedWatchWakeRecords;
        self->_snarfedWatchWakeRecords = v46;

        id v45 = self->_snarfedWatchWakeRecords;
      }

      -[NSMutableArray removeAllObjects](v45, "removeAllObjects");
    }
  }

BOOL sub_1000891DC(id a1, VOTElement *a2)
{
  return -[VOTElement isSafari](a2, "isSafari");
}

LABEL_75:
        v73 = v70;
        goto LABEL_133;
      }

      v74 = v62;
      if ((v203.location || self->_elementSelectionRangeBufferForSelectionChange.location)
        && ((id)v203.location != objc_msgSend(v62, "length", v186, v187)
         || (v75 = (id)self->_elementSelectionRangeBufferForSelectionChange.location, v75 != [v74 length])))
      {
        v76 = v38;
        v77 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
        v78 = [v77 ignoreLogging];

        if ((v78 & 1) == 0)
        {
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
          v84 = AXLoggerForFacility(v83);
          id v60 = (void *)objc_claimAutoreleasedReturnValue(v84);

          v85 = AXOSLogLevelFromAXLogLevel(3LL);
          if (!os_log_type_enabled((os_log_t)v60, v85))
          {
            CGRect v33 = 0LL;
            uint64_t v38 = v76;
            NSUInteger location = v203.location;
            NSUInteger length = 0LL;
LABEL_57:

LABEL_58:
LABEL_59:
            -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  location,  length,  1LL,  v186);
            if (!v38) {
              goto LABEL_37;
            }
            goto LABEL_36;
          }

          v86 = AXColorizeFormatLog(3LL, @"Cursor didn't move on a selection change notification. WEIRD");
          v208 = (void *)objc_claimAutoreleasedReturnValue(v86);
          v87 = _AXStringForArgs(v208);
          v194 = (void *)objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled((os_log_t)v60, v85))
          {
            *(_DWORD *)buf = 138543362;
            v211 = v194;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v60, v85, "%{public}@", buf, 0xCu);
          }

          CGRect v33 = 0LL;
          uint64_t v38 = v76;
          NSUInteger location = v203.location;
          NSUInteger length = 0LL;
LABEL_204:

          goto LABEL_57;
        }

        CGRect v33 = 0LL;
        uint64_t v38 = v76;
      }

      else
      {
        if (objc_msgSend((id)VOTSharedWorkspace, "fingerCount", v186))
        {
          CGRect v33 = 0LL;
          goto LABEL_71;
        }

        v197 = v61;
        v91 = self;
        v92 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_firstResponderElement, "application"));
        v93 = [v92 isDictationListening];

        if ((v93 & 1) == 0)
        {
          v98 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
          v99 = [v98 ignoreLogging];

          if ((v99 & 1) == 0)
          {
            v100 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
            v101 = AXLoggerForFacility(v100);
            v102 = (void *)objc_claimAutoreleasedReturnValue(v101);

            v103 = AXOSLogLevelFromAXLogLevel(1LL);
            if (os_log_type_enabled((os_log_t)v102, v103))
            {
              v104 = AXColorizeFormatLog(1LL, @"Selection border hit, no dictation or finger count");
              v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
              v106 = _AXStringForArgs(v105);
              v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
              v108 = v102;
              if (os_log_type_enabled(v108, v103))
              {
                *(_DWORD *)buf = 138543362;
                v211 = v107;
                _os_log_impl((void *)&_mh_execute_header, v108, v103, "%{public}@", buf, 0xCu);
              }
            }
          }

          v109 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
          v110 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
          [v109 sendEvent:v110];

          if ([v202 length]
            && (-[VOTElement doesHaveTraits:](v91->_firstResponderElement, "doesHaveTraits:", kAXTextAreaTrait)
             || -[VOTElement doesHaveAllTraits:]( v91->_firstResponderElement,  "doesHaveAllTraits:",  kAXTextEntryTrait | kAXWebContentTrait | kAXIsEditingTrait)))
          {
            if (v203.location)
            {
              v111 = sub_10004A988(off_1001AC148, @"bottom.document", 0LL);
              CGRect v33 = (id)objc_claimAutoreleasedReturnValue(v111);

              id v64 = (char *)-[VOTElement lineRangeForPosition:]( v91->_firstResponderElement,  "lineRangeForPosition:",  v203.location - 1);
              v200 = v112;
            }

            else
            {
              v184 = sub_10004A988(off_1001AC148, @"top.document", 0LL);
              CGRect v33 = (id)objc_claimAutoreleasedReturnValue(v184);

              -[VOTElement lineRangeForPosition:](v91->_firstResponderElement, "lineRangeForPosition:", 0LL);
              v200 = v185;
              id v64 = 0LL;
            }
          }

          else
          {
            v200 = 0LL;
            id v64 = 0LL;
            CGRect v33 = 0LL;
          }

          __int16 v65 = 0LL;
          self = v91;
          CGRect v32 = (void *)v209;
          NSUInteger location = v203.location;
          NSUInteger length = 0LL;
          v67 = v200;
          goto LABEL_69;
        }

        CGRect v33 = 0LL;
        CGRect v32 = (void *)v209;
      }

      NSUInteger location = v203.location;
      NSUInteger length = 0LL;
      goto LABEL_58;
    }

      if (!v12) {
        goto LABEL_76;
      }
      goto LABEL_71;
    case 34LL:
      int v42 = (void *)objc_claimAutoreleasedReturnValue([v3 payload]);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKey:@"argument"]);

      if (v43)
      {
        int v44 = [v43 BOOLValue];
        [(id)VOTSharedWorkspace setSystemVolumeControlsAvailablity:v44];
      }

      goto LABEL_51;
    case 35LL:
      [(id)VOTSharedWorkspace _testFetchWebElementRects];
LABEL_53:
      CGFloat v9 = 0LL;
      id v12 = 0LL;
      goto LABEL_72;
    case 36LL:
      unsigned int v13 = (id *)&kVOTEventCommandNextElementCommunity;
      goto LABEL_70;
    case 37LL:
      unsigned int v13 = (id *)&kVOTEventCommandPreviousElementCommunity;
      goto LABEL_70;
    case 38LL:
      unsigned int v13 = (id *)&kVOTEventCommandReadAll;
      goto LABEL_70;
    case 39LL:
      unsigned int v13 = (id *)&kVOTEventCommandShowEditingHUD;
      goto LABEL_70;
    case 40LL:
      unsigned int v13 = (id *)&kVOTEventCommandCopy;
      goto LABEL_70;
    case 41LL:
      unsigned int v13 = (id *)&kVOTEventCommandPaste;
      goto LABEL_70;
    case 42LL:
      unsigned int v13 = (id *)&kVOTEventCommandUndo;
      goto LABEL_70;
    case 43LL:
      unsigned int v13 = (id *)&kVOTEventCommandRedo;
      goto LABEL_70;
    case 44LL:
      unsigned int v13 = (id *)&kVOTEventCommandToggleNavigationStyle;
      goto LABEL_70;
    case 45LL:
      unsigned int v13 = (id *)&kVOTEventCommandToggleSyncNativeAndExploreFocus;
      goto LABEL_70;
    case 46LL:
      unsigned int v13 = (id *)&kVOTEventCommandSystemSwitchToNextApp;
      goto LABEL_70;
    case 47LL:
      unsigned int v13 = (id *)&kVOTEventCommandSystemSwitchToPreviousApp;
      goto LABEL_70;
    case 48LL:
      unsigned int v13 = (id *)&kVOTEventCommandStartHelp;
      goto LABEL_70;
    case 50LL:
      unsigned int v13 = (id *)&kVOTEventCommandDescribeCameraScene;
      goto LABEL_70;
    case 51LL:
    case 52LL:
      goto LABEL_78;
    case 53LL:
      unsigned int v13 = (id *)&kVOTEventCommandActivateBrailleScreenInput;
      goto LABEL_70;
    case 54LL:
      unsigned int v13 = (id *)&kVOTEventCommandBSIExit;
LABEL_70:
      id v12 = *v13;
      if (v12)
      {
LABEL_71:
        id v45 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent systemServerEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "systemServerEventWithCommand:info:",  v12,  v7));
        [(id)VOTSharedWorkspace dispatchCommand:v45];

        CGFloat v9 = 0LL;
LABEL_72:
        CGFloat v8 = 1LL;
      }

      else
      {
LABEL_76:
        CGFloat v9 = 0LL;
LABEL_77:
        CGFloat v8 = 0LL;
      }

BOOL sub_10008ACD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 textInputElement]);
  unsigned int v5 = [v4 isEqual:*(void *)(*(void *)(a1 + 32) + 232)];

  if (v5 && (id v6 = [v3 textInputElementRange], v6 != (id)0x7FFFFFFF))
  {
    BOOL v8 = 0LL;
    unint64_t v10 = *(void *)(a1 + 40);
    if ((unint64_t)v6 <= *(void *)(a1 + 48) + v10 && (unint64_t)v6 + v7 >= v10)
    {
      [v3 updateFrame];
      [v3 frame];
      CGRect v12 = CGRectIntersection(v11, *(CGRect *)(a1 + 56));
      BOOL v8 = !CGRectIsEmpty(v12);
    }
  }

  else
  {
    BOOL v8 = 0LL;
  }

  return v8;
}

BOOL sub_10008AE88(id a1, VOTElement *a2)
{
  return -[VOTElement usingHardwareKeyboard](a2, "usingHardwareKeyboard");
}

BOOL sub_10008AE90(id a1, VOTElement *a2)
{
  return -[VOTElement usingBrailleHardwareKeyboard](a2, "usingBrailleHardwareKeyboard");
}

LABEL_92:
  if (*(void *)buf != 0x7FFFFFFFLL || *(void *)&buf[8])
  {
    v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "attributedValueForRange:"));
    [(id)VOTSharedWorkspace addMisspellingsForString:v80];
    v217 = [v80 hasAttribute:UIAccessibilityTokenMisspelled];
  }

  else if (HIBYTE(v241))
  {
    v79 = sub_10004A988(off_1001AC148, @"paste.operation.succeeded", 0LL);
    v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
    v81 = objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingFormat:](v56, "stringByAppendingFormat:", @", %@", v80));

    v217 = 0;
    uint64_t v56 = (__CFString *)v81;
  }

  else
  {
    if (!(_BYTE)v241)
    {
      v217 = 0;
      goto LABEL_98;
    }

    else {
      v192 = [v229 addString:v212 withLanguage:v224];
    }
    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      v218 = (void *)objc_claimAutoreleasedReturnValue([v229 outputActions]);
      v193 = (void *)objc_claimAutoreleasedReturnValue([v218 lastObject]);
      LODWORD(v194) = 1.5;
      v195 = v55;
      v196 = v61;
      v197 = v60;
      v198 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v194));
      [v193 setObject:v198 forVariant:32];

      id v60 = v197;
      v61 = v196;
      uint64_t v55 = v195;
    }

    if ((unint64_t)-[__CFString length](v56, "length") <= 1)
    {

      uint64_t v56 = 0LL;
    }

    v80 = (void *)objc_claimAutoreleasedReturnValue([v229 outputActions]);
    v199 = (void *)objc_claimAutoreleasedReturnValue([v80 lastObject]);
    [v199 setObject:&__kCFBooleanTrue forVariant:57];

    v217 = 0;
  }

LABEL_98:
  if (v208)
  {
    char v57 = [v61 doesHaveTraits:kAXSecureTextFieldTrait];
    if ((v57 & 1) == 0 && !a7)
    {
      char v57 = -[NSMutableString isEqualToString:](*v215, "isEqualToString:", v227);
      if ((_DWORD)v57)
      {
        char v57 = -[__CFString length](v227, "length");
        if (!v57 && CFAbsoluteTimeGetCurrent() - v226->_lastFirstResponderChangeTime > 0.25)
        {
          v82 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
          v83 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
          [v82 sendEvent:v83];
        }
      }
    }
  }

  v84 = VOTLogElement(v57);
  v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3680();
  }

  if (-[__CFString isAXAttributedString](v227, "isAXAttributedString")
    && (-[__CFString hasAttribute:](v227, "hasAttribute:", UIAccessibilityTokenPlaceholder) & 1) != 0)
  {
    v86 = &stru_10017A920;
  }

  else
  {
    v86 = v227;
  }

  -[NSMutableString setString:](*v215, "setString:", v86);
  if (v61)
  {
    v87 = (uint64_t)[v61 selectedTextRange];
    v89 = v88;
  }

  else
  {
    v89 = 0LL;
    v87 = 0x7FFFFFFFLL;
  }

  -[VOTElementManager _elementSelectionRangeDidChange:reason:]( v226,  "_elementSelectionRangeDidChange:reason:",  v87,  v89,  0LL);
  v90 = [(id)VOTSharedWorkspace brailleInputActive];
  if ((_DWORD)v90)
  {
    v91 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v92 = (unint64_t)[v91 voiceOverBrailleGesturesTypingFeedback];

    if ((v60 & 1) == 0 && (v92 | 2) == 2)
    {
      if (-[__CFString length](v56, "length"))
      {
        v93 = v61;
        v94 = v60;
        v95 = -[__CFString characterAtIndex:](v56, "characterAtIndex:", (char *)-[__CFString length](v56, "length") - 1);
        v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
        LODWORD(v95) = [v96 characterIsMember:v95];

        v90 = -[__CFString hasSuffix:](v56, "hasSuffix:", @"\n");
        if ((_DWORD)v95)
        {
          v90 = [v229 addString:@" " withLanguage:v224];
          id v60 = v94;
          v61 = v93;
          uint64_t v55 = v222;
          goto LABEL_126;
        }

        id v60 = v94;
        v61 = v93;
        uint64_t v55 = v222;
        if (!(_DWORD)v90)
        {
LABEL_126:
          if (!v92)
          {

            uint64_t v56 = &stru_10017A920;
          }

          goto LABEL_128;
        }
      }

      else
      {
        v90 = -[__CFString hasSuffix:](v56, "hasSuffix:", @"\n");
      }

      v90 = [v229 addString:@"\n"];
      goto LABEL_126;
    }
  }

LABEL_128:
  v98 = VOTLogElement(v90);
  v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
  if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3620();
  }

  if (v223)
  {
    v100 = sub_10004A988(off_1001AC148, @"selection.deleted", 0LL);
    v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
    v102 = [v229 addString:v101];
  }

  if (!-[__CFString length](v56, "length")) {
    goto LABEL_178;
  }
  if (-[__CFString isAXAttributedString](v227, "isAXAttributedString"))
  {
    v103 = -[__CFString copyWithZone:](v227, "copyWithZone:", 0LL);
    [v103 replaceString:v56];
    v204 = v60;
    if (v60
      && (v104 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance")),
          v105 = [v104 voiceOverDeletionFeedback],
          v104,
          !v105))
    {
      v178 = sub_10004AE68(off_1001AC148, @"delete.text.prefix", 0LL, v224);
      v179 = (void *)objc_claimAutoreleasedReturnValue(v178);
      v107 = (uint64_t)[v179 rangeOfString:@"%@"];
      v181 = v180;
      v106 = [v103 length];
      v182 = AXCFormattedString(v179, @"%@");
      v183 = (void *)objc_claimAutoreleasedReturnValue(v182);
      v234[0] = _NSConcreteStackBlock;
      v234[1] = 3221225472LL;
      v234[2] = sub_10008CB14;
      v234[3] = &unk_100178FF8;
      v236 = v107;
      v237 = v181;
      v184 = (id)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v183,  v103));
      v235 = v184;
      [v103 enumerateAttributesUsingBlock:v234];
      v185 = v184;

      __int16 v63 = v229;
      v103 = v185;
      uint64_t v55 = v222;
      v61 = v210;
    }

    else
    {
      v106 = 0LL;
      v107 = 0x7FFFFFFFFFFFFFFFLL;
    }

    v108 = [v63 addAttributedString:v103 withLanguage:v224];
    if (v107 == 0x7FFFFFFFFFFFFFFFLL || v106 != (id)1) {
      goto LABEL_147;
    }
    goto LABEL_146;
  }

  v103 = -[__CFString copy](v56, "copy");
  if (v60
    && (v109 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance")),
        v110 = [v109 voiceOverDeletionFeedback],
        v109,
        !v110))
  {
    v186 = sub_10004AE68(off_1001AC148, @"delete.text.prefix", 0LL, v224);
    v187 = v61;
    v188 = v60;
    v189 = (void *)objc_claimAutoreleasedReturnValue(v186);
    v107 = (uint64_t)[v189 rangeOfString:@"%@"];
    v111 = [v103 length];
    v200 = v103;
    v190 = AXCFormattedString(v189, @"%@");
    v191 = objc_claimAutoreleasedReturnValue(v190);

    id v60 = v188;
    v61 = v187;
    uint64_t v55 = v222;
    v103 = (id)v191;
    __int16 v63 = v229;
  }

  else
  {
    v111 = 0LL;
    v107 = 0x7FFFFFFFFFFFFFFFLL;
  }

  v112 = objc_msgSend(v63, "addString:withLanguage:", v103, v224, v200);
  if (v107 != 0x7FFFFFFFFFFFFFFFLL && v111 == (id)1)
  {
    v204 = v60;
LABEL_146:
    v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSet](&OBJC_CLASS___NSMutableIndexSet, "indexSet"));
    objc_msgSend(v113, "addIndexesInRange:", v107, 1);
    v114 = (void *)objc_claimAutoreleasedReturnValue([v63 outputActions]);
    v115 = (void *)objc_claimAutoreleasedReturnValue([v114 lastObject]);
    [v115 setObject:v113 forVariant:29];

LABEL_147:
    id v60 = v204;
  }

  v116 = (void *)objc_claimAutoreleasedReturnValue([v63 outputActions]);
  v117 = (void *)objc_claimAutoreleasedReturnValue([v116 lastObject]);
  [v117 setObject:&__kCFBooleanTrue forVariant:57];

  if (v60)
  {
    v118 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v119 = [v118 voiceOverDeletionFeedback];

    if (v119 == (id)2)
    {
      v120 = (void *)objc_claimAutoreleasedReturnValue([v63 outputActions]);
      [v120 enumerateObjectsUsingBlock:&stru_100179038];
    }

    if (-[__CFString length](v56, "length") == (id)1)
    {
      v121 = v61;
      v122 = v60;
      v123 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
      v124 = (void *)objc_claimAutoreleasedReturnValue([v63 keyboardLanguageHint]);
      v125 = (void *)objc_claimAutoreleasedReturnValue([v123 descriptionOfWord:v56 forLanguage:v124]);

      if ([v125 length])
      {
        v126 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v125));
        v127 = (void *)objc_claimAutoreleasedReturnValue([v63 keyboardLanguageHint]);
        [v126 setAttribute:v127 forKey:UIAccessibilityTokenLanguage];

        v128 = [v63 addString:v125];
      }

      id v60 = v122;
      v61 = v121;
    }
  }

  if (!-[__CFString length](v56, "length"))
  {
    v129 = (void *)objc_claimAutoreleasedReturnValue([v63 lastAction]);
    [v129 setObject:kCFBooleanTrue forVariant:28];
  }

  v130 = [(id)VOTSharedWorkspace typingPitchChangeEnabled];
  if ((v60 | v206) == 1 && v130)
  {
    if (v60)
    {
      v131 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      v132 = [v131 voiceOverDeletionFeedback];

      if (v132 == (id)1) {
        v133 = 0.75;
      }
      else {
        v133 = 1.0;
      }
    }

    else if (v206)
    {
      v133 = 1.5;
    }

    else
    {
      v133 = 1.0;
    }

    v232 = 0u;
    v233 = 0u;
    v230 = 0u;
    v231 = 0u;
    v134 = (void *)objc_claimAutoreleasedReturnValue([v63 outputActions]);
    v135 = [v134 countByEnumeratingWithState:&v230 objects:v244 count:16];
    if (v135)
    {
      v137 = v135;
      v138 = *(void *)v231;
      do
      {
        for (i = 0LL; i != v137; i = (char *)i + 1)
        {
          if (*(void *)v231 != v138) {
            objc_enumerationMutation(v134);
          }
          v140 = *(void **)(*((void *)&v230 + 1) + 8LL * (void)i);
          *(float *)&v136 = v133;
          v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v136));
          [v140 setObject:v141 forVariant:32];
        }

        v137 = [v134 countByEnumeratingWithState:&v230 objects:v244 count:16];
      }

      while (v137);
    }

    v62 = v226;
    __int16 v63 = v229;
  }

  if (!v217)
  {
LABEL_178:
    v148 = 0;
    goto LABEL_179;
  }

  v142 = sub_10004A988(off_1001AC148, @"misspelled", 0LL);
  v143 = (void *)objc_claimAutoreleasedReturnValue(v142);
  v144 = [v63 addString:v143];

  if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
  {
    v145 = (void *)objc_claimAutoreleasedReturnValue([v63 lastAction]);
    LODWORD(v146) = 1062836634;
    v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v146));
    [v145 setObject:v147 forVariant:32];
  }

  v148 = 1;
LABEL_179:
  p_elementSelectionRangeBufferForValueChange = &v62->_elementSelectionRangeBufferForValueChange;
  if ([v229 containsActions]
    && ([v221 isEqualToString:kAXValueChangeTypeDictation] & 1) == 0)
  {
    v150 = [v219 hasPrefix:@"zh"];
    if ((_DWORD)v150)
    {
      if (AXUIKeyboardIsOOP(v150, v151))
      {
        v152 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement inputUIApplication](&OBJC_CLASS___VOTElement, "inputUIApplication"));
        v153 = (void *)objc_claimAutoreleasedReturnValue([v152 uiElement]);
        [v153 updateCache:3004];

        v154 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement inputUIApplication](&OBJC_CLASS___VOTElement, "inputUIApplication"));
        v155 = (void *)objc_claimAutoreleasedReturnValue([v154 typingCandidateElements]);
      }

      else
      {
        v156 = (void *)objc_claimAutoreleasedReturnValue([v211 uiElement]);
        [v156 updateCache:3004];

        v155 = (void *)objc_claimAutoreleasedReturnValue([v211 typingCandidateElements]);
      }

      v157 = (void *)objc_claimAutoreleasedReturnValue([v155 firstObject]);
      v158 = (void *)objc_claimAutoreleasedReturnValue([v157 label]);

      if ([v158 length])
      {
        LODWORD(v159) = 1061158912;
        [v229 addPause:v159];
        v160 = [v229 addString:v158 withLanguage:v219];
      }
    }

    v161 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    v162 = (void *)objc_claimAutoreleasedReturnValue([v161 brailleElement]);
    v163 = [v61 isEqual:v162];

    if (v225 != 1 && (v163 & 1) == 0) {
      [v229 setGeneratesBraille:1];
    }
    v164 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v165 = [v164 voiceOverTouchBrailleDisplayInputMode];

    if (v165 == (id)2) {
      v166 = 1;
    }
    else {
      v166 = v148;
    }
    if (v165 == (id)2) {
      v167 = 4LL;
    }
    else {
      v167 = 2LL;
    }
    if ((v166 & 1) != 0)
    {
      v62 = v226;
      v168 = v229;
    }

    else
    {
      v168 = v229;
      v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v229, "outputActions", v167));
      v170 = (void *)objc_claimAutoreleasedReturnValue([v169 firstObject]);
      v171 = (void *)objc_claimAutoreleasedReturnValue([v170 string]);
      v172 = [v171 length];

      else {
        v167 = 2LL;
      }
      v62 = v226;
    }

    [v168 setBrailleType:v167];
    if (v205)
    {
      v173 = (void *)objc_claimAutoreleasedReturnValue([v229 outputActions]);
      [v173 enumerateObjectsUsingBlock:&stru_100179058];
    }

    uint64_t v55 = v222;
    if (!a7) {
      -[VOTElementManager sendRequest:](v62, "sendRequest:", v229);
    }
  }

  v174 = (void *)VOTSharedWorkspace;
  v175 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](v62, "_currentRotorSelection"));
  [v174 refreshBraille:1 rotorSelection:v175];

  v62->_highlightedCharacterRange = (_NSRange)xmmword_100132600;
  -[VOTElementManager _elementSelectionRangeDidChange:reason:]( v62,  "_elementSelectionRangeDidChange:reason:",  v55,  v228,  2LL);
  *p_elementSelectionRangeBufferForValueChange = v62->_elementSelectionRangeBufferInternal;
}

id sub_10008CB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAttributes:withRange:", a2, *(void *)(a1 + 40) + a3, a4);
}

void sub_10008CB28(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_10008CB3C(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
  id v6 = a2;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputAction objectForVariant:](v6, "objectForVariant:", 15LL));

  if (v4)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputAction objectForVariant:](v6, "objectForVariant:", 15LL));
    -[VOTOutputAction setObject:forVariant:](v6, "setObject:forVariant:", v5, 16LL);
  }
}

uint64_t sub_10008D318(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 doesHaveTraits:kAXWebContentTrait] && objc_msgSend(v3, "expandedStatus"))
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 equivalenceTag]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) equivalenceTag]);
    unsigned int v6 = [v4 isEqualToString:v5];

    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

id sub_10008D408(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"__handleExpandedStatusChanged" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

uint64_t sub_10008DD54(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 1912LL) = 0;
  return result;
}

LABEL_43:
        goto LABEL_44;
      }
    }

    else
    {
      CGRect v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
      double v17 = [v16 isSystemSleeping];

      double v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
      double v19 = [v18 isQuietModeEnabled];

      if ((v19 & 1) == 0 && (v17 & 1) == 0)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
        double v21 = [v20 isSystemLocked];

        double Current = CFAbsoluteTimeGetCurrent();
        if (![(id)VOTSharedWorkspace isRingerSwitchSilent]
          || !v21
          || ([(id)VOTSharedWorkspace lastLockButtonPress], Current - v23 <= 1.5)
          || ([(id)VOTSharedWorkspace lastHomeButtonPress], Current - v24 <= 1.5))
        {
          if (CFAbsoluteTimeGetCurrent() - self->_lastAlertTime >= 1.25)
          {
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
            int v26 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent AlertDidAppear](&OBJC_CLASS___VOSOutputEvent, "AlertDidAppear"));
            [v25 sendEvent:v26];

            double v27 = [objc_allocWithZone((Class)VOTOutputRequest) init];
            [v27 setCannotBeInterrupted:1];
            [v27 setInterruptsEverything:1];
            __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
            uint64_t v29 = sub_10004AE68(off_1001AC148, @"alert.message", 0LL, v28);
            unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
            __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v27 addString:v30 withLanguage:v28]);

            [v31 enumerateObjectsUsingBlock:&stru_100179078];
            CGRect v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
            CGRect v33 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByTrimmingCharactersInSet:v32]);
            int v34 = [v33 length];

            if (v34) {
              id v35 = [v27 addString:v6];
            }
            [v27 setGeneratesBraille:v36];
            [v27 setBrailleType:2];
            -[VOTElementManager sendRequest:](self, "sendRequest:", v27);
            if (!self->_elementBeforeAlert)
            {
              id v45 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
              elementBeforeAlert = self->_elementBeforeAlert;
              self->_elementBeforeAlert = v45;
            }

            +[NSThread sleepForTimeInterval:](&OBJC_CLASS___NSThread, "sleepForTimeInterval:", 0.05);
            char v47 = self->_elementBeforeAlert;
            if (v47)
            {
              int v48 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v47, "application"));
              unsigned int v49 = v48;
              if (v48)
              {
                [v48 frame];
                double x = v75.origin.x;
                double y = v75.origin.y;
                width = v75.size.width;
                height = v75.size.height;
                MidX = CGRectGetMidX(v75);
                v76.origin.double x = x;
                v76.origin.double y = y;
                v76.size.width = width;
                v76.size.height = height;
                uint64_t v55 = -[VOTElementManager _retrieveDefaultElementForPosition:]( self,  "_retrieveDefaultElementForPosition:",  MidX,  CGRectGetMidY(v76));
                uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
              }

              else
              {
                uint64_t v56 = 0LL;
              }
            }

            else
            {
              uint64_t v56 = 0LL;
            }

            if (v8)
            {
              char v57 = objc_claimAutoreleasedReturnValue([v8 firstElementInApplicationForFocus]);

              uint64_t v56 = (void *)v57;
            }

            if (v56
              || (unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication")),
                  [v58 centerPointOfScreen],
                  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _retrieveDefaultElementForPosition:]( self,  "_retrieveDefaultElementForPosition:")),  v58,  v56)
              || (uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _retrieveDefaultElementForPosition:]( self,  "_retrieveDefaultElementForPosition:",  *(double *)&qword_1001AD1A0,  *(double *)algn_1001AD1A8))) != 0LL)
            {
              v69 = v31;
              -[VOTElementManager _cancelPreviousElementSearch](self, "_cancelPreviousElementSearch");
              -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
              -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v56);
              -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v56);
              v59 = objc_claimAutoreleasedReturnValue([v56 application]);
              id v60 = (void *)v59;
              if (v59)
              {
                currentApplications = self->_currentApplications;
                v72 = v59;
                v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v72,  1LL));
                LODWORD(currentApplications) = -[NSArray isEqualToArray:](currentApplications, "isEqualToArray:", v62);

                if ((_DWORD)currentApplications)
                {
                  v71 = v60;
                  __int16 v63 = (NSArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v71,  1LL));
                  id v64 = self->_currentApplications;
                  self->_currentApplications = v63;
                }
              }

              else
              {
                _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  25657LL,  "-[VOTElementManager _handleAlertReceived:forApplication:]",  @"From alert, received element %@ but couldn't find its application");
              }

              if (!v34 || [v56 doesHaveTraits:kAXIsEditingTrait])
              {
                uint64_t v66 = [objc_allocWithZone((Class)VOTOutputRequest) init];

                -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v56,  v66,  1LL);
                -[VOTElementManager sendRequest:](self, "sendRequest:", v66);
                -[VOTElementManager setFirstResponder:](self, "setFirstResponder:", v56);
                v67 = [v56 selectedTextRange];
                -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v67,  v68,  0LL);
                double v27 = v66;
              }

              __int16 v31 = v69;
              v70[0] = _NSConcreteStackBlock;
              v70[1] = 3221225472LL;
              v70[2] = sub_10008E78C;
              v70[3] = &unk_100176D38;
              v70[4] = self;
              AXPerformBlockOnMainThreadAfterDelay(v70, v65, 0.25);
            }

            self->_lastAlertTime = CFAbsoluteTimeGetCurrent();
            goto LABEL_43;
          }
        }
      }
    }
  }

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v7 previousTextNavigationElement]);
  if (v40)
  {
    uint64_t v39 = 1;
  }

  else
  {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v7 nextTextNavigationElement]);
    uint64_t v39 = v41 != 0LL;
  }

LABEL_47:
  int v42 = v32 | v39;
  v200 = kAXKeyboardKeyTrait;
  v215 = objc_msgSend(v223, "doesHaveTraits:");
  if (!v215)
  {
    int v44 = (void *)objc_claimAutoreleasedReturnValue([v223 textInputElement]);
    id v45 = v44;
    if (!v44) {
      int v44 = v223;
    }
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v44 value]);

    if ((v42 & 1) != 0) {
      goto LABEL_63;
    }
LABEL_53:
    if ((v220 & 1) != 0)
    {
      if (!v43) {
        goto LABEL_61;
      }
    }

    else
    {
      if (v43) {
        uint64_t v46 = v215;
      }
      else {
        uint64_t v46 = 0;
      }
      if ((v46 & 1) == 0) {
        goto LABEL_61;
      }
    }

    if ([v43 rangeOfString:@"\n"] != (id)0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_63;
    }
LABEL_61:
    if (!v204 || [v204 rangeOfString:@"\n"] == (id)0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_65;
    }
    goto LABEL_63;
  }

  id v43 = (void *)objc_claimAutoreleasedReturnValue([v206 value]);
  if ((v42 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_63:
  if (((v213 | (v25 ^ 1 | v220 | v27) ^ 1) & 1) == 0) {
    sub_1000D4914(v224->super._currentRotors, (const void *)5);
  }
LABEL_65:
  char v47 = (void *)objc_claimAutoreleasedReturnValue([v223 customRotorActions]);
  int v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "ax_firstObjectUsingBlock:", &stru_100179308));

  if (v48) {
    sub_1000D4914(v224->super._currentRotors, (const void *)0x12);
  }
  unsigned int v49 = kAXMapTrait;
  uint64_t v50 = v223;
  if (([v223 doesHaveTraits:kAXMapTrait] & 1) != 0
    || (BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([v223 touchContainer]),
        uint64_t v52 = [v51 doesHaveTraits:v49],
        v51,
        uint64_t v50 = v223,
        (v52 & 1) != 0))
  {
    id v53 = VOTLogRotor();
    v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG)) {
      sub_1000F3D38();
    }

    v208 = 19LL;
  }

  else if (([v223 doesHaveTraits:kAXSupportsZoomTrait] & 1) == 0)
  {
    goto LABEL_73;
  }

  sub_1000D4914(v224->super._currentRotors, (const void *)0x13);
LABEL_73:
  uint64_t v55 = kAXSupportsTrackingDetailTrait;
  if (([v50 doesHaveTraits:kAXSupportsTrackingDetailTrait] & 1) != 0
    || (uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v50 touchContainer]),
        char v57 = [v56 doesHaveTraits:v55],
        v56,
        uint64_t v50 = v223,
        v57))
  {
    sub_1000D4914(v224->super._currentRotors, (const void *)0x38);
  }

  unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue([v50 containerTypes]);
  v59 = [v58 containsObject:&off_1001879B8];

  if (v59) {
    sub_1000D4914(v224->super._currentRotors, (const void *)0x1E);
  }
  v201 = v43;
  v202 = v19;
  if ((v25 & 1) != 0
    || [v19 isSafari]
    && (([v223 doesHaveTraits:v205] | v27) & 1) == 0)
  {
    id v60 = v224;
    v61 = v224->super._typeKey;
    v224->super._typeKedouble y = (NSString *)@"CurrentRotorTypeWeb";

    v218 = 1;
  }

  else
  {
    v218 = 0;
    id v60 = v224;
  }

  v230 = 0u;
  v231 = 0u;
  v232 = 0u;
  v233 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue(-[VOTElementRotor _currentAvailableRotorItems](v60, "_currentAvailableRotorItems"));
  v62 = [obj countByEnumeratingWithState:&v230 objects:v234 count:16];
  if (v62)
  {
    __int16 v63 = v62;
    v210 = v26 | v207 | v28;
    v216 = v213 | v25 ^ 1;
    v211 = kAXStatusBarElementTrait | v205;
    id v64 = *(void *)v231;
    do
    {
      __int16 v65 = 0LL;
      uint64_t v66 = v224;
      do
      {
        if (*(void *)v231 != v64) {
          objc_enumerationMutation(obj);
        }
        v67 = *(void **)(*((void *)&v230 + 1) + 8LL * (void)v65);
        v68 = (void *)objc_claimAutoreleasedReturnValue([v67 valueForKey:@"RotorItem"]);
        v69 = (void *)objc_claimAutoreleasedReturnValue( +[VOTRotor rotorTypeForPreferenceString:]( &OBJC_CLASS___VOTRotor,  "rotorTypeForPreferenceString:",  v68));
        v70 = [v69 intValue];
        v71 = v70;

        if (v70 == 54)
        {
          v72 = (void *)objc_claimAutoreleasedReturnValue([v67 valueForKey:@"Enabled"]);
          v73 = [v72 BOOLValue];

          if (v73)
          {
            if (([v223 doesHaveTraitsForGesturedTextInput] & 1) != 0
              || (v74 = (void *)objc_claimAutoreleasedReturnValue([v223 application]),
                  v75 = [v74 isSoftwareKeyboardActive],
                  v74,
                  v75))
            {
              if (![obj indexOfObject:v67]) {
                v66->_temporaryRotorTypeNeedingPromotion = v71;
              }
              sub_1000D4914(v66->super._currentRotors, (const void *)v71);
            }
          }
        }

        v76 = (void *)objc_claimAutoreleasedReturnValue([v67 valueForKey:@"Enabled"]);
        v77 = [v76 BOOLValue];

        if ((_DWORD)v71 == 23) {
          v78 = 1;
        }
        else {
          v78 = v77;
        }
        if ((_DWORD)v71 == 24)
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
          v80 = [v79 voiceOverTouchBrailleDisplaySyncInputOutputTables];

          v81 = v80 ^ 1 | v78;
          uint64_t v66 = v224;
          if ((v81 & 1) != 0) {
            goto LABEL_109;
          }
        }

        else
        {
          if ((_DWORD)v71 == 61) {
            v82 = 0;
          }
          else {
            v82 = v78;
          }
          uint64_t v66 = v224;
          if ((v82 & 1) != 0)
          {
            if ((_DWORD)v71 == 6
              && (((v215 | [v223 doesHaveTraits:v210]) & 1) != 0
               || [v223 supportsTextSelection]))
            {
              sub_1000D4914(v224->super._currentRotors, (const void *)6);
            }

void sub_10008E780(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

id sub_10008E78C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"_updateDisplayWithCurrentElement" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

id sub_10008E988(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:cancelMask:count:objects:",  "_updateFocusContext:",  *(void *)(a1 + 32),  0,  1,  *(void *)(a1 + 40),  0);
}

id sub_10008F0E8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 368) dispatchAfterDelay:*(float *)(a1 + 40)];
}

LABEL_125:
          objc_storeStrong((id *)&self->_lastScrollStatus, v5);
          self->_flags.previousScrollWasBookContentMovement = 0;
          v104 = (void *)VOTSharedWorkspace;
          v105 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
          [v104 refreshBraille:0 rotorSelection:v105];

          goto LABEL_126;
        }

        CGRect v36 = v108;
        unsigned int v37 = v27;
        if (self->_bookLastContentMovementDirection == 2) {
          -[VOTElementManager _setElementUnitIndexesToEndOfElement:](self, "_setElementUnitIndexesToEndOfElement:", v26);
        }
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v26 pageContent]);
        uint64_t v29 = v38;
        bookLastContentMovementUnit = self->_bookLastContentMovementUnit;
        if (bookLastContentMovementUnit == 3)
        {
          bookLineNumber = self->_bookLineNumber;
          if (bookLineNumber == 0x7FFFFFFF)
          {
            if (self->_bookLastContentMovementDirection == 1)
            {
              bookLineNumber = 0LL;
              self->_bookLineNumber = 0LL;
            }

            else
            {
              bookLineNumber = 0x7FFFFFFFLL;
            }
          }

          v86 = (void *)objc_claimAutoreleasedReturnValue([v26 stringForLineNumber:bookLineNumber]);
          v88 = [v108 addString:v86];
          [v26 frameForLineNumber:self->_bookLineNumber];
          v90 = v89;
          v92 = v91;
          v94 = v93;
          v96 = v95;
          v97 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend(v97, "convertRect:fromContextId:", objc_msgSend(v26, "windowContextId"), v90, v92, v94, v96);
          self->_lineFrame.origin.double x = v98;
          self->_lineFrame.origin.double y = v99;
          self->_lineFrame.size.width = v100;
          self->_lineFrame.size.height = v101;

          goto LABEL_120;
        }

        if (bookLastContentMovementUnit == 2)
        {
          v78 = [v38 wordFromPosition:self->_bookCursorPosition inDirection:self->_bookLastContentMovementDirection];
LABEL_117:
          v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "substringWithRange:", v78, v79));
          v87 = [v108 addString:v86];
LABEL_120:

          goto LABEL_121;
        }

        if (bookLastContentMovementUnit != 1)
        {
LABEL_121:
          if (objc_msgSend(v108, "containsActions", v39))
          {
            v102 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
            [v102 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

            -[VOTElementManager sendRequest:](self, "sendRequest:", v108);
          }

          -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:]( self,  "_handleBookContentMovement:direction:unit:generateOutput:",  v26,  self->_bookLastContentMovementDirection,  self->_bookLastContentMovementUnit,  [v108 containsActions] ^ 1);
          v103 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
          objc_msgSend( v103,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);

LABEL_124:
          goto LABEL_125;
        }

        bookLastContentMovementDirection = self->_bookLastContentMovementDirection;
        if (bookLastContentMovementDirection == 1)
        {
          bookCursorPosition = self->_bookCursorPosition;
          if (bookCursorPosition < (unint64_t)[v38 length])
          {
            uint64_t v39 = self->_bookCursorPosition & ~(self->_bookCursorPosition >> 63);
LABEL_116:
            v78 = [v29 rangeOfComposedCharacterSequenceAtIndex:v39];
            goto LABEL_117;
          }

          bookLastContentMovementDirection = self->_bookLastContentMovementDirection;
        }

        if (bookLastContentMovementDirection != 2) {
          goto LABEL_121;
        }
        v85 = self->_bookCursorPosition;
        uint64_t v39 = v85 - 1;
        if (v85 < 1) {
          goto LABEL_121;
        }
        goto LABEL_116;
      }

      [v26 centerPoint];
      MidX = v43;
      MidY = v45;
      double y = CGPointZero.y;
      if (CGPointZero.x == v43 && y == MidY)
      {
        uint64_t v29 = v26;
        CGRect v36 = v108;
        unsigned int v37 = v27;
      }

      else
      {
        if (objc_msgSend(v26, "doesHaveTraits:", kAXWebContentTrait, CGPointZero.x, y))
        {
          unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([v26 application]);
          uint64_t v50 = [v49 isSafari];

          if (v50)
          {
            BOOL v51 = (void *)objc_claimAutoreleasedReturnValue([v26 remoteParent]);
            uint64_t v52 = v51;
            if (v51)
            {
              id v53 = (void *)objc_claimAutoreleasedReturnValue([v51 uiElement]);
              [v53 rectWithAXAttribute:2057];
              uint64_t v55 = v54;
              char v57 = v56;
              v59 = v58;
              v61 = v60;

              v112.origin.double x = v55;
              v112.origin.double y = v57;
              v112.size.width = v59;
              v112.size.height = v61;
              MidX = CGRectGetMidX(v112);
              v113.origin.double x = v55;
              v113.origin.double y = v57;
              v113.size.width = v59;
              v113.size.height = v61;
              MidY = CGRectGetMidY(v113);
            }
          }
        }

        unsigned int v37 = v27;
        v62 = [v26 windowContextId];
        if ((_DWORD)v62)
        {
          __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend(v63, "convertPoint:fromContextId:", v62, MidX, MidY);
          MidX = v64;
          MidY = v65;
        }

        uint64_t v66 = objc_allocWithZone((Class)&OBJC_CLASS___VOTElement);
        v67 = (void *)objc_claimAutoreleasedReturnValue([v26 application]);
        uint64_t v29 = objc_msgSend(v66, "initWithPosition:application:contextId:", v67, v62, MidX, MidY);

        v68 = (void *)objc_claimAutoreleasedReturnValue([v29 parentTableOrCollectionView]);
        v69 = (void *)objc_claimAutoreleasedReturnValue([v26 parentTableOrCollectionView]);
        v70 = [v68 isEqual:v69];

        if (!v29) {
          uint64_t v29 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _sonarElementFromPoint:inForwardDirection:limit:]( self,  "_sonarElementFromPoint:inForwardDirection:limit:",  1LL,  10LL,  MidX,  MidY));
        }
        CGRect v36 = v108;
        if (([v29 isInTableCell] & 1) == 0
          && ([v26 isInTableCell] & 1) != 0
          || (([v29 isInTableCell] ^ 1 | v70) & 1) == 0)
        {
          if (![v26 isAlive]
            || (v71 = (void *)objc_claimAutoreleasedReturnValue([v26 firstVisibleElementInList])) == 0)
          {
            v71 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement firstVisibleElementInList](v27, "firstVisibleElementInList"));
          }

          v72 = (id)objc_claimAutoreleasedReturnValue([v71 nextElement]);

          if (!v72) {
            v72 = v71;
          }

          uint64_t v29 = v72;
        }
      }

      if (![v29 isValid])
      {
        [v26 updateCache];
        goto LABEL_103;
      }

      if (v109)
      {
        v73 = (id)objc_claimAutoreleasedReturnValue([v29 firstVisibleElementInList]);
      }

      else
      {
        if ([v29 isEqual:v26])
        {
LABEL_102:
          -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
          self->_flags.shouldUpdateRotorForElement = 1;
LABEL_103:
          if ([v36 containsActions])
          {
            v81 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
            [v81 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

            -[VOTElementManager sendRequest:](self, "sendRequest:", v36);
          }

          goto LABEL_124;
        }

        v73 = v29;
      }

      v76 = v73;
      if (v73)
      {
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v73);
        if (v107)
        {
          -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v76,  v36,  0x800000LL);
        }

        else if (([v76 isReadingContent] & 1) != 0 {
               || [v76 includeDuringContentReading])
        }
        {
          -[VOTElementManager _startReadingBookForNewPage](self, "_startReadingBookForNewPage");
        }

        v80 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
        [v80 setCursorFrameForElement:v76];
      }

      goto LABEL_102;
    }

    if ([v5 isAXAttributedString])
    {
      id v20 = v19;
      v107 = [v5 hasAttribute:kAXPageScrollShouldSpeakElement];
      double v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
      double v22 = objc_claimAutoreleasedReturnValue([v5 stringByTrimmingCharactersInSet:v21]);

      if ((v13 & 1) != 0)
      {
        unsigned int v5 = (id)v22;
        double v19 = v20;
        goto LABEL_37;
      }

      double v19 = v20;
      uint64_t v25 = [v20 addAttributedString:v22];
    }

    else
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
      double v22 = objc_claimAutoreleasedReturnValue([v5 stringByTrimmingCharactersInSet:v23]);

      uint64_t v24 = [v19 addString:v22];
      v107 = 0;
    }

    unsigned int v5 = (id)v22;
    goto LABEL_37;
  }

  _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  26493LL,  "-[VOTElementManager _handleScrollByPageNotification:]",  @"Someone sent us scroll info with a NSData type instead of NSString");
LABEL_127:
}

id sub_100091140(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"_startReadingBookForNewPage" onTarget:*(void *)(a1 + 32) cancelMask:0 count:0 objects:0];
}

id sub_100091B2C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"updateRunningApplications" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

void sub_1000926E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"VOTBSIStateChangedNotification" object:*(void *)(a1 + 32) userInfo:*(void *)(a1 + 40)];

  uint64_t v5 = VOTLogBrailleGestures(v3, v4);
  unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 48)));
    int v9 = 138412546;
    unint64_t v10 = v7;
    __int16 v11 = 2112;
    CGRect v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Posting BSIStateChangedNotification with active:%@ usage:%@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_100093F38(id a1, NSString *a2, NSString *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  unsigned int v6 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
  id v7 = -[VOTOutputRequest addString:](v6, "addString:", v4);
  -[VOTOutputRequest setLanguage:](v6, "setLanguage:", v5);
  -[VOTOutputRequest setBrailleType:](v6, "setBrailleType:", 2LL);
  -[VOTOutputRequest setCannotBeInterrupted:](v6, "setCannotBeInterrupted:", 1LL);
  uint64_t v8 = VOTLogCommon(-[VOTOutputRequest send](v6, "send"));
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412546;
    __int16 v11 = v4;
    __int16 v12 = 2112;
    unsigned int v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Describing image: %@/%@",  (uint8_t *)&v10,  0x16u);
  }
}

id sub_100094E18(uint64_t a1)
{
  return objc_msgSend( *(id *)(*(void *)(a1 + 32) + 1608),  "performSelector:onTarget:count:objects:",  "__sendHIDEvents:postEventDelays:",  *(void *)(a1 + 48),  0);
}

id sub_1000959C8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"_tvOS_retryUpdateWithNativeFocus" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

id sub_100096834(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 1608) performSelector:"_tvOS_retryUpdateWithNativeFocus" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

void sub_100097810(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VOTUserEventManager sharedInstance](&OBJC_CLASS___VOTUserEventManager, "sharedInstance"));
  [v1 userEventOccurred];
}

void sub_10009A2B0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10009A2CC(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_10009A2D8( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

id sub_10009A350(void *a1, const char *a2)
{
  return [a1 webPageLoadedGenerationMark];
}

void sub_10009A4D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10009A4F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateWebRotorItems];
}

void sub_10009AAC8(uint64_t a1)
{
}

uint64_t sub_10009AB98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10009ABA8(uint64_t a1)
{
}

void sub_10009ABB0(uint64_t a1)
{
}

LABEL_109:
            if ((v216 & 1) != 0)
            {
              if ((int)v71 > 59)
              {
                switch((int)v71)
                {
                  case 'H':
                    goto LABEL_119;
                  case 'I':
                    goto LABEL_140;
                  case 'J':
                  case 'K':
                  case 'L':
                  case 'Q':
                  case 'R':
                  case 'T':
                  case 'U':
                  case 'V':
                  case 'W':
                  case 'X':
                  case 'Y':
                    goto LABEL_137;
                  case 'M':
                    goto LABEL_141;
                  case 'N':
                    goto LABEL_143;
                  case 'O':
                    goto LABEL_144;
                  case 'P':
                    goto LABEL_145;
                  case 'S':
                    goto LABEL_146;
                  case 'Z':
                    goto LABEL_149;
                  default:
                    goto LABEL_134;
                }
              }

              switch((_DWORD)v71)
              {
                case 7:
LABEL_130:
                  currentRotors = v66->super._currentRotors;
                  v86 = 7LL;
                  goto LABEL_150;
                case 8:
LABEL_131:
                  if ((v209 & 1) == 0)
                  {
                    currentRotors = v66->super._currentRotors;
                    v86 = 8LL;
                    goto LABEL_150;
                  }

LABEL_148:
                  sub_10004A018();
                  goto LABEL_151;
                case 0x35:
LABEL_136:
                  currentRotors = v66->super._currentRotors;
                  v86 = 53LL;
                  goto LABEL_150;
              }

LABEL_151:
                      if (v218 && ((v213 | v215 | [v223 doesHaveTraits:v211]) & 1) == 0)
                      {
                        switch((int)v71)
                        {
                          case 5:
                            sub_1000D49B0(v66->super._currentRotors, (const void *)5);
                            v92 = v66->super._currentRotors;
                            v93 = 5LL;
                            goto LABEL_183;
                          case 9:
                            v92 = v66->super._currentRotors;
                            v93 = 9LL;
                            goto LABEL_183;
                          case 10:
                            v92 = v66->super._currentRotors;
                            v93 = 10LL;
                            goto LABEL_183;
                          case 11:
                            v92 = v66->super._currentRotors;
                            v93 = 11LL;
                            goto LABEL_183;
                          case 13:
                            v92 = v66->super._currentRotors;
                            v93 = 13LL;
                            goto LABEL_183;
                          case 14:
                            v92 = v66->super._currentRotors;
                            v93 = 14LL;
                            goto LABEL_183;
                          case 15:
                            v92 = v66->super._currentRotors;
                            v93 = 15LL;
                            goto LABEL_183;
                          case 16:
                            v92 = v66->super._currentRotors;
                            v93 = 16LL;
                            goto LABEL_183;
                          case 17:
                            v92 = v66->super._currentRotors;
                            v93 = 17LL;
                            goto LABEL_183;
                          case 19:
                            v92 = v66->super._currentRotors;
                            v93 = 19LL;
                            goto LABEL_183;
                          case 26:
                            v92 = v66->super._currentRotors;
                            v93 = 26LL;
                            goto LABEL_183;
                          case 27:
                            v92 = v66->super._currentRotors;
                            v93 = 27LL;
                            goto LABEL_183;
                          case 28:
                            v92 = v66->super._currentRotors;
                            v93 = 28LL;
                            goto LABEL_183;
                          case 29:
                            v92 = v66->super._currentRotors;
                            v93 = 29LL;
                            goto LABEL_183;
                          case 33:
                            v92 = v66->super._currentRotors;
                            v93 = 33LL;
                            goto LABEL_183;
                          case 34:
                            v92 = v66->super._currentRotors;
                            v93 = 34LL;
                            goto LABEL_183;
                          case 35:
                            v92 = v66->super._currentRotors;
                            v93 = 35LL;
                            goto LABEL_183;
                          case 37:
                            v92 = v66->super._currentRotors;
                            v93 = 37LL;
                            goto LABEL_183;
                          case 38:
                            v92 = v66->super._currentRotors;
                            v93 = 38LL;
LABEL_183:
                            sub_1000D4914(v92, (const void *)v93);
                            break;
                          default:
                            goto LABEL_184;
                        }
                      }

                      goto LABEL_184;
                    }

LABEL_197:
                  }

LABEL_198:
                  goto LABEL_151;
                case 0x18:
                  v104 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
                  v105 = [v104 voiceOverTouchBrailleDisplaySyncInputOutputTables];

                  if ((v105 & 1) != 0) {
                    goto LABEL_151;
                  }
                  v100 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace brailleLanguageRotorItems]);
                  v101 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
                  v197 = v100;
                  v106 = (void *)objc_claimAutoreleasedReturnValue([v67 valueForKey:@"Enabled"]);
                  v107 = [v106 BOOLValue];

                  if (!v107) {
                    goto LABEL_151;
                  }
                  currentRotors = v66->super._currentRotors;
                  v86 = 24LL;
                  break;
                case 0x52:
                  currentRotors = v66->super._currentRotors;
                  v86 = 82LL;
                  break;
                case 0x37:
                  currentRotors = v66->super._currentRotors;
                  v86 = 55LL;
                  break;
                case 0x19:
                  v108 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
                  v109 = [v108 brailleEnabled];

                  if (!v109) {
                    goto LABEL_151;
                  }
                  currentRotors = v66->super._currentRotors;
                  v86 = 25LL;
                  break;
                default:
                  currentRotors = v66->super._currentRotors;
                  v86 = v71;
                  break;
              }
            }

            else if ((int)v71 <= 71)
            {
              v87 = v71;
              switch((int)v71)
              {
                case 3:
                  goto LABEL_122;
                case 4:
                  v87 = 4LL;
LABEL_122:
                  sub_1000D4914(v66->super._currentRotors, (const void *)v87);
                  goto LABEL_148;
                case 5:
                case 6:
                  goto LABEL_137;
                case 7:
                  goto LABEL_130;
                case 8:
                  goto LABEL_131;
                default:
                  if ((_DWORD)v71 == 53) {
                    goto LABEL_136;
                  }
LABEL_134:
                  if ((_DWORD)v71 != 60) {
                    goto LABEL_137;
                  }
                  currentRotors = v66->super._currentRotors;
                  v86 = 60LL;
                  break;
              }
            }

            else
            {
              switch((int)v71)
              {
                case 'H':
LABEL_119:
                  currentRotors = v66->super._currentRotors;
                  v86 = 72LL;
                  break;
                case 'I':
LABEL_140:
                  currentRotors = v66->super._currentRotors;
                  v86 = 73LL;
                  break;
                case 'M':
LABEL_141:
                  v88 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace punctuationGroups]);
                  v89 = [v88 count];

                  if (!v89) {
                    goto LABEL_151;
                  }
                  currentRotors = v66->super._currentRotors;
                  v86 = 77LL;
                  break;
                case 'N':
LABEL_143:
                  currentRotors = v66->super._currentRotors;
                  v86 = 78LL;
                  break;
                case 'O':
LABEL_144:
                  currentRotors = v66->super._currentRotors;
                  v86 = 79LL;
                  break;
                case 'P':
LABEL_145:
                  currentRotors = v66->super._currentRotors;
                  v86 = 80LL;
                  break;
                case 'S':
LABEL_146:
                  v90 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace activities]);
                  v91 = [v90 count];

                  if (!v91) {
                    goto LABEL_148;
                  }
                  currentRotors = v66->super._currentRotors;
                  v86 = 83LL;
                  break;
                case 'Z':
LABEL_149:
                  currentRotors = v66->super._currentRotors;
                  v86 = 90LL;
                  break;
                default:
                  goto LABEL_137;
              }
            }

LABEL_150:
            sub_1000D4914(currentRotors, (const void *)v86);
            goto LABEL_151;
          }
        }

        if ((v220 & 1) != 0) {
          goto LABEL_184;
        }
        switch((_DWORD)v71)
        {
          case 5:
            v83 = v66->super._currentRotors;
            v84 = 5LL;
            break;
          case 4:
            v83 = v66->super._currentRotors;
            v84 = 4LL;
            break;
          case 3:
            v83 = v66->super._currentRotors;
            v84 = 3LL;
            break;
          default:
            goto LABEL_184;
        }

        sub_1000D49B0(v83, (const void *)v84);
LABEL_184:

        __int16 v65 = (char *)v65 + 1;
      }

      while (v63 != v65);
      v110 = [obj countByEnumeratingWithState:&v230 objects:v234 count:16];
      __int16 v63 = v110;
    }

    while (v110);
  }

  if (([v223 shouldIncludeMediaDescriptionsRotor] & 1) != 0
    || (v111 = (void *)objc_claimAutoreleasedReturnValue([v223 application]),
        v112 = [v111 areMediaLegibilityEventsBeingTapped],
        v111,
        v112))
  {
    sub_1000D4914(v224->super._currentRotors, (const void *)0x39);
  }

  v113 = (void *)objc_claimAutoreleasedReturnValue([v223 customRotorActions]);
  v114 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElement organizedActionsByCategory:]( &OBJC_CLASS___VOTElement,  "organizedActionsByCategory:",  v113));
  v115 = -[VOTElementRotor customActionsAreDragDrop:](v224, "customActionsAreDragDrop:", v114);
  v212 = [v223 shouldAddAlternateActionForLinkElement];
  v116 = (void *)objc_claimAutoreleasedReturnValue([v223 customContent]);
  if ([v223 doesHaveTraits:v200 | v205] && !v208)
  {
    v208 = -[VOTRotor currentRotorType](v224, "currentRotorType");
    if (sub_1000D2A48(v208))
    {
      v117 = VOTLogRotor();
      v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3C4C(v208, v118, v119);
      }
    }

    else
    {
      if (![v223 doesHaveTraits:v200]
        || !-[VOTRotor currentSelectionRotorType](v224, "currentSelectionRotorType"))
      {
        if ([v113 count]) {
          v121 = v115;
        }
        else {
          v121 = 1;
        }
        if (v121 == 1)
        {
          v122 = [v116 count];
          v123 = 84LL;
          if (!v122) {
            v123 = 3LL;
          }
        }

        else
        {
          v123 = 48LL;
        }

        v208 = v123;
        goto LABEL_228;
      }

      v208 = -[VOTRotor currentSelectionRotorType](v224, "currentSelectionRotorType");
      v120 = VOTLogRotor();
      v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3CB8(v224, v118);
      }
    }

LABEL_228:
    v124 = v224->super._currentRotors;
    v235.NSUInteger length = CFArrayGetCount(v124);
    v235.NSUInteger location = 0LL;
  }

  if (-[VOTElementRotor showsWebSearchResults](v224, "showsWebSearchResults"))
  {
    v208 = 32LL;
    sub_1000D4914(v224->super._currentRotors, (const void *)0x20);
  }

  v214 = v115;
  v217 = v116;
  v219 = v113;
  v221 = v224->super._customPublicRotors;
  v125 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  customPublicRotors = v224->super._customPublicRotors;
  v224->super._customPublicRotors = v125;

  if ([obj count])
  {
    v127 = 0LL;
    do
    {
      v128 = (void *)objc_claimAutoreleasedReturnValue([obj objectAtIndex:v127]);
      v129 = (void *)objc_claimAutoreleasedReturnValue([v128 objectForKey:@"VOTRotorType"]);
      v130 = [v129 intValue];

      v131 = (void *)objc_claimAutoreleasedReturnValue([v128 objectForKey:@"Enabled"]);
      v132 = [v131 BOOLValue];

      if (v130 == 61) {
        v133 = v132;
      }
      else {
        v133 = 0;
      }

      if (v133 == 1) {
        break;
      }
      ++v127;
    }

    while (v127 < (unint64_t)[obj count]);
  }

  else
  {
    LOBYTE(v133) = 0;
  }

  v227[0] = _NSConcreteStackBlock;
  v227[1] = 3221225472LL;
  v227[2] = sub_10009CF80;
  v227[3] = &unk_100179330;
  v229 = v133;
  v134 = v224;
  v227[4] = v224;
  v135 = v223;
  v228 = v135;
  v136 = objc_retainBlock(v227);
  ((void (*)(void *, id, void))v136[2])(v136, v135, 0LL);
  if (v215) {
    ((void (*)(void *, id, uint64_t))v136[2])(v136, v206, 1LL);
  }
  v137 = v221;
  if (-[NSMutableArray count](v224->super._customPublicRotors, "count"))
  {
    sub_1000D4914(v224->super._currentRotors, (const void *)0x2F);
    if (-[VOTRotor publicCustomRotorIndex](v224, "publicCustomRotorIndex") == 0x7FFFFFFFFFFFFFFFLL)
    {
      v138 = 0LL;
    }

    else
    {
      v138 = (char *)-[NSMutableArray count](v221, "count") - 1;
      v140 = -[VOTRotor publicCustomRotorIndex](v224, "publicCustomRotorIndex");
      if (v138 >= v140) {
        v138 = v140;
      }
    }

    if ((id)-[VOTRotor currentRotorType](v224, "currentRotorType") == (id)47 && -[NSMutableArray count](v221, "count"))
    {
      v141 = -[NSMutableArray count](v221, "count");
      if (v141 == -[NSMutableArray count](v224->super._customPublicRotors, "count"))
      {
        v142 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndexedSubscript:](v221, "objectAtIndexedSubscript:", v138));
        v143 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndexedSubscript:]( v224->super._customPublicRotors,  "objectAtIndexedSubscript:",  v138));
        v144 = [v142 isEqual:v143];
      }

      else
      {
        v144 = 0;
      }

      v134 = v224;
      v137 = v221;
    }

    else
    {
      v144 = 0;
    }

    if (v208) {
      v145 = 0;
    }
    else {
      v145 = v198 == -1;
    }
    v139 = Copy;
    if (v145 || v144)
    {
      v146 = VOTLogRotor();
      v147 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3C20();
      }

      v208 = 47LL;
    }
  }

  else
  {
    v139 = Copy;
  }

  v148 = (void *)objc_claimAutoreleasedReturnValue([v135 customContent]);
  if ([v148 count])
  {
    v208 = 84LL;
    sub_1000D4914(v134->super._currentRotors, (const void *)0x54);
  }

  v226[0] = _NSConcreteStackBlock;
  v226[1] = 3221225472LL;
  v226[2] = sub_10009D16C;
  v226[3] = &unk_100177120;
  v226[4] = v134;
  v149 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v114, "ax_filteredArrayUsingBlock:", v226));

  objc_storeStrong((id *)&v224->super._customRotorActionCategories, v149);
  v150 = v224;
  if (-[VOTElementRotor customActionsAreValid:]( v224,  "customActionsAreValid:",  v224->super._customRotorActionCategories)
    || (v151 = (void *)objc_claimAutoreleasedReturnValue(-[VOTRotor delegate](v224, "delegate")),
        v152 = [v151 actionsRotorAddBehaviorForElementRotor:v224],
        v151,
        v150 = v224,
        v152 == (id)1))
  {
    sub_1000D4914(v150->super._currentRotors, (const void *)0x30);
    if (((v199 | v214 | v212) & 1) == 0)
    {
      v153 = VOTLogRotor();
      v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
      if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3BF4();
      }

      v208 = 48LL;
      v150 = v224;
    }
  }

  v225[0] = _NSConcreteStackBlock;
  v225[1] = 3221225472LL;
  v225[2] = sub_10009D20C;
  v225[3] = &unk_100179358;
  v225[4] = v150;
  [obj enumerateObjectsWithOptions:2 usingBlock:v225];
  v155 = v150;
  Count = CFArrayGetCount(v150->super._currentRotors);
  if (([(id)VOTSharedWorkspace updateRotorWithElement] & 1) == 0
    && sub_1000D35B8(v155->super._currentRotors, (const void *)v155->super._currentRotorType) != -1)
  {
    goto LABEL_328;
  }

  if (CFArrayGetCount(v139) == Count && !v208)
  {
    if (Count < 1)
    {
      v157 = 0LL;
    }

    else
    {
      v157 = 0LL;
      while (1)
      {
        ValueAtIndedouble x = CFArrayGetValueAtIndex(v139, v157);
        if (Count == ++v157) {
          goto LABEL_283;
        }
      }
    }

    if (v157 == Count)
    {
LABEL_283:
      v159 = v224;
      goto LABEL_299;
    }
  }

  v160 = -[VOTRotor currentRotorType](v224, "currentRotorType");
  if (v160 <= 0x2F
    && ((1LL << v160) & 0x8000C0000180LL) != 0
    && (v161 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance")),
        v162 = [v161 voiceOverUseTVToggleStyleNavigation],
        v161,
        v195)
    && (v162 & 1) == 0)
  {
    v208 = -[VOTRotor currentRotorType](v224, "currentRotorType");
    v163 = VOTLogRotor();
    v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
    if (os_log_type_enabled(v164, OS_LOG_TYPE_DEBUG)) {
      sub_1000F3BC8();
    }
  }

  else if (!v208)
  {
    goto LABEL_302;
  }

  v165 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  v166 = [v165 voiceOverUseTVToggleStyleNavigation];

  if ((v166 & 1) != 0)
  {
    if (v208 == 1)
    {
      v167 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      if ([v167 voiceOverUseTVToggleStyleNavigation])
      {
        v168 = [(id)VOTSharedWorkspace tvInteractionMode];

        if (v168 != (id)2) {
          goto LABEL_296;
        }
      }

      else
      {
        v169 = -[VOTRotor currentRotorType](v224, "currentRotorType");

        if (v169 != (id)36)
        {
LABEL_296:
          -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( v224,  "setCurrentRotorType:saveToPreferences:userInitiated:",  1LL,  0LL,  0LL);
          if (!v139) {
            goto LABEL_328;
          }
          goto LABEL_300;
        }
      }
    }

LABEL_302:
    v170 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
    v171 = (void *)objc_claimAutoreleasedReturnValue([v170 preferenceForKey:v224->super._typeKey]);

    if (v171
      && (v172 = (int)[v171 intValue],
          v236.NSUInteger location = 0LL,
          v236.NSUInteger length = Count,
          CFArrayContainsValue(v224->super._currentRotors, v236, (const void *)v172))
      && !sub_1000D3070(v172))
    {
      v175 = (CFArrayRef *)v224;
      v186 = v224;
      v187 = v172;
    }

    else
    {
      v173 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      v174 = [v173 voiceOverUseTVToggleStyleNavigation];

      if ((v174 & 1) == 0)
      {
        v177 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
        v178 = [v177 voiceOverPreferredTVInteractionMode];

        v179 = 36LL;
        if (v178 == (id)2) {
          v179 = 86LL;
        }
        if (v178) {
          v180 = v179;
        }
        else {
          v180 = 85LL;
        }
        -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( v224,  "setCurrentRotorType:saveToPreferences:userInitiated:",  v180,  0LL,  0LL);
        v181 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
        v182 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v224->super._currentRotorType));
        [v181 setPreference:v182 forKey:v224->super._typeKey];

        v137 = v221;
        if (!v139) {
          goto LABEL_327;
        }
        goto LABEL_326;
      }

      if (-[NSString isEqualToString:](v224->super._typeKey, "isEqualToString:", @"CurrentRotorTypeSimple"))
      {
        v175 = (CFArrayRef *)v224;
        v137 = v221;
        v176 = &OBJC_IVAR___VOTWorkspace__managedConfigurationQueue;
      }

      else
      {
        v176 = &OBJC_IVAR___VOTWorkspace__managedConfigurationQueue;
        v183 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
        v184 = (void *)objc_claimAutoreleasedReturnValue([v183 preferenceForKey:@"CurrentRotorTypeSimple"]);

        if (v184)
        {
          v185 = (int)[v184 intValue];
          v237.NSUInteger location = 0LL;
          v237.NSUInteger length = Count;
          v137 = v221;
          if (CFArrayContainsValue(v224->super._currentRotors, v237, (const void *)v185) && !sub_1000D3070(v185))
          {
            -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( v224,  "setCurrentRotorType:saveToPreferences:userInitiated:",  v185,  0LL,  0LL);
            v193 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
            v194 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v224->super._currentRotorType));
            [v193 setPreference:v194 forKey:v224->super._typeKey];

            v137 = v221;
            -[VOTElementRotor _promoteGesturedTextInputRotorIfNeeded](v224, "_promoteGesturedTextInputRotorIfNeeded");
            v171 = v184;
            if (!v139) {
              goto LABEL_327;
            }
            goto LABEL_326;
          }

          v171 = v184;
          v175 = (CFArrayRef *)v224;
        }

        else
        {
          v171 = 0LL;
          v175 = (CFArrayRef *)v224;
          v137 = v221;
        }
      }

      if (CFArrayGetCount(v175[2]) >= 1)
      {
        -[CFArrayRef setCurrentRotorType:saveToPreferences:userInitiated:]( v175,  "setCurrentRotorType:saveToPreferences:userInitiated:",  -[CFArrayRef _firstNonGesturedTextInputRotorTypeWithFallback:]( v175,  "_firstNonGesturedTextInputRotorTypeWithFallback:",  CFArrayGetValueAtIndex(v175[2], 0LL)),  0LL,  0LL);
        v188 = objc_claimAutoreleasedReturnValue([v176 + 984 rootConfiguration]);
        v189 = v175;
        v190 = (void *)v188;
        v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v189[3]));
        [v190 setPreference:v191 forKey:v189[1]];

        v192 = v189;
        goto LABEL_325;
      }

      v186 = v175;
      v187 = 3LL;
    }

    [v186 setCurrentRotorType:v187 saveToPreferences:0 userInitiated:0];
    v192 = v175;
LABEL_325:
    -[CFArrayRef _promoteGesturedTextInputRotorIfNeeded](v192, "_promoteGesturedTextInputRotorIfNeeded");
    if (!v139)
    {
LABEL_327:

      goto LABEL_328;
    }

LABEL_326:
    CFRelease(v139);
    goto LABEL_327;
  }

  -[VOTRotor setCurrentRotorType:saveToPreferences:userInitiated:]( v224,  "setCurrentRotorType:saveToPreferences:userInitiated:",  v208,  0LL,  0LL);
  v159 = v224;
LABEL_299:
  -[VOTElementRotor _promoteGesturedTextInputRotorIfNeeded](v159, "_promoteGesturedTextInputRotorIfNeeded");
  if (v139) {
LABEL_300:
  }
    CFRelease(v139);
LABEL_328:
}

BOOL sub_10009CF3C(id a1, VOTCustomAction *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[VOTCustomAction categoryName](a2, "categoryName"));
  unsigned __int8 v3 = [v2 isEqualToString:UIAccessibilityCustomActionCategoryEdit];

  return v3;
}

void sub_10009CF80(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 customPublicRotors]);
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v4 customPublicRotorName:v10]);
        __int16 v12 = v11;
        if ((*(_BYTE *)(a1 + 48)
           || ([v11 isEqualToString:@"AXCustomSystemRotorTypeMisspelledWord"] & 1) == 0)
          && [v12 length]
          && [v4 customPublicRotorIsVisibleInTouchRotor:v10]
          && ([*(id *)(a1 + 32) _customPublicRotorInRotor:v12] & 1) == 0)
        {
          v20[0] = @"uuid";
          v20[1] = @"name";
          v21[0] = v10;
          v21[1] = v12;
          unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  2LL));
          id v14 = [v13 mutableCopy];

          if (a3) {
            [v14 setObject:*(void *)(a1 + 40) forKey:@"element"];
          }
          [*(id *)(*(void *)(a1 + 32) + 72) addObject:v14];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }

    while (v7);
  }
}

id sub_10009D16C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v7 = a2;
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v7, 1LL));
  id v5 = objc_msgSend(v2, "customActionsAreValid:", v4, v7);

  return v5;
}

void sub_10009D20C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:@"VOTRotorType"]);
  if (v3)
  {
    id v6 = v3;
    id v4 = (void *)(int)[v3 intValue];
    BOOL v5 = sub_1000D35B8(*(const __CFArray **)(*(void *)(a1 + 32) + 16LL), v4) == -1;
    id v3 = v6;
    if (!v5)
    {
      sub_1000D49B0(*(const __CFArray **)(*(void *)(a1 + 32) + 16LL), v4);
      sub_1000D4904(*(__CFArray **)(*(void *)(a1 + 32) + 16LL), v4, 0LL);
      id v3 = v6;
    }
  }
}

uint64_t sub_10009D420(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  if ([v3 isValidForContext:v4])
  {
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v3 categoryName]);
    uint64_t v6 = [v5 isEqualToString:UIAccessibilityCustomActionCategoryEdit] ^ 1;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_10009D5D4(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _init];
  uint64_t v2 = (void *)qword_1001ACF38;
  qword_1001ACF38 = (uint64_t)v1;
}

void sub_10009D794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10009D7B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleSiriVoiceUpdate];
}

id sub_10009D7DC(uint64_t a1, void *a2)
{
  return [a2 _handleSiriVoiceUpdate];
}

void sub_10009E67C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) length]) {
    [*(id *)(a1 + 32) appendString:*(void *)(a1 + 40)];
  }
  uint64_t v3 = VOSLocString(v5);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4) {
    [*(id *)(a1 + 32) appendString:v4];
  }
}

void sub_10009F208(id a1)
{
  v4[0] = kVOTEventCommandHomeButtonPress;
  v4[1] = kVOTEventCommandMoveToStatusBar;
  v4[2] = kVOTEventCommandEjectButtonPress;
  v4[3] = kVOTEventCommandLeftElementCommunity;
  v4[4] = kVOTEventCommandRightElementCommunity;
  v4[5] = kVOTEventCommandShowSideApp;
  v4[6] = kVOTEventCommandPreviousContainer;
  v4[7] = kVOTEventCommandNextContainer;
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 8LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  uint64_t v3 = (void *)qword_1001ACF48;
  qword_1001ACF48 = v2;
}

void sub_10009F3C8(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTUserEventManager) init];
  uint64_t v2 = (void *)qword_1001ACF58;
  qword_1001ACF58 = (uint64_t)v1;
}

LABEL_102:
  v139 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement touchContainer](v178, "touchContainer"));
  if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  1LL))
  {
    v140 = (void *)objc_claimAutoreleasedReturnValue([v139 label]);
    v141 = sub_10004AE68(off_1001AC148, @"element.startOfLandmark.item", @"landmark", v7);
    v175 = (void *)objc_claimAutoreleasedReturnValue(v141);
    v142 = __AXStringForVariables(v140);
    v143 = (void *)objc_claimAutoreleasedReturnValue(v142);

    objc_msgSend(v8, "addObject:", v143, v175, @"__AXStringForVariablesSentinel");
    -[VOTElement setIsFirstItemInLandmark:](v178, "setIsFirstItemInLandmark:", 1LL);
LABEL_116:
    [v6 addObject:&off_1001879E8];

    goto LABEL_117;
  }

  if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v178,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  1LL))
  {
    v144 = sub_10004AE68(off_1001AC148, @"element.endOfLandmark.short.item", @"end", v7);
    v145 = (void *)objc_claimAutoreleasedReturnValue(v144);
    v176 = (void *)objc_claimAutoreleasedReturnValue([v139 label]);
    v177 = @"__AXStringForVariablesSentinel";
    v146 = __AXStringForVariables(v145);
    v143 = (void *)objc_claimAutoreleasedReturnValue(v146);

    if (v139)
    {
      while (objc_msgSend( v139,  "isElementFirstElement:orLastElement:withType:",  0,  1,  1,  v176,  v177))
      {
        v147 = (void *)objc_claimAutoreleasedReturnValue([v139 touchContainer]);
        if ([v139 isEqual:v147])
        {

          break;
        }

        v148 = sub_10004AE68(off_1001AC148, @"element.endOfLandmark.short.item", @"end", v7);
        v149 = (void *)objc_claimAutoreleasedReturnValue(v148);
        v150 = (void *)objc_claimAutoreleasedReturnValue([v147 label]);
        v151 = __AXStringForVariables(v149);
        v152 = (__CFString *)objc_claimAutoreleasedReturnValue(v151);

        uint64_t v41 = v178;
        v176 = v143;
        v177 = v152;
        v153 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@, %@"));

        v154 = v147;
        v143 = (void *)v153;
        v139 = v154;
        if (!v154)
        {
          v143 = (void *)v153;
          break;
        }
      }
    }

    objc_msgSend(v8, "addObject:", v143, v176);
    goto LABEL_116;
  }

LABEL_117:
LABEL_118:
  if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  8LL))
  {
    v157 = sub_10004AE68(off_1001AC148, @"element.startOfFieldset.item", @"form start", v7);
    v158 = (void *)objc_claimAutoreleasedReturnValue(v157);
    [v8 addObject:v158];

    -[VOTElement setIsFirstItemInFieldset:](v41, "setIsFirstItemInFieldset:", 1LL);
  }

  else
  {
    if (!-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  8LL)) {
      goto LABEL_124;
    }
    v159 = sub_10004AE68(off_1001AC148, @"element.endOfFieldset.item", @"form end", v7);
    v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
    [v8 addObject:v160];
  }

  [v6 addObject:&off_1001879E8];
LABEL_124:
  if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  0x8000LL))
  {
    v161 = sub_10004AE68(off_1001AC148, @"element.startOfDefinitionList.item", 0LL, v7);
    v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
    [v8 addObject:v162];

    -[VOTElement setIsFirstItemInDescriptionList:](v41, "setIsFirstItemInDescriptionList:", 1LL);
  }

  else
  {
    if (!-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  0x8000LL)) {
      goto LABEL_130;
    }
    v163 = sub_10004AE68(off_1001AC148, @"element.endOfDefinitionList.item", @"form end", v7);
    v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
    [v8 addObject:v164];
  }

  [v6 addObject:&off_1001879E8];
LABEL_130:
  if ([v130 containsObject:&off_100187A78])
  {
    if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  32LL))
    {
      v165 = sub_10004AE68(off_1001AC148, @"element.startOfTree.item", @"tree start", v7);
      v166 = (void *)objc_claimAutoreleasedReturnValue(v165);
      [v8 addObject:v166];

      -[VOTElement setIsFirstItemInTree:](v41, "setIsFirstItemInTree:", 1LL);
LABEL_135:
      [v6 addObject:&off_1001879E8];
      goto LABEL_136;
    }

    if (-[VOTElement isElementFirstElement:orLastElement:withType:]( v41,  "isElementFirstElement:orLastElement:withType:",  0LL,  1LL,  32LL))
    {
      v167 = sub_10004AE68(off_1001AC148, @"element.endOfTree.item", @"tree end", v7);
      v168 = (void *)objc_claimAutoreleasedReturnValue(v167);
      [v8 addObject:v168];

      goto LABEL_135;
    }
  }

LABEL_136:
  v169 = v8;
  return v169;
}

void sub_1000A1DCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v11 = a2;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v7);
  if ((objc_opt_isKindOfClass(v11, v8) & 1) != 0 && [v11 BOOLValue])
  {
    int v9 = *(void **)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "attributedSubstringFromRange:", a3, a4));
    [v9 addObject:v10];
  }
}

void sub_1000A23D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v20 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndex:a3]);
  id v6 = [v5 longLongValue];
  unint64_t v7 = (unint64_t)[v5 unsignedLongLongValue];
  if (v6 == (id)-1LL)
  {
LABEL_16:
    id v15 = [*(id *)(a1 + 40) addString:v20 withLanguage:*(void *)(a1 + 48)];
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastAction]);
    [v16 setIsVoiceOverGeneratedContent:1];

    if (*(_BYTE *)(a1 + 82))
    {
      id v11 = *(id *)(a1 + 56);
      if (([v11 containedIn:4] & 1) == 0
        && ([v11 containedIn:0x2000] & 1) == 0
        && ([v11 containedIn:2] & 1) == 0
        && ([v11 containedIn:1] & 1) == 0
        && ([v11 containedIn:8] & 1) == 0
        && ([v11 containedIn:32] & 1) == 0
        && ([v11 containedIn:16] & 1) == 0
        && ![v11 containedIn:0x8000]
        || ![v11 isElementFirstElement:1 orLastElement:1 withType:0])
      {
        goto LABEL_28;
      }

      id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastAction]);
      LODWORD(v17) = 1062836634;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17));
      [v11 setObject:v12 forVariant:32];
LABEL_27:

LABEL_28:
      goto LABEL_29;
    }

    goto LABEL_29;
  }

  if ((!*(_BYTE *)(a1 + 80) || (kAXButtonTrait & v7) == 0)
    && (!*(_BYTE *)(a1 + 81) || (kAXSelectedTrait & v7) != kAXSelectedTrait))
  {
    if (((kAXInactiveTrait | kAXSelectedTrait) & v7) != 0)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputActions]);
      id v9 = [v8 count];

      if (v9) {
        id v9 = *(id *)(a1 + 64);
      }
      id v10 =  [*(id *)(a1 + 40) addString:v20 breakWords:0 withLanguage:*(void *)(a1 + 48) atIndex:v9];
      id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputActions]);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:v9]);
      [v12 setIsVoiceOverGeneratedContent:1];
      goto LABEL_27;
    }

    if ((kAXStatusBarElementTrait & v7) == 0 || (*(_BYTE *)(a1 + 73) & 0x20) == 0)
    {
      if ((kAXLinkTrait & v7) != 0)
      {
        unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
        unsigned __int8 v14 = [v13 voiceOverLinkFeedback];

        if ((v14 & 2) != 0)
        {
          id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addString:v20 withLanguage:*(void *)(a1 + 48)]);
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastAction]);
          [v18 setIsVoiceOverGeneratedContent:1];

          if ((v14 & 4) == 0) {
            goto LABEL_35;
          }
          if (v11)
          {
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
LABEL_34:
            [v19 setObject:@"Sounds/LinkBegin.aiff" forVariant:75];

LABEL_35:
            if ((v14 & 8) != 0) {
              [v11 enumerateObjectsUsingBlock:&stru_100179410];
            }
            goto LABEL_28;
          }
        }

        else if ((v14 & 4) == 0)
        {
          id v11 = 0LL;
          goto LABEL_35;
        }

        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastAction]);
        id v11 = 0LL;
        goto LABEL_34;
      }

      goto LABEL_16;
    }
  }

void sub_1000A2718(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000A32A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000A32D0(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 objectForKey:UIAccessibilityTokenMathTreePosition]);
  if (sub_10004C730(*(void **)(a1 + 32), v7))
  {
    objc_msgSend(*(id *)(a1 + 40), "addAttribute:value:range:", kSCROSelectionAttribute, kCFBooleanTrue, a3, a4);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a3;
    v8.NSUInteger location = a3;
    v8.NSUInteger length = a4;
    if (NSIntersectionRange(v8, *(NSRange *)*(void *)(a1 + 64)).length) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_1000A4730( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_1000A4758(uint64_t result)
{
  return result;
}

void sub_1000A488C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v24 = a2;
  unint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 40) + a3;
  unint64_t v9 = *(void *)(a1 + 56);
  BOOL v10 = v8 < v7 || v8 - v7 >= v9;
  if (!v10)
  {
    BOOL v10 = v8 >= v7;
    uint64_t v11 = v8 - v7;
    if (v10) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0LL;
    }
    if (v12 + a4 > v9) {
      a4 = v9 - v12;
    }
    if ([(id)VOTSharedWorkspace brailleFormattingEnabled])
    {
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:UIAccessibilityTokenBold]);
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber, v14);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:UIAccessibilityTokenItalic]);
      uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSNumber, v17);
      if ((objc_opt_isKindOfClass(v16, v18) & 1) != 0 && [v16 BOOLValue]) {
        objc_msgSend( *(id *)(a1 + 32),  "addAttribute:value:range:",  kSCROItalicTextAttribute,  &__kCFBooleanTrue,  v12,  a4);
      }
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:UIAccessibilityTokenUnderline]);
      uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSNumber, v20);
      if ((objc_opt_isKindOfClass(v19, v21) & 1) != 0 && [v19 BOOLValue]) {
        objc_msgSend( *(id *)(a1 + 32),  "addAttribute:value:range:",  kSCROUnderlineTextAttribute,  &__kCFBooleanTrue,  v12,  a4);
      }
    }

    double v22 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:UIAccessibilityInlineTextCompletion]);
    if (v22) {
      objc_msgSend( *(id *)(a1 + 32),  "addAttribute:value:range:",  kSCROSuggestionTextAttribute,  &__kCFBooleanTrue,  v12,  a4);
    }
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:UIAccessibilityTokenAttachment]);
    if (v23) {
      objc_msgSend(*(id *)(a1 + 32), "addAttribute:value:range:", UIAccessibilityTokenAttachment, v23, v12, a4);
    }
  }
}

LABEL_46:
  id v45 = (void *)objc_claimAutoreleasedReturnValue([v302 elementHeadersForOutput]);
  uint64_t v46 = [v45 count] == 0;

  if (!v46) {
    -[VOTElement applyHeaderElementsToRequest:](self, "applyHeaderElementsToRequest:", v302);
  }
  if ((a4 & 0x4000000) != 0) {
    -[VOTElement applyRowHeadersToRequest:](self, "applyRowHeadersToRequest:", v302);
  }
  if ((a4 & 0x800000) != 0)
  {
    char v47 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement contextDescriptors](self, "contextDescriptors"));
    int v48 = [v47 count] == 0;

    if (!v48)
    {
      v327 = 0u;
      v328 = 0u;
      v325 = 0u;
      v326 = 0u;
      unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement contextDescriptors](self, "contextDescriptors"));
      uint64_t v50 = [v49 countByEnumeratingWithState:&v325 objects:v342 count:16];
      if (v50)
      {
        BOOL v51 = *(void *)v326;
        do
        {
          for (i = 0LL; i != v50; i = (char *)i + 1)
          {
            if (*(void *)v326 != v51) {
              objc_enumerationMutation(v49);
            }
            id v53 = *(void **)(*((void *)&v325 + 1) + 8LL * (void)i);
            v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:@"category"]);
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:@"value"]);
            uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:@"isDefault"]);
            char v57 = [v56 BOOLValue];

            unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue([v304 objectForKeyedSubscript:v54]);
            v59 = [v58 isEqualToString:v55];
            if (v58) {
              id v60 = 0;
            }
            else {
              id v60 = v57;
            }
            if (((v59 | v60) & 1) == 0)
            {
              v61 = [v302 addString:v55];
              if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
              {
                v62 = (void *)objc_claimAutoreleasedReturnValue([v302 lastAction]);
                LODWORD(v63) = 1062836634;
                id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v63));
                [v62 setObject:v64 forVariant:32];
              }
            }
          }

          uint64_t v50 = [v49 countByEnumeratingWithState:&v325 objects:v342 count:16];
        }

        while (v50);
      }
    }
  }

  if ((a4 & 0x10008) == 0x10008 && !-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXPickerElementTrait)) {
    -[VOTElement _applySelectedTrait:language:](self, "_applySelectedTrait:language:", v302, v297);
  }
  __int16 v65 = a4 & 0x2000000000LL;
  if (v294)
  {
    uint64_t v66 = [v302 numberOfActions];
    if ((a4 & 0x1000000000LL) != 0) {
      v67 = 1LL;
    }
    else {
      v67 = v65 >> 36;
    }
    -[VOTElement _applyLabelToRequest:includeBlockQuote:language:isWebLanguageChoice:interactOption:]( self,  "_applyLabelToRequest:includeBlockQuote:language:isWebLanguageChoice:interactOption:",  v302,  (a4 >> 17) & 1,  v297,  v329,  v67);
    v68 = (uint64_t)[v302 numberOfActions] > (uint64_t)v66;
    *((_BYTE *)v335 + 24) = v68;
    v69 = [v302 containsActions];
    if ((a4 & 0x80) != 0 && [(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      v70 = (void *)objc_claimAutoreleasedReturnValue([v302 lastAction]);
      LODWORD(v71) = 1062836634;
      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v71));
      [v70 setObject:v72 forVariant:32];
    }

    if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXKeyboardKeyTrait))
    {
      v73 = (void *)objc_claimAutoreleasedReturnValue([v302 lastAction]);
      [v73 setObject:&__kCFBooleanTrue forVariant:58];
    }

    -[VOTElement _applyCustomContent:language:](self, "_applyCustomContent:language:", v302, v297);
  }

  else
  {
    v69 = 0;
  }

  if ((a4 & 0x400000000LL) == 0)
  {
    v74 = (void *)objc_claimAutoreleasedReturnValue([v293 customAction]);
    -[VOTElement _applyStickyCustomActions:customAction:language:]( self,  "_applyStickyCustomActions:customAction:language:",  v302,  v74,  v297);
  }

  if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXMathEquationTrait))
  {
    v75 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement mathSummary](self, "mathSummary"));
    if ([v75 length]) {
      v76 = [v302 addString:v75];
    }
    v77 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement mathEquationDescription](self, "mathEquationDescription"));
    v78 = [v302 addAttributedString:v77];
  }

  if (((v69 | v294 ^ 1) & 1) == 0)
  {
    v79 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self, "value"));
    if (![v79 length])
    {
      v80 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement hint](self, "hint"));
      v81 = [v80 length] == 0;

      if (v81) {
        goto LABEL_91;
      }
      v79 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement hint](self, "hint"));
      v82 = [v302 addString:v79 withLanguage:v297];
      v83 = (void *)objc_claimAutoreleasedReturnValue([v302 lastAction]);
      [v83 setIsVoiceOverGeneratedContent:1];

      v288 = 0;
    }
  }

LABEL_91:
  v84 = -[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXImageTrait);
  if (v84)
  {
    v85 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement photoDescription](self, "photoDescription"));
    if ([v85 length]) {
      v86 = [v302 addString:v85 withLanguage:v297];
    }
  }

  if ((([v302 containsActions] | v84 ^ 1) & 1) == 0)
  {
    v87 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
    v88 = [v87 determineFullImageDescriptionsEnabled:self];

    if ((v88 & 1) == 0)
    {
      v89 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement identifier](self, "identifier"));
      if ([v89 length]) {
        v90 = [v302 addString:v89];
      }
    }
  }

  if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", v296))
  {
    -[VOTElement _applyCurrentStatus:language:](self, "_applyCurrentStatus:language:", v302, v297);
    -[VOTElement _applySortDirection:language:](self, "_applySortDirection:language:", v302, v297);
    -[VOTElement _applyDatetimeAttribute:language:](self, "_applyDatetimeAttribute:language:", v302, v297);
  }

  v91 = -[VOTElement traits](self, "traits");
  v93 = 0;
  if ((kAXIsEditingTrait & v91) == 0)
  {
    v92 = -[VOTElement traits](self, "traits");
    if ((kAXWebInteractiveVideoTrait & v92) == 0) {
      v93 = 1;
    }
  }

  v322[0] = _NSConcreteStackBlock;
  v322[1] = 3221225472LL;
  v322[2] = sub_1000A7734;
  v322[3] = &unk_1001794D8;
  v322[4] = self;
  v322[5] = &v334;
  v322[6] = &v330;
  v323 = v294;
  v324 = v292;
  v290 = objc_retainBlock(v322);
  v317[0] = _NSConcreteStackBlock;
  v317[1] = 3221225472LL;
  v317[2] = sub_1000A78D8;
  v317[3] = &unk_100179500;
  v321 = (a4 & 0x10000000) != 0;
  v317[4] = self;
  v303 = v302;
  v318 = v303;
  v320 = a4;
  v298 = v297;
  v319 = v298;
  v295 = objc_retainBlock(v317);
  if (v93)
  {
    if (v292)
    {
      v94 = [v303 numberOfActions];
      -[VOTElement _applyValueToRequest:options:lastSeenLineAndColumn:language:]( self,  "_applyValueToRequest:options:lastSeenLineAndColumn:language:",  v303,  a4,  v289,  v298);
      v95 = (uint64_t)[v303 numberOfActions] > (uint64_t)v94;
      *((_BYTE *)v331 + 24) = v95;
    }

    if ((a4 & 0x800000000LL) == 0) {
      ((void (*)(void))v290[2])();
    }
    ((void (*)(void))v295[2])();
    if (v291) {
      -[VOTElement _applyTraitsToRequest:options:numHeaderActions:language:]( self,  "_applyTraitsToRequest:options:numHeaderActions:language:",  v303,  a4,  v286,  v298);
    }
  }

  else
  {
    if (v291) {
      -[VOTElement _applyTraitsToRequest:options:numHeaderActions:language:]( self,  "_applyTraitsToRequest:options:numHeaderActions:language:",  v303,  a4,  v286,  v298);
    }
    if (v292)
    {
      v96 = [v303 numberOfActions];
      -[VOTElement _applyValueToRequest:options:lastSeenLineAndColumn:language:]( self,  "_applyValueToRequest:options:lastSeenLineAndColumn:language:",  v303,  a4,  v289,  v298);
      v97 = (uint64_t)[v303 numberOfActions] > (uint64_t)v96;
      *((_BYTE *)v331 + 24) = v97;
    }

    ((void (*)(void))v290[2])();
    ((void (*)(void))v295[2])();
  }

  v98 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  v99 = (unint64_t)[v98 voiceOverLinkFeedback];

  if ((-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXLinkTrait) & (v99 >> 3) & 1) == 1 && (v99 & 2) == 0)
  {
    v100 = (void *)objc_claimAutoreleasedReturnValue([v303 outputActions]);
    [v100 enumerateObjectsUsingBlock:&stru_100179520];
  }

  if ((a4 & 0x1000000) != 0
    || [(id)VOTSharedWorkspace navigationStyleHonorsGroups]
    && -[VOTElement includeRoleOnlyForGroupNavigation](self, "includeRoleOnlyForGroupNavigation")
    && -[VOTElement isAccessibleGroup](self, "isAccessibleGroup"))
  {
    if ((a4 & 0x1000000000LL) != 0)
    {
      v102 = [v303 containsActions];
      if (v65) {
        v103 = v102;
      }
      else {
        v103 = 0;
      }
      if ((v103 & 1) == 0)
      {
        v101 = v102 ^ 1;
        goto LABEL_136;
      }
    }

    else if (!v65)
    {
      v101 = 0LL;
LABEL_136:
      -[VOTElement _applyRoleDescription:language:interactOption:]( self,  "_applyRoleDescription:language:interactOption:",  v303,  v298,  v101);
      goto LABEL_137;
    }

    else {
      v101 = 2LL;
    }
    goto LABEL_136;
  }

LABEL_149:
  if (-[VOTElement doesHaveTraits:](self, "doesHaveTraits:", v296, v284)) {
    -[VOTElement _applyHasPopupAttribute:withLanguage:](self, "_applyHasPopupAttribute:withLanguage:", v303, v298);
  }
  if (-[VOTElement isRequired](self, "isRequired"))
  {
    v122 = sub_10004AE68(off_1001AC148, @"element.required", 0LL, v298);
    v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
    v124 = [v303 addString:v123 withLanguage:v298];

    v125 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
    [v125 setIsVoiceOverGeneratedContent:1];
  }

  if (-[VOTElement shouldAnnounceTableInfo](self, "shouldAnnounceTableInfo")
    && -[VOTElement isElementFirstElement:orLastElement:withType:]( self,  "isElementFirstElement:orLastElement:withType:",  1LL,  0LL,  2LL))
  {
    -[VOTElement applyTableDimension:language:](self, "applyTableDimension:language:", v303, v298);
  }

  if ((a4 & 0x10008) == 0x10008 && -[VOTElement doesHaveTraits:](self, "doesHaveTraits:", kAXPickerElementTrait)) {
    -[VOTElement _applySelectedTrait:language:](self, "_applySelectedTrait:language:", v303, v298);
  }
  if (v291)
  {
    -[VOTElement _applyExpandedStatus:language:](self, "_applyExpandedStatus:language:", v303, v298);
    -[VOTElement _applyLinkRelationshipType:language:](self, "_applyLinkRelationshipType:language:", v303, v298);
  }

  v126 = self;
  v127 = v126;
  if (!-[VOTElement doesHaveTraits:](v126, "doesHaveTraits:", v296))
  {
LABEL_171:

    goto LABEL_172;
  }

  v128 = -[VOTElement doesHaveTraits:]( v126,  "doesHaveTraits:",  kAXRadioButtonTrait | kAXTextEntryTrait | kAXToggleTrait);

  if (v128)
  {
    v129 = v126;
    if (v129)
    {
      v127 = v129;
      while ([v127 doesHaveTraits:v296])
      {
        v130 = (void *)objc_claimAutoreleasedReturnValue([v127 invalidStatus]);
        if ([v130 length]
          && ([v130 isEqualToString:@"false"] & 1) == 0)
        {
          [v127 _applyInvalidStatus:v303 language:v298];

          goto LABEL_171;
        }

        v131 = objc_claimAutoreleasedReturnValue([v127 directParent]);

        v127 = (void *)v131;
        if (!v131) {
          goto LABEL_171;
        }
      }

      goto LABEL_171;
    }
  }

LABEL_172:
  if ((a4 & 0x20000000) == 0) {
    -[VOTElement applyTextEditingInformation:request:options:]( v126,  "applyTextEditingInformation:request:options:",  v298,  v303,  a4);
  }
  if ((a4 & 0x8000) != 0)
  {
    v132 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement scrollStatus](v126, "scrollStatus"));
    if (v132)
    {
      v133 = [v303 addString:v132];
      if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
      {
        v134 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v134 setObject:&off_1001873B0 forVariant:32];
      }
    }
  }

  -[VOTElement applyCVMLGeneratedContentToRequest:explicitUserRequest:]( v126,  "applyCVMLGeneratedContentToRequest:explicitUserRequest:",  v303,  0LL);
  if (v288 && [(id)VOTSharedWorkspace hintsEnabled])
  {
    v135 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement hint](v126, "hint"));
    if ([v135 length]
      && (v136 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v126, "label")),
          v137 = [v135 isEqualToString:v136],
          v136,
          (v137 & 1) == 0))
    {
      if ([(id)VOTSharedWorkspace brailleInputActive])
      {
        v140 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
        v141 = (void *)objc_claimAutoreleasedReturnValue([v140 languageCode]);
        v142 = [v141 hasPrefix:@"en"];

        if (v142)
        {
          v143 = objc_claimAutoreleasedReturnValue( [v135 stringByReplacingOccurrencesOfString:@"Double tap to" withString:@"Tap Dots 3 6 to"]);

          v135 = (void *)v143;
        }
      }

      if ([v135 isAXAttributedString])
      {
        LODWORD(v144) = 1061997773;
        [v303 addPause:v144];
        v145 = [v303 addAttributedString:v135 withLanguage:v298];
      }

      else
      {
        LODWORD(v144) = 1061997773;
        [v303 addPause:v144];
        v147 = [v303 addString:v135 withLanguage:v298];
      }

      v146 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v146 setIsVoiceOverGeneratedContent:1];

      v138 = 1;
    }

    else
    {
      v138 = 0;
    }

    v148 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement instructions](v126, "instructions"));
    if ([v148 length])
    {
      if ((v138 & 1) == 0)
      {
        LODWORD(v149) = 1061997773;
        [v303 addPause:v149];
      }

      v150 = [v303 addString:v148 withLanguage:v298];
      v151 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v151 setIsVoiceOverGeneratedContent:1];

      v138 = 1;
    }

    v139 = v138 != 0;
  }

  else
  {
    v139 = 0;
  }

  v152 = -[VOTElement mapFeatureType](v126, "mapFeatureType");
  v153 = -[VOTElement suppressCustomActionHint](v126, "suppressCustomActionHint");
  v154 = v153;
  v155 = v152 != (id)1;
  if (AXDeviceSupportsSonification(v153))
  {
    if ((a4 & 0x100000000LL) != 0
      && (-[VOTElement supportsAudiographActions](v126, "supportsAudiographActions")
       || -[VOTElement supportsAudiographs](v126, "supportsAudiographs")))
    {
      if ([(id)VOTSharedWorkspace hintsEnabled]
        && (v156 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]),
            v157 = (void *)objc_claimAutoreleasedReturnValue([v156 elementRotor]),
            v158 = [v157 currentRotorType] == (id)59,
            v157,
            v156,
            v158))
      {
        v159 = sub_10004AE68(off_1001AC150, @"audiograph.actions.hint", 0LL, v298);
        v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
        v161 = [v303 addString:v160 withLanguage:v298];

        v162 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v162 setIsVoiceOverGeneratedContent:1];
      }

      else
      {
        v163 = sub_10004AE68(off_1001AC150, @"audiograph.actions.hint.short", 0LL, v298);
        v164 = (void *)objc_claimAutoreleasedReturnValue(v163);
        v165 = [v303 addString:v164 withLanguage:v298];

        v162 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v162 setIsVoiceOverGeneratedContent:1];
      }
    }

    if ((a4 & 0x4000000000LL) != 0
      && (-[VOTElement supportsAudiographActions](v126, "supportsAudiographActions")
       || -[VOTElement supportsAudiographs](v126, "supportsAudiographs")))
    {
      v166 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement chartStructureDescription](v126, "chartStructureDescription"));
      if ([v166 length]) {
        v167 = [v303 addString:v166];
      }
    }
  }

  v168 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customRotorActions](v126, "customRotorActions"));
  v169 = [v168 count] == 0;

  if (!v169)
  {
    if (!v139)
    {
      LODWORD(v170) = 1061997773;
      [v303 addPause:v170];
    }

    *(void *)&buf = 0LL;
    *((void *)&buf + 1) = &buf;
    v340 = 0x2020000000LL;
    v341 = 0LL;
    v171 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customRotorActions](v126, "customRotorActions"));
    v316[0] = _NSConcreteStackBlock;
    v316[1] = 3221225472LL;
    v316[2] = sub_1000A7930;
    v316[3] = &unk_100179488;
    v316[4] = &buf;
    [v171 enumerateObjectsUsingBlock:v316];

    v172 = -[VOTElement doesHaveTraits:](v126, "doesHaveTraits:", kAXLaunchIconTrait);
    v173 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v174 = [v173 voiceOverActionsFeedback];

    v175 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v176 = [v175 voiceOverActionsFeedback];

    v177 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v178 = [v177 voiceOverActionsFeedback];

    v179 = (void *)objc_claimAutoreleasedReturnValue([v293 previousElement]);
    v180 = -[VOTElement _ignoreCustomActionIndicator:withElement:]( v126,  "_ignoreCustomActionIndicator:withElement:",  v179,  v126);

    if ((v174 & 2) != 0) {
      v181 = v180;
    }
    else {
      v181 = 1;
    }
    if ((v176 & 8) != 0) {
      v182 = v180;
    }
    else {
      v182 = 1;
    }
    if ((v178 & 4) != 0) {
      v183 = v180;
    }
    else {
      v183 = 1;
    }
    v184 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
    v185 = (void *)objc_claimAutoreleasedReturnValue([v184 elementRotor]);
    v186 = [v185 currentRotorType] == (id)48;

    if (v186)
    {
      if ([(id)VOTSharedWorkspace hintsEnabled])
      {
        v187 = [(id)VOTSharedWorkspace brailleInputActive];
        v188 = @"custom.actions.hint";
        if (v187) {
          v188 = @"custom.actions.hint.bsi.command";
        }
      }

      else
      {
        v188 = @"custom.actions.hint.short";
      }

      v190 = v188;
      if ((v183 & 1) != 0 || ![v303 containsActions])
      {
        if (((v172 | v181) & 1) != 0) {
          goto LABEL_246;
        }
        v192 = sub_10004AE68(off_1001AC150, v190, 0LL, v298);
        v193 = (void *)objc_claimAutoreleasedReturnValue(v192);
        v194 = [v303 addString:v193 withLanguage:v298];

        v195 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v195 setIsVoiceOverGeneratedContent:1];

        if ((v182 & 1) != 0) {
          goto LABEL_246;
        }
        v191 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v191 setObject:&off_1001873B0 forVariant:32];
      }

      else
      {
        v191 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v191 setObject:@"Sounds/ActionsAvailable.aiff" forVariant:75];
      }
    }

    else
    {
      if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2) {
        v189 = v172;
      }
      else {
        v189 = 1;
      }
      if ((v189 & 1) != 0
        || !*(void *)(*((void *)&buf + 1) + 24LL)
        && (-[VOTElement isAccessibleGroup](v126, "isAccessibleGroup") || !*(void *)(*((void *)&buf + 1) + 24LL)))
      {
        goto LABEL_247;
      }

      if ((v183 & 1) == 0 && [v303 containsActions])
      {
        [v303 addSound:@"Sounds/ActionsAvailable.aiff"];
LABEL_247:
        _Block_object_dispose(&buf, 8);
        v139 = 1;
        goto LABEL_248;
      }

      if ((v181 & 1) != 0) {
        goto LABEL_247;
      }
      v273 = sub_10004AE68(off_1001AC150, @"custom.actions.hint.short", 0LL, v298);
      v274 = (void *)objc_claimAutoreleasedReturnValue(v273);
      v275 = [v303 addString:v274 withLanguage:v298];

      v276 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v276 setIsVoiceOverGeneratedContent:1];

      if ((v182 & 1) != 0) {
        goto LABEL_247;
      }
      v190 = (__CFString *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      -[__CFString setObject:forVariant:](v190, "setObject:forVariant:", &off_1001873B0, 32LL);
    }

LABEL_246:
    goto LABEL_247;
  }

LABEL_248:
  v301 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customPublicRotors](v126, "customPublicRotors"));
  if ([(id)VOTSharedWorkspace hintsEnabled] && objc_msgSend(v301, "count"))
  {
    if (!v139)
    {
      LODWORD(v196) = 1061997773;
      [v303 addPause:v196];
    }

    v197 = (void *)objc_claimAutoreleasedReturnValue([v301 firstObject]);
    v198 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customPublicRotorName:](v126, "customPublicRotorName:", v197));

    if ((id)+[VOTRotor rotorTypeForSystemRotorType:](&OBJC_CLASS___VOTRotor, "rotorTypeForSystemRotorType:", v198) == (id)9)
    {
      v199 = (void *)objc_claimAutoreleasedReturnValue([v301 firstObject]);
      v200 = (id)-[VOTElement customPublicRotorLinkCountForRotor:](v126, "customPublicRotorLinkCountForRotor:", v199) == (id)1;

      if (v200)
      {
        v201 = sub_10004AE68(off_1001AC148, @"element.link.text", @"link", v298);
        v202 = (void *)objc_claimAutoreleasedReturnValue(v201);
        v203 = off_1001AC150;
        else {
          v204 = @"element.containing.single.link.hint";
        }
        v205 = sub_10004AE68(v203, v204, 0LL, v298);
        v206 = objc_claimAutoreleasedReturnValue(v205);
        -[VOTElement _configureAsSingleLinkElementWithRequest:linkTraitTitle:hint:]( v126,  "_configureAsSingleLinkElementWithRequest:linkTraitTitle:hint:",  v303,  v202,  v206 & ((uint64_t)(a4 << 30) >> 63));
        goto LABEL_275;
      }
    }

    if ((a4 & 0x200000000LL) != 0)
    {
      v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      v314 = 0u;
      v315 = 0u;
      v312 = 0u;
      v313 = 0u;
      v207 = v301;
      v208 = [v207 countByEnumeratingWithState:&v312 objects:v338 count:16];
      if (!v208) {
        goto LABEL_272;
      }
      v209 = *(void *)v313;
      while (1)
      {
        for (j = 0LL; j != v208; j = (char *)j + 1)
        {
          if (*(void *)v313 != v209) {
            objc_enumerationMutation(v207);
          }
          v211 = *(void *)(*((void *)&v312 + 1) + 8LL * (void)j);
          if (-[VOTElement customPublicRotorIsVisibleInTouchRotor:]( v126,  "customPublicRotorIsVisibleInTouchRotor:",  v211))
          {
            v212 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customPublicRotorName:](v126, "customPublicRotorName:", v211));

            v213 = +[VOTRotor rotorTypeForSystemRotorType:]( &OBJC_CLASS___VOTRotor,  "rotorTypeForSystemRotorType:",  v212);
            if (!v213)
            {
              v198 = v212;
              if (!v212) {
                continue;
              }
LABEL_269:
              [v202 addObject:v198];
              continue;
            }

            v198 = (void *)objc_claimAutoreleasedReturnValue(+[VOTRotor stringForRotorType:](&OBJC_CLASS___VOTRotor, "stringForRotorType:", v213));

            if (v198) {
              goto LABEL_269;
            }
          }
        }

        v208 = [v207 countByEnumeratingWithState:&v312 objects:v338 count:16];
        if (!v208)
        {
LABEL_272:

          v214 = sub_10004AE68(off_1001AC150, @"custom.rotor.items.hint", 0LL, v298);
          v206 = objc_claimAutoreleasedReturnValue(v214);
          v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v202, "componentsJoinedByString:", @", "));
          if ([v215 length])
          {
            v216 = AXCFormattedString(v206, @"%@");
            v217 = (void *)objc_claimAutoreleasedReturnValue(v216);
            v218 = objc_msgSend(v303, "addString:withLanguage:", v217, v298, v215);

            v219 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
            [v219 setIsVoiceOverGeneratedContent:1];
          }

LABEL_275:
          break;
        }
      }
    }
  }

LABEL_278:
  if (-[VOTElement doesHaveTraits:](v126, "doesHaveTraits:", v296))
  {
    v220 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v221 = [v220 BOOLWithAXAttribute:2227];

    if (v221)
    {
      v222 = sub_10004AE68(off_1001AC148, @"element.insertion.text", 0LL, v298);
      v223 = (void *)objc_claimAutoreleasedReturnValue(v222);
      v224 = [v303 addString:v223 breakWords:0 withLanguage:v298 atIndex:0];

      v225 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v225 setIsVoiceOverGeneratedContent:1];
    }

    v226 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v227 = [v226 BOOLWithAXAttribute:2228];

    if (v227)
    {
      v228 = sub_10004AE68(off_1001AC148, @"element.deletion.text", 0LL, v298);
      v229 = (void *)objc_claimAutoreleasedReturnValue(v228);
      v230 = [v303 addString:v229 breakWords:0 withLanguage:v298 atIndex:0];

      v231 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v231 setIsVoiceOverGeneratedContent:1];
    }

    v232 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v233 = [v232 BOOLWithAXAttribute:2225];

    if (v233)
    {
      v234 = sub_10004AE68(off_1001AC148, @"element.startOfSuggestion.item", 0LL, v298);
      v235 = (void *)objc_claimAutoreleasedReturnValue(v234);
      v236 = [v303 addString:v235 breakWords:0 withLanguage:v298 atIndex:0];

      v237 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v237 setIsVoiceOverGeneratedContent:1];
    }

    v238 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v239 = [v238 BOOLWithAXAttribute:2226];

    if (v239)
    {
      v240 = sub_10004AE68(off_1001AC148, @"element.endOfSuggestion.item", 0LL, v298);
      v241 = (void *)objc_claimAutoreleasedReturnValue(v240);
      v242 = [v303 addString:v241];

      v243 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v243 setIsVoiceOverGeneratedContent:1];
    }

    v244 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v245 = [v244 BOOLWithAXAttribute:2230];

    if (v245)
    {
      v246 = sub_10004AE68(off_1001AC148, @"highlighted", 0LL, v298);
      v247 = (void *)objc_claimAutoreleasedReturnValue(v246);
      v248 = [v303 addString:v247];

      v249 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v249 setIsVoiceOverGeneratedContent:1];
    }

    v250 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](v126, "uiElement"));
    v251 = (void *)objc_claimAutoreleasedReturnValue([v293 previousElement]);
    v252 = (void *)objc_claimAutoreleasedReturnValue([v251 uiElement]);
    v253 = [v252 BOOLWithAXAttribute:2237];

    if ((v253 & 1) == 0)
    {
      v254 = sub_10004AE68(off_1001AC148, @"element.contenteditable.start", 0LL, v298);
      v255 = (void *)objc_claimAutoreleasedReturnValue(v254);
      v256 = [v303 addString:v255];

      v250 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
      [v250 setIsVoiceOverGeneratedContent:1];
LABEL_292:
    }
  }

  v257 = [(id)VOTSharedWorkspace moreContentOutputFeedback];
  v258 = (char)v257;
  if (v257 != (id)1)
  {
    v259 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customContent](v126, "customContent"));
    v260 = [v259 count] == 0;

    if (!v260)
    {
      *(void *)&buf = 0LL;
      *((void *)&buf + 1) = &buf;
      v340 = 0x2020000000LL;
      LOBYTE(v341) = 0;
      v261 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customContent](v126, "customContent"));
      v311[0] = _NSConcreteStackBlock;
      v311[1] = 3221225472LL;
      v311[2] = sub_1000A7948;
      v311[3] = &unk_100179548;
      v311[4] = &buf;
      [v261 enumerateObjectsUsingBlock:v311];

      if (*(_BYTE *)(*((void *)&buf + 1) + 24LL) && (v258 & 2) != 0)
      {
        v262 = sub_10004AE68(off_1001AC148, @"more.custom.content.available", 0LL, v298);
        v263 = (void *)objc_claimAutoreleasedReturnValue(v262);
        v264 = [v303 addString:v263 withLanguage:v298];
        v265 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
        [v265 setIsVoiceOverGeneratedContent:1];

        if ((v258 & 8) != 0)
        {
          v266 = (void *)objc_claimAutoreleasedReturnValue([v303 lastAction]);
          [v266 setObject:&off_1001873B0 forVariant:32];
        }
      }

      if ((v258 & 4) != 0)
      {
        v267 = (void *)objc_claimAutoreleasedReturnValue([v303 outputActions]);
        v268 = (void *)objc_claimAutoreleasedReturnValue([v267 firstObject]);
        [v268 setObject:@"Sounds/MoreContentAvailable.aiff" forVariant:75];
      }

      _Block_object_dispose(&buf, 8);
    }
  }

  v309[0] = _NSConcreteStackBlock;
  v309[1] = 3221225472LL;
  v309[2] = sub_1000A798C;
  v309[3] = &unk_100176DA8;
  v309[4] = v126;
  v269 = v303;
  v310 = v269;
  v270 = objc_retainBlock(v309);
  v272 = v270;
  if ((a4 & 0x400) != 0)
  {
    LODWORD(v271) = 1061997773;
    [v269 addPause:v271];
    v305[0] = _NSConcreteStackBlock;
    v305[1] = 3221225472LL;
    v305[2] = sub_1000A7B84;
    v305[3] = &unk_1001795B8;
    v306 = v269;
    v307 = v298;
    v308 = v272;
    -[VOTElement regionDescriptionWithCompletion:](v126, "regionDescriptionWithCompletion:", v305);
  }

  else
  {
    ((void (*)(void *))v270[2])(v270);
  }

  _Block_object_dispose(&v330, 8);
  _Block_object_dispose(&v334, 8);
}

void sub_1000A75D8(_Unwind_Exception *a1)
{
}

void sub_1000A7734(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isTouchContainer];
  if (([*(id *)(a1 + 32) doesHaveTraits:kAXBackButtonTrait] & 1) != 0
    || ([*(id *)(a1 + 32) doesHaveTraits:kAXTextEntryTrait] & 1) != 0)
  {
    unsigned int v3 = 1;
  }

  else
  {
    unsigned int v3 = [*(id *)(a1 + 32) doesHaveTraits:kAXKeyboardKeyTrait];
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)
    || *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    unsigned int v4 = !+[VOTVisionEngine elementNeedsAdditionalDescription:]( &OBJC_CLASS___VOTVisionEngine,  "elementNeedsAdditionalDescription:",  *(void *)(a1 + 32));
  }

  else
  {
    unsigned int v4 = 0;
  }

  unsigned int v5 = [*(id *)(a1 + 32) doesHaveTraits:kAXPlaysSoundTrait];
  if (((v2 | v3) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (((v4 | v5) & 1) != 0) {
        return;
      }
LABEL_16:
      BOOL v10 = objc_opt_new(&OBJC_CLASS___VOTVisionOptions);
      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
      -[VOTVisionOptions setIncludeFullImageDescriptionsForValidElements:]( v10,  "setIncludeFullImageDescriptionsForValidElements:",  [v7 determineFullImageDescriptionsEnabled:*(void *)(a1 + 32)]);

      unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
      -[VOTVisionOptions setIncludeSceneDetection:]( v10,  "setIncludeSceneDetection:",  [v8 determineSceneDetectionsEnabled:*(void *)(a1 + 32)]);

      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace visionEngine]);
      [v9 analyzeElement:*(void *)(a1 + 32) withOptions:v10];

      return;
    }

    if (*(_BYTE *)(a1 + 57)) {
      int v6 = v4;
    }
    else {
      int v6 = 1;
    }
    if (((v6 | v5) & 1) == 0) {
      goto LABEL_16;
    }
  }

id *sub_1000A78D8(id *result)
{
  if (!*((_BYTE *)result + 64))
  {
    id v1 = result;
    $85E40A55691FE2F31975A98F57E3065D result = (id *)[result[4] shouldAnnounceTableInfo];
    if ((_DWORD)result) {
      return (id *)[v1[4] announceTableInfo:v1[5] options:v1[7] language:v1[6]];
    }
  }

  return result;
}

void sub_1000A791C(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

uint64_t sub_1000A7930(uint64_t result)
{
  return result;
}

id sub_1000A7948(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 importance];
  if (result != (id)1)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_1000A798C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
  uint64_t v3 = AXLanguageCanonicalFormToGeneralLanguage(v2);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v3);

  if ([*(id *)(a1 + 32) doesHaveTraits:kAXStatusBarElementTrait])
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputActions]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000A7AF4;
    v10[3] = &unk_100179570;
    id v11 = v8;
    [v4 enumerateObjectsUsingBlock:v10];
  }

  if ([*(id *)(a1 + 32) isReadingContent])
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputActions]);
    [v5 enumerateObjectsUsingBlock:&stru_100179590];
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) textualContext]);
  if (v6)
  {
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) outputActions]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1000A7B74;
    v9[3] = &unk_100178CF0;
    v9[4] = v6;
    [v7 enumerateObjectsUsingBlock:v9];
  }
}

void sub_1000A7AF4(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForVariant:15]);
  LOBYTE(a1) = [v3 hasPrefix:*(void *)(a1 + 32)];

  if ((a1 & 1) == 0) {
    [v4 setObject:&stru_10017A920 forVariant:16];
  }
}

void sub_1000A7B5C(id a1, id a2, unint64_t a3, BOOL *a4)
{
}

id sub_1000A7B74(uint64_t a1, void *a2)
{
  return [a2 setObject:*(void *)(a1 + 32) forVariant:79];
}

void sub_1000A7B84(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 length])
  {
    id v3 = [*(id *)(a1 + 32) addString:v5 withLanguage:*(void *)(a1 + 40)];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastAction]);
    [v4 setIsVoiceOverGeneratedContent:1];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

BOOL sub_1000A7E1C(id a1, VOTCustomAction *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  unsigned __int8 v6 = -[VOTCustomAction isMemberOfClass:]( v4,  "isMemberOfClass:",  objc_opt_class(&OBJC_CLASS___VOTCustomAction, v5));

  return v6;
}

BOOL sub_1000A7E64(id a1, VOTCustomAction *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  unsigned __int8 v6 = -[VOTCustomAction isMemberOfClass:]( v4,  "isMemberOfClass:",  objc_opt_class(&OBJC_CLASS___VOTCustomAction, v5));

  return v6;
}

LABEL_58:
}

void sub_1000A92AC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double v8 = a2;
  if (CGRectIsNull(*(CGRect *)&a2))
  {
    [*(id *)(a1 + 32) frame];
    double v8 = v10;
    a3 = v11;
    a4 = v12;
    a5 = v13;
  }

  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "regionDescriptionWithFrame:", v8, a3, a4, a5));
  (*(void (**)(uint64_t, id))(v14 + 16))(v14, v15);
}

void sub_1000AA844(void *a1, double a2, double a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 handInfo]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v5 paths]);

  if ([v7 count] == (id)1)
  {
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndex:0]);
    objc_msgSend(v6, "setPathLocation:", a2, a3);
  }
}

void sub_1000AB27C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
}

BOOL sub_1000AB2F4(id a1)
{
  return 0;
}

void sub_1000AB2FC(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[VOTEvent appleTVRemoteEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "appleTVRemoteEventWithCommand:info:",  kVOTEventCommandReadScreenSummary,  0LL));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained elementManager]);
  [v3 handleEvent:v4];
}

void sub_1000AB370(id a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidBeginPassthrough](&OBJC_CLASS___VOSOutputEvent, "DidBeginPassthrough"));
  [v2 sendEvent:v1];
}

id sub_1000AB3CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained elementManager]);
  id v3 = [v2 handleTVSelectButtonClicked];

  return v3;
}

id sub_1000AB418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained elementManager]);
  id v3 = [v2 handleTVMenuButtonClicked];

  return v3;
}

id sub_1000AB464(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleRotorChangedNotification:a2];
}

id sub_1000AB470(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleBSIStateChangedNotification:a2];
}

void sub_1000AB47C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateDelayUntilSpeakUnderTouch];
}

void sub_1000AB4A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTapSpeedFromPreferences];
}

void sub_1000AB4D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateVoiceOverHandGesturesActionCustomizations];
}

double sub_1000AB630(unint64_t a1)
{
  double v2 = *(double *)&qword_1001ACFC0;
  if (*(double *)&qword_1001ACFC0 == 0.0)
  {
    if (mach_timebase_info(&info))
    {
      double v2 = *(double *)&qword_1001ACFC0;
    }

    else
    {
      LODWORD(v3) = info.numer;
      LODWORD(v4) = info.denom;
      double v2 = (double)v3 / (double)v4 * 0.000000001;
      qword_1001ACFC0 = *(void *)&v2;
    }
  }

  return v2 * (double)a1;
}

id sub_1000AC1C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetEventFactory];
}

uint64_t sub_1000AC5F8(uint64_t result)
{
  for (uint64_t i = 728LL; i != 743; i += 5LL)
  {
    *(_BYTE *)(*(void *)(result + 32) + i) = 0;
    *(_BYTE *)(*(void *)(result + 32) + i + 3) = 0;
  }

  return result;
}

uint64_t sub_1000ACEE8(uint64_t result, int a2)
{
  *(_BYTE *)(*(void *)(result + 32) + 8++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2 != 0;
  return result;
}

void sub_1000AD3D0(_Unwind_Exception *a1)
{
}

void sub_1000AD400(id a1, AXEventRepresentation *a2)
{
  unint64_t v4 = a2;
  if (-[AXEventRepresentation type](v4, "type") == 3001)
  {
    BKSHIDServicesCancelTouchesOnMainDisplay();
    double v2 = (void *)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation cancelEventForPathIndexMask:]( &OBJC_CLASS___AXEventRepresentation,  "cancelEventForPathIndexMask:",  -[AXEventRepresentation pathIndexMask](v4, "pathIndexMask")));
    unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
    [v3 sendHIDSystemEvent:v2 senderID:0x8000000817319373];
  }
}

id sub_1000AD494(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = objc_autoreleasePoolPush();
  if (*(_BYTE *)(a1 + 40))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v6 = [WeakRetained _audioAccessoryEventFilter:v3];
  }

  else
  {
    int v7 = *(unsigned __int8 *)(a1 + 41);
    id v8 = objc_loadWeakRetained((id *)(a1 + 32));
    id WeakRetained = v8;
    if (v7) {
      id v6 = [v8 _atvEventFilter:v3];
    }
    else {
      id v6 = [v8 _iosEventFilter:v3];
    }
  }

  id v9 = v6;

  objc_autoreleasePoolPop(v4);
  return v9;
}

void sub_1000AD608(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zoomCurrentLensMode]);
  unsigned int v5 = [v4 isEqualToString:AXZoomLensModeFullscreen];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:ZWAttributeKeyZoomLevel]);
    [v6 floatValue];
    int v8 = v7;

    id v9 = (NSString *)objc_claimAutoreleasedReturnValue([v15 objectForKey:ZWAttributeKeyZoomFrame]);
    CGRect v16 = CGRectFromString(v9);
    CGFloat x = v16.origin.x;
    CGFloat y = v16.origin.y;
    CGFloat width = v16.size.width;
    CGFloat height = v16.size.height;

    *(CGFloat *)&xmmword_1001ACF90 = x;
    *((CGFloat *)&xmmword_1001ACF90 + 1) = y;
    qword_1001ACFA0 = *(void *)&width;
    unk_1001ACFA8 = *(void *)&height;
  }

  else
  {
    CGSize size = CGRectNull.size;
    xmmword_1001ACF90 = (__int128)CGRectNull.origin;
    *(CGSize *)&qword_1001ACFA0 = size;
    int v8 = 0;
  }

  dword_1001ACF68 = v8;
  [*(id *)(a1 + 32) _commitDeferredZoomInfoIfAppropriate];
}

id sub_1000AD734(uint64_t a1, void *a2)
{
  return [a2 _registerForZoomListener];
}

void sub_1000ADEF8()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  [(id)VOTSharedWorkspace handleSystemWideServerDied];
  objc_autoreleasePoolPop(v0);
}

void sub_1000ADF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = objc_autoreleasePoolPush();
  if ((int)a3 <= 1030)
  {
    if ((int)a3 > 1018)
    {
      if ((_DWORD)a3 == 1019)
      {
        [(id)VOTSharedWorkspace resetSystemBatteryLowState];
        goto LABEL_24;
      }

      if ((_DWORD)a3 == 1028)
      {
        [v8 _handleEventWithData:a4];
        goto LABEL_24;
      }
    }

    else
    {
      if ((_DWORD)a3 == 1011)
      {
        [(id)VOTSharedWorkspace handleOrientationChanged];
        [v8 updateOrientation];
        goto LABEL_24;
      }

      if ((_DWORD)a3 == 1015)
      {
        [(id)VOTSharedWorkspace handleReturnToSpringBoard];
        goto LABEL_24;
      }
    }

    goto LABEL_22;
  }

  if ((int)a3 <= 1050)
  {
    if ((_DWORD)a3 == 1031)
    {
      [v8 _handleKeyboardVisibilityChanged:a4];
      goto LABEL_24;
    }

    if ((_DWORD)a3 == 1045)
    {
      [v8 _handleElementPreviewNotification:a4];
      double v10 = (void *)objc_claimAutoreleasedReturnValue([v8 elementManager]);
      [v10 handleNotification:1045 withData:a4 forElement:0];
LABEL_23:

      goto LABEL_24;
    }

LABEL_131:
    int v48 = (id)v46;
    v88 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v9 eventForTouchGesture:v48 resolver:v88]);
    goto LABEL_132;
  }

  BOOL v51 = self->_fingerCount;
  if (v51 != 1)
  {
    if (v51 == 3) {
      v70 = (char)v23;
    }
    else {
      v70 = 1;
    }
    if ((v70 & 1) != 0)
    {
      if (v51 == 2) {
        v71 = (char)v23;
      }
      else {
        v71 = 1;
      }
      if ((v71 & 1) != 0)
      {
        if (v51 == 4) {
          v72 = (char)v23;
        }
        else {
          v72 = 1;
        }
        if ((v72 & 1) != 0) {
          goto LABEL_135;
        }
        v73 = (void *)objc_claimAutoreleasedReturnValue(+[VOSGesture FourFingerTripleTap](&OBJC_CLASS___VOSGesture, "FourFingerTripleTap"));
        v74 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v9 eventForTouchGesture:v73 resolver:v74]);

        if (v40) {
          goto LABEL_133;
        }
        IsPad = (uint64_t)[(id)VOTSharedWorkspace isInternalInstall];
        if ((_DWORD)IsPad)
        {
          v75 = AXPidForLaunchLabel(@"com.apple.mediaserverd");
          if ((v75 & 0x80000000) != 0)
          {
            v97 = VOTLogCommon(v75);
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v97);
            if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_ERROR)) {
              sub_1000F3FB0();
            }
            goto LABEL_134;
          }

          IsPad = kill(v75, 15);
        }

        goto LABEL_135;
      }

      uint64_t v46 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerTripleTap](&OBJC_CLASS___VOSGesture, "TwoFingerTripleTap"));
    }

    else
    {
      uint64_t v46 = objc_claimAutoreleasedReturnValue(+[VOSGesture ThreeFingerTripleTap](&OBJC_CLASS___VOSGesture, "ThreeFingerTripleTap"));
    }

    goto LABEL_131;
  }

  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v53 = [v52 voiceOverIsIdle];

  if (v53)
  {
    v54 = &kVOTEventCommandWatchWakeTripleTap;
LABEL_122:
    IsPad = objc_claimAutoreleasedReturnValue( +[VOTEvent internalEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "internalEventWithCommand:info:",  *v54,  0LL));
LABEL_149:
    uint64_t v40 = (void *)IsPad;
    if (!IsPad) {
      goto LABEL_135;
    }
    goto LABEL_133;
  }

  int v48 = [objc_allocWithZone(AXIndexMap) init];
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v12, v14));
  [v48 setObject:v87 forIndex:101];

  uint64_t v50 = objc_claimAutoreleasedReturnValue(+[VOSGesture OneFingerTripleTap](&OBJC_CLASS___VOSGesture, "OneFingerTripleTap"));
LABEL_144:
  v88 = (void *)v50;
  v96 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v9 eventForTouchGesture:v88 resolver:v96 info:v48]);

LABEL_132:
  if (v40)
  {
LABEL_133:
    -[VOTEventFactory processEvent:](self, "processEvent:", v40);
LABEL_134:
  }

LABEL_135:
  v89 = VOTLogEvent(IsPad, v36);
  v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    v91 = self->_fingerCount;
    v92 = @"UP";
    *(_DWORD *)v98 = 134218498;
    if ((_DWORD)v23) {
      v92 = @"DOWN";
    }
    *(void *)&v98[4] = v91;
    v99 = 2048;
    v100 = v17;
    v101 = 2114;
    v102 = v92;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEBUG,  "fingerCount: %ld tapCount: %ld %{public}@",  v98,  0x20u);
  }

  -[SCRCTargetSelectorTimer cancel](self->_wakeTapTimer, "cancel", *(void *)v98);
  self->_watchWakeTapCount = 0LL;
  -[NSMutableArray removeAllObjects](self->_snarfedWatchWakeRecords, "removeAllObjects");
LABEL_139:
}

id sub_1000B14F4(uint64_t a1)
{
  double v2 = (CGPoint **)(a1 + 32);
  *(CGPoint *)(*(void *)(a1 + 32) + 56LL) = CGPointZero;
  (*v2)[3].CGFloat x = CFAbsoluteTimeGetCurrent();
  unsigned int v5 = *v2;
  double v6 = 1.0;
  if (!*((_BYTE *)v2 + 24))
  {
    if (*(_BYTE *)(a1 + 57)) {
      double v6 = *(double *)(a1 + 48);
    }
    else {
      double v6 = 0.0;
    }
  }

  *(void *)&v5[2].CGFloat x = v2[1];
  v5[2].CGFloat y = v6;
  uint64_t v7 = VOTLogEvent(v3, v4);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_1000F40AC(v2);
  }

  return -[CGPoint _transitionToGestureState:](*v2, "_transitionToGestureState:", 1LL);
}

LABEL_273:
                v217 = (void *)v105;
                v218 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
                v219 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v217 resolver:v218]);

                CGRect v33 = 0;
                CGRect v32 = (void *)v219;
                goto LABEL_274;
              }

              goto LABEL_177;
            }

            v151 = v32;
            -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
            if (v196 >= 0.0) {
              v153 = objc_claimAutoreleasedReturnValue(+[VOSGesture ThreeFingerFlickRight](&OBJC_CLASS___VOSGesture, "ThreeFingerFlickRight"));
            }
            else {
              v153 = objc_claimAutoreleasedReturnValue(+[VOSGesture ThreeFingerFlickLeft](&OBJC_CLASS___VOSGesture, "ThreeFingerFlickLeft"));
            }
            goto LABEL_262;
          }

          CGRect v33 = 0;
          if (v235 == (id)4 && !v18)
          {
            if (v17 != 5)
            {
              if (v17 == 6)
              {
                v103 = (void *)v30;
                -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
                if (v104 >= 0.0) {
                  v105 = objc_claimAutoreleasedReturnValue(+[VOSGesture FourFingerFlickUp](&OBJC_CLASS___VOSGesture, "FourFingerFlickUp"));
                }
                else {
                  v105 = objc_claimAutoreleasedReturnValue(+[VOSGesture FourFingerFlickDown](&OBJC_CLASS___VOSGesture, "FourFingerFlickDown"));
                }
                goto LABEL_273;
              }

LABEL_177:
              CGRect v33 = 0;
LABEL_203:
              v158 = objc_loadWeakRetained((id *)&self->_rotorManager);
              [v158 hideVisualRotor];

              if (!self->_flags.sendingToNativeSlide) {
                goto LABEL_213;
              }
              v232 = v33;
              v159 = v17;
              self->_flags.sendingToNativeSlide = 0;
              v160 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
              v161 = (void *)objc_claimAutoreleasedReturnValue(-[VOTGestureEvent eventRepresentation](self->_currentGestureEvent, "eventRepresentation"));
              [v160 repostEvent:v161];
              goto LABEL_205;
            }

            v151 = (void *)v30;
            -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
            if (v152 >= 0.0) {
              v153 = objc_claimAutoreleasedReturnValue(+[VOSGesture FourFingerFlickRight](&OBJC_CLASS___VOSGesture, "FourFingerFlickRight"));
            }
            else {
              v153 = objc_claimAutoreleasedReturnValue(+[VOSGesture FourFingerFlickLeft](&OBJC_CLASS___VOSGesture, "FourFingerFlickLeft"));
            }
LABEL_262:
            v203 = (void *)v153;
            v204 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
            v205 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v203 resolver:v204]);

            CGRect v33 = 0;
            CGRect v32 = (void *)v205;
            uint64_t v17 = 5LL;
            goto LABEL_203;
          }

LABEL_201:
          if (v18 != (id)1)
          {
            if (v18) {
              goto LABEL_213;
            }
            goto LABEL_203;
          }

          v232 = v33;
          v222 = v32;
          v226 = v16;
          v159 = v17;
          v160 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory currentElement](self, "currentElement"));
          v162 = (void *)objc_claimAutoreleasedReturnValue([v5 eventRepresentation]);
          v163 = (void *)objc_claimAutoreleasedReturnValue([v162 handInfo]);
          v164 = (void *)objc_claimAutoreleasedReturnValue([v163 paths]);
          v165 = (void *)objc_claimAutoreleasedReturnValue([v164 firstPath]);
          [v165 pathLocation];
          v167 = v166;
          v169 = v168;

          if ([v160 doesHaveTraits:kAXAllowsNativeSlidingTrait])
          {
            [v160 frame];
            v238.CGFloat x = v167;
            v238.CGFloat y = v169;
            CGRect v32 = v222;
            CGRect v16 = v226;
            if (CGRectContainsPoint(v239, v238) && CFAbsoluteTimeGetCurrent() - self->_lastNativeSlideCancel > 1.0)
            {
              self->_flags.sendingToNativeSlide = 1;
              v161 = (void *)objc_claimAutoreleasedReturnValue(-[VOTGestureEvent eventRepresentation](self->_currentGestureEvent, "eventRepresentation"));
              v170 = (void *)objc_claimAutoreleasedReturnValue([v161 handInfo]);
              v171 = (void *)objc_claimAutoreleasedReturnValue([v170 paths]);
              v172 = (void *)objc_claimAutoreleasedReturnValue([v171 firstPath]);
              [v172 pathLocation];
              self->_nativeSlidingOffset.CGFloat x = v173;
              self->_nativeSlidingOffset.CGFloat y = v174;

              CGRect v32 = v222;
              CGRect v16 = v226;

              [v160 centerPoint];
              self->_nativeSlidingCenter.CGFloat x = v175;
              self->_nativeSlidingCenter.CGFloat y = v176;
              sub_1000AA844(v161, v175, v176);
              v177 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
              [v177 repostEvent:v161];

LABEL_205:
            }
          }

          else
          {
            CGRect v32 = v222;
            CGRect v16 = v226;
          }

          uint64_t v17 = v159;
          CGRect v33 = v232;
LABEL_213:
          if (!v32)
          {
            handwritingOnlCGFloat y = 0;
            goto LABEL_231;
          }

          -[SCRCGestureFactory velocity](self->_gestureFactory, "velocity");
          objc_msgSend(v32, "setTouchVelocity:");
          v178 = [v32 setFingerCount:v235];
          v180 = VOTLogEvent(v178, v179);
          v181 = (os_log_s *)objc_claimAutoreleasedReturnValue(v180);
          v182 = os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG);
          if (!v6)
          {
            if (v182) {
              sub_1000F412C();
            }

            -[VOTEventFactory processEvent:](self, "processEvent:", v32);
            goto LABEL_230;
          }

          if (v182) {
            sub_1000F4184();
          }

          v183 = [v6 processEvent:v32];
          v184 = v183;
          if (qword_1001ACFB8 == -1)
          {
            if ((v183 & 1) == 0)
            {
LABEL_219:
              v185 = (void *)qword_1001ACFB0;
              v186 = (void *)objc_claimAutoreleasedReturnValue([v32 command]);
              if ([v185 containsObject:v186])
              {
              }

              else
              {
                handwritingOnlCGFloat y = self->_flags.handwritingOnly;

                if (!handwritingOnly) {
                  goto LABEL_231;
                }
              }

              v190 = VOTLogEvent(v187, v188);
              v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v190);
              if (os_log_type_enabled(v191, OS_LOG_TYPE_DEBUG)) {
                sub_1000F4158();
              }

              -[VOTEventFactory processEvent:](self, "processEvent:", v32);
            }
          }

          else
          {
            dispatch_once(&qword_1001ACFB8, &stru_100179858);
            if ((v184 & 1) == 0) {
              goto LABEL_219;
            }
          }

          v192 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _handwritingCaptureTimer](self, "_handwritingCaptureTimer"));
          [v192 cancel];

LABEL_230:
          handwritingOnlCGFloat y = 1;
LABEL_231:
          v193 = (int64_t)v234;
          if (v16 == (id)2) {
            v193 = (int64_t)v235;
          }
          self->_fingerCount = v193;
          if (v193) {
            goto LABEL_236;
          }
          if (self->_flags.tapAndHoldMode) {
            goto LABEL_235;
          }
          if (v16)
          {
            if (self->_state == 2) {
              v195 = v33;
            }
            else {
              v195 = 1;
            }
            if ((v195 & 1) != 0)
            {
LABEL_236:
              if (handwritingOnly) {
                -[VOTEventFactory setLastGestureEvent:](self, "setLastGestureEvent:", v32);
              }
              goto LABEL_238;
            }
          }

          else if ((v33 & 1) != 0)
          {
            goto LABEL_236;
          }

LABEL_235:
          -[SCRCGestureFactory rawLocation](self->_gestureFactory, "rawLocation");
          -[VOTEventFactory _processIdle:](self, "_processIdle:", sub_10004AFD4(v194));
          goto LABEL_236;
        }

        if (!v18 && self->_flags.twoFingerTapAndSlide)
        {
          self->_flags.twoFingerTapAndSlide = 0;
          self->_volumeChangeDistance = 0.0;
LABEL_279:
          CGRect v33 = 0;
          self->_zigzag.direction = 0LL;
          self->_zigzag.count = 0LL;
          self->_zigzag.continuityDistance = 0.0;
          goto LABEL_201;
        }

        v106 = self->_zigzag.count;
        if (v106 > 2 || v106 == 2 && fabs(self->_zigzag.continuityDistance) > 0.05)
        {
          CGFloat y = self->_zigzag.firstCountPoint.y;
          -[SCRCGestureFactory rawLocation](self->_gestureFactory, "rawLocation");
          if (vabdd_f64(y, v108) > 0.3)
          {
            CGRect v33 = 0;
            self->_zigzag.count = 0LL;
            self->_zigzag.continuityDistance = 0.0;
            goto LABEL_201;
          }

          v147 = (void *)objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerScrub](&OBJC_CLASS___VOSGesture, "TwoFingerScrub"));
          v148 = v32;
          v149 = v17;
          v150 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
          v231 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v147 resolver:v150]);

          uint64_t v17 = v149;
          CGRect v32 = (void *)v231;
          goto LABEL_279;
        }

        if (v17 == 5)
        {
          v142 = 5LL;
          -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
          if (v197 >= 0.0) {
            v198 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerFlickRight](&OBJC_CLASS___VOSGesture, "TwoFingerFlickRight"));
          }
          else {
            v198 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerFlickLeft](&OBJC_CLASS___VOSGesture, "TwoFingerFlickLeft"));
          }
        }

        else
        {
          if (v17 != 6) {
            goto LABEL_279;
          }
          -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
          v140 = v139;
          v141 = -[VOTDirectInteractionKeyboardManager inGestureMode]( self->_directInteractionKeyboardManager,  "inGestureMode");
          v142 = 6LL;
          if (v140 >= 0.0)
          {
            if (v141)
            {
              v143 = &kVOTEventCommandGestureTypingPreviousKeyplane;
              goto LABEL_260;
            }

            v198 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerFlickUp](&OBJC_CLASS___VOSGesture, "TwoFingerFlickUp"));
          }

          else
          {
            if (v141)
            {
              v143 = &kVOTEventCommandGestureTypingNextKeyplane;
LABEL_260:
              v202 = objc_claimAutoreleasedReturnValue( +[VOTEvent touchEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "touchEventWithCommand:info:",  *v143,  0LL));

              CGRect v32 = (void *)v202;
LABEL_278:
              uint64_t v17 = v142;
              goto LABEL_279;
            }

            v198 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerFlickDown](&OBJC_CLASS___VOSGesture, "TwoFingerFlickDown"));
          }
        }

        v220 = (void *)v198;
        v221 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
        v233 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v220 resolver:v221]);

        CGRect v32 = (void *)v233;
        goto LABEL_278;
      case 0x10uLL:
        if (self->_flags.splitSlide) {
          goto LABEL_200;
        }
        CGRect v33 = 0;
        self->_flags.splitSlide = 1;
        self->_splitSlideFingerCount = (unint64_t)v18;
        goto LABEL_201;
      case 0x13uLL:
        if (self->_flags.splitSlide)
        {
          v79 = objc_alloc_init(&OBJC_CLASS___AXIndexMap);
          -[SCRCGestureFactory startLocation](self->_gestureFactory, "startLocation");
          v81 = v80;
          v83 = v82;
          -[SCRCGestureFactory endLocation](self->_gestureFactory, "endLocation");
          v85 = v84;
          v87 = v86;
          v88 = +[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", sub_10004AFD4((v81 + v84) * 0.5));
          v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
          -[AXIndexMap setObject:forIndex:](v79, "setObject:forIndex:", v89, 101LL);

          v92 = VOTLogEvent(v90, v91);
          v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG)) {
            sub_1000F43CC((uint64_t)self, v93);
          }

          v236 = 0LL;
          *(void *)buf = 0LL;
          SCRCMathGetVectorAndDistanceForPoints(buf, &v236, v81, v83, v85, v87);
          if (self->_splitSlideFingerCount == 2 && v17 == 5)
          {
            v223 = v79;
            -[SCRCGestureFactory distance](self->_gestureFactory, "distance");
            if (v94 >= 0.0) {
              v95 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerSplitFlickRight](&OBJC_CLASS___VOSGesture, "TwoFingerSplitFlickRight"));
            }
            else {
              v95 = objc_claimAutoreleasedReturnValue(+[VOSGesture TwoFingerSplitFlickLeft](&OBJC_CLASS___VOSGesture, "TwoFingerSplitFlickLeft"));
            }
            v112 = (void *)v95;
            v113 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
            v114 = v112;
            v115 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v112 resolver:v113]);

            CGRect v32 = (void *)v115;
            v79 = v223;
            uint64_t v17 = 5LL;
          }

          self->_flags.splitSlide = 0;
          self->_flags.handwritingOnlCGFloat y = 1;
          self->_splitSlideFingerCount = 0LL;
        }

        goto LABEL_200;
      case 0x14uLL:
        if (self->_flags.splitFlick) {
          goto LABEL_200;
        }
        CGRect v33 = 0;
        self->_flags.splitFlick = 1;
        goto LABEL_201;
      case 0x15uLL:
        if (!self->_flags.splitFlick) {
          goto LABEL_200;
        }
        v96 = VOTLogEvent(v30, v31);
        v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG)) {
          sub_1000F4348(v17);
        }

        v229 = v17;
        switch(v17)
        {
          case 1LL:
            v98 = objc_claimAutoreleasedReturnValue(+[VOSGesture OneFingerSplitFlickLeft](&OBJC_CLASS___VOSGesture, "OneFingerSplitFlickLeft"));
            goto LABEL_148;
          case 2LL:
            v98 = objc_claimAutoreleasedReturnValue(+[VOSGesture OneFingerSplitFlickRight](&OBJC_CLASS___VOSGesture, "OneFingerSplitFlickRight"));
            goto LABEL_148;
          case 3LL:
            v98 = objc_claimAutoreleasedReturnValue(+[VOSGesture OneFingerSplitFlickUp](&OBJC_CLASS___VOSGesture, "OneFingerSplitFlickUp"));
            goto LABEL_148;
          case 4LL:
            v98 = objc_claimAutoreleasedReturnValue(+[VOSGesture OneFingerSplitFlickDown](&OBJC_CLASS___VOSGesture, "OneFingerSplitFlickDown"));
LABEL_148:
            v116 = (void *)v98;
            v117 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEventFactory _commandResolver](self, "_commandResolver"));
            v118 = v116;
            v119 = objc_claimAutoreleasedReturnValue([v8 eventForTouchGesture:v116 resolver:v117]);

            CGRect v32 = (void *)v119;
            uint64_t v17 = v229;
            break;
          default:
            break;
        }

        CGRect v33 = 0;
        *(_WORD *)&self->_flags.splitFlick = 256;
        goto LABEL_201;
      default:
        v99 = VOTLogEvent(v30, v31);
        v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG)) {
          sub_1000F41B0((uint64_t)v16, v17, v100);
        }

        goto LABEL_200;
    }
  }

  if ([v5 fingerCount]) {
    self->_travelDistance = v15 + self->_travelDistance;
  }
  -[VOTEventFactory _processTapAndHoldMode:](self, "_processTapAndHoldMode:", v5);
LABEL_239:
}

void sub_1000B2E64(id a1)
{
  v4[0] = kVOTEventCommandSearchRotorLeft;
  v4[1] = kVOTEventCommandSearchRotorRight;
  v4[2] = kVOTEventCommandEscape;
  v4[3] = kVOTEventCommandCut;
  v4[4] = kVOTEventCommandCopy;
  v4[5] = kVOTEventCommandPaste;
  v4[6] = kVOTEventCommandUndo;
  v4[7] = kVOTEventCommandRedo;
  void v4[8] = kVOTEventCommandPreviousTextSegment;
  v4[9] = kVOTEventCommandNextTextSegment;
  v4[10] = kVOTEventCommandPreviousTextSegmentType;
  v4[11] = kVOTEventCommandNextTextSegmentType;
  v4[12] = kVOTEventCommandSelectLeft;
  v4[13] = kVOTEventCommandSelectRight;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v4, 14LL));
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v1));
  uint64_t v3 = (void *)qword_1001ACFB0;
  qword_1001ACFB0 = v2;
}

void sub_1000B30E0(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 848)] & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 32) copyWithCache];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void **)(v3 + 848);
    *(void *)(v3 + 84_Block_object_dispose(&STACK[0x270], 8) = v2;
  }

void sub_1000B31E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000B31FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B320C(uint64_t a1)
{
}

void sub_1000B3214(uint64_t a1)
{
}

void sub_1000B3F8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000B3FB4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 560LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  [v2 addObject:v3];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 560LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 44)));
  [v4 addObject:v5];
}

void sub_1000B4048(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained[22];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSValue valueWithPoint:]( &OBJC_CLASS___NSValue,  "valueWithPoint:",  *(double *)(a1 + 40),  *(double *)(a1 + 48)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 64)));
  double v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
  objc_msgSend( WeakRetained,  "performSelector:withThreadKey:count:objects:",  "_startTouchDownForTapAndHoldActionWithCenter:force:altitude:azimuth:",  v2,  4,  v3,  v4,  v5,  v6);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v7 removeVOSEventFinishedHandler:@"PassThroughHandler"];
}

void sub_1000B4D84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B4D9C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 560) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000B5B6C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) directInteractionKeyboardManager]);
  [v1 updateTypingMode];
}

id sub_1000B6514(uint64_t a1)
{
  return [*(id *)(a1 + 32) _liftPreviewFinger];
}

id sub_1000B6850(uint64_t a1)
{
  return [*(id *)(a1 + 32) _liftPreviewFinger];
}

void sub_1000B6C44(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 560LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  [v2 addObject:v3];

  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 560LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 44)));
  [v4 addObject:v5];
}

id sub_1000B749C(uint64_t a1)
{
  return [*(id *)(a1 + 32) processEvent:*(void *)(a1 + 40)];
}

id sub_1000B7584(uint64_t a1)
{
  return [*(id *)(a1 + 32) processEvent:*(void *)(a1 + 40)];
}

void sub_1000B7954( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000B7968( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000B881C(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTBrailleManager) init];
  id v2 = (void *)qword_1001ACFC8;
  qword_1001ACFC8 = (uint64_t)v1;
}

void sub_1000B8F9C(_Unwind_Exception *a1)
{
}

id sub_1000B8FE4(uint64_t a1, void *a2, uint64_t a3)
{
  return [a2 performSelector:"handleSettingsChange:" withObject:a3 afterDelay:0.5];
}

id sub_1000B8FFC(uint64_t a1, void *a2)
{
  return [a2 performSelector:"updatePrefersNonBlinkingCursorIndicatorPrefs" withObject:0 afterDelay:0.5];
}

void sub_1000B9014(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleInputSettings];
}

void sub_1000B9040(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleInputSettings];
}

void sub_1000B906C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateBrailleOutputSettings];
}

void sub_1000B9098(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateOnscreenKeyboardSettings];
}

void sub_1000B90C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStatusCellPrefs];
}

void sub_1000B90F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStatusCellPrefs];
}

void sub_1000B911C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateWordWrapPrefs];
}

void sub_1000B9148(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateBrailleKeyDebouncePrefs];
}

void sub_1000B9174(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend( WeakRetained,  "setTestingHasActiveDisplay:",  objc_msgSend(v1, "voiceOverTouchUpdateBrailleWithoutConnectedDisplay"));
}

void sub_1000B91CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateBrailleAutoAdvancePrefs];
}

id sub_1000B9414(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = VOTLogBraille(a1, a2, a3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received SCRODisplayConfigurationChangedNotification.",  v7,  2u);
  }

  return [a2 handleBrailleConfigurationChanged:&__kCFBooleanTrue];
}

BOOL sub_1000B9F98(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = VOSBrailleTableForRotorItem(a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replacements]);
  BOOL v7 = [v6 count] == 0;

  return v7;
}

BOOL sub_1000BBBC0(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = VOSBrailleTableForRotorItem(a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replacements]);
  BOOL v7 = [v6 count] == 0;

  return v7;
}

uint64_t sub_1000BCF4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000BD024;
  v7[3] = &unk_100179A50;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000BD00C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000BD024(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id result = [a2 BOOLValue];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a5 = 1;
  }

  return result;
}

uint64_t sub_1000BD064(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000BD13C;
  v7[3] = &unk_100179A50;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000BD124( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000BD13C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (a2)
  {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a5 = 1;
  }

  return result;
}

uint64_t sub_1000BD158(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  uint64_t v4 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000BD230;
  v7[3] = &unk_100179A50;
  v7[4] = &v8;
  objc_msgSend(v4, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, objc_msgSend(v4, "length"), 0, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);

  return v5;
}

void sub_1000BD218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000BD230(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id result = [a2 intValue];
  if ((int)result >= 1)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a5 = 1;
  }

  return result;
}

LABEL_78:
  uint64_t v56 = [v64 length];
  if (v56)
  {
    char v57 = v56;
    unsigned __int8 v58 = kSCROTokenAttribute;
    v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  self->_brailleElementIndex));
    objc_msgSend(v64, "addAttribute:value:range:", v58, v59, 0, v57);
  }

LABEL_81:
  -[VOTBrailleManager _setBrailleString:type:timeout:priority:langCode:brailleLineRangeValue:]( self,  "_setBrailleString:type:timeout:priority:langCode:brailleLineRangeValue:",  v21,  &off_100188258,  0LL,  0LL,  0LL,  0LL);
  self->_lastBraillePanDirection = -1;
  self->_lastRefreshTrigger = 0;
}

      uint64_t v46 = objc_alloc(&OBJC_CLASS___AXIPCMessage);
      BOOL v51 = @"result";
      char v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v8));
      uint64_t v52 = v47;
      int v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL));
      unsigned int v49 = [v46 initWithKey:7000 payload:v48];

      return v49;
    default:
      uint64_t v12 = 0LL;
      goto LABEL_78;
  }

void sub_1000BED50(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"VOTBrailleDisplayActiveStateChanged" object:0];
}

void sub_1000BF234(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 keyString]);
  if (v2) {
    id v3 = (__CFString *)v2;
  }
  else {
    id v3 = &stru_10017A920;
  }
  int v34 = v1;
  unsigned int v4 = [v1 modifiers];
  if (-[__CFString length](v3, "length")) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == kBRLTBrailleKeyboardKeyModifierNull;
  }
  if (!v5)
  {
    int v6 = kBRLTBrailleKeyboardKeyModifierShift;
    int v7 = kBRLTBrailleKeyboardKeyModifierShift & v4;
    int v8 = ((kBRLTBrailleKeyboardKeyModifierCommand & ~v4) == 0) | (8
                                                                * ((kBRLTBrailleKeyboardKeyModifierShift & v4) == kBRLTBrailleKeyboardKeyModifierShift));
    if ((kBRLTBrailleKeyboardKeyModifierOption & ~v4) == 0) {
      v8 |= 2u;
    }
    if ((kBRLTBrailleKeyboardKeyModifierControl & ~v4) == 0) {
      v8 |= 4u;
    }
    if ((kBRLTBrailleKeyboardKeyModifierSecondaryFn & ~v4) == 0) {
      v8 |= 0x40u;
    }
    unsigned int v33 = v8;
    if (-[__CFString length](v3, "length"))
    {
      id v9 = (char *)-[__CFString length](v3, "length");
      if (v9)
      {
        uint64_t v10 = v9;
        char v11 = 0LL;
        uint64_t v12 = 0LL;
        double v13 = v9 - 1;
        do
        {
          uint64_t v14 = v3;
          id v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString substringWithRange:](v3, "substringWithRange:", v12, 1LL));
          CGRect v16 = v15;
          if (v7 == v6) {
            uint64_t v17 = (__CFString *)objc_claimAutoreleasedReturnValue([v15 uppercaseString]);
          }
          else {
            uint64_t v17 = v15;
          }
          uint64_t v18 = v17;

          if (v12 < v13)
          {
            __int128 v19 = (char *)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount];
            [(id)VOTSharedWorkspace setSuppressValueChangeNotificationCount:v19 + 1];
            uint64_t v20 = (char *)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
            [(id)VOTSharedWorkspace setSuppressSelectionChangeNotificationCount:v20 + 1];
          }

          objc_msgSend( (id)VOTSharedWorkspace,  "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:",  v18,  v16,  v33,  (unsigned __int16)objc_msgSend(v34, "keyCode"));

          ++v12;
          char v11 = v18;
          id v3 = v14;
        }

        while (v10 != v12);
      }

      else
      {
        uint64_t v18 = 0LL;
      }
    }

    else
    {
      if (v7 == v6) {
        uint64_t v21 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString uppercaseString](v3, "uppercaseString"));
      }
      else {
        uint64_t v21 = v3;
      }
      uint64_t v18 = v21;
      objc_msgSend( (id)VOTSharedWorkspace,  "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:",  v21,  v3,  v33,  (unsigned __int16)objc_msgSend(v1, "keyCode"));
    }

    double v22 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemBrailleHardware sharedInstance]( &OBJC_CLASS___AXSubsystemBrailleHardware,  "sharedInstance"));
    unsigned __int8 v23 = [v22 ignoreLogging];

    if ((v23 & 1) == 0)
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemBrailleHardware identifier](&OBJC_CLASS___AXSubsystemBrailleHardware, "identifier"));
      uint64_t v25 = AXLoggerForFacility(v24);
      int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);

      os_log_type_t v27 = AXOSLogLevelFromAXLogLevel(2LL);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = AXColorizeFormatLog(2LL, @"Posting braille keys: %{private}@");
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        unsigned __int8 v30 = v3;
        uint64_t v31 = _AXStringForArgs(v29);
        CGRect v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v26, v27))
        {
          *(_DWORD *)buf = 138543362;
          CGRect v36 = v32;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}@", buf, 0xCu);
        }

        id v3 = v30;
      }
    }
  }
}

LABEL_37:
            if ((v14 & 1) != 0) {
              goto LABEL_38;
            }
LABEL_45:
            if (-[SCROBrailleClient displayMode](self->_brailleClient, "displayMode") - 4 <= 0xFFFFFFFD)
            {
              unsigned __int8 v23 = [objc_allocWithZone(AXIndexMap) init];
              [v23 setObject:v7 forIndex:104];
              id v24 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent brailleEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "brailleEventWithCommand:info:",  v11,  v23));
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
              int v26 = [v25 helpEnabled];

              if (v26)
              {
                if (([v11 isEqualToString:kVOTEventCommandBraillePanRight] & 1) != 0
                  || ([v11 isEqualToString:kVOTEventCommandBraillePanLeft] & 1) != 0
                  || ([v11 isEqualToString:kVOTEventCommandBraillePanBeginning] & 1) != 0
                  || [v11 isEqualToString:kVOTEventCommandBraillePanEnd]
                  || [v11 isEqualToString:kVOTEventCommandEscape]
                  && (os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper")),
                      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 practiceElement]),
                      uint64_t v29 = v28 == 0LL,
                      v28,
                      v27,
                      v29))
                {
                  [v24 setBypassHelp:1];
                }

                else
                {
                  unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
                  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v39,  "buttonNamesForInputIdentifier:forDisplayWithToken:",  v30,  objc_msgSend(v7, "displayToken")));
                  [v24 setObject:v31 forIndex:105];
                }
              }

              [(id)VOTSharedWorkspace dispatchCommand:v24];

              goto LABEL_39;
            }
          }

          else
          {
            if ([v11 isEqualToString:kVOTEventCommandBraillePanLeft])
            {
              -[SCROBrailleClient panDisplayLeft:]( self->_brailleClient,  "panDisplayLeft:",  [v7 displayToken]);
              goto LABEL_38;
            }

            if ([v11 isEqualToString:kVOTEventCommandBraillePanRight])
            {
              -[SCROBrailleClient panDisplayRight:]( self->_brailleClient,  "panDisplayRight:",  [v7 displayToken]);
              goto LABEL_38;
            }

            if ([v11 isEqualToString:kVOTEventCommandDelete])
            {
              *(void *)buf = 0LL;
              *(void *)&buf[8] = buf;
              *(void *)&buf[16] = 0x2020000000LL;
              unsigned int v49 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[SCROBrailleClient mainAttributedString](self->_brailleClient, "mainAttributedString"));
              __int128 v19 = [v18 length];
              v43[0] = _NSConcreteStackBlock;
              v43[1] = 3221225472LL;
              v43[2] = sub_1000BFDB0;
              v43[3] = &unk_100179A50;
              v43[4] = buf;
              objc_msgSend( v18,  "enumerateAttribute:inRange:options:usingBlock:",  kSCROCursorAttribute,  0,  v19,  0,  v43);
              uint64_t v20 = *(void *)(*(void *)&buf[8] + 24LL);
              if (v20 != 0x7FFFFFFFFFFFFFFFLL)
              {
                if (v20 >= 1) {
                  *(void *)(*(void *)&buf[8] + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = --v20;
                }
                -[SCROBrailleClient rangeOfCellRepresentingCharacterAtIndex:]( self->_brailleClient,  "rangeOfCellRepresentingCharacterAtIndex:",  v20);
                if (v21)
                {
                  -[VOTElement replaceCharactersAtCursor:withString:source:]( self->_brailleElement,  "replaceCharactersAtCursor:withString:source:",  v21,  &stru_10017A920,  2LL);

                  _Block_object_dispose(buf, 8);
                  goto LABEL_38;
                }
              }

              _Block_object_dispose(buf, 8);
              if ((v14 & 1) == 0) {
                goto LABEL_45;
              }
            }

            else
            {
              if ([v11 isEqualToString:kVOTEventCommandBrailleTranslateBrailleToClipboard])
              {
                -[SCROBrailleClient translateBrailleToClipboard](self->_brailleClient, "translateBrailleToClipboard");
                goto LABEL_37;
              }

              if (((-[VOTBrailleManager handleCommandIfActiveBrailleRelated:]( self,  "handleCommandIfActiveBrailleRelated:",  v11) | v14) & 1) == 0) {
                goto LABEL_45;
              }
            }

    uint64_t v10 = v64;
LABEL_42:
    double v13 = v56;
    goto LABEL_43;
  }

  if (v35 != -[VOTElement selectedTextRange](v12, "selectedTextRange", v54) || v28 != v42) {
    -[VOTElement setSelectedTextRange:refreshBraille:](v12, "setSelectedTextRange:refreshBraille:", v35, v28, 0LL);
  }
  id v43 = v63;
  if (-[VOTBrailleManager _languageIsCJK](self, "_languageIsCJK")
    && !-[VOTBrailleManager _languageIsNBSC](self, "_languageIsNBSC"))
  {
    uint64_t v41 = objc_alloc_init(&OBJC_CLASS___SCROBrailleKeyboardKey);
    [v41 setKeyString:v11];
    sub_1000BF234(v41);
    goto LABEL_37;
  }

  -[VOTElement insertText:source:](v12, "insertText:source:", v11, 2LL);
  uint64_t v10 = v64;
  double v13 = v56;
  if (-[VOTElement doesHaveTraits:](v12, "doesHaveTraits:", kAXSecureTextFieldTrait)
    || (unint64_t)(v55 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    goto LABEL_44;
  }

  uint64_t v41 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  int v44 = (void *)objc_claimAutoreleasedReturnValue(-[VOTBrailleManager _localeIdentifierForCurrentTable](self, "_localeIdentifierForCurrentTable"));
  id v45 = [v41 addString:v11 withLanguage:v44];

  [v41 setGeneratesBraille:0];
  [v41 setDoesNotInterrupt:1];
  [v41 send];
LABEL_43:

  id v43 = v63;
LABEL_44:
  BOOL v51 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](v12, "value"));
  uint64_t v52 = [v51 length];

  if (v58 <= v52 && (v58 != -[VOTElement selectedTextRange](v12, "selectedTextRange") || v53)) {
    -[VOTElement setSelectedTextRange:refreshBraille:](v12, "setSelectedTextRange:refreshBraille:", v58, 0LL, 1LL);
  }

LABEL_49:
}

LABEL_38:
            double v22 = (void *)VOTSharedWorkspace;
            unsigned __int8 v23 = (id)objc_claimAutoreleasedReturnValue( +[VOTEvent brailleEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "brailleEventWithCommand:info:",  kVOTEventCommandStopReadAll,  0LL));
            [v22 dispatchCommand:v23];
LABEL_39:
          }
        }

LABEL_42:
        int v6 = (char *)v6 + 1;
      }

      while (v5 != v6);
      CGRect v32 = [obj countByEnumeratingWithState:&v44 objects:v52 count:16];
      BOOL v5 = v32;
    }

    while (v32);
  }

LABEL_62:
  id v35 = (void *)objc_claimAutoreleasedReturnValue(-[VOTBrailleManager keypressCallback](self, "keypressCallback"));
  CGRect v36 = v35 == 0LL;

  if (!v36)
  {
    unsigned int v37 = (void (**)(void, void))objc_claimAutoreleasedReturnValue(-[VOTBrailleManager keypressCallback](self, "keypressCallback"));
    ((void (**)(void, id))v37)[2](v37, obj);
  }
}

void sub_1000BFD88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

id sub_1000BFDB0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id result = [a2 integerValue];
  if (result == (id)1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a3;
    *a5 = 1;
  }

  return result;
}

void sub_1000C0428( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000C0450(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v13 = a3;
  if ([*(id *)(a1 + 32) isEqualToString:a2])
  {
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 168),  "setPersistentKeyModifiers:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 168), "persistentKeyModifiers") ^ objc_msgSend(v13, "unsignedIntegerValue"));
    int v7 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
    int v8 = off_1001AC148;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v13]);
    id v10 = sub_10004A988(v8, v9, 0LL);
    char v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = -[VOTOutputRequest addString:](v7, "addString:", v11);

    -[VOTOutputRequest setGeneratesBraille:](v7, "setGeneratesBraille:", 1LL);
    -[VOTOutputRequest setBrailleType:](v7, "setBrailleType:", 2LL);
    -[VOTOutputRequest send](v7, "send");
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_1000C056C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v21 = a3;
  if ([*(id *)(a1 + 32) isEqualToString:a2])
  {
    unsigned int v7 = [*(id *)(*(void *)(a1 + 40) + 168) persistentKeyModifiers];
    *(_DWORD *)(*(void *)(a1 + 40) + 200) ^= [v21 unsignedIntegerValue];
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 40) + 200LL);
    unint64_t v9 = (unint64_t)[v21 unsignedIntegerValue] & v8;
    id v10 = [v21 unsignedIntegerValue];
    unsigned int v11 = [v21 unsignedIntegerValue];
    BOOL v12 = v9 == (void)v10;
    if ((id)v9 == v10) {
      id v13 = @".on";
    }
    else {
      id v13 = @".off";
    }
    if (v12) {
      uint64_t v14 = v7 | v11;
    }
    else {
      uint64_t v14 = v7 & ~v11;
    }
    [*(id *)(*(void *)(a1 + 40) + 168) setPersistentKeyModifiers:v14];
    id v15 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
    CGRect v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v21]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stringByAppendingString:v13]);

    id v18 = sub_10004A988(off_1001AC148, v17, 0LL);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = -[VOTOutputRequest addString:](v15, "addString:", v19);

    -[VOTOutputRequest setGeneratesBraille:](v15, "setGeneratesBraille:", 1LL);
    -[VOTOutputRequest setBrailleType:](v15, "setBrailleType:", 2LL);
    -[VOTOutputRequest send](v15, "send");
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_1000C129C(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
  unsigned int v4 = a2;
  LODWORD(v5) = 0.75;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v5));
  -[VOTOutputAction setObject:forVariant:](v4, "setObject:forVariant:", v6, 32LL);
}

void sub_1000C12F8(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

LABEL_49:
                goto LABEL_50;
              }

              goto LABEL_50;
            }
          }

          if (-[VOTBrailleManager _brailleShouldTryToTurnPage:direction:]( self,  "_brailleShouldTryToTurnPage:direction:",  self->_brailleElement,  1LL))
          {
            unsigned int v33 = (void *)kVOTEventCommandScrollRightPage;
LABEL_45:
            unsigned int v37 = v33;
            self->_brailleLineRange = (_NSRange)xmmword_1001326B0;
            goto LABEL_54;
          }

          if (-[VOTElement isLiveCaptionsTextView](self->_brailleElement, "isLiveCaptionsTextView"))
          {
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement nextElement](self->_brailleElement, "nextElement"));
            uint64_t v41 = [v40 isLiveCaptionsTextView];

            if (!v41) {
              goto LABEL_51;
            }
          }

          int v42 = (id *)&kVOTEventCommandNextElement;
        }

        else
        {
          if (location != 0x7FFFFFFFFFFFFFFFLL && location > self->_brailleDescriptionRange.location)
          {
            self->_brailleLineRange.NSUInteger location = location - 1;
            self->_brailleLineRange.NSUInteger length = 0LL;
            if (-[VOTElement brailleTextEntrySupported](self->_brailleElement, "brailleTextEntrySupported"))
            {
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement textInputElement](self->_brailleElement, "textInputElement"));
              if (v29)
              {
                int v34 = -[VOTElement textInputElementRange](self->_brailleElement, "textInputElementRange");
                if (v34 != (id)0x7FFFFFFF && self->_brailleLineRange.location < (unint64_t)v34)
                {
                  CGRect v32 = (id *)&kVOTEventCommandPreviousElement;
LABEL_39:
                  id v35 = *v32;
                  CGRect v36 = v29;
                  unsigned int v37 = v35;

                  if (v37) {
                    goto LABEL_54;
                  }
                  goto LABEL_50;
                }
              }

              goto LABEL_49;
            }

id sub_1000C1BD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPanEnabled:1];
}

id sub_1000C1C3C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setPersistentKeyModifiers:*(unsigned int *)(a1 + 40)];
}

id sub_1000C1D54(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) setLastUserInteractionTime:*(double *)(a1 + 40)];
}

NSNumber *sub_1000C1DE8(uint64_t a1)
{
  return +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [*(id *)(*(void *)(a1 + 32) + 168) persistentKeyModifiers]);
}

NSString *sub_1000C2860(uint64_t a1)
{
  v2.NSUInteger location = (NSUInteger)[*(id *)(*(void *)(a1 + 32) + 168) rangeOfCellRepresentingCharacterAtIndex:*(void *)(a1 + 40)];
  return NSStringFromRange(v2);
}

void sub_1000C29C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  NSRange v2 = *(void **)(v1 + 208);
  *(void *)(v1 + 20_Block_object_dispose(va, 8) = 0LL;
}

uint64_t sub_1000C2F38(void *a1, int a2)
{
  id v3 = a1;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  unsigned __int8 v5 = [v4 modifierKeyLockEnabled];

  if ((v5 & 1) != 0
    || (unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]),
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace currentElement]),
        unsigned int v9 = [v7 modifierKeyChoiceForElement:v8],
        v8,
        v7,
        (v9 & 1) != 0)
    && [v3 isOptionKeyPressed]
    && ([v3 isControlKeyPressed] & 1) != 0)
  {
    uint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v6 = a2 & (v9 >> 1);
  }

  return v6;
}

void sub_1000C3FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

uint64_t sub_1000C402C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained[22];

  return v2;
}

unint64_t sub_1000C4058(id a1, VOSCommandResolver *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace currentElement]);
  unint64_t v3 = 2LL;

  return v3;
}

void sub_1000C40B8(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned __int8 v5 = WeakRetained;
  if (a2 <= 1 && *((uint64_t *)WeakRetained + 22) >= 2)
  {
    unsigned int v7 = WeakRetained;
    id v6 = [*(id *)(a1 + 32) length];
    unsigned __int8 v5 = v7;
    if (v6) {
      v7[22] = 1LL;
    }
  }
}

id sub_1000C54A0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 152) performSelector:"_speakCapsLockKey" onTarget:*(void *)(a1 + 32) count:0 objects:0];
}

id sub_1000C5BA8(uint64_t a1)
{
  double v3 = v2;
  id result = [*(id *)(a1 + 32) lastVolumeDownButtonDownTime];
  if (v3 - v5 >= 0.75)
  {
    [*(id *)(a1 + 32) lastVolumeDownButtonDownTime];
    double v7 = v6;
    id result = [*(id *)(a1 + 32) lastVolumeUpButtonDownTime];
    if (vabdd_f64(v7, v8) <= 0.25)
    {
      [*(id *)(a1 + 32) lastVolumeDownButtonUpTime];
      double v10 = v9;
      id result = [*(id *)(a1 + 32) lastVolumeUpButtonUpTime];
      if (vabdd_f64(v10, v11) <= 0.25) {
        return _[*(id *)(a1 + 32) _resetSoundAndScreenCurtain];
      }
    }
  }

  return result;
}

id sub_1000C6E1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateTypingMode];
}

id sub_1000C71DC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleShiftLock:a2];
}

id sub_1000C71E8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleShift:a2];
}

id sub_1000C71F4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleTypingEnter:a2];
}

id sub_1000C7200(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleTypingPeriod:a2];
}

id sub_1000C720C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleCommitTyping:a2];
}

id sub_1000C7218(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleDelete:a2];
}

id sub_1000C7224(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSuggestionSelection:a2];
}

id sub_1000C7230(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSuggestionSelection:a2];
}

id sub_1000C723C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyplaneSelection:a2];
}

id sub_1000C7248(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyplaneSelection:a2];
}

id sub_1000C7254(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleKeyboardSelection:a2];
}

id sub_1000C72DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateTypingMode];
}

id sub_1000C7368(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateKeyboardElement];
}

void sub_1000C7AD8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 directInteractionModeStatus:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
}

void sub_1000C8160(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1001AD018;
  qword_1001AD018 = (uint64_t)v1;
}

void sub_1000CB7FC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_1000CC068(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 stringByReplacingOccurrencesOfString:@"pageup" withString:@"⇞"]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByReplacingOccurrencesOfString:@"pagedown" withString:@"⇟"]);

  double v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByReplacingOccurrencesOfString:@"home" withString:@"⇱"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByReplacingOccurrencesOfString:@"end" withString:@"⇲"]);

  double v5 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByReplacingOccurrencesOfString:@"shift" withString:@"⇧"]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByReplacingOccurrencesOfString:@"control" withString:@"⌃"]);

  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByReplacingOccurrencesOfString:@"option" withString:@"⌥"]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByReplacingOccurrencesOfString:@"command" withString:@"⌘"]);

  double v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByReplacingOccurrencesOfString:@"left" withString:@"←"]);
  double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stringByReplacingOccurrencesOfString:@"right" withString:@"→"]);

  double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stringByReplacingOccurrencesOfString:@"up" withString:@"↑"]);
  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringByReplacingOccurrencesOfString:@"down" withString:@"↓"]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByReplacingOccurrencesOfString:@"esc" withString:@"⎋"]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByReplacingOccurrencesOfString:@"tab" withString:@"⇥"]);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 stringByReplacingOccurrencesOfString:@"capslock" withString:@"⇪"]);
  CGRect v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringByReplacingOccurrencesOfString:@" " withString:@"␣"]);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stringByReplacingOccurrencesOfString:@"return" withString:@"⏎"]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue( [v17 stringByReplacingOccurrencesOfString:@"backspace" withString:@"⌫"]);

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 stringByReplacingOccurrencesOfString:@"delete" withString:@"⌦"]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 stringByReplacingOccurrencesOfString:@"fn" withString:@"Fn"]);

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 stringByReplacingOccurrencesOfString:@"f1" withString:@"F1"]);
  double v22 = (void *)objc_claimAutoreleasedReturnValue([v21 stringByReplacingOccurrencesOfString:@"f2" withString:@"F2"]);

  unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 stringByReplacingOccurrencesOfString:@"f3" withString:@"F3"]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stringByReplacingOccurrencesOfString:@"f4" withString:@"F4"]);

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByReplacingOccurrencesOfString:@"f5" withString:@"F5"]);
  int v26 = (void *)objc_claimAutoreleasedReturnValue([v25 stringByReplacingOccurrencesOfString:@"f6" withString:@"F6"]);

  os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 stringByReplacingOccurrencesOfString:@"f7" withString:@"F7"]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 stringByReplacingOccurrencesOfString:@"f8" withString:@"F8"]);

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 stringByReplacingOccurrencesOfString:@"f9" withString:@"F9"]);
  unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 stringByReplacingOccurrencesOfString:@"f10" withString:@"F10"]);

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 stringByReplacingOccurrencesOfString:@"f11" withString:@"F11"]);
  CGRect v32 = (void *)objc_claimAutoreleasedReturnValue([v31 stringByReplacingOccurrencesOfString:@"f12" withString:@"F12"]);

  unsigned int v33 = (void *)objc_claimAutoreleasedReturnValue(+[AXSSKeyChord keyChordWithString:](&OBJC_CLASS___AXSSKeyChord, "keyChordWithString:", v32));
  return v33;
}

uint64_t sub_1000CD918(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  objc_msgSend(a2, "ax_CGPointValue");
  double v7 = v6;
  double v9 = v8;
  objc_msgSend(v5, "ax_CGPointValue");
  double v11 = v10;
  double v13 = v12;

  if (*(void *)(*(void *)(a1 + 32) + 24LL))
  {
    if (v7 <= v11)
    {
      if (v7 >= v11) {
        return 0LL;
      }
      BOOL v14 = *(void *)(a1 + 40) == 0LL;
      uint64_t v15 = 1LL;
    }

    else
    {
      BOOL v14 = *(void *)(a1 + 40) == 0LL;
      uint64_t v15 = -1LL;
    }

    if (v14) {
      return v15;
    }
    else {
      return -v15;
    }
  }

  else if (v9 >= v13)
  {
    return v9 > v13;
  }

  else
  {
    return -1LL;
  }

uint64_t sub_1000CDC90(uint64_t a1, uint64_t a2)
{
  if (qword_1001AD028 != -1) {
    dispatch_once(&qword_1001AD028, &stru_100179C50);
  }
  if ((_DWORD)a1 == (_DWORD)a2) {
    return 1LL;
  }
  uint64_t result = (uint64_t)[(id)qword_1001AD020 characterIsMember:a1];
  if ((_DWORD)result) {
    return (uint64_t)[(id)qword_1001AD020 characterIsMember:a2];
  }
  return result;
}

void sub_1000CDD1C(id a1)
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%C%C%C%C%C%C%C%C%C%C%C",  32LL,  160LL,  8194LL,  8195LL,  8196LL,  8197LL,  8198LL,  8199LL,  8200LL,  8201LL,  8202LL));
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  v3));
  id v2 = (void *)qword_1001AD020;
  qword_1001AD020 = v1;
}

LABEL_70:
}

uint64_t sub_1000CEE84(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 72LL) = *(void *)(*(void *)(result + 32) + 80LL);
  return result;
}

void *sub_1000CEF28(void *result)
{
  *(_BYTE *)(*(void *)(result[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result[6] <= *(void *)(result[4] + 72LL);
  return result;
}

void *sub_1000CF5D8(void *result)
{
  *(_BYTE *)(*(void *)(result[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result[6] <= *(void *)(result[4] + 48LL);
  return result;
}

LABEL_99:
          v86 = ((uint64_t (*)(void *, id, NSUInteger, NSUInteger, void *))v197[2])( v197,  v198,  v247[2].location,  v247[2].length,  v193);
          BOOL v51 = (void *)objc_claimAutoreleasedReturnValue(v86);

          v88 = VOTLogElement(v87);
          v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
          {
            v97 = NSStringFromRange(v247[2]);
            v98 = (char *)(id)objc_claimAutoreleasedReturnValue(v97);
            *(_DWORD *)buf = 138412802;
            v254 = v198;
            v255 = 2112;
            v256 = v98;
            v257 = 2112;
            v258 = (char *)v51;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "search range fetch: %@ %@ -> %@",  buf,  0x20u);
          }

          if (v51 && [v51 range] != (id)0x7FFFFFFF)
          {
            v109 = objc_loadWeakRetained((id *)&self->_delegate);
            [v109 elementFetchFound:v51];
            goto LABEL_199;
          }

          v90 = ((uint64_t (*)(void *, id, NSUInteger, NSUInteger, void *))v196[2])( v196,  v198,  v247[2].location,  v247[2].length,  v193);
          v91 = (void *)objc_claimAutoreleasedReturnValue(v90);

          v92 = objc_claimAutoreleasedReturnValue([v91 searchUUID]);
          v93 = (void *)objc_claimAutoreleasedReturnValue([v91 element]);
          v94 = v93 == 0LL;

          if (!v94)
          {
            v109 = objc_loadWeakRetained((id *)&self->_delegate);
            [v109 elementFetchFound:v91];
            v193 = (void *)v92;
            v195 = v91;
            goto LABEL_199;
          }

          v195 = v91;
          v193 = (void *)v92;
          v191 = v51;
          goto LABEL_105;
        }

        v191 = 0LL;
LABEL_126:
        v85 = 0LL;
        v188 = 0;
LABEL_139:
        v115 = VOTLogElement(-[NSLock unlock](self->_cacheLock, "unlock"));
        v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543874;
          v254 = v85;
          v255 = 2048;
          v256 = v32;
          v257 = 2048;
          v258 = context;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEBUG,  "Found element: %{public}@ (%ld, %ld)",  buf,  0x20u);
        }

        contexta = objc_autoreleasePoolPush();
        if (v85)
        {
          if (![v85 isAccessibilityOpaqueElementProvider]
            || v206 && ([v85 isAccessibleGroup] & 1) != 0)
          {
            v198 = v85;
          }

          else
          {
            v119 = v85;
            LOBYTE(v181) = v202;
            v198 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementFetcher _handleOpaqueSearchForElementInDirection:opaqueParent:searchType:range:matchBlock:resetContentOffsetInOpaqueParent:peeking:]( self,  "_handleOpaqueSearchForElementInDirection:opaqueParent:searchType:range:matchBlock:resetConten tOffsetInOpaqueParent:peeking:",  v214,  v119,  v210,  &v247[2],  v204,  v243 + 3,  v181));

            if (!v198)
            {
              v127 = [v194 clientGeneration];
              BYTE1(v182) = v202;
              LOBYTE(v182) = v206;
              -[VOTElementFetcher searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:peeking:]( self,  "searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generatio n:startingRange:groupNavigationStyle:peeking:",  v214,  v119,  0LL,  v204,  v192,  v210,  v127,  v247[2].location,  v247[2].length,  v182);
              v121 = 0LL;
              v109 = 0LL;
              v198 = 0LL;
LABEL_197:

              goto LABEL_198;
            }
          }

          v119 = objc_loadWeakRetained((id *)&self->_delegate);
          v120 = (id)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  v198,  v209,  v214,  [v194 clientGeneration],  0x7FFFFFFFLL,  0,  v210));
          [v119 elementFetchFound:v120];
          v121 = 0LL;
          v109 = 0LL;
LABEL_196:

          goto LABEL_197;
        }

        -[NSLock lock](self->_cacheLock, "lock");
        v117 = *p_elementCache;
        if (v214 == (id)1) {
          v118 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray lastObject](v117, "lastObject"));
        }
        else {
          v118 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v117, "objectAtIndex:", 0LL));
        }
        v109 = v118;

        -[NSLock unlock](self->_cacheLock, "unlock");
        if (v203) {
          goto LABEL_167;
        }
        v122 = (void *)objc_claimAutoreleasedReturnValue([v216 remoteParent]);
        if (!v122) {
          goto LABEL_167;
        }
        v123 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
        if (v109 == v123)
        {
          v123 = v109;
          if (v213)
          {

            if (!v201)
            {
LABEL_164:
              -[VOTElementFetcher _searchForElementWithParameters:searchFromOpaqueElementsInRemoteParent:]( self,  "_searchForElementWithParameters:searchFromOpaqueElementsInRemoteParent:",  v194,  1LL);
LABEL_172:
              v121 = 0LL;
LABEL_173:
              v198 = 0LL;
LABEL_198:
              objc_autoreleasePoolPop(contexta);

              BOOL v51 = v191;
LABEL_199:

              uint64_t v52 = v193;
LABEL_200:

              goto LABEL_201;
            }

LABEL_167:
            v128 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            v129 = v109 == v128;

            if (!v129)
            {
              v131 = VOTLogElement(v130);
              v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
              if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG)) {
                sub_1000F506C();
              }

              if (-[VOTElementFetcher _wasCanceledWithSearchGeneration:]( self,  "_wasCanceledWithSearchGeneration:",  v200))
              {
                goto LABEL_172;
              }

              -[VOTElementFetcher _updateCacheWithElement:](self, "_updateCacheWithElement:", v109);
              if (-[VOTElementFetcher _wasCanceledWithSearchGeneration:]( self,  "_wasCanceledWithSearchGeneration:",  v200))
              {
                goto LABEL_172;
              }

              -[NSLock lock](self->_cacheLock, "lock");
              v171 = *p_elementCache;
              if (v214 == (id)1) {
                v172 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray lastObject](v171, "lastObject"));
              }
              else {
                v172 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v171, "objectAtIndex:", 0LL));
              }
              v121 = v172;

              -[NSLock unlock](self->_cacheLock, "unlock");
              v175 = [v109 isEqual:v121];
              if ((v175 | v188) != 1)
              {
                v178 = VOTLogElement(v175);
                v179 = (os_log_s *)objc_claimAutoreleasedReturnValue(v178);
                if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG)) {
                  sub_1000F500C();
                }

                v180 = [v194 clientGeneration];
                BYTE1(v182) = v202;
                LOBYTE(v182) = v206;
                -[VOTElementFetcher searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:peeking:]( self,  "searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generat ion:startingRange:groupNavigationStyle:peeking:",  v214,  v109,  v209,  v204,  v192,  v210,  v180,  v247[2].location,  v247[2].length,  v182);
                goto LABEL_173;
              }

              v176 = VOTLogElement(v175);
              v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(v176);
              if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG)) {
                sub_1000F4FAC();
              }

              v119 = (id)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  0,  v209,  v214,  [v194 clientGeneration],  0x7FFFFFFFLL,  0,  v210));
              [v119 setSearchEndedWithDifferentGroup:v188];
              v120 = objc_loadWeakRetained((id *)&self->_delegate);
              [v120 elementFetchFound:v119];
LABEL_195:
              v198 = 0LL;
              goto LABEL_196;
            }

            [v216 updateVisiblePoint];
            v133 = [v216 visiblePoint];
            v135 = v134;
            v137 = v136;
            v138 = VOTLogElement(v133);
            v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);
            if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
            {
              v263.CGFloat x = v135;
              v263.CGFloat y = v137;
              v140 = NSStringFromCGPoint(v263);
              v141 = (void *)objc_claimAutoreleasedReturnValue(v140);
              sub_1000F4F54((uint64_t)v216, v141);
            }

            v142 = [v216 windowContextId];
            v143 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
            objc_msgSend(v143, "convertPoint:fromContextId:", v142, v135, v137);
            v145 = v144;
            v147 = v146;

            v149 = VOTLogElement(v148);
            v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
            if (os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
            {
              v264.CGFloat x = v145;
              v264.CGFloat y = v147;
              v151 = NSStringFromCGPoint(v264);
              v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
              sub_1000F4EE0(v152, (uint64_t)v252, (int)v142, v150);
            }

            v153 = 1;
            if (v145 == CGPointZero.x)
            {
              CGFloat y = CGPointZero.y;
              if (v147 == y)
              {
                v155 = [v194 hitTestPoint];
                v145 = v156;
                v147 = v157;
                v158 = VOTLogElement(v155);
                v159 = (os_log_s *)objc_claimAutoreleasedReturnValue(v158);
                if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
                {
                  v265.CGFloat x = v145;
                  v265.CGFloat y = v147;
                  v160 = NSStringFromCGPoint(v265);
                  v161 = (void *)objc_claimAutoreleasedReturnValue(v160);
                  sub_1000F4E88((uint64_t)v216, v161);
                }

                v153 = 1;
                if (v145 == CGPointZero.x && v147 == y)
                {
                  v163 = VOTLogElement(v162);
                  v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
                  if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
                    sub_1000F4E4C(v164);
                  }

                  v153 = 0;
                }
              }
            }

            v165 = (uint64_t)[v216 isRemoteElement];
            if ((v153 & (v165 ^ 1)) == 1)
            {
              v165 = objc_claimAutoreleasedReturnValue( -[VOTElementFetcher _hitTestedElementForOriginalElement:hitTestPoint:opaqueParent:]( self,  "_hitTestedElementForOriginalElement:hitTestPoint:opaqueParent:",  v216,  0LL,  v145,  v147));
              v119 = (id)v165;
              if (!*((_BYTE *)v243 + 24)
                || (v166 = (void *)objc_claimAutoreleasedReturnValue([(id)v165 opaqueParent]),
                    v167 = [v213 isEqual:v166],
                    v166,
                    !v167))
              {
                if (v119)
                {
                  if (!v206 || (v165 = (uint64_t)[v216 elementIsDescendant:v119], (v165 & 1) == 0))
                  {
                    v173 = VOTLogElement(v165);
                    v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
                    if (os_log_type_enabled(v174, OS_LOG_TYPE_DEBUG)) {
                      sub_1000F4DEC();
                    }

                    BYTE1(v182) = v202;
                    LOBYTE(v182) = v206;
                    -[VOTElementFetcher searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:peeking:]( self,  "searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:gen eration:startingRange:groupNavigationStyle:peeking:",  v214,  v119,  1,  v204,  v192,  v210,  [v194 clientGeneration],  0x7FFFFFFFLL,  0,  v182);
                    v121 = 0LL;
                    v198 = 0LL;
                    goto LABEL_197;
                  }
                }

                goto LABEL_192;
              }
            }

            v119 = 0LL;
LABEL_192:
            v168 = VOTLogElement(v165);
            v169 = (os_log_s *)objc_claimAutoreleasedReturnValue(v168);
            if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG)) {
              sub_1000F4D8C();
            }

            v120 = (id)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  0,  v209,  v214,  [v194 clientGeneration],  0x7FFFFFFFLL,  0,  v210));
            [v120 setSearchEndedWithDifferentGroup:v188];
            v170 = objc_loadWeakRetained((id *)&self->_delegate);
            [v170 elementFetchFound:v120];

            v121 = 0LL;
            goto LABEL_195;
          }
        }

        else
        {
          v124 = (void *)objc_claimAutoreleasedReturnValue([v216 immediateRemoteParent]);
          v125 = [v124 isEqual:v109];
          if (v213) {
            v126 = v125;
          }
          else {
            v126 = 0;
          }
          if ((v126 & 1) != 0)
          {

            if (!v201) {
              goto LABEL_164;
            }
            goto LABEL_167;
          }
        }

        goto LABEL_167;
      }
    }

    else
    {
    }

    __int128 v19 = VOTLogElement(v14);
    double v11 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEBUG))
    {
      char v57 = (char *)objc_claimAutoreleasedReturnValue([v7 fallbackOpaqueParent]);
      unsigned __int8 v58 = (void *)objc_claimAutoreleasedReturnValue([v7 fallbackLocalOpaqueParent]);
      *(_DWORD *)buf = 138544386;
      v254 = v217;
      v255 = 2114;
      v256 = v57;
      v257 = 2114;
      v258 = (char *)v215;
      v259 = 2114;
      v260 = v58;
      v261 = 1024;
      v262 = v203;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_DEBUG,  "Had to use fallback opaque parents. Opaque parent %{public}@ (fallback %{public}@), local opaque parent %{public }@ (fallback %{public}@), searchOpaqueRemoteParents %i,",  buf,  0x30u);
    }

LABEL_205:
}

void sub_1000D0DC8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000D0EE4(uint64_t a1, uint64_t a2)
{
  LOBYTE(v1_Block_object_dispose(&STACK[0x2A0], 8) = *(_BYTE *)(a1 + 96);
  double v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _handleOpaqueSearchForElementInDirection:*(void *)(a1 + 80) opaqueParent:a2 searchType:*(void *)(a1 + 88) range:*(void *)(*(void *)(a1 + 64) + 8) + 32 matchBlock:*(void *)(a1 + 56) resetContentOffsetI nOpaqueParent:*(void *)(*(void *)(a1 + 72) + 8) + 24 peeking:v18]);
  if (v3)
  {
    unsigned int v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 opaqueParent]);

    if (v5)
    {
      id v7 = v4;
    }

    else
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentOpaqueElement]);

      double v10 = (void *)objc_claimAutoreleasedReturnValue([v7 opaqueParent]);
      if (!v10) {
        *(void *)&double v6 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementFetcher.m",  547LL,  "-[VOTElementFetcher _searchForElementWithParameters:searchFromOpaqueElementsInRemoteParent:]_block_invoke",  @"Failed to get an opaque parent after refetching the current focused element. If this gets hit, it means we probably need to start tracking the opaque element provider separately.").n128_u64[0];
      }
    }

    id v11 = objc_msgSend(v7, "isValid", v6);
    if ((v11 & 1) != 0)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136LL));
      double v13 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  v7,  *(unsigned __int8 *)(a1 + 97),  *(void *)(a1 + 80),  [*(id *)(a1 + 48) clientGeneration],  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 32),  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40),  *(void *)(a1 + 88)));
      [WeakRetained elementFetchFound:v13];

      uint64_t v15 = VOTLogElement(v14);
      double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_1000F52A8();
      }
LABEL_12:

      return 1LL;
    }

    uint64_t v16 = VOTLogElement(v11);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      sub_1000F5308();
    }
  }

  else if (*(_BYTE *)(a1 + 98))
  {
    uint64_t result = (uint64_t)[*(id *)(a1 + 40) isAccessibleGroup];
    if (!(_DWORD)result) {
      return result;
    }
    id v7 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136LL));
    double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  0,  *(unsigned __int8 *)(a1 + 97),  *(void *)(a1 + 80),  [*(id *)(a1 + 48) clientGeneration],  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 32),  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40),  *(void *)(a1 + 88)));
    [v7 elementFetchFound:v9];
    goto LABEL_12;
  }

  return 0LL;
}

id sub_1000D1128(uint64_t a1, void *a2)
{
  return [a2 isEqual:*(void *)(a1 + 32)];
}

id sub_1000D1134(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    id v20 = v10;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, id, uint64_t, uint64_t, uint64_t, id *))(v11 + 16))( v11,  v9,  a3,  a4,  v12,  &v20);
    uint64_t v15 = v14;
    id v16 = v20;

    if (v13 == 0x7FFFFFFF || (v13 == a3 ? (BOOL v17 = v15 == a4) : (BOOL v17 = 0), v17)) {
      uint64_t v18 = 0LL;
    }
    else {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  v9,  *(unsigned __int8 *)(a1 + 64),  *(void *)(a1 + 48),  [*(id *)(a1 + 32) clientGeneration],  v13,  v15,  *(void *)(a1 + 56)));
    }
    id v10 = v16;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  [v18 setSearchUUID:v10];

  return v18;
}

VOTElementFetchFoundData *sub_1000D1258(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[VOTRotor systemRotorTypeForSearchType:]( &OBJC_CLASS___VOTRotor,  "systemRotorTypeForSearchType:",  *(void *)(a1 + 40)));
  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 customPublicRotorForSystemType:v11]);
    uint64_t v13 = v12;
    if (v12)
    {
      if ([v12 isEqual:v10])
      {
        uint64_t v14 = objc_opt_new(&OBJC_CLASS___VOTElementFetchFoundData);
        -[VOTElementFetchFoundData setSearchUUID:](v14, "setSearchUUID:", v10);
      }

      else
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:]( &OBJC_CLASS___VOTElement,  "customPublicRotorDictionaryForRotorId:startRange:direction:",  v13,  a3,  a4,  *(void *)(a1 + 48)));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 customPublicRotorResultWithItem:v15 startElement:v9]);
        BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"targetElement"]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[AXUIElement uiElementWithAXElement:]( &OBJC_CLASS___AXUIElement,  "uiElementWithAXElement:",  v17));
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v18));

        if (v19)
        {
          int v26 = v15;
          __int128 valuePtr = xmmword_100132600;
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"targetRange"]);

          if (v20)
          {
            id v21 = (const __AXValue *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"targetRange"]);
            AXValueGetValue(v21, kAXValueTypeCFRange, &valuePtr);
          }

          uint64_t v22 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v23 = *(void *)(a1 + 48);
          id v24 = [*(id *)(a1 + 32) clientGeneration];
          uint64_t v14 = (VOTElementFetchFoundData *)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( &OBJC_CLASS___VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  v19,  v22,  v23,  v24,  valuePtr,  *(void *)(a1 + 40)));
          -[VOTElementFetchFoundData setSearchUUID:](v14, "setSearchUUID:", v13);
          uint64_t v15 = v26;
        }

        else
        {
          uint64_t v14 = objc_opt_new(&OBJC_CLASS___VOTElementFetchFoundData);
          -[VOTElementFetchFoundData setSearchUUID:](v14, "setSearchUUID:", v13);
        }
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  return v14;
}

void sub_1000D1500(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  *(void *)(*(void *)(a1 + 32) + 48LL) = *(void *)(*(void *)(a1 + 32) + 56LL);
  uint64_t v2 = VOTLogElement(a1);
  double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_1000F5368(v1, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1000D1654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000D166C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 80) + 1LL;
  *(void *)(v1 + 80) = v2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v2;
  return result;
}

void sub_1000D1BFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000D1C60(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 56) + 1LL;
  *(void *)(v1 + 56) = v2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v2;
  return result;
}

id sub_1000D22FC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _retrieveElementsWithElement:0 groupNavigationStyle:*(void *)(a1 + 40)];
}

uint64_t sub_1000D25A0(uint64_t result, float a2)
{
  *(float *)uint64_t v2 = a2;
  *(void *)(v2 + 4) = v3;
  *(_WORD *)(v2 + 12) = 2114;
  *(void *)(v2 + 14) = result;
  return result;
}

id sub_1000D25B8(uint64_t a1, void *a2)
{
  return a2;
}

id sub_1000D25C8(void *a1, const char *a2)
{
  return [a1 count];
}

void sub_1000D29FC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"VOTRotorChangedNotification" object:*(void *)(a1 + 32) userInfo:*(void *)(a1 + 40)];
}

BOOL sub_1000D2A48(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 3;
}

void sub_1000D2A58(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(*(void *)(a1 + 32) + 24LL)));
  [v3 setPreference:v2 forKey:*(void *)(a1 + 40)];
}

BOOL sub_1000D3070(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 54;
}

CFIndex sub_1000D35B8(const __CFArray *a1, const void *a2)
{
  v5.NSUInteger length = CFArrayGetCount(a1);
  v5.NSUInteger location = 0LL;
  return CFArrayGetFirstIndexOfValue(a1, v5, a2);
}

void sub_1000D3654(id a1)
{
  v38[0] = kAXSVoiceOverTouchRotorItemSpeechRate;
  unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 73LL));
  v39[0] = v37;
  v38[1] = kAXSVoiceOverTouchRotorItemVolume;
  CGRect v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 72LL));
  v39[1] = v36;
  v38[2] = kAXSVoiceOverTouchRotorItemHandwriting;
  id v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 54LL));
  v39[2] = v35;
  v38[3] = kAXSVoiceOverTouchRotorItemBrailleGesture;
  int v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 55LL));
  v39[3] = v34;
  v38[4] = kAXSVoiceOverTouchRotorItemHints;
  unsigned int v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 53LL));
  v39[4] = v33;
  v38[5] = kAXSVoiceOverTouchRotorItemAudioDucking;
  CGRect v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 79LL));
  v39[5] = v32;
  v39[6] = &off_100188300;
  v38[6] = kAXSVoiceOverTouchRotorItemAudioDuckingAmount;
  v38[7] = kAXSVoiceOverTouchRotorItemCharacter;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 3LL));
  v39[7] = v31;
  v38[8] = kAXSVoiceOverTouchRotorItemWord;
  unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 4LL));
  v39[8] = v30;
  v38[9] = kAXSVoiceOverTouchRotorItemLine;
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 5LL));
  v39[9] = v29;
  v38[10] = kAXSVoiceOverTouchRotorItemHeader;
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 8LL));
  v39[10] = v28;
  v38[11] = kAXSVoiceOverTouchRotorItemLink;
  os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 9LL));
  v39[11] = v27;
  v39[12] = &off_100188318;
  v38[12] = kAXSVoiceOverTouchRotorItemTextSelection;
  v38[13] = kAXSVoiceOverTouchRotorItemFormElement;
  int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 10LL));
  v39[13] = v26;
  v38[14] = kAXSVoiceOverTouchRotorItemTableStart;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 11LL));
  v39[14] = v25;
  v38[15] = kAXSVoiceOverTouchRotorItemListStart;
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 13LL));
  v39[15] = v24;
  v38[16] = kAXSVoiceOverTouchRotorItemVisitedLink;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 14LL));
  v39[16] = v23;
  v38[17] = kAXSVoiceOverTouchRotorItemNonVisitedLink;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 15LL));
  v39[17] = v22;
  v38[18] = kAXSVoiceOverTouchRotorItemSame;
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 37LL));
  v39[18] = v21;
  v38[19] = kAXSVoiceOverTouchRotorItemAllItems;
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 38LL));
  v39[19] = v20;
  v38[20] = kAXSVoiceOverTouchRotorItemImage;
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 16LL));
  v39[20] = v19;
  v38[21] = kAXSVoiceOverTouchRotorItemStaticText;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 17LL));
  v39[21] = v18;
  v38[22] = kAXSVoiceOverTouchRotorItemTextZoom;
  BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 19LL));
  v39[22] = v17;
  v38[23] = kAXSVoiceOverTouchRotorItemLandmark;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 26LL));
  v39[23] = v16;
  v38[24] = kAXSVoiceOverTouchRotorItemArticle;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 27LL));
  v39[24] = v15;
  v38[25] = kAXSVoiceOverTouchRotorItemButton;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 28LL));
  v39[25] = v14;
  v38[26] = kAXSVoiceOverTouchRotorItemSearchField;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 33LL));
  v39[26] = v13;
  v38[27] = kAXSVoiceOverTouchRotorItemRadioButton;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 34LL));
  v39[27] = v1;
  v38[28] = kAXSVoiceOverTouchRotorItemCheckbox;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 35LL));
  v39[28] = v2;
  v38[29] = kAXSVoiceOverTouchRotorItemTextField;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 29LL));
  v39[29] = v3;
  v38[30] = kAXSVoiceOverTouchRotorItemContainers;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 31LL));
  v39[30] = v4;
  v38[31] = kAXSVoiceOverTouchRotorItemVerticalNavigation;
  CFRange v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 7LL));
  v39[31] = v5;
  v38[32] = kAXSVoiceOverTouchRotorItemPunctuation;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 77LL));
  v39[32] = v6;
  v38[33] = kAXSVoiceOverTouchRotorItemSounds;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 78LL));
  v39[33] = v7;
  v38[34] = kAXSVoiceOverTouchRotorItemTypingMode;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 20LL));
  v39[34] = v8;
  v38[35] = kAXSVoiceOverTouchRotorItemContinuousPath;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 21LL));
  v39[35] = v9;
  v38[36] = kAXSVoiceOverTouchRotorItemNavigationDirection;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 82LL));
  v39[36] = v10;
  v39[37] = &off_100188330;
  v38[37] = kAXSVoiceOverTouchRotorItemLanguage;
  v38[38] = kAXSVoiceOverTouchRotorItemBrailleLanguage;
  v39[38] = &off_100188348;
  v39[39] = &off_100188360;
  v38[39] = kAXSVoiceOverTouchRotorItemBrailleInputLanguage;
  v38[40] = kAXSVoiceOverTouchRotorItemBrailleAutoAdvance;
  v39[40] = &off_100188378;
  v39[41] = &off_100188390;
  v38[41] = kAXSVoiceOverTouchRotorAudioDestination;
  v38[42] = kAXSVoiceOverTouchRotorActivities;
  v39[42] = &off_1001883A8;
  v39[43] = &off_1001883C0;
  v38[43] = kAXSVoiceOverTouchRotorToggleLiveRegions;
  v38[44] = kAXSVoiceOverTouchRotorItemMisspelledWords;
  v39[44] = &off_1001883D8;
  v39[45] = &off_1001883F0;
  v38[45] = kAXSVoiceOverTouchRotorImageDescriptions;
  v38[46] = kAXSVoiceOverTouchRotorItemSilenceTVAnnouncements;
  v39[46] = &off_100188408;
  v39[47] = &off_100188420;
  v38[47] = kAXSVoiceOverTouchRotorItemSpeakNonfocusableElementsAfterDelay;
  v38[48] = kAXSVoiceOverTouchRotorItemExploreFocusAffectsNativeFocus;
  v39[48] = &off_100188438;
  uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v39,  v38,  49LL));
  uint64_t v12 = (void *)qword_1001AD030;
  qword_1001AD030 = v11;
}

BOOL sub_1000D48F4(uint64_t a1)
{
  return (unint64_t)(a1 - 49) < 4;
}

void sub_1000D4904(__CFArray *a1, void *value, CFIndex idx)
{
}

void sub_1000D4914(__CFArray *a1, const void *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unsigned int v5 = [v4 voiceOverUseTVToggleStyleNavigation];

  if (v5)
  {
    switch((unint64_t)a2)
    {
      case 0uLL:
      case 2uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x1AuLL:
      case 0x1BuLL:
      case 0x1CuLL:
      case 0x1DuLL:
      case 0x1EuLL:
      case 0x1FuLL:
      case 0x20uLL:
      case 0x21uLL:
      case 0x22uLL:
      case 0x23uLL:
      case 0x24uLL:
      case 0x25uLL:
      case 0x26uLL:
      case 0x27uLL:
      case 0x28uLL:
      case 0x29uLL:
      case 0x2AuLL:
      case 0x2BuLL:
      case 0x2CuLL:
      case 0x2DuLL:
      case 0x2EuLL:
      case 0x2FuLL:
      case 0x31uLL:
      case 0x32uLL:
      case 0x33uLL:
      case 0x34uLL:
      case 0x36uLL:
      case 0x3EuLL:
      case 0x3FuLL:
      case 0x40uLL:
      case 0x41uLL:
      case 0x42uLL:
      case 0x43uLL:
      case 0x44uLL:
      case 0x45uLL:
      case 0x46uLL:
      case 0x47uLL:
      case 0x52uLL:
      case 0x55uLL:
      case 0x56uLL:
      case 0x59uLL:
      case 0x5BuLL:
        if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2) {
          goto LABEL_4;
        }
        break;
      default:
        goto LABEL_4;
    }
  }

  else
  {
LABEL_4:
    CFArrayAppendValue(a1, a2);
  }

void sub_1000D49B0(const __CFArray *a1, const void *a2)
{
  v5.NSUInteger length = CFArrayGetCount(a1);
  v5.NSUInteger location = 0LL;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(a1, v5, a2);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  }
}

uint64_t sub_1000D4A04(uint64_t a1)
{
  return ((unint64_t)(a1 - 36) < 0x33) & (0x6000000000001uLL >> (a1 - 36));
}

void sub_1000D5688(_Unwind_Exception *a1)
{
}

void sub_1000D56B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateDotPositions];
}

void sub_1000D56E0(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v2 = [v4 voiceOverTouchBrailleGesturesUsesTypingSoundFeedback];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setUsesTypingSoundFeedback:v2];
}

void sub_1000D573C(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v2 = [v4 voiceOverTouchBrailleGesturesUsesHapticFeedback];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setUsesHapticFeedback:v2];
}

id sub_1000D5CD0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) disableIdleTimerAssertion]);
  [v2 invalidate];

  return [*(id *)(a1 + 32) setDisableIdleTimerAssertion:0];
}

void sub_1000D5D0C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend(v1, "setVoiceOverBSIUsageCount:", (char *)objc_msgSend(v1, "voiceOverBSIUsageCount") + 1);
}

id sub_1000D5D4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBrailleUI];
}

id sub_1000D621C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleChangeUsage:1];
}

id sub_1000D6228(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleChangeUsage:0];
}

id sub_1000D6234(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleTranslateImmediately];
}

BOOL sub_1000D73A4(id a1, NSDictionary *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = VOSBrailleTableForRotorItem(a2);
  CFRange v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if ([v5 supportsTranslationMode8Dot] && !AXDeviceSupportsManyTouches())
  {
    BOOL v7 = 0;
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 replacements]);
    BOOL v7 = [v6 count] == 0;
  }

  return v7;
}

void sub_1000D7A90(id a1, VOTElement *a2)
{
  id v2 = a2;
  -[VOTElement updateGesturedTextInputAttributes](v2, "updateGesturedTextInputAttributes");
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement gesturedTextInputAttributes](v2, "gesturedTextInputAttributes"));

  if ([v5 shouldPlayKeyboardSecureClickSound])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterSecureText](&OBJC_CLASS___VOSOutputEvent, "DidEnterSecureText"));
    [v3 sendEvent:v4];
  }
}

id sub_1000D7F38(uint64_t a1, int a2)
{
  int HasHomeButton = AXDeviceHasHomeButton(a1);
  id v5 = @"landscape.right.hint.charge.port";
  if (a2) {
    id v5 = @"landscape.left.hint.charge.port";
  }
  uint64_t v6 = @"landscape.left.hint";
  if (!a2) {
    uint64_t v6 = @"landscape.right.hint";
  }
  if (HasHomeButton) {
    BOOL v7 = (__CFString *)v6;
  }
  else {
    BOOL v7 = (__CFString *)v5;
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, *(void **)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue(v8);
}

id sub_1000D8574(uint64_t a1)
{
  return [*(id *)(a1 + 32) _announceBrailleTypingPropertiesIncludingOrientation:1 typingMode:1 forUnlockConfiguration:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000D8744( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000D875C(uint64_t a1, void *a2)
{
  id result = [a2 requiresLaTeXInput];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000D8BD4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastPrintBrailleCharacter]);

  if (v2)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastPrintBrailleCharacter]);
    id v10 = (id)objc_claimAutoreleasedReturnValue([v3 _spokenStringForPrintBraille:v4]);

    if ([v10 length])
    {
      if ([*(id *)(a1 + 32) didAnnounceExplorationMode])
      {
        id v5 = v10;
      }

      else
      {
        uint64_t v6 = *(void **)(a1 + 32);
        id v7 = sub_10004A988(off_1001AC148, @"braille.exploration.mode.announcement", 0LL);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 _stringWithFirstPart:v8 secondPart:v10]);

        [*(id *)(a1 + 32) setDidAnnounceExplorationMode:1];
        id v5 = (id)v9;
      }

      id v10 = v5;
      [*(id *)(a1 + 32) _speakText:v5 useKeyboardLanguage:0];
    }
  }

void sub_1000D8FAC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = AXFormatInteger(a2);
    id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    [v3 addObject:v5];
  }

void sub_1000D9850(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
    [v3 addObject:v4];
  }

id sub_1000D9980(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_1000D99D8;
  v3[3] = &unk_100176D38;
  v3[4] = v1;
  return [v1 _playWarningTones:2 completion:v3];
}

id sub_1000D99D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _beginExploringDotPatterns];
}

id sub_1000DA290(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) sendCarriageReturnForElement:a2];
}

void sub_1000DB53C(id a1, VOTOutputAction *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1000DB550(id a1, VOTOutputRequest *a2)
{
  if (-[VOTOutputRequest finishedSuccessfully](a2, "finishedSuccessfully"))
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v2 setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint:1];
  }

void sub_1000DB790(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) warningTonesTimer]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000DB824;
  v5[3] = &unk_100177048;
  id v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  void v5[4] = *(void *)(a1 + 32);
  uint64_t v7 = v3;
  id v6 = v4;
  [v2 afterDelay:v5 processBlock:1.0];
}

id sub_1000DB824(uint64_t a1)
{
  return [*(id *)(a1 + 32) _playWarningTones:*(void *)(a1 + 48) - 1 completion:*(void *)(a1 + 40)];
}

void sub_1000DB838(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) warningTonesTimer]);
  [v2 afterDelay:*(void *)(a1 + 40) processBlock:1.0];
}

void sub_1000DC790( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000DC7C4(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v2 = [v5 imageCaptionGenderStrategy];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained engine]);
  [v4 setGenderStrategy:v2];
}

void sub_1000DC838(uint64_t a1)
{
  uint64_t v2 = VOTLogCommon(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "Received langauge configuration change. Purging vision engine cache",  v5,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained purgeCache];
}

BOOL sub_1000DCC44(uint64_t a1)
{
  return ([*(id *)(a1 + 32) includeFullImageDescriptionsForAllElements] & 1) == 0
      && ([*(id *)(a1 + 40) doesHaveTraits:kAXImageTrait] & 1) == 0
      && (*(_BYTE *)(a1 + 50) & 1) == 0;
}

unint64_t sub_1000DCC98(id a1)
{
  return 1LL;
}

id sub_1000DCCA0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) language]);
  if ([v3 length])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](&OBJC_CLASS___NSLocale, "localeWithLocaleIdentifier:", v3));
    if (v4) {
      [v2 addObject:v4];
    }
  }

  if (*(void *)(a1 + 40)) {
    objc_msgSend(v2, "addObject:");
  }

  return v2;
}

void sub_1000DD510(uint64_t a1)
{
  id v2 = +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v4 = v3;
  uint64_t v5 = VOTLogCommon(v2);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    double v7 = v4 - *(double *)(a1 + 32);
    int v8 = 134217984;
    double v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Vision request took %.3fs to complete",  (uint8_t *)&v8,  0xCu);
  }
}

void sub_1000DD8D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError ax_errorWithDomain:description:]( &OBJC_CLASS___NSError,  "ax_errorWithDomain:description:",  @"vot",  @"No element provided"));
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
  }

void sub_1000DD94C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v9 = v8;
  uint64_t v10 = VOTLogCommon(v7);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    double v12 = v9 - *(double *)(a1 + 40);
    int v17 = 134217984;
    double v18 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Vision request took %.3fs to complete",  (uint8_t *)&v17,  0xCu);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 captionFeatures]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 caption]);
    (*(void (**)(uint64_t, void *, id))(v13 + 16))(v13, v16, v6);
  }
}

void sub_1000DDE74(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___VOTDebugManager);
  id v2 = (void *)qword_1001AD040;
  qword_1001AD040 = (uint64_t)v1;
}

void sub_1000DE3B8(id a1)
{
  id v1 = [objc_allocWithZone((Class)VOTElementLabelCache) init];
  id v2 = (void *)qword_1001AD050;
  qword_1001AD050 = (uint64_t)v1;
}

void sub_1000DE700(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUbiquitousKeyValueStore defaultStore](&OBJC_CLASS___NSUbiquitousKeyValueStore, "defaultStore"));
  [v2 synchronize];

  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUbiquitousKeyValueStore defaultStore](&OBJC_CLASS___NSUbiquitousKeyValueStore, "defaultStore"));
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dictionaryForKey:@"VOTLabelCache"]);

  uint64_t v5 = VOTLogICloud();
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Got element label synch from icloud: %{private}@",  buf,  0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  double v8 = *(dispatch_queue_s **)(v7 + 16);
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000DE880;
    block[3] = &unk_100176DA8;
    block[4] = v7;
    id v11 = v4;
    dispatch_async(v8, block);
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1000DE88C;
    v9[3] = &unk_100176D38;
    v9[4] = v7;
    dispatch_async(v8, v9);
  }
}

id sub_1000DE880(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _iCloudReconcileDataStore:*(void *)(a1 + 40)];
}

id sub_1000DE88C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _iCloudPublishData:*(void *)(*(void *)(a1 + 32) + 8)];
}

void sub_1000DEB28(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        double v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v8, (void)v15));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 hashKey]);
        [v2 setObject:v9 forKey:v10];
      }

      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v21 count:16];
    }

    while (v5);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUbiquitousKeyValueStore defaultStore](&OBJC_CLASS___NSUbiquitousKeyValueStore, "defaultStore"));
  [v11 setDictionary:v2 forKey:@"VOTLabelCache"];

  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUbiquitousKeyValueStore defaultStore](&OBJC_CLASS___NSUbiquitousKeyValueStore, "defaultStore"));
  [v12 synchronize];

  uint64_t v13 = VOTLogICloud();
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    id v20 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Publishing data to iCloud %{private}@",  buf,  0xCu);
  }
}

id sub_1000DEF64(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 8LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 8);
    *(void *)(v3 + _Block_object_dispose(va, 8) = v2;
  }

  id v5 = [*(id *)(a1 + 40) length];
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  if (v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allKeys]);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          double v12 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        }

        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v9);
    }

    [*(id *)(*(void *)(a1 + 32) + 8) setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
  }

  else
  {
    [v6 removeObjectForKey:*(void *)(a1 + 48)];
  }

  [*(id *)(a1 + 32) _syncLabelCache];
  return [*(id *)(a1 + 32) _iCloudPublishData:*(void *)(*(void *)(a1 + 32) + 8)];
}

uint64_t sub_1000DF1D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DF1E0(uint64_t a1)
{
}

void sub_1000DF1E8(void *a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = *(id *)(a1[4] + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if (objc_msgSend(v7, "isEqual:", a1[5], (void)v11))
        {
          uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKey:v7]);
          uint64_t v9 = *(void *)(a1[6] + 8LL);
          uint64_t v10 = *(void **)(v9 + 40);
          *(void *)(v9 + 40) = v8;

          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

LABEL_6:
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    __int128 v12 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v11 sendEvent:v12];
    goto LABEL_15;
  }

  uint64_t v7 = 0LL;
  __int128 v13 = 0LL;
LABEL_10:
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v20 keyInfo]);
  __int128 v15 = [v14 isCommandKeyPressed];

  if (v15) {
    __int128 v13 = (uint64_t)-[NSMutableString length](self->_buffer, "length") - v7;
  }
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableString substringWithRange:](self->_buffer, "substringWithRange:", v7, v13));
  -[NSMutableString replaceCharactersInRange:withString:]( self->_buffer,  "replaceCharactersInRange:withString:",  v7,  v13,  &stru_10017A920);
  self->_bufferIndeCGFloat x = v7;
  __int128 v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  __int128 v16 = [v12 addString:v11];
  if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v12 lastAction]);
    LODWORD(v1_Block_object_dispose(va, 8) = 0.75;
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v18));
    [v17 setObject:v19 forVariant:32];
  }

  [v12 send];
LABEL_15:
}
}

void sub_1000E008C(id a1)
{
  id v1 = -[VOTSystemServerInstance _initServer](objc_alloc(&OBJC_CLASS___VOTSystemServerInstance), "_initServer");
  id v2 = (void *)qword_1001AD068;
  qword_1001AD068 = (uint64_t)v1;
}

uint64_t sub_1000E1B64(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000E1E5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void sub_1000E1E90(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (!*(_BYTE *)(v2 + 24))
  {
    *(_BYTE *)(v2 + 24) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = a2;
    id v5 = [[AXIPCMessage alloc] initWithKey:7007 payload:v4];

    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }

void sub_1000E1F28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (!*(_BYTE *)(v2 + 24))
  {
    *(_BYTE *)(v2 + 24) = 1;
    uint64_t v8 = @"error";
    uint64_t v9 = a2;
    id v4 = a2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [[AXIPCMessage alloc] initWithKey:7007 payload:v5];
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
  }

uint64_t sub_1000E200C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E201C(uint64_t a1)
{
}

uint64_t sub_1000E2024(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if ((unint64_t)(v2 - 1) < 2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:AXVoiceOverAutomationKeyRotorNames]);
    if ([v3 count])
    {
      [*(id *)(a1 + 40) _modifyRotorItems:v3 shouldEnable:v2 == 1];
      id v4 = *(void **)(a1 + 40);
      uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id obj = *(id *)(v5 + 40);
      [v4 _updateRotorsForElementWithErrorMessage:&obj];
      objc_storeStrong((id *)(v5 + 40), obj);
    }

    else
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = @"No rotor names provided";
    }
  }

  else if (v2 == 3)
  {
    +[VOTOutputManager clearPreviousSoundsPlayed](&OBJC_CLASS___VOTOutputManager, "clearPreviousSoundsPlayed");
  }

  else if (v2)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = @"Unknown automation command";
  }

  else
  {
    +[VOTOutputRequest clearPreviousRequests](&OBJC_CLASS___VOTOutputRequest, "clearPreviousRequests");
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1000E2C34(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1001AD080;
  qword_1001AD080 = (uint64_t)v1;
}

void sub_1000E3DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000E3DF4(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 isHeader];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t result = v3 ^ 1;
  if (*(_BYTE *)(v4 + 24)) {
    char v6 = 1;
  }
  else {
    char v6 = result;
  }
  *(_BYTE *)(v4 + 24) = v6;
  return result;
}

BOOL sub_1000E3E34(id a1, VOTElement *a2, VOTElement *a3)
{
  return -[VOTElement differenceAspectMask:](a2, "differenceAspectMask:", a3) == 0;
}

void sub_1000E5540(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eventQueue]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000E56B4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eventQueue]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000E5880(uint64_t a1)
{
  id v2 = *(_BYTE **)(a1 + 32);
  if (v2[9] || *(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([v2 eventQueue]);
    [v3 addObject:*(void *)(a1 + 40)];
  }

void sub_1000E5954(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventQueue", 0));
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          [v2 sendHIDSystemEvent:*(void *)(*((void *)&v9 + 1) + 8 * (void)i) repostCreatorHIDEvent:1 senderID:0x8000000817319373];
          usleep(0x3E8u);
        }

        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }

      while (v5);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) eventQueue]);
  [v8 removeAllObjects];
}

id sub_1000E5DF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:0 axEvent:*(void *)(a1 + 40)];
}

id sub_1000E5EB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:1 axEvent:*(void *)(a1 + 40)];
}

id sub_1000E624C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:2 axEvent:0];
}

id sub_1000E62BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStateChangeWithEvent:3 axEvent:0];
}

void sub_1000E6714(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v27;
    uint64_t v11 = kSCRCMathStringAttributeSpeakLiteralCharacters;
    uint64_t v12 = kSCRCMathStringAttributeIsNonTechnicalText;
    uint64_t v24 = kSCRCMathStringAttributeIsNonTechnicalText;
    uint64_t v25 = kSCRCMathStringAttributeTreePosition;
    uint64_t v23 = kSCRCMathStringAttributeSpeakWithPitchInflection;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v10) {
          objc_enumerationMutation(v7);
        }
        __int128 v14 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        if ([v14 isEqualToString:v11])
        {
          objc_msgSend(*(id *)(a1 + 32), "addIndexesInRange:", a3, a4);
          continue;
        }

        if ([v14 isEqualToString:v12])
        {
          __int128 v15 = *(void **)(a1 + 40);
          uint64_t v16 = UIAccessibilityTokenIgnoreLeadingCommas;
          __int128 v17 = 0LL;
LABEL_10:
          objc_msgSend(v15, "setAttribute:forKey:withRange:", v17, v16, a3, a4);
          continue;
        }

        if ([v14 isEqualToString:v25])
        {
          __int128 v18 = *(void **)(a1 + 40);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v14]);
          id v20 = v18;
          uint64_t v12 = v24;
          objc_msgSend(v20, "setAttribute:forKey:withRange:", v19, UIAccessibilityTokenMathTreePosition, a3, a4);
        }

        else if ([v14 isEqualToString:v23])
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v14]);
          id v22 = [v21 integerValue];

          if (v22 == (id)1)
          {
            objc_msgSend( *(id *)(a1 + 40),  "setAttribute:forKey:withRange:",  &__kCFBooleanTrue,  UIAccessibilityTokenLowPitch,  a3,  a4);
            uint64_t v12 = v24;
          }

          else
          {
            uint64_t v12 = v24;
            if (v22 == (id)2)
            {
              __int128 v15 = *(void **)(a1 + 40);
              uint64_t v16 = UIAccessibilityTokenHighPitch;
              __int128 v17 = &__kCFBooleanTrue;
              goto LABEL_10;
            }
          }
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v9);
  }
}

uint64_t sub_1000E6EAC(mach_port_t a1, mach_msg_timeout_t a2, _DWORD *a3)
{
  mach_port_t reply_port = mig_get_reply_port();
  v10.msgh_remote_port = a1;
  v10.msgh_local_port = reply_port;
  v10.msgh_bits = 5395;
  *(void *)&v10.msgh_voucher_port = 0x66D0D600000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&v10);
    mach_port_t reply_port = v10.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&v10, 275, 0x18u, 0x30u, reply_port, a2, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(v10.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v7)
    {
      if (v10.msgh_id == 71)
      {
        uint64_t v8 = 4294966988LL;
      }

      else if (v10.msgh_id == 6738234)
      {
        if ((v10.msgh_bits & 0x80000000) == 0)
        {
          if (v10.msgh_size == 36)
          {
            uint64_t v8 = 4294966996LL;
            if (v13)
            {
              if (v10.msgh_remote_port) {
                uint64_t v8 = 4294966996LL;
              }
              else {
                uint64_t v8 = v13;
              }
            }
          }

          else
          {
            uint64_t v8 = 4294966996LL;
          }

          goto LABEL_27;
        }

        uint64_t v8 = 4294966996LL;
        if (v11 == 1 && v10.msgh_size == 40 && !v10.msgh_remote_port && v14 << 16 == 0x100000)
        {
          uint64_t v8 = 0LL;
          *a3 = v12;
          return v8;
        }
      }

      else
      {
        uint64_t v8 = 4294966995LL;
      }

uint64_t sub_1000E7060( mach_port_t a1, mach_msg_timeout_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7)
{
  int v16 = 1;
  uint64_t v17 = a6;
  int v18 = 16777472;
  int v19 = a7;
  NDR_record_t v20 = NDR_record;
  int v21 = a3;
  if (a5 > 0x1000) {
    return 4294966989LL;
  }
  __memcpy_chk(&v23, a4, a5, 4100LL);
  uint64_t v12 = (a5 + 3) & 0xFFFFFFFC;
  mach_msg_size_t v13 = v12 + 64;
  *(_DWORD *)((char *)&msg + v12 + 60) = a7;
  msg.msgh_bits = -2147483629;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  unsigned int v22 = a5;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 6738135;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  uint64_t v7 = mach_msg(&msg, 17, v13, 0, 0, a2, 0);
  if ((v7 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }

  return v7;
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_1001AC970)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_10017A358);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001AC970);
    }
  }

uint64_t sub_1000E7244@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E78C0(&OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage, &qword_1001ACA28, a1);
}

uint64_t sub_1000E7260(uint64_t a1, uint64_t *a2)
{
  id v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000EE798(a1, (uint64_t)v5, &qword_1001ACA28);
  uint64_t v6 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133148);
  uint64_t v11 = v6;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  uint64_t v8 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v13,  KeyPath,  sub_1000EE1A0,  v10,  (char *)&type metadata for () + 8,  v8);
  swift_release(KeyPath);
  return sub_1000EE648((uint64_t)v5, &qword_1001ACA28);
}

uint64_t sub_1000E7368(uint64_t a1, uint64_t a2)
{
  id v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000EE798(a2, (uint64_t)v5, &qword_1001ACA28);
  uint64_t v6 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage, v9, 33LL, 0LL);
  sub_1000EE604((uint64_t)v5, v6, &qword_1001ACA28);
  swift_endAccess(v9);
  [*(id *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) systemSpokenLanguageChanged:0];
  return sub_1000EE648((uint64_t)v5, &qword_1001ACA28);
}

uint64_t sub_1000E7460()
{
  uint64_t v1 = type metadata accessor for Locale(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t KeyPath = swift_getKeyPath(&unk_100133148);
  v14[0] = v0;
  uint64_t v8 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v14, KeyPath, v8);
  swift_release(KeyPath);
  uint64_t v9 = v0 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  swift_beginAccess(v9, v14, 0LL, 0LL);
  sub_1000EE798(v9, (uint64_t)v6, &qword_1001ACA28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v6, 1LL, v1))
  {
    sub_1000EE648((uint64_t)v6, &qword_1001ACA28);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v6, v1);
    uint64_t v11 = sub_1000EE648((uint64_t)v6, &qword_1001ACA28);
    uint64_t v10 = Locale.minimalCanonicLocaleIdentifier.getter(v11);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  return v10;
}

uint64_t sub_1000E78A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E78C0(&OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection, &qword_1001ACAE8, a1);
}

uint64_t sub_1000E78C0@<X0>(void *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  v11[0] = v3;
  uint64_t v8 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v11, KeyPath, v8);
  swift_release(KeyPath);
  uint64_t v9 = v3 + *a1;
  swift_beginAccess(v9, v11, 0LL, 0LL);
  return sub_1000EE798(v9, a3, a2);
}

uint64_t sub_1000E7B04@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(a2);
  v13[0] = v8;
  uint64_t v10 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v10);
  swift_release(KeyPath);
  uint64_t v11 = v8 + *a3;
  swift_beginAccess(v11, v13, 0LL, 0LL);
  return sub_1000EE798(v11, a5, a4);
}

uint64_t sub_1000E7BC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000EE798(a1, (uint64_t)v5, &qword_1001ACAE8);
  uint64_t v6 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133238);
  uint64_t v11 = v6;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  uint64_t v8 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v13,  KeyPath,  sub_1000EEC9C,  v10,  (char *)&type metadata for () + 8,  v8);
  swift_release(KeyPath);
  return sub_1000EE648((uint64_t)v5, &qword_1001ACAE8);
}

id sub_1000E7D60( uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = a1 + *a4;
  swift_beginAccess(v13, v19, 0LL, 0LL);
  sub_1000EE798(v13, (uint64_t)v12, a3);
  uint64_t v14 = a5(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1LL, v14) != 1)
  {
    int v16 = (void *)a6();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }

  return v16;
}

id sub_1000E7FD4(uint64_t a1)
{
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  char v57 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v56 - v4;
  uint64_t v6 = sub_1000ED63C(&qword_1001ACA40);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v59 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v58 = (uint64_t)&v56 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  int v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  int v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(a1, 1LL, v19);
  uint64_t v60 = a1;
  sub_1000EE798(a1, (uint64_t)v18, &qword_1001ACA40);
  if (v22 == 1)
  {
    sub_1000EE648((uint64_t)v18, &qword_1001ACA40);
    uint64_t v23 = v61;
  }

  else
  {
    sub_1000EE798((uint64_t)v18, (uint64_t)v16, &qword_1001ACA40);
    if (v21((uint64_t)v16, 1LL, v19) == 1)
    {
      sub_1000EE648((uint64_t)v18, &qword_1001ACA40);
      sub_1000EE648((uint64_t)v16, &qword_1001ACA40);
      uint64_t v24 = type metadata accessor for VoiceSelection(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v5, 1LL, 1LL, v24);
      uint64_t v23 = v61;
    }

    else
    {
      AXPreferences.VoiceOver.Activity.voiceSelection.getter();
      sub_1000EE648((uint64_t)v18, &qword_1001ACA40);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
      uint64_t v25 = type metadata accessor for VoiceSelection(0LL);
      int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48LL))(v5, 1LL, v25);
      uint64_t v23 = v61;
      if (v26 != 1)
      {
        uint64_t v36 = (uint64_t)v5;
        goto LABEL_13;
      }
    }

    sub_1000EE648((uint64_t)v5, &qword_1001ACAE8);
  }

  uint64_t KeyPath = swift_getKeyPath(&unk_1001331E8);
  v63[0] = v23;
  uint64_t v28 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v63, KeyPath, v28);
  swift_release(KeyPath);
  uint64_t v29 = v23 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess(v23 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, v63, 0LL, 0LL);
  sub_1000EE798(v29, (uint64_t)v13, &qword_1001ACA40);
  int v30 = v21((uint64_t)v13, 1LL, v19);
  sub_1000EE648((uint64_t)v13, &qword_1001ACA40);
  if (v30 != 1)
  {
    uint64_t v31 = swift_getKeyPath(&unk_1001331E8);
    v62[0] = v23;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v62, v31, v28);
    swift_release(v31);
    uint64_t v32 = v58;
    sub_1000EE798(v29, v58, &qword_1001ACA40);
    if (v21(v32, 1LL, v19))
    {
      sub_1000EE648(v32, &qword_1001ACA40);
      uint64_t v33 = type metadata accessor for VoiceSelection(0LL);
      uint64_t v34 = (uint64_t)v57;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v57, 1LL, 1LL, v33);
LABEL_11:
      uint64_t v36 = v34;
LABEL_13:
      sub_1000EE648(v36, &qword_1001ACAE8);
      goto LABEL_14;
    }

    uint64_t v34 = (uint64_t)v57;
    AXPreferences.VoiceOver.Activity.voiceSelection.getter();
    sub_1000EE648(v32, &qword_1001ACA40);
    uint64_t v35 = type metadata accessor for VoiceSelection(0LL);
    sub_1000EE648(v34, &qword_1001ACAE8);
    BOOL v51 = *(void **)(v23 + OBJC_IVAR____TtC3vot11VOTSettings_workspace);
    id v52 = [v51 previousRotorVoiceIdentifier];
    if (!v52)
    {
      ((void (*)(void))AXPreferences.VoiceOver.currentRotorVoiceIdentifier.getter)();
      if (v53)
      {
        uint64_t v54 = v53;
        NSString v55 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v54);
      }

      else
      {
        NSString v55 = 0LL;
      }

      [v51 setPreviousRotorVoiceIdentifier:v55];

      return (id)AXPreferences.VoiceOver.currentRotorVoiceIdentifier.setter(0LL, 0LL);
    }
  }

uint64_t sub_1000E877C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E78C0(&OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, &qword_1001ACA40, a1);
}

uint64_t sub_1000E8924(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA40);
  __chkstk_darwin(v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000EE798(a1, (uint64_t)v6, &qword_1001ACA40);
  uint64_t v7 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001331E8);
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v14,  KeyPath,  sub_1000EE5EC,  v11,  (char *)&type metadata for () + 8,  v9);
  swift_release(KeyPath);
  return sub_1000EE648((uint64_t)v6, &qword_1001ACA40);
}

uint64_t sub_1000E8A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA40);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v9 = &v12[-v8];
  sub_1000EE798(a2, (uint64_t)&v12[-v8], &qword_1001ACA40);
  uint64_t v10 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, v13, 0LL, 0LL);
  sub_1000EE798(v10, (uint64_t)v7, &qword_1001ACA40);
  swift_beginAccess(v10, v12, 33LL, 0LL);
  sub_1000EE604((uint64_t)v9, v10, &qword_1001ACA40);
  swift_endAccess(v12);
  sub_1000E7FD4((uint64_t)v7);
  sub_1000EE648((uint64_t)v9, &qword_1001ACA40);
  return sub_1000EE648((uint64_t)v7, &qword_1001ACA40);
}

id sub_1000E8B50(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA40);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v20 - v8;
  id result = [*(id *)(v2 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) elementManager];
  if (result)
  {
    id v11 = result;
    id v12 = [result determineActivityForElement:a1];
    swift_unknownObjectRelease(v11);
    uint64_t v13 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    uint64_t v16 = 1LL;
    if (v12)
    {
      v15(v7, 1LL, 1LL, v13);
      uint64_t v17 = sub_1000EE57C( &qword_1001ACA78,  (uint64_t (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity,  (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
      dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v12, v7, v13, v17);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1LL, v13) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v7, v13);
        uint64_t v16 = 0LL;
      }
    }

    v15(v9, v16, 1LL, v13);
    uint64_t KeyPath = swift_getKeyPath(&unk_1001331E8);
    __chkstk_darwin(KeyPath);
    *(&v20 - 2) = v2;
    *(&v20 - 1) = (uint64_t)v9;
    uint64_t v21 = v2;
    uint64_t v19 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v21,  KeyPath,  sub_1000EECB0,  &v20 - 4,  (char *)&type metadata for () + 8,  v19);
    swift_release(KeyPath);
    return (id)sub_1000EE648((uint64_t)v9, &qword_1001ACA40);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000E8E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000ED63C(&qword_1001ACA48);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  id v11 = (char *)&v23 - v10;
  type metadata accessor for TTSExecutor(0LL);
  uint64_t v24 = static TTSExecutor.shared.getter();
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
  uint64_t v14 = (void *)swift_allocObject(&unk_10017A498, 40LL, 7LL);
  v14[2] = a1;
  void v14[3] = a2;
  v14[4] = v2;
  sub_1000EE754((uint64_t)v11, (uint64_t)v9, &qword_1001ACA48);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1LL, v12);
  swift_retain(a2);
  id v16 = v3;
  if (v15 == 1)
  {
    sub_1000EE648((uint64_t)v9, &qword_1001ACA48);
    uint64_t v17 = 7168LL;
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter(v16);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    uint64_t v17 = v18 | 0x1C00LL;
  }

  uint64_t v19 = sub_1000EE57C( &qword_1001ACA60,  (uint64_t (*)(uint64_t))&type metadata accessor for TTSExecutor,  (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  uint64_t v20 = swift_allocObject(&unk_10017A4C0, 32LL, 7LL);
  *(void *)(v20 + 16) = &unk_1001ACAF8;
  *(void *)(v20 + 24) = v14;
  v25[0] = 6LL;
  v25[1] = 0LL;
  v25[2] = v24;
  v25[3] = v19;
  uint64_t v21 = swift_task_create(v17, v25, (char *)&type metadata for () + 8, &unk_1001ACB00, v20);
  return swift_release(v21);
}

uint64_t sub_1000E900C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  void v4[8] = a2;
  uint64_t v5 = sub_1000ED63C(&qword_1001ACAB0);
  v4[11] = v5;
  v4[12] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_1000ED63C(&qword_1001ACA28) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[13] = swift_task_alloc(v6);
  void v4[14] = swift_task_alloc(v6);
  v4[15] = swift_task_alloc(v6);
  unint64_t v7 = (*(void *)(*(void *)(sub_1000ED63C(&qword_1001ACAE8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint8_t v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for Locale(0LL);
  v4[18] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[19] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v10);
  v4[21] = swift_task_alloc(v10);
  unint64_t v11 = (*(void *)(*(void *)(sub_1000ED63C(&qword_1001ACB08) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[22] = swift_task_alloc(v11);
  v4[23] = swift_task_alloc(v11);
  uint64_t v12 = sub_1000ED63C(&qword_1001ACB10);
  v4[24] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[25] = v13;
  v4[26] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1000ED63C(&qword_1001ACB18);
  v4[27] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[28] = v15;
  v4[29] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000E91A8, 0LL, 0LL);
}

uint64_t sub_1000E91A8()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = v0[26];
  uint64_t v3 = v0[24];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[8];
  uint64_t v7 = swift_retain(v4);
  AXPreferences.VoiceOver.defaultVoiceSelectionStream.getter(v7);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v8 = OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
  v0[30] = OBJC_IVAR____TtC3vot11VOTSettings___observationRegistrar;
  v0[31] = v8;
  swift_beginAccess(v5 + v8, v0 + 2, 0LL, 0LL);
  v0[33] = v6;
  v0[34] = v4;
  v0[32] = 0LL;
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[35] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000E92AC;
  return AsyncStream.Iterator.next(isolation:)(v0[22], 0LL, 0LL, v0[27]);
}

uint64_t sub_1000E92AC()
{
  return swift_task_switch(sub_1000E9300, 0LL, 0LL);
}

uint64_t sub_1000E9300()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_1000EE754(*(void *)(v0 + 176), v1, &qword_1001ACB08);
  uint64_t v2 = sub_1000ED63C(&qword_1001ACB20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v60 = *(void *)(v0 + 128);
    uint64_t v62 = *(void *)(v0 + 120);
    uint64_t v64 = *(void *)(v0 + 112);
    uint64_t v66 = *(void *)(v0 + 104);
    uint64_t v67 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 8LL))(v5, *(void *)(v0 + 216));
    sub_1000EE510(v3, v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v60);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void **)(v0 + 152);
  uint64_t v15 = *(void *)(v0 + 136);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = (uint64_t *)(v0 + 96);
  uint64_t v63 = *(void *)(v0 + 96);
  uint64_t v18 = *(void *)(v0 + 80);
  uint64_t v59 = *(void *)(v0 + 168);
  uint64_t v61 = *(void *)(v0 + 88);
  uint64_t v65 = v18 + *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 184) + *(int *)(v2 + 48);
  uint64_t v58 = (void (*)(void))v14[4];
  v58();
  sub_1000EE754(v19, v15, &qword_1001ACAE8);
  uint64_t KeyPath = swift_getKeyPath(&unk_100133148);
  *(void *)(v0 + 40) = v18;
  uint64_t v68 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, KeyPath, v68);
  swift_release(KeyPath);
  uint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v14[2];
  v21(v16, v59, v13);
  int v22 = (void (*)(uint64_t, void, uint64_t, uint64_t))v14[7];
  v22(v16, 0LL, 1LL, v13);
  uint64_t v23 = v63 + *(int *)(v61 + 48);
  sub_1000EE798(v65, v63, &qword_1001ACA28);
  sub_1000EE798(v16, v23, &qword_1001ACA28);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14[6];
  int v25 = v24(v63, 1LL, v13);
  uint64_t v26 = *(void *)(v0 + 144);
  if (v25 == 1)
  {
    sub_1000EE648(*(void *)(v0 + 120), &qword_1001ACA28);
    if (v24(v23, 1LL, v26) == 1)
    {
      uint64_t v27 = *(void *)(v0 + 256);
LABEL_12:
      sub_1000EE648(*v17, &qword_1001ACA28);
      goto LABEL_13;
    }

    goto LABEL_8;
  }

  sub_1000EE798(*(void *)(v0 + 96), *(void *)(v0 + 112), &qword_1001ACA28);
  if (v24(v23, 1LL, v26) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 144);
    uint64_t v29 = *(void *)(v0 + 152);
    uint64_t v30 = *(void *)(v0 + 112);
    sub_1000EE648(*(void *)(v0 + 120), &qword_1001ACA28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
LABEL_8:
    sub_1000EE648(*v17, &qword_1001ACAB0);
LABEL_11:
    uint64_t v17 = (uint64_t *)(v0 + 104);
    uint64_t v40 = *(void *)(v0 + 104);
    uint64_t v27 = *(void *)(v0 + 256);
    uint64_t v41 = *(void *)(v0 + 144);
    uint64_t v42 = v22;
    uint64_t v43 = *(void *)(v0 + 80);
    v21(v40, *(void *)(v0 + 168), v41);
    v42(v40, 0LL, 1LL, v41);
    uint64_t v44 = swift_getKeyPath(&unk_100133148);
    uint64_t v45 = swift_task_alloc(32LL);
    *(void *)(v45 + 16) = v43;
    *(void *)(v45 + 24) = v40;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v43;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v0 + 48,  v44,  sub_1000EEC88,  v45,  (char *)&type metadata for () + 8,  v68);
    swift_release(v44);
    swift_task_dealloc(v45);
    goto LABEL_12;
  }

  uint64_t v32 = *(void *)(v0 + 152);
  uint64_t v31 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 144);
  uint64_t v35 = *(void *)(v0 + 112);
  uint64_t v34 = *(void *)(v0 + 120);
  uint64_t v36 = *(void *)(v0 + 96);
  ((void (*)(uint64_t, uint64_t, uint64_t))v58)(v31, v23, v33);
  uint64_t v37 = sub_1000EE57C( &qword_1001ACAD8,  (uint64_t (*)(uint64_t))&type metadata accessor for Locale,  (uint64_t)&protocol conformance descriptor for Locale);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v35, v31, v33, v37);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v39(v31, v33);
  sub_1000EE648(v34, &qword_1001ACA28);
  v39(v35, v33);
  sub_1000EE648(v36, &qword_1001ACA28);
  if ((v38 & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v27 = *(void *)(v0 + 256);
LABEL_13:
  uint64_t v46 = *(void *)(v0 + 264);
  uint64_t v47 = *(void *)(v0 + 128);
  uint64_t v48 = *(void *)(v0 + 80);
  sub_1000EE798(*(void *)(v0 + 136), v47, &qword_1001ACAE8);
  uint64_t v49 = swift_getKeyPath(&unk_100133238);
  uint64_t v50 = swift_task_alloc(32LL);
  *(void *)(v50 + 16) = v48;
  *(void *)(v50 + 24) = v47;
  *(void *)(v0 + 56) = v48;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v0 + 56,  v49,  sub_1000EE80C,  v50,  (char *)&type metadata for () + 8,  v68);
  swift_release(v49);
  swift_task_dealloc(v50);
  sub_1000EE648(v47, &qword_1001ACAE8);
  if (v46)
  {
    BOOL v51 = *(void (**)(uint64_t))(v0 + 264);
    uint64_t v52 = *(void *)(v0 + 272);
    uint64_t v53 = swift_retain(v52);
    v51(v53);
    sub_1000EE510((uint64_t)v51, v52);
    sub_1000EE510((uint64_t)v51, v52);
  }

  uint64_t v54 = *(void *)(v0 + 168);
  uint64_t v55 = *(void *)(v0 + 144);
  uint64_t v56 = *(void *)(v0 + 152);
  sub_1000EE648(*(void *)(v0 + 136), &qword_1001ACAE8);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
  *(void *)(v0 + 264) = 0LL;
  *(void *)(v0 + 272) = 0LL;
  *(void *)(v0 + 256) = v27;
  char v57 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 280) = v57;
  *char v57 = v0;
  v57[1] = sub_1000E92AC;
  return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 176), 0LL, 0LL, *(void *)(v0 + 216));
}

uint64_t sub_1000E98A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E78C0(&OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage, &qword_1001ACA28, a1);
}

uint64_t sub_1000E98C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin(v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000EE798(a1, (uint64_t)v6, &qword_1001ACA28);
  uint64_t v7 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133210);
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v14,  KeyPath,  sub_1000EEC74,  v11,  (char *)&type metadata for () + 8,  v9);
  swift_release(KeyPath);
  return sub_1000EE648((uint64_t)v6, &qword_1001ACA28);
}

uint64_t sub_1000E99C8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000EE798(a2, (uint64_t)v9, a3);
  uint64_t v10 = a1 + *a4;
  swift_beginAccess(v10, v13, 33LL, 0LL);
  sub_1000EE834((uint64_t)v9, v10, a3);
  return swift_endAccess(v13);
}

id sub_1000E9A94(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    NSString v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1000E9AFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000ED63C(&qword_1001ACA28);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  NSString v7 = (char *)v25 - v6;
  uint64_t v8 = type metadata accessor for Locale(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v25 - v13;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133210);
  v26[0] = v0;
  uint64_t v16 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, KeyPath, v16);
  swift_release(KeyPath);
  uint64_t v17 = v0 + OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage;
  swift_beginAccess(v0 + OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage, v26, 0LL, 0LL);
  sub_1000EE798(v17, (uint64_t)v7, &qword_1001ACA28);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v18(v7, 1LL, v8) == 1)
  {
    sub_1000EE648((uint64_t)v7, &qword_1001ACA28);
    uint64_t v19 = swift_getKeyPath(&unk_1001331C0);
    v25[0] = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v25, v19, v16);
    swift_release(v19);
    uint64_t v20 = v0 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
    swift_beginAccess(v1 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage, v25, 0LL, 0LL);
    sub_1000EE798(v20, (uint64_t)v5, &qword_1001ACA28);
    if (v18(v5, 1LL, v8))
    {
      sub_1000EE648((uint64_t)v5, &qword_1001ACA28);
      return 0LL;
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v5, v8);
      uint64_t v23 = sub_1000EE648((uint64_t)v5, &qword_1001ACA28);
      uint64_t v21 = Locale.minimalCanonicLocaleIdentifier.getter(v23);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
  }

  else
  {
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    uint64_t v21 = Locale.minimalCanonicLocaleIdentifier.getter(v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  return v21;
}

id sub_1000E9E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    Locale.init(withAXRemapping:)(a1, a2);
    uint64_t v9 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
    uint64_t KeyPath = swift_getKeyPath(&unk_100133210);
    __chkstk_darwin(KeyPath);
    uint64_t v11 = &v17 - 4;
    *(&v17 - 2) = v3;
    *(&v17 - 1) = (uint64_t)v8;
    uint64_t v18 = v3;
    uint64_t v12 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    uint64_t v13 = (char *)&type metadata for () + 8;
    uint64_t v14 = sub_1000EEC74;
  }

  else
  {
    uint64_t v15 = type metadata accessor for Locale(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v8, 1LL, 1LL, v15);
    uint64_t KeyPath = swift_getKeyPath(&unk_100133210);
    __chkstk_darwin(KeyPath);
    uint64_t v11 = &v17 - 4;
    *(&v17 - 2) = v3;
    *(&v17 - 1) = (uint64_t)v8;
    uint64_t v18 = v3;
    uint64_t v12 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    uint64_t v13 = (char *)&type metadata for () + 8;
    uint64_t v14 = sub_1000EE6B4;
  }

  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, v14, v11, v13, v12);
  swift_release(KeyPath);
  sub_1000EE648((uint64_t)v8, &qword_1001ACA28);
  return [*(id *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) _preferencesSelectedLanguageChanged];
}

uint64_t sub_1000EA024@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E78C0(&OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage, &qword_1001ACA28, a1);
}

uint64_t sub_1000EA040(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin(v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000EE798(a1, (uint64_t)v6, &qword_1001ACA28);
  uint64_t v7 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1001331C0);
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v14,  KeyPath,  sub_1000EEC60,  v11,  (char *)&type metadata for () + 8,  v9);
  swift_release(KeyPath);
  return sub_1000EE648((uint64_t)v6, &qword_1001ACA28);
}

uint64_t sub_1000EA148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin(v4);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1000EE798(a2, (uint64_t)v6, &qword_1001ACA28);
  uint64_t v7 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage, v10, 33LL, 0LL);
  sub_1000EE604((uint64_t)v6, v7, &qword_1001ACA28);
  swift_endAccess(v10);
  [*(id *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings_workspace) _preferencesSelectedLanguageChanged];
  return sub_1000EE648((uint64_t)v6, &qword_1001ACA28);
}

uint64_t sub_1000EA230(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000ED63C(&qword_1001ACA48);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  type metadata accessor for TTSExecutor(0LL);
  uint64_t v25 = static TTSExecutor.shared.getter();
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
  uint64_t v14 = (void *)swift_allocObject(&unk_10017A420, 40LL, 7LL);
  v14[2] = v2;
  void v14[3] = a1;
  v14[4] = a2;
  sub_1000EE754((uint64_t)v11, (uint64_t)v9, &qword_1001ACA48);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1LL, v12);
  id v16 = v3;
  uint64_t v17 = swift_retain(a2);
  if (v15 == 1)
  {
    sub_1000EE648((uint64_t)v9, &qword_1001ACA48);
    uint64_t v18 = 7168LL;
  }

  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter(v17);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    uint64_t v18 = v19 | 0x1C00LL;
  }

  uint64_t v20 = sub_1000EE57C( &qword_1001ACA60,  (uint64_t (*)(uint64_t))&type metadata accessor for TTSExecutor,  (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  uint64_t v21 = swift_allocObject(&unk_10017A448, 32LL, 7LL);
  *(void *)(v21 + 16) = &unk_1001ACAA0;
  *(void *)(v21 + 24) = v14;
  v26[0] = 6LL;
  v26[1] = 0LL;
  v26[2] = v25;
  void v26[3] = v20;
  uint64_t v22 = swift_task_create(v18, v26, (char *)&type metadata for () + 8, &unk_1001ACAA8, v21);
  return swift_release(v22);
}

uint64_t sub_1000EA420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[11] = a3;
  v4[12] = a4;
  v4[10] = a2;
  uint64_t v5 = type metadata accessor for Locale(0LL);
  v4[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[14] = v6;
  v4[15] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000ED63C(&qword_1001ACAB0);
  uint8_t v4[16] = v7;
  v4[17] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000ED63C(&qword_1001ACAB8);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(sub_1000ED63C(&qword_1001ACA28) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[19] = swift_task_alloc(v9);
  v4[20] = swift_task_alloc(v9);
  v4[21] = swift_task_alloc(v9);
  uint64_t v10 = sub_1000ED63C(&qword_1001ACAC0);
  v4[22] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[23] = v11;
  v4[24] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000ED63C(&qword_1001ACAC8);
  v4[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[26] = v13;
  v4[27] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000EA568, 0LL, 0LL);
}

uint64_t sub_1000EA568()
{
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v4 = (void *)v0[10];
  uint64_t v5 = swift_allocObject(&unk_10017A470, 24LL, 7LL);
  *(void *)(v5 + 16) = v4;
  uint64_t v6 = v4;
  uint64_t v7 = sub_1000ED63C(&qword_1001ACAD0);
  axObservationTrackingStream<A>(_:)(sub_1000EE508, v5, v7);
  swift_release(v5);
  swift_retain(v2);
  AsyncStream.makeAsyncIterator()(v1);
  uint64_t v8 = OBJC_IVAR____TtC3vot11VOTSettings_resolver;
  v0[28] = OBJC_IVAR____TtC3vot11VOTSettings___observationRegistrar;
  v0[29] = v8;
  uint64_t v9 = OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
  v0[30] = OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage;
  swift_beginAccess(&v6[v9], v0 + 2, 0LL, 0LL);
  v0[32] = v3;
  v0[33] = v2;
  v0[31] = 0LL;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[34] = v10;
  void *v10 = v0;
  v10[1] = sub_1000EA6A0;
  return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0LL, 0LL, v0[22]);
}

uint64_t sub_1000EA6A0()
{
  return swift_task_switch(sub_1000EA6F4, 0LL, 0LL);
}

uint64_t sub_1000EA6F4()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  *(void *)(v0 + 280) = v1;
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = v2;
  if (v2)
  {
    if (v2 == 1)
    {
      uint64_t v3 = *(void *)(v0 + 256);
      uint64_t v4 = *(void *)(v0 + 264);
      uint64_t v6 = *(void *)(v0 + 208);
      uint64_t v5 = *(void *)(v0 + 216);
      uint64_t v8 = *(void *)(v0 + 192);
      uint64_t v7 = *(void *)(v0 + 200);
      uint64_t v10 = *(void *)(v0 + 160);
      uint64_t v9 = *(void *)(v0 + 168);
      uint64_t v11 = *(void *)(v0 + 152);
      uint64_t v24 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 136);
      uint64_t v26 = *(void *)(v0 + 120);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 8LL))(v8, *(void *)(v0 + 176));
      sub_1000EE510(v3, v4);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_task_dealloc(v5);
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      *(void *)(v0 + 296) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_1000EA9AC;
      return ((uint64_t (*)(void, uint64_t, uint64_t))v28)(*(void *)(v0 + 144), v1, v2);
    }
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v27 = *(void *)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v14,  1LL,  1LL,  *(void *)(v0 + 104));
    uint64_t KeyPath = swift_getKeyPath(&unk_1001331C0);
    uint64_t v17 = swift_task_alloc(32LL);
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v14;
    *(void *)(v0 + 56) = v15;
    uint64_t v18 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v0 + 56,  KeyPath,  sub_1000EE550,  v17,  (char *)&type metadata for () + 8,  v18);
    swift_release(KeyPath);
    swift_task_dealloc(v17);
    sub_1000EE648(v14, &qword_1001ACA28);
    if (v27)
    {
      unsigned __int8 v19 = *(void (**)(void))(v0 + 256);
      swift_retain(*(void *)(v0 + 264));
      v19();
      uint64_t v21 = *(void *)(v0 + 256);
      uint64_t v20 = *(void *)(v0 + 264);
      sub_1000EE510(v21, v20);
      sub_1000EE510(v21, v20);
    }

    *(void *)(v0 + 256) = 0LL;
    *(void *)(v0 + 264) = 0LL;
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v13;
    uint64_t v22 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 272) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1000EA6A0;
    return AsyncStream.Iterator.next(isolation:)(v0 + 40, 0LL, 0LL, *(void *)(v0 + 176));
  }

uint64_t sub_1000EA9AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 280LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  sub_1000EE568(v2, v1);
  return swift_task_switch(sub_1000EAA10, 0LL, 0LL);
}

uint64_t sub_1000EAA10()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = type metadata accessor for CoreSynthesizer.Voice(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) == 1)
  {
    sub_1000EE648(v1, &qword_1001ACAB8);
    uint64_t v4 = 1LL;
  }

  else
  {
    CoreSynthesizer.Voice.primaryLocale.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
    uint64_t v4 = 0LL;
  }

  uint64_t v6 = v0 + 17;
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[20];
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[10];
  uint64_t v36 = v11 + v0[30];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v7, v4, 1LL, v9);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001331C0);
  v0[8] = v11;
  uint64_t v37 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 8, KeyPath, v37);
  swift_release(KeyPath);
  uint64_t v13 = v5 + *(int *)(v8 + 48);
  sub_1000EE798(v36, v5, &qword_1001ACA28);
  sub_1000EE798(v7, v13, &qword_1001ACA28);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v14(v5, 1LL, v9) != 1)
  {
    uint64_t v16 = v0[13];
    sub_1000EE798(v0[17], v0[19], &qword_1001ACA28);
    int v17 = v14(v13, 1LL, v16);
    uint64_t v18 = v0[19];
    if (v17 != 1)
    {
      uint64_t v19 = v0[17];
      uint64_t v20 = v0[14];
      uint64_t v21 = v0[15];
      uint64_t v22 = v0[13];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, v13, v22);
      uint64_t v23 = sub_1000EE57C( &qword_1001ACAD8,  (uint64_t (*)(uint64_t))&type metadata accessor for Locale,  (uint64_t)&protocol conformance descriptor for Locale);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v21, v22, v23);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v25(v21, v22);
      v25(v18, v22);
      sub_1000EE648(v19, &qword_1001ACA28);
      if ((v24 & 1) != 0)
      {
        uint64_t v15 = v0[31];
        goto LABEL_14;
      }

      goto LABEL_12;
    }

    (*(void (**)(void, void))(v0[14] + 8LL))(v0[19], v0[13]);
LABEL_9:
    sub_1000EE648(*v6, &qword_1001ACAB0);
LABEL_12:
    uint64_t v6 = v0 + 21;
    uint64_t v26 = v0[21];
    uint64_t v15 = v0[31];
    uint64_t v27 = v0[10];
    sub_1000EE798(v0[20], v26, &qword_1001ACA28);
    uint64_t v28 = swift_getKeyPath(&unk_1001331C0);
    uint64_t v29 = swift_task_alloc(32LL);
    *(void *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v26;
    v0[9] = v27;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v0 + 9,  v28,  sub_1000EEC60,  v29,  (char *)&type metadata for () + 8,  v37);
    swift_release(v28);
    swift_task_dealloc(v29);
    goto LABEL_13;
  }

  uint64_t v15 = v0[31];
LABEL_13:
  sub_1000EE648(*v6, &qword_1001ACA28);
LABEL_14:
  uint64_t v30 = v0[32];
  sub_1000EE648(v0[20], &qword_1001ACA28);
  if (v30)
  {
    uint64_t v31 = (void (*)(void))v0[32];
    swift_retain(v0[33]);
    v31();
    uint64_t v32 = v0[32];
    uint64_t v33 = v0[33];
    sub_1000EE510(v32, v33);
    sub_1000EE510(v32, v33);
  }

  v0[32] = 0LL;
  v0[33] = 0LL;
  v0[31] = v15;
  uint64_t v34 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[34] = v34;
  void *v34 = v0;
  v34[1] = sub_1000EA6A0;
  return AsyncStream.Iterator.next(isolation:)(v0 + 5, 0LL, 0LL, v0[22]);
}

uint64_t sub_1000EADCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_1000ED63C(&qword_1001ACA40);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v37[-1] - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37[-1] - v10;
  uint64_t v12 = sub_1000ED63C(&qword_1001ACAE0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v37[-1] - v17;
  AXPreferences.VoiceOver.currentVoiceRotor.getter(v16);
  uint64_t KeyPath = swift_getKeyPath(&unk_1001331E8);
  v37[0] = a1;
  uint64_t v20 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v37, KeyPath, v20);
  swift_release(KeyPath);
  uint64_t v21 = a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity;
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__currentActivity, v37, 0LL, 0LL);
  sub_1000EE798(v21, (uint64_t)v11, &qword_1001ACA40);
  sub_1000EE798((uint64_t)v18, (uint64_t)v15, &qword_1001ACAE0);
  uint64_t v22 = type metadata accessor for AXPreferences.VoiceOver.VoiceRotorItem(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1LL, v22) == 1)
  {
    sub_1000EE648((uint64_t)v15, &qword_1001ACAE0);
    sub_1000EE798((uint64_t)v11, (uint64_t)v9, &qword_1001ACA40);
  }

  else
  {
    uint64_t v24 = AXPreferences.VoiceOver.VoiceRotorItem.voiceId.getter();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v22);
    sub_1000EE798((uint64_t)v11, (uint64_t)v9, &qword_1001ACA40);
    if (v26)
    {
      sub_1000EE648((uint64_t)v9, &qword_1001ACA40);
      sub_1000EE648((uint64_t)v11, &qword_1001ACA40);
      uint64_t result = sub_1000EE648((uint64_t)v18, &qword_1001ACAE0);
      uint64_t v28 = v36;
      *uint64_t v36 = v24;
      v28[1] = v26;
      return result;
    }
  }

  sub_1000EE798((uint64_t)v9, (uint64_t)v6, &qword_1001ACA40);
  uint64_t v29 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1LL, v29) == 1)
  {
    sub_1000EE648((uint64_t)v9, &qword_1001ACA40);
    sub_1000EE648((uint64_t)v11, &qword_1001ACA40);
    sub_1000EE648((uint64_t)v18, &qword_1001ACAE0);
    uint64_t result = sub_1000EE648((uint64_t)v6, &qword_1001ACA40);
    uint64_t v31 = v36;
    *uint64_t v36 = 0LL;
    v31[1] = 0LL;
  }

  else
  {
    uint64_t v32 = AXPreferences.VoiceOver.Activity.voiceIdentifier.getter();
    uint64_t v34 = v33;
    sub_1000EE648((uint64_t)v9, &qword_1001ACA40);
    sub_1000EE648((uint64_t)v11, &qword_1001ACA40);
    sub_1000EE648((uint64_t)v18, &qword_1001ACAE0);
    uint64_t v35 = v36;
    *uint64_t v36 = v32;
    v35[1] = v34;
    return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v6, v29);
  }

  return result;
}

uint64_t sub_1000EB24C(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return swift_task_switch(sub_1000EB294, 0LL, 0LL);
}

uint64_t sub_1000EB294()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to AXPreferences.VoiceOver.effectiveSpeakingRate()[1]);
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1000EB2EC;
  return AXPreferences.VoiceOver.effectiveSpeakingRate()();
}

uint64_t sub_1000EB2EC(float a1)
{
  uint64_t v3 = *(void (***)(void, float))(*v1 + 24);
  id v4 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 32));

  v3[2](v3, a1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000EB48C(const void *a1, void *a2, float a3)
{
  *(void *)(v3 + 16) = a2;
  *(float *)(v3 + 40) = a3;
  *(void *)(v3 + 24) = _Block_copy(a1);
  id v5 = a2;
  return swift_task_switch(sub_1000EB4D8, 0LL, 0LL);
}

uint64_t sub_1000EB4D8()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to AXPreferences.VoiceOver.setEffectiveSpeakingRate(_:)[1]);
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1000EB534;
  return AXPreferences.VoiceOver.setEffectiveSpeakingRate(_:)(*(float *)(v0 + 40));
}

uint64_t sub_1000EB534()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  uint64_t v2 = *(void **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000EB598(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a4;
  uint64_t v28 = a2;
  uint64_t v9 = sub_1000ED63C(&qword_1001ACA48);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - v13;
  type metadata accessor for TTSExecutor(0LL);
  uint64_t v29 = static TTSExecutor.shared.getter();
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1LL, 1LL, v15);
  uint64_t v17 = (void *)swift_allocObject(&unk_10017A3D0, 64LL, 7LL);
  v17[2] = v27;
  v17[3] = a5;
  v17[4] = v5;
  void v17[5] = a1;
  v17[6] = v28;
  v17[7] = a3;
  sub_1000EE754((uint64_t)v14, (uint64_t)v12, &qword_1001ACA48);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1LL, v15);
  id v18 = a1;
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  id v19 = v5;
  if ((_DWORD)v14 == 1)
  {
    sub_1000EE648((uint64_t)v12, &qword_1001ACA48);
    uint64_t v20 = 7168LL;
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter(v19);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
    uint64_t v20 = v21 | 0x1C00LL;
  }

  uint64_t v22 = sub_1000EE57C( &qword_1001ACA60,  (uint64_t (*)(uint64_t))&type metadata accessor for TTSExecutor,  (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  uint64_t v23 = swift_allocObject(&unk_10017A3F8, 32LL, 7LL);
  *(void *)(v23 + 16) = &unk_1001ACA88;
  *(void *)(v23 + 24) = v17;
  v30[0] = 6LL;
  v30[1] = 0LL;
  v30[2] = v29;
  v30[3] = v22;
  uint64_t v24 = swift_task_create(v20, v30, (char *)&type metadata for () + 8, &unk_1001ACA90, v23);
  return swift_release(v24);
}

uint64_t sub_1000EB7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v11 = type metadata accessor for VoiceSelection(0LL);
  v7[4] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  void v7[5] = v12;
  uint64_t v13 = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v7[6] = v13;
  uint64_t v14 = (void *)swift_task_alloc(dword_1001ACA0C);
  v7[7] = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_1000EB854;
  return sub_1000EB9C0(v13, a5, a6, a7);
}

uint64_t sub_1000EB854()
{
  return swift_task_switch(sub_1000EB8A8, 0LL, 0LL);
}

uint64_t sub_1000EB8A8()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EB9C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Locale(0LL);
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = (*(void *)(*(void *)(sub_1000ED63C(&qword_1001ACA40) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[10] = swift_task_alloc(v8);
  v5[11] = swift_task_alloc(v8);
  return swift_task_switch(sub_1000EBA5C, 0LL, 0LL);
}

void sub_1000EBA5C()
{
  id v1 = [(id)objc_opt_self(VOTOutputManager) outputManagerIfExists];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 speechComponent];

    if (v3)
    {
      id v4 = [v3 determineActivityForAction:v0[3]];

      uint64_t v5 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      if (v4)
      {
        uint64_t v8 = v0[10];
        v7(v8, 1LL, 1LL, v5);
        uint64_t v9 = sub_1000EE57C( &qword_1001ACA78,  (uint64_t (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity,  (uint64_t)&protocol conformance descriptor for AXPreferences.VoiceOver.Activity);
        dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v4, v8, v5, v9);

        int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1LL, v5);
        uint64_t v11 = v0[11];
        if (v10 != 1)
        {
          (*(void (**)(void, void, uint64_t))(v6 + 32))(v0[11], v0[10], v5);
          uint64_t v12 = v11;
          uint64_t v13 = 0LL;
          goto LABEL_9;
        }

        uint64_t v12 = v0[11];
      }

      else
      {
        uint64_t v12 = v0[11];
      }

      uint64_t v13 = 1LL;
LABEL_9:
      v7(v12, v13, 1LL, v5);
      uint64_t v14 = v0[5];
      uint64_t v15 = v0[4];
      swift_bridgeObjectRetain(v14);
      Locale.init(withAXRemapping:)(v15, v14);
      uint64_t v16 = (void *)swift_task_alloc(async function pointer to AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)[1]);
      v0[12] = v16;
      void *v16 = v0;
      v16[1] = sub_1000EBC28;
      AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(v0[2], v0[9], v0[11]);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1000EBC28()
{
  return swift_task_switch(sub_1000EBC7C, 0LL, 0LL);
}

uint64_t sub_1000EBC7C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 64) + 8LL))(v3, *(void *)(v0 + 56));
  sub_1000EE648(v2, &qword_1001ACA40);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000EBCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a2;
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  uint64_t v7 = sub_1000ED63C(&qword_1001ACA40);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  int v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000ED63C(&qword_1001ACA48);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v33 - v15;
  type metadata accessor for TTSExecutor(0LL);
  uint64_t v38 = static TTSExecutor.shared.getter();
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1LL, 1LL, v17);
  sub_1000EE798(a3, (uint64_t)v10, &qword_1001ACA40);
  uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (v19 + 56) & ~v19;
  unsigned __int8 v21 = (void *)swift_allocObject(&unk_10017A380, v20 + v9, v19 | 7);
  void v21[2] = v34;
  v21[3] = a5;
  uint64_t v23 = v36;
  uint64_t v22 = v37;
  uint64_t v24 = v35;
  v21[4] = v37;
  v21[5] = v24;
  v21[6] = v23;
  sub_1000EE754((uint64_t)v10, (uint64_t)v21 + v20, &qword_1001ACA40);
  sub_1000EE754((uint64_t)v16, (uint64_t)v14, &qword_1001ACA48);
  LODWORD(v20) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1LL, v17);
  swift_retain(a5);
  id v25 = v22;
  uint64_t v26 = swift_bridgeObjectRetain(v23);
  if ((_DWORD)v20 == 1)
  {
    sub_1000EE648((uint64_t)v14, &qword_1001ACA48);
    uint64_t v27 = 7168LL;
  }

  else
  {
    unsigned __int8 v28 = TaskPriority.rawValue.getter(v26);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v17);
    uint64_t v27 = v28 | 0x1C00LL;
  }

  uint64_t v29 = sub_1000EE57C( &qword_1001ACA60,  (uint64_t (*)(uint64_t))&type metadata accessor for TTSExecutor,  (uint64_t)&_s12TextToSpeech11TTSExecutorCSchAAMc);
  uint64_t v30 = swift_allocObject(&unk_10017A3A8, 32LL, 7LL);
  *(void *)(v30 + 16) = &unk_1001ACA58;
  *(void *)(v30 + 24) = v21;
  v39[0] = 6LL;
  v39[1] = 0LL;
  v39[2] = v38;
  v39[3] = v29;
  uint64_t v31 = swift_task_create(v27, v39, (char *)&type metadata for () + 8, &unk_1001ACA70, v30);
  return swift_release(v31);
}

uint64_t sub_1000EBF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  void v7[5] = a5;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v8 = type metadata accessor for Locale(0LL);
  v7[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[9] = v9;
  v7[10] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for VoiceSelection(0LL);
  v7[11] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[12] = v11;
  v7[13] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000EBFF4, 0LL, 0LL);
}

uint64_t sub_1000EBFF4()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  swift_bridgeObjectRetain(v1);
  Locale.init(withAXRemapping:)(v2, v1);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)[1]);
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000EC084;
  return AXPreferences.VoiceOver.voiceSelection(locale:withActivity:)(v0[13], v0[10], v0[7]);
}

uint64_t sub_1000EC084()
{
  return swift_task_switch(sub_1000EC0D8, 0LL, 0LL);
}

uint64_t sub_1000EC0D8()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void (**)(uint64_t))(v0 + 16);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 72) + 8LL))(v4, *(void *)(v0 + 64));
  v5(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000EC2B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CoreSynthesizer.Voice.Trait(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for VoiceResolver.Mode(0LL);
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = OBJC_IVAR____TtC3vot11VOTSettings_settings;
  type metadata accessor for AXPreferences(0LL);
  uint64_t v9 = v0;
  uint64_t v10 = (char *)static AXPreferences.shared.getter();
  uint64_t v11 = (id *)&v10[direct field offset for AXPreferences.voiceover];
  swift_beginAccess(&v10[direct field offset for AXPreferences.voiceover], v45, 0LL, 0LL);
  id v12 = *v11;

  *(void *)&v1[v8] = v12;
  uint64_t v40 = OBJC_IVAR____TtC3vot11VOTSettings_resolver;
  uint64_t v39 = type metadata accessor for VoiceResolver(0LL);
  uint64_t v13 = sub_1000ED63C(&qword_1001ACB28);
  uint64_t v14 = type metadata accessor for VoiceResolver.VoiceSortKey(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = swift_allocObject(v13, v18 + 4 * v16, v17 | 7);
  *(_OWORD *)(v19 + 16) = xmmword_1001330E0;
  uint64_t v20 = v19 + v18;
  static CoreSynthesizer.Voice.Trait.firstParty.getter();
  uint64_t v21 = enum case for VoiceResolver.VoiceSortKey.trait(_:);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 104);
  uint64_t v23 = v22(v20, enum case for VoiceResolver.VoiceSortKey.trait(_:), v14);
  static CoreSynthesizer.Voice.Trait.localeDefault.getter(v23);
  v22(v20 + v16, v21, v14);
  v22(v20 + 2 * v16, enum case for VoiceResolver.VoiceSortKey.quality(_:), v14);
  v22(v20 + 3 * v16, enum case for VoiceResolver.VoiceSortKey.name(_:), v14);
  uint64_t *v7 = v19;
  (*(void (**)(uint64_t *, void, uint64_t))(v41 + 104))(v7, enum case for VoiceResolver.Mode.custom(_:), v42);
  uint64_t v24 = type metadata accessor for DefaultVoiceSource(0LL);
  uint64_t v25 = static DefaultVoiceSource.shared.getter();
  v44[3] = v24;
  v44[4] = &protocol witness table for DefaultVoiceSource;
  v44[0] = v25;
  static CoreSynthesizer.Voice.Trait.installed.getter();
  uint64_t v26 = VoiceResolver.__allocating_init(voiceSource:requiredTraits:sortMode:)(v44, v4, v7);
  *(void *)&v9[v40] = v26;
  id result = [(id)objc_opt_self(VOTWorkspace) sharedWorkspace];
  if (result)
  {
    *(void *)&v9[OBJC_IVAR____TtC3vot11VOTSettings_workspace] = result;
    unsigned __int8 v28 = &v9[OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage];
    uint64_t v29 = type metadata accessor for Locale(0LL);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL);
    v30(v28, 1LL, 1LL, v29);
    v30(v28, 1LL, 1LL, v29);
    uint64_t v31 = &v9[OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection];
    uint64_t v32 = type metadata accessor for VoiceSelection(0LL);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL);
    v33(v31, 1LL, 1LL, v32);
    v33(v31, 1LL, 1LL, v32);
    uint64_t v34 = &v9[OBJC_IVAR____TtC3vot11VOTSettings__currentActivity];
    uint64_t v35 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v34, 1LL, 1LL, v35);
    v30(&v9[OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage], 1LL, 1LL, v29);
    v30(&v9[OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage], 1LL, 1LL, v29);
    *(void *)&v9[OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters] = &_swiftEmptyDictionarySingleton;
    uint64_t v36 = sub_1000ED63C(&qword_1001ACB30);
    uint64_t v37 = swift_allocObject(v36, 20LL, 7LL);
    *(_DWORD *)(v37 + 16) = 0;
    *(void *)&v9[OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock] = v37;
    ObservationRegistrar.init()();

    uint64_t v38 = (objc_class *)type metadata accessor for VOTSettings(0LL);
    v43.receiver = v9;
    v43.super_class = v38;
    return objc_msgSendSuper2(&v43, "init");
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000EC79C()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100133198);
  v5[0] = v0;
  uint64_t v2 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = (void *)(v0 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess(v0 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters, v5, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v3);
}

uint64_t sub_1000EC844@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133198);
  v9[0] = v3;
  uint64_t v5 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  uint64_t v6 = (uint64_t *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess(v3 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters, v9, 0LL, 0LL);
  uint64_t v7 = *v6;
  *a2 = *v6;
  return swift_bridgeObjectRetain(v7);
}

uint64_t sub_1000EC8F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133198);
  v7[2] = v3;
  v7[3] = v2;
  uint64_t v8 = v3;
  uint64_t v5 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_1000EE148,  v7,  (char *)&type metadata for () + 8,  v5);
  swift_bridgeObjectRelease(v2);
  return swift_release(KeyPath);
}

uint64_t sub_1000EC9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000ECA18()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100133170);
  uint64_t v4 = v0;
  uint64_t v2 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(void *)(v0 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock));
}

uint64_t sub_1000ECAA8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133170);
  uint64_t v8 = v3;
  uint64_t v5 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock);
  *a2 = v6;
  return swift_retain(v6);
}

uint64_t sub_1000ECB40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100133170);
  v7[2] = v3;
  v7[3] = v2;
  uint64_t v8 = v3;
  uint64_t v5 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_1000EE160,  v7,  (char *)&type metadata for () + 8,  v5);
  swift_release(v2);
  return swift_release(KeyPath);
}

uint64_t sub_1000ECBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v47 = a3;
  uint64_t v9 = type metadata accessor for Locale(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  objc_super v43 = (char *)&v41 - v14;
  uint64_t v15 = sub_1000ED63C(&qword_1001ACA28);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v13;
  if (a4)
  {
    uint64_t v41 = v10;
    uint64_t v42 = v9;
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v18 = a4;
  }

  else
  {
    uint64_t KeyPath = swift_getKeyPath(&unk_100133148);
    v48[0] = v5;
    uint64_t v28 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v48, KeyPath, v28);
    swift_release(KeyPath);
    uint64_t v29 = v5 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage;
    swift_beginAccess(v5 + OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage, v48, 0LL, 0LL);
    sub_1000EE798(v29, (uint64_t)v17, &qword_1001ACA28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1LL, v9))
    {
      sub_1000EE648((uint64_t)v17, &qword_1001ACA28);
      char v26 = 1;
      return v26 & 1;
    }

    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v38 = v43;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v17, v9);
    uint64_t v39 = sub_1000EE648((uint64_t)v17, &qword_1001ACA28);
    uint64_t v47 = Locale.minimalCanonicLocaleIdentifier.getter(v39);
    uint64_t v18 = v40;
    uint64_t v41 = v10;
    uint64_t v42 = v9;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v38, v9);
    a4 = 0LL;
  }

  uint64_t v19 = swift_getKeyPath(&unk_100133170);
  uint64_t v49 = v5;
  uint64_t v20 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  swift_bridgeObjectRetain(a4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, v19, v20);
  uint64_t v21 = swift_release(v19);
  uint64_t v22 = OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock;
  uint64_t v23 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock);
  __chkstk_darwin(v21);
  uint64_t v24 = v47;
  *(&v41 - 4) = v5;
  *(&v41 - 3) = v24;
  *(&v41 - 2) = v18;
  swift_retain(v23);
  os_unfair_lock_lock(v23 + 4);
  sub_1000ED6B4(&v49);
  uint64_t v25 = v49;
  os_unfair_lock_unlock(v23 + 4);
  swift_release(v23);
  if (v25)
  {
    swift_bridgeObjectRelease(v18);
    char v26 = dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)(v44, v45);
    swift_release(v25);
  }

  else
  {
    swift_bridgeObjectRetain(v18);
    uint64_t v30 = v46;
    uint64_t v31 = v47;
    Locale.init(withAXRemapping:)(v47, v18);
    uint64_t v32 = v43;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v43, v30, v42);
    uint64_t v33 = type metadata accessor for AXCachedLocaleCharacterSupportMatrix(0LL);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    uint64_t v34 = AXCachedLocaleCharacterSupportMatrix.init(locale:)(v32);
    uint64_t v35 = swift_getKeyPath(&unk_100133170);
    uint64_t v49 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v49, v35, v20);
    swift_release(v35);
    uint64_t v36 = *(os_unfair_lock_s **)(v5 + v22);
    swift_retain(v36);
    os_unfair_lock_lock(v36 + 4);
    sub_1000ED128(v5, v31, v18, v34);
    os_unfair_lock_unlock(v36 + 4);
    swift_bridgeObjectRelease(v18);
    swift_release(v36);
    char v26 = dispatch thunk of AXCachedLocaleCharacterSupportMatrix.supports(string:)(v44, v45);
    swift_release(v34);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v46, v42);
  }

  return v26 & 1;
}

uint64_t sub_1000ED000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100133198);
  v16[0] = a1;
  uint64_t v9 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  swift_bridgeObjectRetain(a3);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v9);
  swift_release(KeyPath);
  uint64_t v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters, v16, 0LL, 0LL);
  uint64_t v11 = *v10;
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain(v11);
    unint64_t v12 = sub_1000ED9D8(a2, a3);
    if ((v13 & 1) != 0)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
      swift_retain(v14);
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    swift_bridgeObjectRelease(v11);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease(a3);
  *a4 = v14;
  return result;
}

uint64_t sub_1000ED128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100133198);
  v16[0] = a1;
  uint64_t v9 = sub_1000EE57C(&qword_1001ACA30, type metadata accessor for VOTSettings, (uint64_t)&unk_100133128);
  swift_bridgeObjectRetain(a3);
  swift_retain(a4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v9);
  swift_release(KeyPath);
  v16[0] = a1;
  uint64_t v10 = swift_getKeyPath(&unk_100133198);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v16, v10, v9);
  swift_release(v10);
  uint64_t v11 = (void *)(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters);
  swift_beginAccess(a1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharacters, v16, 33LL, 0LL);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  uint64_t v17 = *v11;
  void *v11 = 0x8000000000000000LL;
  sub_1000EDE30(a4, a2, a3, isUniquelyReferenced_nonNull_native);
  uint64_t v13 = *v11;
  void *v11 = v17;
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(a3);
  swift_endAccess(v16);
  v16[0] = a1;
  uint64_t v14 = swift_getKeyPath(&unk_100133198);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v16, v14, v9);
  return swift_release(v14);
}

id sub_1000ED348()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VOTSettings(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000ED480()
{
  return type metadata accessor for VOTSettings(0LL);
}

uint64_t type metadata accessor for VOTSettings(uint64_t a1)
{
  uint64_t result = qword_1001AC9F8;
  if (!qword_1001AC9F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for VOTSettings);
  }
  return result;
}

void sub_1000ED4C4(uint64_t a1)
{
  v11[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v11[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v11[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000ED5F0(319LL, &qword_1001ACA10, (uint64_t (*)(uint64_t))&type metadata accessor for Locale);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    void v11[3] = v4;
    sub_1000ED5F0(319LL, &qword_1001ACA18, (uint64_t (*)(uint64_t))&type metadata accessor for VoiceSelection);
    if (v6 <= 0x3F)
    {
      void v11[4] = *(void *)(v5 - 8) + 64LL;
      sub_1000ED5F0( 319LL,  &qword_1001ACA20,  (uint64_t (*)(uint64_t))&type metadata accessor for AXPreferences.VoiceOver.Activity);
      if (v8 <= 0x3F)
      {
        v11[5] = *(void *)(v7 - 8) + 64LL;
        v11[6] = v4;
        v11[7] = v4;
        v11[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v11[9] = (char *)&value witness table for Builtin.NativeObject + 64;
        uint64_t v9 = type metadata accessor for ObservationRegistrar(319LL);
        if (v10 <= 0x3F)
        {
          v11[10] = *(void *)(v9 - 8) + 64LL;
          swift_updateClassMetadata2(a1, 256LL, 11LL, v11, a1 + 80);
        }
      }
    }
  }

void sub_1000ED5F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_1000ED63C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000ED67C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7B04( a1,  (uint64_t)&unk_100133148,  &OBJC_IVAR____TtC3vot11VOTSettings__systemLanguage,  &qword_1001ACA28,  a2);
}

uint64_t sub_1000ED6B4@<X0>(void *a1@<X8>)
{
  return sub_1000ED000(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000ED6D0(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000EEC3C;
  return v6(a1);
}

uint64_t sub_1000ED734(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1000EEC38;
  return v6();
}

uint64_t sub_1000ED788(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000EEC38;
  return v7();
}

uint64_t sub_1000ED7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1000EE648(a1, &qword_1001ACA48);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_10017A600, 32LL, 7LL);
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001ACB70, v16);
}

uint64_t sub_1000ED928(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000ED98C;
  return v6(a1);
}

uint64_t sub_1000ED98C()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1000ED9D8(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1000EDA3C(a1, a2, v5);
}

unint64_t sub_1000EDA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

Swift::Int sub_1000EDB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000ED63C(&qword_1001ACA38);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v35) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_1000EDE30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000ED9D8(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000EDF8C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release(*(void *)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }

void *sub_1000EDF8C()
{
  uint64_t v1 = v0;
  sub_1000ED63C(&qword_1001ACA38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1000EE148()
{
  return sub_1000EC9AC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EE160()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock);
  *(void *)(v1 + OBJC_IVAR____TtC3vot11VOTSettings__languageCharactersLock) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release(v2);
}

uint64_t sub_1000EE1A0()
{
  return sub_1000E7368(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EE1B8()
{
  uint64_t v1 = *(void *)(sub_1000ED63C(&qword_1001ACA40) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 24));

  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  uint64_t v5 = type metadata accessor for AXPreferences.VoiceOver.Activity(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000EE268(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_1000ED63C(&qword_1001ACA40) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  uint64_t v11 = (void *)swift_task_alloc(dword_1001ACA54);
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_1000EEC38;
  return sub_1000EBF64(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000EE314(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001ACA6C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000EEC38;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001ACA68 + dword_1001ACA68))(a1, v4);
}

uint64_t sub_1000EE384()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000EE3C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1001ACA84);
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_1000EEC38;
  return sub_1000EB7A8(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000EE44C()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000EE478(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001ACA9C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000EEC38;
  return sub_1000EA420(a1, v4, v5, v6);
}

uint64_t sub_1000EE4E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000EE508@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000EADCC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000EE510(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000EE520@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7B04( a1,  (uint64_t)&unk_1001331C0,  &OBJC_IVAR____TtC3vot11VOTSettings__selectedLanguage,  &qword_1001ACA28,  a2);
}

uint64_t sub_1000EE550()
{
  return sub_1000EA148(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EE568(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000EE57C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000EE5BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7B04( a1,  (uint64_t)&unk_1001331E8,  &OBJC_IVAR____TtC3vot11VOTSettings__currentActivity,  &qword_1001ACA40,  a2);
}

uint64_t sub_1000EE5EC()
{
  return sub_1000E8A2C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EE604(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000ED63C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000EE648(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000ED63C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1000EE684@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7B04( a1,  (uint64_t)&unk_100133210,  &OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage,  &qword_1001ACA28,  a2);
}

uint64_t sub_1000EE6B4()
{
  return sub_1000E99C8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  &qword_1001ACA28,  &OBJC_IVAR____TtC3vot11VOTSettings___overrideLanguage);
}

uint64_t sub_1000EE6DC()
{
  return sub_1000EE8F8((void (*)(void))&_swift_release);
}

uint64_t sub_1000EE6E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001ACAF4);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000EEC38;
  return sub_1000E900C(a1, v4, v5, v6);
}

uint64_t sub_1000EE754(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000ED63C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000EE798(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000ED63C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000EE7DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E7B04( a1,  (uint64_t)&unk_100133238,  &OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection,  &qword_1001ACAE8,  a2);
}

uint64_t sub_1000EE80C()
{
  return sub_1000E99C8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  &qword_1001ACAE8,  &OBJC_IVAR____TtC3vot11VOTSettings__systemVoiceSelection);
}

uint64_t sub_1000EE834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000ED63C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

void sub_1000EE878()
{
}

uint64_t sub_1000EE880()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000EE8A8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)VoiceSelection._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1000EE8EC()
{
  return sub_1000EE8F8((void (*)(void))&__Block_release);
}

uint64_t sub_1000EE8F8(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_1000EE928()
{
  float v2 = *(float *)(v0 + 16);
  uint64_t v3 = *(const void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001ACB3C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000EE994;
  return ((uint64_t (*)(const void *, void *, float))((char *)&dword_1001ACB38 + dword_1001ACB38))(v3, v4, v2);
}

uint64_t sub_1000EE994()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000EE9E0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1001ACB4C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000EEC38;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1001ACB48 + dword_1001ACB48))(v2, v3, v4);
}

uint64_t sub_1000EEA5C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001ACB5C);
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000EEC38;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001ACB58 + dword_1001ACB58))( a1,  v4,  v5,  v6);
}

uint64_t sub_1000EEAE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000EEB04(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001ACB6C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000EE994;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001ACB68 + dword_1001ACB68))(a1, v4);
}

uint64_t sub_1000EEB74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000EEBA0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1001ACB7C);
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000EEC38;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1001ACB78 + dword_1001ACB78))(v2, v3);
}

uint64_t sub_1000EEC0C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000EEC60()
{
  return sub_1000EE550();
}

uint64_t sub_1000EEC74()
{
  return sub_1000EE6B4();
}

uint64_t sub_1000EEC88()
{
  return sub_1000EE1A0();
}

uint64_t sub_1000EEC9C()
{
  return sub_1000EE80C();
}

uint64_t sub_1000EECB0()
{
  return sub_1000EE5EC();
}

void sub_1000EECC4(int *a1, int a2, os_log_t log)
{
  int v3 = *a1;
  v4[0] = 67109376;
  v4[1] = a2;
  __int16 v5 = 1024;
  int v6 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Could not conusme start message: %d[%d]",  (uint8_t *)v4,  0xEu);
}

void sub_1000EED4C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "VO: Cannot set keep alive", v1, 2u);
}

void sub_1000EEDD4(os_log_s *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_1000113C4();
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "***Shutdown requested during unit tests.  This shouldn't happen***\n%@",  v3,  0xCu);

  sub_1000113B0();
}

void sub_1000EEE64()
{
}

void sub_1000EEEC4()
{
}

void sub_1000EEF24(os_log_s *a1)
{
  int v3 = 134217984;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_1000113A4((void *)&_mh_execute_header, a1, v2, "Audio session toggled at t=%f", (uint8_t *)&v3);
  sub_1000113B0();
}

void sub_1000EEF9C()
{
}

void sub_1000EEFFC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Using extended audio session timeout",  v1,  2u);
}

void sub_1000EF03C(id *a1, os_log_s *a2)
{
  unsigned int v3 = [*a1 externalAudioRouteSelected];
  v4[0] = 67109120;
  v4[1] = v3;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "External route selected: %d",  (uint8_t *)v4,  8u);
  sub_1000113BC();
}

void sub_1000EF0C4(os_log_s *a1)
{
  int v3 = 134217984;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_1000113A4((void *)&_mh_execute_header, a1, v2, "Session deactivated. at t=%f", (uint8_t *)&v3);
  sub_1000113B0();
}

void sub_1000EF13C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "attempting to play nil sound file", v1, 2u);
}

void sub_1000EF17C(uint64_t a1, os_log_s *a2)
{
  unsigned int v4 = [(id)VOTSharedWorkspace screenOn];
  uint64_t v5 = @"off";
  if (v4) {
    uint64_t v5 = @"on";
  }
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "screen is %@, sound: %@",  (uint8_t *)&v6,  0x16u);
  sub_1000113B0();
}

void sub_1000EF230()
{
}

void sub_1000EF294()
{
}

void sub_1000EF2F8(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = 138543362;
  uint64_t v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Media server session lost - remaking player for %{public}@",  (uint8_t *)&v3,  0xCu);
  sub_1000113BC();
}

void sub_1000EF36C(uint64_t a1, id *a2, os_log_s *a3)
{
  id v5 = [*a2 numberOfChannels];
  int v7 = 138543618;
  uint64_t v8 = a1;
  __int16 v9 = 2048;
  id v10 = v5;
  sub_100013FFC((void *)&_mh_execute_header, a3, v6, "Made sound file: %{public}@ [channels %lu]", (uint8_t *)&v7);
}

void sub_1000EF400( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EF468()
{
}

void sub_1000EF4D0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Deactivating AudioServices", v1, 2u);
}

void sub_1000EF510( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EF578()
{
}

void sub_1000EF5E8(char a1, uint64_t a2, os_log_s *a3)
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1 & 1));
  int v7 = 138412546;
  uint64_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  sub_100013FFC((void *)&_mh_execute_header, a3, v6, "Finish playing: %@/%@", (uint8_t *)&v7);
}

void sub_1000EF69C(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 label]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 bundleIdentifier]);
  int v6 = 138543618;
  int v7 = v4;
  __int16 v8 = 2114;
  __int16 v9 = v5;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Element found using deprecated accessibility trait. This trait will be removed very soon. Please use an accessibilit yContainerType of UIAccessibilityContainerTypeSemanticGroup. Element Label: %{public}@, App: %{public}@",  (uint8_t *)&v6,  0x16u);
}

void sub_1000EF75C()
{
}

void sub_1000EF788()
{
}

void sub_1000EF7B4()
{
}

void sub_1000EF7E0()
{
}

void sub_1000EF80C()
{
}

void sub_1000EF838(CGPoint *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v4 = NSStringFromCGPoint(*a1);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a3, v6, "Was original center point (dispatchPoint: %@)", v7);
}

void sub_1000EF8C8()
{
}

void sub_1000EF92C()
{
}

void sub_1000EF990()
{
}

void sub_1000EF9BC()
{
}

void sub_1000EFA20()
{
}

void sub_1000EFA4C()
{
}

void sub_1000EFA78()
{
}

void sub_1000EFAA4(char a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Supports activate.  Successfully activated: %i",  (uint8_t *)v2,  8u);
  sub_100024330();
}

void sub_1000EFB18(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *UIKitServicesLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"VOTElement.m",  75,  @"%s",  *a1);

  __break(1u);
}

void sub_1000EFB94(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 localizedDescription]);
  int v6 = 138543618;
  int v7 = v5;
  __int16 v8 = 2114;
  uint64_t v9 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Error translating touch points to print braille: %{public}@, points = %{public}@",  (uint8_t *)&v6,  0x16u);
}

void sub_1000EFC40(void *a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = *a1;
  sub_1000281A8();
  sub_100028180( (void *)&_mh_execute_header,  v1,  v2,  "Braille buffer = %{public}@, removed %{public}@",  (void)v3,  DWORD2(v3));
  sub_1000113BC();
}

void sub_1000EFCB0(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000281A8();
  sub_100028180( (void *)&_mh_execute_header,  v1,  v2,  "standalone = %{public}@, prefiCGFloat x = %{public}@",  (void)v3,  DWORD2(v3));
  sub_1000113BC();
}

void sub_1000EFD1C(uint64_t a1)
{
  LODWORD(v3) = 138543618;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000281A8();
  sub_100028180( (void *)&_mh_execute_header,  v1,  v2,  "infiCGFloat x = %{public}@, suffiCGFloat x = %{public}@",  (void)v3,  DWORD2(v3));
  sub_1000113BC();
}

void sub_1000EFD88( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EFDF8(uint64_t a1)
{
  LODWORD(v3) = 138478083;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000281A8();
  sub_100028180( (void *)&_mh_execute_header,  v1,  v2,  "Got print braille %{private}@ for input %{private}@",  (void)v3,  DWORD2(v3));
  sub_1000113BC();
}

void sub_1000EFE64(char a1, os_log_s *a2)
{
  __int128 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1 & 1));
  int v5 = 138543362;
  int v6 = v3;
  sub_1000113A4((void *)&_mh_execute_header, a2, v4, "Translator active: %{public}@", (uint8_t *)&v5);
}

void sub_1000EFF00(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 138543362;
  uint64_t v4 = a1;
  sub_1000113A4((void *)&_mh_execute_header, a2, a3, "Calibrate with %{public}@", (uint8_t *)&v3);
  sub_1000113BC();
}

void sub_1000EFF68(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Reset translator", v1, 2u);
}

void sub_1000EFFA8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F0010(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_1000281A8();
  sub_100028194((void *)&_mh_execute_header, v1, v2, "Timeout getting value: %@ : %@", (void)v3, DWORD2(v3));
  sub_1000113BC();
}

void sub_1000F007C()
{
}

void sub_1000F00DC()
{
}

void sub_1000F0140()
{
}

void sub_1000F01A4(int a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v5[0] = 67109378;
  v5[1] = a1;
  __int16 v6 = 2112;
  int v7 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed to set static ducking amount with error: %d, volume: %@",  (uint8_t *)v5,  0x12u);

  sub_100038FD0();
}

void sub_1000F024C(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  sub_100039004();
  sub_100038FE0((void *)&_mh_execute_header, a2, v4, "Failed to set non static ducking amount with error: %@ %@", v5);

  sub_100038FD0();
}

void sub_1000F02DC()
{
}

void sub_1000F0348()
{
}

void sub_1000F0370()
{
}

void sub_1000F03D0()
{
}

void sub_1000F043C()
{
}

void sub_1000F049C()
{
}

void sub_1000F04FC()
{
}

void sub_1000F055C()
{
}

void sub_1000F05BC()
{
}

void sub_1000F061C()
{
}

void sub_1000F067C()
{
}

void sub_1000F06DC(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to generate date regex", v1, 2u);
}

void sub_1000F071C()
{
}

void sub_1000F077C()
{
}

void sub_1000F07DC(uint64_t a1, os_log_s *a2, uint64_t a3, double a4)
{
  int v4 = 138543618;
  uint64_t v5 = a1;
  __int16 v6 = 2048;
  double v7 = a4;
  sub_100013FFC((void *)&_mh_execute_header, a2, a3, "Changed (Time) %{public}@ to %.1f", (uint8_t *)&v4);
  sub_1000113BC();
}

void sub_1000F0850()
{
}

void sub_1000F08B0()
{
}

void sub_1000F0910()
{
}

void sub_1000F0970(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 string]);
  sub_1000113C4();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Phonetic text: %{public}@", v4, 0xCu);

  sub_1000113B0();
}

void sub_1000F09F8()
{
}

void sub_1000F0A58()
{
}

void sub_1000F0AB8()
{
}

void sub_1000F0B20()
{
}

void sub_1000F0B80(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 localizedDescription]);
  sub_1000113C4();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Speech error: %{private}@", v4, 0xCu);

  sub_1000113B0();
}

void sub_1000F0C08(id *a1, os_log_s *a2)
{
  double v5 = v4;
  [*a1 pitch];
  int v8 = 134218240;
  double v9 = v5;
  __int16 v10 = 2048;
  double v11 = v6;
  sub_100013FFC((void *)&_mh_execute_header, a2, v7, "Resolved Rate: %f; Resolved Pitch: %f", (uint8_t *)&v8);
}

void sub_1000F0CB4()
{
}

void sub_1000F0D14(uint64_t a1, void *a2, os_log_s *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  sub_100039004();
  sub_100038FE0( (void *)&_mh_execute_header,  a3,  v5,  "Failed to speak request with error: %@. Attempting to speak again with fallback identifier: %@",  v6);

  sub_100038FD0();
}

void sub_1000F0DA0(void *a1, os_log_s *a2)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 string]);
  int v6 = 134218499;
  CFAbsoluteTime v7 = Current;
  __int16 v8 = 2048;
  double v9 = a1;
  __int16 v10 = 2113;
  double v11 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "finished speaking: %f %p = %{private}@",  (uint8_t *)&v6,  0x20u);
}

void sub_1000F0E6C(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *UIKitLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"VOTBrailleGestureSpellingSuggestionHandler.m",  18,  @"%s",  *a1);

  __break(1u);
}

void sub_1000F0EE8()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getUITextCheckerClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"VOTBrailleGestureSpellingSuggestionHandler.m",  19,  @"Unable to find class %s",  "UITextChecker");

  __break(1u);
}

void sub_1000F0F60(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "com.apple.MobileAsset.VoiceServices.GryphonVoice.ma.new-asset-installed";
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Could not register for: %s",  (uint8_t *)&v1,  0xCu);
}

void sub_1000F0FE0(unsigned int *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *a1));
  int v6 = 138412546;
  CFAbsoluteTime v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_FAULT,  "Making an app element that's not an app: %@ %@",  (uint8_t *)&v6,  0x16u);
}

void sub_1000F12B0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F1318( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F1380( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F13E8(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 command]);
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a2, v4, "Resetting banner timer for VOTCommand: %@", v5);

  sub_1000113B0();
}

void sub_1000F1468()
{
}

void sub_1000F14C8()
{
}

void sub_1000F1528()
{
}

void sub_1000F1588()
{
}

void sub_1000F15E8()
{
}

void sub_1000F1648()
{
  uint64_t v2 = sub_10004C45C(v1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_10009A338();
  sub_100013FFC((void *)&_mh_execute_header, v0, v4, "VoiceOver Received note: %@. Data:%@", v5);

  sub_100038FD0();
}

void sub_1000F16CC()
{
}

void sub_1000F172C(uint64_t a1)
{
  int v2 = 138478083;
  uint64_t v3 = a1;
  sub_1000281A8();
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "cur ele: %{private}@ : %{private}@", (uint8_t *)&v2);
  sub_1000113BC();
}

void sub_1000F17A0()
{
  sub_100014008((void *)&_mh_execute_header, v0, v1, "returning because of markers: %{private}@", v2, v3, v4, v5, v6);
  sub_1000113BC();
}

void sub_1000F1800()
{
}

void sub_1000F182C()
{
}

void sub_1000F1858()
{
}

void sub_1000F1884()
{
  int v6 = 138478083;
  id v7 = (id)objc_opt_class(v2, v3);
  __int16 v8 = 2113;
  uint64_t v9 = v1;
  id v4 = v7;
  sub_100013FFC((void *)&_mh_execute_header, v0, v5, "obj %{private}@ rw %{private}@", (uint8_t *)&v6);

  sub_1000113B0();
}

void sub_1000F1914(uint64_t a1)
{
  int v2 = 138478083;
  uint64_t v3 = a1;
  sub_1000281A8();
  sub_100013FFC( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  " line string: '%{private}@' <= '%{private}@'",  (uint8_t *)&v2);
  sub_1000113BC();
}

void sub_1000F1988(NSRange a1, os_log_s *a2)
{
  uint64_t v3 = NSStringFromRange(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a2, v5, "line range: %{private}@", v6);

  sub_1000113B0();
}

void sub_1000F1A08()
{
}

void sub_1000F1A68()
{
}

void sub_1000F1A94()
{
}

void sub_1000F1AF4()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  [v0 isQuickNavOn];
  GSEventIsHardwareKeyboardAttached();
  sub_10009A328();
  _os_log_debug_impl(v1, v2, v3, v4, v5, 0xEu);

  sub_100038FD0();
}

void sub_1000F1B9C(os_log_s *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000113C4();
  sub_1000113A4( (void *)&_mh_execute_header,  a1,  v6,  "Failed to find visible point or center point for simulated long press. Using midpoint of frame: %@",  v7);

  sub_1000113B0();
}

void sub_1000F1C1C(os_log_s *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000113C4();
  sub_1000113A4( (void *)&_mh_execute_header,  a1,  v6,  "Failed to find visible point for simulated long press. Using center: %@",  v7);

  sub_1000113B0();
}

void sub_1000F1C9C()
{
}

void sub_1000F1CFC()
{
}

void sub_1000F1D5C()
{
}

void sub_1000F1DBC()
{
}

void sub_1000F1E28(uint64_t a1)
{
  int v2 = 134218240;
  uint64_t v3 = a1;
  sub_1000281A8();
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "changed range %lu %lu", (uint8_t *)&v2);
  sub_1000113BC();
}

void sub_1000F1E9C(uint64_t a1)
{
  int v2 = 134218240;
  uint64_t v3 = a1;
  sub_1000281A8();
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "selectedTextRange range %lu %lu", (uint8_t *)&v2);
  sub_1000113BC();
}

void sub_1000F1F10(uint64_t a1)
{
  int v2 = 134218240;
  uint64_t v3 = a1;
  sub_1000281A8();
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "textRange range %lu %lu", (uint8_t *)&v2);
  sub_1000113BC();
}

void sub_1000F1F84(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Ignoring banner notification element for sonar",  buf,  2u);
}

void sub_1000F1FC0()
{
}

void sub_1000F2038()
{
}

void sub_1000F2098(os_log_s *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a1, v3, "Focusing on banner notification: %{private}@", v4);

  sub_1000113B0();
}

void sub_1000F2128(void *a1)
{
  id v1 = objc_claimAutoreleasedReturnValue([a1 description]);
  [v1 UTF8String];
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_10009A2FC();
  sub_10009A2D8( (void *)&_mh_execute_header,  v3,  v4,  "'currentElement' expected to be an accessibility element: %s %@",  v5,  v6,  v7,  v8,  2u);

  sub_100038FD0();
}

void sub_1000F21D0()
{
  os_log_t v0 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [(id)VOTSharedWorkspace tvInteractionMode]));
  sub_10009A338();
  sub_10009A2D8( (void *)&_mh_execute_header,  v1,  v2,  "should not be calling _setElement if not in explore mode. Current mode: %@. element: %@",  v3,  v4,  v5,  v6,  v7);

  sub_100038FD0();
}

void sub_1000F226C()
{
}

void sub_1000F22CC()
{
}

void sub_1000F233C()
{
}

void sub_1000F239C()
{
  int v3 = 134218242;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int16 v5 = 2114;
  uint64_t v6 = v1;
  sub_100013FFC((void *)&_mh_execute_header, v0, v2, "time to get element: %f -- %{public}@", (uint8_t *)&v3);
  sub_1000113B0();
}

void sub_1000F2420()
{
}

void sub_1000F244C()
{
}

void sub_1000F24AC()
{
}

void sub_1000F250C()
{
}

void sub_1000F256C()
{
}

void sub_1000F2598()
{
}

void sub_1000F25F8()
{
}

void sub_1000F2658()
{
}

void sub_1000F26B8()
{
}

void sub_1000F2718()
{
}

void sub_1000F2778()
{
}

void sub_1000F27D8()
{
}

void sub_1000F2838()
{
}

void sub_1000F2898()
{
}

void sub_1000F28F8()
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 application]);
  int v5 = 138412546;
  uint64_t v6 = v1;
  sub_10009A2FC();
  sub_100013FFC((void *)&_mh_execute_header, v0, v4, "Update application - new element with: %@ %@", (uint8_t *)&v5);

  sub_100038FD0();
}

void sub_1000F298C()
{
}

void sub_1000F29B8()
{
}

void sub_1000F29E4()
{
}

void sub_1000F2A44()
{
}

void sub_1000F2A70()
{
}

void sub_1000F2AD0()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 webPageLoadURL]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v1 webAreaURL]);
  int v6 = 138412546;
  uint8_t v7 = v3;
  sub_10009A2FC();
  sub_100013FFC((void *)&_mh_execute_header, v0, v5, "Web page load URL %@, current webURL: %@", (uint8_t *)&v6);

  sub_100038FD0();
}

void sub_1000F2B70()
{
}

void sub_1000F2BDC(id *a1, char a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2 & 1));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*a1 immediateRemoteParent]);
  sub_10009A2EC();
  sub_10009A328();
  _os_log_debug_impl(v5, v6, v7, v8, v9, 0x20u);
}

void sub_1000F2CA4()
{
}

void sub_1000F2CD0()
{
}

void sub_1000F2D3C()
{
}

void sub_1000F2D9C()
{
}

void sub_1000F2DC8()
{
}

void sub_1000F2E30()
{
}

void sub_1000F2E90()
{
}

void sub_1000F2EF0()
{
}

void sub_1000F2F1C()
{
}

void sub_1000F2F48()
{
}

void sub_1000F2F74()
{
}

void sub_1000F2FD4()
{
}

void sub_1000F3034()
{
}

void sub_1000F3094()
{
}

void sub_1000F30F4(void *a1)
{
}

void sub_1000F3178(double a1, double a2, uint64_t a3, os_log_s *a4)
{
  uint64_t v5 = NSStringFromCGPoint(*(CGPoint *)&a1);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  int v8 = 138412546;
  id v9 = v6;
  sub_10009A2EC();
  sub_100013FFC((void *)&_mh_execute_header, a4, v7, "Hit tested element at visible point %@ was %@", (uint8_t *)&v8);

  sub_100038FD0();
}

void sub_1000F3214(double a1, double a2, uint64_t a3, os_log_s *a4)
{
  uint64_t v5 = NSStringFromCGPoint(*(CGPoint *)&a1);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  int v8 = 138412546;
  id v9 = v6;
  sub_10009A2EC();
  sub_100013FFC((void *)&_mh_execute_header, a4, v7, "Hit tested element at center point %@ was %@", (uint8_t *)&v8);

  sub_100038FD0();
}

void sub_1000F32B0()
{
}

void sub_1000F3310()
{
}

void sub_1000F333C(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = NSStringFromCGPoint(*(CGPoint *)(a1 + 488));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a2, v5, "Used last valid element location %@", v6);

  sub_1000113B0();
}

void sub_1000F33CC()
{
}

void sub_1000F3434(void *a1, os_log_s *a2)
{
}

void sub_1000F34AC()
{
}

void sub_1000F350C(os_log_s *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a1, v3, "Element settings: %@", v4);

  sub_1000113B0();
}

void sub_1000F3594()
{
}

void sub_1000F35F4()
{
}

void sub_1000F3620()
{
}

void sub_1000F3680()
{
}

void sub_1000F36E0()
{
}

void sub_1000F3750()
{
}

void sub_1000F37B0()
{
}

void sub_1000F3818()
{
}

void sub_1000F3844()
{
}

void sub_1000F38A4()
{
}

void sub_1000F38D0()
{
}

void sub_1000F38FC()
{
}

void sub_1000F3960()
{
}

void sub_1000F39D4()
{
}

void sub_1000F3A00()
{
  int v5 = 134218240;
  id v6 = sub_10009A350(v2, v3);
  __int16 v7 = 2048;
  id v8 = [v1 elementGeneration];
  sub_100013FFC( (void *)&_mh_execute_header,  v0,  v4,  "Trying to find a web page during webpage load: %lld element: %lld",  (uint8_t *)&v5);
  sub_100038FD0();
}

void sub_1000F3A90( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F3AF8(void *a1, char *a2)
{
}

void sub_1000F3B68()
{
}

void sub_1000F3BC8()
{
}

void sub_1000F3BF4()
{
}

void sub_1000F3C20()
{
}

void sub_1000F3C4C(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 134217984;
  uint64_t v4 = a1;
  sub_1000113A4((void *)&_mh_execute_header, a2, a3, "Rotor default: current type: %ld", (uint8_t *)&v3);
}

void sub_1000F3CB8(void *a1, os_log_s *a2)
{
  int v4 = 134217984;
  id v5 = [a1 currentSelectionRotorType];
  sub_1000113A4((void *)&_mh_execute_header, a2, v3, "Rotor default: current selection type: %ld", (uint8_t *)&v4);
}

void sub_1000F3D38()
{
}

void sub_1000F3D64()
{
}

void sub_1000F3D90()
{
}

void sub_1000F3DBC()
{
}

void sub_1000F3DE8()
{
}

void sub_1000F3E14(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "No help text found for command: '%@'. name: '%@'",  (uint8_t *)&v3,  0x16u);
}

void sub_1000F3E98(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Truncating length of element value for speaking",  v1,  2u);
}

void sub_1000F3ED8()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "Unable to %{public}@ notifications. Error: %d",  v2,  0x12u);
}

void sub_1000F3F58()
{
}

void sub_1000F3F84()
{
}

void sub_1000F3FB0()
{
}

void sub_1000F3FE8(void *a1, os_log_s *a2)
{
  int v4 = 134218496;
  id v5 = [a1 tapCount];
  __int16 v6 = 2048;
  id v7 = [a1 fingerCount];
  __int16 v8 = 1024;
  unsigned int v9 = [a1 tapIsDown];
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Tapping callback: tap count: %ld, finger count: %ld, isDown: %d",  (uint8_t *)&v4,  0x1Cu);
}

void sub_1000F40AC(CGPoint **a1)
{
  uint64_t v1 = NSStringFromCGPoint((*a1)[2]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000113C4();
  sub_1000B7954((void *)&_mh_execute_header, v3, v4, "_edgePanGestureStartPoint=%@", v5, v6, v7, v8, v9);

  sub_1000113B0();
}

void sub_1000F412C()
{
}

void sub_1000F4158()
{
}

void sub_1000F4184()
{
}

void sub_1000F41B0(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = SCRCGestureStateToString();
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_1000113C4();
  __int16 v8 = 2048;
  uint64_t v9 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_DEBUG,  "got unhandled gesture state: %@, direction %ld",  v7,  0x16u);
}

void sub_1000F4258(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 command]);
  sub_1000113C4();
  sub_1000B7954((void *)&_mh_execute_header, v2, v3, "3 finger vertical tap-hold-slide -> %@", v4, v5, v6, v7, v8);

  sub_1000113B0();
}

void sub_1000F42D0(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 command]);
  sub_1000113C4();
  sub_1000B7954((void *)&_mh_execute_header, v2, v3, "3 finger horizontal tap-hold-slide -> %@", v4, v5, v6, v7, v8);

  sub_1000113B0();
}

void sub_1000F4348(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1));
  sub_1000113C4();
  sub_1000B7954((void *)&_mh_execute_header, v2, v3, "split flick in direction %@", v4, v5, v6, v7, v8);

  sub_1000113B0();
}

void sub_1000F43CC(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 832);
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "split slide finger count %ld",  (uint8_t *)&v3,  0xCu);
}

void sub_1000F4444(double a1, double a2)
{
  uint64_t v2 = NSStringFromCGPoint(*(CGPoint *)&a1);
  int v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  sub_1000113C4();
  sub_1000B7954((void *)&_mh_execute_header, v4, v5, "Cancel tap and hold: %@", v6, v7, v8, v9, v10);

  sub_1000113B0();
}

void sub_1000F44BC()
{
}

void sub_1000F44E8()
{
}

void sub_1000F4514()
{
}

void sub_1000F4540()
{
}

void sub_1000F456C(char a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Lift from tap and hold and reset fingers: %i.",  (uint8_t *)v2,  8u);
  sub_100024330();
}

void sub_1000F45E0(os_log_s *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_ERROR,  "NO STRING FOR BRAILLE: %@",  (uint8_t *)&v3,  0xCu);
}

void sub_1000F467C()
{
}

void sub_1000F46A8()
{
}

void sub_1000F46D4(os_log_s *a1, double a2, double a3)
{
  uint64_t v4 = NSStringFromCGPoint(*(CGPoint *)&a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000113C4();
  _os_log_debug_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_DEBUG,  "new drift %@ would move dots off screen",  v6,  0xCu);
}

void sub_1000F4764()
{
}

void sub_1000F47C4()
{
}

void sub_1000F4824()
{
}

void sub_1000F4884()
{
}

void sub_1000F48EC()
{
}

void sub_1000F4954()
{
}

void sub_1000F49B4()
{
}

void sub_1000F4A14()
{
}

void sub_1000F4A4C(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 leftDotPositions]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 rightDotPositions]);
  int v7 = 138543618;
  uint64_t v8 = v4;
  __int16 v9 = 2114;
  uint8_t v10 = v5;
  sub_100038FE0( (void *)&_mh_execute_header,  a2,  v6,  "Serious error: calibration data was missing required dots. Left dots: %{public}@\nRight dots: %{public}@",  (uint8_t *)&v7);
}

void sub_1000F4B04()
{
}

void sub_1000F4B30(id *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (char *)[*a1 count];
  int v7 = 134218240;
  uint64_t v8 = &v5[-a2];
  __int16 v9 = 2048;
  uint64_t v10 = a2;
  sub_100013FFC((void *)&_mh_execute_header, a3, v6, "Removing objects: %lu %ld", (uint8_t *)&v7);
  sub_1000113B0();
}

void sub_1000F4BC0(uint64_t a1, os_log_s *a2)
{
  v2[0] = 67109376;
  v2[1] = 0;
  __int16 v3 = 2048;
  uint64_t v4 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Removing objects: %d %ld",  (uint8_t *)v2,  0x12u);
  sub_1000113BC();
}

void sub_1000F4C3C()
{
}

void sub_1000F4CA4()
{
}

void sub_1000F4D04(os_log_s *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_1000113C4();
  sub_1000113A4((void *)&_mh_execute_header, a1, v3, "Forced update, so removing all from cache: %{private}@", v4);

  sub_1000113B0();
}

void sub_1000F4D8C()
{
}

void sub_1000F4DEC()
{
}

void sub_1000F4E4C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Even with fallback, still had a zero point",  v1,  2u);
  sub_100024330();
}

void sub_1000F4E88(uint64_t a1, void *a2)
{
  id v4 = sub_1000D25B8(a1, a2);
  sub_1000D25A0((uint64_t)v4, 5.8382e-34);
  _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "Tried to use a zero point to find the next element after %{public}@. Going with fallback, %{public}@",  v3,  0x16u);

  sub_1000D2578();
}

void sub_1000F4EE0(void *a1, uint64_t a2, int a3, os_log_s *a4)
{
  id v7 = a1;
  *(_DWORD *)a2 = 67109378;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + _Block_object_dispose(va, 8) = 2114;
  *(void *)(a2 + 10) = v7;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a4,  OS_LOG_TYPE_DEBUG,  "After using window context id %u, got %{public}@",  (uint8_t *)a2,  0x12u);

  sub_1000D2578();
}

void sub_1000F4F54(uint64_t a1, void *a2)
{
  id v4 = sub_1000D25B8(a1, a2);
  sub_1000D25A0((uint64_t)v4, 5.8382e-34);
  _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Center point for %{public}@ is %{public}@",  v3,  0x16u);

  sub_1000D2578();
}

void sub_1000F4FAC()
{
}

void sub_1000F500C()
{
}

void sub_1000F506C()
{
}

void sub_1000F50CC()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "Search parent: %@ group parent %@", v2);
  sub_1000113BC();
}

void sub_1000F5140()
{
}

void sub_1000F51A0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F51D0()
{
  __int16 v3 = 2114;
  uint64_t v4 = v0;
  sub_100013FFC((void *)&_mh_execute_header, v1, (uint64_t)v1, "Can't find %{public}@ in %{public}@", v2);
  sub_1000113BC();
}

void sub_1000F5248()
{
}

void sub_1000F52A8()
{
}

void sub_1000F5308()
{
}

void sub_1000F5368( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F53D4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F5404()
{
}

void sub_1000F5464(uint64_t a1, void *a2, uint64_t a3, os_log_s *a4)
{
  *(_DWORD *)a3 = 138543618;
  *(void *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  sub_100013FFC( (void *)&_mh_execute_header,  a4,  a3,  "Failed to copy element with opaque parent %{public}@. Hit testing at %{public}@ to find equivalent.",  (uint8_t *)a3);
}

void sub_1000F54C0(void *a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(void *)(a2 + 4) = a1;
  sub_1000113A4( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "Had to fall back to using midpoint of frame %{public}@",  (uint8_t *)a2);
}

void sub_1000F550C(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 24LL);
  int v4 = 134218242;
  uint64_t v5 = v3;
  __int16 v6 = 2114;
  uint64_t v7 = a2;
  sub_100013FFC( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "Starting search with generation %lld from: %{public}@",  (uint8_t *)&v4);
  sub_1000113BC();
}

void sub_1000F558C(void *a1, char *a2)
{
}

void sub_1000F55FC(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Finished retrieving: %d", (uint8_t *)v2, 8u);
  sub_100024330();
}

void sub_1000F566C(void *a1, char *a2)
{
}

void sub_1000F56DC(void *a1, char *a2)
{
}

void sub_1000F574C()
{
}

void sub_1000F57B4(void *a1, os_log_s *a2)
{
  int v4 = (void *)objc_claimAutoreleasedReturnValue([a1 customPublicRotors]);
  int v5 = 134218240;
  id v6 = [v4 count];
  __int16 v7 = 2048;
  id v8 = [a1 publicCustomRotorIndex];
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "customPublicRotors.count (%lu) unexpectedly <= index (%ld)",  (uint8_t *)&v5,  0x16u);
}

void sub_1000F5870(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "kVOTRotorTypeMisspelledWord is soft-deprecated. File a radar if you see this report",  v1,  2u);
}

void sub_1000F58B0()
{
}

void sub_1000F5910(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "BrailleGestureManager received BeginSplitGesture notification.",  v1,  2u);
  sub_100024330();
}

void sub_1000F594C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F597C()
{
}

void sub_1000F59DC()
{
}

void sub_1000F5A48( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F5A78(os_log_s *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  int v3 = 138477827;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a1,  OS_LOG_TYPE_DEBUG,  "currentReadAllContext set to nil, %{private}@",  (uint8_t *)&v3,  0xCu);
}

void sub_1000F5B14(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Explorer will stop all speech now", v1, 2u);
}

void sub_1000F5B54(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *a1));
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  int v7 = 138412546;
  id v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "ButtonIntercepter: Invalid state change! state: %@ event: %@",  (uint8_t *)&v7,  0x16u);
}

id objc_msgSend_AMSymbol(void *a1, const char *a2, ...)
{
  return _[a1 AMSymbol];
}

id objc_msgSend_AlertDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 AlertDidAppear];
}

id objc_msgSend_AutofillDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 AutofillDidAppear];
}

id objc_msgSend_AutofillDidDismiss(void *a1, const char *a2, ...)
{
  return _[a1 AutofillDidDismiss];
}

id objc_msgSend_BSIDidCalibrate(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidCalibrate];
}

id objc_msgSend_BSIDidCarriageReturn(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidCarriageReturn];
}

id objc_msgSend_BSIDidDelete(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidDelete];
}

id objc_msgSend_BSIDidDisable(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidDisable];
}

id objc_msgSend_BSIDidEnterChord(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnterChord];
}

id objc_msgSend_BSIDidEnterSpace(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidEnterSpace];
}

id objc_msgSend_BSIDidType(void *a1, const char *a2, ...)
{
  return _[a1 BSIDidType];
}

id objc_msgSend_BoundaryEncountered(void *a1, const char *a2, ...)
{
  return _[a1 BoundaryEncountered];
}

id objc_msgSend_BrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayConnected];
}

id objc_msgSend_BrailleDisplayDisconnected(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayDisconnected];
}

id objc_msgSend_BrailleDisplayReconnectionTriggered(void *a1, const char *a2, ...)
{
  return _[a1 BrailleDisplayReconnectionTriggered];
}

id objc_msgSend_BrailleScreenInput(void *a1, const char *a2, ...)
{
  return _[a1 BrailleScreenInput];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGPointValue(void *a1, const char *a2, ...)
{
  return _[a1 CGPointValue];
}

id objc_msgSend_DidActivateElement(void *a1, const char *a2, ...)
{
  return _[a1 DidActivateElement];
}

id objc_msgSend_DidBeginPassthrough(void *a1, const char *a2, ...)
{
  return _[a1 DidBeginPassthrough];
}

id objc_msgSend_DidChangeVolume(void *a1, const char *a2, ...)
{
  return _[a1 DidChangeVolume];
}

id objc_msgSend_DidDisableQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 DidDisableQuickNav];
}

id objc_msgSend_DidEnableQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 DidEnableQuickNav];
}

id objc_msgSend_DidEnterSecureText(void *a1, const char *a2, ...)
{
  return _[a1 DidEnterSecureText];
}

id objc_msgSend_DidEnterTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 DidEnterTouchContainer];
}

id objc_msgSend_DidFocusOnElement(void *a1, const char *a2, ...)
{
  return _[a1 DidFocusOnElement];
}

id objc_msgSend_DidRecognizeMLContent(void *a1, const char *a2, ...)
{
  return _[a1 DidRecognizeMLContent];
}

id objc_msgSend_DidScrollByPage(void *a1, const char *a2, ...)
{
  return _[a1 DidScrollByPage];
}

id objc_msgSend_DidSelectAutofill(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectAutofill];
}

id objc_msgSend_DidSelectNextRotor(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectNextRotor];
}

id objc_msgSend_DidSelectPreviousRotor(void *a1, const char *a2, ...)
{
  return _[a1 DidSelectPreviousRotor];
}

id objc_msgSend_DidSyncWithSystemFocus(void *a1, const char *a2, ...)
{
  return _[a1 DidSyncWithSystemFocus];
}

id objc_msgSend_DidWrapBackwards(void *a1, const char *a2, ...)
{
  return _[a1 DidWrapBackwards];
}

id objc_msgSend_DidWrapForwards(void *a1, const char *a2, ...)
{
  return _[a1 DidWrapForwards];
}

id objc_msgSend_FiveFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 FiveFingerDoubleTap];
}

id objc_msgSend_FolderWillOpen(void *a1, const char *a2, ...)
{
  return _[a1 FolderWillOpen];
}

id objc_msgSend_FourFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerDoubleTap];
}

id objc_msgSend_FourFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickDown];
}

id objc_msgSend_FourFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickLeft];
}

id objc_msgSend_FourFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickRight];
}

id objc_msgSend_FourFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerFlickUp];
}

id objc_msgSend_FourFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerQuadrupleTap];
}

id objc_msgSend_FourFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerSingleTap];
}

id objc_msgSend_FourFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 FourFingerTripleTap];
}

id objc_msgSend_HIDTime(void *a1, const char *a2, ...)
{
  return _[a1 HIDTime];
}

id objc_msgSend_InsertionPointDidMove(void *a1, const char *a2, ...)
{
  return _[a1 InsertionPointDidMove];
}

id objc_msgSend_ItemDidLoad(void *a1, const char *a2, ...)
{
  return _[a1 ItemDidLoad];
}

id objc_msgSend_ItemIsLoading(void *a1, const char *a2, ...)
{
  return _[a1 ItemIsLoading];
}

id objc_msgSend_ItemMemorizationFailed(void *a1, const char *a2, ...)
{
  return _[a1 ItemMemorizationFailed];
}

id objc_msgSend_ItemMemorizationInProgress(void *a1, const char *a2, ...)
{
  return _[a1 ItemMemorizationInProgress];
}

id objc_msgSend_NextRotorProgress(void *a1, const char *a2, ...)
{
  return _[a1 NextRotorProgress];
}

id objc_msgSend_NoItemExists(void *a1, const char *a2, ...)
{
  return _[a1 NoItemExists];
}

id objc_msgSend_NoResultsFound(void *a1, const char *a2, ...)
{
  return _[a1 NoResultsFound];
}

id objc_msgSend_OneFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerDoubleTap];
}

id objc_msgSend_OneFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickDown];
}

id objc_msgSend_OneFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickLeft];
}

id objc_msgSend_OneFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickRight];
}

id objc_msgSend_OneFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerFlickUp];
}

id objc_msgSend_OneFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerQuadrupleTap];
}

id objc_msgSend_OneFingerSplitFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickDown];
}

id objc_msgSend_OneFingerSplitFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickLeft];
}

id objc_msgSend_OneFingerSplitFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickRight];
}

id objc_msgSend_OneFingerSplitFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerSplitFlickUp];
}

id objc_msgSend_OneFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 OneFingerTripleTap];
}

id objc_msgSend_PMSymbol(void *a1, const char *a2, ...)
{
  return _[a1 PMSymbol];
}

id objc_msgSend_PopoverDidAppear(void *a1, const char *a2, ...)
{
  return _[a1 PopoverDidAppear];
}

id objc_msgSend_PreviousRotorProgress(void *a1, const char *a2, ...)
{
  return _[a1 PreviousRotorProgress];
}

id objc_msgSend_ScreenDidChange(void *a1, const char *a2, ...)
{
  return _[a1 ScreenDidChange];
}

id objc_msgSend_ScreenDidTurnOff(void *a1, const char *a2, ...)
{
  return _[a1 ScreenDidTurnOff];
}

id objc_msgSend_Startup(void *a1, const char *a2, ...)
{
  return _[a1 Startup];
}

id objc_msgSend_TVDidBeginInteractionWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 TVDidBeginInteractionWithRotor];
}

id objc_msgSend_TVDidEndInteractionWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 TVDidEndInteractionWithRotor];
}

id objc_msgSend_ThreeFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTap];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickDown];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickLeft];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickRight];
}

id objc_msgSend_ThreeFingerDoubleTapHoldAndFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerDoubleTapHoldAndFlickUp];
}

id objc_msgSend_ThreeFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickDown];
}

id objc_msgSend_ThreeFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickLeft];
}

id objc_msgSend_ThreeFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickRight];
}

id objc_msgSend_ThreeFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerFlickUp];
}

id objc_msgSend_ThreeFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerQuadrupleTap];
}

id objc_msgSend_ThreeFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerSingleTap];
}

id objc_msgSend_ThreeFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 ThreeFingerTripleTap];
}

id objc_msgSend_TwoFingerDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerDoubleTap];
}

id objc_msgSend_TwoFingerFlickDown(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickDown];
}

id objc_msgSend_TwoFingerFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickLeft];
}

id objc_msgSend_TwoFingerFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickRight];
}

id objc_msgSend_TwoFingerFlickUp(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerFlickUp];
}

id objc_msgSend_TwoFingerQuadrupleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerQuadrupleTap];
}

id objc_msgSend_TwoFingerRotateClockwise(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerRotateClockwise];
}

id objc_msgSend_TwoFingerRotateCounterclockwise(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerRotateCounterclockwise];
}

id objc_msgSend_TwoFingerScrub(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerScrub];
}

id objc_msgSend_TwoFingerSingleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSingleTap];
}

id objc_msgSend_TwoFingerSplitFlickLeft(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSplitFlickLeft];
}

id objc_msgSend_TwoFingerSplitFlickRight(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerSplitFlickRight];
}

id objc_msgSend_TwoFingerTripleTap(void *a1, const char *a2, ...)
{
  return _[a1 TwoFingerTripleTap];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UnknownCommand(void *a1, const char *a2, ...)
{
  return _[a1 UnknownCommand];
}

id objc_msgSend___consumeAppTransitionForAnnouncingIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__consumeAppTransitionForAnnouncingIfNeeded:");
}

id objc_msgSend___handleTVSelectButtonClicked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__handleTVSelectButtonClicked");
}

id objc_msgSend___sendHIDEvents_postEventDelays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendHIDEvents:postEventDelays:");
}

id objc_msgSend___sendOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendOutputRequest:");
}

id objc_msgSend___sendTVRemoteCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__sendTVRemoteCommand:");
}

id objc_msgSend___targetElementForFocusElement_mustBeAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__targetElementForFocusElement:mustBeAccessibilityElement:");
}

id objc_msgSend___tvOS_handleValueChangedWithType_oldValue_newValue_insertedTextOrNil_isSecureText_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__tvOS_handleValueChangedWithType:oldValue:newValue:insertedTextOrNil:isSecureText:");
}

id objc_msgSend___tvOS_toggleExploreFocusAffectsNativeFocusPreference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__tvOS_toggleExploreFocusAffectsNativeFocusPreference");
}

id objc_msgSend___tvOS_toggleSilenceAnnouncementsUserPreference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__tvOS_toggleSilenceAnnouncementsUserPreference");
}

id objc_msgSend___tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference");
}

id objc_msgSend___updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__updateAudioSessionProperties");
}

id objc_msgSend___updateVoiceOverEnabledWarningBannerVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__updateVoiceOverEnabledWarningBannerVisibility");
}

id objc_msgSend__activeAudioRouteChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeAudioRouteChanged:");
}

id objc_msgSend__activeRouteChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activeRouteChanged:");
}

id objc_msgSend__addAXOutputActions_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAXOutputActions:atIndex:");
}

id objc_msgSend__addApplicationLabelsAndSummariesToRequest_applicationNames_summaryElements_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addApplicationLabelsAndSummariesToRequest:applicationNames:summaryElements:");
}

id objc_msgSend__addDescription_toRequest_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDescription:toRequest:withOptions:");
}

id objc_msgSend__addDescription_toRequest_withOptions_lastSeenContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addDescription:toRequest:withOptions:lastSeenContextDescriptors:");
}

id objc_msgSend__addElementCommunityNameIfNeededToRequest_oldElementCommunity_newElementCommunity_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addElementCommunityNameIfNeededToRequest:oldElementCommunity:newElementCommunity:");
}

id objc_msgSend__addErrorMessageElement_toRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addErrorMessageElement:toRequest:");
}

id objc_msgSend__addFormattedStringToRequest_formattedString_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFormattedStringToRequest:formattedString:withElement:");
}

id objc_msgSend__addHeaderElement_toRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHeaderElement:toRequest:");
}

id objc_msgSend__addInstanceOfDrift_toArray_forPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addInstanceOfDrift:toArray:forPattern:");
}

id objc_msgSend__additionalElementCommunities(void *a1, const char *a2, ...)
{
  return _[a1 _additionalElementCommunities];
}

id objc_msgSend__adjustFrameToFitScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustFrameToFitScreen:");
}

id objc_msgSend__adjustPointValue_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustPointValue:withDrift:");
}

id objc_msgSend__adjustedRotorIndex_inDirection_rotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustedRotorIndex:inDirection:rotorItems:");
}

id objc_msgSend__adjustedRotorIndex_inDirection_rotorItems_validationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustedRotorIndex:inDirection:rotorItems:validationBlock:");
}

id objc_msgSend__allDotsAreOnScreen_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allDotsAreOnScreen:withDrift:");
}

id objc_msgSend__allElementCommunitiesWithFocusedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allElementCommunitiesWithFocusedApplications:");
}

id objc_msgSend__alternativeKeyActivateTime(void *a1, const char *a2, ...)
{
  return _[a1 _alternativeKeyActivateTime];
}

id objc_msgSend__announceBrailleTypingPropertiesIncludingOrientation_typingMode_forUnlockConfiguration_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceBrailleTypingPropertiesIncludingOrientation:typingMode:forUnlockConfiguration:");
}

id objc_msgSend__announceRespectingSoundSettingsRequest_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_announceRespectingSoundSettingsRequest:event:");
}

id objc_msgSend__appInfoForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 _appInfoForCurrentElement];
}

id objc_msgSend__appSuspensionSoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 _appSuspensionSoundTimer];
}

id objc_msgSend__appendCurrentRotorValue_forRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendCurrentRotorValue:forRotor:");
}

id objc_msgSend__appendDots_toPositionsArray_withDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendDots:toPositionsArray:withDrift:");
}

id objc_msgSend__appendLiteralCharacterString_toString_hasPhoneContext_hasMathContext_action_punctuationTableLanguageUsed_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_appendLiteralCharacterString:toString:hasPhoneContext:hasMathContext:action:punctuationTableLanguageUsed:");
}

id objc_msgSend__appendOrientationToAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOrientationToAnnouncement:");
}

id objc_msgSend__applicationMatchingBlock_inApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationMatchingBlock:inApplications:");
}

id objc_msgSend__applyAttributesFromText_toRequest_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyAttributesFromText:toRequest:withLanguage:");
}

id objc_msgSend__applyBrailleTextFormattingAndInlineCompletionOptions_attributedString_brailleLineRange_rangeOffset_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_applyBrailleTextFormattingAndInlineCompletionOptions:attributedString:brailleLineRange:rangeOffset:");
}

id objc_msgSend__applyCamelCaseSeparation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCamelCaseSeparation:");
}

id objc_msgSend__applyCurrentStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCurrentStatus:language:");
}

id objc_msgSend__applyCustomContent_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyCustomContent:language:");
}

id objc_msgSend__applyDatetimeAttribute_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDatetimeAttribute:language:");
}

id objc_msgSend__applyExpandedStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyExpandedStatus:language:");
}

id objc_msgSend__applyHasPopupAttribute_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyHasPopupAttribute:withLanguage:");
}

id objc_msgSend__applyHeaderStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyHeaderStatus:language:");
}

id objc_msgSend__applyInvalidStatus_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyInvalidStatus:language:");
}

id objc_msgSend__applyLabelToRequest_includeBlockQuote_language_isWebLanguageChoice_interactOption_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLabelToRequest:includeBlockQuote:language:isWebLanguageChoice:interactOption:");
}

id objc_msgSend__applyLanguageTokens_attributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLanguageTokens:attributedString:");
}

id objc_msgSend__applyLinkRelationshipType_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyLinkRelationshipType:language:");
}

id objc_msgSend__applyNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _applyNextCandidate];
}

id objc_msgSend__applyPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _applyPreviousCandidate];
}

id objc_msgSend__applyRoleDescription_language_interactOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyRoleDescription:language:interactOption:");
}

id objc_msgSend__applySelectedTrait_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySelectedTrait:language:");
}

id objc_msgSend__applySortDirection_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySortDirection:language:");
}

id objc_msgSend__applyStickyCustomActions_customAction_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyStickyCustomActions:customAction:language:");
}

id objc_msgSend__applySuggestionToElement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applySuggestionToElement:direction:");
}

id objc_msgSend__applyTableColumnIndex_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableColumnIndex:options:language:");
}

id objc_msgSend__applyTableRowColumnSpan_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableRowColumnSpan:language:");
}

id objc_msgSend__applyTableRowIndex_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTableRowIndex:options:language:");
}

id objc_msgSend__applyTelephoneFormatting_withRanges_languageCode_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTelephoneFormatting:withRanges:languageCode:voiceIdentifier:rate:");
}

id objc_msgSend__applyTextualWorkarounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTextualWorkarounds:");
}

id objc_msgSend__applyTraitsToRequest_options_numHeaderActions_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTraitsToRequest:options:numHeaderActions:language:");
}

id objc_msgSend__applyTransliteration_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyTransliteration:languageCode:");
}

id objc_msgSend__applyValueToRequest_options_lastSeenLineAndColumn_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyValueToRequest:options:lastSeenLineAndColumn:language:");
}

id objc_msgSend__applyVoiceOverMigrations(void *a1, const char *a2, ...)
{
  return _[a1 _applyVoiceOverMigrations];
}

id objc_msgSend__archerNotifyUserOfNavigationChanges(void *a1, const char *a2, ...)
{
  return _[a1 _archerNotifyUserOfNavigationChanges];
}

id objc_msgSend__arrayOfDictionariesFromPointValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_arrayOfDictionariesFromPointValues:");
}

id objc_msgSend__assetUpdaterClient(void *a1, const char *a2, ...)
{
  return _[a1 _assetUpdaterClient];
}

id objc_msgSend__attemptPerformActivateActionWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPerformActivateActionWithElement:");
}

id objc_msgSend__attemptRecoveryFromCrashloopDueToVoiceMemoryPressure(void *a1, const char *a2, ...)
{
  return _[a1 _attemptRecoveryFromCrashloopDueToVoiceMemoryPressure];
}

id objc_msgSend__atvEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_atvEventFilter:");
}

id objc_msgSend__audioAccPostEvent_withButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioAccPostEvent:withButton:");
}

id objc_msgSend__audioAccPostEvent_withButton_timeOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioAccPostEvent:withButton:timeOffset:");
}

id objc_msgSend__audioAccProcessTapUpdates(void *a1, const char *a2, ...)
{
  return _[a1 _audioAccProcessTapUpdates];
}

id objc_msgSend__audioAccessoryEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_audioAccessoryEventFilter:");
}

id objc_msgSend__audioDuckingModeString(void *a1, const char *a2, ...)
{
  return _[a1 _audioDuckingModeString];
}

id objc_msgSend__averageLeftDrift(void *a1, const char *a2, ...)
{
  return _[a1 _averageLeftDrift];
}

id objc_msgSend__averageOfOldFloat_newFloat_dataCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageOfOldFloat:newFloat:dataCount:");
}

id objc_msgSend__averageOfOldPoint_newPoint_dataCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageOfOldPoint:newPoint:dataCount:");
}

id objc_msgSend__averagePointForLastDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 _averagePointForLastDownEvent];
}

id objc_msgSend__averageRecentDriftFromDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_averageRecentDriftFromDrifts:");
}

id objc_msgSend__averageRightDrift(void *a1, const char *a2, ...)
{
  return _[a1 _averageRightDrift];
}

id objc_msgSend__axEndPassthroughTouch(void *a1, const char *a2, ...)
{
  return _[a1 _axEndPassthroughTouch];
}

id objc_msgSend__beginAudiographScrubbingMode(void *a1, const char *a2, ...)
{
  return _[a1 _beginAudiographScrubbingMode];
}

id objc_msgSend__bookContentElementInteraction_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bookContentElementInteraction:element:");
}

id objc_msgSend__bothObjectsAreNilOrBothAreNonNil_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bothObjectsAreNilOrBothAreNonNil:object:");
}

id objc_msgSend__brailleAutoAdvanceSpeedString(void *a1, const char *a2, ...)
{
  return _[a1 _brailleAutoAdvanceSpeedString];
}

id objc_msgSend__brailleAutoAdvanceStepFactor(void *a1, const char *a2, ...)
{
  return _[a1 _brailleAutoAdvanceStepFactor];
}

id objc_msgSend__brailleGestureManager(void *a1, const char *a2, ...)
{
  return _[a1 _brailleGestureManager];
}

id objc_msgSend__brailleLineRangeForDescription_position_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_brailleLineRangeForDescription:position:");
}

id objc_msgSend__brailleShouldTryToTurnPage_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_brailleShouldTryToTurnPage:direction:");
}

id objc_msgSend__bundleIdentifierIsHostedByPineBoard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bundleIdentifierIsHostedByPineBoard:");
}

id objc_msgSend__cacheFocusedElement_forElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheFocusedElement:forElementCommunity:");
}

id objc_msgSend__cachedLaunchIcon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedLaunchIcon:");
}

id objc_msgSend__calibrateWithTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calibrateWithTouchPoints:");
}

id objc_msgSend__calibratedDotPositionsFilePath(void *a1, const char *a2, ...)
{
  return _[a1 _calibratedDotPositionsFilePath];
}

id objc_msgSend__callCenterQueue_currentCallState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCenterQueue_currentCallState");
}

id objc_msgSend__callStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 _callStatusChanged];
}

id objc_msgSend__canScribbleWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canScribbleWithElement:");
}

id objc_msgSend__canUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _canUseContractedBraille];
}

id objc_msgSend__cancelPreviousElementSearch(void *a1, const char *a2, ...)
{
  return _[a1 _cancelPreviousElementSearch];
}

id objc_msgSend__cancelScribbleTapAndHoldModeTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _cancelScribbleTapAndHoldModeTimeout];
}

id objc_msgSend__cancelTapAndHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTapAndHold:");
}

id objc_msgSend__cancelTapAndHold_forScribble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTapAndHold:forScribble:");
}

id objc_msgSend__cancelUpdateScribbleTapAndHoldModeOffset(void *a1, const char *a2, ...)
{
  return _[a1 _cancelUpdateScribbleTapAndHoldModeOffset];
}

id objc_msgSend__captionsDisplayedWithTextRuns_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_captionsDisplayedWithTextRuns:");
}

id objc_msgSend__changeOriginatorForSourceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeOriginatorForSourceName:");
}

id objc_msgSend__characterRangeWithFaultTolerance_forward_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterRangeWithFaultTolerance:forward:element:");
}

id objc_msgSend__characterStringRepresentationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_characterStringRepresentationForKey:");
}

id objc_msgSend__chartElementDidChangeForElement_oldElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chartElementDidChangeForElement:oldElement:");
}

id objc_msgSend__checkDataDetectorIfPresent_element_includeLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkDataDetectorIfPresent:element:includeLinks:");
}

id objc_msgSend__checkVoiceOverWasConfirmed(void *a1, const char *a2, ...)
{
  return _[a1 _checkVoiceOverWasConfirmed];
}

id objc_msgSend__cleanUpTouchesIncludingCalibrationStartPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanUpTouchesIncludingCalibrationStartPoints:");
}

id objc_msgSend__clearWebLoadedSound(void *a1, const char *a2, ...)
{
  return _[a1 _clearWebLoadedSound];
}

id objc_msgSend__closeItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 _closeItemChooser];
}

id objc_msgSend__closestHalfPatternForOrderedTouches_possibleMatches_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closestHalfPatternForOrderedTouches:possibleMatches:side:");
}

id objc_msgSend__commandIsSupportedByTV_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commandIsSupportedByTV:");
}

id objc_msgSend__commandResolver(void *a1, const char *a2, ...)
{
  return _[a1 _commandResolver];
}

id objc_msgSend__commitBufferedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _commitBufferedBraille];
}

id objc_msgSend__commitDeferredZoomInfo(void *a1, const char *a2, ...)
{
  return _[a1 _commitDeferredZoomInfo];
}

id objc_msgSend__commitDeferredZoomInfoIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 _commitDeferredZoomInfoIfAppropriate];
}

id objc_msgSend__computeChangedFontAttributes_storedAttributes_haveMisspellCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:");
}

id objc_msgSend__configureAsSingleLinkElementWithRequest_linkTraitTitle_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureAsSingleLinkElementWithRequest:linkTraitTitle:hint:");
}

id objc_msgSend__configureSynthesizerWithPhonemeSubstitutionsFromAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureSynthesizerWithPhonemeSubstitutionsFromAction:");
}

id objc_msgSend__contextlessTouchWithHandType_location_force_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextlessTouchWithHandType:location:force:altitude:azimuth:");
}

id objc_msgSend__continueReadAllWithElement_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueReadAllWithElement:setCurrentElement:");
}

id objc_msgSend__continueTrackingKeyboardKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueTrackingKeyboardKey:");
}

id objc_msgSend__continueTrackingRoadElementWithPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continueTrackingRoadElementWithPoint:");
}

id objc_msgSend__convertFrame_toPortraitFromOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertFrame:toPortraitFromOrientation:");
}

id objc_msgSend__convertTextMarkerArrayToString_addInContentExtras_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertTextMarkerArrayToString:addInContentExtras:");
}

id objc_msgSend__convertZoomPointToDevicePoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertZoomPointToDevicePoint:");
}

id objc_msgSend__convertZoomRecordToDeviceRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertZoomRecordToDeviceRecord:");
}

id objc_msgSend__copyInternalsToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyInternalsToElement:");
}

id objc_msgSend__copyMatchBlockAnyElement(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockAnyElement];
}

id objc_msgSend__copyMatchBlockArticleStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockArticleStart];
}

id objc_msgSend__copyMatchBlockBlockquote(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockBlockquote];
}

id objc_msgSend__copyMatchBlockButton(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockButton];
}

id objc_msgSend__copyMatchBlockCheckbox(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockCheckbox];
}

id objc_msgSend__copyMatchBlockDifferent(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockDifferent];
}

id objc_msgSend__copyMatchBlockForHeadingLevel_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForHeadingLevel:searchType:");
}

id objc_msgSend__copyMatchBlockForRotorType_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForRotorType:searchType:");
}

id objc_msgSend__copyMatchBlockForTextAttribute_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyMatchBlockForTextAttribute:searchType:");
}

id objc_msgSend__copyMatchBlockFormElement(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockFormElement];
}

id objc_msgSend__copyMatchBlockFrameStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockFrameStart];
}

id objc_msgSend__copyMatchBlockHeader(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockHeader];
}

id objc_msgSend__copyMatchBlockImage(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockImage];
}

id objc_msgSend__copyMatchBlockLandmarkStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockLandmarkStart];
}

id objc_msgSend__copyMatchBlockLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockLink];
}

id objc_msgSend__copyMatchBlockListStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockListStart];
}

id objc_msgSend__copyMatchBlockNonVisitedLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockNonVisitedLink];
}

id objc_msgSend__copyMatchBlockRadioButton(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockRadioButton];
}

id objc_msgSend__copyMatchBlockSameBlockquote(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSameBlockquote];
}

id objc_msgSend__copyMatchBlockSameHeading(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSameHeading];
}

id objc_msgSend__copyMatchBlockSearchField(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSearchField];
}

id objc_msgSend__copyMatchBlockSearchText(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSearchText];
}

id objc_msgSend__copyMatchBlockSimilar(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockSimilar];
}

id objc_msgSend__copyMatchBlockStaticText(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockStaticText];
}

id objc_msgSend__copyMatchBlockTableStart(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockTableStart];
}

id objc_msgSend__copyMatchBlockTextField(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockTextField];
}

id objc_msgSend__copyMatchBlockVisitedLink(void *a1, const char *a2, ...)
{
  return _[a1 _copyMatchBlockVisitedLink];
}

id objc_msgSend__copyMathTextualInformationWithBrailleLineRange_brailleDescriptionRange_position_rotorSelection_shouldPreferRotorSelection_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_copyMathTextualInformationWithBrailleLineRange:brailleDescriptionRange:position:rotorSelection:shouldPreferRotorSelection:");
}

id objc_msgSend__copyRangeMatchBlockForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyRangeMatchBlockForRotorType:");
}

id objc_msgSend__copySideAppDividerElementIfApplicableForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copySideAppDividerElementIfApplicableForPoint:");
}

id objc_msgSend__createTelephonySynthesizer(void *a1, const char *a2, ...)
{
  return _[a1 _createTelephonySynthesizer];
}

id objc_msgSend__currentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentApplicationMatchingBlock:");
}

id objc_msgSend__currentAvailableRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _currentAvailableRotorItems];
}

id objc_msgSend__currentCachedCustomActionCategories(void *a1, const char *a2, ...)
{
  return _[a1 _currentCachedCustomActionCategories];
}

id objc_msgSend__currentContext(void *a1, const char *a2, ...)
{
  return _[a1 _currentContext];
}

id objc_msgSend__currentCustomActionCategory(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomActionCategory];
}

id objc_msgSend__currentCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomActions];
}

id objc_msgSend__currentCustomRotorString(void *a1, const char *a2, ...)
{
  return _[a1 _currentCustomRotorString];
}

id objc_msgSend__currentElement(void *a1, const char *a2, ...)
{
  return _[a1 _currentElement];
}

id objc_msgSend__currentElementAtCenterPointOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentElementAtCenterPointOfElement:");
}

id objc_msgSend__currentEnabledWebRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _currentEnabledWebRotorItems];
}

id objc_msgSend__currentGestureRepeaterEvent(void *a1, const char *a2, ...)
{
  return _[a1 _currentGestureRepeaterEvent];
}

id objc_msgSend__currentGesturedTextInputManager(void *a1, const char *a2, ...)
{
  return _[a1 _currentGesturedTextInputManager];
}

id objc_msgSend__currentGesturedTextInputManagerAndCommandResolver_forCommandResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentGesturedTextInputManagerAndCommandResolver:forCommandResolver:");
}

id objc_msgSend__currentLocaleUsesSpaceAsSeparator(void *a1, const char *a2, ...)
{
  return _[a1 _currentLocaleUsesSpaceAsSeparator];
}

id objc_msgSend__currentMathGranularityLevel(void *a1, const char *a2, ...)
{
  return _[a1 _currentMathGranularityLevel];
}

id objc_msgSend__currentMedusaApplications(void *a1, const char *a2, ...)
{
  return _[a1 _currentMedusaApplications];
}

id objc_msgSend__currentResponder(void *a1, const char *a2, ...)
{
  return _[a1 _currentResponder];
}

id objc_msgSend__currentRotorSelection(void *a1, const char *a2, ...)
{
  return _[a1 _currentRotorSelection];
}

id objc_msgSend__currentTextLineInBookElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentTextLineInBookElement:");
}

id objc_msgSend__customActionDefaultActionString(void *a1, const char *a2, ...)
{
  return _[a1 _customActionDefaultActionString];
}

id objc_msgSend__customActionsAddingDragCancelActionIfNecessaryForActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customActionsAddingDragCancelActionIfNecessaryForActions:");
}

id objc_msgSend__customPublicRotorInRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customPublicRotorInRotor:");
}

id objc_msgSend__customPublicRotorMatchForType_range_element_direction_lastSearchUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customPublicRotorMatchForType:range:element:direction:lastSearchUUID:");
}

id objc_msgSend__customRotorTypeRequiresFirstElementProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_customRotorTypeRequiresFirstElementProcessing:");
}

id objc_msgSend__debug_currentlyRunningOnThisThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_debug_currentlyRunningOnThisThread");
}

id objc_msgSend__defaultLanguageRotorItem(void *a1, const char *a2, ...)
{
  return _[a1 _defaultLanguageRotorItem];
}

id objc_msgSend__delayForCurrentRepeatCount(void *a1, const char *a2, ...)
{
  return _[a1 _delayForCurrentRepeatCount];
}

id objc_msgSend__deleteCalibratedData(void *a1, const char *a2, ...)
{
  return _[a1 _deleteCalibratedData];
}

id objc_msgSend__deleteFromCurrentInputStringIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _deleteFromCurrentInputStringIfNeeded];
}

id objc_msgSend__denormalizeEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_denormalizeEventRepresentation:");
}

id objc_msgSend__deregisterForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _deregisterForNotifications];
}

id objc_msgSend__descriptionForBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForBool:");
}

id objc_msgSend__descriptionForCharacterSets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForCharacterSets:");
}

id objc_msgSend__determineEmojiPreferenceForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineEmojiPreferenceForAction:");
}

id objc_msgSend__determinePunctuationGroupForAction_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determinePunctuationGroupForAction:isDefault:");
}

id objc_msgSend__determineSpeakingRate_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineSpeakingRate:languageCode:");
}

id objc_msgSend__determineSpeechSourceForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineSpeechSourceForAction:");
}

id objc_msgSend__determineVoiceIdentifier_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineVoiceIdentifier:languageCode:");
}

id objc_msgSend__determineVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineVolume:");
}

id objc_msgSend__deviceSupportsMoreThanFiveTouches(void *a1, const char *a2, ...)
{
  return _[a1 _deviceSupportsMoreThanFiveTouches];
}

id objc_msgSend__didDismissItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 _didDismissItemChooser];
}

id objc_msgSend__didFocusUpdateOriginateFromFocusedApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFocusUpdateOriginateFromFocusedApp:");
}

id objc_msgSend__didStartSpeakingAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didStartSpeakingAction:");
}

id objc_msgSend__disableQuickNavStateTemporarily(void *a1, const char *a2, ...)
{
  return _[a1 _disableQuickNavStateTemporarily];
}

id objc_msgSend__dismissAlternativeKeyboardKeys(void *a1, const char *a2, ...)
{
  return _[a1 _dismissAlternativeKeyboardKeys];
}

id objc_msgSend__dispatchCommandForKeyInfo_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchCommandForKeyInfo:isRepeatedEvent:");
}

id objc_msgSend__dispatchEventRepresentationIntoSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchEventRepresentationIntoSystem:");
}

id objc_msgSend__dispatchKeyEventIntoSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dispatchKeyEventIntoSystem:");
}

id objc_msgSend__dispatchNextQueuedRequest(void *a1, const char *a2, ...)
{
  return _[a1 _dispatchNextQueuedRequest];
}

id objc_msgSend__distanceBetweenPoint_andPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_distanceBetweenPoint:andPoint:");
}

id objc_msgSend__dockElementForDisplay(void *a1, const char *a2, ...)
{
  return _[a1 _dockElementForDisplay];
}

id objc_msgSend__drainQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drainQueue:");
}

id objc_msgSend__drainQueueAndSendEventsToSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_drainQueueAndSendEventsToSystem:");
}

id objc_msgSend__driftByAddingDisplacementOfPointValue_fromPointValue_toDrift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_driftByAddingDisplacementOfPointValue:fromPointValue:toDrift:");
}

id objc_msgSend__driftOfHalfPattern_relativeToDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_driftOfHalfPattern:relativeToDotPositions:");
}

id objc_msgSend__echoDifferentElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentElement:forEvent:");
}

id objc_msgSend__echoDifferentElement_forEvent_onlyOutputTouchContainerAndSounds_canSetAsCurrentElement_shouldPlayGuideWireSound_isProtectedApp_includeHint_boundaryHit_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSo und:isProtectedApp:includeHint:boundaryHit:");
}

id objc_msgSend__echoDifferentElement_forEvent_onlyOutputTouchContainerAndSounds_shouldPlayGuideWireSound_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:");
}

id objc_msgSend__echoDifferentElement_forEvent_onlyOutputTouchContainerAndSounds_shouldPlayGuideWireSound_isProtectedApp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:");
}

id objc_msgSend__echoDifferentTouchContainer_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoDifferentTouchContainer:forEvent:");
}

id objc_msgSend__echoFlickNavigationElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoFlickNavigationElement:");
}

id objc_msgSend__echoLineInBookElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoLineInBookElement:forEvent:");
}

id objc_msgSend__echoLineInElement_forEvent_forDifferentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoLineInElement:forEvent:forDifferentElement:");
}

id objc_msgSend__echoNoElementForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoNoElementForEvent:");
}

id objc_msgSend__echoSameElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSameElement:forEvent:");
}

id objc_msgSend__echoSearchNavigationElement_forRangeAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSearchNavigationElement:forRangeAdjustment:");
}

id objc_msgSend__echoSearchTypeNotFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_echoSearchTypeNotFound:");
}

id objc_msgSend__edgeGestureScaleFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_edgeGestureScaleFactor:");
}

id objc_msgSend__edgePanGestureStartThreshold(void *a1, const char *a2, ...)
{
  return _[a1 _edgePanGestureStartThreshold];
}

id objc_msgSend__elementActionsEquivalent_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementActionsEquivalent:withElement:");
}

id objc_msgSend__elementCommunityForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementCommunityForElement:");
}

id objc_msgSend__elementFetchFoundElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementFetchFoundElement:");
}

id objc_msgSend__elementForAttribute_shouldUpdateCache_shouldFetchAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementForAttribute:shouldUpdateCache:shouldFetchAttributes:");
}

id objc_msgSend__elementMonitoringOutputElement_userMonitored_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementMonitoringOutputElement:userMonitored:");
}

id objc_msgSend__elementSelectionRangeDidChange_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementSelectionRangeDidChange:reason:");
}

id objc_msgSend__elementToFocusWhenSwitchingToElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementToFocusWhenSwitchingToElementCommunity:");
}

id objc_msgSend__elementWithAXUIElementRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementWithAXUIElementRef:");
}

id objc_msgSend__elementWithAXUIElementRef_cache_identification_initializeAssociatedPids_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elementWithAXUIElementRef:cache:identification:initializeAssociatedPids:");
}

id objc_msgSend__endAudiographScrubbingMode(void *a1, const char *a2, ...)
{
  return _[a1 _endAudiographScrubbingMode];
}

id objc_msgSend__endExploringDotPatterns(void *a1, const char *a2, ...)
{
  return _[a1 _endExploringDotPatterns];
}

id objc_msgSend__endNativeSliding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endNativeSliding:");
}

id objc_msgSend__endScribbleTapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 _endScribbleTapAndHoldMode];
}

id objc_msgSend__endTextSearchMode(void *a1, const char *a2, ...)
{
  return _[a1 _endTextSearchMode];
}

id objc_msgSend__enumerateDotNumbersForPrintBraille_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enumerateDotNumbersForPrintBraille:usingBlock:");
}

id objc_msgSend__eventMaskHasTouch(void *a1, const char *a2, ...)
{
  return _[a1 _eventMaskHasTouch];
}

id objc_msgSend__executeCommand(void *a1, const char *a2, ...)
{
  return _[a1 _executeCommand];
}

id objc_msgSend__filenameSuffix(void *a1, const char *a2, ...)
{
  return _[a1 _filenameSuffix];
}

id objc_msgSend__filterUnacceptableBrailleStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterUnacceptableBrailleStrings:");
}

id objc_msgSend__finalizeReadAllOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeReadAllOperation:");
}

id objc_msgSend__finalizeReadAllOperation_interruptSpeechIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeReadAllOperation:interruptSpeechIfNeeded:");
}

id objc_msgSend__findSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findSound:");
}

id objc_msgSend__finishHandlingLineMovementInWeb_direction_withCurrentElement_markerArray_textObjects_existingRequest_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:");
}

id objc_msgSend__finishedPlaying(void *a1, const char *a2, ...)
{
  return _[a1 _finishedPlaying];
}

id objc_msgSend__firstElementForFocusFromElementCommunities_currentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstElementForFocusFromElementCommunities:currentElement:");
}

id objc_msgSend__firstElementWithCurrentElement_focusedApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstElementWithCurrentElement:focusedApplications:");
}

id objc_msgSend__firstNonGesturedTextInputRotorTypeWithFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstNonGesturedTextInputRotorTypeWithFallback:");
}

id objc_msgSend__firstResponderAXUIElementRefFromCurrentApplications(void *a1, const char *a2, ...)
{
  return _[a1 _firstResponderAXUIElementRefFromCurrentApplications];
}

id objc_msgSend__firstResponderForApplications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstResponderForApplications:");
}

id objc_msgSend__firstResponderFromCurrentApplications(void *a1, const char *a2, ...)
{
  return _[a1 _firstResponderFromCurrentApplications];
}

id objc_msgSend__flashInsertedTextIfAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flashInsertedTextIfAllowed:");
}

id objc_msgSend__focusElementForFocusUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusElementForFocusUpdate:");
}

id objc_msgSend__focusOnItemAtIndexInFilteredItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_focusOnItemAtIndexInFilteredItems:");
}

id objc_msgSend__fontDisplayNameForFontName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontDisplayNameForFontName:");
}

id objc_msgSend__forceVisionRefresh(void *a1, const char *a2, ...)
{
  return _[a1 _forceVisionRefresh];
}

id objc_msgSend__formatATVStyleMediaDurations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatATVStyleMediaDurations:");
}

id objc_msgSend__formatDetectedDates_voiceIdentifier_languageCode_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatDetectedDates:voiceIdentifier:languageCode:rate:");
}

id objc_msgSend__formatDetectedFinnishDates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatDetectedFinnishDates:");
}

id objc_msgSend__formatEthernetMacAddress_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatEthernetMacAddress:voiceIdentifier:rate:");
}

id objc_msgSend__formatExplicitTimeDuration_isMMSS_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatExplicitTimeDuration:isMMSS:languageCode:");
}

id objc_msgSend__formatIPAddress_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatIPAddress:voiceIdentifier:rate:");
}

id objc_msgSend__formatJapaneseYen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatJapaneseYen:");
}

id objc_msgSend__formatNumbers_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatNumbers:action:");
}

id objc_msgSend__formatRequestForBrailleAlertConditional_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatRequestForBrailleAlertConditional:");
}

id objc_msgSend__formatTelephoneNumber_languageCode_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatTelephoneNumber:languageCode:voiceIdentifier:rate:");
}

id objc_msgSend__formatTimeDuration_didMatch_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatTimeDuration:didMatch:voiceIdentifier:rate:");
}

id objc_msgSend__formatUSHeight_voiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_formatUSHeight:voiceIdentifier:");
}

id objc_msgSend__generateInitialData(void *a1, const char *a2, ...)
{
  return _[a1 _generateInitialData];
}

id objc_msgSend__generateSpellingSuggestionsForResponder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_generateSpellingSuggestionsForResponder:languageCode:");
}

id objc_msgSend__gestureDataDirectory(void *a1, const char *a2, ...)
{
  return _[a1 _gestureDataDirectory];
}

id objc_msgSend__gestureEventIsInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gestureEventIsInvalid:");
}

id objc_msgSend__gestureTrackingCallbackWithFactory_isHandlingSystemControlEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gestureTrackingCallbackWithFactory:isHandlingSystemControlEvent:");
}

id objc_msgSend__getAutoSpeakWatchFaceElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getAutoSpeakWatchFaceElements:");
}

id objc_msgSend__getEightDotTableTopMiddleLeftDot_middleRightDot_bottomLeftDot_bottomRightDot_angleFromXAxisToLineOfHand_topLeftDot_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_getEightDotTableTopMiddleLeftDot:middleRightDot:bottomLeftDot:bottomRightDot:angleFromXAxisToLineOfHand:topLeftDot:");
}

id objc_msgSend__getMiddleDotsForSixDotTableTopInitialDataForLeft_right_angleFromXAxisToLineOfHand_topLeftDot_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_getMiddleDotsForSixDotTableTopInitialDataForLeft:right:angleFromXAxisToLineOfHand:topLeftDot:");
}

id objc_msgSend__getNewElementExplorer(void *a1, const char *a2, ...)
{
  return _[a1 _getNewElementExplorer];
}

id objc_msgSend__getNextFocusedElementInElementCommunityPrevious_shouldUseCache_shouldWrapAround_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getNextFocusedElementInElementCommunityPrevious:shouldUseCache:shouldWrapAround:");
}

id objc_msgSend__getSpeakableContainerForContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSpeakableContainerForContainer:");
}

id objc_msgSend__halfPatternFromOrderedTouches_correspondingHalfPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_halfPatternFromOrderedTouches:correspondingHalfPattern:");
}

id objc_msgSend__halfPatternFromTouches_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_halfPatternFromTouches:side:");
}

id objc_msgSend__handleAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAccessibilityEvent:");
}

id objc_msgSend__handleActivityRotorChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleActivityRotorChange:");
}

id objc_msgSend__handleAdjustTextSegmentTypeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAdjustTextSegmentTypeEvent:");
}

id objc_msgSend__handleAdjustValue_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAdjustValue:reverse:");
}

id objc_msgSend__handleAllFingersLifted(void *a1, const char *a2, ...)
{
  return _[a1 _handleAllFingersLifted];
}

id objc_msgSend__handleAnnounceQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnounceQuickNav:");
}

id objc_msgSend__handleAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncement:");
}

id objc_msgSend__handleAnnouncementWithData_pid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncementWithData:pid:");
}

id objc_msgSend__handleAnnouncementsForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAnnouncementsForKeyInfo:");
}

id objc_msgSend__handleArrowKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleArrowKey:");
}

id objc_msgSend__handleAttachmentInRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAttachmentInRequest:");
}

id objc_msgSend__handleAudioDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDestination:");
}

id objc_msgSend__handleAudioDuckingAmountChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingAmountChange:");
}

id objc_msgSend__handleAudioDuckingChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingChange:");
}

id objc_msgSend__handleAudioDuckingModeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudioDuckingModeChange:");
}

id objc_msgSend__handleAudiographAction_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAudiographAction:event:");
}

id objc_msgSend__handleAudiographScrubbingPositionChanged(void *a1, const char *a2, ...)
{
  return _[a1 _handleAudiographScrubbingPositionChanged];
}

id objc_msgSend__handleAutomationGeneratedChordChangeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleAutomationGeneratedChordChangeEvent:");
}

id objc_msgSend__handleBookContentMovement_direction_unit_generateOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBookContentMovement:direction:unit:generateOutput:");
}

id objc_msgSend__handleBookNavigateOverPageBoundary_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBookNavigateOverPageBoundary:unit:");
}

id objc_msgSend__handleBookPageFlipAndContinue(void *a1, const char *a2, ...)
{
  return _[a1 _handleBookPageFlipAndContinue];
}

id objc_msgSend__handleBrailleConfigurationChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleConfigurationChanged:");
}

id objc_msgSend__handleBrailleKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleKeyEvent:");
}

id objc_msgSend__handleBrailleRefreshEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleBrailleRefreshEvent:");
}

id objc_msgSend__handleCapsLockToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCapsLockToggle:");
}

id objc_msgSend__handleCarriageReturnSwipe(void *a1, const char *a2, ...)
{
  return _[a1 _handleCarriageReturnSwipe];
}

id objc_msgSend__handleContainerMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleContainerMovement:direction:");
}

id objc_msgSend__handleContinueSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleContinueSpeaking:");
}

id objc_msgSend__handleCustomRotorAction_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCustomRotorAction:direction:");
}

id objc_msgSend__handleCustomRotorContent_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleCustomRotorContent:direction:");
}

id objc_msgSend__handleDecreaseVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDecreaseVolume:");
}

id objc_msgSend__handleDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDelete:");
}

id objc_msgSend__handleDescribedMediaMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDescribedMediaMode:direction:");
}

id objc_msgSend__handleDirectInteractionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDirectInteractionEvent:");
}

id objc_msgSend__handleDirectTouchExplorationMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDirectTouchExplorationMode:direction:");
}

id objc_msgSend__handleDuckingDisabling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDuckingDisabling:");
}

id objc_msgSend__handleElementPreviewNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleElementPreviewNotification:");
}

id objc_msgSend__handleElementSearch_rotorType_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleElementSearch:rotorType:direction:");
}

id objc_msgSend__handleEventWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEventWithData:");
}

id objc_msgSend__handleFingersOnScreen_didAddOrRemoveFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFingersOnScreen:didAddOrRemoveFingers:");
}

id objc_msgSend__handleGenericTextSegmentMovement_direction_granulary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGenericTextSegmentMovement:direction:granulary:");
}

id objc_msgSend__handleGestureKeyboardTappingCallback_fingerCount_isDown_originalLocation_convertedLocation_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_handleGestureKeyboardTappingCallback:fingerCount:isDown:originalLocation:convertedLocation:");
}

id objc_msgSend__handleGuideElementMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleGuideElementMovement:direction:");
}

id objc_msgSend__handleHintsSettingMode_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleHintsSettingMode:direction:");
}

id objc_msgSend__handleImageDescriptionsToggle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleImageDescriptionsToggle:");
}

id objc_msgSend__handleIncreaseVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleIncreaseVolume:");
}

id objc_msgSend__handleKeyboardChangedNotification(void *a1, const char *a2, ...)
{
  return _[a1 _handleKeyboardChangedNotification];
}

id objc_msgSend__handleKeyboardKeyEvent_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardKeyEvent:isRepeatedEvent:");
}

id objc_msgSend__handleKeyboardModifierCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardModifierCommands:");
}

id objc_msgSend__handleKeyboardVisibilityChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeyboardVisibilityChanged:");
}

id objc_msgSend__handleLayoutChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLayoutChange:");
}

id objc_msgSend__handleLayoutChangeFromTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handleLayoutChangeFromTimer];
}

id objc_msgSend__handleLetter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLetter:");
}

id objc_msgSend__handleLetterMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLetterMovement:direction:");
}

id objc_msgSend__handleLineMovementInWeb_direction_existingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleLineMovementInWeb:direction:existingRequest:");
}

id objc_msgSend__handleMapSameElement_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMapSameElement:forEvent:");
}

id objc_msgSend__handleMathGranularMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMathGranularMovement:event:");
}

id objc_msgSend__handleMisspelledWordRotorAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMisspelledWordRotorAction:");
}

id objc_msgSend__handleModifierCapsLockBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleModifierCapsLockBehavior:");
}

id objc_msgSend__handleMoreBookContentElements(void *a1, const char *a2, ...)
{
  return _[a1 _handleMoreBookContentElements];
}

id objc_msgSend__handleMovementForElementFollowingElement_direction_unit_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleMovementForElementFollowingElement:direction:unit:mode:");
}

id objc_msgSend__handleNavigationDirectionChangeWithDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNavigationDirectionChangeWithDirection:");
}

id objc_msgSend__handleNextAutofill_reverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNextAutofill:reverse:");
}

id objc_msgSend__handleNextTextOperationInDirection_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNextTextOperationInDirection:withEvent:");
}

id objc_msgSend__handleNonPerkinsKeyboardKeyEvent_isRepeatedEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNonPerkinsKeyboardKeyEvent:isRepeatedEvent:");
}

id objc_msgSend__handleNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleNotifications:");
}

id objc_msgSend__handleOpaqueSearchForElementInDirection_opaqueParent_searchType_range_matchBlock_resetContentOffsetInOpaqueParent_peeking_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_handleOpaqueSearchForElementInDirection:opaqueParent:searchType:range:matchBlock:resetContentOffsetInOpaqueParent:peeking:");
}

id objc_msgSend__handleOrbEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOrbEvent:");
}

id objc_msgSend__handleOutputComputerVisionAnalysisSummary_explicitUserRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleOutputComputerVisionAnalysisSummary:explicitUserRequest:");
}

id objc_msgSend__handlePauseSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePauseSpeaking:");
}

id objc_msgSend__handlePauseSpeechAndHapticsNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePauseSpeechAndHapticsNotification:");
}

id objc_msgSend__handlePerformAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformAction:");
}

id objc_msgSend__handlePerformAudiographAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformAudiographAction:");
}

id objc_msgSend__handlePerformCustomAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformCustomAction:");
}

id objc_msgSend__handlePerformPressAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformPressAction:");
}

id objc_msgSend__handlePerformTapAutofill_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformTapAutofill:");
}

id objc_msgSend__handlePerformTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePerformTextOperation:");
}

id objc_msgSend__handlePrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePrintBraille:");
}

id objc_msgSend__handleProcessActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProcessActions:");
}

id objc_msgSend__handleProcessRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProcessRequest:");
}

id objc_msgSend__handleProtectedAppLogicForEvent_element_point_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleProtectedAppLogicForEvent:element:point:");
}

id objc_msgSend__handlePublicCustomRotorMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePublicCustomRotorMovement:direction:");
}

id objc_msgSend__handleQuickNavDownArrowRepostPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavDownArrowRepostPress:");
}

id objc_msgSend__handleQuickNavFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavFeedback:");
}

id objc_msgSend__handleQuickNavPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleQuickNavPress:");
}

id objc_msgSend__handleReadAllBookContent_fromTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadAllBookContent:fromTop:");
}

id objc_msgSend__handleReadAllNextElement(void *a1, const char *a2, ...)
{
  return _[a1 _handleReadAllNextElement];
}

id objc_msgSend__handleReadFromTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleReadFromTop:");
}

id objc_msgSend__handleRequestFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRequestFinished:");
}

id objc_msgSend__handleRightLeftMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRightLeftMovement:");
}

id objc_msgSend__handleRotorBrailleAutoAdvanceMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleAutoAdvanceMovement:withEvent:");
}

id objc_msgSend__handleRotorBrailleInputLanguageMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleInputLanguageMovement:withEvent:");
}

id objc_msgSend__handleRotorBrailleLanguageMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorBrailleLanguageMovement:withEvent:");
}

id objc_msgSend__handleRotorContinusPathChange_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorContinusPathChange:withEvent:");
}

id objc_msgSend__handleRotorLanguageMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorLanguageMovement:withEvent:");
}

id objc_msgSend__handleRotorTextSelectionMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorTextSelectionMovement:direction:");
}

id objc_msgSend__handleRotorTypingModeMovement_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRotorTypingModeMovement:withEvent:");
}

id objc_msgSend__handleRowMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRowMovement:direction:");
}

id objc_msgSend__handleSOSMedicalIDShown(void *a1, const char *a2, ...)
{
  return _[a1 _handleSOSMedicalIDShown];
}

id objc_msgSend__handleScreenChange_sound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScreenChange:sound:");
}

id objc_msgSend__handleScreenOn(void *a1, const char *a2, ...)
{
  return _[a1 _handleScreenOn];
}

id objc_msgSend__handleSearchRotorDirection_event_notifyUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorDirection:event:notifyUser:");
}

id objc_msgSend__handleSearchRotorLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorLeft:");
}

id objc_msgSend__handleSearchRotorMovementWithoutRotorUpdateInDirectionUp_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:event:");
}

id objc_msgSend__handleSearchRotorRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchRotorRight:");
}

id objc_msgSend__handleSearchTextEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSearchTextEvent:");
}

id objc_msgSend__handleSelectionChangedNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSelectionChangedNotification:");
}

id objc_msgSend__handleSiriVoiceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 _handleSiriVoiceUpdate];
}

id objc_msgSend__handleSoundRotorChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSoundRotorChange:");
}

id objc_msgSend__handleSpeakScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeakScreen:");
}

id objc_msgSend__handleSpeechPhoneticsChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechPhoneticsChange:");
}

id objc_msgSend__handleSpeechPunctuationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechPunctuationChange:");
}

id objc_msgSend__handleSpeechRateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSpeechRateChange:");
}

id objc_msgSend__handleStatusRouterForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStatusRouterForIndex:");
}

id objc_msgSend__handleStopSpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleStopSpeaking:");
}

id objc_msgSend__handleSwitchToNextElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSwitchToNextElementCommunity:");
}

id objc_msgSend__handleSwitchToPreviousElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSwitchToPreviousElementCommunity:");
}

id objc_msgSend__handleSystemLockedOutputBehavior_shouldSendRequest_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSystemLockedOutputBehavior:shouldSendRequest:startElement:");
}

id objc_msgSend__handleTextRotorSelectionAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTextRotorSelectionAction:");
}

id objc_msgSend__handleToggleLiveRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleToggleLiveRegions:");
}

id objc_msgSend__handleTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTouchPoints:");
}

id objc_msgSend__handleTrackingDetailMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTrackingDetailMovement:event:");
}

id objc_msgSend__handleTypingEchoChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTypingEchoChange:");
}

id objc_msgSend__handleUnmuteEligibleEventOccured(void *a1, const char *a2, ...)
{
  return _[a1 _handleUnmuteEligibleEventOccured];
}

id objc_msgSend__handleUpDownMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUpDownMovement:");
}

id objc_msgSend__handleUpdateAppFromTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handleUpdateAppFromTimer];
}

id objc_msgSend__handleUpdatedMathElementIndex(void *a1, const char *a2, ...)
{
  return _[a1 _handleUpdatedMathElementIndex];
}

id objc_msgSend__handleUsePitchChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUsePitchChange:");
}

id objc_msgSend__handleUserSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleUserSelection:");
}

id objc_msgSend__handleValidatedCustomActionMovementThroughActions_forEvent_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:");
}

id objc_msgSend__handleVerticalMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVerticalMovement:direction:");
}

id objc_msgSend__handleVoiceOverGreySupportAccessibilityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVoiceOverGreySupportAccessibilityEvent:");
}

id objc_msgSend__handleVolumeChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleVolumeChange:");
}

id objc_msgSend__handleWebSearchResult_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWebSearchResult:withEvent:");
}

id objc_msgSend__handleWordBreak_includeSpace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWordBreak:includeSpace:");
}

id objc_msgSend__handleWordMovement_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleWordMovement:direction:");
}

id objc_msgSend__handleZoomMovement_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleZoomMovement:event:");
}

id objc_msgSend__handwritingCaptureTimer(void *a1, const char *a2, ...)
{
  return _[a1 _handwritingCaptureTimer];
}

id objc_msgSend__hasContractedBraillePreference(void *a1, const char *a2, ...)
{
  return _[a1 _hasContractedBraillePreference];
}

id objc_msgSend__hasCurrentApplicationMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasCurrentApplicationMatchingBlock:");
}

id objc_msgSend__hitTestedElementForOriginalElement_hitTestPoint_opaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hitTestedElementForOriginalElement:hitTestPoint:opaqueParent:");
}

id objc_msgSend__hunterMigrateDefaultRotors(void *a1, const char *a2, ...)
{
  return _[a1 _hunterMigrateDefaultRotors];
}

id objc_msgSend__hunterMigrateDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 _hunterMigrateDigitalCrownNavigation];
}

id objc_msgSend__iCloudPublishData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iCloudPublishData:");
}

id objc_msgSend__icloudDataChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_icloudDataChanged:");
}

id objc_msgSend__ignoreCustomActionIndicator_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ignoreCustomActionIndicator:withElement:");
}

id objc_msgSend__ignoreTextEditingNotificationsForPickerElementUsage(void *a1, const char *a2, ...)
{
  return _[a1 _ignoreTextEditingNotificationsForPickerElementUsage];
}

id objc_msgSend__inMisspelledWordRotor(void *a1, const char *a2, ...)
{
  return _[a1 _inMisspelledWordRotor];
}

id objc_msgSend__incrementConsecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 _incrementConsecutiveCrashCount];
}

id objc_msgSend__indexOfBrailleTable_inRotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexOfBrailleTable:inRotorItems:");
}

id objc_msgSend__informDelegateOfRetrieveElements(void *a1, const char *a2, ...)
{
  return _[a1 _informDelegateOfRetrieveElements];
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initServer(void *a1, const char *a2, ...)
{
  return _[a1 _initServer];
}

id objc_msgSend__initWithAsynchronousLoading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithAsynchronousLoading:");
}

id objc_msgSend__initWithComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithComponent:");
}

id objc_msgSend__initWithDeviceIdentifier_andEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithDeviceIdentifier:andEventRepresentation:");
}

id objc_msgSend__initWithUIElement_identification_initializeAssociatedPids_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithUIElement:identification:initializeAssociatedPids:");
}

id objc_msgSend__initialize(void *a1, const char *a2, ...)
{
  return _[a1 _initialize];
}

id objc_msgSend__initializeCommands(void *a1, const char *a2, ...)
{
  return _[a1 _initializeCommands];
}

id objc_msgSend__initializeDispatchTable(void *a1, const char *a2, ...)
{
  return _[a1 _initializeDispatchTable];
}

id objc_msgSend__initializeExpandedStatusCellDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _initializeExpandedStatusCellDictionaries];
}

id objc_msgSend__initializePunctuationData(void *a1, const char *a2, ...)
{
  return _[a1 _initializePunctuationData];
}

id objc_msgSend__initializeQuickNav(void *a1, const char *a2, ...)
{
  return _[a1 _initializeQuickNav];
}

id objc_msgSend__initiateScrodConnection(void *a1, const char *a2, ...)
{
  return _[a1 _initiateScrodConnection];
}

id objc_msgSend__inputBrailleFromSeriesOfTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inputBrailleFromSeriesOfTouchPoints:");
}

id objc_msgSend__inputBrailleFromTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_inputBrailleFromTouchPoints:");
}

id objc_msgSend__insertCurrentSelectedCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _insertCurrentSelectedCandidate];
}

id objc_msgSend__insertCurrentSelectedSuggestion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertCurrentSelectedSuggestion:");
}

id objc_msgSend__insertLongerPausesForSymbol_withText_allowPausingAtBoundaries_onlyApplyWhenFollowedBySpace_languageCode_voiceIdentifier_rate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_insertLongerPausesForSymbol:withText:allowPausingAtBoundaries:onlyApplyWhenFollowedBySpace:languageCode:voic eIdentifier:rate:");
}

id objc_msgSend__interfaceOrientationForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceOrientationForElement:");
}

id objc_msgSend__internalVoiceOverSubstitutions(void *a1, const char *a2, ...)
{
  return _[a1 _internalVoiceOverSubstitutions];
}

id objc_msgSend__interruptSpeachAndPlayBorderHitSound(void *a1, const char *a2, ...)
{
  return _[a1 _interruptSpeachAndPlayBorderHitSound];
}

id objc_msgSend__iosEventFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iosEventFilter:");
}

id objc_msgSend__isActiveUserDisplayConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveUserDisplayConfig:");
}

id objc_msgSend__isAdjustTextSegmentEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAdjustTextSegmentEvent:");
}

id objc_msgSend__isAdjustTextSegmentTypeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAdjustTextSegmentTypeEvent:");
}

id objc_msgSend__isBogusTouchEvent(void *a1, const char *a2, ...)
{
  return _[a1 _isBogusTouchEvent];
}

id objc_msgSend__isCalibrationEndPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCalibrationEndPattern:");
}

id objc_msgSend__isCalibrationStartPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCalibrationStartPattern:");
}

id objc_msgSend__isCarriageReturnSwipeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isCarriageReturnSwipeEvent:");
}

id objc_msgSend__isDictationInProgressForCurrentApp(void *a1, const char *a2, ...)
{
  return _[a1 _isDictationInProgressForCurrentApp];
}

id objc_msgSend__isElementValidForFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isElementValidForFirstResponder:");
}

id objc_msgSend__isFullCellStrong(void *a1, const char *a2, ...)
{
  return _[a1 _isFullCellStrong];
}

id objc_msgSend__isHeadphoneRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isHeadphoneRoute:");
}

id objc_msgSend__isHeadsetRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isHeadsetRoute:");
}

id objc_msgSend__isInHomeScreen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInHomeScreen:");
}

id objc_msgSend__isKeyboardLineMovement(void *a1, const char *a2, ...)
{
  return _[a1 _isKeyboardLineMovement];
}

id objc_msgSend__isNextBrailleUsageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isNextBrailleUsageEvent:");
}

id objc_msgSend__isPoint_withinRangeForDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPoint:withinRangeForDividerElement:");
}

id objc_msgSend__isPreviewElementSelected(void *a1, const char *a2, ...)
{
  return _[a1 _isPreviewElementSelected];
}

id objc_msgSend__isPreviousBrailleUsageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPreviousBrailleUsageEvent:");
}

id objc_msgSend__isRouteExternalHDMIRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRouteExternalHDMIRoute:");
}

id objc_msgSend__isSelectEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSelectEvent:");
}

id objc_msgSend__isShowingTodayViewForPhone(void *a1, const char *a2, ...)
{
  return _[a1 _isShowingTodayViewForPhone];
}

id objc_msgSend__isStylusGesture(void *a1, const char *a2, ...)
{
  return _[a1 _isStylusGesture];
}

id objc_msgSend__isSystemReadyForUI(void *a1, const char *a2, ...)
{
  return _[a1 _isSystemReadyForUI];
}

id objc_msgSend__isTapAndHoldPending(void *a1, const char *a2, ...)
{
  return _[a1 _isTapAndHoldPending];
}

id objc_msgSend__isToggleLockedConfigurationEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isToggleLockedConfigurationEvent:");
}

id objc_msgSend__isTouchTypingEventTooCloseToEdge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTouchTypingEventTooCloseToEdge:");
}

id objc_msgSend__isTranslateImmediatelyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isTranslateImmediatelyEvent:");
}

id objc_msgSend__isWebAppStillOpen(void *a1, const char *a2, ...)
{
  return _[a1 _isWebAppStillOpen];
}

id objc_msgSend__issueSingleCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_issueSingleCommand:");
}

id objc_msgSend__iterateSelfAndRemoteParentsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_iterateSelfAndRemoteParentsUsingBlock:");
}

id objc_msgSend__keyInfoIsModifierOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyInfoIsModifierOnly:");
}

id objc_msgSend__keyboardKeyStringForEvent_spoken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyboardKeyStringForEvent:spoken:");
}

id objc_msgSend__languageCodeForBrailleTable(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForBrailleTable];
}

id objc_msgSend__languageCodeForSpeakingAndBrailleTranslation(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForSpeakingAndBrailleTranslation];
}

id objc_msgSend__languageCodeForSpellChecking(void *a1, const char *a2, ...)
{
  return _[a1 _languageCodeForSpellChecking];
}

id objc_msgSend__languageIsCJK(void *a1, const char *a2, ...)
{
  return _[a1 _languageIsCJK];
}

id objc_msgSend__languageIsNBSC(void *a1, const char *a2, ...)
{
  return _[a1 _languageIsNBSC];
}

id objc_msgSend__languageNameForCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageNameForCode:");
}

id objc_msgSend__languageRangesForText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageRangesForText:");
}

id objc_msgSend__languageRotorItemsContainLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageRotorItemsContainLanguage:");
}

id objc_msgSend__lastContainedElementIncludingRemotes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastContainedElementIncludingRemotes:");
}

id objc_msgSend__liftFromTapAndHoldAndResetFingers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_liftFromTapAndHoldAndResetFingers:");
}

id objc_msgSend__liftPreviewFinger(void *a1, const char *a2, ...)
{
  return _[a1 _liftPreviewFinger];
}

id objc_msgSend__lineRangeWithFaultTolerance_forward_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lineRangeWithFaultTolerance:forward:element:");
}

id objc_msgSend__listItemLabelForAXAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listItemLabelForAXAttributedString:");
}

id objc_msgSend__literalStringMarkupForString_languageCode_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_literalStringMarkupForString:languageCode:action:");
}

id objc_msgSend__loadAllDataFromFiles(void *a1, const char *a2, ...)
{
  return _[a1 _loadAllDataFromFiles];
}

id objc_msgSend__loadDataFromFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadDataFromFile:");
}

id objc_msgSend__loadNoneTableOverrides(void *a1, const char *a2, ...)
{
  return _[a1 _loadNoneTableOverrides];
}

id objc_msgSend__loadPunctuationTable_withLevel_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadPunctuationTable:withLevel:language:");
}

id objc_msgSend__loadSpecialPunctuation(void *a1, const char *a2, ...)
{
  return _[a1 _loadSpecialPunctuation];
}

id objc_msgSend__localeIdentifierForCurrentInputTable(void *a1, const char *a2, ...)
{
  return _[a1 _localeIdentifierForCurrentInputTable];
}

id objc_msgSend__localeIdentifierForCurrentTable(void *a1, const char *a2, ...)
{
  return _[a1 _localeIdentifierForCurrentTable];
}

id objc_msgSend__localeSpecificURLRegexForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localeSpecificURLRegexForLanguageCode:");
}

id objc_msgSend__localeSpecificURLsForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localeSpecificURLsForLanguageCode:");
}

id objc_msgSend__localizeKeyboardString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizeKeyboardString:");
}

id objc_msgSend__localizedTypingModeStringForCurrentMode(void *a1, const char *a2, ...)
{
  return _[a1 _localizedTypingModeStringForCurrentMode];
}

id objc_msgSend__makeSubstitution_withString_punctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeSubstitution:withString:punctuationGroup:");
}

id objc_msgSend__mapAXEventToVOTEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mapAXEventToVOTEvent:");
}

id objc_msgSend__mapsExplorationGestureManager(void *a1, const char *a2, ...)
{
  return _[a1 _mapsExplorationGestureManager];
}

id objc_msgSend__mathAXStringFromAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mathAXStringFromAttributedString:");
}

id objc_msgSend__mathExpression(void *a1, const char *a2, ...)
{
  return _[a1 _mathExpression];
}

id objc_msgSend__mergeActionsStartingAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mergeActionsStartingAtIndex:");
}

id objc_msgSend__migratePerAppDirectTouchBehavior(void *a1, const char *a2, ...)
{
  return _[a1 _migratePerAppDirectTouchBehavior];
}

id objc_msgSend__migratePreferencesIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _migratePreferencesIfNeeded];
}

id objc_msgSend__minimumSegmentDepth(void *a1, const char *a2, ...)
{
  return _[a1 _minimumSegmentDepth];
}

id objc_msgSend__minimumSegmentDepthForExpression_withMaximumDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_minimumSegmentDepthForExpression:withMaximumDepth:");
}

id objc_msgSend__modifyRotorItems_shouldEnable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_modifyRotorItems:shouldEnable:");
}

id objc_msgSend__monitoredElementCachedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_monitoredElementCachedText:");
}

id objc_msgSend__moveCursorForElement_direction_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveCursorForElement:direction:unit:");
}

id objc_msgSend__moveElementToFlowTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveElementToFlowTo:");
}

id objc_msgSend__moveFocusToUpdatedRange_element_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveFocusToUpdatedRange:element:searchType:");
}

id objc_msgSend__moveToElement_shouldPlaySound_echoSameTouchContainer_moveToElementNotification_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:");
}

id objc_msgSend__moveToElement_shouldPlaySound_echoSameTouchContainer_shouldScroll_moveToElementNotification_shouldPlayTrackingSound_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:shouldPlayTrackingSound:");
}

id objc_msgSend__moveToNextRawCandidate(void *a1, const char *a2, ...)
{
  return _[a1 _moveToNextRawCandidate];
}

id objc_msgSend__moveToWebItemDuringLoadIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _moveToWebItemDuringLoadIfNecessary];
}

id objc_msgSend__mutableArrayOfPointValuesFromDictionaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mutableArrayOfPointValuesFromDictionaries:");
}

id objc_msgSend__mutableArrayOfZeroPointValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mutableArrayOfZeroPointValues:");
}

id objc_msgSend__navigationDirectionModeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_navigationDirectionModeString:");
}

id objc_msgSend__nearestElementWithMatch_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:");
}

id objc_msgSend__nearestElementWithMatch_startElement_forward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:forward:");
}

id objc_msgSend__nearestElementWithMatch_startElement_forward_itemCheckCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestElementWithMatch:startElement:forward:itemCheckCount:");
}

id objc_msgSend__nearestScrollableElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestScrollableElement:");
}

id objc_msgSend__nearestWebElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nearestWebElement:");
}

id objc_msgSend__needsPhoneticBrailleForLanauge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_needsPhoneticBrailleForLanauge:");
}

id objc_msgSend__newBrailleInput(void *a1, const char *a2, ...)
{
  return _[a1 _newBrailleInput];
}

id objc_msgSend__newNavigationDirectionModeForRotorDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newNavigationDirectionModeForRotorDirection:");
}

id objc_msgSend__nextExplorerElementInDirection_fromElement_didWrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextExplorerElementInDirection:fromElement:didWrap:");
}

id objc_msgSend__notificationData_consumingToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationData:consumingToken:");
}

id objc_msgSend__notificationData_containsToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationData:containsToken:");
}

id objc_msgSend__notificationsToRegister(void *a1, const char *a2, ...)
{
  return _[a1 _notificationsToRegister];
}

id objc_msgSend__notifyDidFinishSpeakingWithFakeRequestForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyDidFinishSpeakingWithFakeRequestForEvent:");
}

id objc_msgSend__notifyObserversLockStateDidChange(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversLockStateDidChange];
}

id objc_msgSend__notifyObserversOutputManagerDidFinishProcessingQueuedRequests(void *a1, const char *a2, ...)
{
  return _[a1 _notifyObserversOutputManagerDidFinishProcessingQueuedRequests];
}

id objc_msgSend__notifyObserversOutputManagerWillProcessNextRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyObserversOutputManagerWillProcessNextRequest:");
}

id objc_msgSend__numberOfCharactersToDeleteStartingAtIndex_toDesiredLength_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfCharactersToDeleteStartingAtIndex:toDesiredLength:fromString:");
}

id objc_msgSend__numberOfCharactersToDeleteToDesiredLength_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfCharactersToDeleteToDesiredLength:fromString:");
}

id objc_msgSend__numberOfDots(void *a1, const char *a2, ...)
{
  return _[a1 _numberOfDots];
}

id objc_msgSend__orderedLeftDots_rightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orderedLeftDots:rightDots:");
}

id objc_msgSend__orderedMonitoredFontAttributes(void *a1, const char *a2, ...)
{
  return _[a1 _orderedMonitoredFontAttributes];
}

id objc_msgSend__orderedTouchesFromHalfPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_orderedTouchesFromHalfPattern:");
}

id objc_msgSend__outputChosenCandidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputChosenCandidate:");
}

id objc_msgSend__outputChosenSuggestion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputChosenSuggestion:");
}

id objc_msgSend__outputCurrentElementRotor(void *a1, const char *a2, ...)
{
  return _[a1 _outputCurrentElementRotor];
}

id objc_msgSend__outputDataDetectorIfPresent_element_includeLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputDataDetectorIfPresent:element:includeLinks:");
}

id objc_msgSend__outputForBefore_after_delete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputForBefore:after:delete:");
}

id objc_msgSend__outputNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputNavigationDirectionMode:");
}

id objc_msgSend__outputNextTextSegmentUnit_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputNextTextSegmentUnit:direction:");
}

id objc_msgSend__outputRangeForCharacterSegment_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputRangeForCharacterSegment:direction:");
}

id objc_msgSend__outputRequestForText_hint_useKeyboardLanguage_shouldQueue_isInsert_isSuggestion_isDelete_speakLiterally_otherLanguage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_outputRequestForText:hint:useKeyboardLanguage:shouldQueue:isInsert:isSuggestion:isDelete:speakLiterally:otherLanguage:");
}

id objc_msgSend__outputRotorTypeCount(void *a1, const char *a2, ...)
{
  return _[a1 _outputRotorTypeCount];
}

id objc_msgSend__outputSelectionDifference_oldRange_string_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputSelectionDifference:oldRange:string:language:");
}

id objc_msgSend__outputWebLineWithMarkerRange_withElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputWebLineWithMarkerRange:withElement:");
}

id objc_msgSend__overrideSetHardwareKeyboardAttached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_overrideSetHardwareKeyboardAttached:");
}

id objc_msgSend__patternIncludesEveryFinger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_patternIncludesEveryFinger:");
}

id objc_msgSend__pauseDelayForType_speechRate_voiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pauseDelayForType:speechRate:voiceType:");
}

id objc_msgSend__performAction_withComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performAction:withComponent:");
}

id objc_msgSend__performPressOnElement_withEvent_centerPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performPressOnElement:withEvent:centerPoint:");
}

id objc_msgSend__performWordBackspaceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performWordBackspaceForElement:");
}

id objc_msgSend__phoneticStringForLetter_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_phoneticStringForLetter:language:");
}

id objc_msgSend__playBonk(void *a1, const char *a2, ...)
{
  return _[a1 _playBonk];
}

id objc_msgSend__playFeedbackForGestureState_gestureComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playFeedbackForGestureState:gestureComplete:");
}

id objc_msgSend__playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playSound:");
}

id objc_msgSend__playWarningTone(void *a1, const char *a2, ...)
{
  return _[a1 _playWarningTone];
}

id objc_msgSend__playWarningTones_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_playWarningTones:completion:");
}

id objc_msgSend__populateLeftTouchPoints_rightTouchPoints_fromTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateLeftTouchPoints:rightTouchPoints:fromTouchPoints:");
}

id objc_msgSend__postKeyboardEvent_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEvent:modifiers:keyCode:");
}

id objc_msgSend__postKeyboardEventWithCharacters_originalCharacters_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_characters_originalCharacters_modifierState_eventType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:characters:originalCharacters:modifierState:eventType:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_characters_originalCharacters_modifierState_isKeyDown_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:characters:originalCharacters:modifierState:isKeyDown:");
}

id objc_msgSend__postKeyboardEventWithKeyCode_modifierState_isKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventWithKeyCode:modifierState:isKeyDown:");
}

id objc_msgSend__postKeyboardEventsForModifiers_isKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardEventsForModifiers:isKeyDown:");
}

id objc_msgSend__postKeyboardKey_keyCode_eventFlags_keyFlags_keyDown_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postKeyboardKey:keyCode:eventFlags:keyFlags:keyDown:source:");
}

id objc_msgSend__preferenceLanguageForLanguage_selectedLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferenceLanguageForLanguage:selectedLanguage:");
}

id objc_msgSend__preferencesActivitiesChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesActivitiesChanged];
}

id objc_msgSend__preferencesAlwaysUseNemethForMathChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesAlwaysUseNemethForMathChange];
}

id objc_msgSend__preferencesCaptionPanelChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesCaptionPanelChanged];
}

id objc_msgSend__preferencesNavigateImagesOptionChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesNavigateImagesOptionChange];
}

id objc_msgSend__preferencesSelectedActivityChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSelectedActivityChanged];
}

id objc_msgSend__preferencesSelectedLanguageChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSelectedLanguageChanged];
}

id objc_msgSend__preferencesSpeakHintsChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakHintsChange];
}

id objc_msgSend__preferencesSpeakNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakNotifications];
}

id objc_msgSend__preferencesSpeakingRateInRotorChanged(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesSpeakingRateInRotorChanged];
}

id objc_msgSend__preferencesTypingPitchChange(void *a1, const char *a2, ...)
{
  return _[a1 _preferencesTypingPitchChange];
}

id objc_msgSend__prepareElementOutputHeaders_currentElement_request_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareElementOutputHeaders:currentElement:request:");
}

id objc_msgSend__prepareNameSearcherForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareNameSearcherForElement:");
}

id objc_msgSend__prepareStitchedWebReadAll_request_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareStitchedWebReadAll:request:setCurrentElement:");
}

id objc_msgSend__preprocessActionLanguageAndVoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preprocessActionLanguageAndVoice:");
}

id objc_msgSend__pressActionResultDelay(void *a1, const char *a2, ...)
{
  return _[a1 _pressActionResultDelay];
}

id objc_msgSend__printBrailleForTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_printBrailleForTouchPoints:");
}

id objc_msgSend__proceed(void *a1, const char *a2, ...)
{
  return _[a1 _proceed];
}

id objc_msgSend__processActionForLiteralEmojis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processActionForLiteralEmojis:");
}

id objc_msgSend__processActions(void *a1, const char *a2, ...)
{
  return _[a1 _processActions];
}

id objc_msgSend__processCaptionTextForMarkup_regex_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processCaptionTextForMarkup:regex:range:");
}

id objc_msgSend__processEmoji_action_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processEmoji:action:rate:");
}

id objc_msgSend__processFallbackHelpForEvent_command_commandHelpText_activationSpokenHelpText_activationDisplayedHelpText_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_processFallbackHelpForEvent:command:commandHelpText:activationSpokenHelpText:activationDisplayedHelpText:");
}

id objc_msgSend__processGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processGestureEvent:");
}

id objc_msgSend__processHelpForEvent_userCommandContext_commandHelpText_activationSpokenHelpText_activationDisplayedHelpText_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_processHelpForEvent:userCommandContext:commandHelpText:activationSpokenHelpText:activationDisplayedHelpText:");
}

id objc_msgSend__processIdle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processIdle:");
}

id objc_msgSend__processMisspelledWordTextReplacement(void *a1, const char *a2, ...)
{
  return _[a1 _processMisspelledWordTextReplacement];
}

id objc_msgSend__processRawInputEvent_forElement_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processRawInputEvent:forElement:withAttributes:");
}

id objc_msgSend__processSearchEvent_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSearchEvent:forElement:");
}

id objc_msgSend__processTapAndHoldMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processTapAndHoldMode:");
}

id objc_msgSend__processVolumeButtonsForCurtainReset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processVolumeButtonsForCurtainReset:");
}

id objc_msgSend__processWebRotorEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processWebRotorEvent:");
}

id objc_msgSend__promoteGesturedTextInputRotorIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _promoteGesturedTextInputRotorIfNeeded];
}

id objc_msgSend__rangeOfLine_inBookContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rangeOfLine:inBookContent:");
}

id objc_msgSend__rawMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 _rawMathEquation];
}

id objc_msgSend__reDispatchUpdateAppFromTimerIfBundlesAreNotReady(void *a1, const char *a2, ...)
{
  return _[a1 _reDispatchUpdateAppFromTimerIfBundlesAreNotReady];
}

id objc_msgSend__realTimeAdjustableUpdateFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_realTimeAdjustableUpdateFrequency:");
}

id objc_msgSend__reallySimulateLongPressForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySimulateLongPressForElement:");
}

id objc_msgSend__recordedDriftsFilePath(void *a1, const char *a2, ...)
{
  return _[a1 _recordedDriftsFilePath];
}

id objc_msgSend__reducePreviewFingerStartingForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reducePreviewFingerStartingForce:");
}

id objc_msgSend__refresh(void *a1, const char *a2, ...)
{
  return _[a1 _refresh];
}

id objc_msgSend__refreshBrailleLine(void *a1, const char *a2, ...)
{
  return _[a1 _refreshBrailleLine];
}

id objc_msgSend__refreshBrailleLinePreferringPositionOverRotorSelection_knownLineRange_updatedPosition_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:");
}

id objc_msgSend__refreshBrailleLinePreferringPositionOverRotorSelection_knownLineRange_updatedPosition_updateBrailleElement_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_refreshBrailleLinePreferringPositionOverRotorSelection:knownLineRange:updatedPosition:updateBrailleElement:");
}

id objc_msgSend__refreshMathSegmentsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _refreshMathSegmentsIfNeeded];
}

id objc_msgSend__refreshMathSegmentsIfNeededWithPreferredDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshMathSegmentsIfNeededWithPreferredDirection:");
}

id objc_msgSend__registerForAXNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForAXNotifications:");
}

id objc_msgSend__registerForExternalDevices(void *a1, const char *a2, ...)
{
  return _[a1 _registerForExternalDevices];
}

id objc_msgSend__registerForIOHIDUsage(void *a1, const char *a2, ...)
{
  return _[a1 _registerForIOHIDUsage];
}

id objc_msgSend__registerForNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForNotifications];
}

id objc_msgSend__registerForPreferenceChanges(void *a1, const char *a2, ...)
{
  return _[a1 _registerForPreferenceChanges];
}

id objc_msgSend__registerForUserSwitches(void *a1, const char *a2, ...)
{
  return _[a1 _registerForUserSwitches];
}

id objc_msgSend__registerForZoomListener(void *a1, const char *a2, ...)
{
  return _[a1 _registerForZoomListener];
}

id objc_msgSend__registerMachServer(void *a1, const char *a2, ...)
{
  return _[a1 _registerMachServer];
}

id objc_msgSend__registerWithSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 _registerWithSpringBoard];
}

id objc_msgSend__registerWithSystem(void *a1, const char *a2, ...)
{
  return _[a1 _registerWithSystem];
}

id objc_msgSend__removeBadDeveloperDecisions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBadDeveloperDecisions:");
}

id objc_msgSend__removeInstanceOfDriftFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInstanceOfDriftFromArray:");
}

id objc_msgSend__removeRunsOfNewLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeRunsOfNewLines:");
}

id objc_msgSend__repairFileProtectionClassOnPathIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repairFileProtectionClassOnPathIfNecessary:");
}

id objc_msgSend__repeatStateForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_repeatStateForEvent:");
}

id objc_msgSend__replaceEmoticonsWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceEmoticonsWithText:");
}

id objc_msgSend__replaceHighMemoryVoiceIDWithDefaultVoiceIDForLanguage_preferredFallbackLanguage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceHighMemoryVoiceIDWithDefaultVoiceIDForLanguage:preferredFallbackLanguage:");
}

id objc_msgSend__replacePunctuation_punctuationGroup_hasMathContext_hasPhoneContext_isText_replaceCommas_languageCode_speakPunctuationCounts_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_replacePunctuation:punctuationGroup:hasMathContext:hasPhoneContext:isText:replaceCommas:languageCode:speakPu nctuationCounts:");
}

id objc_msgSend__replacePunctuation_withAction_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replacePunctuation:withAction:languageCode:");
}

id objc_msgSend__replaceRepeatedEmoji_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceRepeatedEmoji:");
}

id objc_msgSend__replaceRepeatedPuntuationAndEmoji_newString_charReplacementString_charSequence_charIndex_speakPunctuationCounts_languageCode_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_replaceRepeatedPuntuationAndEmoji:newString:charReplacementString:charSequence:charIndex:speakPunctuationCou nts:languageCode:");
}

id objc_msgSend__replaceUserSubstitutions_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_replaceUserSubstitutions:action:");
}

id objc_msgSend__requiresCandidateSelection(void *a1, const char *a2, ...)
{
  return _[a1 _requiresCandidateSelection];
}

id objc_msgSend__requiresLaTeXInput(void *a1, const char *a2, ...)
{
  return _[a1 _requiresLaTeXInput];
}

id objc_msgSend__resetBrailleCursor(void *a1, const char *a2, ...)
{
  return _[a1 _resetBrailleCursor];
}

id objc_msgSend__resetConsecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 _resetConsecutiveCrashCount];
}

id objc_msgSend__resetDirectInteractionCache(void *a1, const char *a2, ...)
{
  return _[a1 _resetDirectInteractionCache];
}

id objc_msgSend__resetElementLabel(void *a1, const char *a2, ...)
{
  return _[a1 _resetElementLabel];
}

id objc_msgSend__resetElementUnitIndexes(void *a1, const char *a2, ...)
{
  return _[a1 _resetElementUnitIndexes];
}

id objc_msgSend__resetItemChooserCache(void *a1, const char *a2, ...)
{
  return _[a1 _resetItemChooserCache];
}

id objc_msgSend__resetLearnedData(void *a1, const char *a2, ...)
{
  return _[a1 _resetLearnedData];
}

id objc_msgSend__resetMathGranularMovementState(void *a1, const char *a2, ...)
{
  return _[a1 _resetMathGranularMovementState];
}

id objc_msgSend__resetOtherTapInputModes(void *a1, const char *a2, ...)
{
  return _[a1 _resetOtherTapInputModes];
}

id objc_msgSend__resetQuickNavState(void *a1, const char *a2, ...)
{
  return _[a1 _resetQuickNavState];
}

id objc_msgSend__resetReadAllRequest(void *a1, const char *a2, ...)
{
  return _[a1 _resetReadAllRequest];
}

id objc_msgSend__resetRotorTextNavigation(void *a1, const char *a2, ...)
{
  return _[a1 _resetRotorTextNavigation];
}

id objc_msgSend__resetSearchType(void *a1, const char *a2, ...)
{
  return _[a1 _resetSearchType];
}

id objc_msgSend__resetStateAndSendPendingEventsToSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetStateAndSendPendingEventsToSystem:");
}

id objc_msgSend__resetSystemControlStatus(void *a1, const char *a2, ...)
{
  return _[a1 _resetSystemControlStatus];
}

id objc_msgSend__resetTranslator(void *a1, const char *a2, ...)
{
  return _[a1 _resetTranslator];
}

id objc_msgSend__resolvedOutputLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resolvedOutputLanguage:");
}

id objc_msgSend__retrieveCachedFocusedElementForElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveCachedFocusedElementForElementCommunity:");
}

id objc_msgSend__retrieveCurrentCharacterFromEditableElement(void *a1, const char *a2, ...)
{
  return _[a1 _retrieveCurrentCharacterFromEditableElement];
}

id objc_msgSend__retrieveDefaultElementForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveDefaultElementForPosition:");
}

id objc_msgSend__reupdateTextSelectionInformation(void *a1, const char *a2, ...)
{
  return _[a1 _reupdateTextSelectionInformation];
}

id objc_msgSend__roleDescriptionWithInteractOption_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_roleDescriptionWithInteractOption:language:");
}

id objc_msgSend__rotorTypeSupportsCounting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rotorTypeSupportsCounting:");
}

id objc_msgSend__savedDescriptionToPhoto_description_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedDescriptionToPhoto:description:element:");
}

id objc_msgSend__sbPort(void *a1, const char *a2, ...)
{
  return _[a1 _sbPort];
}

id objc_msgSend__scheduleExploringModeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleExploringModeIfNeeded];
}

id objc_msgSend__scheduleUpdateScribbleTapAndHoldModeOffset(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleUpdateScribbleTapAndHoldModeOffset];
}

id objc_msgSend__searchForElementWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_searchForElementWithParameters:");
}

id objc_msgSend__searchForElementWithParameters_searchFromOpaqueElementsInRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_searchForElementWithParameters:searchFromOpaqueElementsInRemoteParent:");
}

id objc_msgSend__secureTextDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secureTextDescription:");
}

id objc_msgSend__selectedBrailleGesturesInputTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleGesturesInputTableChanged];
}

id objc_msgSend__selectedBrailleInputTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleInputTableChanged];
}

id objc_msgSend__selectedBrailleTableChanged(void *a1, const char *a2, ...)
{
  return _[a1 _selectedBrailleTableChanged];
}

id objc_msgSend__selectedLanguageChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectedLanguageChanged:");
}

id objc_msgSend__selectionStringForSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectionStringForSegment:");
}

id objc_msgSend__sendAutomationTouchCommand_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendAutomationTouchCommand:location:");
}

id objc_msgSend__sendBSIActiveStateOffNotificationAndNotify(void *a1, const char *a2, ...)
{
  return _[a1 _sendBSIActiveStateOffNotificationAndNotify];
}

id objc_msgSend__sendBrailleAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendBrailleAlert:");
}

id objc_msgSend__sendEvent_withKeyInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendEvent:withKeyInfo:arrowMask:");
}

id objc_msgSend__sendEventForCommand_withKeyInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendEventForCommand:withKeyInfo:arrowMask:");
}

id objc_msgSend__sendExplorerOutputRequest_forceReread_interruptCurrentSpeech_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendExplorerOutputRequest:forceReread:interruptCurrentSpeech:");
}

id objc_msgSend__sendGreetingMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendGreetingMessage];
}

id objc_msgSend__sendSystemControlEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSystemControlEvent:");
}

id objc_msgSend__sendTVRemoteCommandOverrideForAXCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendTVRemoteCommandOverrideForAXCommand:");
}

id objc_msgSend__setAutomaticBrailleTranslationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAutomaticBrailleTranslationEnabled:");
}

id objc_msgSend__setBrailleInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleInputTable:");
}

id objc_msgSend__setBrailleString_type_timeout_priority_langCode_brailleLineRangeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleString:type:timeout:priority:langCode:brailleLineRangeValue:");
}

id objc_msgSend__setBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBrailleTable:");
}

id objc_msgSend__setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCurrentElement:isProtectedApp:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_shouldResetTextSelection_shouldResetCharacterRange_ignoreIsAccessibilityElementCheck_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:");
}

id objc_msgSend__setCurrentElement_isProtectedApp_shouldResetTextSelection_shouldResetCharacterRange_ignoreIsAccessibilityElementCheck_shouldSetBrailleElement_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityEle mentCheck:shouldSetBrailleElement:");
}

id objc_msgSend__setDuckingLevelAlways_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelAlways:");
}

id objc_msgSend__setDuckingLevelOnlySpeaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDuckingLevelOnlySpeaking:");
}

id objc_msgSend__setElementRotorToType_saveToPreferences_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setElementRotorToType:saveToPreferences:userInitiated:");
}

id objc_msgSend__setElementUnitIndexesToEndOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setElementUnitIndexesToEndOfElement:");
}

id objc_msgSend__setFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFingerCount:");
}

id objc_msgSend__setInputContractionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInputContractionMode:");
}

id objc_msgSend__setLastSeenLineAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLastSeenLineAndColumn:");
}

id objc_msgSend__setNearestElementMovingForward_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setNearestElementMovingForward:");
}

id objc_msgSend__setPreviousTouchTypingKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPreviousTouchTypingKey:");
}

id objc_msgSend__setSelectedTextRange_onElement_refreshBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedTextRange:onElement:refreshBraille:");
}

id objc_msgSend__setSelectedTextRange_onElement_refreshBraille_isVoiceOverSelectionMovement_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:");
}

id objc_msgSend__shouldAllowSpeakThisGesture(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAllowSpeakThisGesture];
}

id objc_msgSend__shouldAnalyzeElement_deferToMediaAnalysisElementIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnalyzeElement:deferToMediaAnalysisElementIfNeeded:");
}

id objc_msgSend__shouldAnnounceCustomRotorHintForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAnnounceCustomRotorHintForElement:");
}

id objc_msgSend__shouldAttemptTracking(void *a1, const char *a2, ...)
{
  return _[a1 _shouldAttemptTracking];
}

id objc_msgSend__shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:");
}

id objc_msgSend__shouldDismissPreviewOnLift(void *a1, const char *a2, ...)
{
  return _[a1 _shouldDismissPreviewOnLift];
}

id objc_msgSend__shouldIgnoreElementMovementNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIgnoreElementMovementNotification:");
}

id objc_msgSend__shouldIncludeContainerInDescriptionForCurrentElement_previousElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:");
}

id objc_msgSend__shouldIncludeServiceNameForSpokenBrailleRotorAnnouncementOfTable_rotorItems_locale_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIncludeServiceNameForSpokenBrailleRotorAnnouncementOfTable:rotorItems:locale:");
}

id objc_msgSend__shouldMoveToLastWebFormControl(void *a1, const char *a2, ...)
{
  return _[a1 _shouldMoveToLastWebFormControl];
}

id objc_msgSend__shouldNotSpeakForIncomingCall(void *a1, const char *a2, ...)
{
  return _[a1 _shouldNotSpeakForIncomingCall];
}

id objc_msgSend__shouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 _shouldReverseDots];
}

id objc_msgSend__shouldSendTapStraightToSystem(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSendTapStraightToSystem];
}

id objc_msgSend__shouldSuppressSpeechForPlayPause(void *a1, const char *a2, ...)
{
  return _[a1 _shouldSuppressSpeechForPlayPause];
}

id objc_msgSend__shouldSwitchToFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSwitchToFirstResponder:");
}

id objc_msgSend__shouldUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseContractedBraille];
}

id objc_msgSend__shouldUseEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseEightDotBraille];
}

id objc_msgSend__shouldUseGesturedTextInputManager(void *a1, const char *a2, ...)
{
  return _[a1 _shouldUseGesturedTextInputManager];
}

id objc_msgSend__showItemChooser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showItemChooser:");
}

id objc_msgSend__showVisualRotor_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showVisualRotor:direction:");
}

id objc_msgSend__sideAppDividerElement(void *a1, const char *a2, ...)
{
  return _[a1 _sideAppDividerElement];
}

id objc_msgSend__similarMonitoredElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_similarMonitoredElement:");
}

id objc_msgSend__simulatePreviewActionGesture(void *a1, const char *a2, ...)
{
  return _[a1 _simulatePreviewActionGesture];
}

id objc_msgSend__simulatedForceTouchLift(void *a1, const char *a2, ...)
{
  return _[a1 _simulatedForceTouchLift];
}

id objc_msgSend__simulatedPressOutputTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulatedPressOutputTimer:");
}

id objc_msgSend__sonarElementFromPoint_inForwardDirection_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sonarElementFromPoint:inForwardDirection:limit:");
}

id objc_msgSend__sonarElementInForwardDirection_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sonarElementInForwardDirection:limit:");
}

id objc_msgSend__sortTouches_fromTopToBottomForSide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortTouches:fromTopToBottomForSide:");
}

id objc_msgSend__soundVolume(void *a1, const char *a2, ...)
{
  return _[a1 _soundVolume];
}

id objc_msgSend__sourceNameForChangeOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sourceNameForChangeOriginator:");
}

id objc_msgSend__speak_cannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speak:cannotBeInterrupted:");
}

id objc_msgSend__speak_cannotBeInterrupted_announcement_brailleOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speak:cannotBeInterrupted:announcement:brailleOnly:");
}

id objc_msgSend__speakAllDigits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAllDigits:");
}

id objc_msgSend__speakAsLiteralText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsLiteralText:");
}

id objc_msgSend__speakAsMixOfLiteralAndNormalText_withLiteralRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsMixOfLiteralAndNormalText:withLiteralRanges:");
}

id objc_msgSend__speakAsNormalText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsNormalText:");
}

id objc_msgSend__speakAsPhoneticText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakAsPhoneticText:");
}

id objc_msgSend__speakMessages_cannotBeInterrupted_pitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakMessages:cannotBeInterrupted:pitch:");
}

id objc_msgSend__speakMessages_cannotBeInterrupted_pitch_announcement_brailleOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakMessages:cannotBeInterrupted:pitch:announcement:brailleOnly:");
}

id objc_msgSend__speakPrintBrailleForExploration(void *a1, const char *a2, ...)
{
  return _[a1 _speakPrintBrailleForExploration];
}

id objc_msgSend__speakText_doesNotInterrupt_cannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:doesNotInterrupt:cannotBeInterrupted:");
}

id objc_msgSend__speakText_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:hint:");
}

id objc_msgSend__speakText_hint_useKeyboardLanguage_shouldQueue_isInsert_isSuggestion_isDelete_speakLiterally_otherLanguage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_speakText:hint:useKeyboardLanguage:shouldQueue:isInsert:isSuggestion:isDelete:speakLiterally:otherLanguage:");
}

id objc_msgSend__speakText_useKeyboardLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:useKeyboardLanguage:");
}

id objc_msgSend__speakText_useKeyboardLanguage_shouldQueue_isInsert_isDelete_speakLiterally_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speakText:useKeyboardLanguage:shouldQueue:isInsert:isDelete:speakLiterally:");
}

id objc_msgSend__speechPhoneticsString(void *a1, const char *a2, ...)
{
  return _[a1 _speechPhoneticsString];
}

id objc_msgSend__speechVoiceForIdentifier_language_footprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_speechVoiceForIdentifier:language:footprint:");
}

id objc_msgSend__spellingSuggestionsForWord_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spellingSuggestionsForWord:languageCode:");
}

id objc_msgSend__spokenStringForPrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenStringForPrintBraille:");
}

id objc_msgSend__spokenStringForPrintBraille_useLongForm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenStringForPrintBraille:useLongForm:");
}

id objc_msgSend__spokenTextForRequest_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spokenTextForRequest:range:");
}

id objc_msgSend__startPointForScribbleWithElement_originalStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPointForScribbleWithElement:originalStartPoint:");
}

id objc_msgSend__startReadingBookForNewPage(void *a1, const char *a2, ...)
{
  return _[a1 _startReadingBookForNewPage];
}

id objc_msgSend__startScribbleTapAndHoldModeTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _startScribbleTapAndHoldModeTimeout];
}

id objc_msgSend__startTouchDownForTapAndHoldActionWithCenter_force_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTouchDownForTapAndHoldActionWithCenter:force:altitude:azimuth:");
}

id objc_msgSend__stopMemorizingSession(void *a1, const char *a2, ...)
{
  return _[a1 _stopMemorizingSession];
}

id objc_msgSend__stopReadAll(void *a1, const char *a2, ...)
{
  return _[a1 _stopReadAll];
}

id objc_msgSend__stopRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 _stopRunLoop];
}

id objc_msgSend__stringByDeletingFromCurrentInputStringIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _stringByDeletingFromCurrentInputStringIfNeeded];
}

id objc_msgSend__stringForBrailleGestureCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForBrailleGestureCommand:");
}

id objc_msgSend__stringForLiteralText_action_allowChangingLanguageForPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForLiteralText:action:allowChangingLanguageForPunctuation:");
}

id objc_msgSend__stringForNormalText_action_allowPausingAtBoundaries_ignoreLeadingCommas_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForNormalText:action:allowPausingAtBoundaries:ignoreLeadingCommas:");
}

id objc_msgSend__stringMatchesSpecialCases_forSymbol_ranges_langaugeCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringMatchesSpecialCases:forSymbol:ranges:langaugeCode:");
}

id objc_msgSend__stringWithFirstPart_secondPart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringWithFirstPart:secondPart:");
}

id objc_msgSend__switchToTrackingMode(void *a1, const char *a2, ...)
{
  return _[a1 _switchToTrackingMode];
}

id objc_msgSend__syncLabelCache(void *a1, const char *a2, ...)
{
  return _[a1 _syncLabelCache];
}

id objc_msgSend__systemBootTime(void *a1, const char *a2, ...)
{
  return _[a1 _systemBootTime];
}

id objc_msgSend__systemControlPosition_fingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemControlPosition:fingerCount:");
}

id objc_msgSend__systemNotificationInProgressForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemNotificationInProgressForRequest:");
}

id objc_msgSend__tableIdentifierFromDefaultRotorItem_forLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tableIdentifierFromDefaultRotorItem:forLocale:");
}

id objc_msgSend__tapAndHoldModeIsForScribble(void *a1, const char *a2, ...)
{
  return _[a1 _tapAndHoldModeIsForScribble];
}

id objc_msgSend__tearDownTelephonySynthesizer(void *a1, const char *a2, ...)
{
  return _[a1 _tearDownTelephonySynthesizer];
}

id objc_msgSend__temporarilyChangeQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_temporarilyChangeQuickNav:");
}

id objc_msgSend__testFetchWebElementRects(void *a1, const char *a2, ...)
{
  return _[a1 _testFetchWebElementRects];
}

id objc_msgSend__textAttachmentElementForString_inRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textAttachmentElementForString:inRange:");
}

id objc_msgSend__totalDistanceBetweenCorrespondingPointsInTouches_andTouches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_totalDistanceBetweenCorrespondingPointsInTouches:andTouches:");
}

id objc_msgSend__totalNumberOfDots(void *a1, const char *a2, ...)
{
  return _[a1 _totalNumberOfDots];
}

id objc_msgSend__touchContainerDidChangeForElement_oldElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchContainerDidChangeForElement:oldElement:");
}

id objc_msgSend__touchDownAtPoint_withForce_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchDownAtPoint:withForce:altitude:azimuth:");
}

id objc_msgSend__touchDragAtPoint_withForce_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchDragAtPoint:withForce:altitude:azimuth:");
}

id objc_msgSend__touchLiftAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLiftAtPoint:");
}

id objc_msgSend__touchLocationsByFilteringOutEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLocationsByFilteringOutEdges:");
}

id objc_msgSend__touchLocationsForGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchLocationsForGestureEvent:");
}

id objc_msgSend__touchPointsForCalibrationGivenFirstPoints_lastPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_touchPointsForCalibrationGivenFirstPoints:lastPoints:");
}

id objc_msgSend__transitionToGestureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_transitionToGestureState:");
}

id objc_msgSend__treePositionForMathSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_treePositionForMathSegment:");
}

id objc_msgSend__trimCommonPrefixWithString_fromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trimCommonPrefixWithString:fromString:");
}

id objc_msgSend__ttsVoiceTypeForPauseCalculationWithVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ttsVoiceTypeForPauseCalculationWithVoiceIdentifier:");
}

id objc_msgSend__tvOS_handleIdleAndTrackingEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_handleIdleAndTrackingEvents:");
}

id objc_msgSend__tvOS_navigationStyleChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_navigationStyleChanged");
}

id objc_msgSend__tvOS_updateWithNativeFocus_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_updateWithNativeFocus:withDelay:");
}

id objc_msgSend__tvOS_userPreferredNonDirectTouchInteractionMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tvOS_userPreferredNonDirectTouchInteractionMode");
}

id objc_msgSend__typePrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_typePrintBraille:");
}

id objc_msgSend__typingEchoString(void *a1, const char *a2, ...)
{
  return _[a1 _typingEchoString];
}

id objc_msgSend__uncapVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uncapVolume:");
}

id objc_msgSend__updateAccelerometerDataIfNeededAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAccelerometerDataIfNeededAndAnnounce:");
}

id objc_msgSend__updateActionWithCanonicalMappings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActionWithCanonicalMappings:");
}

id objc_msgSend__updateActivityListeners(void *a1, const char *a2, ...)
{
  return _[a1 _updateActivityListeners];
}

id objc_msgSend__updateAnyThreadElementAccess(void *a1, const char *a2, ...)
{
  return _[a1 _updateAnyThreadElementAccess];
}

id objc_msgSend__updateApplicationAndSpeak_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateApplicationAndSpeak:");
}

id objc_msgSend__updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _[a1 _updateAudioSessionProperties];
}

id objc_msgSend__updateBrailleAutoAdvancePrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleAutoAdvancePrefs];
}

id objc_msgSend__updateBrailleKeyDebouncePrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleKeyDebouncePrefs];
}

id objc_msgSend__updateBrailleTypingPropertiesAndDelayAnnouncement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBrailleTypingPropertiesAndDelayAnnouncement:");
}

id objc_msgSend__updateBrailleTypingPropertiesAndDelayAnnouncement_forUnlockConfiguration_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBrailleTypingPropertiesAndDelayAnnouncement:forUnlockConfiguration:");
}

id objc_msgSend__updateBrailleUI(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleUI];
}

id objc_msgSend__updateBrailleWithBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _updateBrailleWithBuffer];
}

id objc_msgSend__updateCacheWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCacheWithElement:");
}

id objc_msgSend__updateChannelLayout(void *a1, const char *a2, ...)
{
  return _[a1 _updateChannelLayout];
}

id objc_msgSend__updateConsecutiveKeyCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateConsecutiveKeyCount:");
}

id objc_msgSend__updateContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 _updateContextDescriptors];
}

id objc_msgSend__updateCurrentElementByMovingInDirection_fromElement_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurrentElementByMovingInDirection:fromElement:context:");
}

id objc_msgSend__updateCurrentElementForTextInputSelectionChangeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementForTextInputSelectionChangeIfNeeded];
}

id objc_msgSend__updateCurrentElementFrame(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementFrame];
}

id objc_msgSend__updateCurrentElementOrbGestureMode(void *a1, const char *a2, ...)
{
  return _[a1 _updateCurrentElementOrbGestureMode];
}

id objc_msgSend__updateCurrentWordContextForBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCurrentWordContextForBook:");
}

id objc_msgSend__updateCursorAfterPressForElement_currentElementRange_request_didHaveCursor_doesHaveCursor_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:");
}

id objc_msgSend__updateCursorFrameForElementIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateCursorFrameForElementIfNeeded:");
}

id objc_msgSend__updateDelayUntilSpeakUnderTouch(void *a1, const char *a2, ...)
{
  return _[a1 _updateDelayUntilSpeakUnderTouch];
}

id objc_msgSend__updateDotNumberCirclesForPrintBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDotNumberCirclesForPrintBraille:");
}

id objc_msgSend__updateDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 _updateDotPositions];
}

id objc_msgSend__updateDuckingBasedOnActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDuckingBasedOnActivity:");
}

id objc_msgSend__updateEdgePanGestureForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEdgePanGestureForState:");
}

id objc_msgSend__updateEventFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateEventFlags:");
}

id objc_msgSend__updateExplorerElementsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _updateExplorerElementsIfNeeded];
}

id objc_msgSend__updateExternalAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateExternalAccessory:");
}

id objc_msgSend__updateExternalRoutesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _updateExternalRoutesAvailable];
}

id objc_msgSend__updateFingersInSystemControlLocation_fingerCount_isLift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFingersInSystemControlLocation:fingerCount:isLift:");
}

id objc_msgSend__updateFirstResponder(void *a1, const char *a2, ...)
{
  return _[a1 _updateFirstResponder];
}

id objc_msgSend__updateFirstResponderTypingBuffer(void *a1, const char *a2, ...)
{
  return _[a1 _updateFirstResponderTypingBuffer];
}

id objc_msgSend__updateFirstnessOfTrackingEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFirstnessOfTrackingEvent:");
}

id objc_msgSend__updateFocusForFKA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFocusForFKA:");
}

id objc_msgSend__updateHelpEnabled(void *a1, const char *a2, ...)
{
  return _[a1 _updateHelpEnabled];
}

id objc_msgSend__updateLastFirstResponderChangedTime(void *a1, const char *a2, ...)
{
  return _[a1 _updateLastFirstResponderChangedTime];
}

id objc_msgSend__updateLocalizedResources(void *a1, const char *a2, ...)
{
  return _[a1 _updateLocalizedResources];
}

id objc_msgSend__updateMostRecentElementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 _updateMostRecentElementCommunity];
}

id objc_msgSend__updateOnscreenKeyboardSettings(void *a1, const char *a2, ...)
{
  return _[a1 _updateOnscreenKeyboardSettings];
}

id objc_msgSend__updatePitch_settingsPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePitch:settingsPitch:");
}

id objc_msgSend__updatePlayerWithAudioFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePlayerWithAudioFile:");
}

id objc_msgSend__updatePrefersNonBlinkingCursorIndicatorPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updatePrefersNonBlinkingCursorIndicatorPrefs];
}

id objc_msgSend__updateRangeToReplaceInContext_selectedRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRangeToReplaceInContext:selectedRange:");
}

id objc_msgSend__updateRealtimeElementStatus(void *a1, const char *a2, ...)
{
  return _[a1 _updateRealtimeElementStatus];
}

id objc_msgSend__updateRotorForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 _updateRotorForCurrentElement];
}

id objc_msgSend__updateRotorForCurrentElement_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRotorForCurrentElement:completion:");
}

id objc_msgSend__updateRotorsForElementWithErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateRotorsForElementWithErrorMessage:");
}

id objc_msgSend__updateScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateScreenCurtainEnabled:");
}

id objc_msgSend__updateShouldUseContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 _updateShouldUseContractedBraille];
}

id objc_msgSend__updateSoundCurtain(void *a1, const char *a2, ...)
{
  return _[a1 _updateSoundCurtain];
}

id objc_msgSend__updateStatusCellPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateStatusCellPrefs];
}

id objc_msgSend__updateStatusCells(void *a1, const char *a2, ...)
{
  return _[a1 _updateStatusCells];
}

id objc_msgSend__updateTapAndHoldLocationDataForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTapAndHoldLocationDataForElement:");
}

id objc_msgSend__updateTapSpeedFromPreferences(void *a1, const char *a2, ...)
{
  return _[a1 _updateTapSpeedFromPreferences];
}

id objc_msgSend__updateTouchContainerForElement_playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTouchContainerForElement:playSound:");
}

id objc_msgSend__updateUserSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateUserSubstitutions:");
}

id objc_msgSend__updateValueChangeOriginatorForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateValueChangeOriginatorForApplication:");
}

id objc_msgSend__updateVoiceOverHandGesturesActionCustomizations(void *a1, const char *a2, ...)
{
  return _[a1 _updateVoiceOverHandGesturesActionCustomizations];
}

id objc_msgSend__updateWebRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 _updateWebRotorItems];
}

id objc_msgSend__updateWithMostRecentElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateWithMostRecentElementCommunity:");
}

id objc_msgSend__updateWordWrapPrefs(void *a1, const char *a2, ...)
{
  return _[a1 _updateWordWrapPrefs];
}

id objc_msgSend__updateZoom_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoom:element:");
}

id objc_msgSend__updateZoomFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateZoomFrame:");
}

id objc_msgSend__urlRangesInString_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlRangesInString:languageCode:");
}

id objc_msgSend__useLineFrameBoundsForTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useLineFrameBoundsForTouch:");
}

id objc_msgSend__userHasDisabledUSBRM(void *a1, const char *a2, ...)
{
  return _[a1 _userHasDisabledUSBRM];
}

id objc_msgSend__usingAllChannels(void *a1, const char *a2, ...)
{
  return _[a1 _usingAllChannels];
}

id objc_msgSend__validateAssetFromResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateAssetFromResults:");
}

id objc_msgSend__valueWait_oldValue_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueWait:oldValue:waitTime:");
}

id objc_msgSend__verifiedElementWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifiedElementWithElement:");
}

id objc_msgSend__verifiedElementWithElement_atPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_verifiedElementWithElement:atPoint:");
}

id objc_msgSend__verifyCorrectThread(void *a1, const char *a2, ...)
{
  return _[a1 _verifyCorrectThread];
}

id objc_msgSend__visionAnalysisOptionsForElement_visionOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visionAnalysisOptionsForElement:visionOptions:");
}

id objc_msgSend__voiceFromInternalVoiceListWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_voiceFromInternalVoiceListWithIdentifier:");
}

id objc_msgSend__waitForBrailleClientConnection(void *a1, const char *a2, ...)
{
  return _[a1 _waitForBrailleClientConnection];
}

id objc_msgSend__wasCanceledWithCountGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wasCanceledWithCountGeneration:");
}

id objc_msgSend__wasCanceledWithSearchGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wasCanceledWithSearchGeneration:");
}

id objc_msgSend__willStartEdgePanGestureForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willStartEdgePanGestureForEvent:");
}

id objc_msgSend__wrapup(void *a1, const char *a2, ...)
{
  return _[a1 _wrapup];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteValue(void *a1, const char *a2, ...)
{
  return _[a1 absoluteValue];
}

id objc_msgSend_acceptsContractedBraille(void *a1, const char *a2, ...)
{
  return _[a1 acceptsContractedBraille];
}

id objc_msgSend_acceptsRawInput(void *a1, const char *a2, ...)
{
  return _[a1 acceptsRawInput];
}

id objc_msgSend_accessibilityData(void *a1, const char *a2, ...)
{
  return _[a1 accessibilityData];
}

id objc_msgSend_accessibleAncestor(void *a1, const char *a2, ...)
{
  return _[a1 accessibleAncestor];
}

id objc_msgSend_accessibleDescendants(void *a1, const char *a2, ...)
{
  return _[a1 accessibleDescendants];
}

id objc_msgSend_acquireAssertionToDisableIdleTimerWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireAssertionToDisableIdleTimerWithReason:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _[a1 action];
}

id objc_msgSend_actionCompletionBlock(void *a1, const char *a2, ...)
{
  return _[a1 actionCompletionBlock];
}

id objc_msgSend_actionElement(void *a1, const char *a2, ...)
{
  return _[a1 actionElement];
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _[a1 actions];
}

id objc_msgSend_actionsRotorAddBehaviorForElementRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionsRotorAddBehaviorForElementRotor:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _[a1 activate];
}

id objc_msgSend_activateDetectionMode(void *a1, const char *a2, ...)
{
  return _[a1 activateDetectionMode];
}

id objc_msgSend_activateHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 activateHomeButton];
}

id objc_msgSend_activateIfSupported(void *a1, const char *a2, ...)
{
  return _[a1 activateIfSupported];
}

id objc_msgSend_activateKeyboardReturnKey(void *a1, const char *a2, ...)
{
  return _[a1 activateKeyboardReturnKey];
}

id objc_msgSend_activateLockButton(void *a1, const char *a2, ...)
{
  return _[a1 activateLockButton];
}

id objc_msgSend_activateSiri(void *a1, const char *a2, ...)
{
  return _[a1 activateSiri];
}

id objc_msgSend_activateTripleClick(void *a1, const char *a2, ...)
{
  return _[a1 activateTripleClick];
}

id objc_msgSend_activatedDirectTouchThatRequiredActivation(void *a1, const char *a2, ...)
{
  return _[a1 activatedDirectTouchThatRequiredActivation];
}

id objc_msgSend_activationDelay(void *a1, const char *a2, ...)
{
  return _[a1 activationDelay];
}

id objc_msgSend_activationPoint(void *a1, const char *a2, ...)
{
  return _[a1 activationPoint];
}

id objc_msgSend_activeBrailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleAutoAdvanceDuration];
}

id objc_msgSend_activeBrailleGeneralStatusCellPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleGeneralStatusCellPreference];
}

id objc_msgSend_activeBrailleInputPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleInputPreference];
}

id objc_msgSend_activeBrailleOutputPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleOutputPreference];
}

id objc_msgSend_activeBrailleTextStatusCellPreference(void *a1, const char *a2, ...)
{
  return _[a1 activeBrailleTextStatusCellPreference];
}

id objc_msgSend_activeKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 activeKeyboard];
}

id objc_msgSend_activeVoiceAssets(void *a1, const char *a2, ...)
{
  return _[a1 activeVoiceAssets];
}

id objc_msgSend_activities(void *a1, const char *a2, ...)
{
  return _[a1 activities];
}

id objc_msgSend_activityBasedAudioDucking(void *a1, const char *a2, ...)
{
  return _[a1 activityBasedAudioDucking];
}

id objc_msgSend_adaptFrameForSystemElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adaptFrameForSystemElement:");
}

id objc_msgSend_addAttribute_forKey_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:forKey:withRange:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:");
}

id objc_msgSend_addAttributedString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:withLanguage:");
}

id objc_msgSend_addAttributedString_withLanguage_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributedString:withLanguage:category:");
}

id objc_msgSend_addAttributesToAction_fromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributesToAction:fromDictionary:");
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCharactersInString:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventHandler:");
}

id objc_msgSend_addFingerWithIdentifier_location_pressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFingerWithIdentifier:location:pressure:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndexesInRange:");
}

id objc_msgSend_addMisspellingsForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMisspellingsForString:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObjectsFromIndexMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromIndexMap:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOption_argument_target_action_argumentDescription_required_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOption:argument:target:action:argumentDescription:required:");
}

id objc_msgSend_addOutputEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutputEvent:");
}

id objc_msgSend_addOutputEvent_toFirstActionMatchingCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutputEvent:toFirstActionMatchingCategory:");
}

id objc_msgSend_addOutputManagerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOutputManagerObserver:");
}

id objc_msgSend_addPause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPause:");
}

id objc_msgSend_addPrintBrailleToBuffer_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrintBrailleToBuffer:language:");
}

id objc_msgSend_addSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSound:");
}

id objc_msgSend_addString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:");
}

id objc_msgSend_addString_brailleString_breakWords_withLanguage_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:breakWords:withLanguage:atIndex:");
}

id objc_msgSend_addString_brailleString_breakWords_withLanguage_atIndex_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_addString_brailleString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:brailleString:withLanguage:");
}

id objc_msgSend_addString_breakWords_withLanguage_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:breakWords:withLanguage:atIndex:");
}

id objc_msgSend_addString_breakWords_withLanguage_atIndex_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_addString_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:category:");
}

id objc_msgSend_addString_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:withLanguage:");
}

id objc_msgSend_addString_withLanguage_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addString:withLanguage:category:");
}

id objc_msgSend_addStylusWithIdentifier_location_pressure_altitude_azimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStylusWithIdentifier:location:pressure:altitude:azimuth:");
}

id objc_msgSend_addTVElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElement:");
}

id objc_msgSend_addTVElement_servesAsHeader_filterWithAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElement:servesAsHeader:filterWithAspectMask:");
}

id objc_msgSend_addTVElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTVElements:");
}

id objc_msgSend_addTextualInformationToBrailleLine_forPosition_rotorSelection_shouldPreferRotorSelection_lineRange_descriptionRange_lineRangeKnown_isNewTouchContainer_previousElement_updateValue_singleLine_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "addTextualInformationToBrailleLine:forPosition:rotorSelection:shouldPreferRotorSelection:lineRange:descriptio nRange:lineRangeKnown:isNewTouchContainer:previousElement:updateValue:singleLine:");
}

id objc_msgSend_addTextualInformationToRequest_options_dataPackage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextualInformationToRequest:options:dataPackage:");
}

id objc_msgSend_addTitleElementToCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTitleElementToCache:");
}

id objc_msgSend_addVOSEventFinishedHandler_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVOSEventFinishedHandler:forIdentifier:");
}

id objc_msgSend_additionalFlags(void *a1, const char *a2, ...)
{
  return _[a1 additionalFlags];
}

id objc_msgSend_additionalLanguageRotorItem(void *a1, const char *a2, ...)
{
  return _[a1 additionalLanguageRotorItem];
}

id objc_msgSend_adjustBrailleInputLanguageRotorInDirection_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustBrailleInputLanguageRotorInDirection:isDefault:");
}

id objc_msgSend_adjustBrailleLanguageRotorInDirection_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustBrailleLanguageRotorInDirection:isDefault:");
}

id objc_msgSend_adjustedPointForFactoryPoint_forOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedPointForFactoryPoint:forOrientation:");
}

id objc_msgSend_afterDelay_processBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:");
}

id objc_msgSend_afterDelay_processBlock_cancelBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processBlock:cancelBlock:");
}

id objc_msgSend_afterDelay_processWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterDelay:processWritingBlock:");
}

id objc_msgSend_airTunesRouteIsAirPlayingTestingBlock(void *a1, const char *a2, ...)
{
  return _[a1 airTunesRouteIsAirPlayingTestingBlock];
}

id objc_msgSend_allEntries(void *a1, const char *a2, ...)
{
  return _[a1 allEntries];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 allPunctuationGroup];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowSingleLetterSearching(void *a1, const char *a2, ...)
{
  return _[a1 allowSingleLetterSearching];
}

id objc_msgSend_allowedCharacterSets(void *a1, const char *a2, ...)
{
  return _[a1 allowedCharacterSets];
}

id objc_msgSend_allowsActivationWithoutBeingNativeFocused(void *a1, const char *a2, ...)
{
  return _[a1 allowsActivationWithoutBeingNativeFocused];
}

id objc_msgSend_allowsAutoAlternativeCharacterActivation(void *a1, const char *a2, ...)
{
  return _[a1 allowsAutoAlternativeCharacterActivation];
}

id objc_msgSend_allowsElementMovement(void *a1, const char *a2, ...)
{
  return _[a1 allowsElementMovement];
}

id objc_msgSend_allowsSystemControlEventForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsSystemControlEventForPosition:");
}

id objc_msgSend_alphanumericCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 alphanumericCharacterSet];
}

id objc_msgSend_alternativeKeyCode(void *a1, const char *a2, ...)
{
  return _[a1 alternativeKeyCode];
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _[a1 altitude];
}

id objc_msgSend_analyzeElement_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeElement:withOptions:");
}

id objc_msgSend_analyzeString_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeString:language:");
}

id objc_msgSend_anlayzeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anlayzeString:");
}

id objc_msgSend_announcableName(void *a1, const char *a2, ...)
{
  return _[a1 announcableName];
}

id objc_msgSend_announceAdditionalTextualInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceAdditionalTextualInformation:");
}

id objc_msgSend_announceBrailleTable_isDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceBrailleTable:isDefault:");
}

id objc_msgSend_announceOrientationChanges(void *a1, const char *a2, ...)
{
  return _[a1 announceOrientationChanges];
}

id objc_msgSend_announceTableInfo_options_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceTableInfo:options:language:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 appIdentifiers];
}

id objc_msgSend_appName(void *a1, const char *a2, ...)
{
  return _[a1 appName];
}

id objc_msgSend_appSwitcherApps(void *a1, const char *a2, ...)
{
  return _[a1 appSwitcherApps];
}

id objc_msgSend_appTransition(void *a1, const char *a2, ...)
{
  return _[a1 appTransition];
}

id objc_msgSend_appendAXAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAXAttributedString:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendStringWithComma_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendStringWithComma:");
}

id objc_msgSend_appleTVRemoteEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleTVRemoteEventWithCommand:info:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _[a1 application];
}

id objc_msgSend_applicationForCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 applicationForCurrentElement];
}

id objc_msgSend_applicationForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationForElement:");
}

id objc_msgSend_applicationForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationForPID:");
}

id objc_msgSend_applicationHandleRemoteDownButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteDownButton];
}

id objc_msgSend_applicationHandleRemoteLeftButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteLeftButton];
}

id objc_msgSend_applicationHandleRemoteRightButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteRightButton];
}

id objc_msgSend_applicationHandleRemoteUpButton(void *a1, const char *a2, ...)
{
  return _[a1 applicationHandleRemoteUpButton];
}

id objc_msgSend_applicationInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 applicationInterfaceOrientation];
}

id objc_msgSend_applicationIsRTL(void *a1, const char *a2, ...)
{
  return _[a1 applicationIsRTL];
}

id objc_msgSend_applicationOrientation(void *a1, const char *a2, ...)
{
  return _[a1 applicationOrientation];
}

id objc_msgSend_applicationProvidedOCRText(void *a1, const char *a2, ...)
{
  return _[a1 applicationProvidedOCRText];
}

id objc_msgSend_appliesToAllApps(void *a1, const char *a2, ...)
{
  return _[a1 appliesToAllApps];
}

id objc_msgSend_applyBrailleSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyBrailleSubstitutions:");
}

id objc_msgSend_applyCVMLGeneratedContentToRequest_explicitUserRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyCVMLGeneratedContentToRequest:explicitUserRequest:");
}

id objc_msgSend_applyElementAttributeCacheScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyElementAttributeCacheScheme:");
}

id objc_msgSend_applyHeaderElementsToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyHeaderElementsToRequest:");
}

id objc_msgSend_applyInvalidStatusToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyInvalidStatusToRequest:");
}

id objc_msgSend_applyNextSuggestionToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyNextSuggestionToElement:");
}

id objc_msgSend_applyPreviousSuggestionToElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPreviousSuggestionToElement:");
}

id objc_msgSend_applyRowHeadersToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyRowHeadersToRequest:");
}

id objc_msgSend_applySelectedText_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySelectedText:language:");
}

id objc_msgSend_applySpellingSuggestionForResponder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySpellingSuggestionForResponder:languageCode:");
}

id objc_msgSend_applyTableDimension_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTableDimension:language:");
}

id objc_msgSend_applyTextEditingInformation_request_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTextEditingInformation:request:options:");
}

id objc_msgSend_areDotNumberPositionsCalibrated(void *a1, const char *a2, ...)
{
  return _[a1 areDotNumberPositionsCalibrated];
}

id objc_msgSend_areMediaLegibilityEventsBeingTapped(void *a1, const char *a2, ...)
{
  return _[a1 areMediaLegibilityEventsBeingTapped];
}

id objc_msgSend_ariaColumnCount(void *a1, const char *a2, ...)
{
  return _[a1 ariaColumnCount];
}

id objc_msgSend_ariaColumnIndex(void *a1, const char *a2, ...)
{
  return _[a1 ariaColumnIndex];
}

id objc_msgSend_ariaRowCount(void *a1, const char *a2, ...)
{
  return _[a1 ariaRowCount];
}

id objc_msgSend_ariaRowIndex(void *a1, const char *a2, ...)
{
  return _[a1 ariaRowIndex];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForParameterizedAttribute:parameter:");
}

id objc_msgSend_arrayOfTraitsAsStrings(void *a1, const char *a2, ...)
{
  return _[a1 arrayOfTraitsAsStrings];
}

id objc_msgSend_arrayOfTraitsAsStringsWithTraitOrder_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayOfTraitsAsStringsWithTraitOrder:language:");
}

id objc_msgSend_arrayWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithAXAttribute:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_aspectMask(void *a1, const char *a2, ...)
{
  return _[a1 aspectMask];
}

id objc_msgSend_assetControllerWithPolicy_qosClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetControllerWithPolicy:qosClass:");
}

id objc_msgSend_attachmentFilenameForCID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentFilenameForCID:");
}

id objc_msgSend_attemptToSetNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 attemptToSetNativeFocus];
}

id objc_msgSend_attemptToShowContextMenuWithTargetPointValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptToShowContextMenuWithTargetPointValue:");
}

id objc_msgSend_attributeForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeForKey:");
}

id objc_msgSend_attributeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeValueForKey:");
}

id objc_msgSend_attributedLabel(void *a1, const char *a2, ...)
{
  return _[a1 attributedLabel];
}

id objc_msgSend_attributedString(void *a1, const char *a2, ...)
{
  return _[a1 attributedString];
}

id objc_msgSend_attributedSubstringFromRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedSubstringFromRange:");
}

id objc_msgSend_attributedValue(void *a1, const char *a2, ...)
{
  return _[a1 attributedValue];
}

id objc_msgSend_attributedValueForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedValueForRange:");
}

id objc_msgSend_attributesAtIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesAtIndex:effectiveRange:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_audioAccHeldEventForRepost(void *a1, const char *a2, ...)
{
  return _[a1 audioAccHeldEventForRepost];
}

id objc_msgSend_audioAccHeldUpEventForRepost(void *a1, const char *a2, ...)
{
  return _[a1 audioAccHeldUpEventForRepost];
}

id objc_msgSend_audioAccTapDownEventForRepost(void *a1, const char *a2, ...)
{
  return _[a1 audioAccTapDownEventForRepost];
}

id objc_msgSend_audioAccTapUpEventForRepost(void *a1, const char *a2, ...)
{
  return _[a1 audioAccTapUpEventForRepost];
}

id objc_msgSend_audioDestinationRequestExternal(void *a1, const char *a2, ...)
{
  return _[a1 audioDestinationRequestExternal];
}

id objc_msgSend_audioDucking(void *a1, const char *a2, ...)
{
  return _[a1 audioDucking];
}

id objc_msgSend_audioSessionActive(void *a1, const char *a2, ...)
{
  return _[a1 audioSessionActive];
}

id objc_msgSend_audioSessionQueue(void *a1, const char *a2, ...)
{
  return _[a1 audioSessionQueue];
}

id objc_msgSend_autoAdvanceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 autoAdvanceEnabled];
}

id objc_msgSend_autoSpeakWatchElements(void *a1, const char *a2, ...)
{
  return _[a1 autoSpeakWatchElements];
}

id objc_msgSend_availableAudiographActionsForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableAudiographActionsForElement:");
}

id objc_msgSend_avoidAnnouncingDirectTouchArea(void *a1, const char *a2, ...)
{
  return _[a1 avoidAnnouncingDirectTouchArea];
}

id objc_msgSend_axArrayByIgnoringNilElementsWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayByIgnoringNilElementsWithCount:");
}

id objc_msgSend_axArrayWithPossiblyNilArrays_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axArrayWithPossiblyNilArrays:");
}

id objc_msgSend_axAttributedStringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axAttributedStringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_axAttributedStringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axAttributedStringWithString:");
}

id objc_msgSend_axElement(void *a1, const char *a2, ...)
{
  return _[a1 axElement];
}

id objc_msgSend_axFilterObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axFilterObjectsUsingBlock:");
}

id objc_msgSend_axIsEqualToOrderedArray_withPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axIsEqualToOrderedArray:withPredicate:");
}

id objc_msgSend_axMapObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axMapObjectsUsingBlock:");
}

id objc_msgSend_axSafelyAddObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObject:");
}

id objc_msgSend_axSafelyAddObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axSafelyAddObjectsFromArray:");
}

id objc_msgSend_axStringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axStringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_ax_CGPointValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_CGPointValue");
}

id objc_msgSend_ax_errorWithDomain_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_errorWithDomain:description:");
}

id objc_msgSend_ax_filteredArrayUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_filteredArrayUsingBlock:");
}

id objc_msgSend_ax_filteredSetUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_filteredSetUsingBlock:");
}

id objc_msgSend_ax_firstObjectUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_firstObjectUsingBlock:");
}

id objc_msgSend_ax_lineRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_lineRangeForPosition:");
}

id objc_msgSend_ax_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_valueWithCGPoint:");
}

id objc_msgSend_ax_wordFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ax_wordFromPosition:inDirection:");
}

id objc_msgSend_axmSecurelyUnarchiveData_withExpectedClass_otherAllowedClasses_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "axmSecurelyUnarchiveData:withExpectedClass:otherAllowedClasses:error:");
}

id objc_msgSend_azimuth(void *a1, const char *a2, ...)
{
  return _[a1 azimuth];
}

id objc_msgSend_basePunctuationUUID(void *a1, const char *a2, ...)
{
  return _[a1 basePunctuationUUID];
}

id objc_msgSend_baseTableForPunctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseTableForPunctuationGroup:");
}

id objc_msgSend_beginExploration(void *a1, const char *a2, ...)
{
  return _[a1 beginExploration];
}

id objc_msgSend_beginHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginHandlingHIDEventsForReason:");
}

id objc_msgSend_beginLiveModeSession(void *a1, const char *a2, ...)
{
  return _[a1 beginLiveModeSession];
}

id objc_msgSend_beginNewTextSearchSession(void *a1, const char *a2, ...)
{
  return _[a1 beginNewTextSearchSession];
}

id objc_msgSend_beginScrubbingSession(void *a1, const char *a2, ...)
{
  return _[a1 beginScrubbingSession];
}

id objc_msgSend_beginTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 beginTimestamp];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_blockquoteLevel(void *a1, const char *a2, ...)
{
  return _[a1 blockquoteLevel];
}

id objc_msgSend_bluetoothBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 bluetoothBrailleDisplayConnected];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLWithAXAttribute:");
}

id objc_msgSend_bottomDot(void *a1, const char *a2, ...)
{
  return _[a1 bottomDot];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_boundsForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundsForRange:");
}

id objc_msgSend_brailleAlerts(void *a1, const char *a2, ...)
{
  return _[a1 brailleAlerts];
}

id objc_msgSend_brailleAlertsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleAlertsEnabled];
}

id objc_msgSend_brailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 brailleAutoAdvanceDuration];
}

id objc_msgSend_brailleElement(void *a1, const char *a2, ...)
{
  return _[a1 brailleElement];
}

id objc_msgSend_brailleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleEnabled];
}

id objc_msgSend_brailleEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleEventWithCommand:info:");
}

id objc_msgSend_brailleForText_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleForText:mode:");
}

id objc_msgSend_brailleForText_parameters_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleForText:parameters:withReply:");
}

id objc_msgSend_brailleFormatting(void *a1, const char *a2, ...)
{
  return _[a1 brailleFormatting];
}

id objc_msgSend_brailleFormattingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 brailleFormattingEnabled];
}

id objc_msgSend_brailleGestureManager_setForcedOrientation_shouldAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleGestureManager:setForcedOrientation:shouldAnnounce:");
}

id objc_msgSend_brailleGestureManager_unsetForcedOrientationAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brailleGestureManager:unsetForcedOrientationAndAnnounce:");
}

id objc_msgSend_brailleGestureManagerDelegate(void *a1, const char *a2, ...)
{
  return _[a1 brailleGestureManagerDelegate];
}

id objc_msgSend_brailleInput(void *a1, const char *a2, ...)
{
  return _[a1 brailleInput];
}

id objc_msgSend_brailleInputActive(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputActive];
}

id objc_msgSend_brailleInputAllowsElementMovement(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputAllowsElementMovement];
}

id objc_msgSend_brailleInputShouldBeDeactivatedByEscape(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputShouldBeDeactivatedByEscape];
}

id objc_msgSend_brailleInputTable(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTable];
}

id objc_msgSend_brailleInputTableFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTableFromSettings];
}

id objc_msgSend_brailleInputTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputTypingMode];
}

id objc_msgSend_brailleInputWantsToStayActive(void *a1, const char *a2, ...)
{
  return _[a1 brailleInputWantsToStayActive];
}

id objc_msgSend_brailleLanguageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 brailleLanguageRotorItems];
}

id objc_msgSend_brailleManager(void *a1, const char *a2, ...)
{
  return _[a1 brailleManager];
}

id objc_msgSend_brailleOutput(void *a1, const char *a2, ...)
{
  return _[a1 brailleOutput];
}

id objc_msgSend_brailleStatusCellGeneral(void *a1, const char *a2, ...)
{
  return _[a1 brailleStatusCellGeneral];
}

id objc_msgSend_brailleStatusCellText(void *a1, const char *a2, ...)
{
  return _[a1 brailleStatusCellText];
}

id objc_msgSend_brailleString(void *a1, const char *a2, ...)
{
  return _[a1 brailleString];
}

id objc_msgSend_brailleStringSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 brailleStringSetCallback];
}

id objc_msgSend_brailleSubstitutionLanguage(void *a1, const char *a2, ...)
{
  return _[a1 brailleSubstitutionLanguage];
}

id objc_msgSend_brailleTable(void *a1, const char *a2, ...)
{
  return _[a1 brailleTable];
}

id objc_msgSend_brailleTableFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 brailleTableFromSettings];
}

id objc_msgSend_brailleTextEntrySupported(void *a1, const char *a2, ...)
{
  return _[a1 brailleTextEntrySupported];
}

id objc_msgSend_brailleTypingPropertiesAnnouncementTimer(void *a1, const char *a2, ...)
{
  return _[a1 brailleTypingPropertiesAnnouncementTimer];
}

id objc_msgSend_brl_languageAndVariant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brl_languageAndVariant");
}

id objc_msgSend_broadcast(void *a1, const char *a2, ...)
{
  return _[a1 broadcast];
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifiers];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buttonDownOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonDownOccurred:");
}

id objc_msgSend_buttonNamesForInputIdentifier_forDisplayWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonNamesForInputIdentifier:forDisplayWithToken:");
}

id objc_msgSend_buttonRepresentationWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonRepresentationWithType:");
}

id objc_msgSend_buttonUpOccurred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonUpOccurred:");
}

id objc_msgSend_bypassHelp(void *a1, const char *a2, ...)
{
  return _[a1 bypassHelp];
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _[a1 cache];
}

id objc_msgSend_cachedAdditionalElementCommunities(void *a1, const char *a2, ...)
{
  return _[a1 cachedAdditionalElementCommunities];
}

id objc_msgSend_cachedCustomRotorActions(void *a1, const char *a2, ...)
{
  return _[a1 cachedCustomRotorActions];
}

id objc_msgSend_cachedDisplayId(void *a1, const char *a2, ...)
{
  return _[a1 cachedDisplayId];
}

id objc_msgSend_cachedImmediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 cachedImmediateRemoteParent];
}

id objc_msgSend_cachedRemoteApplication(void *a1, const char *a2, ...)
{
  return _[a1 cachedRemoteApplication];
}

id objc_msgSend_cachedRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 cachedRemoteParent];
}

id objc_msgSend_calibrateWithDotNumberPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrateWithDotNumberPositions:");
}

id objc_msgSend_calibrateWithTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrateWithTouchPoints:");
}

id objc_msgSend_calibrationStartTouchPoints(void *a1, const char *a2, ...)
{
  return _[a1 calibrationStartTouchPoints];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_callStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 callStatusChanged];
}

id objc_msgSend_cameraSceneDescriber(void *a1, const char *a2, ...)
{
  return _[a1 cameraSceneDescriber];
}

id objc_msgSend_canDeleteCharacter(void *a1, const char *a2, ...)
{
  return _[a1 canDeleteCharacter];
}

id objc_msgSend_canExpandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 canExpandMathEquation];
}

id objc_msgSend_canNavigateMathSegments(void *a1, const char *a2, ...)
{
  return _[a1 canNavigateMathSegments];
}

id objc_msgSend_canSpeakCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSpeakCharacter:");
}

id objc_msgSend_canSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSpeakString:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelCandidateSelection(void *a1, const char *a2, ...)
{
  return _[a1 cancelCandidateSelection];
}

id objc_msgSend_cancelCurrentReadAll(void *a1, const char *a2, ...)
{
  return _[a1 cancelCurrentReadAll];
}

id objc_msgSend_cancelElementCountOutput(void *a1, const char *a2, ...)
{
  return _[a1 cancelElementCountOutput];
}

id objc_msgSend_cancelEventForPathIndexMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelEventForPathIndexMask:");
}

id objc_msgSend_cancelPendingReadAll(void *a1, const char *a2, ...)
{
  return _[a1 cancelPendingReadAll];
}

id objc_msgSend_cancelPreviousCount(void *a1, const char *a2, ...)
{
  return _[a1 cancelPreviousCount];
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelRequest(void *a1, const char *a2, ...)
{
  return _[a1 cancelRequest];
}

id objc_msgSend_cancelTapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 cancelTapAndHoldMode];
}

id objc_msgSend_cannotBeInterrupted(void *a1, const char *a2, ...)
{
  return _[a1 cannotBeInterrupted];
}

id objc_msgSend_capitalizedString(void *a1, const char *a2, ...)
{
  return _[a1 capitalizedString];
}

id objc_msgSend_caption(void *a1, const char *a2, ...)
{
  return _[a1 caption];
}

id objc_msgSend_captionFeatures(void *a1, const char *a2, ...)
{
  return _[a1 captionFeatures];
}

id objc_msgSend_captureNode(void *a1, const char *a2, ...)
{
  return _[a1 captureNode];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categoryName(void *a1, const char *a2, ...)
{
  return _[a1 categoryName];
}

id objc_msgSend_categoryOptions(void *a1, const char *a2, ...)
{
  return _[a1 categoryOptions];
}

id objc_msgSend_cellWithRowIndexPath_parentView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellWithRowIndexPath:parentView:");
}

id objc_msgSend_centerPoint(void *a1, const char *a2, ...)
{
  return _[a1 centerPoint];
}

id objc_msgSend_centerPointOfScreen(void *a1, const char *a2, ...)
{
  return _[a1 centerPointOfScreen];
}

id objc_msgSend_changedModifiers(void *a1, const char *a2, ...)
{
  return _[a1 changedModifiers];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return _[a1 channel];
}

id objc_msgSend_channelLabel(void *a1, const char *a2, ...)
{
  return _[a1 channelLabel];
}

id objc_msgSend_channelsAreAirplay_route_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelsAreAirplay:route:");
}

id objc_msgSend_channelsAreWiredHeadphones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelsAreWiredHeadphones:");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_characterRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterRangeForPosition:");
}

id objc_msgSend_characterSetWithCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithCharactersInString:");
}

id objc_msgSend_characterSetWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterSetWithRange:");
}

id objc_msgSend_characters(void *a1, const char *a2, ...)
{
  return _[a1 characters];
}

id objc_msgSend_chartDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 chartDescriptor];
}

id objc_msgSend_chartElement(void *a1, const char *a2, ...)
{
  return _[a1 chartElement];
}

id objc_msgSend_chartStructureDescription(void *a1, const char *a2, ...)
{
  return _[a1 chartStructureDescription];
}

id objc_msgSend_checkedImmediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 checkedImmediateRemoteParent];
}

id objc_msgSend_checkedRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 checkedRemoteParent];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_clearAllQueues(void *a1, const char *a2, ...)
{
  return _[a1 clearAllQueues];
}

id objc_msgSend_clearBrailleBuffer(void *a1, const char *a2, ...)
{
  return _[a1 clearBrailleBuffer];
}

id objc_msgSend_clearCurrentString(void *a1, const char *a2, ...)
{
  return _[a1 clearCurrentString];
}

id objc_msgSend_clearCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 clearCursorFrame];
}

id objc_msgSend_clearElementForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 clearElementForGesturedTextInput];
}

id objc_msgSend_clearPreviousRequests(void *a1, const char *a2, ...)
{
  return _[a1 clearPreviousRequests];
}

id objc_msgSend_clearPreviousSoundsPlayed(void *a1, const char *a2, ...)
{
  return _[a1 clearPreviousSoundsPlayed];
}

id objc_msgSend_clearQueue(void *a1, const char *a2, ...)
{
  return _[a1 clearQueue];
}

id objc_msgSend_clearSpellingSuggestions(void *a1, const char *a2, ...)
{
  return _[a1 clearSpellingSuggestions];
}

id objc_msgSend_clickAndHoldHandler(void *a1, const char *a2, ...)
{
  return _[a1 clickAndHoldHandler];
}

id objc_msgSend_clickHandler(void *a1, const char *a2, ...)
{
  return _[a1 clickHandler];
}

id objc_msgSend_clientGeneration(void *a1, const char *a2, ...)
{
  return _[a1 clientGeneration];
}

id objc_msgSend_clientId(void *a1, const char *a2, ...)
{
  return _[a1 clientId];
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentifier];
}

id objc_msgSend_coalescedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 coalescedAttributes];
}

id objc_msgSend_coalescedFontAttributes(void *a1, const char *a2, ...)
{
  return _[a1 coalescedFontAttributes];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columnRange(void *a1, const char *a2, ...)
{
  return _[a1 columnRange];
}

id objc_msgSend_combinedActionString(void *a1, const char *a2, ...)
{
  return _[a1 combinedActionString];
}

id objc_msgSend_combinedOriginalString(void *a1, const char *a2, ...)
{
  return _[a1 combinedOriginalString];
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_commandForBrailleKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForBrailleKey:");
}

id objc_msgSend_commandForKeyChord_withResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForKeyChord:withResolver:");
}

id objc_msgSend_commandForTouchGesture_withResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForTouchGesture:withResolver:");
}

id objc_msgSend_commandForVOSEventCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandForVOSEventCommand:");
}

id objc_msgSend_commandHelper(void *a1, const char *a2, ...)
{
  return _[a1 commandHelper];
}

id objc_msgSend_commandLine(void *a1, const char *a2, ...)
{
  return _[a1 commandLine];
}

id objc_msgSend_commands(void *a1, const char *a2, ...)
{
  return _[a1 commands];
}

id objc_msgSend_commonPrefixWithString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commonPrefixWithString:options:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_completionDelegate(void *a1, const char *a2, ...)
{
  return _[a1 completionDelegate];
}

id objc_msgSend_component(void *a1, const char *a2, ...)
{
  return _[a1 component];
}

id objc_msgSend_componentForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentForType:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_concatenateLabelsWithLinebreaksBasedOnFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "concatenateLabelsWithLinebreaksBasedOnFrame:");
}

id objc_msgSend_configureWithDriverConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDriverConfiguration:");
}

id objc_msgSend_configuredOptionsDisableAllDetectors_elementOptions_textRecognitionLevel_textDetectionLocales_preferringFullCaptions_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "configuredOptionsDisableAllDetectors:elementOptions:textRecognitionLevel:textDetectionLocales:preferringFullCaptions:");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_consecutiveCrashCount(void *a1, const char *a2, ...)
{
  return _[a1 consecutiveCrashCount];
}

id objc_msgSend_containedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containedIn:");
}

id objc_msgSend_containerFeedback(void *a1, const char *a2, ...)
{
  return _[a1 containerFeedback];
}

id objc_msgSend_containerOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 containerOutputFeedback];
}

id objc_msgSend_containerType(void *a1, const char *a2, ...)
{
  return _[a1 containerType];
}

id objc_msgSend_containerTypes(void *a1, const char *a2, ...)
{
  return _[a1 containerTypes];
}

id objc_msgSend_containsActions(void *a1, const char *a2, ...)
{
  return _[a1 containsActions];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _[a1 contentOffset];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context:");
}

id objc_msgSend_contextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 contextDescriptors];
}

id objc_msgSend_contextId(void *a1, const char *a2, ...)
{
  return _[a1 contextId];
}

id objc_msgSend_contextIdForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdForPosition:");
}

id objc_msgSend_contextIdHostingContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextIdHostingContextId:");
}

id objc_msgSend_contextWithCommand_gesture_keyChord_resolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithCommand:gesture:keyChord:resolver:");
}

id objc_msgSend_contextWithPID_bundleID_displayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithPID:bundleID:displayName:");
}

id objc_msgSend_continueSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 continueSpeaking];
}

id objc_msgSend_continueSpeakingWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSpeakingWithError:");
}

id objc_msgSend_continuousPathTimeout(void *a1, const char *a2, ...)
{
  return _[a1 continuousPathTimeout];
}

id objc_msgSend_contractionMode(void *a1, const char *a2, ...)
{
  return _[a1 contractionMode];
}

id objc_msgSend_controlCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 controlCharacterSet];
}

id objc_msgSend_controlKeyToggleSpeakingAllowed(void *a1, const char *a2, ...)
{
  return _[a1 controlKeyToggleSpeakingAllowed];
}

id objc_msgSend_convertAccessibilityFrameToScreenCoordinates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertAccessibilityFrameToScreenCoordinates:");
}

id objc_msgSend_convertChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertChannels:");
}

id objc_msgSend_convertDevicePointToZoomedPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertDevicePointToZoomedPoint:");
}

id objc_msgSend_convertFrame_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrame:fromContextId:");
}

id objc_msgSend_convertFrame_fromContextId_fromDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrame:fromContextId:fromDisplayId:");
}

id objc_msgSend_convertFrameToCursorSpace_displayID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFrameToCursorSpace:displayID:completion:");
}

id objc_msgSend_convertFramesToCursorSpace_displayID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFramesToCursorSpace:displayID:completion:");
}

id objc_msgSend_convertPath_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:");
}

id objc_msgSend_convertPath_fromContextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:displayId:");
}

id objc_msgSend_convertPath_fromContextId_fromDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPath:fromContextId:fromDisplayId:");
}

id objc_msgSend_convertPoint_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:fromContextId:");
}

id objc_msgSend_convertPoint_toContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPoint:toContextId:");
}

id objc_msgSend_convertRect_fromContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromContextId:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCachedAttributes(void *a1, const char *a2, ...)
{
  return _[a1 copyCachedAttributes];
}

id objc_msgSend_copyWithCache(void *a1, const char *a2, ...)
{
  return _[a1 copyWithCache];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreAnimationMainDisplay(void *a1, const char *a2, ...)
{
  return _[a1 coreAnimationMainDisplay];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countElementsMatchingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countElementsMatchingBlock:");
}

id objc_msgSend_crashloopTimer(void *a1, const char *a2, ...)
{
  return _[a1 crashloopTimer];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createRequest(void *a1, const char *a2, ...)
{
  return _[a1 createRequest];
}

id objc_msgSend_creatorHIDEvent(void *a1, const char *a2, ...)
{
  return _[a1 creatorHIDEvent];
}

id objc_msgSend_currentAllPunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentAllPunctuationTable];
}

id objc_msgSend_currentApplications(void *a1, const char *a2, ...)
{
  return _[a1 currentApplications];
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _[a1 currentCalendar];
}

id objc_msgSend_currentCallState(void *a1, const char *a2, ...)
{
  return _[a1 currentCallState];
}

id objc_msgSend_currentCandidateAnalysisString(void *a1, const char *a2, ...)
{
  return _[a1 currentCandidateAnalysisString];
}

id objc_msgSend_currentCandidateSurfaceString(void *a1, const char *a2, ...)
{
  return _[a1 currentCandidateSurfaceString];
}

id objc_msgSend_currentChartElement(void *a1, const char *a2, ...)
{
  return _[a1 currentChartElement];
}

id objc_msgSend_currentContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 currentContextDescriptors];
}

id objc_msgSend_currentCursorContextID(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorContextID];
}

id objc_msgSend_currentCursorDisplayID(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorDisplayID];
}

id objc_msgSend_currentCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorFrame];
}

id objc_msgSend_currentCursorPath(void *a1, const char *a2, ...)
{
  return _[a1 currentCursorPath];
}

id objc_msgSend_currentDefaultBrailleAlertTimeout(void *a1, const char *a2, ...)
{
  return _[a1 currentDefaultBrailleAlertTimeout];
}

id objc_msgSend_currentDeviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 currentDeviceOrientation];
}

id objc_msgSend_currentElement(void *a1, const char *a2, ...)
{
  return _[a1 currentElement];
}

id objc_msgSend_currentElementAllowsDirectTouch(void *a1, const char *a2, ...)
{
  return _[a1 currentElementAllowsDirectTouch];
}

id objc_msgSend_currentElementAttributes(void *a1, const char *a2, ...)
{
  return _[a1 currentElementAttributes];
}

id objc_msgSend_currentElementChangedCallback(void *a1, const char *a2, ...)
{
  return _[a1 currentElementChangedCallback];
}

id objc_msgSend_currentElementDidUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentElementDidUpdate:");
}

id objc_msgSend_currentElementRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentElementRotorString];
}

id objc_msgSend_currentExplorerElement(void *a1, const char *a2, ...)
{
  return _[a1 currentExplorerElement];
}

id objc_msgSend_currentFingerCount(void *a1, const char *a2, ...)
{
  return _[a1 currentFingerCount];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHardwareKeyboardLayout(void *a1, const char *a2, ...)
{
  return _[a1 currentHardwareKeyboardLayout];
}

id objc_msgSend_currentInputMode(void *a1, const char *a2, ...)
{
  return _[a1 currentInputMode];
}

id objc_msgSend_currentInputString(void *a1, const char *a2, ...)
{
  return _[a1 currentInputString];
}

id objc_msgSend_currentIntersectionInformation(void *a1, const char *a2, ...)
{
  return _[a1 currentIntersectionInformation];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return _[a1 currentKnownNetworkProfile];
}

id objc_msgSend_currentLanguageMap(void *a1, const char *a2, ...)
{
  return _[a1 currentLanguageMap];
}

id objc_msgSend_currentLineFrame(void *a1, const char *a2, ...)
{
  return _[a1 currentLineFrame];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentLocalization(void *a1, const char *a2, ...)
{
  return _[a1 currentLocalization];
}

id objc_msgSend_currentMap(void *a1, const char *a2, ...)
{
  return _[a1 currentMap];
}

id objc_msgSend_currentNonePunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentNonePunctuationTable];
}

id objc_msgSend_currentOpaqueElement(void *a1, const char *a2, ...)
{
  return _[a1 currentOpaqueElement];
}

id objc_msgSend_currentPlaybackPosition(void *a1, const char *a2, ...)
{
  return _[a1 currentPlaybackPosition];
}

id objc_msgSend_currentQueue(void *a1, const char *a2, ...)
{
  return _[a1 currentQueue];
}

id objc_msgSend_currentReadAllContext(void *a1, const char *a2, ...)
{
  return _[a1 currentReadAllContext];
}

id objc_msgSend_currentRequest(void *a1, const char *a2, ...)
{
  return _[a1 currentRequest];
}

id objc_msgSend_currentRotorElement(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorElement];
}

id objc_msgSend_currentRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorHint];
}

id objc_msgSend_currentRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorString];
}

id objc_msgSend_currentRotorType(void *a1, const char *a2, ...)
{
  return _[a1 currentRotorType];
}

id objc_msgSend_currentRoute(void *a1, const char *a2, ...)
{
  return _[a1 currentRoute];
}

id objc_msgSend_currentRouteName(void *a1, const char *a2, ...)
{
  return _[a1 currentRouteName];
}

id objc_msgSend_currentSearchValue(void *a1, const char *a2, ...)
{
  return _[a1 currentSearchValue];
}

id objc_msgSend_currentSelectionRotorType(void *a1, const char *a2, ...)
{
  return _[a1 currentSelectionRotorType];
}

id objc_msgSend_currentSimilarTraits(void *a1, const char *a2, ...)
{
  return _[a1 currentSimilarTraits];
}

id objc_msgSend_currentSoftwareKeyboardLanguage(void *a1, const char *a2, ...)
{
  return _[a1 currentSoftwareKeyboardLanguage];
}

id objc_msgSend_currentSoftwareKeyboardLayout(void *a1, const char *a2, ...)
{
  return _[a1 currentSoftwareKeyboardLayout];
}

id objc_msgSend_currentSomePunctuationTable(void *a1, const char *a2, ...)
{
  return _[a1 currentSomePunctuationTable];
}

id objc_msgSend_currentSonificationPlaybackBounds(void *a1, const char *a2, ...)
{
  return _[a1 currentSonificationPlaybackBounds];
}

id objc_msgSend_currentSpellingSuggestion(void *a1, const char *a2, ...)
{
  return _[a1 currentSpellingSuggestion];
}

id objc_msgSend_currentStatus(void *a1, const char *a2, ...)
{
  return _[a1 currentStatus];
}

id objc_msgSend_currentString(void *a1, const char *a2, ...)
{
  return _[a1 currentString];
}

id objc_msgSend_currentSystemInputMode(void *a1, const char *a2, ...)
{
  return _[a1 currentSystemInputMode];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_currentVisualRotorString(void *a1, const char *a2, ...)
{
  return _[a1 currentVisualRotorString];
}

id objc_msgSend_cursor(void *a1, const char *a2, ...)
{
  return _[a1 cursor];
}

id objc_msgSend_customAction(void *a1, const char *a2, ...)
{
  return _[a1 customAction];
}

id objc_msgSend_customActionGroupIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 customActionGroupIdentifier];
}

id objc_msgSend_customActionIndex(void *a1, const char *a2, ...)
{
  return _[a1 customActionIndex];
}

id objc_msgSend_customActionsAreDragDrop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customActionsAreDragDrop:");
}

id objc_msgSend_customActionsAreValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customActionsAreValid:");
}

id objc_msgSend_customContent(void *a1, const char *a2, ...)
{
  return _[a1 customContent];
}

id objc_msgSend_customContentImportance(void *a1, const char *a2, ...)
{
  return _[a1 customContentImportance];
}

id objc_msgSend_customContentWithLabel_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customContentWithLabel:value:");
}

id objc_msgSend_customPronunciationSubstitutions(void *a1, const char *a2, ...)
{
  return _[a1 customPronunciationSubstitutions];
}

id objc_msgSend_customPublicRotorDictionaryForRotorId_startRange_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorDictionaryForRotorId:startRange:direction:");
}

id objc_msgSend_customPublicRotorForSystemType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorForSystemType:");
}

id objc_msgSend_customPublicRotorIsVisibleInTouchRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorIsVisibleInTouchRotor:");
}

id objc_msgSend_customPublicRotorLinkCountForRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorLinkCountForRotor:");
}

id objc_msgSend_customPublicRotorName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorName:");
}

id objc_msgSend_customPublicRotorResultWithItem_startElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customPublicRotorResultWithItem:startElement:");
}

id objc_msgSend_customPublicRotors(void *a1, const char *a2, ...)
{
  return _[a1 customPublicRotors];
}

id objc_msgSend_customRotorActions(void *a1, const char *a2, ...)
{
  return _[a1 customRotorActions];
}

id objc_msgSend_customRotorActionsEqual_otherActions_ignoreDragItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customRotorActionsEqual:otherActions:ignoreDragItems:");
}

id objc_msgSend_dataDetectorURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataDetectorURL:");
}

id objc_msgSend_dataRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dataRepresentation];
}

id objc_msgSend_dataSeriesElement(void *a1, const char *a2, ...)
{
  return _[a1 dataSeriesElement];
}

id objc_msgSend_dataSeriesMaximumValueForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesMaximumValueForAxis:");
}

id objc_msgSend_dataSeriesMinimumValueForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesMinimumValueForAxis:");
}

id objc_msgSend_dataSeriesTitleForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesTitleForAxis:");
}

id objc_msgSend_dataSeriesUnitsLabelForAxis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesUnitsLabelForAxis:");
}

id objc_msgSend_dataSeriesXAxisValueDescriptionForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSeriesXAxisValueDescriptionForPosition:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateToResumeRequests(void *a1, const char *a2, ...)
{
  return _[a1 dateToResumeRequests];
}

id objc_msgSend_dateToResumeSounds(void *a1, const char *a2, ...)
{
  return _[a1 dateToResumeSounds];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _[a1 deactivate];
}

id objc_msgSend_deactivateGesturedTextInputIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateGesturedTextInputIfNeeded:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 decimalDigitCharacterSet];
}

id objc_msgSend_decreaseTrackingDetail(void *a1, const char *a2, ...)
{
  return _[a1 decreaseTrackingDetail];
}

id objc_msgSend_decrement_userInitiated_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrement:userInitiated:eventOrigin:");
}

id objc_msgSend_decrementAction(void *a1, const char *a2, ...)
{
  return _[a1 decrementAction];
}

id objc_msgSend_deepCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deepCopyWithZone:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConnection(void *a1, const char *a2, ...)
{
  return _[a1 defaultConnection];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultPort(void *a1, const char *a2, ...)
{
  return _[a1 defaultPort];
}

id objc_msgSend_defaultPortChannels(void *a1, const char *a2, ...)
{
  return _[a1 defaultPortChannels];
}

id objc_msgSend_defaultPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 defaultPunctuationGroup];
}

id objc_msgSend_defaultRouteDescription(void *a1, const char *a2, ...)
{
  return _[a1 defaultRouteDescription];
}

id objc_msgSend_defaultSpeechRate(void *a1, const char *a2, ...)
{
  return _[a1 defaultSpeechRate];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultStore];
}

id objc_msgSend_defaultTableForLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTableForLocale:");
}

id objc_msgSend_defaultVoiceForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultVoiceForLanguage:");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_definedLabel(void *a1, const char *a2, ...)
{
  return _[a1 definedLabel];
}

id objc_msgSend_delayBeforeUpdatingOnActivation(void *a1, const char *a2, ...)
{
  return _[a1 delayBeforeUpdatingOnActivation];
}

id objc_msgSend_delayedNotificationAnnouncementRequest(void *a1, const char *a2, ...)
{
  return _[a1 delayedNotificationAnnouncementRequest];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteCharacterAtCursorWithSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharacterAtCursorWithSource:");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_denormalizedEventRepresentation_descale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "denormalizedEventRepresentation:descale:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionOfWord_forLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionOfWord:forLanguage:");
}

id objc_msgSend_detectedTextDescription(void *a1, const char *a2, ...)
{
  return _[a1 detectedTextDescription];
}

id objc_msgSend_determineActivityForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineActivityForAction:");
}

id objc_msgSend_determineActivityForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineActivityForElement:");
}

id objc_msgSend_determineFullImageDescriptionsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineFullImageDescriptionsEnabled:");
}

id objc_msgSend_determineLanguageForAction_overrideLanguage_targetLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineLanguageForAction:overrideLanguage:targetLanguage:");
}

id objc_msgSend_determineLanguageForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineLanguageForEvent:");
}

id objc_msgSend_determineOutputMutedForActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineOutputMutedForActivity:");
}

id objc_msgSend_determineSceneDetectionsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineSceneDetectionsEnabled:");
}

id objc_msgSend_deviceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 deviceOrientation];
}

id objc_msgSend_dialectForLanguageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectForLanguageID:");
}

id objc_msgSend_dialectsThatCanSpeakCharacter_overridePreferredLanguages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectsThatCanSpeakCharacter:overridePreferredLanguages:");
}

id objc_msgSend_dialectsThatCanSpeakString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialectsThatCanSpeakString:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAnnounceBrailleTypingProperties(void *a1, const char *a2, ...)
{
  return _[a1 didAnnounceBrailleTypingProperties];
}

id objc_msgSend_didAnnounceExplorationMode(void *a1, const char *a2, ...)
{
  return _[a1 didAnnounceExplorationMode];
}

id objc_msgSend_didCacheSideAppDividerElement(void *a1, const char *a2, ...)
{
  return _[a1 didCacheSideAppDividerElement];
}

id objc_msgSend_didEnterInvalidGesture(void *a1, const char *a2, ...)
{
  return _[a1 didEnterInvalidGesture];
}

id objc_msgSend_didFallThruToDevice(void *a1, const char *a2, ...)
{
  return _[a1 didFallThruToDevice];
}

id objc_msgSend_didFinishBatchPeeking(void *a1, const char *a2, ...)
{
  return _[a1 didFinishBatchPeeking];
}

id objc_msgSend_didInputBackspace(void *a1, const char *a2, ...)
{
  return _[a1 didInputBackspace];
}

id objc_msgSend_didInputSpace(void *a1, const char *a2, ...)
{
  return _[a1 didInputSpace];
}

id objc_msgSend_didInputWordBackspace(void *a1, const char *a2, ...)
{
  return _[a1 didInputWordBackspace];
}

id objc_msgSend_didMoveFingersTooFarForInput(void *a1, const char *a2, ...)
{
  return _[a1 didMoveFingersTooFarForInput];
}

id objc_msgSend_didPostKeyboardEventsWithCharacters_originalCharacters_modifiers_keyCode_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPostKeyboardEventsWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend_didPressReturnKey(void *a1, const char *a2, ...)
{
  return _[a1 didPressReturnKey];
}

id objc_msgSend_didReceiveForceUpdateChangeToken(void *a1, const char *a2, ...)
{
  return _[a1 didReceiveForceUpdateChangeToken];
}

id objc_msgSend_didRetrieveAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRetrieveAllEntries:");
}

id objc_msgSend_didSearchForOpaqueElement(void *a1, const char *a2, ...)
{
  return _[a1 didSearchForOpaqueElement];
}

id objc_msgSend_didSelectCandidateWithSurfaceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectCandidateWithSurfaceString:");
}

id objc_msgSend_didSelectCurrentCandidate(void *a1, const char *a2, ...)
{
  return _[a1 didSelectCurrentCandidate];
}

id objc_msgSend_didSelectItem(void *a1, const char *a2, ...)
{
  return _[a1 didSelectItem];
}

id objc_msgSend_didStartFromCrashState(void *a1, const char *a2, ...)
{
  return _[a1 didStartFromCrashState];
}

id objc_msgSend_didStartFullGesture(void *a1, const char *a2, ...)
{
  return _[a1 didStartFullGesture];
}

id objc_msgSend_differenceAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "differenceAspectMask:");
}

id objc_msgSend_directInteractionElementsUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directInteractionElementsUpdated:");
}

id objc_msgSend_directInteractionGestureInProgress(void *a1, const char *a2, ...)
{
  return _[a1 directInteractionGestureInProgress];
}

id objc_msgSend_directInteractionKeyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 directInteractionKeyboardManager];
}

id objc_msgSend_directInteractionModeStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directInteractionModeStatus:");
}

id objc_msgSend_directParent(void *a1, const char *a2, ...)
{
  return _[a1 directParent];
}

id objc_msgSend_directTouchApps(void *a1, const char *a2, ...)
{
  return _[a1 directTouchApps];
}

id objc_msgSend_directTouchModeHandledEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directTouchModeHandledEvent:");
}

id objc_msgSend_directTouchOptions(void *a1, const char *a2, ...)
{
  return _[a1 directTouchOptions];
}

id objc_msgSend_direction(void *a1, const char *a2, ...)
{
  return _[a1 direction];
}

id objc_msgSend_directionalSlope(void *a1, const char *a2, ...)
{
  return _[a1 directionalSlope];
}

id objc_msgSend_disableAudioSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableAudioSession:");
}

id objc_msgSend_disableAudioSession_userDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableAudioSession:userDelay:");
}

id objc_msgSend_disableIdleTimerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 disableIdleTimerAssertion];
}

id objc_msgSend_disableOutput(void *a1, const char *a2, ...)
{
  return _[a1 disableOutput];
}

id objc_msgSend_disableVoiceOverSettingOnStop(void *a1, const char *a2, ...)
{
  return _[a1 disableVoiceOverSettingOnStop];
}

id objc_msgSend_dismissAlternativeKeyboardPicker(void *a1, const char *a2, ...)
{
  return _[a1 dismissAlternativeKeyboardPicker];
}

id objc_msgSend_dispatchAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:");
}

id objc_msgSend_dispatchAfterDelay_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:withBlock:");
}

id objc_msgSend_dispatchAfterDelay_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchAfterDelay:withObject:");
}

id objc_msgSend_dispatchCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCommand:");
}

id objc_msgSend_dispatchCommand_bypassGesturedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCommand:bypassGesturedInput:");
}

id objc_msgSend_dispatchKeyboardEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchKeyboardEvent:");
}

id objc_msgSend_displayID(void *a1, const char *a2, ...)
{
  return _[a1 displayID];
}

id objc_msgSend_displayId(void *a1, const char *a2, ...)
{
  return _[a1 displayId];
}

id objc_msgSend_displayIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 displayIfNeeded];
}

id objc_msgSend_displayManager(void *a1, const char *a2, ...)
{
  return _[a1 displayManager];
}

id objc_msgSend_displayMode(void *a1, const char *a2, ...)
{
  return _[a1 displayMode];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_displayToken(void *a1, const char *a2, ...)
{
  return _[a1 displayToken];
}

id objc_msgSend_displayValue(void *a1, const char *a2, ...)
{
  return _[a1 displayValue];
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _[a1 distance];
}

id objc_msgSend_distanceBetweenStrings_and_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceBetweenStrings:and:");
}

id objc_msgSend_distanceToEndOfRoad_withDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToEndOfRoad:withDirection:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_doNotTranslateWords(void *a1, const char *a2, ...)
{
  return _[a1 doNotTranslateWords];
}

id objc_msgSend_doesHaveAllTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesHaveAllTraits:");
}

id objc_msgSend_doesHaveTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesHaveTraits:");
}

id objc_msgSend_doesHaveTraitsForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 doesHaveTraitsForGesturedTextInput];
}

id objc_msgSend_doesNotInterrupt(void *a1, const char *a2, ...)
{
  return _[a1 doesNotInterrupt];
}

id objc_msgSend_dollarCodeDescription(void *a1, const char *a2, ...)
{
  return _[a1 dollarCodeDescription];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_dotArrayReversed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dotArrayReversed:");
}

id objc_msgSend_dotNumberPositions(void *a1, const char *a2, ...)
{
  return _[a1 dotNumberPositions];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadAssets_successStartBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAssets:successStartBlock:");
}

id objc_msgSend_drawInRect_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:withAttributes:");
}

id objc_msgSend_driverConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 driverConfiguration];
}

id objc_msgSend_duckingTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 duckingTemporarilyDisabled];
}

id objc_msgSend_dynamicReplacement(void *a1, const char *a2, ...)
{
  return _[a1 dynamicReplacement];
}

id objc_msgSend_effects(void *a1, const char *a2, ...)
{
  return _[a1 effects];
}

id objc_msgSend_element(void *a1, const char *a2, ...)
{
  return _[a1 element];
}

id objc_msgSend_elementActsAsTitleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementActsAsTitleElement:");
}

id objc_msgSend_elementAtPointIntercept(void *a1, const char *a2, ...)
{
  return _[a1 elementAtPointIntercept];
}

id objc_msgSend_elementAtRow_andColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementAtRow:andColumn:");
}

id objc_msgSend_elementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunity];
}

id objc_msgSend_elementCommunityIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 elementCommunityIdentifier];
}

id objc_msgSend_elementEligibleToFindTitleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementEligibleToFindTitleElement:");
}

id objc_msgSend_elementFetchFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFetchFound:");
}

id objc_msgSend_elementFetchFoundDirectTouchElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFetchFoundDirectTouchElements:");
}

id objc_msgSend_elementFetcher(void *a1, const char *a2, ...)
{
  return _[a1 elementFetcher];
}

id objc_msgSend_elementForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForAttribute:");
}

id objc_msgSend_elementForGesturedTextInput(void *a1, const char *a2, ...)
{
  return _[a1 elementForGesturedTextInput];
}

id objc_msgSend_elementForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForParameterizedAttribute:parameter:");
}

id objc_msgSend_elementForTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementForTextMarker:");
}

id objc_msgSend_elementFrameLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementFrameLocation:");
}

id objc_msgSend_elementGeneration(void *a1, const char *a2, ...)
{
  return _[a1 elementGeneration];
}

id objc_msgSend_elementHeadersForOutput(void *a1, const char *a2, ...)
{
  return _[a1 elementHeadersForOutput];
}

id objc_msgSend_elementIsDescendant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementIsDescendant:");
}

id objc_msgSend_elementManager(void *a1, const char *a2, ...)
{
  return _[a1 elementManager];
}

id objc_msgSend_elementManagerHandledEventCallback(void *a1, const char *a2, ...)
{
  return _[a1 elementManagerHandledEventCallback];
}

id objc_msgSend_elementNeedsAdditionalDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementNeedsAdditionalDescription:");
}

id objc_msgSend_elementOnSameLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementOnSameLine:");
}

id objc_msgSend_elementRotor(void *a1, const char *a2, ...)
{
  return _[a1 elementRotor];
}

id objc_msgSend_elementSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 elementSetCallback];
}

id objc_msgSend_elementStoredUserLabel(void *a1, const char *a2, ...)
{
  return _[a1 elementStoredUserLabel];
}

id objc_msgSend_elementVisibilityAffectsLayout(void *a1, const char *a2, ...)
{
  return _[a1 elementVisibilityAffectsLayout];
}

id objc_msgSend_elementWithUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementWithUIElement:");
}

id objc_msgSend_elementsCounted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsCounted:");
}

id objc_msgSend_elementsDidChangeOnLastUpdate(void *a1, const char *a2, ...)
{
  return _[a1 elementsDidChangeOnLastUpdate];
}

id objc_msgSend_elementsForAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsForAttribute:");
}

id objc_msgSend_elementsForAttribute_withParameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsForAttribute:withParameter:");
}

id objc_msgSend_elementsInDirection_withCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsInDirection:withCount:");
}

id objc_msgSend_elementsRetrieved_finished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elementsRetrieved:finished:");
}

id objc_msgSend_emojiFeedback(void *a1, const char *a2, ...)
{
  return _[a1 emojiFeedback];
}

id objc_msgSend_emojiRangeFromString_withSearchRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emojiRangeFromString:withSearchRange:");
}

id objc_msgSend_emoticonReplacements(void *a1, const char *a2, ...)
{
  return _[a1 emoticonReplacements];
}

id objc_msgSend_enableAudioSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableAudioSession:");
}

id objc_msgSend_enableCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCache:");
}

id objc_msgSend_enableVoiceOverCaptions(void *a1, const char *a2, ...)
{
  return _[a1 enableVoiceOverCaptions];
}

id objc_msgSend_endExploration(void *a1, const char *a2, ...)
{
  return _[a1 endExploration];
}

id objc_msgSend_endHandlingHIDEventsForReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endHandlingHIDEventsForReason:");
}

id objc_msgSend_endLiveModeSession(void *a1, const char *a2, ...)
{
  return _[a1 endLiveModeSession];
}

id objc_msgSend_endLocation(void *a1, const char *a2, ...)
{
  return _[a1 endLocation];
}

id objc_msgSend_endScrubbingSession(void *a1, const char *a2, ...)
{
  return _[a1 endScrubbingSession];
}

id objc_msgSend_endTextSearchSession(void *a1, const char *a2, ...)
{
  return _[a1 endTextSearchSession];
}

id objc_msgSend_engine(void *a1, const char *a2, ...)
{
  return _[a1 engine];
}

id objc_msgSend_entries(void *a1, const char *a2, ...)
{
  return _[a1 entries];
}

id objc_msgSend_enumerateAttribute_inRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttribute:inRange:options:usingBlock:");
}

id objc_msgSend_enumerateAttributesInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:");
}

id objc_msgSend_enumerateAttributesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAttributesUsingBlock:");
}

id objc_msgSend_enumerateIndexesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateIndexesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateMatchesInString_options_range_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateMatchesInString:options:range:usingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateRangesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRangesUsingBlock:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_enumeratorWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorWithOptions:");
}

id objc_msgSend_equivalenceTag(void *a1, const char *a2, ...)
{
  return _[a1 equivalenceTag];
}

id objc_msgSend_errorMessageElements(void *a1, const char *a2, ...)
{
  return _[a1 errorMessageElements];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventFactoryDidBeginSplitGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventFactoryDidBeginSplitGesture:");
}

id objc_msgSend_eventForKeyChord_resolver_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForKeyChord:resolver:info:");
}

id objc_msgSend_eventForTouchGesture_resolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForTouchGesture:resolver:");
}

id objc_msgSend_eventForTouchGesture_resolver_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventForTouchGesture:resolver:info:");
}

id objc_msgSend_eventIsSystemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventIsSystemEvent:");
}

id objc_msgSend_eventOrigin(void *a1, const char *a2, ...)
{
  return _[a1 eventOrigin];
}

id objc_msgSend_eventProcessor(void *a1, const char *a2, ...)
{
  return _[a1 eventProcessor];
}

id objc_msgSend_eventQueue(void *a1, const char *a2, ...)
{
  return _[a1 eventQueue];
}

id objc_msgSend_eventRecord(void *a1, const char *a2, ...)
{
  return _[a1 eventRecord];
}

id objc_msgSend_eventRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 eventRepresentation];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _[a1 eventType];
}

id objc_msgSend_exitCurrentDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 exitCurrentDisplayMode];
}

id objc_msgSend_expandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 expandMathEquation];
}

id objc_msgSend_expandedStatus(void *a1, const char *a2, ...)
{
  return _[a1 expandedStatus];
}

id objc_msgSend_expandedStatusTogglesOnActivate(void *a1, const char *a2, ...)
{
  return _[a1 expandedStatusTogglesOnActivate];
}

id objc_msgSend_expandedTextValue(void *a1, const char *a2, ...)
{
  return _[a1 expandedTextValue];
}

id objc_msgSend_expectedVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedVoiceIdentifier:");
}

id objc_msgSend_explorationIsActive(void *a1, const char *a2, ...)
{
  return _[a1 explorationIsActive];
}

id objc_msgSend_explorationIsPending(void *a1, const char *a2, ...)
{
  return _[a1 explorationIsPending];
}

id objc_msgSend_explorationSegmentsForRoadsWithAngles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorationSegmentsForRoadsWithAngles:");
}

id objc_msgSend_exploreFocusAffectsNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 exploreFocusAffectsNativeFocus];
}

id objc_msgSend_explorerElementManager(void *a1, const char *a2, ...)
{
  return _[a1 explorerElementManager];
}

id objc_msgSend_explorerElementManager_didFinishReadAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:didFinishReadAll:");
}

id objc_msgSend_explorerElementManager_didSetExplorerElementFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:didSetExplorerElementFocus:");
}

id objc_msgSend_explorerElementManager_willReadElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "explorerElementManager:willReadElement:");
}

id objc_msgSend_explorerElements(void *a1, const char *a2, ...)
{
  return _[a1 explorerElements];
}

id objc_msgSend_externalAudioRouteSelected(void *a1, const char *a2, ...)
{
  return _[a1 externalAudioRouteSelected];
}

id objc_msgSend_fallbackLocalOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 fallbackLocalOpaqueParent];
}

id objc_msgSend_fallbackOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 fallbackOpaqueParent];
}

id objc_msgSend_fbSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 fbSceneIdentifier];
}

id objc_msgSend_featureType(void *a1, const char *a2, ...)
{
  return _[a1 featureType];
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_feet(void *a1, const char *a2, ...)
{
  return _[a1 feet];
}

id objc_msgSend_fetchElementsFrom_inDirection_count_scroll_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchElementsFrom:inDirection:count:scroll:block:");
}

id objc_msgSend_fetchFoundData_forceUpdate_direction_generation_range_searchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFoundData:forceUpdate:direction:generation:range:searchType:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileSystemPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemPunctuationGroup];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filter(void *a1, const char *a2, ...)
{
  return _[a1 filter];
}

id objc_msgSend_filterTraitsByPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterTraitsByPriority:");
}

id objc_msgSend_filteredEntries(void *a1, const char *a2, ...)
{
  return _[a1 filteredEntries];
}

id objc_msgSend_findLocationOfDifferenceInOldString_withNewString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findLocationOfDifferenceInOldString:withNewString:");
}

id objc_msgSend_findSearchResult_withSearchText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findSearchResult:withSearchText:");
}

id objc_msgSend_fingerCount(void *a1, const char *a2, ...)
{
  return _[a1 fingerCount];
}

id objc_msgSend_fingerPosition(void *a1, const char *a2, ...)
{
  return _[a1 fingerPosition];
}

id objc_msgSend_fingers(void *a1, const char *a2, ...)
{
  return _[a1 fingers];
}

id objc_msgSend_fingersFromTouchCommands(void *a1, const char *a2, ...)
{
  return _[a1 fingersFromTouchCommands];
}

id objc_msgSend_finishedOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedOutputRequest:");
}

id objc_msgSend_finishedSuccessfully(void *a1, const char *a2, ...)
{
  return _[a1 finishedSuccessfully];
}

id objc_msgSend_firstContainedElement(void *a1, const char *a2, ...)
{
  return _[a1 firstContainedElement];
}

id objc_msgSend_firstElementInApplication(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplication];
}

id objc_msgSend_firstElementInApplicationForFocus(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplicationForFocus];
}

id objc_msgSend_firstElementInApplicationForReadFromTop(void *a1, const char *a2, ...)
{
  return _[a1 firstElementInApplicationForReadFromTop];
}

id objc_msgSend_firstFingerAltitude(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerAltitude];
}

id objc_msgSend_firstFingerAzimuth(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerAzimuth];
}

id objc_msgSend_firstFingerPressure(void *a1, const char *a2, ...)
{
  return _[a1 firstFingerPressure];
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _[a1 firstIndex];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_firstPath(void *a1, const char *a2, ...)
{
  return _[a1 firstPath];
}

id objc_msgSend_firstResponderDidUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstResponderDidUpdate:");
}

id objc_msgSend_firstResponderElement(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElement];
}

id objc_msgSend_firstResponderElementForFocus(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElementForFocus];
}

id objc_msgSend_firstResponderElementWithoutCache(void *a1, const char *a2, ...)
{
  return _[a1 firstResponderElementWithoutCache];
}

id objc_msgSend_firstTrackedAppInGesture(void *a1, const char *a2, ...)
{
  return _[a1 firstTrackedAppInGesture];
}

id objc_msgSend_firstVisibleElementInList(void *a1, const char *a2, ...)
{
  return _[a1 firstVisibleElementInList];
}

id objc_msgSend_firstWebElement(void *a1, const char *a2, ...)
{
  return _[a1 firstWebElement];
}

id objc_msgSend_flashBrailleInsertedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashBrailleInsertedText:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flowToElements(void *a1, const char *a2, ...)
{
  return _[a1 flowToElements];
}

id objc_msgSend_focus(void *a1, const char *a2, ...)
{
  return _[a1 focus];
}

id objc_msgSend_focusElement(void *a1, const char *a2, ...)
{
  return _[a1 focusElement];
}

id objc_msgSend_focusOnNextMatchingItem(void *a1, const char *a2, ...)
{
  return _[a1 focusOnNextMatchingItem];
}

id objc_msgSend_focusOnPreviousMatchingItem(void *a1, const char *a2, ...)
{
  return _[a1 focusOnPreviousMatchingItem];
}

id objc_msgSend_focusRetryAttempts(void *a1, const char *a2, ...)
{
  return _[a1 focusRetryAttempts];
}

id objc_msgSend_focusedApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "focusedApplication:");
}

id objc_msgSend_focusedApplications(void *a1, const char *a2, ...)
{
  return _[a1 focusedApplications];
}

id objc_msgSend_focusedElement(void *a1, const char *a2, ...)
{
  return _[a1 focusedElement];
}

id objc_msgSend_focusedEntry(void *a1, const char *a2, ...)
{
  return _[a1 focusedEntry];
}

id objc_msgSend_fontWithName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithName:size:");
}

id objc_msgSend_footprint(void *a1, const char *a2, ...)
{
  return _[a1 footprint];
}

id objc_msgSend_forceRotorOffGesturedTextInputIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceRotorOffGesturedTextInputIfNeeded:");
}

id objc_msgSend_forceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdate];
}

id objc_msgSend_forceUpdateMask(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdateMask];
}

id objc_msgSend_formUnionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formUnionWithCharacterSet:");
}

id objc_msgSend_formattedDatetime(void *a1, const char *a2, ...)
{
  return _[a1 formattedDatetime];
}

id objc_msgSend_fourthDot(void *a1, const char *a2, ...)
{
  return _[a1 fourthDot];
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _[a1 frame];
}

id objc_msgSend_frameForDirectInteraction(void *a1, const char *a2, ...)
{
  return _[a1 frameForDirectInteraction];
}

id objc_msgSend_frameForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForLineNumber:");
}

id objc_msgSend_frameForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameForRange:");
}

id objc_msgSend_fullscreenVideoViewIsVisible(void *a1, const char *a2, ...)
{
  return _[a1 fullscreenVideoViewIsVisible];
}

id objc_msgSend_general(void *a1, const char *a2, ...)
{
  return _[a1 general];
}

id objc_msgSend_generalDict(void *a1, const char *a2, ...)
{
  return _[a1 generalDict];
}

id objc_msgSend_generalLanguageID(void *a1, const char *a2, ...)
{
  return _[a1 generalLanguageID];
}

id objc_msgSend_generalPasteboard(void *a1, const char *a2, ...)
{
  return _[a1 generalPasteboard];
}

id objc_msgSend_generateCVMLContentForBraille(void *a1, const char *a2, ...)
{
  return _[a1 generateCVMLContentForBraille];
}

id objc_msgSend_generateOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateOutputRequest:");
}

id objc_msgSend_generateRotorTypeRequest(void *a1, const char *a2, ...)
{
  return _[a1 generateRotorTypeRequest];
}

id objc_msgSend_generatesBraille(void *a1, const char *a2, ...)
{
  return _[a1 generatesBraille];
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_gesture(void *a1, const char *a2, ...)
{
  return _[a1 gesture];
}

id objc_msgSend_gestureEventWithEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureEventWithEventRepresentation:");
}

id objc_msgSend_gestureKeyboardRegion(void *a1, const char *a2, ...)
{
  return _[a1 gestureKeyboardRegion];
}

id objc_msgSend_gesturePracticeRegion(void *a1, const char *a2, ...)
{
  return _[a1 gesturePracticeRegion];
}

id objc_msgSend_gestureRepeater_repeaterEventDidFire_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRepeater:repeaterEventDidFire:");
}

id objc_msgSend_gestureRepeaterWillSendFirstRepeaterEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRepeaterWillSendFirstRepeaterEvent:");
}

id objc_msgSend_gestureState(void *a1, const char *a2, ...)
{
  return _[a1 gestureState];
}

id objc_msgSend_gesturedTextInputAttributes(void *a1, const char *a2, ...)
{
  return _[a1 gesturedTextInputAttributes];
}

id objc_msgSend_gesturedTextInputManager_accessCurrentGesturedTextInputElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gesturedTextInputManager:accessCurrentGesturedTextInputElement:");
}

id objc_msgSend_gesturedTextInputManager_moveToElementMatchingRotorType_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gesturedTextInputManager:moveToElementMatchingRotorType:inDirection:");
}

id objc_msgSend_getCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:");
}

id objc_msgSend_getCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentElement];
}

id objc_msgSend_getRange_ofAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRange:ofAttribute:");
}

id objc_msgSend_getRouterIndex_token_location_appToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRouterIndex:token:location:appToken:");
}

id objc_msgSend_getVolume_category_mode_route_deviceIdentifier_routeSubtype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVolume:category:mode:route:deviceIdentifier:routeSubtype:");
}

id objc_msgSend_getVolume_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVolume:forCategory:");
}

id objc_msgSend_groupNavigationStyle(void *a1, const char *a2, ...)
{
  return _[a1 groupNavigationStyle];
}

id objc_msgSend_groupedParent(void *a1, const char *a2, ...)
{
  return _[a1 groupedParent];
}

id objc_msgSend_guessesForWordRange_inString_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guessesForWordRange:inString:language:");
}

id objc_msgSend_guideElementHeaderText(void *a1, const char *a2, ...)
{
  return _[a1 guideElementHeaderText];
}

id objc_msgSend_halfPatternWithDictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithDictionaryRepresentation:");
}

id objc_msgSend_halfPatternWithTopDot_middleDot_bottomDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithTopDot:middleDot:bottomDot:");
}

id objc_msgSend_halfPatternWithTopDot_middleDot_bottomDot_fourthDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternWithTopDot:middleDot:bottomDot:fourthDot:");
}

id objc_msgSend_halfPatternsForNumberOfDots_side_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "halfPatternsForNumberOfDots:side:");
}

id objc_msgSend_handInfo(void *a1, const char *a2, ...)
{
  return _[a1 handInfo];
}

id objc_msgSend_handleAppleTVRemoteEvent_eventOrigin_isRTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAppleTVRemoteEvent:eventOrigin:isRTL:");
}

id objc_msgSend_handleBluetoothBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 handleBluetoothBrailleDisplayConnected];
}

id objc_msgSend_handleBrailleConfigurationChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBrailleConfigurationChanged:");
}

id objc_msgSend_handleCommandIfActiveBrailleRelated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCommandIfActiveBrailleRelated:");
}

id objc_msgSend_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEvent:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleGestureEvent:");
}

id objc_msgSend_handleHomeButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 handleHomeButtonPress];
}

id objc_msgSend_handleKeyboardChanged(void *a1, const char *a2, ...)
{
  return _[a1 handleKeyboardChanged];
}

id objc_msgSend_handleKeyboardKeyEvent_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyboardKeyEvent:eventOrigin:");
}

id objc_msgSend_handleKeyboardPerkinsInput_chordOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyboardPerkinsInput:chordOnly:");
}

id objc_msgSend_handleLockButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLockButtonPress:");
}

id objc_msgSend_handleMediaKeyPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMediaKeyPress:");
}

id objc_msgSend_handleMenuButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMenuButtonPress:");
}

id objc_msgSend_handleNotification_withData_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotification:withData:forElement:");
}

id objc_msgSend_handleOrientationChanged(void *a1, const char *a2, ...)
{
  return _[a1 handleOrientationChanged];
}

id objc_msgSend_handlePlayPauseKeyPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePlayPauseKeyPress:");
}

id objc_msgSend_handleProximityEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProximityEvent:");
}

id objc_msgSend_handleReplaceRange_withString_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReplaceRange:withString:cursor:");
}

id objc_msgSend_handleReturnToSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 handleReturnToSpringBoard];
}

id objc_msgSend_handleRingerSwitchSwitched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRingerSwitchSwitched:");
}

id objc_msgSend_handleSelection(void *a1, const char *a2, ...)
{
  return _[a1 handleSelection];
}

id objc_msgSend_handleSetForcedOrientation_shouldAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSetForcedOrientation:shouldAnnounce:");
}

id objc_msgSend_handleShowOnscreenKeyboardToggle(void *a1, const char *a2, ...)
{
  return _[a1 handleShowOnscreenKeyboardToggle];
}

id objc_msgSend_handleStartUp(void *a1, const char *a2, ...)
{
  return _[a1 handleStartUp];
}

id objc_msgSend_handleSystemWideServerDied(void *a1, const char *a2, ...)
{
  return _[a1 handleSystemWideServerDied];
}

id objc_msgSend_handleTVMenuButtonClicked(void *a1, const char *a2, ...)
{
  return _[a1 handleTVMenuButtonClicked];
}

id objc_msgSend_handleTVSelectButtonClicked(void *a1, const char *a2, ...)
{
  return _[a1 handleTVSelectButtonClicked];
}

id objc_msgSend_handleTextSearchEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTextSearchEvent:");
}

id objc_msgSend_handleTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTracking:");
}

id objc_msgSend_handleTurnOffSoundAndCurtainEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTurnOffSoundAndCurtainEvent:");
}

id objc_msgSend_handleUSBMFiBrailleDisplayConnected(void *a1, const char *a2, ...)
{
  return _[a1 handleUSBMFiBrailleDisplayConnected];
}

id objc_msgSend_handleUnsetForcedOrientationAndAnnounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnsetForcedOrientationAndAnnounce:");
}

id objc_msgSend_handleVerbosityChangeIncreasing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleVerbosityChangeIncreasing:");
}

id objc_msgSend_handleVolumeButtonPress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleVolumeButtonPress:");
}

id objc_msgSend_handlesGestureArea(void *a1, const char *a2, ...)
{
  return _[a1 handlesGestureArea];
}

id objc_msgSend_handwritingSendCarriageReturn(void *a1, const char *a2, ...)
{
  return _[a1 handwritingSendCarriageReturn];
}

id objc_msgSend_hasActiveBrailleDisplay(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveBrailleDisplay];
}

id objc_msgSend_hasAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAttribute:");
}

id objc_msgSend_hasAttributes(void *a1, const char *a2, ...)
{
  return _[a1 hasAttributes];
}

id objc_msgSend_hasBeenDispatched(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenDispatched];
}

id objc_msgSend_hasExplicitColumnInfo(void *a1, const char *a2, ...)
{
  return _[a1 hasExplicitColumnInfo];
}

id objc_msgSend_hasExplicitRowInfo(void *a1, const char *a2, ...)
{
  return _[a1 hasExplicitRowInfo];
}

id objc_msgSend_hasNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 hasNativeFocus];
}

id objc_msgSend_hasNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 hasNextCandidate];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 hasPreviousCandidate];
}

id objc_msgSend_hasSameOutputAs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSameOutputAs:");
}

id objc_msgSend_hasSpeakableCharacters(void *a1, const char *a2, ...)
{
  return _[a1 hasSpeakableCharacters];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashKey(void *a1, const char *a2, ...)
{
  return _[a1 hashKey];
}

id objc_msgSend_headerElements(void *a1, const char *a2, ...)
{
  return _[a1 headerElements];
}

id objc_msgSend_headerElementsForColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerElementsForColumn:");
}

id objc_msgSend_headerElementsForRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerElementsForRow:");
}

id objc_msgSend_headingLevelValue(void *a1, const char *a2, ...)
{
  return _[a1 headingLevelValue];
}

id objc_msgSend_helpEnabled(void *a1, const char *a2, ...)
{
  return _[a1 helpEnabled];
}

id objc_msgSend_hideBrailleUI(void *a1, const char *a2, ...)
{
  return _[a1 hideBrailleUI];
}

id objc_msgSend_hideMapsExplorationUI(void *a1, const char *a2, ...)
{
  return _[a1 hideMapsExplorationUI];
}

id objc_msgSend_hideVisualRotor(void *a1, const char *a2, ...)
{
  return _[a1 hideVisualRotor];
}

id objc_msgSend_hideVoiceOverEnabledWarningBanner(void *a1, const char *a2, ...)
{
  return _[a1 hideVoiceOverEnabledWarningBanner];
}

id objc_msgSend_highlightBrailleDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightBrailleDots:");
}

id objc_msgSend_highlightMapsExplorationSegmentWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightMapsExplorationSegmentWithIndex:");
}

id objc_msgSend_hint(void *a1, const char *a2, ...)
{
  return _[a1 hint];
}

id objc_msgSend_hintForAppLaunch(void *a1, const char *a2, ...)
{
  return _[a1 hintForAppLaunch];
}

id objc_msgSend_hintForItemChooser(void *a1, const char *a2, ...)
{
  return _[a1 hintForItemChooser];
}

id objc_msgSend_hints(void *a1, const char *a2, ...)
{
  return _[a1 hints];
}

id objc_msgSend_hintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 hintsEnabled];
}

id objc_msgSend_hitTestPoint(void *a1, const char *a2, ...)
{
  return _[a1 hitTestPoint];
}

id objc_msgSend_holdHandler(void *a1, const char *a2, ...)
{
  return _[a1 holdHandler];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_identificationFromElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identificationFromElement:");
}

id objc_msgSend_identificationFromKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identificationFromKey:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_ignoreCase(void *a1, const char *a2, ...)
{
  return _[a1 ignoreCase];
}

id objc_msgSend_ignoreDefaultTypeAutofill(void *a1, const char *a2, ...)
{
  return _[a1 ignoreDefaultTypeAutofill];
}

id objc_msgSend_ignoreLogging(void *a1, const char *a2, ...)
{
  return _[a1 ignoreLogging];
}

id objc_msgSend_ignoreWhenVoiceOverTouches(void *a1, const char *a2, ...)
{
  return _[a1 ignoreWhenVoiceOverTouches];
}

id objc_msgSend_imageAssetLocalIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 imageAssetLocalIdentifier];
}

id objc_msgSend_imageCaptionGenderStrategy(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionGenderStrategy];
}

id objc_msgSend_imageCaptionModelAssetPolicy(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionModelAssetPolicy];
}

id objc_msgSend_imageCaptionResults(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionResults];
}

id objc_msgSend_imageCaptioningDisabledApps(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptioningDisabledApps];
}

id objc_msgSend_imageCaptionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 imageCaptionsEnabled];
}

id objc_msgSend_imageDescriptionForCurrentCameraScene_withPreferredLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageDescriptionForCurrentCameraScene:withPreferredLocale:");
}

id objc_msgSend_imageDescriptions(void *a1, const char *a2, ...)
{
  return _[a1 imageDescriptions];
}

id objc_msgSend_imageNode(void *a1, const char *a2, ...)
{
  return _[a1 imageNode];
}

id objc_msgSend_imageOverlayElements(void *a1, const char *a2, ...)
{
  return _[a1 imageOverlayElements];
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:");
}

id objc_msgSend_immediateRemoteParent(void *a1, const char *a2, ...)
{
  return _[a1 immediateRemoteParent];
}

id objc_msgSend_importance(void *a1, const char *a2, ...)
{
  return _[a1 importance];
}

id objc_msgSend_inDirectInteractionTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 inDirectInteractionTypingMode];
}

id objc_msgSend_inDirectTouchMode(void *a1, const char *a2, ...)
{
  return _[a1 inDirectTouchMode];
}

id objc_msgSend_inGestureMode(void *a1, const char *a2, ...)
{
  return _[a1 inGestureMode];
}

id objc_msgSend_inMisspelledWordRotor(void *a1, const char *a2, ...)
{
  return _[a1 inMisspelledWordRotor];
}

id objc_msgSend_inPerformanceTestMode(void *a1, const char *a2, ...)
{
  return _[a1 inPerformanceTestMode];
}

id objc_msgSend_inUnitTestMode(void *a1, const char *a2, ...)
{
  return _[a1 inUnitTestMode];
}

id objc_msgSend_inches(void *a1, const char *a2, ...)
{
  return _[a1 inches];
}

id objc_msgSend_includeDuringContentReading(void *a1, const char *a2, ...)
{
  return _[a1 includeDuringContentReading];
}

id objc_msgSend_includeFullImageDescriptionsForAllElements(void *a1, const char *a2, ...)
{
  return _[a1 includeFullImageDescriptionsForAllElements];
}

id objc_msgSend_includeFullImageDescriptionsForValidElements(void *a1, const char *a2, ...)
{
  return _[a1 includeFullImageDescriptionsForValidElements];
}

id objc_msgSend_includeRoleOnlyForGroupNavigation(void *a1, const char *a2, ...)
{
  return _[a1 includeRoleOnlyForGroupNavigation];
}

id objc_msgSend_includeSceneDetection(void *a1, const char *a2, ...)
{
  return _[a1 includeSceneDetection];
}

id objc_msgSend_includeURLLabelInLabel(void *a1, const char *a2, ...)
{
  return _[a1 includeURLLabelInLabel];
}

id objc_msgSend_increaseTrackingDetail(void *a1, const char *a2, ...)
{
  return _[a1 increaseTrackingDetail];
}

id objc_msgSend_increaseWebSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increaseWebSelection:");
}

id objc_msgSend_increment_userInitiated_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increment:userInitiated:eventOrigin:");
}

id objc_msgSend_incrementAction(void *a1, const char *a2, ...)
{
  return _[a1 incrementAction];
}

id objc_msgSend_indexAtPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexAtPosition:");
}

id objc_msgSend_indexForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexForPoint:");
}

id objc_msgSend_indexGreaterThanIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexGreaterThanIndex:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexOfRotorItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfRotorItem:");
}

id objc_msgSend_indexPath(void *a1, const char *a2, ...)
{
  return _[a1 indexPath];
}

id objc_msgSend_indexPathAsRange(void *a1, const char *a2, ...)
{
  return _[a1 indexPathAsRange];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_indexSetWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndexesInRange:");
}

id objc_msgSend_indexes(void *a1, const char *a2, ...)
{
  return _[a1 indexes];
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_informConnectionDied(void *a1, const char *a2, ...)
{
  return _[a1 informConnectionDied];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initAndWaitForMainDisplayConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 initAndWaitForMainDisplayConfiguration];
}

id objc_msgSend_initApplicationWithPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initApplicationWithPosition:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initPreferringUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 initPreferringUserProfile];
}

id objc_msgSend_initWithAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAXAction:");
}

id objc_msgSend_initWithAXElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAXElement:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:");
}

id objc_msgSend_initWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributes:");
}

id objc_msgSend_initWithBits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBits:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:error:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_itemSource_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:itemSource:filter:");
}

id objc_msgSend_initWithDeviceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIdentifier:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDoubleValue_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDoubleValue:unit:");
}

id objc_msgSend_initWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElement:");
}

id objc_msgSend_initWithElementManager_MatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElementManager:MatchBlock:");
}

id objc_msgSend_initWithEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventRepresentation:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFormat_locale_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:locale:arguments:");
}

id objc_msgSend_initWithHIDTapIdentifier_HIDEventTapPriority_systemEventTapIdentifier_systemEventTapPriority_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithHIDTapIdentifier:HIDEventTapPriority:systemEventTapIdentifier:systemEventTapPriority:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_serviceBundleName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:serviceBundleName:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithItemSource_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemSource:filter:");
}

id objc_msgSend_initWithKey_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:payload:");
}

id objc_msgSend_initWithLabel_value_traits_rowRange_frame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabel:value:traits:rowRange:frame:");
}

id objc_msgSend_initWithLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLanguage:");
}

id objc_msgSend_initWithLanguage_mode_partial_useTechnicalTable_textPositionsRange_textFormattingRanges_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLanguage:mode:partial:useTechnicalTable:textPositionsRange:textFormattingRanges:");
}

id objc_msgSend_initWithLaunchContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLaunchContext:");
}

id objc_msgSend_initWithLeftDots_rightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLeftDots:rightDots:");
}

id objc_msgSend_initWithName_displayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:displayID:");
}

id objc_msgSend_initWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:");
}

id objc_msgSend_initWithPosition_application_contextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:application:contextId:");
}

id objc_msgSend_initWithPosition_startWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPosition:startWithElement:");
}

id objc_msgSend_initWithSegments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSegments:");
}

id objc_msgSend_initWithServiceName_perPidService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:perPidService:");
}

id objc_msgSend_initWithSize_delegate_threadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:delegate:threadKey:");
}

id objc_msgSend_initWithSoundPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSoundPath:");
}

id objc_msgSend_initWithSoundPath_thread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSoundPath:thread:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithString_brailleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:brailleString:");
}

id objc_msgSend_initWithStringOrAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringOrAttributedString:");
}

id objc_msgSend_initWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:");
}

id objc_msgSend_initWithTarget_selector_thread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:thread:");
}

id objc_msgSend_initWithTarget_selector_threadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:threadKey:");
}

id objc_msgSend_initWithTargetAccessQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetAccessQueue:");
}

id objc_msgSend_initWithTargetSerialQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetSerialQueue:");
}

id objc_msgSend_initWithTargetThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetThread:");
}

id objc_msgSend_initWithTextDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTextDisplay:");
}

id objc_msgSend_initWithThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThread:");
}

id objc_msgSend_initWithThreadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThreadKey:");
}

id objc_msgSend_initWithThreadKey_simpleClickHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThreadKey:simpleClickHandler:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithTypingMode_keyboardSize_shouldUseEightDotBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTypingMode:keyboardSize:shouldUseEightDotBraille:");
}

id objc_msgSend_initWithUIElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUIElement:");
}

id objc_msgSend_initWithUIElement_initializeAssociatedPids_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUIElement:initializeAssociatedPids:");
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInt:");
}

id objc_msgSend_initWithValidatedFormat_validFormatSpecifiers_locale_arguments_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:");
}

id objc_msgSend_initWithWireDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWireDictionary:");
}

id objc_msgSend_initialOrientationTimer(void *a1, const char *a2, ...)
{
  return _[a1 initialOrientationTimer];
}

id objc_msgSend_initialize(void *a1, const char *a2, ...)
{
  return _[a1 initialize];
}

id objc_msgSend_initializeAssociatedPids(void *a1, const char *a2, ...)
{
  return _[a1 initializeAssociatedPids];
}

id objc_msgSend_inputContractionMode(void *a1, const char *a2, ...)
{
  return _[a1 inputContractionMode];
}

id objc_msgSend_inputEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 inputEightDotBraille];
}

id objc_msgSend_inputSpaceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputSpaceForElement:");
}

id objc_msgSend_inputUIApplication(void *a1, const char *a2, ...)
{
  return _[a1 inputUIApplication];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertObjects_atIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObjects:atIndexes:");
}

id objc_msgSend_insertString_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertString:atIndex:");
}

id objc_msgSend_insertText_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertText:source:");
}

id objc_msgSend_installedAssetsForLanguage_voiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedAssetsForLanguage:voiceType:");
}

id objc_msgSend_instructions(void *a1, const char *a2, ...)
{
  return _[a1 instructions];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_internalEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalEventWithCommand:info:");
}

id objc_msgSend_interruptsCurrentSpeech(void *a1, const char *a2, ...)
{
  return _[a1 interruptsCurrentSpeech];
}

id objc_msgSend_interruptsEverything(void *a1, const char *a2, ...)
{
  return _[a1 interruptsEverything];
}

id objc_msgSend_invalidStatus(void *a1, const char *a2, ...)
{
  return _[a1 invalidStatus];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _[a1 invertedSet];
}

id objc_msgSend_iosSystemAppApplication(void *a1, const char *a2, ...)
{
  return _[a1 iosSystemAppApplication];
}

id objc_msgSend_isAXAttributedString(void *a1, const char *a2, ...)
{
  return _[a1 isAXAttributedString];
}

id objc_msgSend_isAccessibilityEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityEnabled];
}

id objc_msgSend_isAccessibilityOpaqueElementProvider(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilityOpaqueElementProvider];
}

id objc_msgSend_isAccessibilitySystemUIServer(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibilitySystemUIServer];
}

id objc_msgSend_isAccessibleElement(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibleElement];
}

id objc_msgSend_isAccessibleGroup(void *a1, const char *a2, ...)
{
  return _[a1 isAccessibleGroup];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isActiveResponder(void *a1, const char *a2, ...)
{
  return _[a1 isActiveResponder];
}

id objc_msgSend_isAlarmRinging(void *a1, const char *a2, ...)
{
  return _[a1 isAlarmRinging];
}

id objc_msgSend_isAlive(void *a1, const char *a2, ...)
{
  return _[a1 isAlive];
}

id objc_msgSend_isAllPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 isAllPunctuationGroup];
}

id objc_msgSend_isAppSwitcherVisible(void *a1, const char *a2, ...)
{
  return _[a1 isAppSwitcherVisible];
}

id objc_msgSend_isAppleTVRemoteEvent(void *a1, const char *a2, ...)
{
  return _[a1 isAppleTVRemoteEvent];
}

id objc_msgSend_isAppleVendorKey(void *a1, const char *a2, ...)
{
  return _[a1 isAppleVendorKey];
}

id objc_msgSend_isApplication(void *a1, const char *a2, ...)
{
  return _[a1 isApplication];
}

id objc_msgSend_isArrowKey(void *a1, const char *a2, ...)
{
  return _[a1 isArrowKey];
}

id objc_msgSend_isAssistiveTouch(void *a1, const char *a2, ...)
{
  return _[a1 isAssistiveTouch];
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _[a1 isAtEnd];
}

id objc_msgSend_isAwayAlertItem(void *a1, const char *a2, ...)
{
  return _[a1 isAwayAlertItem];
}

id objc_msgSend_isBackspaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackspaceEvent:");
}

id objc_msgSend_isBannerNotification(void *a1, const char *a2, ...)
{
  return _[a1 isBannerNotification];
}

id objc_msgSend_isBaseSystemSpokenEqualToLocalization(void *a1, const char *a2, ...)
{
  return _[a1 isBaseSystemSpokenEqualToLocalization];
}

id objc_msgSend_isBrailleEvent(void *a1, const char *a2, ...)
{
  return _[a1 isBrailleEvent];
}

id objc_msgSend_isCameraIrisOpen(void *a1, const char *a2, ...)
{
  return _[a1 isCameraIrisOpen];
}

id objc_msgSend_isCancelEvent(void *a1, const char *a2, ...)
{
  return _[a1 isCancelEvent];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isCandidateSelectionOn(void *a1, const char *a2, ...)
{
  return _[a1 isCandidateSelectionOn];
}

id objc_msgSend_isCapsLockKeyDown(void *a1, const char *a2, ...)
{
  return _[a1 isCapsLockKeyDown];
}

id objc_msgSend_isCapsLockKeyUp(void *a1, const char *a2, ...)
{
  return _[a1 isCapsLockKeyUp];
}

id objc_msgSend_isChronod(void *a1, const char *a2, ...)
{
  return _[a1 isChronod];
}

id objc_msgSend_isClipViewService(void *a1, const char *a2, ...)
{
  return _[a1 isClipViewService];
}

id objc_msgSend_isComboBox(void *a1, const char *a2, ...)
{
  return _[a1 isComboBox];
}

id objc_msgSend_isCommandKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isCommandKeyPressed];
}

id objc_msgSend_isComputerVisionAsynchrousRequest(void *a1, const char *a2, ...)
{
  return _[a1 isComputerVisionAsynchrousRequest];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isContainedByPreferredNativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 isContainedByPreferredNativeFocusElement];
}

id objc_msgSend_isControlKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isControlKeyPressed];
}

id objc_msgSend_isCurrentRouteConsideredExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentRouteConsideredExternal:");
}

id objc_msgSend_isDialectSecondaryForCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDialectSecondaryForCharacter:");
}

id objc_msgSend_isDictationListening(void *a1, const char *a2, ...)
{
  return _[a1 isDictationListening];
}

id objc_msgSend_isDolbyAtmosConfigured(void *a1, const char *a2, ...)
{
  return _[a1 isDolbyAtmosConfigured];
}

id objc_msgSend_isDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 isDownEvent];
}

id objc_msgSend_isEditableTextArea(void *a1, const char *a2, ...)
{
  return _[a1 isEditableTextArea];
}

id objc_msgSend_isElementFirstElement_orLastElement_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isElementFirstElement:orLastElement:withType:");
}

id objc_msgSend_isEligibleForVOTWithVoiceInfo_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEligibleForVOTWithVoiceInfo:language:");
}

id objc_msgSend_isEmojiKey(void *a1, const char *a2, ...)
{
  return _[a1 isEmojiKey];
}

id objc_msgSend_isEmojiKeyboard(void *a1, const char *a2, ...)
{
  return _[a1 isEmojiKeyboard];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEscapeKey(void *a1, const char *a2, ...)
{
  return _[a1 isEscapeKey];
}

id objc_msgSend_isExistingInputContainedIn_withMode_isPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExistingInputContainedIn:withMode:isPrefix:");
}

id objc_msgSend_isExploring(void *a1, const char *a2, ...)
{
  return _[a1 isExploring];
}

id objc_msgSend_isFNKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isFNKeyPressed];
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _[a1 isFileURL];
}

id objc_msgSend_isFirstItemInDescriptionList(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInDescriptionList];
}

id objc_msgSend_isFirstItemInFieldset(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInFieldset];
}

id objc_msgSend_isFirstItemInLandmark(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInLandmark];
}

id objc_msgSend_isFirstItemInList(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInList];
}

id objc_msgSend_isFirstItemInTable(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInTable];
}

id objc_msgSend_isFirstItemInTree(void *a1, const char *a2, ...)
{
  return _[a1 isFirstItemInTree];
}

id objc_msgSend_isGoogleChrome(void *a1, const char *a2, ...)
{
  return _[a1 isGoogleChrome];
}

id objc_msgSend_isGuideElementMovementEvent(void *a1, const char *a2, ...)
{
  return _[a1 isGuideElementMovementEvent];
}

id objc_msgSend_isHandUI(void *a1, const char *a2, ...)
{
  return _[a1 isHandUI];
}

id objc_msgSend_isHardwareKeyboardAttached(void *a1, const char *a2, ...)
{
  return _[a1 isHardwareKeyboardAttached];
}

id objc_msgSend_isHeadBoard(void *a1, const char *a2, ...)
{
  return _[a1 isHeadBoard];
}

id objc_msgSend_isHeader(void *a1, const char *a2, ...)
{
  return _[a1 isHeader];
}

id objc_msgSend_isIBooks(void *a1, const char *a2, ...)
{
  return _[a1 isIBooks];
}

id objc_msgSend_isInAlert(void *a1, const char *a2, ...)
{
  return _[a1 isInAlert];
}

id objc_msgSend_isInAppSwitcher(void *a1, const char *a2, ...)
{
  return _[a1 isInAppSwitcher];
}

id objc_msgSend_isInDescriptionDefinition(void *a1, const char *a2, ...)
{
  return _[a1 isInDescriptionDefinition];
}

id objc_msgSend_isInDescriptionTerm(void *a1, const char *a2, ...)
{
  return _[a1 isInDescriptionTerm];
}

id objc_msgSend_isInFolder(void *a1, const char *a2, ...)
{
  return _[a1 isInFolder];
}

id objc_msgSend_isInStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 isInStatusBar];
}

id objc_msgSend_isInTableCell(void *a1, const char *a2, ...)
{
  return _[a1 isInTableCell];
}

id objc_msgSend_isInstalled(void *a1, const char *a2, ...)
{
  return _[a1 isInstalled];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _[a1 isInternalInstall];
}

id objc_msgSend_isInternationalKeyboardKey(void *a1, const char *a2, ...)
{
  return _[a1 isInternationalKeyboardKey];
}

id objc_msgSend_isItemChooserVisible(void *a1, const char *a2, ...)
{
  return _[a1 isItemChooserVisible];
}

id objc_msgSend_isKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 isKeyEvent];
}

id objc_msgSend_isKeyboardActiveOrAttached(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardActiveOrAttached];
}

id objc_msgSend_isKeyboardContinuousPathAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardContinuousPathAvailable];
}

id objc_msgSend_isKeyboardContinuousPathTracking(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardContinuousPathTracking];
}

id objc_msgSend_isKeyboardEmojiInputMode(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardEmojiInputMode];
}

id objc_msgSend_isKeyboardSelectKey(void *a1, const char *a2, ...)
{
  return _[a1 isKeyboardSelectKey];
}

id objc_msgSend_isLiftEvent(void *a1, const char *a2, ...)
{
  return _[a1 isLiftEvent];
}

id objc_msgSend_isLiveCaptionsParagraphView(void *a1, const char *a2, ...)
{
  return _[a1 isLiveCaptionsParagraphView];
}

id objc_msgSend_isLiveCaptionsTextView(void *a1, const char *a2, ...)
{
  return _[a1 isLiveCaptionsTextView];
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return _[a1 isLocked];
}

id objc_msgSend_isMail(void *a1, const char *a2, ...)
{
  return _[a1 isMail];
}

id objc_msgSend_isMapItem(void *a1, const char *a2, ...)
{
  return _[a1 isMapItem];
}

id objc_msgSend_isMediaKey(void *a1, const char *a2, ...)
{
  return _[a1 isMediaKey];
}

id objc_msgSend_isMediaPlayingForApp_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMediaPlayingForApp:completionHandler:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMovedEvent(void *a1, const char *a2, ...)
{
  return _[a1 isMovedEvent];
}

id objc_msgSend_isNeuralSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNeuralSiriVoiceIdentifier:");
}

id objc_msgSend_isNextBrailleTableEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextBrailleTableEvent:");
}

id objc_msgSend_isNextKeyboardLanguageEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextKeyboardLanguageEvent:");
}

id objc_msgSend_isNextSuggestionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNextSuggestionEvent:");
}

id objc_msgSend_isNonLiftingInRangeEvent(void *a1, const char *a2, ...)
{
  return _[a1 isNonLiftingInRangeEvent];
}

id objc_msgSend_isOldSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOldSiriVoiceIdentifier:");
}

id objc_msgSend_isOnElementManagerThread(void *a1, const char *a2, ...)
{
  return _[a1 isOnElementManagerThread];
}

id objc_msgSend_isOptionKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isOptionKeyPressed];
}

id objc_msgSend_isOtherAudioPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isOtherAudioPlaying];
}

id objc_msgSend_isPHAssetLocallyAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isPHAssetLocallyAvailable];
}

id objc_msgSend_isPassivelyListeningForEvents(void *a1, const char *a2, ...)
{
  return _[a1 isPassivelyListeningForEvents];
}

id objc_msgSend_isPaused(void *a1, const char *a2, ...)
{
  return _[a1 isPaused];
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return _[a1 isPending];
}

id objc_msgSend_isPlaying(void *a1, const char *a2, ...)
{
  return _[a1 isPlaying];
}

id objc_msgSend_isPressed(void *a1, const char *a2, ...)
{
  return _[a1 isPressed];
}

id objc_msgSend_isPreviousSuggestionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreviousSuggestionEvent:");
}

id objc_msgSend_isQuickNavOn(void *a1, const char *a2, ...)
{
  return _[a1 isQuickNavOn];
}

id objc_msgSend_isQuietModeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isQuietModeEnabled];
}

id objc_msgSend_isRTL(void *a1, const char *a2, ...)
{
  return _[a1 isRTL];
}

id objc_msgSend_isReadingContent(void *a1, const char *a2, ...)
{
  return _[a1 isReadingContent];
}

id objc_msgSend_isRemoteElement(void *a1, const char *a2, ...)
{
  return _[a1 isRemoteElement];
}

id objc_msgSend_isReplacementTextAllPunctuation(void *a1, const char *a2, ...)
{
  return _[a1 isReplacementTextAllPunctuation];
}

id objc_msgSend_isRequired(void *a1, const char *a2, ...)
{
  return _[a1 isRequired];
}

id objc_msgSend_isReturnKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReturnKeyEvent:");
}

id objc_msgSend_isRingerSwitchSilent(void *a1, const char *a2, ...)
{
  return _[a1 isRingerSwitchSilent];
}

id objc_msgSend_isRouteAirplayMirroring(void *a1, const char *a2, ...)
{
  return _[a1 isRouteAirplayMirroring];
}

id objc_msgSend_isRoutePicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoutePicked:");
}

id objc_msgSend_isRouteWireless_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRouteWireless:");
}

id objc_msgSend_isRunningInStoreDemoMode(void *a1, const char *a2, ...)
{
  return _[a1 isRunningInStoreDemoMode];
}

id objc_msgSend_isSafari(void *a1, const char *a2, ...)
{
  return _[a1 isSafari];
}

id objc_msgSend_isScreenSaverVisible(void *a1, const char *a2, ...)
{
  return _[a1 isScreenSaverVisible];
}

id objc_msgSend_isScrubbing(void *a1, const char *a2, ...)
{
  return _[a1 isScrubbing];
}

id objc_msgSend_isSelectItemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelectItemEvent:");
}

id objc_msgSend_isSetupBuddy(void *a1, const char *a2, ...)
{
  return _[a1 isSetupBuddy];
}

id objc_msgSend_isShiftKeyPressed(void *a1, const char *a2, ...)
{
  return _[a1 isShiftKeyPressed];
}

id objc_msgSend_isSiriTalkingOrListening(void *a1, const char *a2, ...)
{
  return _[a1 isSiriTalkingOrListening];
}

id objc_msgSend_isSiriVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiriVoiceIdentifier:");
}

id objc_msgSend_isSoftwareKeyboardActive(void *a1, const char *a2, ...)
{
  return _[a1 isSoftwareKeyboardActive];
}

id objc_msgSend_isSoftwareKeyboardMimic(void *a1, const char *a2, ...)
{
  return _[a1 isSoftwareKeyboardMimic];
}

id objc_msgSend_isSpaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSpaceEvent:");
}

id objc_msgSend_isSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 isSpeaking];
}

id objc_msgSend_isSplitting(void *a1, const char *a2, ...)
{
  return _[a1 isSplitting];
}

id objc_msgSend_isSpotlight(void *a1, const char *a2, ...)
{
  return _[a1 isSpotlight];
}

id objc_msgSend_isSpringBoard(void *a1, const char *a2, ...)
{
  return _[a1 isSpringBoard];
}

id objc_msgSend_isStrongPasswordField(void *a1, const char *a2, ...)
{
  return _[a1 isStrongPasswordField];
}

id objc_msgSend_isStylus(void *a1, const char *a2, ...)
{
  return _[a1 isStylus];
}

id objc_msgSend_isStylusEvent(void *a1, const char *a2, ...)
{
  return _[a1 isStylusEvent];
}

id objc_msgSend_isSwitch(void *a1, const char *a2, ...)
{
  return _[a1 isSwitch];
}

id objc_msgSend_isSystemApp(void *a1, const char *a2, ...)
{
  return _[a1 isSystemApp];
}

id objc_msgSend_isSystemBatteryLow(void *a1, const char *a2, ...)
{
  return _[a1 isSystemBatteryLow];
}

id objc_msgSend_isSystemLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLocked];
}

id objc_msgSend_isSystemMuted(void *a1, const char *a2, ...)
{
  return _[a1 isSystemMuted];
}

id objc_msgSend_isSystemServerEvent(void *a1, const char *a2, ...)
{
  return _[a1 isSystemServerEvent];
}

id objc_msgSend_isSystemSleeping(void *a1, const char *a2, ...)
{
  return _[a1 isSystemSleeping];
}

id objc_msgSend_isTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 isTouchContainer];
}

id objc_msgSend_isTouchEvent(void *a1, const char *a2, ...)
{
  return _[a1 isTouchEvent];
}

id objc_msgSend_isTourGuideRunning(void *a1, const char *a2, ...)
{
  return _[a1 isTourGuideRunning];
}

id objc_msgSend_isUnitTesting(void *a1, const char *a2, ...)
{
  return _[a1 isUnitTesting];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForApplication:");
}

id objc_msgSend_isValidForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidForContext:");
}

id objc_msgSend_isVisible(void *a1, const char *a2, ...)
{
  return _[a1 isVisible];
}

id objc_msgSend_isVoiceControlRunning(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceControlRunning];
}

id objc_msgSend_isVoiceOverGeneratedContent(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceOverGeneratedContent];
}

id objc_msgSend_isVoiceOverTouchPreferenceEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isVoiceOverTouchPreferenceEnabled];
}

id objc_msgSend_isVolumeSound(void *a1, const char *a2, ...)
{
  return _[a1 isVolumeSound];
}

id objc_msgSend_isWestern(void *a1, const char *a2, ...)
{
  return _[a1 isWestern];
}

id objc_msgSend_isWesternTextForNonWesternLanguage_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWesternTextForNonWesternLanguage:language:");
}

id objc_msgSend_isWirelessRoutePicked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWirelessRoutePicked:");
}

id objc_msgSend_isWordBackspaceEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWordBackspaceEvent:");
}

id objc_msgSend_isWordDescriptionOn(void *a1, const char *a2, ...)
{
  return _[a1 isWordDescriptionOn];
}

id objc_msgSend_isolatedWindow(void *a1, const char *a2, ...)
{
  return _[a1 isolatedWindow];
}

id objc_msgSend_itemChooserName(void *a1, const char *a2, ...)
{
  return _[a1 itemChooserName];
}

id objc_msgSend_itemSource(void *a1, const char *a2, ...)
{
  return _[a1 itemSource];
}

id objc_msgSend_itemSource_didFilter_didSwitchFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSource:didFilter:didSwitchFocus:");
}

id objc_msgSend_itemSource_didSelect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSource:didSelect:");
}

id objc_msgSend_itemsLoaded(void *a1, const char *a2, ...)
{
  return _[a1 itemsLoaded];
}

id objc_msgSend_jumpToTableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jumpToTableIndex:");
}

id objc_msgSend_keyChord(void *a1, const char *a2, ...)
{
  return _[a1 keyChord];
}

id objc_msgSend_keyChordWithKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyChordWithKeys:");
}

id objc_msgSend_keyChordWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyChordWithString:");
}

id objc_msgSend_keyCode(void *a1, const char *a2, ...)
{
  return _[a1 keyCode];
}

id objc_msgSend_keyDown(void *a1, const char *a2, ...)
{
  return _[a1 keyDown];
}

id objc_msgSend_keyDownInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyDownInfo];
}

id objc_msgSend_keyEventWithCommand_keyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEventWithCommand:keyInfo:");
}

id objc_msgSend_keyEventWithCommand_keyInfo_otherInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEventWithCommand:keyInfo:otherInfo:");
}

id objc_msgSend_keyInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyInfo];
}

id objc_msgSend_keyRepresentationWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyRepresentationWithType:");
}

id objc_msgSend_keyString(void *a1, const char *a2, ...)
{
  return _[a1 keyString];
}

id objc_msgSend_keyUp(void *a1, const char *a2, ...)
{
  return _[a1 keyUp];
}

id objc_msgSend_keyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 keyboardElement];
}

id objc_msgSend_keyboardEventForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardEventForKeyInfo:");
}

id objc_msgSend_keyboardKeyAllowsTouchTyping(void *a1, const char *a2, ...)
{
  return _[a1 keyboardKeyAllowsTouchTyping];
}

id objc_msgSend_keyboardKeyPenumbra_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardKeyPenumbra:");
}

id objc_msgSend_keyboardLanguageHint(void *a1, const char *a2, ...)
{
  return _[a1 keyboardLanguageHint];
}

id objc_msgSend_keyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 keyboardManager];
}

id objc_msgSend_keyboardOrientation(void *a1, const char *a2, ...)
{
  return _[a1 keyboardOrientation];
}

id objc_msgSend_keyboardPressInfo(void *a1, const char *a2, ...)
{
  return _[a1 keyboardPressInfo];
}

id objc_msgSend_keyboardShortcutKeyChordWithInfo_characters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardShortcutKeyChordWithInfo:characters:");
}

id objc_msgSend_keypressCallback(void *a1, const char *a2, ...)
{
  return _[a1 keypressCallback];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _[a1 label];
}

id objc_msgSend_labeledTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 labeledTouchContainer];
}

id objc_msgSend_langMap(void *a1, const char *a2, ...)
{
  return _[a1 langMap];
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _[a1 language];
}

id objc_msgSend_languageCode(void *a1, const char *a2, ...)
{
  return _[a1 languageCode];
}

id objc_msgSend_languageNameAndLocaleInNativeLocale(void *a1, const char *a2, ...)
{
  return _[a1 languageNameAndLocaleInNativeLocale];
}

id objc_msgSend_languageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 languageRotorItems];
}

id objc_msgSend_languages(void *a1, const char *a2, ...)
{
  return _[a1 languages];
}

id objc_msgSend_lastAction(void *a1, const char *a2, ...)
{
  return _[a1 lastAction];
}

id objc_msgSend_lastAttemptToShowContextMenuTime(void *a1, const char *a2, ...)
{
  return _[a1 lastAttemptToShowContextMenuTime];
}

id objc_msgSend_lastBlockedRequestBySiriOrDictationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastBlockedRequestBySiriOrDictationTime];
}

id objc_msgSend_lastContainedElement(void *a1, const char *a2, ...)
{
  return _[a1 lastContainedElement];
}

id objc_msgSend_lastContainerForCustomRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 lastContainerForCustomRotorHint];
}

id objc_msgSend_lastDispatchedKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastDispatchedKeyEvent];
}

id objc_msgSend_lastDispatchedKeyEventTime(void *a1, const char *a2, ...)
{
  return _[a1 lastDispatchedKeyEventTime];
}

id objc_msgSend_lastDuckingDisablementSessionStart(void *a1, const char *a2, ...)
{
  return _[a1 lastDuckingDisablementSessionStart];
}

id objc_msgSend_lastElementBlockquoteLevel(void *a1, const char *a2, ...)
{
  return _[a1 lastElementBlockquoteLevel];
}

id objc_msgSend_lastElementChangeAction(void *a1, const char *a2, ...)
{
  return _[a1 lastElementChangeAction];
}

id objc_msgSend_lastElementChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastElementChangeTime];
}

id objc_msgSend_lastElementForAttemptToShowContextMenu(void *a1, const char *a2, ...)
{
  return _[a1 lastElementForAttemptToShowContextMenu];
}

id objc_msgSend_lastElementHeadingLevel(void *a1, const char *a2, ...)
{
  return _[a1 lastElementHeadingLevel];
}

id objc_msgSend_lastElementInApplication(void *a1, const char *a2, ...)
{
  return _[a1 lastElementInApplication];
}

id objc_msgSend_lastElementInStatusBar(void *a1, const char *a2, ...)
{
  return _[a1 lastElementInStatusBar];
}

id objc_msgSend_lastEventCommand(void *a1, const char *a2, ...)
{
  return _[a1 lastEventCommand];
}

id objc_msgSend_lastHitTestNearBorder(void *a1, const char *a2, ...)
{
  return _[a1 lastHitTestNearBorder];
}

id objc_msgSend_lastHomeButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 lastHomeButtonPress];
}

id objc_msgSend_lastIndex(void *a1, const char *a2, ...)
{
  return _[a1 lastIndex];
}

id objc_msgSend_lastItemChooserSearchTerm(void *a1, const char *a2, ...)
{
  return _[a1 lastItemChooserSearchTerm];
}

id objc_msgSend_lastKeyboardKeyPress(void *a1, const char *a2, ...)
{
  return _[a1 lastKeyboardKeyPress];
}

id objc_msgSend_lastLockButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 lastLockButtonPress];
}

id objc_msgSend_lastLockButtonPressTime(void *a1, const char *a2, ...)
{
  return _[a1 lastLockButtonPressTime];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 lastPathComponent];
}

id objc_msgSend_lastPauseSpeechAndHapticsStart(void *a1, const char *a2, ...)
{
  return _[a1 lastPauseSpeechAndHapticsStart];
}

id objc_msgSend_lastPlayheadPosition(void *a1, const char *a2, ...)
{
  return _[a1 lastPlayheadPosition];
}

id objc_msgSend_lastPrintBrailleCharacter(void *a1, const char *a2, ...)
{
  return _[a1 lastPrintBrailleCharacter];
}

id objc_msgSend_lastProgressNotificationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastProgressNotificationTime];
}

id objc_msgSend_lastRefreshTrigger(void *a1, const char *a2, ...)
{
  return _[a1 lastRefreshTrigger];
}

id objc_msgSend_lastReleasedToSystemKeyEvent(void *a1, const char *a2, ...)
{
  return _[a1 lastReleasedToSystemKeyEvent];
}

id objc_msgSend_lastReleasedToSystemKeyEventTime(void *a1, const char *a2, ...)
{
  return _[a1 lastReleasedToSystemKeyEventTime];
}

id objc_msgSend_lastRequestBlockedBySiriOrDictation(void *a1, const char *a2, ...)
{
  return _[a1 lastRequestBlockedBySiriOrDictation];
}

id objc_msgSend_lastScreenChangeNotificationTime(void *a1, const char *a2, ...)
{
  return _[a1 lastScreenChangeNotificationTime];
}

id objc_msgSend_lastScreenChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastScreenChangeTime];
}

id objc_msgSend_lastSearchForElementsTime(void *a1, const char *a2, ...)
{
  return _[a1 lastSearchForElementsTime];
}

id objc_msgSend_lastSeenContextDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenContextDescriptors];
}

id objc_msgSend_lastSeenLineAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 lastSeenLineAndColumn];
}

id objc_msgSend_lastSystemRequest(void *a1, const char *a2, ...)
{
  return _[a1 lastSystemRequest];
}

id objc_msgSend_lastTelephonyCallActive(void *a1, const char *a2, ...)
{
  return _[a1 lastTelephonyCallActive];
}

id objc_msgSend_lastTouchLocationsByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 lastTouchLocationsByIdentifier];
}

id objc_msgSend_lastTouchedDirectTouchElement(void *a1, const char *a2, ...)
{
  return _[a1 lastTouchedDirectTouchElement];
}

id objc_msgSend_lastTrackingUpdateAppsFailureApplication(void *a1, const char *a2, ...)
{
  return _[a1 lastTrackingUpdateAppsFailureApplication];
}

id objc_msgSend_lastTrackingUpdateAppsFailureTime(void *a1, const char *a2, ...)
{
  return _[a1 lastTrackingUpdateAppsFailureTime];
}

id objc_msgSend_lastUsedActivity(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedActivity];
}

id objc_msgSend_lastUsedActivityTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUsedActivityTime];
}

id objc_msgSend_lastUserElementTouchTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUserElementTouchTime];
}

id objc_msgSend_lastValueChangeTime(void *a1, const char *a2, ...)
{
  return _[a1 lastValueChangeTime];
}

id objc_msgSend_lastVolumeDownButtonDownTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeDownButtonDownTime];
}

id objc_msgSend_lastVolumeDownButtonUpTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeDownButtonUpTime];
}

id objc_msgSend_lastVolumeUpButtonDownTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeUpButtonDownTime];
}

id objc_msgSend_lastVolumeUpButtonUpTime(void *a1, const char *a2, ...)
{
  return _[a1 lastVolumeUpButtonUpTime];
}

id objc_msgSend_launchAppWithDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchAppWithDisplayID:");
}

id objc_msgSend_launchContext(void *a1, const char *a2, ...)
{
  return _[a1 launchContext];
}

id objc_msgSend_launchableApps(void *a1, const char *a2, ...)
{
  return _[a1 launchableApps];
}

id objc_msgSend_leftDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 leftDotPositions];
}

id objc_msgSend_leftDots(void *a1, const char *a2, ...)
{
  return _[a1 leftDots];
}

id objc_msgSend_leftDrifts(void *a1, const char *a2, ...)
{
  return _[a1 leftDrifts];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_letterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 letterCharacterSet];
}

id objc_msgSend_liftVolumeDownButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeDownButtonUp];
}

id objc_msgSend_liftVolumeUpButtonUp(void *a1, const char *a2, ...)
{
  return _[a1 liftVolumeUpButtonUp];
}

id objc_msgSend_limitToComponentType(void *a1, const char *a2, ...)
{
  return _[a1 limitToComponentType];
}

id objc_msgSend_lineFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineFromPosition:inDirection:");
}

id objc_msgSend_lineNumberAndColumnForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineNumberAndColumnForPoint:");
}

id objc_msgSend_lineNumberForPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineNumberForPoint:");
}

id objc_msgSend_lineRangeForPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineRangeForPosition:");
}

id objc_msgSend_lineRangeForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineRangeForRange:");
}

id objc_msgSend_lineStartPosition(void *a1, const char *a2, ...)
{
  return _[a1 lineStartPosition];
}

id objc_msgSend_linkRelationshipType(void *a1, const char *a2, ...)
{
  return _[a1 linkRelationshipType];
}

id objc_msgSend_linkedElement(void *a1, const char *a2, ...)
{
  return _[a1 linkedElement];
}

id objc_msgSend_linkedUIElements(void *a1, const char *a2, ...)
{
  return _[a1 linkedUIElements];
}

id objc_msgSend_listensPassively(void *a1, const char *a2, ...)
{
  return _[a1 listensPassively];
}

id objc_msgSend_literalStringMarkup_string_speakCap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "literalStringMarkup:string:speakCap:");
}

id objc_msgSend_liveRegionStatusForWebOrApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "liveRegionStatusForWebOrApp:");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _[a1 load];
}

id objc_msgSend_loadKeyboardMap(void *a1, const char *a2, ...)
{
  return _[a1 loadKeyboardMap];
}

id objc_msgSend_loadUIKit(void *a1, const char *a2, ...)
{
  return _[a1 loadUIKit];
}

id objc_msgSend_localOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 localOpaqueParent];
}

id objc_msgSend_locale(void *a1, const char *a2, ...)
{
  return _[a1 locale];
}

id objc_msgSend_localeForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeForLanguageCode:");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 localeIdentifier];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizedCaseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveCompare:");
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCompare:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedDetectedTextHint(void *a1, const char *a2, ...)
{
  return _[a1 localizedDetectedTextHint];
}

id objc_msgSend_localizedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 localizedLanguage];
}

id objc_msgSend_localizedLowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 localizedLowercaseString];
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _[a1 localizedName];
}

id objc_msgSend_localizedNameWithService(void *a1, const char *a2, ...)
{
  return _[a1 localizedNameWithService];
}

id objc_msgSend_localizedScannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedScannerWithString:");
}

id objc_msgSend_localizedSegmentName(void *a1, const char *a2, ...)
{
  return _[a1 localizedSegmentName];
}

id objc_msgSend_localizedSegmentNameForSelection(void *a1, const char *a2, ...)
{
  return _[a1 localizedSegmentNameForSelection];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringForLanguage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForLanguage:context:");
}

id objc_msgSend_localizedStringFromNumber_numberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromNumber:numberStyle:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedVariant(void *a1, const char *a2, ...)
{
  return _[a1 localizedVariant];
}

id objc_msgSend_localizedWebRotorMap(void *a1, const char *a2, ...)
{
  return _[a1 localizedWebRotorMap];
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _[a1 location];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockScreenDimmingTimer(void *a1, const char *a2, ...)
{
  return _[a1 lockScreenDimmingTimer];
}

id objc_msgSend_lockStateDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockStateDidChange:");
}

id objc_msgSend_logBSIUsageTimer(void *a1, const char *a2, ...)
{
  return _[a1 logBSIUsageTimer];
}

id objc_msgSend_logSoundPlayed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSoundPlayed:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longPressHandler(void *a1, const char *a2, ...)
{
  return _[a1 longPressHandler];
}

id objc_msgSend_longPressHostContextId(void *a1, const char *a2, ...)
{
  return _[a1 longPressHostContextId];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainAccessQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainAccessQueue];
}

id objc_msgSend_mainAttributedString(void *a1, const char *a2, ...)
{
  return _[a1 mainAttributedString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _[a1 mainScreen];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_mapDetailedInformationAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapDetailedInformationAtPoint:");
}

id objc_msgSend_mapFeatureType(void *a1, const char *a2, ...)
{
  return _[a1 mapFeatureType];
}

id objc_msgSend_mapSettingsPitchToSpeechPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapSettingsPitchToSpeechPitch:");
}

id objc_msgSend_mapsExplorationBeginFromCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationBeginFromCurrentElement:");
}

id objc_msgSend_mapsExplorationChangeVerbosity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationChangeVerbosity:");
}

id objc_msgSend_mapsExplorationContinueWithVertexIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationContinueWithVertexIndex:");
}

id objc_msgSend_mapsExplorationCurrentIntersectionDescription(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentIntersectionDescription];
}

id objc_msgSend_mapsExplorationCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentLocation];
}

id objc_msgSend_mapsExplorationCurrentRoadsWithAngles(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationCurrentRoadsWithAngles];
}

id objc_msgSend_mapsExplorationEnd(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationEnd];
}

id objc_msgSend_mapsExplorationInputActive(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationInputActive];
}

id objc_msgSend_mapsExplorationIsActive(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationIsActive];
}

id objc_msgSend_mapsExplorationIsPending(void *a1, const char *a2, ...)
{
  return _[a1 mapsExplorationIsPending];
}

id objc_msgSend_mapsExplorationRecordTouchpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapsExplorationRecordTouchpoint:");
}

id objc_msgSend_matchBlock(void *a1, const char *a2, ...)
{
  return _[a1 matchBlock];
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_mathBrailleDescription(void *a1, const char *a2, ...)
{
  return _[a1 mathBrailleDescription];
}

id objc_msgSend_mathEquationDescription(void *a1, const char *a2, ...)
{
  return _[a1 mathEquationDescription];
}

id objc_msgSend_mathExpressionWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mathExpressionWithDictionary:");
}

id objc_msgSend_mathSegmentsWithGranularityLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mathSegmentsWithGranularityLevel:");
}

id objc_msgSend_mathSummary(void *a1, const char *a2, ...)
{
  return _[a1 mathSummary];
}

id objc_msgSend_maxValue(void *a1, const char *a2, ...)
{
  return _[a1 maxValue];
}

id objc_msgSend_maximumDepth(void *a1, const char *a2, ...)
{
  return _[a1 maximumDepth];
}

id objc_msgSend_mediaAnalysisElement(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisElement];
}

id objc_msgSend_mediaAnalysisFrame(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisFrame];
}

id objc_msgSend_mediaAnalysisOptions(void *a1, const char *a2, ...)
{
  return _[a1 mediaAnalysisOptions];
}

id objc_msgSend_mediaKeyCode(void *a1, const char *a2, ...)
{
  return _[a1 mediaKeyCode];
}

id objc_msgSend_messageForMatchingItemsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageForMatchingItemsCount:");
}

id objc_msgSend_messageForNoMatchingItems(void *a1, const char *a2, ...)
{
  return _[a1 messageForNoMatchingItems];
}

id objc_msgSend_messageForSelectingItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageForSelectingItem:");
}

id objc_msgSend_middleDot(void *a1, const char *a2, ...)
{
  return _[a1 middleDot];
}

id objc_msgSend_minValue(void *a1, const char *a2, ...)
{
  return _[a1 minValue];
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _[a1 mode];
}

id objc_msgSend_modifiedInput(void *a1, const char *a2, ...)
{
  return _[a1 modifiedInput];
}

id objc_msgSend_modifierKeyChoiceForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifierKeyChoiceForElement:");
}

id objc_msgSend_modifierKeyLockEnabled(void *a1, const char *a2, ...)
{
  return _[a1 modifierKeyLockEnabled];
}

id objc_msgSend_modifierKeys(void *a1, const char *a2, ...)
{
  return _[a1 modifierKeys];
}

id objc_msgSend_modifierState(void *a1, const char *a2, ...)
{
  return _[a1 modifierState];
}

id objc_msgSend_modifiers(void *a1, const char *a2, ...)
{
  return _[a1 modifiers];
}

id objc_msgSend_modifiersChanged(void *a1, const char *a2, ...)
{
  return _[a1 modifiersChanged];
}

id objc_msgSend_moreContentOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 moreContentOutputFeedback];
}

id objc_msgSend_mostBasePunctuationGroupForGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostBasePunctuationGroupForGroup:");
}

id objc_msgSend_mostRecentElementCommunity(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentElementCommunity];
}

id objc_msgSend_moveToElementMatchingRotorType_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveToElementMatchingRotorType:inDirection:");
}

id objc_msgSend_moveToFirstOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToFirstOutput];
}

id objc_msgSend_moveToLastOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToLastOutput];
}

id objc_msgSend_moveToNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 moveToNextCandidate];
}

id objc_msgSend_moveToNextOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToNextOutput];
}

id objc_msgSend_moveToPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 moveToPreviousCandidate];
}

id objc_msgSend_moveToPreviousOutput(void *a1, const char *a2, ...)
{
  return _[a1 moveToPreviousOutput];
}

id objc_msgSend_movementManager(void *a1, const char *a2, ...)
{
  return _[a1 movementManager];
}

id objc_msgSend_multiTapFrame(void *a1, const char *a2, ...)
{
  return _[a1 multiTapFrame];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameForSpokenAnnouncementOfBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForSpokenAnnouncementOfBrailleTable:");
}

id objc_msgSend_nameSearcher(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcher];
}

id objc_msgSend_nameSearcherEntriesPassingSearchFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameSearcherEntriesPassingSearchFrom:");
}

id objc_msgSend_nameSearcherHint(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcherHint];
}

id objc_msgSend_nameSearcherMonitorElement(void *a1, const char *a2, ...)
{
  return _[a1 nameSearcherMonitorElement];
}

id objc_msgSend_nativeFocusElement(void *a1, const char *a2, ...)
{
  return _[a1 nativeFocusElement];
}

id objc_msgSend_nativeFocusPreferredElement(void *a1, const char *a2, ...)
{
  return _[a1 nativeFocusPreferredElement];
}

id objc_msgSend_navigateImagesOption(void *a1, const char *a2, ...)
{
  return _[a1 navigateImagesOption];
}

id objc_msgSend_navigationDirection(void *a1, const char *a2, ...)
{
  return _[a1 navigationDirection];
}

id objc_msgSend_navigationStyleHonorsGroups(void *a1, const char *a2, ...)
{
  return _[a1 navigationStyleHonorsGroups];
}

id objc_msgSend_needToShowVOWarningBanner(void *a1, const char *a2, ...)
{
  return _[a1 needToShowVOWarningBanner];
}

id objc_msgSend_needsForceCacheUpdate(void *a1, const char *a2, ...)
{
  return _[a1 needsForceCacheUpdate];
}

id objc_msgSend_networkName(void *a1, const char *a2, ...)
{
  return _[a1 networkName];
}

id objc_msgSend_neuterUpdates(void *a1, const char *a2, ...)
{
  return _[a1 neuterUpdates];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_newsestCompatibleImageCaptionModelAssetFromAssets_withStage_language_isInstalled_isDownloadable_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "newsestCompatibleImageCaptionModelAssetFromAssets:withStage:language:isInstalled:isDownloadable:");
}

id objc_msgSend_nextContainer(void *a1, const char *a2, ...)
{
  return _[a1 nextContainer];
}

id objc_msgSend_nextCursorRangeInDirection_unit_outputRange_currentCursorRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextCursorRangeInDirection:unit:outputRange:currentCursorRange:");
}

id objc_msgSend_nextElement(void *a1, const char *a2, ...)
{
  return _[a1 nextElement];
}

id objc_msgSend_nextElementToFocus(void *a1, const char *a2, ...)
{
  return _[a1 nextElementToFocus];
}

id objc_msgSend_nextElementsWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextElementsWithParameters:");
}

id objc_msgSend_nextGuideElement(void *a1, const char *a2, ...)
{
  return _[a1 nextGuideElement];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextSegment(void *a1, const char *a2, ...)
{
  return _[a1 nextSegment];
}

id objc_msgSend_nextStringToSpeakOnScreenChange(void *a1, const char *a2, ...)
{
  return _[a1 nextStringToSpeakOnScreenChange];
}

id objc_msgSend_nextTextNavigationElement(void *a1, const char *a2, ...)
{
  return _[a1 nextTextNavigationElement];
}

id objc_msgSend_nonPersistentUniqueId(void *a1, const char *a2, ...)
{
  return _[a1 nonPersistentUniqueId];
}

id objc_msgSend_normalizedEventRepresentation_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "normalizedEventRepresentation:scale:");
}

id objc_msgSend_notePostedEventForUnitTesting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePostedEventForUnitTesting:");
}

id objc_msgSend_notificationCount(void *a1, const char *a2, ...)
{
  return _[a1 notificationCount];
}

id objc_msgSend_notificationSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationSummary:");
}

id objc_msgSend_notificationsWhenLockedOutput(void *a1, const char *a2, ...)
{
  return _[a1 notificationsWhenLockedOutput];
}

id objc_msgSend_notifyActionComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyActionComplete:");
}

id objc_msgSend_notifyAnnouncementFinishedWithString_didFinishSuccessfully_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyAnnouncementFinishedWithString:didFinishSuccessfully:");
}

id objc_msgSend_notifyElementOfPlaybackProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyElementOfPlaybackProgress:");
}

id objc_msgSend_notifyElementOfPlaybackStatusChange(void *a1, const char *a2, ...)
{
  return _[a1 notifyElementOfPlaybackStatusChange];
}

id objc_msgSend_notifyRangeWillOutput_container_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyRangeWillOutput:container:");
}

id objc_msgSend_notifyZoomFocusDidChangeWithType_rect_contextId_displayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyZoomFocusDidChangeWithType:rect:contextId:displayId:");
}

id objc_msgSend_notifyZoomWillHideBrailleInputUI(void *a1, const char *a2, ...)
{
  return _[a1 notifyZoomWillHideBrailleInputUI];
}

id objc_msgSend_notifyZoomWillShowBrailleInputUI(void *a1, const char *a2, ...)
{
  return _[a1 notifyZoomWillShowBrailleInputUI];
}

id objc_msgSend_nowPlayingChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nowPlayingChanged:");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberFeedback(void *a1, const char *a2, ...)
{
  return _[a1 numberFeedback];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberFromString:");
}

id objc_msgSend_numberOfActions(void *a1, const char *a2, ...)
{
  return _[a1 numberOfActions];
}

id objc_msgSend_numberOfActionsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfActionsWithString:");
}

id objc_msgSend_numberOfChannels(void *a1, const char *a2, ...)
{
  return _[a1 numberOfChannels];
}

id objc_msgSend_numberOfRanges(void *a1, const char *a2, ...)
{
  return _[a1 numberOfRanges];
}

id objc_msgSend_numberWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithAXAttribute:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForIndex:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectForRange_withParameterizedAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForRange:withParameterizedAttribute:");
}

id objc_msgSend_objectForVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForVariant:");
}

id objc_msgSend_objectWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:");
}

id objc_msgSend_objectWithAXAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectWithAXAttribute:parameter:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_onHold(void *a1, const char *a2, ...)
{
  return _[a1 onHold];
}

id objc_msgSend_opaqueElementInDirection_searchType_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opaqueElementInDirection:searchType:range:");
}

id objc_msgSend_opaqueElementInDirection_searchType_range_peeking_startOpaqueElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opaqueElementInDirection:searchType:range:peeking:startOpaqueElement:");
}

id objc_msgSend_opaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 opaqueParent];
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_orbValue(void *a1, const char *a2, ...)
{
  return _[a1 orbValue];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _[a1 orderedSet];
}

id objc_msgSend_organizedActionsByCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "organizedActionsByCategory:");
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_originalCharacters(void *a1, const char *a2, ...)
{
  return _[a1 originalCharacters];
}

id objc_msgSend_originalElementforElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalElementforElement:");
}

id objc_msgSend_originalLabel(void *a1, const char *a2, ...)
{
  return _[a1 originalLabel];
}

id objc_msgSend_originalString(void *a1, const char *a2, ...)
{
  return _[a1 originalString];
}

id objc_msgSend_originalType(void *a1, const char *a2, ...)
{
  return _[a1 originalType];
}

id objc_msgSend_originationType(void *a1, const char *a2, ...)
{
  return _[a1 originationType];
}

id objc_msgSend_outermostLocalOpaqueParent(void *a1, const char *a2, ...)
{
  return _[a1 outermostLocalOpaqueParent];
}

id objc_msgSend_outputActionID(void *a1, const char *a2, ...)
{
  return _[a1 outputActionID];
}

id objc_msgSend_outputActions(void *a1, const char *a2, ...)
{
  return _[a1 outputActions];
}

id objc_msgSend_outputDisabled(void *a1, const char *a2, ...)
{
  return _[a1 outputDisabled];
}

id objc_msgSend_outputEvents(void *a1, const char *a2, ...)
{
  return _[a1 outputEvents];
}

id objc_msgSend_outputForLatestInput(void *a1, const char *a2, ...)
{
  return _[a1 outputForLatestInput];
}

id objc_msgSend_outputManager(void *a1, const char *a2, ...)
{
  return _[a1 outputManager];
}

id objc_msgSend_outputManager_willProcessNextRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManager:willProcessNextRequest:");
}

id objc_msgSend_outputManagerDidFinishProcessingQueuedRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputManagerDidFinishProcessingQueuedRequests:");
}

id objc_msgSend_outputManagerIfExists(void *a1, const char *a2, ...)
{
  return _[a1 outputManagerIfExists];
}

id objc_msgSend_outputMutedActivityLastToggleTime(void *a1, const char *a2, ...)
{
  return _[a1 outputMutedActivityLastToggleTime];
}

id objc_msgSend_outputMutedActivityValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputMutedActivityValue:");
}

id objc_msgSend_outputRangeForTextSegmentUnit_direction_string_element_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputRangeForTextSegmentUnit:direction:string:element:");
}

id objc_msgSend_outputRequest(void *a1, const char *a2, ...)
{
  return _[a1 outputRequest];
}

id objc_msgSend_outputRequestFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputRequestFinished:");
}

id objc_msgSend_outputTextSegmentForRange_string_element_usePhonetics_segment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputTextSegmentForRange:string:element:usePhonetics:segment:");
}

id objc_msgSend_outputValueChangeForNewValue_oldValue_isFirstResponderValid_selectedTextRange_oldSelectedTextRange_shouldEchoDeletion_optionalValueChangeType_derivedValueChangeType_didHitBorder_isBreakSpaceCharacter_isSingleInsert_selectionDeleted_feedbackType_textOperationOccurred_lastKeyboardKeyPress_isSingleCharacterInsertOrDelete_singleInsertDeleteAttString_singleInsertDeleteString_isSingleCharacterUpdate_wordRangeToFindMisspelled_pasteOperationSucceeded_processApostrophes_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "outputValueChangeForNewValue:oldValue:isFirstResponderValid:selectedTextRange:oldSelectedTextRange:shouldEcho Deletion:optionalValueChangeType:derivedValueChangeType:didHitBorder:isBreakSpaceCharacter:isSingleInsert:sel ectionDeleted:feedbackType:textOperationOccurred:lastKeyboardKeyPress:isSingleCharacterInsertOrDelete:singleI nsertDeleteAttString:singleInsertDeleteString:isSingleCharacterUpdate:wordRangeToFindMisspelled:pasteOperatio nSucceeded:processApostrophes:");
}

id objc_msgSend_outputVariants(void *a1, const char *a2, ...)
{
  return _[a1 outputVariants];
}

id objc_msgSend_outputVoice(void *a1, const char *a2, ...)
{
  return _[a1 outputVoice];
}

id objc_msgSend_outputs(void *a1, const char *a2, ...)
{
  return _[a1 outputs];
}

id objc_msgSend_overriddenInterpretationForCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overriddenInterpretationForCommand:");
}

id objc_msgSend_overridePrintBrailleWithAllSixDots(void *a1, const char *a2, ...)
{
  return _[a1 overridePrintBrailleWithAllSixDots];
}

id objc_msgSend_overridePropertiesForTesting(void *a1, const char *a2, ...)
{
  return _[a1 overridePropertiesForTesting];
}

id objc_msgSend_overridesVoiceOverInstructions(void *a1, const char *a2, ...)
{
  return _[a1 overridesVoiceOverInstructions];
}

id objc_msgSend_owner(void *a1, const char *a2, ...)
{
  return _[a1 owner];
}

id objc_msgSend_page(void *a1, const char *a2, ...)
{
  return _[a1 page];
}

id objc_msgSend_pageContent(void *a1, const char *a2, ...)
{
  return _[a1 pageContent];
}

id objc_msgSend_panDisplayBeginning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayBeginning:");
}

id objc_msgSend_panDisplayEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayEnd:");
}

id objc_msgSend_panDisplayLeft_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayLeft:");
}

id objc_msgSend_panDisplayRight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "panDisplayRight:");
}

id objc_msgSend_panEnabled(void *a1, const char *a2, ...)
{
  return _[a1 panEnabled];
}

id objc_msgSend_paragraphFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paragraphFromPosition:inDirection:");
}

id objc_msgSend_parentTableOrCollectionView(void *a1, const char *a2, ...)
{
  return _[a1 parentTableOrCollectionView];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _[a1 pathExtension];
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathForResource_ofType_inDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:inDirectory:");
}

id objc_msgSend_pathIndex(void *a1, const char *a2, ...)
{
  return _[a1 pathIndex];
}

id objc_msgSend_pathIndexMask(void *a1, const char *a2, ...)
{
  return _[a1 pathIndexMask];
}

id objc_msgSend_pathLocation(void *a1, const char *a2, ...)
{
  return _[a1 pathLocation];
}

id objc_msgSend_pathProximity(void *a1, const char *a2, ...)
{
  return _[a1 pathProximity];
}

id objc_msgSend_paths(void *a1, const char *a2, ...)
{
  return _[a1 paths];
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _[a1 pause];
}

id objc_msgSend_pauseSpeakingAtBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseSpeakingAtBoundary:");
}

id objc_msgSend_pauseSpeakingAtNextBoundary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseSpeakingAtNextBoundary:error:");
}

id objc_msgSend_pauseSpeechAndHaptics(void *a1, const char *a2, ...)
{
  return _[a1 pauseSpeechAndHaptics];
}

id objc_msgSend_pauseStringForType_voiceIdentifier_rate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseStringForType:voiceIdentifier:rate:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_peeking(void *a1, const char *a2, ...)
{
  return _[a1 peeking];
}

id objc_msgSend_pendingDownEvent(void *a1, const char *a2, ...)
{
  return _[a1 pendingDownEvent];
}

id objc_msgSend_pendingInputString(void *a1, const char *a2, ...)
{
  return _[a1 pendingInputString];
}

id objc_msgSend_performAXAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:");
}

id objc_msgSend_performAXAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAXAction:withValue:");
}

id objc_msgSend_performAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:");
}

id objc_msgSend_performAction_owner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:owner:");
}

id objc_msgSend_performAction_withValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAction:withValue:");
}

id objc_msgSend_performAsyncBlock_forThreadKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsyncBlock:forThreadKey:");
}

id objc_msgSend_performAsynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAsynchronousWritingBlock:");
}

id objc_msgSend_performCustomActionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCustomActionWithIdentifier:");
}

id objc_msgSend_performCustomActionWithIdentifier_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performCustomActionWithIdentifier:data:");
}

id objc_msgSend_performCustomBackspace(void *a1, const char *a2, ...)
{
  return _[a1 performCustomBackspace];
}

id objc_msgSend_performCustomWordBackspace(void *a1, const char *a2, ...)
{
  return _[a1 performCustomWordBackspace];
}

id objc_msgSend_performDoubleTap(void *a1, const char *a2, ...)
{
  return _[a1 performDoubleTap];
}

id objc_msgSend_performEscape(void *a1, const char *a2, ...)
{
  return _[a1 performEscape];
}

id objc_msgSend_performNextBrailleTableCommand(void *a1, const char *a2, ...)
{
  return _[a1 performNextBrailleTableCommand];
}

id objc_msgSend_performNextKeyboardLanguage(void *a1, const char *a2, ...)
{
  return _[a1 performNextKeyboardLanguage];
}

id objc_msgSend_performNextLanguageButtonPress(void *a1, const char *a2, ...)
{
  return _[a1 performNextLanguageButtonPress];
}

id objc_msgSend_performPunctuationTranslation(void *a1, const char *a2, ...)
{
  return _[a1 performPunctuationTranslation];
}

id objc_msgSend_performSelector_onTarget_cancelMask_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onTarget:cancelMask:count:objects:");
}

id objc_msgSend_performSelector_onTarget_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:onTarget:count:objects:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performSelector_withThreadKey_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withThreadKey:count:objects:");
}

id objc_msgSend_performSelector_withThreadKey_waitTime_cancelMask_count_objects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withThreadKey:waitTime:cancelMask:count:objects:");
}

id objc_msgSend_performSelectorOnMainThread_withObject_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelectorOnMainThread:withObject:waitUntilDone:");
}

id objc_msgSend_performSimpleTap(void *a1, const char *a2, ...)
{
  return _[a1 performSimpleTap];
}

id objc_msgSend_performSimpleTap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTap:");
}

id objc_msgSend_performSimpleTapAtPoint_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTapAtPoint:forElement:");
}

id objc_msgSend_performSimpleTapAtPoint_withForce_withContextId_withDelay_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSimpleTapAtPoint:withForce:withContextId:withDelay:forElement:");
}

id objc_msgSend_performSynchronousWritingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSynchronousWritingBlock:");
}

id objc_msgSend_performTapAtPoint_withForce_playSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTapAtPoint:withForce:playSound:");
}

id objc_msgSend_performTextOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTextOperation:");
}

id objc_msgSend_performWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithContext:");
}

id objc_msgSend_perkinsChordKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 perkinsChordKeyboardInputEnabled];
}

id objc_msgSend_perkinsKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 perkinsKeyboardInputEnabled];
}

id objc_msgSend_persistentKeyModifiers(void *a1, const char *a2, ...)
{
  return _[a1 persistentKeyModifiers];
}

id objc_msgSend_phoneNumberWithoutFormattingCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneNumberWithoutFormattingCharacters:");
}

id objc_msgSend_phonemes(void *a1, const char *a2, ...)
{
  return _[a1 phonemes];
}

id objc_msgSend_phoneticStringForCharacter_andVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneticStringForCharacter:andVoiceIdentifier:");
}

id objc_msgSend_phoneticStringForCharacter_forLanguage_andVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneticStringForCharacter:forLanguage:andVoiceIdentifier:");
}

id objc_msgSend_photoDescription(void *a1, const char *a2, ...)
{
  return _[a1 photoDescription];
}

id objc_msgSend_photoLibraryURL(void *a1, const char *a2, ...)
{
  return _[a1 photoLibraryURL];
}

id objc_msgSend_pickableRoutesForCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pickableRoutesForCategory:");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_pitch(void *a1, const char *a2, ...)
{
  return _[a1 pitch];
}

id objc_msgSend_play(void *a1, const char *a2, ...)
{
  return _[a1 play];
}

id objc_msgSend_playAvoidingSSS(void *a1, const char *a2, ...)
{
  return _[a1 playAvoidingSSS];
}

id objc_msgSend_playKeyboardClicksOnHWInput(void *a1, const char *a2, ...)
{
  return _[a1 playKeyboardClicksOnHWInput];
}

id objc_msgSend_playSoundFast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:");
}

id objc_msgSend_playSoundFast_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:completionBlock:");
}

id objc_msgSend_playSoundFast_startedBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "playSoundFast:startedBlock:completionBlock:");
}

id objc_msgSend_playbackStatus(void *a1, const char *a2, ...)
{
  return _[a1 playbackStatus];
}

id objc_msgSend_pointValue(void *a1, const char *a2, ...)
{
  return _[a1 pointValue];
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return _[a1 pointerValue];
}

id objc_msgSend_popLastBrailleCellFromBuffer(void *a1, const char *a2, ...)
{
  return _[a1 popLastBrailleCellFromBuffer];
}

id objc_msgSend_popupValue(void *a1, const char *a2, ...)
{
  return _[a1 popupValue];
}

id objc_msgSend_portType(void *a1, const char *a2, ...)
{
  return _[a1 portType];
}

id objc_msgSend_postEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:");
}

id objc_msgSend_postEvent_systemEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postEvent:systemEvent:");
}

id objc_msgSend_postFingerDragAtPoint_withForce_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerDragAtPoint:withForce:withContextId:");
}

id objc_msgSend_postFingerLiftAtPoint_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerLiftAtPoint:withContextId:");
}

id objc_msgSend_postFingerTouchAtPoint_withForce_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFingerTouchAtPoint:withForce:withContextId:");
}

id objc_msgSend_postKeyboardEventWithCharacters_originalCharacters_modifiers_keyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:");
}

id objc_msgSend_postStylusDragAtPoint_withForce_altitude_azimuth_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusDragAtPoint:withForce:altitude:azimuth:withContextId:");
}

id objc_msgSend_postStylusLiftAtPoint_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusLiftAtPoint:withContextId:");
}

id objc_msgSend_postStylusTouchAtPoint_withForce_altitude_azimuth_withContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postStylusTouchAtPoint:withForce:altitude:azimuth:withContextId:");
}

id objc_msgSend_practiceElement(void *a1, const char *a2, ...)
{
  return _[a1 practiceElement];
}

id objc_msgSend_practiceRegion(void *a1, const char *a2, ...)
{
  return _[a1 practiceRegion];
}

id objc_msgSend_precomposedStringWithCanonicalMapping(void *a1, const char *a2, ...)
{
  return _[a1 precomposedStringWithCanonicalMapping];
}

id objc_msgSend_preferenceForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferenceForKey:");
}

id objc_msgSend_preferencesBrailleLanguageRotorItemsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesBrailleLanguageRotorItemsChanged:");
}

id objc_msgSend_preferencesKeyboardClickStatusChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesKeyboardClickStatusChange:");
}

id objc_msgSend_preferencesLanguageRotorItemsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferencesLanguageRotorItemsChanged:");
}

id objc_msgSend_preferredBrailleTableIdentifierForKeyboardLanguage_keyboardLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredBrailleTableIdentifierForKeyboardLanguage:keyboardLayout:");
}

id objc_msgSend_preferredCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 preferredCharacterSet];
}

id objc_msgSend_preferredMediaAnalysisLocale(void *a1, const char *a2, ...)
{
  return _[a1 preferredMediaAnalysisLocale];
}

id objc_msgSend_prefersContextlessPassthrough(void *a1, const char *a2, ...)
{
  return _[a1 prefersContextlessPassthrough];
}

id objc_msgSend_prepareForKeycodeTranslation(void *a1, const char *a2, ...)
{
  return _[a1 prepareForKeycodeTranslation];
}

id objc_msgSend_prepareWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareWithContext:");
}

id objc_msgSend_preprocessAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preprocessAction:");
}

id objc_msgSend_pressReturnKeyForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressReturnKeyForElement:");
}

id objc_msgSend_pressVolumeDownButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeDownButtonDown];
}

id objc_msgSend_pressVolumeUpButtonDown(void *a1, const char *a2, ...)
{
  return _[a1 pressVolumeUpButtonDown];
}

id objc_msgSend_previousContainer(void *a1, const char *a2, ...)
{
  return _[a1 previousContainer];
}

id objc_msgSend_previousCustomRotorsForRotorHint(void *a1, const char *a2, ...)
{
  return _[a1 previousCustomRotorsForRotorHint];
}

id objc_msgSend_previousElement(void *a1, const char *a2, ...)
{
  return _[a1 previousElement];
}

id objc_msgSend_previousElementsWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousElementsWithParameters:");
}

id objc_msgSend_previousGuideElement(void *a1, const char *a2, ...)
{
  return _[a1 previousGuideElement];
}

id objc_msgSend_previousRequests(void *a1, const char *a2, ...)
{
  return _[a1 previousRequests];
}

id objc_msgSend_previousRotorType(void *a1, const char *a2, ...)
{
  return _[a1 previousRotorType];
}

id objc_msgSend_previousRotorVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 previousRotorVoiceIdentifier];
}

id objc_msgSend_previousSegment(void *a1, const char *a2, ...)
{
  return _[a1 previousSegment];
}

id objc_msgSend_previousSoundsPlayed(void *a1, const char *a2, ...)
{
  return _[a1 previousSoundsPlayed];
}

id objc_msgSend_previousSpokenValueParts(void *a1, const char *a2, ...)
{
  return _[a1 previousSpokenValueParts];
}

id objc_msgSend_previousTableOrCollectionViewApplication(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewApplication];
}

id objc_msgSend_previousTableOrCollectionViewList(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewList];
}

id objc_msgSend_previousTableOrCollectionViewToMetadata(void *a1, const char *a2, ...)
{
  return _[a1 previousTableOrCollectionViewToMetadata];
}

id objc_msgSend_previousTextNavigationElement(void *a1, const char *a2, ...)
{
  return _[a1 previousTextNavigationElement];
}

id objc_msgSend_previousTouchContainer(void *a1, const char *a2, ...)
{
  return _[a1 previousTouchContainer];
}

id objc_msgSend_previouslySpokenImageCaptionResults(void *a1, const char *a2, ...)
{
  return _[a1 previouslySpokenImageCaptionResults];
}

id objc_msgSend_prewarmEngine(void *a1, const char *a2, ...)
{
  return _[a1 prewarmEngine];
}

id objc_msgSend_primaryLanguage(void *a1, const char *a2, ...)
{
  return _[a1 primaryLanguage];
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _[a1 principalClass];
}

id objc_msgSend_printBrailleCharacterFromBraillePattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleCharacterFromBraillePattern:");
}

id objc_msgSend_printBrailleForAllTouchPointsInInput_shouldLearn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForAllTouchPointsInInput:shouldLearn:error:");
}

id objc_msgSend_printBrailleForGesturePattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForGesturePattern:");
}

id objc_msgSend_printBrailleForInput_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForInput:error:");
}

id objc_msgSend_printBrailleForTouchPoints_shouldLearn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printBrailleForTouchPoints:shouldLearn:error:");
}

id objc_msgSend_processEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEvent:");
}

id objc_msgSend_processHelpForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processHelpForEvent:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processStringsAndLanguages_brailleString_breakWords_withLanguage_atIndex_category_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processStringsAndLanguages:brailleString:breakWords:withLanguage:atIndex:category:");
}

id objc_msgSend_processTapWithFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTapWithFingerCount:");
}

id objc_msgSend_processTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTouch:");
}

id objc_msgSend_processTouchLocations_isFirstTouch_isCancelTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTouchLocations:isFirstTouch:isCancelTouch:");
}

id objc_msgSend_publicCustomRotorIndex(void *a1, const char *a2, ...)
{
  return _[a1 publicCustomRotorIndex];
}

id objc_msgSend_punctuation(void *a1, const char *a2, ...)
{
  return _[a1 punctuation];
}

id objc_msgSend_punctuationCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 punctuationCharacterSet];
}

id objc_msgSend_punctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroup];
}

id objc_msgSend_punctuationGroupForUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punctuationGroupForUUID:");
}

id objc_msgSend_punctuationGroups(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroups];
}

id objc_msgSend_punctuationGroupsUpdatedHandler(void *a1, const char *a2, ...)
{
  return _[a1 punctuationGroupsUpdatedHandler];
}

id objc_msgSend_punctuationReplacement_withGroup_baseTable_languageCode_selectedLanguage_spokenLanguage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punctuationReplacement:withGroup:baseTable:languageCode:selectedLanguage:spokenLanguage:");
}

id objc_msgSend_purgeCache(void *a1, const char *a2, ...)
{
  return _[a1 purgeCache];
}

id objc_msgSend_quickNavDownDurationAllowedAcceptance(void *a1, const char *a2, ...)
{
  return _[a1 quickNavDownDurationAllowedAcceptance];
}

id objc_msgSend_quickNavKeyChordWithInfo_arrowMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quickNavKeyChordWithInfo:arrowMask:");
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _[a1 range];
}

id objc_msgSend_rangeAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeAtIndex:");
}

id objc_msgSend_rangeBlock(void *a1, const char *a2, ...)
{
  return _[a1 rangeBlock];
}

id objc_msgSend_rangeForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForLineNumber:");
}

id objc_msgSend_rangeForLineNumberAndColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForLineNumberAndColumn:");
}

id objc_msgSend_rangeForTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeForTextMarker:");
}

id objc_msgSend_rangeOfCellRepresentingCharacterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCellRepresentingCharacterAtIndex:");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfCharacterFromSet_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:");
}

id objc_msgSend_rangeOfComposedCharacterSequenceAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:");
}

id objc_msgSend_rangeOfMisspelledWordInString_range_startingAt_wrap_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfMisspelledWordInString:range:startingAt:wrap:language:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangeOfString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:");
}

id objc_msgSend_rangeOfString_options_range_locale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:range:locale:");
}

id objc_msgSend_rangeValue(void *a1, const char *a2, ...)
{
  return _[a1 rangeValue];
}

id objc_msgSend_rangeWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeWithAXAttribute:");
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _[a1 rate];
}

id objc_msgSend_rawAverageLocation(void *a1, const char *a2, ...)
{
  return _[a1 rawAverageLocation];
}

id objc_msgSend_rawLocation(void *a1, const char *a2, ...)
{
  return _[a1 rawLocation];
}

id objc_msgSend_rawValue(void *a1, const char *a2, ...)
{
  return _[a1 rawValue];
}

id objc_msgSend_reachabilityActive(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityActive];
}

id objc_msgSend_reachabilityOffset(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityOffset];
}

id objc_msgSend_readAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readAll:");
}

id objc_msgSend_readAllExplorerElementsTimer(void *a1, const char *a2, ...)
{
  return _[a1 readAllExplorerElementsTimer];
}

id objc_msgSend_readFromCurrentExplorerElement(void *a1, const char *a2, ...)
{
  return _[a1 readFromCurrentExplorerElement];
}

id objc_msgSend_readingContentCausesPageTurn(void *a1, const char *a2, ...)
{
  return _[a1 readingContentCausesPageTurn];
}

id objc_msgSend_realtime(void *a1, const char *a2, ...)
{
  return _[a1 realtime];
}

id objc_msgSend_realtimeBlinkIsUp(void *a1, const char *a2, ...)
{
  return _[a1 realtimeBlinkIsUp];
}

id objc_msgSend_realtimeBlinking(void *a1, const char *a2, ...)
{
  return _[a1 realtimeBlinking];
}

id objc_msgSend_realtimeElementCompleted(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElementCompleted];
}

id objc_msgSend_realtimeElementUnread(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElementUnread];
}

id objc_msgSend_realtimeElements(void *a1, const char *a2, ...)
{
  return _[a1 realtimeElements];
}

id objc_msgSend_realtimeSpinnerCount(void *a1, const char *a2, ...)
{
  return _[a1 realtimeSpinnerCount];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_rectValue(void *a1, const char *a2, ...)
{
  return _[a1 rectValue];
}

id objc_msgSend_rectWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectWithAXAttribute:");
}

id objc_msgSend_referenceBounds(void *a1, const char *a2, ...)
{
  return _[a1 referenceBounds];
}

id objc_msgSend_refreshAssetsByForceUpdatingCatalog_updatingCatalogIfNeeded_catalogRefreshOverrideTimeout_completion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "refreshAssetsByForceUpdatingCatalog:updatingCatalogIfNeeded:catalogRefreshOverrideTimeout:completion:");
}

id objc_msgSend_refreshBraille(void *a1, const char *a2, ...)
{
  return _[a1 refreshBraille];
}

id objc_msgSend_refreshBraille_rotorSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBraille:rotorSelection:");
}

id objc_msgSend_refreshBrailleForTerminalCommand_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBrailleForTerminalCommand:cursor:");
}

id objc_msgSend_refreshBrailleForTerminalOff(void *a1, const char *a2, ...)
{
  return _[a1 refreshBrailleForTerminalOff];
}

id objc_msgSend_refreshBrailleForTerminalOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshBrailleForTerminalOutput:");
}

id objc_msgSend_refreshBrailleLine(void *a1, const char *a2, ...)
{
  return _[a1 refreshBrailleLine];
}

id objc_msgSend_regionDescriptionForElement_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionForElement:withCompletion:");
}

id objc_msgSend_regionDescriptionWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionWithCompletion:");
}

id objc_msgSend_regionDescriptionWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionDescriptionWithFrame:");
}

id objc_msgSend_registerForCoalescedZoomAttributesWithChangedHandler_onDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCoalescedZoomAttributesWithChangedHandler:onDisplay:");
}

id objc_msgSend_registerForEvents(void *a1, const char *a2, ...)
{
  return _[a1 registerForEvents];
}

id objc_msgSend_registerInterestInZoomAttributes(void *a1, const char *a2, ...)
{
  return _[a1 registerInterestInZoomAttributes];
}

id objc_msgSend_registerUpdateBlock_forRetrieveSelector_withListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUpdateBlock:forRetrieveSelector:withListener:");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_reloadPreferringUserProfile(void *a1, const char *a2, ...)
{
  return _[a1 reloadPreferringUserProfile];
}

id objc_msgSend_remoteApplication(void *a1, const char *a2, ...)
{
  return _[a1 remoteApplication];
}

id objc_msgSend_remoteParent(void *a1, const char *a2, ...)
{
  return _[a1 remoteParent];
}

id objc_msgSend_remoteParentIsViewHost(void *a1, const char *a2, ...)
{
  return _[a1 remoteParentIsViewHost];
}

id objc_msgSend_removeActions(void *a1, const char *a2, ...)
{
  return _[a1 removeActions];
}

id objc_msgSend_removeActionsWithHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeActionsWithHelper:");
}

id objc_msgSend_removeAllHandlersForTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllHandlersForTarget:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAttributes:");
}

id objc_msgSend_removeCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInRange:");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeCoalescedZoomAttributesChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCoalescedZoomAttributesChangedHandler:");
}

id objc_msgSend_removeDriftAddedByPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDriftAddedByPattern:");
}

id objc_msgSend_removeElementExplorer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeElementExplorer:");
}

id objc_msgSend_removeEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeEventHandler:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeLastActionWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastActionWithString:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectForVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForVariant:");
}

id objc_msgSend_removeObjectIdenticalTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectIdenticalTo:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOutputManagerObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOutputManagerObserver:");
}

id objc_msgSend_removeReasonToDisableSoftwareKeyboard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeReasonToDisableSoftwareKeyboard:");
}

id objc_msgSend_removeVOSEventFinishedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeVOSEventFinishedHandler:");
}

id objc_msgSend_repeaterTimer(void *a1, const char *a2, ...)
{
  return _[a1 repeaterTimer];
}

id objc_msgSend_replaceCharactersAtCursor_withString_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersAtCursor:withString:source:");
}

id objc_msgSend_replaceCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCharactersInRange:withString:");
}

id objc_msgSend_replaceCommandRange_withString_cursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceCommandRange:withString:cursor:");
}

id objc_msgSend_replaceCommas(void *a1, const char *a2, ...)
{
  return _[a1 replaceCommas];
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceObjectsInRange_withObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectsInRange:withObjectsFromArray:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_replacePunctuation_punctuationGroup_replaceCommas_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacePunctuation:punctuationGroup:replaceCommas:languageCode:");
}

id objc_msgSend_replaceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceString:");
}

id objc_msgSend_replaceTextInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceTextInRange:withString:");
}

id objc_msgSend_replacement(void *a1, const char *a2, ...)
{
  return _[a1 replacement];
}

id objc_msgSend_replacementString(void *a1, const char *a2, ...)
{
  return _[a1 replacementString];
}

id objc_msgSend_replacements(void *a1, const char *a2, ...)
{
  return _[a1 replacements];
}

id objc_msgSend_replacesCharacterAsPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replacesCharacterAsPunctuation:");
}

id objc_msgSend_repostEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repostEvent:");
}

id objc_msgSend_representationWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "representationWithData:");
}

id objc_msgSend_requestElements(void *a1, const char *a2, ...)
{
  return _[a1 requestElements];
}

id objc_msgSend_requestHeaders(void *a1, const char *a2, ...)
{
  return _[a1 requestHeaders];
}

id objc_msgSend_requestQueueMixinBehavior(void *a1, const char *a2, ...)
{
  return _[a1 requestQueueMixinBehavior];
}

id objc_msgSend_requiresLaTeXInput(void *a1, const char *a2, ...)
{
  return _[a1 requiresLaTeXInput];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetAspectMask(void *a1, const char *a2, ...)
{
  return _[a1 resetAspectMask];
}

id objc_msgSend_resetBannerTimer(void *a1, const char *a2, ...)
{
  return _[a1 resetBannerTimer];
}

id objc_msgSend_resetElements(void *a1, const char *a2, ...)
{
  return _[a1 resetElements];
}

id objc_msgSend_resetEventFactory(void *a1, const char *a2, ...)
{
  return _[a1 resetEventFactory];
}

id objc_msgSend_resetFrequentUpdateTextCache(void *a1, const char *a2, ...)
{
  return _[a1 resetFrequentUpdateTextCache];
}

id objc_msgSend_resetLastGestures(void *a1, const char *a2, ...)
{
  return _[a1 resetLastGestures];
}

id objc_msgSend_resetSoundForLostMediaSession(void *a1, const char *a2, ...)
{
  return _[a1 resetSoundForLostMediaSession];
}

id objc_msgSend_resetSpeechRate(void *a1, const char *a2, ...)
{
  return _[a1 resetSpeechRate];
}

id objc_msgSend_resetSystemAppElement(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemAppElement];
}

id objc_msgSend_resetSystemBatteryLowState(void *a1, const char *a2, ...)
{
  return _[a1 resetSystemBatteryLowState];
}

id objc_msgSend_resolvedEditingStyles(void *a1, const char *a2, ...)
{
  return _[a1 resolvedEditingStyles];
}

id objc_msgSend_resolvedVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 resolvedVoiceIdentifier];
}

id objc_msgSend_resolvedVoiceIdentifierForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedVoiceIdentifierForLanguageCode:");
}

id objc_msgSend_resolverForCurrentHost(void *a1, const char *a2, ...)
{
  return _[a1 resolverForCurrentHost];
}

id objc_msgSend_resourcePath(void *a1, const char *a2, ...)
{
  return _[a1 resourcePath];
}

id objc_msgSend_resourceSpecifier(void *a1, const char *a2, ...)
{
  return _[a1 resourceSpecifier];
}

id objc_msgSend_restartConnection(void *a1, const char *a2, ...)
{
  return _[a1 restartConnection];
}

id objc_msgSend_resultsForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultsForElement:");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeCurrentRequest(void *a1, const char *a2, ...)
{
  return _[a1 resumeCurrentRequest];
}

id objc_msgSend_retainsCustomRotorActionSetting(void *a1, const char *a2, ...)
{
  return _[a1 retainsCustomRotorActionSetting];
}

id objc_msgSend_retrieveAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveAllEntries:");
}

id objc_msgSend_retrieveElementsWithElement_groupNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveElementsWithElement:groupNavigationStyle:");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 reverseObjectEnumerator];
}

id objc_msgSend_rightDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 rightDotPositions];
}

id objc_msgSend_rightDots(void *a1, const char *a2, ...)
{
  return _[a1 rightDots];
}

id objc_msgSend_rightDrifts(void *a1, const char *a2, ...)
{
  return _[a1 rightDrifts];
}

id objc_msgSend_roadContainsTrackingPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roadContainsTrackingPoint:");
}

id objc_msgSend_roleDescription(void *a1, const char *a2, ...)
{
  return _[a1 roleDescription];
}

id objc_msgSend_rootConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 rootConfiguration];
}

id objc_msgSend_rotor_didChangeFrom_to_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotor:didChangeFrom:to:userInitiated:");
}

id objc_msgSend_rotorCount(void *a1, const char *a2, ...)
{
  return _[a1 rotorCount];
}

id objc_msgSend_rotorEnabled(void *a1, const char *a2, ...)
{
  return _[a1 rotorEnabled];
}

id objc_msgSend_rotorIsUsedForSettingAdjustment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorIsUsedForSettingAdjustment:");
}

id objc_msgSend_rotorManager(void *a1, const char *a2, ...)
{
  return _[a1 rotorManager];
}

id objc_msgSend_rotorType(void *a1, const char *a2, ...)
{
  return _[a1 rotorType];
}

id objc_msgSend_rotorTypeForPreferenceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForPreferenceString:");
}

id objc_msgSend_rotorTypeForSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForSearchType:");
}

id objc_msgSend_rotorTypeForSystemRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeForSystemRotorType:");
}

id objc_msgSend_rotorTypeIsValid_eventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotorTypeIsValid:eventOrigin:");
}

id objc_msgSend_routeForCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeForCategory:");
}

id objc_msgSend_rowCount(void *a1, const char *a2, ...)
{
  return _[a1 rowCount];
}

id objc_msgSend_rowRange(void *a1, const char *a2, ...)
{
  return _[a1 rowRange];
}

id objc_msgSend_rule(void *a1, const char *a2, ...)
{
  return _[a1 rule];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_runOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runOutputRequest:");
}

id objc_msgSend_saveDrift(void *a1, const char *a2, ...)
{
  return _[a1 saveDrift];
}

id objc_msgSend_savePersistentGestureData(void *a1, const char *a2, ...)
{
  return _[a1 savePersistentGestureData];
}

id objc_msgSend_savePhotoLabeliCloud_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savePhotoLabeliCloud:");
}

id objc_msgSend_savedChannelsForOutput_forSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedChannelsForOutput:forSource:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_scanFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanFloat:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _[a1 scheme];
}

id objc_msgSend_screenCurtainEnabled(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainEnabled];
}

id objc_msgSend_screenCurtainIsTemporarilyDisabled(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainIsTemporarilyDisabled];
}

id objc_msgSend_screenCurtainSuspended(void *a1, const char *a2, ...)
{
  return _[a1 screenCurtainSuspended];
}

id objc_msgSend_screenLockOccurred(void *a1, const char *a2, ...)
{
  return _[a1 screenLockOccurred];
}

id objc_msgSend_screenOn(void *a1, const char *a2, ...)
{
  return _[a1 screenOn];
}

id objc_msgSend_screenOnTime(void *a1, const char *a2, ...)
{
  return _[a1 screenOnTime];
}

id objc_msgSend_scrollAmount(void *a1, const char *a2, ...)
{
  return _[a1 scrollAmount];
}

id objc_msgSend_scrollDownPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollDownPage];
}

id objc_msgSend_scrollLeftPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollLeftPage];
}

id objc_msgSend_scrollNextPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollNextPage];
}

id objc_msgSend_scrollPreviousPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollPreviousPage];
}

id objc_msgSend_scrollRectToVisible_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollRectToVisible:withCompletion:");
}

id objc_msgSend_scrollRightPage(void *a1, const char *a2, ...)
{
  return _[a1 scrollRightPage];
}

id objc_msgSend_scrollStatus(void *a1, const char *a2, ...)
{
  return _[a1 scrollStatus];
}

id objc_msgSend_scrollToBottom(void *a1, const char *a2, ...)
{
  return _[a1 scrollToBottom];
}

id objc_msgSend_scrollToElementForDirectional_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToElementForDirectional:withCompletion:");
}

id objc_msgSend_scrollToPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollToPoint:");
}

id objc_msgSend_scrollToTop(void *a1, const char *a2, ...)
{
  return _[a1 scrollToTop];
}

id objc_msgSend_scrubToPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrubToPosition:");
}

id objc_msgSend_searchForElementInDirection_fromElement_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:");
}

id objc_msgSend_searchForElementInDirection_fromElement_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_peeking_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNaviga tionStyle:peeking:");
}

id objc_msgSend_searchForElementInDirection_fromElement_needsForceCacheUpdate_matchBlock_rangeMatch_searchType_generation_startingRange_groupNavigationStyle_peeking_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "searchForElementInDirection:fromElement:needsForceCacheUpdate:matchBlock:rangeMatch:searchType:generation:sta rtingRange:groupNavigationStyle:peeking:");
}

id objc_msgSend_searchPending(void *a1, const char *a2, ...)
{
  return _[a1 searchPending];
}

id objc_msgSend_searchType(void *a1, const char *a2, ...)
{
  return _[a1 searchType];
}

id objc_msgSend_searchUUID(void *a1, const char *a2, ...)
{
  return _[a1 searchUUID];
}

id objc_msgSend_secureName(void *a1, const char *a2, ...)
{
  return _[a1 secureName];
}

id objc_msgSend_securePayAssertionActive(void *a1, const char *a2, ...)
{
  return _[a1 securePayAssertionActive];
}

id objc_msgSend_secureUnarchiveData_withExpectedClass_otherAllowedClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secureUnarchiveData:withExpectedClass:otherAllowedClasses:");
}

id objc_msgSend_segment(void *a1, const char *a2, ...)
{
  return _[a1 segment];
}

id objc_msgSend_segmentIndex(void *a1, const char *a2, ...)
{
  return _[a1 segmentIndex];
}

id objc_msgSend_segments(void *a1, const char *a2, ...)
{
  return _[a1 segments];
}

id objc_msgSend_select(void *a1, const char *a2, ...)
{
  return _[a1 select];
}

id objc_msgSend_selectButtonReceivedNotificationObserverToken(void *a1, const char *a2, ...)
{
  return _[a1 selectButtonReceivedNotificationObserverToken];
}

id objc_msgSend_selectCurrentOutput(void *a1, const char *a2, ...)
{
  return _[a1 selectCurrentOutput];
}

id objc_msgSend_selectExternalAudioRoute(void *a1, const char *a2, ...)
{
  return _[a1 selectExternalAudioRoute];
}

id objc_msgSend_selectFocusedItem(void *a1, const char *a2, ...)
{
  return _[a1 selectFocusedItem];
}

id objc_msgSend_selectLocalAudioRoute(void *a1, const char *a2, ...)
{
  return _[a1 selectLocalAudioRoute];
}

id objc_msgSend_selectNextSpellingSuggestionInDirection_responder_languageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectNextSpellingSuggestionInDirection:responder:languageCode:");
}

id objc_msgSend_selectSpeechDelay(void *a1, const char *a2, ...)
{
  return _[a1 selectSpeechDelay];
}

id objc_msgSend_selectedActivity(void *a1, const char *a2, ...)
{
  return _[a1 selectedActivity];
}

id objc_msgSend_selectedBrailleGesturesInputTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleGesturesInputTable];
}

id objc_msgSend_selectedBrailleInputTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleInputTable];
}

id objc_msgSend_selectedBrailleTable(void *a1, const char *a2, ...)
{
  return _[a1 selectedBrailleTable];
}

id objc_msgSend_selectedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 selectedLanguage];
}

id objc_msgSend_selectedRouteIsHDMI(void *a1, const char *a2, ...)
{
  return _[a1 selectedRouteIsHDMI];
}

id objc_msgSend_selectedTextRange(void *a1, const char *a2, ...)
{
  return _[a1 selectedTextRange];
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return _[a1 selector];
}

id objc_msgSend_send(void *a1, const char *a2, ...)
{
  return _[a1 send];
}

id objc_msgSend_sendAsynchronousMessage_withIdentifier_targetAccessQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAsynchronousMessage:withIdentifier:targetAccessQueue:completion:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendHIDSystemEvent_repostCreatorHIDEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:repostCreatorHIDEvent:senderID:");
}

id objc_msgSend_sendHIDSystemEvent_senderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHIDSystemEvent:senderID:");
}

id objc_msgSend_sendProgrammaticAppSwitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProgrammaticAppSwitch:");
}

id objc_msgSend_sendRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequest:");
}

id objc_msgSend_sendRequestWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestWithString:");
}

id objc_msgSend_sendSynchronousMessage_withIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSynchronousMessage:withIdentifier:error:");
}

id objc_msgSend_sendTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 sendTimestamp];
}

id objc_msgSend_sendTouchCancelledEvent(void *a1, const char *a2, ...)
{
  return _[a1 sendTouchCancelledEvent];
}

id objc_msgSend_senderBundleID(void *a1, const char *a2, ...)
{
  return _[a1 senderBundleID];
}

id objc_msgSend_senderID(void *a1, const char *a2, ...)
{
  return _[a1 senderID];
}

id objc_msgSend_senderIsAppExtension(void *a1, const char *a2, ...)
{
  return _[a1 senderIsAppExtension];
}

id objc_msgSend_senderPID(void *a1, const char *a2, ...)
{
  return _[a1 senderPID];
}

id objc_msgSend_sentenceFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sentenceFromPosition:inDirection:");
}

id objc_msgSend_seriesOfTouchPoints(void *a1, const char *a2, ...)
{
  return _[a1 seriesOfTouchPoints];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverInstance(void *a1, const char *a2, ...)
{
  return _[a1 serverInstance];
}

id objc_msgSend_servesAsHeadingLandmark(void *a1, const char *a2, ...)
{
  return _[a1 servesAsHeadingLandmark];
}

id objc_msgSend_serviceBundleName(void *a1, const char *a2, ...)
{
  return _[a1 serviceBundleName];
}

id objc_msgSend_serviceForIdentifier_input_loopback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceForIdentifier:input:loopback:");
}

id objc_msgSend_serviceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serviceIdentifier];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAXAttribute_withArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withArray:");
}

id objc_msgSend_setAXAttribute_withBOOL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withBOOL:");
}

id objc_msgSend_setAXAttribute_withFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withFloat:");
}

id objc_msgSend_setAXAttribute_withNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withNumber:");
}

id objc_msgSend_setAXAttribute_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withObject:");
}

id objc_msgSend_setAXAttribute_withObject_synchronous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withObject:synchronous:");
}

id objc_msgSend_setAXAttribute_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withRange:");
}

id objc_msgSend_setAXAttribute_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXAttribute:withString:");
}

id objc_msgSend_setAcceptsContractedBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptsContractedBraille:");
}

id objc_msgSend_setAcceptsRawInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAcceptsRawInput:");
}

id objc_msgSend_setActionCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionCompletionBlock:");
}

id objc_msgSend_setActivatedDirectTouchThatRequiredActivation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivatedDirectTouchThatRequiredActivation:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setActive_usage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:usage:");
}

id objc_msgSend_setActive_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:withOptions:error:");
}

id objc_msgSend_setActivities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivities:");
}

id objc_msgSend_setActivityBasedAudioDucking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityBasedAudioDucking:");
}

id objc_msgSend_setAdditionalLanguageRotorItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdditionalLanguageRotorItem:");
}

id objc_msgSend_setAggregatedStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregatedStatus:");
}

id objc_msgSend_setAlertString_timeout_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlertString:timeout:priority:");
}

id objc_msgSend_setAllEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllEntries:");
}

id objc_msgSend_setAllowSingleLetterSearching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowSingleLetterSearching:");
}

id objc_msgSend_setAllowedCharacterSets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedCharacterSets:");
}

id objc_msgSend_setAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitude:");
}

id objc_msgSend_setAlwaysUsesNemethCodeForTechnicalText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysUsesNemethCodeForTechnicalText:");
}

id objc_msgSend_setAnnouncementString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnnouncementString:");
}

id objc_msgSend_setAnnouncementsDisplayMode(void *a1, const char *a2, ...)
{
  return _[a1 setAnnouncementsDisplayMode];
}

id objc_msgSend_setAppTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppTransition:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setAspectMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAspectMask:");
}

id objc_msgSend_setAttemptToSetNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttemptToSetNativeFocus:");
}

id objc_msgSend_setAttribute_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttribute_forKey_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:withRange:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributes_withRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:withRange:");
}

id objc_msgSend_setAudioAccHeldEventForRepost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioAccHeldEventForRepost:");
}

id objc_msgSend_setAudioAccHeldUpEventForRepost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioAccHeldUpEventForRepost:");
}

id objc_msgSend_setAudioAccTapDownEventForRepost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioAccTapDownEventForRepost:");
}

id objc_msgSend_setAudioAccTapUpEventForRepost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioAccTapUpEventForRepost:");
}

id objc_msgSend_setAudioDestinationRequestExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioDestinationRequestExternal:");
}

id objc_msgSend_setAudioEffects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioEffects:");
}

id objc_msgSend_setAudioQueueFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAudioQueueFlags:");
}

id objc_msgSend_setAutoAdvanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoAdvanceEnabled:");
}

id objc_msgSend_setAutomaticallyCancelPendingBlockUponSchedulingNewBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:");
}

id objc_msgSend_setAzimuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAzimuth:");
}

id objc_msgSend_setBannerNotificationsOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBannerNotificationsOutput:");
}

id objc_msgSend_setBaseElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseElement:");
}

id objc_msgSend_setBasePunctuationUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBasePunctuationUUID:");
}

id objc_msgSend_setBeginTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTimestamp:");
}

id objc_msgSend_setBookCursorPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBookCursorPosition:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBoolValue_forSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoolValue:forSetting:");
}

id objc_msgSend_setBottomDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBottomDot:");
}

id objc_msgSend_setBrailleChordDebounceTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleChordDebounceTimeout:");
}

id objc_msgSend_setBrailleElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleElement:");
}

id objc_msgSend_setBrailleElement_resetBrailleCursor_rotorSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleElement:resetBrailleCursor:rotorSelection:");
}

id objc_msgSend_setBrailleGestureManagerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleGestureManagerDelegate:");
}

id objc_msgSend_setBrailleLineRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleLineRange:");
}

id objc_msgSend_setBrailleManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleManager:");
}

id objc_msgSend_setBrailleString_type_timeout_langCode_brailleLineRange_isBrailleLineRangeKnown_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleString:type:timeout:langCode:brailleLineRange:isBrailleLineRangeKnown:");
}

id objc_msgSend_setBrailleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleType:");
}

id objc_msgSend_setBrailleTypingPropertiesAnnouncementTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBrailleTypingPropertiesAnnouncementTimer:");
}

id objc_msgSend_setBsiTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsiTypingMode:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIdentifier:");
}

id objc_msgSend_setBypassHelp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBypassHelp:");
}

id objc_msgSend_setCachedAdditionalElementCommunities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedAdditionalElementCommunities:");
}

id objc_msgSend_setCachedDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedDisplayId:");
}

id objc_msgSend_setCachedImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedImmediateRemoteParent:");
}

id objc_msgSend_setCachedRemoteApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedRemoteApplication:");
}

id objc_msgSend_setCachedRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedRemoteParent:");
}

id objc_msgSend_setCachedSideAppDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedSideAppDividerElement:");
}

id objc_msgSend_setCalibrationStartTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibrationStartTouchPoints:");
}

id objc_msgSend_setCanDeleteCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanDeleteCharacter:");
}

id objc_msgSend_setCancelRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelRequest:");
}

id objc_msgSend_setCannotBeInterrupted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCannotBeInterrupted:");
}

id objc_msgSend_setCapsLockLightOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapsLockLightOn:");
}

id objc_msgSend_setCaptionPanelEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptionPanelEnabled:");
}

id objc_msgSend_setCaptureModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCaptureModeEnabled:");
}

id objc_msgSend_setCategory_withOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategory:withOptions:error:");
}

id objc_msgSend_setCategoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryName:");
}

id objc_msgSend_setChangedModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangedModifiers:");
}

id objc_msgSend_setChannelAssignments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelAssignments:");
}

id objc_msgSend_setCheckedImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckedImmediateRemoteParent:");
}

id objc_msgSend_setCheckedRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckedRemoteParent:");
}

id objc_msgSend_setClickAndHoldHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickAndHoldHandler:");
}

id objc_msgSend_setClickHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClickHandler:");
}

id objc_msgSend_setClientGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientGeneration:");
}

id objc_msgSend_setClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientID:");
}

id objc_msgSend_setClientId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientId:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setCommandLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommandLine:");
}

id objc_msgSend_setCommandManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommandManager:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setCompletionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionDelegate:");
}

id objc_msgSend_setComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setComponent:");
}

id objc_msgSend_setContentOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentOffset:");
}

id objc_msgSend_setContextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContextId:");
}

id objc_msgSend_setContinuousPathTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContinuousPathTimeout:");
}

id objc_msgSend_setControlKeyToggleSpeakingAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlKeyToggleSpeakingAllowed:");
}

id objc_msgSend_setCrashloopTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCrashloopTimer:");
}

id objc_msgSend_setCurrentChartDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentChartDescriptor:");
}

id objc_msgSend_setCurrentChartElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentChartElement:");
}

id objc_msgSend_setCurrentContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentContextDescriptors:");
}

id objc_msgSend_setCurrentCursorContextID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorContextID:");
}

id objc_msgSend_setCurrentCursorDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorDisplayID:");
}

id objc_msgSend_setCurrentCursorFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorFrame:");
}

id objc_msgSend_setCurrentCursorPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentCursorPath:");
}

id objc_msgSend_setCurrentElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentElement:");
}

id objc_msgSend_setCurrentElementToWebEditableAncestor(void *a1, const char *a2, ...)
{
  return _[a1 setCurrentElementToWebEditableAncestor];
}

id objc_msgSend_setCurrentExplorerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentExplorerElement:");
}

id objc_msgSend_setCurrentInputString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentInputString:");
}

id objc_msgSend_setCurrentOutputActionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentOutputActionID:");
}

id objc_msgSend_setCurrentReadAllContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentReadAllContext:");
}

id objc_msgSend_setCurrentRotorElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRotorElement:");
}

id objc_msgSend_setCurrentRotorType_saveToPreferences_userInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRotorType:saveToPreferences:userInitiated:");
}

id objc_msgSend_setCurrentRouteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentRouteName:");
}

id objc_msgSend_setCurrentSeriesIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSeriesIndex:");
}

id objc_msgSend_setCurrentSimilarTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSimilarTraits:");
}

id objc_msgSend_setCurrentSonificationPlaybackBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSonificationPlaybackBounds:");
}

id objc_msgSend_setCurrentWordContextForBook_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWordContextForBook:");
}

id objc_msgSend_setCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursor:");
}

id objc_msgSend_setCursorFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:");
}

id objc_msgSend_setCursorFrame_withPath_withContextId_withDisplayId_element_forceRefresh_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:");
}

id objc_msgSend_setCursorFrame_withPath_withContextId_withDisplayId_element_forceRefresh_animated_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:animated:");
}

id objc_msgSend_setCursorFrameForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrameForElement:");
}

id objc_msgSend_setCursorFrameForElement_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursorFrameForElement:animated:");
}

id objc_msgSend_setCustomActionIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCustomActionIndex:");
}

id objc_msgSend_setDateToResumeRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateToResumeRequests:");
}

id objc_msgSend_setDateToResumeSounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateToResumeSounds:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDefaultThreadPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultThreadPriority:");
}

id objc_msgSend_setDefinedLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefinedLabel:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDetectCaptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectCaptions:");
}

id objc_msgSend_setDetectScenes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDetectScenes:");
}

id objc_msgSend_setDeviceOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceOrientation:");
}

id objc_msgSend_setDictionary_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:forKey:");
}

id objc_msgSend_setDidAnnounceBrailleTypingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidAnnounceBrailleTypingProperties:");
}

id objc_msgSend_setDidAnnounceExplorationMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidAnnounceExplorationMode:");
}

id objc_msgSend_setDidCacheSideAppDividerElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidCacheSideAppDividerElement:");
}

id objc_msgSend_setDidEnterInvalidGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidEnterInvalidGesture:");
}

id objc_msgSend_setDidMoveFingersTooFarForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidMoveFingersTooFarForInput:");
}

id objc_msgSend_setDidReceiveForceUpdateChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidReceiveForceUpdateChangeToken:");
}

id objc_msgSend_setDidStartFullGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidStartFullGesture:");
}

id objc_msgSend_setDirectInteractionElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectInteractionElement:");
}

id objc_msgSend_setDirectTouchApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectTouchApps:");
}

id objc_msgSend_setDirectTouchManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectTouchManager:");
}

id objc_msgSend_setDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirection:");
}

id objc_msgSend_setDisableIdleTimerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableIdleTimerAssertion:");
}

id objc_msgSend_setDisableVoiceOverSettingOnStop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableVoiceOverSettingOnStop:");
}

id objc_msgSend_setDisplayDescriptorCallbackEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayDescriptorCallbackEnabled:");
}

id objc_msgSend_setDisplayID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayID:");
}

id objc_msgSend_setDisplayId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayId:");
}

id objc_msgSend_setDisplayManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayManager:");
}

id objc_msgSend_setDisplayName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayName:");
}

id objc_msgSend_setDisplayToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayToken:");
}

id objc_msgSend_setDoesNotInterrupt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoesNotInterrupt:");
}

id objc_msgSend_setDuckScalarForVoiceOver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckScalarForVoiceOver:");
}

id objc_msgSend_setDuckToLevelScalar_unduckToLevelScalar_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckToLevelScalar:unduckToLevelScalar:error:");
}

id objc_msgSend_setDuckingFadeOutDuration_fadeInDuration_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingFadeOutDuration:fadeInDuration:error:");
}

id objc_msgSend_setDuckingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingProperties:");
}

id objc_msgSend_setDuckingTemporarilyDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuckingTemporarilyDisabled:");
}

id objc_msgSend_setDynamicReplacement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDynamicReplacement:");
}

id objc_msgSend_setElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElement:");
}

id objc_msgSend_setElementFetcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFetcher:");
}

id objc_msgSend_setElementForGesturedTextInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementForGesturedTextInput:");
}

id objc_msgSend_setElementFrames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFrames:");
}

id objc_msgSend_setElementFrames_labels_uiClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementFrames:labels:uiClasses:");
}

id objc_msgSend_setElementGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementGeneration:");
}

id objc_msgSend_setElementHeadersForOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementHeadersForOutput:");
}

id objc_msgSend_setElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementManager:");
}

id objc_msgSend_setElementsDidChangeOnLastUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElementsDidChangeOnLastUpdate:");
}

id objc_msgSend_setEnableVoiceOverCaptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableVoiceOverCaptions:");
}

id objc_msgSend_setEndMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndMarker:");
}

id objc_msgSend_setEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngine:");
}

id objc_msgSend_setEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntries:");
}

id objc_msgSend_setEventCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventCaptureMode:");
}

id objc_msgSend_setEventOrigin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventOrigin:");
}

id objc_msgSend_setEventProcessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventProcessor:");
}

id objc_msgSend_setEventRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventRecord:");
}

id objc_msgSend_setEventRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventRepresentation:");
}

id objc_msgSend_setExpandedStatusDisplayModeWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpandedStatusDisplayModeWithStatus:");
}

id objc_msgSend_setExplictlyEnabledQuickNav_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplictlyEnabledQuickNav:");
}

id objc_msgSend_setExploreFocusAffectsNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExploreFocusAffectsNativeFocus:");
}

id objc_msgSend_setExplorerElementManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplorerElementManager:");
}

id objc_msgSend_setExplorerElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExplorerElements:");
}

id objc_msgSend_setExploring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExploring:");
}

id objc_msgSend_setFailedToHandleEventInTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFailedToHandleEventInTime:");
}

id objc_msgSend_setFallbackLocalOpaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackLocalOpaqueParent:");
}

id objc_msgSend_setFallbackOpaqueParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFallbackOpaqueParent:");
}

id objc_msgSend_setFetchContextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchContextBlock:");
}

id objc_msgSend_setFetchPressCountBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchPressCountBlock:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _[a1 setFill];
}

id objc_msgSend_setFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilter:");
}

id objc_msgSend_setFilteredEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredEntries:");
}

id objc_msgSend_setFingerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerCount:");
}

id objc_msgSend_setFinishedSuccessfully_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinishedSuccessfully:");
}

id objc_msgSend_setFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstResponder:");
}

id objc_msgSend_setFirstTrackedAppInGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstTrackedAppInGesture:");
}

id objc_msgSend_setFlickSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlickSpeed:");
}

id objc_msgSend_setFocusElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusElement:");
}

id objc_msgSend_setFocusRetryAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusRetryAttempts:");
}

id objc_msgSend_setFocusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusedElement:");
}

id objc_msgSend_setFocusedEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFocusedEntry:");
}

id objc_msgSend_setForceUpdateMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceUpdateMask:");
}

id objc_msgSend_setFourthDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFourthDot:");
}

id objc_msgSend_setGenderStrategy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGenderStrategy:");
}

id objc_msgSend_setGeneral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneral:");
}

id objc_msgSend_setGeneralDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneralDict:");
}

id objc_msgSend_setGeneratesBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneratesBraille:");
}

id objc_msgSend_setGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeneration:");
}

id objc_msgSend_setGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGesture:");
}

id objc_msgSend_setGesturePracticeInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGesturePracticeInfo:");
}

id objc_msgSend_setGroupNavigationStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupNavigationStyle:");
}

id objc_msgSend_setHIDEventFilterMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventFilterMask:");
}

id objc_msgSend_setHIDEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHIDEventHandler:");
}

id objc_msgSend_setHandlerWithTarget_selector_async_forKey_possibleRequiredEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:async:forKey:possibleRequiredEntitlements:");
}

id objc_msgSend_setHandlerWithTarget_selector_forKey_possibleRequiredEntitlements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlerWithTarget:selector:forKey:possibleRequiredEntitlements:");
}

id objc_msgSend_setHasBeenDispatched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBeenDispatched:");
}

id objc_msgSend_setHashKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashKey:");
}

id objc_msgSend_setHelpEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHelpEnabled:");
}

id objc_msgSend_setHintsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHintsEnabled:");
}

id objc_msgSend_setHitTestPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHitTestPoint:");
}

id objc_msgSend_setHoldHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHoldHandler:");
}

id objc_msgSend_setIgnoreDefaultTypeAutofill_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreDefaultTypeAutofill:");
}

id objc_msgSend_setIgnoreSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreSubstitutions:");
}

id objc_msgSend_setIgnoredLayerContextIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoredLayerContextIDs:");
}

id objc_msgSend_setImageCaptionResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageCaptionResults:");
}

id objc_msgSend_setImageCaptioningDisabledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageCaptioningDisabledApps:");
}

id objc_msgSend_setInDirectInteractionTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInDirectInteractionTypingMode:");
}

id objc_msgSend_setInPassthroughMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInPassthroughMode:");
}

id objc_msgSend_setInPerformanceTestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInPerformanceTestMode:");
}

id objc_msgSend_setInTextSelection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTextSelection:");
}

id objc_msgSend_setIncludeFullImageDescriptionsForAllElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeFullImageDescriptionsForAllElements:");
}

id objc_msgSend_setIncludeFullImageDescriptionsForValidElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeFullImageDescriptionsForValidElements:");
}

id objc_msgSend_setIncludeImageInResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeImageInResult:");
}

id objc_msgSend_setIncludeSceneDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeSceneDetection:");
}

id objc_msgSend_setIncludeTextDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeTextDetection:");
}

id objc_msgSend_setIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndexPath:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInitialReadAllElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialReadAllElement:");
}

id objc_msgSend_setInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputTableIdentifier:");
}

id objc_msgSend_setInterruptsCurrentSpeech_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptsCurrentSpeech:");
}

id objc_msgSend_setInterruptsEverything_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptsEverything:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsActiveResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActiveResponder:");
}

id objc_msgSend_setIsComputerVisionAsynchrousRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsComputerVisionAsynchrousRequest:");
}

id objc_msgSend_setIsFirstItemInDescriptionList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInDescriptionList:");
}

id objc_msgSend_setIsFirstItemInFieldset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInFieldset:");
}

id objc_msgSend_setIsFirstItemInLandmark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInLandmark:");
}

id objc_msgSend_setIsFirstItemInList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInList:");
}

id objc_msgSend_setIsFirstItemInTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInTable:");
}

id objc_msgSend_setIsFirstItemInTree_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFirstItemInTree:");
}

id objc_msgSend_setIsGuideElementMovementEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsGuideElementMovementEvent:");
}

id objc_msgSend_setIsHardwareKeyboardAttached_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHardwareKeyboardAttached:");
}

id objc_msgSend_setIsInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInvalid:");
}

id objc_msgSend_setIsSiriListening_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiriListening:");
}

id objc_msgSend_setIsSiriTalking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSiriTalking:");
}

id objc_msgSend_setIsVoiceOverGeneratedContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVoiceOverGeneratedContent:");
}

id objc_msgSend_setIsVolumeSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVolumeSound:");
}

id objc_msgSend_setItemChooserName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemChooserName:");
}

id objc_msgSend_setItemSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemSource:");
}

id objc_msgSend_setItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItems:");
}

id objc_msgSend_setKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAlive:");
}

id objc_msgSend_setKeepConnectionAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepConnectionAlive:");
}

id objc_msgSend_setKeyChord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyChord:");
}

id objc_msgSend_setKeyCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyCode:");
}

id objc_msgSend_setKeyDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyDown:");
}

id objc_msgSend_setKeyDownInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyDownInfo:");
}

id objc_msgSend_setKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyInfo:");
}

id objc_msgSend_setKeyString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyString:");
}

id objc_msgSend_setKeyUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyUp:");
}

id objc_msgSend_setKeyboardLanguageHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardLanguageHint:");
}

id objc_msgSend_setKeyboardMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardMode:");
}

id objc_msgSend_setKeyboardOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyboardOrientation:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguage:");
}

id objc_msgSend_setLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguageCode:");
}

id objc_msgSend_setLastAttemptToShowContextMenuTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAttemptToShowContextMenuTime:");
}

id objc_msgSend_setLastContainerForCustomRotorHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastContainerForCustomRotorHint:");
}

id objc_msgSend_setLastDispatchedKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDispatchedKeyEvent:");
}

id objc_msgSend_setLastDispatchedKeyEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDispatchedKeyEventTime:");
}

id objc_msgSend_setLastDuckingDisablementSessionStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDuckingDisablementSessionStart:");
}

id objc_msgSend_setLastElementBlockquoteLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementBlockquoteLevel:");
}

id objc_msgSend_setLastElementChangeAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementChangeAction:");
}

id objc_msgSend_setLastElementChangeTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementChangeTime:");
}

id objc_msgSend_setLastElementForAttemptToShowContextMenu_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementForAttemptToShowContextMenu:");
}

id objc_msgSend_setLastElementHeadingLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastElementHeadingLevel:");
}

id objc_msgSend_setLastEventCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEventCommand:");
}

id objc_msgSend_setLastExplorerOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastExplorerOutputRequest:");
}

id objc_msgSend_setLastGestureEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastGestureEvent:");
}

id objc_msgSend_setLastHomeButtonPressTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHomeButtonPressTime:");
}

id objc_msgSend_setLastItemChooserSearchTerm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastItemChooserSearchTerm:");
}

id objc_msgSend_setLastLayoutChangeNotificationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLayoutChangeNotificationTime:");
}

id objc_msgSend_setLastPauseSpeechAndHapticsStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPauseSpeechAndHapticsStart:");
}

id objc_msgSend_setLastPrintBrailleCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPrintBrailleCharacter:");
}

id objc_msgSend_setLastRefreshTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastRefreshTrigger:");
}

id objc_msgSend_setLastReleasedToSystemKeyEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReleasedToSystemKeyEvent:");
}

id objc_msgSend_setLastReleasedToSystemKeyEventTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReleasedToSystemKeyEventTime:");
}

id objc_msgSend_setLastSearchForElementsTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSearchForElementsTime:");
}

id objc_msgSend_setLastSeenContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSeenContextDescriptors:");
}

id objc_msgSend_setLastSystemRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSystemRequest:");
}

id objc_msgSend_setLastTelephonyCallActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTelephonyCallActive:");
}

id objc_msgSend_setLastTouchLocationsByIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTouchLocationsByIdentifier:");
}

id objc_msgSend_setLastTouchedDirectTouchElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTouchedDirectTouchElement:");
}

id objc_msgSend_setLastTrackingUpdateAppsFailureApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTrackingUpdateAppsFailureApplication:");
}

id objc_msgSend_setLastTrackingUpdateAppsFailureTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastTrackingUpdateAppsFailureTime:");
}

id objc_msgSend_setLastUsedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUsedActivity:");
}

id objc_msgSend_setLastUsedActivityTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUsedActivityTime:");
}

id objc_msgSend_setLastUserElementTouchTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUserElementTouchTime:");
}

id objc_msgSend_setLastUserInteractionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUserInteractionTime:");
}

id objc_msgSend_setLastVolumeDownButtonDownTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeDownButtonDownTime:");
}

id objc_msgSend_setLastVolumeDownButtonUpTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeDownButtonUpTime:");
}

id objc_msgSend_setLastVolumeUpButtonDownTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeUpButtonDownTime:");
}

id objc_msgSend_setLastVolumeUpButtonUpTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVolumeUpButtonUpTime:");
}

id objc_msgSend_setLaunchContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchContext:");
}

id objc_msgSend_setLeftDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDotPositions:");
}

id objc_msgSend_setLeftDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDots:");
}

id objc_msgSend_setLeftDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeftDrifts:");
}

id objc_msgSend_setLimitToComponentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLimitToComponentType:");
}

id objc_msgSend_setLiveModeValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiveModeValue:");
}

id objc_msgSend_setLiveRegionStatusForWebOrApp_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLiveRegionStatusForWebOrApp:status:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocalizedWebRotorMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalizedWebRotorMap:");
}

id objc_msgSend_setLockScreenDimmingTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLockScreenDimmingTimer:");
}

id objc_msgSend_setLongPressHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongPressHandler:");
}

id objc_msgSend_setMainAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMainAttributedString:");
}

id objc_msgSend_setMapsExplorationGestureManagerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMapsExplorationGestureManagerDelegate:");
}

id objc_msgSend_setMasterStatusCellIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMasterStatusCellIndex:");
}

id objc_msgSend_setMatchBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatchBlock:");
}

id objc_msgSend_setMiddleDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMiddleDot:");
}

id objc_msgSend_setModifiedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiedInput:");
}

id objc_msgSend_setModifierState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifierState:");
}

id objc_msgSend_setModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiers:");
}

id objc_msgSend_setModifiersChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifiersChanged:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setMostRecentElementCommunity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentElementCommunity:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNameSearcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcher:");
}

id objc_msgSend_setNameSearcherHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcherHint:");
}

id objc_msgSend_setNameSearcherMonitorElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNameSearcherMonitorElement:");
}

id objc_msgSend_setNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 setNativeFocus];
}

id objc_msgSend_setNativeFocusElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNativeFocusElement:");
}

id objc_msgSend_setNavigateImagesOption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigateImagesOption:");
}

id objc_msgSend_setNavigationDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationDirection:");
}

id objc_msgSend_setNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNavigationDirectionMode:");
}

id objc_msgSend_setNeedToShowVOWarningBanner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedToShowVOWarningBanner:");
}

id objc_msgSend_setNeedsForceCacheUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsForceCacheUpdate:");
}

id objc_msgSend_setNextElementToFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextElementToFocus:");
}

id objc_msgSend_setNextStringToSpeakOnScreenChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextStringToSpeakOnScreenChange:");
}

id objc_msgSend_setNotificationsWhenLockedOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsWhenLockedOutput:");
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberStyle:");
}

id objc_msgSend_setObject_forIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forIndex:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObject_forVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forVariant:");
}

id objc_msgSend_setOnHold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnHold:");
}

id objc_msgSend_setOrbValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrbValue:");
}

id objc_msgSend_setOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientation:");
}

id objc_msgSend_setOrientationEventsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrientationEventsEnabled:");
}

id objc_msgSend_setOriginalString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalString:");
}

id objc_msgSend_setOriginalType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginalType:");
}

id objc_msgSend_setOriginationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginationType:");
}

id objc_msgSend_setOutputChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputChannels:");
}

id objc_msgSend_setOutputManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputManager:");
}

id objc_msgSend_setOutputRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputRequest:");
}

id objc_msgSend_setOverridePrintBrailleWithAllSixDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverridePrintBrailleWithAllSixDots:");
}

id objc_msgSend_setOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOwner:");
}

id objc_msgSend_setPanEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPanEnabled:");
}

id objc_msgSend_setParticipatesInMutePriority_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setParticipatesInMutePriority:error:");
}

id objc_msgSend_setPassiveOrientationEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassiveOrientationEvents:");
}

id objc_msgSend_setPathIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathIndex:");
}

id objc_msgSend_setPathLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathLocation:");
}

id objc_msgSend_setPathProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPathProximity:");
}

id objc_msgSend_setPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPaths:");
}

id objc_msgSend_setPauseSpeechAndHaptics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPauseSpeechAndHaptics:");
}

id objc_msgSend_setPeeking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeeking:");
}

id objc_msgSend_setPendingDownEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingDownEvent:");
}

id objc_msgSend_setPendingInputString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingInputString:");
}

id objc_msgSend_setPerVoiceSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerVoiceSettings:");
}

id objc_msgSend_setPerformPunctuationTranslation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerformPunctuationTranslation:");
}

id objc_msgSend_setPerkinsKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerkinsKeyboardInputEnabled:");
}

id objc_msgSend_setPersistentKeyModifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentKeyModifiers:");
}

id objc_msgSend_setPhonemes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhonemes:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPitch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPitch:");
}

id objc_msgSend_setPracticeElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPracticeElement:");
}

id objc_msgSend_setPracticeRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPracticeRegion:");
}

id objc_msgSend_setPreference_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreference:forKey:");
}

id objc_msgSend_setPreferenceSync_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferenceSync:forKey:");
}

id objc_msgSend_setPreferredBrailleTableIdentifier_forKeyboardLanguage_keyboardLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredBrailleTableIdentifier:forKeyboardLanguage:keyboardLayout:");
}

id objc_msgSend_setPreferredCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredCharacterSet:");
}

id objc_msgSend_setPreferredOutputLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredOutputLocale:");
}

id objc_msgSend_setPreviousContextDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousContextDescriptors:");
}

id objc_msgSend_setPreviousCustomRotorsForRotorHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousCustomRotorsForRotorHint:");
}

id objc_msgSend_setPreviousElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousElement:");
}

id objc_msgSend_setPreviousRotorVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousRotorVoiceIdentifier:");
}

id objc_msgSend_setPreviousSpokenValueParts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousSpokenValueParts:");
}

id objc_msgSend_setPreviousTableOrCollectionViewApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousTableOrCollectionViewApplication:");
}

id objc_msgSend_setPreviousTouchContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousTouchContainer:");
}

id objc_msgSend_setPreviouslySpokenImageCaptionResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviouslySpokenImageCaptionResults:");
}

id objc_msgSend_setPunctuation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPunctuation:");
}

id objc_msgSend_setQuickNavDownDurationAllowedAcceptance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuickNavDownDurationAllowedAcceptance:");
}

id objc_msgSend_setRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRange:");
}

id objc_msgSend_setRangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRangeBlock:");
}

id objc_msgSend_setRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRate:");
}

id objc_msgSend_setReadAllExplorerElementsTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadAllExplorerElementsTimer:");
}

id objc_msgSend_setRealtime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtime:");
}

id objc_msgSend_setRealtimeBlinkIsUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeBlinkIsUp:");
}

id objc_msgSend_setRealtimeBlinking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeBlinking:");
}

id objc_msgSend_setRealtimeSpinnerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealtimeSpinnerCount:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReleaseDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReleaseDuration:");
}

id objc_msgSend_setRepeaterTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRepeaterTimer:");
}

id objc_msgSend_setReplaceCommas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplaceCommas:");
}

id objc_msgSend_setReplacementString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReplacementString:");
}

id objc_msgSend_setRequestElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestElements:");
}

id objc_msgSend_setRequestHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestHeaders:");
}

id objc_msgSend_setRequestQueueMixinBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestQueueMixinBehavior:");
}

id objc_msgSend_setResolvedSoundPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolvedSoundPath:");
}

id objc_msgSend_setResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolver:");
}

id objc_msgSend_setResolvingEventOccurredBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolvingEventOccurredBlock:");
}

id objc_msgSend_setResultUpdateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultUpdateDelegate:");
}

id objc_msgSend_setRightDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDotPositions:");
}

id objc_msgSend_setRightDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDots:");
}

id objc_msgSend_setRightDrifts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRightDrifts:");
}

id objc_msgSend_setRotationCapabilityEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotationCapabilityEnabled:");
}

id objc_msgSend_setRotorManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotorManager:");
}

id objc_msgSend_setRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotorType:");
}

id objc_msgSend_setRule_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRule:");
}

id objc_msgSend_setScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainEnabled:");
}

id objc_msgSend_setScreenCurtainIsTemporarilyDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainIsTemporarilyDisabled:");
}

id objc_msgSend_setScreenCurtainSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenCurtainSuspended:");
}

id objc_msgSend_setScreenOn_silently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenOn:silently:");
}

id objc_msgSend_setScreenreaderMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScreenreaderMode:");
}

id objc_msgSend_setSearchEndedWithDifferentGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchEndedWithDifferentGroup:");
}

id objc_msgSend_setSearchPending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchPending:");
}

id objc_msgSend_setSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchType:");
}

id objc_msgSend_setSearchUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSearchUUID:");
}

id objc_msgSend_setSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSegment:");
}

id objc_msgSend_setSegmentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSegmentIndex:");
}

id objc_msgSend_setSelectButtonReceivedNotificationObserverToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectButtonReceivedNotificationObserverToken:");
}

id objc_msgSend_setSelectedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedActivity:");
}

id objc_msgSend_setSelectedBrailleGesturesInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleGesturesInputTable:");
}

id objc_msgSend_setSelectedBrailleInputTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleInputTable:");
}

id objc_msgSend_setSelectedBrailleTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedBrailleTable:");
}

id objc_msgSend_setSelectedLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedLanguage:");
}

id objc_msgSend_setSelectedTextRange_refreshBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTextRange:refreshBraille:");
}

id objc_msgSend_setSelectedTextRange_refreshBraille_isVoiceOverSelectionMovement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectedTextRange:refreshBraille:isVoiceOverSelectionMovement:");
}

id objc_msgSend_setSelectionToTextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionToTextMarker:");
}

id objc_msgSend_setSenderBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderBundleID:");
}

id objc_msgSend_setSenderID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderID:");
}

id objc_msgSend_setSenderIsAppExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderIsAppExtension:");
}

id objc_msgSend_setSenderPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSenderPID:");
}

id objc_msgSend_setSeriesOfTouchPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSeriesOfTouchPoints:");
}

id objc_msgSend_setShouldApplyRTL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldApplyRTL:");
}

id objc_msgSend_setShouldEchoCharacter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldEchoCharacter:");
}

id objc_msgSend_setShouldIgnorePreviousFocusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldIgnorePreviousFocusedElement:");
}

id objc_msgSend_setShouldOutputToHearingAid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldOutputToHearingAid:");
}

id objc_msgSend_setShouldPlayKeyboardSecureClickSound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPlayKeyboardSecureClickSound:");
}

id objc_msgSend_setShouldProcessRemotely_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldProcessRemotely:");
}

id objc_msgSend_setShouldSilenceAnnouncements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSilenceAnnouncements:");
}

id objc_msgSend_setShouldSkipValidateElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSkipValidateElement:");
}

id objc_msgSend_setShouldTurnTrackingIntoDirectTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldTurnTrackingIntoDirectTouch:");
}

id objc_msgSend_setShouldUpdateDotPositions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldUpdateDotPositions:");
}

id objc_msgSend_setShowGeneral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowGeneral:");
}

id objc_msgSend_setShowRealtime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowRealtime:");
}

id objc_msgSend_setShowText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowText:");
}

id objc_msgSend_setShowsWebSearchResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowsWebSearchResults:");
}

id objc_msgSend_setSimpleClickHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleClickHandler:");
}

id objc_msgSend_setSingleLetterInputIsOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSingleLetterInputIsOn:");
}

id objc_msgSend_setSingleLetterQuickNavOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSingleLetterQuickNavOn:");
}

id objc_msgSend_setSortPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSortPriority:");
}

id objc_msgSend_setSoundCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundCurtainEnabled:");
}

id objc_msgSend_setSoundMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundMuted:");
}

id objc_msgSend_setSoundThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoundThread:");
}

id objc_msgSend_setSpeakNonfocusableElementsAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakNonfocusableElementsAfterDelay:");
}

id objc_msgSend_setSpeakingDelayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakingDelayTimer:");
}

id objc_msgSend_setSpeakingRateInRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeakingRateInRotor:");
}

id objc_msgSend_setSpeechLogging_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechLogging:");
}

id objc_msgSend_setSpeechMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechMuted:");
}

id objc_msgSend_setSpeechRate_forLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechRate:forLanguage:");
}

id objc_msgSend_setSpeechSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechSource:");
}

id objc_msgSend_setSpeechVoiceIdentifier_forLanguage_sourceKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeechVoiceIdentifier:forLanguage:sourceKey:");
}

id objc_msgSend_setSplitFlickEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitFlickEnabled:");
}

id objc_msgSend_setSplitting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSplitting:");
}

id objc_msgSend_setStartMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartMarker:");
}

id objc_msgSend_setStartedReadingCurrentElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedReadingCurrentElements:");
}

id objc_msgSend_setStartedRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartedRequest:");
}

id objc_msgSend_setStartingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartingRange:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setString_overrideOriginalString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:overrideOriginalString:");
}

id objc_msgSend_setSupplementalBrailleDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupplementalBrailleDescription:");
}

id objc_msgSend_setSupportsHomeGestures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupportsHomeGestures:");
}

id objc_msgSend_setSuppressSelectionChangeNotificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressSelectionChangeNotificationCount:");
}

id objc_msgSend_setSuppressValueChangeNotificationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuppressValueChangeNotificationCount:");
}

id objc_msgSend_setSynchronization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynchronization:");
}

id objc_msgSend_setSynthesizeSilently_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynthesizeSilently:");
}

id objc_msgSend_setSynthesizerForTelephonyMixin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSynthesizerForTelephonyMixin:");
}

id objc_msgSend_setSystemVisualizationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVisualizationState:");
}

id objc_msgSend_setSystemVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVolume:");
}

id objc_msgSend_setSystemVolumeControlsAvailablity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemVolumeControlsAvailablity:");
}

id objc_msgSend_setTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTableIdentifier:");
}

id objc_msgSend_setTapSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTapSpeed:");
}

id objc_msgSend_setTargetThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetThread:");
}

id objc_msgSend_setTelephonyIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTelephonyIsActive:");
}

id objc_msgSend_setTestingHasActiveDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTestingHasActiveDisplay:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextDict:");
}

id objc_msgSend_setTextSearchModeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextSearchModeOn:");
}

id objc_msgSend_setThreadWaitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThreadWaitTime:");
}

id objc_msgSend_setTopDot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopDot:");
}

id objc_msgSend_setTouchContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchContainer:");
}

id objc_msgSend_setTouchForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchForce:");
}

id objc_msgSend_setTouchPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchPoint:");
}

id objc_msgSend_setTouchRawLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchRawLocation:");
}

id objc_msgSend_setTouchVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchVelocity:");
}

id objc_msgSend_setTrailingBookCursorPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrailingBookCursorPosition:");
}

id objc_msgSend_setTransducerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransducerType:");
}

id objc_msgSend_setTriggerSignpostCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerSignpostCollection:");
}

id objc_msgSend_setTutorialActiveRestrictionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialActiveRestrictionType:");
}

id objc_msgSend_setTutorialListeningForGestureNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialListeningForGestureNotifications:");
}

id objc_msgSend_setTutorialPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialPage:");
}

id objc_msgSend_setTutorialRecognizedGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialRecognizedGesture:");
}

id objc_msgSend_setTutorialRestrictedCommands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTutorialRestrictedCommands:");
}

id objc_msgSend_setTvAccessLock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvAccessLock:");
}

id objc_msgSend_setTvGestureRepeater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvGestureRepeater:");
}

id objc_msgSend_setTvInteractionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvInteractionMode:");
}

id objc_msgSend_setTvInteractionModeWithoutSaving_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvInteractionModeWithoutSaving:");
}

id objc_msgSend_setTvIsInteractingWithRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvIsInteractingWithRotor:");
}

id objc_msgSend_setTvSpeechRequestManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTvSpeechRequestManager:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingMode:");
}

id objc_msgSend_setTypingMode_keyboardSize_shouldUseEightDotBraille_shouldReverseDots_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingMode:keyboardSize:shouldUseEightDotBraille:shouldReverseDots:");
}

id objc_msgSend_setTypingPitchChangeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTypingPitchChangeEnabled:");
}

id objc_msgSend_setUiClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiClient:");
}

id objc_msgSend_setUiServerIsReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUiServerIsReady:");
}

id objc_msgSend_setUnDuckingProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnDuckingProperties:");
}

id objc_msgSend_setUnitOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitOptions:");
}

id objc_msgSend_setUnitStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnitStyle:");
}

id objc_msgSend_setUnmodifiedInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnmodifiedInput:");
}

id objc_msgSend_setUpdateDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateDelegate:");
}

id objc_msgSend_setUpdateFocusContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateFocusContext:");
}

id objc_msgSend_setUpdateRotorWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateRotorWithElement:");
}

id objc_msgSend_setUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsage:");
}

id objc_msgSend_setUseDigitalCrownNavigationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDigitalCrownNavigationEnabled:");
}

id objc_msgSend_setUseRingerSwitchForNotificationOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseRingerSwitchForNotificationOutput:");
}

id objc_msgSend_setUserCommandContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandContext:");
}

id objc_msgSend_setUserCommandInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandInitiated:");
}

id objc_msgSend_setUserCommandManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserCommandManager:");
}

id objc_msgSend_setUserDefinedLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefinedLabel:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUserSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserSubstitutions:");
}

id objc_msgSend_setUsesAbsoluteDistanceForPinch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesAbsoluteDistanceForPinch:");
}

id objc_msgSend_setUsesBrailleSubstitutions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesBrailleSubstitutions:");
}

id objc_msgSend_setUsesHapticFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesHapticFeedback:");
}

id objc_msgSend_setUsesTypingSoundFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsesTypingSoundFeedback:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVisionEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisionEngine:");
}

id objc_msgSend_setVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceIdentifier:");
}

id objc_msgSend_setVoiceOverAudioDuckingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverAudioDuckingEnabled:");
}

id objc_msgSend_setVoiceOverBSIUsageCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBSIUsageCount:");
}

id objc_msgSend_setVoiceOverBrailleAutoAdvanceDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleAutoAdvanceDuration:");
}

id objc_msgSend_setVoiceOverBrailleTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleTableIdentifier:");
}

id objc_msgSend_setVoiceOverBrailleWordWrapEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverBrailleWordWrapEnabled:");
}

id objc_msgSend_setVoiceOverCaptionText_withRange_language_voice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverCaptionText:withRange:language:voice:");
}

id objc_msgSend_setVoiceOverCurrentRotorVoiceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverCurrentRotorVoiceIdentifier:");
}

id objc_msgSend_setVoiceOverDescribedMedia_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverDescribedMedia:");
}

id objc_msgSend_setVoiceOverDirectTouchEnabledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverDirectTouchEnabledApps:");
}

id objc_msgSend_setVoiceOverEffectiveSpeakingVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverEffectiveSpeakingVolume:");
}

id objc_msgSend_setVoiceOverExploreFocusAffectsNativeFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverExploreFocusAffectsNativeFocus:");
}

id objc_msgSend_setVoiceOverFocused_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverFocused:");
}

id objc_msgSend_setVoiceOverHardwareTypingFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHardwareTypingFeedback:");
}

id objc_msgSend_setVoiceOverHelpMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHelpMode:");
}

id objc_msgSend_setVoiceOverHintsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverHintsEnabled:");
}

id objc_msgSend_setVoiceOverMediaDuckingAmount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMediaDuckingAmount:");
}

id objc_msgSend_setVoiceOverMediaDuckingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMediaDuckingMode:");
}

id objc_msgSend_setVoiceOverMuted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMuted:");
}

id objc_msgSend_setVoiceOverMuted_sendRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverMuted:sendRequest:");
}

id objc_msgSend_setVoiceOverNavigationDirectionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverNavigationDirectionMode:");
}

id objc_msgSend_setVoiceOverPhoneticsFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPhoneticsFeedback:");
}

id objc_msgSend_setVoiceOverPitchChangeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPitchChangeEnabled:");
}

id objc_msgSend_setVoiceOverPreferredTVInteractionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPreferredTVInteractionMode:");
}

id objc_msgSend_setVoiceOverPunctuationGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverPunctuationGroup:");
}

id objc_msgSend_setVoiceOverRotorItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverRotorItems:");
}

id objc_msgSend_setVoiceOverScreenCurtainEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverScreenCurtainEnabled:");
}

id objc_msgSend_setVoiceOverSelectedActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSelectedActivity:");
}

id objc_msgSend_setVoiceOverSelectedLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSelectedLanguage:");
}

id objc_msgSend_setVoiceOverShouldDisallowUSBRestrictedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverShouldDisallowUSBRestrictedMode:");
}

id objc_msgSend_setVoiceOverShowSoftwareKeyboardWithBraille_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverShowSoftwareKeyboardWithBraille:");
}

id objc_msgSend_setVoiceOverSilenceAnnouncements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSilenceAnnouncements:");
}

id objc_msgSend_setVoiceOverSoundCurtain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSoundCurtain:");
}

id objc_msgSend_setVoiceOverSoundEffectsEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSoundEffectsEnabled:");
}

id objc_msgSend_setVoiceOverSpeakNonfocusableElementsAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSpeakNonfocusableElementsAfterDelay:");
}

id objc_msgSend_setVoiceOverSpeakingRate_forLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverSpeakingRate:forLanguage:");
}

id objc_msgSend_setVoiceOverTouchBrailleDisplayInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleDisplayInputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleDisplayOutputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleDisplayOutputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesDidPlayCalibrationHint:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesInputTableIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesInputTableIdentifier:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesLockedOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesLockedOrientation:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesLockedTypingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesLockedTypingMode:");
}

id objc_msgSend_setVoiceOverTouchBrailleGesturesShouldUseLockedConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchBrailleGesturesShouldUseLockedConfiguration:");
}

id objc_msgSend_setVoiceOverTouchPerkinsChordKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchPerkinsChordKeyboardInputEnabled:");
}

id objc_msgSend_setVoiceOverTouchPerkinsKeyboardInputEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchPerkinsKeyboardInputEnabled:");
}

id objc_msgSend_setVoiceOverTouchSingleLetterQuickNavEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverTouchSingleLetterQuickNavEnabled:");
}

id objc_msgSend_setVoiceOverUseDigitalCrownNavigation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVoiceOverUseDigitalCrownNavigation:");
}

id objc_msgSend_setVolume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolume:");
}

id objc_msgSend_setVolumeTo_forCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeTo:forCategory:");
}

id objc_msgSend_setVolumeTo_forCategory_retainFullMute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVolumeTo:forCategory:retainFullMute:");
}

id objc_msgSend_setVotTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVotTransaction:");
}

id objc_msgSend_setWaitingToRetryFocus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaitingToRetryFocus:");
}

id objc_msgSend_setWarningTonesTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWarningTonesTimer:");
}

id objc_msgSend_setWasDivided_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasDivided:");
}

id objc_msgSend_setWasEnabledThroughAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWasEnabledThroughAccessory:");
}

id objc_msgSend_setWebPageLoadURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebPageLoadURL:");
}

id objc_msgSend_setWebPageLoadedGenerationMark_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebPageLoadedGenerationMark:");
}

id objc_msgSend_setWebsiteLanguageMappingOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebsiteLanguageMappingOverrides:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWordWrapEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWordWrapEnabled:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _[a1 sharedAVSystemController];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _[a1 sharedConnection];
}

id objc_msgSend_sharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 sharedDatabase];
}

id objc_msgSend_sharedInputModeController(void *a1, const char *a2, ...)
{
  return _[a1 sharedInputModeController];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _[a1 sharedPreferences];
}

id objc_msgSend_sharedWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 sharedWorkspace];
}

id objc_msgSend_shouldAddAlternateActionForLinkElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldAddAlternateActionForLinkElement];
}

id objc_msgSend_shouldAllowRotorEvents(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowRotorEvents];
}

id objc_msgSend_shouldAllowSpeaking(void *a1, const char *a2, ...)
{
  return _[a1 shouldAllowSpeaking];
}

id objc_msgSend_shouldAnalyzeElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnalyzeElement:");
}

id objc_msgSend_shouldAnnounceFontInfo(void *a1, const char *a2, ...)
{
  return _[a1 shouldAnnounceFontInfo];
}

id objc_msgSend_shouldAnnounceTableInfo(void *a1, const char *a2, ...)
{
  return _[a1 shouldAnnounceTableInfo];
}

id objc_msgSend_shouldBeDeactivatedByEscape(void *a1, const char *a2, ...)
{
  return _[a1 shouldBeDeactivatedByEscape];
}

id objc_msgSend_shouldEchoCharacter(void *a1, const char *a2, ...)
{
  return _[a1 shouldEchoCharacter];
}

id objc_msgSend_shouldElement_beCombined_combineLinks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldElement:beCombined:combineLinks:");
}

id objc_msgSend_shouldExpandMathEquation(void *a1, const char *a2, ...)
{
  return _[a1 shouldExpandMathEquation];
}

id objc_msgSend_shouldHideCursor(void *a1, const char *a2, ...)
{
  return _[a1 shouldHideCursor];
}

id objc_msgSend_shouldIgnorePreviousFocusedElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnorePreviousFocusedElement];
}

id objc_msgSend_shouldIgnoreTextEditingTrait(void *a1, const char *a2, ...)
{
  return _[a1 shouldIgnoreTextEditingTrait];
}

id objc_msgSend_shouldIncludeMediaDescriptionsRotor(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeMediaDescriptionsRotor];
}

id objc_msgSend_shouldIncludeRegionDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRegionDescription];
}

id objc_msgSend_shouldIncludeRemoteParentCustomActions(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRemoteParentCustomActions];
}

id objc_msgSend_shouldIncludeRowRangeInDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeRowRangeInDescription];
}

id objc_msgSend_shouldPerformSearchSynchronously(void *a1, const char *a2, ...)
{
  return _[a1 shouldPerformSearchSynchronously];
}

id objc_msgSend_shouldPlayHapticForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPlayHapticForEvent:");
}

id objc_msgSend_shouldPlayKeyboardSecureClickSound(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlayKeyboardSecureClickSound];
}

id objc_msgSend_shouldPlaySoundForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPlaySoundForEvent:");
}

id objc_msgSend_shouldPlaySoundWhenFocused(void *a1, const char *a2, ...)
{
  return _[a1 shouldPlaySoundWhenFocused];
}

id objc_msgSend_shouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 shouldReverseDots];
}

id objc_msgSend_shouldSetNativeFocusWhenBecomingCurrentElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldSetNativeFocusWhenBecomingCurrentElement];
}

id objc_msgSend_shouldSilenceAnnouncements(void *a1, const char *a2, ...)
{
  return _[a1 shouldSilenceAnnouncements];
}

id objc_msgSend_shouldSkipImageTraitDescription(void *a1, const char *a2, ...)
{
  return _[a1 shouldSkipImageTraitDescription];
}

id objc_msgSend_shouldSkipValidateElement(void *a1, const char *a2, ...)
{
  return _[a1 shouldSkipValidateElement];
}

id objc_msgSend_shouldSnarfCrown(void *a1, const char *a2, ...)
{
  return _[a1 shouldSnarfCrown];
}

id objc_msgSend_shouldSnarfEventForTapWakeGesture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSnarfEventForTapWakeGesture:");
}

id objc_msgSend_shouldSpeakExplorerElementsAfterFocus(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakExplorerElementsAfterFocus];
}

id objc_msgSend_shouldSpeakHelpInGestureArea(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakHelpInGestureArea];
}

id objc_msgSend_shouldSpeakMathEquationTrait(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakMathEquationTrait];
}

id objc_msgSend_shouldSpeakScrollStatusOnEntry(void *a1, const char *a2, ...)
{
  return _[a1 shouldSpeakScrollStatusOnEntry];
}

id objc_msgSend_shouldStartReadAllOnFocus(void *a1, const char *a2, ...)
{
  return _[a1 shouldStartReadAllOnFocus];
}

id objc_msgSend_shouldTurnTrackingIntoDirectTouch(void *a1, const char *a2, ...)
{
  return _[a1 shouldTurnTrackingIntoDirectTouch];
}

id objc_msgSend_shouldUpdateDotPositions(void *a1, const char *a2, ...)
{
  return _[a1 shouldUpdateDotPositions];
}

id objc_msgSend_shouldUseAVAudioPlayer(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseAVAudioPlayer];
}

id objc_msgSend_shouldUseEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseEightDotBraille];
}

id objc_msgSend_showBrailleUIWithOrientation_dotPositions_typingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBrailleUIWithOrientation:dotPositions:typingMode:");
}

id objc_msgSend_showBulletinBoard_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBulletinBoard:");
}

id objc_msgSend_showControlCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showControlCenter:");
}

id objc_msgSend_showEditingHUD(void *a1, const char *a2, ...)
{
  return _[a1 showEditingHUD];
}

id objc_msgSend_showEightDotBraille(void *a1, const char *a2, ...)
{
  return _[a1 showEightDotBraille];
}

id objc_msgSend_showElementLabelPanel_currentLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showElementLabelPanel:currentLabel:");
}

id objc_msgSend_showGeneral(void *a1, const char *a2, ...)
{
  return _[a1 showGeneral];
}

id objc_msgSend_showItemChooser_withItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showItemChooser:withItems:");
}

id objc_msgSend_showMapsExplorationUIWithCenter_andData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showMapsExplorationUIWithCenter:andData:");
}

id objc_msgSend_showNextAnnouncement(void *a1, const char *a2, ...)
{
  return _[a1 showNextAnnouncement];
}

id objc_msgSend_showNextCandidate(void *a1, const char *a2, ...)
{
  return _[a1 showNextCandidate];
}

id objc_msgSend_showNextWordDescription(void *a1, const char *a2, ...)
{
  return _[a1 showNextWordDescription];
}

id objc_msgSend_showPreviousAnnouncement(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousAnnouncement];
}

id objc_msgSend_showPreviousCandidate(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousCandidate];
}

id objc_msgSend_showPreviousWordDescription(void *a1, const char *a2, ...)
{
  return _[a1 showPreviousWordDescription];
}

id objc_msgSend_showRealtime(void *a1, const char *a2, ...)
{
  return _[a1 showRealtime];
}

id objc_msgSend_showSpringBoardVOConfirmation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSpringBoardVOConfirmation:");
}

id objc_msgSend_showSpringboardNoHomeButtonGestureAlert(void *a1, const char *a2, ...)
{
  return _[a1 showSpringboardNoHomeButtonGestureAlert];
}

id objc_msgSend_showText(void *a1, const char *a2, ...)
{
  return _[a1 showText];
}

id objc_msgSend_showUIServerBasedItemChooser_withItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showUIServerBasedItemChooser:withItems:");
}

id objc_msgSend_showVoiceOverEnabledWarningBanner(void *a1, const char *a2, ...)
{
  return _[a1 showVoiceOverEnabledWarningBanner];
}

id objc_msgSend_showsDualPages(void *a1, const char *a2, ...)
{
  return _[a1 showsDualPages];
}

id objc_msgSend_showsWebSearchResults(void *a1, const char *a2, ...)
{
  return _[a1 showsWebSearchResults];
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _[a1 shutdown];
}

id objc_msgSend_simpleClickHandler(void *a1, const char *a2, ...)
{
  return _[a1 simpleClickHandler];
}

id objc_msgSend_singleLetterCommandForKeyInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleLetterCommandForKeyInfo:");
}

id objc_msgSend_sizeWithAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeWithAttributes:");
}

id objc_msgSend_sleepForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForTimeInterval:");
}

id objc_msgSend_snapshot(void *a1, const char *a2, ...)
{
  return _[a1 snapshot];
}

id objc_msgSend_softwareKeyboardManager(void *a1, const char *a2, ...)
{
  return _[a1 softwareKeyboardManager];
}

id objc_msgSend_sortDirection(void *a1, const char *a2, ...)
{
  return _[a1 sortDirection];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingSelector:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sound_didFinishPlaying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sound:didFinishPlaying:");
}

id objc_msgSend_soundAssetURLForOutputEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "soundAssetURLForOutputEvent:");
}

id objc_msgSend_soundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 soundEffectsEnabled];
}

id objc_msgSend_soundMuted(void *a1, const char *a2, ...)
{
  return _[a1 soundMuted];
}

id objc_msgSend_soundPath(void *a1, const char *a2, ...)
{
  return _[a1 soundPath];
}

id objc_msgSend_soundThread(void *a1, const char *a2, ...)
{
  return _[a1 soundThread];
}

id objc_msgSend_speakCorrectionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 speakCorrectionsEnabled];
}

id objc_msgSend_speakEmojis(void *a1, const char *a2, ...)
{
  return _[a1 speakEmojis];
}

id objc_msgSend_speakNonfocusableElementsAfterDelay(void *a1, const char *a2, ...)
{
  return _[a1 speakNonfocusableElementsAfterDelay];
}

id objc_msgSend_speakSimpleString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakSimpleString:");
}

id objc_msgSend_speakSimpleString_braille_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakSimpleString:braille:language:");
}

id objc_msgSend_speakTableHeadersForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakTableHeadersForElement:");
}

id objc_msgSend_speakTableRowAndColumnForElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakTableRowAndColumnForElement:");
}

id objc_msgSend_speakableCharacters(void *a1, const char *a2, ...)
{
  return _[a1 speakableCharacters];
}

id objc_msgSend_speakableDescription(void *a1, const char *a2, ...)
{
  return _[a1 speakableDescription];
}

id objc_msgSend_speakableSegmentsUpToDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakableSegmentsUpToDepth:");
}

id objc_msgSend_speakableSegmentsWithSpeakingStyle_upToDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speakableSegmentsWithSpeakingStyle:upToDepth:");
}

id objc_msgSend_speakableSummary(void *a1, const char *a2, ...)
{
  return _[a1 speakableSummary];
}

id objc_msgSend_speakingDelayTimer(void *a1, const char *a2, ...)
{
  return _[a1 speakingDelayTimer];
}

id objc_msgSend_speakingRequiresTransliteration(void *a1, const char *a2, ...)
{
  return _[a1 speakingRequiresTransliteration];
}

id objc_msgSend_specificLanguageID(void *a1, const char *a2, ...)
{
  return _[a1 specificLanguageID];
}

id objc_msgSend_speechComponent(void *a1, const char *a2, ...)
{
  return _[a1 speechComponent];
}

id objc_msgSend_speechMarkupStringForType_forIdentifier_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechMarkupStringForType:forIdentifier:string:");
}

id objc_msgSend_speechMuted(void *a1, const char *a2, ...)
{
  return _[a1 speechMuted];
}

id objc_msgSend_speechRate(void *a1, const char *a2, ...)
{
  return _[a1 speechRate];
}

id objc_msgSend_speechRateForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechRateForLanguage:");
}

id objc_msgSend_speechRateFromSettings(void *a1, const char *a2, ...)
{
  return _[a1 speechRateFromSettings];
}

id objc_msgSend_speechSynthesizer_didFinishSpeakingRequest_successfully_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechSynthesizer:didFinishSpeakingRequest:successfully:withError:");
}

id objc_msgSend_speechSynthesizer_willSpeakRangeOfSpeechString_forRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechSynthesizer:willSpeakRangeOfSpeechString:forRequest:");
}

id objc_msgSend_speechVoiceIdentifierForLanguage_sourceKey_exists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechVoiceIdentifierForLanguage:sourceKey:exists:");
}

id objc_msgSend_speechVoiceWithVoiceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speechVoiceWithVoiceId:");
}

id objc_msgSend_spokenStringForDateTimeAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spokenStringForDateTimeAttribute:");
}

id objc_msgSend_springBoardApplication(void *a1, const char *a2, ...)
{
  return _[a1 springBoardApplication];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startBlock(void *a1, const char *a2, ...)
{
  return _[a1 startBlock];
}

id objc_msgSend_startLocation(void *a1, const char *a2, ...)
{
  return _[a1 startLocation];
}

id objc_msgSend_startMarker(void *a1, const char *a2, ...)
{
  return _[a1 startMarker];
}

id objc_msgSend_startServerWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startServerWithError:");
}

id objc_msgSend_startSpeakingString_withLanguageCode_request_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSpeakingString:withLanguageCode:request:error:");
}

id objc_msgSend_startStopToggle(void *a1, const char *a2, ...)
{
  return _[a1 startStopToggle];
}

id objc_msgSend_startTapAndHoldMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTapAndHoldMode:");
}

id objc_msgSend_startedReadingCurrentElements(void *a1, const char *a2, ...)
{
  return _[a1 startedReadingCurrentElements];
}

id objc_msgSend_startingRange(void *a1, const char *a2, ...)
{
  return _[a1 startingRange];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_staticRecognitionText(void *a1, const char *a2, ...)
{
  return _[a1 staticRecognitionText];
}

id objc_msgSend_staticTextString(void *a1, const char *a2, ...)
{
  return _[a1 staticTextString];
}

id objc_msgSend_statusAttributeDotText(void *a1, const char *a2, ...)
{
  return _[a1 statusAttributeDotText];
}

id objc_msgSend_stop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop:");
}

id objc_msgSend_stopPlaying(void *a1, const char *a2, ...)
{
  return _[a1 stopPlaying];
}

id objc_msgSend_stopSpeakingAtBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtBoundary:");
}

id objc_msgSend_stopSpeakingAtBoundary_allRequests_sessionDeactivationDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtBoundary:allRequests:sessionDeactivationDelay:");
}

id objc_msgSend_stopSpeakingAtNextBoundary_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSpeakingAtNextBoundary:error:");
}

id objc_msgSend_storeUserLabel_forIdentification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeUserLabel:forIdentification:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingPathExtension];
}

id objc_msgSend_stringByRemovingEmojiCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingEmojiCharacters:");
}

id objc_msgSend_stringByReplacingCharactersInRange_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingCharactersInRange:withString:");
}

id objc_msgSend_stringByReplacingEmojiCharactersWithEmojiDescriptions_stringForPauses_language_rangeReplacements_appendEmojiSuffix_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "stringByReplacingEmojiCharactersWithEmojiDescriptions:stringForPauses:language:rangeReplacements:appendEmojiSuffix:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForLineNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForLineNumber:");
}

id objc_msgSend_stringForParameterizedAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForParameterizedAttribute:parameter:");
}

id objc_msgSend_stringForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForRotorType:");
}

id objc_msgSend_stringForTextMarkers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForTextMarkers:");
}

id objc_msgSend_stringFromMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromMeasurement:");
}

id objc_msgSend_stringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromNumber:");
}

id objc_msgSend_stringIsInSupportedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsInSupportedCharacters:");
}

id objc_msgSend_stringIsSupported_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsSupported:language:");
}

id objc_msgSend_stringIsTextAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsTextAttachment:");
}

id objc_msgSend_stringReplacingBrailleDotRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringReplacingBrailleDotRanges:");
}

id objc_msgSend_stringShouldSeparateDueToLanguage_language_keyboardLanguageHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringShouldSeparateDueToLanguage:language:keyboardLanguageHint:");
}

id objc_msgSend_stringWithAXAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithAXAttribute:");
}

id objc_msgSend_stringWithBrailleSubstitutions_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithBrailleSubstitutions:withLanguage:");
}

id objc_msgSend_stringWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCharacters:length:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stringWithUnichar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUnichar:");
}

id objc_msgSend_subExpressions(void *a1, const char *a2, ...)
{
  return _[a1 subExpressions];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return _[a1 subtype];
}

id objc_msgSend_supplementalBrailleDescription(void *a1, const char *a2, ...)
{
  return _[a1 supplementalBrailleDescription];
}

id objc_msgSend_supportedLanguageIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 supportedLanguageIfNecessary];
}

id objc_msgSend_supportsActivate(void *a1, const char *a2, ...)
{
  return _[a1 supportsActivate];
}

id objc_msgSend_supportsAudiographActions(void *a1, const char *a2, ...)
{
  return _[a1 supportsAudiographActions];
}

id objc_msgSend_supportsAudiographs(void *a1, const char *a2, ...)
{
  return _[a1 supportsAudiographs];
}

id objc_msgSend_supportsDataSeriesSonification(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataSeriesSonification];
}

id objc_msgSend_supportsDataSeriesSummarization(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataSeriesSummarization];
}

id objc_msgSend_supportsFrameForRange(void *a1, const char *a2, ...)
{
  return _[a1 supportsFrameForRange];
}

id objc_msgSend_supportsHeaderElementOutput(void *a1, const char *a2, ...)
{
  return _[a1 supportsHeaderElementOutput];
}

id objc_msgSend_supportsHomeGestures(void *a1, const char *a2, ...)
{
  return _[a1 supportsHomeGestures];
}

id objc_msgSend_supportsMediaAnalysis(void *a1, const char *a2, ...)
{
  return _[a1 supportsMediaAnalysis];
}

id objc_msgSend_supportsPressedState(void *a1, const char *a2, ...)
{
  return _[a1 supportsPressedState];
}

id objc_msgSend_supportsRangeForLineNumber(void *a1, const char *a2, ...)
{
  return _[a1 supportsRangeForLineNumber];
}

id objc_msgSend_supportsSecondaryActivate(void *a1, const char *a2, ...)
{
  return _[a1 supportsSecondaryActivate];
}

id objc_msgSend_supportsSoundEffect(void *a1, const char *a2, ...)
{
  return _[a1 supportsSoundEffect];
}

id objc_msgSend_supportsTextSelection(void *a1, const char *a2, ...)
{
  return _[a1 supportsTextSelection];
}

id objc_msgSend_supportsTranslationMode8Dot(void *a1, const char *a2, ...)
{
  return _[a1 supportsTranslationMode8Dot];
}

id objc_msgSend_supportsTranslationModeContracted(void *a1, const char *a2, ...)
{
  return _[a1 supportsTranslationModeContracted];
}

id objc_msgSend_suppressCustomActionHint(void *a1, const char *a2, ...)
{
  return _[a1 suppressCustomActionHint];
}

id objc_msgSend_suppressSelectionChangeNotificationCount(void *a1, const char *a2, ...)
{
  return _[a1 suppressSelectionChangeNotificationCount];
}

id objc_msgSend_suppressSpeech(void *a1, const char *a2, ...)
{
  return _[a1 suppressSpeech];
}

id objc_msgSend_suppressValueChangeNotificationCount(void *a1, const char *a2, ...)
{
  return _[a1 suppressValueChangeNotificationCount];
}

id objc_msgSend_symbolCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 symbolCharacterSet];
}

id objc_msgSend_synchronization(void *a1, const char *a2, ...)
{
  return _[a1 synchronization];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synthesizeSilently(void *a1, const char *a2, ...)
{
  return _[a1 synthesizeSilently];
}

id objc_msgSend_synthesizerForTelephonyMixin(void *a1, const char *a2, ...)
{
  return _[a1 synthesizerForTelephonyMixin];
}

id objc_msgSend_systemAppApplication(void *a1, const char *a2, ...)
{
  return _[a1 systemAppApplication];
}

id objc_msgSend_systemApplication(void *a1, const char *a2, ...)
{
  return _[a1 systemApplication];
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemRotorTypeForRotorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRotorTypeForRotorType:");
}

id objc_msgSend_systemRotorTypeForSearchType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemRotorTypeForSearchType:");
}

id objc_msgSend_systemServerDied(void *a1, const char *a2, ...)
{
  return _[a1 systemServerDied];
}

id objc_msgSend_systemServerEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemServerEventWithCommand:info:");
}

id objc_msgSend_systemSpokenLanguage(void *a1, const char *a2, ...)
{
  return _[a1 systemSpokenLanguage];
}

id objc_msgSend_systemSpokenLanguageChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemSpokenLanguageChanged:");
}

id objc_msgSend_systemVisualizationState(void *a1, const char *a2, ...)
{
  return _[a1 systemVisualizationState];
}

id objc_msgSend_systemVolumeControlsAvailablity(void *a1, const char *a2, ...)
{
  return _[a1 systemVolumeControlsAvailablity];
}

id objc_msgSend_systemWideAXUIElement(void *a1, const char *a2, ...)
{
  return _[a1 systemWideAXUIElement];
}

id objc_msgSend_systemWideElement(void *a1, const char *a2, ...)
{
  return _[a1 systemWideElement];
}

id objc_msgSend_tableDimensionStringWithRow_andColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableDimensionStringWithRow:andColumn:");
}

id objc_msgSend_tableHeaders(void *a1, const char *a2, ...)
{
  return _[a1 tableHeaders];
}

id objc_msgSend_tableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 tableIdentifier];
}

id objc_msgSend_tableRowAndColumn(void *a1, const char *a2, ...)
{
  return _[a1 tableRowAndColumn];
}

id objc_msgSend_tableSetCallback(void *a1, const char *a2, ...)
{
  return _[a1 tableSetCallback];
}

id objc_msgSend_takeScreenshot(void *a1, const char *a2, ...)
{
  return _[a1 takeScreenshot];
}

id objc_msgSend_tapAndHoldContextNumbers(void *a1, const char *a2, ...)
{
  return _[a1 tapAndHoldContextNumbers];
}

id objc_msgSend_tapAndHoldMode(void *a1, const char *a2, ...)
{
  return _[a1 tapAndHoldMode];
}

id objc_msgSend_tapCount(void *a1, const char *a2, ...)
{
  return _[a1 tapCount];
}

id objc_msgSend_tapHostContextId(void *a1, const char *a2, ...)
{
  return _[a1 tapHostContextId];
}

id objc_msgSend_tapInterval(void *a1, const char *a2, ...)
{
  return _[a1 tapInterval];
}

id objc_msgSend_tapIsDown(void *a1, const char *a2, ...)
{
  return _[a1 tapIsDown];
}

id objc_msgSend_tapPoint(void *a1, const char *a2, ...)
{
  return _[a1 tapPoint];
}

id objc_msgSend_target(void *a1, const char *a2, ...)
{
  return _[a1 target];
}

id objc_msgSend_targetSelectorWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetSelectorWithTarget:selector:");
}

id objc_msgSend_targetThread(void *a1, const char *a2, ...)
{
  return _[a1 targetThread];
}

id objc_msgSend_telephonyIsActive(void *a1, const char *a2, ...)
{
  return _[a1 telephonyIsActive];
}

id objc_msgSend_temporarilyChangeQuickNavState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temporarilyChangeQuickNavState:");
}

id objc_msgSend_testingBrailleElementLocked(void *a1, const char *a2, ...)
{
  return _[a1 testingBrailleElementLocked];
}

id objc_msgSend_testingEventDispatchTap(void *a1, const char *a2, ...)
{
  return _[a1 testingEventDispatchTap];
}

id objc_msgSend_testingHasActiveDisplay(void *a1, const char *a2, ...)
{
  return _[a1 testingHasActiveDisplay];
}

id objc_msgSend_testingProcessEventCallback(void *a1, const char *a2, ...)
{
  return _[a1 testingProcessEventCallback];
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _[a1 text];
}

id objc_msgSend_textCursorFrame(void *a1, const char *a2, ...)
{
  return _[a1 textCursorFrame];
}

id objc_msgSend_textDetectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 textDetectionEnabled];
}

id objc_msgSend_textDict(void *a1, const char *a2, ...)
{
  return _[a1 textDict];
}

id objc_msgSend_textForBraille_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textForBraille:mode:");
}

id objc_msgSend_textForBraille_parameters_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textForBraille:parameters:withReply:");
}

id objc_msgSend_textInputElement(void *a1, const char *a2, ...)
{
  return _[a1 textInputElement];
}

id objc_msgSend_textInputElementRange(void *a1, const char *a2, ...)
{
  return _[a1 textInputElementRange];
}

id objc_msgSend_textLineEndMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLineEndMarker:");
}

id objc_msgSend_textLineStartMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLineStartMarker:");
}

id objc_msgSend_textMarkerArrayOfText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkerArrayOfText:");
}

id objc_msgSend_textMarkerFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkerFrame:");
}

id objc_msgSend_textMarkerRange(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerRange];
}

id objc_msgSend_textMarkerRangeForSelection(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerRangeForSelection];
}

id objc_msgSend_textMarkerSelectionRange(void *a1, const char *a2, ...)
{
  return _[a1 textMarkerSelectionRange];
}

id objc_msgSend_textMarkersForPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMarkersForPoints:");
}

id objc_msgSend_textNextMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textNextMarker:");
}

id objc_msgSend_textOperations(void *a1, const char *a2, ...)
{
  return _[a1 textOperations];
}

id objc_msgSend_textOperationsAvailable(void *a1, const char *a2, ...)
{
  return _[a1 textOperationsAvailable];
}

id objc_msgSend_textOperationsOperator(void *a1, const char *a2, ...)
{
  return _[a1 textOperationsOperator];
}

id objc_msgSend_textPreviousMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textPreviousMarker:");
}

id objc_msgSend_textReplacements(void *a1, const char *a2, ...)
{
  return _[a1 textReplacements];
}

id objc_msgSend_textSearchModeIsOn(void *a1, const char *a2, ...)
{
  return _[a1 textSearchModeIsOn];
}

id objc_msgSend_textSelectionMovementManager(void *a1, const char *a2, ...)
{
  return _[a1 textSelectionMovementManager];
}

id objc_msgSend_textualContext(void *a1, const char *a2, ...)
{
  return _[a1 textualContext];
}

id objc_msgSend_textualContexts(void *a1, const char *a2, ...)
{
  return _[a1 textualContexts];
}

id objc_msgSend_threadWaitTime(void *a1, const char *a2, ...)
{
  return _[a1 threadWaitTime];
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _[a1 timer];
}

id objc_msgSend_titleElements(void *a1, const char *a2, ...)
{
  return _[a1 titleElements];
}

id objc_msgSend_toggleAudioSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleAudioSessionActive:");
}

id objc_msgSend_toggleControlCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleControlCenter];
}

id objc_msgSend_toggleDock(void *a1, const char *a2, ...)
{
  return _[a1 toggleDock];
}

id objc_msgSend_toggleNotificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 toggleNotificationCenter];
}

id objc_msgSend_toggleReachability(void *a1, const char *a2, ...)
{
  return _[a1 toggleReachability];
}

id objc_msgSend_toggleSpotlight(void *a1, const char *a2, ...)
{
  return _[a1 toggleSpotlight];
}

id objc_msgSend_toggleStatusLabel(void *a1, const char *a2, ...)
{
  return _[a1 toggleStatusLabel];
}

id objc_msgSend_toggleVoiceOverModifierKeyLock(void *a1, const char *a2, ...)
{
  return _[a1 toggleVoiceOverModifierKeyLock];
}

id objc_msgSend_topDot(void *a1, const char *a2, ...)
{
  return _[a1 topDot];
}

id objc_msgSend_touchContainer(void *a1, const char *a2, ...)
{
  return _[a1 touchContainer];
}

id objc_msgSend_touchContainerAXElement(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerAXElement];
}

id objc_msgSend_touchContainerParent(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerParent];
}

id objc_msgSend_touchContainerParentAXElement(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerParentAXElement];
}

id objc_msgSend_touchContainerShouldOutputBraille(void *a1, const char *a2, ...)
{
  return _[a1 touchContainerShouldOutputBraille];
}

id objc_msgSend_touchEventOccurred_inTVDirectTouch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchEventOccurred:inTVDirectTouch:");
}

id objc_msgSend_touchEventWithCommand_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchEventWithCommand:info:");
}

id objc_msgSend_touchForce(void *a1, const char *a2, ...)
{
  return _[a1 touchForce];
}

id objc_msgSend_touchPadRepresentationWithHandType_normalizedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchPadRepresentationWithHandType:normalizedLocation:");
}

id objc_msgSend_touchPoint(void *a1, const char *a2, ...)
{
  return _[a1 touchPoint];
}

id objc_msgSend_touchRawLocation(void *a1, const char *a2, ...)
{
  return _[a1 touchRawLocation];
}

id objc_msgSend_touchRepresentationWithHandType_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touchRepresentationWithHandType:location:");
}

id objc_msgSend_traits(void *a1, const char *a2, ...)
{
  return _[a1 traits];
}

id objc_msgSend_transducerType(void *a1, const char *a2, ...)
{
  return _[a1 transducerType];
}

id objc_msgSend_transferHeadersFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferHeadersFrom:");
}

id objc_msgSend_translateBrailleToClipboard(void *a1, const char *a2, ...)
{
  return _[a1 translateBrailleToClipboard];
}

id objc_msgSend_translateExistingInputWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translateExistingInputWithMode:");
}

id objc_msgSend_translateKeycode(void *a1, const char *a2, ...)
{
  return _[a1 translateKeycode];
}

id objc_msgSend_translatedTextForPrintBraille_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextForPrintBraille:mode:");
}

id objc_msgSend_translatedTextForPrintBraille_mode_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextForPrintBraille:mode:buffer:");
}

id objc_msgSend_translatedTextOfBufferWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedTextOfBufferWithMode:");
}

id objc_msgSend_translationOverride(void *a1, const char *a2, ...)
{
  return _[a1 translationOverride];
}

id objc_msgSend_translationService(void *a1, const char *a2, ...)
{
  return _[a1 translationService];
}

id objc_msgSend_transliteratedStringForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transliteratedStringForString:");
}

id objc_msgSend_triggerSignpostCollection(void *a1, const char *a2, ...)
{
  return _[a1 triggerSignpostCollection];
}

id objc_msgSend_triggerWithImageAssetLocalIdentifier_photoLibraryURL_options_cacheKey_resultHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageAssetLocalIdentifier:photoLibraryURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageURL_assetLocalIdentifier_photoLibraryURL_options_cacheKey_resultHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageURL:assetLocalIdentifier:photoLibraryURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithImageURL_options_cacheKey_resultHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithImageURL:options:cacheKey:resultHandler:");
}

id objc_msgSend_triggerWithScreenCaptureRegion_interfaceOrientation_options_cacheKey_resultHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithScreenCaptureRegion:interfaceOrientation:options:cacheKey:resultHandler:");
}

id objc_msgSend_tutorialActiveRestrictionType(void *a1, const char *a2, ...)
{
  return _[a1 tutorialActiveRestrictionType];
}

id objc_msgSend_tutorialListeningForGestureNotifications(void *a1, const char *a2, ...)
{
  return _[a1 tutorialListeningForGestureNotifications];
}

id objc_msgSend_tutorialPage(void *a1, const char *a2, ...)
{
  return _[a1 tutorialPage];
}

id objc_msgSend_tutorialRecognizedGesture(void *a1, const char *a2, ...)
{
  return _[a1 tutorialRecognizedGesture];
}

id objc_msgSend_tutorialRestrictedCommands(void *a1, const char *a2, ...)
{
  return _[a1 tutorialRestrictedCommands];
}

id objc_msgSend_tvGestureRepeater(void *a1, const char *a2, ...)
{
  return _[a1 tvGestureRepeater];
}

id objc_msgSend_tvInteractionMode(void *a1, const char *a2, ...)
{
  return _[a1 tvInteractionMode];
}

id objc_msgSend_tvIsInteractingWithRotor(void *a1, const char *a2, ...)
{
  return _[a1 tvIsInteractingWithRotor];
}

id objc_msgSend_tvSpeechRequestManager(void *a1, const char *a2, ...)
{
  return _[a1 tvSpeechRequestManager];
}

id objc_msgSend_tvTouchPadRegion(void *a1, const char *a2, ...)
{
  return _[a1 tvTouchPadRegion];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typingCandidateElements(void *a1, const char *a2, ...)
{
  return _[a1 typingCandidateElements];
}

id objc_msgSend_typingMode(void *a1, const char *a2, ...)
{
  return _[a1 typingMode];
}

id objc_msgSend_typingPitchChangeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 typingPitchChangeEnabled];
}

id objc_msgSend_typingStyle(void *a1, const char *a2, ...)
{
  return _[a1 typingStyle];
}

id objc_msgSend_uiApplicationAtCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationAtCoordinate:");
}

id objc_msgSend_uiApplicationForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationForContext:");
}

id objc_msgSend_uiApplicationWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiApplicationWithPid:");
}

id objc_msgSend_uiClient(void *a1, const char *a2, ...)
{
  return _[a1 uiClient];
}

id objc_msgSend_uiElement(void *a1, const char *a2, ...)
{
  return _[a1 uiElement];
}

id objc_msgSend_uiElementAtCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:");
}

id objc_msgSend_uiElementAtCoordinate_forApplication_contextId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:forApplication:contextId:");
}

id objc_msgSend_uiElementAtCoordinate_startWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementAtCoordinate:startWithElement:");
}

id objc_msgSend_uiElementWithAXElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementWithAXElement:");
}

id objc_msgSend_uiElementWithAXElement_cache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementWithAXElement:cache:");
}

id objc_msgSend_uiElementsWithAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementsWithAttribute:");
}

id objc_msgSend_uiElementsWithAttribute_parameter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uiElementsWithAttribute:parameter:");
}

id objc_msgSend_uiServerIsReady(void *a1, const char *a2, ...)
{
  return _[a1 uiServerIsReady];
}

id objc_msgSend_uiSystemWideApplication(void *a1, const char *a2, ...)
{
  return _[a1 uiSystemWideApplication];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unicode(void *a1, const char *a2, ...)
{
  return _[a1 unicode];
}

id objc_msgSend_uniqueIdentification(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentification];
}

id objc_msgSend_unitTestDelegate(void *a1, const char *a2, ...)
{
  return _[a1 unitTestDelegate];
}

id objc_msgSend_unitTestSpeechRate(void *a1, const char *a2, ...)
{
  return _[a1 unitTestSpeechRate];
}

id objc_msgSend_unitTestSystemSpokenLanguage(void *a1, const char *a2, ...)
{
  return _[a1 unitTestSystemSpokenLanguage];
}

id objc_msgSend_unlearnLastGesture(void *a1, const char *a2, ...)
{
  return _[a1 unlearnLastGesture];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_unmodifiedInput(void *a1, const char *a2, ...)
{
  return _[a1 unmodifiedInput];
}

id objc_msgSend_unmuteEligibleEventOccured(void *a1, const char *a2, ...)
{
  return _[a1 unmuteEligibleEventOccured];
}

id objc_msgSend_unregisterForEvents(void *a1, const char *a2, ...)
{
  return _[a1 unregisterForEvents];
}

id objc_msgSend_unsetEventCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsetEventCaptureMode:");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_upcomingRoadsAtPoint_withDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upcomingRoadsAtPoint:withDirection:");
}

id objc_msgSend_updateAudioSessionProperties(void *a1, const char *a2, ...)
{
  return _[a1 updateAudioSessionProperties];
}

id objc_msgSend_updateAudioSessionProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAudioSessionProperties:");
}

id objc_msgSend_updateBrailleInputSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleInputSettings];
}

id objc_msgSend_updateBrailleLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleLanguage];
}

id objc_msgSend_updateBrailleOutputSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateBrailleOutputSettings];
}

id objc_msgSend_updateBrailleUIWithOrientation_dotPositions_typingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBrailleUIWithOrientation:dotPositions:typingMode:");
}

id objc_msgSend_updateCache(void *a1, const char *a2, ...)
{
  return _[a1 updateCache];
}

id objc_msgSend_updateCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCache:");
}

id objc_msgSend_updateCacheWithElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCacheWithElement:");
}

id objc_msgSend_updateCenterPoint(void *a1, const char *a2, ...)
{
  return _[a1 updateCenterPoint];
}

id objc_msgSend_updateCurrentLocation(void *a1, const char *a2, ...)
{
  return _[a1 updateCurrentLocation];
}

id objc_msgSend_updateCustomPublicRotors(void *a1, const char *a2, ...)
{
  return _[a1 updateCustomPublicRotors];
}

id objc_msgSend_updateDriftWithPattern_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDriftWithPattern:");
}

id objc_msgSend_updateDuckingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDuckingMode:");
}

id objc_msgSend_updateEquivalenceTag(void *a1, const char *a2, ...)
{
  return _[a1 updateEquivalenceTag];
}

id objc_msgSend_updateExpandedStatus(void *a1, const char *a2, ...)
{
  return _[a1 updateExpandedStatus];
}

id objc_msgSend_updateExplorationSegments(void *a1, const char *a2, ...)
{
  return _[a1 updateExplorationSegments];
}

id objc_msgSend_updateFlowToElements(void *a1, const char *a2, ...)
{
  return _[a1 updateFlowToElements];
}

id objc_msgSend_updateFocusComplete(void *a1, const char *a2, ...)
{
  return _[a1 updateFocusComplete];
}

id objc_msgSend_updateFocusContext(void *a1, const char *a2, ...)
{
  return _[a1 updateFocusContext];
}

id objc_msgSend_updateFrame(void *a1, const char *a2, ...)
{
  return _[a1 updateFrame];
}

id objc_msgSend_updateGesturedTextInputAttributes(void *a1, const char *a2, ...)
{
  return _[a1 updateGesturedTextInputAttributes];
}

id objc_msgSend_updateHeadersAndElementsWithTarget_ignoreLastUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHeadersAndElementsWithTarget:ignoreLastUpdate:");
}

id objc_msgSend_updateHint(void *a1, const char *a2, ...)
{
  return _[a1 updateHint];
}

id objc_msgSend_updateIndexesForOutputRange_segment_direction_outputStringLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIndexesForOutputRange:segment:direction:outputStringLength:");
}

id objc_msgSend_updateIsVisible(void *a1, const char *a2, ...)
{
  return _[a1 updateIsVisible];
}

id objc_msgSend_updateKeyboardElement(void *a1, const char *a2, ...)
{
  return _[a1 updateKeyboardElement];
}

id objc_msgSend_updateKeyboardSettings(void *a1, const char *a2, ...)
{
  return _[a1 updateKeyboardSettings];
}

id objc_msgSend_updateLabel(void *a1, const char *a2, ...)
{
  return _[a1 updateLabel];
}

id objc_msgSend_updateLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateLanguage];
}

id objc_msgSend_updateMapsExplorationUIWithCurrentCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMapsExplorationUIWithCurrentCenter:");
}

id objc_msgSend_updateMapsExplorationUIWithCurrentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMapsExplorationUIWithCurrentLocation:");
}

id objc_msgSend_updateMatchingItems(void *a1, const char *a2, ...)
{
  return _[a1 updateMatchingItems];
}

id objc_msgSend_updateNavigationModeForClassicRemote(void *a1, const char *a2, ...)
{
  return _[a1 updateNavigationModeForClassicRemote];
}

id objc_msgSend_updateOrientation(void *a1, const char *a2, ...)
{
  return _[a1 updateOrientation];
}

id objc_msgSend_updatePageContent(void *a1, const char *a2, ...)
{
  return _[a1 updatePageContent];
}

id objc_msgSend_updatePaths(void *a1, const char *a2, ...)
{
  return _[a1 updatePaths];
}

id objc_msgSend_updateQuickNavState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateQuickNavState:");
}

id objc_msgSend_updateRealtimeElements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRealtimeElements:");
}

id objc_msgSend_updateRoleDescription(void *a1, const char *a2, ...)
{
  return _[a1 updateRoleDescription];
}

id objc_msgSend_updateRotorForCurrentElement_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRotorForCurrentElement:completion:");
}

id objc_msgSend_updateRotorForElement_shouldPreserveRotorNavigation_firstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:");
}

id objc_msgSend_updateRotorWithElement(void *a1, const char *a2, ...)
{
  return _[a1 updateRotorWithElement];
}

id objc_msgSend_updateSelectedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 updateSelectedLanguage];
}

id objc_msgSend_updateSupportedLanguageMap(void *a1, const char *a2, ...)
{
  return _[a1 updateSupportedLanguageMap];
}

id objc_msgSend_updateTitleElements(void *a1, const char *a2, ...)
{
  return _[a1 updateTitleElements];
}

id objc_msgSend_updateTouchForceSounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTouchForceSounds:");
}

id objc_msgSend_updateTraits(void *a1, const char *a2, ...)
{
  return _[a1 updateTraits];
}

id objc_msgSend_updateTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 updateTypingMode];
}

id objc_msgSend_updateUsesNemethForMath(void *a1, const char *a2, ...)
{
  return _[a1 updateUsesNemethForMath];
}

id objc_msgSend_updateValue(void *a1, const char *a2, ...)
{
  return _[a1 updateValue];
}

id objc_msgSend_updateVisiblePoint(void *a1, const char *a2, ...)
{
  return _[a1 updateVisiblePoint];
}

id objc_msgSend_updateVisualRotor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisualRotor:");
}

id objc_msgSend_updateWindowContextId(void *a1, const char *a2, ...)
{
  return _[a1 updateWindowContextId];
}

id objc_msgSend_updateWithCurrentRoute(void *a1, const char *a2, ...)
{
  return _[a1 updateWithCurrentRoute];
}

id objc_msgSend_updateWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithEvent:");
}

id objc_msgSend_updateWithExplorerElements_focusedElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithExplorerElements:focusedElement:");
}

id objc_msgSend_updateWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithString:");
}

id objc_msgSend_updatedWebRotorItemsCallback(void *a1, const char *a2, ...)
{
  return _[a1 updatedWebRotorItemsCallback];
}

id objc_msgSend_uppercaseLetterCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseLetterCharacterSet];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_urlLabel(void *a1, const char *a2, ...)
{
  return _[a1 urlLabel];
}

id objc_msgSend_usage(void *a1, const char *a2, ...)
{
  return _[a1 usage];
}

id objc_msgSend_usagePage(void *a1, const char *a2, ...)
{
  return _[a1 usagePage];
}

id objc_msgSend_useDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 useDigitalCrownNavigation];
}

id objc_msgSend_useElementAtPositionAfterActivation(void *a1, const char *a2, ...)
{
  return _[a1 useElementAtPositionAfterActivation];
}

id objc_msgSend_useRingerSwitchForNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 useRingerSwitchForNotificationOutput];
}

id objc_msgSend_userBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userBoolValueForSetting:");
}

id objc_msgSend_userCommandContext(void *a1, const char *a2, ...)
{
  return _[a1 userCommandContext];
}

id objc_msgSend_userCommandInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userCommandInitiated];
}

id objc_msgSend_userCommandManager(void *a1, const char *a2, ...)
{
  return _[a1 userCommandManager];
}

id objc_msgSend_userDefinedLabel(void *a1, const char *a2, ...)
{
  return _[a1 userDefinedLabel];
}

id objc_msgSend_userEventOccurred(void *a1, const char *a2, ...)
{
  return _[a1 userEventOccurred];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userInitiated(void *a1, const char *a2, ...)
{
  return _[a1 userInitiated];
}

id objc_msgSend_userInteractedWithDevice(void *a1, const char *a2, ...)
{
  return _[a1 userInteractedWithDevice];
}

id objc_msgSend_userLabelForIdentification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userLabelForIdentification:");
}

id objc_msgSend_userLocale(void *a1, const char *a2, ...)
{
  return _[a1 userLocale];
}

id objc_msgSend_userRecentlyUnlockedDevice(void *a1, const char *a2, ...)
{
  return _[a1 userRecentlyUnlockedDevice];
}

id objc_msgSend_userUnlockedDevice(void *a1, const char *a2, ...)
{
  return _[a1 userUnlockedDevice];
}

id objc_msgSend_usesDisplayManager(void *a1, const char *a2, ...)
{
  return _[a1 usesDisplayManager];
}

id objc_msgSend_usesHapticFeedback(void *a1, const char *a2, ...)
{
  return _[a1 usesHapticFeedback];
}

id objc_msgSend_usesTypingSoundFeedback(void *a1, const char *a2, ...)
{
  return _[a1 usesTypingSoundFeedback];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_value_withObjCType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value:withObjCType:");
}

id objc_msgSend_valueChangeOriginator(void *a1, const char *a2, ...)
{
  return _[a1 valueChangeOriginator];
}

id objc_msgSend_valueDescriptionForPlayheadPosition(void *a1, const char *a2, ...)
{
  return _[a1 valueDescriptionForPlayheadPosition];
}

id objc_msgSend_valueForBlock_forThreadKey_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForBlock:forThreadKey:waitTime:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueForKeyPath_forThreadKey_waitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:forThreadKey:waitTime:");
}

id objc_msgSend_valueForRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForRange:");
}

id objc_msgSend_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGPoint:");
}

id objc_msgSend_valueWithPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPoint:");
}

id objc_msgSend_valueWithPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithPointer:");
}

id objc_msgSend_valueWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithRange:");
}

id objc_msgSend_valueWithRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithRect:");
}

id objc_msgSend_valueWithUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithUpdate:");
}

id objc_msgSend_velocity(void *a1, const char *a2, ...)
{
  return _[a1 velocity];
}

id objc_msgSend_verifyElementExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifyElementExists:");
}

id objc_msgSend_visibleFrame(void *a1, const char *a2, ...)
{
  return _[a1 visibleFrame];
}

id objc_msgSend_visibleOpaqueElements(void *a1, const char *a2, ...)
{
  return _[a1 visibleOpaqueElements];
}

id objc_msgSend_visiblePoint(void *a1, const char *a2, ...)
{
  return _[a1 visiblePoint];
}

id objc_msgSend_visibleText(void *a1, const char *a2, ...)
{
  return _[a1 visibleText];
}

id objc_msgSend_visionEngine(void *a1, const char *a2, ...)
{
  return _[a1 visionEngine];
}

id objc_msgSend_voiceData(void *a1, const char *a2, ...)
{
  return _[a1 voiceData];
}

id objc_msgSend_voiceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceForIdentifier:");
}

id objc_msgSend_voiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceIdentifier];
}

id objc_msgSend_voiceOverActionFeedbackFirstInListOnly(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActionFeedbackFirstInListOnly];
}

id objc_msgSend_voiceOverActionsFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActionsFeedback];
}

id objc_msgSend_voiceOverActivities(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverActivities];
}

id objc_msgSend_voiceOverAdjustSoundVolumeIndependently(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAdjustSoundVolumeIndependently];
}

id objc_msgSend_voiceOverAlwaysUseNemethCodeForMathEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAlwaysUseNemethCodeForMathEnabled];
}

id objc_msgSend_voiceOverAudioDuckingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAudioDuckingEnabled];
}

id objc_msgSend_voiceOverAudioFollowsHDMIAudio(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAudioFollowsHDMIAudio];
}

id objc_msgSend_voiceOverAutomaticButtonLabels(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverAutomaticButtonLabels];
}

id objc_msgSend_voiceOverBSIUsageCount(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBSIUsageCount];
}

id objc_msgSend_voiceOverBannerNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBannerNotificationOutput];
}

id objc_msgSend_voiceOverBrailleAlertDisplayDuration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertDisplayDuration];
}

id objc_msgSend_voiceOverBrailleAlertShowUntilDismissed(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertShowUntilDismissed];
}

id objc_msgSend_voiceOverBrailleAlertsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAlertsEnabled];
}

id objc_msgSend_voiceOverBrailleAutoAdvanceDuration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleAutoAdvanceDuration];
}

id objc_msgSend_voiceOverBrailleFormattingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleFormattingEnabled];
}

id objc_msgSend_voiceOverBrailleGesturesTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleGesturesTypingFeedback];
}

id objc_msgSend_voiceOverBrailleGradeTwoAutoTranslateEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleGradeTwoAutoTranslateEnabled];
}

id objc_msgSend_voiceOverBrailleKeyDebounceTimeout(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleKeyDebounceTimeout];
}

id objc_msgSend_voiceOverBrailleLanguageRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleLanguageRotorItems];
}

id objc_msgSend_voiceOverBrailleWordWrapEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverBrailleWordWrapEnabled];
}

id objc_msgSend_voiceOverCapitalLetterFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverCapitalLetterFeedback];
}

id objc_msgSend_voiceOverContainerOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContainerOutputFeedback];
}

id objc_msgSend_voiceOverContentDescriptionLevel(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContentDescriptionLevel];
}

id objc_msgSend_voiceOverContinuousPathKeyboardStartTimeout(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverContinuousPathKeyboardStartTimeout];
}

id objc_msgSend_voiceOverCurrentRotorVoiceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverCurrentRotorVoiceIdentifier];
}

id objc_msgSend_voiceOverDefaultPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDefaultPunctuationGroup];
}

id objc_msgSend_voiceOverDelayUntilSpeakUnderTouch(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDelayUntilSpeakUnderTouch];
}

id objc_msgSend_voiceOverDeletionFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDeletionFeedback];
}

id objc_msgSend_voiceOverDescribedMedia(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDescribedMedia];
}

id objc_msgSend_voiceOverDidRegisterWithSystem(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDidRegisterWithSystem];
}

id objc_msgSend_voiceOverDidSpeak_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceOverDidSpeak:");
}

id objc_msgSend_voiceOverDirectTouchEnabledApps(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDirectTouchEnabledApps];
}

id objc_msgSend_voiceOverDiscoveredSensitiveContentFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDiscoveredSensitiveContentFeedback];
}

id objc_msgSend_voiceOverDoubleTapInterval(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverDoubleTapInterval];
}

id objc_msgSend_voiceOverEffectiveSpeakingVolume(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverEffectiveSpeakingVolume];
}

id objc_msgSend_voiceOverExploreFocusAffectsNativeFocus(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverExploreFocusAffectsNativeFocus];
}

id objc_msgSend_voiceOverHandGesturesActionCustomizations(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHandGesturesActionCustomizations];
}

id objc_msgSend_voiceOverHardwareTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHardwareTypingFeedback];
}

id objc_msgSend_voiceOverHelpMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHelpMode];
}

id objc_msgSend_voiceOverHintsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverHintsEnabled];
}

id objc_msgSend_voiceOverImageCaptionsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverImageCaptionsEnabled];
}

id objc_msgSend_voiceOverInlineTextCompletionAppearanceFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverInlineTextCompletionAppearanceFeedback];
}

id objc_msgSend_voiceOverIsConfirmed(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverIsConfirmed];
}

id objc_msgSend_voiceOverIsIdle(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverIsIdle];
}

id objc_msgSend_voiceOverKeyboardModifierChoice(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverKeyboardModifierChoice];
}

id objc_msgSend_voiceOverLanguageDetectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLanguageDetectionEnabled];
}

id objc_msgSend_voiceOverLinkFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLinkFeedback];
}

id objc_msgSend_voiceOverLockedScreenNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverLockedScreenNotificationOutput];
}

id objc_msgSend_voiceOverMediaDuckingAmount(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingAmount];
}

id objc_msgSend_voiceOverMediaDuckingMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMediaDuckingMode];
}

id objc_msgSend_voiceOverMoreContentOutputFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMoreContentOutputFeedback];
}

id objc_msgSend_voiceOverMuted(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverMuted];
}

id objc_msgSend_voiceOverNavigateImagesOption(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNavigateImagesOption];
}

id objc_msgSend_voiceOverNavigationDirectionMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNavigationDirectionMode];
}

id objc_msgSend_voiceOverNeuralElementFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNeuralElementFeedback];
}

id objc_msgSend_voiceOverNumberFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverNumberFeedback];
}

id objc_msgSend_voiceOverPhoneticsFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPhoneticsFeedback];
}

id objc_msgSend_voiceOverPitchChangeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPitchChangeEnabled];
}

id objc_msgSend_voiceOverPreferredTVInteractionMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPreferredTVInteractionMode];
}

id objc_msgSend_voiceOverPrefersFollowFocusNavigationStyle(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPrefersFollowFocusNavigationStyle];
}

id objc_msgSend_voiceOverPunctuationGroup(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverPunctuationGroup];
}

id objc_msgSend_voiceOverQuickNavAnnouncementFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverQuickNavAnnouncementFeedback];
}

id objc_msgSend_voiceOverRotorItems(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorItems];
}

id objc_msgSend_voiceOverRotorSummaryFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorSummaryFeedback];
}

id objc_msgSend_voiceOverRotorUpdatesWithElement(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverRotorUpdatesWithElement];
}

id objc_msgSend_voiceOverScreenCurtainEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverScreenCurtainEnabled];
}

id objc_msgSend_voiceOverSelectedActivity(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSelectedActivity];
}

id objc_msgSend_voiceOverSelectedLanguage(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSelectedLanguage];
}

id objc_msgSend_voiceOverShouldDisallowUSBRestrictedMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldDisallowUSBRestrictedMode];
}

id objc_msgSend_voiceOverShouldOutputToHearingAid(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldOutputToHearingAid];
}

id objc_msgSend_voiceOverShouldSpeakDiscoveredText(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShouldSpeakDiscoveredText];
}

id objc_msgSend_voiceOverShowSoftwareKeyboardWithBraille(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverShowSoftwareKeyboardWithBraille];
}

id objc_msgSend_voiceOverSilenceAnnouncements(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSilenceAnnouncements];
}

id objc_msgSend_voiceOverSoftwareTypingFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoftwareTypingFeedback];
}

id objc_msgSend_voiceOverSoundCurtain(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundCurtain];
}

id objc_msgSend_voiceOverSoundEffectsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundEffectsEnabled];
}

id objc_msgSend_voiceOverSoundVolume(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSoundVolume];
}

id objc_msgSend_voiceOverSpeakNonfocusableElementsAfterDelay(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakNonfocusableElementsAfterDelay];
}

id objc_msgSend_voiceOverSpeakTableColumnRowInformation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakTableColumnRowInformation];
}

id objc_msgSend_voiceOverSpeakTableHeaders(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakTableHeaders];
}

id objc_msgSend_voiceOverSpeakingRateForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceOverSpeakingRateForLanguage:");
}

id objc_msgSend_voiceOverSpeakingRateInRotorEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeakingRateInRotorEnabled];
}

id objc_msgSend_voiceOverSpeaksOverTelephoneCalls(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverSpeaksOverTelephoneCalls];
}

id objc_msgSend_voiceOverTapticTimeMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTapticTimeMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayInputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayInputMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayInputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayInputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleDisplayOutputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayOutputMode];
}

id objc_msgSend_voiceOverTouchBrailleDisplayOutputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplayOutputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleDisplaySyncInputOutputTables(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleDisplaySyncInputOutputTables];
}

id objc_msgSend_voiceOverTouchBrailleGesturesActivationGestureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesActivationGestureEnabled];
}

id objc_msgSend_voiceOverTouchBrailleGesturesDidPlayCalibrationHint(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesDidPlayCalibrationHint];
}

id objc_msgSend_voiceOverTouchBrailleGesturesDisplaysEnteredText(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesDisplaysEnteredText];
}

id objc_msgSend_voiceOverTouchBrailleGesturesInputMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesInputMode];
}

id objc_msgSend_voiceOverTouchBrailleGesturesInputTableIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesInputTableIdentifier];
}

id objc_msgSend_voiceOverTouchBrailleGesturesLockedOrientation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesLockedOrientation];
}

id objc_msgSend_voiceOverTouchBrailleGesturesLockedTypingMode(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesLockedTypingMode];
}

id objc_msgSend_voiceOverTouchBrailleGesturesShouldUseLockedConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesShouldUseLockedConfiguration];
}

id objc_msgSend_voiceOverTouchBrailleGesturesSoundOption(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesSoundOption];
}

id objc_msgSend_voiceOverTouchBrailleGesturesUsesHapticFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesUsesHapticFeedback];
}

id objc_msgSend_voiceOverTouchBrailleGesturesUsesTypingSoundFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleGesturesUsesTypingSoundFeedback];
}

id objc_msgSend_voiceOverTouchBraillePanningAutoTurnsReadingContent(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBraillePanningAutoTurnsReadingContent];
}

id objc_msgSend_voiceOverTouchBrailleShouldReverseDots(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShouldReverseDots];
}

id objc_msgSend_voiceOverTouchBrailleShowGeneralStatus(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShowGeneralStatus];
}

id objc_msgSend_voiceOverTouchBrailleShowTextStyleStatus(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchBrailleShowTextStyleStatus];
}

id objc_msgSend_voiceOverTouchDidLaunch(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchDidLaunch];
}

id objc_msgSend_voiceOverTouchPerkinsChordKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchPerkinsChordKeyboardInputEnabled];
}

id objc_msgSend_voiceOverTouchPerkinsKeyboardInputEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchPerkinsKeyboardInputEnabled];
}

id objc_msgSend_voiceOverTouchSingleLetterQuickNavEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchSingleLetterQuickNavEnabled];
}

id objc_msgSend_voiceOverTouchUpdateBrailleWithoutConnectedDisplay(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverTouchUpdateBrailleWithoutConnectedDisplay];
}

id objc_msgSend_voiceOverTutorialEventCommandTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "voiceOverTutorialEventCommandTriggered:");
}

id objc_msgSend_voiceOverUseDigitalCrownNavigation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseDigitalCrownNavigation];
}

id objc_msgSend_voiceOverUseRingerSwitchToControlNotificationOutput(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseRingerSwitchToControlNotificationOutput];
}

id objc_msgSend_voiceOverUseTVToggleStyleNavigation(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUseTVToggleStyleNavigation];
}

id objc_msgSend_voiceOverUserDidReadUSBRestrictedModeAlert(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverUserDidReadUSBRestrictedModeAlert];
}

id objc_msgSend_voiceOverVerbosityEmojiFeedback(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverVerbosityEmojiFeedback];
}

id objc_msgSend_voiceOverVerbosityEmojiSuffixEnabled(void *a1, const char *a2, ...)
{
  return _[a1 voiceOverVerbosityEmojiSuffixEnabled];
}

id objc_msgSend_voiceSettings(void *a1, const char *a2, ...)
{
  return _[a1 voiceSettings];
}

id objc_msgSend_volume(void *a1, const char *a2, ...)
{
  return _[a1 volume];
}

id objc_msgSend_votActionForEdgePanGestureState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "votActionForEdgePanGestureState:");
}

id objc_msgSend_votEventCommandName(void *a1, const char *a2, ...)
{
  return _[a1 votEventCommandName];
}

id objc_msgSend_votSettings(void *a1, const char *a2, ...)
{
  return _[a1 votSettings];
}

id objc_msgSend_waitUntilDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waitUntilDate:");
}

id objc_msgSend_waitingToRetryFocus(void *a1, const char *a2, ...)
{
  return _[a1 waitingToRetryFocus];
}

id objc_msgSend_wakeUpDeviceIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 wakeUpDeviceIfNecessary];
}

id objc_msgSend_wantsToStayActive(void *a1, const char *a2, ...)
{
  return _[a1 wantsToStayActive];
}

id objc_msgSend_warm(void *a1, const char *a2, ...)
{
  return _[a1 warm];
}

id objc_msgSend_warningTonesTimer(void *a1, const char *a2, ...)
{
  return _[a1 warningTonesTimer];
}

id objc_msgSend_wasCachePurged(void *a1, const char *a2, ...)
{
  return _[a1 wasCachePurged];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_webAreaURL(void *a1, const char *a2, ...)
{
  return _[a1 webAreaURL];
}

id objc_msgSend_webCustomRotorDictionary_direction_forElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webCustomRotorDictionary:direction:forElement:");
}

id objc_msgSend_webEditableAncestor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webEditableAncestor:");
}

id objc_msgSend_webPageLoadURL(void *a1, const char *a2, ...)
{
  return _[a1 webPageLoadURL];
}

id objc_msgSend_webPageLoadedGenerationMark(void *a1, const char *a2, ...)
{
  return _[a1 webPageLoadedGenerationMark];
}

id objc_msgSend_webSearchResultsActive(void *a1, const char *a2, ...)
{
  return _[a1 webSearchResultsActive];
}

id objc_msgSend_websiteLanguageMappingOverrides(void *a1, const char *a2, ...)
{
  return _[a1 websiteLanguageMappingOverrides];
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _[a1 whiteColor];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceCharacterSet];
}

id objc_msgSend_whitespaceNewlineAndSpecialCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceNewlineAndSpecialCharacterSet];
}

id objc_msgSend_willBeginReadAll_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willBeginReadAll:");
}

id objc_msgSend_willPlayheadPositionChangePassGridline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willPlayheadPositionChangePassGridline:");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _[a1 window];
}

id objc_msgSend_windowContextIDs(void *a1, const char *a2, ...)
{
  return _[a1 windowContextIDs];
}

id objc_msgSend_windowContextId(void *a1, const char *a2, ...)
{
  return _[a1 windowContextId];
}

id objc_msgSend_windowContextIdForPress(void *a1, const char *a2, ...)
{
  return _[a1 windowContextIdForPress];
}

id objc_msgSend_windowContextIdImmediateRemoteParent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowContextIdImmediateRemoteParent:");
}

id objc_msgSend_windowSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 windowSceneIdentifier];
}

id objc_msgSend_wordBreakCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 wordBreakCharacterSet];
}

id objc_msgSend_wordBreakSet(void *a1, const char *a2, ...)
{
  return _[a1 wordBreakSet];
}

id objc_msgSend_wordFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wordFromPosition:inDirection:");
}

id objc_msgSend_wordStringFromPosition_inDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wordStringFromPosition:inDirection:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_xGridlinePositions(void *a1, const char *a2, ...)
{
  return _[a1 xGridlinePositions];
}

id objc_msgSend_zoomCurrentLensMode(void *a1, const char *a2, ...)
{
  return _[a1 zoomCurrentLensMode];
}

id objc_msgSend_zoomFrameOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomFrameOnDisplay:");
}

id objc_msgSend_zoomInAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomInAtLocation:");
}

id objc_msgSend_zoomLevelOnDisplay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomLevelOnDisplay:");
}

id objc_msgSend_zoomOutAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoomOutAtLocation:");
}