@interface VOTElementManager
+ (void)_exitThread:(id)a3;
+ (void)initialize;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserAllSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserCharacterSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserLineSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserPageSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5;
- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserWordSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5;
- ($0B56E7081CBE040606E62B6BB81BA072)_appInfoForCurrentElement;
- (AXCameraSceneDescriber)cameraSceneDescriber;
- (BOOL)_addApplicationLabelsAndSummariesToRequest:(id)a3 applicationNames:(id *)a4 summaryElements:(id *)a5;
- (BOOL)_addElementCommunityNameIfNeededToRequest:(id)a3 oldElementCommunity:(id)a4 newElementCommunity:(id)a5;
- (BOOL)_bookContentElementInteraction:(CGPoint)a3 element:(id)a4;
- (BOOL)_bundleIdentifierIsHostedByPineBoard:(id)a3;
- (BOOL)_canActivateTapticTime;
- (BOOL)_chartElementDidChangeForElement:(id)a3 oldElement:(id)a4;
- (BOOL)_continueTrackingKeyboardKey:(id)a3;
- (BOOL)_continueTrackingRoadElementWithPoint:(CGPoint)a3;
- (BOOL)_customRotorTypeRequiresFirstElementProcessing:(id)a3;
- (BOOL)_didFocusUpdateOriginateFromFocusedApp:(id)a3;
- (BOOL)_echoLineInElement:(id)a3 forEvent:(id)a4 forDifferentElement:(BOOL)a5;
- (BOOL)_elementMonitoringOutputElement:(id)a3 userMonitored:(BOOL)a4;
- (BOOL)_finishHandlingMoveToElementNotification:(id)a3 shouldSyncNativeFocusElement:(id)a4 shouldEchoSameTouchContainer:(id)a5 shouldScrollToElement:(id)a6 shouldPlayTrackingSound:(id)a7 shouldRefocusIfSameElement:(id)a8;
- (BOOL)_flashlightNotificationsEnabled;
- (BOOL)_handleBookNavigateOverPageBoundary:(int64_t)a3 unit:(int64_t)a4;
- (BOOL)_handleMoreBookContentElements;
- (BOOL)_handleMovementForElementFollowingElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 mode:(int64_t)a6;
- (BOOL)_handleNextAutofill:(id)a3 reverse:(BOOL)a4;
- (BOOL)_handleSimulatedLongPress:(id)a3;
- (BOOL)_hasApplicationMatchingBlock:(id)a3 inApplications:(id)a4;
- (BOOL)_hasCurrentApplicationMatchingBlock:(id)a3;
- (BOOL)_ignoreTextEditingNotificationsForPickerElementUsage;
- (BOOL)_inMisspelledWordRotor;
- (BOOL)_isDictationInProgressForCurrentApp;
- (BOOL)_isElementValidForFirstResponder:(id)a3;
- (BOOL)_isKeyboardLineMovement;
- (BOOL)_isPoint:(CGPoint)a3 withinRangeForDividerElement:(id)a4;
- (BOOL)_isShowingTodayViewForPhone;
- (BOOL)_isTouchTypingEventTooCloseToEdge:(id)a3;
- (BOOL)_isWebAppStillOpen;
- (BOOL)_languageRotorItemsContainLanguage:(id)a3;
- (BOOL)_moveElementToFlowTo:(id)a3;
- (BOOL)_moveToWebItemDuringLoadIfNecessary;
- (BOOL)_needsPhoneticBrailleForLanauge:(id)a3;
- (BOOL)_notificationData:(id)a3 containsToken:(id)a4;
- (BOOL)_prepareElementOutputHeaders:(id)a3 currentElement:(id)a4 request:(id)a5;
- (BOOL)_prepareStitchedWebReadAll:(id)a3 request:(id)a4 setCurrentElement:(BOOL *)a5;
- (BOOL)_processWatchSpecificOverrides:(id)a3;
- (BOOL)_reDispatchUpdateAppFromTimerIfBundlesAreNotReady;
- (BOOL)_rotorTypeSupportsCounting:(int64_t)a3;
- (BOOL)_savedDescriptionToPhoto:(id)a3 description:(id)a4 element:(id)a5;
- (BOOL)_sendTVRemoteCommandOverrideForAXCommand:(int64_t)a3;
- (BOOL)_setCurrentElement:(id)a3;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7;
- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7 shouldSetBrailleElement:(BOOL)a8;
- (BOOL)_setCurrentElement:(id)a3 shouldSetBrailleElement:(id)a4;
- (BOOL)_shouldAllowSpeakThisGesture;
- (BOOL)_shouldAnnounceCustomRotorHintForElement:(id)a3;
- (BOOL)_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:(id)a3;
- (BOOL)_shouldIgnoreElementMovementNotification:(id)a3;
- (BOOL)_shouldIncludeContainerInDescriptionForCurrentElement:(id)a3 previousElement:(id)a4;
- (BOOL)_shouldMoveToLastWebFormControl;
- (BOOL)_shouldNotSpeakForIncomingCall;
- (BOOL)_shouldSendTapStraightToSystem;
- (BOOL)_shouldSuppressSpeechForPlayPause;
- (BOOL)_shouldSwitchToFirstResponder:(id)a3;
- (BOOL)_touchContainerDidChangeForElement:(id)a3 oldElement:(id)a4;
- (BOOL)_updateCursorAfterPressForElement:(id)a3 currentElementRange:(_NSRange)a4 request:(id)a5 didHaveCursor:(BOOL)a6 doesHaveCursor:(BOOL)a7;
- (BOOL)_updateWithMostRecentElementCommunity:(id)a3;
- (BOOL)_useLineFrameBoundsForTouch:(id)a3;
- (BOOL)allowsSystemControlEventForPosition:(int)a3;
- (BOOL)avoidAnnouncingDirectTouchArea;
- (BOOL)commandPermittedForTutorialPage:(id)a3;
- (BOOL)currentElementAllowsDirectTouch;
- (BOOL)customRotorActionsEqual:(id)a3 otherActions:(id)a4 ignoreDragItems:(BOOL)a5;
- (BOOL)determineFullImageDescriptionsEnabled:(id)a3;
- (BOOL)determineSceneDetectionsEnabled:(id)a3;
- (BOOL)didCacheSideAppDividerElement;
- (BOOL)didIgnoreLastFirstResponderChangeOnSelectionChange;
- (BOOL)didReceiveForceUpdateChangeToken;
- (BOOL)directTouchModeHandledEvent:(id)a3;
- (BOOL)elementEligibleToFindTitleElement:(id)a3;
- (BOOL)eventIsSystemEvent:(id)a3;
- (BOOL)exploreFocusAffectsNativeFocus;
- (BOOL)explorerElementManagerShouldBeInUnitTestingMode:(id)a3;
- (BOOL)forceRotorOffGesturedTextInputIfNeeded:(BOOL)a3;
- (BOOL)handleTVMenuButtonClicked;
- (BOOL)handleTVSelectButtonClicked;
- (BOOL)inDirectTouchMode;
- (BOOL)inTextSelection;
- (BOOL)isItemChooserVisible;
- (BOOL)isOnElementManagerThread;
- (BOOL)isReadingAll;
- (BOOL)isTutorialActive;
- (BOOL)isUpdatingFocus;
- (BOOL)mlElement:(id)a3 sharesLabel:(id)a4;
- (BOOL)needsUpdateFocus;
- (BOOL)rotorEnabled;
- (BOOL)screenCurtainIsTemporarilyDisabled;
- (BOOL)selectingRightward;
- (BOOL)shouldAllowSpeaking;
- (BOOL)shouldElement:(id)a3 beCombined:(id)a4 combineLinks:(BOOL)a5;
- (BOOL)shouldSilenceAnnouncements;
- (BOOL)shouldSnarfCrown;
- (BOOL)shouldTurnTrackingIntoDirectTouch;
- (BOOL)shouldTutorialIgnoreCommand:(id)a3;
- (BOOL)speakNonfocusableElementsAfterDelay;
- (BOOL)speakTableHeadersForElement:(id)a3;
- (BOOL)speakTableRowAndColumnForElement:(id)a3;
- (BOOL)stringIsTextAttachment:(id)a3;
- (BOOL)tutorialListeningForGestureNotifications;
- (BOOL)tvIsInteractingWithRotor;
- (BOOL)unitTestingMode;
- (BOOL)waitingToRetryFocus;
- (CGRect)currentLineFrame;
- (NSArray)cachedAdditionalElementCommunities;
- (NSArray)previouslySpokenImageCaptionResults;
- (NSDictionary)currentContextDescriptors;
- (NSDictionary)previousContextDescriptors;
- (NSLock)tvAccessLock;
- (NSMutableArray)previousTableOrCollectionViewList;
- (NSMutableArray)tutorialRestrictedCommands;
- (NSMutableDictionary)directTouchApps;
- (NSMutableDictionary)fingersFromTouchCommands;
- (NSMutableDictionary)previousTableOrCollectionViewToMetadata;
- (NSSet)previousCustomRotorsForRotorHint;
- (NSString)lastEventCommand;
- (NSString)lastItemChooserSearchTerm;
- (NSString)nextStringToSpeakOnScreenChange;
- (NSString)previousFirstResponderValue;
- (NSString)springBoardActionHandlerIdentifier;
- (NSString)tutorialPage;
- (NSString)tutorialRecognizedGesture;
- (NSURL)webPageLoadURL;
- (SCRCTargetSelectorTimer)webPageElementFinder;
- (VOTElement)cachedSideAppDividerElement;
- (VOTElement)firstTrackedAppInGesture;
- (VOTElement)initialReadAllElement;
- (VOTElement)lastContainerForCustomRotorHint;
- (VOTElement)lastElementForAttemptToShowContextMenu;
- (VOTElement)lastTrackingUpdateAppsFailureApplication;
- (VOTElement)mostRecentElementCommunity;
- (VOTElement)nativeFocusElement;
- (VOTElement)nextElementToFocus;
- (VOTElement)previousFirstResponder;
- (VOTElement)previousTableOrCollectionViewApplication;
- (VOTElement)touchContainer;
- (VOTElementManager)init;
- (VOTElementUpdateProtocol)updateDelegate;
- (VOTExplorerElementManager)explorerElementManager;
- (VOTOutputRequest)delayedNotificationAnnouncementRequest;
- (VOTOutputRequest)lastRequestBlockedBySiriOrDictation;
- (VOTTVGestureRepeater)tvGestureRepeater;
- (VOTTVSpeechRequestManager)tvSpeechRequestManager;
- (VOTTextMovementManager)textSelectionMovementManager;
- (VOTUpdateFocusContext)updateFocusContext;
- (_NSRange)_characterRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5;
- (_NSRange)_elementSelectionRange;
- (_NSRange)_highlightedCharacterRange;
- (_NSRange)_lineRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5;
- (_NSRange)_outputRangeForCharacterSegment:(id)a3 direction:(int64_t)a4;
- (_NSRange)_rangeOfLine:(id)a3 inBookContent:(id)a4;
- (_NSRange)outputRangeForTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6;
- (__AXUIElement)_firstResponderAXUIElementRefFromCurrentApplications;
- (double)_alternativeKeyActivateTime;
- (double)_brailleAutoAdvanceStepFactor;
- (double)_pressActionResultDelay;
- (double)_realTimeAdjustableUpdateFrequency:(id)a3;
- (double)continuousPathTimeout;
- (double)keyboardKeyPenumbra:(id)a3;
- (double)lastActivationTime;
- (double)lastAlertTime;
- (double)lastAttemptToShowContextMenuTime;
- (double)lastBlockedRequestBySiriOrDictationTime;
- (double)lastCursorBorderHitTime;
- (double)lastDuckingDisablementSessionStart;
- (double)lastElementChangeTime;
- (double)lastEventOccurredTime;
- (double)lastExternalUnlockTime;
- (double)lastFirstResponderChangeTime;
- (double)lastFolderOperationTime;
- (double)lastHomeButtonPressTime;
- (double)lastLayoutChangeNotificationTime;
- (double)lastNothingSoundTime;
- (double)lastPauseSpeechAndHapticsStart;
- (double)lastPressOnMediaSessionElement;
- (double)lastScreenChangeNotificationTime;
- (double)lastScreenWakeViaPlayPause;
- (double)lastSearchForElementsTime;
- (double)lastSelectionChangeTime;
- (double)lastSilencedAlertTime;
- (double)lastTemporaryQuickNavDisableTime;
- (double)lastTrackingUpdateAppsFailureTime;
- (double)lastUserElementTouchTime;
- (double)lastValueChangeTime;
- (double)lastWebPageLoadTime;
- (double)timeSpentOnNothing;
- (double)touchTypingStartTime;
- (id)__consumeAppTransitionForAnnouncingIfNeeded:(id)a3;
- (id)__targetElementForFocusElement:(id)a3 mustBeAccessibilityElement:(BOOL)a4;
- (id)_additionalElementCommunities;
- (id)_allElementCommunitiesWithFocusedApplications:(id)a3;
- (id)_applicationMatchingBlock:(id)a3 inApplications:(id)a4;
- (id)_audioDuckingModeString;
- (id)_brailleAutoAdvanceSpeedString;
- (id)_cachedLaunchIcon:(id)a3;
- (id)_checkDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5;
- (id)_computeChangedFontAttributes:(id)a3 storedAttributes:(id)a4 haveMisspellCheck:(BOOL)a5;
- (id)_convertTextMarkerArrayToString:(id)a3 addInContentExtras:(BOOL)a4;
- (id)_copyMatchBlockAnyElement;
- (id)_copyMatchBlockArticleStart;
- (id)_copyMatchBlockBlockquote;
- (id)_copyMatchBlockButton;
- (id)_copyMatchBlockCheckbox;
- (id)_copyMatchBlockDifferent;
- (id)_copyMatchBlockForHeadingLevel:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockForRotorType:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockForTextAttribute:(int64_t)a3 searchType:(int64_t *)a4;
- (id)_copyMatchBlockFormElement;
- (id)_copyMatchBlockFrameStart;
- (id)_copyMatchBlockHeader;
- (id)_copyMatchBlockImage;
- (id)_copyMatchBlockInternalLink;
- (id)_copyMatchBlockLandmarkStart;
- (id)_copyMatchBlockLink;
- (id)_copyMatchBlockListStart;
- (id)_copyMatchBlockNonVisitedLink;
- (id)_copyMatchBlockRadioButton;
- (id)_copyMatchBlockSameBlockquote;
- (id)_copyMatchBlockSameHeading;
- (id)_copyMatchBlockSearchField;
- (id)_copyMatchBlockSearchText;
- (id)_copyMatchBlockSimilar;
- (id)_copyMatchBlockStaticText;
- (id)_copyMatchBlockTableStart;
- (id)_copyMatchBlockTextField;
- (id)_copyMatchBlockVisitedLink;
- (id)_copyRangeMatchBlockForRotorType:(int64_t)a3;
- (id)_copySideAppDividerElementIfApplicableForPoint:(CGPoint)a3;
- (id)_currentApplicationMatchingBlock:(id)a3;
- (id)_currentCachedCustomActionCategories;
- (id)_currentCustomActionCategory;
- (id)_currentCustomActions;
- (id)_currentElement;
- (id)_currentElementAtCenterPointOfElement:(id)a3;
- (id)_currentMedusaApplications;
- (id)_currentResponder;
- (id)_currentRotorSelection;
- (id)_currentTextLineInBookElement:(BOOL)a3;
- (id)_customActionDefaultActionString;
- (id)_customActionIdentifier;
- (id)_customActionsAddingDragCancelActionIfNecessaryForActions:(id)a3;
- (id)_dockElementForDisplay;
- (id)_echoDifferentTouchContainer:(id)a3 forEvent:(id)a4;
- (id)_elementCommunityForElement:(id)a3;
- (id)_elementToFocusWhenSwitchingToElementCommunity:(id)a3;
- (id)_fetchManager;
- (id)_firstElementForFocusFromElementCommunities:(id)a3 currentElement:(id)a4;
- (id)_firstElementWithCurrentElement:(id)a3 focusedApplications:(id)a4;
- (id)_firstResponderForApplications:(id)a3;
- (id)_firstResponderFromCurrentApplications;
- (id)_focusElementForFocusUpdate:(id)a3;
- (id)_fontDisplayNameForFontName:(id)a3;
- (id)_getAutoSpeakWatchFaceElements:(id)a3;
- (id)_getNewElementExplorer;
- (id)_getNextFocusedElementInElementCommunityPrevious:(BOOL)a3 shouldUseCache:(BOOL)a4 shouldWrapAround:(BOOL)a5;
- (id)_getSpeakableContainerForContainer:(id)a3;
- (id)_handleEditingStyleResolutionForAnnouncement:(id)a3;
- (id)_handleProtectedAppLogicForEvent:(id)a3 element:(id)a4 point:(CGPoint)a5;
- (id)_languageNameForCode:(id)a3;
- (id)_lastApplication;
- (id)_lastSeenFontProperties;
- (id)_listItemLabelForAXAttributedString:(id)a3;
- (id)_localizedTypingModeStringForCurrentMode;
- (id)_monitoredElementCachedText:(id)a3;
- (id)_navigationDirectionModeString:(int64_t)a3;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5;
- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5 itemCheckCount:(int64_t)a6;
- (id)_nearestScrollableElement:(id)a3;
- (id)_nearestWebElement:(id)a3;
- (id)_notificationData:(id)a3 consumingToken:(id)a4;
- (id)_orderedMonitoredFontAttributes;
- (id)_phoneticStringForLetter:(id)a3 language:(id)a4;
- (id)_retrieveCachedFocusedElementForElementCommunity:(id)a3;
- (id)_retrieveCurrentCharacterFromEditableElement;
- (id)_retrieveDefaultElementForPosition:(CGPoint)a3;
- (id)_sideAppDividerElement;
- (id)_similarMonitoredElement:(id)a3;
- (id)_sonarElementFromPoint:(CGPoint)a3 inForwardDirection:(BOOL)a4 limit:(int64_t)a5;
- (id)_sonarElementInForwardDirection:(BOOL)a3 limit:(int64_t)a4;
- (id)_speechPhoneticsString;
- (id)_textAttachmentElementForString:(id)a3 inRange:(_NSRange)a4;
- (id)_treePositionForMathSegment:(id)a3;
- (id)_typingEchoString;
- (id)_updateTouchContainerForElement:(id)a3 playSound:(BOOL)a4;
- (id)_valueForKeyPathOnElementManagerThread:(id)a3;
- (id)_verifiedElementWithElement:(id)a3;
- (id)_verifiedElementWithElement:(id)a3 atPoint:(CGPoint)a4;
- (id)availableAudiographActionsForElement:(id)a3;
- (id)continuousPathSuggestion;
- (id)currentApplications;
- (id)currentElement;
- (id)currentElementChangedCallback;
- (id)determineActivityForElement:(id)a3;
- (id)elementManagerHandledEventCallback;
- (id)elementRotor;
- (id)focusedApplication:(id)a3;
- (id)webCustomRotorDictionary:(id)a3 direction:(int64_t)a4 forElement:(id)a5;
- (id)webEditableAncestor:(id)a3;
- (int)cancelElementCountOutput;
- (int64_t)_adjustedRotorIndex:(int64_t)a3 inDirection:(int64_t)a4 rotorItems:(id)a5 validationBlock:(id)a6;
- (int64_t)_customActionIndex;
- (int64_t)_newNavigationDirectionModeForRotorDirection:(int64_t)a3;
- (int64_t)_tvOS_userPreferredNonDirectTouchInteractionMode;
- (int64_t)actionsRotorAddBehaviorForElementRotor:(id)a3;
- (int64_t)currentRotorType;
- (int64_t)focusRetryAttempts;
- (int64_t)forceUpdateMask;
- (int64_t)lastElementBlockquoteLevel;
- (int64_t)lastElementChangeAction;
- (int64_t)lastElementHeadingLevel;
- (int64_t)modifierKeyChoiceForElement:(id)a3;
- (int64_t)tutorialActiveRestrictionType;
- (int64_t)tvInteractionModeForElementRotor:(id)a3;
- (int64_t)typingFeedbackForKeyboardType;
- (unint64_t)_currentMathGranularityLevel;
- (unint64_t)currentSimilarTraits;
- (unint64_t)elementGeneration;
- (unint64_t)filterTraitsByPriority:(unint64_t)a3;
- (unint64_t)lastTextPressAction;
- (unint64_t)webPageLoadedGenerationMark;
- (void)__handleExpandedStatusChanged;
- (void)__handleTVMenuButtonClicked;
- (void)__handleTVSelectButtonClicked;
- (void)__handleUpdateVisualsTimer;
- (void)__interruptSpeachAndPlayBorderHitSound;
- (void)__retrieveValueForKeyPath:(id)a3 intoPointedToLocation:(id)a4 semaphore:(id)a5;
- (void)__sendHIDEvents:(id)a3 postEventDelays:(id)a4;
- (void)__sendOutputRequest:(id)a3;
- (void)__sendTVRemoteCommand:(unint64_t)a3;
- (void)__tvOS_HandleToggleNavigationStyle:(id)a3;
- (void)__tvOS_handleUpdatePreferredTVInteractionModeTimer;
- (void)__tvOS_handleValueChangedWithType:(id)a3 oldValue:(id)a4 newValue:(id)a5 insertedTextOrNil:(id)a6 isSecureText:(BOOL)a7;
- (void)__tvOS_toggleAudioDescriptions;
- (void)__tvOS_toggleExploreFocusAffectsNativeFocusPreference;
- (void)__tvOS_toggleSilenceAnnouncementsUserPreference;
- (void)__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference;
- (void)__updateElementVisuals;
- (void)__updateVoiceOverEnabledWarningBannerVisibility;
- (void)_activateAlternativeKeyboardKey:(id)a3;
- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5;
- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5 lastSeenContextDescriptors:(id)a6;
- (void)_addFormattedStringToRequest:(id)a3 formattedString:(id)a4 withElement:(id)a5;
- (void)_appSuspensionSoundTimer;
- (void)_appendCurrentRotorValue:(id)a3 forRotor:(id)a4;
- (void)_cacheFocusedElement:(id)a3 forElementCommunity:(id)a4;
- (void)_cancelPreviousElementSearch;
- (void)_captionsDisplayedWithTextRuns:(id)a3;
- (void)_cleanupMapInteractionOnIdle;
- (void)_cleanupStateForUnitTesting;
- (void)_clearWebLoadedSound;
- (void)_closeItemChooser;
- (void)_continueReadAllWithElement:(id)a3 setCurrentElement:(BOOL *)a4;
- (void)_continuousPathIdleTimer:(id)a3;
- (void)_customPublicRotorMatchForType:(id)a3 range:(_NSRange *)a4 element:(id *)a5 direction:(int64_t)a6 lastSearchUUID:(id *)a7;
- (void)_deactivateGesturedTextInputIfNeeded:(id)a3;
- (void)_didDismissItemChooser;
- (void)_disableQuickNavStateTemporarily;
- (void)_dismissAlternativeKeyboardKeys;
- (void)_drawTouchContainerFrame;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 canSetAsCurrentElement:(BOOL)a6 shouldPlayGuideWireSound:(BOOL)a7 isProtectedApp:(BOOL)a8 includeHint:(BOOL)a9 boundaryHit:(BOOL)a10;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6;
- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6 isProtectedApp:(BOOL)a7;
- (void)_echoFlickNavigationElement:(id)a3;
- (void)_echoLineInBookElement:(id)a3 forEvent:(id)a4;
- (void)_echoNoElementForEvent:(id)a3;
- (void)_echoSameElement:(id)a3 forEvent:(id)a4;
- (void)_echoSearchNavigationElement:(id)a3 forRangeAdjustment:(BOOL)a4;
- (void)_echoSearchTypeNotFound:(int64_t)a3;
- (void)_echoStatusBarStatus:(id)a3;
- (void)_elementFetchFoundDirectTouchElements:(id)a3;
- (void)_elementFetchFoundElement:(id)a3;
- (void)_elementSelectionRangeDidChange:(_NSRange)a3 reason:(int64_t)a4;
- (void)_elementUpdatesFrequently;
- (void)_elementsRetrieved:(id)a3 finished:(id)a4;
- (void)_endNativeSliding:(BOOL)a3;
- (void)_endTextSearchMode;
- (void)_fetchElementsFrom:(id)a3 inDirection:(id)a4 count:(id)a5 scroll:(id)a6 block:(id)a7;
- (void)_finishHandlingLineMovementInWeb:(id)a3 direction:(id)a4 withCurrentElement:(id)a5 markerArray:(id)a6 textObjects:(id)a7 existingRequest:(id)a8;
- (void)_finishHandlingNextAutofillWithElement:(id)a3;
- (void)_finishPassthroughMode;
- (void)_forceVisionRefresh;
- (void)_formatRequestForBrailleAlertConditional:(id)a3;
- (void)_handleActivateBrailleScreenInput:(id)a3;
- (void)_handleActivateHomeButton:(id)a3;
- (void)_handleActivityRotorChange:(BOOL)a3;
- (void)_handleAdjustTextSelectionSegmentType:(id)a3;
- (void)_handleAdjustValue:(id)a3 reverse:(BOOL)a4;
- (void)_handleAlertReceived:(id)a3 forApplication:(__AXUIElement *)a4;
- (void)_handleAnnounceQuickNav:(id)a3;
- (void)_handleAnnouncement:(id)a3;
- (void)_handleAnnouncementNotification:(id)a3;
- (void)_handleAnnouncementWithData:(id)a3 pid:(int)a4;
- (void)_handleAppSuspendAnimationProgressNotification:(id)a3;
- (void)_handleAppSwitch:(id)a3;
- (void)_handleApplicationWasActivated:(id)a3;
- (void)_handleAudioDestination:(BOOL)a3;
- (void)_handleAudioDuckingAmountChange:(BOOL)a3;
- (void)_handleAudioDuckingChange:(BOOL)a3;
- (void)_handleAudioDuckingModeChange:(BOOL)a3;
- (void)_handleAudiographAction:(int64_t)a3 event:(id)a4;
- (void)_handleAudiographPlaybackStateNotification:(id)a3;
- (void)_handleAudiographSelectedSeriesChangedNotification:(id)a3;
- (void)_handleAutoCorrectionDisplayNotification:(id)a3;
- (void)_handleAutoCorrectionMadeNotification:(id)a3;
- (void)_handleAutomationGeneratedChordChangeEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchCancelEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchDownEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchMoveEvent:(id)a3;
- (void)_handleAutomationGeneratedTouchUpEvent:(id)a3;
- (void)_handleBSINextRotor:(id)a3;
- (void)_handleBSIPreviousRotor:(id)a3;
- (void)_handleBarcodeVisibilityNotification:(id)a3;
- (void)_handleBookContentMovement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 generateOutput:(BOOL)a6;
- (void)_handleBookPageFlipAndContinue;
- (void)_handleBrailleDecreaseAutoAdvanceSpeed:(id)a3;
- (void)_handleBrailleEnableAutoAdvance:(id)a3;
- (void)_handleBrailleEvent:(id)a3;
- (void)_handleBrailleIncreaseAutoAdvanceSpeed:(id)a3;
- (void)_handleBrailleRefreshEvent:(id)a3;
- (void)_handleBrailleWordWrapToggleEvent:(id)a3;
- (void)_handleCameraCenteredNotification:(id)a3;
- (void)_handleCancelSpeaking:(id)a3;
- (void)_handleCaptionsDisplayedNotification:(id)a3;
- (void)_handleChangeAudioDuckingMode:(id)a3;
- (void)_handleCharacterMovement:(id)a3;
- (void)_handleColumnMovement:(id)a3;
- (void)_handleContainerMovement:(id)a3;
- (void)_handleContainerMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleContextMenuStatusNotification:(id)a3;
- (void)_handleContinueSpeaking:(id)a3;
- (void)_handleCopySpeechToClipboard:(id)a3;
- (void)_handleCurrentContentReadingLineUpdated:(id)a3;
- (void)_handleCurrentStateChanged:(id)a3;
- (void)_handleCursorMovementByTextSegment:(id)a3;
- (void)_handleCustomRotorAction:(id)a3 direction:(int64_t)a4;
- (void)_handleCustomRotorContent:(id)a3 direction:(int64_t)a4;
- (void)_handleDeactivateBrailleScreenInput:(id)a3;
- (void)_handleDecreaseVolume:(id)a3;
- (void)_handleDescribeCameraScene:(id)a3;
- (void)_handleDescribeImage:(id)a3;
- (void)_handleDescribedMediaMode:(id)a3 direction:(int64_t)a4;
- (void)_handleDidReceiveVisionEngineResult:(id)a3;
- (void)_handleDirectElementSearch:(id)a3;
- (void)_handleDirectTouchExplorationMode:(id)a3 direction:(int64_t)a4;
- (void)_handleDoubleTap:(id)a3;
- (void)_handleDuckingDisabling:(id)a3;
- (void)_handleEdgeSwipeBottom:(id)a3;
- (void)_handleEdgeSwipeTop:(id)a3;
- (void)_handleElementChangedNotification:(id)a3;
- (void)_handleElementMoved:(__AXUIElement *)a3;
- (void)_handleElementMovement:(id)a3;
- (void)_handleElementSearch:(id)a3 rotorType:(int64_t)a4 direction:(int64_t)a5;
- (void)_handleEscape:(id)a3;
- (void)_handleEvent:(id)a3;
- (void)_handleExpandedStatusChanged:(id)a3;
- (void)_handleFirstResponderChangedNotification:(id)a3;
- (void)_handleFocusedElementContentChangeNotification:(id)a3;
- (void)_handleGenericTextSegmentMovement:(id)a3 direction:(int64_t)a4 granulary:(int64_t)a5;
- (void)_handleGuideElementMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleHintsSettingMode:(id)a3 direction:(int64_t)a4;
- (void)_handleHomeButtonPress;
- (void)_handleImageDescriptionsToggle:(int64_t)a3;
- (void)_handleIncreaseVolume:(id)a3;
- (void)_handleIntraContainerMovement:(id)a3;
- (void)_handleInvalidStatusChanged:(id)a3;
- (void)_handleInvalidTextInputNotification:(id)a3;
- (void)_handleItemChooserSelection:(id)a3;
- (void)_handleItemChooserSelectionMade:(id)a3;
- (void)_handleKBPopupVariantsNotification:(id)a3;
- (void)_handleKeyboardChangedNotification;
- (void)_handleKeyboardCommandEvent:(id)a3;
- (void)_handleKeyboardContinuousPathDidBegin:(id)a3;
- (void)_handleKeyboardKeySelectedNotification:(id)a3;
- (void)_handleLabelElement:(id)a3;
- (void)_handleLabelElementAcceptedNotification:(id)a3;
- (void)_handleLaunchDetectionMode:(id)a3;
- (void)_handleLayoutChange:(BOOL)a3;
- (void)_handleLayoutChangeFromTimer;
- (void)_handleLetterMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleLineMovement:(id)a3;
- (void)_handleLineMovementInWeb:(id)a3 direction:(int64_t)a4 existingRequest:(id)a5;
- (void)_handleLiveContinuousToneBeginNotification:(id)a3;
- (void)_handleLiveContinuousToneEndNotification:(id)a3;
- (void)_handleLiveContinuousToneUpdateNotification:(id)a3;
- (void)_handleMapSameElement:(id)a3 forEvent:(id)a4;
- (void)_handleMathGranularMovement:(int64_t)a3 event:(id)a4;
- (void)_handleMisspelledWordRotorAction:(BOOL)a3;
- (void)_handleMonitorElement:(id)a3;
- (void)_handleMoveToElementAbove:(id)a3;
- (void)_handleMoveToElementBelow:(id)a3;
- (void)_handleMoveToElementNotification:(id)a3;
- (void)_handleMoveToLinkedUI:(id)a3;
- (void)_handleMoveToNativeFocusedElement:(id)a3;
- (void)_handleNativeFocusItemChangedNotification:(id)a3;
- (void)_handleNavigationDirectionChangeWithDirection:(int64_t)a3;
- (void)_handleNextKeyboardLanguage:(id)a3;
- (void)_handleNextTextOperationInDirection:(int64_t)a3 withEvent:(id)a4;
- (void)_handleNonEditableValueChange:(id)a3;
- (void)_handleOngoingTextSearch:(id)a3;
- (void)_handleOpenVoiceOverOptions:(id)a3;
- (void)_handleOutputCellRowColumnInfo:(id)a3;
- (void)_handleOutputCharacter:(id)a3;
- (void)_handleOutputCharacterPhonetically:(id)a3;
- (void)_handleOutputColumnContents:(id)a3;
- (void)_handleOutputColumnHeader:(id)a3;
- (void)_handleOutputColumnOrRowContents:(id)a3 row:(BOOL)a4;
- (void)_handleOutputColumnOrRowHeader:(id)a3 row:(BOOL)a4;
- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3;
- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3 explicitUserRequest:(BOOL)a4;
- (void)_handleOutputElementSummary:(id)a3;
- (void)_handleOutputFocusedElementSummary:(id)a3;
- (void)_handleOutputLineCount:(id)a3;
- (void)_handleOutputRowContents:(id)a3;
- (void)_handleOutputRowHeader:(id)a3;
- (void)_handleOutputTableRowColumnInfo:(id)a3;
- (void)_handleOutputTextStyle:(id)a3;
- (void)_handleParagraphMovement:(id)a3;
- (void)_handlePauseSpeaking:(id)a3;
- (void)_handlePauseSpeechAndHapticsNotification:(id)a3;
- (void)_handlePerformAudiographAction:(id)a3;
- (void)_handlePerformCustomAction:(id)a3;
- (void)_handlePerformEjectButtonPress:(id)a3;
- (void)_handlePerformHomeButtonPress:(id)a3;
- (void)_handlePerformPressAction:(id)a3;
- (void)_handlePerformTapAutofill:(id)a3;
- (void)_handlePerformTextOperation:(id)a3;
- (void)_handlePerformVolumeDownButtonPress:(id)a3;
- (void)_handlePerformVolumeUpButtonPress:(id)a3;
- (void)_handlePlayPauseButtonPress;
- (void)_handlePressActionResultAtTime:(id)a3;
- (void)_handlePublicCustomRotorMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleQuickNavFeedback:(BOOL)a3;
- (void)_handleReadAll:(id)a3;
- (void)_handleReadAllBookContent:(id)a3 fromTop:(BOOL)a4;
- (void)_handleReadAllNextElement;
- (void)_handleReadFromTop:(id)a3;
- (void)_handleReadItemHint:(id)a3;
- (void)_handleReadLine:(id)a3;
- (void)_handleReadScreenSummary:(id)a3;
- (void)_handleReadURL:(id)a3;
- (void)_handleReadWord:(id)a3;
- (void)_handleRealtimeElementMovement:(id)a3;
- (void)_handleRealtimeElementUpdate:(id)a3;
- (void)_handleReconnectBrailleDisplays:(id)a3;
- (void)_handleReleaseExclusiveAudioHardware;
- (void)_handleRequestExclusiveAudioHardware;
- (void)_handleRotateOrientation:(id)a3;
- (void)_handleRotorBrailleAutoAdvanceMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorBrailleInputLanguageMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorBrailleLanguageMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorLanguageMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRotorTextSelectionMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleRotorTypingModeMovement:(int64_t)a3 withEvent:(id)a4;
- (void)_handleRowMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleScreenChange:(id)a3 sound:(id)a4;
- (void)_handleScreenLock:(id)a3;
- (void)_handleScreenOff;
- (void)_handleScreenOffSilently;
- (void)_handleScreenOn;
- (void)_handleScreenOnSilently;
- (void)_handleScreenUnlock;
- (void)_handleScreenWillChangeNotification:(id)a3;
- (void)_handleScreenWillWakeNotification:(id)a3;
- (void)_handleScrollByPageNotification:(id)a3;
- (void)_handleScrollDownPage:(id)a3;
- (void)_handleScrollToBottom:(id)a3;
- (void)_handleScrollToPoint:(id)a3;
- (void)_handleScrollToTop:(id)a3;
- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4;
- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4 notifyUser:(BOOL)a5;
- (void)_handleSearchRotorEcho:(id)a3;
- (void)_handleSearchRotorLeft:(id)a3;
- (void)_handleSearchRotorMovement:(BOOL)a3 event:(id)a4;
- (void)_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:(BOOL)a3 event:(id)a4;
- (void)_handleSearchRotorRight:(id)a3;
- (void)_handleSearchRotorSetMathPosition:(id)a3;
- (void)_handleSearchTextEvent:(id)a3;
- (void)_handleSelectedTextOutput:(id)a3;
- (void)_handleSelectionChangedNotification:(id)a3;
- (void)_handleSendCancelEvent:(id)a3;
- (void)_handleSentenceMovement:(id)a3;
- (void)_handleSetupForEndOfPageNavigationTest:(id)a3;
- (void)_handleShowEditingHUD:(id)a3;
- (void)_handleSimpleTap:(id)a3;
- (void)_handleSimulatedForceTouchEvent:(id)a3;
- (void)_handleSingleLetterSearch:(id)a3;
- (void)_handleSiriFinishedListening:(id)a3;
- (void)_handleSiriFinishedTalking:(id)a3;
- (void)_handleSiriStartedListening:(id)a3;
- (void)_handleSiriStartedTalking:(id)a3;
- (void)_handleSortDirectionChanged:(id)a3;
- (void)_handleSoundRotorChange:(BOOL)a3;
- (void)_handleSpeechPhoneticsChange:(BOOL)a3;
- (void)_handleSpeechPunctuationChange:(BOOL)a3;
- (void)_handleSpeechRateChange:(BOOL)a3;
- (void)_handleSpeechRotorChange:(id)a3;
- (void)_handleSpeechRotorValueChange:(id)a3;
- (void)_handleStartHelpMode:(id)a3;
- (void)_handleStartSiri:(id)a3;
- (void)_handleStartStopTextSelection:(id)a3;
- (void)_handleStartStopToggle:(id)a3;
- (void)_handleStartTextSearch:(id)a3;
- (void)_handleStateReset;
- (void)_handleStopSpeaking;
- (void)_handleStopSpeakingAndClearAllQueues;
- (void)_handleStopSpeakingAndClearQueue;
- (void)_handleSwitchToElementCommunityPrevious:(BOOL)a3 event:(id)a4;
- (void)_handleSwitchToLeftElementCommunity:(id)a3;
- (void)_handleSwitchToNextElementCommunity:(id)a3;
- (void)_handleSwitchToPreviousElementCommunity:(id)a3;
- (void)_handleSwitchToRightElementCommunity:(id)a3;
- (void)_handleSystemCommandActivateAccessibilityShortcut:(id)a3;
- (void)_handleSystemCommandActivateLockButton:(id)a3;
- (void)_handleSystemCommandControlCenter:(id)a3;
- (void)_handleSystemCommandNotificationCenter:(id)a3;
- (void)_handleSystemCommandSpotlight:(id)a3;
- (void)_handleSystemCommandSwitchToNextApp:(id)a3;
- (void)_handleSystemCommandSwitchToPreviousApp:(id)a3;
- (void)_handleSystemCommandTakeScreenshot:(id)a3;
- (void)_handleSystemCommandToggleDock:(id)a3;
- (void)_handleSystemCommandToggleReachability:(id)a3;
- (void)_handleSystemControlActivation:(id)a3;
- (void)_handleSystemLockedOutputBehavior:(id)a3 shouldSendRequest:(BOOL *)a4 startElement:(id *)a5;
- (void)_handleTapAndHoldEventMonitor:(id)a3;
- (void)_handleTemporaryScreenCurtainDisablement;
- (void)_handleTextDocumentMovement:(id)a3;
- (void)_handleTextReplacementOccurredNotification:(id)a3;
- (void)_handleTextRotorSelectionAction:(BOOL)a3;
- (void)_handleTextWordMovement:(id)a3;
- (void)_handleToggleCaptionPanel:(id)a3;
- (void)_handleToggleCrownNavigation:(id)a3;
- (void)_handleToggleLiveRegionCommand:(id)a3;
- (void)_handleToggleLiveRegions:(int64_t)a3;
- (void)_handleToggleMute:(id)a3;
- (void)_handleTogglePerkinsKeyboardInput:(id)a3;
- (void)_handleToggleQuickNav:(id)a3;
- (void)_handleToggleRotationCapability:(id)a3;
- (void)_handleToggleScreenCurtain:(id)a3;
- (void)_handleToggleSingleLetterQuickNav:(id)a3;
- (void)_handleToggleSoundCurtain:(id)a3;
- (void)_handleToggleSpeaking:(id)a3;
- (void)_handleToggleVoiceOverModifierKeyLock:(id)a3;
- (void)_handleTopEdgePanLong:(id)a3;
- (void)_handleTracking:(id)a3;
- (void)_handleTrackingDetailMovement:(BOOL)a3 event:(id)a4;
- (void)_handleTypingEchoChange:(BOOL)a3;
- (void)_handleUnmuteEligibleEventOccured;
- (void)_handleUpdateAppFromTimer;
- (void)_handleUpdatedMathElementIndex;
- (void)_handleUsePitchChange:(BOOL)a3;
- (void)_handleValidatedCustomActionMovementThroughActions:(id)a3 forEvent:(id)a4 inDirection:(int64_t)a5;
- (void)_handleValueChangedNotification:(id)a3 associatedElement:(id)a4;
- (void)_handleVerticalMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleVisualsUpdate:(id)a3;
- (void)_handleVolumeChange:(float)a3;
- (void)_handleWatchWakeDoubleTap:(id)a3;
- (void)_handleWatchWakeTap:(id)a3;
- (void)_handleWatchWakeTripleTap:(id)a3;
- (void)_handleWebFormControlInteractionEndNotification:(id)a3;
- (void)_handleWebFormControlInteractionStartNotification:(id)a3;
- (void)_handleWebPageLoaded:(id)a3;
- (void)_handleWebSearchResult:(int64_t)a3 withEvent:(id)a4;
- (void)_handleWebSelectionChangedNotification:(id)a3;
- (void)_handleWebTextAvailableNotification:(id)a3;
- (void)_handleWebTextMatchSelectedNotification:(id)a3;
- (void)_handleWordMovement:(id)a3;
- (void)_handleWordMovement:(id)a3 direction:(int64_t)a4;
- (void)_handleZoomMovement:(int64_t)a3 event:(id)a4;
- (void)_hideVisualRotor;
- (void)_initializeCommands;
- (void)_initializeElementManagerThread;
- (void)_initializeSystemEventThread;
- (void)_interruptSpeachAndPlayBorderHitSound;
- (void)_migratePerAppDirectTouchBehavior;
- (void)_monitorElements;
- (void)_moveCursorForElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5;
- (void)_moveDetectionModeRotor:(id)a3;
- (void)_moveFocusToUpdatedRange:(_NSRange)a3 element:(id)a4 searchType:(int64_t)a5;
- (void)_moveToElement:(id)a3;
- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 moveToElementNotification:(BOOL)a6;
- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 shouldScroll:(BOOL)a6 moveToElementNotification:(BOOL)a7 shouldPlayTrackingSound:(BOOL)a8;
- (void)_outputCurrentElementRotor;
- (void)_outputDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5;
- (void)_outputNavigationDirectionMode:(int64_t)a3;
- (void)_outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4;
- (void)_outputRequestFinished:(id)a3;
- (void)_outputRotorTypeCount;
- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5;
- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5 language:(id)a6;
- (void)_outputWebLineWithMarkerRange:(id)a3 withElement:(id)a4;
- (void)_pausedSpeechInterrupted:(id)a3;
- (void)_performPressOnElement:(id)a3 withEvent:(id)a4 centerPoint:(CGPoint)a5;
- (void)_performTouchPadTapAtLocation:(CGPoint)a3;
- (void)_performTouchTypingKeyPress:(id)a3;
- (void)_postBrailleHomeButtonPress;
- (void)_processExternalElementUpdate;
- (void)_processExternalScrollToVisible:(id)a3;
- (void)_processMisspelledWordTextReplacement;
- (void)_processPassthroughAllowedWithEvent:(id)a3 initialTouch:(BOOL)a4;
- (void)_processSilentValueChange;
- (void)_processValueChangeWithFirstResponder:(id)a3 existingFirstResponder:(BOOL)a4 changeType:(id)a5 changeOrigination:(int64_t)a6 isQuiet:(BOOL)a7;
- (void)_readExplorerElementsAfterSpeechFinishedTimerFired;
- (void)_reallySimulateLongPressForElement:(id)a3;
- (void)_refreshMathSegmentsIfNeeded;
- (void)_refreshMathSegmentsIfNeededWithPreferredDirection:(int64_t)a3;
- (void)_resetDirectInteractionCache;
- (void)_resetElementLabel;
- (void)_resetElementUnitIndexes;
- (void)_resetItemChooserCache;
- (void)_resetMathGranularMovementState;
- (void)_resetOtherTapInputModes;
- (void)_resetQuickNavState;
- (void)_resetReadAllRequest;
- (void)_resetRotorTextNavigation;
- (void)_resetSearchType;
- (void)_reupdateTextSelectionInformation;
- (void)_sendAutomationTouchCommand:(unsigned int)a3 location:(CGPoint)a4;
- (void)_sendBSIActiveStateOffNotificationAndNotify;
- (void)_sendBSIStateChangedNotification:(BOOL)a3 usage:(int64_t)a4;
- (void)_sendBrailleAlert:(id)a3;
- (void)_sendUserEventOccurredIfNeeded;
- (void)_setDirectInteractionElement:(id)a3;
- (void)_setElementRotorToNumberType:(id)a3 saveToNumberPreferences:(id)a4 numberUserInitiated:(id)a5;
- (void)_setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5;
- (void)_setElementUnitIndexesToEndOfElement:(id)a3;
- (void)_setFetchManager:(id)a3;
- (void)_setLastSeenDeviceOrientation:(int64_t)a3;
- (void)_setLastSeenLineAndColumn:(id)a3;
- (void)_setNearestElementMovingForward:(BOOL)a3;
- (void)_setPreviousTouchTypingKey:(id)a3;
- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5;
- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5 isVoiceOverSelectionMovement:(BOOL)a6;
- (void)_showItemChooser:(id)a3;
- (void)_showVisualRotor:(id)a3 direction:(BOOL)a4;
- (void)_simulatedForceTouchLift;
- (void)_simulatedPressOutputTimer:(id)a3;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 announcement:(BOOL)a5 brailleOnly:(BOOL)a6;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5;
- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7;
- (void)_speakBrailleAutoAdvanceSpeed;
- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5;
- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7;
- (void)_startReadingBookForNewPage;
- (void)_stopReadAll;
- (void)_switchToOtherRoad;
- (void)_systemNotificationInProgressForRequest:(id)a3;
- (void)_systemServerDied;
- (void)_testingSetApplications:(id)a3;
- (void)_tvOS_handleIdleAndTrackingEvents:(id)a3;
- (void)_tvOS_handleUpdateWithNativeFocusFromTimer;
- (void)_tvOS_retryUpdateWithNativeFocus;
- (void)_tvOS_updateWithNativeFocus;
- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelay:(double)a4;
- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelayNumber:(id)a4;
- (void)_tvRotorInteractionTimerFired;
- (void)_updateAnyThreadElementAccess;
- (void)_updateApplicationAndSpeak:(id)a3;
- (void)_updateContextDescriptors;
- (void)_updateContinuousPathTimeout;
- (void)_updateCurrentElementForTextInputSelectionChangeIfNeeded;
- (void)_updateCurrentElementFrame;
- (void)_updateCurrentWordContextForBook:(id)a3;
- (void)_updateCursorFrameAfterLift;
- (void)_updateCursorFrameForElementIfNeeded:(id)a3;
- (void)_updateCursorFrameForLineFrameMovement:(id)a3;
- (void)_updateDisplayWithCurrentElement;
- (void)_updateExplorerElementsIfNeeded;
- (void)_updateFirstResponder;
- (void)_updateFirstResponderTypingBuffer;
- (void)_updateFocusContext:(id)a3;
- (void)_updateLastFirstResponderChangedTime;
- (void)_updateMostRecentElementCommunity;
- (void)_updateNavigationModeForClassicRemote;
- (void)_updateRotorForCurrentElement;
- (void)_updateRotorForCurrentElement:(id)a3 completion:(id)a4;
- (void)_updateStateForNotificationData:(id)a3;
- (void)_updateSwipeFrames;
- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5;
- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5 borderHitIfNoChange:(BOOL)a6;
- (void)_visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(id)a6 visionOptions:(id)a7;
- (void)_webPageElementFinder;
- (void)_webPageLoadingSound;
- (void)deactivateGesturedTextInputIfNeeded:(BOOL)a3;
- (void)dealloc;
- (void)elementFetchFound:(id)a3;
- (void)elementFetchFoundDirectTouchElements:(id)a3;
- (void)elementsCounted:(int64_t)a3;
- (void)elementsRetrieved:(id)a3 finished:(BOOL)a4;
- (void)explorerElementManager:(id)a3 didFinishReadAll:(BOOL)a4;
- (void)explorerElementManager:(id)a3 didSetExplorerElementFocus:(id)a4;
- (void)explorerElementManager:(id)a3 willReadElement:(id)a4;
- (void)fetchElementsFrom:(id)a3 inDirection:(int64_t)a4 count:(unint64_t)a5 scroll:(BOOL)a6 block:(id)a7;
- (void)fillCacheWithElements:(id)a3;
- (void)gestureRepeater:(id)a3 repeaterEventDidFire:(int64_t)a4;
- (void)gestureRepeaterWillSendFirstRepeaterEvent:(id)a3;
- (void)handleAnnouncement:(id)a3;
- (void)handleEvent:(id)a3;
- (void)handleNotification:(int)a3 withData:(id)a4 forElement:(__AXUIElement *)a5;
- (void)handleSearchRotorDown:(id)a3;
- (void)handleSearchRotorUp:(id)a3;
- (void)handleStateReset;
- (void)hideVisualRotor;
- (void)moveToElement:(id)a3;
- (void)moveToElementMatchingRotorType:(int64_t)a3 inDirection:(int64_t)a4;
- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6;
- (void)outputManager:(id)a3 willProcessNextRequest:(id)a4;
- (void)outputManagerDidFinishProcessingQueuedRequests:(id)a3;
- (void)outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6;
- (void)outputRequestFinished:(id)a3;
- (void)outputTextSegmentForRange:(_NSRange)a3 string:(id)a4 element:(id)a5 usePhonetics:(BOOL)a6 segment:(int64_t)a7;
- (void)processExternalElementUpdate;
- (void)processExternalScrollToVisible:(CGPoint)a3;
- (void)refreshBraille;
- (void)regionDescriptionForElement:(id)a3 withCompletion:(id)a4;
- (void)removeElementExplorer:(id)a3;
- (void)resetFrequentUpdateTextCache;
- (void)resetTextAndSelectionCaches;
- (void)rotor:(id)a3 didChangeFrom:(int64_t)a4 to:(int64_t)a5 userInitiated:(BOOL)a6;
- (void)sendRequest:(id)a3;
- (void)setCachedAdditionalElementCommunities:(id)a3;
- (void)setCachedSideAppDividerElement:(id)a3;
- (void)setCameraSceneDescriber:(id)a3;
- (void)setContinuousPathTimeout:(double)a3;
- (void)setCurrentContextDescriptors:(id)a3;
- (void)setCurrentElement:(id)a3;
- (void)setCurrentElement:(id)a3 shouldSetBrailleElement:(BOOL)a4;
- (void)setCurrentElementChangedCallback:(id)a3;
- (void)setCurrentElementToWebEditableAncestor;
- (void)setCurrentSimilarTraits:(unint64_t)a3;
- (void)setCurrentTextSelectionSegmentType:(int64_t)a3;
- (void)setDelayedNotificationAnnouncementRequest:(id)a3;
- (void)setDidCacheSideAppDividerElement:(BOOL)a3;
- (void)setDidIgnoreLastFirstResponderChangeOnSelectionChange:(BOOL)a3;
- (void)setDidReceiveForceUpdateChangeToken:(BOOL)a3;
- (void)setDirectInteractionElement:(id)a3;
- (void)setDirectTouchApps:(id)a3;
- (void)setElementGeneration:(unint64_t)a3;
- (void)setElementManagerHandledEventCallback:(id)a3;
- (void)setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5;
- (void)setExploreFocusAffectsNativeFocus:(BOOL)a3;
- (void)setExplorerElementManager:(id)a3;
- (void)setFingersFromTouchCommands:(id)a3;
- (void)setFirstResponder:(id)a3;
- (void)setFirstTrackedAppInGesture:(id)a3;
- (void)setFocusRetryAttempts:(int64_t)a3;
- (void)setForceUpdateMask:(int64_t)a3;
- (void)setInTextSelection:(BOOL)a3;
- (void)setInitialReadAllElement:(id)a3;
- (void)setIsUpdatingFocus:(BOOL)a3;
- (void)setLastActivationTime:(double)a3;
- (void)setLastAlertTime:(double)a3;
- (void)setLastAttemptToShowContextMenuTime:(double)a3;
- (void)setLastBlockedRequestBySiriOrDictationTime:(double)a3;
- (void)setLastContainerForCustomRotorHint:(id)a3;
- (void)setLastCursorBorderHitTime:(double)a3;
- (void)setLastDuckingDisablementSessionStart:(double)a3;
- (void)setLastElementBlockquoteLevel:(int64_t)a3;
- (void)setLastElementChangeAction:(int64_t)a3;
- (void)setLastElementChangeTime:(double)a3;
- (void)setLastElementForAttemptToShowContextMenu:(id)a3;
- (void)setLastElementHeadingLevel:(int64_t)a3;
- (void)setLastEventCommand:(id)a3;
- (void)setLastEventOccurredTime:(double)a3;
- (void)setLastExternalUnlockTime:(double)a3;
- (void)setLastFirstResponderChangeTime:(double)a3;
- (void)setLastFolderOperationTime:(double)a3;
- (void)setLastHomeButtonPressTime:(double)a3;
- (void)setLastItemChooserSearchTerm:(id)a3;
- (void)setLastLayoutChangeNotificationTime:(double)a3;
- (void)setLastNothingSoundTime:(double)a3;
- (void)setLastPauseSpeechAndHapticsStart:(double)a3;
- (void)setLastPressOnMediaSessionElement:(double)a3;
- (void)setLastRequestBlockedBySiriOrDictation:(id)a3;
- (void)setLastScreenChangeNotificationTime:(double)a3;
- (void)setLastScreenWakeViaPlayPause:(double)a3;
- (void)setLastSearchForElementsTime:(double)a3;
- (void)setLastSelectionChangeTime:(double)a3;
- (void)setLastSilencedAlertTime:(double)a3;
- (void)setLastTemporaryQuickNavDisableTime:(double)a3;
- (void)setLastTextPressAction:(unint64_t)a3;
- (void)setLastTrackingUpdateAppsFailureApplication:(id)a3;
- (void)setLastTrackingUpdateAppsFailureTime:(double)a3;
- (void)setLastUserElementTouchTime:(double)a3;
- (void)setLastValueChangeTime:(double)a3;
- (void)setLastWebPageLoadTime:(double)a3;
- (void)setMostRecentElementCommunity:(id)a3;
- (void)setNativeFocusElement:(id)a3;
- (void)setNeedsUpdateFocus:(BOOL)a3;
- (void)setNextElementToFocus:(id)a3;
- (void)setNextStringToSpeakOnScreenChange:(id)a3;
- (void)setPreviousContextDescriptors:(id)a3;
- (void)setPreviousCustomRotorsForRotorHint:(id)a3;
- (void)setPreviousFirstResponder:(id)a3;
- (void)setPreviousFirstResponderValue:(id)a3;
- (void)setPreviousTableOrCollectionViewApplication:(id)a3;
- (void)setPreviousTableOrCollectionViewList:(id)a3;
- (void)setPreviousTableOrCollectionViewToMetadata:(id)a3;
- (void)setPreviouslySpokenImageCaptionResults:(id)a3;
- (void)setRotor:(id)a3 toType:(int64_t)a4 saveToPreferences:(BOOL)a5 userInitiated:(BOOL)a6;
- (void)setScreenCurtainIsTemporarilyDisabled:(BOOL)a3;
- (void)setSelectingRightward:(BOOL)a3;
- (void)setShouldSilenceAnnouncements:(BOOL)a3;
- (void)setShouldTurnTrackingIntoDirectTouch:(BOOL)a3;
- (void)setSpeakNonfocusableElementsAfterDelay:(BOOL)a3;
- (void)setSpringBoardActionHandlerIdentifier:(id)a3;
- (void)setTextSelectionMovementManager:(id)a3;
- (void)setTimeSpentOnNothing:(double)a3;
- (void)setTouchContainer:(id)a3;
- (void)setTouchTypingStartTime:(double)a3;
- (void)setTutorialActiveRestrictionType:(int64_t)a3;
- (void)setTutorialListeningForGestureNotifications:(BOOL)a3;
- (void)setTutorialPage:(id)a3;
- (void)setTutorialRecognizedGesture:(id)a3;
- (void)setTutorialRestrictedCommands:(id)a3;
- (void)setTvAccessLock:(id)a3;
- (void)setTvGestureRepeater:(id)a3;
- (void)setTvIsInteractingWithRotor:(BOOL)a3;
- (void)setTvSpeechRequestManager:(id)a3;
- (void)setUnitTestingMode:(BOOL)a3;
- (void)setUpdateDelegate:(id)a3;
- (void)setUpdateFocusContext:(id)a3;
- (void)setWaitingToRetryFocus:(BOOL)a3;
- (void)setWebPageElementFinder:(id)a3;
- (void)setWebPageLoadURL:(id)a3;
- (void)setWebPageLoadedGenerationMark:(unint64_t)a3;
- (void)showElementLabelPanel:(BOOL)a3 currentLabel:(id)a4;
- (void)systemServerDied;
- (void)tutorialSetRecognizedGesture:(id)a3;
- (void)updateCurrentElementFrame;
- (void)updateCursorFrameAfterLift;
- (void)updateIndexesForOutputRange:(_NSRange)a3 segment:(int64_t)a4 direction:(int64_t)a5 outputStringLength:(unint64_t)a6;
- (void)updateNavigationModeForClassicRemote;
- (void)updateRotorForCurrentElement:(BOOL)a3 completion:(id)a4;
- (void)updateRunningApplications;
- (void)updateTitleElementLabels:(id)a3;
- (void)visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(int64_t)a6 visionOptions:(id)a7;
- (void)voiceOverDidRegisterWithSystem;
- (void)willBeginReadAll:(id)a3;
@end

@implementation VOTElementManager

- (void)setUnitTestingMode:(BOOL)a3
{
  self->_inUnitTestingMode = a3;
}

- (void)_cleanupStateForUnitTesting
{
  self->_lastTextPressAction = 0LL;
  self->_lastElementChangeAction = 0LL;
  self->_lastPressOnMediaSessionElement = -3061152000.0;
}

+ (void)initialize
{
  if (!qword_1001ACE70)
  {
    id v2 = [objc_allocWithZone(AXIndexMap) init];
    v3 = (void *)qword_1001ACE70;
    qword_1001ACE70 = (uint64_t)v2;

    id v4 = objc_allocWithZone(&OBJC_CLASS___NSArray);
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    id v5 =  objc_msgSend( v4,  "initWithObjects:",  kVOTEventCommandIncreaseVolume,  kVOTEventCommandDecreaseVolume,  kVOTEventCommandIdle,  kVOTEventCommandToggleScreenCurtain,  kVOTEventCommandToggleSoundCurtain,  kVOTEventCommandVolumeUpButtonPress,  kVOTEventCommandVolumeDownButtonPress,  kVOTEventCommandPauseSpeaking,  kVOTEventCommandContinueSpeaking,  kVOTEventCommandToggleSpeaking,  kVOTEventCommandBraillePanRight,  kVOTEventCommandBraillePanLeft,  kVOTEventCommandBraillePanBeginning,  kVOTEventCommandBraillePanEnd,  kVOTEventCommandBrailleRefreshBrailleLine,  0);
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        v9 = 0LL;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend( (id)qword_1001ACE70,  "setObject:forIndex:",  kCFBooleanTrue,  objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v9), "hash"));
          v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v7);
    }
  }

- (VOTElementManager)init
{
  v112.receiver = self;
  v112.super_class = (Class)&OBJC_CLASS___VOTElementManager;
  id v2 = -[VOTElementManager init](&v112, "init");
  v3 = v2;
  if (v2)
  {
    v2->_lastTextPressAction = 0LL;
    int64x2_t v4 = vdupq_n_s64(0xC1E6CEAF20000000LL);
    v2->_timeSpentOnNothing = -3061152000.0;
    *(int64x2_t *)&v2->_lastNothingSoundTime = v4;
    v2->_lastScreenChangeNotificationTime = -3061152000.0;
    v2->_lastLayoutChangeNotificationTime = -3061152000.0;
    v2->_lastAnnouncementNotificationTime = -3061152000.0;
    v2->_lastPressOnMediaSessionElement = -3061152000.0;
    *(int64x2_t *)&v2->_lastFirstResponderChangeTime = v4;
    v2->_lastEventOccurredTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastValueChangeTime = v4;
    v2->_lastPopupTime = -3061152000.0;
    v2->_lastAdjustValueTime = -3061152000.0;
    v2->_switchedToRoadTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastSilencedAlertTime = v4;
    *(int64x2_t *)&v2->_lastExternalUnlockTime = v4;
    v2->_lastWebKeyboardDismissTime = -3061152000.0;
    *(int64x2_t *)&v2->_lastHomeButtonPressTime = v4;
    v2->_lastAttemptToShowContextMenuTime = -3061152000.0;
    v2->_lastSentBannerTimerReset = -3061152000.0;
    -[VOTElementManager setLastEventCommand:](v2, "setLastEventCommand:", 0LL);
    v3->_misspelledWordReplacementCycleIndex = 0x7FFFFFFFFFFFFFFFLL;
    id v5 = objc_alloc_init(&OBJC_CLASS____VOTTextMarkerRange);
    textMarkerRange = v3->_textMarkerRange;
    v3->_textMarkerRange = v5;

    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    previousTableOrCollectionViewList = v3->_previousTableOrCollectionViewList;
    v3->_previousTableOrCollectionViewList = (NSMutableArray *)v7;

    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    previousTableOrCollectionViewToMetadata = v3->_previousTableOrCollectionViewToMetadata;
    v3->_previousTableOrCollectionViewToMetadata = (NSMutableDictionary *)v9;

    __int128 v11 = (VOTElementFetcher *)[objc_allocWithZone((Class)VOTElementFetcher) init];
    fetchManager = v3->_fetchManager;
    v3->_fetchManager = v11;

    -[VOTElementFetcher setDelegate:](v3->_fetchManager, "setDelegate:", v3);
    __int128 v13 = (NSMutableString *)[objc_allocWithZone(NSMutableString) init];
    elementTypingBuffer = v3->_elementTypingBuffer;
    v3->_elementTypingBuffer = v13;

    v3->_elementSelectionRangeBufferInternal = (_NSRange)xmmword_100132600;
    v3->_elementSelectionRangeBufferForValueChange = (_NSRange)xmmword_100132600;
    v3->_elementSelectionRangeBufferForSelectionChange = (_NSRange)xmmword_100132600;
    v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    focusedElementsByElementCommunityIdentifier = v3->_focusedElementsByElementCommunityIdentifier;
    v3->_focusedElementsByElementCommunityIdentifier = v15;

    v3->_anyThreadCurrentElementLock._os_unfair_lock_opaque = 0;
    v17 = objc_alloc_init(&OBJC_CLASS___SCRCThread);
    elementManagerThread = v3->_elementManagerThread;
    v3->_elementManagerThread = v17;

    v19 = v3->_elementManagerThread;
    v21 = (objc_class *)objc_opt_class(v3, v20);
    v22 = NSStringFromClass(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    -[SCRCThread setName:](v19, "setName:", v23);

    -[SCRCThread performSelector:onTarget:count:objects:]( v3->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_initializeElementManagerThread",  v3,  0LL,  0LL);
    v24 = -[SCRCThreadKey initWithObject:](objc_alloc(&OBJC_CLASS___SCRCThreadKey), "initWithObject:", v3);
    threadKey = v3->_threadKey;
    v3->_threadKey = v24;

    v26 = objc_alloc_init(&OBJC_CLASS___SCRCThread);
    systemEventThread = v3->_systemEventThread;
    v3->_systemEventThread = v26;

    -[SCRCThread setName:](v3->_systemEventThread, "setName:", @"VOTSystemEvent");
    -[SCRCThread performSelector:onTarget:count:objects:]( v3->_systemEventThread,  "performSelector:onTarget:count:objects:",  "_initializeSystemEventThread",  v3,  0LL,  0LL);
    v28 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_drawTouchContainerFrame" thread:v3->_elementManagerThread];
    containerFrameDrawingTimer = v3->_containerFrameDrawingTimer;
    v3->_containerFrameDrawingTimer = v28;

    v30 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_hideVisualRotor" thread:v3->_elementManagerThread];
    visualRotorFadeTimer = v3->_visualRotorFadeTimer;
    v3->_visualRotorFadeTimer = v30;

    v32 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_handleLayoutChangeFromTimer" thread:v3->_elementManagerThread];
    updateLayoutTimer = v3->_updateLayoutTimer;
    v3->_updateLayoutTimer = v32;

    v34 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_appSuspensionSoundTimer" thread:v3->_elementManagerThread];
    appSuspensionSoundTimer = v3->_appSuspensionSoundTimer;
    v3->_appSuspensionSoundTimer = v34;

    v36 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_simulatedPressOutputTimer:" thread:v3->_elementManagerThread];
    simulatedPressOutputTimer = v3->_simulatedPressOutputTimer;
    v3->_simulatedPressOutputTimer = v36;

    v38 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_switchToOtherRoad" thread:v3->_elementManagerThread];
    switchRoadsAtIntersectionTimer = v3->_switchRoadsAtIntersectionTimer;
    v3->_switchRoadsAtIntersectionTimer = v38;

    v40 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_activateAlternativeKeyboardKey:" thread:v3->_elementManagerThread];
    keyboardAlternativeModeActivationTimer = v3->_keyboardAlternativeModeActivationTimer;
    v3->_keyboardAlternativeModeActivationTimer = v40;

    v42 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_dismissAlternativeKeyboardKeys" thread:v3->_elementManagerThread];
    alternativeKeyDismissalTimer = v3->_alternativeKeyDismissalTimer;
    v3->_alternativeKeyDismissalTimer = v42;

    v44 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_continuousPathIdleTimer:" thread:v3->_elementManagerThread];
    continuousPathIdleTimer = v3->_continuousPathIdleTimer;
    v3->_continuousPathIdleTimer = v44;

    v46 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:0 thread:v3->_elementManagerThread];
    elementMonitorTimer = v3->_elementMonitorTimer;
    v3->_elementMonitorTimer = v46;

    -[SCRCTargetSelectorTimer cancel](v3->_appSuspensionSoundTimer, "cancel");
    v48 = -[SCRCTargetSelectorTimer initWithTarget:selector:thread:]( objc_alloc(&OBJC_CLASS___SCRCTargetSelectorTimer),  "initWithTarget:selector:thread:",  v3,  "_elementUpdatesFrequently",  v3->_elementManagerThread);
    elementUpdatesFrequentlyTimer = v3->_elementUpdatesFrequentlyTimer;
    v3->_elementUpdatesFrequentlyTimer = v48;

    v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v50 addObserver:v3 selector:"_pausedSpeechInterrupted:" name:off_1001ABEF8 object:0];

    *(_WORD *)&v3->_didPeekEvent = 0;
    v51 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    touchEventElements = v3->_touchEventElements;
    v3->_touchEventElements = v51;

    v53 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_simulatedForceTouchLift" thread:v3->_elementManagerThread];
    simulatedForceLiftTimer = v3->_simulatedForceLiftTimer;
    v3->_simulatedForceLiftTimer = v53;

    v55 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_handleUpdateAppFromTimer" thread:v3->_elementManagerThread];
    updateAppFromTimer = v3->_updateAppFromTimer;
    v3->_updateAppFromTimer = v55;

    v57 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    elementMonitorCache = v3->_elementMonitorCache;
    v3->_elementMonitorCache = v57;

    v59 = (AXIndexMap *)[objc_allocWithZone(AXIndexMap) init];
    commands = v3->_commands;
    v3->_commands = v59;

    v61 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    fingersFromTouchCommands = v3->_fingersFromTouchCommands;
    v3->_fingersFromTouchCommands = v61;

    v63 = (VOTElementRotor *)[objc_allocWithZone((Class)VOTElementRotor) init];
    elementRotor = v3->_elementRotor;
    v3->_elementRotor = v63;

    -[VOTRotor setDelegate:](v3->_elementRotor, "setDelegate:", v3);
    v65 = (VOTRotor *)[objc_allocWithZone((Class)VOTSpeechRotor) init];
    speechRotor = v3->_speechRotor;
    v3->_speechRotor = v65;

    v67 = -[VOTTextMovementManager initWithSegments:]( objc_alloc(&OBJC_CLASS___VOTTextMovementManager),  "initWithSegments:",  &off_100188C58);
    textSelectionMovementManager = v3->_textSelectionMovementManager;
    v3->_textSelectionMovementManager = v67;

    v3->_elementMathIndex = 0x7FFFFFFFFFFFFFFFLL;
    v3->_elementMathSegmentGranularity = 0LL;
    v69 = (NSMutableDictionary *)[objc_allocWithZone(NSMutableDictionary) init];
    lastSeenFontProperties = v3->_lastSeenFontProperties;
    v3->_lastSeenFontProperties = v69;

    -[VOTElementManager _migratePerAppDirectTouchBehavior](v3, "_migratePerAppDirectTouchBehavior");
    v71 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    directInteractionElements = v3->_directInteractionElements;
    v3->_directInteractionElements = v71;

    v73 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    cachedLaunchIcons = v3->_cachedLaunchIcons;
    v3->_cachedLaunchIcons = v73;

    v75 = objc_alloc_init(&OBJC_CLASS___NSLock);
    trackingLock = v3->_trackingLock;
    v3->_trackingLock = v75;

    -[VOTElementManager _resetElementUnitIndexes](v3, "_resetElementUnitIndexes");
    -[VOTElementManager _initializeCommands](v3, "_initializeCommands");
    objc_initWeak(&location, v3);
    v77 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v109[0] = _NSConcreteStackBlock;
    v109[1] = 3221225472LL;
    v109[2] = sub_100052940;
    v109[3] = &unk_100176F08;
    objc_copyWeak(&v110, &location);
    [v77 registerUpdateBlock:v109 forRetrieveSelector:"voiceOverRotorItems" withListener:v3];

    objc_destroyWeak(&v110);
    v78 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v79 = (void *)objc_claimAutoreleasedReturnValue([v78 voiceOverDirectTouchEnabledApps]);
    id v80 = [v79 mutableCopy];
    -[VOTElementManager setDirectTouchApps:](v3, "setDirectTouchApps:", v80);

    v81 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v107[0] = _NSConcreteStackBlock;
    v107[1] = 3221225472LL;
    v107[2] = sub_100052974;
    v107[3] = &unk_100176F08;
    objc_copyWeak(&v108, &location);
    [v81 registerUpdateBlock:v107 forRetrieveSelector:"voiceOverDirectTouchEnabledApps" withListener:v3];

    objc_destroyWeak(&v108);
    v82 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    v83 = (void *)objc_claimAutoreleasedReturnValue([v82 visionEngine]);
    [v83 setResultUpdateDelegate:v3];

    v3->_lastTrackingUpdateAppsFailureTime = -3061152000.0;
    v3->_lastTableRow = 0x7FFFFFFFFFFFFFFFLL;
    v3->_announcementPid = -1;
    v84 = objc_alloc_init(&OBJC_CLASS___NSLock);
    -[VOTElementManager setTvAccessLock:](v3, "setTvAccessLock:", v84);

    v85 = -[VOTExplorerElementManager initWithTargetThread:]( objc_alloc(&OBJC_CLASS___VOTExplorerElementManager),  "initWithTargetThread:",  v3->_elementManagerThread);
    -[VOTElementManager setExplorerElementManager:](v3, "setExplorerElementManager:", v85);
    -[VOTExplorerElementManager setDelegate:](v85, "setDelegate:", v3);
    v86 = -[VOTTVGestureRepeater initWithThread:]( objc_alloc(&OBJC_CLASS___VOTTVGestureRepeater),  "initWithThread:",  v3->_elementManagerThread);
    -[VOTElementManager setTvGestureRepeater:](v3, "setTvGestureRepeater:", v86);
    -[VOTTVGestureRepeater setDelegate:](v86, "setDelegate:", v3);
    v87 = objc_alloc_init(&OBJC_CLASS___VOTTVSpeechRequestManager);
    -[VOTElementManager setTvSpeechRequestManager:](v3, "setTvSpeechRequestManager:", v87);

    v88 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:v3 selector:"_tvOS_handleUpdateWithNativeFocusFromTimer" thread:v3->_elementManagerThread];
    updateWithNativeFocusTimer = v3->_updateWithNativeFocusTimer;
    v3->_updateWithNativeFocusTimer = v88;

    v90 = -[SCRCTargetSelectorTimer initWithTarget:selector:thread:]( objc_alloc(&OBJC_CLASS___SCRCTargetSelectorTimer),  "initWithTarget:selector:thread:",  v3,  "__handleUpdateVisualsTimer",  v3->_elementManagerThread);
    updateVisualsTimer = v3->_updateVisualsTimer;
    v3->_updateVisualsTimer = v90;

    v92 = -[SCRCTargetSelectorTimer initWithTarget:selector:thread:]( objc_alloc(&OBJC_CLASS___SCRCTargetSelectorTimer),  "initWithTarget:selector:thread:",  v3,  "__tvOS_handleUpdatePreferredTVInteractionModeTimer",  v3->_elementManagerThread);
    updatePreferredTVInteractionModeTimer = v3->_updatePreferredTVInteractionModeTimer;
    v3->_updatePreferredTVInteractionModeTimer = v92;

    v94 = -[SCRCTargetSelectorTimer initWithTarget:selector:thread:]( objc_alloc(&OBJC_CLASS___SCRCTargetSelectorTimer),  "initWithTarget:selector:thread:",  v3,  "_readExplorerElementsAfterSpeechFinishedTimerFired",  v3->_elementManagerThread);
    readExplorerElementsAfterSpeechFinishedTimer = v3->_readExplorerElementsAfterSpeechFinishedTimer;
    v3->_readExplorerElementsAfterSpeechFinishedTimer = v94;

    v96 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    v3->_speakNonfocusableElementsAfterDelay = [v96 voiceOverSpeakNonfocusableElementsAfterDelay];
    v3->_shouldSilenceAnnouncements = [v96 voiceOverSilenceAnnouncements];
    v97 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v97 addOutputManagerObserver:v3];

    v98 = -[SCRCTargetSelectorTimer initWithTarget:selector:thread:]( objc_alloc(&OBJC_CLASS___SCRCTargetSelectorTimer),  "initWithTarget:selector:thread:",  v3,  "_tvRotorInteractionTimerFired",  v3->_elementManagerThread);
    tvRotorInteractionTimer = v3->_tvRotorInteractionTimer;
    v3->_tvRotorInteractionTimer = v98;

    v3->_exploreFocusAffectsNativeFocus = [v96 voiceOverExploreFocusAffectsNativeFocus];
    v100 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v100 registerUpdateBlock:&stru_100177EE0 forRetrieveSelector:"voiceOverPrefersFollowFocusNavigationStyle" withListener:v3];

    v101 = (void *)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance"));
    [v101 warm];

    v102 = objc_opt_new(&OBJC_CLASS___AXCameraSceneDescriber);
    cameraSceneDescriber = v3->_cameraSceneDescriber;
    v3->_cameraSceneDescriber = v102;

    v104 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    explorers = v3->_explorers;
    v3->_explorers = v104;

    objc_destroyWeak(&location);
  }

  return v3;
}

- (void)dealloc
{
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 removeOutputManagerObserver:self];

  -[VOTOutputRequest setCompletionDelegate:](self->_startTrackingRoadRequest, "setCompletionDelegate:", 0LL);
  startTrackingRoadRequest = self->_startTrackingRoadRequest;
  self->_startTrackingRoadRequest = 0LL;

  -[VOTOutputRequest setCompletionDelegate:](self->_switchRoadsOutputRequest, "setCompletionDelegate:", 0LL);
  switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
  self->_switchRoadsOutputRequest = 0LL;

  -[VOTOutputRequest setCompletionDelegate:](self->_endOfRoadApproachingRequest, "setCompletionDelegate:", 0LL);
  endOfRoadApproachingRequest = self->_endOfRoadApproachingRequest;
  self->_endOfRoadApproachingRequest = 0LL;

  -[VOTOutputRequest setCompletionDelegate:](self->_bookPageContentOutputRequest, "setCompletionDelegate:", 0LL);
  bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
  self->_bookPageContentOutputRequest = 0LL;

  -[VOTOutputRequest setCompletionDelegate:](self->_readAllOutputRequest, "setCompletionDelegate:", 0LL);
  readAllOutputRequest = self->_readAllOutputRequest;
  self->_readAllOutputRequest = 0LL;

  -[VOTOutputRequest setCompletionDelegate:](self->_announcementRequest, "setCompletionDelegate:", 0LL);
  announcementRequest = self->_announcementRequest;
  self->_announcementRequest = 0LL;

  bookPageScrollString = self->_bookPageScrollString;
  self->_bookPageScrollString = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_visualRotorFadeTimer, "invalidate");
  visualRotorFadeTimer = self->_visualRotorFadeTimer;
  self->_visualRotorFadeTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_continuousPathIdleTimer, "invalidate");
  -[SCRCTargetSelectorTimer invalidate](self->_keyboardAlternativeModeActivationTimer, "invalidate");
  keyboardAlternativeModeActivationTimer = self->_keyboardAlternativeModeActivationTimer;
  self->_keyboardAlternativeModeActivationTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_alternativeKeyDismissalTimer, "invalidate");
  alternativeKeyDismissalTimer = self->_alternativeKeyDismissalTimer;
  self->_alternativeKeyDismissalTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_containerFrameDrawingTimer, "invalidate");
  containerFrameDrawingTimer = self->_containerFrameDrawingTimer;
  self->_containerFrameDrawingTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_webPageLoadingSoundTimer, "invalidate");
  webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
  self->_webPageLoadingSoundTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_invalidStatusChangedTimer, "invalidate");
  invalidStatusChangedTimer = self->_invalidStatusChangedTimer;
  self->_invalidStatusChangedTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_appSuspensionSoundTimer, "invalidate");
  appSuspensionSoundTimer = self->_appSuspensionSoundTimer;
  self->_appSuspensionSoundTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_updateLayoutTimer, "invalidate");
  updateLayoutTimer = self->_updateLayoutTimer;
  self->_updateLayoutTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_simulatedPressOutputTimer, "invalidate");
  simulatedPressOutputTimer = self->_simulatedPressOutputTimer;
  self->_simulatedPressOutputTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_switchRoadsAtIntersectionTimer, "invalidate");
  switchRoadsAtIntersectionTimer = self->_switchRoadsAtIntersectionTimer;
  self->_switchRoadsAtIntersectionTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_simulatedForceLiftTimer, "invalidate");
  simulatedForceLiftTimer = self->_simulatedForceLiftTimer;
  self->_simulatedForceLiftTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_updateAppFromTimer, "invalidate");
  updateAppFromTimer = self->_updateAppFromTimer;
  self->_updateAppFromTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_updateWithNativeFocusTimer, "invalidate");
  updateWithNativeFocusTimer = self->_updateWithNativeFocusTimer;
  self->_updateWithNativeFocusTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_updateVisualsTimer, "invalidate");
  updateVisualsTimer = self->_updateVisualsTimer;
  self->_updateVisualsTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_updatePreferredTVInteractionModeTimer, "invalidate");
  updatePreferredTVInteractionModeTimer = self->_updatePreferredTVInteractionModeTimer;
  self->_updatePreferredTVInteractionModeTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_elementUpdatesFrequentlyTimer, "invalidate");
  elementUpdatesFrequentlyTimer = self->_elementUpdatesFrequentlyTimer;
  self->_elementUpdatesFrequentlyTimer = 0LL;

  -[SCRCTargetSelectorTimer invalidate](self->_tvRotorInteractionTimer, "invalidate");
  tvRotorInteractionTimer = self->_tvRotorInteractionTimer;
  self->_tvRotorInteractionTimer = 0LL;

  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_exitThread:",  objc_opt_class(self, v28),  1LL,  self->_elementManagerThread,  0LL);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, self);
  v30.receiver = self;
  v30.super_class = (Class)&OBJC_CLASS___VOTElementManager;
  -[VOTElementManager dealloc](&v30, "dealloc");
}

+ (void)_exitThread:(id)a3
{
}

- (void)_initializeElementManagerThread
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread"));
  int64x2_t v4 = (objc_class *)objc_opt_class(self, v3);
  id v5 = NSStringFromClass(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v7 setName:v6];
}

- (void)_initializeSystemEventThread
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread"));
  [v2 setName:@"VOTSystemEvent"];
}

- (void)_migratePerAppDirectTouchBehavior
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  int64x2_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 voiceOverDirectTouchEnabledApps]);

  if (v4)
  {
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
    id v6 = [v5 countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v49;
      while (2)
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v49 != v8) {
            objc_enumerationMutation(v5);
          }
          __int128 v10 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
          __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 voiceOverDirectTouchEnabledApps]);
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);
          v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);

          if (!v14)
          {

            goto LABEL_12;
          }
        }

        id v7 = [v5 countByEnumeratingWithState:&v48 objects:v55 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
  }

  else
  {
LABEL_12:
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
    uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 preferenceForKey:@"DirectTouchMode"]);
    v17 = (void *)v16;
    v18 = &__kCFBooleanTrue;
    if (v16) {
      v18 = (void *)v16;
    }
    id v5 = v18;

    v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager directTouchApps](self, "directTouchApps"));
    if (!v19)
    {
      uint64_t v20 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      -[VOTElementManager setDirectTouchApps:](self, "setDirectTouchApps:", v20);
    }

    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    v21 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL,  0LL));
    id v22 = [v21 countByEnumeratingWithState:&v44 objects:v54 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v45;
      do
      {
        for (j = 0LL; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v45 != v24) {
            objc_enumerationMutation(v21);
          }
          v26 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)j);
          v27 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager directTouchApps](self, "directTouchApps"));
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v26 bundleIdentifier]);
          [v27 setObject:v5 forKeyedSubscript:v28];
        }

        id v23 = [v21 countByEnumeratingWithState:&v44 objects:v54 count:16];
      }

      while (v23);
    }

    v29 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager directTouchApps](self, "directTouchApps"));
    objc_super v30 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v30 setVoiceOverDirectTouchEnabledApps:v29];

    uint64_t v32 = VOTLogCommon(v31);
    v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager directTouchApps](self, "directTouchApps"));
      *(_DWORD *)buf = 138412290;
      id v53 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "1: %@", buf, 0xCu);
    }

    uint64_t v36 = VOTLogCommon(v35);
    v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v53 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "Migrate direct touch settings with default value: %@",  buf,  0xCu);
    }

    uint64_t v39 = VOTLogCommon(v38);
    v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      v42 = (void *)objc_claimAutoreleasedReturnValue([v41 voiceOverDirectTouchEnabledApps]);
      *(_DWORD *)buf = 138412290;
      id v53 = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "2: %@", buf, 0xCu);
    }

    v43 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
    [v43 setPreference:0 forKey:@"DirectTouchMode"];
  }
}

- (void)_initializeCommands
{
  commands = self->_commands;
  int64x2_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTracking:"));
  -[AXIndexMap setObject:forIndex:](commands, "setObject:forIndex:", v4, [kVOTEventCommandTracking hash]);

  id v5 = self->_commands;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTapAndHoldEventMonitor:"));
  -[AXIndexMap setObject:forIndex:]( v5,  "setObject:forIndex:",  v6,  [kVOTEventCommandTapAndHoldEventMonitor hash]);

  id v7 = self->_commands;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleIdle:"));
  -[AXIndexMap setObject:forIndex:](v7, "setObject:forIndex:", v8, [kVOTEventCommandIdle hash]);

  uint64_t v9 = self->_commands;
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSimulatedLongPress:"));
  -[AXIndexMap setObject:forIndex:]( v9,  "setObject:forIndex:",  v10,  [kVOTEventCommandSimulatedLongPress hash]);

  __int128 v11 = self->_commands;
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePerformHomeButtonPress:"));
  -[AXIndexMap setObject:forIndex:]( v11,  "setObject:forIndex:",  v12,  [kVOTEventCommandHomeButtonPress hash]);

  __int128 v13 = self->_commands;
  v14 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStartSiri:"));
  -[AXIndexMap setObject:forIndex:](v13, "setObject:forIndex:", v14, [kVOTEventCommandStartSiri hash]);

  v15 = self->_commands;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMovement:"));
  -[AXIndexMap setObject:forIndex:]( v15,  "setObject:forIndex:",  v16,  [kVOTEventCommandPreviousElement hash]);

  v17 = self->_commands;
  v18 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMovement:"));
  -[AXIndexMap setObject:forIndex:](v17, "setObject:forIndex:", v18, [kVOTEventCommandNextElement hash]);

  v19 = self->_commands;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMovement:"));
  -[AXIndexMap setObject:forIndex:](v19, "setObject:forIndex:", v20, [kVOTEventCommandFirstElement hash]);

  v21 = self->_commands;
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMovement:"));
  -[AXIndexMap setObject:forIndex:](v21, "setObject:forIndex:", v22, [kVOTEventCommandLastElement hash]);

  id v23 = self->_commands;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMovement:"));
  -[AXIndexMap setObject:forIndex:]( v23,  "setObject:forIndex:",  v24,  [kVOTEventCommandCenterElement hash]);

  v25 = self->_commands;
  v26 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleMoveToElementAbove:"));
  -[AXIndexMap setObject:forIndex:](v25, "setObject:forIndex:", v26, [kVOTEventCommandElementAbove hash]);

  v27 = self->_commands;
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleMoveToElementBelow:"));
  -[AXIndexMap setObject:forIndex:](v27, "setObject:forIndex:", v28, [kVOTEventCommandElementBelow hash]);

  v29 = self->_commands;
  objc_super v30 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTextWordMovement:"));
  -[AXIndexMap setObject:forIndex:](v29, "setObject:forIndex:", v30, [kVOTEventCommandFirstWord hash]);

  uint64_t v31 = self->_commands;
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTextWordMovement:"));
  -[AXIndexMap setObject:forIndex:](v31, "setObject:forIndex:", v32, [kVOTEventCommandLastWord hash]);

  v33 = self->_commands;
  v34 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTextDocumentMovement:"));
  -[AXIndexMap setObject:forIndex:](v33, "setObject:forIndex:", v34, [kVOTEventCommandDocumentTop hash]);

  uint64_t v35 = self->_commands;
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTextDocumentMovement:"));
  -[AXIndexMap setObject:forIndex:]( v35,  "setObject:forIndex:",  v36,  [kVOTEventCommandDocumentBottom hash]);

  v37 = self->_commands;
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleElementMoveToStatusBar:"));
  -[AXIndexMap setObject:forIndex:]( v37,  "setObject:forIndex:",  v38,  [kVOTEventCommandMoveToStatusBar hash]);

  uint64_t v39 = self->_commands;
  v40 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCharacterMovement:"));
  -[AXIndexMap setObject:forIndex:]( v39,  "setObject:forIndex:",  v40,  [kVOTEventCommandNextCharacter hash]);

  v41 = self->_commands;
  v42 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCharacterMovement:"));
  -[AXIndexMap setObject:forIndex:]( v41,  "setObject:forIndex:",  v42,  [kVOTEventCommandPreviousCharacter hash]);

  v43 = self->_commands;
  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleWordMovement:"));
  -[AXIndexMap setObject:forIndex:](v43, "setObject:forIndex:", v44, [kVOTEventCommandNextWord hash]);

  __int128 v45 = self->_commands;
  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleWordMovement:"));
  -[AXIndexMap setObject:forIndex:](v45, "setObject:forIndex:", v46, [kVOTEventCommandPreviousWord hash]);

  __int128 v47 = self->_commands;
  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleLineMovement:"));
  -[AXIndexMap setObject:forIndex:](v47, "setObject:forIndex:", v48, [kVOTEventCommandNextLine hash]);

  __int128 v49 = self->_commands;
  __int128 v50 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleLineMovement:"));
  -[AXIndexMap setObject:forIndex:](v49, "setObject:forIndex:", v50, [kVOTEventCommandPreviousLine hash]);

  __int128 v51 = self->_commands;
  v52 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSentenceMovement:"));
  -[AXIndexMap setObject:forIndex:](v51, "setObject:forIndex:", v52, [kVOTEventCommandNextSentence hash]);

  id v53 = self->_commands;
  v54 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSentenceMovement:"));
  -[AXIndexMap setObject:forIndex:]( v53,  "setObject:forIndex:",  v54,  [kVOTEventCommandPreviousSentence hash]);

  v55 = self->_commands;
  v56 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleParagraphMovement:"));
  -[AXIndexMap setObject:forIndex:]( v55,  "setObject:forIndex:",  v56,  [kVOTEventCommandNextParagraph hash]);

  v57 = self->_commands;
  v58 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleParagraphMovement:"));
  -[AXIndexMap setObject:forIndex:]( v57,  "setObject:forIndex:",  v58,  [kVOTEventCommandPreviousParagraph hash]);

  v59 = self->_commands;
  v60 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCursorMovementByTextSegment:"));
  -[AXIndexMap setObject:forIndex:]( v59,  "setObject:forIndex:",  v60,  [kVOTEventCommandNextTextSegment hash]);

  v61 = self->_commands;
  v62 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCursorMovementByTextSegment:"));
  -[AXIndexMap setObject:forIndex:]( v61,  "setObject:forIndex:",  v62,  [kVOTEventCommandPreviousTextSegment hash]);

  v63 = self->_commands;
  v64 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleContainerMovement:"));
  -[AXIndexMap setObject:forIndex:]( v63,  "setObject:forIndex:",  v64,  [kVOTEventCommandPreviousContainer hash]);

  v65 = self->_commands;
  v66 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleContainerMovement:"));
  -[AXIndexMap setObject:forIndex:]( v65,  "setObject:forIndex:",  v66,  [kVOTEventCommandNextContainer hash]);

  v67 = self->_commands;
  v68 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleIntraContainerMovement:"));
  -[AXIndexMap setObject:forIndex:](v67, "setObject:forIndex:", v68, [kVOTEventCommandContainerTop hash]);

  v69 = self->_commands;
  v70 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleIntraContainerMovement:"));
  -[AXIndexMap setObject:forIndex:]( v69,  "setObject:forIndex:",  v70,  [kVOTEventCommandContainerBottom hash]);

  v71 = self->_commands;
  v72 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleIncreaseVolume:"));
  -[AXIndexMap setObject:forIndex:]( v71,  "setObject:forIndex:",  v72,  [kVOTEventCommandIncreaseVolume hash]);

  v73 = self->_commands;
  v74 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDecreaseVolume:"));
  -[AXIndexMap setObject:forIndex:]( v73,  "setObject:forIndex:",  v74,  [kVOTEventCommandDecreaseVolume hash]);

  v75 = self->_commands;
  v76 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleRotateOrientation:"));
  -[AXIndexMap setObject:forIndex:]( v75,  "setObject:forIndex:",  v76,  [kVOTEventCommandRotateOrientationLeft hash]);

  v77 = self->_commands;
  v78 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleRotateOrientation:"));
  -[AXIndexMap setObject:forIndex:]( v77,  "setObject:forIndex:",  v78,  [kVOTEventCommandRotateOrientationRight hash]);

  v79 = self->_commands;
  id v80 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputColumnHeader:"));
  -[AXIndexMap setObject:forIndex:]( v79,  "setObject:forIndex:",  v80,  [kVOTEventCommandOutputColumnHeader hash]);

  v81 = self->_commands;
  v82 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputColumnContents:"));
  -[AXIndexMap setObject:forIndex:]( v81,  "setObject:forIndex:",  v82,  [kVOTEventCommandOutputContentsOfColumn hash]);

  v83 = self->_commands;
  v84 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputCharacter:"));
  -[AXIndexMap setObject:forIndex:]( v83,  "setObject:forIndex:",  v84,  [kVOTEventCommandOutputCharacter hash]);

  v85 = self->_commands;
  v86 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputCharacterPhonetically:"));
  -[AXIndexMap setObject:forIndex:]( v85,  "setObject:forIndex:",  v86,  [kVOTEventCommandOutputCharacterPhonetically hash]);

  v87 = self->_commands;
  v88 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputTableRowColumnInfo:"));
  -[AXIndexMap setObject:forIndex:]( v87,  "setObject:forIndex:",  v88,  [kVOTEventCommandOutputTableRowColumnInfo hash]);

  v89 = self->_commands;
  v90 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputCellRowColumnInfo:"));
  -[AXIndexMap setObject:forIndex:]( v89,  "setObject:forIndex:",  v90,  [kVOTEventCommandOutputCellRowColumnInfo hash]);

  v91 = self->_commands;
  v92 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputRowContents:"));
  -[AXIndexMap setObject:forIndex:]( v91,  "setObject:forIndex:",  v92,  [kVOTEventCommandOutputContentsOfRow hash]);

  v93 = self->_commands;
  v94 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleRealtimeElementMovement:"));
  -[AXIndexMap setObject:forIndex:]( v93,  "setObject:forIndex:",  v94,  [kVOTEventCommandNextRealtimeElement hash]);

  v95 = self->_commands;
  v96 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleRealtimeElementMovement:"));
  -[AXIndexMap setObject:forIndex:]( v95,  "setObject:forIndex:",  v96,  [kVOTEventCommandPreviousRealtimeElement hash]);

  v97 = self->_commands;
  v98 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleShowEditingHUD:"));
  -[AXIndexMap setObject:forIndex:]( v97,  "setObject:forIndex:",  v98,  [kVOTEventCommandShowEditingHUD hash]);

  v99 = self->_commands;
  v100 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemControlActivation:"));
  -[AXIndexMap setObject:forIndex:]( v99,  "setObject:forIndex:",  v100,  [kVOTEventCommandSystemShowControlCenter hash]);

  v101 = self->_commands;
  v102 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemControlActivation:"));
  -[AXIndexMap setObject:forIndex:]( v101,  "setObject:forIndex:",  v102,  [kVOTEventCommandSystemShowNotificationCenter hash]);

  v103 = self->_commands;
  v104 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleTypeToSiri:"));
  -[AXIndexMap setObject:forIndex:]( v103,  "setObject:forIndex:",  v104,  [kVOTEventCommandSystemToggleTypeToSiri hash]);

  v105 = self->_commands;
  v106 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemControlActivation:"));
  -[AXIndexMap setObject:forIndex:]( v105,  "setObject:forIndex:",  v106,  [kVOTEventCommandSystemControlRight hash]);

  v107 = self->_commands;
  id v108 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemControlActivation:"));
  -[AXIndexMap setObject:forIndex:]( v107,  "setObject:forIndex:",  v108,  [kVOTEventCommandSystemControlLeft hash]);

  v109 = self->_commands;
  id v110 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemControlActivation:"));
  -[AXIndexMap setObject:forIndex:]( v109,  "setObject:forIndex:",  v110,  [kVOTEventCommandSystemControlTwoTop hash]);

  v111 = self->_commands;
  objc_super v112 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandNotificationCenter:"));
  -[AXIndexMap setObject:forIndex:]( v111,  "setObject:forIndex:",  v112,  [kVOTEventCommandSystemShowNotificationCenter hash]);

  v113 = self->_commands;
  v114 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandControlCenter:"));
  -[AXIndexMap setObject:forIndex:]( v113,  "setObject:forIndex:",  v114,  [kVOTEventCommandSystemShowControlCenter hash]);

  v115 = self->_commands;
  v116 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandActivateSpeakScreen:"));
  -[AXIndexMap setObject:forIndex:]( v115,  "setObject:forIndex:",  v116,  [kVOTEventCommandSystemActivateSpeakScreen hash]);

  v117 = self->_commands;
  v118 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandToggleDock:"));
  -[AXIndexMap setObject:forIndex:]( v117,  "setObject:forIndex:",  v118,  [kVOTEventCommandSystemToggleDock hash]);

  v119 = self->_commands;
  v120 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandToggleAppSwitcher:"));
  -[AXIndexMap setObject:forIndex:]( v119,  "setObject:forIndex:",  v120,  [kVOTEventCommandSystemToggleAppSwitcher hash]);

  v121 = self->_commands;
  v122 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandActivateLockButton:"));
  -[AXIndexMap setObject:forIndex:]( v121,  "setObject:forIndex:",  v122,  [kVOTEventCommandSystemActivateLockButton hash]);

  v123 = self->_commands;
  v124 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandSpotlight:"));
  -[AXIndexMap setObject:forIndex:]( v123,  "setObject:forIndex:",  v124,  [kVOTEventCommandSystemShowSpotlight hash]);

  v125 = self->_commands;
  v126 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandActivateAccessibilityShortcut:"));
  -[AXIndexMap setObject:forIndex:]( v125,  "setObject:forIndex:",  v126,  [kVOTEventCommandSystemActivateAccessibilityShortcut hash]);

  v127 = self->_commands;
  v128 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandToggleReachability:"));
  -[AXIndexMap setObject:forIndex:]( v127,  "setObject:forIndex:",  v128,  [kVOTEventCommandSystemToggleReachability hash]);

  v129 = self->_commands;
  v130 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandTakeScreenshot:"));
  -[AXIndexMap setObject:forIndex:]( v129,  "setObject:forIndex:",  v130,  [kVOTEventCommandSystemTakeScreenshot hash]);

  v131 = self->_commands;
  v132 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandSwitchToPreviousApp:"));
  -[AXIndexMap setObject:forIndex:]( v131,  "setObject:forIndex:",  v132,  [kVOTEventCommandSystemSwitchToPreviousApp hash]);

  v133 = self->_commands;
  v134 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandSwitchToNextApp:"));
  -[AXIndexMap setObject:forIndex:]( v133,  "setObject:forIndex:",  v134,  [kVOTEventCommandSystemSwitchToNextApp hash]);

  v135 = self->_commands;
  v136 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSystemCommandToggleQuickNote:"));
  -[AXIndexMap setObject:forIndex:]( v135,  "setObject:forIndex:",  v136,  [kVOTEventCommandSystemToggleQuickNote hash]);

  v137 = self->_commands;
  v138 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCancelSpeaking:"));
  -[AXIndexMap setObject:forIndex:]( v137,  "setObject:forIndex:",  v138,  [kVOTEventCommandCancelSpeaking hash]);

  v139 = self->_commands;
  v140 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePauseSpeaking:"));
  -[AXIndexMap setObject:forIndex:]( v139,  "setObject:forIndex:",  v140,  [kVOTEventCommandPauseSpeaking hash]);

  v141 = self->_commands;
  v142 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleContinueSpeaking:"));
  -[AXIndexMap setObject:forIndex:]( v141,  "setObject:forIndex:",  v142,  [kVOTEventCommandContinueSpeaking hash]);

  v143 = self->_commands;
  v144 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleSpeaking:"));
  -[AXIndexMap setObject:forIndex:]( v143,  "setObject:forIndex:",  v144,  [kVOTEventCommandToggleSpeaking hash]);

  v145 = self->_commands;
  v146 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadAll:"));
  -[AXIndexMap setObject:forIndex:](v145, "setObject:forIndex:", v146, [kVOTEventCommandReadAll hash]);

  v147 = self->_commands;
  v148 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadScreenSummary:"));
  -[AXIndexMap setObject:forIndex:]( v147,  "setObject:forIndex:",  v148,  [kVOTEventCommandReadScreenSummary hash]);

  v149 = self->_commands;
  v150 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadFromTop:"));
  -[AXIndexMap setObject:forIndex:]( v149,  "setObject:forIndex:",  v150,  [kVOTEventCommandReadFromTop hash]);

  v151 = self->_commands;
  v152 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleCopySpeechToClipboard:"));
  -[AXIndexMap setObject:forIndex:]( v151,  "setObject:forIndex:",  v152,  [kVOTEventCommandCopySpeechToClipboard hash]);

  v153 = self->_commands;
  v154 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePerformTapAutofill:"));
  -[AXIndexMap setObject:forIndex:]( v153,  "setObject:forIndex:",  v154,  [kVOTEventCommandTapAutofill hash]);

  v155 = self->_commands;
  v156 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputTextStyle:"));
  -[AXIndexMap setObject:forIndex:]( v155,  "setObject:forIndex:",  v156,  [kVOTEventCommandOutputTextStyle hash]);

  v157 = self->_commands;
  v158 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "handleSearchRotorUp:"));
  -[AXIndexMap setObject:forIndex:]( v157,  "setObject:forIndex:",  v158,  [kVOTEventCommandSearchRotorUp hash]);

  v159 = self->_commands;
  v160 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "handleSearchRotorDown:"));
  -[AXIndexMap setObject:forIndex:]( v159,  "setObject:forIndex:",  v160,  [kVOTEventCommandSearchRotorDown hash]);

  v161 = self->_commands;
  v162 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSearchRotorLeft:"));
  -[AXIndexMap setObject:forIndex:]( v161,  "setObject:forIndex:",  v162,  [kVOTEventCommandSearchRotorLeft hash]);

  v163 = self->_commands;
  v164 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSearchRotorRight:"));
  -[AXIndexMap setObject:forIndex:]( v163,  "setObject:forIndex:",  v164,  [kVOTEventCommandSearchRotorRight hash]);

  v165 = self->_commands;
  v166 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSearchRotorEcho:"));
  -[AXIndexMap setObject:forIndex:]( v165,  "setObject:forIndex:",  v166,  [kVOTEventCommandSearchRotorEcho hash]);

  v167 = self->_commands;
  v168 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStartTextSearch:"));
  -[AXIndexMap setObject:forIndex:]( v167,  "setObject:forIndex:",  v168,  [kVOTEventCommandStartTextSearch hash]);

  v169 = self->_commands;
  v170 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOngoingTextSearch:"));
  -[AXIndexMap setObject:forIndex:]( v169,  "setObject:forIndex:",  v170,  [kVOTEventCommandTextSearchForward hash]);

  v171 = self->_commands;
  v172 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOngoingTextSearch:"));
  -[AXIndexMap setObject:forIndex:]( v171,  "setObject:forIndex:",  v172,  [kVOTEventCommandTextSearchBackward hash]);

  v173 = self->_commands;
  v174 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleItemChooserSelection:"));
  -[AXIndexMap setObject:forIndex:]( v173,  "setObject:forIndex:",  v174,  [kVOTEventCommandItemChooser hash]);

  v175 = self->_commands;
  v176 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSearchRotorSetMathPosition:"));
  -[AXIndexMap setObject:forIndex:]( v175,  "setObject:forIndex:",  v176,  [kVOTEventCommandSearchRotorSetMathPosition hash]);

  v177 = self->_commands;
  v178 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleMoveToLinkedUI:"));
  -[AXIndexMap setObject:forIndex:]( v177,  "setObject:forIndex:",  v178,  [kVOTEventCommandMoveToLinkedUI hash]);

  v179 = self->_commands;
  v180 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleMoveToNativeFocusedElement:"));
  -[AXIndexMap setObject:forIndex:]( v179,  "setObject:forIndex:",  v180,  [kVOTEventCommandMoveToNativeFocusedElement hash]);

  v181 = self->_commands;
  v182 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v181,  "setObject:forIndex:",  v182,  [kVOTEventCommandNextGraphic hash]);

  v183 = self->_commands;
  v184 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v183,  "setObject:forIndex:",  v184,  [kVOTEventCommandPreviousGraphic hash]);

  v185 = self->_commands;
  v186 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v185,  "setObject:forIndex:",  v186,  [kVOTEventCommandNextHeading hash]);

  v187 = self->_commands;
  v188 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v187,  "setObject:forIndex:",  v188,  [kVOTEventCommandPreviousHeading hash]);

  v189 = self->_commands;
  v190 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:](v189, "setObject:forIndex:", v190, [kVOTEventCommandNextTable hash]);

  v191 = self->_commands;
  v192 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v191,  "setObject:forIndex:",  v192,  [kVOTEventCommandPreviousTable hash]);

  v193 = self->_commands;
  v194 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:](v193, "setObject:forIndex:", v194, [kVOTEventCommandNextList hash]);

  v195 = self->_commands;
  v196 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v195,  "setObject:forIndex:",  v196,  [kVOTEventCommandPreviousList hash]);

  v197 = self->_commands;
  v198 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v197,  "setObject:forIndex:",  v198,  [kVOTEventCommandNextControl hash]);

  v199 = self->_commands;
  v200 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v199,  "setObject:forIndex:",  v200,  [kVOTEventCommandPreviousControl hash]);

  v201 = self->_commands;
  v202 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:](v201, "setObject:forIndex:", v202, [kVOTEventCommandNextLink hash]);

  v203 = self->_commands;
  v204 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v203,  "setObject:forIndex:",  v204,  [kVOTEventCommandPreviousLink hash]);

  v205 = self->_commands;
  v206 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v205,  "setObject:forIndex:",  v206,  [kVOTEventCommandNextVisitedLink hash]);

  v207 = self->_commands;
  v208 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v207,  "setObject:forIndex:",  v208,  [kVOTEventCommandPreviousVisitedLink hash]);

  v209 = self->_commands;
  v210 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v209,  "setObject:forIndex:",  v210,  [kVOTEventCommandNextSameHeading hash]);

  v211 = self->_commands;
  v212 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v211,  "setObject:forIndex:",  v212,  [kVOTEventCommandPreviousSameHeading hash]);

  v213 = self->_commands;
  v214 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v213,  "setObject:forIndex:",  v214,  [kVOTEventCommandNextBoldText hash]);

  v215 = self->_commands;
  v216 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v215,  "setObject:forIndex:",  v216,  [kVOTEventCommandPreviousBoldText hash]);

  v217 = self->_commands;
  v218 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v217,  "setObject:forIndex:",  v218,  [kVOTEventCommandNextItalicText hash]);

  v219 = self->_commands;
  v220 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v219,  "setObject:forIndex:",  v220,  [kVOTEventCommandPreviousItalicText hash]);

  v221 = self->_commands;
  v222 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v221,  "setObject:forIndex:",  v222,  [kVOTEventCommandNextUnderlineText hash]);

  v223 = self->_commands;
  v224 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v223,  "setObject:forIndex:",  v224,  [kVOTEventCommandPreviousUnderlineText hash]);

  v225 = self->_commands;
  v226 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v225,  "setObject:forIndex:",  v226,  [kVOTEventCommandNextMisspelledWord hash]);

  v227 = self->_commands;
  v228 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v227,  "setObject:forIndex:",  v228,  [kVOTEventCommandPreviousMisspelledWord hash]);

  v229 = self->_commands;
  v230 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v229,  "setObject:forIndex:",  v230,  [kVOTEventCommandNextPlainText hash]);

  v231 = self->_commands;
  v232 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v231,  "setObject:forIndex:",  v232,  [kVOTEventCommandPreviousPlainText hash]);

  v233 = self->_commands;
  v234 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v233,  "setObject:forIndex:",  v234,  [kVOTEventCommandNextColorChange hash]);

  v235 = self->_commands;
  v236 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v235,  "setObject:forIndex:",  v236,  [kVOTEventCommandPreviousColorChange hash]);

  v237 = self->_commands;
  v238 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v237,  "setObject:forIndex:",  v238,  [kVOTEventCommandNextFontChange hash]);

  v239 = self->_commands;
  v240 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v239,  "setObject:forIndex:",  v240,  [kVOTEventCommandPreviousFontChange hash]);

  v241 = self->_commands;
  v242 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v241,  "setObject:forIndex:",  v242,  [kVOTEventCommandNextStyleChange hash]);

  v243 = self->_commands;
  v244 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v243,  "setObject:forIndex:",  v244,  [kVOTEventCommandPreviousStyleChange hash]);

  v245 = self->_commands;
  v246 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v245,  "setObject:forIndex:",  v246,  [kVOTEventCommandNextSameElement hash]);

  v247 = self->_commands;
  v248 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v247,  "setObject:forIndex:",  v248,  [kVOTEventCommandPreviousSameElement hash]);

  v249 = self->_commands;
  v250 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v249,  "setObject:forIndex:",  v250,  [kVOTEventCommandNextDifferentElement hash]);

  v251 = self->_commands;
  v252 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v251,  "setObject:forIndex:",  v252,  [kVOTEventCommandPreviousDifferentElement hash]);

  v253 = self->_commands;
  v254 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:](v253, "setObject:forIndex:", v254, [kVOTEventCommandNextFrame hash]);

  v255 = self->_commands;
  v256 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v255,  "setObject:forIndex:",  v256,  [kVOTEventCommandPreviousFrame hash]);

  v257 = self->_commands;
  v258 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleColumnMovement:"));
  -[AXIndexMap setObject:forIndex:](v257, "setObject:forIndex:", v258, [kVOTEventCommandNextColumn hash]);

  v259 = self->_commands;
  v260 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleColumnMovement:"));
  -[AXIndexMap setObject:forIndex:]( v259,  "setObject:forIndex:",  v260,  [kVOTEventCommandPreviousColumn hash]);

  v261 = self->_commands;
  v262 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v261,  "setObject:forIndex:",  v262,  [kVOTEventCommandNextBlockquote hash]);

  v263 = self->_commands;
  v264 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v263,  "setObject:forIndex:",  v264,  [kVOTEventCommandPreviousBlockquote hash]);

  v265 = self->_commands;
  v266 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v265,  "setObject:forIndex:",  v266,  [kVOTEventCommandNextSameBlockquote hash]);

  v267 = self->_commands;
  v268 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDirectElementSearch:"));
  -[AXIndexMap setObject:forIndex:]( v267,  "setObject:forIndex:",  v268,  [kVOTEventCommandPreviousSameBlockquote hash]);

  v269 = self->_commands;
  v270 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSimpleTap:"));
  -[AXIndexMap setObject:forIndex:](v269, "setObject:forIndex:", v270, [kVOTEventCommandSimpleTap hash]);

  v271 = self->_commands;
  v272 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDoubleTap:"));
  -[AXIndexMap setObject:forIndex:](v271, "setObject:forIndex:", v272, [kVOTEventCommandDoubleTap hash]);

  v273 = self->_commands;
  v274 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTripleTap:"));
  -[AXIndexMap setObject:forIndex:](v273, "setObject:forIndex:", v274, [kVOTEventCommandTripleTap hash]);

  v275 = self->_commands;
  v276 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSimpleTap:"));
  -[AXIndexMap setObject:forIndex:]( v275,  "setObject:forIndex:",  v276,  [kVOTEventCommandSplitTapTap hash]);

  v277 = self->_commands;
  v278 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStartStopToggle:"));
  -[AXIndexMap setObject:forIndex:]( v277,  "setObject:forIndex:",  v278,  [kVOTEventCommandStartStopToggle hash]);

  v279 = self->_commands;
  v280 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleLabelElement:"));
  -[AXIndexMap setObject:forIndex:]( v279,  "setObject:forIndex:",  v280,  [kVOTEventCommandLabelElement hash]);

  v281 = self->_commands;
  v282 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleMonitorElement:"));
  -[AXIndexMap setObject:forIndex:]( v281,  "setObject:forIndex:",  v282,  [kVOTEventCommandMonitorElement hash]);

  v283 = self->_commands;
  v284 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleCrownNavigation:"));
  -[AXIndexMap setObject:forIndex:]( v283,  "setObject:forIndex:",  v284,  [kVOTEventCommandToggleCrownNaviation hash]);

  v285 = self->_commands;
  v286 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSimulatedForceTouchEvent:"));
  -[AXIndexMap setObject:forIndex:]( v285,  "setObject:forIndex:",  v286,  [kVOTEventCommandSimulatedForceTouch hash]);

  v287 = self->_commands;
  v288 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleChangeAudioDuckingMode:"));
  -[AXIndexMap setObject:forIndex:]( v287,  "setObject:forIndex:",  v288,  [kVOTEventCommandChangeAudioDuckingMode hash]);

  v289 = self->_commands;
  v290 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleLiveRegionCommand:"));
  -[AXIndexMap setObject:forIndex:]( v289,  "setObject:forIndex:",  v290,  [kVOTEventCommandToggleLiveRegions hash]);

  v291 = self->_commands;
  v292 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleWatchWakeTap:"));
  -[AXIndexMap setObject:forIndex:]( v291,  "setObject:forIndex:",  v292,  [kVOTEventCommandWatchWakeTap hash]);

  v293 = self->_commands;
  v294 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleWatchWakeDoubleTap:"));
  -[AXIndexMap setObject:forIndex:]( v293,  "setObject:forIndex:",  v294,  [kVOTEventCommandWatchWakeDoubleTap hash]);

  v295 = self->_commands;
  v296 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleWatchWakeTripleTap:"));
  -[AXIndexMap setObject:forIndex:]( v295,  "setObject:forIndex:",  v296,  [kVOTEventCommandWatchWakeTripleTap hash]);

  v297 = self->_commands;
  v298 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleActivateHomeButton:"));
  -[AXIndexMap setObject:forIndex:]( v297,  "setObject:forIndex:",  v298,  [kVOTEventCommandActivateHomeButton hash]);

  v299 = self->_commands;
  v300 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStingPress:"));
  -[AXIndexMap setObject:forIndex:](v299, "setObject:forIndex:", v300, [kVOTEventCommandStingPress hash]);

  v301 = self->_commands;
  v302 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStingKeycordPress:"));
  -[AXIndexMap setObject:forIndex:]( v301,  "setObject:forIndex:",  v302,  [kVOTEventCommandStingKeycordPress hash]);

  v303 = self->_commands;
  v304 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAutomationGeneratedTouchUpEvent:"));
  -[AXIndexMap setObject:forIndex:](v303, "setObject:forIndex:", v304, [kVOTEventCommandTouchUp hash]);

  v305 = self->_commands;
  v306 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAutomationGeneratedTouchDownEvent:"));
  -[AXIndexMap setObject:forIndex:](v305, "setObject:forIndex:", v306, [kVOTEventCommandTouchDown hash]);

  v307 = self->_commands;
  v308 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAutomationGeneratedTouchMoveEvent:"));
  -[AXIndexMap setObject:forIndex:](v307, "setObject:forIndex:", v308, [kVOTEventCommandTouchMove hash]);

  v309 = self->_commands;
  v310 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAutomationGeneratedTouchCancelEvent:"));
  -[AXIndexMap setObject:forIndex:]( v309,  "setObject:forIndex:",  v310,  [kVOTEventCommandTouchCancel hash]);

  v311 = self->_commands;
  v312 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadWord:"));
  -[AXIndexMap setObject:forIndex:](v311, "setObject:forIndex:", v312, [kVOTEventCommandReadWord hash]);

  v313 = self->_commands;
  v314 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadLine:"));
  -[AXIndexMap setObject:forIndex:](v313, "setObject:forIndex:", v314, [kVOTEventCommandReadLine hash]);

  v315 = self->_commands;
  v316 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleSingleLetterQuickNav:"));
  -[AXIndexMap setObject:forIndex:]( v315,  "setObject:forIndex:",  v316,  [kVOTEventCommandToggleSingleLetterQuickNav hash]);

  v317 = self->_commands;
  v318 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleVoiceOverModifierKeyLock:"));
  -[AXIndexMap setObject:forIndex:]( v317,  "setObject:forIndex:",  v318,  [kVOTEventCommandLockVOKeyboardKeys hash]);

  v319 = self->_commands;
  v320 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputLineCount:"));
  -[AXIndexMap setObject:forIndex:]( v319,  "setObject:forIndex:",  v320,  [kVOTEventCommandOutputLineCount hash]);

  v321 = self->_commands;
  v322 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadURL:"));
  -[AXIndexMap setObject:forIndex:](v321, "setObject:forIndex:", v322, [kVOTEventCommandReadURL hash]);

  v323 = self->_commands;
  v324 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReadItemHint:"));
  -[AXIndexMap setObject:forIndex:](v323, "setObject:forIndex:", v324, [kVOTEventCommandReadHint hash]);

  v325 = self->_commands;
  v326 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollByPage:"));
  -[AXIndexMap setObject:forIndex:]( v325,  "setObject:forIndex:",  v326,  [kVOTEventCommandScrollLeftPage hash]);

  v327 = self->_commands;
  v328 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollByPage:"));
  -[AXIndexMap setObject:forIndex:]( v327,  "setObject:forIndex:",  v328,  [kVOTEventCommandScrollRightPage hash]);

  v329 = self->_commands;
  v330 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollByPage:"));
  -[AXIndexMap setObject:forIndex:]( v329,  "setObject:forIndex:",  v330,  [kVOTEventCommandScrollUpPage hash]);

  v331 = self->_commands;
  v332 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollByPage:"));
  -[AXIndexMap setObject:forIndex:]( v331,  "setObject:forIndex:",  v332,  [kVOTEventCommandScrollDownPage hash]);

  v333 = self->_commands;
  v334 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollToTop:"));
  -[AXIndexMap setObject:forIndex:]( v333,  "setObject:forIndex:",  v334,  [kVOTEventCommandScrollToTop hash]);

  v335 = self->_commands;
  v336 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollToBottom:"));
  -[AXIndexMap setObject:forIndex:]( v335,  "setObject:forIndex:",  v336,  [kVOTEventCommandScrollToBottom hash]);

  v337 = self->_commands;
  v338 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputElementSummary:"));
  -[AXIndexMap setObject:forIndex:]( v337,  "setObject:forIndex:",  v338,  [kVOTEventCommandOutputElementSummary hash]);

  v339 = self->_commands;
  v340 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputComputerVisionAnalysisSummary:"));
  -[AXIndexMap setObject:forIndex:]( v339,  "setObject:forIndex:",  v340,  [kVOTEventCommandOutputElementComputerVisionAnalysisSummary hash]);

  v341 = self->_commands;
  v342 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputFocusedElementSummary:"));
  -[AXIndexMap setObject:forIndex:]( v341,  "setObject:forIndex:",  v342,  [kVOTEventCommandOutputFocusedElementSummary hash]);

  v343 = self->_commands;
  v344 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSelectedTextOutput:"));
  -[AXIndexMap setObject:forIndex:]( v343,  "setObject:forIndex:",  v344,  [kVOTEventCommandOutputSelectedInformation hash]);

  v345 = self->_commands;
  v346 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOutputFocusedElementSummary:"));
  -[AXIndexMap setObject:forIndex:]( v345,  "setObject:forIndex:",  v346,  [kVOTEventCommandOutputDetailedFocusedElementSummary hash]);

  v347 = self->_commands;
  v348 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleScrollToPoint:"));
  -[AXIndexMap setObject:forIndex:]( v347,  "setObject:forIndex:",  v348,  [kVOTEventCommandScrollToPoint hash]);

  v349 = self->_commands;
  v350 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAppSwitch:"));
  -[AXIndexMap setObject:forIndex:](v349, "setObject:forIndex:", v350, [kVOTEventAppSwitchNext hash]);

  v351 = self->_commands;
  v352 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAppSwitch:"));
  -[AXIndexMap setObject:forIndex:](v351, "setObject:forIndex:", v352, [kVOTEventAppSwitchPrevious hash]);

  v353 = self->_commands;
  v354 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSingleLetterSearch:"));
  -[AXIndexMap setObject:forIndex:]( v353,  "setObject:forIndex:",  v354,  [kVOTEventCommandSingleLetterSearch hash]);

  v355 = self->_commands;
  v356 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleEdgeSwipeRight:"));
  -[AXIndexMap setObject:forIndex:](v355, "setObject:forIndex:", v356, [kVOTEventCommandEdgeRight hash]);

  v357 = self->_commands;
  v358 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleEdgeSwipeLeft:"));
  -[AXIndexMap setObject:forIndex:](v357, "setObject:forIndex:", v358, [kVOTEventCommandEdgeLeft hash]);

  v359 = self->_commands;
  v360 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleEdgeSwipeTop:"));
  -[AXIndexMap setObject:forIndex:](v359, "setObject:forIndex:", v360, [kVOTEventCommandEdgeTop hash]);

  v361 = self->_commands;
  v362 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleEdgeSwipeBottom:"));
  -[AXIndexMap setObject:forIndex:](v361, "setObject:forIndex:", v362, [kVOTEventCommandEdgeBottom hash]);

  v363 = self->_commands;
  v364 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBottomEdgePanDown:"));
  -[AXIndexMap setObject:forIndex:]( v363,  "setObject:forIndex:",  v364,  [kVOTEventCommandBottomEdgePanDown hash]);

  v365 = self->_commands;
  v366 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBottomEdgePanShort:"));
  -[AXIndexMap setObject:forIndex:]( v365,  "setObject:forIndex:",  v366,  [kVOTEventCommandBottomEdgePanShort hash]);

  v367 = self->_commands;
  v368 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBottomEdgePanLong:"));
  -[AXIndexMap setObject:forIndex:]( v367,  "setObject:forIndex:",  v368,  [kVOTEventCommandBottomEdgePanLong hash]);

  v369 = self->_commands;
  v370 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTopEdgePanShort:"));
  -[AXIndexMap setObject:forIndex:]( v369,  "setObject:forIndex:",  v370,  [kVOTEventCommandTopEdgePanShort hash]);

  v371 = self->_commands;
  v372 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTopEdgePanLong:"));
  -[AXIndexMap setObject:forIndex:]( v371,  "setObject:forIndex:",  v372,  [kVOTEventCommandTopEdgePanLong hash]);

  v373 = self->_commands;
  v374 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSwitchToLeftElementCommunity:"));
  -[AXIndexMap setObject:forIndex:]( v373,  "setObject:forIndex:",  v374,  [kVOTEventCommandLeftElementCommunity hash]);

  v375 = self->_commands;
  v376 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSwitchToRightElementCommunity:"));
  -[AXIndexMap setObject:forIndex:]( v375,  "setObject:forIndex:",  v376,  [kVOTEventCommandRightElementCommunity hash]);

  v377 = self->_commands;
  v378 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSwitchToNextElementCommunity:"));
  -[AXIndexMap setObject:forIndex:]( v377,  "setObject:forIndex:",  v378,  [kVOTEventCommandNextElementCommunity hash]);

  v379 = self->_commands;
  v380 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSwitchToPreviousElementCommunity:"));
  -[AXIndexMap setObject:forIndex:]( v379,  "setObject:forIndex:",  v380,  [kVOTEventCommandPreviousElementCommunity hash]);

  v381 = self->_commands;
  v382 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleSideApp:"));
  -[AXIndexMap setObject:forIndex:]( v381,  "setObject:forIndex:",  v382,  [kVOTEventCommandShowSideApp hash]);

  v383 = self->_commands;
  v384 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleOpenVoiceOverOptions:"));
  -[AXIndexMap setObject:forIndex:]( v383,  "setObject:forIndex:",  v384,  [kVOTEventCommandOpenVoiceOverSettings hash]);

  v385 = self->_commands;
  v386 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleNextKeyboardLanguage:"));
  -[AXIndexMap setObject:forIndex:]( v385,  "setObject:forIndex:",  v386,  [kVOTEventCommandNextKeyboardLanguage hash]);

  if (AXIsInternalInstall(v387))
  {
    v388 = self->_commands;
    v389 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSendCancelEvent:"));
    -[AXIndexMap setObject:forIndex:]( v388,  "setObject:forIndex:",  v389,  [@"VOTEventCommandSendCancel" hash]);
  }

  v390 = self->_commands;
  v391 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSiriShortcutEvent:"));
  -[AXIndexMap setObject:forIndex:]( v390,  "setObject:forIndex:",  v391,  [kVOTEventCommandRunSiriShortcut hash]);

  v392 = self->_commands;
  v393 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleUserSelection:"));
  -[AXIndexMap setObject:forIndex:]( v392,  "setObject:forIndex:",  v393,  [kVOTEventCommandSelectRight hash]);

  v394 = self->_commands;
  v395 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleUserSelection:"));
  -[AXIndexMap setObject:forIndex:](v394, "setObject:forIndex:", v395, [kVOTEventCommandSelectLeft hash]);

  v396 = self->_commands;
  v397 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAdjustTextSelectionSegmentType:"));
  -[AXIndexMap setObject:forIndex:]( v396,  "setObject:forIndex:",  v397,  [kVOTEventCommandNextTextSegmentType hash]);

  v398 = self->_commands;
  v399 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAdjustTextSelectionSegmentType:"));
  -[AXIndexMap setObject:forIndex:]( v398,  "setObject:forIndex:",  v399,  [kVOTEventCommandPreviousTextSegmentType hash]);

  v400 = self->_commands;
  v401 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStartStopTextSelection:"));
  -[AXIndexMap setObject:forIndex:]( v400,  "setObject:forIndex:",  v401,  [kVOTEventCommandStartStopTextSelection hash]);

  v402 = self->_commands;
  v403 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleMute:"));
  -[AXIndexMap setObject:forIndex:](v402, "setObject:forIndex:", v403, [kVOTEventCommandToggleMute hash]);

  v404 = self->_commands;
  v405 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleScreenCurtain:"));
  -[AXIndexMap setObject:forIndex:]( v404,  "setObject:forIndex:",  v405,  [kVOTEventCommandToggleScreenCurtain hash]);

  v406 = self->_commands;
  v407 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleSoundCurtain:"));
  -[AXIndexMap setObject:forIndex:]( v406,  "setObject:forIndex:",  v407,  [kVOTEventCommandToggleSoundCurtain hash]);

  v408 = self->_commands;
  v409 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleCaptionPanel:"));
  -[AXIndexMap setObject:forIndex:]( v408,  "setObject:forIndex:",  v409,  [kVOTEventCommandToggleCaptionPanel hash]);

  v410 = self->_commands;
  v411 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDescribeImage:"));
  -[AXIndexMap setObject:forIndex:]( v410,  "setObject:forIndex:",  v411,  [kVOTEventCommandDescribeImage hash]);

  v412 = self->_commands;
  v413 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleLaunchDetectionMode:"));
  -[AXIndexMap setObject:forIndex:]( v412,  "setObject:forIndex:",  v413,  [kVOTEventCommandLaunchDetectionMode hash]);

  v414 = self->_commands;
  v415 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleRotationCapability:"));
  -[AXIndexMap setObject:forIndex:]( v414,  "setObject:forIndex:",  v415,  [kVOTEventCommandToggleRotationCapability hash]);

  v416 = self->_commands;
  v417 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleToggleQuickNav:"));
  -[AXIndexMap setObject:forIndex:]( v416,  "setObject:forIndex:",  v417,  [kVOTEventCommandToggleQuickNav hash]);

  v418 = self->_commands;
  v419 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleAnnounceQuickNav:"));
  -[AXIndexMap setObject:forIndex:]( v418,  "setObject:forIndex:",  v419,  [kVOTEventCommandAnnounceQuickNav hash]);

  v420 = self->_commands;
  v421 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleEscape:"));
  -[AXIndexMap setObject:forIndex:](v420, "setObject:forIndex:", v421, [kVOTEventCommandEscape hash]);

  v422 = self->_commands;
  v423 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "__tvOS_HandleToggleNavigationStyle:"));
  -[AXIndexMap setObject:forIndex:]( v422,  "setObject:forIndex:",  v423,  [kVOTEventCommandToggleNavigationStyle hash]);

  v424 = self->_commands;
  v425 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "__tvOS_toggleExploreFocusAffectsNativeFocusPreference"));
  -[AXIndexMap setObject:forIndex:]( v424,  "setObject:forIndex:",  v425,  [kVOTEventCommandToggleSyncNativeAndExploreFocus hash]);

  v426 = self->_commands;
  v427 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleDescribeCameraScene:"));
  -[AXIndexMap setObject:forIndex:]( v426,  "setObject:forIndex:",  v427,  [kVOTEventCommandDescribeCameraScene hash]);

  v428 = self->_commands;
  v429 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleTogglePerkinsKeyboardInput:"));
  -[AXIndexMap setObject:forIndex:]( v428,  "setObject:forIndex:",  v429,  [kVOTEventCommandTogglePerkinsKeyboardInput hash]);

  v430 = self->_commands;
  v431 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleActivateBrailleScreenInput:"));
  -[AXIndexMap setObject:forIndex:]( v430,  "setObject:forIndex:",  v431,  [kVOTEventCommandActivateBrailleScreenInput hash]);

  v432 = self->_commands;
  v433 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleReconnectBrailleDisplays:"));
  -[AXIndexMap setObject:forIndex:]( v432,  "setObject:forIndex:",  v433,  [kVOTEventCommandReconnectBrailleDisplays hash]);

  v434 = self->_commands;
  v435 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v434,  "setObject:forIndex:",  v435,  [kVOTEventCommandBraillePanLeft hash]);

  v436 = self->_commands;
  v437 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v436,  "setObject:forIndex:",  v437,  [kVOTEventCommandBraillePanRight hash]);

  v438 = self->_commands;
  v439 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v438,  "setObject:forIndex:",  v439,  [kVOTEventCommandBraillePanBeginning hash]);

  v440 = self->_commands;
  v441 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v440,  "setObject:forIndex:",  v441,  [kVOTEventCommandBraillePanEnd hash]);

  v442 = self->_commands;
  v443 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v442,  "setObject:forIndex:",  v443,  [kVOTEventCommandBrailleNextInputTable hash]);

  v444 = self->_commands;
  v445 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v444,  "setObject:forIndex:",  v445,  [kVOTEventCommandBrailleNextOutputTable hash]);

  v446 = self->_commands;
  v447 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v446,  "setObject:forIndex:",  v447,  [kVOTEventCommandBrailleAnnouncementModeOn hash]);

  v448 = self->_commands;
  v449 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v448,  "setObject:forIndex:",  v449,  [kVOTEventCommandBrailleRouter hash]);

  v450 = self->_commands;
  v451 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v450,  "setObject:forIndex:",  v451,  [kVOTEventCommandBrailleStatusRouter hash]);

  v452 = self->_commands;
  v453 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v452,  "setObject:forIndex:",  v453,  [kVOTEventCommandBrailleTranslate hash]);

  v454 = self->_commands;
  v455 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleRefreshEvent:"));
  -[AXIndexMap setObject:forIndex:]( v454,  "setObject:forIndex:",  v455,  [kVOTEventCommandBrailleRefreshBrailleLine hash]);

  v456 = self->_commands;
  v457 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleWordWrapToggleEvent:"));
  -[AXIndexMap setObject:forIndex:]( v456,  "setObject:forIndex:",  v457,  [kVOTEventCommandBrailleToggleWordWrap hash]);

  v458 = self->_commands;
  v459 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleEnableAutoAdvance:"));
  -[AXIndexMap setObject:forIndex:]( v458,  "setObject:forIndex:",  v459,  [kVOTEventCommandBrailleEnableAutoAdvance hash]);

  v460 = self->_commands;
  v461 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleIncreaseAutoAdvanceSpeed:"));
  -[AXIndexMap setObject:forIndex:]( v460,  "setObject:forIndex:",  v461,  [kVOTEventCommandBrailleIncreaseAutoAdvanceSpeed hash]);

  v462 = self->_commands;
  v463 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleBrailleDecreaseAutoAdvanceSpeed:"));
  -[AXIndexMap setObject:forIndex:]( v462,  "setObject:forIndex:",  v463,  [kVOTEventCommandBrailleDecreaseAutoAdvanceSpeed hash]);

  v464 = self->_commands;
  v465 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v464, "setObject:forIndex:", v465, [kVOTEventCommandLeftArrow hash]);

  v466 = self->_commands;
  v467 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v466, "setObject:forIndex:", v467, [kVOTEventCommandRightArrow hash]);

  v468 = self->_commands;
  v469 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v468, "setObject:forIndex:", v469, [kVOTEventCommandUpArrow hash]);

  v470 = self->_commands;
  v471 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v470, "setObject:forIndex:", v471, [kVOTEventCommandDownArrow hash]);

  v472 = self->_commands;
  v473 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v472, "setObject:forIndex:", v473, [kVOTEventCommandDelete hash]);

  v474 = self->_commands;
  v475 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v474, "setObject:forIndex:", v475, [kVOTEventCommandReturn hash]);

  v476 = self->_commands;
  v477 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v476, "setObject:forIndex:", v477, [kVOTEventCommandTab hash]);

  v478 = self->_commands;
  v479 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v478, "setObject:forIndex:", v479, [kVOTEventCommandShiftTab hash]);

  v480 = self->_commands;
  v481 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v480, "setObject:forIndex:", v481, [kVOTEventCommandCut hash]);

  v482 = self->_commands;
  v483 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v482, "setObject:forIndex:", v483, [kVOTEventCommandCopy hash]);

  v484 = self->_commands;
  v485 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v484, "setObject:forIndex:", v485, [kVOTEventCommandPaste hash]);

  v486 = self->_commands;
  v487 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v486, "setObject:forIndex:", v487, [kVOTEventCommandSelectAll hash]);

  v488 = self->_commands;
  v489 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v488, "setObject:forIndex:", v489, [kVOTEventCommandUndo hash]);

  v490 = self->_commands;
  v491 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleKeyboardCommandEvent:"));
  -[AXIndexMap setObject:forIndex:](v490, "setObject:forIndex:", v491, [kVOTEventCommandRedo hash]);

  v492 = self->_commands;
  v493 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePerformVolumeUpButtonPress:"));
  -[AXIndexMap setObject:forIndex:]( v492,  "setObject:forIndex:",  v493,  [kVOTEventCommandVolumeUpButtonPress hash]);

  v494 = self->_commands;
  v495 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePerformVolumeDownButtonPress:"));
  -[AXIndexMap setObject:forIndex:]( v494,  "setObject:forIndex:",  v495,  [kVOTEventCommandVolumeDownButtonPress hash]);

  v496 = self->_commands;
  v497 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handlePerformEjectButtonPress:"));
  -[AXIndexMap setObject:forIndex:]( v496,  "setObject:forIndex:",  v497,  [kVOTEventCommandEjectButtonPress hash]);

  v498 = self->_commands;
  v499 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleStartHelpMode:"));
  -[AXIndexMap setObject:forIndex:](v498, "setObject:forIndex:", v499, [kVOTEventCommandStartHelp hash]);

  v500 = self->_commands;
  v501 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSpeechRotorChange:"));
  -[AXIndexMap setObject:forIndex:]( v500,  "setObject:forIndex:",  v501,  [kVOTEventCommandSpeechRotorNext hash]);

  v502 = self->_commands;
  v503 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSpeechRotorChange:"));
  -[AXIndexMap setObject:forIndex:]( v502,  "setObject:forIndex:",  v503,  [kVOTEventCommandSpeechRotorPrevious hash]);

  v504 = self->_commands;
  v505 = (void *)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSpeechRotorValueChange:"));
  -[AXIndexMap setObject:forIndex:]( v504,  "setObject:forIndex:",  v505,  [kVOTEventCommandSpeechRotorIncrementValue hash]);

  v506 = self->_commands;
  id v507 = (id)objc_claimAutoreleasedReturnValue( +[SCRCTargetSelector targetSelectorWithTarget:selector:]( &OBJC_CLASS___SCRCTargetSelector,  "targetSelectorWithTarget:selector:",  self,  "_handleSpeechRotorValueChange:"));
  -[AXIndexMap setObject:forIndex:]( v506,  "setObject:forIndex:",  v507,  [kVOTEventCommandSpeechRotorDecrementValue hash]);
}

- (void)updateNavigationModeForClassicRemote
{
}

- (void)_updateNavigationModeForClassicRemote
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  1895LL,  "-[VOTElementManager _updateNavigationModeForClassicRemote]",  @"must be on element manager or system event thread");
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unsigned __int8 v4 = [v3 voiceOverUseTVToggleStyleNavigation];

  if ((v4 & 1) != 0)
  {
    if ([(id)VOTSharedWorkspace tvInteractionMode]) {
      [(id)VOTSharedWorkspace setTvInteractionModeWithoutSaving:0];
    }
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
    id v6 = [v5 currentRotorType];

    if (v6 != (id)85)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
      [v7 setCurrentRotorType:85 saveToPreferences:1 userInitiated:0];
    }
  }

- (BOOL)eventIsSystemEvent:(id)a3
{
  uint64_t v3 = qword_1001ACE80;
  id v4 = a3;
  if (v3 != -1) {
    dispatch_once(&qword_1001ACE80, &stru_100177F00);
  }
  id v5 = (void *)qword_1001ACE78;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);

  unsigned __int8 v7 = [v5 containsObject:v6];
  return v7;
}

- (BOOL)isTutorialActive
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue(-[VOTElementManager tutorialPage](self, "tutorialPage"));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(-[VOTElementManager tutorialRestrictedCommands](self, "tutorialRestrictedCommands"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);

  BOOL v8 = [v7 isEqualToString:@"com.apple.AXUIViewService"]
    && (v3 | v4
     || -[VOTElementManager tutorialListeningForGestureNotifications](self, "tutorialListeningForGestureNotifications"));

  return v8;
}

- (BOOL)commandPermittedForTutorialPage:(id)a3
{
  return 1;
}

- (BOOL)shouldTutorialIgnoreCommand:(id)a3
{
  id v4 = a3;
  int64_t v5 = -[VOTElementManager tutorialActiveRestrictionType](self, "tutorialActiveRestrictionType");
  if (!v5) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tutorialRestrictedCommands](self, "tutorialRestrictedCommands"));
      unsigned __int8 v7 = [v6 containsObject:v4];

      if ((v7 & 1) != 0) {
        goto LABEL_5;
      }
    }

- (void)tutorialSetRecognizedGesture:(id)a3
{
  id v4 = a3;
  id v7 = v4;
  if (qword_1001ACE90 == -1)
  {
    id v5 = v4;
  }

  else
  {
    dispatch_once(&qword_1001ACE90, &stru_100177F20);
    id v5 = v7;
  }

  if ([(id)qword_1001ACE88 containsObject:v5])
  {
    -[VOTElementManager setTutorialRecognizedGesture:](self, "setTutorialRecognizedGesture:", v7);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification( DarwinNotifyCenter,  kAXSVoiceOverTouchTutorialRecognizedGestureNotification,  0LL,  0LL,  1u);
  }
}

- (void)handleEvent:(id)a3
{
  id v34 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
  if (![v34 origin]) {
    _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"The Event did not have a type set to it: %@");
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandEscape];

  if (v8) {
    [v34 setBypassHelp:1];
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  [v9 practiceRegion];
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  double v15 = v14;
  double v17 = v16;

  if ([v6 helpEnabled])
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
    if ([v18 isEqualToString:kVOTEventCommandTracking])
    {
      [v34 touchPoint];
      v35.x = v19;
      v35.y = v20;
      v36.origin.x = v11;
      v36.origin.y = v13;
      v36.size.width = v15;
      v36.size.height = v17;
      BOOL v21 = !CGRectContainsPoint(v36, v35);
    }

    else
    {
      BOOL v21 = 0;
    }
  }

  else
  {
    BOOL v21 = 0;
  }

  if ([v6 helpEnabled] && (objc_msgSend(v34, "bypassHelp") & 1) == 0)
  {
    BOOL v22 = CGSizeZero.height == v17 && CGSizeZero.width == v15;
    if (v22 || !v21)
    {
      objc_msgSend(v6, "processHelpForEvent:", v34, CGSizeZero.width);
      goto LABEL_34;
    }
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
  v25 = (void *)kVOTEventCommandTracking;

  if (v24 != v25)
  {
    if (-[VOTElementManager directTouchModeHandledEvent:](self, "directTouchModeHandledEvent:", v34)) {
      goto LABEL_34;
    }
    v26 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
    if (v26 != (void *)kVOTEventCommandNextElement)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
      uint64_t v28 = v27;
      if (v27 != (void *)kVOTEventCommandPreviousElement)
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
        objc_super v30 = (void *)kVOTEventCommandAnnouncement;

        if (v29 != v30)
        {
          if (-[VOTElementManager eventIsSystemEvent:](self, "eventIsSystemEvent:", v34)) {
            systemEventThread = self->_systemEventThread;
          }
          else {
            systemEventThread = self->_elementManagerThread;
          }
          goto LABEL_33;
        }

        goto LABEL_31;
      }
    }

LABEL_31:
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v32 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

    goto LABEL_32;
  }

  -[NSLock lock](self->_trackingLock, "lock");
  objc_storeStrong((id *)&self->_mostRecentTrackingEvent, a3);
  -[NSLock unlock](self->_trackingLock, "unlock");
LABEL_32:
  systemEventThread = self->_elementManagerThread;
LABEL_33:
  -[SCRCThread performSelector:onTarget:count:objects:]( systemEventThread,  "performSelector:onTarget:count:objects:",  "_handleEvent:",  self,  1LL,  v34,  0LL);
LABEL_34:
  v33 = (void *)objc_claimAutoreleasedReturnValue([v34 command]);
  -[VOTElementManager setLastEventCommand:](self, "setLastEventCommand:", v33);

  if (CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime > 4.0)
  {
    if (qword_1001ACEA0 != -1) {
      dispatch_once(&qword_1001ACEA0, &stru_100177F40);
    }
    dispatch_async((dispatch_queue_t)qword_1001ACE98, &stru_100177F60);
    self->_lastEventOccurredTime = CFAbsoluteTimeGetCurrent();
  }
}

- (id)_similarMonitoredElement:(id)a3
{
  id v3 = a3;
  [v3 centerPoint];
  double Center = v5;
  double v7 = v4;
  double y = CGPointZero.y;
  if (CGPointZero.x == v5 && y == v4)
  {
    [v3 frame];
    double Center = AX_CGRectGetCenter(v10, v11, v12, v13);
    double v7 = v14;
  }

  if (CGPointZero.x == Center && y == v7)
  {
    uint64_t v28 = 0LL;
  }

  else
  {
    double v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v16, "convertPoint:fromContextId:", objc_msgSend(v3, "windowContextId"), Center, v7);
    double v18 = v17;
    double v20 = v19;

    BOOL v21 = -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", v18, v20);
    -[VOTElement frame](v21, "frame");
    double v23 = v22;
    [v3 frame];
    if (vabdd_f64(v23, v24) >= 10.0
      || (-[VOTElement frame](v21, "frame"), double v26 = v25, [v3 frame], vabdd_f64(v26, v27) >= 10.0))
    {
      uint64_t v28 = 0LL;
    }

    else
    {
      uint64_t v28 = v21;
    }
  }

  return v28;
}

- (id)_monitoredElementCachedText:(id)a3
{
  id v3 = a3;
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 label]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);

  uint64_t v6 = __AXStringForVariables(v4);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

- (void)_monitorElements
{
  id v2 = self;
  id v3 = -[NSArray mutableCopy](self->_currentApplications, "mutableCopy");
  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
  if (v4) {
    [v3 addObject:v4];
  }
  v43 = (void *)v4;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  id obj = v3;
  id v46 = [obj countByEnumeratingWithState:&v54 objects:v63 count:16];
  if (v46)
  {
    uint64_t v45 = *(void *)v55;
    __int128 v48 = v2;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v55 != v45) {
          objc_enumerationMutation(obj);
        }
        uint64_t v47 = v5;
        uint64_t v6 = *(void **)(*((void *)&v54 + 1) + 8 * v5);
        elementMonitorCache = v2->_elementMonitorCache;
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( elementMonitorCache,  "objectForKeyedSubscript:",  v8));

        uint64_t v11 = VOTLogCommon(v10);
        double v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v59 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Checking in on: %@", buf, 0xCu);
        }

        __int128 v52 = 0u;
        __int128 v53 = 0u;
        __int128 v50 = 0u;
        __int128 v51 = 0u;
        double v13 = (void *)objc_claimAutoreleasedReturnValue([v9 allKeys]);
        id v14 = [v13 copy];

        id v15 = [v14 countByEnumeratingWithState:&v50 objects:v62 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v51;
          do
          {
            for (i = 0LL; i != v16; i = (char *)i + 1)
            {
              if (*(void *)v51 != v17) {
                objc_enumerationMutation(v14);
              }
              double v19 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
              if ([v19 isAlive])
              {
                [v19 updateCache];
                double v20 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _monitoredElementCachedText:]( v2,  "_monitoredElementCachedText:",  v19));
                BOOL v21 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v19]);
                if ([v21 isEqualToString:v20])
                {

                  id v23 = 0LL;
                }

                else
                {
                  id v23 = [v20 length];

                  if (v23)
                  {
                    id v23 = v19;
                    id v22 = [v9 setObject:v20 forKeyedSubscript:v23];
                  }
                }

                uint64_t v28 = VOTLogCommon(v22);
                double v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  v59 = v19;
                  __int16 v60 = 2112;
                  v61 = v20;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "Checked element with newText: %@, %@",  buf,  0x16u);
                }
              }

              else
              {
                double v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _similarMonitoredElement:](v2, "_similarMonitoredElement:", v19));
                double v24 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _monitoredElementCachedText:]( v2,  "_monitoredElementCachedText:",  v20));
                uint64_t v25 = VOTLogCommon(v24);
                double v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  v59 = v19;
                  __int16 v60 = 2112;
                  v61 = v20;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "Element not alive: %@, using: %@",  buf,  0x16u);
                }

                double v27 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v19]);
                if ([v27 isEqualToString:v24])
                {

                  id v23 = 0LL;
                }

                else
                {
                  id v29 = v16;
                  uint64_t v30 = v17;
                  id v31 = v14;
                  id v32 = -[os_log_s length](v24, "length");

                  if (v32)
                  {
                    id v23 = v20;
                    [v9 setObject:v24 forKeyedSubscript:v23];
                  }

                  else
                  {
                    id v23 = 0LL;
                  }

                  id v14 = v31;
                  uint64_t v17 = v30;
                  id v16 = v29;
                  id v2 = v48;
                }

                [v9 removeObjectForKey:v19];
              }

              if (v23) {
                -[VOTElementManager _elementMonitoringOutputElement:userMonitored:]( v2,  "_elementMonitoringOutputElement:userMonitored:",  v23,  1LL);
              }
            }

            id v16 = [v14 countByEnumeratingWithState:&v50 objects:v62 count:16];
          }

          while (v16);
        }

        uint64_t v5 = v47 + 1;
      }

      while ((id)(v47 + 1) != v46);
      id v46 = [obj countByEnumeratingWithState:&v54 objects:v63 count:16];
    }

    while (v46);
  }

  uint64_t v34 = VOTLogCommon(v33);
  CGPoint v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1380((uint64_t)v2, v35, v36, v37, v38, v39, v40, v41);
  }

  if (v2->_flags.isMonitoringElements)
  {
    elementMonitorTimer = v2->_elementMonitorTimer;
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472LL;
    v49[2] = sub_1000585E8;
    v49[3] = &unk_100176D38;
    v49[4] = v2;
    -[SCRCTargetSelectorTimer dispatchAfterDelay:withBlock:]( elementMonitorTimer,  "dispatchAfterDelay:withBlock:",  v49,  0.75);
  }
}

- (void)_updateContinuousPathTimeout
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v3 voiceOverContinuousPathKeyboardStartTimeout];
  -[VOTElementManager setContinuousPathTimeout:](self, "setContinuousPathTimeout:");

  uint64_t v5 = VOTLogCommon(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    -[VOTElementManager continuousPathTimeout](self, "continuousPathTimeout");
    int v8 = 134217984;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Updated continuous path timeout: %f",  (uint8_t *)&v8,  0xCu);
  }
}

- (BOOL)directTouchModeHandledEvent:(id)a3
{
  id v4 = a3;
  if ((AXDeviceIsAudioAccessory(v4, v5) & 1) != 0) {
    goto LABEL_2;
  }
  id v8 = [v4 origin];
  id v9 = [v4 origin];
  BOOL v6 = 0;
  if (-[VOTElementManager inDirectTouchMode](self, "inDirectTouchMode") && v9 != (id)5 && v8 != (id)4)
  {
    if ([v4 isAppleTVRemoteEvent])
    {
LABEL_2:
      BOOL v6 = 0;
      goto LABEL_3;
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if ([v10 isEqualToString:kVOTEventCommandSearchRotorLeft])
    {
LABEL_22:

      goto LABEL_2;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if ([v11 isEqualToString:kVOTEventCommandSearchRotorRight])
    {
LABEL_21:

      goto LABEL_22;
    }

    double v12 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if ([v12 isEqualToString:kVOTEventCommandToggleNavigationStyle])
    {
LABEL_20:

      goto LABEL_21;
    }

    double v13 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if ([v13 isEqualToString:kVOTEventCommandPauseSpeaking])
    {
LABEL_19:

      goto LABEL_20;
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if ([v14 isEqualToString:kVOTEventCommandItemChooser])
    {
LABEL_18:

      goto LABEL_19;
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    if (([v15 isEqualToString:kVOTEventCommandStartStopToggle] & 1) == 0)
    {
      if (-[VOTElementManager tvIsInteractingWithRotor](self, "tvIsInteractingWithRotor"))
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
        if ([v16 isEqualToString:kVOTEventCommandSearchRotorUp])
        {

          goto LABEL_17;
        }

        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
        unsigned __int8 v18 = [v17 isEqualToString:kVOTEventCommandSearchRotorDown];

        if ((v18 & 1) != 0) {
          goto LABEL_2;
        }
      }

      else
      {
      }

      -[SCRCTargetSelectorTimer cancel](self->_tvRotorInteractionTimer, "cancel");
      -[VOTElementManager setTvIsInteractingWithRotor:](self, "setTvIsInteractingWithRotor:", 0LL);
      BOOL v6 = 1;
      goto LABEL_3;
    }

- (void)_handleEvent:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v5 & 1) == 0)
  {
    uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v5 & 1) == 0) {
      uint64_t v5 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  2447LL,  "-[VOTElementManager _handleEvent:]",  @"must be on element manager or system event thread");
    }
  }

  if (AXDeviceIsTV(v5))
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v7 = [v6 voiceOverUseTVToggleStyleNavigation];

    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));

      if (!v8)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"));
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v9);
      }
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  id v11 = [v10 hash];

  if (!-[VOTElementManager directTouchModeHandledEvent:](self, "directTouchModeHandledEvent:", v4))
  {
    double v12 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1001ACE70 objectForIndex:v11]);
    unsigned __int8 v13 = [v12 BOOLValue];

    if ((v13 & 1) == 0) {
      id v14 = -[VOTElementManager _stopReadAll](self, "_stopReadAll");
    }
    if ((AXDeviceIsAudioAccessory(v14, v15) & 1) != 0) {
      goto LABEL_31;
    }
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    unint64_t v17 = sub_10004BF40(v16);

    unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    if ([v18 voiceOverUseTVToggleStyleNavigation]
      && -[VOTElementManager tvIsInteractingWithRotor](self, "tvIsInteractingWithRotor")
      || (v17 & 0xFFFFFFFFFFFFFFFELL) != 0x10)
    {
    }

    else
    {
      id v19 = [(id)VOTSharedWorkspace tvInteractionMode];

      if (!v19)
      {
        if (-[VOTElementManager _sendTVRemoteCommandOverrideForAXCommand:]( self,  "_sendTVRemoteCommandOverrideForAXCommand:",  v17))
        {
          goto LABEL_41;
        }

        goto LABEL_31;
      }
    }

    if (+[VOTRotor rotorIsUsedForSettingAdjustment:]( &OBJC_CLASS___VOTRotor,  "rotorIsUsedForSettingAdjustment:",  -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType")))
    {
      if (v17 <= 0x11 && ((1LL << v17) & 0x30001) != 0) {
        goto LABEL_31;
      }
    }

    else if (!v17)
    {
      goto LABEL_31;
    }

    double v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    id v21 = [v20 overriddenInterpretationForCommand:v17];
    if (v21 == (id)1)
    {
      unsigned __int8 v22 = -[VOTElementManager _sendTVRemoteCommandOverrideForAXCommand:]( self,  "_sendTVRemoteCommandOverrideForAXCommand:",  v17);

      if ((v22 & 1) != 0)
      {
LABEL_41:
        if (qword_1001ACEB0 != -1) {
          dispatch_once(&qword_1001ACEB0, &stru_100177F80);
        }
        double v24 = (void *)qword_1001ACEA8;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
        unsigned int v26 = [v24 containsObject:v25];

        if ((([v4 isTouchEvent] & 1) != 0 || v26)
          && (-[SCRCTargetSelectorTimer isCancelled](self->_updateAppFromTimer, "isCancelled") & 1) == 0)
        {
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3221225472LL;
          v42[2] = sub_100058F90;
          v42[3] = &unk_100177FA8;
          id v27 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
          id v43 = v27;
          if (-[VOTElementManager _hasCurrentApplicationMatchingBlock:]( self,  "_hasCurrentApplicationMatchingBlock:",  v42))
          {
            if (v26) {
              -[VOTElementManager setLastUserElementTouchTime:]( self,  "setLastUserElementTouchTime:",  CFAbsoluteTimeGetCurrent());
            }
            -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
          }
        }

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        if ([v28 isBannerNotification]
          && CFAbsoluteTimeGetCurrent() - self->_lastSentBannerTimerReset > 0.5)
        {
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
          if ([v29 isEqualToString:kVOTEventCommandIdle])
          {
          }

          else
          {
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
            unsigned __int8 v31 = [v30 isEqualToString:kVOTEventCommandTracking];

            if ((v31 & 1) == 0)
            {
              uint64_t v33 = VOTLogElement(v32);
              uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
                sub_1000F13E8(v4, v34);
              }

              self->_lastSentBannerTimerReset = CFAbsoluteTimeGetCurrent();
              [v28 resetBannerTimer];
            }
          }
        }

        if (self->_currentPublicCustomRotorItemResult
          && v11 != [kVOTEventCommandSearchRotorUp hash]
          && v11 != [kVOTEventCommandSearchRotorDown hash]
          && !self->_inTextProcessingRotorMode)
        {
          self->_flags.shouldUpdateRotorForElement = 1;
        }

        CGPoint v35 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
        uint64_t v36 = (void *)kVOTEventCommandAnnouncement;

        if (v35 == v36)
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForIndex:116]);
          -[VOTElementManager _handleAnnouncement:](self, "_handleAnnouncement:", v37);
        }

        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager elementManagerHandledEventCallback]( self,  "elementManagerHandledEventCallback"));

        if (v38)
        {
          uint64_t v39 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[VOTElementManager elementManagerHandledEventCallback]( self,  "elementManagerHandledEventCallback"));
          ((void (**)(void, VOTElementManager *, id))v39)[2](v39, self, v4);
        }

        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
        if (v40 == (void *)kVOTEventCommandSearchRotorDown)
        {
          self->_lastHandledEventWasRotorMovement = 1;
        }

        else
        {
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
          self->_lastHandledEventWasRotorMovement = v41 == (void *)kVOTEventCommandSearchRotorUp;
        }

        goto LABEL_72;
      }
    }

    else
    {
      if (v21 == (id)2)
      {
LABEL_40:

        goto LABEL_41;
      }
    }

- (void)_pausedSpeechInterrupted:(id)a3
{
  uint64_t v4 = VOTLogSpeech(self, a2, a3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Paused speech interrupted, cancelling reading all",  v6,  2u);
  }

  *(_WORD *)&self->_flags.isReadingAll = 0;
}

- (void)_moveDetectionModeRotor:(id)a3
{
}

- (void)_updateStateForNotificationData:(id)a3
{
  uint64_t v4 = (VOTElement *)a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  2702LL,  "-[VOTElementManager _updateStateForNotificationData:]",  @"must be on element manager or system event thread");
  }

  if (v4)
  {
    if (qword_1001ACEC0 != -1) {
      dispatch_once(&qword_1001ACEC0, &stru_100177FC8);
    }
    CFTypeID v5 = CFGetTypeID(v4);
    if (v5 == AXUIElementGetTypeID())
    {
      unsigned int v7 = 0LL;
      id v8 = v4;
      goto LABEL_9;
    }

    uint64_t v10 = objc_opt_class(&OBJC_CLASS___AXUIElement, v6);
    if ((objc_opt_isKindOfClass(v4, v10) & 1) != 0)
    {
      id v9 = v4;
      id v8 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v9));
      unsigned int v7 = 0LL;
      if (!v8) {
        goto LABEL_23;
      }
LABEL_13:
      IsEmptdouble y = -[VOTElement isValid](v8, "isValid", v53);
      if (IsEmpty && (-[VOTElement frame](v8, "frame"), !(IsEmptdouble y = CGRectIsEmpty(v72))))
      {
        unsigned __int8 v13 = self;
        uint64_t v19 = VOTLogLayoutChange(-[VOTElementManager setNextElementToFocus:](self, "setNextElementToFocus:", v8));
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_1000F1528();
        }
      }

      else
      {
        unsigned __int8 v13 = self;
        uint64_t v14 = VOTLogLayoutChange(IsEmpty);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
          sub_1000F14C8();
        }
      }

      self = v13;
LABEL_23:
      if (v7) {
        goto LABEL_24;
      }
LABEL_27:

      goto LABEL_28;
    }

    id v16 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
    uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString, v11);
    if ((objc_opt_isKindOfClass(v4, v17) & 1) != 0)
    {
      if (([(id)qword_1001ACEB8 containsObject:v4] & 1) == 0)
      {
        unsigned int v7 = v4;
        id v9 = 0LL;
        id v8 = 0LL;
LABEL_24:
        uint64_t v20 = VOTLogLayoutChange( -[VOTElementManager setNextStringToSpeakOnScreenChange:]( self,  "setNextStringToSpeakOnScreenChange:",  v7,  v53));
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
          sub_1000F1468();
        }

        goto LABEL_27;
      }

      goto LABEL_66;
    }

    uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSArray, v18);
    if ((objc_opt_isKindOfClass(v4, v22) & 1) != 0)
    {
      __int128 v54 = self;
      __int128 v67 = 0u;
      __int128 v68 = 0u;
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      double v24 = v4;
      id v25 = -[VOTElement countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v65,  v71,  16LL);
      if (v25)
      {
        id v26 = v25;
        __int128 v53 = v4;
        unsigned int v7 = 0LL;
        id v8 = 0LL;
        uint64_t v27 = *(void *)v66;
        p_inst_props = &OBJC_PROTOCOL___VOTOutputRequestCompletionProtocol.inst_props;
        __int128 v55 = v24;
        while (1)
        {
          for (i = 0LL; i != v26; i = (char *)i + 1)
          {
            if (*(void *)v66 != v27) {
              objc_enumerationMutation(v24);
            }
            uint64_t v30 = *(VOTElement **)(*((void *)&v65 + 1) + 8LL * (void)i);
            CFTypeID v31 = CFGetTypeID(v30);
            if (v31 == AXUIElementGetTypeID())
            {
              id v8 = v30;
              continue;
            }

            uint64_t v33 = objc_opt_class(v16[498], v32);
            if ((objc_opt_isKindOfClass(v30, v33) & 1) != 0)
            {
              CGPoint v35 = v30;
              uint64_t v36 = v7;
              unsigned int v7 = v35;
            }

            else
            {
              uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSDictionary, v34);
              if ((objc_opt_isKindOfClass(v30, v37) & 1) == 0) {
                continue;
              }
              __int128 v63 = 0u;
              __int128 v64 = 0u;
              __int128 v61 = 0u;
              __int128 v62 = 0u;
              uint64_t v36 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElement allValues](v30, "allValues"));
              id v38 = -[VOTElement countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v61,  v70,  16LL);
              if (v38)
              {
                id v39 = v38;
                __int128 v56 = v7;
                uint64_t v40 = *(void *)v62;
                do
                {
                  for (j = 0LL; j != v39; j = (char *)j + 1)
                  {
                    if (*(void *)v62 != v40) {
                      objc_enumerationMutation(v36);
                    }
                    v42 = *(VOTElement **)(*((void *)&v61 + 1) + 8LL * (void)j);
                    CFTypeID v43 = CFGetTypeID(v42);
                    if (v43 == AXUIElementGetTypeID()) {
                      id v8 = v42;
                    }
                  }

                  id v39 = -[VOTElement countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v61,  v70,  16LL);
                }

                while (v39);
                double v24 = v55;
                unsigned int v7 = v56;
                id v16 = &_s10Foundation6LocaleV15AXCoreUtilitiesE014minimalCanonicB10IdentifierSSvg_ptr;
                p_inst_props = (__objc2_prop_list **)(&OBJC_PROTOCOL___VOTOutputRequestCompletionProtocol + 56);
              }
            }
          }

          id v26 = -[VOTElement countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v65,  v71,  16LL);
          if (!v26)
          {
            uint64_t v4 = v53;
            self = v54;
            goto LABEL_69;
          }
        }
      }

      unsigned int v7 = 0LL;
      id v8 = 0LL;
    }

    else
    {
      uint64_t v44 = objc_opt_class(&OBJC_CLASS___NSDictionary, v23);
      if ((objc_opt_isKindOfClass(v4, v44) & 1) == 0)
      {
LABEL_66:
        id v9 = 0LL;
        unsigned int v7 = 0LL;
        id v8 = 0LL;
        goto LABEL_27;
      }

      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      double v24 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElement allValues](v4, "allValues"));
      id v45 = -[VOTElement countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v57,  v69,  16LL);
      if (v45)
      {
        id v46 = v45;
        uint64_t v47 = self;
        __int128 v48 = v4;
        id v8 = 0LL;
        uint64_t v49 = *(void *)v58;
        do
        {
          for (k = 0LL; k != v46; k = (char *)k + 1)
          {
            if (*(void *)v58 != v49) {
              objc_enumerationMutation(v24);
            }
            __int128 v51 = *(VOTElement **)(*((void *)&v57 + 1) + 8LL * (void)k);
            CFTypeID v52 = CFGetTypeID(v51);
            if (v52 == AXUIElementGetTypeID()) {
              id v8 = v51;
            }
          }

          id v46 = -[VOTElement countByEnumeratingWithState:objects:count:]( v24,  "countByEnumeratingWithState:objects:count:",  &v57,  v69,  16LL);
        }

        while (v46);
        unsigned int v7 = 0LL;
        uint64_t v4 = v48;
        self = v47;
      }

      else
      {
        unsigned int v7 = 0LL;
        id v8 = 0LL;
      }
    }

- (void)handleNotification:(int)a3 withData:(id)a4 forElement:(__AXUIElement *)a5
{
  id v8 = a4;
  uint64_t v9 = VOTLogNotifications();
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1648();
  }

  if (a3 <= 3025)
  {
    switch(a3)
    {
      case 1000:
        uint64_t v17 = VOTLogLayoutChange(v11);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          sub_1000F1588();
        }

        if (_AXSAutomationEnabled(v19))
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
          [v20 postNotificationName:@"VoiceOverEventOccurred" object:@"DidReceiveScreenChange"];
        }

        if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v8,  kAXScreenChangePopup))
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent PopoverDidAppear](&OBJC_CLASS___VOSOutputEvent, "PopoverDidAppear"));
          [v21 sendEvent:v22];
        }

        -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  "_updateStateForNotificationData:",  self,  0LL,  1LL,  v8,  0LL);
        -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  "_notificationThreadCancel",  self,  1574144LL,  0LL,  0LL);
        unsigned int v23 = -[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v8,  kAXPerformElementUpdateImmediatelyToken);
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenChange:sound:";
        if (v23) {
          goto LABEL_32;
        }
        id v38 = 0LL;
        uint64_t v39 = 0LL;
        double v24 = self;
        uint64_t v25 = 256LL;
        goto LABEL_109;
      case 1001:
        uint64_t v26 = _AXSAutomationEnabled(v11);
        if ((_DWORD)v26)
        {
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
          [v27 postNotificationName:@"VoiceOverEventOccurred" object:@"DidReceiveLayoutChange"];
        }

        uint64_t v28 = VOTLogLayoutChange(v26);
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG)) {
          sub_1000F15E8();
        }

        if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v8,  kAXForceUpdateChangeToken))
        {
          -[VOTElementManager setDidReceiveForceUpdateChangeToken:](self, "setDidReceiveForceUpdateChangeToken:", 1LL);
        }

        -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  "_updateStateForNotificationData:",  self,  0LL,  1LL,  v8,  0LL);
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleElementChangedNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 1024LL;
        goto LABEL_102;
      case 1002:
      case 1003:
      case 1011:
      case 1015:
      case 1019:
      case 1021:
      case 1025:
      case 1027:
      case 1028:
      case 1031:
      case 1033:
      case 1034:
      case 1036:
      case 1037:
      case 1051:
      case 1054:
      case 1058:
      case 1060:
      case 1067:
      case 1069:
      case 1076:
      case 1077:
      case 1078:
      case 1079:
        goto LABEL_105;
      case 1004:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenLock:";
        break;
      case 1005:
        uint64_t v30 = self->_elementManagerThread;
        CFTypeID v31 = -[VOTElement initWithAXElement:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithAXElement:", a5);
        -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( v30,  "performSelector:onTarget:cancelMask:count:objects:",  "_handleValueChangedNotification:associatedElement:",  self,  0LL,  2LL,  v8,  v31,  0LL);

        goto LABEL_105;
      case 1006:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAlertReceived:forApplication:";
        id v38 = a5;
        uint64_t v39 = 0LL;
        double v24 = self;
        uint64_t v25 = 2048LL;
        goto LABEL_109;
      case 1007:
      case 1072:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleWebPageLoaded:";
        break;
      case 1008:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAnnouncementNotification:";
        break;
      case 1009:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScrollByPageNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 512LL;
        goto LABEL_102;
      case 1010:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAutoCorrectionMadeNotification:";
        goto LABEL_48;
      case 1012:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleKeyboardKeySelectedNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 0x8000LL;
        goto LABEL_102;
      case 1013:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAutoCorrectionDisplayNotification:";
LABEL_48:
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 4096LL;
        goto LABEL_102;
      case 1014:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleKeyboardChangedNotification";
        goto LABEL_99;
      case 1016:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleElementMoved:";
        break;
      case 1017:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleSelectionChangedNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 0x10000LL;
        goto LABEL_102;
      case 1018:
        -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  "_notificationThreadCancel",  self,  0x10000LL,  0LL,  0LL);
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleFirstResponderChangedNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 0x20000LL;
        goto LABEL_102;
      case 1020:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleMoveToElementNotification:";
        break;
      case 1022:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleWebSelectionChangedNotification:";
        break;
      case 1023:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleInvalidTextInputNotification:";
        break;
      case 1024:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAppSuspendAnimationProgressNotification:";
        break;
      case 1026:
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10005A144;
        block[3] = &unk_100176D38;
        block[4] = self;
        if (qword_1001ACEC8 != -1) {
          dispatch_once(&qword_1001ACEC8, block);
        }
        -[SCRCTargetSelectorTimer cancel](self->_invalidStatusChangedTimer, "cancel");
        -[SCRCTargetSelectorTimer dispatchAfterDelay:withObject:]( self->_invalidStatusChangedTimer,  "dispatchAfterDelay:withObject:",  v8,  1.0);
        goto LABEL_105;
      case 1029:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleKBPopupVariantsNotification:";
        break;
      case 1030:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenUnlock";
        goto LABEL_99;
      case 1032:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleCurrentContentReadingLineUpdated:";
        break;
      case 1035:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleCameraCenteredNotification:";
        break;
      case 1038:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleBarcodeVisibilityNotification:";
        break;
      case 1039:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenOn";
        goto LABEL_99;
      case 1040:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenOff";
        goto LABEL_99;
      case 1041:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleStopSpeaking";
        goto LABEL_99;
      case 1042:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenOnSilently";
        goto LABEL_99;
      case 1043:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenOffSilently";
        goto LABEL_99;
      case 1044:
        uint64_t v32 = self->_elementManagerThread;
        uint64_t v33 = "_handleVisualsUpdate:";
        goto LABEL_92;
      case 1045:
        uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber, v12);
        if ((objc_opt_isKindOfClass(v8, v34) & 1) != 0)
        {
          unsigned __int8 v35 = [v8 isEqualToNumber:&__kCFBooleanTrue];
          self->_isInPreview = v35;
          if ((v35 & 1) == 0) {
            -[VOTElementManager _simulatedForceTouchLift](self, "_simulatedForceTouchLift");
          }
        }

        goto LABEL_105;
      case 1046:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleExpandedStatusChanged:";
        break;
      case 1047:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleFocusedElementContentChangeNotification:";
        break;
      case 1048:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleRequestExclusiveAudioHardware";
        goto LABEL_99;
      case 1049:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleReleaseExclusiveAudioHardware";
        goto LABEL_99;
      case 1050:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleUnmuteEligibleEventOccured";
        goto LABEL_99;
      case 1052:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleTextReplacementOccurredNotification:";
        break;
      case 1053:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleNativeFocusItemChangedNotification:";
        id v38 = 0LL;
        double v24 = self;
        uint64_t v25 = 0x100000LL;
        goto LABEL_102;
      case 1055:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenWillChangeNotification:";
        break;
      case 1056:
        uint64_t v32 = self->_elementManagerThread;
        uint64_t v33 = "_handleDidReceiveVisionEngineResult:";
        goto LABEL_92;
      case 1057:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleRealtimeElementUpdate:";
        break;
      case 1059:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleScreenWillWakeNotification:";
        break;
      case 1061:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleWebFormControlInteractionStartNotification:";
        break;
      case 1062:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleWebFormControlInteractionEndNotification:";
        break;
      case 1063:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleKeyboardContinuousPathDidBegin:";
        break;
      case 1064:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleLiveContinuousToneBeginNotification:";
        break;
      case 1065:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleLiveContinuousToneUpdateNotification:";
        break;
      case 1066:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleLiveContinuousToneEndNotification:";
        break;
      case 1068:
        uint64_t v32 = self->_elementManagerThread;
        uint64_t v33 = "_handleCaptionsDisplayedNotification:";
LABEL_92:
        -[SCRCThread performSelector:onTarget:count:objects:]( v32,  "performSelector:onTarget:count:objects:",  v33,  self,  1LL,  v8,  0LL);
        goto LABEL_105;
      case 1070:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleContextMenuStatusNotification:";
        break;
      case 1071:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleDuckingDisabling:";
        break;
      case 1073:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handlePauseSpeechAndHapticsNotification:";
        break;
      case 1074:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAudiographSelectedSeriesChangedNotification:";
        break;
      case 1075:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleAudiographPlaybackStateNotification:";
        break;
      case 1080:
        elementManagerThread = self->_elementManagerThread;
        uint64_t v14 = "_handleStopSpeakingAndClearQueue";
LABEL_99:
        double v24 = self;
        uint64_t v25 = 0LL;
        uint64_t v36 = 0LL;
        id v37 = 0LL;
        goto LABEL_104;
      default:
        if (a3 == 2025)
        {
          elementManagerThread = self->_elementManagerThread;
          uint64_t v14 = "_handleLabelElementAcceptedNotification:";
        }

        else
        {
          if (a3 != 2026) {
            goto LABEL_105;
          }
          elementManagerThread = self->_elementManagerThread;
          uint64_t v14 = "_handleItemChooserSelectionMade:";
        }

        break;
    }

- (void)_handleLiveContinuousToneBeginNotification:(id)a3
{
  id v10 = a3;
  if (AXDeviceSupportsSonification(v10))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    [v3 beginLiveModeSession];

    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
    if ((objc_opt_isKindOfClass(v10, v5) & 1) != 0)
    {
      [v10 floatValue];
      double v7 = v6;
      if (v7 > 1.0) {
        double v7 = 1.0;
      }
      double v8 = fmax(v7, 0.0);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
      [v9 setLiveModeValue:v8];
    }
  }
}

- (void)_handleLiveContinuousToneUpdateNotification:(id)a3
{
  id v9 = a3;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNumber, v3);
  if ((objc_opt_isKindOfClass(v9, v4) & 1) != 0)
  {
    [v9 floatValue];
    double v6 = v5;
    if (v6 > 1.0) {
      double v6 = 1.0;
    }
    double v7 = fmax(v6, 0.0);
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    [v8 setLiveModeValue:v7];
  }
}

- (void)_handleLiveContinuousToneEndNotification:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager", a3));
  [v3 endLiveModeSession];
}

- (BOOL)_notificationData:(id)a3 containsToken:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0)
  {
    unsigned __int8 v10 = [v5 containsObject:v6];
LABEL_7:
    unsigned __int8 v13 = v10;
    goto LABEL_10;
  }

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
  if ((objc_opt_isKindOfClass(v5, v11) & 1) == 0)
  {
    unsigned __int8 v10 = [v5 isEqual:v6];
    goto LABEL_7;
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
  if ([v12 containsObject:v6])
  {
    unsigned __int8 v13 = 1;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:kAXNotificationDataKey]);
    unsigned __int8 v13 = [v14 isEqual:v6];
  }

LABEL_10:
  return v13;
}

- (id)_notificationData:(id)a3 consumingToken:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray, v7);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0 && [v5 containsObject:v6])
  {
    id v9 = [v5 mutableCopy];
    [v9 removeObject:v6];
    if ([v9 count]) {
      id v10 = v9;
    }
    else {
      id v10 = 0LL;
    }
  }

  else if ([v5 isEqual:v6])
  {
    id v10 = 0LL;
  }

  else
  {
    id v10 = v5;
  }

  return v10;
}

- (void)sendRequest:(id)a3
{
  id v3 = a3;
  uint64_t v4 = VOTLogCommon(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_1000F16CC();
  }

  id v6 = [(id)VOTSharedWorkspace pauseSpeechAndHaptics];
  if ((_DWORD)v6)
  {
    uint64_t v8 = VOTLogAudio(v6, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Not sending request because speech and haptics is currently paused",  v10,  2u);
    }
  }

  else
  {
    [v3 send];
  }
}

- (double)keyboardKeyPenumbra:(id)a3
{
  double result = v3 + v3 / -6.0;
  if (result > 33.0) {
    return 33.0;
  }
  return result;
}

- (void)_showVisualRotor:(id)a3 direction:(BOOL)a4
{
  BOOL v4 = a4;
  id v15 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  unsigned __int8 v7 = [v6 helpEnabled];

  if ((v7 & 1) == 0)
  {
    self->_flags.visualRotorDisplayed = 1;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v15 currentVisualRotorString]);
    id v9 = objc_allocWithZone(&OBJC_CLASS___NSDictionary);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v15 rotorCount]));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    id v13 = objc_msgSend( v9,  "initWithObjectsAndKeys:",  v10,  @"increment",  v11,  @"count",  v8,  @"title",  v12,  @"show",  0);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v14 updateVisualRotor:v13];
  }

  -[SCRCTargetSelectorTimer cancel](self->_visualRotorFadeTimer, "cancel");
  -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_visualRotorFadeTimer, "dispatchAfterDelay:", 1.5);
}

- (void)_hideVisualRotor
{
  if (self->_flags.visualRotorDisplayed
    && (-[SCRCTargetSelectorTimer isCancelled](self->_visualRotorFadeTimer, "isCancelled") & 1) == 0)
  {
    if ([(id)VOTSharedWorkspace fingerCount] == (id)2)
    {
      -[VOTElementManager hideVisualRotor](self, "hideVisualRotor");
      return;
    }

    id v3 = objc_allocWithZone(&OBJC_CLASS___NSDictionary);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    id v5 = objc_msgSend(v3, "initWithObjectsAndKeys:", v4, @"show", 0);

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v6 updateVisualRotor:v5];
  }

  self->_flags.visualRotorDisplayed = 0;
}

- (void)hideVisualRotor
{
  if (!-[SCRCTargetSelectorTimer isPending](self->_visualRotorFadeTimer, "isPending")
    || -[SCRCTargetSelectorTimer isCancelled](self->_visualRotorFadeTimer, "isCancelled"))
  {
    -[SCRCTargetSelectorTimer cancel](self->_visualRotorFadeTimer, "cancel");
    -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_visualRotorFadeTimer, "dispatchAfterDelay:", 0.75);
  }

- (BOOL)rotorEnabled
{
  return 1;
}

- (void)_resetElementUnitIndexes
{
  self->_elementUnitIndex = -1LL;
  self->_elementUnitOutputRange = 0u;
  *(int64x2_t *)&self->_bookLineNumber = vdupq_n_s64(0x7FFFFFFFuLL);
  *(_OWORD *)&self->_bookLineRange.length = xmmword_1001328B0;
  if (!self->_bookUpdatedCurrentLine)
  {
    bookLineString = self->_bookLineString;
    self->_bookLineString = 0LL;
  }

  self->_readWordCyclingCount = 0LL;
}

- (void)_setElementUnitIndexesToEndOfElement:(id)a3
{
  id v24 = a3;
  if ([v24 isReadingContent])
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v24 pageContent]);
    id v5 = [v4 length];
    uint64_t v6 = 0LL;
    unint64_t v7 = 0LL;
    self->_elementUnitIndex = (int64_t)v5;
    self->_elementUnitOutputRange.id location = (NSUInteger)v5;
    self->_elementUnitOutputRange.NSUInteger length = 0LL;
    do
    {
      uint64_t v8 = v6;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v24 stringForLineNumber:v6]);
      id v10 = [v9 length];

      v7 += (unint64_t)v10;
      uint64_t v6 = v8 + 1;
    }

    while (v10);
    if (v8)
    {
      int64_t v11 = v8 + 1;
      uint64_t v12 = v24;
      while (--v11 >= 0)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringForLineNumber:v11]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByTrimmingCharactersInSet:v14]);

        id v16 = [v15 length];
        uint64_t v12 = v24;
        if (v16) {
          goto LABEL_13;
        }
      }

      int64_t v11 = -1LL;
LABEL_13:
      self->_bookLineNumber = v11;
      if ([v12 supportsRangeForLineNumber])
      {
        id location = [v24 rangeForLineNumber:v11];
        self->_bookLineRange.id location = (NSUInteger)location;
        self->_bookLineRange.NSUInteger length = length;
      }

      else
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v24 stringForLineNumber:v11]);
        self->_bookLineRange.id location = (NSUInteger)-[VOTElementManager _rangeOfLine:inBookContent:]( self,  "_rangeOfLine:inBookContent:",  v22,  v4);
        self->_bookLineRange.NSUInteger length = v23;

        id location = (id)self->_bookLineRange.location;
        NSUInteger length = self->_bookLineRange.length;
      }

      uint64_t v18 = (uint64_t)location + length;
    }

    else
    {
      self->_bookLineRange.NSUInteger length = 0LL;
      *(int64x2_t *)&self->_bookLineNumber = vdupq_n_s64(0x7FFFFFFFuLL);
      uint64_t v18 = -1LL;
    }

    uint64_t v19 = 85LL;
  }

  else
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v24 visibleText]);
    id v17 = [v4 length];
    uint64_t v18 = 0LL;
    self->_elementUnitIndex = (int64_t)v17;
    self->_elementUnitOutputRange.id location = (NSUInteger)v17;
    self->_elementUnitOutputRange.NSUInteger length = 0LL;
    self->_bookCursorPosition = -1LL;
    *(int64x2_t *)&self->_bookLineNumber = vdupq_n_s64(0x7FFFFFFFuLL);
    uint64_t v19 = 84LL;
  }

  (&self->super.isa)[v19] = (Class)v18;
}

- (void)_setPreviousTouchTypingKey:(id)a3
{
  id v5 = (VOTElement *)a3;
  previousTouchTypingKedouble y = self->_previousTouchTypingKey;
  p_previousTouchTypingKedouble y = &self->_previousTouchTypingKey;
  if (previousTouchTypingKey != v5)
  {
    uint64_t v8 = v5;
    objc_storeStrong((id *)p_previousTouchTypingKey, a3);
    id v5 = v8;
  }
}

- (BOOL)_isTouchTypingEventTooCloseToEdge:(id)a3
{
  double v4 = v3;
  double v6 = v5;
  unint64_t v7 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  double v8 = 1.5;
  if (AXDeviceIsPhoneIdiom())
  {
    else {
      double v8 = 2.0;
    }
  }

  id v9 = (double *)&xmmword_1001AD170;
  else {
    double v10 = v4;
  }
  if (v7 == (char *)4)
  {
    double v10 = v6;
    id v9 = (double *)&xmmword_1001AD170 + 1;
  }

  return v10 >= *v9 - v8 || v10 <= v8;
}

- (void)_performTouchTypingKeyPress:(id)a3
{
  id v4 = a3;
  id v36 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  -[VOTElementManager keyboardKeyPenumbra:](self, "keyboardKeyPenumbra:", v36);
  double v6 = v5;
  unsigned __int8 v7 = -[VOTElementManager _isTouchTypingEventTooCloseToEdge:](self, "_isTouchTypingEventTooCloseToEdge:", v4);
  [v36 frame];
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v16, "convertRect:fromContextId:", objc_msgSend(v36, "windowContextId"), v9, v11, v13, v15);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  uint64_t v25 = (void *)VOTSharedWorkspace;
  [v4 touchPoint];
  double v27 = v26;
  double v29 = v28;

  objc_msgSend(v25, "convertDevicePointToZoomedPoint:", v27, v29);
  if ((v7 & 1) == 0)
  {
    CGFloat v32 = v30;
    CGFloat v33 = v31;
    if ([v36 keyboardKeyAllowsTouchTyping])
    {
      v38.origin.x = v18;
      v38.origin.double y = v20;
      v38.size.width = v22;
      v38.size.height = v24;
      CGRect v39 = CGRectInset(v38, -v6, -v6);
      v37.x = v32;
      v37.double y = v33;
      BOOL v34 = CGRectContainsPoint(v39, v37);
      if (!v4 || v34)
      {
        unsigned __int8 v35 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        [v35 stopSpeakingAtBoundary:0];

        [v36 performSimpleTap];
        -[VOTElementManager _setPreviousTouchTypingKey:](self, "_setPreviousTouchTypingKey:", v36);
      }
    }
  }
}

- (void)_cleanupMapInteractionOnIdle
{
  switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
  self->_switchRoadsOutputRequest = 0LL;

  self->_flags.shouldSpeakSameLineTouched = 1;
  self->_flags.didTouchTypingOutputStart = 0;
  upcomingRoadElement = self->_upcomingRoadElement;
  self->_upcomingRoadElement = 0LL;

  -[VOTOutputRequest setCancelRequest:](self->_startTrackingRoadRequest, "setCancelRequest:", 1LL);
  -[VOTOutputRequest setCompletionDelegate:](self->_startTrackingRoadRequest, "setCompletionDelegate:", 0LL);
  startTrackingRoadRequest = self->_startTrackingRoadRequest;
  self->_startTrackingRoadRequest = 0LL;
}

- (void)_tvOS_handleIdleAndTrackingEvents:(id)a3
{
  id v6 = a3;
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)85) {
    goto LABEL_2;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v5 = [(id)VOTSharedWorkspace tvInteractionMode];

  if (!v5)
  {
LABEL_2:
    id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvGestureRepeater](self, "tvGestureRepeater"));
    [v4 updateWithEvent:v6];
LABEL_6:
  }
}

- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5
{
}

- (void)_setSelectedTextRange:(_NSRange)a3 onElement:(id)a4 refreshBraille:(BOOL)a5 isVoiceOverSelectionMovement:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v7 = a5;
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  id v11 = a4;
  [v11 selectedTextRange];
  uint64_t v13 = v12;
  objc_msgSend(v11, "setSelectedTextRange:refreshBraille:isVoiceOverSelectionMovement:", location, length, v7, v6);

  if ((!v13 && length || v13 && !length) && !self->_inTextProcessingRotorMode) {
    self->_flags.shouldUpdateRotorForElement = 1;
  }
}

- (_NSRange)_rangeOfLine:(id)a3 inBookContent:(id)a4
{
  id v5 = a4;
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([a3 stringByReplacingOccurrencesOfString:@"•" withString:&stru_10017A920]);
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByTrimmingCharactersInSet:v7]);

  if (v8)
  {
    id v9 = v8;
    unint64_t v10 = 0LL;
    unint64_t v11 = (unint64_t)[v9 length] / 0xA;
    do
    {
      uint64_t v12 = v9;
      uint64_t v13 = (uint64_t)[v5 rangeOfString:v9];
      NSUInteger v15 = v14;
      id v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringToIndex:", (char *)objc_msgSend( v9,  "length") - v11));

      if (v10 > 8) {
        break;
      }
      ++v10;
    }

    while (v13 == 0x7FFFFFFFFFFFFFFFLL);
    if (v13 == 0x7FFFFFFFFFFFFFFFLL) {
      NSUInteger v15 = 0LL;
    }
  }

  else
  {
    NSUInteger v15 = 0LL;
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }

  NSUInteger v16 = v13;
  NSUInteger v17 = v15;
  result.NSUInteger length = v17;
  result.NSUInteger location = v16;
  return result;
}

- (void)_handleCurrentContentReadingLineUpdated:(id)a3
{
  id v13 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  char isKindOfClass = objc_opt_isKindOfClass(v13, v5);
  BOOL v7 = v13;
  if ((isKindOfClass & 1) != 0)
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"lineString"]);

    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"lineString"]);
      unint64_t v10 = (NSString *)[v9 copy];
      bookLineString = self->_bookLineString;
      self->_bookLineString = v10;
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"lineNumber"]);

      BOOL v7 = v13;
      if (!v12)
      {
LABEL_7:
        self->_bookUpdatedCurrentLine = 1;
        goto LABEL_8;
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"lineNumber"]);
      self->_bookLineNumber = (int64_t)[v9 integerValue];
    }

    BOOL v7 = v13;
    goto LABEL_7;
  }

- (void)_handleSetupForEndOfPageNavigationTest:(id)a3
{
}

- (void)_handleBookContentMovement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 generateOutput:(BOOL)a6
{
  BOOL v6 = a6;
  id v92 = a3;
  int64_t bookCursorPosition = self->_bookCursorPosition;
  unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v92 value]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "attributedValueForRange:", 0, objc_msgSend(v11, "length")));

  if (![v12 length])
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v92 pageContent]);

    uint64_t v12 = (void *)v13;
  }

  id v14 = [v12 length];
  int64_t v15 = self->_bookCursorPosition;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL
    || (int64_t bookLineNumber = self->_bookLineNumber, bookLineNumber == -1)
    || self->_bookLineRange.location == 0x7FFFFFFF
    || !self->_bookLineRange.length)
  {
    NSUInteger v17 = (void *)objc_claimAutoreleasedReturnValue([v92 stringForLineNumber:0]);
    if ([v17 length])
    {
      objc_storeStrong((id *)&self->_bookLineString, v17);
      else {
        id v18 = -[VOTElementManager _rangeOfLine:inBookContent:]( self,  "_rangeOfLine:inBookContent:",  self->_bookLineString,  v12);
      }
      self->_bookLineRange.NSUInteger location = (NSUInteger)v18;
      self->_bookLineRange.NSUInteger length = v19;
      self->_int64_t bookCursorPosition = 0LL;
      self->_int64_t bookLineNumber = 0LL;
    }

    int64_t v15 = self->_bookCursorPosition;
    int64_t bookLineNumber = self->_bookLineNumber;
  }

  if ((unint64_t)(a5 - 1) > 1)
  {
    if (a5 != 3)
    {
      NSUInteger v23 = 0LL;
      NSUInteger location = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_71;
    }

    unint64_t v91 = (unint64_t)v14;
    NSUInteger location = self->_bookLineRange.location;
    int64_t v22 = self->_bookLineRange.length + location;
    NSUInteger v23 = v15 - location;
    CGFloat v24 = v92;
    if (v15 > location && v22 > v15)
    {
      if (a4 != 1)
      {
LABEL_56:
        self->_int64_t bookCursorPosition = location;
        goto LABEL_71;
      }

- (BOOL)_handleMovementForElementFollowingElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5 mode:(int64_t)a6
{
  id v10 = a3;
  unint64_t v11 = v10;
  if (a4 == 1)
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v10 nextTextNavigationElement]);
  }

  else
  {
    if (a4 != 2)
    {
      uint64_t v13 = 0LL;
LABEL_11:
      BOOL v14 = 0;
      goto LABEL_20;
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue([v10 previousTextNavigationElement]);
  }

  uint64_t v13 = (void *)v12;
  BOOL v14 = 0;
  if (v12 && (void *)v12 != v11)
  {
    if (-[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v12))
    {
      if (a4 == 1) {
        -[VOTElementManager _resetElementUnitIndexes](self, "_resetElementUnitIndexes");
      }
      else {
        -[VOTElementManager _setElementUnitIndexesToEndOfElement:](self, "_setElementUnitIndexesToEndOfElement:", v13);
      }
      -[VOTElementManager _updateCursorFrameForElementIfNeeded:](self, "_updateCursorFrameForElementIfNeeded:", v13);
      switch(a6)
      {
        case 3LL:
          -[VOTElementManager _outputNextTextSegmentUnit:direction:]( self,  "_outputNextTextSegmentUnit:direction:",  a5,  a4);
          break;
        case 2LL:
          -[VOTElementManager _moveCursorForElement:direction:unit:]( self,  "_moveCursorForElement:direction:unit:",  v13,  a4,  a5);
          break;
        case 1LL:
          BOOL v14 = 1;
          -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:]( self,  "_handleBookContentMovement:direction:unit:generateOutput:",  v13,  a4,  a5,  1LL);
          goto LABEL_20;
      }

      BOOL v14 = 1;
      goto LABEL_20;
    }

    goto LABEL_11;
  }

- (id)_convertTextMarkerArrayToString:(id)a3 addInContentExtras:(BOOL)a4
{
  BOOL v37 = a4;
  id v4 = a3;
  id v5 = [objc_allocWithZone(NSMutableString) init];
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v42 objects:v47 count:16];
  id v34 = v7;
  unsigned __int8 v35 = v6;
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v43;
    uint64_t v36 = kAXImageTrait;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v43 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSString, v9);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
        {
          NSUInteger v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceCharacterSet"));
          NSUInteger v17 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByTrimmingCharactersInSet:v16]);

          [v5 appendString:v17];
LABEL_8:

          continue;
        }

        uint64_t v18 = objc_opt_class(&OBJC_CLASS___VOTElement, v15);
        if ((objc_opt_isKindOfClass(v13, v18) & 1) != 0)
        {
          NSUInteger v19 = (void *)objc_claimAutoreleasedReturnValue([v13 label]);
          NSUInteger v17 = (void *)objc_claimAutoreleasedReturnValue([v19 stringByReplacingOccurrencesOfString:@"\n" withString:@" "]);

          if ([v13 doesHaveTraits:v36])
          {
            uint64_t v20 = objc_claimAutoreleasedReturnValue( [v17 stringByReplacingOccurrencesOfString:@"image" withString:&stru_10017A920]);

            NSUInteger v17 = (void *)v20;
          }

          if ([v17 length]) {
            [v5 appendFormat:@" %@ ", v17];
          }
          if (v37)
          {
            double v21 = (void *)objc_claimAutoreleasedReturnValue([v13 arrayOfTraitsAsStrings]);
            int64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 componentsJoinedByString:@" "]);
            if ([v22 length])
            {
              if ([v5 length]) {
                [v5 appendString:@" "];
              }
              [v5 appendString:v22];
              NSUInteger v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSValue valueWithRange:]( NSValue,  "valueWithRange:",  (_BYTE *)[v5 length] - (_BYTE *)objc_msgSend(v22, "length"),  objc_msgSend(v22, "length")));
              BOOL v6 = v35;
              [v35 addObject:v23];

              id v7 = v34;
            }
          }

          goto LABEL_8;
        }
      }

      id v10 = [v7 countByEnumeratingWithState:&v42 objects:v47 count:16];
    }

    while (v10);
  }

  if ([v6 count])
  {
    id v24 = (id)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v5));
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v25 = v6;
    id v26 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v39;
      do
      {
        for (j = 0LL; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v39 != v28) {
            objc_enumerationMutation(v25);
          }
          uint64_t v30 = UIAccessibilityTokenLowPitch;
          id v31 = [*(id *)(*((void *)&v38 + 1) + 8 * (void)j) rangeValue];
          objc_msgSend(v24, "setAttribute:forKey:withRange:", kCFBooleanTrue, v30, v31, v32);
        }

        id v27 = [v25 countByEnumeratingWithState:&v38 objects:v46 count:16];
      }

      while (v27);
    }

    id v7 = v34;
    BOOL v6 = v35;
  }

  else
  {
    id v24 = v5;
  }

  return v24;
}

- (id)_currentTextLineInBookElement:(BOOL)a3
{
  bookLineString = self->_bookLineString;
  if (bookLineString) {
    return bookLineString;
  }
  BOOL v5 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 textMarkerArrayOfText:self->_lineArray]);

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v9 = v8;
  id v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v21;
    while (2)
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v21 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
        uint64_t v15 = objc_opt_class(&OBJC_CLASS___VOTElement, v10);
        if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
        {
          LOBYTE(v11) = 1;
          goto LABEL_13;
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

- (BOOL)_bookContentElementInteraction:(CGPoint)a3 element:(id)a4
{
  double y = a3.y;
  double x = a3.x;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v8, "convertPoint:toContextId:", objc_msgSend(v7, "windowContextId"), x, y);
  double v10 = v9;
  double v12 = v11;

  id v13 = objc_msgSend( objc_allocWithZone((Class)VOTElement),  "initWithPosition:startWithElement:",  v7,  v10,  v12);
  unsigned int v14 = [v13 doesHaveTraits:kAXTextEntryTrait | kAXButtonTrait | kAXLinkTrait];
  if (v14 && ([v13 isEqual:self->_bookSubelement] & 1) == 0)
  {
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v13, 0LL);
    objc_storeStrong((id *)&self->_bookSubelement, v13);
  }

  return v14;
}

- (void)_echoLineInBookElement:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  self->_flags.isReadingAllBook = 0;
  if (self->_flags.lastEventWasIdle)
  {
    lineArraCGFloat y = self->_lineArray;
    self->_lineArraCGFloat y = 0LL;
  }

  [v7 touchPoint];
  double v10 = v9;
  double v12 = v11;
  id v13 = objc_msgSend(v6, "lineNumberForPoint:");
  if (v13 == (id)0x7FFFFFFF)
  {
    [v6 elementFrameLocation:3];
    double v137 = v14;
    double v138 = v15;
    [v6 elementFrameLocation:4];
    double v17 = v16;
    double v19 = v18;
    [v6 elementFrameLocation:5];
    double v139 = v20;
    id v21 = [(id)VOTSharedWorkspace deviceOrientation];
    id v22 = v21;
    id v23 = v7;
    if (v21 == (id)3)
    {
      double v40 = v138;
      uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v10, v138 + 3.0));
      uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v10, v40 + (v19 - v40) / 3.0));
      uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSValue valueWithPoint:]( &OBJC_CLASS___NSValue,  "valueWithPoint:",  v10,  v40 + (v19 - v40 + v19 - v40) / 3.0));
      double v27 = v19 + -3.0;
    }

    else
    {
      if (v21 != (id)4)
      {
        double v42 = v137;
        uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v137 + 3.0, v12));
        uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v42 + (v17 - v42) / 3.0, v12));
        uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSValue valueWithPoint:]( &OBJC_CLASS___NSValue,  "valueWithPoint:",  v42 + (v17 - v42 + v17 - v42) / 3.0,  v12));
        double v41 = v17 + -3.0;
        double v27 = v12;
LABEL_14:
        uint64_t v43 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v41, v27));
        v133 = self;
        v135 = v23;
        CGFloat y = CGRectZero.origin.y;
        CGFloat height = CGRectZero.size.height;
        CGFloat width = CGRectZero.size.width;
        id v44 = objc_allocWithZone(&OBJC_CLASS___NSMutableArray);
        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v10, v12));
        v131 = (void *)v43;
        v132 = (void *)v26;
        v129 = (void *)v25;
        v130 = (void *)v24;
        id v46 = objc_msgSend(v44, "initWithObjects:", v45, v24, v25, v26, v43, 0);

        v128 = v46;
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v6 textMarkersForPoints:v46]);
        unsigned int v48 = [v6 showsDualPages];
        __int128 v142 = 0u;
        __int128 v143 = 0u;
        __int128 v144 = 0u;
        __int128 v145 = 0u;
        id obj = v47;
        id v49 = [obj countByEnumeratingWithState:&v142 objects:v146 count:16];
        if (v49)
        {
          id v50 = v49;
          double v51 = 0LL;
          double v52 = 0LL;
          uint64_t v53 = *(void *)v143;
          double v54 = v17 - v137;
LABEL_16:
          double v55 = 0LL;
          double v56 = v51;
          NSUInteger v57 = v52;
          while (1)
          {
            if (*(void *)v143 != v53) {
              objc_enumerationMutation(obj);
            }
            double v51 = (void *)objc_claimAutoreleasedReturnValue( [v6 textLineStartMarker:*(void *)(*((void *)&v142 + 1) + 8 * (void)v55)]);

            double v52 = (void *)objc_claimAutoreleasedReturnValue([v6 textLineEndMarker:v51]);
            __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v51, v52, 0LL));
            [v6 textMarkerFrame:v58];
            double v60 = v59;
            double v62 = v61;
            double v64 = v63;
            double v66 = v65;

            __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
            objc_msgSend(v67, "convertRect:fromContextId:", objc_msgSend(v6, "windowContextId"), v60, v62, v64, v66);
            CGFloat v69 = v68;
            double v71 = v70;
            CGFloat v73 = v72;
            double v75 = v74;

            if (v22 == (id)3)
            {
              if (v48)
              {
                if (v71 >= v139)
                {
                  if (v71 < v19)
                  {
                    double v71 = v139;
                    double v75 = v19 - v139;
                  }
                }

                else
                {
                  double v71 = v138;
                  double v75 = v139 - v138;
                }
              }

              else
              {
                double v71 = v138;
                double v75 = v19 - v138;
              }
            }

            else if (v22 == (id)4)
            {
              if (v48)
              {
                if (v71 >= v139)
                {
                  if (v71 < v138)
                  {
                    double v71 = v139;
                    double v75 = v138 - v139;
                  }
                }

                else
                {
                  double v71 = v19;
                  double v75 = v139 - v19;
                }
              }

              else
              {
                double v71 = v19;
                double v75 = v138 - v19;
              }
            }

            else
            {
              CGFloat v69 = v137;
              CGFloat v73 = v54;
            }

            v148.origin.double x = v69;
            v148.origin.CGFloat y = v71;
            v148.size.CGFloat width = v73;
            v148.size.CGFloat height = v75;
            v147.double x = v10;
            v147.CGFloat y = v12;
            double v55 = (char *)v55 + 1;
            double v56 = v51;
            NSUInteger v57 = v52;
            if (v50 == v55)
            {
              id v50 = [obj countByEnumeratingWithState:&v142 objects:v146 count:16];
              if (v50) {
                goto LABEL_16;
              }
              goto LABEL_43;
            }
          }

          if (!v51) {
            goto LABEL_44;
          }
          self = v133;
          v76 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](v133->_lineArray, "lastObject"));
          unsigned __int8 v77 = [v76 isEqual:v52];

          id v7 = v135;
          double v32 = y;
          double x = CGRectZero.origin.x;
          double v36 = height;
          double v34 = width;
          id v79 = v131;
          v78 = v132;
          if ((v77 & 1) == 0)
          {
            if ([v51 isEqual:v52])
            {
              -[VOTElementManager _echoNoElementForEvent:](v133, "_echoNoElementForEvent:", v135);
              goto LABEL_46;
            }

            -[VOTElementManager _resetElementUnitIndexes](v133, "_resetElementUnitIndexes");
            id v120 = objc_msgSend(objc_allocWithZone(NSArray), "initWithObjects:", v51, v52, 0);
            objc_storeStrong((id *)&v133->_lineArray, v120);
            __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentTextLineInBookElement:]( v133,  "_currentTextLineInBookElement:",  0LL));
            id v38 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentTextLineInBookElement:](v133, "_currentTextLineInBookElement:", 1LL));
            if ([v38 length])
            {
              id v79 = v131;
              v78 = v132;
              if (v133->_lineArray)
              {
                objc_msgSend(v6, "textMarkerFrame:");
                double x = v121;
                double v32 = v122;
                double v34 = v123;
                double v36 = v124;
              }
            }

            else
            {
              id v79 = v131;
              v78 = v132;
            }

            int v80 = 1;
LABEL_47:

            if (!v80) {
              goto LABEL_68;
            }
            goto LABEL_48;
          }
        }

        else
        {
          double v52 = 0LL;
          double v51 = 0LL;
LABEL_43:

LABEL_44:
          id v7 = v135;
          v78 = v132;
          self = v133;
          double v32 = y;
          double x = CGRectZero.origin.x;
          double v36 = height;
          double v34 = width;
          id v79 = v131;
        }

        -[VOTElementManager _bookContentElementInteraction:element:]( self,  "_bookContentElementInteraction:element:",  v6,  v10,  v12);
LABEL_46:
        int v80 = 0;
        id v38 = 0LL;
        __int128 v39 = 0LL;
        goto LABEL_47;
      }

      uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v10, v19 + 3.0));
      uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", v10, v19 + (v138 - v19) / 3.0));
      uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSValue valueWithPoint:]( &OBJC_CLASS___NSValue,  "valueWithPoint:",  v10,  v19 + (v138 - v19 + v138 - v19) / 3.0));
      double v27 = v138 + -3.0;
    }

    double v41 = v10;
    goto LABEL_14;
  }

  int64_t v28 = (int64_t)v13;
  if ((id)self->_bookLineNumber == v13 && !self->_flags.shouldSpeakSameLineTouched)
  {
    id v38 = 0LL;
    __int128 v39 = 0LL;
    goto LABEL_68;
  }

  [v6 frameForLineNumber:v13];
  double x = v29;
  double v32 = v31;
  double v34 = v33;
  double v36 = v35;
  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue([v6 stringForLineNumber:v28]);
  id v38 = v37;
  if (![v38 length])
  {
    -[VOTElementManager _echoNoElementForEvent:](self, "_echoNoElementForEvent:", v7);
    __int128 v39 = v38;
    goto LABEL_68;
  }

  self->_int64_t bookLineNumber = v28;
  objc_storeStrong((id *)&self->_bookLineString, v37);
  self->_flags.shouldSpeakSameLineTouched = 0;
  __int128 v39 = v38;
LABEL_48:
  if (!-[VOTElementManager _bookContentElementInteraction:element:]( self,  "_bookContentElementInteraction:element:",  v6,  v10,  v12))
  {
    v81 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v81, "convertRect:fromContextId:", objc_msgSend(v6, "windowContextId"), x, v32, v34, v36);
    double v83 = v82;
    double v85 = v84;
    double v87 = v86;
    double v89 = v88;

    bookSubelement = self->_bookSubelement;
    self->_bookSubelement = 0LL;

    if ([v38 length])
    {
      if ([v6 supportsRangeForLineNumber])
      {
        id location = [v6 rangeForLineNumber:self->_bookLineNumber];
        self->_bookLineRange.id location = (NSUInteger)location;
        self->_bookLineRange.NSUInteger length = v92;
      }

      else
      {
        CGRect v93 = (void *)objc_claimAutoreleasedReturnValue([v6 pageContent]);
        self->_bookLineRange.id location = (NSUInteger)-[VOTElementManager _rangeOfLine:inBookContent:]( self,  "_rangeOfLine:inBookContent:",  v39,  v93);
        self->_bookLineRange.NSUInteger length = v94;

        id location = (id)self->_bookLineRange.location;
      }

      self->_int64_t bookCursorPosition = (int64_t)location;
      if (location == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        self->_int64_t bookCursorPosition = -1LL;
      }

      else
      {
        -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  location,  0LL,  v6,  0LL);
        v95 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
        [v95 setBookCursorPosition:self->_bookCursorPosition];

        id v96 = [v6 selectedTextRange];
        -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v96,  v97,  0LL);
      }

      self->_highlightedCharacterRange = self->_bookLineRange;
      id v98 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      v99 = (void *)objc_claimAutoreleasedReturnValue([v6 scrollStatus]);
      v100 = (void *)objc_claimAutoreleasedReturnValue([v6 language]);
      id obja = v99;
      if (([v99 isEqualToString:self->_bookPageScrollString] & 1) == 0)
      {
        p_bookPageScrollString = &self->_bookPageScrollString;
        id v102 = [v98 addString:v99 withLanguage:v100];
        if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
        {
          v134 = self;
          v103 = (void *)objc_claimAutoreleasedReturnValue([v98 lastAction]);
          LODWORD(v104) = 1062836634;
          id v105 = v7;
          v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v104));
          [v103 setObject:v106 forVariant:32];

          id v7 = v105;
          v99 = obja;

          self = v134;
        }

        objc_storeStrong((id *)p_bookPageScrollString, v99);
      }

      v107 = self;
      id v108 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
      unsigned int v109 = sub_10004B668(v108, v100);

      if (v109)
      {

        v100 = 0LL;
      }

      id v110 = v107;
      id v136 = v7;
      else {
        id v112 = [v98 addString:v38 withLanguage:v100];
      }
      v113 = (void *)objc_claimAutoreleasedReturnValue([v98 lastAction]);
      [v113 setPerformPunctuationTranslation:1];

      v114 = (void *)objc_claimAutoreleasedReturnValue([v98 lastAction]);
      [v114 setReplaceCommas:1];

      v115 = (void *)objc_claimAutoreleasedReturnValue([v98 lastAction]);
      [v115 setObject:kCFBooleanTrue forVariant:59];

      [v98 setGeneratesBraille:1];
      objc_msgSend(v98, "setBrailleLineRange:", v107->_bookLineRange.location, v107->_bookLineRange.length);
      [v98 setBrailleType:4];
      -[VOTElementManager sendRequest:](v107, "sendRequest:", v98);
      v107->_lineFrame.origin.double x = v83;
      v107->_lineFrame.origin.CGFloat y = v85;
      v107->_lineFrame.size.CGFloat width = v87;
      v107->_lineFrame.size.CGFloat height = v89;
      v116 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      id v117 = [v6 windowContextId];
      v118 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);
      v119 = (void *)objc_claimAutoreleasedReturnValue([v118 numberWithAXAttribute:2123]);
      objc_msgSend( v116,  "setCursorFrame:withPath:withContextId:withDisplayId:element:forceRefresh:",  0,  v117,  objc_msgSend(v119, "unsignedIntValue"),  v6,  0,  v83,  v85,  v87,  v89);

      v110->_textRangeBeingDisplayed = 1;
      id v7 = v136;
    }
  }

- (BOOL)_handleMoreBookContentElements
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pageContent]);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10005CE1C;
  v15[3] = &unk_100177FF0;
  id v5 = v4;
  id v16 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:forward:]( self,  "_nearestElementWithMatch:startElement:forward:",  v15,  v6,  1LL));

  if (v7
    && (id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement")),
        unsigned __int8 v9 = [v7 isEqual:v8],
        v8,
        (v9 & 1) == 0))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10005CEB4;
    v13[3] = &unk_100176DA8;
    v13[4] = self;
    id v11 = v7;
    id v14 = v11;
    [v11 scrollToElementForDirectional:1 withCompletion:v13];
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v11);
    if (self->_flags.isReadingAllBook && [v11 doesHaveTraits:kAXWebContentTrait]) {
      -[VOTElementManager _continueReadAllWithElement:setCurrentElement:]( self,  "_continueReadAllWithElement:setCurrentElement:",  v11,  0LL);
    }
    else {
      -[VOTElementManager _handleReadAllBookContent:fromTop:](self, "_handleReadAllBookContent:fromTop:", v11, 1LL);
    }

    BOOL v10 = 1;
  }

  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

- (void)_handleBookPageFlipAndContinue
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager currentElement](self, "currentElement"));
  unsigned __int8 v4 = [v3 isReadingContent];

  if ((v4 & 1) != 0 || !self->_flags.userInitiatedBooksScroll)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    unsigned __int8 v6 = [v5 scrollNextPage];

    if ((v6 & 1) == 0)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      [v7 scrollRightPage];
    }
  }

  else
  {
    self->_flags.isReadingAll = 0;
    self->_flags.userInitiatedBooksScroll = 0;
  }

- (BOOL)_handleBookNavigateOverPageBoundary:(int64_t)a3 unit:(int64_t)a4
{
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v8 = v7;
  if (a3 == 2)
  {
  }

  else
  {
    if (a3 != 1)
    {
      BOOL v9 = 0;
      goto LABEL_9;
    }
  }

  BOOL v9 = 1;
  self->_flags.previousScrollWasBookContentMovement = 1;
  self->_bookLastContentMovementUnit = a4;
  self->_bookLastContentMovementDirection = a3;
LABEL_9:

  return v9;
}

- (void)_startReadingBookForNewPage
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  if (!v3)
  {
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"));
    double v3 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  }

  id v11 = (VOTElement *)objc_claimAutoreleasedReturnValue([v3 firstElementInApplication]);
  if (!v11)
  {
    if (!self->_inUnitTestingMode) {
      _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  4455LL,  "-[VOTElementManager _startReadingBookForNewPage]",  @"Why was the first element in iBooks nil?. Investigate");
    }
    id v11 = self->_currentElement;
  }

  if (self->_flags.lastScrollWasFromBraillePanning
    && self->_bookLastContentMovementDirection == 2
    && (id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 lastContainedElement]),
        unsigned __int8 v6 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:forward:]( self,  "_nearestElementWithMatch:startElement:forward:",  &stru_100178030,  v5,  0LL)),  v5,  v6)
    || (-[VOTElement readingContentCausesPageTurn](v11, "readingContentCausesPageTurn")
     || -[VOTElement isReadingContent](v11, "isReadingContent")
     || -[VOTElement includeDuringContentReading](v11, "includeDuringContentReading"))
    && (unsigned __int8 v6 = v11) != 0LL
    || (unsigned __int8 v6 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_100178030,  v11))) != 0LL)
  {
    BOOL isReadingAllBook = self->_flags.isReadingAllBook;
    unsigned int v8 = -[VOTElement isEqual:](v6, "isEqual:", self->_currentElement);
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v6);
    if (v8)
    {
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
      [v9 setBrailleElement:v6];
    }

    -[VOTElementManager _handleReadFromTop:](self, "_handleReadFromTop:", 0LL);
    if (!isReadingAllBook)
    {
      self->_flags.BOOL isReadingAllBook = 0;
      bookPageContentOutputRequest = self->_bookPageContentOutputRequest;
      self->_bookPageContentOutputRequest = 0LL;
    }

    -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
    -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v11);
  }
}

- (BOOL)isReadingAll
{
  return self->_flags.isReadingAll || self->_flags.isReadingAllBook;
}

- (void)_handleReadAllBookContent:(id)a3 fromTop:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent UnknownCommand](&OBJC_CLASS___VOSOutputEvent, "UnknownCommand"));
    [v7 sendEvent:v8];
  }

  else
  {
    *(_WORD *)&self->_flags.BOOL isReadingAllBook = 1;
    [v6 updatePageContent];
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v6 pageContent]);
    if (([v6 isReadingContent] & 1) == 0)
    {
      [v6 updateValue];
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 value]);

      BOOL v4 = 1;
      BOOL v9 = (void *)v10;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v11 setCursorFrameForElement:0];

    if (v4 && !self->_bookUpdatedCurrentLine)
    {
      id v12 = 0LL;
    }

    else if ([v6 supportsRangeForLineNumber])
    {
      id v12 = [v6 rangeForLineNumber:self->_bookLineNumber];
    }

    else
    {
      bookLineString = self->_bookLineString;
      if (bookLineString)
      {
        id v14 = bookLineString;
      }

      else
      {
        double v36 = v9;
        double v15 = (void *)objc_claimAutoreleasedReturnValue([v6 textMarkerArrayOfText:self->_lineArray]);
        id v16 = [v15 mutableCopyWithZone:0];
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        id v17 = v15;
        id v18 = [v17 countByEnumeratingWithState:&v37 objects:v41 count:16];
        if (v18)
        {
          id v20 = v18;
          uint64_t v21 = *(void *)v38;
          uint64_t v22 = kAXImageTrait;
          do
          {
            for (i = 0LL; i != v20; i = (char *)i + 1)
            {
              if (*(void *)v38 != v21) {
                objc_enumerationMutation(v17);
              }
              uint64_t v24 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
              uint64_t v25 = objc_opt_class(&OBJC_CLASS___VOTElement, v19);
              if ((objc_opt_isKindOfClass(v24, v25) & 1) != 0
                && [v24 doesHaveTraits:v22])
              {
                [v16 removeObject:v24];
              }
            }

            id v20 = [v17 countByEnumeratingWithState:&v37 objects:v41 count:16];
          }

          while (v20);
        }

        id v14 = (NSString *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _convertTextMarkerArrayToString:addInContentExtras:]( self,  "_convertTextMarkerArrayToString:addInContentExtras:",  v16,  0LL));
        BOOL v9 = v36;
      }

      id v12 = -[VOTElementManager _rangeOfLine:inBookContent:](self, "_rangeOfLine:inBookContent:", v14, v9);
    }

    if (v12 >= [v9 length]) {
      id v26 = 0LL;
    }
    else {
      id v26 = v12;
    }
    double v27 = (void *)objc_claimAutoreleasedReturnValue([v9 substringFromIndex:v26]);
    id v28 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    objc_storeStrong((id *)&self->_bookPageContentOutputRequest, v28);
    [v28 setCompletionDelegate:self];
    double v29 = (void *)objc_claimAutoreleasedReturnValue([v6 language]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    unsigned int v31 = sub_10004B668(v30, v29);

    if (v31)
    {

      double v29 = 0LL;
    }

    id v32 = [v28 addAttributedString:v27 withLanguage:v29];
    double v33 = (void *)objc_claimAutoreleasedReturnValue([v28 lastAction]);
    [v33 setObject:kCFBooleanTrue forVariant:59];

    double v34 = (void *)objc_claimAutoreleasedReturnValue([v28 outputActions]);
    [v34 enumerateObjectsUsingBlock:&stru_100178070];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v28);
    double v35 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUserEventManager sharedInstance](&OBJC_CLASS___VOTUserEventManager, "sharedInstance"));
    [v35 userEventOccurred];

    self->_bookUpdatedCurrentLine = 0;
  }
}

- (void)_stopReadAll
{
  if (self->_flags.isReadingAll)
  {
    double v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v3 stopSpeakingAtBoundary:1];
    *(_WORD *)&self->_flags.isReadingAll = 0;
  }

  self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
}

- (void)_handleReadAllNextElement
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockAnyElement](self, "_copyMatchBlockAnyElement"));
  fetchManager = self->_fetchManager;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unint64_t elementSearchGeneration = self->_elementSearchGeneration;
  LOBYTE(v6) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
  -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  1LL,  v4,  v7,  0LL,  0LL,  elementSearchGeneration,  0x7FFFFFFFLL,  0LL,  v6);
}

- (BOOL)_prepareStitchedWebReadAll:(id)a3 request:(id)a4 setCurrentElement:(BOOL *)a5
{
  id v7 = a3;
  id v8 = a4;
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uiElement]);
  uint64_t All = AXReadAllUtilitiesElementsToCombineForReadAll(v9, [(id)VOTSharedWorkspace deviceOrientation]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(All);

  double v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  id v12 = v7;
  id v84 = [objc_allocWithZone(NSMutableArray) init];
  if ([v11 count] == (id)1)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 uiElement]);
    unsigned __int8 v15 = [v13 isEqual:v14];

    if ((v15 & 1) != 0)
    {
      BOOL v16 = 0;
      id v17 = v12;
      goto LABEL_43;
    }
  }

  v78 = self;
  double v82 = v8;
  CGFloat y = CGRectZero.origin.y;
  CGFloat width = CGRectZero.size.width;
  CGFloat height = CGRectZero.size.height;
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  int v80 = v11;
  id obj = v11;
  id v21 = [obj countByEnumeratingWithState:&v91 objects:v96 count:16];
  id v81 = v12;
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v92;
    uint64_t v24 = &OBJC_CLASS___VOTSound;
    uint64_t v85 = kAXLinkTrait;
    double x = CGRectZero.origin.x;
    double v26 = y;
    double v27 = width;
    double v28 = height;
    id v17 = v12;
    double v29 = obj;
    do
    {
      uint64_t v30 = 0LL;
      unsigned int v31 = v17;
      do
      {
        if (*(void *)v92 != v23) {
          objc_enumerationMutation(v29);
        }
        id v17 = (id)objc_claimAutoreleasedReturnValue( [&v24[6] elementWithUIElement:*(void *)(*((void *)&v91 + 1) + 8 * (void)v30)]);
        v97.origin.double x = CGRectZero.origin.x;
        v97.origin.CGFloat y = y;
        v97.size.CGFloat width = width;
        v97.size.CGFloat height = height;
        v99.origin.double x = x;
        v99.origin.CGFloat y = v26;
        v99.size.CGFloat width = v27;
        v99.size.CGFloat height = v28;
        BOOL v32 = CGRectEqualToRect(v97, v99);
        [v17 frame];
        double v37 = v33;
        double v38 = v34;
        double v39 = v35;
        double v40 = v36;
        if (!v32)
        {
          v98.origin.double x = x;
          v98.origin.CGFloat y = v26;
          v98.size.CGFloat width = v27;
          v98.size.CGFloat height = v28;
          *(CGRect *)&double v33 = CGRectUnion(v98, *(CGRect *)&v37);
        }

        double x = v33;
        double v26 = v34;
        double v27 = v35;
        double v28 = v36;
        double v41 = [v86 length];
        double v42 = (void *)objc_claimAutoreleasedReturnValue([v17 label]);
        [v86 appendFormat:@"%@ ", v42];

        if ([v17 doesHaveTraits:v85])
        {
          id v43 = v22;
          id v44 = v24;
          uint64_t v45 = v23;
          id v46 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
          unsigned __int8 v47 = [v46 voiceOverLinkFeedback];

          if ((v47 & 2) != 0)
          {
            id v49 = sub_10004A988(off_1001AC148, @"element.link.text", @"link");
            id v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
            unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @", %@, ",  v50));
            [v86 appendString:v48];
            double v51 = [v86 length];
            int64_t v52 = v51 - (_BYTE *)[v48 length];
            id v53 = [v48 length];
            int64_t v54 = v52;
            double v29 = obj;
            double v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", v54, v53));
            [v84 addObject:v55];
          }

          else
          {
            unsigned int v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSValue valueWithRange:]( NSValue,  "valueWithRange:",  v41,  (_BYTE *)[v86 length] - v41));
            [v84 addObject:v48];
          }

          uint64_t v23 = v45;
          uint64_t v24 = v44;
          id v22 = v43;
        }

        uint64_t v30 = (char *)v30 + 1;
        unsigned int v31 = v17;
      }

      while (v22 != v30);
      id v22 = [v29 countByEnumeratingWithState:&v91 objects:v96 count:16];
    }

    while (v22);
  }

  else
  {
    double x = CGRectZero.origin.x;
    double v26 = y;
    double v27 = width;
    double v28 = height;
    id v17 = v12;
    double v29 = obj;
  }

  id v12 = v81;
  id v8 = v82;
  if ([v86 length])
  {
    double v56 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v57 = [v56 voiceOverLinkFeedback];

    __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v59 = [v58 voiceOverLinkFeedback];

    if (v57 & 8 | (unint64_t)(v59 & 4) && [v84 count])
    {
      double v60 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v86));
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      id v61 = v84;
      id v62 = [v61 countByEnumeratingWithState:&v87 objects:v95 count:16];
      if (!v62) {
        goto LABEL_35;
      }
      id v63 = v62;
      uint64_t v64 = *(void *)v88;
      while (1)
      {
        for (i = 0LL; i != v63; i = (char *)i + 1)
        {
          if (*(void *)v88 != v64) {
            objc_enumerationMutation(v61);
          }
          double v66 = *(void **)(*((void *)&v87 + 1) + 8LL * (void)i);
          if ((v57 & 8) != 0)
          {
            uint64_t v67 = UIAccessibilityTokenLowPitch;
            id v69 = [v66 rangeValue];
            double v70 = v60;
            CFBooleanRef v71 = kCFBooleanTrue;
          }

          else
          {
            if ((v59 & 4) == 0) {
              continue;
            }
            uint64_t v67 = UIAccessibilityTokenPlaySoundSimultaneously;
            id v69 = [v66 rangeValue];
            double v70 = v60;
            CFBooleanRef v71 = (CFBooleanRef)@"Sounds/LinkBegin.aiff";
          }

          objc_msgSend(v70, "setAttribute:forKey:withRange:", v71, v67, v69, v68);
        }

        id v63 = [v61 countByEnumeratingWithState:&v87 objects:v95 count:16];
        if (!v63)
        {
LABEL_35:

          double v72 = (void *)objc_claimAutoreleasedReturnValue([v17 language]);
          id v8 = v82;
          id v73 = [v82 addAttributedString:v60 withLanguage:v72];

          id v12 = v81;
          goto LABEL_37;
        }
      }
    }

    double v60 = (void *)objc_claimAutoreleasedReturnValue([v17 language]);
    id v74 = [v82 addString:v86 withLanguage:v60];
LABEL_37:
  }

  id v11 = v80;
  if (v17 != v12)
  {
    -[VOTElementManager _setCurrentElement:](v78, "_setCurrentElement:", v17);
    if (a5) {
      *a5 = 1;
    }
    double v75 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    objc_msgSend(v75, "setCursorFrame:", x, v26, v27, v28);
  }

  v76 = (void *)objc_claimAutoreleasedReturnValue([v8 outputActions]);
  BOOL v16 = [v76 count] != 0;

LABEL_43:
  return v16;
}

- (void)_continueReadAllWithElement:(id)a3 setCurrentElement:(BOOL *)a4
{
  id v6 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    self->_flags.lastScrollWasFromBraillePanning = 0;
  }

  else if ([v6 isReadingContent] && self->_flags.isReadingAllBook)
  {
    -[VOTElementManager _handleMoreBookContentElements](self, "_handleMoreBookContentElements");
  }

  else
  {
    id v7 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (self->_flags.lastScrollWasFromBraillePanning)
    {
      self->_flags.lastScrollWasFromBraillePanning = 0;
    }

    else
    {
      self->_flags.isReadinguint64_t All = 1;
      objc_storeStrong((id *)&self->_readAllOutputRequest, v7);
      [v7 setCompletionDelegate:self];
    }

    uint64_t v8 = kAXWebContentTrait;
    if (![v6 doesHaveAllTraits:kAXStaticTextTrait | kAXWebContentTrait]
      || !-[VOTElementManager _prepareStitchedWebReadAll:request:setCurrentElement:]( self,  "_prepareStitchedWebReadAll:request:setCurrentElement:",  v6,  v7,  a4))
    {
      -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v6,  v6,  v7);
      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v6,  v7,  64LL);
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v6);
      if (a4) {
        *a4 = 1;
      }
    }

    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v7 combinedActionString]);
    id v10 = [v9 length];

    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
      [v11 sendEvent:v12];
    }

    if (sub_10004A018())
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 touchContainer]);
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 touchContainer]);
      BOOL v16 = v15;
      if (!v14 && v15 || v14 && !v15 || v14 && v15 && ([v15 isEqual:v14] & 1) == 0)
      {
        -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v14,  v7,  1LL);
        if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
        {
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 lastAction]);
          LODWORD(v18) = 1062836634;
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v18));
          [v17 setObject:v19 forVariant:32];
        }
      }
    }

    if ([v6 doesHaveTraits:v8])
    {
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "outputActions", 0));
      id v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v27;
        do
        {
          for (i = 0LL; i != v22; i = (char *)i + 1)
          {
            if (*(void *)v27 != v23) {
              objc_enumerationMutation(v20);
            }
            [*(id *)(*((void *)&v26 + 1) + 8 * (void)i) setObject:kCFBooleanTrue forVariant:63];
          }

          id v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }

        while (v22);
      }
    }

    -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUserEventManager sharedInstance](&OBJC_CLASS___VOTUserEventManager, "sharedInstance"));
    [v25 userEventOccurred];
  }
}

- (void)_handleReadScreenSummary:(id)a3
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread",  a3) & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  4808LL,  "-[VOTElementManager _handleReadScreenSummary:]",  @"must be on element manager or system event thread");
  }

  self->_flags.isReadinguint64_t All = 1;
  self->_explorerElementsNeedUpdate = 1;
  -[VOTElementManager _updateExplorerElementsIfNeeded](self, "_updateExplorerElementsIfNeeded");
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTExplorerElementManagerContext context](&OBJC_CLASS___VOTExplorerElementManagerContext, "context"));
  [v5 setUserInitiated:1];
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
  [v4 readAll:v5];
}

- (void)_handleReadAll:(id)a3
{
  id v7 = a3;
  if ([(id)VOTSharedWorkspace speechMuted])
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent UnknownCommand](&OBJC_CLASS___VOSOutputEvent, "UnknownCommand"));
    [v4 sendEvent:v5];
  }

  else
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    self->_flags.userInitiatedBooksScroll = 0;
    if ([v4 doesHaveTraits:kAXStatusBarElementTrait]
      && -[VOTElementManager _shouldAllowSpeakThisGesture](self, "_shouldAllowSpeakThisGesture"))
    {
      -[VOTElementManager _handleSpeakScreen:](self, "_handleSpeakScreen:", v7);
    }

    else
    {
      -[VOTElementManager setInitialReadAllElement:](self, "setInitialReadAllElement:", v4);
      if ([v4 isReadingContent])
      {
        -[VOTElementManager _handleReadAllBookContent:fromTop:](self, "_handleReadAllBookContent:fromTop:", v4, 0LL);
      }

      else
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        -[VOTElementManager _continueReadAllWithElement:setCurrentElement:]( self,  "_continueReadAllWithElement:setCurrentElement:",  v6,  0LL);
      }
    }
  }
}

- (void)_handleCopySpeechToClipboard:(id)a3
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputRequest previousRequests](&OBJC_CLASS___VOTOutputRequest, "previousRequests", a3));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 outputActions]);
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        if (![v11 component]
          && ([v11 isVoiceOverGeneratedContent] & 1) == 0)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 originalString]);
          if ([v12 length])
          {
            if ([v5 length]) {
              [v5 appendString:@" "];
            }
            [v5 appendString:v12];
          }
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v8);
  }

  if ([v5 length])
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([UTTypeUTF8PlainText identifier]);
    [v13 setObject:v5 forKey:v14];

    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIPasteboard generalPasteboard](&OBJC_CLASS___UIPasteboard, "generalPasteboard"));
    __int128 v26 = v13;
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v26, 1LL));
    [v15 setItems:v16];

    id v17 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v18 = sub_10004AE68(off_1001AC148, @"copy.to.pasteboard", 0LL, v17);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v19, v5));

    id v21 = sub_10000BBB0(v20, 0, v17);
  }
}

- (void)_handleReadFromTop:(id)a3
{
  id v23 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  4885LL,  "-[VOTElementManager _handleReadFromTop:]",  @"must be on element manager or system event thread");
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (![v4 isReadingContent])
  {
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v22 firstElementInApplicationForReadFromTop]);
    if (([v4 readingContentCausesPageTurn] & 1) != 0
      || (id v9 = v8, [v4 includeDuringContentReading]))
    {
      id v9 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_1001780B8,  v8));

      if (v9) {
        goto LABEL_13;
      }
      id v9 = v4;
    }

    if (!v9)
    {
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v16 sendEvent:v17];

LABEL_30:
      goto LABEL_31;
    }

- (void)_handleContinueSpeaking:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  [v4 continueSpeaking];

  if (AXDeviceSupportsSonification(v5)
    && -[VOTElement supportsAudiographs](self->_currentElement, "supportsAudiographs"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    unsigned int v7 = [v6 isPaused];

    if (v7)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
      [v8 play];
    }
  }

- (void)_handlePauseSpeaking:(id)a3
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  [v3 pauseSpeakingAtBoundary:0];

  if (AXDeviceSupportsSonification(v4))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    unsigned int v6 = [v5 isPlaying];

    if (v6)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
      [v7 pause];
    }
  }

- (void)_handleToggleSpeaking:(id)a3
{
  id v9 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v5 = [v4 isSpeaking];
  if ((_DWORD)v5)
  {
    id v5 = [v4 isPaused];
    unsigned int v6 = v5 ^ 1;
  }

  else
  {
    unsigned int v6 = 0;
  }

  if (AXDeviceSupportsSonification(v5))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
    unsigned int v8 = [v7 isPlaying];
  }

  else
  {
    unsigned int v8 = 0;
  }

  if ((v6 | v8) == 1) {
    -[VOTElementManager _handlePauseSpeaking:](self, "_handlePauseSpeaking:", v9);
  }
  else {
    -[VOTElementManager _handleContinueSpeaking:](self, "_handleContinueSpeaking:", v9);
  }
}

- (void)_handleCancelSpeaking:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  [v3 stopSpeakingAtBoundary:0];
}

- (void)_endTextSearchMode
{
  self->_flags.inSearchTextMode = 0;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  [v2 setCaptureModeEnabled:0];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTTextSearchManager sharedManager](&OBJC_CLASS___VOTTextSearchManager, "sharedManager"));
  [v3 endTextSearchSession];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v4 setTextSearchModeOn:0];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v5 refreshBrailleLine];
}

- (void)_handleSearchTextEvent:(id)a3
{
  id v25 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v25 keyInfo]);
  if ([v4 keyDown] && objc_msgSend(v4, "keyCode") == 40)
  {
    if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXTextEntryTrait)
      && (id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_currentElement, "value")),
          id v6 = [v5 length],
          v5,
          v6))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTTextSearchManager sharedManager](&OBJC_CLASS___VOTTextSearchManager, "sharedManager"));
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 currentSearchValue]);

      id v9 = (char *)-[VOTElement selectedTextRange](self->_currentElement, "selectedTextRange");
      uint64_t v11 = v10;
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_currentElement, "value"));
      uint64_t v13 = v12;
      else {
        id v14 = &v9[v11];
      }
      unsigned __int8 v15 = (char *)((_BYTE *)[v12 length] - v14);
      BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
      id v17 = objc_msgSend(v13, "rangeOfString:options:range:locale:", v8, 1, v14, v15, v16);

      if (v17 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXIsEditingTrait))
        {
          -[VOTElement setSelectedTextRange:refreshBraille:]( self->_currentElement,  "setSelectedTextRange:refreshBraille:",  v17,  0LL,  1LL);
          -[VOTElementManager _moveCursorForElement:direction:unit:]( self,  "_moveCursorForElement:direction:unit:",  self->_currentElement,  1LL,  2LL);
        }

        else
        {
          self->_elementUnitOutputRange.id location = (NSUInteger)v17;
          self->_elementUnitOutputRange.NSUInteger length = 0LL;
          -[VOTElementManager _outputNextTextSegmentUnit:direction:]( self,  "_outputNextTextSegmentUnit:direction:",  2LL,  1LL);
        }
      }

      -[VOTElementManager _endTextSearchMode](self, "_endTextSearchMode");
    }

    else
    {
      self->_flags.performedSearch = 1;
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSearchText](self, "_copyMatchBlockSearchText"));
      fetchManager = self->_fetchManager;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      unint64_t elementSearchGeneration = self->_elementSearchGeneration;
      id v21 = -[VOTElement selectedTextRange](self->_currentElement, "selectedTextRange");
      uint64_t v23 = v22;
      LOBYTE(v24) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
      -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  1LL,  v19,  v8,  0LL,  0LL,  elementSearchGeneration,  v21,  v23,  v24);

      -[VOTElementManager _endTextSearchMode](self, "_endTextSearchMode");
    }
  }

  else
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTTextSearchManager sharedManager](&OBJC_CLASS___VOTTextSearchManager, "sharedManager"));
    [v8 handleTextSearchEvent:v25];
  }
}

- (void)_outputCurrentElementRotor
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(-[VOTRotor generateRotorTypeRequest](self->_elementRotor, "generateRotorTypeRequest"));
  -[VOTElementManager _appendCurrentRotorValue:forRotor:]( self,  "_appendCurrentRotorValue:forRotor:",  v3,  self->_elementRotor);
  -[VOTElementManager _formatRequestForBrailleAlertConditional:](self, "_formatRequestForBrailleAlertConditional:", v3);
  [v3 setCannotBeInterrupted:1];
  [v3 send];
}

- (void)_handleDescribeImage:(id)a3
{
  id v7 = objc_opt_new(&OBJC_CLASS___VOTVisionOptions);
  -[VOTVisionOptions setIncludeFullImageDescriptionsForAllElements:]( v7,  "setIncludeFullImageDescriptionsForAllElements:",  1LL);
  -[VOTVisionOptions setIncludeSceneDetection:](v7, "setIncludeSceneDetection:", 0LL);
  -[VOTVisionOptions setUserCommandInitiated:](v7, "setUserCommandInitiated:", 1LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v4 stopSpeakingAtBoundary:0];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace visionEngine]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  [v5 analyzeElement:v6 withOptions:v7];
}

- (void)_handleLaunchDetectionMode:(id)a3
{
  id v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", a3));
  id v3 = sub_10004AE68(off_1001AC148, @"launching.detection.mode", 0LL, v7);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = sub_10000BBB0(v4, 1, v7);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance"));
  [v6 activateDetectionMode];
}

- (void)_handleDescribedMediaMode:(id)a3 direction:(int64_t)a4
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned __int8 v6 = [v5 voiceOverDescribedMedia];

  uint64_t v7 = v6 & 3;
  if ((v6 & 3) == 0)
  {
    if (a4 == 1) {
      goto LABEL_13;
    }
LABEL_9:
    a4 = 3LL;
    goto LABEL_13;
  }

  if (v7 == 2)
  {
    if (a4 != 1)
    {
      a4 = 1LL;
      goto LABEL_13;
    }

    goto LABEL_9;
  }

  if (v7 != 1)
  {
    if (a4 != 1) {
      goto LABEL_5;
    }
LABEL_11:
    a4 = 0LL;
    goto LABEL_13;
  }

  if (a4 != 1) {
    goto LABEL_11;
  }
LABEL_5:
  a4 = 2LL;
LABEL_13:
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v8 setVoiceOverDescribedMedia:a4];

  id v12 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  uint64_t v9 = AXVoiceOverMediaDescriptionLocString(a4);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_10000BBB0(v10, 0, v12);
}

- (void)_handleHintsSettingMode:(id)a3 direction:(int64_t)a4
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3, a4));
  unsigned int v5 = [v4 voiceOverHintsEnabled];

  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v6 setVoiceOverHintsEnabled:v5 ^ 1];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v12 = v7;
  if (v5) {
    unsigned int v8 = @"hints.disabled";
  }
  else {
    unsigned int v8 = @"hints.enabled";
  }
  id v9 = sub_10004AE68(off_1001AC148, v8, 0LL, v7);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_10000BBB0(v10, 0, v12);
}

- (void)_handleDirectTouchExplorationMode:(id)a3 direction:(int64_t)a4
{
}

- (BOOL)currentElementAllowsDirectTouch
{
  return self->_flags.currentElementAllowsDirectTouch;
}

- (BOOL)avoidAnnouncingDirectTouchArea
{
  return self->_flags.avoidAnnouncingDirectTouchArea;
}

- (void)setShouldTurnTrackingIntoDirectTouch:(BOOL)a3
{
  self->_flags.shouldTurnTrackingIntoDirectTouch = a3;
}

- (BOOL)shouldTurnTrackingIntoDirectTouch
{
  return self->_flags.shouldTurnTrackingIntoDirectTouch;
}

- (BOOL)inDirectTouchMode
{
  BOOL result = (!AXDeviceSupportsSonification(self)
         || (id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager")),
             unsigned __int8 v3 = [v2 isScrubbing],
             v2,
             (v3 & 1) == 0))
        && [(id)VOTSharedWorkspace tvInteractionMode] == (id)1;
  return result;
}

- (void)_resetDirectInteractionCache
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10005F5A8;
  v4[3] = &unk_100176D38;
  v4[4] = self;
  AXPerformBlockAsynchronouslyOnMainThread(v4, v3);
}

- (void)_systemServerDied
{
  allElements = self->_allElements;
  self->_allElements = 0LL;
}

- (void)systemServerDied
{
}

- (void)_resetItemChooserCache
{
  if (!self->_flags.itemChooserVisible)
  {
    allElements = self->_allElements;
    self->_allElements = 0LL;
  }

- (void)_showItemChooser:(id)a3
{
  id v3 = a3;
  id v56 = objc_msgSend(objc_allocWithZone(NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  id v55 = [objc_allocWithZone(NSMutableArray) init];
  id v57 = [objc_allocWithZone(NSMutableSet) init];
  id v54 = objc_msgSend(objc_allocWithZone(NSMutableArray), "initWithCapacity:", objc_msgSend(v3, "count"));
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v69 objects:v74 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v52 = *(void *)v70;
    uint64_t v6 = kAXButtonTrait;
    uint64_t v50 = kAXButtonTrait;
    uint64_t v48 = kAXPopupButtonTrait | kAXTextAreaTrait | kAXToggleTrait | kAXRadioButtonTrait | kAXSearchFieldTrait | kAXTextEntryTrait | kAXButtonTrait;
    uint64_t v46 = kAXWebContentTrait;
    uint64_t v45 = kAXVisitedTrait;
    uint64_t v47 = kAXVisitedTrait | kAXLinkTrait;
    uint64_t v51 = kAXHeaderTrait;
    uint64_t v49 = kAXLinkTrait;
    uint64_t v44 = kAXLinkTrait | kAXHeaderTrait;
    uint64_t v7 = kAXSearchFieldTrait;
    uint64_t v8 = kAXTextEntryTrait | kAXSearchFieldTrait;
    uint64_t v9 = kAXImageTrait;
    uint64_t v10 = kAXStaticTextTrait;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v70 != v52) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)i);
        uint64_t v13 = objc_opt_class(&OBJC_CLASS___VOTElement, v6);
        if ((objc_opt_isKindOfClass(v12, v13) & 1) == 0)
        {
          double v41 = v12;
          _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  5370LL,  "-[VOTElementManager _showItemChooser:]",  @"WHO ARE YOU: %@");
        }

        objc_msgSend(v12, "frame", v41);
        objc_msgSend(v12, "adaptFrameForSystemElement:");
        id v14 = NSStringFromCGRect(v75);
        unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        [v54 addObject:v15];

        id v16 = [objc_allocWithZone(NSMutableArray) init];
        unint64_t v17 = (unint64_t)[v12 traits];
        if ((v51 & v17) != 0) {
          [v16 addObject:&off_1001875F8];
        }
        if ((v49 & v17) != 0) {
          [v16 addObject:&off_100187610];
        }
        if ((v48 & v17) != 0 && (v46 & v17) != 0) {
          [v16 addObject:&off_100187628];
        }
        if ((v47 & ~v17) == 0) {
          [v16 addObject:&off_100187640];
        }
        if ((v49 & v17) != 0 && (v45 & v17) == 0) {
          [v16 addObject:&off_100187658];
        }
        if ((v9 & v17) != 0) {
          [v16 addObject:&off_100187670];
        }
        if ((v10 & v17) != 0 && (v44 & v17) == 0) {
          [v16 addObject:&off_100187688];
        }
        if ((v50 & v17) != 0) {
          [v16 addObject:&off_1001876A0];
        }
        if ((v8 & v17) != 0) {
          [v16 addObject:&off_1001876B8];
        }
        if ((v7 & v17) != 0) {
          [v16 addObject:&off_1001876D0];
        }
        [v55 addObject:v16];
        [v57 addObjectsFromArray:v16];
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 itemChooserName]);
        [v56 addObject:v18];
      }

      id v5 = [obj countByEnumeratingWithState:&v69 objects:v74 count:16];
    }

    while (v5);
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 voiceOverRotorItems]);

  id v53 = [objc_allocWithZone(NSMutableArray) init];
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  id v21 = v20;
  id v22 = [v21 countByEnumeratingWithState:&v65 objects:v73 count:16];
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v66;
    do
    {
      for (j = 0LL; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v66 != v24) {
          objc_enumerationMutation(v21);
        }
        __int128 v26 = *(void **)(*((void *)&v65 + 1) + 8LL * (void)j);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:@"Enabled"]);
        unsigned int v28 = [v27 BOOLValue];

        if (v28)
        {
          __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:@"RotorItem"]);
          uint64_t v30 = &off_100187610;
          uint64_t v30 = &off_1001875F8;
          uint64_t v30 = &off_100187628;
          uint64_t v30 = &off_1001876E8;
          uint64_t v30 = &off_100187700;
          uint64_t v30 = &off_100187640;
          if (([v29 isEqualToString:kAXSVoiceOverTouchRotorItemVisitedLink] & 1) != 0
            || (uint64_t v30 = &off_100187658,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemNonVisitedLink] & 1) != 0)
            || (uint64_t v30 = &off_100187670,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemImage] & 1) != 0)
            || (uint64_t v30 = &off_100187688,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemStaticText] & 1) != 0)
            || (uint64_t v30 = &off_100187718,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemLandmark] & 1) != 0)
            || (uint64_t v30 = &off_1001876A0,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemButton] & 1) != 0)
            || (uint64_t v30 = &off_1001876B8,
                ([v29 isEqualToString:kAXSVoiceOverTouchRotorItemTextField] & 1) != 0)
            || (uint64_t v30 = &off_1001876D0,
                [v29 isEqualToString:kAXSVoiceOverTouchRotorItemSearchField]))
          {
LABEL_63:
          }
        }
      }

      id v23 = [v21 countByEnumeratingWithState:&v65 objects:v73 count:16];
    }

    while (v23);
  }

  id v31 = [objc_allocWithZone(NSMutableDictionary) init];
  [v31 setObject:v56 forKey:@"items"];
  [v31 setObject:v53 forKey:@"categories"];
  [v31 setObject:v55 forKey:@"mappings"];
  uint64_t v32 = objc_claimAutoreleasedReturnValue(-[VOTElementManager lastItemChooserSearchTerm](self, "lastItemChooserSearchTerm"));
  id v33 = (void *)v32;
  if (v32) {
    double v34 = (const __CFString *)v32;
  }
  else {
    double v34 = &stru_10017A920;
  }
  [v31 setObject:v34 forKey:@"searchTerm"];

  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_10005FEE4;
  v62[3] = &unk_100176DA8;
  id v35 = v31;
  id v63 = v35;
  uint64_t v64 = self;
  double v36 = objc_retainBlock(v62);
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472LL;
  v58[2] = sub_10005FF38;
  v58[3] = &unk_1001780E0;
  id v59 = obj;
  id v60 = v35;
  id v61 = v36;
  double v38 = v36;
  id v39 = v35;
  id v40 = obj;
  [v37 convertFramesToCursorSpace:v54 displayID:&off_100187730 completion:v58];
}

- (void)_elementsRetrieved:(id)a3 finished:(id)a4
{
  id v9 = a3;
  if ([a4 BOOLValue] && (unint64_t)objc_msgSend(v9, "count") <= 0x3E8)
  {
    id v6 = sub_10004CBA4(v9);
    uint64_t v7 = (NSArray *)objc_claimAutoreleasedReturnValue(v6);
    allElements = self->_allElements;
    self->_allElements = v7;

    -[VOTElementManager _showItemChooser:](self, "_showItemChooser:", self->_allElements);
  }
}

- (void)elementsRetrieved:(id)a3 finished:(BOOL)a4
{
  elementManagerThread = self->_elementManagerThread;
  id v6 = &kCFBooleanFalse;
  if (a4) {
    id v6 = &kCFBooleanTrue;
  }
  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_elementsRetrieved:finished:",  self,  2LL,  a3,  *v6,  0LL);
}

- (id)_customActionIdentifier
{
  return self->_customActionIdentifier;
}

- (int64_t)_customActionIndex
{
  return self->_customActionIndex;
}

- (void)_handleMoveToLinkedUI:(id)a3
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread",  a3) & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  5572LL,  "-[VOTElementManager _handleMoveToLinkedUI:]",  @"must be on element manager or system event thread");
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  unsigned int v6 = [v5 webSearchResultsActive];

  if (v6)
  {
    if ([v4 doesHaveTraits:kAXWebContentTrait])
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 firstResponderElement]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_100178100,  v8));
      goto LABEL_9;
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
    unsigned int v11 = [v10 isEqualToString:@"SFFindOnPageBarIdentifier"];

    if (v11)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstElementInApplicationForFocus]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestWebElement:](self, "_nearestWebElement:", v13));

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 textMarkerRangeForSelection]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 elementForTextMarker:v14]);

LABEL_9:
      if (v9) {
        goto LABEL_13;
      }
    }
  }

  unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v4 linkedUIElements]);
  uint64_t v16 = VOTLogCommon(v15);
  unint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    int v19 = 138412546;
    id v20 = v4;
    __int16 v21 = 2112;
    id v22 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Linked ui movement: %@ -> %@",  (uint8_t *)&v19,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v15 firstObject]);
  if (!v9)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v9 sendEvent:v18];

    goto LABEL_15;
  }

- (void)_handleMoveToNativeFocusedElement:(id)a3
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread",  a3) & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  5620LL,  "-[VOTElementManager _handleMoveToNativeFocusedElement:]",  @"must be on element manager or system event thread");
  }

  id v10 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _focusElementForFocusUpdate:](self, "_focusElementForFocusUpdate:", 0LL));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unsigned int v6 = (void *)v4;
  if (v10 && (v7 = [v10 isEqual:v4], id v5 = v10, !v7))
  {
    -[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:]( self,  "_moveToElement:shouldPlaySound:echoSameTouchContainer:moveToElementNotification:",  v10,  1LL,  0LL,  0LL);
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", v5));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v8 sendEvent:v9];
  }
}

- (void)_handleItemChooserSelectionMade:(id)a3
{
  id v4 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v7 stopSpeakingAtBoundary:0];

    -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:cancelMask:count:objects:",  "_notificationThreadCancel",  self,  1574144LL,  0LL,  0LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"row"]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"activate"]);
    unsigned __int8 v10 = [v9 BOOLValue];

    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"searchTerm"]);
    -[VOTElementManager setLastItemChooserSearchTerm:](self, "setLastItemChooserSearchTerm:", v11);
    id v12 = [v8 integerValue];
    if ((unint64_t)v12 > 0x7FFFFFFFFFFFFFFELL
      || (id v13 = v12, v12 >= (id)-[NSArray count](self->_allElements, "count")))
    {
      id v14 = self->_previousItemChooserElement;
      int v15 = 1;
    }

    else
    {
      id v14 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_allElements, "objectAtIndex:", v13));
      int v15 = 0;
    }

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_1000607A8;
    v23[3] = &unk_100177798;
    v23[4] = self;
    uint64_t v16 = v14;
    uint64_t v24 = v16;
    unsigned __int8 v25 = v10;
    -[VOTElement scrollToElementForDirectional:withCompletion:]( v16,  "scrollToElementForDirectional:withCompletion:",  1LL,  v23);
    if ((v10 & 1) == 0)
    {
      if (v15)
      {
        unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
        id v18 = sub_10004AE68(off_1001AC148, @"closing.item.chooser", 0LL, v17);
        int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        id v20 = sub_10000BBB0(v19, 0, v17);

        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v16);
      }

      else
      {
        -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v16, 0LL);
      }
    }

    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 2LL));
    [v21 setFocusElement:v16];
    -[VOTElement setNativeFocus](v16, "setNativeFocus");
    -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:]( self,  "_tvOS_updateWithNativeFocus:withDelay:",  v21,  0.0);
    previousItemChooserElement = self->_previousItemChooserElement;
    self->_previousItemChooserElement = 0LL;

    -[VOTElementManager _didDismissItemChooser](self, "_didDismissItemChooser");
    self->_flags.focusIsOnElement = 1;
  }
}

- (void)_closeItemChooser
{
  if (self->_flags.itemChooserVisible)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTItemChooserAdapter sharedInstance](&OBJC_CLASS___VOTItemChooserAdapter, "sharedInstance"));
    [v3 showItemChooser:0 withItems:0];

    -[VOTElementManager _didDismissItemChooser](self, "_didDismissItemChooser");
  }

- (void)_didDismissItemChooser
{
  self->_flags.itemChooserVisible = 0;
}

- (void)_handleItemChooserSelection:(id)a3
{
  if (!self->_flags.itemChooserVisible)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
    unsigned int v5 = [v4 securePayAssertionActive];

    if (v5)
    {
      uint64_t v6 = AXLogAssertions();
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Not processing item chooser because secure pay mode active",  buf,  2u);
      }
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      id v9 = (VOTElement *)[v8 copyWithZone:0];
      previousItemChooserElement = self->_previousItemChooserElement;
      self->_previousItemChooserElement = v9;

      if (-[NSArray count](self->_allElements, "count"))
      {
        -[VOTElementManager _showItemChooser:](self, "_showItemChooser:", self->_allElements);
      }

      else
      {
        fetchManager = self->_fetchManager;
        id v12 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        -[VOTElementFetcher retrieveElementsWithElement:groupNavigationStyle:]( fetchManager,  "retrieveElementsWithElement:groupNavigationStyle:",  v12,  [(id)VOTSharedWorkspace navigationStyleHonorsGroups]);
      }
    }
  }

- (BOOL)isItemChooserVisible
{
  return self->_flags.itemChooserVisible;
}

- (void)_handleOngoingTextSearch:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 command]);
  else {
    uint64_t v5 = 2LL;
  }

  self->_flags.performedSearch = 1;
  id v13 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSearchText](self, "_copyMatchBlockSearchText"));
  fetchManager = self->_fetchManager;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unint64_t elementSearchGeneration = self->_elementSearchGeneration;
  id v9 = -[VOTElement selectedTextRange](self->_currentElement, "selectedTextRange");
  uint64_t v11 = v10;
  LOBYTE(v12) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
  -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  v5,  v7,  v13,  0LL,  0LL,  elementSearchGeneration,  v9,  v11,  v12);
}

- (void)_handleStartTextSearch:(id)a3
{
  if (!self->_flags.inSearchTextMode)
  {
    self->_flags.inSearchTextMode = 1;
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[VOTTextSearchManager sharedManager](&OBJC_CLASS___VOTTextSearchManager, "sharedManager", a3));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v10 setBrailleManager:v3];

    [v10 beginNewTextSearchSession];
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    [v4 setCaptureModeEnabled:1];

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v5 setTextSearchModeOn:1];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v7 = sub_10004AE68(off_1001AC148, @"enter.search.text.mode", 0LL, v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = sub_10000BBB0(v8, 0, v6);
  }

- (void)updateRotorForCurrentElement:(BOOL)a3 completion:(id)a4
{
  BOOL v4 = a3;
  elementManagerThread = self->_elementManagerThread;
  id v7 = a4;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  uint64_t v8 = _Block_copy(v7);

  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_updateRotorForCurrentElement:completion:",  self,  2LL,  v9,  v8,  0LL);
}

- (void)_updateRotorForCurrentElement:(id)a3 completion:(id)a4
{
  id v13 = a3;
  uint64_t v6 = (void (**)(void))a4;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  5803LL,  "-[VOTElementManager _updateRotorForCurrentElement:completion:]",  @"must be on element manager or system event thread");
  }

  id v7 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (!v7
    && ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2
     || (id v7 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"))) == 0LL))
  {
    id v7 = self->_touchContainer;
  }

  int64_t v8 = -[VOTElementManager lastElementChangeAction](self, "lastElementChangeAction");
  uint64_t v9 = v8 == 1;
  if ((id)-[VOTElementManager lastElementChangeAction](self, "lastElementChangeAction") == (id)2
    && (id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)30)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement containerTypes](v7, "containerTypes"));
    unsigned int v11 = [v10 containsObject:&off_100187748];

    if (v8 == 1) {
      uint64_t v9 = 1LL;
    }
    else {
      uint64_t v9 = v11;
    }
  }

  -[VOTElementRotor updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:]( self->_elementRotor,  "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:",  v7,  v9,  self->_firstResponderElement);
  currentPublicCustomRotorItemResult = self->_currentPublicCustomRotorItemResult;
  self->_currentPublicCustomRotorItemResult = 0LL;

  self->_lastSeenApplicationOrientation = (int64_t)[(id)VOTSharedWorkspace applicationOrientation];
  self->_flags.shouldUpdateRotorForElement = 0;
  if (v6) {
    v6[2](v6);
  }
}

- (void)_updateRotorForCurrentElement
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  5841LL,  "-[VOTElementManager _updateRotorForCurrentElement]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager _updateRotorForCurrentElement:completion:]( self,  "_updateRotorForCurrentElement:completion:",  0LL,  0LL);
}

- (void)_handleSearchRotorEcho:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTRotor generateRotorTypeRequest](self->_elementRotor, "generateRotorTypeRequest"));
  -[VOTElementManager _appendCurrentRotorValue:forRotor:]( self,  "_appendCurrentRotorValue:forRotor:",  v4,  self->_elementRotor);
  [v4 setGeneratesBraille:1];
  [v4 setBrailleType:1];
  [v4 send];
}

- (void)_appendCurrentRotorValue:(id)a3 forRotor:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  v85[0] = _NSConcreteStackBlock;
  v85[1] = 3221225472LL;
  v85[2] = sub_1000616CC;
  v85[3] = &unk_100178128;
  int64_t v8 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  double v86 = v8;
  uint64_t v9 = objc_retainBlock(v85);
  id v10 = [v7 currentRotorType];
  switch((unint64_t)v10)
  {
    case '$':
      unsigned int v11 = (__CFString *)-[VOTElementManager _appInfoForCurrentElement](self, "_appInfoForCurrentElement");
      id v13 = v12;
      id v14 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_directTouchApps,  "objectForKeyedSubscript:",  v11));
      id v15 = [v14 BOOLValue];

      uint64_t v16 = ((uint64_t (*)(void *, id))v9[2])(v9, v15);
      id v17 = (id)objc_claimAutoreleasedReturnValue(v16);
      id v18 = [v6 addString:v17 withLanguage:v8];
      goto LABEL_53;
    case '%':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '/':
    case '1':
    case '2':
    case '3':
    case '4':
    case '6':
    case '7':
    case '8':
    case ':':
    case ';':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'Q':
    case 'T':
      goto LABEL_61;
    case '0':
      id v20 = (__CFString *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCustomActions](self, "_currentCustomActions"));
      id v13 = v20;
      customActionIndedouble x = self->_customActionIndex;
      if (customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v22 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _customActionDefaultActionString](self, "_customActionDefaultActionString"));
LABEL_56:
        unsigned int v11 = (__CFString *)v22;
LABEL_57:
        __int128 v69 = v6;
        __int128 v70 = v11;
        __int128 v71 = v8;
LABEL_58:
        id v75 = objc_msgSend(v69, "addString:withLanguage:", v70, v71, *(void *)&v82);
      }

      else
      {
        unsigned int v11 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString objectAtIndex:](v13, "objectAtIndex:", customActionIndex));
        id v17 = (id)objc_claimAutoreleasedReturnValue(-[__CFString name](v11, "name"));
        id v73 = [v6 addString:v17];
LABEL_53:
      }

- (int64_t)currentRotorType
{
  return -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
}

- (void)setCurrentTextSelectionSegmentType:(int64_t)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager textSelectionMovementManager](self, "textSelectionMovementManager"));
  [v4 setSegment:a3];
}

- (void)setRotor:(id)a3 toType:(int64_t)a4 saveToPreferences:(BOOL)a5 userInitiated:(BOOL)a6
{
}

- (BOOL)_inMisspelledWordRotor
{
  return -[VOTRotor inMisspelledWordRotor](self->_elementRotor, "inMisspelledWordRotor");
}

- (void)setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  if (self->_inUnitTestingMode)
  {
    -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  a3,  a4,  a5);
  }

  else
  {
    elementManagerThread = self->_elementManagerThread;
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v6));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
    -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_setElementRotorToNumberType:saveToNumberPreferences:numberUserInitiated:",  self,  3LL,  v11,  v9,  v10,  0LL);
  }

- (void)_setElementRotorToNumberType:(id)a3 saveToNumberPreferences:(id)a4 numberUserInitiated:(id)a5
{
  id v8 = a5;
  id v9 = a4;
  id v10 = [a3 integerValue];
  id v11 = [v9 BOOLValue];

  id v12 = [v8 BOOLValue];
  -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  v10,  v11,  v12);
}

- (void)_setElementRotorToType:(int64_t)a3 saveToPreferences:(BOOL)a4 userInitiated:(BOOL)a5
{
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)6) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = -[VOTElementManager _inMisspelledWordRotor](self, "_inMisspelledWordRotor");
  }
  self->_inTextProcessingRotorMode = v6;
}

- (BOOL)forceRotorOffGesturedTextInputIfNeeded:(BOOL)a3
{
  return 0;
}

- (int)cancelElementCountOutput
{
  p_countOutputBlockGeneration = &self->_countOutputBlockGeneration;
  do
  {
    unsigned int v3 = __ldaxr((unsigned int *)p_countOutputBlockGeneration);
    int result = v3 + 1;
  }

  while (__stlxr(v3 + 1, (unsigned int *)p_countOutputBlockGeneration));
  return result;
}

- (void)elementsCounted:(int64_t)a3
{
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  switch(-[VOTElementManager currentRotorType](self, "currentRotorType"))
  {
    case 8LL:
      BOOL v6 = @"header.count";
      id v7 = off_1001AC148;
      id v8 = @"header.count.high";
      goto LABEL_18;
    case 9LL:
      BOOL v6 = @"link.count";
      id v7 = off_1001AC148;
      id v8 = @"link.count.high";
      goto LABEL_18;
    case 0xALL:
      BOOL v6 = @"formelement.count";
      id v7 = off_1001AC148;
      id v8 = @"formelement.count.high";
      goto LABEL_18;
    case 0xBLL:
      BOOL v6 = @"table.count";
      id v7 = off_1001AC148;
      id v8 = @"table.count.high";
      goto LABEL_18;
    case 0xCLL:
      BOOL v6 = @"frame.count";
      id v7 = off_1001AC148;
      id v8 = @"frame.count.high";
      goto LABEL_18;
    case 0xDLL:
      BOOL v6 = @"list.count";
      id v7 = off_1001AC148;
      id v8 = @"list.count.high";
      goto LABEL_18;
    case 0xELL:
      BOOL v6 = @"visitedlink.count";
      id v7 = off_1001AC148;
      id v8 = @"visitedlink.count.high";
      goto LABEL_18;
    case 0xFLL:
      BOOL v6 = @"nonvisited.count";
      id v7 = off_1001AC148;
      id v8 = @"nonvisited.count.high";
      goto LABEL_18;
    case 0x10LL:
      BOOL v6 = @"image.count";
      id v7 = off_1001AC148;
      id v8 = @"image.count.high";
      goto LABEL_18;
    case 0x1ALL:
      BOOL v6 = @"landmark.count";
      id v7 = off_1001AC148;
      id v8 = @"landmark.count.high";
      goto LABEL_18;
    case 0x1BLL:
      BOOL v6 = @"article.count";
      id v7 = off_1001AC148;
      id v8 = @"article.count.high";
      goto LABEL_18;
    case 0x1CLL:
      BOOL v6 = @"button.count";
      id v7 = off_1001AC148;
      id v8 = @"button.count.high";
      goto LABEL_18;
    case 0x1DLL:
      BOOL v6 = @"textfield.count";
      id v7 = off_1001AC148;
      id v8 = @"textfield.count.high";
      goto LABEL_18;
    case 0x21LL:
      BOOL v6 = @"searchfield.count";
      id v7 = off_1001AC148;
      id v8 = @"searchfield.count.high";
      goto LABEL_18;
    case 0x22LL:
      BOOL v6 = @"radiobutton.count";
      id v7 = off_1001AC148;
      id v8 = @"radiobutton.count.high";
      goto LABEL_18;
    case 0x23LL:
      BOOL v6 = @"checkbox.count";
      id v7 = off_1001AC148;
      id v8 = @"checkbox.count.high";
LABEL_18:
      if (a3 == 0x7FFFFFFFFFFFFFFFLL) {
        id v9 = (__CFString *)v8;
      }
      else {
        id v9 = (__CFString *)v6;
      }
      id v10 = sub_10004AE68(v7, v9, 0LL, v5);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v11,  a3));

      if (v12)
      {
        else {
          double v13 = 1.1;
        }
        if (a3 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v14 = AXFormatInteger(a3);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v14);
          uint64_t v15 = AXCFormattedString(v12, @"%@");
          uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);

          id v12 = (void *)v16;
        }

        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_100061D7C;
        v20[3] = &unk_100178150;
        unsigned int v23 = -[VOTElementManager cancelElementCountOutput](self, "cancelElementCountOutput", v19);
        v20[4] = self;
        id v21 = v12;
        id v22 = v5;
        id v17 = v12;
        AXPerformBlockOnMainThreadAfterDelay(v20, v18, v13);
      }

      break;
    default:
      break;
  }
}

- (BOOL)_rotorTypeSupportsCounting:(int64_t)a3
{
  return ((unint64_t)a3 < 0x24) & (0xE3401FF00uLL >> a3);
}

- (id)webEditableAncestor:(id)a3
{
  id v3 = a3;
  uint64_t v4 = kAXWebContentTrait;
  if (![v3 doesHaveTraits:kAXWebContentTrait])
  {
LABEL_8:
    BOOL v5 = 0LL;
    goto LABEL_9;
  }

  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v3 directParent]);
  if (v5)
  {
    uint64_t v6 = kAXIsEditingTrait;
    do
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 directParent]);

      BOOL v5 = (void *)v7;
    }

    while (v7);

    goto LABEL_8;
  }

- (void)setCurrentElementToWebEditableAncestor
{
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXWebContentTrait)
    && !-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXIsEditingTrait))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", self->_currentElement));
    if (v3)
    {
      uint64_t v4 = v3;
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v3);
      id v3 = v4;
    }
  }

- (void)_outputRotorTypeCount
{
  qword_1001ACED0 = CFAbsoluteTimeGetCurrent();
  int64_t v3 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unsigned int v5 = -[VOTElementManager _rotorTypeSupportsCounting:](self, "_rotorTypeSupportsCounting:", v3);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  unsigned __int8 v7 = [v6 isSafari];
  if (v5)
  {
    if ((v7 & 1) != 0 || [v6 isGoogleChrome])
    {
      uint64_t v9 = 0LL;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _copyMatchBlockForRotorType:searchType:]( self,  "_copyMatchBlockForRotorType:searchType:",  v3,  &v9));
      -[VOTElementFetcher cancelPreviousCount](self->_fetchManager, "cancelPreviousCount");
      -[VOTElementFetcher countElementsMatchingBlock:](self->_fetchManager, "countElementsMatchingBlock:", v8);
    }
  }

  else if ((v7 & 1) != 0 || [v6 isGoogleChrome])
  {
    -[VOTElementFetcher cancelPreviousCount](self->_fetchManager, "cancelPreviousCount");
  }
}

- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4
{
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace elementManager]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 elementRotor]);
  id v7 = [v6 currentRotorType];

  if (v7 == (id)4) {
    -[VOTElementManager tutorialSetRecognizedGesture:](self, "tutorialSetRecognizedGesture:", @"RotorWords");
  }
}

- (void)_handleSearchRotorDirection:(int64_t)a3 event:(id)a4 notifyUser:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a4;
  if ([(id)VOTSharedWorkspace voiceOverMuted])
  {
    if ([v8 isKeyEvent])
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
      unsigned __int8 v10 = [v9 bluetoothBrailleDisplayConnected];

      if ((v10 & 1) == 0) {
        [(id)VOTSharedWorkspace setVoiceOverMuted:0];
      }
    }
  }

  if (v5 && !-[VOTElementRotor ignoreDefaultTypeAutofill](self->_elementRotor, "ignoreDefaultTypeAutofill"))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    unsigned int v12 = [v11 doesHaveTraits:kAXIsEditingTrait];

    if (v12) {
      -[VOTElementRotor setIgnoreDefaultTypeAutofill:](self->_elementRotor, "setIgnoreDefaultTypeAutofill:", 1LL);
    }
  }

  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)5
    || (id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)6)
  {
    -[VOTElementManager setCurrentElementToWebEditableAncestor](self, "setCurrentElementToWebEditableAncestor");
  }

  if (self->_flags.shouldUpdateRotorForElement
    || (id lastSeenApplicationOrientation = (id)self->_lastSeenApplicationOrientation,
        lastSeenApplicationOrientation != [(id)VOTSharedWorkspace applicationOrientation]))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    [v14 updateTraits];

    -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
  }

  char v21 = 0;
  if (a3 == 1)
  {
    -[VOTRotor increment:userInitiated:eventOrigin:]( self->_elementRotor,  "increment:userInitiated:eventOrigin:",  &v21,  1,  [v8 origin]);
  }

  else if (a3 == 2)
  {
    -[VOTRotor decrement:userInitiated:eventOrigin:]( self->_elementRotor,  "decrement:userInitiated:eventOrigin:",  &v21,  1,  [v8 origin]);
  }

  if ([v8 fingerCount]) {
    -[SCRCTargetSelectorTimer cancel](self->_visualRotorFadeTimer, "cancel");
  }
  else {
    -[VOTElementManager hideVisualRotor](self, "hideVisualRotor");
  }
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)48)
  {
    self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
    customActionIdentifier = self->_customActionIdentifier;
    self->_customActionIdentifier = 0LL;
  }

  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)84) {
    self->_customContentIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned __int8 v16 = -[VOTElementManager _inMisspelledWordRotor](self, "_inMisspelledWordRotor");
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)6) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = v16;
  }
  self->_inTextProcessingRotorMode = v17;
  if ((v16 & 1) == 0) {
    self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    -[VOTElementManager _showVisualRotor:direction:](self, "_showVisualRotor:direction:", self->_elementRotor, a3 == 1);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTRotor generateRotorTypeRequest](self->_elementRotor, "generateRotorTypeRequest"));
    -[VOTElementManager _appendCurrentRotorValue:forRotor:]( self,  "_appendCurrentRotorValue:forRotor:",  v18,  self->_elementRotor);
    -[VOTElementManager _formatRequestForBrailleAlertConditional:]( self,  "_formatRequestForBrailleAlertConditional:",  v18);
    [v18 send];
  }

  -[VOTElementManager _outputRotorTypeCount](self, "_outputRotorTypeCount");
  if ([(id)VOTSharedWorkspace tvInteractionMode] != (id)2)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v20 = [v19 voiceOverUseTVToggleStyleNavigation];

    if (v20)
    {
      -[SCRCTargetSelectorTimer cancel](self->_tvRotorInteractionTimer, "cancel");
      -[VOTElementManager setTvIsInteractingWithRotor:](self, "setTvIsInteractingWithRotor:", 1LL);
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_tvRotorInteractionTimer, "dispatchAfterDelay:", 3.0);
    }
  }
}

- (void)_handleSearchRotorLeft:(id)a3
{
}

- (void)_handleSearchRotorRight:(id)a3
{
}

- (void)elementFetchFound:(id)a3
{
}

- (void)_updateContextDescriptors
{
  int64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager currentContextDescriptors](self, "currentContextDescriptors"));
  -[VOTElementManager setPreviousContextDescriptors:](self, "setPreviousContextDescriptors:", v3);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 contextDescriptors]);

  if ([v5 count])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v5 count]));
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    uint64_t v15 = v5;
    id v7 = v5;
    id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          unsigned int v12 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          double v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"value"]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"category"]);
          [v6 setObject:v13 forKeyedSubscript:v14];
        }

        id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v9);
    }

    -[VOTElementManager setCurrentContextDescriptors:](self, "setCurrentContextDescriptors:", v6);
    BOOL v5 = v15;
  }

  else
  {
    -[VOTElementManager setCurrentContextDescriptors:](self, "setCurrentContextDescriptors:", 0LL);
  }
}

- (BOOL)_touchContainerDidChangeForElement:(id)a3 oldElement:(id)a4
{
  id v5 = a4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a3 labeledTouchContainer]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 labeledTouchContainer]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]);

  unint64_t v10 = (unint64_t)[v7 axElement];
  id v11 = [v9 axElement];
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___AXUIMockElement, v12);
  if ((objc_opt_isKindOfClass(v7, v13) & 1) != 0) {
    unint64_t v10 = (unint64_t)v7;
  }
  uint64_t v15 = objc_opt_class(&OBJC_CLASS___AXUIMockElement, v14);
  if ((objc_opt_isKindOfClass(v9, v15) & 1) != 0) {
    unint64_t v16 = (unint64_t)v9;
  }
  else {
    unint64_t v16 = (unint64_t)v11;
  }
  if (v16 | v10) {
    BOOL v17 = (v10 != 0) != (v16 != 0) || CFEqual((CFTypeRef)v10, (CFTypeRef)v16) == 0;
  }
  else {
    BOOL v17 = 0;
  }

  return v17;
}

- (BOOL)_chartElementDidChangeForElement:(id)a3 oldElement:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 chartElement]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 uiElement]);
  unint64_t v9 = (unint64_t)[v8 axElement];

  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 chartElement]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uiElement]);
  unint64_t v12 = (unint64_t)[v11 axElement];

  if (v9 | v12) {
    BOOL v13 = (v9 != 0) != (v12 != 0) || CFEqual((CFTypeRef)v9, (CFTypeRef)v12) == 0;
  }
  else {
LABEL_5:
  }
    BOOL v13 = 0;

  return v13;
}

- (BOOL)_shouldIncludeContainerInDescriptionForCurrentElement:(id)a3 previousElement:(id)a4
{
  id v6 = a3;
  id v7 = (VOTElement *)a4;
  if (!v7)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime <= 2.0) {
      id v7 = self->_elementBeforeScreenChange;
    }
    else {
      id v7 = 0LL;
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement labeledTouchContainer](v7, "labeledTouchContainer"));
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 label]);

  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 labeledTouchContainer]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 label]);

  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v6));
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v7));
  unsigned int v14 = (v9 != v11) & ~[v9 isEqualToString:v11];
  unsigned int v15 = [v12 isEqual:v13] ^ 1;
  unsigned __int8 v16 = -[VOTElementManager _touchContainerDidChangeForElement:oldElement:]( self,  "_touchContainerDidChangeForElement:oldElement:",  v6,  v7);
  if ((v15 & 1) != 0) {
    goto LABEL_9;
  }
  if (!v14) {
    goto LABEL_9;
  }
  id v23 = v6;
  BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v6 labeledTouchContainer]);
  id v22 = v9;
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v12 labeledTouchContainer]);
  unsigned __int8 v19 = [v17 isEqual:v18];

  unint64_t v9 = v22;
  id v6 = v23;
  if ((v19 & 1) != 0) {
    char v20 = 0;
  }
  else {
LABEL_9:
  }
    char v20 = v16 & (v15 | v14);

  return v20;
}

- (void)_echoFlickNavigationElement:(id)a3
{
  id v19 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  sub_100062440(v19, v4);
  id v5 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  unsigned int v6 = -[VOTElementManager _shouldIncludeContainerInDescriptionForCurrentElement:previousElement:]( self,  "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:",  v19,  v4);
  id v7 =  -[VOTElementManager _updateTouchContainerForElement:playSound:]( self,  "_updateTouchContainerForElement:playSound:",  v19,  1LL);
  if (-[VOTElementManager _shouldAnnounceCustomRotorHintForElement:]( self,  "_shouldAnnounceCustomRotorHintForElement:",  v19))
  {
    uint64_t v8 = 0x200800802LL;
  }

  else
  {
    uint64_t v8 = 8390658LL;
  }

  id v9 = [v19 containedIn:2];
  if ((_DWORD)v9)
  {
    id v9 = [v19 rowRange];
    if (v9 == (id)self->_lastTableRow) {
      v8 |= 0x400000uLL;
    }
  }

  if (v6)
  {
    id v9 = [v19 shouldSpeakScrollStatusOnEntry];
    uint64_t v10 = 32LL;
    if ((_DWORD)v9) {
      uint64_t v10 = 32800LL;
    }
    v8 |= v10;
  }

  if (AXDeviceSupportsSonification(v9))
  {
    unsigned int v11 = [v19 supportsAudiographs];
    unint64_t v12 = v19;
    if (v11)
    {
      unsigned int v13 = -[VOTElementManager _chartElementDidChangeForElement:oldElement:]( self,  "_chartElementDidChangeForElement:oldElement:",  v19,  v4);
      unint64_t v12 = v19;
      if (v13) {
        v8 |= 0x4100000000uLL;
      }
    }
  }

  else
  {
    unint64_t v12 = v19;
  }

  id v14 = [v12 blockquoteLevel];
  if (v14 == [v4 blockquoteLevel]) {
    uint64_t v15 = v8;
  }
  else {
    uint64_t v15 = v8 | 0x20000;
  }
  if (v4)
  {
    unsigned int v16 = [v19 applicationIsRTL];
  }

  -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v19,  v4,  v5);
  BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager currentContextDescriptors](self, "currentContextDescriptors"));
  -[VOTElementManager _addDescription:toRequest:withOptions:lastSeenContextDescriptors:]( self,  "_addDescription:toRequest:withOptions:lastSeenContextDescriptors:",  v19,  v5,  v15,  v17);

  -[VOTElementManager sendRequest:](self, "sendRequest:", v5);
  if ([v19 doesHaveTraits:kAXLinkTrait])
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v19 url]);

    if (v18)
    {
      [v19 frame];
      -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:]( self,  "_outputDataDetectorIfPresent:element:includeLinks:",  v19,  0LL);
    }
  }
}

- (void)_echoSearchNavigationElement:(id)a3 forRangeAdjustment:(BOOL)a4
{
  BOOL v4 = a4;
  id v12 = a3;
  id v6 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v12,  v7,  v6);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unsigned int v9 = -[VOTElementManager _shouldIncludeContainerInDescriptionForCurrentElement:previousElement:]( self,  "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:",  v8,  v12);

  if (v9) {
    uint64_t v10 = 8388642LL;
  }
  else {
    uint64_t v10 = 8388610LL;
  }
  if (v4)
  {
    [v6 setDoesNotInterrupt:1];
    uint64_t v10 = 0x2000000LL;
  }

  -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v12,  v6,  v10);
  -[VOTElementManager sendRequest:](self, "sendRequest:", v6);
  if ([v12 doesHaveTraits:kAXLinkTrait])
  {
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v12 url]);

    if (v11)
    {
      [v12 frame];
      -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:]( self,  "_outputDataDetectorIfPresent:element:includeLinks:",  v12,  0LL);
    }
  }
}

- (void)_echoSearchTypeNotFound:(int64_t)a3
{
  int64_t v5 = +[VOTRotor rotorTypeForSearchType:](&OBJC_CLASS___VOTRotor, "rotorTypeForSearchType:");
  if (!v5) {
    int64_t v5 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v14 = v6;
  if (!a3)
  {
    uint64_t v10 = @"generic.notfound";
LABEL_9:
    id v11 = sub_10004AE68(off_1001AC148, v10, 0LL, v6);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
    id v7 = v14;
    unsigned int v9 = (void *)v12;
    goto LABEL_10;
  }

  id v7 = v6;
  int64_t v8 = v5 - 8;
  if ((unint64_t)(v5 - 8) <= 0x1D && ((0x2E3C03FFu >> v8) & 1) != 0)
  {
    uint64_t v10 = *(&off_100179148 + v8);
    goto LABEL_9;
  }

  unsigned int v9 = 0LL;
LABEL_10:
  id v13 = sub_10000BBB0(v9, 0, v7);
}

- (BOOL)_isShowingTodayViewForPhone
{
  if ((id)-[NSArray count](self->_currentApplications, "count") != (id)2) {
    return 0;
  }
  int64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"));
  if ([v3 isSpotlight])
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray lastObject](self->_currentApplications, "lastObject"));
    unsigned __int8 v5 = [v4 isSpringBoard];
  }

  else
  {
    unsigned __int8 v5 = 0;
  }

  return v5;
}

- (void)_elementFetchFoundElement:(id)a3
{
  id v4 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  7102LL,  "-[VOTElementManager _elementFetchFoundElement:]",  @"must be on element manager or system event thread");
  }

  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 element]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uiElement]);
  [v6 enableCache:1];

  if ([v4 clientGeneration] == (id)self->_elementSearchGeneration)
  {
    id v7 = objc_autoreleasePoolPush();
    -[VOTElementManager _resetReadAllRequest](self, "_resetReadAllRequest");
    int64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if (!v5
      && -[VOTRotor publicCustomRotorIndex](self->_elementRotor, "publicCustomRotorIndex") != 0x7FFFFFFFFFFFFFFFLL)
    {
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 directParent]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 application]);
      if ([v9 isValidForApplication:v10])
      {
        unsigned int v11 = [v9 isAccessibleElement];

        if (v11)
        {
          -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v9);
          -[VOTElementManager _resetElementUnitIndexes](self, "_resetElementUnitIndexes");
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockAnyElement](self, "_copyMatchBlockAnyElement"));
          fetchManager = self->_fetchManager;
          id v14 = [v4 direction];
          unint64_t elementSearchGeneration = self->_elementSearchGeneration;
          LOBYTE(v46) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
          -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  v14,  v9,  v12,  0LL,  0LL,  elementSearchGeneration,  0x7FFFFFFFLL,  0LL,  v46);

LABEL_60:
          objc_autoreleasePoolPop(v7);
          goto LABEL_61;
        }
      }

      else
      {
      }
    }

    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472LL;
    v52[2] = sub_1000637D8;
    v52[3] = &unk_100178178;
    id v16 = v8;
    id v53 = v16;
    id v17 = v5;
    id v54 = v17;
    __int128 v18 = objc_retainBlock(v52);
    if (v5)
    {
      [v4 range];
      uint64_t v20 = v19;
      if ([v17 isEqual:v16])
      {
        BOOL v23 = (id)self->_highlightedCharacterRange.location != [v4 range]
           || self->_highlightedCharacterRange.length != v21;
        if (v20 && v23)
        {
          id v24 = [v4 range];
          -[VOTElementManager _moveFocusToUpdatedRange:element:searchType:]( self,  "_moveFocusToUpdatedRange:element:searchType:",  v24,  v25,  v17,  [v4 searchType]);
        }

- (id)_copyMatchBlockSearchText
{
  return [&stru_100178198 copy];
}

- (id)_copyMatchBlockForTextAttribute:(int64_t)a3 searchType:(int64_t *)a4
{
  return [&stru_1001781B8 copy];
}

- (id)_copyMatchBlockAnyElement
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100063A94;
  v5[3] = &unk_100177FF0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = [v2 copy];

  return v3;
}

- (id)_copyMatchBlockImage
{
  return [&stru_1001781D8 copy];
}

- (id)_copyMatchBlockVisitedLink
{
  return [&stru_1001781F8 copy];
}

- (id)_copyMatchBlockHeader
{
  return [&stru_100178218 copy];
}

- (id)_copyMatchBlockForHeadingLevel:(int64_t)a3 searchType:(int64_t *)a4
{
  v8[0] = 0LL;
  v8[1] = v8;
  v8[2] = 0x2020000000LL;
  v8[3] = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100063F74;
  v7[3] = &unk_100178240;
  v7[4] = v8;
  v7[5] = a4;
  id v4 = objc_retainBlock(v7);
  id v5 = [v4 copy];

  _Block_object_dispose(v8, 8);
  return v5;
}

- (id)_copyMatchBlockNonVisitedLink
{
  return [&stru_100178260 copy];
}

- (id)_copyMatchBlockLink
{
  return [&stru_100178280 copy];
}

- (id)_copyMatchBlockStaticText
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](&OBJC_CLASS___NSCharacterSet, "alphanumericCharacterSet"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 invertedSet]);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100064188;
  v8[3] = &unk_100177FF0;
  id v9 = v3;
  id v4 = v3;
  id v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockFormElement
{
  return [&stru_1001782A0 copy];
}

- (id)_copyMatchBlockListStart
{
  return [&stru_1001782C0 copy];
}

- (id)_copyMatchBlockFrameStart
{
  return [&stru_1001782E0 copy];
}

- (id)_copyMatchBlockTableStart
{
  return [&stru_100178300 copy];
}

- (id)_copyMatchBlockArticleStart
{
  return [&stru_100178320 copy];
}

- (id)_copyMatchBlockLandmarkStart
{
  return [&stru_100178340 copy];
}

- (id)_copyMatchBlockInternalLink
{
  return [&stru_100178360 copy];
}

- (id)_copyMatchBlockButton
{
  return [&stru_100178380 copy];
}

- (unint64_t)filterTraitsByPriority:(unint64_t)a3
{
  unint64_t result = kAXHeaderTrait;
  if ((kAXHeaderTrait & a3) == 0)
  {
    unint64_t result = kAXPickerElementTrait;
    if ((kAXPickerElementTrait & a3) == 0)
    {
      if ((kAXWebContentTrait & a3) != 0)
      {
        uint64_t v4 = kAXLinkTrait;
        if ((kAXLinkTrait & a3) != 0) {
          return v4 | kAXWebContentTrait;
        }
        uint64_t v4 = kAXTextEntryTrait;
        if ((kAXTextEntryTrait & a3) != 0) {
          return v4 | kAXWebContentTrait;
        }
        uint64_t v5 = kAXWebContentTrait;
      }

      else
      {
        uint64_t v5 = 0LL;
      }

      uint64_t v6 = kAXImageTrait;
      if ((kAXImageTrait & a3) != 0) {
        return v6 | v5;
      }
      uint64_t v6 = kAXButtonTrait;
      if ((kAXButtonTrait & a3) != 0) {
        return v6 | v5;
      }
      uint64_t v6 = kAXLinkTrait;
      if ((kAXLinkTrait & a3) != 0)
      {
        return v6 | v5;
      }

      else
      {
        unint64_t v7 = kAXStaticTextTrait | v5;
        if ((kAXStaticTextTrait & a3) != 0) {
          return v7;
        }
        else {
          return kAXWebContentTrait;
        }
      }
    }
  }

  return result;
}

- (id)_copyMatchBlockBlockquote
{
  return &stru_1001783A0;
}

- (id)_copyMatchBlockSameBlockquote
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000648F4;
  v5[3] = &unk_100177FF0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = objc_retainBlock(v2);

  return v3;
}

- (id)_copyMatchBlockSameHeading
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000649CC;
  v5[3] = &unk_100177FF0;
  v5[4] = self;
  id v2 = objc_retainBlock(v5);
  id v3 = objc_retainBlock(v2);

  return v3;
}

- (id)_copyMatchBlockSimilar
{
  double Current = CFAbsoluteTimeGetCurrent();
  -[VOTElementManager lastSearchForElementsTime](self, "lastSearchForElementsTime");
  if (Current - v4 > 1.5) {
    -[VOTElementManager setCurrentSimilarTraits:]( self,  "setCurrentSimilarTraits:",  -[VOTElementManager filterTraitsByPriority:]( self,  "filterTraitsByPriority:",  -[VOTElement traits](self->_currentElement, "traits")));
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100064B18;
  v8[3] = &unk_100177FF0;
  void v8[4] = self;
  uint64_t v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockDifferent
{
  double Current = CFAbsoluteTimeGetCurrent();
  -[VOTElementManager lastSearchForElementsTime](self, "lastSearchForElementsTime");
  if (Current - v4 > 1.5) {
    -[VOTElementManager setCurrentSimilarTraits:]( self,  "setCurrentSimilarTraits:",  -[VOTElementManager filterTraitsByPriority:]( self,  "filterTraitsByPriority:",  -[VOTElement traits](self->_currentElement, "traits")));
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100064C18;
  v8[3] = &unk_100177FF0;
  void v8[4] = self;
  uint64_t v5 = objc_retainBlock(v8);
  id v6 = [v5 copy];

  return v6;
}

- (id)_copyMatchBlockTextField
{
  return [&stru_1001783C0 copy];
}

- (id)_copyMatchBlockRadioButton
{
  return [&stru_1001783E0 copy];
}

- (id)_copyMatchBlockCheckbox
{
  return [&stru_100178400 copy];
}

- (id)_copyMatchBlockSearchField
{
  return [&stru_100178420 copy];
}

- (id)_copyMatchBlockForRotorType:(int64_t)a3 searchType:(int64_t *)a4
{
  double v4 = 0LL;
  switch(a3)
  {
    case 8LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockHeader](self, "_copyMatchBlockHeader"));
      int64_t v7 = 1LL;
      goto LABEL_28;
    case 9LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockLink](self, "_copyMatchBlockLink"));
      int64_t v7 = 11LL;
      goto LABEL_28;
    case 10LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockFormElement](self, "_copyMatchBlockFormElement"));
      int64_t v7 = 13LL;
      goto LABEL_28;
    case 11LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockTableStart](self, "_copyMatchBlockTableStart"));
      int64_t v7 = 22LL;
      goto LABEL_28;
    case 12LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockFrameStart](self, "_copyMatchBlockFrameStart"));
      int64_t v7 = 27LL;
      goto LABEL_28;
    case 13LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockListStart](self, "_copyMatchBlockListStart"));
      int64_t v7 = 23LL;
      goto LABEL_28;
    case 14LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockVisitedLink](self, "_copyMatchBlockVisitedLink"));
      int64_t v7 = 14LL;
      goto LABEL_28;
    case 15LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockNonVisitedLink](self, "_copyMatchBlockNonVisitedLink"));
      int64_t v7 = 15LL;
      goto LABEL_28;
    case 16LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockImage](self, "_copyMatchBlockImage"));
      int64_t v7 = 10LL;
      goto LABEL_28;
    case 17LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockStaticText](self, "_copyMatchBlockStaticText"));
      int64_t v7 = 16LL;
      goto LABEL_28;
    case 26LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockLandmarkStart](self, "_copyMatchBlockLandmarkStart"));
      int64_t v7 = 24LL;
      goto LABEL_28;
    case 27LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockArticleStart](self, "_copyMatchBlockArticleStart"));
      int64_t v7 = 12LL;
      goto LABEL_28;
    case 28LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockButton](self, "_copyMatchBlockButton"));
      int64_t v7 = 21LL;
      goto LABEL_28;
    case 29LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockTextField](self, "_copyMatchBlockTextField"));
      int64_t v7 = 17LL;
      goto LABEL_28;
    case 33LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSearchField](self, "_copyMatchBlockSearchField"));
      int64_t v7 = 18LL;
      goto LABEL_28;
    case 34LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockRadioButton](self, "_copyMatchBlockRadioButton"));
      int64_t v7 = 19LL;
      goto LABEL_28;
    case 35LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockCheckbox](self, "_copyMatchBlockCheckbox"));
      int64_t v7 = 20LL;
      goto LABEL_28;
    case 37LL:
      uint64_t v6 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSimilar](self, "_copyMatchBlockSimilar"));
      goto LABEL_4;
    case 38LL:
      uint64_t v6 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockAnyElement](self, "_copyMatchBlockAnyElement"));
      goto LABEL_4;
    case 39LL:
    case 40LL:
    case 41LL:
    case 42LL:
    case 43LL:
    case 44LL:
      uint64_t v6 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _copyMatchBlockForHeadingLevel:searchType:]( self,  "_copyMatchBlockForHeadingLevel:searchType:"));
      goto LABEL_4;
    case 45LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSameHeading](self, "_copyMatchBlockSameHeading"));
      int64_t v7 = 26LL;
      goto LABEL_28;
    case 46LL:
      uint64_t v6 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockDifferent](self, "_copyMatchBlockDifferent"));
      goto LABEL_4;
    case 62LL:
    case 63LL:
    case 64LL:
    case 65LL:
    case 66LL:
    case 67LL:
    case 68LL:
    case 69LL:
      uint64_t v6 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _copyMatchBlockForTextAttribute:searchType:]( self,  "_copyMatchBlockForTextAttribute:searchType:"));
LABEL_4:
      double v4 = (void *)v6;
      break;
    case 70LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockBlockquote](self, "_copyMatchBlockBlockquote"));
      int64_t v7 = 25LL;
      goto LABEL_28;
    case 71LL:
      double v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockSameBlockquote](self, "_copyMatchBlockSameBlockquote"));
      int64_t v7 = 28LL;
LABEL_28:
      *a4 = v7;
      break;
    default:
      break;
  }

  id v8 = objc_retainBlock(v4);

  return v8;
}

- (void)_customPublicRotorMatchForType:(id)a3 range:(_NSRange *)a4 element:(id *)a5 direction:(int64_t)a6 lastSearchUUID:(id *)a7
{
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*a5 customPublicRotorForSystemType:a3]);
  id v13 = v12;
  if (!v12) {
    goto LABEL_4;
  }
  if (a7)
  {
    if ([v12 isEqual:*a7])
    {
LABEL_4:
      *a4 = (_NSRange)xmmword_100132600;
      *a5 = 0LL;
      goto LABEL_15;
    }

    *a7 = v13;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:]( &OBJC_CLASS___VOTElement,  "customPublicRotorDictionaryForRotorId:startRange:direction:",  v13,  a4->location,  a4->length,  a6));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*a5 customPublicRotorResultWithItem:v14 startElement:*a5]);
  id v16 = v15;
  if (v15)
  {
    if (self->_inUnitTestingMode)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"targetElement"]);
    }

    else
    {
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"targetElement"]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v18));
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v19));
    }

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", @"targetRange", 0x7FFFFFFFLL, 0));

    if (v20)
    {
      uint64_t v21 = (const __AXValue *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"targetRange"]);
      AXValueGetValue(v21, kAXValueTypeCFRange, &v23);
    }

    *a4 = v23;
    id v22 = v17;
    *a5 = v22;
  }

  else
  {
    *a4 = (_NSRange)xmmword_100132600;
    *a5 = 0LL;
  }

LABEL_15:
}

- (id)_copyRangeMatchBlockForRotorType:(int64_t)a3
{
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTRotor systemRotorTypeForRotorType:](&OBJC_CLASS___VOTRotor, "systemRotorTypeForRotorType:", a3));
  uint64_t v5 = v4;
  if (v4)
  {
    id v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472LL;
    unsigned int v11 = sub_100065230;
    uint64_t v12 = &unk_100178448;
    id v13 = self;
    id v14 = v4;
    uint64_t v6 = objc_retainBlock(&v9);
    id v7 = objc_msgSend(v6, "copy", v9, v10, v11, v12, v13);
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

- (void)_handleElementSearch:(id)a3 rotorType:(int64_t)a4 direction:(int64_t)a5
{
  uint64_t v15 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _copyMatchBlockForRotorType:searchType:]( self,  "_copyMatchBlockForRotorType:searchType:",  a4,  &v15));
  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyRangeMatchBlockForRotorType:](self, "_copyRangeMatchBlockForRotorType:", a4));
    self->_flags.performedSearch = 1;
    fetchManager = self->_fetchManager;
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    uint64_t v12 = v15;
    unint64_t elementSearchGeneration = self->_elementSearchGeneration;
    LOBYTE(v14) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
    -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  a5,  v11,  v8,  v9,  v12,  elementSearchGeneration,  self->_highlightedCharacterRange.location,  self->_highlightedCharacterRange.length,  v14);

    -[VOTElementManager setLastSearchForElementsTime:]( self,  "setLastSearchForElementsTime:",  CFAbsoluteTimeGetCurrent());
  }
}

- (void)_handleSearchRotorMovement:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v8 = a4;
  if (self->_flags.shouldUpdateRotorForElement) {
    -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
  }
  -[VOTElementManager _handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:event:]( self,  "_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:event:",  v4,  v8);
  -[VOTElementManager setLastElementChangeAction:](self, "setLastElementChangeAction:", 1LL);
  if ([(id)VOTSharedWorkspace tvInteractionMode] != (id)2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v7 = [v6 voiceOverUseTVToggleStyleNavigation];

    if (v7)
    {
      -[SCRCTargetSelectorTimer cancel](self->_tvRotorInteractionTimer, "cancel");
      -[VOTElementManager setTvIsInteractingWithRotor:](self, "setTvIsInteractingWithRotor:", 1LL);
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_tvRotorInteractionTimer, "dispatchAfterDelay:", 3.0);
    }
  }
}

- (void)_handleColumnMovement:(id)a3
{
  id v15 = a3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v15 command]);
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandNextColumn];

  if (-[VOTElement containedIn:](self->_currentElement, "containedIn:", 2LL)
    && ((uint64_t v6 = (char *)-[VOTElement columnRange](self->_currentElement, "columnRange"),
         uint64_t v8 = v7,
         int64_t v9 = -[VOTElement columnCount](self->_currentElement, "columnCount"),
         !v5)
      ? (uint64_t v10 = -1LL)
      : (uint64_t v10 = v8),
        (unsigned int v11 = &v6[v10], (uint64_t)&v6[v10] >= 0)
     && (uint64_t)v11 < v9
     && (uint64_t v12 = objc_claimAutoreleasedReturnValue( -[VOTElement elementAtRow:andColumn:]( self->_currentElement,  "elementAtRow:andColumn:",  -[VOTElement rowRange](self->_currentElement, "rowRange"),  v11))) != 0))
  {
    id v13 = (void *)v12;
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v12, v15);
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v13 sendEvent:v14];
  }
}

- (void)_handleDirectElementSearch:(id)a3
{
  id v4 = a3;
  if (qword_1001ACEE0 != -1) {
    dispatch_once(&qword_1001ACEE0, &stru_100178468);
  }
  unsigned int v5 = (void *)qword_1001ACED8;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  uint64_t v7 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);

  if (v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    ((void (**)(void, uint64_t *, uint64_t *))v7)[2](v7, &v9, &v8);
    -[VOTElementManager _handleElementSearch:rotorType:direction:]( self,  "_handleElementSearch:rotorType:direction:",  v4,  v9,  v8);
  }
}

- (void)_handleSearchRotorMovementWithoutRotorUpdateInDirectionUp:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v14 = a4;
  id lastSeenApplicationOrientation = (id)self->_lastSeenApplicationOrientation;
  if (lastSeenApplicationOrientation != [(id)VOTSharedWorkspace applicationOrientation]) {
    -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
  }
  if (v4) {
    uint64_t v7 = 2LL;
  }
  else {
    uint64_t v7 = 1LL;
  }
  uint64_t v8 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
  switch(v8)
  {
    case 1LL:
      -[VOTElementManager _handleAdjustValue:reverse:](self, "_handleAdjustValue:reverse:", v14, v4 ^ 1);
      break;
    case 2LL:
      -[VOTElementManager _handleNextAutofill:reverse:](self, "_handleNextAutofill:reverse:", v14, v4);
      break;
    case 3LL:
      -[VOTElementManager _handleLetterMovement:direction:](self, "_handleLetterMovement:direction:", v14, v7);
      break;
    case 4LL:
      -[VOTElementManager _handleWordMovement:direction:](self, "_handleWordMovement:direction:", v14, v7);
      break;
    case 5LL:
      -[VOTElementManager _handleGenericTextSegmentMovement:direction:granulary:]( self,  "_handleGenericTextSegmentMovement:direction:granulary:",  v14,  v7,  3LL);
      break;
    case 6LL:
      -[VOTElementManager _handleRotorTextSelectionMovement:direction:]( self,  "_handleRotorTextSelectionMovement:direction:",  v14,  v7);
      break;
    case 7LL:
      -[VOTElementManager _handleVerticalMovement:direction:](self, "_handleVerticalMovement:direction:", v14, v7);
      break;
    case 8LL:
    case 9LL:
    case 10LL:
    case 11LL:
    case 12LL:
    case 13LL:
    case 14LL:
    case 15LL:
    case 16LL:
    case 17LL:
    case 26LL:
    case 27LL:
    case 28LL:
    case 29LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 37LL:
    case 38LL:
    case 45LL:
    case 46LL:
    case 62LL:
    case 70LL:
    case 71LL:
      -[VOTElementManager _handleElementSearch:rotorType:direction:]( self,  "_handleElementSearch:rotorType:direction:",  v14,  v8,  v7);
      break;
    case 18LL:
      -[VOTElementManager _handleNextTextOperationInDirection:withEvent:]( self,  "_handleNextTextOperationInDirection:withEvent:",  v7,  v14);
      break;
    case 19LL:
      if (v4) {
        uint64_t v9 = 4LL;
      }
      else {
        uint64_t v9 = 3LL;
      }
      -[VOTElementManager _handleZoomMovement:event:](self, "_handleZoomMovement:event:", v9, v14);
      break;
    case 20LL:
      -[VOTElementManager _handleRotorTypingModeMovement:withEvent:]( self,  "_handleRotorTypingModeMovement:withEvent:",  v7,  v14);
      break;
    case 21LL:
      -[VOTElementManager _handleRotorContinusPathChange:withEvent:]( self,  "_handleRotorContinusPathChange:withEvent:",  v7,  v14);
      break;
    case 22LL:
      -[VOTElementManager _handleRotorLanguageMovement:withEvent:]( self,  "_handleRotorLanguageMovement:withEvent:",  v7,  v14);
      break;
    case 23LL:
      -[VOTElementManager _handleRotorBrailleLanguageMovement:withEvent:]( self,  "_handleRotorBrailleLanguageMovement:withEvent:",  v7,  v14);
      break;
    case 24LL:
      -[VOTElementManager _handleRotorBrailleInputLanguageMovement:withEvent:]( self,  "_handleRotorBrailleInputLanguageMovement:withEvent:",  v7,  v14);
      break;
    case 25LL:
      -[VOTElementManager _handleRotorBrailleAutoAdvanceMovement:withEvent:]( self,  "_handleRotorBrailleAutoAdvanceMovement:withEvent:",  v7,  v14);
      break;
    case 30LL:
      -[VOTElementManager _handleRowMovement:direction:](self, "_handleRowMovement:direction:", v14, v7);
      break;
    case 31LL:
      -[VOTElementManager _handleContainerMovement:direction:](self, "_handleContainerMovement:direction:", v14, v7);
      break;
    case 32LL:
      -[VOTElementManager _handleWebSearchResult:withEvent:](self, "_handleWebSearchResult:withEvent:", v7, v14);
      break;
    case 36LL:
      -[VOTElementManager _handleDirectTouchExplorationMode:direction:]( self,  "_handleDirectTouchExplorationMode:direction:",  v14,  v7);
      break;
    case 47LL:
      -[VOTElementManager _handlePublicCustomRotorMovement:direction:]( self,  "_handlePublicCustomRotorMovement:direction:",  v14,  v7);
      break;
    case 48LL:
      -[VOTElementManager _handleCustomRotorAction:direction:](self, "_handleCustomRotorAction:direction:", v14, v7);
      break;
    case 49LL:
    case 50LL:
    case 51LL:
    case 52LL:
      -[VOTElementManager _handleMathGranularMovement:event:](self, "_handleMathGranularMovement:event:", v7, v14);
      break;
    case 53LL:
      -[VOTElementManager _handleHintsSettingMode:direction:](self, "_handleHintsSettingMode:direction:", v14, v7);
      break;
    case 56LL:
      -[VOTElementManager _handleTrackingDetailMovement:event:](self, "_handleTrackingDetailMovement:event:", v4, v14);
      break;
    case 57LL:
      -[VOTElementManager _handleDescribedMediaMode:direction:](self, "_handleDescribedMediaMode:direction:", v14, v7);
      break;
    case 59LL:
      -[VOTElementManager _handleAudiographAction:event:](self, "_handleAudiographAction:event:", v7, v14);
      break;
    case 60LL:
      -[VOTElementManager _handleImageDescriptionsToggle:](self, "_handleImageDescriptionsToggle:", v7);
      break;
    case 72LL:
      if (v4) {
        -[VOTElementManager _handleIncreaseVolume:](self, "_handleIncreaseVolume:", v14);
      }
      else {
        -[VOTElementManager _handleDecreaseVolume:](self, "_handleDecreaseVolume:", v14);
      }
      break;
    case 73LL:
      -[VOTElementManager _handleSpeechRateChange:](self, "_handleSpeechRateChange:", v4);
      break;
    case 77LL:
      -[VOTElementManager _handleSpeechPunctuationChange:](self, "_handleSpeechPunctuationChange:", v4);
      break;
    case 78LL:
      -[VOTElementManager _handleSoundRotorChange:](self, "_handleSoundRotorChange:", v4);
      break;
    case 79LL:
      int v11 = AXRuntimeCheck_SupportsVoiceoverIndepedentVolume();
      uint64_t v12 = v4 ^ 1;
      if (v11) {
        -[VOTElementManager _handleAudioDuckingModeChange:](self, "_handleAudioDuckingModeChange:", v12);
      }
      else {
        -[VOTElementManager _handleAudioDuckingChange:](self, "_handleAudioDuckingChange:", v12);
      }
      break;
    case 80LL:
      if (AXRuntimeCheck_SupportsVoiceoverIndepedentVolume()) {
        -[VOTElementManager _handleAudioDuckingAmountChange:]( self,  "_handleAudioDuckingAmountChange:",  v4 ^ 1);
      }
      break;
    case 81LL:
      -[VOTElementManager _handleAudioDestination:](self, "_handleAudioDestination:", v4 ^ 1);
      break;
    case 82LL:
      -[VOTElementManager _handleNavigationDirectionChangeWithDirection:]( self,  "_handleNavigationDirectionChangeWithDirection:",  v7);
      break;
    case 83LL:
      -[VOTElementManager _handleActivityRotorChange:](self, "_handleActivityRotorChange:", v4 ^ 1);
      break;
    case 84LL:
      -[VOTElementManager _handleCustomRotorContent:direction:](self, "_handleCustomRotorContent:direction:", v14, v7);
      break;
    case 85LL:
      if (v4) {
        uint64_t v10 = 0LL;
      }
      else {
        uint64_t v10 = 2LL;
      }
      -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", v10);
      break;
    case 86LL:
      -[VOTElementManager _handleGuideElementMovement:direction:]( self,  "_handleGuideElementMovement:direction:",  v14,  v7);
      break;
    case 87LL:
      -[VOTElementManager __tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference]( self,  "__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference");
      break;
    case 88LL:
      -[VOTElementManager __tvOS_toggleSilenceAnnouncementsUserPreference]( self,  "__tvOS_toggleSilenceAnnouncementsUserPreference");
      break;
    case 89LL:
      -[VOTElementManager __tvOS_toggleExploreFocusAffectsNativeFocusPreference]( self,  "__tvOS_toggleExploreFocusAffectsNativeFocusPreference");
      break;
    case 90LL:
      -[VOTElementManager _handleToggleLiveRegions:](self, "_handleToggleLiveRegions:", v7);
      break;
    default:
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v8));
      _AXLogWithFacility(1LL, 0LL, 1LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0.0, 1, @"Unhandled search rotor movement:%@ ");

      break;
  }

  if (sub_1000D2A48(v8)) {
    self->_flags.performedRotorTextNavigation = 1;
  }
  self->_lastPressOnMediaSessionElement = -3061152000.0;
}

- (void)_handleSingleLetterSearch:(id)a3
{
  id v15 = a3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v15 keyInfo]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 singleLetterCommandForKeyInfo:v5]);

  if (!v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v8 sendEvent:v13];
LABEL_8:

    goto LABEL_9;
  }

  if (qword_1001ACEF0 != -1) {
    dispatch_once(&qword_1001ACEF0, &stru_100178A28);
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1001ACEE8 objectForKey:v6]);
  uint64_t v8 = v7;
  if (!v7)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v13 sendEvent:v14];

    goto LABEL_8;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:0]);
  uint64_t v10 = (int)[v9 intValue];

  int v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
  uint64_t v12 = (int)[v11 intValue];

  -[VOTElementManager _handleElementSearch:rotorType:direction:]( self,  "_handleElementSearch:rotorType:direction:",  v15,  v12,  v10);
LABEL_9:
}

- (void)handleSearchRotorUp:(id)a3
{
}

- (void)handleSearchRotorDown:(id)a3
{
}

- (void)_resetReadAllRequest
{
  readAllOutputRequest = self->_readAllOutputRequest;
  self->_readAllOutputRequest = 0LL;
}

- (void)_resetSearchType
{
  *(_WORD *)&self->_flags.performedSearch = 0;
  *(_WORD *)&self->_flags.performedFlickNavigation = 0;
}

- (void)_resetOtherTapInputModes
{
  *(_WORD *)&self->_flags.tapShouldHandleAutofill = 0;
  -[_VOTTextMarkerRange setEndMarker:](self->_textMarkerRange, "setEndMarker:", 0LL);
  -[_VOTTextMarkerRange setStartMarker:](self->_textMarkerRange, "setStartMarker:", 0LL);
  autofillCurrentElement = self->_autofillCurrentElement;
  self->_autofillCurrentElement = 0LL;

  textMarker = self->_textMarker;
  self->_textMarker = 0LL;
}

- (void)_resetRotorTextNavigation
{
  self->_flags.performedRotorTextNavigation = 0;
}

- (id)_languageNameForCode:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXLanguageManager sharedInstance](&OBJC_CLASS___AXLanguageManager, "sharedInstance"));
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dialectForLanguageID:v3]);

    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 languageNameAndLocaleInNativeLocale]);
LABEL_16:

      goto LABEL_17;
    }

    if (!qword_1001ACEF8)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithPath:]( &OBJC_CLASS___NSBundle,  "bundleWithPath:",  @"/System/Library/PreferenceBundles/AccessibilitySettings.bundle"));
      uint64_t v8 = (void *)qword_1001ACEF8;
      qword_1001ACEF8 = v7;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](&OBJC_CLASS___NSLocale, "localeWithLocaleIdentifier:", v3));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 localizedStringForLanguage:v3 context:3]);

    if (v6) {
      goto LABEL_8;
    }
    id v10 = [v3 rangeOfString:@"-"];
    if (v10 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      int v11 = (void *)objc_claimAutoreleasedReturnValue([v3 substringToIndex:v10]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  v11));
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v12 localizedStringForLanguage:v11 context:3]);

      if (v6)
      {
LABEL_8:
        if (([v6 isEqualToString:v3] & 1) == 0
          && ([v3 isEqualToString:@"en-ZA"] & 1) == 0
          && ![v3 isEqualToString:@"en-IE"])
        {
          goto LABEL_16;
        }
      }
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue( [(id)qword_1001ACEF8 localizedStringForKey:v3 value:0 table:@"RegionNamesNonLocalized"]);

    uint64_t v6 = (void *)v13;
    goto LABEL_16;
  }

  uint64_t v6 = 0LL;
LABEL_17:

  return v6;
}

- (void)_handleRotorLanguageMovement:(int64_t)a3 withEvent:(id)a4
{
  int64_t v4 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", a3, a4));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace languageRotorItems]);
  if (![v7 count])
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    v63[0] = @"RotorItem";
    v63[1] = @"Default";
    v64[0] = v19;
    v64[1] = &__kCFBooleanTrue;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v64,  v63,  2LL));
    uint64_t v65 = v20;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v65, 1LL));

    id v22 = self;
    _NSRange v23 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
    uint64_t v24 = AXLanguageConvertToCanonicalForm(v23);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

    if (v25 && ([v25 isEqualToString:v19] & 1) == 0)
    {
      v61[0] = @"RotorItem";
      v61[1] = @"Default";
      v62[0] = v25;
      v62[1] = &__kCFBooleanFalse;
      uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v62,  v61,  2LL));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v21 arrayByAddingObject:v26]);

      uint64_t v21 = (void *)v26;
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    self = v22;

    if (v6) {
      goto LABEL_3;
    }
LABEL_21:
    __int128 v18 = 0LL;
    goto LABEL_22;
  }

  if (!v6) {
    goto LABEL_21;
  }
LABEL_3:
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  id v8 = v7;
  uint64_t v9 = (char *)[v8 countByEnumeratingWithState:&v56 objects:v60 count:16];
  if (v9)
  {
    id v10 = v9;
    int64_t v51 = v4;
    id v52 = v7;
    id v54 = self;
    int v11 = 0LL;
    uint64_t v12 = *(void *)v57;
    while (2)
    {
      uint64_t v13 = 0LL;
      id v53 = &v10[(void)v11];
      do
      {
        if (*(void *)v57 != v12) {
          objc_enumerationMutation(v8);
        }
        id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v56 + 1) + 8 * (void)v13) objectForKey:@"RotorItem"]);
        uint64_t v15 = AXLanguageConvertToCanonicalForm(v14);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        unsigned __int8 v17 = [v16 isEqualToString:v6];

        if ((v17 & 1) != 0)
        {
          __int128 v18 = &v13[(void)v11];
          goto LABEL_13;
        }

        ++v13;
      }

      while (v10 != v13);
      id v10 = (char *)[v8 countByEnumeratingWithState:&v56 objects:v60 count:16];
      int v11 = v53;
      if (v10) {
        continue;
      }
      break;
    }

    __int128 v18 = 0LL;
LABEL_13:
    int64_t v4 = v51;
    uint64_t v7 = v52;
    self = v54;
  }

  else
  {
    __int128 v18 = 0LL;
  }

LABEL_22:
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "objectAtIndex:",  -[VOTElementManager _adjustedRotorIndex:inDirection:rotorItems:validationBlock:]( self,  "_adjustedRotorIndex:inDirection:rotorItems:validationBlock:",  v18,  v4,  v7,  &stru_100178A68)));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:@"Default"]);
  unsigned int v29 = [v28 BOOLValue];

  uint64_t v30 = objc_claimAutoreleasedReturnValue([v27 objectForKey:@"RotorItem"]);
  uint64_t v31 = (void *)v30;
  if ((v29 & 1) != 0)
  {
    [(id)VOTSharedWorkspace setSelectedLanguage:0];
  }

  else
  {
    uint64_t v32 = AXLanguageConvertToCanonicalForm(v30);
    id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    [(id)VOTSharedWorkspace setSelectedLanguage:v33];
  }

  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
  uint64_t v35 = AXLanguageConvertToCanonicalForm(v34);
  float v36 = (void *)objc_claimAutoreleasedReturnValue(v35);

  if (v36 && -[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXWebContentTrait))
  {
    id v37 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement webAreaURL](self->_currentElement, "webAreaURL"));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 absoluteString]);

    if (v38)
    {
      uint64_t v55 = self;
      if (v31 && ([v36 isEqualToString:v31] & 1) == 0)
      {
        uint64_t v39 = v7;
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace websiteLanguageMappingOverrides]);
        [v40 setObject:v31 forKey:v38];
      }

      else
      {
        uint64_t v39 = v7;
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace websiteLanguageMappingOverrides]);
        [v40 removeObjectForKey:v38];
      }

      id v41 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace websiteLanguageMappingOverrides]);
      [v41 setPreference:v42 forKey:@"WebsiteLanguageMappingOverride"];

      uint64_t v7 = v39;
      self = v55;
    }
  }

  id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v43 postNotificationName:off_1001ABF00 object:0];

  if (v29)
  {
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _languageNameForCode:](self, "_languageNameForCode:", v44));
    id v46 = sub_10004A988(off_1001AC148, @"default.language.format", 0LL);
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
    double v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v47, v45));
  }

  else
  {
    double v48 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _languageNameForCode:](self, "_languageNameForCode:", v31));
  }

  double v49 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v49 speakSimpleString:v48];

  id v50 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v50 resetSpeechRate];
}

- (void)_handleRotorBrailleLanguageMovement:(int64_t)a3 withEvent:(id)a4
{
  unsigned __int8 v12 = 0;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager", a3, a4));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 adjustBrailleLanguageRotorInDirection:a3 isDefault:&v12]);

  uint64_t v7 = VOTLogBraille();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedBrailleTable]);
    *(_DWORD *)buf = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Did set braille table. %@ (settings: %@)",  buf,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v10 announceBrailleTable:v6 isDefault:v12];

  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v11 postNotificationName:off_1001ABF00 object:0];
}

- (void)_handleRotorBrailleInputLanguageMovement:(int64_t)a3 withEvent:(id)a4
{
  unsigned __int8 v12 = 0;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager", a3, a4));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 adjustBrailleInputLanguageRotorInDirection:a3 isDefault:&v12]);

  uint64_t v7 = VOTLogBraille();
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedBrailleInputTable]);
    *(_DWORD *)buf = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Did set braille input table. %@ (settings: %@)",  buf,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v10 announceBrailleTable:v6 isDefault:v12];

  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v11 postNotificationName:off_1001ABF00 object:0];
}

- (void)_handleRotorBrailleAutoAdvanceMovement:(int64_t)a3 withEvent:(id)a4
{
  if (a3 == 1) {
    -[VOTElementManager _handleBrailleIncreaseAutoAdvanceSpeed:](self, "_handleBrailleIncreaseAutoAdvanceSpeed:", a4);
  }
  else {
    -[VOTElementManager _handleBrailleDecreaseAutoAdvanceSpeed:](self, "_handleBrailleDecreaseAutoAdvanceSpeed:", a4);
  }
}

- (void)_forceVisionRefresh
{
  if (+[VOTVisionEngine shouldAnalyzeElement:]( &OBJC_CLASS___VOTVisionEngine,  "shouldAnalyzeElement:",  self->_currentElement))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 visionEngine]);

    int64_t v4 = objc_opt_new(&OBJC_CLASS___VOTVisionOptions);
    -[VOTVisionOptions setIncludeFullImageDescriptionsForValidElements:]( v4,  "setIncludeFullImageDescriptionsForValidElements:",  -[VOTElementManager determineFullImageDescriptionsEnabled:]( self,  "determineFullImageDescriptionsEnabled:",  self->_currentElement));
    -[VOTVisionOptions setIncludeSceneDetection:]( v4,  "setIncludeSceneDetection:",  -[VOTElementManager determineSceneDetectionsEnabled:]( self,  "determineSceneDetectionsEnabled:",  self->_currentElement));
    [v5 analyzeElement:self->_currentElement withOptions:v4];
  }

- (int64_t)_adjustedRotorIndex:(int64_t)a3 inDirection:(int64_t)a4 rotorItems:(id)a5 validationBlock:(id)a6
{
  id v9 = a5;
  id v10 = (uint64_t (**)(id, void *))a6;
  if ([v9 count])
  {
    if (a4 == 2) {
      uint64_t v11 = -1LL;
    }
    else {
      uint64_t v11 = 1LL;
    }
    int64_t v12 = a3;
    do
    {
      uint64_t v13 = v12 + v11;
      id v14 = [v9 count];
      else {
        int64_t v15 = v13;
      }
      if (v13 >= 0) {
        int64_t v12 = v15;
      }
      else {
        int64_t v12 = (int64_t)v14 - 1;
      }
      if (v12 == a3 || v10 == 0LL) {
        break;
      }
      unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:v12]);
      int v18 = v10[2](v10, v17);
    }

    while (!v18);
  }

  else
  {
    int64_t v12 = a3;
  }

  return v12;
}

- (void)_handleRotorTypingModeMovement:(int64_t)a3 withEvent:(id)a4
{
  id v6 = objc_msgSend((id)VOTSharedWorkspace, "typingMode", a3, a4);
  BOOL v7 = a3 != 1;
  uint64_t v8 = 1LL;
  if (a3 != 1) {
    uint64_t v8 = 2LL;
  }
  if (v6 != (id)2) {
    BOOL v7 = v8;
  }
  if (v6 == (id)1) {
    uint64_t v9 = 2LL * (a3 == 1);
  }
  else {
    uint64_t v9 = v7;
  }
  [(id)VOTSharedWorkspace setTypingMode:v9];
  id v11 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _localizedTypingModeStringForCurrentMode]( self,  "_localizedTypingModeStringForCurrentMode"));
  if (v11)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v10 speakSimpleString:v11];
  }
}

- (id)_localizedTypingModeStringForCurrentMode
{
  id v2 = [(id)VOTSharedWorkspace typingMode];
  if ((unint64_t)v2 > 2)
  {
    int64_t v4 = 0LL;
  }

  else
  {
    id v3 = sub_10004A988(off_1001AC148, *(&off_100179238 + (void)v2), 0LL);
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  return v4;
}

- (id)_fontDisplayNameForFontName:(id)a3
{
  id v3 = (const __CTFont *)objc_claimAutoreleasedReturnValue(+[UIFont fontWithName:size:](&OBJC_CLASS___UIFont, "fontWithName:size:", a3, 10.0));
  int64_t v4 = (__CFString *)CTFontCopyDisplayName(v3);
  if (-[__CFString hasPrefix:](v4, "hasPrefix:", @"."))
  {
    id v5 = sub_10004A988(off_1001AC148, @"system.font.name", 0LL);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);

    int64_t v4 = (__CFString *)v6;
  }

  return v4;
}

- (id)_orderedMonitoredFontAttributes
{
  if (qword_1001ACF08 != -1) {
    dispatch_once(&qword_1001ACF08, &stru_100178A88);
  }
  return (id)qword_1001ACF00;
}

- (id)_computeChangedFontAttributes:(id)a3 storedAttributes:(id)a4 haveMisspellCheck:(BOOL)a5
{
  BOOL v152 = a5;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString string](&OBJC_CLASS___NSString, "string"));
  v154 = self;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _orderedMonitoredFontAttributes](self, "_orderedMonitoredFontAttributes"));
  id v11 = [v8 count];
  if (v8 && !v11)
  {
    v169[0] = UIAccessibilityTokenListItemLabel;
    v169[1] = AXUIAccessibilityTextAttributeHeadingLevel;
    v169[2] = AXUIAccessibilityTextAttributeCustom;
    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v169, 3LL));

    id v10 = (void *)v12;
  }

  firstResponderElement = v154->_firstResponderElement;
  if (firstResponderElement) {
    unsigned int v162 = -[VOTElement shouldAnnounceFontInfo](firstResponderElement, "shouldAnnounceFontInfo");
  }
  else {
    unsigned int v162 = 1;
  }
  __int128 v166 = 0u;
  __int128 v167 = 0u;
  __int128 v164 = 0u;
  __int128 v165 = 0u;
  id obj = v10;
  id v158 = [obj countByEnumeratingWithState:&v164 objects:v168 count:16];
  if (v158)
  {
    int v163 = 0;
    uint64_t v156 = AXUIAccessibilityTextAttributeHeadingLevel;
    uint64_t v157 = *(void *)v165;
    uint64_t v155 = AXUIAccessibilityTextAttributeCustom;
    unsigned int v14 = v162;
    char v159 = 0;
    int v160 = v162 ^ 1;
    id v161 = v7;
    do
    {
      int64_t v15 = 0LL;
      do
      {
        if (*(void *)v165 != v157) {
          objc_enumerationMutation(obj);
        }
        id v16 = *(void **)(*((void *)&v164 + 1) + 8LL * (void)v15);
        unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v16, v135));
        uint64_t v18 = objc_claimAutoreleasedReturnValue([v8 objectForKey:v16]);
        uint64_t v19 = (void *)v18;
        if (v17) {
          BOOL v20 = 1;
        }
        else {
          BOOL v20 = v18 == 0;
        }
        if (!v20
          || (v17 ? (BOOL v21 = v18 == 0) : (BOOL v21 = 0),
              v21 || v17 && ([v17 isEqual:v18] & 1) == 0))
        {
          if ([v16 isEqualToString:UIAccessibilityTokenMisspelled])
          {
            if ([v17 BOOLValue] && v152)
            {
              id v23 = sub_10004A988(off_1001AC148, @"misspelled", 0LL);
              id v136 = (void *)objc_claimAutoreleasedReturnValue(v23);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v24 = __AXStringForVariables(v9);
              uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);

              uint64_t v9 = (void *)v25;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenStyleName, v136, v151))
          {
            uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSString, v26);
            if ((objc_opt_isKindOfClass(v17, v27) & 1) != 0)
            {
              id v28 = v17;
              if ([v28 length])
              {
                id v137 = v28;
                v151 = @"__AXStringForVariablesSentinel";
                uint64_t v29 = __AXStringForVariables(v9);
                uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);

                uint64_t v9 = (void *)v30;
              }
            }
          }

          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenFontFamily, v137) & v14) == 1)
          {
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _fontDisplayNameForFontName:](v154, "_fontDisplayNameForFontName:", v17));
            if ([v31 length])
            {
              double v138 = v31;
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v32 = __AXStringForVariables(v9);
              uint64_t v33 = objc_claimAutoreleasedReturnValue(v32);

              uint64_t v9 = (void *)v33;
            }

            int v163 = 1;
          }

          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenLineSpacing, v138) & v14) == 1)
          {
            id v34 = objc_allocWithZone(&OBJC_CLASS___NSString);
            id v35 = sub_10004A988(off_1001AC148, @"line.spacing", 0LL);
            float v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
            id v37 = objc_msgSend(v34, "initWithFormat:", v36, v17);

            id v139 = v37;
            v151 = @"__AXStringForVariablesSentinel";
            uint64_t v38 = __AXStringForVariables(v9);
            uint64_t v39 = objc_claimAutoreleasedReturnValue(v38);

            uint64_t v9 = (void *)v39;
          }

          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenFontSize, v139) & v14) == 1)
          {
            id v40 = objc_allocWithZone(&OBJC_CLASS___NSString);
            id v41 = sub_10004A988(off_1001AC148, @"font.size.format", 0LL);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
            [v17 floatValue];
            uint64_t v44 = AXFormatFloat(0LL, v43);
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            id v46 = objc_msgSend(v40, "initWithFormat:", v42, v45);

            id v140 = v46;
            v151 = @"__AXStringForVariablesSentinel";
            uint64_t v47 = __AXStringForVariables(v9);
            uint64_t v48 = objc_claimAutoreleasedReturnValue(v47);

            uint64_t v9 = (void *)v48;
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenForegroundColor, v140))
          {
            v141 = v17;
            v151 = @"__AXStringForVariablesSentinel";
            uint64_t v49 = __AXStringForVariables(v9);
            uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);

            uint64_t v9 = (void *)v50;
          }

          if ((objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenBold, v141) & 1) != 0
            || !(v159 & 1 | (([v16 isEqualToString:UIAccessibilityTokenFontName] & 1) == 0)))
          {
            if ([v16 isEqualToString:UIAccessibilityTokenBold])
            {
              unsigned __int8 v51 = [v17 BOOLValue];
              unsigned int v52 = [v19 BOOLValue];
            }

            else
            {
              unsigned __int8 v51 = [v17 isEqualToString:@"Helvetica Neue Medium"];
              unsigned int v52 = [v19 isEqualToString:@"Helvetica Neue Medium"];
            }

            id v53 = @"bold";
            if ((v51 & 1) != 0 || (id v53 = @"bold.not", v52))
            {
              id v54 = sub_10004A988(off_1001AC148, v53, 0LL);
              __int128 v142 = (void *)objc_claimAutoreleasedReturnValue(v54);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v55 = __AXStringForVariables(v9);
              uint64_t v56 = objc_claimAutoreleasedReturnValue(v55);

              uint64_t v9 = (void *)v56;
            }

            if (((v163 | v160) & 1) != 0)
            {
              char v159 = 1;
            }

            else
            {
              __int128 v57 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:UIAccessibilityTokenFontFamily]);
              __int128 v58 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _fontDisplayNameForFontName:]( v154,  "_fontDisplayNameForFontName:",  v57));

              if ([v58 length])
              {
                __int128 v142 = v58;
                v151 = @"__AXStringForVariablesSentinel";
                uint64_t v59 = __AXStringForVariables(v9);
                uint64_t v60 = objc_claimAutoreleasedReturnValue(v59);

                uint64_t v9 = (void *)v60;
              }

              char v159 = 1;
              int v163 = 1;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenHighlightedText, v142))
          {
            if (v17)
            {
              uint64_t v62 = objc_opt_class(&OBJC_CLASS___NSString, v61);
              if ((objc_opt_isKindOfClass(v17, v62) & 1) != 0 && [v17 length])
              {
                uint64_t v143 = (uint64_t)v17;
                v151 = @"__AXStringForVariablesSentinel";
                uint64_t v63 = __AXStringForVariables(v9);
                uint64_t v64 = objc_claimAutoreleasedReturnValue(v63);
                goto LABEL_65;
              }

              uint64_t v65 = off_1001AC148;
              uint64_t v66 = @"highlighted";
            }

            else
            {
              uint64_t v65 = off_1001AC148;
              uint64_t v66 = @"unhighlighted";
            }

            id v67 = sub_10004A988(v65, v66, 0LL);
            uint64_t v143 = objc_claimAutoreleasedReturnValue(v67);
            v151 = @"__AXStringForVariablesSentinel";
            uint64_t v68 = __AXStringForVariables(v9);
            uint64_t v64 = objc_claimAutoreleasedReturnValue(v68);

            uint64_t v9 = (void *)v143;
LABEL_65:

            uint64_t v9 = (void *)v64;
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenItalic, v143))
          {
            unsigned __int8 v69 = [v17 BOOLValue];
            __int128 v70 = @"italic";
            if ((v69 & 1) != 0 || (unsigned int v71 = [v19 BOOLValue], v70 = @"italic.not", v71))
            {
              id v72 = sub_10004A988(off_1001AC148, v70, 0LL);
              __int128 v144 = (void *)objc_claimAutoreleasedReturnValue(v72);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v73 = __AXStringForVariables(v9);
              uint64_t v74 = objc_claimAutoreleasedReturnValue(v73);

              uint64_t v9 = (void *)v74;
            }

            if (((v163 | v160) & 1) == 0)
            {
              __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:UIAccessibilityTokenFontFamily]);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v75 = __AXStringForVariables(v9);
              uint64_t v76 = objc_claimAutoreleasedReturnValue(v75);

              int v163 = 1;
              uint64_t v9 = (void *)v76;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenUnderline, v144))
          {
            unsigned __int8 v77 = [v17 BOOLValue];
            id v78 = @"underline";
            if ((v77 & 1) != 0
              || (unsigned int v79 = [v19 BOOLValue], v78 = @"underline.not", v79))
            {
              id v80 = sub_10004A988(off_1001AC148, v78, 0LL);
              __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(v80);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v81 = __AXStringForVariables(v9);
              uint64_t v82 = objc_claimAutoreleasedReturnValue(v81);

              uint64_t v9 = (void *)v82;
            }
          }

          if (objc_msgSend(v16, "isEqualToString:", UIAccessibilityTokenStrikethrough, v145))
          {
            unsigned __int8 v83 = [v17 BOOLValue];
            id v84 = @"strikethrough";
            if ((v83 & 1) != 0
              || (v85 = [v19 BOOLValue], id v84 = @"strikethrough.not", v85))
            {
              id v86 = sub_10004A988(off_1001AC148, v84, 0LL);
              v146 = (void *)objc_claimAutoreleasedReturnValue(v86);
              v151 = @"__AXStringForVariablesSentinel";
              uint64_t v87 = __AXStringForVariables(v9);
              uint64_t v88 = objc_claimAutoreleasedReturnValue(v87);

              uint64_t v9 = (void *)v88;
            }
          }

          uint64_t v90 = objc_opt_class(&OBJC_CLASS___NSNumber, v89);
          if ((objc_opt_isKindOfClass(v17, v90) & 1) != 0)
          {
            uint64_t v91 = (uint64_t)[v17 integerValue];
            if (v91 >= 1)
            {
              if (!v19 || [v19 integerValue] != (id)v91)
              {
                id v92 = sub_10004A988(off_1001AC148, @"element.header.text", 0LL);
                __int128 v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
                uint64_t v94 = AXFormatInteger(v91);
                uint64_t v95 = objc_claimAutoreleasedReturnValue(v94);
                CGPoint v147 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v93, v95));
                v151 = @"__AXStringForVariablesSentinel";
                uint64_t v96 = __AXStringForVariables(v9);
                uint64_t v97 = objc_claimAutoreleasedReturnValue(v96);

                uint64_t v9 = (void *)v95;
                id v7 = v161;
                goto LABEL_92;
              }

              goto LABEL_93;
            }
          }

          else
          {
            uint64_t v91 = 0LL;
          }

          if (!v91 && v17 && (!v19 || [v19 integerValue]))
          {
            id v98 = sub_10004A988(off_1001AC148, @"element.header.text.nolevel", 0LL);
            __int128 v93 = (void *)objc_claimAutoreleasedReturnValue(v98);
            CGPoint v147 = v93;
            v151 = @"__AXStringForVariablesSentinel";
            uint64_t v99 = __AXStringForVariables(v9);
            uint64_t v97 = objc_claimAutoreleasedReturnValue(v99);
LABEL_92:

            uint64_t v9 = (void *)v97;
          }

- (void)_handleReadURL:(id)a3
{
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  id v11 = (id)objc_claimAutoreleasedReturnValue([v4 url]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v11 absoluteString]);
  id v6 = [v5 length];

  if (v6)
  {
    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v11 absoluteString]);
    id v9 = [v7 addString:v8];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v7 sendEvent:v10];
  }
}

- (void)_handleReadItemHint:(id)a3
{
  id v8 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement hint](self->_currentElement, "hint", a3));
  if ([v8 length])
  {
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement hint](self->_currentElement, "hint"));
    id v5 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
    id v7 = [v5 addString:v4 withLanguage:v6];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v5);
  }

  else
  {
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v4 sendEvent:v5];
  }
}

- (void)_handleOutputLineCount:(id)a3
{
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXTextEntryTrait))
  {
    id v14 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_currentElement, "value"));
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](&OBJC_CLASS___NSCharacterSet, "newlineCharacterSet"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v14 componentsSeparatedByCharactersInSet:v4]);
    id v6 = [v5 count];

    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v8 = off_1001AC148;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v10 = sub_10004A988(v8, @"line.count", v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v11,  v6));
    id v13 = [v7 addString:v12];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
  }

  else
  {
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v14 sendEvent:v7];
  }
}

- (void)_handleReadLine:(id)a3
{
  id v16 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  if ([v16 doesHaveTraits:kAXIsEditingTrait])
  {
    id location = [v16 selectedTextRange];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v16 value]);
  }

  else
  {
    if (self->_elementUnitOutputRange.location == 0x7FFFFFFF) {
      id location = 0LL;
    }
    else {
      id location = (id)self->_elementUnitOutputRange.location;
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v16 visibleText]);
  }

  id v6 = v5;
  id v7 = (char *)objc_msgSend(v5, "ax_lineRangeForPosition:", location);
  else {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "substringWithRange:", v9, v10));
  }
  if ([v11 length])
  {
    id v12 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v16 language]);
    id v14 = [v12 addString:v11 withLanguage:v13];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v12);
  }

  else
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    int64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v12 sendEvent:v15];
  }
}

- (id)_phoneticStringForLetter:(id)a3 language:(id)a4
{
  elementManagerThread = self->_elementManagerThread;
  id v7 = a4;
  id v8 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  9587LL,  "-[VOTElementManager _phoneticStringForLetter:language:]",  @"must be on element manager or system event thread");
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_firstResponderElement, "application"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 currentSoftwareKeyboardLanguage]);
  id v11 = sub_10004B920(v8, v7, v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

- (void)_handleReadWord:(id)a3
{
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  if ([v4 doesHaveTraits:kAXIsEditingTrait])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 value]);
    id v6 = objc_msgSend(v5, "wordFromPosition:inDirection:", objc_msgSend(v4, "selectedTextRange"), 1);
    if (v6 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
LABEL_10:
      id v13 = 0LL;
      goto LABEL_12;
    }

    NSUInteger location = (NSUInteger)v6;
    id v9 = v7;
    unint64_t v10 = (unint64_t)v7 + (void)v6;
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v4 visibleText]);
    id v5 = v11;
    NSUInteger location = self->_elementUnitOutputRange.location;
    NSUInteger length = self->_elementUnitOutputRange.length;
    if (length) {
      id v9 = (id)(length + 1);
    }
    else {
      id v9 = [v11 length];
    }
    if (location == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_10;
    }
    unint64_t v10 = (unint64_t)v9 + location;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringWithRange:", location, v9));
LABEL_12:

  if ([v13 length])
  {
    uint64_t v30 = v4;
    uint64_t v14 = (uint64_t)[v13 length];
    int64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
    id v16 = v15;
    int64_t v17 = self->_readWordCyclingCount % 3;
    if (v17)
    {
      if (v14 >= 1)
      {
        for (uint64_t i = 0LL; i != v14; ++i)
        {
          id v19 = [v13 characterAtIndex:i];
          unsigned __int16 v31 = (unsigned __int16)v19;
          if ((_DWORD)v19 == 32)
          {
            BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
            id v21 = sub_10004B314(32LL, @"UnicodeHex.", @"VOTOutputPunctuation", v20);
            id v22 = (__CFString *)objc_claimAutoreleasedReturnValue(v21);

            if (!v22) {
              id v22 = @" ";
            }
            [v16 appendString:v22];
          }

          else if (v17 == 2)
          {
            id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithCharacters:length:]( &OBJC_CLASS___NSString,  "stringWithCharacters:length:",  &v31,  1LL));
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _phoneticStringForLetter:language:]( self,  "_phoneticStringForLetter:language:",  v23,  0LL));

            if (v24) {
              [v16 appendFormat:@"%@", v24];
            }
            else {
              objc_msgSend(v16, "appendFormat:", @"%C", v31);
            }
          }

          else if (v17 == 1)
          {
            objc_msgSend(v16, "appendFormat:", @"%C", v19);
          }

          if (v14 - 1 != i) {
            objc_msgSend(v16, "appendString:", @", ");
          }
        }
      }
    }

    else
    {
      [v15 setString:v13];
    }

    id v27 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    int64_t v4 = v30;
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v30 language]);
    id v29 = [v27 addString:v16 withLanguage:v28];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v27);
    ++self->_readWordCyclingCount;
  }

  else
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v25 sendEvent:v26];
  }
}

- (void)_handleCursorMovementByTextSegment:(id)a3
{
  id v8 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v8 command]);
  else {
    uint64_t v5 = 2LL;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForIndex:118]);
  id v7 = [v6 integerValue];

  if (v7 == (id)2)
  {
    -[VOTElementManager _handleWordMovement:direction:](self, "_handleWordMovement:direction:", v8, v5);
  }

  else if (v7 == (id)3)
  {
    -[VOTElementManager _handleGenericTextSegmentMovement:direction:granulary:]( self,  "_handleGenericTextSegmentMovement:direction:granulary:",  v8,  v5,  3LL);
  }

  else
  {
    -[VOTElementManager _handleLetterMovement:direction:](self, "_handleLetterMovement:direction:", v8, v5);
  }
}

- (void)_moveCursorForElement:(id)a3 direction:(int64_t)a4 unit:(int64_t)a5
{
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 textInputElement]);
  unint64_t v10 = v9;
  if (v9)
  {
    id v11 = v9;

    id v8 = v11;
  }

  _NSRange v75 = (_NSRange)xmmword_100132600;
  else {
    uint64_t v12 = qword_100132AE0[a5 - 2];
  }
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]);
  BOOL v14 = a4 == 1;
  BOOL v15 = a4 == 1;
  uint64_t v16 = !v14;
  id v17 = [v8 selectedTextRange];
  id v19 = objc_msgSend(v13, "nextCursorRangeInDirection:unit:outputRange:currentCursorRange:", v16, v12, &v75, v17, v18);
  NSUInteger v21 = v20;

  id v22 = -[VOTElementManager _characterRangeWithFaultTolerance:forward:element:]( self,  "_characterRangeWithFaultTolerance:forward:element:",  v19,  v15,  v8);
  if (v22 == (id)0x7FFFFFFF) {
    NSUInteger v23 = (NSUInteger)v19;
  }
  else {
    NSUInteger v23 = (NSUInteger)v22;
  }
  if (v22 == (id)0x7FFFFFFF) {
    NSUInteger v24 = v21;
  }
  else {
    NSUInteger v24 = 0LL;
  }
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  unsigned __int8 v26 = [v25 ignoreLogging];

  if ((v26 & 1) == 0)
  {
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v28 = AXLoggerForFacility(v27);
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);

    os_log_type_t v30 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v73 = v10;
      uint64_t v31 = AXColorizeFormatLog(2LL, @"Got next cursor range: %@");
      uint64_t v32 = objc_claimAutoreleasedReturnValue(v31);
      v78.NSUInteger length = v24;
      uint64_t v33 = (void *)v32;
      v78.NSUInteger location = v23;
      NSUInteger length = v78.length;
      id v35 = NSStringFromRange(v78);
      id v72 = (void *)objc_claimAutoreleasedReturnValue(v35);
      uint64_t v36 = _AXStringForArgs(v33);
      id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);

      if (os_log_type_enabled(v29, v30))
      {
        *(_DWORD *)buf = 138543362;
        unsigned __int8 v77 = v37;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}@", buf, 0xCu);
      }

      NSUInteger v24 = length;
      unint64_t v10 = v73;
    }
  }

  if (a5 == 2) {
    -[NSMutableDictionary removeObjectForKey:]( self->_lastSeenFontProperties,  "removeObjectForKey:",  UIAccessibilityTokenMisspelled);
  }
  if (a5 == 1 || v75.location == 0x7FFFFFFF)
  {
    double width = CGRectZero.size.width;
    double height = CGRectZero.size.height;
    double x = CGRectZero.origin.x;
    double y = CGRectZero.origin.y;
    self->_highlightedCharacterRange = (_NSRange)xmmword_100132600;
    double v48 = CGRectZero.origin.x;
    double v50 = y;
    double v52 = width;
  }

  else
  {
    [v8 boundsForRange:v75];
    double x = v38;
    double y = v40;
    double width = v42;
    double v45 = v44;
    id v46 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v46, "convertRect:fromContextId:", objc_msgSend(v8, "windowContextId"), x, y, width, v45);
    double v48 = v47;
    double v50 = v49;
    double v52 = v51;
    double height = v53;

    self->_highlightedCharacterRange = v75;
  }

  if (v23 == 0x7FFFFFFF)
  {
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v55 sendEvent:v56];
  }

  else
  {
    __int128 v57 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
    unsigned __int8 v58 = [v57 ignoreLogging];

    if ((v58 & 1) == 0)
    {
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
      uint64_t v60 = AXLoggerForFacility(v59);
      uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);

      os_log_type_t v62 = AXOSLogLevelFromAXLogLevel(2LL);
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v74 = v10;
        uint64_t v63 = AXColorizeFormatLog(2LL, @"VO set cursor range: %@");
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
        v79.NSUInteger location = v23;
        NSUInteger v65 = v24;
        v79.NSUInteger length = v24;
        uint64_t v66 = NSStringFromRange(v79);
        id v72 = (void *)objc_claimAutoreleasedReturnValue(v66);
        uint64_t v67 = _AXStringForArgs(v64);
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);

        if (os_log_type_enabled(v61, v62))
        {
          *(_DWORD *)buf = 138543362;
          unsigned __int8 v77 = v68;
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "%{public}@", buf, 0xCu);
        }

        NSUInteger v24 = v65;
        unint64_t v10 = v74;
      }
    }

    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:]( self,  "_setSelectedTextRange:onElement:refreshBraille:isVoiceOverSelectionMovement:",  v23,  v24,  v8,  1LL,  1LL,  v72);
    unsigned __int8 v69 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    __int128 v70 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent InsertionPointDidMove](&OBJC_CLASS___VOSOutputEvent, "InsertionPointDidMove"));
    [v69 sendEvent:v70];

    v81.origin.double x = CGRectZero.origin.x;
    v81.origin.double y = CGRectZero.origin.y;
    v81.size.double width = CGRectZero.size.width;
    v81.size.double height = CGRectZero.size.height;
    v80.origin.double x = v48;
    v80.origin.double y = v50;
    v80.size.double width = v52;
    v80.size.double height = height;
    if (!CGRectEqualToRect(v80, v81))
    {
      unsigned int v71 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      objc_msgSend(v71, "setCursorFrame:", v48, v50, v52, height);

      self->_textRangeBeingDisplayed = 1;
      objc_msgSend(v8, "scrollRectToVisible:withCompletion:", 0, x, y, width, 10.0);
    }

    self->_cursorBorderHitCount = 0LL;
  }
}

- (void)_handleCharacterMovement:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  -[VOTElementManager _handleLetterMovement:direction:](self, "_handleLetterMovement:direction:", v6, v5);
}

- (void)_handleWordMovement:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  -[VOTElementManager _handleWordMovement:direction:](self, "_handleWordMovement:direction:", v6, v5);
}

- (void)_handleLetterMovement:(id)a3 direction:(int64_t)a4
{
  id obj = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  if (![obj isReadingContent])
  {
    if ([obj doesHaveTraits:kAXKeyboardKeyTrait]
      && ([obj doesHaveTraits:kAXAutoCorrectCandidateTrait] & 1) == 0)
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement firstResponderElement](self->_lastApplication, "firstResponderElement"));
    }

    else
    {
      id v6 = obj;
    }

    id v7 = v6;
    if (v6)
    {
      -[VOTElementManager _moveCursorForElement:direction:unit:]( self,  "_moveCursorForElement:direction:unit:",  v6,  a4,  1LL);

      goto LABEL_13;
    }

- (void)_handleWordMovement:(id)a3 direction:(int64_t)a4
{
  id obj = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  unsigned int v6 = [obj doesHaveTraits:kAXKeyboardKeyTrait];
  if ([obj isReadingContent])
  {
    -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:]( self,  "_handleBookContentMovement:direction:unit:generateOutput:",  obj,  a4,  2LL,  1LL);
  }

  else if (([obj doesHaveTraits:kAXIsEditingTrait] | v6))
  {
    if (v6)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue(-[VOTElement firstResponderElement](self->_lastApplication, "firstResponderElement"));

      id v8 = (id)v7;
    }

    else
    {
      id v8 = obj;
    }

    id obj = v8;
    -[VOTElementManager _moveCursorForElement:direction:unit:]( self,  "_moveCursorForElement:direction:unit:",  v8,  a4,  2LL);
  }

  else
  {
    -[VOTElementManager _outputNextTextSegmentUnit:direction:](self, "_outputNextTextSegmentUnit:direction:", 2LL, a4);
  }
}

- (void)_finishHandlingLineMovementInWeb:(id)a3 direction:(id)a4 withCurrentElement:(id)a5 markerArray:(id)a6 textObjects:(id)a7 existingRequest:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = [a4 integerValue];
  id v20 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));

  if (v20 == v15)
  {
    [v15 textMarkerFrame:v16];
    double v24 = v23;
    double v26 = v25;
    if (v21 >= 4.0) {
      double v27 = v21;
    }
    else {
      double v27 = 4.0;
    }
    if (v22 >= 4.0) {
      double v28 = v22;
    }
    else {
      double v28 = 4.0;
    }
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v29, "convertRect:fromContextId:", objc_msgSend(v15, "windowContextId"), v24, v26, v27, v28);
    self->_lineFrame.origin.double x = v30;
    self->_lineFrame.origin.double y = v31;
    self->_lineFrame.size.double width = v32;
    self->_lineFrame.size.double height = v33;

    id v34 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    objc_msgSend( v34,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);

    self->_textRangeBeingDisplayed = 1;
    uint64_t v36 = VOTLogElement(v35);
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      double v38 = NSStringFromCGRect(self->_lineFrame);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      int v40 = 138543618;
      id v41 = v39;
      __int16 v42 = 2114;
      id v43 = v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "got data %{public}@ == %{public}@",  (uint8_t *)&v40,  0x16u);
    }

    if (-[NSArray count](self->_lineArray, "count")) {
      -[VOTElementManager _handleLineMovementInWeb:direction:existingRequest:]( self,  "_handleLineMovementInWeb:direction:existingRequest:",  v14,  v19,  v18);
    }
  }
}

- (void)_handleLineMovementInWeb:(id)a3 direction:(int64_t)a4 existingRequest:(id)a5
{
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  p_lineArradouble y = &self->_lineArray;
  lineArradouble y = self->_lineArray;
  if (lineArray)
  {
    unint64_t lineArrayPosition = self->_lineArrayPosition;
    if (lineArrayPosition < -[NSArray count](lineArray, "count"))
    {
      if (a5) {
        uint64_t v12 = (VOTOutputRequest *)a5;
      }
      else {
        uint64_t v12 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
      }
      id v16 = v12;
      double v22 = (NSData *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_lineArray, "objectAtIndex:", self->_lineArrayPosition));
      uint64_t v27 = objc_opt_class(&OBJC_CLASS___VOTElement, v26);
      if ((objc_opt_isKindOfClass(v22, v27) & 1) == 0)
      {
        uint64_t v35 = objc_opt_class(&OBJC_CLASS___NSString, v28);
        uint64_t isKindOfClass = objc_opt_isKindOfClass(v22, v35);
        if ((isKindOfClass & 1) != 0)
        {
          id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceCharacterSet"));
          double v38 = (__CFString *)objc_claimAutoreleasedReturnValue(-[NSData stringByTrimmingCharactersInSet:](v22, "stringByTrimmingCharactersInSet:", v37));

          uint64_t v40 = VOTLogElement(v39);
          id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
            sub_1000F1914((uint64_t)v38);
          }

          if (!-[__CFString length](v38, "length"))
          {
            if (a4 == 1) {
              uint64_t v102 = 1LL;
            }
            else {
              uint64_t v102 = -1LL;
            }
            self->_lineArrayPosition += v102;
            -[VOTElementManager _handleLineMovementInWeb:direction:existingRequest:]( self,  "_handleLineMovementInWeb:direction:existingRequest:",  v7);

            goto LABEL_106;
          }

          __int16 v42 = v16;
          id v43 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
          objc_msgSend( v43,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);

          self->_textRangeBeingDisplayed = 1;
          double v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
          double v45 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString stringByTrimmingCharactersInSet:](v38, "stringByTrimmingCharactersInSet:", v44));
          id v46 = [v45 length];

          if (!v46)
          {

            double v38 = @"\n";
          }

          id v16 = v42;
          double v47 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest elementHeadersForOutput](v42, "elementHeadersForOutput"));

          if (v47) {
            -[VOTElement applyHeaderElementsToRequest:](self->_currentElement, "applyHeaderElementsToRequest:", v42);
          }
          id v48 = -[VOTOutputRequest addString:](v42, "addString:", v38);
          double v49 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](v42, "lastAction"));
          [v49 setPerformPunctuationTranslation:1];

          double v50 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](v42, "lastAction"));
          [v50 setReplaceCommas:1];
        }

        goto LABEL_69;
      }

      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v22,  v16,  1LL);
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v22);
      v125[0] = _NSConcreteStackBlock;
      v125[1] = 3221225472LL;
      v125[2] = sub_10006A350;
      v125[3] = &unk_100176DA8;
      v125[4] = self;
      id v29 = v22;
      uint64_t v126 = v29;
      -[NSData scrollToElementForDirectional:withCompletion:]( v29,  "scrollToElementForDirectional:withCompletion:",  1LL,  v125);
      CGFloat v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSData textMarkerRange](v29, "textMarkerRange"));
      CGFloat v31 = v30;
      CGFloat v32 = (_BYTE *)self->_lineArrayPosition;
      if (a4 == 1)
      {
        if (v32 != (char *)-[NSArray count](*p_lineArray, "count") - 1
          || (unint64_t)[v31 count] < 2)
        {
          goto LABEL_68;
        }

        CGFloat v33 = v31;
        uint64_t v34 = 1LL;
      }

      else
      {
        if (v32 || ![v30 count]) {
          goto LABEL_68;
        }
        CGFloat v33 = v31;
        uint64_t v34 = 0LL;
      }

      __int128 v70 = (NSData *)objc_claimAutoreleasedReturnValue([v33 objectAtIndex:v34]);
      textMarker = self->_textMarker;
      self->_textMarker = v70;

LABEL_68:
LABEL_69:
      uint64_t v72 = VOTLogElement(isKindOfClass);
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG)) {
        sub_1000F1884();
      }

      -[VOTElementManager sendRequest:](self, "sendRequest:", v16);
      int64_t v74 = a4;
      if (a4 != 1) {
        int64_t v74 = -1LL;
      }
      self->_lineArrayPosition += v74;
      goto LABEL_106;
    }

    id v13 = *p_lineArray;
  }

  else
  {
    id v13 = 0LL;
  }

  *p_lineArradouble y = 0LL;
  self->_unint64_t lineArrayPosition = 0LL;

  uint64_t v14 = kAXIsEditingTrait;
  NSUInteger location = (id *)&self->_lineArray;
  else {
    id v15 = (VOTOutputRequest *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", v8));
  }
  id v16 = v15;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v8 textMarkerRange]);
  id v18 = v17;
  id v114 = a5;
  id v115 = v7;
  uint64_t v111 = v14;
  if (self->_textMarker)
  {
    uint64_t v19 = VOTLogElement(v17);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_1000F1858();
    }

    p_textMarker = &self->_textMarker;
    double v22 = self->_textMarker;
    goto LABEL_40;
  }

  if (v16)
  {
    p_textMarker = &self->_textMarker;
    double v23 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest textMarkerRangeForSelection](v16, "textMarkerRangeForSelection"));
    double v24 = v23;
    if (a4 == 1) {
      uint64_t v25 = objc_claimAutoreleasedReturnValue([v23 lastObject]);
    }
    else {
      uint64_t v25 = objc_claimAutoreleasedReturnValue([v23 firstObject]);
    }
    double v22 = (NSData *)v25;
    uint64_t v52 = VOTLogElement(v25);
    double v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG)) {
      sub_1000F182C();
    }

LABEL_39:
LABEL_40:
    uint64_t v113 = v18;
    id v116 = v16;
    id v54 = [0 count];
    if (v54)
    {
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
      __int128 v57 = 0LL;
      goto LABEL_77;
    }

    unsigned __int8 v58 = 0LL;
    uint64_t v56 = 0LL;
    uint64_t v55 = 0LL;
    while (1)
    {
      uint64_t v59 = VOTLogElement(v54);
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138478083;
        id v128 = v8;
        __int16 v129 = 2113;
        uint64_t v130 = v22;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEBUG,  "start: %{private}@ -- %{private}@",  buf,  0x16u);
      }

      id v61 = v55;
      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

      if (a4 == 1)
      {
        uint64_t v62 = objc_claimAutoreleasedReturnValue([v8 textLineEndMarker:v22]);

        if (v62)
        {
          [v55 addObject:v22];
          uint64_t v63 = v55;
          uint64_t v64 = v62;
LABEL_50:
          [v63 addObject:v64];
          uint64_t v56 = (void *)v62;
          goto LABEL_52;
        }
      }

      else
      {
        uint64_t v62 = objc_claimAutoreleasedReturnValue([v8 textLineStartMarker:v22]);

        if (v62)
        {
          [v55 addObject:v62];
          uint64_t v63 = v55;
          uint64_t v64 = (uint64_t)v22;
          goto LABEL_50;
        }
      }

      uint64_t v56 = 0LL;
LABEL_52:
      if ([v55 count] != (id)2) {
        goto LABEL_76;
      }
      if ([v61 isEqual:v55])
      {

        uint64_t v55 = 0LL;
        goto LABEL_76;
      }

      __int128 v57 = (NSData *)objc_claimAutoreleasedReturnValue([v8 textMarkerArrayOfText:v55]);

      uint64_t v66 = VOTLogElement(v65);
      uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138478083;
        id v128 = v55;
        __int16 v129 = 2113;
        uint64_t v130 = v57;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "markers: %{private}@ got textObjs: %{private}@",  buf,  0x16u);
      }

      if (!v57)
      {
        unsigned __int8 v58 = 0LL;
LABEL_76:

        __int128 v57 = v58;
LABEL_77:
        if ([v55 count] == (id)2)
        {
          objc_storeStrong(location, v57);
          if (a4 == 1) {
            _NSRange v75 = 0LL;
          }
          else {
            _NSRange v75 = (char *)[*location count] - 1;
          }
          self->_unint64_t lineArrayPosition = (int64_t)v75;
          objc_storeStrong((id *)p_textMarker, v56);
          CGRect v81 = (void *)objc_claimAutoreleasedReturnValue([v55 objectAtIndex:0]);
          -[_VOTTextMarkerRange setStartMarker:](self->_textMarkerRange, "setStartMarker:", v81);

          uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v55 objectAtIndex:1]);
          -[_VOTTextMarkerRange setEndMarker:](self->_textMarkerRange, "setEndMarker:", v82);

          unsigned __int8 v83 = (void *)objc_claimAutoreleasedReturnValue(-[_VOTTextMarkerRange startMarker](self->_textMarkerRange, "startMarker"));
          id v84 = [v8 rangeForTextMarker:v83];

          unsigned int v85 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 textMarkerRange]);
          CGRect v80 = v85;
          if (v84 != (_BYTE *)0x7FFFFFFF)
          {
            id v86 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s firstObject](v85, "firstObject"));
            uint64_t v87 = [v8 rangeForTextMarker:v86];

            self->_elementUnitIndedouble x = v84 - v87;
          }

          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v8 elementForTextMarker:v56]);
          uint64_t v89 = VOTLogElement(v88);
          uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG)) {
            sub_1000F172C((uint64_t)v8);
          }

          if (!v88
            || ([v88 isEqual:v8] & 1) != 0
            || (uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v88 accessibleAncestor]),
                unsigned __int8 v92 = [v91 isEqual:v8],
                v91,
                (v92 & 1) != 0))
          {
            id v93 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
            -[VOTElementManager _finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:]( self,  "_finishHandlingLineMovementInWeb:direction:withCurrentElement:markerArray:textObjects:existingRequest:",  v115,  v93,  v8,  v55,  v57,  0LL);
          }

          else
          {
            -[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:",  v88,  0LL,  1LL,  1LL,  1LL);
            id v99 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
            -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v88,  v8,  v99);
            objc_storeStrong(location, v57);
            v118[0] = _NSConcreteStackBlock;
            v118[1] = 3221225472LL;
            v118[2] = sub_10006A384;
            v118[3] = &unk_100178AB0;
            v118[4] = self;
            id v119 = v115;
            int64_t v124 = a4;
            id v120 = v88;
            id v121 = v55;
            uint64_t v122 = v57;
            id v123 = v99;
            id v93 = v99;
            [v120 scrollToElementForDirectional:1 withCompletion:v118];
          }

          if (v116)
          {
            if ([v8 doesHaveTraits:v111])
            {
              if ((-[VOTOutputRequest isEqual:](v116, "isEqual:", v8) & 1) != 0)
              {
LABEL_97:
                if (a4 == 1) {
                  uint64_t v96 = objc_claimAutoreleasedReturnValue([v55 lastObject]);
                }
                else {
                  uint64_t v96 = objc_claimAutoreleasedReturnValue([v55 firstObject]);
                }
                uint64_t v97 = (void *)v96;
                -[VOTOutputRequest setSelectionToTextMarker:](v116, "setSelectionToTextMarker:", v96, v108, v109, v110);

                goto LABEL_101;
              }
            }

            else
            {
              uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", v8));
              unsigned __int8 v95 = -[VOTOutputRequest isEqual:](v116, "isEqual:", v94);

              if ((v95 & 1) != 0) {
                goto LABEL_97;
              }
            }

            id v109 = v8;
            id v110 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", v8));
            id v108 = v116;
            _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  10155LL,  "-[VOTElementManager _handleLineMovementInWeb:direction:existingRequest:]",  @"Can the editing element be different after navigation? old: %@, new: %@, current: %@");

            goto LABEL_97;
          }

- (void)_handleLineMovement:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager _handleGenericTextSegmentMovement:direction:granulary:]( self,  "_handleGenericTextSegmentMovement:direction:granulary:",  v6,  v5,  3LL);
}

- (void)_handleSentenceMovement:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager _handleGenericTextSegmentMovement:direction:granulary:]( self,  "_handleGenericTextSegmentMovement:direction:granulary:",  v6,  v5,  5LL);
}

- (void)_handleParagraphMovement:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager _handleGenericTextSegmentMovement:direction:granulary:]( self,  "_handleGenericTextSegmentMovement:direction:granulary:",  v6,  v5,  6LL);
}

- (void)_handleAdjustTextSelectionSegmentType:(id)a3
{
  id v6 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager _handleRotorTextSelectionMovement:direction:]( self,  "_handleRotorTextSelectionMovement:direction:",  v6,  v5);
}

- (void)_handleRotorTextSelectionMovement:(id)a3 direction:(int64_t)a4
{
  self->_inTextProcessingRotorMode = 1;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager textSelectionMovementManager](self, "textSelectionMovementManager", a3));
  id v7 = v6;
  if (a4 == 1) {
    [v6 nextSegment];
  }
  else {
    [v6 previousSegment];
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager textSelectionMovementManager](self, "textSelectionMovementManager"));
  id v11 = (id)objc_claimAutoreleasedReturnValue([v8 localizedSegmentNameForSelection]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v10 = sub_10000BBB0(v11, 0, v9);
}

- (void)_handleTextDocumentMovement:(id)a3
{
  id v11 = a3;
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v4 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v11 command]);
    unsigned __int8 v6 = [v5 isEqualToString:kVOTEventCommandDocumentTop];

    if ((v6 & 1) != 0)
    {
      id v7 = 0LL;
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 value]);
      id v7 = [v10 length];
    }

    objc_msgSend(v4, "setSelectedTextRange:refreshBraille:", v7, 0, 1);
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v8 sendEvent:v9];
  }
}

- (void)_handleTextWordMovement:(id)a3
{
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 command]);
  unsigned __int8 v5 = [v4 isEqualToString:kVOTEventCommandFirstWord];

  id v21 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v21 doesHaveAllTraits:kAXTextEntryTrait | kAXIsEditingTrait])
  {
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v21 value]);
    id v7 = v6;
    if ((v5 & 1) != 0)
    {
      id v8 = 0LL;
      uint64_t v9 = 1LL;
    }

    else
    {
      id v8 = [v6 length];
      uint64_t v9 = 2LL;
    }

    objc_msgSend( (id)VOTSharedWorkspace,  "setSuppressSelectionChangeNotificationCount:",  (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount") + 1);
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  v8,  0LL,  v21,  1LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent InsertionPointDidMove](&OBJC_CLASS___VOSOutputEvent, "InsertionPointDidMove"));
    [v11 sendEvent:v12];

    id v13 = (char *)[v7 wordFromPosition:v8 inDirection:v9];
    else {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "substringWithRange:", v15, v16));
    }
    if ([v10 length])
    {
      id v17 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v21 language]);
      id v19 = [v17 addString:v10 withLanguage:v18];

      -[VOTElementManager sendRequest:](self, "sendRequest:", v17);
    }

    else
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v17 sendEvent:v20];
    }
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v7 sendEvent:v10];
  }
}

- (void)_handleGenericTextSegmentMovement:(id)a3 direction:(int64_t)a4 granulary:(int64_t)a5
{
  id v10 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  if ([v8 doesHaveTraits:kAXWebContentTrait])
  {
    if (a5 == 3)
    {
      -[VOTElementManager _handleLineMovementInWeb:direction:existingRequest:]( self,  "_handleLineMovementInWeb:direction:existingRequest:",  v10,  a4,  0LL);
      goto LABEL_14;
    }
  }

  else if ([v8 isReadingContent])
  {
    -[VOTElementManager _handleBookContentMovement:direction:unit:generateOutput:]( self,  "_handleBookContentMovement:direction:unit:generateOutput:",  v8,  a4,  a5,  1LL);
    goto LABEL_14;
  }

  if ([v8 doesHaveTraits:kAXKeyboardKeyTrait])
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue(-[VOTElement firstResponderElement](self->_lastApplication, "firstResponderElement"));

    id v8 = (void *)v9;
  }

  if ([v8 doesHaveTraits:kAXTextEntryTrait]
    && [v8 doesHaveTraits:kAXIsEditingTrait])
  {
    -[VOTElementManager _moveCursorForElement:direction:unit:]( self,  "_moveCursorForElement:direction:unit:",  v8,  a4,  a5);
  }

  else
  {
    -[VOTElementManager _outputNextTextSegmentUnit:direction:](self, "_outputNextTextSegmentUnit:direction:", a5, a4);
  }

- (void)_handleRowMovement:(id)a3 direction:(int64_t)a4
{
  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  id v7 = (char *)[v6 rowRange];
  uint64_t v9 = v8;
  id v10 = [v6 columnRange];
  -[VOTElementManager setInTextSelection:](self, "setInTextSelection:", 0LL);
  id v11 = &v7[v9];
  if (a4 != 1) {
    id v11 = v7;
  }
  if (a4 == 2) {
    uint64_t v12 = v7 - 1;
  }
  else {
    uint64_t v12 = v11;
  }
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 elementAtRow:v12 andColumn:v10]);
  if ([v13 isEqual:v6] || !v13)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v16 sendEvent:v17];
  }

  else
  {
    id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v13,  v6,  v14);
    -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v13,  v14,  2097154LL);
    -[VOTElementManager sendRequest:](self, "sendRequest:", v14);
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v13);
    uint64_t v15 = sub_10004B908(a4);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10006AD30;
    v18[3] = &unk_100176DA8;
    v18[4] = self;
    id v19 = v13;
    [v19 scrollToElementForDirectional:v15 withCompletion:v18];
  }
}

- (id)_retrieveCurrentCharacterFromEditableElement
{
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXIsEditingTrait)
    && self->_elementSelectionRangeBufferInternal.location != 0x7FFFFFFF)
  {
    int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_currentElement, "value"));
    NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
    if (location >= (unint64_t)[v4 length])
    {
      id v3 = 0LL;
    }

    else
    {
      id v6 = +[TTSEmojiUtilities emojiRangeFromString:withSearchRange:]( TTSEmojiUtilities,  "emojiRangeFromString:withSearchRange:",  v4,  self->_elementSelectionRangeBufferInternal.location,  (char *)[v4 length] - self->_elementSelectionRangeBufferInternal.location);
      if (v6 != (id)self->_elementSelectionRangeBufferInternal.location) {
        id v6 = objc_msgSend(v4, "rangeOfComposedCharacterSequenceAtIndex:");
      }
      id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringWithRange:", v6, v7));
    }
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

- (void)_handleOutputCharacter:(id)a3
{
  id v6 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _retrieveCurrentCharacterFromEditableElement]( self,  "_retrieveCurrentCharacterFromEditableElement",  a3));
  if ([v6 length])
  {
    id v3 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    [v3 setGeneratesBraille:1];
    [v3 setBrailleType:2];
    id v4 = [v3 addString:v6];
    [v3 send];
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v3 sendEvent:v5];
  }
}

- (void)_handleOutputColumnOrRowContents:(id)a3 row:(BOOL)a4
{
  BOOL v4 = a4;
  id v19 = a3;
  if (-[VOTElement containedIn:](self->_currentElement, "containedIn:", 2LL))
  {
    id v6 = (char *)-[VOTElement columnRange](self->_currentElement, "columnRange");
    unint64_t v7 = -[VOTElement columnCount](self->_currentElement, "columnCount");
    uint64_t v8 = (char *)-[VOTElement rowRange](self->_currentElement, "rowRange");
    unint64_t v9 = -[VOTElement rowCount](self->_currentElement, "rowCount");
    id v10 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v20 = v6;
    id v11 = v8;
    if (v4)
    {
      uint64_t v8 = v6;
      uint64_t v12 = (char *)v7;
    }

    else
    {
      uint64_t v12 = (char *)v9;
    }

    if ((uint64_t)v8 >= (uint64_t)v12)
    {
      id v13 = 0LL;
    }

    else
    {
      id v13 = 0LL;
      if (v4) {
        uint64_t v14 = 402669568LL;
      }
      else {
        uint64_t v14 = 335560704LL;
      }
      do
      {
        if (v4)
        {
          uint64_t v15 = v11;
          uint64_t v16 = v8;
        }

        else
        {
          uint64_t v15 = v8;
          uint64_t v16 = v20;
        }

        id v17 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement elementAtRow:andColumn:]( self->_currentElement,  "elementAtRow:andColumn:",  v15,  v16));
        if (([v17 isEqual:v13] & 1) == 0)
        {
          [v17 addTextualInformationToRequest:v10 options:v14 dataPackage:0];
          id v18 = v17;

          id v13 = v18;
        }

        ++v8;
      }

      while (v12 != v8);
    }

    [v10 setGeneratesBraille:1];
    [v10 setBrailleType:2];
    [v10 send];
  }

  else
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v10 sendEvent:v13];
  }
}

- (void)_handleOutputCellRowColumnInfo:(id)a3
{
  if (-[VOTElement containedIn:](self->_currentElement, "containedIn:", 2LL))
  {
    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    currentElement = self->_currentElement;
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    -[VOTElement announceTableInfo:options:language:]( currentElement,  "announceTableInfo:options:language:",  v7,  0LL,  v5);

    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    [v7 send];
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v7 sendEvent:v6];
  }
}

- (void)_handleOutputTableRowColumnInfo:(id)a3
{
  if (-[VOTElement containedIn:](self->_currentElement, "containedIn:", 2LL))
  {
    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    currentElement = self->_currentElement;
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    -[VOTElement applyTableDimension:language:](currentElement, "applyTableDimension:language:", v7, v5);

    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    [v7 send];
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v7 sendEvent:v6];
  }
}

- (void)_handleOutputRowContents:(id)a3
{
}

- (void)_handleOutputColumnContents:(id)a3
{
}

- (void)_handleOutputColumnOrRowHeader:(id)a3 row:(BOOL)a4
{
  BOOL v4 = a4;
  if (-[VOTElement containedIn:](self->_currentElement, "containedIn:", 2LL))
  {
    currentElement = self->_currentElement;
    if (v4) {
      uint64_t v7 = objc_claimAutoreleasedReturnValue( -[VOTElement headerElementsForRow:]( currentElement,  "headerElementsForRow:",  -[VOTElement rowRange](currentElement, "rowRange")));
    }
    else {
      uint64_t v7 = objc_claimAutoreleasedReturnValue( -[VOTElement headerElementsForColumn:]( currentElement,  "headerElementsForColumn:",  -[VOTElement columnRange](currentElement, "columnRange")));
    }
    id v10 = (void *)v7;
    id v9 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v8 = v10;
    id v11 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend( *(id *)(*((void *)&v15 + 1) + 8 * (void)i),  "addTextualInformationToRequest:options:dataPackage:",  v9,  268451840,  0,  (void)v15);
        }

        id v12 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v12);
    }

    [v9 setGeneratesBraille:1];
    [v9 setBrailleType:2];
    [v9 send];
  }

  else
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v9 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v8 sendEvent:v9];
  }
}

- (void)_handleOutputColumnHeader:(id)a3
{
}

- (void)_handleOutputRowHeader:(id)a3
{
}

- (void)_handleOutputCharacterPhonetically:(id)a3
{
  id v9 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _retrieveCurrentCharacterFromEditableElement]( self,  "_retrieveCurrentCharacterFromEditableElement",  a3));
  if ([v9 length])
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _phoneticStringForLetter:language:]( self,  "_phoneticStringForLetter:language:",  v9,  v4));

    if (![v5 length])
    {
      id v6 = v9;

      unsigned __int8 v5 = v6;
    }

    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    [v7 setGeneratesBraille:1];
    [v7 setBrailleType:2];
    id v8 = [v7 addString:v5];
    [v7 send];
  }

  else
  {
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v5 sendEvent:v7];
  }
}

- (void)_outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4
{
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 textInputElement]);
  if (v8)
  {
    if (self->_elementUnitIndex == -1)
    {
      id v9 = [v7 textInputElementRange];
      if (v9 != (id)0x7FFFFFFF) {
        self->_elementUnitIndedouble x = (int64_t)v9;
      }
    }

    id v10 = v8;

    id v7 = v10;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 visibleText]);
  id v12 = [v11 mutableCopy];

  id v13 = -[VOTElementManager outputRangeForTextSegmentUnit:direction:string:element:]( self,  "outputRangeForTextSegmentUnit:direction:string:element:",  a3,  a4,  v12,  v7);
  uint64_t v15 = v14;
  if (v13 != (id)0x7FFFFFFF
    || !-[VOTElementManager _handleMovementForElementFollowingElement:direction:unit:mode:]( self,  "_handleMovementForElementFollowingElement:direction:unit:mode:",  v7,  a4,  a3,  3LL))
  {
    -[VOTElementManager updateIndexesForOutputRange:segment:direction:outputStringLength:]( self,  "updateIndexesForOutputRange:segment:direction:outputStringLength:",  v13,  v15,  a3,  a4,  [v12 length]);
    -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:]( self,  "outputTextSegmentForRange:string:element:usePhonetics:segment:",  v13,  v15,  v12,  v7,  a3 == 1,  a3);
    if (v7)
    {
      if (([v7 doesHaveTraits:kAXTextAreaTrait] & 1) != 0
        || [v7 doesHaveTraits:kAXWebContentTrait])
      {
        NSUInteger location = self->_elementUnitOutputRange.location;
        if (location != 0x7FFFFFFF)
        {
          NSUInteger v17 = self->_elementUnitOutputRange.length + 1;
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend(v7, "boundsForRange:", location, v17);
          objc_msgSend(v18, "convertRect:fromContextId:", objc_msgSend(v7, "windowContextId"), v19, v20, v21, v22);
          self->_lineFrame.origin.double x = v23;
          self->_lineFrame.origin.double y = v24;
          self->_lineFrame.size.double width = v25;
          self->_lineFrame.size.double height = v26;

          if (a3 != 1) {
            -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:]( self,  "_outputDataDetectorIfPresent:element:includeLinks:",  v7,  1LL,  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);
          }
          v49.origin.double x = CGRectZero.origin.x;
          v49.origin.double y = CGRectZero.origin.y;
          v49.size.double width = CGRectZero.size.width;
          v49.size.double height = CGRectZero.size.height;
          if (!CGRectEqualToRect(self->_lineFrame, v49))
          {
            v47[0] = _NSConcreteStackBlock;
            v47[1] = 3221225472LL;
            v47[2] = sub_10006B8D4;
            v47[3] = &unk_100176DA8;
            v47[4] = self;
            id v48 = v7;
            objc_msgSend( v48,  "scrollRectToVisible:withCompletion:",  v47,  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);
          }
        }
      }

      else
      {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
        unsigned int v28 = [v27 isEqualToString:@"VOTImageExplorerTextElement"];

        if (v28)
        {
          objc_msgSend(v7, "boundsForRange:", v13, v15);
          double v30 = v29;
          double v32 = v31;
          double v34 = v33;
          double v36 = v35;
          id v37 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend(v37, "convertRect:fromContextId:", objc_msgSend(v7, "windowContextId"), v30, v32, v34, v36);
          double v39 = v38;
          double v41 = v40;
          double v43 = v42;
          double v45 = v44;

          id v46 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
          objc_msgSend(v46, "setCursorFrame:", v39, v41, v43, v45);
        }

        else
        {
          id v46 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
          [v46 setCursorFrameForElement:v7];
        }
      }
    }
  }
}

- (void)_handleTextRotorSelectionAction:(BOOL)a3
{
  BOOL v4 = &kVOTEventCommandSelectLeft;
  if (a3) {
    BOOL v4 = &kVOTEventCommandSelectRight;
  }
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[VOTEvent internalEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "internalEventWithCommand:info:",  *v4,  0LL));
  -[VOTElementManager _handleUserSelection:](self, "_handleUserSelection:", v5);
}

- (void)_processMisspelledWordTextReplacement
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  id v19 = (id)objc_claimAutoreleasedReturnValue([v3 textReplacements]);

  misspelledWordReplacementCycleIndedouble x = self->_misspelledWordReplacementCycleIndex;
  BOOL v5 = misspelledWordReplacementCycleIndex >= (unint64_t)[v19 count];
  id v6 = v19;
  if (!v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v19 objectAtIndexedSubscript:self->_misspelledWordReplacementCycleIndex]);
    id v8 = self->_currentElement;
    if (-[VOTElement doesHaveTraits:](v8, "doesHaveTraits:", kAXKeyboardKeyTrait))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement textInputElement](v8, "textInputElement"));
      if (v9
        || (id v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v8, "application")),
            id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 firstResponderElement]),
            v10,
            v9))
      {
        id v11 = v9;

        id v8 = v11;
      }
    }

    if (-[VOTElement doesHaveTraits:](v8, "doesHaveTraits:", kAXWebContentTrait))
    {
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 stringByAppendingString:@" "]);

      id v7 = (void *)v12;
    }

    id v13 = -[VOTElement selectedTextRange](v8, "selectedTextRange");
    unsigned int v15 = -[VOTElement replaceTextInRange:withString:](v8, "replaceTextInRange:withString:", v13, v14, v7);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    if (v15) {
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
    }
    else {
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    }
    __int128 v18 = (void *)v17;
    [v16 sendEvent:v17];

    id v6 = v19;
  }

  self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
}

- (void)_handleMisspelledWordRotorAction:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  id v25 = (id)objc_claimAutoreleasedReturnValue([v5 textReplacements]);

  if (![v25 count])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v10 = off_1001AC148;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v12 = sub_10004AE68(v10, @"no.text.replacements", 0LL, v11);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    [v9 speakSimpleString:v13];

    id v14 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v15 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v14 sendEvent:v15];
    goto LABEL_19;
  }

  misspelledWordReplacementCycleIndedouble x = self->_misspelledWordReplacementCycleIndex;
  if (misspelledWordReplacementCycleIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    id v7 = v25;
    if (v3)
    {
      unint64_t v8 = 0LL;
      self->_misspelledWordReplacementCycleIndedouble x = 0LL;
      goto LABEL_11;
    }

    unint64_t v8 = (unint64_t)[v25 count] - 1;
  }

  else if (v3)
  {
    unint64_t v8 = misspelledWordReplacementCycleIndex + 1;
  }

  else
  {
    unint64_t v8 = misspelledWordReplacementCycleIndex - 1;
  }

  self->_misspelledWordReplacementCycleIndedouble x = v8;
  id v7 = v25;
  if ((v8 & 0x8000000000000000LL) != 0)
  {
    self->_misspelledWordReplacementCycleIndedouble x = (int64_t)[v25 count] - 1;
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidWrapBackwards](&OBJC_CLASS___VOSOutputEvent, "DidWrapBackwards"));
    goto LABEL_14;
  }

- (void)_handleStartStopTextSelection:(id)a3
{
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXTextEntryTrait))
  {
    if (self->_flags.inKeyboardTextSelectionMode)
    {
      id v4 = -[VOTElement selectedTextRange](self->_currentElement, "selectedTextRange");
      NSUInteger location = self->_keyboardTextSelectionStartRange.location;
      else {
        NSUInteger v7 = (NSUInteger)v4;
      }
      NSUInteger v8 = self->_keyboardTextSelectionStartRange.length + location;
      -[VOTElement setSelectedTextRange:refreshBraille:]( self->_currentElement,  "setSelectedTextRange:refreshBraille:",  v7,  v8 - v7,  1LL);
      BOOL v9 = 0;
    }

    else
    {
      self->_keyboardTextSelectionStartRange.NSUInteger location = (NSUInteger)-[VOTElement selectedTextRange]( self->_currentElement,  "selectedTextRange");
      self->_keyboardTextSelectionStartRange.NSUInteger length = v11;
      BOOL v9 = 1;
    }

    self->_flags.inKeyboardTextSelectionMode = v9;
  }

  else
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v12 sendEvent:v10];
  }

- (void)_updateCursorFrameAfterLift
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  10802LL,  "-[VOTElementManager _updateCursorFrameAfterLift]",  @"must be on element manager or system event thread");
  }

  if (!self->_textRangeBeingDisplayed)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v3 setCursorFrameForElement:self->_currentElement];
  }

- (void)updateCursorFrameAfterLift
{
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserWordSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a4.var1;
  int64_t var0 = a4.var0;
  unint64_t v9 = a4.var0 + a4.var1;
  if (self->_selectingRightward) {
    int64_t v10 = a4.var0 + a4.var1;
  }
  else {
    int64_t v10 = a4.var0;
  }
  if (a5) {
    uint64_t v11 = 1LL;
  }
  else {
    uint64_t v11 = 2LL;
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a3 value]);
  id v13 = (char *)[v12 wordFromPosition:v10 inDirection:v11];
  uint64_t v15 = v14;
  uint64_t v16 = VOTLogElement(v13);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    double v22 = v13 == (char *)0x7FFFFFFF
        ? @"<NOT FOUND>"
        : (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "substringWithRange:", v13, v15));
    int v23 = 134218499;
    CGFloat v24 = v13;
    __int16 v25 = 2048;
    uint64_t v26 = v15;
    __int16 v27 = 2113;
    unsigned int v28 = v22;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "word range: %lu, %lu (%{private}@)",  (uint8_t *)&v23,  0x20u);
  }

  if (v13 != (char *)0x7FFFFFFF)
  {
    if (self->_selectingRightward)
    {
      if (v5) {
        int64_t var1 = (int64_t)&v13[v15 - var0];
      }
      else {
        int64_t var1 = (unint64_t)&v13[-var0] & ~((uint64_t)&v13[-var0] >> 63);
      }
    }

    else
    {
      __int128 v18 = &v13[v15];
      uint64_t v19 = (v9 - (void)&v13[v15]) & ~((uint64_t)(v9 - (void)&v13[v15]) >> 63);
      if (v9 <= (unint64_t)v13)
      {
        __int128 v18 = v13;
        uint64_t v19 = 0LL;
      }

      if (v5) {
        int64_t var0 = (int64_t)v18;
      }
      else {
        int64_t var0 = (int64_t)v13;
      }
      if (v5) {
        int64_t var1 = v19;
      }
      else {
        int64_t var1 = v9 - (void)v13;
      }
    }
  }

  int64_t v20 = var0;
  int64_t v21 = var1;
  result.int64_t var1 = v21;
  result.int64_t var0 = v20;
  return result;
}

- (_NSRange)_lineRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5
{
  BOOL v6 = a4;
  unint64_t v8 = 0LL;
  uint64_t v9 = -1LL;
  do
  {
    if (v6) {
      uint64_t v10 = v8 + 1;
    }
    else {
      uint64_t v10 = v9;
    }
    id v11 = [a5 lineRangeForPosition:v10 + a3];
    if (v8 > 1) {
      break;
    }
    ++v8;
    --v9;
  }

  while (v11 == (id)0x7FFFFFFF);
  result.NSUInteger length = v12;
  result.NSUInteger location = (NSUInteger)v11;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserLineSelectionInElement:(id)a3 currentRange:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a4.var1;
  int64_t var0 = a4.var0;
  id v9 = a3;
  uint64_t v10 = (char *)(var0 + var1);
  if (self->_selectingRightward) {
    int64_t v11 = var0 + var1;
  }
  else {
    int64_t v11 = var0;
  }
  NSUInteger v12 = (char *)-[VOTElementManager _lineRangeWithFaultTolerance:forward:element:]( self,  "_lineRangeWithFaultTolerance:forward:element:",  v11,  v5,  v9);
  NSUInteger v14 = v13;
  uint64_t v15 = VOTLogElement(v12);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v27.NSUInteger location = (NSUInteger)v12;
    v27.NSUInteger length = v14;
    sub_1000F1988(v27, v16);
  }

  if (v12 != (char *)0x7FFFFFFF)
  {
    if (self->_selectingRightward)
    {
      if (v5)
      {
        if (v10 == &v12[v14])
        {
          uint64_t v17 = (char *)-[VOTElementManager _lineRangeWithFaultTolerance:forward:element:]( self,  "_lineRangeWithFaultTolerance:forward:element:",  var0 + var1,  1LL,  v9);
          if (v17 != (char *)0x7FFFFFFF)
          {
            NSUInteger v12 = v17;
            NSUInteger v14 = v18;
          }
        }

        int64_t var1 = (int64_t)&v12[v14 - var0];
      }

      else
      {
        if (v12 == v10)
        {
          if (!v10
            || (NSUInteger v12 = (char *)-[VOTElementManager _lineRangeWithFaultTolerance:forward:element:]( self,  "_lineRangeWithFaultTolerance:forward:element:",  var0 + var1,  0LL,  v9),  v12 == (char *)0x7FFFFFFF))
          {
            NSUInteger v12 = (char *)(var0 + var1);
          }
        }

        else {
          int64_t var1 = (int64_t)&v12[-var0];
        }
      }

      goto LABEL_44;
    }

    if (v5)
    {
      uint64_t v19 = &v12[v14];
      if (&v12[v14] == (char *)var0)
      {
        int64_t v20 = (char *)-[VOTElementManager _lineRangeWithFaultTolerance:forward:element:]( self,  "_lineRangeWithFaultTolerance:forward:element:",  var0 + 1,  1LL,  v9);
        else {
          double v22 = v20;
        }
        else {
          NSUInteger v23 = v21;
        }
        uint64_t v19 = &v22[v23];
      }

      if (v10 >= v19) {
        int64_t var0 = (int64_t)v19;
      }
      else {
        var0 += var1;
      }
      if (v10 >= v19) {
        int64_t var1 = v10 - v19;
      }
      else {
        int64_t var1 = 0LL;
      }
      goto LABEL_44;
    }

    if (var0 < 1)
    {
      int64_t v24 = var0;
    }

    else
    {
      NSUInteger v12 = (char *)-[VOTElementManager _lineRangeWithFaultTolerance:forward:element:]( self,  "_lineRangeWithFaultTolerance:forward:element:",  var0,  0LL,  v9);
      int64_t v24 = var0;
      if (v12 != (char *)0x7FFFFFFF)
      {
LABEL_37:
        if (var0 > (unint64_t)v12)
        {
          int64_t var1 = v10 - v12;
          int64_t var0 = (int64_t)v12;
          goto LABEL_44;
        }

        int64_t v24 = (int64_t)v12;
      }
    }

    if (var0 > 0)
    {
      int64_t var0 = v24;
      int64_t var1 = 0LL;
    }
  }

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserPageSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = (char *)a3.var1;
  int64_t var0 = a3.var0;
  id v9 = a4;
  uint64_t v10 = v9;
  if (self->_selectingRightward)
  {
    if (v5)
    {
      if (&var1[var0] < [v9 length]) {
        int64_t var1 = (char *)[v10 length] - var0;
      }
    }

    else
    {
      int64_t var1 = 0LL;
    }
  }

  else
  {
    if (var0 <= 0) {
      int64_t v11 = var1;
    }
    else {
      int64_t v11 = (char *)var0;
    }
    if (v5) {
      int64_t var0 = (int64_t)var1;
    }
    else {
      var0 &= var0 >> 63;
    }
    if (v5) {
      int64_t var1 = 0LL;
    }
    else {
      int64_t var1 = v11;
    }
  }

  int64_t v12 = var0;
  int64_t v13 = (int64_t)var1;
  result.int64_t var1 = v13;
  result.int64_t var0 = v12;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserAllSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  id var1 = (id)a3.var1;
  int64_t var0 = a3.var0;
  id v8 = a4;
  id v9 = v8;
  if (v5)
  {
    id var1 = [v8 length];
    int64_t var0 = 0LL;
  }

  else if (!var0 && var1 == [v8 length])
  {
    id var1 = 0LL;
    int64_t var0 = 0LL;
  }

  int64_t v10 = var0;
  int64_t v11 = (int64_t)var1;
  result.id var1 = v11;
  result.int64_t var0 = v10;
  return result;
}

- (_NSRange)_characterRangeWithFaultTolerance:(int64_t)a3 forward:(BOOL)a4 element:(id)a5
{
  BOOL v6 = a4;
  unint64_t v8 = 0LL;
  unint64_t v9 = 0LL;
  do
  {
    if (v6) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = v8;
    }
    id v11 = [a5 characterRangeForPosition:v10 + a3];
    int v13 = (unint64_t)v11 <= a3 || v6;
    else {
      uint64_t v14 = 0x7FFFFFFFLL;
    }
    if (v13) {
      uint64_t v15 = (uint64_t)v11;
    }
    else {
      uint64_t v15 = 0x7FFFFFFFLL;
    }
    if (v6) {
      NSUInteger v16 = v14;
    }
    else {
      NSUInteger v16 = v15;
    }
    BOOL v17 = v16 != 0x7FFFFFFF || v9++ >= 2;
    --v8;
  }

  while (!v17);
  result.NSUInteger length = v12;
  result.NSUInteger location = v16;
  return result;
}

- ($0AC6E346AE4835514AAA8AC86D8F4844)_handleUserCharacterSelection:(id)a3 inString:(id)a4 rightward:(BOOL)a5
{
  BOOL v5 = a5;
  int64_t var1 = a3.var1;
  int64_t var0 = a3.var0;
  id v9 = a4;
  unint64_t v10 = v9;
  if (var0 == 0x7FFFFFFFFFFFFFFFLL || var0 == 0x7FFFFFFF)
  {
    uint64_t v11 = VOTLogCommon(v9);
    NSUInteger v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v33.NSUInteger location = var0;
      v33.NSUInteger length = var1;
      int64_t v25 = NSStringFromRange(v33);
      int64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      int v27 = 138412802;
      unsigned int v28 = v26;
      __int16 v29 = 2112;
      double v30 = v10;
      __int16 v31 = 1024;
      BOOL v32 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Invalid range passed into handle user selection: %@ > %@[%d]",  (uint8_t *)&v27,  0x1Cu);
    }
  }

  else if (self->_selectingRightward)
  {
    uint64_t v15 = var0 + var1;
    if (v5)
    {
      if (v15 < (unint64_t)[v9 length]
        && [v10 rangeOfComposedCharacterSequenceAtIndex:var0 + var1] != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        int64_t v17 = v16 + var1;
      }
    }

    else
    {
      id v21 = [v9 length];
      if (v15 >= 1
        && v15 - 1 < (unint64_t)v21
        && objc_msgSend(v10, "rangeOfComposedCharacterSequenceAtIndex:") != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        if (var1 < 1)
        {
          var0 -= v22;
          int64_t var1 = v22;
        }

        else
        {
          var1 -= v22;
        }
      }
    }
  }

  else if (v5)
  {
    if (var0 < (unint64_t)[v9 length])
    {
      id v18 = [v10 rangeOfComposedCharacterSequenceAtIndex:var0];
      int64_t v20 = var1 - v19;
      if (var1 < v19) {
        int64_t v20 = 0LL;
      }
      if (v18 != (id)0x7FFFFFFFFFFFFFFFLL)
      {
        var0 += v19;
        int64_t var1 = v20;
      }
    }
  }

  else if (var0 >= 1)
  {
    if ([v9 rangeOfComposedCharacterSequenceAtIndex:var0 - 1] == (id)0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v24 = 0LL;
    }
    else {
      uint64_t v24 = v23;
    }
    var0 -= v24;
    var1 += v24;
  }

  int64_t v13 = var0;
  int64_t v14 = var1;
  result.int64_t var1 = v14;
  result.int64_t var0 = v13;
  return result;
}

- (void)_handleZoomMovement:(int64_t)a3 event:(id)a4
{
  id v19 = a4;
  BOOL v6 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  NSUInteger v7 = v6;
  if (!v6
    || (unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v6, "application")),
        unsigned __int8 v9 = -[VOTElement isValidForApplication:](v7, "isValidForApplication:", v8),
        v8,
        (v9 & 1) == 0))
  {
    unint64_t v10 = self->_touchContainer;

    NSUInteger v7 = v10;
  }

  if (-[VOTElement mapFeatureType](v7, "mapFeatureType")
    || -[VOTElement doesHaveTraits:](v7, "doesHaveTraits:", kAXWebContentTrait))
  {
    -[VOTElement centerPoint](v7, "centerPoint");
    double v12 = v11;
    double v14 = v13;
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForIndex:101]);
    [v15 pointValue];
    double v12 = v16;
    double v14 = v17;
  }

  if (a3 == 4)
  {
    -[VOTElement zoomOutAtLocation:](v7, "zoomOutAtLocation:", v12, v14);
  }

  else if (a3 == 3)
  {
    -[VOTElement zoomInAtLocation:](v7, "zoomInAtLocation:", v12, v14);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v18 setCursorFrameForElement:v7];
}

- (void)_handleTrackingDetailMovement:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  unint64_t v10 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3, a4));
  if (!v10
    || (BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v10, "application")),
        unsigned __int8 v7 = -[VOTElement isValidForApplication:](v10, "isValidForApplication:", v6),
        v6,
        unint64_t v8 = v10,
        (v7 & 1) == 0))
  {
    unsigned __int8 v9 = self->_touchContainer;

    unint64_t v8 = v9;
    if (v4) {
      goto LABEL_4;
    }
LABEL_6:
    double v11 = v8;
    -[VOTElement decreaseTrackingDetail](v8, "decreaseTrackingDetail");
    goto LABEL_7;
  }

  if (!v4) {
    goto LABEL_6;
  }
LABEL_4:
  double v11 = v8;
  -[VOTElement increaseTrackingDetail](v8, "increaseTrackingDetail");
LABEL_7:
}

- (void)_handleNavigationDirectionChangeWithDirection:(int64_t)a3
{
  int64_t v4 = -[VOTElementManager _newNavigationDirectionModeForRotorDirection:]( self,  "_newNavigationDirectionModeForRotorDirection:",  a3);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverNavigationDirectionMode:v4];

  -[VOTElementManager _outputNavigationDirectionMode:](self, "_outputNavigationDirectionMode:", v4);
  -[VOTElement setNavigationDirectionMode:](self->_currentElement, "setNavigationDirectionMode:", v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[VOTElement remoteParent](self->_currentElement, "remoteParent"));
  if (v6) {
    [v6 setNavigationDirectionMode:v4];
  }
  -[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate");
}

- (int64_t)_newNavigationDirectionModeForRotorDirection:(int64_t)a3
{
  id v4 = [(id)VOTSharedWorkspace navigationDirection];
  if (v4 == (id)2) {
    return a3 != 1;
  }
  if (v4 == (id)1) {
    return 2LL * (a3 == 1);
  }
  int64_t v5 = 1LL;
  if (a3 != 1) {
    return 2LL;
  }
  return v5;
}

- (id)_navigationDirectionModeString:(int64_t)a3
{
  else {
    id v3 = *(&off_100179278 + a3);
  }
  id v4 = off_1001AC148;
  int64_t v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v6 = sub_10004AE68(v4, v3, 0LL, v5);
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

- (void)_outputNavigationDirectionMode:(int64_t)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _navigationDirectionModeString:](self, "_navigationDirectionModeString:", a3));
  +[VOTOutputRequest sendRequestWithString:](&OBJC_CLASS___VOTOutputRequest, "sendRequestWithString:", v3);
}

- (void)_resetMathGranularMovementState
{
  elementMathSegments = self->_elementMathSegments;
  self->_elementMathSegments = 0LL;
  self->_elementMathSegmentGranularitdouble y = 0LL;

  self->_elementMathIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
}

- (unint64_t)_currentMathGranularityLevel
{
  int64_t v2 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
  else {
    return v2 - 48;
  }
}

- (void)_refreshMathSegmentsIfNeededWithPreferredDirection:(int64_t)a3
{
  unint64_t v5 = -[VOTElementManager _currentMathGranularityLevel](self, "_currentMathGranularityLevel");
  if (v5)
  {
    unint64_t v6 = v5;
    if (self->_elementMathSegmentGranularity != v5)
    {
      self->_elementMathSegmentGranularitdouble y = v5;
      if (self->_elementMathIndex == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned __int8 v7 = 0LL;
      }

      else
      {
        unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_elementMathSegments, "objectAtIndex:"));
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 attributesAtIndex:0 effectiveRange:0]);
        unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:UIAccessibilityTokenMathTreePosition]);
      }

      unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      double v11 = (NSArray *)objc_claimAutoreleasedReturnValue([v10 mathSegmentsWithGranularityLevel:v6]);
      elementMathSegments = self->_elementMathSegments;
      self->_elementMathSegments = v11;

      if (v7)
      {
        uint64_t v18 = 0LL;
        id v19 = &v18;
        uint64_t v20 = 0x2020000000LL;
        uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        double v13 = self->_elementMathSegments;
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10006CD44;
        v15[3] = &unk_100178AD8;
        void v15[4] = self;
        id v16 = v7;
        double v17 = &v18;
        -[NSArray enumerateObjectsWithOptions:usingBlock:]( v13,  "enumerateObjectsWithOptions:usingBlock:",  2LL * (a3 == 2),  v15);
        unint64_t v14 = v19[3];
        if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        {
          _AXLogWithFacility( 0LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"Ran into a case where we couldn't find a match in our new math granularity level.  Old tree position was %@, new segments are %@");
          unint64_t v14 = 0LL;
          v19[3] = 0LL;
        }

        self->_elementMathIndedouble x = v14;

        _Block_object_dispose(&v18, 8);
      }
    }
  }

- (void)_refreshMathSegmentsIfNeeded
{
}

- (void)_handleUpdatedMathElementIndex
{
  unsigned __int8 v7 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_elementMathSegments, "objectAtIndex:", self->_elementMathIndex));
  id v4 = -[VOTOutputRequest addAttributedString:](v7, "addAttributedString:", v3);

  -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
  unint64_t v5 = (void *)VOTSharedWorkspace;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
  [v5 refreshBraille:0 rotorSelection:v6];
}

- (id)_treePositionForMathSegment:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a3 attributesAtIndex:0 effectiveRange:0]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:UIAccessibilityTokenMathTreePosition]);

  return v4;
}

- (void)_handleMathGranularMovement:(int64_t)a3 event:(id)a4
{
  id v15 = a4;
  elementMathSegments = self->_elementMathSegments;
  unsigned __int8 v7 = elementMathSegments;
  if (!elementMathSegments)
  {
    -[VOTElementManager _refreshMathSegmentsIfNeededWithPreferredDirection:]( self,  "_refreshMathSegmentsIfNeededWithPreferredDirection:",  a3);
    unsigned __int8 v7 = self->_elementMathSegments;
  }

  unint64_t v8 = -[NSArray count](v7, "count");
  if (!v8) {
    goto LABEL_21;
  }
  elementMathIndedouble x = self->_elementMathIndex;
  if (elementMathIndex == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3 == 1) {
      unint64_t v10 = 0LL;
    }
    else {
      unint64_t v10 = (unint64_t)(v8 - 1);
    }
LABEL_18:
    int v11 = 0;
    self->_elementMathIndedouble x = v10;
    if (!elementMathSegments) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  if (a3 != 1 || (char *)elementMathIndex != v8 - 1)
  {
    if (a3 == 2)
    {
      if (!elementMathIndex) {
        goto LABEL_10;
      }
    }

    else if (a3 == 1)
    {
      unint64_t v10 = elementMathIndex + 1;
      goto LABEL_18;
    }

    unint64_t v10 = elementMathIndex - 1;
    goto LABEL_18;
  }

- (id)_currentRotorSelection
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (!sub_1000D48F4(-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType"))) {
    goto LABEL_10;
  }
  elementMathIndedouble x = self->_elementMathIndex;
  if (elementMathIndex == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_10;
  }
  if (elementMathIndex >= -[NSArray count](self->_elementMathSegments, "count"))
  {
    unint64_t v11 = self->_elementMathIndex;
    elementMathSegments = self->_elementMathSegments;
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  11637LL,  "-[VOTElementManager _currentRotorSelection]",  @"Should not have been able to set an element math index beyond the bounds of the array of segments.  Was %lu, but array was %@");
  }

  unint64_t v5 = self->_elementMathIndex;
  if (v5 < -[NSArray count](self->_elementMathSegments, "count", v11, elementMathSegments))
  {
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_elementMathSegments, "objectAtIndex:", self->_elementMathIndex));
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _treePositionForMathSegment:](self, "_treePositionForMathSegment:", v6));
    unint64_t v8 = v7;
    if (v7) {
      id v9 = v7;
    }
  }

  else
  {
LABEL_10:
    unint64_t v8 = 0LL;
  }

  return v8;
}

- (void)_handleSearchRotorSetMathPosition:(id)a3
{
  id v14 = a3;
  if (!sub_1000D48F4(-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType"))) {
    -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  49LL,  1LL,  1LL);
  }
  -[VOTElementManager _refreshMathSegmentsIfNeeded](self, "_refreshMathSegmentsIfNeeded");
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForIndex:109]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSIndexPath, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    id v7 = v4;
    NSUInteger v8 = -[NSArray count](self->_elementMathSegments, "count");
    if (!v8) {
      goto LABEL_11;
    }
    NSUInteger v9 = v8;
    unint64_t v10 = 0LL;
    while (1)
    {
      unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_elementMathSegments, "objectAtIndex:", v10));
      double v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _treePositionForMathSegment:](self, "_treePositionForMathSegment:", v11));
      char v13 = sub_10004C730(v12, v7);

      if ((v13 & 1) != 0) {
        break;
      }
      if (v9 == ++v10) {
        goto LABEL_11;
      }
    }

    if (v10 != 0x7FFFFFFFFFFFFFFFLL)
    {
      self->_elementMathIndedouble x = v10;
      -[VOTElementManager _handleUpdatedMathElementIndex](self, "_handleUpdatedMathElementIndex");
    }

    else
    {
LABEL_11:
      _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"Could not find segment index for tree position %@ with segments %@");
    }
  }

  else
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  11661LL,  "-[VOTElementManager _handleSearchRotorSetMathPosition:]",  @"Pressing cursor routing button on math expression led to unexpected rotor selection %@");
  }
}

- (void)_handleOutputTextStyle:(id)a3
{
  id v10 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  if ([v10 doesHaveTraits:kAXIsEditingTrait])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "attributedValueForRange:", objc_msgSend(v10, "selectedTextRange"), 1));
    [(id)VOTSharedWorkspace addMisspellingsForString:v4];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 coalescedFontAttributes]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _computeChangedFontAttributes:storedAttributes:haveMisspellCheck:]( self,  "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:",  v5,  0LL,  1LL));
    if ([v6 length])
    {
      id v7 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
      id v8 = -[VOTOutputRequest addAttributedString:](v7, "addAttributedString:", v6);
      -[VOTOutputRequest setGeneratesBraille:](v7, "setGeneratesBraille:", 1LL);
      -[VOTOutputRequest setBrailleType:](v7, "setBrailleType:", 2LL);
      -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
    }

    else
    {
      id v7 = (VOTOutputRequest *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      NSUInteger v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      -[VOTOutputRequest sendEvent:](v7, "sendEvent:", v9);
    }
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v4 sendEvent:v5];
  }
}

- (void)_handlePerformTapAutofill:(id)a3
{
  id v4 = self->_autofillCurrentElement;
  unint64_t v5 = -[VOTElement traits](v4, "traits");
  unint64_t v6 = kAXSelectionDismissesItemTrait & v5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  if (v6) {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent AutofillDidDismiss](&OBJC_CLASS___VOSOutputEvent, "AutofillDidDismiss"));
  }
  else {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidSelectAutofill](&OBJC_CLASS___VOSOutputEvent, "DidSelectAutofill"));
  }
  NSUInteger v9 = (void *)v8;
  [v7 sendEvent:v8];

  -[VOTElement performSimpleTap](v4, "performSimpleTap");
  id v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v4,  v12,  1LL);

  [v12 setCannotBeInterrupted:1];
  -[VOTElementManager sendRequest:](self, "sendRequest:", v12);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  [v11 frame];
  objc_msgSend(v10, "setCursorFrame:");

  -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
}

- (void)_finishHandlingNextAutofillWithElement:(id)a3
{
  id v3 = a3;
  [v3 updateFrame];
  [v3 updateCenterPoint];
  id v12 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v3 frame];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  objc_msgSend(v12, "setCursorFrame:", v5, v7, v9, v11);
}

- (BOOL)_handleNextAutofill:(id)a3 reverse:(BOOL)a4
{
  BOOL v4 = a4;
  double v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application", a3));
  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);
  [v7 updateCache:3004];

  double v8 = (void *)objc_claimAutoreleasedReturnValue([v6 typingCandidateElements]);
  double v9 = (char *)[v8 count];
  if (!v9)
  {
    char v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v13 sendEvent:v14];

    autofillCurrentElement = self->_autofillCurrentElement;
    self->_autofillCurrentElement = 0LL;

    goto LABEL_6;
  }

  double v10 = self->_autofillCurrentElement;
  if (v10)
  {
    double v11 = v9;
    id v12 = (char *)objc_msgSend(v8, "indexOfObject:");
    if (v12 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      double v10 = 0LL;
      goto LABEL_13;
    }

    if (v4)
    {
      if (v12)
      {
        double v10 = (VOTElement *)(v12 - 1);
        goto LABEL_13;
      }
    }

    else if (v12 != v11 - 1)
    {
      double v10 = (VOTElement *)(v12 + 1);
      goto LABEL_13;
    }

    double v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v17 sendEvent:v18];

LABEL_6:
    BOOL v16 = 0;
    goto LABEL_19;
  }

- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5
{
}

- (void)_valueWait:(id)a3 oldValue:(id)a4 waitTime:(double)a5 borderHitIfNoChange:(BOOL)a6
{
  BOOL v6 = a6;
  id v9 = a3;
  id v10 = a4;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v27 = 0LL;
  unsigned int v28 = &v27;
  uint64_t v29 = 0x3032000000LL;
  uint64_t v30 = sub_10005EA98;
  __int16 v31 = sub_10005EAA8;
  id v32 = 0LL;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10006DA98;
  v23[3] = &unk_100178B00;
  id v12 = v9;
  id v24 = v12;
  int64_t v26 = &v27;
  id v13 = v10;
  id v25 = v13;
  id v14 = objc_retainBlock(v23);
  if ((((uint64_t (*)(void))v14[2])() & 1) == 0)
  {
    while (CFAbsoluteTimeGetCurrent() - Current < 0.5)
    {
      +[NSThread sleepForTimeInterval:](&OBJC_CLASS___NSThread, "sleepForTimeInterval:", a5);
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSScanner localizedScannerWithString:]( &OBJC_CLASS___NSScanner,  "localizedScannerWithString:",  v28[5]));
      int v22 = 0;
      if ([v15 scanFloat:&v22])
      {
        [v12 absoluteValue];
        double v17 = vabdd_f64(0.0, v16);
        double v18 = vabdd_f64(1.0, v16);
        if (v17 < 2.22044605e-16 || v18 < 2.22044605e-16)
        {

          break;
        }
      }
    }

    if (v6 && v28[5] && objc_msgSend(v13, "isEqualToString:"))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v20 sendEvent:v21];
    }
  }

  _Block_object_dispose(&v27, 8);
}

- (void)_handleAdjustValue:(id)a3 reverse:(BOOL)a4
{
  BOOL v4 = a4;
  id v20 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  [v20 centerPoint];
  double v7 = v6;
  double v9 = v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v20 value]);
  if (v4) {
    [v20 decrementAction];
  }
  else {
    [v20 incrementAction];
  }
  -[VOTElementManager _valueWait:oldValue:waitTime:](self, "_valueWait:oldValue:waitTime:", v20, v10, 0.05);
  -[VOTElement updateTraits](self->_currentElement, "updateTraits");
  double v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_currentElement, "uiElement"));
  [v11 updateCache:2027];

  id v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v20,  v12,  65544LL);
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXToggleTrait))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement toggleStatusLabel](self->_currentElement, "toggleStatusLabel"));
    id v14 = [v12 addString:v13];
  }

  if (!-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXStartsMediaSessionTrait)) {
    -[VOTElementManager sendRequest:](self, "sendRequest:", v12);
  }
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXUpdatesFrequentlyTrait)) {
    -[VOTElementManager resetFrequentUpdateTextCache](self, "resetFrequentUpdateTextCache");
  }
  if (([v20 isValid] & 1) == 0)
  {
    id v15 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v7, v9);
    double v16 = v15;
    if (v15 && ([v15 isEqual:v20] & 1) == 0)
    {
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v16);
      double v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v17 setCursorFrameForElement:v16];
    }
  }

  -[VOTElement updateEquivalenceTag](self->_currentElement, "updateEquivalenceTag");
  double v18 = (void *)VOTSharedWorkspace;
  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
  [v18 refreshBraille:1 rotorSelection:v19];

  self->_lastAdjustValueTime = CFAbsoluteTimeGetCurrent();
}

- (void)_handleKBPopupVariantsNotification:(id)a3
{
  CGPoint fingerLocation = self->_fingerLocation;
  self->_keyboardAlternativeVisibleTrackingPoint = fingerLocation;
  self->_keyboardAlternativeVisibleStartPoint = fingerLocation;
  self->_keyboardAlternativesVisible = 1;
  double v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 currentSoftwareKeyboardLayout]);

  if ((sub_10004BE40(v8) & 1) == 0)
  {
    double v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    double v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent PopoverDidAppear](&OBJC_CLASS___VOSOutputEvent, "PopoverDidAppear"));
    [v6 sendEvent:v7];
  }
}

- (void)_handleCameraCenteredNotification:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  [v3 playSoundFast:@"Sounds/RoadWalking.aiff"];
}

- (void)_handleBarcodeVisibilityNotification:(id)a3
{
  unsigned int v3 = [a3 BOOLValue];
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  unsigned int v5 = [v4 screenCurtainEnabled];

  if (v3)
  {
    if (v5)
    {
      double v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
      [v6 setScreenCurtainSuspended:1];
    }

    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v7 clearCursorFrame];
  }

  else
  {
    if (!v5) {
      return;
    }
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    [v7 setScreenCurtainSuspended:0];
  }
}

- (void)_handleFocusedElementContentChangeNotification:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterSecureText](&OBJC_CLASS___VOSOutputEvent, "DidEnterSecureText"));
  [v4 sendEvent:v3];
}

- (void)_handleScreenWillChangeNotification:(id)a3
{
  id v4 = a3;
  if (-[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark"))
  {
    uint64_t v6 = VOTLogWebPageMovement();
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1000F1A68();
    }
  }

  else
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v5);
    if ((objc_opt_isKindOfClass(v4, v8) & 1) != 0
      && [v4 isEqualToString:kAXScreenChangePopup])
    {
      self->_lastPopupTime = CFAbsoluteTimeGetCurrent();
      double v9 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      elementBeforePopup = self->_elementBeforePopup;
      self->_elementBeforePopup = v9;

      uint64_t v12 = VOTLogCommon(v11);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
        sub_1000F1A08();
      }
    }

    id v14 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    elementBeforeScreenChange = self->_elementBeforeScreenChange;
    self->_elementBeforeScreenChange = v14;

    -[VOTElementManager setCurrentElement:](self, "setCurrentElement:", 0LL);
    -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    -[os_log_s setCursorFrameForElement:](v7, "setCursorFrameForElement:", 0LL);
  }
}

- (void)_handleRealtimeElementUpdate:(id)a3
{
  id v4 = a3;
  id v13 = v4;
  if (v4 && (v6 = CFGetTypeID(v4), TypeID = AXUIElementGetTypeID(), id v5 = v13, v6 == TypeID))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v13));
    double v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v8));
  }

  else
  {
    double v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application", v5));
  }

  id v10 = (NSArray *)objc_claimAutoreleasedReturnValue([v9 realtimeElements]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v11 updateRealtimeElements:v10];

  realTimeElementsCache = self->_realTimeElementsCache;
  self->_realTimeElementsCache = v10;
}

- (void)_handleScreenWillWakeNotification:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager delayedNotificationAnnouncementRequest]( self,  "delayedNotificationAnnouncementRequest"));
  if (v4)
  {
    id v5 = v4;
    -[VOTElementManager _systemNotificationInProgressForRequest:](self, "_systemNotificationInProgressForRequest:", v4);
    -[VOTElementManager sendRequest:](self, "sendRequest:", v5);
    id v4 = v5;
  }
}

- (void)_handleWebFormControlInteractionStartNotification:(id)a3
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v6 isAlive]
    && [v6 doesHaveTraits:kAXWebContentTrait])
  {
    id v4 = (VOTElement *)v6;
    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = v4;
  }

  else
  {
    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = 0LL;
  }
}

- (void)_handleWebFormControlInteractionEndNotification:(id)a3
{
  self->_lastWebKeyboardDismissTime = CFAbsoluteTimeGetCurrent();
  -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
  -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_updateAppFromTimer, "dispatchAfterDelay:", 1.0);
}

- (BOOL)_shouldMoveToLastWebFormControl
{
  if (self->_webFormControlBeforeInteraction)
  {
    if (CFAbsoluteTimeGetCurrent() - self->_lastWebKeyboardDismissTime < 2.0
      && -[VOTElement isAlive](self->_webFormControlBeforeInteraction, "isAlive"))
    {
      unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement remoteParent](self->_webFormControlBeforeInteraction, "remoteParent"));
      if (v3)
      {
        id v4 = v3;
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uiElement]);
        unsigned __int8 v6 = [v5 BOOLWithAXAttribute:2025];

        if ((v6 & 1) != 0) {
          return 1;
        }
      }

      else
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_webFormControlBeforeInteraction, "uiElement"));
        unsigned __int8 v9 = [v8 BOOLWithAXAttribute:2025];

        if ((v9 & 1) != 0) {
          return 1;
        }
      }
    }

    webFormControlBeforeInteraction = self->_webFormControlBeforeInteraction;
    self->_webFormControlBeforeInteraction = 0LL;
  }

  return 0;
}

- (void)_handleWebTextMatchSelectedNotification:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application", a3));
  id v13 = (id)objc_claimAutoreleasedReturnValue([v4 firstElementInApplicationForFocus]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestWebElement:](self, "_nearestWebElement:", v13));
  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 textMarkerRangeForSelection]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 textMarkerRangeForSelection]);
  -[VOTElementManager _outputWebLineWithMarkerRange:withElement:]( self,  "_outputWebLineWithMarkerRange:withElement:",  v7,  v5);

  if ([v6 count])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndex:0]);
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 elementForTextMarker:v8]);

    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v9);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v10 setCursorFrameForElement:v9];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
    [v11 sendEvent:v12];
  }
}

- (void)_handleWebSearchResult:(int64_t)a3 withEvent:(id)a4
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3, a4));
  [v6 findSearchResult:a3 == 1 withSearchText:self->_webSearchText];
}

- (void)_handleWebTextAvailableNotification:(id)a3
{
  id v7 = a3;
  if (!v7 || (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5), (objc_opt_isKindOfClass(v7, v6) & 1) != 0))
  {
    objc_storeStrong((id *)&self->_webSearchText, a3);
    -[VOTElementRotor setShowsWebSearchResults:](self->_elementRotor, "setShowsWebSearchResults:", v7 != 0LL);
    -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
  }
}

- (BOOL)_savedDescriptionToPhoto:(id)a3 description:(id)a4 element:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  id v9 = [a5 savePhotoLabeliCloud:v8];
  if ((v9 & 1) == 0)
  {
    if ((AXDeviceIsAudioAccessory(v9, v10) & 1) != 0)
    {
      BOOL v11 = 0;
      goto LABEL_12;
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 absoluteString]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pathExtension]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 lowercaseString]);

    if ([v14 hasSuffix:@"mov"])
    {
      char v15 = UIAccessibilityAddMetadataDescriptionToVideo(v7, v8);
    }

    else
    {
      if (([v14 hasPrefix:@"jp"] & 1) == 0
        && ![v14 hasSuffix:@"png"])
      {
        BOOL v11 = 0;
        goto LABEL_11;
      }

      char v15 = UIAccessibilityAddMetadataDescriptionToImage(v7, v8);
    }

    BOOL v11 = v15;
LABEL_11:

    goto LABEL_12;
  }

  BOOL v11 = 1;
LABEL_12:

  return v11;
}

- (void)_handleChangeAudioDuckingMode:(id)a3
{
}

- (void)_handleLabelElementAcceptedNotification:(id)a3
{
  id v12 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v12, v5) & 1) != 0 && self->_labeledElementIdentification)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement url](self->_cachedLabelElement, "url"));
    if (!-[VOTElementManager _savedDescriptionToPhoto:description:element:]( self,  "_savedDescriptionToPhoto:description:element:",  v6,  v12,  self->_cachedLabelElement))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElementLabelCache sharedManager](&OBJC_CLASS___VOTElementLabelCache, "sharedManager"));
      [v7 storeUserLabel:v12 forIdentification:self->_labeledElementIdentification];

      id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uniqueIdentification](self->_currentElement, "uniqueIdentification"));
      unsigned int v9 = [v8 isEqual:self->_labeledElementIdentification];

      if (v9) {
        -[VOTElement setUserDefinedLabel:](self->_currentElement, "setUserDefinedLabel:", v12);
      }
    }

    labeledElementIdentification = self->_labeledElementIdentification;
    self->_labeledElementIdentification = 0LL;

    cachedLabelElement = self->_cachedLabelElement;
    self->_cachedLabelElement = 0LL;
  }
}

- (void)_resetElementLabel
{
  labeledElementIdentification = self->_labeledElementIdentification;
  if (labeledElementIdentification)
  {
    self->_labeledElementIdentification = 0LL;

    -[VOTElementManager showElementLabelPanel:currentLabel:](self, "showElementLabelPanel:currentLabel:", 0LL, 0LL);
  }

  cachedLabelElement = self->_cachedLabelElement;
  self->_cachedLabelElement = 0LL;
}

- (void)_handleMonitorElement:(id)a3
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);

  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_elementMonitorCache,  "objectForKeyedSubscript:",  v6));
    if (!v8)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_elementMonitorCache,  "setObject:forKeyedSubscript:",  v8,  v6);
    }

    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v4]);

    if (v10)
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v4]);
      id v12 = sub_10004AE68(off_1001AC148, @"monitored.element.removed", 0LL, v9);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v13, v11));
      id v15 = sub_10000BBB0(v14, 0, v9);

      [v8 setObject:0 forKeyedSubscript:v4];
      id v16 = [v8 count];
      if (!v16) {
        id v16 = -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_elementMonitorCache,  "setObject:forKeyedSubscript:",  0LL,  v6);
      }
      uint64_t v17 = VOTLogCommon(v16);
      double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO)) {
        goto LABEL_14;
      }
      *(_DWORD *)buf = 138412290;
      id v37 = v4;
      id v19 = "Removing monitoring: %@";
      id v20 = v18;
      uint32_t v21 = 12;
    }

    else
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _monitoredElementCachedText:](self, "_monitoredElementCachedText:", v4));
      id v23 = sub_10004AE68(off_1001AC148, @"monitored.element.added", 0LL, v9);
      id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v24, v11));
      id v26 = sub_10000BBB0(v25, 0, v9);

      uint64_t v27 = VOTLogCommon([v8 setObject:v11 forKeyedSubscript:v4]);
      double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
LABEL_14:

        id v28 = -[NSMutableDictionary count](self->_elementMonitorCache, "count");
        if (v28)
        {
          if (!self->_flags.isMonitoringElements)
          {
            self->_flags.isMonitoringElements = 1;
            uint64_t v29 = VOTLogCommon(v28);
            uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "Starting monitoring of all elements",  buf,  2u);
            }

            elementMonitorTimer = self->_elementMonitorTimer;
            v35[0] = _NSConcreteStackBlock;
            v35[1] = 3221225472LL;
            v35[2] = sub_10006EB94;
            v35[3] = &unk_100176D38;
            v35[4] = self;
            -[SCRCTargetSelectorTimer dispatchAfterDelay:withBlock:]( elementMonitorTimer,  "dispatchAfterDelay:withBlock:",  v35,  5.0);
          }
        }

        else
        {
          id v32 = -[SCRCTargetSelectorTimer cancel](self->_elementMonitorTimer, "cancel");
          self->_flags.isMonitoringElements = 0;
          uint64_t v33 = VOTLogCommon(v32);
          double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "Stopping monitoring of all elements",  buf,  2u);
          }
        }

        goto LABEL_23;
      }

      *(_DWORD *)buf = 138412546;
      id v37 = v4;
      __int16 v38 = 2112;
      double v39 = v11;
      id v19 = "Monitoring: %@, %@";
      id v20 = v18;
      uint32_t v21 = 22;
    }

    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v19, buf, v21);
    goto LABEL_14;
  }

  uint64_t v22 = VOTLogCommon(v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR)) {
    sub_1000F1A94();
  }
LABEL_23:
}

- (void)_handleLabelElement:(id)a3
{
  id obj = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  uint64_t v4 = (VOTElementUniqueIdentification *)objc_claimAutoreleasedReturnValue([obj uniqueIdentification]);
  labeledElementIdentification = self->_labeledElementIdentification;
  self->_labeledElementIdentification = v4;

  objc_storeStrong((id *)&self->_cachedLabelElement, obj);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([obj elementStoredUserLabel]);
  if (!v6)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([obj userDefinedLabel]);
    if (!v6) {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([obj label]);
    }
  }

  -[VOTElementManager showElementLabelPanel:currentLabel:](self, "showElementLabelPanel:currentLabel:", 1LL, v6);
}

- (void)showElementLabelPanel:(BOOL)a3 currentLabel:(id)a4
{
  BOOL v4 = a3;
  id v5 = a4;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[VOTSpringBoardConnection defaultConnection](&OBJC_CLASS___VOTSpringBoardConnection, "defaultConnection"));
  [v6 showElementLabelPanel:v4 currentLabel:v5];
}

- (BOOL)shouldSnarfCrown
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  unsigned __int8 v3 = [v2 useDigitalCrownNavigation];

  return v3;
}

- (void)_handleToggleCrownNavigation:(id)a3
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace", a3));
  unsigned int v4 = [v3 useDigitalCrownNavigation];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  [v5 setUseDigitalCrownNavigationEnabled:v4 ^ 1];

  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
  if (v4) {
    id v6 = @"crown.navigation.off";
  }
  else {
    id v6 = @"crown.navigation.on";
  }
  id v7 = sub_10004A988(off_1001AC148, v6, 0LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = -[VOTOutputRequest addString:](v10, "addString:", v8);

  -[VOTOutputRequest send](v10, "send");
}

- (void)_handleStartStopToggle:(id)a3
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  [v4 stopSpeakingAtBoundary:0];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
  double Current = CFAbsoluteTimeGetCurrent();
  [(id)VOTSharedWorkspace lastTelephonyCallActive];
  double v8 = Current - v7;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemMagicTapToggle sharedInstance](&OBJC_CLASS___AXSubsystemMagicTapToggle, "sharedInstance"));
  unsigned __int8 v10 = [v9 ignoreLogging];

  if ((v10 & 1) == 0)
  {
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemMagicTapToggle identifier](&OBJC_CLASS___AXSubsystemMagicTapToggle, "identifier"));
    uint64_t v12 = AXLoggerForFacility(v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);

    os_log_type_t v14 = AXOSLogLevelFromAXLogLevel(1LL);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = AXColorizeFormatLog(1LL, @"Toggled call? %{public}@, within timeout: %d");
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      uint64_t v17 = NSStringFromBOOL(0LL);
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v18 = _AXStringForArgs(v16);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

      if (os_log_type_enabled(v13, v14))
      {
        *(_DWORD *)buf = 138543362;
        double v35 = v19;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "%{public}@", buf, 0xCu);
      }
    }
  }

  if (v8 > 10.0)
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10006F0BC;
    v32[3] = &unk_100176DA8;
    void v32[4] = self;
    id v33 = v5;
    id v20 = objc_retainBlock(v32);
    uint32_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AXSubsystemMagicTapToggle sharedInstance]( &OBJC_CLASS___AXSubsystemMagicTapToggle,  "sharedInstance"));
    unsigned __int8 v22 = [v21 ignoreLogging];

    if ((v22 & 1) == 0)
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemMagicTapToggle identifier](&OBJC_CLASS___AXSubsystemMagicTapToggle, "identifier"));
      uint64_t v24 = AXLoggerForFacility(v23);
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);

      os_log_type_t v26 = AXOSLogLevelFromAXLogLevel(1LL);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = AXColorizeFormatLog(1LL, @"Performing toggle (Speak Screen not enabled)");
        id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        uint64_t v29 = _AXStringForArgs(v28);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v25, v26))
        {
          *(_DWORD *)buf = 138543362;
          double v35 = v30;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}@", buf, 0xCu);
        }
      }
    }

    ((void (*)(void *))v20[2])(v20);
  }

  if (self->_flags.currentElementAllowsDirectTouch) {
    self->_flags.avoidAnnouncingDirectTouchArea = -[VOTElement avoidAnnouncingDirectTouchArea]( self->_currentElement,  "avoidAnnouncingDirectTouchArea");
  }
  self->_lastPressOnMediaSessionElement = CFAbsoluteTimeGetCurrent();
}

- (double)_pressActionResultDelay
{
  return 0.08;
}

- (void)_handleDoubleTap:(id)a3
{
  if (AXDeviceIsTV(self))
  {
    -[VOTElementManager __tvOS_toggleAudioDescriptions](self, "__tvOS_toggleAudioDescriptions");
  }

  else
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    -[VOTElementManager setLastUserElementTouchTime:](self, "setLastUserElementTouchTime:", 0.0);
    if ([v4 supportsSecondaryActivate])
    {
      if (([v4 doesHaveTraits:kAXPlaysSoundTrait] & 1) == 0)
      {
        id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
        [v5 sendEvent:v6];
      }

      [v4 performDoubleTap];
      if ([v4 doesHaveTraits:kAXLaunchIconTrait])
      {
        cachedLaunchIcons = self->_cachedLaunchIcons;
        double v8 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueIdentification]);
        -[NSMutableArray addObject:](cachedLaunchIcons, "addObject:", v8);
      }
    }

    else
    {
      [v4 performSimpleTap];
      +[NSThread sleepForTimeInterval:](&OBJC_CLASS___NSThread, "sleepForTimeInterval:", 0.2);
      [v4 performSimpleTap:1];
    }

    id v9 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    -[VOTElementManager _pressActionResultDelay](self, "_pressActionResultDelay");
    double v12 = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10006F3D0;
    v15[3] = &unk_100176DA8;
    void v15[4] = self;
    id v16 = v10;
    id v13 = v10;
    AXPerformBlockOnMainThreadAfterDelay(v15, v14, v12);
  }

- (BOOL)_useLineFrameBoundsForTouch:(id)a3
{
  CGFloat x = self->_lineFrame.origin.x;
  CGFloat y = self->_lineFrame.origin.y;
  CGFloat width = self->_lineFrame.size.width;
  CGFloat height = self->_lineFrame.size.height;
  CGFloat v7 = CGRectZero.origin.y;
  CGFloat v8 = CGRectZero.size.width;
  CGFloat v9 = CGRectZero.size.height;
  id v10 = a3;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  v15.origin.CGFloat x = CGRectZero.origin.x;
  v15.origin.CGFloat y = v7;
  v15.size.CGFloat width = v8;
  v15.size.CGFloat height = v9;
  char v11 = CGRectEqualToRect(v14, v15);
  unsigned __int8 v12 = [v10 doesHaveTraits:kAXStaticTextTrait | kAXWebContentTrait];

  return v12 & ~v11;
}

- (void)_updateCurrentWordContextForBook:(id)a3
{
  id v4 = a3;
  if (-[NSArray count](self->_lineArray, "count")) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndex:](self->_lineArray, "objectAtIndex:", 0LL));
  }
  else {
    id v5 = 0LL;
  }
  NSUInteger v6 = self->_elementUnitOutputRange.length + 1;
  valuePtr[0] = self->_elementUnitOutputRange.location - self->_bookLineRange.location;
  valuePtr[1] = v6;
  AXValueRef v7 = AXValueCreate(kAXValueTypeCFRange, valuePtr);
  id v8 = objc_msgSend( objc_allocWithZone(NSDictionary),  "initWithObjectsAndKeys:",  v7,  @"contextRange",  v5,  @"startTextMarker",  0);
  if (v7) {
    CFRelease(v7);
  }
  [v4 setCurrentWordContextForBook:v8];
}

- (void)_updateLastFirstResponderChangedTime
{
  self->_lastFirstResponderChangeTime = CFAbsoluteTimeGetCurrent();
  self->_didIgnoreLastFirstResponderChangeOnSelectionChange = 0;
}

- (BOOL)_updateCursorAfterPressForElement:(id)a3 currentElementRange:(_NSRange)a4 request:(id)a5 didHaveCursor:(BOOL)a6 doesHaveCursor:(BOOL)a7
{
  BOOL v7 = a6;
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  id v12 = a3;
  id v13 = a5;
  if (location != 0x7FFFFFFF)
  {
    CGRect v14 = [v12 selectedTextRange];
    lastSeenLineAndColumn = self->_lastSeenLineAndColumn;
    if (!lastSeenLineAndColumn
      || (id v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](lastSeenLineAndColumn, "objectForKey:", @"lineNumber")),
          unint64_t v17 = (unint64_t)[v16 integerValue],
          v16,
          (v17 & 0x8000000000000000LL) != 0))
    {
      int v21 = 0;
      uint64_t v20 = 0LL;
      uint64_t v18 = 0x7FFFFFFFLL;
    }

    else
    {
      uint64_t v18 = (uint64_t)[v12 rangeForLineNumberAndColumn:self->_lastSeenLineAndColumn];
      uint64_t v20 = v19;
      int v21 = 1;
    }

    if (v18 == 0x7FFFFFFF) {
      int v22 = 0;
    }
    else {
      int v22 = v21 & !v7;
    }
    if (!v7) {
      goto LABEL_19;
    }
    char v23 = v21 ^ 1;
    if (!self->_lastSeenLineAndColumn) {
      char v23 = 1;
    }
    if ((v23 & 1) != 0)
    {
LABEL_19:
      BOOL v27 = 0;
    }

    else
    {
      uint64_t v24 = objc_msgSend(v12, "rangeForLineNumberAndColumn:");
      BOOL v27 = v14 < v24 || v14 - v24 >= v25;
    }

    if ((v22 | v27) == 1
      && ((unint64_t lastTextPressAction = self->_lastTextPressAction, lastTextPressAction == 3) || !lastTextPressAction))
    {
      -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  v18,  0LL,  v12,  1LL);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "valueForRange:", v18, v20));
      if ([v29 length])
      {
        id v30 = sub_10004A988(off_1001AC148, @"cursor.at.start.of.line", 0LL);
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v31, v29));
        id v33 = [v13 addString:v32];
      }

      self->_unint64_t lastTextPressAction = 1LL;
    }

    else
    {
      if (v7)
      {
        unsigned __int8 v34 = 0;
        unsigned int v35 = 0;
      }

      else
      {
        unsigned int v35 = [v12 doesHaveTraits:kAXTextAreaTrait] ^ 1;
        double v36 = (void *)objc_claimAutoreleasedReturnValue([v12 application]);
        else {
          unsigned __int8 v34 = 0;
        }
      }

      if (v14 == (_BYTE *)location) {
        int v37 = 1;
      }
      else {
        int v37 = v35;
      }
      if (v37 != 1 || (v34 & 1) != 0)
      {
        -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  location,  0LL,  v12,  1LL);
        id v42 = sub_10004A988(off_1001AC148, @"cursor.at.start", 0LL);
        double v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        id v44 = [v13 addString:v43];

        unint64_t v41 = 2LL;
      }

      else
      {
        -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  location + length,  0LL,  v12,  1LL);
        id v38 = sub_10004A988(off_1001AC148, @"cursor.at.end", 0LL);
        double v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        id v40 = [v13 addString:v39];

        unint64_t v41 = 3LL;
      }

      self->_unint64_t lastTextPressAction = v41;
    }
  }

  return location != 0x7FFFFFFF;
}

- (void)_performPressOnElement:(id)a3 withEvent:(id)a4 centerPoint:(CGPoint)a5
{
  double y = a5.y;
  double x = a5.x;
  id v20 = a3;
  id v8 = a4;
  CGFloat v9 = v8;
  double v10 = CGPointZero.y;
  if (CGPointZero.x == x && v10 == y)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForIndex:", 101, CGPointZero.x, v10));
    [v12 pointValue];
    double v14 = v13;
    double v16 = v15;

    [v20 frame];
    v21.double x = v14;
    v21.double y = v16;
    if (CGRectContainsPoint(v22, v21))
    {
      unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForIndex:111]);
      [v17 floatValue];
      double v19 = v18;

      objc_msgSend(v20, "performTapAtPoint:withForce:playSound:", 1, v14, v16, v19);
    }
  }

  else
  {
    objc_msgSend(v20, "performSimpleTap", CGPointZero.x, v10);
  }
}

- (void)_handlePerformPressAction:(id)a3
{
  id v88 = a3;
  id v4 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXLaunchIconTrait))
  {
    cachedLaunchIcons = self->_cachedLaunchIcons;
    NSUInteger v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uniqueIdentification](v4, "uniqueIdentification"));
    -[NSMutableArray addObject:](cachedLaunchIcons, "addObject:", v6);
  }

  if ([v88 isTouchEvent]
    && [(id)VOTSharedWorkspace typingMode] == (id)1
    && -[VOTElement keyboardKeyAllowsTouchTyping](v4, "keyboardKeyAllowsTouchTyping"))
  {
    self->_flags.didTouchTypingOutputStart = 0;
  }

  -[VOTElement centerPoint](v4, "centerPoint");
  double v8 = v7;
  double v10 = v9;
  char v11 = "-[VOTExplorerElementManager _nextExplorerElementInDirection:fromElement:didWrap:]" + 15;
  if (-[VOTElement isReadingContent](v4, "isReadingContent"))
  {
    bookSubelement = self->_bookSubelement;
    if (!bookSubelement)
    {
      if (-[VOTElement supportsFrameForRange](v4, "supportsFrameForRange"))
      {
        v99.origin.double x = CGRectZero.origin.x;
        v99.origin.double y = CGRectZero.origin.y;
        v99.size.CGFloat width = CGRectZero.size.width;
        v99.size.CGFloat height = CGRectZero.size.height;
        if (!CGRectEqualToRect(self->_lineFrame, v99))
        {
          double MidX = CGRectGetMidX(self->_lineFrame);
          double MidY = CGRectGetMidY(self->_lineFrame);
          double v47 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForIndex:111]);
          [v47 floatValue];
          double v49 = v48;

          -[VOTElement performTapAtPoint:withForce:playSound:]( v4,  "performTapAtPoint:withForce:playSound:",  1LL,  MidX,  MidY,  v49);
          goto LABEL_16;
        }
      }

      -[VOTElementManager _updateCurrentWordContextForBook:](self, "_updateCurrentWordContextForBook:", v4);
      bookSubelement = v4;
    }

    -[VOTElement performSimpleTap](bookSubelement, "performSimpleTap");
LABEL_16:
    double v13 = 0LL;
    id v14 = 0LL;
LABEL_58:
    self->_unint64_t lastTextPressAction = 0LL;
    goto LABEL_59;
  }

  if (-[VOTElement isInTableCell](v4, "isInTableCell"))
  {
    self->_previousTableOrCollectionViewRowTime = CFAbsoluteTimeGetCurrent();
    double v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement parentTableOrCollectionView](v4, "parentTableOrCollectionView"));
    if (v15)
    {
      double v16 = objc_opt_new(&OBJC_CLASS____VOTPreviousTableOrCellectionViewMetadata);
      id v17 = -[VOTElement indexPathAsRange](v4, "indexPathAsRange");
      -[_VOTPreviousTableOrCellectionViewMetadata setIndexPath:](v16, "setIndexPath:", v17, v18);
      double v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement label](v4, "label"));
      -[_VOTPreviousTableOrCellectionViewMetadata setLabel:](v16, "setLabel:", v19);

      id v20 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewToMetadata]( self,  "previousTableOrCollectionViewToMetadata"));
      [v20 setObject:v16 forKeyedSubscript:v15];

      CGPoint v21 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager previousTableOrCollectionViewList](self, "previousTableOrCollectionViewList"));
      [v21 addObject:v15];
    }

    CGRect v22 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v4, "application"));
    -[VOTElementManager setPreviousTableOrCollectionViewApplication:]( self,  "setPreviousTableOrCollectionViewApplication:",  v22);
  }

  uint64_t v23 = kAXTextEntryTrait | kAXIsEditingTrait;
  if (-[VOTElement doesHaveAllTraits:](v4, "doesHaveAllTraits:", kAXTextEntryTrait | kAXIsEditingTrait)) {
    uint64_t v24 = -[VOTElement shouldIgnoreTextEditingTrait](v4, "shouldIgnoreTextEditingTrait") ^ 1;
  }
  else {
    uint64_t v24 = 0LL;
  }
  double v25 = CGRectGetMidX(self->_lineFrame);
  double v26 = CGRectGetMidY(self->_lineFrame);
  BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v27, "convertPoint:toContextId:", -[VOTElement windowContextId](v4, "windowContextId"), v25, v26);
  double v29 = v28;
  double v31 = v30;

  if ((v24 & 1) != 0 || !-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXTextAreaTrait)) {
    id v32 = 0LL;
  }
  else {
    id v32 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement dataDetectorURL:](v4, "dataDetectorURL:", v29, v31));
  }
  unsigned int v33 = -[VOTElementManager _useLineFrameBoundsForTouch:](self, "_useLineFrameBoundsForTouch:", v4);
  if (-[VOTElement doesHaveAllTraits:](v4, "doesHaveAllTraits:", v23)
    && !-[VOTElement shouldIgnoreTextEditingTrait](v4, "shouldIgnoreTextEditingTrait"))
  {
    elementUnitIndedouble x = -[VOTElement selectedTextRange](v4, "selectedTextRange");
  }

  else
  {
    elementUnitIndedouble x = (id)self->_elementUnitIndex;
    if (elementUnitIndex == (id)-1LL)
    {
      uint64_t v35 = 0LL;
      uint64_t v36 = 0x7FFFFFFFLL;
      goto LABEL_34;
    }
  }

  uint64_t v36 = (uint64_t)-[VOTElement lineRangeForPosition:](v4, "lineRangeForPosition:", elementUnitIndex);
LABEL_34:
  if (v36 != 0x7FFFFFFF)
  {
    int v37 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement attributedValueForRange:](v4, "attributedValueForRange:", v36, v35));
    id v38 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _textAttachmentElementForString:inRange:]( self,  "_textAttachmentElementForString:inRange:",  v37,  0,  [v37 length]));
    if (v38)
    {
      double v39 = v38;
      [v38 performSimpleTap];

      id v14 = 0LL;
      double v13 = 0LL;
      char v11 = "-[VOTExplorerElementManager _nextExplorerElementInDirection:fromElement:didWrap:]" + 15;
LABEL_57:

      goto LABEL_58;
    }
  }

  if (v32) {
    int v40 = 1;
  }
  else {
    int v40 = v33;
  }
  if (v40 == 1)
  {
    unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForIndex:111]);
    [v41 floatValue];
    double v43 = v42;

    -[VOTElement performTapAtPoint:withForce:playSound:]( v4,  "performTapAtPoint:withForce:playSound:",  1LL,  v29,  v31,  v43);
    id v14 = 0LL;
    double v13 = 0LL;
    char v11 = "-[VOTExplorerElementManager _nextExplorerElementInDirection:fromElement:didWrap:]" + 15;
    goto LABEL_57;
  }

  if (-[VOTElement doesHaveAllTraits:](v4, "doesHaveAllTraits:", kAXStaticTextTrait | kAXWebContentTrait))
  {
    id v44 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement previousElement](v4, "previousElement"));
    if ([v44 doesHaveTraits:kAXToggleTrait | kAXRadioButtonTrait])
    {
      double v13 = (void *)objc_claimAutoreleasedReturnValue([v44 toggleStatusLabel]);
      id v14 = v44;
    }

    else
    {
      id v14 = 0LL;
      double v13 = 0LL;
    }
  }

  else
  {
    id v14 = 0LL;
    double v13 = 0LL;
  }

  -[VOTElementManager _performPressOnElement:withEvent:centerPoint:]( self,  "_performPressOnElement:withEvent:centerPoint:",  v4,  v88,  v8,  v10);
  if (!-[VOTElement doesHaveAllTraits:](v4, "doesHaveAllTraits:", v23)
    || -[VOTElement shouldIgnoreTextEditingTrait](v4, "shouldIgnoreTextEditingTrait"))
  {
    if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXStartsMediaSessionTrait))
    {
      double v50 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v50 clearQueue];

      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v51 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_100187988];

      uint64_t v53 = VOTLogCommon(v52);
      id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v98 = v4;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Media Session element : %@", buf, 0xCu);
      }

      self->_lastPressOnMediaSessionElement = CFAbsoluteTimeGetCurrent();
    }

    uint64_t v55 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
    -[VOTElementManager _pressActionResultDelay](self, "_pressActionResultDelay");
    double v58 = v57;
    v95[0] = _NSConcreteStackBlock;
    char v11 = "ementManager _nextExplorerElementInDirection:fromElement:didWrap:]";
    v95[1] = 3221225472LL;
    v95[2] = sub_10007041C;
    v95[3] = &unk_100176DA8;
    v95[4] = self;
    id v96 = v56;
    id v59 = v56;
    AXPerformBlockOnMainThreadAfterDelay(v95, v60, v58);

    goto LABEL_57;
  }

  uint64_t v76 = v24;
  id v77 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  uint64_t v78 = objc_claimAutoreleasedReturnValue(-[VOTElement textInputElement](v4, "textInputElement"));
  if (v78)
  {
    uint64_t v79 = (VOTElement *)v78;
    id v80 = -[VOTElement textInputElementRange](v4, "textInputElementRange");
    id v82 = v81;
  }

  else
  {
    uint64_t v79 = v4;
    unsigned __int8 v83 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](v79, "value"));
    id v82 = [v83 length];

    id v80 = 0LL;
  }

  unsigned int v84 = -[VOTElementManager _updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:]( self,  "_updateCursorAfterPressForElement:currentElementRange:request:didHaveCursor:doesHaveCursor:",  v79,  v80,  v82,  v77,  v76,  1LL);
  -[VOTElementManager sendRequest:](self, "sendRequest:", v77);
  if (v84)
  {
    id v85 = -[VOTElement selectedTextRange](v4, "selectedTextRange");
    -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v85,  v86,  0LL);
  }

  -[VOTElementManager _updateLastFirstResponderChangedTime](self, "_updateLastFirstResponderChangedTime");

  char v11 = "-[VOTExplorerElementManager _nextExplorerElementInDirection:fromElement:didWrap:]" + 15;
LABEL_59:
  if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXLinkTrait))
  {
    id v61 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement linkedElement](v4, "linkedElement"));
    if (v61)
    {
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v61);
      uint64_t v62 = v61;

      id v4 = v62;
    }
  }

  -[VOTElement updateTraits](v4, "updateTraits");
  uint64_t v63 = kAXIsEditingTrait;
  if (-[VOTElement doesHaveAllTraits:](v4, "doesHaveAllTraits:", kAXTextEntryTrait | kAXIsEditingTrait)) {
    -[VOTElementManager _disableQuickNavStateTemporarily](self, "_disableQuickNavStateTemporarily");
  }
  if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXTabButtonTrait))
  {
    uint64_t v64 = v11;
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v4, "application"));
    unsigned __int8 v66 = -[VOTElement isValidForApplication:](v4, "isValidForApplication:", v65);

    if ((v66 & 1) != 0)
    {
      char v11 = v64;
    }

    else
    {
      id v67 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v8, v10);
      uint64_t v68 = v67;
      if (v67 && ([v67 isEqual:v4] & 1) == 0)
      {
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v68);
        unsigned __int8 v69 = v68;

        id v4 = v69;
      }

      char v11 = v64;
    }
  }

  id v70 = -[VOTElement copy](v4, "copy");
  v93[0] = _NSConcreteStackBlock;
  uint64_t v71 = *((void *)v11 + 166);
  v93[1] = v71;
  v93[2] = sub_100070454;
  v93[3] = &unk_100176D38;
  id v72 = v70;
  id v94 = v72;
  AXPerformBlockOnMainThreadAfterDelay(v93, v73, 0.0);
  if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", kAXWebContentTrait))
  {
    v89[0] = _NSConcreteStackBlock;
    v89[1] = v71;
    v89[2] = sub_100070498;
    v89[3] = &unk_100177E90;
    id v90 = v13;
    id v91 = v14;
    unsigned __int8 v92 = self;
    AXPerformBlockOnMainThreadAfterDelay(v89, v74, 0.5);
  }

  if (-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", v87)
    && !-[VOTElement doesHaveTraits:](v4, "doesHaveTraits:", v63))
  {
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", 0LL);
    _NSRange v75 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    objc_msgSend( v75,  "setCursorFrame:",  CGRectZero.origin.x,  CGRectZero.origin.y,  CGRectZero.size.width,  CGRectZero.size.height);
  }

  self->_lastActivationTime = CFAbsoluteTimeGetCurrent();
}

- (void)_disableQuickNavStateTemporarily
{
  uint64_t v3 = VOTLogCommon(self);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1000F1AF4();
  }

  if (GSEventIsHardwareKeyboardAttached())
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    unsigned int v6 = [v5 isQuickNavOn];

    if (v6)
    {
      [(id)VOTSharedWorkspace temporarilyChangeQuickNavState:0];
      -[VOTElementManager _handleQuickNavFeedback:](self, "_handleQuickNavFeedback:", 0LL);
      self->_lastTemporaryQuickNavDisableTime = CFAbsoluteTimeGetCurrent();
    }
  }

- (void)_handlePerformCustomAction:(id)a3
{
  id v4 = a3;
  if (self->_customActionIndex == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_19;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCachedCustomActionCategories](self, "_currentCachedCustomActionCategories"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
  double v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v6, "customActionIndex")));
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 actions]);

  customActionIndedouble x = self->_customActionIndex;
  if ((customActionIndex & 0x8000000000000000LL) != 0
    || customActionIndex >= (unint64_t)[v8 count])
  {

LABEL_19:
    BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    double v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v27 sendEvent:v28];

    goto LABEL_20;
  }

  double v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:self->_customActionIndex]);
  id v11 = -[VOTElement indexPathAsRange](self->_currentElement, "indexPathAsRange");
  uint64_t v13 = v12;
  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_currentElement, "uiElement"));
  [v14 updateCache:2078];

  id v15 = -[VOTElement indexPathAsRange](self->_currentElement, "indexPathAsRange");
  if (v11 != v15 || v13 != v16)
  {
    uint64_t v17 = VOTLogCommon(v15);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      LOWORD(v33) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Custom action has gone to wrong cell!",  (uint8_t *)&v33,  2u);
    }

    double v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement parentTableOrCollectionView](self->_currentElement, "parentTableOrCollectionView"));
    id v20 = v19;
    if (v19)
    {
      CGPoint v21 = (void *)objc_claimAutoreleasedReturnValue([v19 elementAtRow:v11 andColumn:v13]);
      if (([v21 isEqual:self->_currentElement] & 1) == 0)
      {
        uint64_t v22 = VOTLogCommon(-[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v21));
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          int v33 = 138412290;
          unsigned __int8 v34 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Resetting element to %@",  (uint8_t *)&v33,  0xCu);
        }
      }
    }
  }

  [v10 activationPoint];
  if (CGPointZero.x == v25 && CGPointZero.y == v24)
  {
    unsigned __int8 v26 = [v10 performWithContext:self];
  }

  else
  {
    currentElement = self->_currentElement;
    [v10 activationPoint];
    unsigned __int8 v26 = -[VOTElement performTapAtPoint:withForce:playSound:]( currentElement,  "performTapAtPoint:withForce:playSound:",  0LL);
  }

  unsigned __int8 v30 = v26;
  double v31 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
  [v31 sendEvent:v32];

  if ((v30 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_20:
}

- (void)_handlePerformAudiographAction:(id)a3
{
  if (AXDeviceSupportsSonification(self))
  {
    id v22 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager availableAudiographActionsForElement:]( self,  "availableAudiographActionsForElement:",  self->_currentElement));
    if ([v22 containsObject:self->_audiographActionIdentifier])
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      audiographActionIdentifier = self->_audiographActionIdentifier;
      double v7 = off_1001AC148;
      double v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
      id v9 = sub_10004A988(v7, @"search.rotor.audiograph.describe.chart", v8);
      double v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      LODWORD(audiographActionIdentifier) = -[NSString isEqualToString:]( audiographActionIdentifier,  "isEqualToString:",  v10);

      if ((_DWORD)audiographActionIdentifier)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement chartStructureDescription](self->_currentElement, "chartStructureDescription"));
        [v5 speakSimpleString:v11];

LABEL_14:
        return;
      }

      uint64_t v12 = self->_audiographActionIdentifier;
      uint64_t v13 = off_1001AC148;
      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
      id v15 = sub_10004A988(v13, @"search.rotor.audiograph.chart.details", v14);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      LOBYTE(v12) = -[NSString isEqualToString:](v12, "isEqualToString:", v16);

      uint64_t v17 = self->_audiographActionIdentifier;
      uint64_t v18 = off_1001AC148;
      double v19 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](self->_currentElement, "language"));
      id v20 = sub_10004A988(v18, @"search.rotor.audiograph.play.sonification", v19);
      CGPoint v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      LODWORD(v17) = -[NSString isEqualToString:](v17, "isEqualToString:", v21);

      if ((_DWORD)v17)
      {
        goto LABEL_14;
      }
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v4 sendEvent:v5];
    goto LABEL_14;
  }

- (BOOL)_shouldSendTapStraightToSystem
{
  return 0;
}

- (void)_handleSimpleTap:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v5 & 1) == 0)
  {
    uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v5 & 1) == 0) {
      uint64_t v5 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  13016LL,  "-[VOTElementManager _handleSimpleTap:]",  @"must be on element manager or system event thread");
    }
  }

  if (AXDeviceIsTV(v5))
  {
    if ([v4 origin] == (id)4
      || [v4 origin] == (id)5
      || [v4 origin] == (id)6)
    {
      if (-[VOTElementManager isItemChooserVisible](self, "isItemChooserVisible")) {
        -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
      }
      else {
        -[VOTElementManager __handleTVSelectButtonClicked](self, "__handleTVSelectButtonClicked");
      }
      goto LABEL_44;
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
    unsigned __int8 v15 = [v14 ignoreLogging];

    if ((v15 & 1) != 0) {
      goto LABEL_44;
    }
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v17 = AXLoggerForFacility(v16);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);

    os_log_type_t v18 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled(v11, v18))
    {
      uint64_t v19 = AXColorizeFormatLog(2LL, @"TV simple tap not from keyboard or Braille. ignoring");
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = _AXStringForArgs(v20);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)buf = 138543362;
        id v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v11, v18, "%{public}@", buf, 0xCu);
      }
    }

- (void)_handleAutomationGeneratedTouchUpEvent:(id)a3
{
  id v4 = a3;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v4 objectForIndex:114]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  [v5 removeObjectForKey:v13];

  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  double v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allKeys]);
  id v8 = [v7 count];

  if (v8)
  {
    -[VOTElementManager _handleAutomationGeneratedChordChangeEvent:]( self,  "_handleAutomationGeneratedChordChangeEvent:",  v4);
  }

  else
  {
    [v4 touchPoint];
    double v10 = v9;
    double v12 = v11;

    -[VOTElementManager _sendAutomationTouchCommand:location:]( self,  "_sendAutomationTouchCommand:location:",  6LL,  v10,  v12);
  }
}

- (void)_handleAutomationGeneratedTouchDownEvent:(id)a3
{
  id v4 = a3;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v4 objectForIndex:114]);
  [v4 touchPoint];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  [v6 setObject:v5 forKey:v14];

  double v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allKeys]);
  id v9 = [v8 count];

  if ((unint64_t)v9 < 2)
  {
    [v4 touchPoint];
    double v11 = v10;
    double v13 = v12;

    -[VOTElementManager _sendAutomationTouchCommand:location:]( self,  "_sendAutomationTouchCommand:location:",  1LL,  v11,  v13);
  }

  else
  {
    -[VOTElementManager _handleAutomationGeneratedChordChangeEvent:]( self,  "_handleAutomationGeneratedChordChangeEvent:",  v4);
  }
}

- (void)_handleAutomationGeneratedTouchMoveEvent:(id)a3
{
  id v4 = a3;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v4 objectForIndex:114]);
  [v4 touchPoint];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  [v6 setObject:v5 forKey:v11];

  [v4 touchPoint];
  double v8 = v7;
  double v10 = v9;

  -[VOTElementManager _sendAutomationTouchCommand:location:]( self,  "_sendAutomationTouchCommand:location:",  2LL,  v8,  v10);
}

- (void)_handleAutomationGeneratedTouchCancelEvent:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  [v5 removeAllObjects];

  [v4 touchPoint];
  double v7 = v6;
  double v9 = v8;

  -[VOTElementManager _sendAutomationTouchCommand:location:](self, "_sendAutomationTouchCommand:location:", 8LL, v7, v9);
}

- (void)_handleAutomationGeneratedChordChangeEvent:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
  [v4 touchPoint];
  double v6 = (void *)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation touchRepresentationWithHandType:location:]( &OBJC_CLASS___AXEventRepresentation,  "touchRepresentationWithHandType:location:",  5LL));
  [v6 setSenderID:0x8000000817319377];
  double v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager fingersFromTouchCommands](self, "fingersFromTouchCommands"));
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allKeys]);

  uint64_t v12 = 0LL;
  double v13 = &v12;
  uint64_t v14 = 0x3032000000LL;
  unsigned __int8 v15 = sub_10005EA98;
  uint64_t v16 = sub_10005EAA8;
  id v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100071400;
  v11[3] = &unk_100178B28;
  v11[4] = self;
  v11[5] = &v12;
  [v8 enumerateObjectsUsingBlock:v11];
  uint64_t v9 = v13[5];
  double v10 = (void *)objc_claimAutoreleasedReturnValue([v6 handInfo]);
  [v10 setPaths:v9];

  [v5 sendHIDSystemEvent:v6 senderID:0x8000000817319377];
  _Block_object_dispose(&v12, 8);
}

- (void)_sendAutomationTouchCommand:(unsigned int)a3 location:(CGPoint)a4
{
  double y = a4.y;
  double x = a4.x;
  uint64_t v6 = *(void *)&a3;
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
  double v7 = (void *)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation touchRepresentationWithHandType:location:]( &OBJC_CLASS___AXEventRepresentation,  "touchRepresentationWithHandType:location:",  v6,  x,  y));
  [v7 setSenderID:0x8000000817319377];
  [v8 sendHIDSystemEvent:v7 senderID:0x8000000817319377];
}

- (void)_handleSimulatedForceTouchEvent:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastEventCommand](self, "lastEventCommand", a3));
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandSimulatedForceTouch];

  if (v5 && self->_didPeekEvent)
  {
    double v6 = AXForceTouchThresholdPeek();
    int v7 = 1;
    double v8 = AXForceTouchThresholdPop();
  }

  else
  {
    double v6 = 20.0;
    double v8 = AXForceTouchThresholdPeek();
    int v7 = 0;
  }

  id v16 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v9 = [v16 windowContextId];
  [v16 centerPoint];
  if (v6 < v8)
  {
    double v12 = v10;
    double v13 = v11;
    do
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
      objc_msgSend(v14, "postFingerTouchAtPoint:withForce:withContextId:", v9, v12, v13, v6);

      usleep(0x1388u);
      double v6 = v6 + 20.0;
    }

    while (v6 < v8);
  }

  double v15 = 3.0;
  if (v7) {
    double v15 = 0.5;
  }
  -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_simulatedForceLiftTimer, "dispatchAfterDelay:", v15);
  self->_didPeekEvent = v7 ^ 1;
}

- (void)_handleWatchWakeTap:(id)a3
{
  id v4 = a3;
  uint64_t v5 = AXLogTapticTime();
  double v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v9 = 138412290;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "_handleWatchWakeTap: %@", (uint8_t *)&v9, 0xCu);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unsigned int v8 = [v7 voiceOverTapticTimeMode];

  if (v8)
  {
    -[VOTElementManager _handleUnmuteEligibleEventOccured](self, "_handleUnmuteEligibleEventOccured");
    -[VOTElementManager _handleScreenOn](self, "_handleScreenOn");
  }
}

- (void)_handleWatchWakeDoubleTap:(id)a3
{
  id v3 = a3;
  uint64_t v4 = AXLogTapticTime();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "_handleWatchWakeDoubleTap: %@",  (uint8_t *)&v6,  0xCu);
  }
}

- (void)_handleWatchWakeTripleTap:(id)a3
{
  id v3 = a3;
  uint64_t v4 = AXLogTapticTime();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "_handleWatchWakeTripleTap: %@",  (uint8_t *)&v6,  0xCu);
  }
}

- (void)_handleActivateHomeButton:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 activateHomeButton];
}

- (BOOL)_canActivateTapticTime
{
  return 0;
}

- (void)_simulatedForceTouchLift
{
  if (!self->_isInPreview)
  {
    if (-[NSMutableArray count](self->_touchEventElements, "count"))
    {
      unint64_t v3 = 0LL;
      do
      {
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](self->_touchEventElements, "objectAtIndex:", v3));
        id v5 = [v4 windowContextId];
        int v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXBackBoardServer server](&OBJC_CLASS___AXBackBoardServer, "server"));
        id v7 = [v6 contextIdHostingContextId:v5];

        [v4 centerPoint];
        double v9 = v8;
        double v11 = v10;
        double v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
        objc_msgSend(v12, "postFingerLiftAtPoint:withContextId:", v5, v9, v11);

        double v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
        objc_msgSend(v13, "postFingerLiftAtPoint:withContextId:", v7, v9, v11);

        ++v3;
      }

      while ((unint64_t)-[NSMutableArray count](self->_touchEventElements, "count") > v3);
    }

    self->_didPeekEvent = 0;
    -[NSMutableArray removeAllObjects](self->_touchEventElements, "removeAllObjects");
  }

  -[SCRCTargetSelectorTimer cancel](self->_simulatedForceLiftTimer, "cancel");
}

- (void)_handleToggleMute:(id)a3
{
}

- (void)_handleToggleRotationCapability:(id)a3
{
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration", a3));
  id v13 = (id)objc_claimAutoreleasedReturnValue([v3 preferenceForKey:@"DeviceRotation"]);

  if (v13) {
    uint64_t v4 = [v13 BOOLValue] ^ 1;
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  [v5 setRotationCapabilityEnabled:v4];

  int v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  if ((_DWORD)v4) {
    id v7 = @"rotation.capability.on";
  }
  else {
    id v7 = @"rotation.capability.off";
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, v6);
  double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_10000BBB0(v9, 0, v6);

  double v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
  [v11 setPreference:v12 forKey:@"DeviceRotation"];
}

- (void)_handleToggleScreenCurtain:(id)a3
{
}

- (void)_handleToggleSoundCurtain:(id)a3
{
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned int v4 = [v3 voiceOverSoundCurtain];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverSoundCurtain:v4 ^ 1];

  int v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v11 = v6;
  if (v4) {
    id v7 = @"soundcurtain.off";
  }
  else {
    id v7 = @"soundcurtain.on";
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, v6);
  double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_10000BBB0(v9, 0, v11);
}

- (void)_handleToggleCaptionPanel:(id)a3
{
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned int v4 = [v3 enableVoiceOverCaptions];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setEnableVoiceOverCaptions:v4 ^ 1];

  int v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v11 = v6;
  if (v4) {
    id v7 = @"vocaptions.off";
  }
  else {
    id v7 = @"vocaptions.on";
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, v6);
  double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_10000BBB0(v9, 0, v11);
}

- (void)_handleStartSiri:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 activateSiri];
}

- (void)_handlePerformHomeButtonPress:(id)a3
{
  id v4 = a3;
  if ([v4 origin] == (id)4 || objc_msgSend(v4, "origin") == (id)5) {
    -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", 7LL);
  }
}

- (void)_postBrailleHomeButtonPress
{
}

- (void)_reallySimulateLongPressForElement:(id)a3
{
  id v3 = a3;
  id v4 = [v3 windowContextId];
  [v3 visiblePoint];
  double Center = v6;
  double v8 = v5;
  if (v6 == -1.0 && v5 == -1.0)
  {
    id v10 = [v3 centerPoint];
    if (v11 == -1.0 && v12 == -1.0)
    {
      [v3 frame];
      double Center = AX_CGRectGetCenter(v16, v17, v18, v19);
      double v8 = v20;
      uint64_t v22 = VOTLogElement(v21);
      double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_1000F1B9C(v15, Center, v8);
      }
    }

    else
    {
      double Center = v11;
      double v8 = v12;
      uint64_t v14 = VOTLogElement(v10);
      double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG)) {
        sub_1000F1C1C(v15, Center, v8);
      }
    }
  }

  id v23 = [v3 displayId];
  v24.n128_f64[0] = Center;
  v25.n128_f64[0] = v8;
  double v26 = AXConvertPointFromHostedCoordinates(v4, v23, v24, v25);
  double v28 = v27;
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v29, "postFingerTouchAtPoint:withForce:withContextId:", v4, v26, v28, 0.0);

  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_100071FE8;
  v31[3] = &unk_100178B48;
  *(double *)&v31[4] = v26;
  *(double *)&v31[5] = v28;
  int v32 = (int)v4;
  AXPerformBlockOnMainThreadAfterDelay(v31, v30, 1.0);
}

- (BOOL)_handleSimulatedLongPress:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidBeginPassthrough](&OBJC_CLASS___VOSOutputEvent, "DidBeginPassthrough"));
  [v4 sendEvent:v5];

  double v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v6 doesHaveTraits:kAXWebContentTrait])
  {
    [v6 centerPoint];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:"));
  }

  else
  {
    id v7 = 0LL;
  }

  if ([v6 attemptToShowContextMenuWithTargetPointValue:v7])
  {
    -[VOTElementManager setLastAttemptToShowContextMenuTime:]( self,  "setLastAttemptToShowContextMenuTime:",  CFAbsoluteTimeGetCurrent());
    -[VOTElementManager setLastElementForAttemptToShowContextMenu:]( self,  "setLastElementForAttemptToShowContextMenu:",  v6);
  }

  else
  {
    -[VOTElementManager _reallySimulateLongPressForElement:](self, "_reallySimulateLongPressForElement:", v6);
  }

  return 1;
}

- (void)_handleDuckingDisabling:(id)a3
{
  id v4 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(v4, v6);
  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v14 = VOTLogCommon(isKindOfClass);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000F1C9C();
    }
    goto LABEL_8;
  }

  unsigned int v8 = [(id)VOTSharedWorkspace duckingTemporarilyDisabled];
  if (v8 != [v4 BOOLValue])
  {
    id v9 = -[VOTElementManager setLastDuckingDisablementSessionStart:]( self,  "setLastDuckingDisablementSessionStart:",  CFAbsoluteTimeGetCurrent());
    uint64_t v10 = VOTLogCommon(v9);
    double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 138412290;
      id v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Temporarily disabling ducking: %@",  (uint8_t *)&v15,  0xCu);
    }

    id v12 = [v4 BOOLValue];
    [(id)VOTSharedWorkspace setDuckingTemporarilyDisabled:v12];
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    -[os_log_s updateAudioSessionProperties](v13, "updateAudioSessionProperties");
LABEL_8:
  }
}

- (void)_handlePauseSpeechAndHapticsNotification:(id)a3
{
  id v4 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(v4, v6);
  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v14 = VOTLogCommon(isKindOfClass);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000F1CFC();
    }
    goto LABEL_9;
  }

  unsigned int v8 = [(id)VOTSharedWorkspace pauseSpeechAndHaptics];
  if (v8 != [v4 BOOLValue])
  {
    id v9 = -[VOTElementManager setLastPauseSpeechAndHapticsStart:]( self,  "setLastPauseSpeechAndHapticsStart:",  CFAbsoluteTimeGetCurrent());
    uint64_t v10 = VOTLogCommon(v9);
    double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v15 = 138412290;
      id v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Temporarily pausing speech and haptics: %@",  (uint8_t *)&v15,  0xCu);
    }

    id v12 = [v4 BOOLValue];
    [(id)VOTSharedWorkspace setPauseSpeechAndHaptics:v12];
    if ([(id)VOTSharedWorkspace pauseSpeechAndHaptics])
    {
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      -[os_log_s stopSpeakingAtBoundary:](v13, "stopSpeakingAtBoundary:", 0LL);
LABEL_9:
    }
  }
}

- (void)_handleAudiographSelectedSeriesChangedNotification:(id)a3
{
  id v3 = a3;
  if (AXDeviceSupportsSonification(v3))
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v3, v5);
    if ((isKindOfClass & 1) != 0)
    {
      id v7 = [v3 integerValue];
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXMDataSonifier sharedInstance](&OBJC_CLASS___AXMDataSonifier, "sharedInstance"));
      [v8 setCurrentSeriesIndex:v7];
    }

    else
    {
      uint64_t v9 = VOTLogCommon(isKindOfClass);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000F1D5C();
      }
    }
  }
}

- (void)_handleAudiographPlaybackStateNotification:(id)a3
{
  unsigned int v3 = [a3 BOOLValue];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTAudiographManager sharedManager](&OBJC_CLASS___VOTAudiographManager, "sharedManager"));
  id v5 = v4;
  if (v3) {
    [v4 play];
  }
  else {
    [v4 pause];
  }
}

- (void)_handleContextMenuStatusNotification:(id)a3
{
  id v4 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  -[VOTElementManager lastAttemptToShowContextMenuTime](self, "lastAttemptToShowContextMenuTime");
  if (Current - v7 < 1.0)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v4, v8);
    if ((isKindOfClass & 1) != 0)
    {
      if (![v4 intValue])
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager lastElementForAttemptToShowContextMenu]( self,  "lastElementForAttemptToShowContextMenu"));
        -[VOTElementManager _reallySimulateLongPressForElement:](self, "_reallySimulateLongPressForElement:", v10);
      }
    }

    else
    {
      uint64_t v11 = VOTLogCommon(isKindOfClass);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        sub_1000F1DBC();
      }
    }
  }
}

- (id)_currentElementAtCenterPointOfElement:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  [v3 centerPoint];
  double v6 = v5;
  double v8 = v7;
  id v9 = [v3 windowContextId];

  objc_msgSend(v4, "convertPoint:fromContextId:", v9, v6, v8);
  double v11 = v10;
  double v13 = v12;

  return -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", v11, v13);
}

- (void)_simulatedPressOutputTimer:(id)a3
{
  id v25 = a3;
  id v4 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  unsigned int v5 = [v25 doesHaveTraits:kAXKeyboardKeyTrait];
  unsigned int v6 = [v25 doesHaveTraits:kAXStartsMediaSessionTrait];
  unsigned int v7 = [v25 useElementAtPositionAfterActivation];
  int v8 = v5 | v6;
  if (((v5 | v6) & 1) == 0)
  {
    [v25 updateLabel];
    [v25 updateHint];
    [v25 updateRoleDescription];
  }

  [v25 updateTraits];
  [v25 updateValue];
  [v25 updateEquivalenceTag];
  [v25 updateExpandedStatus];
  if ([v25 doesHaveTraits:kAXWebContentTrait])
  {
    [v25 updateRoleDescription];
    unsigned int v9 = [v25 isValid];
  }

  else
  {
    double v10 = (void *)objc_claimAutoreleasedReturnValue([v25 application]);
    unsigned int v9 = [v25 isValidForApplication:v10];
  }

  if ((v9 ^ 1 | v7) != 1)
  {
    uint64_t v14 = 4LL;
    goto LABEL_16;
  }

  double v11 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentElementAtCenterPointOfElement:]( self,  "_currentElementAtCenterPointOfElement:",  v25));
  double v12 = (void *)objc_claimAutoreleasedReturnValue([v25 equivalenceTag]);
  double v13 = (void *)objc_claimAutoreleasedReturnValue([v11 equivalenceTag]);
  if (v7)
  {
    if (([v11 isValid] & 1) == 0)
    {
LABEL_14:
      unsigned int v9 = [v25 isAlive] & (v7 ^ 1);
      uint64_t v14 = 4LL;
      goto LABEL_15;
    }
  }

  else if (v12 && ![v12 isEqualToString:v13])
  {
    goto LABEL_14;
  }

  id v15 = v11;

  -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v15);
  uint64_t v14 = 0LL;
  unsigned int v9 = 1;
  id v25 = v15;
LABEL_15:

LABEL_16:
  if ([v25 doesHaveTraits:kAXToggleTrait])
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v25 roleDescription]);
    BOOL v17 = [v16 length] == 0;
  }

  else
  {
    BOOL v17 = 0;
  }

  if (([v25 doesHaveTraits:kAXIsEditingTrait] & 1) == 0
    && ([v25 doesHaveTraits:kAXWebInteractiveVideoTrait] & 1) == 0
    && ((v9 ^ 1) & 1) == 0)
  {
    if (v17)
    {
      double v18 = (void *)objc_claimAutoreleasedReturnValue([v25 toggleStatusLabel]);
      id v19 = [v4 addString:v18];
    }

    else
    {
      double v20 = (void *)objc_claimAutoreleasedReturnValue([v25 value]);
      id v21 = [v20 length];

      else {
        uint64_t v22 = v14 | 0x1000;
      }
      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v25,  v4,  v22);
    }
  }

  if (((v6 | [v25 doesHaveTraits:kAXDeleteKeyTrait]) & 1) == 0
    && [v4 containsActions]
    && [v25 isEqual:self->_currentElement])
  {
    [v4 setRequestQueueMixinBehavior:&stru_100178B88];
    -[VOTElementManager sendRequest:](self, "sendRequest:", v4);
  }

  if (((v8 ^ 1 | v6) & 1) == 0)
  {
    [v25 updateLabel];
    [v25 updateHint];
    [v25 updateRoleDescription];
  }

  id v23 = (void *)VOTSharedWorkspace;
  __n128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
  [v23 refreshBraille:0 rotorSelection:v24];
}

- (void)_handlePressActionResultAtTime:(id)a3
{
  double lastScreenChangeNotificationTime = self->_lastScreenChangeNotificationTime;
  [a3 doubleValue];
  if (lastScreenChangeNotificationTime <= v5)
  {
    self->_double lastScreenChangeNotificationTime = -3061152000.0;
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    unsigned int v7 = v6;
    if (v6)
    {
      if ([v6 doesHaveTraits:kAXLaunchIconTrait])
      {
        int v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
        [v8 setCursorFrameForElement:0];
      }

      else
      {
        -[VOTElementManager _resetDirectInteractionCache](self, "_resetDirectInteractionCache");
        double Current = CFAbsoluteTimeGetCurrent();
        if (Current - self->_lastFirstResponderChangeTime >= 0.25
          || (double v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager")),
              unsigned __int8 v11 = [v10 isSpeaking],
              v10,
              (v11 & 1) == 0))
        {
          if (![v7 doesHaveTraits:kAXKeyboardKeyTrait]
            || Current - self->_lastAnnouncementNotificationTime >= 0.25
            && [v7 doesHaveTraits:kAXButtonTrait]
            && Current - self->_lastValueChangeTime >= 0.25)
          {
            [v14 stopSpeakingAtBoundary:0];
            [v7 delayBeforeUpdatingOnActivation];
            if (v12 <= 0.0)
            {
              -[VOTElementManager _simulatedPressOutputTimer:](self, "_simulatedPressOutputTimer:", v7);
            }

            else
            {
              double v13 = v12;
              -[SCRCTargetSelectorTimer cancel](self->_simulatedPressOutputTimer, "cancel");
              -[SCRCTargetSelectorTimer dispatchAfterDelay:withObject:]( self->_simulatedPressOutputTimer,  "dispatchAfterDelay:withObject:",  v7,  v13);
            }
          }
        }
      }
    }
  }

- (void)_handleScreenLock:(id)a3
{
  id v22 = a3;
  [(id)VOTSharedWorkspace screenLockOccurred];
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  if ((objc_opt_isKindOfClass(v22, v5) & 1) != 0)
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:@"isUserLocked"]);
    unsigned int v7 = [v6 BOOLValue];

    int v8 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:@"playLockSound"]);
    unsigned int v9 = [v8 BOOLValue];

    int v10 = v9 ^ 1;
  }

  else
  {
    unsigned int v7 = 0;
    int v10 = 0;
  }

  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v11 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_100187988];

  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement iosSystemAppApplication](&OBJC_CLASS___VOTElement, "iosSystemAppApplication"));
  unsigned int v13 = [v12 isSystemSleeping];

  if (v13)
  {
    if (![(id)VOTSharedWorkspace isRingerSwitchSilent]
      || self->_lastEventOccurredTime > self->_lastSilencedAlertTime
      || ([(id)VOTSharedWorkspace lastLockButtonPressTime], v14 > self->_lastSilencedAlertTime))
    {
      if (([(id)VOTSharedWorkspace soundEffectsEnabled] & 1) == 0)
      {
        id v17 = sub_10004A988(off_1001AC148, @"screen.locked.message", 0LL);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v17);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
        id v18 = sub_10000BBB0(v15, 0, v16);
        goto LABEL_12;
      }

      if (([(id)VOTSharedWorkspace isRingerSwitchSilent] | v10 | v7) == 1)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        id v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ScreenDidTurnOff](&OBJC_CLASS___VOSOutputEvent, "ScreenDidTurnOff"));
        [v15 sendEvent:v16];
LABEL_12:
      }
    }
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v19 setCursorFrameForElement:0];

  -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", 0LL);
  -[VOTElementManager hideVisualRotor](self, "hideVisualRotor");
  -[VOTElementManager _resetElementLabel](self, "_resetElementLabel");
  double v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager previousTableOrCollectionViewList](self, "previousTableOrCollectionViewList"));
  [v20 removeAllObjects];

  id v21 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewToMetadata]( self,  "previousTableOrCollectionViewToMetadata"));
  [v21 removeAllObjects];

  -[VOTElementManager setPreviousTableOrCollectionViewApplication:]( self,  "setPreviousTableOrCollectionViewApplication:",  0LL);
  self->_systemIsSleeping = 1;
  -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
  [(id)VOTSharedWorkspace setScreenOn:0 silently:1];
}

- (BOOL)_flashlightNotificationsEnabled
{
  return 0;
}

- (void)observeValueForKeyPath:(id)a3 ofObject:(id)a4 change:(id)a5 context:(void *)a6
{
  v6.receiver = self;
  v6.super_class = (Class)&OBJC_CLASS___VOTElementManager;
  -[VOTElementManager observeValueForKeyPath:ofObject:change:context:]( &v6,  "observeValueForKeyPath:ofObject:change:context:",  a3,  a4,  a5,  a6);
}

- (void)_handleScreenUnlock
{
  self->_lastExternalUnlockTime = CFAbsoluteTimeGetCurrent();
}

- (void)refreshBraille
{
  int64_t v2 = (void *)VOTSharedWorkspace;
  id v3 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
  [v2 refreshBraille:0 rotorSelection:v3];
}

- (id)_currentResponder
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v3 doesHaveTraits:kAXKeyboardKeyTrait])
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(-[VOTElement firstResponderElement](self->_lastApplication, "firstResponderElement"));
    id v5 = v3;
    id v3 = (void *)v4;
  }

  else
  {
    objc_super v6 = (void *)objc_claimAutoreleasedReturnValue([v3 textInputElement]);
    id v5 = v6;
    if (v6)
    {
      id v5 = v6;

      id v3 = v5;
    }
  }

  return v3;
}

- (void)_handleNextTextOperationInDirection:(int64_t)a3 withEvent:(id)a4
{
  id v27 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentResponder](self, "_currentResponder", a3, a4));
  objc_super v6 = v27;
  if ([v27 doesHaveTraits:kAXWebContentTrait])
  {
    objc_super v6 = (void *)objc_claimAutoreleasedReturnValue([v27 textOperationsOperator]);
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 textOperations]);
  int64_t selectedTextOperation = self->_selectedTextOperation;
  if (a3 == 2) {
    int64_t v9 = selectedTextOperation - 1;
  }
  else {
    int64_t v9 = selectedTextOperation + 1;
  }
  self->_int64_t selectedTextOperation = v9;
  int v10 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _currentCachedCustomActionCategories]( self,  "_currentCachedCustomActionCategories"));
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ax_firstObjectUsingBlock:", &stru_100178BC8));

  id v12 = [v7 count];
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 actions]);
  uint64_t v14 = (uint64_t)v12 + (void)[v13 count];

  int64_t v15 = self->_selectedTextOperation;
  if (v15 < 0)
  {
    int64_t v15 = v14 - 1;
    goto LABEL_10;
  }

  if (v15 >= v14)
  {
    int64_t v15 = 0LL;
LABEL_10:
    self->_int64_t selectedTextOperation = v15;
  }

  if (v14 >= 1 && v15 < v14)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    unint64_t v17 = self->_selectedTextOperation;
    if (v17 >= (unint64_t)[v7 count])
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v11 actions]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v21,  "objectAtIndex:",  self->_selectedTextOperation - (void)objc_msgSend(v7, "count")));

      [v18 prepareWithContext:self];
      uint64_t v22 = objc_claimAutoreleasedReturnValue([v18 language]);

      id v23 = (void *)objc_claimAutoreleasedReturnValue([v18 name]);
      id v16 = (void *)v22;
LABEL_55:

      id v26 = sub_10000BBB0(v23, 0, v16);
      self->_flags.tapShouldHandleTextOperation = 1;

      goto LABEL_56;
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndex:self->_selectedTextOperation]);
    if ([v18 isEqualToString:kAXTextOperationActionCopy])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.copy";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionScanText])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.scan.text";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionCut])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.cut";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionPaste])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.paste";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionSelect])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.select";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionSelectAll])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.selectAll";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionDelete])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.delete";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionReplace])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.replace";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionDefine])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.define";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionShare])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.share";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionBold])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.bold";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionItalics])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.italic";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionUnderline])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.underline";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionUndo])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.undo";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionRedo])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.redo";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionSpeak])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.speak";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionSpeakSentence])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.speak.sentence";
    }

    else if ([v18 isEqualToString:kAXTextOperationActionSpeakSpellOut])
    {
      id v19 = off_1001AC148;
      double v20 = @"text.operation.speak.spell.out";
    }

    else
    {
      if (![v18 isEqualToString:kAXTextOperationActionWritingTools])
      {
        if ([v18 rangeOfString:@"AXTextOperationAction"] != (id)0x7FFFFFFFFFFFFFFFLL)
        {
          id v23 = 0LL;
          goto LABEL_55;
        }

        id v25 = v18;
        id v18 = v25;
        goto LABEL_54;
      }

      id v19 = off_1001AC148;
      double v20 = @"text.operation.writing.tools";
    }

    id v24 = sub_10004AE68(v19, v20, 0LL, v16);
    id v25 = (id)objc_claimAutoreleasedReturnValue(v24);
LABEL_54:
    id v23 = v25;
    goto LABEL_55;
  }

- (void)_handlePerformTextOperation:(id)a3
{
  id v20 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentResponder](self, "_currentResponder", a3));
  uint64_t v4 = v20;
  if ([v20 doesHaveTraits:kAXWebContentTrait])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v20 textOperationsOperator]);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCachedCustomActionCategories](self, "_currentCachedCustomActionCategories"));
  objc_super v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ax_firstObjectUsingBlock:", &stru_100178BE8));

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 textOperations]);
  unint64_t selectedTextOperation = self->_selectedTextOperation;
  if (selectedTextOperation < (unint64_t)[v7 count])
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 objectAtIndex:self->_selectedTextOperation]);
    if (v9)
    {
      int v10 = (void *)v9;
      [v4 performTextOperation:v9];
      unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidSelectAutofill](&OBJC_CLASS___VOSOutputEvent, "DidSelectAutofill"));
      [v11 sendEvent:v12];

LABEL_9:
      goto LABEL_10;
    }
  }

  int64_t v13 = self->_selectedTextOperation;
  unint64_t v14 = v13 - (void)[v7 count];
  int64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 actions]);
  id v16 = [v15 count];

  if (v14 >= (unint64_t)v16
    || (unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 actions]),
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectAtIndex:v14]),
        v17,
        unsigned __int8 v19 = [v18 performWithContext:self],
        v18,
        (v19 & 1) == 0))
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v10 sendEvent:v11];
    goto LABEL_9;
  }

- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5
{
}

- (void)_outputSelectionDifference:(_NSRange)a3 oldRange:(_NSRange)a4 string:(id)a5 language:(id)a6
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  NSUInteger v9 = a3.length;
  int v10 = (char *)a3.location;
  id v12 = a5;
  id v13 = a6;
  unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  if (!(v9 | length)) {
    goto LABEL_51;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v53 = self;
  if (v9 && Current - self->_performedTextSelectionOperation < 0.25) {
    goto LABEL_4;
  }
  id v18 = &v10[-location];
  if ((unint64_t)v10 >= location)
  {
    if ((unint64_t)v10 <= location)
    {
      unint64_t v17 = location + length;
      if ((unint64_t)&v10[v9] <= location + length)
      {
        if ((unint64_t)&v10[v9] < v17)
        {
          id v18 = (char *)(length - v9);
          uint64_t v52 = @"element.unselected.text";
          unint64_t v17 = (unint64_t)&v10[v9];
          goto LABEL_20;
        }

        unint64_t v17 = 0LL;
        id v18 = 0LL;
      }

      else
      {
        id v18 = (char *)(v9 - length);
      }

      uint64_t v52 = @"element.selected.text";
    }

    else
    {
      if (!length && v9)
      {
LABEL_4:
        uint64_t v52 = @"element.selected.text";
        unint64_t v17 = (unint64_t)v10;
        id v18 = (char *)v9;
        goto LABEL_20;
      }

      uint64_t v52 = @"element.unselected.text";
      unint64_t v17 = location;
    }
  }

  else
  {
    else {
      id v18 = (char *)v9;
    }
    uint64_t v52 = @"element.selected.text";
    unint64_t v17 = (unint64_t)v10;
  }

- (id)determineActivityForElement:(id)a3
{
  return 0LL;
}

- (int64_t)modifierKeyChoiceForElement:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager determineActivityForElement:](self, "determineActivityForElement:", a3));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 modifierKeys]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 modifierKeys]);
    id v6 = [v5 integerValue];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    id v6 = [v5 voiceOverKeyboardModifierChoice];
  }

  int64_t v7 = (int64_t)v6;

  return v7;
}

- (BOOL)determineSceneDetectionsEnabled:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager determineActivityForElement:](self, "determineActivityForElement:", v4));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 imageDescriptions]);

  if (v6)
  {
    int64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 imageDescriptions]);
    unsigned __int8 v8 = [v7 BOOLValue];
  }

  else
  {
    NSUInteger v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace imageCaptioningDisabledApps]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);
    unsigned __int8 v12 = [v9 containsObject:v11];

    if ((v12 & 1) != 0) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = [(id)VOTSharedWorkspace imageCaptionsEnabled];
    }
  }

  return v8;
}

- (BOOL)determineFullImageDescriptionsEnabled:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager determineActivityForElement:](self, "determineActivityForElement:", v4));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 imageDescriptions]);

  if (v6)
  {
    int64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 imageDescriptions]);
    unsigned __int8 v8 = [v7 BOOLValue];
  }

  else
  {
    NSUInteger v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace imageCaptioningDisabledApps]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleIdentifier]);
    unsigned __int8 v12 = [v9 containsObject:v11];

    if ((v12 & 1) != 0) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = [(id)VOTSharedWorkspace imageCaptionsEnabled];
    }
  }

  return v8;
}

- (BOOL)speakTableRowAndColumnForElement:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager determineActivityForElement:](self, "determineActivityForElement:", a3));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 tableRowAndColumn]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 tableRowAndColumn]);
    unsigned __int8 v6 = [v5 BOOLValue];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v6 = [v5 voiceOverSpeakTableColumnRowInformation];
  }

  BOOL v7 = v6;

  return v7;
}

- (BOOL)speakTableHeadersForElement:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager determineActivityForElement:](self, "determineActivityForElement:", a3));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 tableHeaders]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 tableHeaders]);
    unsigned __int8 v6 = [v5 BOOLValue];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v6 = [v5 voiceOverSpeakTableHeaders];
  }

  BOOL v7 = v6;

  return v7;
}

- (BOOL)_prepareElementOutputHeaders:(id)a3 currentElement:(id)a4 request:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([v8 supportsHeaderElementOutput]
    && -[VOTElementManager speakTableHeadersForElement:](self, "speakTableHeadersForElement:", v8))
  {
    if ([v8 containedIn:2] && objc_msgSend(v9, "containedIn:", 2))
    {
      unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "headerElementsForRow:", objc_msgSend(v8, "rowRange")));
      if ([v11 containsObject:v8])
      {

        unsigned __int8 v11 = &__NSArray0__struct;
      }

      unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "headerElementsForColumn:", objc_msgSend(v8, "columnRange")));
      if ([v12 containsObject:v8])
      {

        unsigned __int8 v11 = &__NSArray0__struct;
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 arrayByAddingObjectsFromArray:v12]);
      unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "headerElementsForRow:", objc_msgSend(v9, "rowRange")));

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "headerElementsForColumn:", objc_msgSend(v9, "columnRange")));
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 arrayByAddingObjectsFromArray:v15]);
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 headerElements]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 headerElements]);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v13 count]));
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v19 = v13;
    id v20 = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v28;
      do
      {
        for (uint64_t i = 0LL; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void *)(*((void *)&v27 + 1) + 8LL * (void)i);
        }

        id v21 = [v19 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }

      while (v21);
    }

    id v25 = [v18 count];
    BOOL v17 = v25 != 0LL;
    if (v25) {
      [v10 setElementHeadersForOutput:v18];
    }
  }

  else
  {
    BOOL v17 = 0;
  }

  return v17;
}

- (id)_sonarElementFromPoint:(CGPoint)a3 inForwardDirection:(BOOL)a4 limit:(int64_t)a5
{
  BOOL v6 = a4;
  double y = a3.y;
  double x = a3.x;
  double v9 = *((double *)&xmmword_1001AD170 + 1);
  double v10 = *(double *)&xmmword_1001AD170;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v12 = sub_10004A018();
  int v13 = v12;
  int64_t v14 = 0LL;
  double v15 = v10 + -10.0;
  uint64_t v16 = kAXStatusBarElementTrait;
  uint64_t v17 = kAXSpacerTrait;
  id v46 = v52;
  double v11 = v9 / 12.0;
  if (v6) {
    double v18 = (v11 + v11) / 12.0;
  }
  else {
    double v18 = -((v11 + v11) / 12.0);
  }
  if (v6) {
    double v19 = v10 / 12.0;
  }
  else {
    double v19 = -(v10 / 12.0);
  }
  if (v6) {
    double v10 = 0.0;
  }
  int64_t v49 = a5;
  while (1)
  {
    BOOL v20 = y <= v9 + -10.0;
    if (!v6) {
      BOOL v20 = y >= 10.0;
    }
    if (!v20)
    {
LABEL_53:
      id v23 = 0LL;
      goto LABEL_54;
    }

    id v21 = objc_autoreleasePoolPush();
    BOOL v22 = x <= v15;
    if (!v6) {
      BOOL v22 = x >= 10.0;
    }
    if (v22) {
      break;
    }
    objc_autoreleasePoolPop(v21);
LABEL_50:
    if (v49 < 1 || v14 <= v49)
    {
      double x = v10;
      if (CFAbsoluteTimeGetCurrent() - Current <= 3.0) {
        continue;
      }
    }

    goto LABEL_53;
  }

  context = v21;
  id v23 = 0LL;
  do
  {
    uint64_t v24 = v23;
    id v23 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", x, y);

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 bundleIdentifier]);
    unsigned __int8 v26 = [v25 isEqualToString:@"com.apple.assistivetouchd"];

    if ((v26 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v28 = VOTLogElement(v27);
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v23 bundleIdentifier]);
      *(_DWORD *)buf = 138412290;
      double v54 = *(double *)&v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "element %@", buf, 0xCu);
    }

    if (v13)
    {
      id v31 = [v23 isTouchContainer];
      if ((_DWORD)v31)
      {
        id v32 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement touchContainer](self->_lastValidElement, "touchContainer"));
        unsigned __int8 v33 = [v32 isEqual:v23];

        if ((v33 & 1) != 0)
        {
          uint64_t v34 = 0LL;
        }

        else
        {
          if (v6) {
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v23 firstContainedElement]);
          }
          else {
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v23 lastContainedElement]);
          }
          uint64_t v34 = v35;
          if (objc_msgSend(v35, "isEqual:", v23, v46))
          {

            ++v14;
            id v23 = 0LL;
            goto LABEL_42;
          }
        }

        id v23 = v34;
      }
    }

    uint64_t v36 = VOTLogElement(v31);
    int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218498;
      double v54 = x;
      __int16 v55 = 2048;
      double v56 = y;
      __int16 v57 = 2114;
      int64_t v58 = (int64_t)v23;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "Sonar: {%f, %f} = %{public}@",  buf,  0x20u);
    }

    if ((![v23 doesHaveTraits:v16] || !v6)
      && (objc_msgSend(v23, "doesHaveTraits:", v17, v46) & 1) == 0)
    {
      id v38 = [v23 isBannerNotification];
      if (!(_DWORD)v38 || !v6)
      {
        if (v23)
        {
          objc_autoreleasePoolPop(context);
          goto LABEL_54;
        }

        goto LABEL_41;
      }

      uint64_t v39 = VOTLogElement(v38);
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG)) {
        sub_1000F1F84(&v51, v46, v40);
      }
    }

LABEL_41:
    id v23 = 0LL;
    ++v14;
    double y = v18 + y;
LABEL_42:
    double x = v19 + x;
    BOOL v41 = x <= v15;
    if (!v6) {
      BOOL v41 = x >= 10.0;
    }
  }

  while (v41);
  objc_autoreleasePoolPop(context);
  if (!v23) {
    goto LABEL_50;
  }
LABEL_54:
  uint64_t v42 = VOTLogElement(v12);
  double v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    CFAbsoluteTime v45 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)buf = 138543874;
    double v54 = *(double *)&v23;
    __int16 v55 = 2048;
    double v56 = v45 - Current;
    __int16 v57 = 2048;
    int64_t v58 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "found sonar element: %{public}@ - %f[%ld]",  buf,  0x20u);
  }

  return v23;
}

- (id)_sonarElementInForwardDirection:(BOOL)a3 limit:(int64_t)a4
{
  return -[VOTElementManager _sonarElementFromPoint:inForwardDirection:limit:]( self,  "_sonarElementFromPoint:inForwardDirection:limit:",  a3,  a4,  self->_fingerLocation.x,  self->_fingerLocation.y);
}

- (void)_setNearestElementMovingForward:(BOOL)a3
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _sonarElementInForwardDirection:limit:]( self,  "_sonarElementInForwardDirection:limit:",  a3,  -1LL));
  id v5 = (void *)v4;
  if (self->_inUnitTestingMode)
  {
    id v9 = (id)v4;
    BOOL v6 = self->_currentElement;

    id v5 = v6;
  }

  id v10 = v5;
  if (v5)
  {
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v5, 0LL);
    -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v10);
    self->_flags.focusIsOnElement = 1;
  }

  else
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v7 sendEvent:v8];
  }
}

- (BOOL)_moveElementToFlowTo:(id)a3
{
  id v4 = a3;
  unsigned int v5 = [v4 doesHaveTraits:kAXWebContentTrait];
  unsigned int v6 = [v4 doesHaveTraits:kAXTableIndexTrait];
  if ((v5 & 1) != 0 || v6)
  {
    if (v6) {
      [v4 updateFlowToElements];
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 flowToElements]);
    id v9 = [v8 count];
    BOOL v7 = v9 != 0LL;
    if (v9)
    {
      id v10 = [v8 indexOfObjectPassingTest:&stru_100178C50];
      if (v10 == (id)0x7FFFFFFFFFFFFFFFLL) {
        double v11 = 0LL;
      }
      else {
        double v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndex:v10]);
      }
      unint64_t elementSearchGeneration = self->_elementSearchGeneration;
      id v13 = [v11 selectedTextRange];
      double v15 = (void *)objc_claimAutoreleasedReturnValue( +[VOTElementFetchFoundData fetchFoundData:forceUpdate:direction:generation:range:searchType:]( &OBJC_CLASS___VOTElementFetchFoundData,  "fetchFoundData:forceUpdate:direction:generation:range:searchType:",  v11,  0LL,  1LL,  elementSearchGeneration,  v13,  v14,  0LL));
      -[VOTElementManager _elementFetchFoundElement:](self, "_elementFetchFoundElement:", v15);

      if (v5)
      {
        if (!self->_flowFromElements)
        {
          uint64_t v16 = (NSMutableDictionary *)[objc_allocWithZone(NSMutableDictionary) init];
          flowFromElements = self->_flowFromElements;
          self->_flowFromElements = v16;
        }

        v21[0] = [v11 nonPersistentUniqueId];
        v21[1] = v18;
        double v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue value:withObjCType:](&OBJC_CLASS___NSValue, "value:withObjCType:", v21, "{?=QQ}"));
        -[NSMutableDictionary setObject:forKey:](self->_flowFromElements, "setObject:forKey:", v4, v19);
      }
    }
  }

  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (void)_handleMoveToElementAbove:(id)a3
{
}

- (void)_handleMoveToElementBelow:(id)a3
{
}

- (void)_handleElementMovement:(id)a3
{
  id v4 = a3;
  if (![(id)VOTSharedWorkspace tvInteractionMode])
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v35 = [v34 voiceOverUseTVToggleStyleNavigation];

    if ((v35 & 1) == 0) {
      -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  85LL,  0LL,  0LL);
    }
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
    unsigned int v37 = [v36 isEqualToString:kVOTEventCommandPreviousElement];

    if (v37)
    {
      id v38 = self;
      uint64_t v39 = 3LL;
    }

    else
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
      unsigned int v41 = [v40 isEqualToString:kVOTEventCommandNextElement];

      if (!v41) {
        goto LABEL_26;
      }
      id v38 = self;
      uint64_t v39 = 1LL;
    }

    -[VOTElementManager __sendTVRemoteCommand:](v38, "__sendTVRemoteCommand:", v39);
    goto LABEL_26;
  }

  -[VOTElementManager setLastElementChangeAction:](self, "setLastElementChangeAction:", 2LL);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  id v6 = [v5 isEqualToString:kVOTEventCommandNextElement];

  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandPreviousElement];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  unsigned int v10 = [v9 isEqualToString:kVOTEventCommandFirstElement];

  double v11 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  unsigned int v12 = [v11 isEqualToString:kVOTEventCommandLastElement];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  unsigned int v14 = [v13 isEqualToString:kVOTEventCommandCenterElement];

  double v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  unsigned int v16 = v6 | v8;
  if (self->_inTextProcessingRotorMode)
  {
    if (v16)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForIndex:119]);
      unsigned int v79 = v6 | v8;
      unsigned int v18 = v14;
      double v19 = self;
      id v20 = v4;
      unsigned int v21 = v10;
      unsigned int v22 = v8;
      id v23 = v6;
      unsigned int v24 = v12;
      id v25 = v15;
      unsigned __int8 v26 = v17;
      unsigned __int8 v27 = [v17 BOOLValue];

      double v15 = v25;
      unsigned int v12 = v24;
      id v6 = v23;
      unsigned int v8 = v22;
      unsigned int v10 = v21;
      id v4 = v20;
      self = v19;
      unsigned int v14 = v18;
      unsigned int v16 = v79;
      if ((v27 & 1) == 0)
      {
        if (-[VOTElementManager _inMisspelledWordRotor](self, "_inMisspelledWordRotor"))
        {
          -[VOTElementManager _handleMisspelledWordRotorAction:](self, "_handleMisspelledWordRotorAction:", v6);
        }

        else if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)6)
        {
          -[VOTElementManager _handleTextRotorSelectionAction:](self, "_handleTextRotorSelectionAction:", v6);
        }

        goto LABEL_18;
      }
    }
  }

  if (!self->_flags.focusIsOnElement || (id v28 = [v15 isValid], (v28 & 1) == 0))
  {
    -[VOTElementManager _setNearestElementMovingForward:](self, "_setNearestElementMovingForward:", v6);
    goto LABEL_18;
  }

  if ((v10 | v12) == 1)
  {
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v15 remoteParent]);
    if (v29 && [v15 remoteParentIsViewHost])
    {
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v15 isolatedWindow]);
      id v31 = v15;
      id v32 = v30;
      if (!v30) {
        __int128 v30 = v29;
      }
      unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue([v30 application]);

      double v15 = v31;
    }

    else
    {
      unsigned __int8 v33 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
    }

    if (-[VOTElementManager _isShowingTodayViewForPhone](self, "_isShowingTodayViewForPhone"))
    {
      currentApplications = self->_currentApplications;
      if (v10)
      {
        uint64_t v51 = objc_claimAutoreleasedReturnValue(-[NSArray firstObject](currentApplications, "firstObject"));

        unsigned __int8 v33 = (void *)v51;
LABEL_51:
        __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v33 firstContainedElement]);
        int64_t v56 = 2LL;
        goto LABEL_57;
      }

      uint64_t v57 = objc_claimAutoreleasedReturnValue(-[NSArray lastObject](currentApplications, "lastObject"));

      unsigned __int8 v33 = (void *)v57;
    }

    else if (v10)
    {
      goto LABEL_51;
    }

    else {
      uint64_t v58 = objc_claimAutoreleasedReturnValue([v33 lastContainedElement]);
    }
    __int16 v55 = (void *)v58;
    int64_t v56 = 1LL;
LABEL_57:
    self->_flags.lastElementMovement = v56;
    if ([v55 isEqual:v15])
    {
      id v59 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v59 sendEvent:v60];

      id v61 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v55,  v61,  0x800000LL);
      -[VOTElementManager sendRequest:](self, "sendRequest:", v61);
    }

    else
    {
      else {
        uint64_t v62 = 2LL;
      }
      v82[0] = _NSConcreteStackBlock;
      v82[1] = 3221225472LL;
      v82[2] = sub_1000754D0;
      v82[3] = &unk_100176DA8;
      v82[4] = self;
      id v63 = v55;
      id v83 = v63;
      [v63 scrollToElementForDirectional:v62 withCompletion:v82];
      -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v63, 0LL);
      fetchManager = self->_fetchManager;
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      -[VOTElementFetcher updateCacheWithElement:](fetchManager, "updateCacheWithElement:", v65);
    }

    goto LABEL_18;
  }

  if (!v16)
  {
    if (!v14) {
      goto LABEL_18;
    }
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[VOTEvent touchEventWithCommand:info:]( &OBJC_CLASS___VOTEvent,  "touchEventWithCommand:info:",  kVOTEventCommandTracking,  0LL));
    [(id)VOTSharedWorkspace convertDevicePointToZoomedPoint:sub_10004AFD4(0.5)];
    objc_msgSend(v52, "setTouchPoint:");
    uint64_t v53 = objc_alloc(&OBJC_CLASS___VOTElement);
    [v52 touchPoint];
    double v54 = -[VOTElement initWithPosition:](v53, "initWithPosition:");
    if (v54
      || (double v54 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _sonarElementInForwardDirection:limit:]( self,  "_sonarElementInForwardDirection:limit:",  1LL,  10LL))) != 0LL || (double v54 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _sonarElementInForwardDirection:limit:]( self,  "_sonarElementInForwardDirection:limit:",  0LL,  10LL))) != 0LL)
    {
      -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v54, 0LL);
    }

- (void)_handleRealtimeElementMovement:(id)a3
{
  id v19 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 realtimeElements]);

  if ([v5 count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v19 command]);
    unsigned int v7 = [v6 isEqualToString:kVOTEventCommandNextRealtimeElement];

    unsigned int v8 = (char *)[v5 indexOfObject:self->_currentElement];
    if (v8 == (char *)0x7FFFFFFFFFFFFFFFLL)
    {
      if ((v7 & 1) != 0) {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 firstObject]);
      }
      else {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 lastObject]);
      }
      unsigned int v10 = (void *)v9;
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v9);
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v18 setCursorFrameForElement:v10];
    }

    else
    {
      if (v7) {
        unsigned int v12 = v8 + 1;
      }
      else {
        unsigned int v12 = v8 - 1;
      }
      unint64_t v13 = (unint64_t)[v5 count] + (void)v12;
      unint64_t v14 = v13 % (unint64_t)[v5 count];
      double v15 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:v14]);
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v15);

      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:v14]);
      [v16 setCursorFrameForElement:v17];

      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:v14]);
    }

    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v10, v19);
  }

  else
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    double v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v10 sendEvent:v11];
  }
}

- (void)_handleShowEditingHUD:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidBeginPassthrough](&OBJC_CLASS___VOSOutputEvent, "DidBeginPassthrough"));
  [v4 sendEvent:v5];

  id v7 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 application]);
  [v6 showEditingHUD];
}

- (void)_handleVerticalMovement:(id)a3 direction:(int64_t)a4
{
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend( v14,  "convertRect:fromContextId:",  -[VOTElement windowContextId](self->_currentElement, "windowContextId"),  v7,  v9,  v11,  v13);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;

  double Center = AX_CGRectGetCenter(v16, v18, v20, v22);
  double v25 = v24;
  unsigned __int8 v26 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_100075A84;
  v43[3] = &unk_100178C78;
  v43[4] = self;
  unsigned __int8 v27 = objc_retainBlock(v43);
  if ((unint64_t)(v26 - 1) > 1)
  {
    if ((unint64_t)(v26 - 3) <= 1)
    {
      v44.origin.double x = v16;
      v44.origin.double y = v18;
      v44.size.CGFloat width = v20;
      v44.size.CGFloat height = v22;
      if (v25 > CGRectGetMinY(v44) - v22)
      {
        else {
          double v38 = 25.0;
        }
        else {
          double v39 = 50.0;
        }
        do
        {
          v45.origin.double x = v16;
          v45.origin.double y = v18;
          v45.size.CGFloat width = v20;
          v45.size.CGFloat height = v22;
          if (v25 >= v22 + CGRectGetMaxY(v45)) {
            break;
          }
          while (Center >= 0.0 && Center <= *(double *)&xmmword_1001AD170)
          {
            double Center = v39 + Center;
          }

          double v25 = v38 + v25;
          v46.origin.double x = v16;
          v46.origin.double y = v18;
          v46.size.CGFloat width = v20;
          v46.size.CGFloat height = v22;
        }

        while (v25 > CGRectGetMinY(v46) - v22);
      }
    }

    goto LABEL_46;
  }

  double v28 = Center + -75.0;
  double v29 = Center + 75.0;
  if (Center <= Center + -75.0 || Center >= v29)
  {
LABEL_46:
    unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v41 sendEvent:v42];

    goto LABEL_47;
  }

  else {
    double v31 = 25.0;
  }
  else {
    double v32 = 50.0;
  }
  double v33 = *((double *)&xmmword_1001AD170 + 1);
  while (v25 < 0.0 || v25 > v33)
  {
LABEL_25:
    double Center = v31 + Center;
    if (Center <= v28 || Center >= v29) {
      goto LABEL_46;
    }
  }

  double v35 = v25;
  while ((((uint64_t (*)(void *, double, double))v27[2])(v27, Center, v35) & 1) == 0)
  {
    double v35 = v32 + v35;
    double v33 = *((double *)&xmmword_1001AD170 + 1);
  }

- (id)webCustomRotorDictionary:(id)a3 direction:(int64_t)a4 forElement:(id)a5
{
  id v8 = a3;
  id v9 = a5;
  double v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v11 = v9;
  uint64_t v12 = kAXIsEditingTrait;
  id v13 = v11;
  if (([v11 doesHaveTraits:kAXIsEditingTrait] & 1) == 0)
  {
    unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", v11));
    double v15 = v14;
    id v13 = v11;
    if (v14)
    {
      id v13 = v14;
    }
  }

  if ([v13 doesHaveTraits:v12])
  {
    [v10 setObject:v8 forKeyedSubscript:@"uuid"];
    double v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    [v10 setObject:v16 forKeyedSubscript:@"currentItem"];

    double v17 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"currentItem"]);
    [v17 setObject:v13 forKeyedSubscript:@"targetElement"];

    double v18 = (void *)objc_claimAutoreleasedReturnValue([v13 textMarkerRangeForSelection]);
    if ([v18 count] == (id)2)
    {
      double v19 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"currentItem"]);
      [v19 setObject:v18 forKeyedSubscript:@"targetRange"];
    }

    double v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4 == 1));
    [v10 setObject:v20 forKeyedSubscript:@"direction"];
  }

  return v10;
}

- (BOOL)_customRotorTypeRequiresFirstElementProcessing:(id)a3
{
  return [a3 isEqualToString:@"AXCustomSystemRotorTypeMisspelledWord"];
}

- (void)_handlePublicCustomRotorMovement:(id)a3 direction:(int64_t)a4
{
  unint64_t v6 = -[VOTRotor publicCustomRotorIndex](self->_elementRotor, "publicCustomRotorIndex", a3);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTRotor customPublicRotors](self->_elementRotor, "customPublicRotors"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ((v6 & 0x8000000000000000) == 0 && v6 < (unint64_t)[v7 count])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v6]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"uuid"]);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v6]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"element"]);

    if (v12)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v6]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"element"]);

      id v8 = (void *)v14;
    }

    double v15 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v6]);
    double v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"name"]);
    unsigned int v17 = -[VOTElementManager _customRotorTypeRequiresFirstElementProcessing:]( self,  "_customRotorTypeRequiresFirstElementProcessing:",  v16);

    if (v17)
    {
      if ([v8 doesHaveTraits:kAXKeyboardKeyTrait])
      {
        double v18 = (void *)objc_claimAutoreleasedReturnValue([v8 textInputElement]);
        if (v18
          || (double v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement firstResponderElement](self->_lastApplication, "firstResponderElement"))) != 0LL)
        {
          id v19 = v18;

          id v8 = v19;
        }
      }
    }

    if ([v8 doesHaveTraits:kAXWebContentTrait])
    {
      double v20 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager webCustomRotorDictionary:direction:forElement:]( self,  "webCustomRotorDictionary:direction:forElement:",  v10,  a4,  v8));
      double v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"currentItem"]);
      id v22 = (id)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"targetElement"]);

      if (v22) {
        goto LABEL_20;
      }
    }

    else
    {
      double v20 = 0LL;
    }

    id v22 = v8;
    if (![v22 doesHaveTraits:kAXIsEditingTrait]
      || ([v22 doesHaveTraits:kAXStaticTextTrait] & 1) != 0
      || (id v25 = [v22 selectedTextRange], v25 == (id)0x7FFFFFFF))
    {
      NSUInteger location = self->_highlightedCharacterRange.location;
      NSUInteger length = self->_highlightedCharacterRange.length;
    }

    else
    {
      NSUInteger location = (NSUInteger)v25;
      NSUInteger length = v26;
    }

    uint64_t v29 = objc_claimAutoreleasedReturnValue( +[VOTElement customPublicRotorDictionaryForRotorId:startRange:direction:]( &OBJC_CLASS___VOTElement,  "customPublicRotorDictionaryForRotorId:startRange:direction:",  v10,  location,  length,  a4));

    double v20 = (void *)v29;
LABEL_20:
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v8 customPublicRotorResultWithItem:v20 startElement:v22]);
    uint64_t v57 = (void *)v10;
    uint64_t v58 = v30;
    if ([(id)VOTSharedWorkspace inUnitTestMode])
    {
      double v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"targetElement"]);
    }

    else
    {
      double v32 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"targetElement"]);
      double v33 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v32));
      double v31 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v33));

      __int128 v30 = v58;
    }

    if ([v31 isRemoteElement])
    {
      uint64_t v34 = objc_claimAutoreleasedReturnValue([v31 elementForAttribute:3009]);

      double v31 = (void *)v34;
    }

    __int128 valuePtr = xmmword_100132600;
    uint64_t v36 = (const __AXValue *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"targetRange"]);
    if (v36)
    {
      CFTypeID TypeID = AXValueGetTypeID();
      if (TypeID == CFGetTypeID(v36))
      {
        AXValueGetValue(v36, kAXValueTypeCFRange, &valuePtr);
LABEL_32:
        uint64_t v40 = 0LL;
        goto LABEL_33;
      }
    }

    uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSValue, v35);
    if ((objc_opt_isKindOfClass(v36, v38) & 1) != 0)
    {
      uint64_t v40 = 0LL;
      *(void *)&__int128 valuePtr = -[__AXValue rangeValue](v36, "rangeValue");
      *((void *)&valuePtr + 1) = v41;
    }

    else
    {
      uint64_t v42 = objc_opt_class(&OBJC_CLASS___NSArray, v39);
      if ((objc_opt_isKindOfClass(v36, v42) & 1) == 0) {
        goto LABEL_32;
      }
      uint64_t v40 = v36;
    }

- (void)_moveFocusToUpdatedRange:(_NSRange)a3 element:(id)a4 searchType:(int64_t)a5
{
  NSUInteger length = a3.length;
  id location = (id)a3.location;
  id v41 = a4;
  else {
    objc_msgSend(v41, "boundsForRange:", location, length);
  }
  double v13 = v9;
  double v14 = v10;
  double v15 = v11;
  double v16 = v12;
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v17, "convertRect:fromContextId:", objc_msgSend(v41, "windowContextId"), v13, v14, v15, v16);
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;

  self->_lineFrame.origin.double x = v19;
  self->_lineFrame.origin.double y = v21;
  self->_lineFrame.size.CGFloat width = v23;
  self->_lineFrame.size.CGFloat height = v25;
  self->_highlightedCharacterRange.id location = (NSUInteger)location;
  self->_highlightedCharacterRange.NSUInteger length = length;
  unsigned int v26 = [v41 doesHaveTraits:kAXIsEditingTrait];
  if (v26)
  {
    id v27 = v41;
    if (a5 == 5)
    {
      double v28 = (void *)objc_claimAutoreleasedReturnValue([v41 value]);
      id location = [v28 wordFromPosition:location inDirection:1];
      NSUInteger length = v29;

      id v27 = v41;
    }

    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  location,  length,  v27,  1LL);
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    double v31 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent InsertionPointDidMove](&OBJC_CLASS___VOSOutputEvent, "InsertionPointDidMove"));
    [v30 sendEvent:v31];
  }

  v45.origin.double x = CGRectZero.origin.x;
  v45.origin.double y = CGRectZero.origin.y;
  v45.size.CGFloat width = CGRectZero.size.width;
  v45.size.CGFloat height = CGRectZero.size.height;
  v42.origin.double x = v19;
  v42.origin.double y = v21;
  v42.size.CGFloat width = v23;
  v42.size.CGFloat height = v25;
  BOOL v32 = CGRectEqualToRect(v42, v45);
  double v33 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  uint64_t v34 = v33;
  if (v32) {
    [v33 setCursorFrameForElement:v41];
  }
  else {
    objc_msgSend(v33, "setCursorFrame:", v19, v21, v23, v25);
  }

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v41 value]);
  if (length == 1) {
    uint64_t v36 = 1LL;
  }
  else {
    uint64_t v36 = 2LL;
  }
  -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:]( self,  "outputTextSegmentForRange:string:element:usePhonetics:segment:",  location,  length,  v35,  v41,  length == 1,  v36);

  if ([v41 isReadingContent])
  {
    self->_bookLineRange.id location = (NSUInteger)location;
    self->_bookLineRange.NSUInteger length = length;
    self->_int64_t bookCursorPosition = (int64_t)location;
    v43.origin.double x = v19;
    v43.origin.double y = v21;
    v43.size.CGFloat width = v23;
    v43.size.CGFloat height = v25;
    double MidX = CGRectGetMidX(v43);
    v44.origin.double x = v19;
    v44.origin.double y = v21;
    v44.size.CGFloat width = v23;
    v44.size.CGFloat height = v25;
    self->_int64_t bookLineNumber = (int64_t)objc_msgSend(v41, "lineNumberForPoint:", MidX, CGRectGetMidY(v44));
  }

  if (location == (id)0x7FFFFFFFFFFFFFFFLL) {
    char v38 = 1;
  }
  else {
    char v38 = v26;
  }
  if ((v38 & 1) == 0)
  {
    objc_msgSend( (id)VOTSharedWorkspace,  "setSuppressSelectionChangeNotificationCount:",  (char *)objc_msgSend((id)VOTSharedWorkspace, "suppressSelectionChangeNotificationCount") + 1);
    -[VOTElementManager _setSelectedTextRange:onElement:refreshBraille:]( self,  "_setSelectedTextRange:onElement:refreshBraille:",  location,  0LL,  v41,  0LL);
    id v39 = [v41 selectedTextRange];
    -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v39,  v40,  0LL);
  }

  self->_cursorBorderHitCount = 0LL;
}

- (void)_handleValidatedCustomActionMovementThroughActions:(id)a3 forEvent:(id)a4 inDirection:(int64_t)a5
{
  id v8 = a3;
  id v9 = a4;
  double v10 = (char *)[v8 count];
  double v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472LL;
  unsigned int v26 = sub_1000768E0;
  id v27 = &unk_100178CA0;
  id v11 = v9;
  id v28 = v11;
  NSUInteger v29 = self;
  double v12 = objc_retainBlock(&v24);
  if (a5 == 1) {
    uint64_t v13 = 1LL;
  }
  else {
    uint64_t v13 = -1LL;
  }
  double v14 = v10 - 1;
  do
  {
    customActionIndedouble x = self->_customActionIndex;
    if (customActionIndex == 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v16 = (unint64_t)v14;
      if (a5 == 1)
      {
        unint64_t v16 = 0LL;
        self->_customActionIndedouble x = 0LL;
        goto LABEL_10;
      }
    }

    else
    {
      unint64_t v16 = customActionIndex + v13;
    }

    self->_customActionIndedouble x = v16;
    if ((v16 & 0x8000000000000000LL) != 0) {
      break;
    }
LABEL_10:
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:self->_customActionIndex]);
    int v18 = ((uint64_t (*)(void ***, void *))v12[2])(v12, v17);
  }

  while (!v18);
  customActionIdentifier = self->_customActionIdentifier;
  self->_customActionIdentifier = 0LL;

  unint64_t v20 = self->_customActionIndex;
  if ((v20 & 0x8000000000000000) != 0 || v20 >= (unint64_t)[v8 count])
  {
    self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
  }

  else
  {
    double v21 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:self->_customActionIndex]);
    double v22 = (NSString *)objc_claimAutoreleasedReturnValue([v21 identifier]);
    double v23 = self->_customActionIdentifier;
    self->_customActionIdentifier = v22;
  }
}

- (id)_customActionsAddingDragCancelActionIfNecessaryForActions:(id)a3
{
  return a3;
}

- (id)_currentCachedCustomActionCategories
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement cachedCustomRotorActions](self->_currentElement, "cachedCustomRotorActions"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement organizedActionsByCategory:](&OBJC_CLASS___VOTElement, "organizedActionsByCategory:", v3));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _customActionsAddingDragCancelActionIfNecessaryForActions:]( self,  "_customActionsAddingDragCancelActionIfNecessaryForActions:",  v4));

  return v5;
}

- (id)_currentCustomActions
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
  id v4 = [v3 customActionIndex];
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCustomActionCategory](self, "_currentCustomActionCategory"));
  id v6 = [v5 count];

  if (v4 >= v6)
  {
    double v10 = 0LL;
  }

  else
  {
    double v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCustomActionCategory](self, "_currentCustomActionCategory"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v8, "customActionIndex")));
    double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 actions]);
  }

  return v10;
}

- (id)_currentCustomActionCategory
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customRotorActions](self->_currentElement, "customRotorActions"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement organizedActionsByCategory:](&OBJC_CLASS___VOTElement, "organizedActionsByCategory:", v3));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _customActionsAddingDragCancelActionIfNecessaryForActions:]( self,  "_customActionsAddingDragCancelActionIfNecessaryForActions:",  v4));

  return v5;
}

- (void)_handleCustomRotorContent:(id)a3 direction:(int64_t)a4
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customContent](self->_currentElement, "customContent", a3));
  if (![v6 count]) {
    goto LABEL_21;
  }
  double v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  customContentIndedouble x = self->_customContentIndex;
  if (customContentIndex)
  {
    if (a4 == 2 && customContentIndex == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_5;
    }
LABEL_7:
    id v9 = (char *)[v6 count];
    if ((char *)customContentIndex == v9 - 1)
    {
      if (a4 != 1)
      {
        id v9 = (char *)[v6 count];
        unint64_t v11 = (unint64_t)(v9 - 1);
        goto LABEL_15;
      }
    }

    else if (a4 != 1 || self->_customContentIndex != 0x7FFFFFFFFFFFFFFFLL)
    {
      id v9 = (char *)[v6 count];
      unint64_t v11 = (unint64_t)(v9 - 1);
      if (a4 == 1)
      {
        uint64_t v12 = 1LL;
        goto LABEL_16;
      }

- (id)_customActionDefaultActionString
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXWebInteractiveVideoTrait))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_currentElement, "uiElement"));
    [v4 updateCache:2179];

    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_currentElement, "uiElement"));
    LODWORD(v4) = [v5 BOOLWithAXAttribute:2179];

    id v6 = off_1001AC148;
    if ((_DWORD)v4) {
      double v7 = @"web.interactive.video.pause.action";
    }
    else {
      double v7 = @"web.interactive.video.play.action";
    }
  }

  else
  {
    id v6 = off_1001AC148;
    double v7 = @"activate.action";
  }

  id v8 = sub_10004AE68(v6, v7, 0LL, v3);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

- (void)_handleCustomRotorAction:(id)a3 direction:(int64_t)a4
{
  id v5 = a3;
  id v17 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentCustomActions](self, "_currentCustomActions"));
  -[VOTElementManager _handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:]( self,  "_handleValidatedCustomActionMovementThroughActions:forEvent:inDirection:");

  id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  if (self->_customActionIndex != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectAtIndex:"));
    [v9 prepareWithContext:self];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
    if (!v6) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 language]);
    }
    goto LABEL_9;
  }

  if (![v17 count])
  {
    id v8 = 0LL;
    goto LABEL_11;
  }

  if (!self->_flags.itemChooserVisible || !-[VOTElement isInTableCell](self->_currentElement, "isInTableCell"))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _customActionDefaultActionString](self, "_customActionDefaultActionString"));
    id v10 = sub_10004AE68(off_1001AC148, @"default.action.suffix", 0LL, v6);
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v9));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v11));
    [v12 setAttribute:&__kCFBooleanTrue forKey:UIAccessibilityTokenLowPitch];
    [v8 appendAXAttributedString:v12];

LABEL_9:
    goto LABEL_11;
  }

  id v7 = sub_10004AE68(off_1001AC148, @"item.chooser.default.action", 0LL, v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
LABEL_11:
  -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
  unint64_t v13 = objc_opt_new(&OBJC_CLASS___VOTOutputRequest);
  id v14 = -[VOTOutputRequest addString:withLanguage:](v13, "addString:withLanguage:", v8, v6);
  -[VOTOutputRequest setBrailleType:](v13, "setBrailleType:", 1LL);
  -[VOTOutputRequest setGeneratesBraille:](v13, "setGeneratesBraille:", 1LL);
  double v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](v13, "outputActions"));
  int64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 lastObject]);
  [v16 setObject:&__kCFBooleanTrue forVariant:76];

  -[VOTOutputRequest send](v13, "send");
}

- (id)availableAudiographActionsForElement:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (AXDeviceSupportsSonification(v4))
  {
    id v5 = off_1001AC148;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 language]);
    id v7 = sub_10004A988(v5, @"search.rotor.audiograph.describe.chart", v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v4 addObject:v8];

    if ([v3 supportsAudiographs])
    {
      id v9 = off_1001AC148;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 language]);
      id v11 = sub_10004A988(v9, @"search.rotor.audiograph.play.sonification", v10);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      [v4 addObject:v12];
    }
  }

  id v13 = [v4 copy];

  return v13;
}

- (void)_handleAudiographAction:(int64_t)a3 event:(id)a4
{
  if (AXDeviceSupportsSonification(self))
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager availableAudiographActionsForElement:]( self,  "availableAudiographActionsForElement:",  self->_currentElement));
    if ([v15 count])
    {
      unint64_t v6 = (unint64_t)[v15 count];
      id v7 = self->_audiographActionIdentifier;
      id v8 = [v15 indexOfObject:v7];
      if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v9 = 0LL;
      }

      else
      {
        if (a3 == 1) {
          uint64_t v10 = 1LL;
        }
        else {
          uint64_t v10 = -1LL;
        }
        unint64_t v9 = ((unint64_t)v8 + v6 + v10) % v6;
      }

      id v11 = (NSString *)objc_claimAutoreleasedReturnValue([v15 objectAtIndexedSubscript:v9]);
      audiographActionIdentifier = self->_audiographActionIdentifier;
      self->_audiographActionIdentifier = v11;

      -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
      id v13 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      id v14 = sub_10000BBB0(self->_audiographActionIdentifier, 0, v13);
    }
  }

- (void)_handleToggleLiveRegionCommand:(id)a3
{
}

- (void)_handleToggleLiveRegions:(int64_t)a3
{
  id v4 = -[VOTElementManager _appInfoForCurrentElement](self, "_appInfoForCurrentElement", a3);
  unint64_t v6 = v5;
  id v7 = v4;
  id v8 = v6;
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement webAreaURL](self->_currentElement, "webAreaURL"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 host]);

  uint64_t v12 = VOTLogCommon(v11);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478083;
    id v32 = v4;
    __int16 v33 = 2113;
    uint64_t v34 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Toggling live region for: %{private}@ %{private}@",  buf,  0x16u);
  }

  id v14 = v8;
  id v15 = v7;
  if ([v10 length])
  {
    id v16 = v10;

    id v14 = v16;
    id v15 = v14;
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 liveRegionStatusForWebOrApp:v15]);

  id v19 = &__kCFBooleanFalse;
  unint64_t v20 = off_1001AC148;
  unsigned int v21 = [v19 BOOLValue];
  id v22 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  if (v21) {
    id v23 = @"search.rotor.toggle.live.regions.on";
  }
  else {
    id v23 = @"search.rotor.toggle.live.regions.off";
  }
  id v24 = sub_10004AE68(v20, v23, 0LL, v22);
  id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

  uint64_t v26 = AXCFormattedString(v25, @"%@");
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", v14));
  id v29 = sub_10000BBB0(v27, 0, v28);

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v30 setLiveRegionStatusForWebOrApp:v15 status:v19];
}

- ($0B56E7081CBE040606E62B6BB81BA072)_appInfoForCurrentElement
{
  if (!-[VOTElement isInStatusBar](self->_currentElement, "isInStatusBar")
    || (id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"))) == 0LL)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
    if (!v3) {
      id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"));
    }
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 label]);
  if (-[VOTElement isInAppSwitcher](self->_currentElement, "isInAppSwitcher"))
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue(-[VOTElement bundleIdentifier](self->_currentElement, "bundleIdentifier"));

    uint64_t v7 = objc_claimAutoreleasedReturnValue(-[VOTElement label](self->_currentElement, "label"));
    id v4 = (void *)v6;
    id v5 = (void *)v7;
  }

  id v8 = v4;
  unint64_t v9 = v5;
  result.int64_t var1 = v9;
  result.int64_t var0 = v8;
  return result;
}

- (void)_handleImageDescriptionsToggle:(int64_t)a3
{
  id v3 = -[VOTElementManager _appInfoForCurrentElement](self, "_appInfoForCurrentElement", a3);
  id v20 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 imageCaptioningDisabledApps]);
  id v7 = [v6 mutableCopy];

  if (!v7) {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  }
  if ([v7 containsObject:v3])
  {
    [v7 removeObject:v3];
    id v8 = off_1001AC148;
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v10 = sub_10004AE68(v8, @"image.descriptions.on.for.app", 0LL, v9);
  }

  else
  {
    [v7 addObject:v3];
    uint64_t v11 = off_1001AC148;
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v10 = sub_10004AE68(v11, @"image.descriptions.off.for.app", 0LL, v9);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v10);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 allObjects]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v14 setImageCaptioningDisabledApps:v13];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace visionEngine]);
  [v15 purgeCache];

  uint64_t v16 = AXCFormattedString(v12, @"%@");
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", v20));
  id v19 = sub_10000BBB0(v17, 0, v18);
}

- (void)_handleIntraContainerMovement:(id)a3
{
  id v12 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v12 command]);
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandContainerTop];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement touchContainer](self->_currentElement, "touchContainer"));
  id v7 = v6;
  if (v5) {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 firstContainedElement]);
  }
  else {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 lastContainedElement]);
  }
  unint64_t v9 = (void *)v8;
  if (v8)
  {
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v8, v12);
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v10 sendEvent:v11];
  }
}

- (void)_handleContainerMovement:(id)a3
{
  id v6 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  else {
    uint64_t v5 = 2LL;
  }

  -[VOTElementManager _handleContainerMovement:direction:](self, "_handleContainerMovement:direction:", v6, v5);
}

- (void)_handleGuideElementMovement:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  15991LL,  "-[VOTElementManager _handleGuideElementMovement:direction:]",  @"must be on element manager or system event thread");
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  uint64_t v8 = v7;
  if (a4 == 1) {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 nextGuideElement]);
  }
  else {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 previousGuideElement]);
  }
  id v10 = v9;
  if (![v9 isAccessibleElement])
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 accessibleDescendants]);
    id v11 = (id)objc_claimAutoreleasedReturnValue([v14 firstObject]);

    if (v11) {
      goto LABEL_9;
    }
LABEL_11:
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v15 sendEvent:v16];

    goto LABEL_12;
  }

  id v11 = v10;
  if (!v11) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v12 = sub_10004B908(a4);
  id v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472LL;
  id v19 = sub_100077B60;
  id v20 = &unk_100176DA8;
  unsigned int v21 = self;
  id v13 = v11;
  id v22 = v13;
  [v13 scrollToElementForDirectional:v12 withCompletion:&v17];
  objc_msgSend(v6, "setIsGuideElementMovementEvent:", 1, v17, v18, v19, v20, v21);
  -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v13, v6);
  -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v13);

LABEL_12:
}

- (void)_handleContainerMovement:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  uint64_t v8 = v7;
  if (a4 == 1)
  {
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 nextContainer]);
    id v10 = 0LL;
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 touchContainer]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstContainedElement]);
    id v13 = v12;
    if (v11 && ![v12 isEqual:v8])
    {
      id v10 = v13;
      unint64_t v9 = 0LL;
    }

    else
    {
      unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 previousContainer]);
      id v10 = 0LL;
    }
  }

  else {
    id v14 = v9;
  }
  uint64_t v16 = v14;
  BOOL v17 = v14 == 0LL;
  if (v14 || !v9)
  {
    id v19 = v9;
  }

  else
  {
    *(void *)&__int128 v15 = 138412546LL;
    __int128 v27 = v15;
    do
    {
      if (a4 == 1) {
        uint64_t v18 = objc_claimAutoreleasedReturnValue([v9 nextContainer]);
      }
      else {
        uint64_t v18 = objc_claimAutoreleasedReturnValue([v9 previousContainer]);
      }
      id v19 = (void *)v18;

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v19 firstContainedElement]);
      uint64_t v20 = VOTLogElement(v16);
      unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v27;
        uint64_t v35 = v19;
        __int16 v36 = 2112;
        unsigned int v37 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "found empty container, trying next container: %@, with found element: %@",  buf,  0x16u);
      }

      BOOL v17 = v16 == 0LL;
      if (v16) {
        break;
      }
      unint64_t v9 = v19;
    }

    while (v19);
  }

  if (!v17 && ([v16 isEqual:v8] & 1) == 0)
  {
    id v25 = v16;

    uint64_t v26 = objc_claimAutoreleasedReturnValue([v25 firstVisibleElementInList]);
    if (v26)
    {
      id v10 = (id)v26;

      goto LABEL_30;
    }

    id v10 = v25;
LABEL_26:
    uint64_t v22 = sub_10004B908(a4);
    id v28 = _NSConcreteStackBlock;
    uint64_t v29 = 3221225472LL;
    __int128 v30 = sub_100077EA0;
    double v31 = &unk_100176DA8;
    id v32 = self;
    id v10 = v10;
    id v33 = v10;
    [v10 scrollToElementForDirectional:v22 withCompletion:&v28];

LABEL_30:
    -[VOTElementManager _echoDifferentElement:forEvent:]( self,  "_echoDifferentElement:forEvent:",  v10,  v6,  v27,  v28,  v29,  v30,  v31,  v32);
    -[VOTElementFetcher updateCacheWithElement:](self->_fetchManager, "updateCacheWithElement:", v10);
    goto LABEL_31;
  }

  if (v10) {
    goto LABEL_26;
  }
  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v23 sendEvent:v24];

LABEL_31:
}

- (void)_dismissAlternativeKeyboardKeys
{
  self->_keyboardAlternativesVisible = 0;
  CGPoint v3 = CGPointZero;
  self->_keyboardAlternativeVisibleTrackingPoint = CGPointZero;
  self->_keyboardAlternativeVisibleStartPoint = v3;
  [(id)VOTSharedWorkspace cancelTapAndHoldMode];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  [v4 sendTouchCancelledEvent];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 currentSoftwareKeyboardLayout]);

  if ((sub_10004BE40(v8) & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent PopoverDidAppear](&OBJC_CLASS___VOSOutputEvent, "PopoverDidAppear"));
    [v6 sendEvent:v7];
  }
}

- (void)_activateAlternativeKeyboardKey:(id)a3
{
  if (self->_flags.shouldTriggerAlternativeKeyActivation)
  {
    self->_flags.shouldTriggerAlternativeKeyActivation = 0;
    BOOL continuousPathActivationDesired = self->_flags.continuousPathActivationDesired;
    uint64_t v5 = VOTLogCommon(self);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7[0] = 67109120;
      v7[1] = !continuousPathActivationDesired;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Starting alternative keyboard key: play sound: %d",  (uint8_t *)v7,  8u);
    }

    [(id)VOTSharedWorkspace startTapAndHoldMode:!continuousPathActivationDesired];
    self->_flags.BOOL continuousPathActivationDesired = 0;
  }

- (void)_resetQuickNavState
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  if ([v6 isQuickNavOn])
  {
  }

  else
  {
    CGPoint v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 preferenceForKey:@"VOTQuickNavEnabled"]);
    unsigned int v5 = [v4 BOOLValue];

    if (v5)
    {
      if (CFAbsoluteTimeGetCurrent() - self->_lastTemporaryQuickNavDisableTime > 0.5)
      {
        [(id)VOTSharedWorkspace temporarilyChangeQuickNavState:1];
        -[VOTElementManager _handleQuickNavFeedback:](self, "_handleQuickNavFeedback:", 1LL);
      }
    }
  }

- (BOOL)_languageRotorItemsContainLanguage:(id)a3
{
  id v3 = a3;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "languageRotorItems", 0));
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v4);
        }
        unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v17 + 1) + 8 * (void)i) objectForKeyedSubscript:@"RotorItem"]);
        if ([v9 isEqualToString:v3])
        {

LABEL_13:
          BOOL v15 = 1;
          goto LABEL_14;
        }

        uint64_t v10 = AXLanguageConvertToCanonicalForm(v9);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        uint64_t v12 = AXLanguageConvertToCanonicalForm(v3);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        unsigned __int8 v14 = [v11 isEqualToString:v13];

        if ((v14 & 1) != 0) {
          goto LABEL_13;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v17 objects:v21 count:16];
      BOOL v15 = 0;
      if (v6) {
        continue;
      }
      break;
    }
  }

  else
  {
    BOOL v15 = 0;
  }

- (void)_updateMostRecentElementCommunity
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _elementCommunityForElement:]( self,  "_elementCommunityForElement:",  self->_currentElement));
  -[VOTElementManager _updateWithMostRecentElementCommunity:](self, "_updateWithMostRecentElementCommunity:", v3);
}

- (BOOL)_updateWithMostRecentElementCommunity:(id)a3
{
  id v4 = a3;
  if (v4
    && (id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager mostRecentElementCommunity](self, "mostRecentElementCommunity")),
        unsigned __int8 v6 = [v5 isEqual:v4],
        v5,
        (v6 & 1) == 0))
  {
    -[VOTElementManager setMostRecentElementCommunity:](self, "setMostRecentElementCommunity:", v4);
    BOOL v7 = 1;
  }

  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (BOOL)_isElementValidForFirstResponder:(id)a3
{
  id v4 = a3;
  id v5 = v4;
  if (self->_firstResponderElement)
  {
    if (objc_msgSend(v4, "isEqual:"))
    {
      unsigned __int8 v6 = 1;
    }

    else
    {
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 textInputElement]);
      unsigned __int8 v6 = [v7 isEqual:self->_firstResponderElement];
    }
  }

  else
  {
    unsigned __int8 v6 = 0;
  }

  return v6;
}

- (BOOL)_setCurrentElement:(id)a3
{
  return -[VOTElementManager _setCurrentElement:isProtectedApp:](self, "_setCurrentElement:isProtectedApp:", a3, 0LL);
}

- (BOOL)_setCurrentElement:(id)a3 shouldSetBrailleElement:(id)a4
{
  id v6 = a3;
  LOBYTE(a4) = -[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:shouldSetBrailleElement:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibil ityElementCheck:shouldSetBrailleElement:",  v6,  0,  1,  1,  0,  [a4 BOOLValue]);

  return (char)a4;
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4
{
  return -[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:",  a3,  a4,  1LL,  1LL,  0LL);
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7
{
  return -[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityElementCheck:shouldSetBrailleElement:]( self,  "_setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsAccessibilityEle mentCheck:shouldSetBrailleElement:",  a3,  a4,  a5,  a6,  a7,  1LL);
}

- (BOOL)_setCurrentElement:(id)a3 isProtectedApp:(BOOL)a4 shouldResetTextSelection:(BOOL)a5 shouldResetCharacterRange:(BOOL)a6 ignoreIsAccessibilityElementCheck:(BOOL)a7 shouldSetBrailleElement:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v9 = a7;
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  id v15 = a3;
  uint64_t v16 = VOTLogElement(v15);
  __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
    sub_1000F226C();
  }

  int IsTV = AXDeviceIsTV(v18);
  if (v15)
  {
    if (IsTV)
    {
      id v20 = [(id)VOTSharedWorkspace tvInteractionMode];
      if (v20 != (id)2)
      {
        uint64_t v43 = VOTLogElement(v20);
        __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_1000F21D0();
        }
        goto LABEL_55;
      }
    }
  }

  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  16299LL,  "-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsA ccessibilityElementCheck:shouldSetBrailleElement:]",  @"must be on element manager or system event thread");
  }

  if (!v15 && v12) {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  16303LL,  "-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsA ccessibilityElementCheck:shouldSetBrailleElement:]",  @"Should not have been able to protect a nonexistent app.");
  }
  if ([(id)VOTSharedWorkspace brailleInputActive])
  {
    id v21 = [(id)VOTSharedWorkspace brailleInputAllowsElementMovement];
    if ((v21 & 1) == 0)
    {
      uint64_t v54 = VOTLogElement(v21);
      __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Stopping _setCurrentElement to prevent the focus from moving while we're editing text in BSI",  buf,  2u);
      }

      goto LABEL_55;
    }
  }

  if ([(id)VOTSharedWorkspace navigationStyleHonorsGroups])
  {
    unsigned int v22 = [v15 isAccessibleGroup];
    if (!v15)
    {
LABEL_19:
      id v24 = [v15 isBannerNotification];
      if ((_DWORD)v24)
      {
        uint64_t v25 = VOTLogElement(v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2098(v26);
        }
      }

      p_currentElement = &self->_currentElement;
      id v28 = [v15 isEqual:self->_currentElement];
      if ((_DWORD)v28)
      {
        objc_storeStrong((id *)&self->_currentElement, a3);
        -[VOTElementManager _updateMostRecentElementCommunity](self, "_updateMostRecentElementCommunity");
        -[VOTElementManager _updateExternalAccessory:](self, "_updateExternalAccessory:", v15);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](*p_currentElement, "application"));
        __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue([v29 bundleIdentifier]);

        id v31 = -[os_log_s isEqualToString:](v30, "isEqualToString:", @"com.apple.InputUI");
        if ((v31 & 1) == 0)
        {
          id v33 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
          lastApplication = self->_lastApplication;
          self->_lastApplication = v33;
        }

        if ((AXDeviceIsAudioAccessory(v31, v32) & 1) == 0)
        {
          if (([v15 mediaAnalysisOptions] & 0x40000) != 0)
          {
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
            __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 visionEngine]);
            [v36 purgeCache];
          }

          unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
          char v38 = (void *)objc_claimAutoreleasedReturnValue([v37 visionEngine]);

          if (([v38 wasCachePurged] & 1) != 0
            || (id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 resultsForElement:*p_currentElement]),
                id v40 = [v39 count],
                v39,
                !v40))
          {
            id v41 = *p_currentElement;
            if (+[VOTVisionEngine shouldAnalyzeElement:](&OBJC_CLASS___VOTVisionEngine, "shouldAnalyzeElement:", v41))
            {
              CGRect v42 = objc_opt_new(&OBJC_CLASS___VOTVisionOptions);
              -[VOTVisionOptions setIncludeFullImageDescriptionsForValidElements:]( v42,  "setIncludeFullImageDescriptionsForValidElements:",  -[VOTElementManager determineFullImageDescriptionsEnabled:]( self,  "determineFullImageDescriptionsEnabled:",  v41));
              -[VOTVisionOptions setIncludeSceneDetection:]( v42,  "setIncludeSceneDetection:",  -[VOTElementManager determineSceneDetectionsEnabled:](self, "determineSceneDetectionsEnabled:", v41));
              [v38 analyzeElement:v41 withOptions:v42];
            }
          }
        }

        -[VOTElementManager _updateContextDescriptors](self, "_updateContextDescriptors");
        -[VOTElementManager _updateAnyThreadElementAccess](self, "_updateAnyThreadElementAccess");
        goto LABEL_55;
      }

      uint64_t v44 = VOTLogElement(v28);
      CGRect v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG)) {
        sub_1000F2038();
      }

      CGRect v46 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
      id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 visionEngine]);
      [v47 purgeCache];

      BOOL v48 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
      __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue([v48 supportedLanguageIfNecessary]);

      BOOL v121 = v11;
      BOOL v128 = v10;
      BOOL v124 = v12;
      BOOL v125 = v8;
      if ([v15 doesHaveTraits:kAXStatusBarElementTrait])
      {

        __int128 v30 = 0LL;
      }

      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      uint64_t v50 = AXLanguageCanonicalFormToGeneralLanguage(v49);
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);

      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
      if ([v52 isEqualToString:v53]
        || !v30
        || !v51
        || (-[os_log_s hasPrefix:](v30, "hasPrefix:", v51) & 1) != 0)
      {

LABEL_61:
        [(id)VOTSharedWorkspace setAdditionalLanguageRotorItem:v30];
        unsigned int v61 = [v15 doesHaveTraits:kAXKeyboardKeyTrait];
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
        if ([v15 handlesGestureArea])
        {
          [v62 setHelpEnabled:1];
          [v15 gesturePracticeRegion];
          objc_msgSend(v62, "setPracticeRegion:");
          [v62 setPracticeElement:v15];
        }

        else if ([v62 helpEnabled])
        {
          [v62 setHelpEnabled:0];
        }

        uint64_t v63 = objc_claimAutoreleasedReturnValue([v15 customRotorActions]);
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v15 customActionGroupIdentifier]);
        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement customActionGroupIdentifier](*p_currentElement, "customActionGroupIdentifier"));
        v127 = v62;
        uint64_t v130 = (void *)v63;
        if ([v64 isEqualToString:v65])
        {
        }

        else
        {
          unsigned __int8 v66 = v30;
          id v67 = v51;
          uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement cachedCustomRotorActions](self->_currentElement, "cachedCustomRotorActions"));
          unsigned int v69 = -[VOTElementManager customRotorActionsEqual:otherActions:ignoreDragItems:]( self,  "customRotorActionsEqual:otherActions:ignoreDragItems:",  v63,  v68,  1LL);

          uint64_t v51 = v67;
          __int128 v30 = v66;
          p_currentElement = &self->_currentElement;

          if (!v69)
          {
LABEL_72:
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webEditableAncestor:](self, "webEditableAncestor:", v15));
            if (!v70
              || (v71 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager webEditableAncestor:]( self,  "webEditableAncestor:",  self->_currentElement)),  unsigned __int8 v72 = [v70 isEqual:v71],  v71,  (v72 & 1) == 0))
            {
              -[NSMutableDictionary removeAllObjects](self->_lastSeenFontProperties, "removeAllObjects");
            }

            -[VOTElementManager _setLastSeenLineAndColumn:](self, "_setLastSeenLineAndColumn:", 0LL);
            -[VOTElement setVoiceOverFocused:](self->_currentElement, "setVoiceOverFocused:", 0LL);
            [v15 setVoiceOverFocused:1];
            unsigned int v73 = -[VOTElement hasNativeFocus](self->_currentElement, "hasNativeFocus");
            if (-[VOTElementManager exploreFocusAffectsNativeFocus](self, "exploreFocusAffectsNativeFocus")
              && [v15 shouldSetNativeFocusWhenBecomingCurrentElement]
              && ([v15 setNativeFocus] & 1) != 0
              || [v15 hasNativeFocus])
            {
              self->_shouldReadExplorerElementsAfterSpeechFinished = 1;
            }

            if ((([v15 hasNativeFocus] ^ 1 | v73) & 1) == 0)
            {
              uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
              uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( +[VOSOutputEvent DidSyncWithSystemFocus]( &OBJC_CLASS___VOSOutputEvent,  "DidSyncWithSystemFocus"));
              [v74 sendEvent:v75];
            }

            unsigned int v76 = -[VOTElement pid](*p_currentElement, "pid");
            if (v76 != [v15 pid]) {
              objc_msgSend( v15,  "setNavigationDirectionMode:",  objc_msgSend((id)VOTSharedWorkspace, "navigationDirection"));
            }
            objc_storeStrong((id *)&self->_previousElement, self->_currentElement);
            objc_storeStrong((id *)p_currentElement, a3);
            uint64_t v77 = (VOTElement *)objc_claimAutoreleasedReturnValue([v15 opaqueParent]);
            currentOpaqueParent = self->_currentOpaqueParent;
            self->_currentOpaqueParent = v77;

            -[VOTElementManager setElementGeneration:]( self,  "setElementGeneration:",  (char *)-[VOTElementManager elementGeneration](self, "elementGeneration") + 1);
            id v79 = -[VOTElementManager setLastElementChangeTime:]( self,  "setLastElementChangeTime:",  CFAbsoluteTimeGetCurrent());
            uint64_t v80 = VOTLogWebPageMovement(v79);
            uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG)) {
              sub_1000F1FC0();
            }
            id v123 = v70;

            id v82 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v15));
            if (!v124) {
              -[VOTElementManager _cacheFocusedElement:forElementCommunity:]( self,  "_cacheFocusedElement:forElementCommunity:",  v15,  v82);
            }
            id v83 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](*p_currentElement, "application"));
            unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue([v83 bundleIdentifier]);

            if (([v84 isEqualToString:@"com.apple.InputUI"] & 1) == 0)
            {
              id v85 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
              uint64_t v86 = self->_lastApplication;
              self->_lastApplication = v85;
            }

            -[VOTElementManager resetFrequentUpdateTextCache](self, "resetFrequentUpdateTextCache");
            if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXUpdatesFrequentlyTrait))
            {
              -[VOTElementManager _realTimeAdjustableUpdateFrequency:]( self,  "_realTimeAdjustableUpdateFrequency:",  self->_currentElement);
              -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_elementUpdatesFrequentlyTimer,  "dispatchAfterDelay:");
            }

            else
            {
              -[SCRCTargetSelectorTimer cancel](self->_elementUpdatesFrequentlyTimer, "cancel");
            }

            if (v125)
            {
              uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
              [v87 setBrailleElement:*p_currentElement];
            }

            if (!self->_firstResponderElement
              && -[VOTElement doesHaveTraits:](*p_currentElement, "doesHaveTraits:", kAXIsEditingTrait))
            {
              -[VOTElementManager _updateFirstResponder](self, "_updateFirstResponder");
            }

            if (!-[VOTElementManager _isElementValidForFirstResponder:]( self,  "_isElementValidForFirstResponder:",  self->_currentElement)) {
              -[VOTElementManager _resetQuickNavState](self, "_resetQuickNavState");
            }
            -[VOTElementManager _resetElementUnitIndexes](self, "_resetElementUnitIndexes");
            if (v69 && self->_customActionIdentifier)
            {
              v131[0] = _NSConcreteStackBlock;
              v131[1] = 3221225472LL;
              v131[2] = sub_1000792C4;
              v131[3] = &unk_100178CC8;
              v131[4] = self;
              id v88 = [v130 indexOfObjectPassingTest:v131];
              self->_customActionIndedouble x = (int64_t)v88;
              BOOL v89 = v121;
              if (v88 != (id)0x7FFFFFFFFFFFFFFFLL)
              {
LABEL_106:
                -[VOTElementManager _resetMathGranularMovementState](self, "_resetMathGranularMovementState");
                webSelectionText = self->_webSelectionText;
                self->_webSelectionText = 0LL;

                lineArradouble y = self->_lineArray;
                self->_lineArradouble y = 0LL;

                CGSize size = CGRectZero.size;
                self->_lineFrame.origin = CGRectZero.origin;
                self->_lineFrame.CGSize size = size;
                self->_textRangeBeingDisplayed = 0;
                self->_lastNothingSoundTime = -3061152000.0;
                previouslySpokenImageCaptionResults = self->_previouslySpokenImageCaptionResults;
                self->_previouslySpokenImageCaptionResults = 0LL;

                if (v128) {
                  self->_highlightedCharacterRange = (_NSRange)xmmword_100132600;
                }
                if (!-[VOTElementRotor showsWebSearchResults](self->_elementRotor, "showsWebSearchResults")) {
                  goto LABEL_114;
                }
                unsigned __int8 v95 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](*p_currentElement, "application"));
                if ([v95 webSearchResultsActive])
                {
                  webSearchText = self->_webSearchText;

                  if (webSearchText)
                  {
LABEL_114:
                    if (-[VOTElementManager _inMisspelledWordRotor](self, "_inMisspelledWordRotor")) {
                      -[VOTElementManager _updateRotorForCurrentElement:completion:]( self,  "_updateRotorForCurrentElement:completion:",  &__kCFBooleanTrue,  0LL);
                    }
                    if (v89 && !-[VOTElementManager _inMisspelledWordRotor](self, "_inMisspelledWordRotor"))
                    {
                      self->_lastUserTextSelectionDirection = 0LL;
                      self->_inTextProcessingRotorMode = 0;
                      self->_misspelledWordReplacementCycleIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
                      self->_flags.inKeyboardTextSelectionMode = 0;
                    }

                    self->_flags.shouldTriggerAlternativeKeyActivation = 0;
                    -[SCRCTargetSelectorTimer cancel](self->_keyboardAlternativeModeActivationTimer, "cancel");
                    currentPublicCustomRotorItemResult = self->_currentPublicCustomRotorItemResult;
                    self->_currentPublicCustomRotorItemResult = 0LL;

                    self->_flags.shouldUpdateRotorForElement = 1;
                    BOOL v98 = -[VOTElement doesHaveTraits:]( self->_currentElement,  "doesHaveTraits:",  kAXAllowsDirectInteractionTrait);
                    unsigned __int8 v99 = 0;
                    self->_flags.currentElementAllowsDirectTouch = v98;
                    if (v98) {
                      unsigned __int8 v99 = -[VOTElement avoidAnnouncingDirectTouchArea]( *p_currentElement,  "avoidAnnouncingDirectTouchArea");
                    }
                    self->_flags.avoidAnnouncingDirectTouchArea = v99;
                    currentElement = self->_currentElement;
                    unsigned __int8 v101 = v130;
                    if (currentElement)
                    {
                      unsigned __int8 v102 = -[VOTElement shouldSkipValidateElement](currentElement, "shouldSkipValidateElement");
                      id v103 = *p_currentElement;
                      if ((v102 & 1) == 0)
                      {
                        uint64_t v104 = v51;
                        os_log_type_t v105 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](v103, "application"));
                        unsigned int v106 = -[VOTElement isValidForApplication:](v103, "isValidForApplication:", v105);

                        id v103 = *p_currentElement;
                        if (v106)
                        {
                          -[VOTElement centerPoint](*p_currentElement, "centerPoint");
                          self->_lastValidElementLocation.double x = v107;
                          self->_lastValidElementLocation.double y = v108;
                          id v103 = self->_currentElement;
                        }

                        uint64_t v51 = v104;
                        unsigned __int8 v101 = v130;
                      }
                    }

                    else
                    {
                      id v103 = 0LL;
                    }

                    if (-[VOTElement doesHaveTraits:](v103, "doesHaveTraits:", kAXHeaderTrait))
                    {
                      id v109 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_currentElement, "value"));
                      -[VOTElementManager setLastElementHeadingLevel:]( self,  "setLastElementHeadingLevel:",  (int)[v109 intValue]);
                    }

                    -[VOTElementManager setLastElementBlockquoteLevel:]( self,  "setLastElementBlockquoteLevel:",  -[VOTElement blockquoteLevel](self->_currentElement, "blockquoteLevel"));
                    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
                    [WeakRetained currentElementDidUpdate:self->_currentElement];

                    -[VOTElementManager _updateExternalAccessory:](self, "_updateExternalAccessory:", v15);
                    -[VOTElementManager _updateAnyThreadElementAccess](self, "_updateAnyThreadElementAccess");
                    -[VOTElementManager _forceVisionRefresh](self, "_forceVisionRefresh");
                    -[VOTElementManager _updateContextDescriptors](self, "_updateContextDescriptors");
                    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager currentElementChangedCallback]( self,  "currentElementChangedCallback"));

                    if (v111)
                    {
                      uint64_t v113 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[VOTElementManager currentElementChangedCallback]( self,  "currentElementChangedCallback"));
                      ((void (**)(void, VOTElementManager *, VOTElement *))v113)[2]( v113,  self,  self->_currentElement);
                    }

                    uint64_t v114 = AXDeviceSupportsSonification(v112);
                    if ((_DWORD)v114)
                    {
                      id v115 = (void *)objc_claimAutoreleasedReturnValue( +[VOTAudiographManager sharedManager]( &OBJC_CLASS___VOTAudiographManager,  "sharedManager"));
                      unsigned int v116 = [v115 isPlaying];

                      if (v116)
                      {
                        id v117 = (void *)objc_claimAutoreleasedReturnValue( +[VOTAudiographManager sharedManager]( &OBJC_CLASS___VOTAudiographManager,  "sharedManager"));
                        [v117 stopPlaying];
                      }

                      audiographActionIdentifier = self->_audiographActionIdentifier;
                      self->_audiographActionIdentifier = 0LL;
                    }

                    if (_AXSAutomationEnabled(v114))
                    {
                      id v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
                      [v119 postNotificationName:@"VoiceOverEventOccurred" object:@"CurrentElementDidChange"];
                    }

                    BOOL v57 = 1;
                    goto LABEL_138;
                  }
                }

                else
                {
                }

                -[VOTElementRotor setShowsWebSearchResults:](self->_elementRotor, "setShowsWebSearchResults:", 0LL);
                goto LABEL_114;
              }
            }

            else
            {
              self->_customActionIndedouble x = 0x7FFFFFFFFFFFFFFFLL;
              BOOL v89 = v121;
            }

            customActionIdentifier = self->_customActionIdentifier;
            self->_customActionIdentifier = 0LL;

            goto LABEL_106;
          }
        }

        unsigned int v69 = [v15 retainsCustomRotorActionSetting];
        goto LABEL_72;
      }

      __int16 v129 = v51;
      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace additionalLanguageRotorItem]);
      id v59 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      if ([v58 isEqualToString:v59])
      {

        uint64_t v51 = v129;
      }

      else
      {
        uint64_t v122 = v58;
        id v60 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
        unsigned __int8 v126 = -[VOTElementManager _languageRotorItemsContainLanguage:]( self,  "_languageRotorItemsContainLanguage:",  v60);

        uint64_t v51 = v129;
        if ((v126 & 1) != 0) {
          goto LABEL_61;
        }
      }

      [(id)VOTSharedWorkspace setSelectedLanguage:0];
      goto LABEL_61;
    }
  }

  else
  {
    unsigned int v22 = 0;
    if (!v15) {
      goto LABEL_19;
    }
  }

  id v23 = [v15 isAccessibleElement];
  uint64_t v55 = VOTLogElement(v23);
  int64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
    sub_1000F2128(v15);
  }

  if (_AXSInUnitTestMode())
  {
    __int128 v30 = (os_log_s *) objc_claimAutoreleasedReturnValue([v15 description]);
    -[os_log_s UTF8String](v30, "UTF8String");
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  16348LL,  "-[VOTElementManager _setCurrentElement:isProtectedApp:shouldResetTextSelection:shouldResetCharacterRange:ignoreIsA ccessibilityElementCheck:shouldSetBrailleElement:]",  @"'currentElement' expected to be an accessibility element: %s");
LABEL_55:
    BOOL v57 = 0;
LABEL_138:

    goto LABEL_139;
  }

  BOOL v57 = 0;
LABEL_139:

  return v57;
}

- (void)_updateAnyThreadElementAccess
{
  p_anyThreadCurrentElementLock = &self->_anyThreadCurrentElementLock;
  os_unfair_lock_lock(&self->_anyThreadCurrentElementLock);
  objc_storeStrong((id *)&self->_anyThreadCurrentElement, self->_currentElement);
  os_unfair_lock_unlock(p_anyThreadCurrentElementLock);
}

- (void)_updateSwipeFrames
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement elementsInDirection:withCount:]( self->_currentElement,  "elementsInDirection:withCount:",  1LL,  5LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement elementsInDirection:withCount:]( self->_currentElement,  "elementsInDirection:withCount:",  2LL,  5LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_100079558;
    v21[3] = &unk_100178CF0;
    id v8 = v6;
    id v22 = v8;
    [v5 enumerateObjectsWithOptions:2 usingBlock:v21];
    [v8 addObject:v3];
    [v8 addObjectsFromArray:v4];
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v18;
      do
      {
        id v13 = 0LL;
        do
        {
          if (*(void *)v18 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * (void)v13), "frame", (void)v17);
          unsigned __int8 v14 = NSStringFromRect(v24);
          id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          if (v15) {
            [v7 addObject:v15];
          }

          id v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
      }

      while (v11);
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v16 setElementFrames:v7];
  }
}

- (BOOL)mlElement:(id)a3 sharesLabel:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 label]);
  if (([v8 isEqualToString:v9] & 1) == 0)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 label]);
    if (v11)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 label]);
      if ([v12 containsString:v4])
      {
        unsigned __int8 v10 = 1;
LABEL_12:

LABEL_13:
        goto LABEL_14;
      }

      __int128 v18 = v12;
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue([v6 label]);
    if (v13)
    {
      unsigned __int8 v14 = (void *)v13;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 label]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);
      unsigned __int8 v10 = [v15 containsString:v16];
    }

    else
    {
      unsigned __int8 v10 = 0;
    }

    uint64_t v12 = v18;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  unsigned __int8 v10 = 1;
LABEL_14:

  return v10;
}

- (void)_processExternalScrollToVisible:(id)a3
{
  double v5 = v4;
  double v7 = v6;
  -[VOTElement frame](self->_currentElement, "frame");
  double Center = AX_CGRectGetCenter(v8 - v5, v9 - v7, v10, v11);
  double v14 = v13;
  id v15 = objc_alloc(&OBJC_CLASS___VOTElement);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  __int128 v17 = -[VOTElement initWithPosition:application:contextId:]( v15,  "initWithPosition:application:contextId:",  v16,  -[VOTElement windowContextId](self->_currentElement, "windowContextId"),  Center,  v14);

  uint64_t v18 = AXMediaLogMLElement();
  __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v29.double x = Center;
    v29.double y = v14;
    __int128 v20 = NSStringFromCGPoint(v29);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    currentElement = self->_currentElement;
    int v23 = 138412802;
    NSRect v24 = v21;
    __int16 v25 = 2112;
    uint64_t v26 = currentElement;
    __int16 v27 = 2112;
    id v28 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Scroll to visible occurred -- looking for same element at %@\ncurrent %@\nfound: %@",  (uint8_t *)&v23,  0x20u);
  }

  if (v17) {
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v17);
  }
}

- (void)processExternalScrollToVisible:(CGPoint)a3
{
  elementManagerThread = self->_elementManagerThread;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:", a3.x, a3.y));
  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_processExternalScrollToVisible:",  self,  1LL,  v5,  0LL);
}

- (void)_processExternalElementUpdate
{
  uint64_t v3 = AXMediaLogElementVision(self, a2);
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    currentElement = self->_currentElement;
    int v6 = 138412290;
    double v7 = currentElement;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "External element update with current: %@",  (uint8_t *)&v6,  0xCu);
  }

  if (self->_currentElement)
  {
    self->_flags.shouldSpeakNextLayoutChange = 1;
    -[VOTElementManager _handleLayoutChangeFromTimer](self, "_handleLayoutChangeFromTimer");
  }

  else
  {
    -[VOTElementManager _handleScreenChange:sound:](self, "_handleScreenChange:sound:", 0LL, 0LL);
  }

- (void)processExternalElementUpdate
{
}

- (BOOL)customRotorActionsEqual:(id)a3 otherActions:(id)a4 ignoreDragItems:(BOOL)a5
{
  return sub_10004C8B0(a3, a4);
}

- (_NSRange)_highlightedCharacterRange
{
  NSUInteger length = self->_highlightedCharacterRange.length;
  NSUInteger location = self->_highlightedCharacterRange.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

- (id)_currentElement
{
  return self->_currentElement;
}

- (id)_lastApplication
{
  return self->_lastApplication;
}

- (CGRect)currentLineFrame
{
  double x = self->_lineFrame.origin.x;
  double y = self->_lineFrame.origin.y;
  double width = self->_lineFrame.size.width;
  double height = self->_lineFrame.size.height;
  result.size.double height = height;
  result.size.double width = width;
  result.origin.double y = y;
  result.origin.double x = x;
  return result;
}

- (void)__retrieveValueForKeyPath:(id)a3 intoPointedToLocation:(id)a4 semaphore:(id)a5
{
  dsema = (dispatch_semaphore_s *)a5;
  id v8 = a4;
  uint64_t v9 = objc_claimAutoreleasedReturnValue(-[VOTElementManager valueForKeyPath:](self, "valueForKeyPath:", a3));
  double v10 = (void **)[v8 pointerValue];

  double v11 = *v10;
  *double v10 = (void *)v9;

  dispatch_semaphore_signal(dsema);
}

- (id)_valueForKeyPathOnElementManagerThread:(id)a3
{
  id v4 = a3;
  id v5 = dispatch_semaphore_create(0LL);
  id v9 = 0LL;
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](&OBJC_CLASS___NSValue, "valueWithPointer:", &v9));
  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "__retrieveValueForKeyPath:intoPointedToLocation:semaphore:",  self,  3LL,  v4,  v6,  v5,  0LL);

  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  id v7 = v9;

  return v7;
}

- (id)currentElement
{
  p_anyThreadCurrentElementLock = &self->_anyThreadCurrentElementLock;
  os_unfair_lock_lock(&self->_anyThreadCurrentElementLock);
  id v4 = -[VOTElement copyWithCache](self->_anyThreadCurrentElement, "copyWithCache");
  os_unfair_lock_unlock(p_anyThreadCurrentElementLock);
  return v4;
}

- (id)currentApplications
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 focusedApplications]);

  return v3;
}

- (BOOL)isOnElementManagerThread
{
  return -[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
}

- (void)_handleStartHelpMode:(id)a3
{
  id v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)VOTSharedWorkspace, "selectedLanguage", a3));
  id v3 = sub_10004AE68(off_1001AC148, @"starting.help.mode", 0LL, v13);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = sub_10000BBB0(v4, 0, v13);

  id v6 = sub_10004AE68(off_1001AC148, @"starting.help.mode.help", 0LL, v13);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_10000BBB0(v7, 2, v13);

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v9 setVoiceOverHelpMode:0];

  double v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  [v10 setHelpEnabled:1];

  __int128 v11 = xmmword_1001AD170;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  objc_msgSend(v12, "setPracticeRegion:", 0.0, 0.0, v11);
}

- (void)_handleEscape:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  unsigned int v7 = [v6 helpEnabled];

  if (!v7)
  {
    if (![(id)VOTSharedWorkspace brailleInputActive]
      || [(id)VOTSharedWorkspace brailleInputShouldBeDeactivatedByEscape])
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
      id v16 = [v15 currentRotorType];

      if (-[VOTElementManager forceRotorOffGesturedTextInputIfNeeded:]( self,  "forceRotorOffGesturedTextInputIfNeeded:",  1LL))
      {
        if (v16 == (id)54)
        {
          id v17 = sub_10004AE68(off_1001AC148, @"stopping.handwriting", 0LL, v5);
          double v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
        }

        else
        {
          double v14 = 0LL;
        }

        id v21 = sub_10000BBB0(v14, 1, v5);
        goto LABEL_16;
      }

      if ([(id)VOTSharedWorkspace brailleInputActive])
      {
        -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
        goto LABEL_17;
      }
    }

    if (self->_flags.inSearchTextMode)
    {
      id v18 = sub_10004AE68(off_1001AC148, @"stopping.search.text.mode", 0LL, v5);
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      id v20 = sub_10000BBB0(v19, 0, v5);

      self->_flags.inSearchTextMode = 0;
      double v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v14 setCaptureModeEnabled:0];
      goto LABEL_16;
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 application]);
    unsigned int v24 = [v22 doesHaveTraits:kAXStatusBarElementTrait];
    unsigned __int8 v25 = [v22 performEscape];
    if (v24)
    {
      if ((v25 & 1) != 0)
      {
LABEL_38:

        goto LABEL_17;
      }

      uint64_t v26 = self->_elementBeforeStatusBarMovement;
      if (!-[VOTElement isValid](v26, "isValid"))
      {
        __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 focusedApplications]);
        CGPoint v29 = (void *)objc_claimAutoreleasedReturnValue([v28 firstObject]);
        uint64_t v30 = objc_claimAutoreleasedReturnValue([v29 firstElementInApplication]);

        uint64_t v26 = (VOTElement *)v30;
      }

      -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v26, v4);
      elementBeforeStatusBarMovement = self->_elementBeforeStatusBarMovement;
      self->_elementBeforeStatusBarMovement = 0LL;
    }

    else
    {
      if ((v25 & 1) != 0) {
        goto LABEL_38;
      }
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer"));
      unsigned __int8 v33 = [v32 performEscape];

      if ((v33 & 1) != 0) {
        goto LABEL_38;
      }
      uint64_t v26 = (VOTElement *)objc_claimAutoreleasedReturnValue([v23 firstElementInApplication]);
      if (!-[VOTElement performEscape](v26, "performEscape"))
      {
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        id v34 = (id)objc_claimAutoreleasedReturnValue( -[VOTElement elementsInDirection:withCount:]( v26,  "elementsInDirection:withCount:",  1LL,  20LL));
        id v35 = [v34 countByEnumeratingWithState:&v39 objects:v43 count:16];
        if (v35)
        {
          id v36 = v35;
          uint64_t v37 = *(void *)v40;
          while (2)
          {
            for (uint64_t i = 0LL; i != v36; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v40 != v37) {
                objc_enumerationMutation(v34);
              }
              if (objc_msgSend( *(id *)(*((void *)&v39 + 1) + 8 * (void)i),  "performEscape",  (void)v39))
              {

                goto LABEL_36;
              }
            }

            id v36 = [v34 countByEnumeratingWithState:&v39 objects:v43 count:16];
            if (v36) {
              continue;
            }
            break;
          }
        }

        -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", 6LL);
LABEL_36:
      }
    }

    goto LABEL_38;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  [v8 processHelpForEvent:v4];

  if (![v4 isTouchEvent]
    || (id v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper")),
        double v10 = (void *)objc_claimAutoreleasedReturnValue([v9 practiceElement]),
        v10,
        v9,
        !v10))
  {
    id v11 = sub_10004AE68(off_1001AC148, @"stopping.help.mode", 0LL, v5);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = sub_10000BBB0(v12, 2, v5);

    double v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
    [v14 setHelpEnabled:0];
LABEL_16:
  }

- (void)_handleSpeechRateChange:(BOOL)a3
{
  BOOL v3 = a3;
  id v18 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v5 speechRateForLanguage:v18];
  double v7 = v6;

  double v8 = -0.0500000007;
  if (v3) {
    double v8 = 0.0500000007;
  }
  double v9 = v8 + v7;
  double v10 = 0.0;
  if (v9 >= 0.0)
  {
    double v10 = v9;
    if (v9 > 1.0) {
      double v10 = 1.0;
    }
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  float v12 = v10;
  *(float *)&double v13 = v12;
  [v11 setSpeechRate:v18 forLanguage:v13];

  id v14 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  uint64_t v15 = AXFormatFloatWithPercentage(0LL, v12);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v17 = [v14 addString:v16];

  -[VOTElementManager _formatRequestForBrailleAlertConditional:](self, "_formatRequestForBrailleAlertConditional:", v14);
  -[VOTElementManager sendRequest:](self, "sendRequest:", v14);
}

- (void)_handleSoundRotorChange:(BOOL)a3
{
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned int v4 = [v3 voiceOverSoundEffectsEnabled];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverSoundEffectsEnabled:v4 ^ 1];

  float v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v11 = v6;
  if (v4) {
    double v7 = @"soundchange.off";
  }
  else {
    double v7 = @"soundchange.on";
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, v6);
  double v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_10000BBB0(v9, 0, v11);
}

- (void)_handleSpeechPunctuationChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace defaultPunctuationGroup]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 voiceOverPunctuationGroup]);

  double v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace punctuationGroups]);
  if ([v7 count])
  {
    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue([v4 uuid]);
    }
    CGPoint v29 = _NSConcreteStackBlock;
    uint64_t v30 = 3221225472LL;
    id v31 = sub_10007A5E8;
    uint64_t v32 = &unk_100177BA8;
    id v6 = v6;
    id v33 = v6;
    id v8 = [v7 indexOfObjectPassingTest:&v29];
    if (v8 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v9 = AXLogPunctuationStorage();
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
        sub_1000F22CC();
      }

      id v8 = 0LL;
    }

    if (v3) {
      unint64_t v11 = (unint64_t)v8 + 1;
    }
    else {
      unint64_t v11 = (unint64_t)v8 - 1;
    }
    if ((v11 & 0x8000000000000000LL) != 0) {
      unint64_t v11 = (unint64_t)[v7 count] - 1;
    }
    else {
      unint64_t v12 = v11;
    }
    double v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v12]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uuid]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v15 setVoiceOverPunctuationGroup:v14];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v13 uuid]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    unsigned int v20 = [v18 isEqual:v19];

    if (v20)
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      [v21 setVoiceOverPunctuationGroup:0];

      id v22 = sub_10004A988(off_1001AC148, @"default.punctuation.format", 0LL);
      int v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
      uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v23, v24, v29, v30, v31, v32));

      id v17 = (void *)v25;
    }

    id v26 = sub_10000BBB0(v17, 0, v16);
  }

  else
  {
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v27 sendEvent:v28];
  }
}

- (id)_typingEchoString
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v3 = [v2 voiceOverHardwareTypingFeedback];

  else {
    unsigned int v4 = *(&off_100179290 + (void)v3);
  }
  id v5 = off_1001AC148;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v7 = sub_10004AE68(v5, v4, 0LL, v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

- (void)_handleTypingEchoChange:(BOOL)a3
{
  BOOL v3 = a3;
  id v11 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v6 = [v5 voiceOverHardwareTypingFeedback];

  switch((unint64_t)v6)
  {
    case 0uLL:
      if (v3) {
        uint64_t v7 = 1LL;
      }
      else {
        uint64_t v7 = 3LL;
      }
      break;
    case 1uLL:
      if (v3) {
        uint64_t v7 = 2LL;
      }
      else {
        uint64_t v7 = 0LL;
      }
      break;
    case 2uLL:
      if (v3) {
        uint64_t v7 = 3LL;
      }
      else {
        uint64_t v7 = 1LL;
      }
      break;
    case 3uLL:
      if (v3) {
        uint64_t v7 = 0LL;
      }
      else {
        uint64_t v7 = 2LL;
      }
      break;
    default:
      uint64_t v7 = 0LL;
      break;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v8 setVoiceOverHardwareTypingFeedback:v7];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _typingEchoString](self, "_typingEchoString"));
  id v10 = sub_10000BBB0(v9, 0, v11);
}

- (id)_speechPhoneticsString
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v3 = [v2 voiceOverPhoneticsFeedback];

  else {
    return *(&off_1001792B0 + (void)v3);
  }
}

- (void)_handleSpeechPhoneticsChange:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v6 = [v5 voiceOverPhoneticsFeedback];

  uint64_t v7 = 1LL;
  if (!v3) {
    uint64_t v7 = 2LL;
  }
  uint64_t v8 = !v3;
  uint64_t v9 = 2LL;
  if (!v3) {
    uint64_t v9 = 0LL;
  }
  if (v6 != (id)1) {
    uint64_t v9 = (uint64_t)v6;
  }
  if (v6 != (id)2) {
    uint64_t v8 = v9;
  }
  if (v6) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v11 setVoiceOverPhoneticsFeedback:v10];

  id v17 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  unint64_t v12 = off_1001AC148;
  double v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _speechPhoneticsString](self, "_speechPhoneticsString"));
  id v14 = sub_10004AE68(v12, v13, 0LL, v17);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = sub_10000BBB0(v15, 0, v17);
}

- (void)_handleActivityRotorChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedActivity]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace activities]);
  uint64_t v6 = VOTLogActivities();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v26 = 138412546;
    __int16 v27 = v4;
    __int16 v28 = 2112;
    CGPoint v29 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "VO current activity: %@ activities: %@",  (uint8_t *)&v26,  0x16u);
  }

  if (v3)
  {
    unint64_t v8 = 0LL;
    if (!v4) {
      goto LABEL_12;
    }
  }

  else
  {
    unint64_t v8 = (unint64_t)[v5 count] - 1;
    if (!v4) {
      goto LABEL_12;
    }
  }

  uint64_t v9 = (char *)[v5 indexOfObject:v4];
  uint64_t v10 = v9 - 1;
  if (v3) {
    uint64_t v10 = v9 + 1;
  }
  else {
    unint64_t v8 = (unint64_t)v10;
  }
LABEL_12:
  uint64_t v11 = VOTLogActivities();
  unint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v26 = 67109120;
    LODWORD(v27) = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "VO activity index: %d", (uint8_t *)&v26, 8u);
  }

  double v13 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v14 = [v5 count];
  if ((v8 & 0x8000000000000000LL) != 0 || v8 >= (unint64_t)v14)
  {
    [(id)VOTSharedWorkspace setSelectedActivity:0];
    id v22 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace previousRotorVoiceIdentifier]);
    int v23 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v23 setVoiceOverCurrentRotorVoiceIdentifier:v22];

    [(id)VOTSharedWorkspace setPreviousRotorVoiceIdentifier:0];
    id v24 = sub_10004AE68(off_1001AC148, @"no.activity.selected", 0LL, v13);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v24);
    id v25 = sub_10000BBB0(v15, 0, v13);
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:v8]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedActivity]);

    if (!v16)
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 voiceOverCurrentRotorVoiceIdentifier]);
      [(id)VOTSharedWorkspace setPreviousRotorVoiceIdentifier:v18];

      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      [v19 setVoiceOverCurrentRotorVoiceIdentifier:0];
    }

    unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue([v15 name]);
    id v21 = sub_10000BBB0(v20, 0, v13);

    [(id)VOTSharedWorkspace setSelectedActivity:v15];
  }
}

- (void)_handleAudioDestination:(BOOL)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "audioDestinationRequestExternal", a3);
  [(id)VOTSharedWorkspace setAudioDestinationRequestExternal:v3 ^ 1];
  id v10 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  unsigned int v4 = off_1001AC148;
  else {
    id v5 = @"audiodestination.local";
  }
  id v6 = sub_10004AE68(v4, v5, 0LL, v10);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_10000BBB0(v7, 0, v10);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v9 updateAudioSessionProperties];
}

- (void)_handleAudioDuckingAmountChange:(BOOL)a3
{
  BOOL v3 = a3;
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v4 voiceOverMediaDuckingAmount];
  double v6 = v5;

  double v7 = 0.05;
  if (v3) {
    double v7 = -0.05;
  }
  double v8 = (v7 + v6) * 100.0;
  else {
    int v9 = 5;
  }
  double v10 = fmax((double)(5 * ((int)v8 / 5) + v9) / 100.0, 0.01);
  if (v10 <= 0.99) {
    double v11 = v10;
  }
  else {
    double v11 = 0.99;
  }
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v12 setVoiceOverMediaDuckingAmount:v11];

  id v18 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v13 = sub_10004AE68(off_1001AC148, @"ducking.amount.short", 0LL, v18);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v15 = AXCFormattedString(v14, @"%.0f");
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v17 = sub_10000BBB0(v16, 0, v18);
}

- (void)_handleAudioDuckingChange:(BOOL)a3
{
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  uint64_t v4 = [v3 voiceOverAudioDuckingEnabled] ^ 1;
  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverAudioDuckingEnabled:v4];

  AXPerformBlockOnMainThreadAfterDelay(&stru_100178D10, v6, 0.5);
}

- (id)_audioDuckingModeString
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v3 = [v2 voiceOverMediaDuckingMode];

  else {
    return *(&off_1001792C8 + (void)v3);
  }
}

- (void)_handleAudioDuckingModeChange:(BOOL)a3
{
  BOOL v3 = a3;
  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  id v6 = [v5 voiceOverMediaDuckingMode];

  uint64_t v7 = 1LL;
  if (!v3) {
    uint64_t v7 = 2LL;
  }
  uint64_t v8 = 2LL;
  if (!v3) {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = !v3;
  if (v6 != (id)2) {
    uint64_t v9 = (uint64_t)v6;
  }
  if (v6 != (id)1) {
    uint64_t v8 = v9;
  }
  if (v6) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v7;
  }
  double v11 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v11 setVoiceOverMediaDuckingMode:v10];

  id v17 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  unint64_t v12 = off_1001AC148;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _audioDuckingModeString](self, "_audioDuckingModeString"));
  id v14 = sub_10004AE68(v12, v13, 0LL, v17);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = sub_10000BBB0(v15, 0, v17);
}

- (void)_handleUsePitchChange:(BOOL)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "typingPitchChangeEnabled", a3);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v4 setVoiceOverPitchChangeEnabled:v3 ^ 1];

  double v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v10 = v5;
  if (v3) {
    id v6 = @"pitchchange.off";
  }
  else {
    id v6 = @"pitchchange.on";
  }
  id v7 = sub_10004AE68(off_1001AC148, v6, 0LL, v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = sub_10000BBB0(v8, 0, v10);
}

- (void)_handleSpeechRotorChange:(id)a3
{
  id v4 = a3;
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  id v6 = [v5 isEqualToString:kVOTEventCommandSpeechRotorNext];

  char v10 = 0;
  speechRotor = self->_speechRotor;
  id v8 = [v4 origin];

  if ((_DWORD)v6) {
    -[VOTRotor increment:userInitiated:eventOrigin:](speechRotor, "increment:userInitiated:eventOrigin:", &v10, 1LL, v8);
  }
  else {
    -[VOTRotor decrement:userInitiated:eventOrigin:](speechRotor, "decrement:userInitiated:eventOrigin:", &v10, 1LL, v8);
  }
  -[VOTElementManager _showVisualRotor:direction:](self, "_showVisualRotor:direction:", self->_speechRotor, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTRotor generateRotorTypeRequest](self->_speechRotor, "generateRotorTypeRequest"));
  -[VOTElementManager _appendCurrentRotorValue:forRotor:]( self,  "_appendCurrentRotorValue:forRotor:",  v9,  self->_speechRotor);
  [v9 setGeneratesBraille:1];
  [v9 setBrailleType:1];
  [v9 send];
}

- (void)_handleSpeechRotorValueChange:(id)a3
{
  id v6 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  id v5 = [v4 isEqualToString:kVOTEventCommandSpeechRotorIncrementValue];

  switch(-[VOTRotor currentRotorType](self->_speechRotor, "currentRotorType"))
  {
    case 'H':
      if ((_DWORD)v5) {
        -[VOTElementManager _handleIncreaseVolume:](self, "_handleIncreaseVolume:", v6);
      }
      else {
        -[VOTElementManager _handleDecreaseVolume:](self, "_handleDecreaseVolume:", v6);
      }
      break;
    case 'I':
      -[VOTElementManager _handleSpeechRateChange:](self, "_handleSpeechRateChange:", v5);
      break;
    case 'J':
      -[VOTElementManager _handleTypingEchoChange:](self, "_handleTypingEchoChange:", v5);
      break;
    case 'K':
      -[VOTElementManager _handleSpeechPhoneticsChange:](self, "_handleSpeechPhoneticsChange:", v5);
      break;
    case 'L':
      -[VOTElementManager _handleUsePitchChange:](self, "_handleUsePitchChange:", v5);
      break;
    case 'M':
      -[VOTElementManager _handleSpeechPunctuationChange:](self, "_handleSpeechPunctuationChange:", v5);
      break;
    case 'N':
      -[VOTElementManager _handleSoundRotorChange:](self, "_handleSoundRotorChange:", v5);
      break;
    case 'O':
      else {
        -[VOTElementManager _handleAudioDuckingChange:](self, "_handleAudioDuckingChange:", v5);
      }
      break;
    case 'Q':
      -[VOTElementManager _handleAudioDestination:](self, "_handleAudioDestination:", v5);
      break;
    default:
      break;
  }
}

- (void)_handleAppSwitch:(id)a3
{
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([a3 command]);
  id v4 = [v3 isEqualToString:kVOTEventAppSwitchNext];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTSpringBoardConnection defaultConnection](&OBJC_CLASS___VOTSpringBoardConnection, "defaultConnection"));
  [v5 sendProgrammaticAppSwitch:v4];
}

- (id)_nearestWebElement:(id)a3
{
  return -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_100178D30,  a3);
}

- (id)_nearestScrollableElement:(id)a3
{
  return -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  &stru_100178D50,  a3);
}

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5
{
  return -[VOTElementManager _nearestElementWithMatch:startElement:forward:itemCheckCount:]( self,  "_nearestElementWithMatch:startElement:forward:itemCheckCount:",  a3,  a4,  a5,  10LL);
}

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4 forward:(BOOL)a5 itemCheckCount:(int64_t)a6
{
  BOOL v7 = a5;
  id v9 = (uint64_t (**)(id, void *, void *))a3;
  id v10 = a4;
  double v11 = v10;
  if (v7) {
    uint64_t v12 = 1LL;
  }
  else {
    uint64_t v12 = 2LL;
  }
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v13 = (id)objc_claimAutoreleasedReturnValue([v10 elementsInDirection:v12 withCount:a6]);
  id v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if ((v9[2](v9, v17, v11) & 1) != 0)
        {
          id v14 = v17;
          goto LABEL_14;
        }
      }

      id v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }

- (id)_nearestElementWithMatch:(id)a3 startElement:(id)a4
{
  id v6 = (uint64_t (**)(id, id, id))a3;
  id v7 = a4;
  if ((v6[2](v6, v7, v7) & 1) != 0)
  {
    id v10 = v7;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:forward:]( self,  "_nearestElementWithMatch:startElement:forward:",  v6,  v7,  1LL));
    id v9 = v8;
    if (v8)
    {
      id v10 = v8;
    }

    else
    {
      double v11 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:forward:]( self,  "_nearestElementWithMatch:startElement:forward:",  v6,  v7,  0LL));
      id v10 = v11;
      if (v11) {
        id v12 = v11;
      }
    }
  }

  return v10;
}

- (void)_handleScrollToTop:(id)a3
{
  if (!-[VOTElement scrollToTop](self->_currentElement, "scrollToTop", a3))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v4 sendEvent:v3];
  }

- (void)_handleScrollToBottom:(id)a3
{
  if (!-[VOTElement scrollToBottom](self->_currentElement, "scrollToBottom", a3))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v4 sendEvent:v3];
  }

- (void)_handleScrollDownPage:(id)a3
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  if ([v6 doesHaveTraits:kAXScrollableTrait])
  {
    id v4 = v6;
  }

  else
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestScrollableElement:](self, "_nearestScrollableElement:", v6));

    id v4 = (void *)v5;
  }

  id v7 = v4;
  [v4 scrollDownPage];
}

- (void)_handleScrollToPoint:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForIndex:101]);
  [v4 pointValue];
  double v6 = v5;
  double v8 = v7;

  id v11 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v11 doesHaveTraits:kAXScrollableTrait])
  {
    id v9 = v11;
  }

  else
  {
    uint64_t v10 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _nearestScrollableElement:](self, "_nearestScrollableElement:", v11));

    id v9 = (void *)v10;
  }

  id v12 = v9;
  objc_msgSend(v9, "scrollToPoint:", v6, v8);
}

- (void)_handleSelectedTextOutput:(id)a3
{
  id v9 = a3;
  id v4 = self->_firstResponderElement;
  if (v4
    || (id v4 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"))) != 0LL)
  {
    if (-[VOTElement selectedTextRange](v4, "selectedTextRange") == (id)0x7FFFFFFF)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      double v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v5 sendEvent:v6];
    }

    else
    {
      id v5 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
      double v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](v4, "language"));
      -[VOTElement applySelectedText:language:](v4, "applySelectedText:language:", v5, v7);

      double v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](v4, "language"));
      -[VOTElement applyTextEditingInformation:request:options:]( v4,  "applyTextEditingInformation:request:options:",  v8,  v5,  0LL);

      [v5 setBrailleType:2];
      [v5 setGeneratesBraille:1];
      [v5 send];
    }
  }

  else
  {
    id v4 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    -[VOTElement sendEvent:](v4, "sendEvent:", v5);
  }
}

- (void)_handleOutputFocusedElementSummary:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 command]);
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandOutputDetailedFocusedElementSummary];

  id v13 = self->_firstResponderElement;
  if (v13
    || (id v13 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"))) != 0LL)
  {
    if (v5) {
      uint64_t v6 = 0x1000000LL;
    }
    else {
      uint64_t v6 = 553648128LL;
    }
    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    double v8 = off_1001AC148;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v10 = sub_10004AE68(v8, @"apple.tv.cursor.summary.hint", 0LL, v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = [v7 addString:v11];

    -[VOTElement addTextualInformationToRequest:options:dataPackage:]( v13,  "addTextualInformationToRequest:options:dataPackage:",  v7,  v6,  0LL);
    [v7 send];
  }

  else
  {
    id v13 = (VOTElement *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    -[VOTElement sendEvent:](v13, "sendEvent:", v7);
  }
}

- (void)visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(int64_t)a6 visionOptions:(id)a7
{
  elementManagerThread = self->_elementManagerThread;
  id v13 = a7;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v17 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a6));
  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_visionEngine:updatedResult:forElement:event:visionOptions:",  self,  5LL,  v16,  v15,  v14,  v17,  v13,  0LL);
}

- (void)_visionEngine:(id)a3 updatedResult:(id)a4 forElement:(id)a5 event:(id)a6 visionOptions:(id)a7
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a7;
  id v14 = (VOTElement *)[a6 integerValue];
  uint64_t v15 = VOTLogCommon(v14);
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v30 = 134218498;
    id v31 = v14;
    __int16 v32 = 2112;
    id v33 = v12;
    __int16 v34 = 2112;
    id v35 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Element manager received async update event from vision engine. event: %ld. updateElement: %@. result: %@",  (uint8_t *)&v30,  0x20u);
  }

  id v17 = [v12 isEqual:self->_currentElement];
  if ((_DWORD)v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 visionEngine]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([(id)v19 resultsForElement:v12]);

    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previouslySpokenImageCaptionResults]( self,  "previouslySpokenImageCaptionResults"));
    LOBYTE(v19) = [v20 isEqual:v21];

    uint64_t v23 = VOTLogCommon(v22);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    if ((v19 & 1) != 0)
    {
      if (v25)
      {
        currentElement = self->_currentElement;
        int v30 = 138412290;
        id v31 = currentElement;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Already announced vision update for this element. Will not announce again: %@",  (uint8_t *)&v30,  0xCu);
      }
    }

    else
    {
      if (v25)
      {
        CGPoint v29 = self->_currentElement;
        int v30 = 138412290;
        id v31 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Have not yet announced vision update for this element. Will announce now: %@",  (uint8_t *)&v30,  0xCu);
      }

      -[VOTElementManager setPreviouslySpokenImageCaptionResults:](self, "setPreviouslySpokenImageCaptionResults:", v20);
      -[VOTElementManager _handleOutputComputerVisionAnalysisSummary:explicitUserRequest:]( self,  "_handleOutputComputerVisionAnalysisSummary:explicitUserRequest:",  0,  [v13 userCommandInitiated]);
    }
  }

  else
  {
    uint64_t v27 = VOTLogCommon(v17);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_INFO))
    {
      __int16 v28 = self->_currentElement;
      int v30 = 138412290;
      id v31 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_INFO,  "Vision update element and current element differnet. Will not announce vision update. Current element: %@",  (uint8_t *)&v30,  0xCu);
    }
  }
}

- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3
{
}

- (void)_handleOutputComputerVisionAnalysisSummary:(id)a3 explicitUserRequest:(BOOL)a4
{
  BOOL v4 = a4;
  id v16 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  id v6 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
  [v16 applyCVMLGeneratedContentToRequest:v6 explicitUserRequest:v4];
  if ([v6 containsActions])
  {
    uint64_t v7 = v4 ^ 1;
    [v6 setIsComputerVisionAsynchrousRequest:v7];
    [v6 setDoesNotInterrupt:v7];
    [v6 setGeneratesBraille:0];
    -[VOTElementManager sendRequest:](self, "sendRequest:", v6);
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 brailleElement]);
    unsigned int v10 = [v9 isEqual:v16];

    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 supplementalBrailleDescription]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 brailleElement]);
      [v13 setSupplementalBrailleDescription:v11];

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
      [v14 refreshBrailleLine];
LABEL_6:
    }
  }

  else if (v4)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent NoResultsFound](&OBJC_CLASS___VOSOutputEvent, "NoResultsFound"));
    [v14 sendEvent:v15];

    goto LABEL_6;
  }
}

- (void)_handleOutputElementSummary:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v6 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
  uint64_t v7 = off_1001AC148;
  double v8 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v9 = sub_10004AE68(v7, @"vo.cursor.summary.hint", 0LL, v8);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = [v6 addString:v10];

  unsigned int v12 = [v4 isKeyEvent];
  if (v12) {
    [v5 addTextualInformationToRequest:v6 options:1 dataPackage:0];
  }
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 touchContainer]);
  [v13 addTextualInformationToRequest:v6 options:16793600 dataPackage:0];

  if ([v5 doesHaveTraits:kAXWebContentTrait])
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 textMarkerRangeForSelection]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 stringForTextMarkers:v14]);
    if ([v15 length])
    {
      id v16 = sub_10004A988(off_1001AC148, @"scrollstatus.selected.text", @"Selected Text");
      id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v17, v15));
      id v19 = [v6 addString:v18];

      int v20 = 0;
LABEL_38:

      goto LABEL_39;
    }
  }

  id v21 = [v5 selectedTextRange];
  if (v21 == (id)0x7FFFFFFF) {
    char v23 = 1;
  }
  else {
    char v23 = v12;
  }
  if ((v23 & 1) == 0
    && ((id v24 = v21, v25 = v22, ([v5 doesHaveTraits:kAXIsEditingTrait] & 1) != 0) || v25))
  {
    if (v25)
    {
      id v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributedValueForRange:", v24, v25));
      if ([v35 length])
      {
        id v36 = sub_10004A988(off_1001AC148, @"scrollstatus.selected.text", @"Selected Text");
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        char v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v37, v35));
        id v39 = [v6 addString:v38];
      }
    }

    else
    {
      id v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attributedValueForRange:", v24, 1));
    }

    [(id)VOTSharedWorkspace addMisspellingsForString:v35];
    int v26 = (void *)objc_claimAutoreleasedReturnValue([v35 coalescedFontAttributes]);

    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _computeChangedFontAttributes:storedAttributes:haveMisspellCheck:]( self,  "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:",  v26,  0LL,  1LL));
    if ([v40 length]) {
      id v41 = [v6 addAttributedString:v40];
    }
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 language]);
    [v5 applyTextEditingInformation:v42 request:v6 options:0];

    int v20 = 0;
  }

  else
  {
    int v26 = (void *)objc_claimAutoreleasedReturnValue([v5 label]);
    if ([v26 isAXAttributedString])
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 coalescedFontAttributes]);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _computeChangedFontAttributes:storedAttributes:haveMisspellCheck:]( self,  "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:",  v27,  0LL,  1LL));
      if ([v28 length]) {
        id v29 = [v6 addAttributedString:v28];
      }
    }

    else if ([v26 length])
    {
      id v30 = [v6 addString:v26];
    }

    if ([v5 doesHaveTraits:kAXMathEquationTrait])
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v5 mathSummary]);
      if ([v31 length]) {
        id v32 = [v6 addString:v31];
      }
    }

    if (([v5 doesHaveTraits:kAXScrollableTrait] & 1) != 0
      || [v5 doesHaveTraits:kAXLaunchIconTrait])
    {
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v5 scrollStatus]);
      if ([v33 length]) {
        id v34 = [v6 addString:v33];
      }
    }

    [v5 applyCVMLGeneratedContentToRequest:v6 explicitUserRequest:0];
    int v20 = 1;
  }

  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v5 uiElement]);
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 numberWithAXAttribute:2123]);
  unsigned int v45 = [v44 unsignedIntValue];

  if (v45 >= 2)
  {
    id v46 = sub_10004A988(off_1001AC148, @"extended.display", 0LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v46);
    id v47 = [v6 addString:v14];
    goto LABEL_38;
  }

- (void)regionDescriptionForElement:(id)a3 withCompletion:(id)a4
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10007C874;
  v6[3] = &unk_100178DA0;
  id v7 = a4;
  id v5 = v7;
  [a3 regionDescriptionWithCompletion:v6];
}

- (BOOL)elementEligibleToFindTitleElement:(id)a3
{
  id v3 = a3;
  if ([v3 doesHaveTraits:kAXWebContentTrait])
  {
    if (([v3 doesHaveTraits:kAXTextEntryTrait] & 1) != 0
      || ([v3 doesHaveTraits:kAXPopupButtonTrait] & 1) != 0)
    {
      unsigned __int8 v4 = 1;
    }

    else
    {
      unsigned __int8 v4 = [v3 doesHaveTraits:kAXToggleTrait];
    }
  }

  else
  {
    unsigned __int8 v4 = 0;
  }

  return v4;
}

- (BOOL)shouldElement:(id)a3 beCombined:(id)a4 combineLinks:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  if (!-[VOTElementManager elementEligibleToFindTitleElement:](self, "elementEligibleToFindTitleElement:", v8)
    || ![v9 doesHaveTraits:kAXStaticTextTrait]
    || ![v9 doesHaveTraits:kAXWebContentTrait]
    || !a5 && ([v9 doesHaveTraits:kAXLinkTrait] & 1) != 0)
  {
    goto LABEL_8;
  }

  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 label]);
  if (![v10 length])
  {

    goto LABEL_11;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 label]);
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 label]);
  unsigned int v13 = [v11 isEqualToString:v12];

  if (v13)
  {
LABEL_11:
    unsigned __int8 v14 = [v8 elementOnSameLine:v9];
    goto LABEL_9;
  }

- (void)updateTitleElementLabels:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 titleElements]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  if ([v5 count])
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v21 = v5;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v24;
      uint64_t v10 = kAXButtonTrait | kAXLinkTrait;
      id v11 = &stru_10017A920;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v9) {
            objc_enumerationMutation(v6);
          }
          unsigned int v13 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
          if (([v13 isEqual:v4] & 1) == 0)
          {
            unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 label]);
            id v15 = [v14 length];

            if (v15)
            {
              id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 label]);
              uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ %@",  v11,  v16));

              id v11 = (__CFString *)v17;
            }
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v8);
    }

    else
    {
      id v11 = &stru_10017A920;
    }

    if (-[__CFString length](v11, "length")) {
      [v4 setDefinedLabel:v11];
    }

    id v5 = v21;
  }

  else if (-[VOTElementManager elementEligibleToFindTitleElement:](self, "elementEligibleToFindTitleElement:", v4))
  {
    if ([v4 doesHaveTraits:kAXToggleTrait])
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v4 nextElement]);
      if (([v4 elementOnSameLine:v18] & 1) == 0)
      {
        uint64_t v19 = objc_claimAutoreleasedReturnValue([v4 previousElement]);

        id v18 = (void *)v19;
      }
    }

    else
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v4 previousElement]);
    }

    if (([v22 elementActsAsTitleElement:v18] & 1) == 0
      && -[VOTElementManager shouldElement:beCombined:combineLinks:]( self,  "shouldElement:beCombined:combineLinks:",  v4,  v18,  0LL))
    {
      int v20 = (void *)objc_claimAutoreleasedReturnValue([v18 label]);
      [v4 setDefinedLabel:v20];
    }
  }
}

- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5
{
}

- (void)_addDescription:(id)a3 toRequest:(id)a4 withOptions:(unint64_t)a5 lastSeenContextDescriptors:(id)a6
{
  id v10 = a6;
  id v11 = a4;
  id v12 = a3;
  id v16 = objc_opt_new(&OBJC_CLASS___VOTElementDescriptionDataPackage);
  unsigned int v13 = [v12 isEqual:self->_currentElement];
  uint64_t v14 = 8LL;
  if (v13) {
    uint64_t v14 = 9LL;
  }
  -[VOTElementDescriptionDataPackage setPreviousElement:](v16, "setPreviousElement:", (&self->super.isa)[v14]);
  -[VOTElementDescriptionDataPackage setLastSeenContextDescriptors:](v16, "setLastSeenContextDescriptors:", v10);

  [v12 addTextualInformationToRequest:v11 options:a5 dataPackage:v16];
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 imageCaptionResults]);

  if ([v15 count]) {
    -[VOTElementManager setPreviouslySpokenImageCaptionResults:](self, "setPreviouslySpokenImageCaptionResults:", v15);
  }
}

- (void)_endNativeSliding:(BOOL)a3
{
  id v4 = &kCFBooleanFalse;
  if (a3) {
    id v4 = &kCFBooleanTrue;
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  *v4,  @"disabledOnTap"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v5 postNotificationName:off_1001AC280 object:0 userInfo:v6];

  self->_flags.wasSendingToNativeSlide = 0;
}

- (id)_elementToFocusWhenSwitchingToElementCommunity:(id)a3
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _dockElementForDisplay](self, "_dockElementForDisplay"));
  if (v5 == v4)
  {
    id v8 = v4;
  }

  else
  {
    id v7 = [v4 hash];
    if (v7 == [v6 hash]) {
      id v8 = v6;
    }
    else {
      id v8 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _retrieveCachedFocusedElementForElementCommunity:]( self,  "_retrieveCachedFocusedElementForElementCommunity:",  v4));
    }
  }

  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 firstResponderElementForFocus]);
    if (!v9)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 firstElementInApplicationForFocus]);
      if (!v9) {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 firstElementInApplication]);
      }
    }
  }

  return v9;
}

- (id)_additionalElementCommunities
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager cachedAdditionalElementCommunities](self, "cachedAdditionalElementCommunities"));

  if (!v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 elementForAttribute:1005]);

    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);
      [v7 updateCache:14000];

      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 elementsForAttribute:14000]);
      [v4 addObjectsFromArray:v8];
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 elementForAttribute:1006]);

    if (v10) {
      [v4 addObject:v10];
    }
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 elementForAttribute:1513]);

    if (v12) {
      [v4 addObject:v12];
    }
    -[VOTElementManager setCachedAdditionalElementCommunities:](self, "setCachedAdditionalElementCommunities:", v4);
  }

  return -[VOTElementManager cachedAdditionalElementCommunities](self, "cachedAdditionalElementCommunities");
}

- (id)_dockElementForDisplay
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_currentElement, "uiElement"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 numberWithAXAttribute:2123]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v3 unsignedIntValue]));

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 elementForParameterizedAttribute:91513 parameter:v4]);

  return v6;
}

- (id)_allElementCommunitiesWithFocusedApplications:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  [v5 addObjectsFromArray:v4];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
  if (v6)
  {
    if (![v5 count]) {
      _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  18246LL,  "-[VOTElementManager _allElementCommunitiesWithFocusedApplications:]",  @"Should have had at least one application frontmost if the side app divider existed.");
    }
    if ([v5 count]) {
      objc_msgSend(v5, "insertObject:atIndex:", v6, (char *)objc_msgSend(v5, "count") - 1);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _dockElementForDisplay](self, "_dockElementForDisplay"));
  if (v7) {
    [v5 addObject:v7];
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _additionalElementCommunities](self, "_additionalElementCommunities"));
  [v5 addObjectsFromArray:v8];

  return v5;
}

- (id)_getNextFocusedElementInElementCommunityPrevious:(BOOL)a3 shouldUseCache:(BOOL)a4 shouldWrapAround:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _allElementCommunitiesWithFocusedApplications:]( self,  "_allElementCommunitiesWithFocusedApplications:",  self->_currentApplications));
  if (!self->_currentElement)
  {
    unsigned int v13 = 0LL;
    id v16 = 0LL;
    goto LABEL_20;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:"));
  id v11 = (char *)[v9 indexOfObject:v10];
  if (v11 == (char *)0x7FFFFFFFFFFFFFFFLL || (id v12 = v11, (unint64_t)[v9 count] < 2))
  {
    _AXLogWithFacility( 2LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"Somehow had current element %@ whose community %@ was not in our list %@.  This is expected for things like the Dismiss Side App element, but otherwise worth investigating.");
    unsigned int v13 = 0LL;
  }

  else
  {
    if (a3)
    {
      unsigned int v13 = 0LL;
      uint64_t v14 = v12 - 1;
      while (1)
      {
        if (((unint64_t)v14 & 0x8000000000000000LL) != 0)
        {
          if (!v5) {
            goto LABEL_17;
          }
          uint64_t v14 = (char *)[v9 count] - 1;
        }

        id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:v14]);
        id v16 = v15;
        uint64_t v17 = v6
            ? objc_claimAutoreleasedReturnValue( -[VOTElementManager _elementToFocusWhenSwitchingToElementCommunity:]( self,  "_elementToFocusWhenSwitchingToElementCommunity:",  v15))
            : objc_claimAutoreleasedReturnValue([v15 lastElementInApplication]);
        id v18 = (void *)v17;

        if (v18)
        {
        }

        --v14;
        unsigned int v13 = v18;
        if (v14 == v12) {
          goto LABEL_33;
        }
      }

- (void)_handleSwitchToElementCommunityPrevious:(BOOL)a3 event:(id)a4
{
  BOOL v4 = a3;
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _getNextFocusedElementInElementCommunityPrevious:shouldUseCache:shouldWrapAround:]( self,  "_getNextFocusedElementInElementCommunityPrevious:shouldUseCache:shouldWrapAround:",  v4,  1LL,  1LL));
  if (v7)
  {
    -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v7, v6);
    if (v4) {
      uint64_t v8 = 2LL;
    }
    else {
      uint64_t v8 = 1LL;
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10007D598;
    v11[3] = &unk_100176DA8;
    v11[4] = self;
    id v12 = v7;
    [v12 scrollToElementForDirectional:v8 withCompletion:v11];
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v9 sendEvent:v10];
  }
}

- (void)_handleSwitchToPreviousElementCommunity:(id)a3
{
}

- (void)_handleSwitchToNextElementCommunity:(id)a3
{
}

- (void)_handleEdgeSwipeTop:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication", a3));
  [v3 showBulletinBoard:1];
}

- (void)_handleEdgeSwipeBottom:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication", a3));
  [v3 showControlCenter:1];
}

- (void)_handleTopEdgePanLong:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "supportsHomeGestures", a3))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
    unsigned __int8 v4 = [v3 showBulletinBoard:1];

    if ((v4 & 1) == 0)
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
      [v6 sendEvent:v5];
    }
  }

- (void)_handleSwitchToLeftElementCommunity:(id)a3
{
  id v6 = a3;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
  unsigned int v5 = [v4 applicationIsRTL];

  if (v5) {
    -[VOTElementManager _handleSwitchToNextElementCommunity:](self, "_handleSwitchToNextElementCommunity:", v6);
  }
  else {
    -[VOTElementManager _handleSwitchToPreviousElementCommunity:](self, "_handleSwitchToPreviousElementCommunity:", v6);
  }
}

- (void)_handleSwitchToRightElementCommunity:(id)a3
{
  id v6 = a3;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
  unsigned int v5 = [v4 applicationIsRTL];

  if (v5) {
    -[VOTElementManager _handleSwitchToPreviousElementCommunity:](self, "_handleSwitchToPreviousElementCommunity:", v6);
  }
  else {
    -[VOTElementManager _handleSwitchToNextElementCommunity:](self, "_handleSwitchToNextElementCommunity:", v6);
  }
}

- (void)_handleOpenVoiceOverOptions:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"com.apple.TVSettings:/GeneralTitle/AccessibilityTitle/AXVoiceOverTitle"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  [v3 openSensitiveURL:v4 withOptions:0];
}

- (void)_handleNextKeyboardLanguage:(id)a3
{
}

- (BOOL)_continueTrackingRoadElementWithPoint:(CGPoint)a3
{
  BOOL result = 0;
  if (self->_shouldContinueRoadTracking)
  {
    double y = a3.y;
    double x = a3.x;
    if ((id)-[VOTElement mapFeatureType](self->_currentElement, "mapFeatureType") == (id)1
      && -[VOTElement roadContainsTrackingPoint:](self->_currentElement, "roadContainsTrackingPoint:", x, y))
    {
      return 1;
    }
  }

  return result;
}

- (BOOL)_continueTrackingKeyboardKey:(id)a3
{
  unint64_t v4 = (unint64_t)a3;
  currentElement = self->_currentElement;
  unsigned int v6 = v4 | currentElement;
  if (!v4) {
    unsigned int v6 = 1;
  }
  BOOL v7 = !self->_flags.usePenumbraForKeyboardKeys || v6 == 0;
  if (!v7 && -[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXKeyboardKeyTrait))
  {
    -[VOTElement centerPoint](self->_currentElement, "centerPoint");
    double DistanceBetweenPoints = SCRCMathGetDistanceBetweenPoints(v8, v9, self->_fingerLocation.x, self->_fingerLocation.y);
    id v11 = -[VOTElementManager keyboardKeyPenumbra:](self, "keyboardKeyPenumbra:", self->_currentElement);
    if (DistanceBetweenPoints < v12)
    {
      BOOL v15 = 1;
      goto LABEL_15;
    }

    uint64_t v13 = VOTLogCommon(v11);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Canceling alt keyboard activation timer since we moved too far",  v17,  2u);
    }

    -[SCRCTargetSelectorTimer cancel](self->_keyboardAlternativeModeActivationTimer, "cancel");
  }

  BOOL v15 = 0;
LABEL_15:

  return v15;
}

- (void)_setDirectInteractionElement:(id)a3
{
  id v23 = a3;
  [v23 frame];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v12, "convertRect:fromContextId:", objc_msgSend(v23, "windowContextId"), v5, v7, v9, v11);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  objc_msgSend(v21, "setCursorFrame:", v14, v16, v18, v20);

  -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v23);
  if (!-[VOTElementManager avoidAnnouncingDirectTouchArea](self, "avoidAnnouncingDirectTouchArea"))
  {
    id v22 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v23,  v22,  0x4000LL);
    [v22 send];
  }
}

- (void)setDirectInteractionElement:(id)a3
{
}

- (BOOL)_isPoint:(CGPoint)a3 withinRangeForDividerElement:(id)a4
{
  double y = a3.y;
  double x = a3.x;
  id v6 = a4;
  if (!v6) {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  18677LL,  "-[VOTElementManager _isPoint:withinRangeForDividerElement:]",  @"Should not have checked whether point was in range of the side app divider if there was none.");
  }
  [v6 frame];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  double v15 = (char *)[(id)VOTSharedWorkspace deviceOrientation];
  CGFloat v16 = v8;
  CGFloat v17 = v10;
  CGFloat v18 = v12;
  CGFloat v19 = v14;
  if ((unint64_t)(v15 - 1) > 1)
  {
    if (y >= CGRectGetMinY(*(CGRect *)&v16) + -10.0)
    {
      v25.origin.double x = v8;
      v25.origin.double y = v10;
      v25.size.double width = v12;
      v25.size.double height = v14;
      if (y < CGRectGetMaxY(v25) + 10.0)
      {
        v26.origin.double x = v8;
        v26.origin.double y = v10;
        v26.size.double width = v12;
        v26.size.double height = v14;
        double y = CGRectGetMidY(v26);
        goto LABEL_10;
      }
    }

- (id)_sideAppDividerElement
{
  if (!-[VOTElementManager didCacheSideAppDividerElement](self, "didCacheSideAppDividerElement"))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
    double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 elementForAttribute:5040]);
    -[VOTElementManager setCachedSideAppDividerElement:](self, "setCachedSideAppDividerElement:", v4);

    -[VOTElementManager setDidCacheSideAppDividerElement:](self, "setDidCacheSideAppDividerElement:", 1LL);
  }

  return -[VOTElementManager cachedSideAppDividerElement](self, "cachedSideAppDividerElement");
}

- (id)_copySideAppDividerElementIfApplicableForPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
  if (v6
    && -[VOTElementManager _isPoint:withinRangeForDividerElement:]( self,  "_isPoint:withinRangeForDividerElement:",  v6,  x,  y))
  {
    id v7 = v6;
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

- (id)_currentMedusaApplications
{
  currentApplications = self->_currentApplications;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10007DE0C;
  v4[3] = &unk_100178DC8;
  v4[4] = self;
  return (id)objc_claimAutoreleasedReturnValue( -[NSArray ax_filteredArrayUsingBlock:]( currentApplications,  "ax_filteredArrayUsingBlock:",  v4));
}

- (id)_handleProtectedAppLogicForEvent:(id)a3 element:(id)a4 point:(CGPoint)a5
{
  CGFloat y = a5.y;
  CGFloat x = a5.x;
  id v9 = a4;
  CGFloat v10 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForIndex:113]);
  if (v10)
  {
    double v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentMedusaApplications](self, "_currentMedusaApplications"));
    CGFloat v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ax_filteredArrayUsingBlock:", &stru_100178DE8));

    if ((unint64_t)[v12 count] < 2)
    {
      id v18 = 0LL;
LABEL_40:

      goto LABEL_41;
    }

    uint64_t v13 = AXDeviceSupportsSideApp();
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = VOTLogCommon(v13);
      double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000F233C();
      }
    }

    int v16 = sub_10004A018();
    if (v16)
    {
      if (([v9 isAccessibleElement] & 1) == 0)
      {
        LOBYTE(v16) = [v9 isTouchContainer];
        if (!v9) {
          goto LABEL_16;
        }
LABEL_11:
        if ((v16 & 1) == 0)
        {
          id v17 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v9));
          goto LABEL_27;
        }

- (void)_handleTracking:(id)a3
{
  double v4 = (VOTEvent *)a3;
  if (AXDeviceIsTV(v4))
  {
    -[VOTElementManager _tvOS_handleIdleAndTrackingEvents:](self, "_tvOS_handleIdleAndTrackingEvents:", v4);
    goto LABEL_101;
  }

  -[NSLock lock](self->_trackingLock, "lock");
  if (!self->_mostRecentTrackingEvent)
  {
    -[NSLock unlock](self->_trackingLock, "unlock");
    goto LABEL_101;
  }

  -[VOTElementManager setLastElementChangeAction:](self, "setLastElementChangeAction:", 3LL);
  -[VOTElementManager setLastUserElementTouchTime:](self, "setLastUserElementTouchTime:", CFAbsoluteTimeGetCurrent());
  mostRecentTrackingEvent = self->_mostRecentTrackingEvent;
  if (mostRecentTrackingEvent)
  {
    id v6 = mostRecentTrackingEvent;

    id v7 = self->_mostRecentTrackingEvent;
    self->_mostRecentTrackingEvent = 0LL;

    double v4 = v6;
  }

  -[NSLock unlock](self->_trackingLock, "unlock");
  -[VOTEvent touchPoint](v4, "touchPoint");
  double v9 = v8;
  double v11 = v10;
  else {
    id v12 = -[VOTElementManager _copySideAppDividerElementIfApplicableForPoint:]( self,  "_copySideAppDividerElementIfApplicableForPoint:",  v9,  v11);
  }
  id v13 = v12;
  if (!v12) {
    id v13 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", v9, v11);
  }
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _handleProtectedAppLogicForEvent:element:point:]( self,  "_handleProtectedAppLogicForEvent:element:point:",  v4,  v13,  v9,  v11));
  double v15 = v14;
  if (v14)
  {
    id v16 = v14;

    id v13 = v16;
  }

  objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:", v9, v11);
  self->_fingerLocation.CGFloat x = v17;
  self->_fingerLocation.CGFloat y = v18;
  -[VOTElementManager _resetOtherTapInputModes](self, "_resetOtherTapInputModes");
  -[VOTElementManager _resetSearchType](self, "_resetSearchType");
  -[VOTElementManager _resetRotorTextNavigation](self, "_resetRotorTextNavigation");
  uint64_t v19 = VOTLogElement(-[VOTElementManager _cancelPreviousElementSearch](self, "_cancelPreviousElementSearch"));
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
    sub_1000F239C();
  }

  -[VOTElementManager _stopReadAll](self, "_stopReadAll");
  if ([v13 doesHaveTraits:kAXSpacerTrait])
  {

    id v13 = 0LL;
  }

  uint64_t v21 = kAXAllowsDirectInteractionTrait;
  if ([v13 doesHaveTraits:kAXAllowsDirectInteractionTrait])
  {
    -[NSMutableSet addObject:](self->_directInteractionElements, "addObject:", v13);
    if (-[VOTElementManager inDirectTouchMode](self, "inDirectTouchMode"))
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEvent objectForIndex:](v4, "objectForIndex:", 108LL));
      unsigned int v23 = [v22 isDownEvent];

      if (v23) {
        -[VOTElementManager setShouldTurnTrackingIntoDirectTouch:](self, "setShouldTurnTrackingIntoDirectTouch:", 1LL);
      }
    }

    else
    {
      id v24 = objc_msgSend( objc_allocWithZone((Class)VOTElement),  "initWithPosition:startWithElement:",  v13,  v9,  v11);
      CGRect v25 = v24;
      if (v24)
      {
        id v26 = v24;

        id v13 = v26;
      }
    }
  }

  uint64_t v27 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  __int16 v28 = (void *)v27;
  else {
    unsigned int v29 = 1;
  }
  if (-[VOTElementManager _continueTrackingKeyboardKey:](self, "_continueTrackingKeyboardKey:", v13))
  {
    id v30 = v28;

    unsigned int v29 = 1;
    id v13 = v30;
  }

  unsigned __int8 v31 = 1;
  [v13 setShouldSkipValidateElement:1];
  if (v13)
  {
    else {
      unsigned __int8 v31 = 0;
    }
  }

  self->_flags.focusIsOnElement = v31 ^ 1;
  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  unsigned __int8 v33 = [v32 ignoreLogging];

  if ((v33 & 1) == 0)
  {
    uint64_t v64 = v21;
    CGPoint v34 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v35 = AXLoggerForFacility(v34);
    id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);

    os_log_type_t v37 = AXOSLogLevelFromAXLogLevel(3LL);
    if (os_log_type_enabled((os_log_t)v36, v37))
    {
      uint64_t v63 = v15;
      uint64_t v38 = AXColorizeFormatLog(3LL, @"currentElement = %p, element = %p, isSame = %d");
      id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      id v61 = v13;
      uint64_t v62 = v29;
      id v60 = v28;
      uint64_t v40 = _AXStringForArgs(v39);
      id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      __int128 v42 = v36;
      if (os_log_type_enabled(v42, v37))
      {
        *(_DWORD *)buf = 138543362;
        unsigned __int8 v66 = v41;
        _os_log_impl((void *)&_mh_execute_header, v42, v37, "%{public}@", buf, 0xCu);
      }

      double v15 = v63;
    }

    uint64_t v21 = v64;
  }

  if (v13) {
    char v43 = 1;
  }
  else {
    char v43 = v29;
  }
  if ((v43 & 1) == 0)
  {
    [v28 frame];
    v67.CGFloat x = v9;
    v67.CGFloat y = v11;
    if (CGRectContainsPoint(v68, v67) && [v28 doesHaveTraits:kAXWebContentTrait])
    {
      id v13 = v28;
      unsigned int v29 = 1;
    }

    else
    {
      unsigned int v29 = 0;
      id v13 = 0LL;
    }
  }

  unsigned int v44 = objc_msgSend(v13, "isReadingContent", v60, v61, v62);
  if ([v13 doesHaveTraits:kAXTextAreaTrait]
    && ([v13 doesHaveTraits:kAXStaticTextTrait] & 1) == 0)
  {
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v13 value]);
    BOOL v45 = [v47 length] != 0;

    if (v13) {
      goto LABEL_51;
    }
  }

  else
  {
    BOOL v45 = 0;
    if (v13)
    {
LABEL_51:
      if (v29 && !self->_flags.lastEventWasIdle && !self->_flags.touchingOnNothing)
      {
        if (v45)
        {
          uint64_t v58 = -[VOTElement initWithPosition:startWithElement:]( objc_alloc(&OBJC_CLASS___VOTElement),  "initWithPosition:startWithElement:",  v13,  v9,  v11);
          id v59 = v58;
          if (v58)
          {
            if (!-[VOTElement isEqual:](v58, "isEqual:", self->_currentSubElement))
            {
              -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:]( self,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:",  v59,  v4,  0LL,  1LL,  v15 != 0LL);
              -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v13);
              objc_storeStrong((id *)&self->_currentSubElement, v59);
            }
          }

          else if (!-[VOTElementManager _echoLineInElement:forEvent:forDifferentElement:]( self,  "_echoLineInElement:forEvent:forDifferentElement:",  v13,  v4,  0LL))
          {
            -[VOTElementManager _echoNoElementForEvent:](self, "_echoNoElementForEvent:", v4);
          }
        }

        else if ((v44 & 1) == 0)
        {
          -[VOTElementManager _echoSameElement:forEvent:](self, "_echoSameElement:forEvent:", v13, v4);
          self->_flags.touchingOnNothing = 0;
        }

        goto LABEL_75;
      }

      if (-[VOTElementManager inDirectTouchMode](self, "inDirectTouchMode")
        && [v13 doesHaveTraits:v21]
        && ([v13 avoidAnnouncingDirectTouchArea] & 1) != 0)
      {
        goto LABEL_61;
      }

      if ((v44 | v45) == 1)
      {
        if (((v29 | v44 ^ 1) & 1) != 0)
        {
          if ((v29 & 1) != 0) {
            goto LABEL_61;
          }
        }

        else if (self->_bookSubelement)
        {
LABEL_61:
          if (v45
            && !-[VOTElementManager _echoLineInElement:forEvent:forDifferentElement:]( self,  "_echoLineInElement:forEvent:forDifferentElement:",  v13,  v4,  v29 ^ 1))
          {
            id v46 = (void *)objc_claimAutoreleasedReturnValue([v13 value]);
            if ([v46 isAXAttributedString]
              && [v46 hasAttribute:UIAccessibilityTokenPlaceholder])
            {
              -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v13, v4);
            }

            else
            {
              -[VOTElementManager _echoNoElementForEvent:](self, "_echoNoElementForEvent:", v4);
            }
          }

          self->_flags.touchingOnNothing = !self->_flags.focusIsOnElement;
          currentSubElement = self->_currentSubElement;
          self->_currentSubElement = 0LL;

          goto LABEL_75;
        }
      }

      -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:]( self,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:isProtectedApp:",  v13,  v4);
      goto LABEL_61;
    }
  }

  self->_flags.touchingOnNothing = 1;
  -[VOTElementManager _echoNoElementForEvent:](self, "_echoNoElementForEvent:", v4);
  id v48 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v48 stopSpeakingAtBoundary:0];

LABEL_75:
  int v50 = sub_10004A018();
  if (v50)
  {
    else {
      LOBYTE(v50) = [v13 isTouchContainer];
    }
  }

  if (v13 && (v50 & 1) == 0)
  {
    if (!-[VOTElement isEqual:](self->_lastValidElement, "isEqual:", v13)) {
      objc_storeStrong((id *)&self->_lastValidElement, v13);
    }
    -[VOTElementManager _setCurrentElement:isProtectedApp:]( self,  "_setCurrentElement:isProtectedApp:",  self->_lastValidElement,  v15 != 0LL);
    uint64_t v51 = self->_lastValidElement;

    id v13 = v51;
  }

  if (v44) {
    -[VOTElementManager _echoLineInBookElement:forEvent:](self, "_echoLineInBookElement:forEvent:", v13, v4);
  }
  uint64_t v52 = kAXAllowsNativeSlidingTrait;
  if ([v13 doesHaveTraits:kAXAllowsNativeSlidingTrait])
  {
    if (!self->_flags.wasSendingToNativeSlide && v13)
    {
      id v53 = [v13 copy];
      if (v53) {
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v53,  @"element"));
      }
      else {
        uint64_t v54 = 0LL;
      }
      id v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v55 postNotificationName:off_1001AC278 object:0 userInfo:v54];

      self->_flags.wasSendingToNativeSlide = 1;
    }
  }

  else if (self->_flags.wasSendingToNativeSlide && ([v13 doesHaveTraits:v52] & 1) == 0)
  {
    -[VOTElementManager _endNativeSliding:](self, "_endNativeSliding:", 0LL);
  }

  if ([v13 doesHaveTraits:kAXLaunchIconTrait])
  {
    if (([v13 isInFolder] & 1) == 0)
    {
      int64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[VOTEvent objectForIndex:](v4, "objectForIndex:", 112LL));
      unsigned __int8 v57 = [v56 BOOLValue];

      if ((v57 & 1) == 0) {
        -[NSMutableArray removeAllObjects](self->_cachedLaunchIcons, "removeAllObjects");
      }
    }
  }

  -[VOTElementManager hideVisualRotor](self, "hideVisualRotor");
  self->_lastItemSelectionFromTouch = CFAbsoluteTimeGetCurrent();
  self->_flags.lastEventWasIdle = 0;

LABEL_101:
}

- (void)_handleKeyboardContinuousPathDidBegin:(id)a3
{
  self->_flags.continuousPathKeyboardBegan = 1;
  uint64_t v3 = VOTLogCommon(self);
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Continuous path did begin", v6, 2u);
  }

  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v5 playSoundFast:@"Sounds/VOTOrbSound1-OrbHW.aiff"];
}

- (void)_continuousPathIdleTimer:(id)a3
{
  uint64_t v4 = VOTLogCommon(self);
  double v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    continuousPathSuggestion = self->_continuousPathSuggestion;
    int v18 = 138412290;
    uint64_t v19 = continuousPathSuggestion;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Continuous path idle timer fired: %@",  (uint8_t *)&v18,  0xCu);
  }

  if (-[NSString length](self->_continuousPathSuggestion, "length")
    && (CFAbsoluteTimeGetCurrent() - *(double *)&qword_1001ACF10 > 1.0
     || ([(id)qword_1001ACF18 isEqualToString:self->_continuousPathSuggestion] & 1) == 0))
  {
    id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    double v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_firstResponderElement, "application"));
    double v9 = (void *)objc_claimAutoreleasedReturnValue([v8 currentSoftwareKeyboardLanguage]);
    [v7 setKeyboardLanguageHint:v9];

    double v10 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    double v11 = v10;
    if (v10) {
      id v12 = v10;
    }
    else {
      id v12 = (id)objc_claimAutoreleasedReturnValue([v7 keyboardLanguageHint]);
    }
    id v13 = v12;

    id v14 = [v7 addString:self->_continuousPathSuggestion withLanguage:v13];
    double v15 = (void *)objc_claimAutoreleasedReturnValue([v7 lastAction]);
    [v15 setObject:kCFBooleanTrue forVariant:50];

    [v7 setBrailleType:2];
    [v7 setGeneratesBraille:1];
    -[VOTElementManager sendRequest:](self, "sendRequest:", v7);
    id v16 = -[NSString copy](self->_continuousPathSuggestion, "copy");
    CGFloat v17 = (void *)qword_1001ACF18;
    qword_1001ACF18 = (uint64_t)v16;

    qword_1001ACF10 = CFAbsoluteTimeGetCurrent();
  }

- (void)_handleTapAndHoldEventMonitor:(id)a3
{
  id v4 = a3;
  double v5 = v4;
  if (self->_keyboardAlternativesVisible)
  {
    double v11 = v4;
    [v4 touchPoint];
    if (SCRCMathGetDistanceBetweenPoints( self->_keyboardAlternativeVisibleTrackingPoint.x,  self->_keyboardAlternativeVisibleTrackingPoint.y,  v6,  v7) > 15.0)
    {
      [v11 touchPoint];
      self->_keyboardAlternativeVisibleTrackingPoint.CGFloat x = v8;
      self->_keyboardAlternativeVisibleTrackingPoint.CGFloat y = v9;
      -[SCRCTargetSelectorTimer cancel](self->_alternativeKeyDismissalTimer, "cancel");
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_alternativeKeyDismissalTimer, "dispatchAfterDelay:", 5.0);
LABEL_6:
      double v5 = v11;
      goto LABEL_7;
    }

    unsigned int v10 = -[VOTElementManager _shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:]( self,  "_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:",  v11);
    double v5 = v11;
    if (v10)
    {
      -[VOTElementManager _dismissAlternativeKeyboardKeys](self, "_dismissAlternativeKeyboardKeys");
      goto LABEL_6;
    }
  }

- (BOOL)_shouldDismissKeyboardForMovingTooFarAlongYAxisWithEvent:(id)a3
{
  id v4 = a3;
  if ([(id)VOTSharedWorkspace applicationOrientation] == (id)3
    || [(id)VOTSharedWorkspace applicationOrientation] == (id)4)
  {
    double x = self->_keyboardAlternativeVisibleStartPoint.x;
    [v4 touchPoint];
    double v7 = x - v6;
  }

  else
  {
    double y = self->_keyboardAlternativeVisibleStartPoint.y;
    [v4 touchPoint];
    double v7 = y - v9;
  }

  BOOL v10 = fabs(v7) > 220.0;

  return v10;
}

- (id)_checkDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  id v10 = a4;
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  double MidX = CGRectGetMidX(v26);
  v27.origin.CGFloat x = x;
  v27.origin.CGFloat y = y;
  v27.size.CGFloat width = width;
  v27.size.CGFloat height = height;
  double MidY = CGRectGetMidY(v27);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v13, "convertPoint:toContextId:", objc_msgSend(v10, "windowContextId"), MidX, MidY);
  double v15 = v14;
  double v17 = v16;

  int v18 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataDetectorURL:", v15, v17));
  if (v18)
  {
    uint64_t v19 = @"address";
    if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"address") & 1) != 0)
    {
LABEL_16:

      int v18 = (__CFString *)v19;
      goto LABEL_17;
    }

    if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"event") & 1) != 0)
    {
      uint64_t v19 = @"calendar";
      goto LABEL_16;
    }

    if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"tracking-number") & 1) != 0)
    {
      uint64_t v19 = @"track";
      goto LABEL_16;
    }

    if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"item-number") & 1) != 0)
    {
      uint64_t v19 = @"item";
      goto LABEL_16;
    }

    if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"http") & 1) == 0)
    {
      uint64_t v19 = @"mailto";
      if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"mailto") & 1) == 0)
      {
        uint64_t v19 = @"tel";
        if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"tel") & 1) == 0)
        {
          uint64_t v19 = @"facetime";
          if ((-[__CFString hasPrefix:](v18, "hasPrefix:", @"facetime") & 1) == 0)
          {
            uint64_t v19 = @"ibooks";
          }
        }
      }

      goto LABEL_16;
    }

    int v18 = @"http";
    if (a5)
    {
LABEL_17:
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      id v22 = off_1001AC148;
      unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"data-detector.%@",  v18));
      id v24 = sub_10004AE68(v22, v23, 0LL, v21);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v24);

      goto LABEL_18;
    }
  }

  uint64_t v20 = 0LL;
LABEL_18:

  return v20;
}

- (void)_outputDataDetectorIfPresent:(CGRect)a3 element:(id)a4 includeLinks:(BOOL)a5
{
  id v7 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager _checkDataDetectorIfPresent:element:includeLinks:]( self,  "_checkDataDetectorIfPresent:element:includeLinks:",  a4,  a5,  a3.origin.x,  a3.origin.y,  a3.size.width,  a3.size.height));
  double v5 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v6 = sub_10000BBB0(v7, 2, v5);
}

- (void)_setLastSeenLineAndColumn:(id)a3
{
  self->_unint64_t lastTextPressAction = 0LL;
}

- (BOOL)_echoLineInElement:(id)a3 forEvent:(id)a4 forDifferentElement:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  [a4 touchPoint];
  double v10 = v9;
  double v12 = v11;
  if (([(id)VOTSharedWorkspace inUnitTestMode] & 1) == 0)
  {
    objc_msgSend((id)VOTSharedWorkspace, "convertDevicePointToZoomedPoint:", v10, v12);
    double v14 = v13;
    double v16 = v15;
    double v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    objc_msgSend(v17, "convertPoint:toContextId:", objc_msgSend(v8, "windowContextId"), v14, v16);
    double v10 = v18;
    double v12 = v19;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "lineNumberAndColumnForPoint:", v10, v12));
  uint64_t v21 = v20;
  if (v20)
  {
    if ([v20 isEqual:self->_lastSeenLineAndColumn])
    {
LABEL_45:
      BOOL v48 = 1;
      goto LABEL_46;
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"lineNumber"]);
    unsigned int v23 = [v22 intValue];

    if (v23 != -1)
    {
      -[VOTElementManager _setLastSeenLineAndColumn:](self, "_setLastSeenLineAndColumn:", v21);
      unsigned int v24 = [v8 doesHaveTraits:kAXIsEditingTrait];
      id v25 = [v8 rangeForLineNumberAndColumn:self->_lastSeenLineAndColumn];
      NSUInteger v27 = v26;
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "attributedValueForRange:", v25, v26));
      objc_msgSend(v8, "boundsForRange:", v25, v27);
      double v30 = v29;
      double v32 = v31;
      double v34 = v33;
      double v36 = v35;
      os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
      objc_msgSend(v37, "convertRect:fromContextId:", objc_msgSend(v8, "windowContextId"), v30, v32, v34, v36);
      double v39 = v38;
      double v41 = v40;
      double v43 = v42;
      double v45 = v44;

      self->_lineFrame.origin.CGFloat x = v39;
      self->_lineFrame.origin.CGFloat y = v41;
      self->_lineFrame.size.CGFloat width = v43;
      self->_lineFrame.size.CGFloat height = v45;
      id v46 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _checkDataDetectorIfPresent:element:includeLinks:]( self,  "_checkDataDetectorIfPresent:element:includeLinks:",  v8,  1LL,  v39,  v41,  v43,  v45));
      uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      unsigned int v97 = v24;
      if ((id)self->_lastSeenLineStartPositionForFontProperties == v25) {
        uint64_t v47 = 0LL;
      }
      else {
        uint64_t v47 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _listItemLabelForAXAttributedString:]( self,  "_listItemLabelForAXAttributedString:",  v28));
      }
      unsigned __int8 v102 = (void *)v47;
      self->_lastSeenLineStartPositionForFontProperties = (unint64_t)v25;
      id v49 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _textAttachmentElementForString:inRange:]( self,  "_textAttachmentElementForString:inRange:",  v28,  0LL,  v27));
      NSUInteger v103 = (NSUInteger)v25;
      uint64_t v100 = v46;
      NSUInteger v101 = v27;
      unsigned __int8 v99 = v49;
      BOOL v98 = v5;
      if (-[VOTElementManager stringIsTextAttachment:](self, "stringIsTextAttachment:", v28))
      {
        id v50 = objc_alloc(&OBJC_CLASS___AXAttributedString);
        if (v49)
        {
          uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v49 label]);
          uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v49 value]);
          uint64_t v53 = __AXStringForVariables(v51);
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          id v55 = objc_msgSend(v50, "initWithString:", v54, v52, @"__AXStringForVariablesSentinel");

          int64_t v56 = 0LL;
          __int16 v28 = v55;
        }

        else
        {
          id v64 = sub_10004A988(off_1001AC148, @"attachment", 0LL);
          uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v64);
          id v65 = [v50 initWithString:v51];

          int64_t v56 = 0LL;
          __int16 v28 = v65;
        }

- (void)_echoStatusBarStatus:(id)a3
{
  if ([a3 doesHaveTraits:kAXStatusBarElementTrait])
  {
    BOOL inStatusBar = self->_flags.inStatusBar;
    self->_flags.BOOL inStatusBar = 1;
    if (!inStatusBar)
    {
      id v8 = [objc_allocWithZone((Class)VOTOutputRequest) init];
      id v5 = sub_10004A988(off_1001AC148, @"entered.status.bar", 0LL);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      id v7 = [v8 addString:v6];

      [v8 setCannotBeInterrupted:1];
      -[VOTElementManager sendRequest:](self, "sendRequest:", v8);
    }
  }

  else
  {
    self->_flags.BOOL inStatusBar = 0;
  }

- (void)_finishPassthroughMode
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  objc_msgSend(v3, "postFingerLiftAtPoint:withContextId:", 0, self->_passthroughFinish.x, self->_passthroughFinish.y);

  CGPoint v4 = CGPointZero;
  self->_passthroughOffset = CGPointZero;
  self->_passthroughStart = v4;
  self->_passthroughFinish = v4;
  self->_flags.inPassthroughMode = 0;
}

- (void)_processPassthroughAllowedWithEvent:(id)a3 initialTouch:(BOOL)a4
{
  BOOL v4 = a4;
  id v27 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  [v6 centerPoint];
  double v8 = v7;
  double v10 = v9;
  unsigned int v11 = -[VOTElementManager _useLineFrameBoundsForTouch:](self, "_useLineFrameBoundsForTouch:", v6);
  if (v8 == CGPointZero.x && v10 == CGPointZero.y)
  {
    [v27 touchPoint];
    double MidX = v15;
    double MidY = v16;
  }

  else if (v11)
  {
    double MidX = CGRectGetMidX(self->_lineFrame);
    double MidY = CGRectGetMidY(self->_lineFrame);
  }

  else
  {
    [v27 touchPoint];
    CGFloat v18 = v17 - self->_passthroughStart.x;
    CGFloat v20 = v19 - self->_passthroughStart.y;
    self->_passthroughOffset.CGFloat x = v18;
    self->_passthroughOffset.CGFloat y = v20;
    double MidX = v8 + v18;
    double MidY = v10 + v20;
  }

  [v6 frame];
  CGFloat x = v28.origin.x;
  CGFloat y = v28.origin.y;
  CGFloat width = v28.size.width;
  CGFloat height = v28.size.height;
  if (MidX >= CGRectGetMaxX(v28))
  {
    v29.origin.CGFloat x = x;
    v29.origin.CGFloat y = y;
    v29.size.CGFloat width = width;
    v29.size.CGFloat height = height;
    double MidX = CGRectGetMaxX(v29) + -1.0;
  }

  v30.origin.CGFloat x = x;
  v30.origin.CGFloat y = y;
  v30.size.CGFloat width = width;
  v30.size.CGFloat height = height;
  if (MidY >= CGRectGetMaxY(v30))
  {
    v31.origin.CGFloat x = x;
    v31.origin.CGFloat y = y;
    v31.size.CGFloat width = width;
    v31.size.CGFloat height = height;
    double MidY = CGRectGetMaxY(v31) + -1.0;
  }

  self->_passthroughFinish.CGFloat x = MidX;
  self->_passthroughFinish.CGFloat y = MidY;
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  [v27 touchForce];
  if (v4) {
    objc_msgSend(v25, "postFingerTouchAtPoint:withForce:withContextId:", 0, MidX, MidY, v26);
  }
  else {
    objc_msgSend(v25, "postFingerDragAtPoint:withForce:withContextId:", 0, MidX, MidY, v26);
  }
}

- (void)_switchToOtherRoad
{
  if (self->_upcomingRoadElement)
  {
    id v9 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    id v3 = sub_10004A988(off_1001AC148, @"map-interaction.switch.to.road", 0LL);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    -[VOTElementManager _addFormattedStringToRequest:formattedString:withElement:]( self,  "_addFormattedStringToRequest:formattedString:withElement:",  v9,  v4,  self->_upcomingRoadElement);
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", self->_upcomingRoadElement);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v5 setCursorFrameForElement:self->_currentElement];

    [v9 send];
    upcomingRoadElement = self->_upcomingRoadElement;
    self->_upcomingRoadElement = 0LL;

    self->_firstRoadTravelPoint = self->_lastRoadTravelPoint;
    self->_switchedToRoadTime = CFAbsoluteTimeGetCurrent();
    self->_intersectionTravelPoint = CGPointZero;
    double v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
    [v7 sendEvent:v8];
  }

- (void)_addFormattedStringToRequest:(id)a3 formattedString:(id)a4 withElement:(id)a5
{
  id v20 = a3;
  id v7 = a4;
  id v8 = a5;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 label]);
  if (v9) {
    double v10 = (__CFString *)v9;
  }
  else {
    double v10 = &stru_10017A920;
  }
  uint64_t v11 = AXCFormattedString(v7, @"%@");
  double v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  double v13 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v12,  v10));
  double v14 = (void *)objc_claimAutoreleasedReturnValue([v8 language]);

  if (v14)
  {
    double v15 = (char *)[v7 length] + 1;
    double v16 = [v12 length];
    int64_t v17 = v16 - (_BYTE *)[v7 length];
    CGFloat v18 = (void *)objc_claimAutoreleasedReturnValue([v8 language]);
    objc_msgSend(v13, "setAttribute:forKey:withRange:", v18, UIAccessibilityTokenLanguage, v15, v17);
  }

  id v19 = [v20 addAttributedString:v13];
}

- (void)_handleMapSameElement:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  [a4 touchPoint];
  double v8 = v7;
  double v10 = v9;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 touchContainer]);
  objc_msgSend(v11, "mapsExplorationRecordTouchpoint:", v8, v10);

  if (self->_startTrackingRoadRequest)
  {
    self->_explorationStartPoint.double x = v8;
    p_double y = &self->_explorationStartPoint.y;
LABEL_50:
    *p_double y = v10;
    goto LABEL_51;
  }

  if (self->_shouldContinueRoadTracking)
  {
    double DistanceBetweenPoints = SCRCMathGetDistanceBetweenPoints( self->_firstRoadTravelPoint.x,  self->_firstRoadTravelPoint.y,  v8,  v10);
    double y = CGPointZero.y;
    float v16 = DistanceBetweenPoints;
    BOOL v17 = y == self->_firstRoadTravelPoint.y && CGPointZero.x == self->_firstRoadTravelPoint.x;
    BOOL v18 = !v17 && v16 <= 6.0;
    if (v18 || CFAbsoluteTimeGetCurrent() - self->_switchedToRoadTime <= 2.0) {
      goto LABEL_36;
    }
    uint64_t v52 = 0LL;
    double v53 = 0.0;
    SCRCMathGetVectorAndDistanceForPoints( &v53,  &v52,  self->_lastRoadTravelPoint.x,  self->_lastRoadTravelPoint.y,  v8,  v10);
    SCRCMathUpdateAngleAverage(&self->_roadTravelAngle, 5LL, v53);
    float Average = SCRCMathGetAverage(&self->_roadTravelAngle);
    *(float *)&double v20 = Average;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement upcomingRoadsAtPoint:withDirection:]( self->_currentElement,  "upcomingRoadsAtPoint:withDirection:",  v8,  v10,  v20));
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);
    if (v16 <= 20.0)
    {
      p_approachingEndOfRoad = &self->_approachingEndOfRoad;
      float v25 = -1.0;
    }

    else
    {
      *(float *)&double v23 = Average;
      -[VOTElement distanceToEndOfRoad:withDirection:]( self->_currentElement,  "distanceToEndOfRoad:withDirection:",  v8,  v10,  v23);
      float v25 = v24;
      p_approachingEndOfRoad = &self->_approachingEndOfRoad;
      if (self->_approachingEndOfRoad && v24 > 20.0) {
        BOOL *p_approachingEndOfRoad = 0;
      }
    }

    id v27 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    if (v25 < 20.0 && v25 > 0.0 && !*p_approachingEndOfRoad)
    {
      CGRect v28 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
      endOfRoadApproachingRequest = self->_endOfRoadApproachingRequest;
      self->_endOfRoadApproachingRequest = v28;

      CGRect v30 = self->_endOfRoadApproachingRequest;
      id v31 = sub_10004AE68(off_1001AC148, @"approaching.end.of.road", 0LL, v27);
      double v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      id v33 = -[VOTOutputRequest addString:withLanguage:](v30, "addString:withLanguage:", v32, v27);

      self->_approachingEndOfRoad = 1;
      -[VOTOutputRequest setCompletionDelegate:](self->_endOfRoadApproachingRequest, "setCompletionDelegate:", self);
      -[VOTOutputRequest setDoesNotInterrupt:](self->_endOfRoadApproachingRequest, "setDoesNotInterrupt:", 1LL);
      -[VOTOutputRequest send](self->_endOfRoadApproachingRequest, "send");
    }

    if (v22)
    {
      if (!-[VOTElement isEqual:](self->_upcomingRoadElement, "isEqual:", v22))
      {
        double v34 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
        switchRoadsOutputRequest = self->_switchRoadsOutputRequest;
        self->_switchRoadsOutputRequest = v34;

        id v36 = sub_10004AE68(off_1001AC148, @"map-interaction.upcoming.road.juncture", 0LL, v27);
        upcomingRoadElement = (VOTElement *)objc_claimAutoreleasedReturnValue(v36);
        -[VOTElementManager _addFormattedStringToRequest:formattedString:withElement:]( self,  "_addFormattedStringToRequest:formattedString:withElement:",  self->_switchRoadsOutputRequest,  upcomingRoadElement,  v22);
        double v38 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest lastAction](self->_switchRoadsOutputRequest, "lastAction"));
        LODWORD(v39) = 1062836634;
        double v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v39));
        [v38 setObject:v40 forVariant:32];

        p_upcomingRoadElement = &self->_upcomingRoadElement;
        if ([v21 count] == (id)2)
        {
          double v42 = (void *)objc_claimAutoreleasedReturnValue([v21 objectAtIndex:1]);
          if (v42)
          {
            id v43 = sub_10004A988(off_1001AC148, @"map-interaction.next.road", 0LL);
            double v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
            -[VOTElementManager _addFormattedStringToRequest:formattedString:withElement:]( self,  "_addFormattedStringToRequest:formattedString:withElement:",  self->_switchRoadsOutputRequest,  v44,  v42);
          }

          p_upcomingRoadElement = &self->_upcomingRoadElement;
        }

        -[VOTOutputRequest setCompletionDelegate:](self->_switchRoadsOutputRequest, "setCompletionDelegate:", self);
        -[VOTOutputRequest setDoesNotInterrupt:](self->_switchRoadsOutputRequest, "setDoesNotInterrupt:", 0LL);
        -[VOTOutputRequest send](self->_switchRoadsOutputRequest, "send");
        self->_intersectionTravelPoint.double x = v8;
        self->_intersectionTravelPoint.double y = v10;
        -[SCRCTargetSelectorTimer cancel](self->_switchRoadsAtIntersectionTimer, "cancel");
        objc_storeStrong((id *)p_upcomingRoadElement, v22);
        goto LABEL_34;
      }
    }

    else if (!self->_switchRoadsOutputRequest)
    {
      upcomingRoadElement = self->_upcomingRoadElement;
      self->_upcomingRoadElement = 0LL;
LABEL_34:
    }

    self->_firstRoadTravelPoint = CGPointZero;

LABEL_36:
    double x = self->_intersectionTravelPoint.x;
    double v46 = self->_intersectionTravelPoint.y;
    BOOL v47 = x == CGPointZero.x && v46 == y;
    if (!v47
      && SCRCMathGetDistanceBetweenPoints(x, v46, v8, v10) > 50.0
      && self->_switchRoadsOutputRequest
      && self->_endOfRoadApproachingRequest)
    {
      BOOL v48 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v48 stopSpeakingAtBoundary:0];
    }

    p_double y = &self->_lastRoadTravelPoint.y;
    if (!self->_playingMapSound)
    {
      else {
        id v49 = @"Sounds/RoadWalking.aiff";
      }
      self->_playingMapSound = 1;
      id v50 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_100080364;
      v51[3] = &unk_100176EC0;
      void v51[4] = self;
      [v50 playSoundFast:v49 completionBlock:v51];
    }

    self->_lastRoadTravelPoint.double x = v8;
    goto LABEL_50;
  }

- (void)_echoSameElement:(id)a3 forEvent:(id)a4
{
  id v7 = a3;
  id v6 = a4;
  if ([v7 mapFeatureType] == (id)1) {
    -[VOTElementManager _handleMapSameElement:forEvent:](self, "_handleMapSameElement:forEvent:", v7, v6);
  }
}

- (void)_echoNoElementForEvent:(id)a3
{
  double v5 = v4;
  double timeSpentOnNothing = self->_timeSpentOnNothing;
  if (timeSpentOnNothing == -3061152000.0)
  {
    p_double timeSpentOnNothing = &self->_timeSpentOnNothing;
LABEL_6:
    *p_double timeSpentOnNothing = v5;
    goto LABEL_7;
  }

  if (v5 - timeSpentOnNothing > 0.025)
  {
    p_double timeSpentOnNothing = &self->_lastNothingSoundTime;
    if (v5 - self->_lastNothingSoundTime > 0.100000001)
    {
      double v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      double v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent NoItemExists](&OBJC_CLASS___VOSOutputEvent, "NoItemExists"));
      [v8 sendEvent:v9];

      double v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v10 setCursorFrameForElement:0];

      self->_double timeSpentOnNothing = -3061152000.0;
      goto LABEL_6;
    }
  }

- (void)_drawTouchContainerFrame
{
}

- (id)_echoDifferentTouchContainer:(id)a3 forEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
  unsigned int v8 = [v6 isTouchContainer];
  if (!sub_10004A018() || !v8)
  {
LABEL_11:
    uint64_t v11 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _updateTouchContainerForElement:playSound:]( self,  "_updateTouchContainerForElement:playSound:",  v6,  1LL));
    goto LABEL_12;
  }

  if (!-[SCRCTargetSelectorTimer isPending](self->_containerFrameDrawingTimer, "isPending")
    || -[SCRCTargetSelectorTimer isCancelled](self->_containerFrameDrawingTimer, "isCancelled"))
  {
    -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_containerFrameDrawingTimer, "dispatchAfterDelay:", 0.5);
  }

  double v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer"));
  unsigned __int8 v10 = [v6 isEqual:v9];

  if ((v10 & 1) == 0)
  {
    if (([(id)VOTSharedWorkspace containerOutputFeedback] & 4) != 0)
    {
      double v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      double v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterTouchContainer](&OBJC_CLASS___VOSOutputEvent, "DidEnterTouchContainer"));
      [v12 sendEvent:v13];
    }

    -[VOTElementManager setTouchContainer:](self, "setTouchContainer:", v6);
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", 0LL);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
    [WeakRetained currentElementDidUpdate:self->_touchContainer];

    goto LABEL_11;
  }

  -[VOTElementManager _echoNoElementForEvent:](self, "_echoNoElementForEvent:", v7);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
LABEL_12:
  double v15 = (void *)v11;

  return v15;
}

- (BOOL)_addElementCommunityNameIfNeededToRequest:(id)a3 oldElementCommunity:(id)a4 newElementCommunity:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = v10;
  BOOL v12 = 0;
  if (v9 && v10)
  {
    double v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
    unsigned __int8 v14 = [v11 isEqual:v13];

    if ((v14 & 1) != 0) {
      goto LABEL_5;
    }
    double v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _additionalElementCommunities](self, "_additionalElementCommunities"));
    float v16 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentMedusaApplications](self, "_currentMedusaApplications"));
    if ((unint64_t)[v16 count] > 1 || objc_msgSend(v15, "containsObject:", v11))
    {
    }

    else
    {
      unsigned int v26 = [v15 containsObject:v9];

      if (!v26)
      {
LABEL_5:
        BOOL v12 = 0;
        goto LABEL_13;
      }
    }

    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v11 label]);
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 stringByTrimmingCharactersInSet:v18]);

    id v20 = [v19 length];
    BOOL v12 = v20 != 0LL;
    if (v20)
    {
      id v21 = [v8 addString:v19];
      if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
      {
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v8 lastAction]);
        LODWORD(v23) = 1062836634;
        float v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v23));
        [v22 setObject:v24 forVariant:32];
      }
    }
  }

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6
{
}

- (id)_getSpeakableContainerForContainer:(id)a3
{
  id v3 = a3;
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 label]);
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = v3;
  }

  else
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([v3 touchContainerParent]);
    if (v6)
    {
      do
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);
        id v9 = [v8 length];

        if (v9) {
          break;
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 touchContainerParent]);
        unsigned int v11 = [v10 isEqual:v6];

        if (v11)
        {

          id v6 = 0LL;
          break;
        }

        id v6 = v10;
      }

      while (v10);
    }
  }

  return v6;
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 canSetAsCurrentElement:(BOOL)a6 shouldPlayGuideWireSound:(BOOL)a7 isProtectedApp:(BOOL)a8 includeHint:(BOOL)a9 boundaryHit:(BOOL)a10
{
  BOOL v81 = a8;
  BOOL v10 = a7;
  BOOL v11 = a6;
  id v15 = a3;
  id v16 = a4;
  unsigned int v17 = [v15 isTouchContainer];
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer"));
  id v19 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _echoDifferentTouchContainer:forEvent:]( self,  "_echoDifferentTouchContainer:forEvent:",  v15,  v16));
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  if (v19 == v20) {
    goto LABEL_87;
  }
  if ((sub_10004A018() & v17) != 1
    && v10
    && [v15 shouldPlaySoundWhenFocused])
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v22 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
    [v21 sendEvent:v22];
  }

  else {
    unsigned __int8 v23 = 0;
  }
  uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v79 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager mostRecentElementCommunity](self, "mostRecentElementCommunity"));
  int v24 = !v11;
  if ((v23 & 1) == 0 && (v24 & 1) == 0) {
    -[VOTElementManager _setCurrentElement:isProtectedApp:](self, "_setCurrentElement:isProtectedApp:", v15, v81);
  }
  if (((v17 | v24) & 1) != 0)
  {
    -[VOTElementRotor updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:]( self->_elementRotor,  "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:",  v15,  0LL,  self->_firstResponderElement);
    if (a5) {
      goto LABEL_72;
    }
LABEL_17:
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v26 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

    id v27 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if ([v16 isGuideElementMovementEvent])
    {
      CGRect v28 = (void *)objc_claimAutoreleasedReturnValue([v15 guideElementHeaderText]);
      if ([v28 length]
        && ([v28 isEqualToString:self->_lastSpokenGuideElementHeaderText] & 1) == 0)
      {
        id v29 = [[AXAttributedString alloc] initWithString:v28];
        [v29 setAttribute:&off_100187420 forKey:AXUIAccessibilitySpeechAttributePitch];
        id v30 = [v27 addAttributedString:v29];
        objc_storeStrong((id *)&self->_lastSpokenGuideElementHeaderText, v28);
      }
    }

    uint64_t v31 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v15));
    -[VOTElementManager _addElementCommunityNameIfNeededToRequest:oldElementCommunity:newElementCommunity:]( self,  "_addElementCommunityNameIfNeededToRequest:oldElementCommunity:newElementCommunity:",  v27,  v79,  v31);
    uint64_t v32 = kAXWebContentTrait;
    else {
      unsigned int v33 = 0;
    }
    uint64_t v77 = (void *)v31;
    if ([v15 doesHaveAllTraits:v32]
      && [v15 containedIn:8])
    {
      double v34 = (void *)objc_claimAutoreleasedReturnValue([v15 label]);
      double v35 = (void *)objc_claimAutoreleasedReturnValue([v19 label]);
      unsigned int v36 = [v34 isEqual:v35];
    }

    else
    {
      unsigned int v36 = 0;
    }

    os_log_type_t v37 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _getSpeakableContainerForContainer:]( self,  "_getSpeakableContainerForContainer:",  v19));
    unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _getSpeakableContainerForContainer:]( self,  "_getSpeakableContainerForContainer:",  v18));
    double v76 = v37;
    if (v19
      && (([v19 isEqual:v15] | v33 | v36) & 1) == 0
      && (![v37 isEqual:v78] || !v37))
    {
      else {
        uint64_t v38 = 0x4000LL;
      }
      if (v37)
      {
        id v39 = v37;

        id v19 = v39;
      }

      else if (![v19 includeRoleOnlyForGroupNavigation])
      {
        v38 |= 0x1000000uLL;
      }

      unsigned __int8 v40 = [(id)VOTSharedWorkspace containerOutputFeedback];
      if ((v40 & 2) != 0)
      {
        -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v19,  v27,  v38);
        if ((v40 & 8) != 0 && [(id)VOTSharedWorkspace typingPitchChangeEnabled])
        {
          double v41 = (void *)objc_claimAutoreleasedReturnValue([v27 lastAction]);
          LODWORD(v42) = 1062836634;
          id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v42));
          [v41 setObject:v43 forVariant:32];
        }

        double v44 = (void *)objc_claimAutoreleasedReturnValue([v27 lastAction]);
        [v44 setObject:&__kCFBooleanTrue forVariant:68];
      }
    }

    unsigned int v45 = [v15 keyboardKeyAllowsTouchTyping];
    if (a10) {
      uint64_t v46 = 0x20000000LL;
    }
    else {
      uint64_t v46 = 0LL;
    }
    if (a9)
    {
      unsigned int v47 = -[VOTElementManager _shouldAnnounceCustomRotorHintForElement:]( self,  "_shouldAnnounceCustomRotorHintForElement:",  v15);
      uint64_t v48 = 2050LL;
      if (v47) {
        uint64_t v48 = 0x200000802LL;
      }
      v46 |= v48;
    }

    -[VOTElementManager _prepareElementOutputHeaders:currentElement:request:]( self,  "_prepareElementOutputHeaders:currentElement:request:",  v15,  v80,  v27);
    id v49 = [v15 blockquoteLevel];
    id v50 = [v80 blockquoteLevel];
    if (!v81)
    {
      uint64_t v51 = v46 | 0x20000;
      if (v49 == v50) {
        uint64_t v51 = v46;
      }
      -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v15,  v27,  v51 | 0x800000);
    }

    if (v45)
    {
      self->_touchTypingStartTime = CFAbsoluteTimeGetCurrent();
      self->_flags.didTouchTypingOutputStart = 1;
      if ((char *)[(id)VOTSharedWorkspace typingMode] - 1 <= (char *)1)
      {
        id v82 = v18;
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
        double v53 = (void *)objc_claimAutoreleasedReturnValue([v52 activeKeyboard]);
        unsigned int v54 = [v53 isKeyboardContinuousPathAvailable];

        if (v54)
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          v88[0] = _NSConcreteStackBlock;
          v88[1] = 3221225472LL;
          v88[2] = sub_100081284;
          v88[3] = &unk_100178E10;
          id v89 = v15;
          id v90 = self;
          CFAbsoluteTime v91 = Current;
          [v27 setActionCompletionBlock:v88];
        }

        v85[0] = _NSConcreteStackBlock;
        v85[1] = 3221225472LL;
        v85[2] = sub_1000814A8;
        v85[3] = &unk_100178E38;
        char v87 = v54;
        void v85[4] = self;
        id v56 = v15;
        id v86 = v56;
        [v27 setCompletionBlock:v85];
        if (([(id)VOTSharedWorkspace typingMode] == (id)2
           || ([v56 doesHaveTraits:kAXDeleteKeyTrait] & 1) == 0)
          && [v56 allowsAutoAlternativeCharacterActivation])
        {
          self->_flags.shouldTriggerAlternativeKeyActivation = 1;
        }

        BOOL v18 = v82;
      }
    }

    else
    {
      -[VOTElementManager _setPreviousTouchTypingKey:](self, "_setPreviousTouchTypingKey:", 0LL);
    }

    if ([v15 isBannerNotification])
    {
      v83[0] = _NSConcreteStackBlock;
      v83[1] = 3221225472LL;
      v83[2] = sub_1000814FC;
      v83[3] = &unk_100178E60;
      id v84 = v15;
      [v27 setCompletionBlock:v83];
    }

    -[VOTElementManager sendRequest:](self, "sendRequest:", v27);
    if ([v15 doesHaveTraits:kAXLinkTrait])
    {
      id v57 = (void *)objc_claimAutoreleasedReturnValue([v15 url]);

      if (v57)
      {
        [v15 frame];
        -[VOTElementManager _outputDataDetectorIfPresent:element:includeLinks:]( self,  "_outputDataDetectorIfPresent:element:includeLinks:",  v15,  0LL);
      }
    }

    goto LABEL_72;
  }

  float v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v25 setCursorFrameForElement:v15];

  -[SCRCTargetSelectorTimer cancel](self->_containerFrameDrawingTimer, "cancel");
  if (!a5) {
    goto LABEL_17;
  }
LABEL_72:
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
  if (!-[NSArray containsObject:](self->_currentApplications, "containsObject:", v58))
  {
    double v59 = CFAbsoluteTimeGetCurrent();
    -[VOTElementManager lastTrackingUpdateAppsFailureTime](self, "lastTrackingUpdateAppsFailureTime");
    if (v59 - v60 > 0.25)
    {
      -[VOTElementManager setLastTrackingUpdateAppsFailureTime:]( self,  "setLastTrackingUpdateAppsFailureTime:",  -3061152000.0);
      -[VOTElementManager setLastTrackingUpdateAppsFailureApplication:]( self,  "setLastTrackingUpdateAppsFailureApplication:",  0LL);
    }

    id v61 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager lastTrackingUpdateAppsFailureApplication]( self,  "lastTrackingUpdateAppsFailureApplication"));
    if ([v61 isEqual:v58])
    {
    }

    else
    {
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
      unsigned __int8 v63 = [v62 isEqual:v15];

      if ((v63 & 1) == 0)
      {
        id v64 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
        id v65 = (NSArray *)objc_claimAutoreleasedReturnValue([v64 focusedApplications]);

        currentApplications = self->_currentApplications;
        self->_currentApplications = v65;
        id v67 = v65;

        LOBYTE(v65) = -[NSArray containsObject:](self->_currentApplications, "containsObject:", v58);
        if ((v65 & 1) == 0)
        {
          -[VOTElementManager setLastTrackingUpdateAppsFailureTime:](self, "setLastTrackingUpdateAppsFailureTime:", v59);
          -[VOTElementManager setLastTrackingUpdateAppsFailureApplication:]( self,  "setLastTrackingUpdateAppsFailureApplication:",  v58);
        }
      }
    }

    -[VOTElementManager _handleKeyboardChangedNotification](self, "_handleKeyboardChangedNotification");
  }

  if ([v15 mapFeatureType] == (id)1 && !self->_shouldContinueRoadTracking)
  {
    id v68 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
    startTrackingRoadRequest = self->_startTrackingRoadRequest;
    self->_startTrackingRoadRequest = v68;

    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    id v71 = sub_10004AE68(off_1001AC148, @"map.follow.road.hint", 0LL, v70);
    unsigned __int8 v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
    id v73 =  -[VOTOutputRequest addString:withLanguage:]( self->_startTrackingRoadRequest,  "addString:withLanguage:",  v72,  v70);
    -[VOTOutputRequest setDoesNotInterrupt:](self->_startTrackingRoadRequest, "setDoesNotInterrupt:", 1LL);
    -[VOTOutputRequest setCompletionDelegate:](self->_startTrackingRoadRequest, "setCompletionDelegate:", self);
    -[VOTElementManager sendRequest:](self, "sendRequest:", self->_startTrackingRoadRequest);
  }

  self->_flags.elementCenterSoundPlaying = 0;
  [v16 touchPoint];
  self->_firstRoadTravelPoint.double x = v74;
  self->_firstRoadTravelPoint.double y = v75;
  self->_approachingEndOfRoad = 0;

LABEL_87:
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4 onlyOutputTouchContainerAndSounds:(BOOL)a5 shouldPlayGuideWireSound:(BOOL)a6 isProtectedApp:(BOOL)a7
{
  LOWORD(v7) = 1;
  -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isProtectedApp:includeHint:boundaryHit:]( self,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:canSetAsCurrentElement:shouldPlayGuideWireSound:isP rotectedApp:includeHint:boundaryHit:",  a3,  a4,  a5,  1LL,  a6,  0LL,  v7);
}

- (void)_echoDifferentElement:(id)a3 forEvent:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  -[VOTElementManager _echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:]( self,  "_echoDifferentElement:forEvent:onlyOutputTouchContainerAndSounds:shouldPlayGuideWireSound:",  v7,  v6,  0,  [v7 hasNativeFocus]);
}

- (id)_updateTouchContainerForElement:(id)a3 playSound:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager touchContainer](self, "touchContainer"));
  id v8 = [v6 touchContainerAXElement];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uiElement]);
  id v10 = [v9 axElement];

  if (v8 && v10 && CFEqual(v8, v10))
  {
    BOOL v11 = 0LL;
  }

  else
  {
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v8));
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v12));

    if (v4
      && sub_10004A018()
      && v11
      && ([(id)VOTSharedWorkspace containerOutputFeedback] & 4) != 0)
    {
      double v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterTouchContainer](&OBJC_CLASS___VOSOutputEvent, "DidEnterTouchContainer"));
      [v13 sendEvent:v14];
    }

    -[VOTElementManager setTouchContainer:](self, "setTouchContainer:", v11);
  }

  self->_touchContainersTouchedCount = 0LL;

  return v11;
}

- (double)_alternativeKeyActivateTime
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 currentSoftwareKeyboardLayout]);

  double v4 = sub_10004BE94(v3);
  return v4;
}

- (void)_outputRequestFinished:(id)a3
{
  double v4 = (VOTOutputRequest *)a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  20325LL,  "-[VOTElementManager _outputRequestFinished:]",  @"must be on element manager or system event thread");
  }

  if (self->_bookPageContentOutputRequest == v4)
  {
    if (-[VOTOutputRequest finishedSuccessfully](v4, "finishedSuccessfully"))
    {
      if (-[VOTElementManager _handleMoreBookContentElements](self, "_handleMoreBookContentElements")) {
        goto LABEL_36;
      }
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      if ([v6 readingContentCausesPageTurn])
      {

LABEL_28:
        -[VOTElementManager _handleBookPageFlipAndContinue](self, "_handleBookPageFlipAndContinue");
        goto LABEL_29;
      }

      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      unsigned int v15 = [v14 includeDuringContentReading];

      if (v15) {
        goto LABEL_28;
      }
    }

- (void)outputRequestFinished:(id)a3
{
}

- (id)_cachedLaunchIcon:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray lastObject](self->_cachedLaunchIcons, "lastObject"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueIdentification]);
  unsigned int v7 = [v5 isEqual:v6];

  if (v7)
  {
    id v8 = v4;
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 elementsInDirection:1 withCount:28]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray lastObject](self->_cachedLaunchIcons, "lastObject"));
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v11 = v9;
    id v8 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v8)
    {
      uint64_t v12 = *(void *)v19;
      while (2)
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v12) {
            objc_enumerationMutation(v11);
          }
          unsigned __int8 v14 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "uniqueIdentification", (void)v18));
          unsigned __int8 v16 = [v10 isEqual:v15];

          if ((v16 & 1) != 0)
          {
            id v8 = v14;
            goto LABEL_13;
          }
        }

        id v8 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

- (BOOL)_reDispatchUpdateAppFromTimerIfBundlesAreNotReady
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 focusedApplications]);

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uiElement", (void)v14));
        [(id)v10 updateCache:3045];

        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 uiElement]);
        LOBYTE(v10) = [v11 BOOLWithAXAttribute:3045];

        if ((v10 & 1) == 0)
        {
          CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime;
          LOBYTE(v6) = v12 < 1.0;
          if (v12 < 1.0)
          {
            -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_updateAppFromTimer,  "dispatchAfterDelay:",  0.300000012);
            LOBYTE(v6) = 1;
          }

          goto LABEL_12;
        }
      }

      id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

- (void)_handleUpdateAppFromTimer
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  20492LL,  "-[VOTElementManager _handleUpdateAppFromTimer]",  @"must be on element manager or system event thread");
  }

  if (!-[VOTElementManager _reDispatchUpdateAppFromTimerIfBundlesAreNotReady]( self,  "_reDispatchUpdateAppFromTimerIfBundlesAreNotReady"))
  {
    unsigned int v3 = -[VOTElementManager _shouldSuppressSpeechForPlayPause](self, "_shouldSuppressSpeechForPlayPause");
    id v4 = &kCFBooleanFalse;
    if (!v3) {
      id v4 = &kCFBooleanTrue;
    }
    -[VOTElementManager _updateApplicationAndSpeak:](self, "_updateApplicationAndSpeak:", *v4);
  }

- (void)voiceOverDidRegisterWithSystem
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 0LL));
  [v3 setShouldIgnorePreviousFocusedElement:1];
  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_tvOS_updateWithNativeFocus:withDelayNumber:",  self,  2LL,  v3,  &off_100187380,  0LL);
  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_updateApplicationAndSpeak:",  self,  1LL,  kCFBooleanTrue,  0LL);
}

- (id)_firstResponderForApplications:(id)a3
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v3 = a3;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v11 + 1) + 8 * (void)v7),  "firstResponderElementForFocus",  (void)v11));
        if (v8)
        {
          id v9 = (void *)v8;
          goto LABEL_11;
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  id v9 = 0LL;
LABEL_11:

  return v9;
}

- (id)_firstElementForFocusFromElementCommunities:(id)a3 currentElement:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (v7) {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v7));
  }
  else {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(-[VOTElementManager mostRecentElementCommunity](self, "mostRecentElementCommunity"));
  }
  id v9 = (void *)v8;
  if ([v6 containsObject:v8])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
    unsigned int v11 = [v9 isEqual:v10];

    if (v11)
    {
      id v12 = v9;
    }

    else
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v9 firstElementInApplicationForFocus]);
      if (v13) {
        goto LABEL_11;
      }
      id v12 = (id)objc_claimAutoreleasedReturnValue([v9 firstElementInApplication]);
    }

    __int128 v13 = v12;
    if (v12)
    {
LABEL_11:
    }
  }

  else
  {
    __int128 v13 = 0LL;
  }

  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v14 = v6;
  id v15 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v24;
    do
    {
      __int128 v18 = 0LL;
      do
      {
        if (*(void *)v24 != v17) {
          objc_enumerationMutation(v14);
        }
        __int128 v19 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v18);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "firstElementInApplicationForFocus", (void)v23));

        if (v20
          || (__int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 firstElementInApplication])) != 0)
        {
          __int128 v13 = v20;
        }

        else
        {
          __int128 v13 = 0LL;
        }

        __int128 v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v21 = [v14 countByEnumeratingWithState:&v23 objects:v27 count:16];
      id v16 = v21;
      __int128 v20 = v13;
    }

    while (v21);
  }

  else
  {
    __int128 v20 = v13;
  }

- (id)_elementCommunityForElement:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _sideAppDividerElement](self, "_sideAppDividerElement"));
  else {
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 elementCommunity]);
  }
  uint64_t v8 = v7;

  return v8;
}

- (void)_cacheFocusedElement:(id)a3 forElementCommunity:(id)a4
{
  id v6 = a3;
  id v10 = (id)objc_claimAutoreleasedReturnValue([a4 elementCommunityIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uiElement]);

  id v8 = [v7 axElement];
  id v9 = v10;
  if (v8 && v10)
  {
    -[NSMutableDictionary setObject:forKey:]( self->_focusedElementsByElementCommunityIdentifier,  "setObject:forKey:",  v8,  v10);
    id v9 = v10;
  }
}

- (id)_retrieveCachedFocusedElementForElementCommunity:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 elementCommunityIdentifier]);
  if (v5
    && (id v6 = -[NSMutableDictionary objectForKey:]( self->_focusedElementsByElementCommunityIdentifier,  "objectForKey:",  v5)) != 0LL)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v6));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v7));

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uiElement]);
    unsigned int v11 = [v10 pid];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]);
    unsigned int v13 = [v12 pid];

    if (v11 != v13)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 uiElement]);
      id v15 = (const void *)AXUICreateApplicationElementForElement([v14 axElement]);

      if (v15)
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue( +[AXUIElement uiElementWithAXElement:]( &OBJC_CLASS___AXUIElement,  "uiElementWithAXElement:",  v15));
        uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v16));

        CFRelease(v15);
        id v9 = (void *)v17;
      }
    }

    if ([v8 isValidForApplication:v9])
    {
      id v18 = v8;
    }

    else
    {
      -[NSMutableDictionary removeObjectForKey:]( self->_focusedElementsByElementCommunityIdentifier,  "removeObjectForKey:",  v5);
      id v18 = 0LL;
    }
  }

  else
  {
    id v18 = 0LL;
  }

  return v18;
}

- (BOOL)_addApplicationLabelsAndSummariesToRequest:(id)a3 applicationNames:(id *)a4 summaryElements:(id *)a5
{
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array", a3));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (a4) {
    *a4 = v7;
  }
  if (a5) {
    *a5 = v8;
  }

  return 0;
}

- (void)_testingSetApplications:(id)a3
{
}

- (BOOL)_isWebAppStillOpen
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue( -[NSArray ax_filteredArrayUsingBlock:]( self->_currentApplications,  "ax_filteredArrayUsingBlock:",  &stru_100178EA0));
  BOOL v3 = [v2 count] != 0;

  return v3;
}

- (void)_updateApplicationAndSpeak:(id)a3
{
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nextElementToFocus](self, "nextElementToFocus"));
  -[VOTElementManager setNextElementToFocus:](self, "setNextElementToFocus:", 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nextStringToSpeakOnScreenChange](self, "nextStringToSpeakOnScreenChange"));
  id v7 = [v6 copy];

  uint64_t v8 = VOTLogLayoutChange(-[VOTElementManager setNextStringToSpeakOnScreenChange:](self, "setNextStringToSpeakOnScreenChange:", 0LL));
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    sub_1000F2D3C();
  }

  id v10 = [(id)VOTSharedWorkspace screenOn];
  if ((_DWORD)v10)
  {
    uint64_t v11 = VOTLogElement(v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_EVENT,  0xEEEEB0B5B2B2EEEELL,  "BeginAppUpdate",  "",  buf,  2u);
    }

    AXPerformBlockOnMainThreadAfterDelay(&stru_100178EC0, v13, 0.0);
    double v14 = CFAbsoluteTimeGetCurrent() - self->_lastPopupTime;
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if ([(id)VOTSharedWorkspace tapAndHoldMode])
    {
      if (v14 >= 1.25)
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
        unsigned __int8 v17 = [v15 isValidForApplication:v16];

        if ((v17 & 1) != 0) {
          goto LABEL_293;
        }
      }
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 focusedApplications]);

    uint64_t v21 = VOTLogLayoutChange(v20);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
      sub_1000F2CD0();
    }

    id v347 = [(id)VOTSharedWorkspace fingerCount];
    if ([v4 BOOLValue])
    {
      id v355 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    }

    else
    {
      id v355 = 0LL;
    }

    NSUInteger location = (id *)&self->_currentApplications;
    unsigned int v23 = -[NSArray isEqualToArray:](self->_currentApplications, "isEqualToArray:", v19);
    uint64_t v24 = objc_claimAutoreleasedReturnValue([v15 application]);
    if (v24) {
      unsigned __int8 v25 = [v19 containsObject:v24];
    }
    else {
      unsigned __int8 v25 = 0;
    }
    BOOL v26 = -[VOTElementManager _isWebAppStillOpen](self, "_isWebAppStillOpen");
    if (!v26)
    {
      uint64_t v27 = VOTLogWebPageMovement(v26);
      CGRect v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG)) {
        sub_1000F2CA4();
      }

      -[VOTElementManager _clearWebLoadedSound](self, "_clearWebLoadedSound");
    }

    v352 = v15;
    unsigned int v338 = v23;
    if ((v23 & 1) != 0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      -[VOTElementManager lastPauseSpeechAndHapticsStart](self, "lastPauseSpeechAndHapticsStart");
      __int128 v31 = (void *)v24;
      if (Current - v30 > 30.0) {
        -[VOTElementManager _handlePauseSpeechAndHapticsNotification:]( self,  "_handlePauseSpeechAndHapticsNotification:",  &__kCFBooleanFalse);
      }
      id v350 = 0LL;
      id v351 = 0LL;
      unsigned int v340 = 0;
    }

    else
    {
      objc_storeStrong(location, v19);
      id v362 = 0LL;
      id v363 = 0LL;
      unsigned int v340 = -[VOTElementManager _addApplicationLabelsAndSummariesToRequest:applicationNames:summaryElements:]( self,  "_addApplicationLabelsAndSummariesToRequest:applicationNames:summaryElements:",  v355,  &v363,  &v362);
      id v350 = v363;
      id v351 = v362;
      double v32 = CFAbsoluteTimeGetCurrent();
      -[VOTElementManager lastDuckingDisablementSessionStart](self, "lastDuckingDisablementSessionStart");
      if (v32 - v33 > 1.0) {
        -[VOTElementManager _handleDuckingDisabling:](self, "_handleDuckingDisabling:", &__kCFBooleanFalse);
      }
      -[VOTElementManager _handlePauseSpeechAndHapticsNotification:]( self,  "_handlePauseSpeechAndHapticsNotification:",  &__kCFBooleanFalse);
      elementBeforePopup = self->_elementBeforePopup;
      self->_elementBeforePopup = 0LL;

      uint64_t v36 = VOTLogCommon(v35);
      os_log_type_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "Application is no longer valid, resetting",  buf,  2u);
      }

      __int128 v31 = (void *)v24;
    }

    id v38 = v7;
    currentApplications = self->_currentApplications;
    unsigned __int8 v40 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewApplication]( self,  "previousTableOrCollectionViewApplication"));
    LOBYTE(currentApplications) = -[NSArray containsObject:](currentApplications, "containsObject:", v40);

    if ((currentApplications & 1) == 0)
    {
      self->_previousTableOrCollectionViewRowTime = -3061152000.0;
      double v41 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager previousTableOrCollectionViewList](self, "previousTableOrCollectionViewList"));
      [v41 removeAllObjects];

      double v42 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewToMetadata]( self,  "previousTableOrCollectionViewToMetadata"));
      [v42 removeAllObjects];

      -[VOTElementManager setPreviousTableOrCollectionViewApplication:]( self,  "setPreviousTableOrCollectionViewApplication:",  0LL);
    }

    id v43 = v4;
    if ((v25 & 1) == 0)
    {
      lastScrollStatus = self->_lastScrollStatus;
      self->_lastScrollStatus = 0LL;
    }

    BOOL v45 = -[VOTElement verifyElementExists:](self->_currentElement, "verifyElementExists:", 0LL);
    BOOL v46 = v45;
    uint64_t v47 = VOTLogWebPageMovement(v45);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
      sub_1000F2BDC((id *)&self->_currentElement, v46);
    }

    double v49 = CFAbsoluteTimeGetCurrent();
    id v50 = -[VOTElementManager lastUserElementTouchTime](self, "lastUserElementTouchTime");
    if (v49 - v51 < 1.0 && v46)
    {
      uint64_t v53 = VOTLogCommon(v50);
      unsigned int v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
      {
        currentElement = self->_currentElement;
        *(_DWORD *)buf = 138412290;
        *(void *)v366 = currentElement;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "Not moving focus for screen change because we touched recently on an element and it still exists{%@}",  buf,  0xCu);
      }

      id v4 = v43;
      id v7 = v38;
      id v56 = v31;
      id v15 = v352;
      goto LABEL_292;
    }

    BOOL v337 = v46;
    p_currentElement = &self->_currentElement;
    if ([v19 count] == (id)1
      && (id v57 = (void *)objc_claimAutoreleasedReturnValue([v19 firstObject]),
          unsigned int v58 = [v57 isClipViewService],
          v57,
          v58))
    {
    }

    else if (v5)
    {
      double v59 = v5;
      unsigned int v54 = v59;
      int v60 = 0;
      id v5 = v59;
LABEL_49:
      id v4 = v43;
      v339 = v31;
      uint64_t v61 = VOTLogWebPageMovement(v59);
      uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      id v7 = v38;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)) {
        sub_1000F2B70();
      }

      id v15 = v352;
      if (v337)
      {
        BOOL v63 = -[VOTElement hasNativeFocus](*p_currentElement, "hasNativeFocus");
        if (v60 & v63)
        {
          uint64_t v64 = VOTLogWebPageMovement(v63);
          id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG)) {
            sub_1000F2AD0();
          }

          uint64_t v66 = -[VOTElement doesHaveTraits:](*p_currentElement, "doesHaveTraits:", kAXWebContentTrait);
          if (!(_DWORD)v66) {
            goto LABEL_58;
          }
          uint64_t v66 = objc_claimAutoreleasedReturnValue(-[VOTElementManager webPageLoadURL](self, "webPageLoadURL"));
          if (!v66) {
            goto LABEL_58;
          }
          id v67 = (void *)v66;
          id v68 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager webPageLoadURL](self, "webPageLoadURL"));
          id v69 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement webAreaURL](self->_currentElement, "webAreaURL"));
          unsigned int v341 = [v68 isEqual:v69];

          id v15 = v352;
          id v7 = v38;

          if (v341)
          {
LABEL_58:
            uint64_t v70 = VOTLogWebPageMovement(v66);
            id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              unsigned __int8 v72 = v54;
              id v73 = *p_currentElement;
              CGFloat v74 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s webAreaURL](v72, "webAreaURL"));
              *(_DWORD *)buf = 138412802;
              *(void *)v366 = v73;
              unsigned int v54 = v72;
              *(_WORD *)&v366[8] = 2112;
              *(void *)v367 = v72;
              *(_WORD *)&v367[8] = 2112;
              *(void *)&v367[10] = v74;
              _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_INFO,  "Current element has native focus, not moving focus again: %@ -> %@:newElement:%@",  buf,  0x20u);
            }

            id v56 = v339;
            goto LABEL_292;
          }
        }
      }

      if (CFAbsoluteTimeGetCurrent() - self->_previousTableOrCollectionViewRowTime <= 1.0) {
        goto LABEL_81;
      }
      CGFloat v75 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewApplication]( self,  "previousTableOrCollectionViewApplication"));
      if ([v75 isSpringBoard])
      {
LABEL_80:

        goto LABEL_81;
      }

      double v76 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager previousTableOrCollectionViewApplication]( self,  "previousTableOrCollectionViewApplication"));
      unsigned __int8 v77 = [v76 isSetupBuddy];

      if ((v77 & 1) != 0)
      {
LABEL_81:
        uint64_t v334 = kAXStatusBarElementTrait;
        if ((-[os_log_s doesHaveTraits:](v54, "doesHaveTraits:") & 1) != 0
          || (BOOL v98 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s uiElement](v54, "uiElement")),
              unsigned int v99 = [v98 BOOLWithAXAttribute:2238],
              v98,
              v99))
        {

          uint64_t v101 = VOTLogLayoutChange(v100);
          unsigned __int8 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
          id v56 = v339;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG)) {
            sub_1000F2A44();
          }

          unsigned int v54 = 0LL;
        }

        else
        {
          id v56 = v339;
        }

        if ([v15 isValid])
        {
          NSUInteger v103 = (void *)objc_claimAutoreleasedReturnValue([v15 uiElement]);
          unsigned int v104 = [v103 BOOLWithAXAttribute:2211];

          if (v104)
          {
            CGRect v105 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
            [v15 centerPoint];
            objc_msgSend(v105, "convertPoint:fromContextId:", objc_msgSend(v15, "windowContextId"), v106, v107);
            double v109 = v108;
            double v111 = v110;

            uint64_t v112 = -[VOTElement initWithPosition:]( objc_alloc(&OBJC_CLASS___VOTElement),  "initWithPosition:",  v109,  v111);
            uint64_t v113 = v112;
            if (v112 && -[VOTElement isEqual:](v112, "isEqual:", v15) && v14 >= 1.25)
            {
              uint64_t v114 = v15;

              uint64_t v116 = VOTLogLayoutChange(v115);
              id v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
              if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG)) {
                sub_1000F29E4();
              }
            }

            else
            {
              uint64_t v114 = v54;
            }

            unsigned int v54 = v114;
          }
        }

        id v118 = -[os_log_s isBannerNotification](v54, "isBannerNotification");
        if ((_DWORD)v118)
        {
          uint64_t v119 = VOTLogElement(v118);
          id v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
          if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG)) {
            sub_1000F29B8();
          }

          unsigned int v54 = 0LL;
        }

        v343 = v54;
        BOOL v121 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s bundleIdentifier](v54, "bundleIdentifier"));
        if ([v121 isEqualToString:@"com.apple.assistivetouchd"])
        {
          uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement bundleIdentifier](*p_currentElement, "bundleIdentifier"));
          unsigned __int8 v123 = [v122 isEqualToString:@"com.apple.assistivetouchd"];

          if ((v123 & 1) == 0)
          {
            uint64_t v125 = VOTLogElement(v124);
            unsigned __int8 v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG)) {
              sub_1000F298C();
            }

LABEL_106:
            unsigned int v54 = v343;
LABEL_292:

LABEL_293:
            goto LABEL_294;
          }
        }

        else
        {
        }

        uint64_t v127 = VOTLogWebPageMovement(v124);
        BOOL v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
        unsigned int v54 = v343;
        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG)) {
          sub_1000F28F8();
        }

        v336 = v19;
        if (v347 == (id)1 && v14 >= 1.25)
        {
          id v129 = objc_allocWithZone((Class)&OBJC_CLASS___VOTElement);
          [(id)VOTSharedWorkspace fingerPosition];
          uint64_t v130 = (VOTElement *)objc_msgSend(v129, "initWithPosition:");
          uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
          unsigned int v132 = -[VOTElement isEqual:](v130, "isEqual:", v131);

          if (!v132) {
            goto LABEL_275;
          }
          v354 = v5;
          v133 = v7;
          uint64_t v130 = v130;
          v134 = v130;
          goto LABEL_274;
        }

        v135 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v343, "application"));
        unsigned int v136 = [v135 isSystemApp];

        if (v136 && CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch > 1.0)
        {
          id v139 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _cachedLaunchIcon:](self, "_cachedLaunchIcon:", v343));
          uint64_t v140 = VOTLogElement(v139);
          v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG)) {
            sub_1000F2898();
          }

          [v139 updateIsVisible];
          if ([v139 isVisible])
          {
            __int128 v142 = v139;

            uint64_t v144 = VOTLogElement(v143);
            __int128 v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG)) {
              sub_1000F2778();
            }

            if ([v19 count] == (id)1)
            {
              v146 = (void *)objc_claimAutoreleasedReturnValue([v19 firstObject]);
              unsigned int v147 = [v146 isSystemApp];

              if (v147) {
                -[NSMutableArray removeLastObject](self->_cachedLaunchIcons, "removeLastObject");
              }
            }

            int v148 = 1;
            v343 = (os_log_s *)v142;
            goto LABEL_139;
          }
        }

        if (!self->_elementBeforeAlert)
        {
          int v148 = 0;
          goto LABEL_140;
        }

        id v137 = -[os_log_s doesHaveTraits:](v343, "doesHaveTraits:", kAXIsEditingTrait);
        if ((v137 & 1) != 0)
        {
          int v148 = 0;
          goto LABEL_140;
        }

        p_elementBeforeAlert = &self->_elementBeforeAlert;
        uint64_t v150 = VOTLogWebPageMovement(v137);
        v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2838();
        }

        BOOL v152 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
        -[VOTElement centerPoint](*p_elementBeforeAlert, "centerPoint");
        objc_msgSend( v152,  "convertPoint:fromContextId:",  -[VOTElement windowContextId](*p_elementBeforeAlert, "windowContextId"),  v153,  v154);
        double v156 = v155;
        double v158 = v157;

        __int128 v142 = -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", v156, v158);
        -[VOTElement frame](v142, "frame");
        CGFloat v160 = v159;
        CGFloat v162 = v161;
        CGFloat v164 = v163;
        CGFloat v166 = v165;
        -[VOTElement frame](*p_elementBeforeAlert, "frame");
        v372.origin.double x = v167;
        v372.origin.double y = v168;
        v372.size.CGFloat width = v169;
        v372.size.CGFloat height = v170;
        v368.origin.double x = v160;
        v368.origin.double y = v162;
        v368.size.CGFloat width = v164;
        v368.size.CGFloat height = v166;
        CGRect v369 = CGRectIntersection(v368, v372);
        if (v369.size.width <= 0.0 || CFAbsoluteTimeGetCurrent() - self->_lastAlertTime <= 3.0)
        {
          int v148 = 0;
        }

        else
        {
          __int128 v142 = v142;

          uint64_t v172 = VOTLogLayoutChange(v171);
          v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(v172);
          if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG)) {
            sub_1000F27D8();
          }

          v174 = *p_elementBeforeAlert;
          *p_elementBeforeAlert = 0LL;

          int v148 = 1;
          v343 = (os_log_s *)v142;
        }

        id v56 = v339;
LABEL_139:

LABEL_140:
        uint64_t v175 = AXLogCommon(v137, v138);
        v176 = (os_log_s *)objc_claimAutoreleasedReturnValue(v175);
        if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v177 = -[VOTElement isVisible](self->_elementBeforePopup, "isVisible");
          v178 = self->_elementBeforePopup;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v366 = v148;
          *(_WORD *)&v366[4] = 1024;
          *(_DWORD *)&v366[6] = v177;
          *(_WORD *)v367 = 2112;
          *(void *)&v367[2] = v178;
          _os_log_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_DEFAULT,  "Chose new: %d, before pops: %d, %@",  buf,  0x18u);
        }

        v354 = v5;
        if ((v148 & 1) != 0)
        {
          unsigned int v54 = v343;
          goto LABEL_185;
        }

        v179 = self->_elementBeforePopup;
        if (!v179)
        {
          char v182 = 0;
          unsigned int v54 = v343;
          goto LABEL_176;
        }

        p_elementBeforePopup = &self->_elementBeforePopup;
        -[VOTElement updateIsVisible](v179, "updateIsVisible");
        unsigned int v54 = v343;
        if (!-[VOTElement isVisible](self->_elementBeforePopup, "isVisible")
          || !-[VOTElement doesHaveTraits:]( *p_elementBeforePopup,  "doesHaveTraits:",  kAXLaunchIconTrait | kAXWebContentTrait)
          && !-[VOTElement isChronod](*p_elementBeforePopup, "isChronod")
          || (id v181 = -[os_log_s doesHaveAllTraits:](v343, "doesHaveAllTraits:", kAXTextEntryTrait | kAXIsEditingTrait),
              (v181 & 1) != 0))
        {
          char v182 = 0;
LABEL_176:
          if ((v182 & 1) == 0 && ((v338 ^ 1) & 1) == 0 && (byte_1001ACF20 & 1) == 0)
          {
            if (-[os_log_s doesHaveTraits:](v54, "doesHaveTraits:", v334))
            {
              if ([*location count] == (id)1)
              {
                v234 = (void *)objc_claimAutoreleasedReturnValue([*location firstObject]);
                unsigned int v235 = [v234 isSpringBoard];

                if (v235)
                {
                  uint64_t v237 = VOTLogWebPageMovement(v236);
                  v238 = (os_log_s *)objc_claimAutoreleasedReturnValue(v237);
                  if (os_log_type_enabled(v238, OS_LOG_TYPE_DEBUG)) {
                    sub_1000F2658();
                  }

                  -[VOTElementManager _handleScreenChange:sound:](self, "_handleScreenChange:sound:", 0LL, 0LL);
                  byte_1001ACF20 = 1;
                  goto LABEL_292;
                }
              }
            }
          }

- (id)_getAutoSpeakWatchFaceElements:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v5 = v4;
  if (v3) {
    [v4 addObject:v3];
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 autoSpeakWatchElements]);
  if ([v6 count]) {
    [v5 addObjectsFromArray:v6];
  }

  return v5;
}

- (id)_firstElementWithCurrentElement:(id)a3 focusedApplications:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 nativeFocusPreferredElement]);

  id v10 = [v9 isAccessibleElement];
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 accessibleDescendants]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 firstObject]);

    id v9 = (void *)v12;
  }

  uint64_t v13 = VOTLogLayoutChange(v10);
  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    sub_1000F2E30();
  }

  if (!v9)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _allElementCommunitiesWithFocusedApplications:]( self,  "_allElementCommunitiesWithFocusedApplications:",  v7));
    id v16 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v6));
    if (!v6 && CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime <= 2.0)
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _elementCommunityForElement:]( self,  "_elementCommunityForElement:",  self->_elementBeforeScreenChange));

      id v16 = (void *)v17;
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _firstElementForFocusFromElementCommunities:currentElement:]( self,  "_firstElementForFocusFromElementCommunities:currentElement:",  v15,  v6));
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _elementCommunityForElement:](self, "_elementCommunityForElement:", v9));
    uint64_t v19 = VOTLogLayoutChange(v18);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
      sub_1000F2DC8();
    }

    id v21 = [v9 isAlive];
    if ((v21 & 1) == 0)
    {
      uint64_t v22 = VOTLogLayoutChange(v21);
      unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG)) {
        sub_1000F2D9C();
      }

      id v9 = 0LL;
    }
  }

  return v9;
}

- (void)_handleSystemLockedOutputBehavior:(id)a3 shouldSendRequest:(BOOL *)a4 startElement:(id *)a5
{
  id v8 = a3;
  unsigned int v9 = [(id)VOTSharedWorkspace isRingerSwitchSilent];
  unsigned int v10 = [(id)VOTSharedWorkspace useRingerSwitchForNotificationOutput];
  id v11 = [(id)VOTSharedWorkspace notificationsWhenLockedOutput];
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12 || ([(id)VOTSharedWorkspace userUnlockedDevice] & 1) != 0)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*a5 elementsInDirection:1 withCount:100]);
    double v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v13));

    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v15 = v14;
    id v16 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v34;
      while (2)
      {
        for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
          if ([v19 isAwayAlertItem])
          {
            id v16 = v19;
            goto LABEL_19;
          }
        }

        id v16 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }

- (void)_handleElementChangedNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = VOTLogLayoutChange(v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1000F2E90();
  }

  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
  if ((objc_opt_isKindOfClass(v4, v8) & 1) == 0
    || !-[VOTElementManager _shouldIgnoreElementMovementNotification:]( self,  "_shouldIgnoreElementMovementNotification:",  v4))
  {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 3LL));
    -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v9, 0.0);

    unsigned __int8 v10 = -[VOTElementManager didReceiveForceUpdateChangeToken](self, "didReceiveForceUpdateChangeToken");
    -[VOTElementManager setDidReceiveForceUpdateChangeToken:](self, "setDidReceiveForceUpdateChangeToken:", 0LL);
    if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v4,  kAXPerformElementUpdateImmediatelyToken))
    {
      double v11 = 0.05;
    }

    else
    {
      double v11 = 0.75;
    }

    if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v4,  kAXAnnouncementTypeStopSpeech))
    {
      self->_flags.shouldSpeakNextLayoutChange = 0;
      if ((v10 & 1) != 0) {
        goto LABEL_17;
      }
    }

    else
    {
      if (CFAbsoluteTimeGetCurrent() - self->_lastActivationTime < 0.25) {
        goto LABEL_17;
      }
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nextElementToFocus](self, "nextElementToFocus"));
      if (v12)
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueIdentification]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nextElementToFocus](self, "nextElementToFocus"));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueIdentification]);
        char v17 = [v14 isEqual:v16] ^ 1;
      }

      else
      {
        char v17 = 1;
      }

      self->_flags.shouldSpeakNextLayoutChange = v17;
      if ((v10 & 1) != 0) {
        goto LABEL_17;
      }
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 application]);
    unsigned int v20 = [v19 isIBooks];

    if (!v20)
    {
LABEL_18:
      -[SCRCTargetSelectorTimer cancel](self->_updateLayoutTimer, "cancel");
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_updateLayoutTimer, "dispatchAfterDelay:", v11);
      goto LABEL_19;
    }

- (void)_handleLayoutChangeFromTimer
{
}

- (void)_handleLayoutChange:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    -[VOTElementManager setCachedAdditionalElementCommunities:](self, "setCachedAdditionalElementCommunities:", 0LL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nextElementToFocus](self, "nextElementToFocus"));
    -[VOTElementManager setNextElementToFocus:](self, "setNextElementToFocus:", 0LL);
    uint64_t v6 = VOTLogLayoutChange(-[VOTElementManager setNextStringToSpeakOnScreenChange:](self, "setNextStringToSpeakOnScreenChange:", 0LL));
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_1000F34AC();
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
    unsigned __int8 v9 = [v8 isVoiceControlRunning];

    if ((v9 & 1) != 0) {
      goto LABEL_227;
    }
    if ([(id)VOTSharedWorkspace brailleInputActive])
    {
      id v10 = [(id)VOTSharedWorkspace brailleInputAllowsElementMovement];
      if ((v10 & 1) == 0)
      {
        uint64_t v14 = VOTLogElement(v10);
        double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Stopping _handleLayoutChange to prevent the focus from moving while we're editing text in BSI",  (uint8_t *)&buf,  2u);
        }

        goto LABEL_226;
      }
    }

    if (([(id)VOTSharedWorkspace tapAndHoldMode] & 1) != 0
      || self->_flags.isReadingAll
      || self->_flags.performedElementUpdateForSelectionChange)
    {
      goto LABEL_227;
    }

    double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if (self->_systemIsSleeping)
    {
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstElementInApplicationForFocus]);
    }

    else
    {
      uint64_t v13 = v5;
    }

    uint64_t v15 = kAXWebContentTrait;
    uint64_t v196 = kAXWebContentTrait;
    if (v13)
    {
      unsigned int v16 = objc_msgSend(v13, "doesHaveTraits:");
      uint64_t v15 = v196;
    }

    else
    {
      unsigned int v16 = 1;
    }

    uint64_t v195 = kAXIsEditingTrait;
    uint64_t v17 = kAXIsEditingTrait | v15;
    if (-[os_log_s doesHaveAllTraits:](v11, "doesHaveAllTraits:", kAXIsEditingTrait | v15))
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application"));
      unsigned int v19 = [v18 isMail];

      if ((v19 & v16) != 0)
      {
        uint64_t v21 = VOTLogLayoutChange(v20);
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
          sub_1000F2EF0();
        }
LABEL_225:

        uint64_t v5 = v13;
LABEL_226:

LABEL_227:
        return;
      }
    }

    self->_systemIsSleeping = 0;
    unint64_t v23 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
    if (v23)
    {
      uint64_t v24 = VOTLogWebPageMovement(v23);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3434(self, v22);
      }
      goto LABEL_225;
    }

    uint64_t v25 = VOTLogLayoutChange(0LL);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
      sub_1000F33CC();
    }

    -[os_log_s centerPoint](v11, "centerPoint");
    double v28 = v27;
    double v30 = v29;
    -[os_log_s updateCenterPoint](v11, "updateCenterPoint");
    -[os_log_s centerPoint](v11, "centerPoint");
    double v32 = v31;
    double v34 = v33;
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s remoteParent](v11, "remoteParent"));
    if (v35)
    {

      if (v5) {
        goto LABEL_50;
      }
    }

    else
    {
      BOOL v37 = v5 == 0LL;
      id v38 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s application](v11, "application"));
      unsigned __int8 v39 = -[os_log_s isValidForApplication:](v11, "isValidForApplication:", v38);

      if (!v37) {
        goto LABEL_50;
      }
      if ((v39 & 1) == 0)
      {
        double x = CGPointZero.x;
        double y = CGPointZero.y;
LABEL_36:
        if (v28 == x && v30 == y)
        {
          uint64_t v42 = VOTLogLayoutChange(v36);
          id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
            sub_1000F333C((uint64_t)self, v43);
          }

          double v32 = self->_lastValidElementLocation.x;
          double v34 = self->_lastValidElementLocation.y;
        }

        else
        {
          BOOL v44 = sub_10004B7F8();
          __int128 v45 = xmmword_1001AD170;
          BOOL v46 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
          objc_msgSend( v46,  "convertPoint:fromContextId:",  -[os_log_s windowContextId](v11, "windowContextId"),  v32,  v34);
          double v48 = v47;

          if (v48 >= 0.0)
          {
            if (v44) {
              double v50 = *((double *)&v45 + 1);
            }
            else {
              double v50 = *(double *)&v45;
            }
            float v51 = v50;
            if (v48 < v51)
            {
              double v32 = v28;
              double v34 = v30;
              goto LABEL_50;
            }

            uint64_t v49 = objc_claimAutoreleasedReturnValue(-[os_log_s previousElement](v11, "previousElement"));
          }

          else
          {
            uint64_t v49 = objc_claimAutoreleasedReturnValue(-[os_log_s nextElement](v11, "nextElement"));
          }

          uint64_t v13 = (void *)v49;
        }

- (void)_updateFirstResponderTypingBuffer
{
  BOOL v3 = (__CFString *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value"));
  if (!v3) {
    BOOL v3 = &stru_10017A920;
  }
  uint64_t v7 = v3;
  if (-[__CFString isAXAttributedString](v3, "isAXAttributedString")
    && (-[__CFString hasAttribute:](v7, "hasAttribute:", UIAccessibilityTokenPlaceholder) & 1) != 0)
  {
    id v4 = &stru_10017A920;
  }

  else
  {
    id v4 = v7;
  }

  -[NSMutableString setString:](self->_elementTypingBuffer, "setString:", v4);
  id v5 = -[VOTElement selectedTextRange](self->_firstResponderElement, "selectedTextRange");
  -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v5,  v6,  0LL);
  -[NSMutableDictionary removeAllObjects](self->_lastSeenFontProperties, "removeAllObjects");
  -[VOTElementManager _setLastSeenLineAndColumn:](self, "_setLastSeenLineAndColumn:", 0LL);
}

- (void)setCurrentElement:(id)a3
{
}

- (void)setCurrentElement:(id)a3 shouldSetBrailleElement:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL inUnitTestingMode = self->_inUnitTestingMode;
  id v7 = a3;
  uint64_t v8 = v7;
  if (inUnitTestingMode)
  {
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v7);

    self->_flags.focusIsOnElement = 1;
  }

  else
  {
    uint64_t v9 = VOTLogWebPageMovement(v7);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
      sub_1000F350C(v10);
    }

    elementManagerThread = self->_elementManagerThread;
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v4));
    -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_setCurrentElement:shouldSetBrailleElement:",  self,  2LL,  v8,  v12,  0LL);
  }

- (void)setFirstResponder:(id)a3
{
  id v8 = a3;
  if (-[VOTElement isEqual:](self->_firstResponderElement, "isEqual:") && !self->_inUnitTestingMode)
  {
    if (self->_elementSelectionRangeBufferInternal.location != 0x7FFFFFFF) {
      goto LABEL_5;
    }
  }

  else
  {
    objc_storeStrong((id *)&self->_firstResponderElement, a3);
    id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
    [WeakRetained firstResponderDidUpdate:v8];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    [v6 setExplictlyEnabledQuickNav:0];

    -[VOTElementManager _handleKeyboardChangedNotification](self, "_handleKeyboardChangedNotification");
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v7 updateKeyboardSettings];
  }

  -[VOTElementManager _updateFirstResponderTypingBuffer](self, "_updateFirstResponderTypingBuffer");
LABEL_5:
}

- (__AXUIElement)_firstResponderAXUIElementRefFromCurrentApplications
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  BOOL v3 = self->_currentApplications;
  id v4 = -[NSArray countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
LABEL_3:
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(void *)v15 != v6) {
        objc_enumerationMutation(v3);
      }
      id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v7), "uiElement", (void)v14));
      [v8 updateCache:3002];
      uint64_t v9 = (__AXUIElement *)[v8 objectWithAXAttribute:3002];

      if (v9) {
        goto LABEL_11;
      }
      if (v5 == (id)++v7)
      {
        id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uiElement]);

  [v11 updateCache:3002];
  uint64_t v9 = (__AXUIElement *)[v11 objectWithAXAttribute:3002];

  if (!v9)
  {
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
    BOOL v3 = (NSArray *)objc_claimAutoreleasedReturnValue([v12 uiElement]);

    -[NSArray updateCache:](v3, "updateCache:", 3002LL);
    uint64_t v9 = (__AXUIElement *)-[NSArray objectWithAXAttribute:](v3, "objectWithAXAttribute:", 3002LL);
LABEL_11:
  }

  return v9;
}

- (void)_updateFirstResponder
{
  if (!self->_inUnitTestingMode)
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager currentElement](self, "currentElement"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uiElement]);
    id v5 = (__AXUIElement *)[v4 objectWithAXAttribute:3002];

    if (!v5) {
      id v5 = -[VOTElementManager _firstResponderAXUIElementRefFromCurrentApplications]( self,  "_firstResponderAXUIElementRefFromCurrentApplications");
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_firstResponderElement, "uiElement"));
    id v7 = [v6 axElement];

    if (AXSafeEqual(v5, v7))
    {
      if (self->_elementSelectionRangeBufferInternal.location == 0x7FFFFFFF) {
        -[VOTElementManager _updateFirstResponderTypingBuffer](self, "_updateFirstResponderTypingBuffer");
      }
    }

    else
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", v5));
      id v9 = (id)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v8));

      -[VOTElementManager setFirstResponder:](self, "setFirstResponder:", v9);
    }
  }

- (void)_updateCurrentElementFrame
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  [v4 setCursorFrameForElement:v3];
}

- (void)_updateCursorFrameForElementIfNeeded:(id)a3
{
  id v6 = a3;
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));

  id v5 = v6;
  if (v4 == v6)
  {
    [v6 updateFrame];
    -[VOTElementManager _updateCurrentElementFrame](self, "_updateCurrentElementFrame");
    id v5 = v6;
  }
}

- (void)_updateCursorFrameForLineFrameMovement:(id)a3
{
  NSUInteger location = self->_elementUnitOutputRange.location;
  NSUInteger length = self->_elementUnitOutputRange.length;
  id v6 = a3;
  objc_msgSend(v6, "boundsForRange:", location, length);
  self->_lineFrame.origin.double x = v7;
  self->_lineFrame.origin.double y = v8;
  self->_lineFrame.size.double width = v9;
  self->_lineFrame.size.double height = v10;
  double v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
  id v12 = [v6 windowContextId];

  objc_msgSend( v11,  "convertRect:fromContextId:",  v12,  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);
  self->_lineFrame.origin.double x = v13;
  self->_lineFrame.origin.double y = v14;
  self->_lineFrame.size.double width = v15;
  self->_lineFrame.size.double height = v16;

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  objc_msgSend( v17,  "setCursorFrame:",  self->_lineFrame.origin.x,  self->_lineFrame.origin.y,  self->_lineFrame.size.width,  self->_lineFrame.size.height);

  self->_textRangeBeingDisplayed = 1;
}

- (void)updateCurrentElementFrame
{
  if (-[VOTElementManager isOnElementManagerThread](self, "isOnElementManagerThread")) {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  22329LL,  "-[VOTElementManager updateCurrentElementFrame]",  @"You called updateCurrentElementFrame from VOTElementManager. That's unacceptable");
  }
  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_updateCurrentElementFrame",  self,  0LL,  0LL);
}

- (void)_elementFetchFoundDirectTouchElements:(id)a3
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100086DE0;
  v4[3] = &unk_100176DA8;
  v4[4] = self;
  id v5 = a3;
  id v3 = v5;
  AXPerformBlockOnMainThread(v4);
}

- (void)elementFetchFoundDirectTouchElements:(id)a3
{
}

- (BOOL)_shouldAnnounceCustomRotorHintForElement:(id)a3
{
  id v4 = a3;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 touchContainerParent]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastContainerForCustomRotorHint](self, "lastContainerForCustomRotorHint"));
  double v29 = self;
  double v30 = (void *)v5;
  if (v6 || !v5)
  {
    CGFloat v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastContainerForCustomRotorHint](self, "lastContainerForCustomRotorHint"));
    CGFloat v8 = v7;
    if (!v7 || v5)
    {
      CGFloat v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastContainerForCustomRotorHint](self, "lastContainerForCustomRotorHint"));
      CGFloat v10 = v9;
      if (!v9 || !v5)
      {

        char v28 = 0;
        goto LABEL_11;
      }

      double v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastContainerForCustomRotorHint](self, "lastContainerForCustomRotorHint"));
      unsigned __int8 v12 = [v11 isEqual:v5];

      if ((v12 & 1) != 0)
      {
        char v28 = 0;
        goto LABEL_12;
      }
    }

    else
    {
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 touchContainerParent]);
  -[VOTElementManager setLastContainerForCustomRotorHint:](self, "setLastContainerForCustomRotorHint:", v6);
  char v28 = 1;
LABEL_11:

LABEL_12:
  CGFloat v13 = (void *)objc_claimAutoreleasedReturnValue([v4 customPublicRotors]);
  CGFloat v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v15 = v13;
  id v16 = [v15 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v32;
    do
    {
      for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v18) {
          objc_enumerationMutation(v15);
        }
        uint64_t v20 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)i);
        if ([v4 customPublicRotorIsVisibleInTouchRotor:v20])
        {
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 customPublicRotorName:v20]);
          int64_t v22 = +[VOTRotor rotorTypeForSystemRotorType:](&OBJC_CLASS___VOTRotor, "rotorTypeForSystemRotorType:", v21);
          if (v22)
          {
            uint64_t v23 = objc_claimAutoreleasedReturnValue(+[VOTRotor stringForRotorType:](&OBJC_CLASS___VOTRotor, "stringForRotorType:", v22));

            uint64_t v21 = (void *)v23;
          }

          if (v21) {
            [v14 addObject:v20];
          }
        }
      }

      id v17 = [v15 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }

    while (v17);
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager previousCustomRotorsForRotorHint](v29, "previousCustomRotorsForRotorHint"));
  unsigned __int8 v25 = [v14 isEqualToSet:v24];

  BOOL v26 = v28;
  if ((v25 & 1) == 0)
  {
    -[VOTElementManager setPreviousCustomRotorsForRotorHint:](v29, "setPreviousCustomRotorsForRotorHint:", v14);
    BOOL v26 = 1;
  }

  return v26;
}

- (BOOL)_shouldNotSpeakForIncomingCall
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  unsigned int v3 = [v2 currentCallState];

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 routeForCategory:AVAudioSessionCategoryVoiceOver]);

  if (([v5 isEqualToString:@"Headset"] & 1) != 0
    || ([v5 isEqualToString:@"HeadsetBT"] & 1) != 0
    || ([v5 isEqualToString:@"Headphone"] & 1) != 0)
  {
    unsigned int v6 = 0;
  }

  else
  {
    unsigned int v6 = [v5 isEqualToString:@"HeadphonesBT"] ^ 1;
  }

  id v7 = [(id)VOTSharedWorkspace isRingerSwitchSilent];
  int v8 = (int)v7;
  uint64_t v9 = VOTLogCommon(v7);
  CGFloat v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v13[0] = 67109632;
    v13[1] = v3 == 2;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    unsigned int v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Should not speak for incoming call? %d & %d & %d",  (uint8_t *)v13,  0x14u);
  }

  if (v3 == 2) {
    char v11 = v8;
  }
  else {
    char v11 = 0;
  }

  return v11 & v6;
}

- (id)_verifiedElementWithElement:(id)a3
{
  id v4 = a3;
  [v4 frame];
  double v6 = v5;
  double v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  [v4 centerPoint];
  CGFloat v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:"));
  v45[0] = v13;
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v6 + 2.0, v8 + 2.0));
  v45[1] = v14;
  v46.origin.double x = v6;
  v46.origin.double y = v8;
  v46.size.double width = v10;
  v46.size.double height = v12;
  int v15 = +[NSValue valueWithCGPoint:]( &OBJC_CLASS___NSValue,  "valueWithCGPoint:",  v6 + 2.0,  v8 + CGRectGetHeight(v46) + -2.0);
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v45[2] = v16;
  v47.origin.double x = v6;
  v47.origin.double y = v8;
  v47.size.double width = v10;
  v47.size.double height = v12;
  unsigned int v17 = +[NSValue valueWithCGPoint:]( &OBJC_CLASS___NSValue,  "valueWithCGPoint:",  v6 + CGRectGetWidth(v47) + -2.0,  v8 + 2.0);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v45[3] = v18;
  v48.origin.double x = v6;
  v48.origin.double y = v8;
  v48.size.double width = v10;
  v48.size.double height = v12;
  double v19 = v6 + CGRectGetWidth(v48) + -2.0;
  v49.origin.double x = v6;
  v49.origin.double y = v8;
  v49.size.double width = v10;
  v49.size.double height = v12;
  uint64_t v20 = +[NSValue valueWithCGPoint:](&OBJC_CLASS___NSValue, "valueWithCGPoint:", v19, v8 + CGRectGetHeight(v49) + -2.0);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v45[4] = v21;
  int64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v45, 5LL));

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v23 = v22;
  id v24 = [v23 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = *(void *)v41;
    while (2)
    {
      double v27 = 0LL;
      do
      {
        if (*(void *)v41 != v26) {
          objc_enumerationMutation(v23);
        }
        char v28 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)v27);
        double v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement", (void)v40));
        [v28 CGPointValue];
        objc_msgSend(v29, "convertPoint:fromContextId:", objc_msgSend(v4, "windowContextId"), v30, v31);
        double v33 = v32;
        double v35 = v34;

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _verifiedElementWithElement:atPoint:]( self,  "_verifiedElementWithElement:atPoint:",  v4,  v33,  v35));
        if (v36)
        {
          id v38 = v36;

          BOOL v37 = v38;
          goto LABEL_11;
        }

        double v27 = (char *)v27 + 1;
      }

      while (v25 != v27);
      id v25 = [v23 countByEnumeratingWithState:&v40 objects:v44 count:16];
      if (v25) {
        continue;
      }
      break;
    }
  }

  BOOL v37 = 0LL;
  id v38 = v23;
LABEL_11:

  return v37;
}

- (id)_verifiedElementWithElement:(id)a3 atPoint:(CGPoint)a4
{
  double y = a4.y;
  double x = a4.x;
  id v6 = a3;
  id v7 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initWithPosition:", x, y);
  double v8 = v7;
  if (v7
    && (double v9 = (void *)objc_claimAutoreleasedReturnValue([v7 label]),
        CGFloat v10 = (void *)objc_claimAutoreleasedReturnValue([v6 label]),
        unsigned int v11 = [v9 isEqual:v10],
        v10,
        v9,
        v11))
  {
    id v12 = v8;
  }

  else
  {
    id v12 = 0LL;
  }

  return v12;
}

- (BOOL)_finishHandlingMoveToElementNotification:(id)a3 shouldSyncNativeFocusElement:(id)a4 shouldEchoSameTouchContainer:(id)a5 shouldScrollToElement:(id)a6 shouldPlayTrackingSound:(id)a7 shouldRefocusIfSameElement:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _verifiedElementWithElement:](self, "_verifiedElementWithElement:", v14));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if ([v21 isEqual:v14] && !objc_msgSend(v19, "BOOLValue"))
  {

    if (v14) {
      goto LABEL_14;
    }
LABEL_11:
    if ([v18 BOOLValue])
    {
      CGRect v47 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      CGRect v48 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent NoItemExists](&OBJC_CLASS___VOSOutputEvent, "NoItemExists"));
      [v47 sendEvent:v48];
    }

    id v14 = 0LL;
    goto LABEL_14;
  }

  if (!v14) {
    goto LABEL_11;
  }
  if ((([v19 BOOLValue] & 1) != 0
     || ([v14 isEqual:v20] & 1) == 0)
    && v20)
  {
    [v14 frame];
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    [v20 frame];
    v54.origin.double x = v30;
    v54.origin.double y = v31;
    v54.size.double width = v32;
    v54.size.double height = v33;
    v52.origin.double x = v23;
    v52.origin.double y = v25;
    v52.size.double width = v27;
    v52.size.double height = v29;
    if (CGRectIntersectsRect(v52, v54))
    {
      [v14 frame];
      CGFloat v35 = v34;
      CGFloat v37 = v36;
      CGFloat v39 = v38;
      CGFloat v41 = v40;
      [v20 frame];
      v55.origin.double x = v42;
      v55.origin.double y = v43;
      v55.size.double width = v44;
      v55.size.double height = v45;
      v53.origin.double x = v35;
      v53.origin.double y = v37;
      v53.size.double width = v39;
      v53.size.double height = v41;
      float v51 = v15;
      if (CGRectEqualToRect(v53, v55))
      {
        id v46 = v20;

        id v14 = v46;
      }

      goto LABEL_16;
    }

- (void)moveToElement:(id)a3
{
}

- (void)_moveToElement:(id)a3
{
}

- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 moveToElementNotification:(BOOL)a6
{
}

- (void)_moveToElement:(id)a3 shouldPlaySound:(BOOL)a4 echoSameTouchContainer:(BOOL)a5 shouldScroll:(BOOL)a6 moveToElementNotification:(BOOL)a7 shouldPlayTrackingSound:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v9 = a7;
  BOOL v10 = a6;
  BOOL v11 = a5;
  BOOL v12 = a4;
  id v14 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  22522LL,  "-[VOTElementManager _moveToElement:shouldPlaySound:echoSameTouchContainer:shouldScroll:moveToElementNotification:s houldPlayTrackingSound:]",  @"must be on element manager or system event thread");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (-[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v14)
    || ([v14 isEqual:v15] & 1) != 0
    || !v9)
  {
    if (v12)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
      [v18 sendEvent:v19];
    }

    if (v10)
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_100087C24;
      v25[3] = &unk_100176DA8;
      v25[4] = self;
      id v26 = v14;
      [v26 scrollToElementForDirectional:1 withCompletion:v25];
    }

    else
    {
      -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "_updateCursorFrameForElementIfNeeded:",  self,  1LL,  v14,  0LL);
    }

    id v20 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    BOOL v21 = -[VOTElementManager _shouldAnnounceCustomRotorHintForElement:]( self,  "_shouldAnnounceCustomRotorHintForElement:",  v14);
    if (v21) {
      uint64_t v22 = 0x200800802LL;
    }
    else {
      uint64_t v22 = 8390658LL;
    }
    if (v11)
    {
      uint64_t v23 = v22 | 0x20;
    }

    else
    {
      BOOL v21 = -[VOTElementManager _shouldIncludeContainerInDescriptionForCurrentElement:previousElement:]( self,  "_shouldIncludeContainerInDescriptionForCurrentElement:previousElement:",  v14,  v15);
      if (v21) {
        uint64_t v23 = v22 | 0x20;
      }
      else {
        uint64_t v23 = v22;
      }
    }

    if (AXDeviceSupportsSonification(v21)
      && [v14 supportsAudiographs]
      && -[VOTElementManager _chartElementDidChangeForElement:oldElement:]( self,  "_chartElementDidChangeForElement:oldElement:",  v14,  v15))
    {
      v23 |= 0x4100000000uLL;
    }

    if (v9) {
      uint64_t v24 = v23 | 0x80000000LL;
    }
    else {
      uint64_t v24 = v23;
    }
    [v20 setGeneratesBraille:1];
    -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v14,  v20,  v24);
    if (v8) {
      [v20 setBrailleType:1];
    }
    [v20 setBrailleType:1];
    if ([v14 shouldStartReadAllOnFocus])
    {
      -[VOTElementManager _continueReadAllWithElement:setCurrentElement:]( self,  "_continueReadAllWithElement:setCurrentElement:",  v14,  0LL);
    }

    else if (v12)
    {
      -[VOTElementManager sendRequest:](self, "sendRequest:", v20);
    }
  }

  else if (v8)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent NoItemExists](&OBJC_CLASS___VOSOutputEvent, "NoItemExists"));
    [v16 sendEvent:v17];
  }
}

- (void)_handleMoveToElementNotification:(id)a3
{
  id v4 = a3;
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
    if ((objc_opt_isKindOfClass(v4, v6) & 1) == 0
      || !-[VOTElementManager _shouldIgnoreElementMovementNotification:]( self,  "_shouldIgnoreElementMovementNotification:",  v4))
    {
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
      if ((objc_opt_isKindOfClass(v4, v8) & 1) != 0)
      {
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyElement]);
        BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeySyncNativeFocus]);
        BOOL v11 = v10;
        if (v10) {
          unsigned int v12 = [v10 BOOLValue];
        }
        else {
          unsigned int v12 = 1;
        }
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyIgnoreTouchInProgress]);
        BOOL v21 = v20;
        if (v20) {
          unsigned __int8 v22 = [v20 BOOLValue];
        }
        else {
          unsigned __int8 v22 = 1;
        }
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyEchoSameTouchContainer]);
        uint64_t v24 = v23;
        if (v23) {
          unsigned int v67 = [v23 BOOLValue];
        }
        else {
          unsigned int v67 = 1;
        }
        CGFloat v25 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyShouldScrollToElement]);
        unsigned int v63 = v12;
        if (v25) {
          unsigned int v66 = [v24 BOOLValue];
        }
        else {
          unsigned int v66 = 1;
        }
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyShouldPlayTrackingSound]);
        CGFloat v27 = v26;
        char v62 = v22;
        if (v26 && [v26 BOOLValue])
        {
          double v28 = (void *)v9;
          -[VOTElementManager setLastUserElementTouchTime:]( self,  "setLastUserElementTouchTime:",  CFAbsoluteTimeGetCurrent());
          uint64_t v29 = 1LL;
        }

        else
        {
          double v28 = (void *)v9;
          uint64_t v29 = 0LL;
        }

        CGFloat v30 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:kAXMoveToElementNotificationKeyShouldRefocusIfSameElement]);
        CGFloat v31 = v30;
        if (v30) {
          unsigned int v65 = [v30 BOOLValue];
        }
        else {
          unsigned int v65 = 0;
        }

        uint64_t v15 = v29;
        id v14 = v28;
        char v16 = v62;
        uint64_t v17 = v63;
        if (!v14) {
          goto LABEL_27;
        }
      }

      else
      {
        id v14 = v4;
        uint64_t v15 = 0LL;
        unsigned int v65 = 0;
        unsigned int v66 = 1;
        unsigned int v67 = 1;
        char v16 = 1;
        uint64_t v17 = 1LL;
        if (!v14)
        {
LABEL_27:
          BOOL v19 = 0;
LABEL_28:
          uint64_t v32 = objc_opt_class(&OBJC_CLASS___VOTElement, v13);
          int isKindOfClass = objc_opt_isKindOfClass(v14, v32);
          if (((v15 | v19 | isKindOfClass) & 1) != 0)
          {
            char v34 = isKindOfClass;
            CGFloat v35 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
            if ([v35 isSystemLocked])
            {
              CFAbsoluteTime v36 = CFAbsoluteTimeGetCurrent() - self->_lastItemSelectionFromTouch;

              if (v36 < 2.0) {
                goto LABEL_51;
              }
            }

            else
            {
            }

            if ([(id)VOTSharedWorkspace brailleInputActive]
              && (id v37 = [(id)VOTSharedWorkspace brailleInputAllowsElementMovement],
                  (v37 & 1) == 0))
            {
              uint64_t v60 = VOTLogElement(v37);
              uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Stopping _handleMoveToElementNotification to prevent the focus from moving while we're editing text in BSI",  buf,  2u);
              }
            }

            else
            {
              if ((v34 & 1) != 0) {
                id v38 = v14;
              }
              else {
                id v38 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v14];
              }
              CGFloat v39 = v38;
              if ((v16 & 1) != 0) {
                goto LABEL_45;
              }
              if (![(id)VOTSharedWorkspace fingerCount]) {
                goto LABEL_45;
              }
              if (!self->_flags.focusIsOnElement) {
                goto LABEL_45;
              }
              -[VOTElement frame](self->_currentElement, "frame");
              CGFloat v41 = v40;
              CGFloat v43 = v42;
              CGFloat v45 = v44;
              CGFloat v47 = v46;
              [v39 frame];
              v70.origin.double x = v48;
              v70.origin.double y = v49;
              v70.size.double width = v50;
              v70.size.double height = v51;
              v69.origin.double x = v41;
              v69.origin.double y = v43;
              v69.size.double width = v45;
              v69.size.double height = v47;
              if (!CGRectIntersectsRect(v69, v70))
              {
                -[VOTElementManager _handleLayoutChange:](self, "_handleLayoutChange:", 1LL);
              }

              else
              {
LABEL_45:
                if (!self->_flags.isReadingAll
                  || (uint64_t v52 = kAXWebContentTrait,
                      !-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXWebContentTrait))
                  || ([v39 doesHaveTraits:v52] & 1) == 0)
                {
                  uint64_t v64 = v39;
                  elementManagerThread = self->_elementManagerThread;
                  CGRect v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v17));
                  CGRect v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v67));
                  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v66));
                  id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v15));
                  unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v65));
                  double v59 = elementManagerThread;
                  CGFloat v39 = v64;
                  -[SCRCThread performSelector:onTarget:cancelMask:count:objects:]( v59,  "performSelector:onTarget:cancelMask:count:objects:",  "_finishHandlingMoveToElementNotification:shouldSyncNativeFocusElement:shouldEchoSameTouchContainer:s houldScrollToElement:shouldPlayTrackingSound:shouldRefocusIfSameElement:",  self,  0x40000LL,  6LL,  v64,  v54,  v55,  v56,  v57,  v58,  0LL);
                }
              }
            }

            goto LABEL_51;
          }

          -[VOTElementManager _handleLayoutChange:](self, "_handleLayoutChange:", 1LL);
LABEL_51:

          goto LABEL_52;
        }
      }

      CFTypeID v18 = CFGetTypeID(v14);
      BOOL v19 = v18 == AXUIElementGetTypeID();
      goto LABEL_28;
    }
  }

- (id)_firstResponderFromCurrentApplications
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  int64_t v2 = self->_currentApplications;
  id v3 = -[NSArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v6), "firstResponderElement", (void)v10));
        if (v7)
        {
          uint64_t v8 = (void *)v7;
          goto LABEL_11;
        }

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = -[NSArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v10,  v14,  16LL);
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v8 = 0LL;
LABEL_11:

  return v8;
}

- (void)_handleNativeFocusItemChangedNotification:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    cf = v4;
    if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
    {
      _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  22758LL,  "-[VOTElementManager _handleNativeFocusItemChangedNotification:]",  @"must be on element manager or system event thread");
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 5LL));
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == AXUIElementGetTypeID())
    {
      id v7 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:cf];
      [v5 setFocusElement:v7];
    }

    else
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 != CFDictionaryGetTypeID())
      {
LABEL_13:
        -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:]( self,  "_tvOS_updateWithNativeFocus:withDelay:",  v5,  0.0);

        id v4 = cf;
        goto LABEL_14;
      }

      uint64_t v9 = kAXElementKey;
      id v10 = cf;
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v9]);
      id v7 = v11;
      if (v11)
      {
        CFTypeID v12 = CFGetTypeID(v11);
        if (v12 == AXUIElementGetTypeID())
        {
          id v13 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v7];
          [v5 setFocusElement:v13];
        }
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:kAXPidKey]);
      objc_msgSend(v5, "setSenderPID:", objc_msgSend(v14, "integerValue"));

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:kAXBundleIDKey]);
      [v5 setSenderBundleID:v15];

      char v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:kAXAppIsRunningAsExtensionKey]);
      objc_msgSend(v5, "setSenderIsAppExtension:", objc_msgSend(v16, "BOOLValue"));
    }

    goto LABEL_13;
  }

- (void)_handleFirstResponderChangedNotification:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 4LL));
  -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v5, 0.0);

  -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
  CFTypeID v6 = (VOTElement *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _firstResponderFromCurrentApplications]( self,  "_firstResponderFromCurrentApplications"));
  uint64_t v7 = VOTLogCommon(v6);
  CFTypeID v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138412290;
    double v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "First responder element: %@", buf, 0xCu);
  }

  if (v6)
  {
LABEL_12:
    if (CFAbsoluteTimeGetCurrent() - self->_lastExternalUnlockTime < 0.25)
    {
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_100088958;
      v42[3] = &unk_100176DA8;
      void v42[4] = self;
      id v43 = v4;
      AXPerformBlockOnMainThreadAfterDelay(v42, v16, 0.25);
    }

    if (!v6
      || -[VOTElement isEqual:](self->_firstResponderElement, "isEqual:", v6)
      || !-[VOTElement isAccessibleElement](v6, "isAccessibleElement"))
    {
      goto LABEL_35;
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    -[VOTElement frame](v6, "frame");
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    CGFloat v23 = v22;
    CGFloat v25 = v24;
    [v17 frame];
    v48.origin.double x = v26;
    v48.origin.double y = v27;
    v48.size.double width = v28;
    v48.size.double height = v29;
    v47.origin.double x = v19;
    v47.origin.double y = v21;
    v47.size.double width = v23;
    v47.size.double height = v25;
    if (!CGRectEqualToRect(v47, v48))
    {
      CGFloat v30 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](v6, "value"));
      if ([v30 length])
      {
        CGFloat v31 = (void *)objc_claimAutoreleasedReturnValue([v17 value]);
        unsigned int v32 = [v30 isEqualToString:v31];

        if (!v32)
        {

          goto LABEL_27;
        }
      }

      uint64_t v33 = kAXIsEditingTrait;
      if (-[VOTElement doesHaveTraits:](v6, "doesHaveTraits:", kAXIsEditingTrait))
      {
        unsigned __int8 v34 = [v17 doesHaveTraits:v33];

        if ((v34 & 1) == 0) {
          goto LABEL_27;
        }
      }

      else
      {
      }
    }

    if (self->_firstResponderElement)
    {
LABEL_34:

LABEL_35:
      -[VOTElementRotor setIgnoreDefaultTypeAutofill:](self->_elementRotor, "setIgnoreDefaultTypeAutofill:", 1LL);
      double v40 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      [v40 clearElementForGesturedTextInput];

      -[VOTElementManager _updateLastFirstResponderChangedTime](self, "_updateLastFirstResponderChangedTime");
      -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
      CGFloat v41 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
      [v41 updateKeyboardSettings];

      -[VOTElementManager _updateFirstResponder](self, "_updateFirstResponder");
      -[VOTElementManager _updateFirstResponderTypingBuffer](self, "_updateFirstResponderTypingBuffer");
      goto LABEL_36;
    }

- (BOOL)_shouldSwitchToFirstResponder:(id)a3
{
  id v4 = a3;
  if (CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime >= 0.5)
  {
    CFTypeID v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if ([v6 isEqual:v4])
    {
      LOBYTE(v5) = 0;
    }

    else
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 textInputElement]);
      if ([v7 isEqual:v4])
      {
        LOBYTE(v5) = 0;
      }

      else
      {
        CFTypeID v8 = (void *)objc_claimAutoreleasedReturnValue([v6 application]);
        if (([v8 isSoftwareKeyboardActive] & 1) != 0
          || ([v6 doesHaveTraits:kAXKeyboardKeyTrait] & 1) != 0)
        {
          LOBYTE(v5) = 0;
        }

        else
        {
          unsigned int v5 = [v6 doesHaveTraits:kAXAllowsDirectInteractionTrait] ^ 1;
        }
      }
    }
  }

  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

- (void)_outputWebLineWithMarkerRange:(id)a3 withElement:(id)a4
{
  id v20 = a3;
  id v6 = a4;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray, v7);
  if ((objc_opt_isKindOfClass(v20, v8) & 1) != 0 && [v20 count] == (id)2)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v20 objectAtIndex:0]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 textLineStartMarker:v9]);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v20 objectAtIndex:1]);
    CFTypeID v12 = (void *)objc_claimAutoreleasedReturnValue([v6 textLineEndMarker:v11]);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v10, v12, 0LL));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 stringForTextMarkers:v13]);

    id v15 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 language]);
    id v17 = [v15 addString:v14 withLanguage:v16];

    double v18 = (void *)objc_claimAutoreleasedReturnValue([v15 lastAction]);
    [v18 setPerformPunctuationTranslation:1];

    CGFloat v19 = (void *)objc_claimAutoreleasedReturnValue([v15 lastAction]);
    [v19 setReplaceCommas:1];

    -[VOTElementManager sendRequest:](self, "sendRequest:", v15);
  }
}

- (id)_applicationMatchingBlock:(id)a3 inApplications:(id)a4
{
  unsigned int v5 = (uint64_t (**)(id, void *))a3;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v6 = a4;
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        if ((v5[2](v5, v10) & 1) != 0)
        {
          id v7 = v10;
          goto LABEL_11;
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

- (BOOL)_hasApplicationMatchingBlock:(id)a3 inApplications:(id)a4
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _applicationMatchingBlock:inApplications:]( self,  "_applicationMatchingBlock:inApplications:",  a3,  a4));
  BOOL v5 = v4 != 0LL;

  return v5;
}

- (id)_currentApplicationMatchingBlock:(id)a3
{
  return -[VOTElementManager _applicationMatchingBlock:inApplications:]( self,  "_applicationMatchingBlock:inApplications:",  a3,  self->_currentApplications);
}

- (BOOL)_hasCurrentApplicationMatchingBlock:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentApplicationMatchingBlock:](self, "_currentApplicationMatchingBlock:", a3));
  BOOL v4 = v3 != 0LL;

  return v4;
}

- (void)_handleWebSelectionChangedNotification:(id)a3
{
  unsigned __int8 v34 = (VOTElement *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  if (!-[VOTElement doesHaveTraits:](v34, "doesHaveTraits:", kAXKeyboardKeyTrait))
  {
    uint64_t v5 = kAXWebContentTrait;
LABEL_6:
    id v7 = v34;
    goto LABEL_7;
  }

  firstResponderElement = self->_firstResponderElement;
  uint64_t v5 = kAXWebContentTrait;
  if (!firstResponderElement
    || !-[VOTElement doesHaveTraits:](firstResponderElement, "doesHaveTraits:", kAXWebContentTrait))
  {
    goto LABEL_6;
  }

  id v6 = self->_firstResponderElement;

  id v7 = v6;
LABEL_7:
  CGFloat v35 = v7;
  if (-[VOTElement doesHaveTraits:](v7, "doesHaveTraits:", v5)
    || -[VOTElement isReadingContent](v35, "isReadingContent"))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement textMarkerRangeForSelection](v35, "textMarkerRangeForSelection"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement stringForTextMarkers:](v35, "stringForTextMarkers:", v8));
    p_webSelectionText = &self->_webSelectionText;
    uint64_t v11 = -[NSString length](self->_webSelectionText, "length");
    uint64_t v12 = (uint64_t)[v9 length];
    if (!v12)
    {
      CGFloat v21 = self->_firstResponderElement;
      if (v21)
      {
        if (-[VOTElement doesHaveTraits:](v21, "doesHaveTraits:", v5))
        {
          -[VOTElementManager _handleSelectionChangedNotification:](self, "_handleSelectionChangedNotification:", 0LL);
          webSelectionText = self->_webSelectionText;
          self->_webSelectionText = 0LL;
LABEL_40:

          goto LABEL_41;
        }
      }
    }

    if (v12 | v11)
    {
      __int128 v13 = (void *)VOTSharedWorkspace;
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
      [v13 refreshBraille:1 rotorSelection:v14];
    }

    id v15 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    if (CFAbsoluteTimeGetCurrent() - self->_performedTextSelectionOperation < 0.25 && [v9 length]
      || v11 < 1)
    {
      double v18 = v9;
LABEL_20:
      webSelectionText = v18;
      id v20 = @"element.selected.text";
LABEL_37:
      if (-[NSString length](webSelectionText, "length"))
      {
        CGFloat v28 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement language](v35, "language"));
        id v29 = [v15 addString:webSelectionText withLanguage:v28];

        CGFloat v30 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
        id v31 = sub_10004AE68(off_1001AC148, v20, 0LL, v30);
        unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        id v33 = [v15 addString:v32 withLanguage:v30];

        [v15 setInterruptsEverything:1];
        [v15 setGeneratesBraille:1];
        [v15 setBrailleType:4];
        -[VOTElementManager sendRequest:](self, "sendRequest:", v15);
      }

      objc_storeStrong((id *)&self->_webSelectionText, v9);

      goto LABEL_40;
    }

    if (v12 > v11)
    {
      uint64_t v16 = (char *)[v9 rangeOfString:*p_webSelectionText];
      if (v16 != (char *)0x7FFFFFFFFFFFFFFFLL)
      {
        if (self->_lastUserTextSelectionDirection > 1uLL) {
          double v18 = (NSString *)objc_claimAutoreleasedReturnValue([v9 substringToIndex:v16]);
        }
        else {
          double v18 = (NSString *)objc_claimAutoreleasedReturnValue([v9 substringFromIndex:&v16[v17]]);
        }
        goto LABEL_20;
      }

      goto LABEL_29;
    }

    if (v11 > v12)
    {
      double v24 = *p_webSelectionText;
      if (v12)
      {
        CGFloat v25 = (char *)-[NSString rangeOfString:](v24, "rangeOfString:", v9);
        if ((self->_lastUserTextSelectionDirection | 2) == 2) {
          CGFloat v27 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSString substringFromIndex:](*p_webSelectionText, "substringFromIndex:", &v25[v26]));
        }
        else {
          CGFloat v27 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSString substringToIndex:](*p_webSelectionText, "substringToIndex:", v25));
        }
      }

      else
      {
        CGFloat v27 = v24;
      }

      webSelectionText = v27;
      goto LABEL_36;
    }

- (BOOL)_isKeyboardLineMovement
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace keyboardPressInfo]);
  unsigned int v3 = [v2 keyCode] - 81;

  if (v3 < 2) {
    return 1;
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 lastDispatchedKeyEvent]);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 lastReleasedToSystemKeyEvent]);
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v9 lastDispatchedKeyEventTime];
      double v11 = v10;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v12 lastReleasedToSystemKeyEventTime];
      BOOL v14 = v11 > v13;
    }

    else
    {
      BOOL v14 = 0;
    }
  }

  else
  {
    BOOL v14 = 0;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 lastDispatchedKeyEvent]);
  double v18 = (void *)objc_claimAutoreleasedReturnValue([v17 keyInfo]);
  if ([v18 keyCode] - 81 >= 2)
  {

    if (v14) {
      return 0;
    }
    goto LABEL_17;
  }

  CGFloat v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  [v19 lastDispatchedKeyEventTime];
  double v21 = Current - v20;

  BOOL v4 = v21 < 0.2;
  char v22 = v21 < 0.2 || v14;
  if ((v22 & 1) == 0)
  {
LABEL_17:
    CGFloat v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    double v24 = (void *)objc_claimAutoreleasedReturnValue([v23 lastReleasedToSystemKeyEvent]);
    if ([v24 keyCode] - 81 > 1)
    {
      BOOL v4 = 0;
    }

    else
    {
      CGFloat v25 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v25 lastReleasedToSystemKeyEventTime];
      BOOL v4 = Current - v26 < 0.2;
    }
  }

  return v4;
}

- (void)_handleSelectionChangedNotification:(id)a3
{
  id v5 = a3;
  if ((uint64_t)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount] < 1)
  {
    uint64_t v16 = self->_firstResponderElement;
    -[VOTElementManager _updateFirstResponder](self, "_updateFirstResponder");
    uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v17);
    if ((objc_opt_isKindOfClass(v5, v18) & 1) != 0)
    {
      CGFloat v19 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:kAXSelectionChangedRemoteUserOperation]);
      unsigned __int8 v20 = [v19 BOOLValue];
    }

    else
    {
      unsigned __int8 v20 = 0;
    }

    if (-[VOTElementManager _ignoreTextEditingNotificationsForPickerElementUsage]( self,  "_ignoreTextEditingNotificationsForPickerElementUsage"))
    {
      goto LABEL_39;
    }

    unsigned __int8 v206 = v20;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v209 = objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    char v22 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    CGFloat v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lastDispatchedKeyEvent]);
    if (v23)
    {
      unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v3 lastDispatchedKeyEventTime];
      if (Current - v24 < 0.2)
      {
        BOOL v204 = 1;
        goto LABEL_22;
      }

      uint64_t v207 = self;
      id v25 = v5;
      double v26 = v16;
    }

    else
    {
      uint64_t v207 = self;
      id v25 = v5;
      double v26 = v16;
    }

    CGFloat v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
    CGFloat v28 = (void *)objc_claimAutoreleasedReturnValue([v27 lastReleasedToSystemKeyEvent]);
    if (v28)
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
      [v29 lastReleasedToSystemKeyEventTime];
      BOOL v204 = Current - v30 < 0.2;
    }

    else
    {
      BOOL v204 = 0;
    }

    uint64_t v16 = v26;
    id v5 = v25;
    self = v207;
    if (!v23)
    {
LABEL_23:

      self->_lastSelectionChangeTime = Current;
      if (!self->_didIgnoreLastFirstResponderChangeOnSelectionChange
        && Current - self->_lastFirstResponderChangeTime < 1.5)
      {
        self->_didIgnoreLastFirstResponderChangeOnSelectionChange = 1;
        unsigned int v32 = (void *)v209;
LABEL_38:

LABEL_39:
        goto LABEL_40;
      }

      if (Current - self->_lastValueChangeTime < 0.1)
      {
        id v33 = 0LL;
        unsigned int v32 = (void *)v209;
LABEL_36:
        CGFloat v39 = (void *)VOTSharedWorkspace;
        double v40 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
        [v39 refreshBraille:1 rotorSelection:v40];

LABEL_37:
        -[VOTElementManager _resetRotorTextNavigation](self, "_resetRotorTextNavigation");
        -[VOTElementManager _updateCurrentElementForTextInputSelectionChangeIfNeeded]( self,  "_updateCurrentElementForTextInputSelectionChangeIfNeeded");

        goto LABEL_38;
      }

      uint64_t v34 = VOTLogCommon(v31);
      CGFloat v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        CFAbsoluteTime v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  Current - self->_lastPressOnMediaSessionElement));
        *(_DWORD *)__int128 buf = 138412290;
        CGRect v211 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "layout change: last media session press: %@",  buf,  0xCu);
      }

      unsigned int v32 = (void *)v209;
      if (Current - self->_lastPressOnMediaSessionElement < 3.5 || !self->_firstResponderElement)
      {
        id v33 = 0LL;
        goto LABEL_36;
      }

      if (-[VOTElementManager _shouldSwitchToFirstResponder:](self, "_shouldSwitchToFirstResponder:")
        && -[VOTElement isAccessibleElement](self->_firstResponderElement, "isAccessibleElement"))
      {
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", self->_firstResponderElement);
        id v37 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
        [v37 setCursorFrameForElement:self->_firstResponderElement];

        int v38 = 0;
      }

      else
      {
        int v38 = 1;
      }

      if (!-[VOTElement isEqual:](v16, "isEqual:", self->_firstResponderElement)) {
        goto LABEL_38;
      }
      v203.NSUInteger location = (NSUInteger)-[VOTElement selectedTextRange](self->_firstResponderElement, "selectedTextRange");
      v203.NSUInteger length = v41;
      double v42 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
      unsigned __int8 v43 = [v42 ignoreLogging];

      if ((v43 & 1) == 0)
      {
        double v44 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
        uint64_t v45 = AXLoggerForFacility(v44);
        double v46 = (void *)objc_claimAutoreleasedReturnValue(v45);

        os_log_type_t v47 = AXOSLogLevelFromAXLogLevel(3LL);
        if (os_log_type_enabled((os_log_t)v46, v47))
        {
          uint64_t v48 = AXColorizeFormatLog(3LL, @"newSelection: %{public}@ oldSelection %{public}@");
          CGFloat v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
          CGFloat v50 = NSStringFromRange(v203);
          CGFloat v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
          uint64_t v52 = NSStringFromRange(self->_elementSelectionRangeBufferForSelectionChange);
          id v186 = v51;
          unsigned int v187 = (void *)objc_claimAutoreleasedReturnValue(v52);
          uint64_t v53 = _AXStringForArgs(v49);
          CGRect v54 = (void *)objc_claimAutoreleasedReturnValue(v53);

          CGRect v55 = v46;
          if (os_log_type_enabled(v55, v47))
          {
            *(_DWORD *)__int128 buf = 138543362;
            CGRect v211 = v54;
            _os_log_impl((void *)&_mh_execute_header, v55, v47, "%{public}@", buf, 0xCu);
          }

          unsigned int v32 = (void *)v209;
        }
      }

      NSUInteger length = v203.length;
      if (v203.length || self->_elementSelectionRangeBufferForSelectionChange.length)
      {
        NSUInteger location = v203.location;
        if ((v206 & 1) != 0)
        {
          id v33 = 0LL;
          goto LABEL_59;
        }

        if (v32)
        {
          id v58 = v32;
        }

        else
        {
          double v59 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_firstResponderElement, "application"));
          id v58 = (id)objc_claimAutoreleasedReturnValue([v59 currentSoftwareKeyboardLanguage]);

          NSUInteger length = v203.length;
        }

        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value", v186, v187));
        uint64_t v202 = v58;
        -[VOTElementManager _outputSelectionDifference:oldRange:string:language:]( self,  "_outputSelectionDifference:oldRange:string:language:",  v203.location,  length,  self->_elementSelectionRangeBufferForSelectionChange.location,  self->_elementSelectionRangeBufferForSelectionChange.length,  v60,  v58);
        id v33 = 0LL;
        goto LABEL_57;
      }

      NSUInteger v61 = self->_elementSelectionRangeBufferForSelectionChange.location;
      char v62 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value"));
      NSUInteger location = v203.location;
      uint64_t v202 = v62;
      if (v203.location > v61)
      {
        NSUInteger v63 = self->_elementSelectionRangeBufferForSelectionChange.location;
        unint64_t v197 = v61;
        if (v63 == 0x7FFFFFFF) {
          uint64_t v64 = 0LL;
        }
        else {
          uint64_t v64 = (char *)(self->_elementSelectionRangeBufferInternal.length + v63);
        }
        id v33 = 0LL;
        NSUInteger v65 = v203.location - (void)v64;
        self->_cursorBorderHitCount = 0LL;
        uint64_t v67 = v203.location - (void)v64;
        goto LABEL_69;
      }

      if (v203.location < v61)
      {
        unint64_t v197 = v61;
        NSUInteger v65 = 0LL;
        NSUInteger v66 = self->_elementSelectionRangeBufferForSelectionChange.location;
        self->_cursorBorderHitCount = 0LL;
        if (v66 == 0x7FFFFFFF)
        {
          uint64_t v67 = 1LL;
          uint64_t v64 = (char *)v203.location;
          id v33 = 0LL;
          goto LABEL_70;
        }

        uint64_t v67 = v66 - v203.location;
        uint64_t v64 = (char *)v203.location;
        id v33 = 0LL;
LABEL_69:
        if (v67 < 1) {
          goto LABEL_58;
        }
LABEL_70:
        NSUInteger v193 = v65;
        if (&v64[v67] > objc_msgSend(v202, "length", v186))
        {
LABEL_71:
          NSUInteger length = 0LL;
          goto LABEL_58;
        }

        uint64_t v199 = v67;
        unsigned int v68 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement attributedValueForRange:]( self->_firstResponderElement,  "attributedValueForRange:",  v64,  v67));
        if (!v68) {
          unsigned int v68 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement valueForRange:](self->_firstResponderElement, "valueForRange:", v64, v67));
        }
        CGRect v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet newlineCharacterSet](&OBJC_CLASS___NSCharacterSet, "newlineCharacterSet"));
        CGRect v70 = v68;
        [v68 rangeOfCharacterFromSet:v69];
        uint64_t v72 = v71;

        uint64_t v195 = v64;
        int v191 = v38;
        if (self->_flags.performedRotorTextNavigation) {
          goto LABEL_75;
        }
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace keyboardPressInfo]);
        if (v79) {
          int v80 = 1;
        }
        else {
          int v80 = v204;
        }

        if (v80 == 1)
        {
          if (-[VOTElementManager _isKeyboardLineMovement](self, "_isKeyboardLineMovement"))
          {
            double v81 = (char *)-[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location + 1);
            if (v81 == (char *)-[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location)
                      + 1)
            {
              double v82 = @"\n";
LABEL_132:

              double v73 = (void *)v82;
LABEL_133:
              uint64_t v122 = (uint64_t)[v73 length];
              v194 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceCharacterSet"));
              if (v122 < 1)
              {
                unint64_t v124 = 0LL;
              }

              else
              {
                uint64_t v123 = 0LL;
                unint64_t v124 = 0LL;
                do
                  v124 += objc_msgSend( v194,  "characterIsMember:",  objc_msgSend(v73, "characterAtIndex:", v123++));
                while (v122 != v123);
              }

              BOOL v188 = v124 < 2;
              if ((unint64_t)[v73 length] > 1)
              {
                uint64_t v125 = objc_claimAutoreleasedReturnValue([v73 stringByReplacingOccurrencesOfString:@"\n" withString:@" "]);

                double v73 = (void *)v125;
              }

              unsigned int v126 = (void *)v209;
              unsigned __int8 v127 = -[VOTElement doesHaveTraits:]( self->_firstResponderElement,  "doesHaveTraits:",  kAXSecureTextFieldTrait);
              int v128 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement attributedValueForRange:]( self->_firstResponderElement,  "attributedValueForRange:",  v195,  v199));
              [(id)VOTSharedWorkspace addMisspellingsForString:v128];
              v208 = v73;
              if ((v127 & 1) != 0)
              {
                uint64_t v60 = 0LL;
                char v198 = 0LL;
                double v201 = 0LL;
                goto LABEL_157;
              }

              unint64_t v129 = -[VOTElement lineStartPosition](self->_firstResponderElement, "lineStartPosition");
              if (v129 == self->_lastSeenLineStartPositionForFontProperties)
              {
                double v201 = 0LL;
              }

              else
              {
                id v130 = -[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location);
                uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement attributedValueForRange:]( self->_firstResponderElement,  "attributedValueForRange:",  v130,  v131));
                double v201 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _listItemLabelForAXAttributedString:]( self,  "_listItemLabelForAXAttributedString:",  v132));
              }

              self->_lastSeenLineStartPositionForFontProperties = v129;
              uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([v128 string]);
              unsigned int v134 = -[VOTElementManager stringIsTextAttachment:](self, "stringIsTextAttachment:", v133);

              id v135 = [v128 length];
              if (v134)
              {
                uint64_t v136 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _textAttachmentElementForString:inRange:]( self,  "_textAttachmentElementForString:inRange:",  v128,  0LL,  v135));
                if (v136)
                {
                  uint64_t v60 = (void *)v136;
                  BOOL v188 = 0;
                  char v198 = 0LL;
                  goto LABEL_157;
                }

                id v140 = sub_10004A988(off_1001AC148, @"attachment", 0LL);
                BOOL v188 = 0;
                char v198 = 0LL;
                id v139 = v73;
                v208 = (void *)objc_claimAutoreleasedReturnValue(v140);
              }

              else
              {
                if (v135)
                {
                  id v137 = (char *)[v128 length];
                  if ((unint64_t)(v137 - 1) >= (unint64_t)(((__PAIR128__(v203.location, v197)
                                                                          - v203.location) >> 64)
                                                                        - (void)v195))
                    uint64_t v138 = (char *)(((__PAIR128__(v203.location, v197) - v203.location) >> 64) - (void)v195);
                  else {
                    uint64_t v138 = v137 - 1;
                  }
                  id v139 = (void *)objc_claimAutoreleasedReturnValue([v128 attributesAtIndex:v138 effectiveRange:0]);
                }

                else
                {
                  id v139 = 0LL;
                }

                char v198 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _computeChangedFontAttributes:storedAttributes:haveMisspellCheck:]( self,  "_computeChangedFontAttributes:storedAttributes:haveMisspellCheck:",  v139,  self->_lastSeenFontProperties,  1LL));
                unsigned int v126 = (void *)v209;
              }

              uint64_t v60 = 0LL;
LABEL_157:
              id v141 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
              uint64_t v142 = VOTLogCommon(v141);
              unsigned int v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
              if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
              {
                unsigned int v144 = (void *)objc_claimAutoreleasedReturnValue([v141 keyboardLanguageHint]);
                *(_DWORD *)__int128 buf = 138412290;
                CGRect v211 = v144;
                _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_INFO,  "Keyboard language hint: %@",  buf,  0xCu);
              }

              __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_firstResponderElement, "application"));
              id v146 = (void *)objc_claimAutoreleasedReturnValue([v145 currentSoftwareKeyboardLanguage]);
              [v141 setKeyboardLanguageHint:v146];

              unsigned int v147 = (void *)objc_claimAutoreleasedReturnValue([v141 keyboardLanguageHint]);
              if (([v147 hasPrefix:@"ar"] & 1) != 0
                || [v147 hasPrefix:@"he"])
              {

                unsigned int v147 = 0LL;
              }

              NSUInteger location = v203.location;
              if (v126) {
                uint64_t v148 = v126;
              }
              else {
                uint64_t v148 = v147;
              }
              id v196 = v148;
              if ([v33 length]) {
                id v149 = [v141 addString:v33 withLanguage:v126 category:@"TopBottomString"];
              }
              uint64_t v205 = v141;
              unsigned int v189 = v147;
              if (v60)
              {
                [v60 addTextualInformationToRequest:v141 options:0x4000 dataPackage:0];
                id v150 = sub_10004A988(off_1001AC148, @"attachment", v126);
                double v151 = (void *)objc_claimAutoreleasedReturnValue(v150);
                id v152 = [v141 addString:v151];

                v208 = 0LL;
              }

              unsigned int v190 = v128;
              if ([v201 length])
              {
                id v153 = [v141 addString:v201];
                uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v141 lastAction]);
                LODWORD(v155) = 1062836634;
                double v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v155));
                [v154 setObject:v156 forVariant:32];

                NSUInteger location = v203.location;
              }

              double v157 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
              id v158 = [v157 voiceOverPhoneticsFeedback];

              double v159 = 0LL;
              if ([v208 length] == (id)1)
              {
                NSUInteger length = 0LL;
                if (v158) {
                  double v159 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _phoneticStringForLetter:language:]( self,  "_phoneticStringForLetter:language:",  v208,  v196));
                }
              }

              else
              {
                NSUInteger length = 0LL;
              }

              if ([v208 isAXAttributedString])
              {
                CGFloat v160 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _orderedMonitoredFontAttributes]( self,  "_orderedMonitoredFontAttributes"));
                [v208 removeAttributes:v160];

                NSUInteger length = 0LL;
              }

              v192 = v159;
              id v161 = [v159 length];
              if (v161) {
                BOOL v162 = v158 == 0LL;
              }
              else {
                BOOL v162 = 1;
              }
              char v163 = !v162;
              if (v161 && v158 == (id)2)
              {
                unsigned int v32 = (void *)v209;
                if ((v163 & 1) == 0)
                {
LABEL_198:
                  if ([v198 length])
                  {
                    id v173 = [v205 addAttributedString:v198];
                    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
                    {
                      v174 = (void *)objc_claimAutoreleasedReturnValue([v205 lastAction]);
                      LODWORD(v175) = 1062836634;
                      v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v175));
                      [v174 setObject:v176 forVariant:32];

                      NSUInteger location = v203.location;
                      NSUInteger length = 0LL;
                    }
                  }

                  int v38 = v191;
                  if ((v206 & 1) == 0) {
                    -[VOTElementManager sendRequest:](self, "sendRequest:", v205);
                  }

                  goto LABEL_204;
                }
              }

              else
              {
                id v164 = [v205 addString:v208 withLanguage:v196];
                double v165 = (void *)objc_claimAutoreleasedReturnValue([v205 lastAction]);
                [v165 setObject:kCFBooleanTrue forVariant:50];

                if (v188)
                {
                  double v167 = (void *)objc_claimAutoreleasedReturnValue([v205 lastAction]);
                  double v168 = (void *)objc_claimAutoreleasedReturnValue( [(id)VOTSharedWorkspace punctuationGroupForUUID:AXSSVoiceOverPunctuationGroupAll]);
                  [v167 setObject:v168 forVariant:30];

                  NSUInteger location = v203.location;
                }

                unsigned int v32 = (void *)v209;
                NSUInteger length = 0LL;
                if ((v163 & 1) == 0) {
                  goto LABEL_198;
                }
                LODWORD(v166) = 1061158912;
                [v205 addPause:v166];
              }

              id v169 = [v205 addString:v192];
              if (-[VOTElementManager _needsPhoneticBrailleForLanauge:](self, "_needsPhoneticBrailleForLanauge:", v196)) {
                -[VOTElementManager _sendBrailleAlert:](self, "_sendBrailleAlert:", v192);
              }
              if ([v208 length] == (id)1)
              {
                if (sub_10004A070(v208))
                {
                  double v170 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
                  id v171 = [v170 voiceOverCapitalLetterFeedback];

                  BOOL v162 = v171 == (id)1;
                  NSUInteger location = v203.location;
                  NSUInteger length = 0LL;
                  if (v162)
                  {
                    double v172 = (void *)objc_claimAutoreleasedReturnValue([v205 lastAction]);
                    [v172 setObject:&off_100187390 forVariant:32];

                    NSUInteger length = 0LL;
                  }
                }
              }

              goto LABEL_198;
            }

            if ((id)v203.location == [v202 length])
            {
              NSUInteger v113 = v203.location - 1;
            }

            else
            {
              uint64_t v114 = (char *)-[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location);
              NSUInteger v113 = v203.location;
              if ((char *)v203.location == &v114[v115])
              {
                uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElement valueForRange:]( self->_firstResponderElement,  "valueForRange:",  v203.location,  1LL));
                id v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet newlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "newlineCharacterSet"));
                id v118 = [v116 rangeOfCharacterFromSet:v117];

                if (v118 == (id)0x7FFFFFFFFFFFFFFFLL) {
                  NSUInteger v113 = v203.location + 1;
                }
                else {
                  NSUInteger v113 = v203.location;
                }
              }
            }

            firstResponderElement = self->_firstResponderElement;
            id v120 = -[VOTElement lineRangeForPosition:](firstResponderElement, "lineRangeForPosition:", v113);
            uint64_t v90 = objc_claimAutoreleasedReturnValue(-[VOTElement valueForRange:](firstResponderElement, "valueForRange:", v120, v121));
LABEL_131:
            double v82 = (const __CFString *)v90;
            goto LABEL_132;
          }

          if (v72 != 1)
          {
            if ((unint64_t)[v70 length] >= 2)
            {
              uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value"));
              if (&v195[v67] >= [v94 length])
              {
                char v95 = 0;
              }

              else
              {
                char v95 = 0;
                do
                {
                  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet punctuationCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "punctuationCharacterSet"));
                  unsigned int v97 = objc_msgSend( v96,  "characterIsMember:",  objc_msgSend(v94, "characterAtIndex:", &v195[v67]));

                  if (!v97) {
                    break;
                  }
                  ++v67;

                  uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value"));
                  char v95 = 1;
                }

                while (&v195[v67] < [v94 length]);
              }

              if ((v95 & 1) != 0)
              {
                uint64_t v177 = objc_claimAutoreleasedReturnValue(-[VOTElement valueForRange:](self->_firstResponderElement, "valueForRange:", v195, v67));

                CGRect v70 = (void *)v177;
              }
            }

            if (v199 > 1)
            {
              NSUInteger v178 = v203.location >= v197 ? v193 : 0LL;
              uint64_t v179 = v203.location < v197 ? 1LL : 2LL;
              double v180 = (char *)[v70 wordFromPosition:v178 inDirection:v179];
              if (v181)
              {
                uint64_t v182 = v180;
                if (v180 != (char *)0x7FFFFFFFFFFFFFFFLL)
                {
                  uint64_t v183 = v181;
                  if (&v180[v181] <= [v70 length])
                  {
                    double v82 = (const __CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "substringWithRange:", v182, v183));
                    uint64_t v199 = v67;
                    goto LABEL_132;
                  }
                }
              }
            }

            uint64_t v199 = v67;
          }
        }

        else
        {
          uint64_t v88 = (char *)-[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location + 1);
          if (v88 == (char *)-[VOTElement lineRangeForPosition:]( self->_firstResponderElement,  "lineRangeForPosition:",  v203.location)
                    + 1
            || [v70 isEqualToString:@"\n"])
          {
            id v89 = sub_10004A988(off_1001AC148, @"empty.line", 0LL);
            uint64_t v90 = objc_claimAutoreleasedReturnValue(v89);
            goto LABEL_131;
          }
        }

- (void)_elementSelectionRangeDidChange:(_NSRange)a3 reason:(int64_t)a4
{
  if ((unint64_t)a4 <= 2)
  {
    self->_elementSelectionRangeBufferInternal = a3;
    self->_elementSelectionRangeBufferForValueChange = a3;
    self->_elementSelectionRangeBufferForSelectionChange = a3;
  }

- (_NSRange)_elementSelectionRange
{
  NSUInteger length = self->_elementSelectionRangeBufferInternal.length;
  NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

- (void)_updateCurrentElementForTextInputSelectionChangeIfNeeded
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  23691LL,  "-[VOTElementManager _updateCurrentElementForTextInputSelectionChangeIfNeeded]",  @"must be on element manager or system event thread");
  }

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  BOOL v4 = v3;
  if (self->_firstResponderElement)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 textInputElement]);
    unsigned int v6 = [v5 isEqual:self->_firstResponderElement];

    if (v6)
    {
      id v7 = [v4 textInputElementRange];
      if (v7 != (id)0x7FFFFFFF)
      {
        unint64_t v9 = (unint64_t)v7;
        uint64_t v10 = v8;
        os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement uiElement](self->_firstResponderElement, "uiElement"));
        [v11 rectWithAXAttribute:2057];
        CGFloat v13 = v12;
        CGFloat v15 = v14;
        CGFloat v17 = v16;
        CGFloat v19 = v18;

        NSUInteger location = self->_elementSelectionRangeBufferInternal.location;
        NSUInteger length = self->_elementSelectionRangeBufferInternal.length;
        if (v9 > length + location || v9 + v10 < location)
        {
          if (v9 <= length + location) {
            uint64_t v28 = 1LL;
          }
          else {
            uint64_t v28 = 2LL;
          }
LABEL_19:
          self->_flags.performedElementUpdateForSelectionChange = 1;
          -[VOTElementManager _cancelPreviousElementSearch](self, "_cancelPreviousElementSearch");
          fetchManager = self->_fetchManager;
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472LL;
          v34[2] = sub_10008ACD4;
          v34[3] = &unk_100178F90;
          v34[4] = self;
          v34[5] = location;
          v34[6] = length;
          *(CGFloat *)&v34[7] = v13;
          *(CGFloat *)&v34[8] = v15;
          *(CGFloat *)&v34[9] = v17;
          *(CGFloat *)&v34[10] = v19;
          unint64_t elementSearchGeneration = self->_elementSearchGeneration;
          LOBYTE(v31) = [(id)VOTSharedWorkspace navigationStyleHonorsGroups];
          -[VOTElementFetcher searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:]( fetchManager,  "searchForElementInDirection:fromElement:matchBlock:rangeMatch:searchType:generation:startingRange:groupNavigationStyle:",  v28,  v4,  v34,  0LL,  999999LL,  elementSearchGeneration,  0x7FFFFFFFLL,  0LL,  v31);
          goto LABEL_20;
        }

        [v4 updateFrame];
        [v4 frame];
        CGFloat x = v35.origin.x;
        CGFloat y = v35.origin.y;
        CGFloat width = v35.size.width;
        CGFloat height = v35.size.height;
        v41.origin.CGFloat x = v13;
        v41.origin.CGFloat y = v15;
        v41.size.CGFloat width = v17;
        v41.size.CGFloat height = v19;
        CGRect v36 = CGRectIntersection(v35, v41);
        if (CGRectIsEmpty(v36))
        {
          v37.origin.CGFloat x = x;
          v37.origin.CGFloat y = y;
          v37.size.CGFloat width = width;
          v37.size.CGFloat height = height;
          double MaxY = CGRectGetMaxY(v37);
          v38.origin.CGFloat x = v13;
          v38.origin.CGFloat y = v15;
          v38.size.CGFloat width = v17;
          v38.size.CGFloat height = v19;
          double MinY = CGRectGetMinY(v38);
          v39.origin.CGFloat x = x;
          v39.origin.CGFloat y = y;
          v39.size.CGFloat width = width;
          v39.size.CGFloat height = height;
          double v26 = CGRectGetMinY(v39);
          v40.origin.CGFloat x = v13;
          v40.origin.CGFloat y = v15;
          v40.size.CGFloat width = v17;
          v40.size.CGFloat height = v19;
          BOOL v27 = v26 >= CGRectGetMaxY(v40);
          uint64_t v28 = v27 ? 2LL : 1LL;
          if (v27 || MaxY <= MinY) {
            goto LABEL_19;
          }
        }
      }
    }
  }

- (void)_cancelPreviousElementSearch
{
}

- (int64_t)typingFeedbackForKeyboardType
{
  if ([(id)VOTSharedWorkspace brailleInputActive])
  {
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    id v4 = [v3 voiceOverBrailleGesturesTypingFeedback];
LABEL_9:
    int64_t v7 = (int64_t)v4;

    return v7;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager elementRotor](self, "elementRotor"));
  id v6 = [v5 currentRotorType];

  if (v6 != (id)54)
  {
    unsigned int v8 = -[VOTElementManager _hasCurrentApplicationMatchingBlock:]( self,  "_hasCurrentApplicationMatchingBlock:",  &stru_100178FB0);
    unsigned int v9 = -[VOTElementManager _hasCurrentApplicationMatchingBlock:]( self,  "_hasCurrentApplicationMatchingBlock:",  &stru_100178FD0);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v3 = v10;
    if (v8 || v9) {
      id v4 = [v10 voiceOverHardwareTypingFeedback];
    }
    else {
      id v4 = [v10 voiceOverSoftwareTypingFeedback];
    }
    goto LABEL_9;
  }

  return 2LL;
}

- (BOOL)_ignoreTextEditingNotificationsForPickerElementUsage
{
  uint64_t v3 = VOTLogCommon(self);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime v5 = CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime;
    int v12 = 134217984;
    CFAbsoluteTime v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Ignore text editing for picker usage change: %f",  (uint8_t *)&v12,  0xCu);
  }

  if (CFAbsoluteTimeGetCurrent() - self->_lastAdjustValueTime >= 0.300000012) {
    return 0;
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (-[VOTElementManager _isElementValidForFirstResponder:](self, "_isElementValidForFirstResponder:", v6))
  {
    BOOL v7 = 0;
  }

  else
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if ([v8 doesHaveTraits:kAXAdjustableTrait])
    {
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 value]);
      BOOL v7 = [v10 length] != 0;
    }

    else
    {
      BOOL v7 = 0;
    }
  }

  return v7;
}

- (void)_handleNonEditableValueChange:(id)a3
{
  id v4 = a3;
  BOOL v5 = -[VOTElement isEqual:](self->_currentElement, "isEqual:", v4);
  BOOL v6 = v5;
  uint64_t v7 = VOTLogCommon(v5);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v9) {
      sub_1000F3594();
    }

    unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    -[os_log_s setBrailleElement:resetBrailleCursor:rotorSelection:]( v8,  "setBrailleElement:resetBrailleCursor:rotorSelection:",  v4,  0LL,  0LL);
  }

  else if (v9)
  {
    sub_1000F35F4();
  }
}

- (void)_handleValueChangedNotification:(id)a3 associatedElement:(id)a4
{
  id v22 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  23818LL,  "-[VOTElementManager _handleValueChangedNotification:associatedElement:]",  @"must be on element manager or system event thread");
  }

  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  if ((objc_opt_isKindOfClass(v22, v6) & 1) != 0)
  {
    id v8 = v22;
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
    if ((objc_opt_isKindOfClass(v22, v9) & 1) != 0)
    {
      uint64_t v10 = kAXValueChangeUserInfoKeyChangeType;
      id v11 = v22;
      id v8 = (id)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v10]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXValueChangeUserInfoKeyValueBefore]);
      CFAbsoluteTime v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXValueChangeUserInfoKeyValueAfter]);
      double v14 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXValueChangeUserInfoKeyInsertedTextOrNil]);
      CGFloat v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXValueChangeUserInfoKeyIsSecureText]);
      id v16 = [v15 BOOLValue];

      CGFloat v17 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXValueChangeUserInfoKeyIsQuiet]);
      [v17 BOOLValue];

      goto LABEL_10;
    }

    id v8 = 0LL;
  }

  int v12 = 0LL;
  CFAbsoluteTime v13 = 0LL;
  double v14 = 0LL;
  id v16 = 0LL;
LABEL_10:
  if (-[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXUpdatesFrequentlyTrait)) {
    -[VOTElementManager resetFrequentUpdateTextCache](self, "resetFrequentUpdateTextCache");
  }
  uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSString, v18);
  if ((objc_opt_isKindOfClass(v12, v19) & 1) != 0)
  {
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSString, v20);
    if ((objc_opt_isKindOfClass(v13, v21) & 1) != 0)
    {
    }
  }

  -[VOTElementManager __tvOS_handleValueChangedWithType:oldValue:newValue:insertedTextOrNil:isSecureText:]( self,  "__tvOS_handleValueChangedWithType:oldValue:newValue:insertedTextOrNil:isSecureText:",  v8,  v12,  v13,  v14,  v16);
  -[VOTElementManager _updateCurrentElementForTextInputSelectionChangeIfNeeded]( self,  "_updateCurrentElementForTextInputSelectionChangeIfNeeded");
}

- (void)_handleTextReplacementOccurredNotification:(id)a3
{
  id v14 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v14, v5) & 1) != 0 && [v14 length])
  {
    uint64_t v6 = objc_opt_new(&OBJC_CLASS___VOTOutputRequest);
    id v7 = -[VOTOutputRequest addString:](v6, "addString:", v14);
    if ([(id)VOTSharedWorkspace typingPitchChangeEnabled])
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](v6, "outputActions"));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
      [v9 setObject:&off_100187390 forVariant:32];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](v6, "outputActions"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 lastObject]);
    [v11 setObject:&__kCFBooleanTrue forVariant:57];

    int v12 = (char *)[(id)VOTSharedWorkspace suppressValueChangeNotificationCount];
    [(id)VOTSharedWorkspace setSuppressValueChangeNotificationCount:v12 + 1];
    CFAbsoluteTime v13 = (char *)[(id)VOTSharedWorkspace suppressSelectionChangeNotificationCount];
    [(id)VOTSharedWorkspace setSuppressSelectionChangeNotificationCount:v13 + 1];
    -[VOTElementManager _updateFirstResponderTypingBuffer](self, "_updateFirstResponderTypingBuffer");
    -[VOTOutputRequest send](v6, "send");
  }
}

- (void)resetTextAndSelectionCaches
{
  self->_selectedTextStartLocation = 0LL;
  -[NSMutableString setString:](self->_elementTypingBuffer, "setString:", &stru_10017A920);
  -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  0x7FFFFFFFLL,  0LL,  0LL);
}

- (void)_processValueChangeWithFirstResponder:(id)a3 existingFirstResponder:(BOOL)a4 changeType:(id)a5 changeOrigination:(int64_t)a6 isQuiet:(BOOL)a7
{
  BOOL v208 = a4;
  id v10 = a3;
  id v11 = a5;
  p_elementTypingBuffer = (id *)&self->_elementTypingBuffer;
  if (!self->_elementTypingBuffer)
  {
    CFAbsoluteTime v13 = (void *)objc_claimAutoreleasedReturnValue([v10 value]);
    id v14 = [v13 mutableCopyWithZone:0];
    id v15 = *p_elementTypingBuffer;
    id *p_elementTypingBuffer = v14;

    uint64_t v17 = VOTLogElement(v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
      sub_1000F3750();
    }
  }

  [v10 updateValue];
  uint64_t v19 = (__CFString *)objc_claimAutoreleasedReturnValue([v10 value]);
  if (-[__CFString isAXAttributedString](v19, "isAXAttributedString")
    && -[__CFString hasAttribute:](v19, "hasAttribute:", UIAccessibilityTokenPlaceholder))
  {

    uint64_t v19 = &stru_10017A920;
  }

  id v222 = [v10 selectedTextRange];
  uint64_t v228 = v20;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v10 application]);
  id v22 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  if (a6 == 3)
  {
    CGFloat v23 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedBrailleGesturesInputTable]);
    double v24 = (void *)objc_claimAutoreleasedReturnValue([v23 localeIdentifier]);

    if (v24 && [v24 length])
    {
      uint64_t v25 = AXLanguageConvertToCanonicalForm(v24);
      uint64_t v26 = objc_claimAutoreleasedReturnValue(v25);

      int v205 = 1;
      if (v26) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }

  int v205 = 0;
LABEL_15:
  uint64_t v26 = objc_claimAutoreleasedReturnValue([v21 currentSoftwareKeyboardLanguage]);
LABEL_16:
  CGRect v211 = v21;
  CGFloat v219 = (void *)v26;
  [v22 setKeyboardLanguageHint:v26];
  if (v19) {
    BOOL v27 = v19;
  }
  else {
    BOOL v27 = &stru_10017A920;
  }
  uint64_t v215 = &self->_elementTypingBuffer;
  uint64_t v28 = [*p_elementTypingBuffer length];
  CGFloat v227 = v27;
  id v29 = -[__CFString length](v27, "length");
  int64_t v30 = v28 - (_BYTE *)v29;
  if (v28 != v29)
  {
    id v29 = (id)-[VOTElementManager _shouldSwitchToFirstResponder:](self, "_shouldSwitchToFirstResponder:", v10);
    if ((_DWORD)v29)
    {
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v10);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v31 setCursorFrameForElement:v10];
    }
  }

  int64_t v225 = a6;
  uint64_t v32 = VOTLogElement(v29);
  id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
    sub_1000F36E0();
  }

  unsigned int v34 = [v11 isEqualToString:kAXValueChangeTypeDelete];
  CGRect v35 = &kAXValueChangeTypeSingleInsert;
  else {
    unsigned int v36 = [v11 isEqualToString:kAXValueChangeTypeSingleInsert];
  }
  id v37 = [v11 isEqualToString:kAXValueChangeTypeReplacement];
  int v207 = (int)v37;
  switch(v225)
  {
    case 0LL:
      CGRect v38 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      id v39 = [v38 voiceOverSoftwareTypingFeedback];
      goto LABEL_33;
    case 1LL:
      CGRect v38 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      id v39 = [v38 voiceOverHardwareTypingFeedback];
      goto LABEL_33;
    case 2LL:
      uint64_t v40 = 3LL;
      goto LABEL_35;
    case 3LL:
      CGRect v38 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
      id v39 = [v38 voiceOverBrailleGesturesTypingFeedback];
LABEL_33:
      unint64_t v216 = (unint64_t)v39;

      break;
    case 4LL:
      uint64_t v40 = 2LL;
LABEL_35:
      unint64_t v216 = v40;
      break;
    default:
      unint64_t v216 = 0LL;
      break;
  }

  uint64_t v41 = VOTLogElement(v37);
  double v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    NSUInteger location = self->_elementSelectionRangeBufferForValueChange.location;
    NSUInteger length = self->_elementSelectionRangeBufferForValueChange.length;
    *(_DWORD *)__int128 buf = 134218752;
    *(void *)&uint8_t buf[4] = location;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = length;
    __int16 v246 = 2048;
    id v247 = v222;
    __int16 v248 = 2048;
    uint64_t v249 = v228;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "Old selection: %lu, %lu -- new selection:%lu %lu",  buf,  0x2Au);
  }

  CGFloat v226 = self;
  if (self->_elementSelectionRangeBufferForValueChange.length) {
    BOOL v43 = v228 == 0;
  }
  else {
    BOOL v43 = 0;
  }
  int v44 = v43;
  int v223 = v44;
  if (v43) {
    uint64_t v45 = 1LL;
  }
  else {
    uint64_t v45 = v36;
  }
  uint64_t v243 = 0LL;
  if (v34) {
    uint64_t v45 = 2LL;
  }
  uint64_t v213 = v45;
  __int16 v242 = 0;
  BOOL v46 = v11 && ([v11 isEqualToString:kAXValueChangeTypeSingleInsert] & 1) != 0
     || v30 == -1;
  __int16 v241 = 0;
  *(_OWORD *)__int128 buf = xmmword_100132600;
  char v240 = 0;
  os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[AXAttributedString string](&OBJC_CLASS___AXAttributedString, "string"));
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString string](&OBJC_CLASS___NSString, "string"));
  CGFloat v49 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  CGFloat v229 = v22;
  CGFloat v221 = v11;
  uint64_t v209 = v49;
  if (v49
    && (double v42 = (os_log_s *)objc_claimAutoreleasedReturnValue([v22 keyboardLanguageHint]),
        uint64_t v50 = AXLanguageCanonicalFormToGeneralLanguage(v49),
        CGRect v35 = (void *)objc_claimAutoreleasedReturnValue(v50),
        -[os_log_s hasPrefix:](v42, "hasPrefix:", v35)))
  {
    id v224 = v49;
  }

  else
  {
    id v224 = (id)objc_claimAutoreleasedReturnValue([v22 keyboardLanguageHint]);

    if (!v49) {
      goto LABEL_58;
    }
  }

LABEL_58:
  if (v216 < 3) {
    unint64_t v51 = v216 + 1;
  }
  else {
    unint64_t v51 = 0LL;
  }
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[AXFirstResponderValueChangeManager sharedInstance]( &OBJC_CLASS___AXFirstResponderValueChangeManager,  "sharedInstance"));
  elementTypingBuffer = v226->_elementTypingBuffer;
  id v210 = v10;
  [(id)VOTSharedWorkspace lastKeyboardKeyPress];
  id v238 = v48;
  id v239 = v47;
  LOBYTE(v203) = 0;
  BYTE1(v202) = v223;
  LOBYTE(v202) = v46;
  LOBYTE(v201) = v225 != 2;
  BOOL v54 = v10 != 0LL;
  id v55 = v222;
  uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue( [v52 outputValueChangeForNewValue:v227 oldValue:elementTypingBuffer isFirstResponderValid:v54 selectedTextRange:v222 oldSelectedTextR ange:v228 shouldEchoDeletion:v226->_elementSelectionRangeBufferForValueChange.location optionalValueChangeType:v226->_elementSelectionRangeBufferForValueChange.length derivedValueChangeType:v201 didHitBorder:v213 isBreakSpa ceCharacter:&v243 isSingleInsert:(char *)&v242 + 1 selectionDeleted:&v242 feedbackType:v202 textOperationOccurred:v51 lastKeyboardKey Press:&v226->_flags.tapShouldHandleTextOperation isSingleCharacterInsertOrDelete:&v240 singleInsertDeleteAttString:&v239 singleInsertDeleteString:&v238 isS ingleCharacterUpdate:&v241 wordRangeToFindMisspelled:buf pasteOperationSucceeded:(char *)&v241 + 1 processApostrophes:v203]);
  id v214 = v239;

  id v212 = v238;
  id v57 = -[__CFString length](v56, "length");
  if (v57 == (id)1)
  {
    uint64_t v58 = TTSChoseong_JongseongToHangul(v56);
    uint64_t v59 = objc_claimAutoreleasedReturnValue(v58);

    uint64_t v56 = (__CFString *)v59;
  }

  int v60 = 0;
  NSUInteger v61 = v210;
  char v62 = v226;
  NSUInteger v63 = v229;
  if (v243)
  {
    if (v243 == 1)
    {
      int v206 = 1;
    }

    else if (v243 == 2)
    {
      int v206 = 0;
      int v60 = 1;
    }

    else
    {
      int v60 = 0;
      int v206 = 0;
    }

    id v57 = -[VOTElementRotor setIgnoreDefaultTypeAutofill:](v226->_elementRotor, "setIgnoreDefaultTypeAutofill:", 0LL);
  }

  else
  {
    int v206 = 0;
  }

  if (HIBYTE(v242) && !a7)
  {
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    NSUInteger v65 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v64 sendEvent:v65];
  }

  if ((_BYTE)v242)
  {
    NSUInteger v66 = (void *)objc_claimAutoreleasedReturnValue([v229 keyboardLanguageHint]);
    id v67 = sub_10004B314(32LL, @"UnicodeHex.", @"VOTOutputPunctuation", v66);
    uint64_t v68 = objc_claimAutoreleasedReturnValue(v67);

    if (v68) {
      uint64_t v56 = (__CFString *)v68;
    }
    else {
      uint64_t v56 = @" ";
    }
  }

  if (v207)
  {
    CGRect v69 = v227;
LABEL_91:

    uint64_t v56 = v69;
    goto LABEL_92;
  }

  if (v240)
  {
    if (v216 != 3)
    {
      else {
        id v71 = [v229 addString:v212 withLanguage:v224];
      }
    }

    unsigned int v72 = [(id)VOTSharedWorkspace typingPitchChangeEnabled];
    if (v225 != 3 && v72)
    {
      double v73 = (void *)objc_claimAutoreleasedReturnValue([v229 outputActions]);
      double v74 = (void *)objc_claimAutoreleasedReturnValue([v73 lastObject]);
      LODWORD(v75) = 1.5;
      int v76 = v60;
      unsigned __int8 v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v75));
      [v74 setObject:v77 forVariant:32];

      int v60 = v76;
      NSUInteger v61 = v210;
      id v55 = v222;
    }

    if ((unint64_t)-[__CFString length](v56, "length") <= 1)
    {

      uint64_t v56 = 0LL;
    }

    CGRect v69 = v56;
    uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue([v229 outputActions]);
    unsigned __int8 v78 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastObject](v56, "lastObject"));
    [v78 setObject:&__kCFBooleanTrue forVariant:57];

    goto LABEL_91;
  }

- (void)_processSilentValueChange
{
  elementTypingBuffer = self->_elementTypingBuffer;
  uint64_t v4 = objc_claimAutoreleasedReturnValue(-[VOTElement value](self->_firstResponderElement, "value"));
  uint64_t v5 = (void *)v4;
  if (v4) {
    uint64_t v6 = (const __CFString *)v4;
  }
  else {
    uint64_t v6 = &stru_10017A920;
  }
  -[NSMutableString setString:](elementTypingBuffer, "setString:", v6);

  -[VOTElementManager _reupdateTextSelectionInformation](self, "_reupdateTextSelectionInformation");
  id v7 = (void *)VOTSharedWorkspace;
  id v8 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentRotorSelection](self, "_currentRotorSelection"));
  [v7 refreshBraille:1 rotorSelection:v8];
}

- (void)_handleElementMoved:(__AXUIElement *)a3
{
  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    id v24 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", a3));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v5));

    if ([v24 isEqual:v6])
    {
      double x = CGRectZero.origin.x;
      double y = CGRectZero.origin.y;
      double width = CGRectZero.size.width;
      double height = CGRectZero.size.height;
      NSUInteger location = self->_highlightedCharacterRange.location;
      int v12 = v24;
      if (location == 0x7FFFFFFF)
      {
        BOOL v13 = 0;
      }

      else
      {
        objc_msgSend(v24, "boundsForRange:", location, self->_highlightedCharacterRange.length);
        double v14 = v25.origin.x;
        double v15 = v25.origin.y;
        double v16 = v25.size.width;
        double v17 = v25.size.height;
        v26.origin.double x = CGRectZero.origin.x;
        v26.origin.double y = y;
        v26.size.double width = width;
        v26.size.double height = height;
        BOOL v18 = CGRectEqualToRect(v25, v26);
        if (!v18)
        {
          double x = v14;
          double y = v15;
          double width = v16;
          double height = v17;
        }

        BOOL v13 = !v18;
        int v12 = v24;
      }

      [v12 updateFrame];
      [v24 updateCenterPoint];
      if (!v13)
      {
        [v24 frame];
        double x = v19;
        double y = v20;
        double width = v21;
        double height = v22;
      }

      CGFloat v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      objc_msgSend(v23, "setCursorFrame:", x, y, width, height);
    }
  }

- (void)_handleKeyboardKeySelectedNotification:(id)a3
{
  id v20 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  24581LL,  "-[VOTElementManager _handleKeyboardKeySelectedNotification:]",  @"must be on element manager or system event thread");
  }

  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v20, v5) & 1) != 0)
  {
    id v6 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    id v8 = [v7 voiceOverPhoneticsFeedback];

    if (v8 == (id)2)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _phoneticStringForLetter:language:]( self,  "_phoneticStringForLetter:language:",  v20,  0LL));
      id v11 = v10;
      if (v10)
      {
        id v12 = v10;

        id v20 = v12;
      }
    }

    uint64_t v13 = objc_opt_class(&OBJC_CLASS___AXAttributedString, v9);
    if ((objc_opt_isKindOfClass(v20, v13) & 1) != 0) {
      id v14 = [v6 addAttributedString:v20];
    }
    else {
      id v16 = [v6 addString:v20];
    }
    id v17 = sub_10004A988(off_1001AC148, @"element.selected.text", 0LL);
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    id v19 = [v6 addString:v18];

    [v6 setGeneratesBraille:1];
    [v6 setBrailleType:2];
    -[VOTElementManager sendRequest:](self, "sendRequest:", v6);

    double v15 = v20;
  }

  else
  {
    double v15 = v20;
    if (!v20)
    {
      if (!-[VOTElementManager _isDictationInProgressForCurrentApp](self, "_isDictationInProgressForCurrentApp")) {
        -[VOTElementManager _interruptSpeachAndPlayBorderHitSound](self, "_interruptSpeachAndPlayBorderHitSound");
      }
      double v15 = 0LL;
    }
  }
}

- (void)_appSuspensionSoundTimer
{
  if (*(double *)&qword_1001ACF28 != 0.0)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[VOTOutputManager outputManager]( &OBJC_CLASS___VOTOutputManager,  "outputManager",  *(double *)&qword_1001ACF28));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ItemIsLoading](&OBJC_CLASS___VOSOutputEvent, "ItemIsLoading"));
    [v3 sendEvent:v4];

    -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_appSuspensionSoundTimer,  "dispatchAfterDelay:",  *(double *)&qword_1001ACF28);
  }

- (void)_handleAppSuspendAnimationProgressNotification:(id)a3
{
  id v10 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
  if ((objc_opt_isKindOfClass(v10, v5) & 1) != 0)
  {
    [v10 floatValue];
    if (v6 == -1.0)
    {
      double v7 = *(double *)&qword_1001ACF28;
      if (*(double *)&qword_1001ACF28 > 0.0)
      {
        qword_1001ACF28 = 0LL;
        -[VOTElementManager _handleScreenChange:sound:](self, "_handleScreenChange:sound:", 0LL, 0LL, v7);
      }
    }

    else
    {
      double v8 = v6;
      if (v8 > 1.0) {
        double v8 = 1.0;
      }
      if (v8 <= 0.0) {
        double v9 = 1.0;
      }
      else {
        double v9 = 1.0 - v8;
      }
      *(double *)&qword_1001ACF28 = v9 * 0.5 + 0.01;
      if ((-[SCRCTargetSelectorTimer isCancelled](self->_appSuspensionSoundTimer, "isCancelled") & 1) != 0
        || (-[SCRCTargetSelectorTimer isPending](self->_appSuspensionSoundTimer, "isPending") & 1) == 0)
      {
        -[VOTElementManager _appSuspensionSoundTimer](self, "_appSuspensionSoundTimer");
      }
    }
  }
}

- (void)__handleExpandedStatusChanged
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v4 = [v3 expandedStatus];
  [v3 updateExpandedStatus];
  id v5 = [v3 expandedStatus];
  if ([v3 doesHaveTraits:kAXWebContentTrait]
    && ([v3 isAlive] & 1) == 0
    && [v3 isValid])
  {
    float v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemWideElement](&OBJC_CLASS___VOTElement, "systemWideElement"));
    [v3 centerPoint];
    objc_msgSend(v6, "convertPoint:fromContextId:", objc_msgSend(v3, "windowContextId"), v7, v8);
    double v10 = v9;
    double v12 = v11;

    uint64_t v13 = -[VOTElement initWithPosition:](objc_alloc(&OBJC_CLASS___VOTElement), "initWithPosition:", v10, v12);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_10008D318;
    v21[3] = &unk_100177FF0;
    id v22 = v3;
    id v14 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _nearestElementWithMatch:startElement:]( self,  "_nearestElementWithMatch:startElement:",  v21,  v13));
    double v15 = v14;
    if (v14)
    {
      id v5 = [v14 expandedStatus];
      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v15);
    }
  }

  if (v4 != v5)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    if (v5 == (id)1) {
      id v17 = @"expanded";
    }
    else {
      id v17 = @"collapsed";
    }
    id v18 = sub_10004AE68(off_1001AC148, v17, 0LL, v16);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = sub_10000BBB0(v19, 1, v16);
  }
}

- (void)_handleExpandedStatusChanged:(id)a3
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10008D408;
  v3[3] = &unk_100176D38;
  v3[4] = self;
  AXPerformBlockOnMainThreadAfterDelay(v3, a2, 0.25);
}

- (void)_handleCurrentStateChanged:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 uiElement]);
  [v3 updateCache:2116];
}

- (void)_handleSortDirectionChanged:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement", a3));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 uiElement]);
  [v3 updateCache:2152];
}

- (void)_handleInvalidStatusChanged:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    id v8 = v3;
    CFTypeID v4 = CFGetTypeID(v3);
    BOOL v5 = v4 == AXUIElementGetTypeID();
    id v3 = v8;
    if (v5)
    {
      id v6 = [objc_allocWithZone((Class)VOTElement) initWithAXElement:v8];
      id v7 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
      [v6 applyInvalidStatusToRequest:v7];
      [v7 setDoesNotInterrupt:1];
      [v7 send];

      id v3 = v8;
    }
  }
}

- (void)_handleInvalidTextInputNotification:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v4 sendEvent:v3];
}

- (void)_reupdateTextSelectionInformation
{
  id v3 = -[VOTElement selectedTextRange](self->_firstResponderElement, "selectedTextRange");
  -[VOTElementManager _elementSelectionRangeDidChange:reason:]( self,  "_elementSelectionRangeDidChange:reason:",  v3,  v4,  0LL);
}

- (void)_handleAnnouncementNotification:(id)a3
{
  id v9 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  if ((objc_opt_isKindOfClass(v9, v5) & 1) != 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:kAXPidKey]);
    id v7 = [v6 intValue];

    id v8 = (id)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:kAXNotificationDataKey]);
    if (!v8)
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:kAXAnnouncementUserInfoKeyAnnouncement]);
      if (!v8) {
        id v8 = v9;
      }
    }

    -[VOTElementManager _handleAnnouncementWithData:pid:](self, "_handleAnnouncementWithData:pid:", v8, v7);
  }
}

- (void)handleAnnouncement:(id)a3
{
}

- (void)_handleAnnouncement:(id)a3
{
}

- (void)_handleAnnouncementWithData:(id)a3 pid:(int)a4
{
  id v29 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  24858LL,  "-[VOTElementManager _handleAnnouncementWithData:pid:]",  @"must be on element manager or system event thread");
  }

  if (!v29
    || (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5), (objc_opt_isKindOfClass(v29, v6) & 1) != 0)
    && ![v29 length])
  {
    id v17 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v17 stopSpeakingAtBoundary:1];
    goto LABEL_28;
  }

  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v7);
  if ((objc_opt_isKindOfClass(v29, v8) & 1) == 0)
  {
    uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v9);
    if ((objc_opt_isKindOfClass(v29, v18) & 1) == 0) {
      goto LABEL_29;
    }
    uint64_t v19 = kAXAnnouncementUserInfoKeyAnnouncement;
    id v20 = v29;
    id v17 = (id)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v19]);
    double v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kAXAnnouncementUserInfoKeyPreAnnouncementSoundID]);
    unsigned int v22 = [v21 isEqualToString:kAXAnnouncementTypeAlertSound];
    if (v22) {
      CGFloat v23 = @"Sounds/Alert.aiff";
    }
    else {
      CGFloat v23 = 0LL;
    }
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kAXAnnouncementUserInfoKeyIgnorable]);

    unsigned int v25 = [v24 BOOLValue];
    if (!v25 || !self->_shouldSilenceAnnouncements)
    {
      BOOL v26 = 0LL;
      BOOL v27 = 0LL;
      uint64_t v13 = 5LL;
      if (!v22) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }

    _AXLogWithFacility(2LL, 0LL, 1LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0.0, 1, @"Alert received but was ignored: %@");
LABEL_28:

    goto LABEL_29;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___AXAttributedString, v9);
  if ((objc_opt_isKindOfClass(v29, v10) & 1) != 0)
  {
    double v11 = (void *)objc_claimAutoreleasedReturnValue([v29 attributesAtIndex:0 effectiveRange:0]);
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:UIAccessibilityTokenAnnouncementPriority]);
    uint64_t v13 = (int)[v12 intValue];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:UIAccessibilityTokenBrailleDisplayOnly]);
    unsigned int v15 = [v14 BOOLValue];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:UIAccessibilityTokenPassthroughOnlyPasteboardOp]);
    [v16 BOOLValue];
  }

  else
  {
    unsigned int v15 = 0;
    uint64_t v13 = 5LL;
  }

  if ([v29 isEqualToString:kAXAnnouncementTypeAlertSound])
  {
    id v17 = 0LL;
    BOOL v26 = v15 != 0;
    CGFloat v23 = @"Sounds/Alert.aiff";
LABEL_25:
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v28 playSoundFast:v23];

    BOOL v27 = v26;
LABEL_26:
    if (v17)
    {
LABEL_27:
      -[VOTElementManager _speak:cannotBeInterrupted:announcement:brailleOnly:]( self,  "_speak:cannotBeInterrupted:announcement:brailleOnly:",  v17,  v13 == 1,  1LL,  v27);
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  if (![v29 isEqualToString:kAXAnnouncementBorderHitSound])
  {
    if ([v29 isEqualToString:kAXAnnouncementTypeStopSpeech])
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v17 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:&off_100187988];
      goto LABEL_28;
    }

    id v17 = v29;
    BOOL v27 = v15 != 0;
    goto LABEL_27;
  }

  if (!-[VOTElementManager inDirectTouchMode](self, "inDirectTouchMode"))
  {
    id v17 = 0LL;
    BOOL v26 = v15 != 0;
    CGFloat v23 = @"Sounds/WrapBoundary.aiff";
    goto LABEL_25;
  }

- (id)_handleEditingStyleResolutionForAnnouncement:(id)a3
{
  firstResponderElement = self->_firstResponderElement;
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement resolvedEditingStyles](firstResponderElement, "resolvedEditingStyles"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 coalescedAttributes]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:UIAccessibilityTokenRequiresEditingStyleResolution]);
  if ([v7 isEqualToString:UIAccessibilityTokenBold])
  {
    uint64_t v8 = off_1001AC148;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:UIAccessibilityTokenBold]);
    unsigned int v10 = [v9 BOOLValue];
    double v11 = @"bold.off";
    double v12 = @"bold.on";
LABEL_7:
    if (v10) {
      uint64_t v13 = (__CFString *)v12;
    }
    else {
      uint64_t v13 = (__CFString *)v11;
    }
    id v14 = sub_10004A988(v8, v13, 0LL);
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    goto LABEL_11;
  }

  if ([v7 isEqualToString:UIAccessibilityTokenUnderline])
  {
    uint64_t v8 = off_1001AC148;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:UIAccessibilityTokenUnderline]);
    unsigned int v10 = [v9 BOOLValue];
    double v11 = @"underline.off";
    double v12 = @"underline.on";
    goto LABEL_7;
  }

  if ([v7 isEqualToString:UIAccessibilityTokenItalic])
  {
    uint64_t v8 = off_1001AC148;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:UIAccessibilityTokenItalic]);
    unsigned int v10 = [v9 BOOLValue];
    double v11 = @"italic.off";
    double v12 = @"italic.on";
    goto LABEL_7;
  }

  if (![v7 isEqualToString:UIAccessibilityTokenFontSize])
  {
    unsigned int v15 = 0LL;
    goto LABEL_12;
  }

  id v18 = sub_10004A988(off_1001AC148, @"font.size", 0LL);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:UIAccessibilityTokenFontSize]);
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( NSString,  "localizedStringWithFormat:",  v9,  [v19 intValue]));

LABEL_11:
LABEL_12:
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v15));

  return v16;
}

- (void)_systemNotificationInProgressForRequest:(id)a3
{
  self->_BOOL systemNotificationInProgress = 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10008DD54;
  v3[3] = &unk_100178E60;
  v3[4] = self;
  [a3 setCompletionBlock:v3];
}

- (id)_retrieveDefaultElementForPosition:(CGPoint)a3
{
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)VOTElement), "initApplicationWithPosition:", v3, v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  unsigned __int8 v9 = [v8 ignoreLogging];

  if ((v9 & 1) == 0)
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v11 = AXLoggerForFacility(v10);
    double v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);

    os_log_type_t v13 = AXOSLogLevelFromAXLogLevel(3LL);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = AXColorizeFormatLog(3LL, @"alert recv: asking app for first: %{public}@ - %{public}@");
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v35.double x = v4;
      v35.double y = v6;
      id v16 = NSStringFromPoint(v35);
      id v31 = v7;
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v16);
      uint64_t v17 = _AXStringForArgs(v15);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

      if (os_log_type_enabled(v12, v13))
      {
        *(_DWORD *)__int128 buf = 138543362;
        unsigned int v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}@", buf, 0xCu);
      }
    }
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firstResponderElementForFocus", v31, v32));
  if (!v19) {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 firstElementInApplication]);
  }
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  unsigned __int8 v21 = [v20 ignoreLogging];

  if ((v21 & 1) == 0)
  {
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v23 = AXLoggerForFacility(v22);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);

    os_log_type_t v25 = AXOSLogLevelFromAXLogLevel(3LL);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = AXColorizeFormatLog(3LL, @"that value is %{public}@");
      BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = _AXStringForArgs(v27);
      id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v24, v25))
      {
        *(_DWORD *)__int128 buf = 138543362;
        unsigned int v34 = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}@", buf, 0xCu);
      }
    }
  }

  return v19;
}

- (void)_handleAlertReceived:(id)a3 forApplication:(__AXUIElement *)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXUIElement uiElementWithAXElement:](&OBJC_CLASS___AXUIElement, "uiElementWithAXElement:", a4));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v7));

  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
  [v9 setHelpEnabled:0];

  -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
  -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
  -[VOTElementManager _resetDirectInteractionCache](self, "_resetDirectInteractionCache");
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v10 postNotificationName:@"UpdateElement" object:0];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent AlertDidAppear](&OBJC_CLASS___VOSOutputEvent, "AlertDidAppear"));
  [v11 sendEvent:v12];

  os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 3LL));
  -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v13, 0.05);

  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    if (v6 && (uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString, v14), (objc_opt_isKindOfClass(v6, v15) & 1) == 0))
    {
      id v37 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
      unsigned __int8 v38 = [v37 ignoreLogging];

      if ((v38 & 1) == 0)
      {
        id v39 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
        uint64_t v40 = AXLoggerForFacility(v39);
        id v27 = (id)objc_claimAutoreleasedReturnValue(v40);

        os_log_type_t v41 = AXOSLogLevelFromAXLogLevel(0LL);
        if (!os_log_type_enabled((os_log_t)v27, v41))
        {
LABEL_44:

          goto LABEL_45;
        }

        uint64_t v42 = AXColorizeFormatLog( 0LL,  @"VO received an alert with %{public}@ instead of NSString. Track this down");
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v42);
        objc_opt_class(v6, v43);
        uint64_t v44 = _AXStringForArgs(v28);
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled((os_log_t)v27, v41))
        {
          *(_DWORD *)__int128 buf = 138543362;
          double v74 = v31;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v27, v41, "%{public}@", buf, 0xCu);
        }

- (void)_updateDisplayWithCurrentElement
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v3 setCursorFrameForElement:self->_currentElement];
}

- (void)_handleApplicationWasActivated:(id)a3
{
  id v4 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  25693LL,  "-[VOTElementManager _handleApplicationWasActivated:]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
  -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
  double v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v5 setCursorFrameForElement:0];

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary, v6);
  uint64_t v8 = 0LL;
  if ((objc_opt_isKindOfClass(v4, v7) & 1) != 0)
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bundleID"]);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"displayName"]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"pid"]);
    id v12 = [v11 intValue];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[VOTAppTransitionContext contextWithPID:bundleID:displayName:]( &OBJC_CLASS___VOTAppTransitionContext,  "contextWithPID:bundleID:displayName:",  v12,  v9,  v10));
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10008E988;
  v15[3] = &unk_100176DA8;
  void v15[4] = self;
  id v16 = v8;
  id v13 = v8;
  AXPerformBlockOnMainThreadAfterDelay(v15, v14, 0.5);
}

- (void)_updateFocusContext:(id)a3
{
  elementManagerThread = self->_elementManagerThread;
  id v5 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  25716LL,  "-[VOTElementManager _updateFocusContext:]",  @"must be on element manager or system event thread");
  }

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 1LL));
  [v6 setShouldIgnorePreviousFocusedElement:1];
  [v6 setAppTransition:v5];

  -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v6, 0.0);
}

- (BOOL)_shouldIgnoreElementMovementNotification:(id)a3
{
  return 0;
}

- (void)_handleScreenChange:(id)a3 sound:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v8 & 1) == 0)
  {
    uint64_t v8 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v8 & 1) == 0) {
      uint64_t v8 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  25839LL,  "-[VOTElementManager _handleScreenChange:sound:]",  @"must be on element manager or system event thread");
    }
  }

  uint64_t v9 = VOTLogLayoutChange(v8);
  unsigned int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_1000F37B0();
  }

  uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11);
  if ((objc_opt_isKindOfClass(v6, v12) & 1) == 0
    || !-[VOTElementManager _shouldIgnoreElementMovementNotification:]( self,  "_shouldIgnoreElementMovementNotification:",  v6))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
    [v14 setPanEnabled:1];

    if ((AXDeviceIsAudioAccessory(v15, v16) & 1) == 0)
    {
      unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 visionEngine]);
      [v18 purgeCache];
    }

    -[SCRCTargetSelectorTimer cancel](self->_updateLayoutTimer, "cancel");
    -[VOTElementManager setCachedSideAppDividerElement:](self, "setCachedSideAppDividerElement:", 0LL);
    -[VOTElementManager setDidCacheSideAppDividerElement:](self, "setDidCacheSideAppDividerElement:", 0LL);
    -[VOTElementManager setCachedAdditionalElementCommunities:](self, "setCachedAdditionalElementCommunities:", 0LL);
    -[VOTElementManager setLastTrackingUpdateAppsFailureApplication:]( self,  "setLastTrackingUpdateAppsFailureApplication:",  0LL);
    -[VOTElementManager setLastTrackingUpdateAppsFailureTime:]( self,  "setLastTrackingUpdateAppsFailureTime:",  -3061152000.0);
    unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
    [v19 setHelpEnabled:0];

    if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v6,  kAXAnnouncementTypeStopSpeech))
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v20 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

      uint64_t v21 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _notificationData:consumingToken:]( self,  "_notificationData:consumingToken:",  v6,  kAXAnnouncementTypeStopSpeech));
      id v6 = (id)v21;
    }

    if (-[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v6,  kAXPerformElementUpdateImmediatelyToken))
    {
      float v22 = 0.005;
    }

    else
    {
      float v22 = 0.75;
    }

    double v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v23 postNotificationName:@"UpdateElement" object:0];

    if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
    {
      double v24 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
      if (Current - self->_lastAlertTime < 1.25
        || (-[VOTElementManager lastValueChangeTime](self, "lastValueChangeTime"), Current - v25 < 0.75))
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 firstElementInApplication]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
        if (([v27 isEqual:v26] & 1) != 0
          || ([v27 updateTraits], objc_msgSend(v27, "isValid"))
          && ([v27 doesHaveTraits:kAXKeyboardKeyTrait | kAXIsEditingTrait] & 1) != 0)
        {

LABEL_49:
          goto LABEL_50;
        }
      }

      unsigned __int8 v30 = -[VOTElementManager _notificationData:containsToken:]( self,  "_notificationData:containsToken:",  v6,  kAXScreenChangePopup);
      [(id)VOTSharedWorkspace tapAndHoldMode];
      id WeakRetained = objc_loadWeakRetained((id *)&self->_updateDelegate);
      unsigned __int8 v32 = [WeakRetained directInteractionGestureInProgress];

      if ((v32 & 1) == 0)
      {
        -[SCRCTargetSelectorTimer cancel](self->_updateAppFromTimer, "cancel");
        uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSDictionary, v33);
        if ((objc_opt_isKindOfClass(v6, v34) & 1) != 0) {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kAXScreenChangeSourceIdentifier]);
        }
        else {
          uint64_t v26 = 0LL;
        }
        if (!-[NSNumber isEqual:](self->_lastScreenChangeSourceIdentifier, "isEqual:", v26)
          || Current - self->_lastScreenChangeNotificationTime >= 2.5
          || [(id)VOTSharedWorkspace brailleInputActive])
        {
          objc_storeStrong((id *)&self->_lastScreenChangeSourceIdentifier, v26);
          BOOL v35 = -[VOTElementManager screenCurtainIsTemporarilyDisabled](self, "screenCurtainIsTemporarilyDisabled");
          if (v35)
          {
            uint64_t v36 = VOTLogElement(v35);
            id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Screen curtain re-enabled after temporary disablement",  buf,  2u);
            }

            -[VOTElementManager setScreenCurtainIsTemporarilyDisabled:]( self,  "setScreenCurtainIsTemporarilyDisabled:",  0LL);
            unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
            [v38 setScreenCurtainSuspended:0];
          }

          id v39 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
          [v39 setCursorFrameForElement:0];

          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472LL;
          v48[2] = sub_10008F0E8;
          v48[3] = &unk_1001790A0;
          v48[4] = self;
          float v49 = v22;
          uint64_t v40 = objc_retainBlock(v48);
          if (Current - self->_lastScreenChangeNotificationTime >= 2.5
            || -[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXAdjustableTrait)
            || [(id)VOTSharedWorkspace brailleInputActive])
          {
            -[VOTElementManager _resetDirectInteractionCache](self, "_resetDirectInteractionCache");
            -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
            -[NSMutableDictionary removeAllObjects](self->_flowFromElements, "removeAllObjects");
            self->_double lastScreenChangeNotificationTime = CFAbsoluteTimeGetCurrent();
            double v41 = Current - self->_lastFirstResponderChangeTime;
            double v42 = CFAbsoluteTimeGetCurrent() - self->_lastFolderOperationTime;
            if (v41 >= 0.5)
            {
              uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
              [v43 stopSpeakingAtBoundary:0];
            }

            if (v42 < 0.25) {
              char v44 = 1;
            }
            else {
              char v44 = v30;
            }
            if ((v44 & 1) == 0)
            {
              uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
              BOOL v46 = v45;
              if (v7)
              {
                [v45 playSoundFast:v7];
              }

              else
              {
                os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ScreenDidChange](&OBJC_CLASS___VOSOutputEvent, "ScreenDidChange"));
                [v46 sendEvent:v47];
              }
            }
          }

          ((void (*)(void *))v40[2])(v40);
        }

        goto LABEL_49;
      }
    }

    else
    {
      self->_double lastScreenChangeNotificationTime = CFAbsoluteTimeGetCurrent();
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ScreenDidChange](&OBJC_CLASS___VOSOutputEvent, "ScreenDidChange"));
      [v28 sendEvent:v29];

      double v24 = (void *)objc_claimAutoreleasedReturnValue(+[VOTUpdateFocusContext context:](&OBJC_CLASS___VOTUpdateFocusContext, "context:", 2LL));
      -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:]( self,  "_tvOS_updateWithNativeFocus:withDelay:",  v24,  0.5);
    }

- (void)_clearWebLoadedSound
{
  webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
  self->_webPageLoadingSoundTimer = 0LL;

  uint64_t v5 = VOTLogWebPageMovement(v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3818();
  }
}

- (void)_webPageElementFinder
{
  uint64_t v3 = VOTLogWebPageMovement(self);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1000F38A4();
  }

  [(id)VOTSharedWorkspace tvInteractionMode];
  BOOL v5 = -[VOTElementManager _moveToWebItemDuringLoadIfNecessary](self, "_moveToWebItemDuringLoadIfNecessary");
  BOOL v6 = v5;
  uint64_t v7 = VOTLogWebPageMovement(v5);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3844();
  }

  webPageElementFinder = self->_webPageElementFinder;
  if (v6)
  {
    -[SCRCTargetSelectorTimer invalidate](webPageElementFinder, "invalidate");
    unsigned int v10 = self->_webPageElementFinder;
    self->_webPageElementFinder = 0LL;
  }

  else
  {
    -[SCRCTargetSelectorTimer dispatchAfterDelay:](webPageElementFinder, "dispatchAfterDelay:", 0.5);
  }

- (void)_webPageLoadingSound
{
  if (-[VOTElementManager _isWebAppStillOpen](self, "_isWebAppStillOpen"))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ItemIsLoading](&OBJC_CLASS___VOSOutputEvent, "ItemIsLoading"));
    [v3 sendEvent:v4];

    uint64_t v5 = VOTLogWebPageMovement(-[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_webPageLoadingSoundTimer, "dispatchAfterDelay:", 1.0));
    BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_1000F38D0();
    }
  }

- (BOOL)_moveToWebItemDuringLoadIfNecessary
{
  uint64_t v3 = VOTLogWebPageMovement(self);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3A00();
  }

  if (-[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark")
    && (unint64_t v5 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark"),
        v5 >= -[VOTElementManager elementGeneration](self, "elementGeneration")))
  {
    -[VOTElementManager _resetItemChooserCache](self, "_resetItemChooserCache");
    uint64_t v10 = VOTLogWebPageMovement(-[VOTElementFetcher forceUpdate](self->_fetchManager, "forceUpdate"));
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      sub_1000F39D4();
    }

    -[VOTElementManager _updateApplicationAndSpeak:](self, "_updateApplicationAndSpeak:", &__kCFBooleanTrue);
    BOOL v12 = -[VOTElement doesHaveTraits:](self->_currentElement, "doesHaveTraits:", kAXWebContentTrait);
    if (v12)
    {
      BOOL v12 = -[VOTElement hasNativeFocus](self->_currentElement, "hasNativeFocus");
      BOOL v13 = v12;
    }

    else
    {
      BOOL v13 = 0;
    }

    uint64_t v14 = VOTLogWebPageMovement(v12);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v22 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
      unint64_t v23 = -[VOTElementManager elementGeneration](self, "elementGeneration");
      currentElement = self->_currentElement;
      v25[0] = 67109890;
      v25[1] = v13;
      __int16 v26 = 2048;
      unint64_t v27 = v22;
      __int16 v28 = 2048;
      unint64_t v29 = v23;
      __int16 v30 = 2112;
      id v31 = currentElement;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Did we move from for web movement(has hasWebFocus: %d): web generation: %lld, element: %lld\nElement: %@",  (uint8_t *)v25,  0x26u);
    }

    unint64_t v16 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
    unint64_t v17 = -[VOTElementManager elementGeneration](self, "elementGeneration");
    int v18 = v16 < v17 || v13;
    if (v18 == 1)
    {
      uint64_t v19 = VOTLogWebPageMovement(v17);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3960();
      }

      goto LABEL_23;
    }
  }

  else
  {
    unint64_t v6 = -[VOTElementManager elementGeneration](self, "elementGeneration");
    unint64_t v7 = -[VOTElementManager webPageLoadedGenerationMark](self, "webPageLoadedGenerationMark");
    if (v6 > v7)
    {
      uint64_t v8 = VOTLogWebPageMovement(v7);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
        sub_1000F38FC();
      }

LABEL_23:
      -[VOTElementManager setWebPageLoadedGenerationMark:](self, "setWebPageLoadedGenerationMark:", 0LL);
      return 1;
    }
  }

  return 0;
}

- (void)_handleWebPageLoaded:(id)a3
{
  id v4 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"progress"]);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
    double v11 = 0.0;
    if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
    {
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"progress"]);
      [v12 doubleValue];
      double v11 = v13;
    }

    uint64_t isKindOfClass = objc_claimAutoreleasedReturnValue([v4 objectForKey:@"url"]);
    uint64_t v15 = (void *)isKindOfClass;
  }

  else
  {
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber, v7);
    uint64_t isKindOfClass = objc_opt_isKindOfClass(v4, v16);
    if ((isKindOfClass & 1) != 0)
    {
      uint64_t isKindOfClass = (uint64_t)[v4 floatValue];
      uint64_t v15 = 0LL;
      double v11 = v17;
    }

    else
    {
      uint64_t v15 = 0LL;
      double v11 = 0.0;
    }
  }

  uint64_t v18 = VOTLogWebPageMovement(isKindOfClass);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
    sub_1000F3B68();
  }

  if (v11 != 1.0 && v11 >= 0.0)
  {
    if (!self->_webPageLoadingSoundTimer)
    {
      -[VOTElementManager setWebPageLoadedGenerationMark:]( self,  "setWebPageLoadedGenerationMark:",  -[VOTElementManager elementGeneration](self, "elementGeneration"));
      uint64_t v20 = VOTLogWebPageMovement(-[VOTElementManager setWebPageLoadURL:](self, "setWebPageLoadURL:", v15));
      uint64_t v21 = (char *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_DEBUG)) {
        sub_1000F3AF8(self, v21);
      }

      unint64_t v22 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:self selector:"_webPageLoadingSound" thread:self->_elementManagerThread];
      webPageLoadingSoundTimer = self->_webPageLoadingSoundTimer;
      self->_webPageLoadingSoundTimer = v22;

      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_webPageLoadingSoundTimer, "dispatchAfterDelay:", 0.0);
      double v24 = (SCRCTargetSelectorTimer *)[objc_allocWithZone(SCRCTargetSelectorTimer) initWithTarget:self selector:"_webPageElementFinder" thread:self->_elementManagerThread];
      webPageElementFinder = self->_webPageElementFinder;
      self->_webPageElementFinder = v24;

      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_webPageElementFinder, "dispatchAfterDelay:", 0.0);
    }

    goto LABEL_25;
  }

  -[VOTElementManager _clearWebLoadedSound](self, "_clearWebLoadedSound");
  if (CFAbsoluteTimeGetCurrent() - self->_lastWebPageLoadTime > 3.0)
  {
    self->_lastWebPageLoadTime = CFAbsoluteTimeGetCurrent();
    self->_webPageLoadingProgress = 0.0;
    unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    if (([v27 isSpeaking] & 1) == 0)
    {
      unsigned int v28 = [(id)VOTSharedWorkspace hintsEnabled];

      if (!v28)
      {
LABEL_21:
        unsigned __int8 v32 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ItemDidLoad](&OBJC_CLASS___VOSOutputEvent, "ItemDidLoad"));
        [v32 sendEvent:v33];

        goto LABEL_22;
      }

      unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      id v29 = sub_10004AE68(off_1001AC148, @"webpage.loaded", 0LL, v27);
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      id v31 = sub_10000BBB0(v30, 1, v27);
    }

    goto LABEL_21;
  }

- (void)_handleVisualsUpdate:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager", a3));
  [v4 setCursorFrameForElement:0];

  -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_updateVisualsTimer, "dispatchAfterDelay:", 0.1);
}

- (void)_captionsDisplayedWithTextRuns:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unsigned __int8 v5 = [v4 voiceOverDescribedMedia];

  if ((v5 & 3) == 0) {
    goto LABEL_25;
  }
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v6 = (VOTOutputRequest *)v3;
  id v7 = -[VOTOutputRequest countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  if (!v7)
  {
    uint64_t v10 = v6;
    goto LABEL_24;
  }

  id v9 = v7;
  id v20 = v3;
  uint64_t v10 = 0LL;
  uint64_t v11 = *(void *)v22;
  do
  {
    for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v22 != v11) {
        objc_enumerationMutation(v6);
      }
      double v13 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSAttributedString, v8);
      if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
      {
        id v16 = (id)objc_claimAutoreleasedReturnValue([v13 string]);
      }

      else
      {
        uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString, v15);
        if ((objc_opt_isKindOfClass(v13, v17) & 1) == 0) {
          continue;
        }
        id v16 = v13;
      }

      uint64_t v18 = v16;
      if (v16)
      {
        if (!v10) {
          uint64_t v10 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
        }
        id v19 = -[VOTOutputRequest addString:](v10, "addString:", v18);
      }
    }

    id v9 = -[VOTOutputRequest countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v21,  v25,  16LL);
  }

  while (v9);

  id v3 = v20;
  if (v10)
  {
    if ((v5 & 2) != 0) {
      -[VOTOutputRequest setGeneratesBraille:](v10, "setGeneratesBraille:", 1LL);
    }
    if ((v5 & 1) == 0) {
      -[VOTOutputRequest setLimitToComponentType:](v10, "setLimitToComponentType:", 3LL);
    }
    -[VOTOutputRequest setBrailleType:](v10, "setBrailleType:", 1LL);
    -[VOTOutputRequest send](v10, "send");
LABEL_24:
  }

- (void)_handleCaptionsDisplayedNotification:(id)a3
{
  id v11 = a3;
  uint64_t v4 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v4 & 1) == 0)
  {
    uint64_t v4 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v4 & 1) == 0) {
      uint64_t v4 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  26258LL,  "-[VOTElementManager _handleCaptionsDisplayedNotification:]",  @"must be on element manager or system event thread");
    }
  }

  if ((AXDeviceIsAudioAccessory(v4, v5) & 1) == 0 && CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime >= 2.0)
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary, v6);
    if ((objc_opt_isKindOfClass(v11, v7) & 1) != 0)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:kAXCaptionsDisplayedTextRuns]);
      uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSArray, v9);
      if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0) {
        -[VOTElementManager _captionsDisplayedWithTextRuns:](self, "_captionsDisplayedWithTextRuns:", v8);
      }
    }
  }
}

- (void)_handleDidReceiveVisionEngineResult:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v5 & 1) == 0)
  {
    uint64_t v5 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v5 & 1) == 0) {
      uint64_t v5 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  26274LL,  "-[VOTElementManager _handleDidReceiveVisionEngineResult:]",  @"must be on element manager or system event thread");
    }
  }

  if ((AXDeviceIsAudioAccessory(v5, v6) & 1) == 0 && CFAbsoluteTimeGetCurrent() - self->_lastEventOccurredTime >= 2.0)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSData, v7);
    if ((objc_opt_isKindOfClass(v4, v8) & 1) != 0)
    {
      uint64_t v10 = objc_opt_class(&OBJC_CLASS___AXMVisionResult, v9);
      uint64_t v11 = AXMSecureCodingClasses();
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v28 = 0LL;
      double v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver axmSecurelyUnarchiveData:withExpectedClass:otherAllowedClasses:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "axmSecurelyUnarchiveData:withExpectedClass:otherAllowedClasses:error:",  v4,  v10,  v12,  &v28));
      uint64_t v14 = (NSMutableArray *)v28;

      uint64_t v16 = objc_opt_class(&OBJC_CLASS___AXMVisionResult, v15);
      if ((objc_opt_isKindOfClass(v13, v16) & 1) == 0 || v14)
      {
        _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  26291LL,  "-[VOTElementManager _handleDidReceiveVisionEngineResult:]",  @"visionEngineResult must be type AXMVisionResult. was actually %@. error:%@ ");
      }

      else
      {
        uint64_t v14 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 features]);
        id v18 = [v17 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v18)
        {
          id v19 = v18;
          uint64_t v20 = *(void *)v25;
          do
          {
            for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v25 != v20) {
                objc_enumerationMutation(v17);
              }
              __int128 v22 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
              if ([v22 featureType] == (id)12)
              {
                __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 value]);
                -[NSMutableArray addObject:](v14, "addObject:", v23);
              }
            }

            id v19 = [v17 countByEnumeratingWithState:&v24 objects:v29 count:16];
          }

          while (v19);
        }

        -[VOTElementManager _captionsDisplayedWithTextRuns:](self, "_captionsDisplayedWithTextRuns:", v14);
      }
    }

    else
    {
      _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  26297LL,  "-[VOTElementManager _handleDidReceiveVisionEngineResult:]",  @"notificationData must be NSData");
    }
  }
}

- (void)_handleScreenOn
{
}

- (void)_handleScreenOff
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ScreenDidTurnOff](&OBJC_CLASS___VOSOutputEvent, "ScreenDidTurnOff"));
  [v2 sendEvent:v3];

  [(id)VOTSharedWorkspace setScreenOn:0 silently:0];
}

- (void)_handleScreenOnSilently
{
}

- (void)_handleScreenOffSilently
{
}

- (void)_handleStopSpeaking
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v2 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 toggleAudioSessionActive:0];
}

- (void)_handleStopSpeakingAndClearQueue
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v2 clearQueue];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];
}

- (void)_handleStopSpeakingAndClearAllQueues
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v2 clearAllQueues];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];
}

- (void)_handleTemporaryScreenCurtainDisablement
{
  uint64_t v3 = VOTLogElement(self);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Screen curtain turned off for temporary disablement",  v7,  2u);
  }

  if ([(id)VOTSharedWorkspace screenCurtainEnabled])
  {
    if (([(id)VOTSharedWorkspace screenCurtainSuspended] & 1) == 0)
    {
      -[VOTElementManager setScreenCurtainIsTemporarilyDisabled:](self, "setScreenCurtainIsTemporarilyDisabled:", 1LL);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
      [v5 setScreenCurtainSuspended:1];

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v6 clearCursorFrame];
    }
  }

- (void)_handleRequestExclusiveAudioHardware
{
  int64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v2 stopSpeakingAtBoundary:0 allRequests:1 sessionDeactivationDelay:0];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 toggleAudioSessionActive:0];

  _[(id)VOTSharedWorkspace setOutputDisabled:1];
}

- (void)_handleReleaseExclusiveAudioHardware
{
}

- (void)_handleUnmuteEligibleEventOccured
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  [v2 unmuteEligibleEventOccured];
}

- (id)continuousPathSuggestion
{
  return self->_continuousPathSuggestion;
}

- (void)_handleAutoCorrectionDisplayNotification:(id)a3
{
  id v5 = a3;
  autofillCurrentElement = self->_autofillCurrentElement;
  self->_autofillCurrentElement = 0LL;

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElement application](self->_currentElement, "application"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 activeKeyboard]);
  unsigned int v9 = [v8 isKeyboardContinuousPathTracking];

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___AXAttributedString, v10);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(v5, v11);
  if ((isKindOfClass & 1) != 0)
  {
    uint64_t isKindOfClass = (uint64_t)[v5 hasAttribute:kAXAutoCorrectionForContinuousPathKey];
    if ((_DWORD)isKindOfClass) {
      objc_storeStrong((id *)&self->_continuousPathSuggestion, a3);
    }
  }

  uint64_t v13 = VOTLogCommon(isKindOfClass);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    continuousPathSuggestion = self->_continuousPathSuggestion;
    int v18 = 138412802;
    id v19 = v5;
    __int16 v20 = 2112;
    __int128 v21 = continuousPathSuggestion;
    __int16 v22 = 1024;
    unsigned int v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Auto correct displayed: %@, continuous path: %@[%d]",  (uint8_t *)&v18,  0x1Cu);
  }

  if ((v9 & 1) != 0)
  {
    if (-[SCRCTargetSelectorTimer isPending](self->_continuousPathIdleTimer, "isPending"))
    {
      -[SCRCTargetSelectorTimer cancel](self->_continuousPathIdleTimer, "cancel");
      -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_continuousPathIdleTimer, "dispatchAfterDelay:", 0.0);
    }
  }

  else
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent AutofillDidAppear](&OBJC_CLASS___VOSOutputEvent, "AutofillDidAppear"));
    [v16 sendEvent:v17];
  }
}

- (void)_handleKeyboardChangedNotification
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  [v2 loadKeyboardMap];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v3 handleKeyboardChanged];

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v4 refreshBrailleLine];
}

- (void)_handleAutoCorrectionMadeNotification:(id)a3
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
    unsigned __int8 v6 = [v5 ignoreLogging];

    if ((v6 & 1) == 0)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
      uint64_t v8 = AXLoggerForFacility(v7);
      unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);

      os_log_type_t v10 = AXOSLogLevelFromAXLogLevel(3LL);
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = AXColorizeFormatLog(3LL, @"HANDLE AUTO CORRECT: %{private}@");
        BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        uint64_t v13 = _AXStringForArgs(v12);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v9, v10))
        {
          *(_DWORD *)__int128 buf = 138543362;
          __int16 v20 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}@", buf, 0xCu);
        }
      }
    }

    id v15 = sub_10004A988(off_1001AC148, @"autocorrection.text", 0LL);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v16, v4));

    int v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    [v18 speakSimpleString:v17];
  }

  -[VOTElementManager _updateFirstResponderTypingBuffer](self, "_updateFirstResponderTypingBuffer");
}

- (void)_handleScrollByPageNotification:(id)a3
{
  id v5 = a3;
  if (!v5 || (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v4), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
  {
    unsigned int v7 = [v5 isEqualToString:kAXPageScrollFailed];
    char v8 = v7;
    if (v7)
    {

      id v5 = 0LL;
    }

    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    if ([v9 isReadingContent])
    {
      unsigned int v10 = 1;
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      unsigned int v10 = [v11 includeDuringContentReading];
    }

    unsigned int v12 = [(id)VOTSharedWorkspace tapAndHoldMode];
    else {
      unsigned int v13 = 0;
    }
    unsigned int v109 = [v5 isEqualToString:kAXScrollWithContentPullDown];
    if (v109)
    {
      id v14 = sub_10004A988(off_1001AC148, @"scroll.content.pulldown", 0LL);
      id v15 = v5;
      id v5 = (id)objc_claimAutoreleasedReturnValue(v14);
LABEL_26:

      goto LABEL_27;
    }

    if ((v8 & 1) != 0
      || (v10 & 1) == 0
      && (!v5
       || -[NSString isEqualToString:](self->_lastScrollStatus, "isEqualToString:", v5) && [v5 length]))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
      if ([v16 mapFeatureType]) {
        unsigned int v12 = 1;
      }

      if (((v12 | v13) & 1) == 0)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
        uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
LABEL_25:
        int v18 = (void *)v17;
        [v15 sendEvent:v17];

        goto LABEL_26;
      }
    }

    else if ((v13 & 1) == 0)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidScrollByPage](&OBJC_CLASS___VOSOutputEvent, "DidScrollByPage"));
      goto LABEL_25;
    }

- (void)_handleSystemControlActivation:(id)a3
{
  id v11 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v11 command]);
  unsigned int v5 = [v4 isEqualToString:kVOTEventCommandSystemShowNotificationCenter];

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance"));
    [v6 toggleNotificationCenter];
LABEL_5:

    goto LABEL_6;
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v11 command]);
  unsigned int v8 = [v7 isEqualToString:kVOTEventCommandSystemShowControlCenter];

  if (v8)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance"));
    [v6 toggleControlCenter];
    goto LABEL_5;
  }

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v11 command]);
  unsigned int v10 = [v9 isEqualToString:kVOTEventCommandSystemControlTwoTop];

  if (v10) {
    -[VOTElementManager _handleSpeakScreen:](self, "_handleSpeakScreen:", v11);
  }
LABEL_6:
}

- (void)_handleSystemCommandNotificationCenter:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 toggleNotificationCenter];
}

- (void)_handleSystemCommandControlCenter:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 toggleControlCenter];
}

- (void)_handleSystemCommandToggleDock:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 toggleDock];
}

- (void)_handleSystemCommandActivateLockButton:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 activateLockButton];
}

- (void)_handleSystemCommandSpotlight:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 toggleSpotlight];
}

- (void)_handleSystemCommandActivateAccessibilityShortcut:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 activateTripleClick];
}

- (void)_handleSystemCommandToggleReachability:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 toggleReachability];
}

- (void)_handleSystemCommandTakeScreenshot:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXPISystemActionHelper sharedInstance](&OBJC_CLASS___AXPISystemActionHelper, "sharedInstance", a3));
  [v3 takeScreenshot];
}

- (void)_handleSystemCommandSwitchToPreviousApp:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection",  a3));
  [v3 sendProgrammaticAppSwitch:0];
}

- (void)_handleSystemCommandSwitchToNextApp:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[VOTSpringBoardConnection defaultConnection]( &OBJC_CLASS___VOTSpringBoardConnection,  "defaultConnection",  a3));
  [v3 sendProgrammaticAppSwitch:1];
}

- (void)_handleSendCancelEvent:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXElement systemWideElement](&OBJC_CLASS___AXElement, "systemWideElement", a3));
  [v3 performAction:5007];

  id v4 = sub_10000BBB0(@"Cancel event sent", 1, 0LL);
}

- (BOOL)allowsSystemControlEventForPosition:(int)a3
{
  return 0;
}

- (BOOL)_shouldAllowSpeakThisGesture
{
  return 0;
}

- (void)_handleRotateOrientation:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a3 command]);
  id v4 = [v3 isEqualToString:kVOTEventCommandRotateOrientationRight];

  _[(id)VOTSharedWorkspace rotateDeviceOrientation:v4];
}

- (void)_handleVolumeChange:(float)a3
{
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 voiceOverEffectiveSpeakingVolume];
  double v7 = v6;

  double v10 = a3 + v7;
  int v11 = (int)(v10 * 100.0);
  int v12 = (int)(a3 * 100.0);
  int v13 = v11 % v12;
  if (v11 % v12)
  {
    if (v12 >= 0) {
      int v14 = (int)(a3 * 100.0);
    }
    else {
      int v14 = v12 + 1;
    }
    if (v12 < 0) {
      int v12 = -v12;
    }
    if (v13 <= v14 >> 1) {
      int v12 = 0;
    }
    int v11 = v11 - v13 + v12;
  }

  double v15 = fmax((double)v11 / 100.0, 0.00999999978);
  if (v15 <= 1.0) {
    double v16 = v15;
  }
  else {
    double v16 = 1.0;
  }
  uint64_t v17 = VOTLogAudio(v8, v9);
  int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v10));
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v16));
    int v28 = 138412546;
    id v29 = v19;
    __int16 v30 = 2112;
    id v31 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Set VO Rotor volume from %@ to %@",  (uint8_t *)&v28,  0x16u);
  }

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  float v22 = v16;
  *(float *)&double v23 = v22;
  [v21 setVoiceOverEffectiveSpeakingVolume:v23];

  id v24 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  uint64_t v25 = AXFormatFloatWithPercentage(0LL, v22);
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  id v27 = [v24 addString:v26];

  -[VOTElementManager _formatRequestForBrailleAlertConditional:](self, "_formatRequestForBrailleAlertConditional:", v24);
  -[VOTElementManager sendRequest:](self, "sendRequest:", v24);
}

- (void)_formatRequestForBrailleAlertConditional:(id)a3
{
}

- (void)_handleIncreaseVolume:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForIndex:110]);
  id v6 = v4;
  if (v4) {
    [v4 floatValue];
  }
  else {
    LODWORD(v5) = 1028443341;
  }
  -[VOTElementManager _handleVolumeChange:](self, "_handleVolumeChange:", v5);
}

- (void)_handleDecreaseVolume:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForIndex:110]);
  id v6 = v4;
  if (v4)
  {
    [v4 floatValue];
    *(float *)&double v5 = -*(float *)&v5;
  }

  else
  {
    LODWORD(v5) = -1119040307;
  }

  -[VOTElementManager _handleVolumeChange:](self, "_handleVolumeChange:", v5);
}

- (void)_handleStateReset
{
  if (self->_flags.itemChooserVisible) {
    -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
  }
  -[NSMutableDictionary removeAllObjects](self->_flowFromElements, "removeAllObjects");
}

- (void)handleStateReset
{
}

- (BOOL)_shouldSuppressSpeechForPlayPause
{
  double lastScreenWakeViaPlayPause = self->_lastScreenWakeViaPlayPause;
  return lastScreenWakeViaPlayPause > self->_lastEventOccurredTime
      && vabdd_f64(self->_lastExternalUnlockTime, lastScreenWakeViaPlayPause) < 0.25;
}

- (void)_handlePlayPauseButtonPress
{
  self->_flags.shouldSpeakNextLayoutChange = 0;
  if (!-[VOTElementManager _shouldSuppressSpeechForPlayPause](self, "_shouldSuppressSpeechForPlayPause")) {
    self->_double lastScreenWakeViaPlayPause = CFAbsoluteTimeGetCurrent();
  }
}

- (void)_handleHomeButtonPress
{
  self->_lastItemSelectionFromTouch = -3061152000.0;
  -[VOTElementManager setLastHomeButtonPressTime:](self, "setLastHomeButtonPressTime:", CFAbsoluteTimeGetCurrent());
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent ScreenDidChange](&OBJC_CLASS___VOSOutputEvent, "ScreenDidChange"));
  [v3 sendEvent:v4];

  NSUInteger v5 = -[NSArray count](self->_currentApplications, "count");
  if (v5 == 1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"));
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement springBoardApplication](&OBJC_CLASS___VOTElement, "springBoardApplication"));
  unsigned __int8 v7 = [v6 isVoiceControlRunning];

  if (v5 == 1) {
  if ((v7 & 1) == 0)
  }
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
    unsigned int v9 = [v8 currentCallState];

    if (!v9)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      id v10 = sub_10004AE68(off_1001AC148, @"home.button.pressed", 0LL, v3);
      int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = sub_10000BBB0(v11, 1, v3);

LABEL_8:
    }
  }

  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
  double v23 = v13;
  int v14 = (NSArray *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v23, 1LL));
  currentApplications = self->_currentApplications;
  self->_currentApplications = v14;

  double v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray firstObject](self->_currentApplications, "firstObject"));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 firstElementInApplication]);

  int v18 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _cachedLaunchIcon:](self, "_cachedLaunchIcon:", v17));
  id v19 = v18;
  if (v18)
  {
    id v20 = v18;

    uint64_t v17 = v20;
  }

  -[VOTElementManager _echoDifferentElement:forEvent:](self, "_echoDifferentElement:forEvent:", v17, 0LL);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100091B2C;
  v22[3] = &unk_100176D38;
  v22[4] = self;
  AXPerformBlockOnMainThreadAfterDelay(v22, v21, 0.5);
}

- (void)updateRunningApplications
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v3 = (NSArray *)objc_claimAutoreleasedReturnValue([v5 focusedApplications]);
  currentApplications = self->_currentApplications;
  self->_currentApplications = v3;
}

- (void)_handleSiriStartedTalking:(id)a3
{
}

- (void)_handleSiriFinishedTalking:(id)a3
{
  double Current = CFAbsoluteTimeGetCurrent();
  -[VOTElementManager lastBlockedRequestBySiriOrDictationTime](self, "lastBlockedRequestBySiriOrDictationTime");
  if (Current - v5 < 0.1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager lastRequestBlockedBySiriOrDictation](self, "lastRequestBlockedBySiriOrDictation"));
    [v6 send];
  }

  -[VOTElementManager setLastRequestBlockedBySiriOrDictation:](self, "setLastRequestBlockedBySiriOrDictation:", 0LL);
}

- (void)_handleSiriStartedListening:(id)a3
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 stopSpeakingAtBoundary:0];
}

- (void)_handleSiriFinishedListening:(id)a3
{
}

- (void)_handleToggleVoiceOverModifierKeyLock:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager", a3));
  [v3 toggleVoiceOverModifierKeyLock];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  unsigned int v5 = [v4 modifierKeyLockEnabled];

  if (v5) {
    id v6 = @"modifier.keys.locked";
  }
  else {
    id v6 = @"modifier.keys.unlocked";
  }
  id v7 = sub_10004A988(off_1001AC148, v6, 0LL);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v9 = sub_10000BBB0(v10, 0, v8);
}

- (void)_handleToggleSingleLetterQuickNav:(id)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "allowSingleLetterSearching", a3);
  [(id)VOTSharedWorkspace setAllowSingleLetterSearching:v3 ^ 1];
  id v25 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  objc_msgSend(v4, "setSingleLetterQuickNavOn:", objc_msgSend((id)VOTSharedWorkspace, "allowSingleLetterSearching"));

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  unsigned int v6 = [v5 isQuickNavOn];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  if (v6) {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnableQuickNav](&OBJC_CLASS___VOSOutputEvent, "DidEnableQuickNav"));
  }
  else {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidDisableQuickNav](&OBJC_CLASS___VOSOutputEvent, "DidDisableQuickNav"));
  }
  id v9 = (void *)v8;
  [v7 sendEvent:v8];

  if (v3) {
    id v10 = @"single.letter.quick.nav.off";
  }
  else {
    id v10 = @"single.letter.quick.nav.on";
  }
  id v11 = sub_10004A988(off_1001AC148, v10, 0LL);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = sub_10004A988(off_1001AC148, v10, 0LL);
  int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  double v15 = off_1001AC148;
  double v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  else {
    uint64_t v17 = @"quick.nav.off";
  }
  id v18 = sub_10004A988(v15, v17, 0LL);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@, %@", v14, v19));

  id v21 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v22 = [v21 addString:v12 brailleString:v20 withLanguage:v25];
  [v21 setGeneratesBraille:1];
  double v23 = (void *)objc_claimAutoreleasedReturnValue([v21 outputActions]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 lastObject]);
  [v24 setObject:&__kCFBooleanTrue forVariant:76];

  [v21 send];
}

- (void)_handleToggleQuickNav:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager", a3));
  uint64_t v5 = [v4 isQuickNavOn] ^ 1;

  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager"));
  [v6 updateQuickNavState:v5];

  -[VOTElementManager _handleAnnounceQuickNav:](self, "_handleAnnounceQuickNav:", 0LL);
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
  [v8 setPreference:v7 forKey:@"VOTQuickNavEnabled"];
}

- (void)_handleAnnounceQuickNav:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTKeyboardManager keyboardManager](&OBJC_CLASS___VOTKeyboardManager, "keyboardManager", a3));
  id v5 = [v4 isQuickNavOn];

  -[VOTElementManager _handleQuickNavFeedback:](self, "_handleQuickNavFeedback:", v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[VOTConfiguration rootConfiguration](&OBJC_CLASS___VOTConfiguration, "rootConfiguration"));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
  [v7 setPreference:v6 forKey:@"VOTQuickNavEnabled"];
}

- (void)_handleQuickNavFeedback:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  unsigned __int8 v5 = [v4 voiceOverQuickNavAnnouncementFeedback];

  id v24 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_10:
    if (v3) {
      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnableQuickNav](&OBJC_CLASS___VOSOutputEvent, "DidEnableQuickNav"));
    }
    else {
      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidDisableQuickNav](&OBJC_CLASS___VOSOutputEvent, "DidDisableQuickNav"));
    }
    double v15 = (void *)v14;
    double v16 = (void *)objc_claimAutoreleasedReturnValue([v24 lastAction]);
    uint64_t v17 = v16;
    if (v16)
    {
      [v16 addOutputEvent:v15];
    }

    else
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      [v18 sendEvent:v15];
    }

    if ((v5 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }

  unsigned int v6 = @"quick.nav.off";
  if (v3) {
    unsigned int v6 = @"quick.nav.on";
  }
  id v7 = (void *)VOTSharedWorkspace;
  id v8 = v6;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 selectedLanguage]);
  id v10 = sub_10004AE68(off_1001AC148, v8, 0LL, v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  id v12 = [v24 addString:v11 withLanguage:v9];
  if ((v5 & 8) != 0)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v24 lastAction]);
    [v13 setObject:&off_1001873A0 forVariant:32];
  }

  if ((v5 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v5 & 0x10) == 0) {
    goto LABEL_23;
  }
LABEL_17:
  if ((v5 & 2) == 0)
  {
    if (v3) {
      id v19 = @"quick.nav.on";
    }
    else {
      id v19 = @"quick.nav.off";
    }
    id v20 = sub_10004A988(off_1001AC148, v19, 0LL);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = [v24 addString:v21];
    double v23 = (void *)objc_claimAutoreleasedReturnValue([v24 lastAction]);
    [v23 setObject:&__kCFBooleanTrue forVariant:76];
  }

  [v24 setGeneratesBraille:1];
LABEL_23:
  [v24 setCannotBeInterrupted:1];
  [v24 send];
}

- (void)fetchElementsFrom:(id)a3 inDirection:(int64_t)a4 count:(unint64_t)a5 scroll:(BOOL)a6 block:(id)a7
{
  BOOL v7 = a6;
  elementManagerThread = self->_elementManagerThread;
  id v13 = a7;
  id v14 = a3;
  id v18 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  double v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a5));
  double v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v7));
  id v17 = objc_retainBlock(v13);

  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_fetchElementsFrom:inDirection:count:scroll:block:",  self,  5LL,  v14,  v18,  v15,  v16,  v17);
}

- (void)_fetchElementsFrom:(id)a3 inDirection:(id)a4 count:(id)a5 scroll:(id)a6 block:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v20 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _getNewElementExplorer](self, "_getNewElementExplorer"));
  id v17 = [v15 integerValue];

  id v18 = [v14 unsignedIntegerValue];
  id v19 = [v13 BOOLValue];

  [v20 fetchElementsFrom:v16 inDirection:v17 count:v18 scroll:v19 block:v12];
}

- (id)_getNewElementExplorer
{
  BOOL v3 = objc_alloc(&OBJC_CLASS____VOTElementExplorer);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _copyMatchBlockAnyElement](self, "_copyMatchBlockAnyElement"));
  unsigned __int8 v5 = -[_VOTElementExplorer initWithElementManager:MatchBlock:](v3, "initWithElementManager:MatchBlock:", self, v4);

  -[NSLock lock](self->_explorersLock, "lock");
  -[NSMutableArray addObject:](self->_explorers, "addObject:", v5);
  -[NSLock unlock](self->_explorersLock, "unlock");
  return v5;
}

- (void)removeElementExplorer:(id)a3
{
  explorersLock = self->_explorersLock;
  id v5 = a3;
  -[NSLock lock](explorersLock, "lock");
  -[NSMutableArray removeObject:](self->_explorers, "removeObject:", v5);

  -[NSLock unlock](self->_explorersLock, "unlock");
}

- (void)_sendBSIStateChangedNotification:(BOOL)a3 usage:(int64_t)a4
{
  v16[0] = @"VOTBSIStateChangedNotificationActive";
  BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:"));
  v17[0] = v7;
  v16[1] = @"VOTBSIStateChangedNotificationUsage";
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  v17[1] = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000926E0;
  v12[3] = &unk_1001790C8;
  v12[4] = self;
  id v13 = v9;
  BOOL v15 = a3;
  int64_t v14 = a4;
  id v10 = v9;
  AXPerformBlockOnMainThreadAfterDelay(v12, v11, 0.0);
}

- (void)_sendBSIActiveStateOffNotificationAndNotify
{
}

- (void)deactivateGesturedTextInputIfNeeded:(BOOL)a3
{
  elementManagerThread = self->_elementManagerThread;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  -[SCRCThread performSelector:onTarget:count:objects:]( elementManagerThread,  "performSelector:onTarget:count:objects:",  "_deactivateGesturedTextInputIfNeeded:",  self,  1LL,  v5);
}

- (void)_deactivateGesturedTextInputIfNeeded:(id)a3
{
  id v4 = a3;
  if (([(id)VOTSharedWorkspace brailleInputWantsToStayActive] & 1) == 0
    && !-[VOTElementManager forceRotorOffGesturedTextInputIfNeeded:]( self,  "forceRotorOffGesturedTextInputIfNeeded:",  [v4 BOOLValue])
    && [(id)VOTSharedWorkspace brailleInputActive])
  {
    -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
  }
}

- (void)_handleActivateBrailleScreenInput:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned int v5 = [v4 voiceOverTouchBrailleGesturesActivationGestureEnabled];

  if (v5 && ([(id)VOTSharedWorkspace brailleInputActive] & 1) == 0)
  {
    if (self->_flags.shouldUpdateRotorForElement) {
      -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
    }
    int64_t v6 = -[VOTRotor indexOfRotorItem:](self->_elementRotor, "indexOfRotorItem:", 55LL);
    if (v6 == -1)
    {
      -[VOTElementManager _sendBSIStateChangedNotification:usage:]( self,  "_sendBSIStateChangedNotification:usage:",  1LL,  0LL);
    }

    else
    {
      uint64_t v8 = VOTLogBrailleGestures(v6, v7);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Activate BSI: BSI in the rotor. Setting the rotor to BSI.",  v10,  2u);
      }

      -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  55LL,  1LL,  1LL);
    }
  }

- (void)_handleDeactivateBrailleScreenInput:(id)a3
{
  if (objc_msgSend((id)VOTSharedWorkspace, "brailleInputActive", a3))
  {
    if (self->_flags.shouldUpdateRotorForElement) {
      -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
    }
    if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") != (id)55)
    {
      -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
      return;
    }

    unsigned __int8 v4 = [(id)VOTSharedWorkspace brailleInputShouldBeDeactivatedByEscape];
    uint64_t v5 = -[VOTRotor previousRotorType](self->_elementRotor, "previousRotorType");
    int64_t v6 = sub_1000D3070(v5);
    if ((v6 & 1) != 0 || (int64_t v6 = -[VOTRotor indexOfRotorItem:](self->_elementRotor, "indexOfRotorItem:", v5), v6 == -1))
    {
      uint64_t v11 = VOTLogBrailleGestures(v6, v7);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Deactivate BSI: force rotor off gestured text input if needed.",  (uint8_t *)&v13,  2u);
      }

      -[VOTElementManager forceRotorOffGesturedTextInputIfNeeded:](self, "forceRotorOffGesturedTextInputIfNeeded:", 0LL);
      if ((v4 & 1) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v8 = VOTLogBrailleGestures(v6, v7);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
        int v13 = 138412290;
        int64_t v14 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Deactivate BSI: setting rotor to the previous one (%@).",  (uint8_t *)&v13,  0xCu);
      }

      -[VOTElementManager _setElementRotorToType:saveToPreferences:userInitiated:]( self,  "_setElementRotorToType:saveToPreferences:userInitiated:",  v5,  1LL,  1LL);
      if ((v4 & 1) != 0) {
        goto LABEL_16;
      }
    }

    -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
LABEL_16:
    -[VOTElementManager _outputCurrentElementRotor](self, "_outputCurrentElementRotor");
  }

- (void)_handleReconnectBrailleDisplays:(id)a3
{
  uint64_t v3 = VOTLogBraille(self, a2, a3);
  unsigned __int8 v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int64_t v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Posting kAXSVoiceOverTouchBrailleReconnectionTriggeredNotification",  v14,  2u);
  }

  DarwinNotifydouble Center = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification( DarwinNotifyCenter,  kAXSVoiceOverTouchBrailleReconnectionTriggeredNotification,  0LL,  0LL,  1u);
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[VOSOutputEvent BrailleDisplayReconnectionTriggered]( &OBJC_CLASS___VOSOutputEvent,  "BrailleDisplayReconnectionTriggered"));
  [v6 sendEvent:v7];

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
  id v9 = off_1001AC148;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v11 = sub_10004AE68(v9, @"braille.display.reconnection.triggered", 0LL, v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = -[VOTOutputRequest addString:](v8, "addString:", v12);

  -[VOTOutputRequest send](v8, "send");
}

- (void)_handleTogglePerkinsKeyboardInput:(id)a3
{
  unsigned int v3 = objc_msgSend((id)VOTSharedWorkspace, "perkinsKeyboardInputEnabled", a3);
  [(id)VOTSharedWorkspace setPerkinsKeyboardInputEnabled:v3 ^ 1];
  if (v3) {
    unsigned __int8 v4 = @"perkins.keyboard.input.off";
  }
  else {
    unsigned __int8 v4 = @"perkins.keyboard.input.on";
  }
  id v5 = sub_10004A988(off_1001AC148, v4, 0LL);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  int64_t v6 = objc_opt_new(&OBJC_CLASS___VOTOutputRequest);
  id v7 = -[VOTOutputRequest addString:](v6, "addString:", v10);
  -[VOTOutputRequest setGeneratesBraille:](v6, "setGeneratesBraille:", 1LL);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](v6, "outputActions"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 lastObject]);
  [v9 setObject:&__kCFBooleanTrue forVariant:76];

  -[VOTOutputRequest send](v6, "send");
}

- (void)_handleBSIPreviousRotor:(id)a3
{
  id v4 = a3;
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)55) {
    -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
  }
  -[VOTElementManager _handleSearchRotorLeft:](self, "_handleSearchRotorLeft:", v4);
}

- (void)_handleBSINextRotor:(id)a3
{
  id v4 = a3;
  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)55) {
    -[VOTElementManager _sendBSIActiveStateOffNotificationAndNotify]( self,  "_sendBSIActiveStateOffNotificationAndNotify");
  }
  -[VOTElementManager _handleSearchRotorRight:](self, "_handleSearchRotorRight:", v4);
}

- (void)_handleBrailleEvent:(id)a3
{
  id v3 = a3;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v4 handleEvent:v3];
}

- (void)_handleBrailleRefreshEvent:(id)a3
{
  id v4 = a3;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForIndex:106]);
  id v7 = [v6 BOOLValue];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForIndex:109]);

  [v9 setBrailleElement:v5 resetBrailleCursor:v7 rotorSelection:v8];
}

- (void)_handleBrailleWordWrapToggleEvent:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  unsigned int v5 = [v4 voiceOverBrailleWordWrapEnabled];

  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v6 setVoiceOverBrailleWordWrapEnabled:v5 ^ 1];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v12 = v7;
  if (v5) {
    uint64_t v8 = @"braille.word.wrap.off";
  }
  else {
    uint64_t v8 = @"braille.word.wrap.on";
  }
  id v9 = sub_10004AE68(off_1001AC148, v8, 0LL, v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_10000BBB0(v10, 0, v12);

  -[VOTElementManager _handleBrailleRefreshEvent:](self, "_handleBrailleRefreshEvent:", 0LL);
}

- (void)_handleBrailleEnableAutoAdvance:(id)a3
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager", a3));
  unsigned int v4 = [v3 autoAdvanceEnabled];

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTBrailleManager manager](&OBJC_CLASS___VOTBrailleManager, "manager"));
  [v5 setAutoAdvanceEnabled:v4 ^ 1];

  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
  id v11 = v6;
  if (v4) {
    id v7 = @"braille.auto.advance.off";
  }
  else {
    id v7 = @"braille.auto.advance.on";
  }
  id v8 = sub_10004AE68(off_1001AC148, v7, 0LL, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = sub_10000BBB0(v9, 0, v11);
}

- (void)_handleBrailleDecreaseAutoAdvanceSpeed:(id)a3
{
  double v5 = v4;
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v6 voiceOverBrailleAutoAdvanceDuration];
  double v8 = v5 * v7;

  if (v8 >= kAXSVoiceOverBrailleAutoAdvanceDurationMax) {
    double v8 = kAXSVoiceOverBrailleAutoAdvanceDurationMax;
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v9 voiceOverBrailleAutoAdvanceDuration];
  double v11 = v10;

  if (vabdd_f64(v8, v11) >= 0.0001)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v13 setVoiceOverBrailleAutoAdvanceDuration:v8];

    -[VOTElementManager _speakBrailleAutoAdvanceSpeed](self, "_speakBrailleAutoAdvanceSpeed");
  }

  else
  {
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v14 sendEvent:v12];
  }

- (void)_handleBrailleIncreaseAutoAdvanceSpeed:(id)a3
{
  double v5 = v4;
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v6 voiceOverBrailleAutoAdvanceDuration];
  double v8 = v7 / v5;

  if (v8 < kAXSVoiceOverBrailleAutoAdvanceDurationMin) {
    double v8 = kAXSVoiceOverBrailleAutoAdvanceDurationMin;
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v9 voiceOverBrailleAutoAdvanceDuration];
  double v11 = v10;

  if (vabdd_f64(v8, v11) >= 0.0001)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    [v13 setVoiceOverBrailleAutoAdvanceDuration:v8];

    -[VOTElementManager _speakBrailleAutoAdvanceSpeed](self, "_speakBrailleAutoAdvanceSpeed");
  }

  else
  {
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
    [v14 sendEvent:v12];
  }

- (double)_brailleAutoAdvanceStepFactor
{
  float v2 = kAXSVoiceOverBrailleAutoAdvanceDurationMax / kAXSVoiceOverBrailleAutoAdvanceDurationMin;
  return powf(v2, 0.05);
}

- (id)_brailleAutoAdvanceSpeedString
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v3 voiceOverBrailleAutoAdvanceDuration];
  double v5 = v4;

  -[VOTElementManager _brailleAutoAdvanceStepFactor](self, "_brailleAutoAdvanceStepFactor");
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v6 voiceOverBrailleAutoAdvanceDuration];

  float v7 = round(v5 * 10.0) / 10.0;
  return (id)AXTimeStringForType(1LL, v7);
}

- (void)_speakBrailleAutoAdvanceSpeed
{
  id v5 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _brailleAutoAdvanceSpeedString](self, "_brailleAutoAdvanceSpeedString"));
  id v4 = [v5 addString:v3];

  -[VOTElementManager _formatRequestForBrailleAlertConditional:](self, "_formatRequestForBrailleAlertConditional:", v5);
  -[VOTElementManager sendRequest:](self, "sendRequest:", v5);
}

- (void)_handleKeyboardCommandEvent:(id)a3
{
  id v4 = a3;
  unsigned int v74 = v4;
  if (!self->_keyboardKeyCommands)
  {
    id v58 = objc_allocWithZone(&OBJC_CLASS___NSDictionary);
    double v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 79LL));
    double v65 = self;
    id v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v64, &stru_10017A920, 0LL));
    uint64_t v55 = kVOTEventCommandRightArrow;
    NSUInteger v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 80LL));
    id v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v63, &stru_10017A920, 0LL));
    uint64_t v54 = kVOTEventCommandLeftArrow;
    id v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 81LL));
    id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v62, &stru_10017A920, 0LL));
    uint64_t v51 = kVOTEventCommandDownArrow;
    CGFloat v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 82LL));
    unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v61, &stru_10017A920, 0LL));
    uint64_t v50 = kVOTEventCommandUpArrow;
    double v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 42LL));
    CGFloat v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUnichar:](&OBJC_CLASS___NSString, "stringWithUnichar:", 127LL));
    CGRect v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v60, v59, 0LL));
    uint64_t v46 = kVOTEventCommandDelete;
    CGFloat v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 40LL));
    double v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUnichar:](&OBJC_CLASS___NSString, "stringWithUnichar:", 10LL));
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v57, v56, 0LL));
    uint64_t v43 = kVOTEventCommandReturn;
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 43LL));
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUnichar:](&OBJC_CLASS___NSString, "stringWithUnichar:", 9LL));
    id v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v53, v52, 0LL));
    uint64_t v42 = kVOTEventCommandTab;
    float v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 43LL));
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUnichar:](&OBJC_CLASS___NSString, "stringWithUnichar:", 9LL));
    os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 8LL));
    int64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v49, v48, v47, 0LL));
    uint64_t v38 = kVOTEventCommandShiftTab;
    double v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 27LL));
    char v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
    id v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v45, @"x", v44, 0LL));
    uint64_t v35 = kVOTEventCommandCut;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 6LL));
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v41, @"c", v40, 0LL));
    uint64_t v31 = kVOTEventCommandCopy;
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 25LL));
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v37, @"v", v36, 0LL));
    uint64_t v28 = kVOTEventCommandPaste;
    unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 4LL));
    unsigned int v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v34, @"a", v33, 0LL));
    uint64_t v6 = kVOTEventCommandSelectAll;
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 29LL));
    float v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v29, @"z", v7, 0LL));
    uint64_t v9 = kVOTEventCommandUndo;
    double v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](&OBJC_CLASS___NSNumber, "numberWithUnsignedShort:", 29LL));
    double v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 9LL));
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v10, @"z", v11, 0LL));
    uint64_t v27 = v6;
    self = v65;
    id v13 = (NSDictionary *)objc_msgSend( v58,  "initWithObjectsAndKeys:",  v73,  v55,  v72,  v54,  v71,  v51,  v70,  v50,  v69,  v46,  v68,  v43,  v67,  v42,  v39,  v38,  v66,  v35,  v32,  v31,  v30,  v28,  v5,  v27,  v8,  v9,  v12,  kVOTEventCommandRedo,  0);
    keyboardKeyCommands = v65->_keyboardKeyCommands;
    v65->_keyboardKeyCommands = v13;

    id v4 = v74;
  }

  BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v4 command]);
  unsigned int v16 = [v15 isEqualToString:kVOTEventCommandPaste];

  if (v16)
  {
    id v17 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentResponder](self, "_currentResponder"));
    id v18 = v17;
    if ([v17 doesHaveTraits:kAXWebContentTrait])
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 textOperationsOperator]);
    }

    [v18 performTextOperation:kAXTextOperationActionPaste];
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidSelectAutofill](&OBJC_CLASS___VOSOutputEvent, "DidSelectAutofill"));
    [v19 sendEvent:v20];

    goto LABEL_12;
  }

  id v21 = self->_keyboardKeyCommands;
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v74 command]);
  id v17 = (id)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v21, "objectForKey:", v22));

  if (v17)
  {
    id v23 = [v17 objectAtIndex:1];
    if ((unint64_t)[v17 count] < 3)
    {
      id v25 = 0LL;
    }

    else
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 objectAtIndex:2]);
      id v25 = [v24 unsignedIntValue];
    }

    __int128 v26 = (void *)VOTSharedWorkspace;
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectAtIndex:0]);
    objc_msgSend( v26,  "postKeyboardEventWithCharacters:originalCharacters:modifiers:keyCode:",  v23,  v23,  v25,  objc_msgSend(v18, "unsignedShortValue"));
LABEL_12:
  }
}

- (BOOL)_processWatchSpecificOverrides:(id)a3
{
  unsigned int v4 = [a3 isEqualToString:kVOTEventCommandSelectAll];
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentResponder](self, "_currentResponder"));
    [v5 performTextOperation:kAXTextOperationActionSelectAll];
  }

  return v4;
}

- (BOOL)shouldAllowSpeaking
{
  return CFAbsoluteTimeGetCurrent() - self->_lastPressOnMediaSessionElement >= 3.5;
}

- (void)_handlePerformVolumeUpButtonPress:(id)a3
{
}

- (void)_handlePerformVolumeDownButtonPress:(id)a3
{
}

- (void)_handlePerformEjectButtonPress:(id)a3
{
}

- (void)_setLastSeenDeviceOrientation:(int64_t)a3
{
  self->_id lastSeenApplicationOrientation = a3;
}

- (void)_handleDescribeCameraScene:(id)a3
{
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace", a3));
  unsigned __int8 v5 = [v4 imageCaptionsEnabled];

  if ((v5 & 1) != 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace visionEngine]);
    id v12 = (VOTOutputRequest *)objc_claimAutoreleasedReturnValue([v6 preferredMediaAnalysisLocale]);

    float v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager cameraSceneDescriber](self, "cameraSceneDescriber"));
    [v7 setIncludeTextDetection:1];

    double v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager cameraSceneDescriber](self, "cameraSceneDescriber"));
    [v8 imageDescriptionForCurrentCameraScene:&stru_100179108 withPreferredLocale:v12];
  }

  else
  {
    id v12 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);
    id v9 = sub_10004CB24(@"NoCaptionModel");
    double v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = -[VOTOutputRequest addString:](v12, "addString:", v10);

    -[VOTOutputRequest setLanguage:](v12, "setLanguage:", 0LL);
    -[VOTOutputRequest setBrailleType:](v12, "setBrailleType:", 2LL);
    -[VOTOutputRequest setCannotBeInterrupted:](v12, "setCannotBeInterrupted:", 1LL);
    -[VOTOutputRequest send](v12, "send");
  }
}

- (id)focusedApplication:(id)a3
{
  id v4 = a3;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager currentApplications](self, "currentApplications"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 appTransition]);

  if (!v6) {
    goto LABEL_14;
  }
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v8)
  {

LABEL_14:
    double v10 = (void *)objc_claimAutoreleasedReturnValue([v5 lastObject]);
    goto LABEL_15;
  }

  id v9 = v8;
  id v19 = v5;
  double v10 = 0LL;
  uint64_t v11 = *(void *)v21;
  do
  {
    for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v21 != v11) {
        objc_enumerationMutation(v7);
      }
      id v13 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
      unsigned int v14 = [v13 pid];
      BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v4 appTransition]);
      unsigned int v16 = [v15 pid];

      if (v14 == v16)
      {
        id v17 = v13;

        double v10 = v17;
      }
    }

    id v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }

  while (v9);

  unsigned __int8 v5 = v19;
  if (!v10) {
    goto LABEL_14;
  }
LABEL_15:

  return v10;
}

- (BOOL)speakNonfocusableElementsAfterDelay
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28050LL,  "-[VOTElementManager speakNonfocusableElementsAfterDelay]",  @"must be on element manager or system event thread");
  }

  return self->_speakNonfocusableElementsAfterDelay;
}

- (void)setSpeakNonfocusableElementsAfterDelay:(BOOL)a3
{
  BOOL v3 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28056LL,  "-[VOTElementManager setSpeakNonfocusableElementsAfterDelay:]",  @"must be on element manager or system event thread");
  }

  self->_speakNonfocusableElementsAfterDeladouble y = v3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverSpeakNonfocusableElementsAfterDelay:v3];
}

- (BOOL)shouldSilenceAnnouncements
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28063LL,  "-[VOTElementManager shouldSilenceAnnouncements]",  @"must be on element manager or system event thread");
  }

  return self->_shouldSilenceAnnouncements;
}

- (void)setShouldSilenceAnnouncements:(BOOL)a3
{
  BOOL v3 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28069LL,  "-[VOTElementManager setShouldSilenceAnnouncements:]",  @"must be on element manager or system event thread");
  }

  self->_shouldSilenceAnnouncements = v3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverSilenceAnnouncements:v3];
}

- (BOOL)exploreFocusAffectsNativeFocus
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28076LL,  "-[VOTElementManager exploreFocusAffectsNativeFocus]",  @"must be on element manager or system event thread");
  }

  return self->_exploreFocusAffectsNativeFocus;
}

- (void)setExploreFocusAffectsNativeFocus:(BOOL)a3
{
  BOOL v3 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28082LL,  "-[VOTElementManager setExploreFocusAffectsNativeFocus:]",  @"must be on element manager or system event thread");
  }

  self->_exploreFocusAffectsNativeFocus = v3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  [v5 setVoiceOverExploreFocusAffectsNativeFocus:v3];
}

- (BOOL)_isDictationInProgressForCurrentApp
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28089LL,  "-[VOTElementManager _isDictationInProgressForCurrentApp]",  @"must be on element manager or system event thread");
  }

  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
  unsigned __int8 v4 = [v3 isDictationListening];

  return v4;
}

- (BOOL)handleTVMenuButtonClicked
{
  if (self->_flags.itemChooserVisible)
  {
    -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
    return 1;
  }

  if ([(id)VOTSharedWorkspace tvInteractionMode] == (id)2)
  {
    -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "__handleTVMenuButtonClicked",  self,  0LL,  0LL);
    return 1;
  }

  return 0;
}

- (BOOL)handleTVSelectButtonClicked
{
  BOOL v3 = (id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)48
    && self->_customActionIndex != 0x7FFFFFFFFFFFFFFFLL;
  id v4 = [(id)VOTSharedWorkspace tvInteractionMode];
  if (!v3 && v4 != (id)2 && !self->_flags.itemChooserVisible) {
    return 0;
  }
  -[SCRCThread performSelector:onTarget:count:objects:]( self->_elementManagerThread,  "performSelector:onTarget:count:objects:",  "__handleTVSelectButtonClicked",  self,  0LL,  0LL);
  return 1;
}

- (void)__handleTVMenuButtonClicked
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28132LL,  "-[VOTElementManager __handleTVMenuButtonClicked]",  @"must be on element manager or system event thread");
  }

  if ([(id)VOTSharedWorkspace tvInteractionMode] != (id)2) {
    goto LABEL_10;
  }
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (([v3 isContainedByPreferredNativeFocusElement] & 1) == 0
    && ![v3 allowsActivationWithoutBeingNativeFocused])
  {

    goto LABEL_10;
  }

  unsigned __int8 v4 = [v3 performEscape];

  if ((v4 & 1) == 0) {
LABEL_10:
  }
    -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", 6LL);
}

- (void)__handleTVSelectButtonClicked
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28152LL,  "-[VOTElementManager __handleTVSelectButtonClicked]",  @"must be on element manager or system event thread");
  }

  if ((id)-[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType") == (id)48)
  {
    -[VOTElementManager _handlePerformCustomAction:](self, "_handlePerformCustomAction:", 0LL);
    return;
  }

  if (self->_flags.itemChooserVisible)
  {
    -[VOTElementManager _closeItemChooser](self, "_closeItemChooser");
    return;
  }

  if (![(id)VOTSharedWorkspace tvInteractionMode]
    || [(id)VOTSharedWorkspace tvInteractionMode] == (id)1)
  {
    -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", 4LL);
    return;
  }

  if ([(id)VOTSharedWorkspace tvInteractionMode] != (id)2)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28217LL,  "-[VOTElementManager __handleTVSelectButtonClicked]",  @"Should not be handling a TV click in this case");
    return;
  }

  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  id v10 = v3;
  if (!v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSystemAppServer server](&OBJC_CLASS___AXSystemAppServer, "server"));
    unsigned int v6 = [v5 isScreenSaverVisible];

    if (v6) {
      -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", 6LL);
    }
    goto LABEL_27;
  }

  if (![v3 allowsActivationWithoutBeingNativeFocused])
  {
    if ([v10 isContainedByPreferredNativeFocusElement])
    {
      unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
      uint64_t v7 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidActivateElement](&OBJC_CLASS___VOSOutputEvent, "DidActivateElement"));
      goto LABEL_26;
    }

    unsigned int v8 = [v10 setNativeFocus];
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    if (v8)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidFocusOnElement](&OBJC_CLASS___VOSOutputEvent, "DidFocusOnElement"));
LABEL_26:
      id v9 = (void *)v7;
      [v4 sendEvent:v7];

      goto LABEL_27;
    }

- (BOOL)_sendTVRemoteCommandOverrideForAXCommand:(int64_t)a3
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28223LL,  "-[VOTElementManager _sendTVRemoteCommandOverrideForAXCommand:]",  @"must be on element manager or system event thread");
  }

  int64_t v5 = a3 - 8;
  -[VOTElementManager __sendTVRemoteCommand:](self, "__sendTVRemoteCommand:", qword_100132B08[v5]);
  return 1;
}

- (void)__sendTVRemoteCommand:(unint64_t)a3
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28261LL,  "-[VOTElementManager __sendTVRemoteCommand:]",  @"must be on element manager or system event thread");
  }

  int64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  if ([v5 voiceOverUseTVToggleStyleNavigation])
  {
    unsigned int v6 = -[VOTElementManager tvIsInteractingWithRotor](self, "tvIsInteractingWithRotor");

    if (v6)
    {
      -[VOTElementManager setTvIsInteractingWithRotor:](self, "setTvIsInteractingWithRotor:", 0LL);
      return;
    }
  }

  else
  {
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
  unsigned int v8 = v7;
  uint64_t v9 = 1219LL;
  uint64_t v10 = 1218LL;
  double v11 = 0.05;
  switch(a3)
  {
    case 0uLL:
      uint64_t v9 = 1201LL;
      uint64_t v10 = 1200LL;
      goto LABEL_21;
    case 1uLL:
      uint64_t v9 = 1207LL;
      uint64_t v10 = 1206LL;
      goto LABEL_21;
    case 2uLL:
      uint64_t v9 = 1203LL;
      uint64_t v10 = 1202LL;
      goto LABEL_21;
    case 3uLL:
      uint64_t v9 = 1205LL;
      uint64_t v10 = 1204LL;
      goto LABEL_21;
    case 4uLL:
      goto LABEL_21;
    case 5uLL:
      uint64_t v9 = 1223LL;
      uint64_t v10 = 1222LL;
      goto LABEL_21;
    case 6uLL:
      goto LABEL_18;
    case 7uLL:
      double v11 = 1.25;
LABEL_18:
      uint64_t v9 = 1217LL;
      uint64_t v10 = 1216LL;
LABEL_21:
      id v17 = (id)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation buttonRepresentationWithType:]( &OBJC_CLASS___AXEventRepresentation,  "buttonRepresentationWithType:",  v10));
      uint64_t v13 = objc_claimAutoreleasedReturnValue( +[AXEventRepresentation buttonRepresentationWithType:]( &OBJC_CLASS___AXEventRepresentation,  "buttonRepresentationWithType:",  v9));
      id v12 = (void *)v13;
      if (v17)
      {
        if (v13)
        {
          unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithObjects:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObjects:",  v17,  v13,  0LL));
          BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11));
          unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithObjects:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObjects:",  v15,  &off_100187988,  0LL));

          -[VOTElementManager __sendHIDEvents:postEventDelays:](self, "__sendHIDEvents:postEventDelays:", v14, v16);
        }
      }

      break;
    default:
LABEL_16:
      id v17 = 0LL;
      id v12 = 0LL;
      break;
  }
}

- (void)__sendHIDEvents:(id)a3 postEventDelays:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28340LL,  "-[VOTElementManager __sendHIDEvents:postEventDelays:]",  @"must be on element manager or system event thread");
  }

  id v8 = [v6 count];
  if (v8 == [v7 count])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
    [v10 doubleValue];
    double v12 = v11;

    if (v9)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
      [v13 sendHIDSystemEvent:v9 repostCreatorHIDEvent:0 senderID:0x8000000817319373];
    }

    [v6 removeObjectAtIndex:0];
    [v7 removeObjectAtIndex:0];
    if ([v6 count])
    {
      dispatch_time_t v14 = dispatch_time(0LL, (uint64_t)(v12 * 1000000000.0));
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
      unsigned int v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100094E18;
      block[3] = &unk_100177E90;
      block[4] = self;
      id v18 = v6;
      id v19 = v7;
      dispatch_after(v14, v16, block);
    }
  }

  else
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28343LL,  "-[VOTElementManager __sendHIDEvents:postEventDelays:]",  @"event count must equal delays count");
  }
}

- (void)__tvOS_toggleAudioDescriptions
{
  uint64_t v3 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread");
  if ((v3 & 1) == 0)
  {
    uint64_t v3 = (uint64_t)-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread");
    if ((v3 & 1) == 0) {
      uint64_t v3 = _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28370LL,  "-[VOTElementManager __tvOS_toggleAudioDescriptions]",  @"must be on element manager or system event thread");
    }
  }

  if (_AXSInUnitTestMode(v3)
    || (unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL)),
        unsigned int v5 = [v4 fullscreenVideoViewIsVisible],
        v4,
        v5))
  {
    id v6 = (const __CFBoolean *)MAAudibleMediaPrefCopyPreferDescriptiveVideo();
    if (v6
      || (id v6 = (const __CFBoolean *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL))) != 0LL)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
      int Value = CFBooleanGetValue(v6);
      if (Value) {
        id v8 = @"audio.descriptions.disabled";
      }
      else {
        id v8 = @"audio.descriptions.enabled";
      }
      uint64_t v9 = &kCFBooleanTrue;
      if (Value) {
        uint64_t v9 = &kCFBooleanFalse;
      }
      MAAudibleMediaPrefSetPreferDescriptiveVideo(*v9);
      id v10 = sub_10004AE68(off_1001AC148, v8, 0LL, v13);
      double v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = sub_10000BBB0(v11, 0, v13);

      CFRelease(v6);
    }
  }

- (void)__tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28402LL,  "-[VOTElementManager __tvOS_toggleSpeakNonfocusableElementsAfterDelayUserPreference]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager setSpeakNonfocusableElementsAfterDelay:]( self,  "setSpeakNonfocusableElementsAfterDelay:",  -[VOTElementManager speakNonfocusableElementsAfterDelay](self, "speakNonfocusableElementsAfterDelay") ^ 1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 selectedLanguage]);

  if (-[VOTElementManager speakNonfocusableElementsAfterDelay](self, "speakNonfocusableElementsAfterDelay")) {
    unsigned __int8 v4 = @"element.on.text";
  }
  else {
    unsigned __int8 v4 = @"element.off.text";
  }
  id v5 = sub_10004AE68(off_1001AC148, v4, 0LL, v7);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[VOTElementManager _speak:cannotBeInterrupted:](self, "_speak:cannotBeInterrupted:", v6, 0LL);
}

- (int64_t)_tvOS_userPreferredNonDirectTouchInteractionMode
{
  return 2LL;
}

- (void)__tvOS_toggleSilenceAnnouncementsUserPreference
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28433LL,  "-[VOTElementManager __tvOS_toggleSilenceAnnouncementsUserPreference]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager setShouldSilenceAnnouncements:]( self,  "setShouldSilenceAnnouncements:",  -[VOTElementManager shouldSilenceAnnouncements](self, "shouldSilenceAnnouncements") ^ 1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 selectedLanguage]);

  if (-[VOTElementManager shouldSilenceAnnouncements](self, "shouldSilenceAnnouncements")) {
    unsigned __int8 v4 = @"element.on.text";
  }
  else {
    unsigned __int8 v4 = @"element.off.text";
  }
  id v5 = sub_10004AE68(off_1001AC148, v4, 0LL, v7);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[VOTElementManager _speak:cannotBeInterrupted:](self, "_speak:cannotBeInterrupted:", v6, 0LL);
}

- (void)__tvOS_toggleExploreFocusAffectsNativeFocusPreference
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28442LL,  "-[VOTElementManager __tvOS_toggleExploreFocusAffectsNativeFocusPreference]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager setExploreFocusAffectsNativeFocus:]( self,  "setExploreFocusAffectsNativeFocus:",  -[VOTElementManager exploreFocusAffectsNativeFocus](self, "exploreFocusAffectsNativeFocus") ^ 1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTWorkspace sharedWorkspace](&OBJC_CLASS___VOTWorkspace, "sharedWorkspace"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 selectedLanguage]);

  if (-[VOTElementManager exploreFocusAffectsNativeFocus](self, "exploreFocusAffectsNativeFocus")) {
    unsigned __int8 v4 = @"element.on.text";
  }
  else {
    unsigned __int8 v4 = @"element.off.text";
  }
  id v5 = sub_10004AE68(off_1001AC148, v4, 0LL, v7);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  -[VOTElementManager _speak:cannotBeInterrupted:](self, "_speak:cannotBeInterrupted:", v6, 0LL);
}

- (void)__updateElementVisuals
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28451LL,  "-[VOTElementManager __updateElementVisuals]",  @"must be on element manager or system event thread");
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  if (v3)
  {
    id v7 = v3;
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentExplorerElement]);

    uint64_t v3 = v7;
    if (!v5)
    {
      [v7 updateFrame];
      [v7 updatePaths];
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v6 setCursorFrameForElement:v7 animated:0];

      uint64_t v3 = v7;
    }
  }
}

- (BOOL)_didFocusUpdateOriginateFromFocusedApp:(id)a3
{
  id v4 = a3;
  id v5 = [v4 senderPID];
  if ((_DWORD)v5 == -1
    || (id v6 = v5, ([v4 senderIsAppExtension] & 1) != 0)
    || [v4 reason] == (id)5
    && (id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 focusElement]), v7, v7))
  {
    id v8 = 0LL;
LABEL_6:
    BOOL v9 = 1;
    goto LABEL_7;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", v4));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  unsigned int v12 = [v11 isEqualToString:@"com.apple.PineBoard"];

  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 senderBundleID]);
    if (([v13 isEqualToString:@"com.apple.siri"] & 1) != 0
      || ([v13 isEqualToString:@"com.apple.TVWLAccessService"] & 1) != 0
      || [v13 isEqualToString:@"com.apple.TVSystemMenuService"])
    {

      goto LABEL_6;
    }
  }

  uint64_t v14 = VOTLogTVFocus();
  BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v6));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v4 senderBundleID]);
    int v18 = 138543874;
    id v19 = v16;
    __int16 v20 = 2114;
    __int128 v21 = v17;
    __int16 v22 = 2114;
    __int128 v23 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "update focus request did not come from focused app. ignoring.\n Sender PID: %{public}@. BundleID: %{public}@. \n Current App: %{public}@",  (uint8_t *)&v18,  0x20u);
  }

  BOOL v9 = 0;
LABEL_7:

  return v9;
}

- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelayNumber:(id)a4
{
  id v6 = a3;
  [a4 doubleValue];
  -[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:](self, "_tvOS_updateWithNativeFocus:withDelay:", v6);
}

- (void)_tvOS_updateWithNativeFocus:(id)a3 withDelay:(double)a4
{
  id v6 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28525LL,  "-[VOTElementManager _tvOS_updateWithNativeFocus:withDelay:]",  @"must be on element manager or system event thread");
  }

  if (!-[VOTElementManager _isDictationInProgressForCurrentApp](self, "_isDictationInProgressForCurrentApp")
    && -[VOTElementManager _didFocusUpdateOriginateFromFocusedApp:](self, "_didFocusUpdateOriginateFromFocusedApp:", v6))
  {
    -[NSLock lock](self->_tvAccessLock, "lock");
    self->_needsUpdateFocus = 1;
    uint64_t v7 = VOTLogTVFocus(-[VOTElementManager setUpdateFocusContext:](self, "setUpdateFocusContext:", v6));
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_isUpdatingFocus));
      int v10 = 138543874;
      double v11 = v9;
      __int16 v12 = 2048;
      double v13 = a4;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "asking to update. isUpdating: %{public}@. delay: %.2f\n%{public}@",  (uint8_t *)&v10,  0x20u);
    }

    -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_updateWithNativeFocusTimer, "dispatchAfterDelay:", a4);
    -[NSLock unlock](self->_tvAccessLock, "unlock");
  }
}

- (void)_tvOS_handleUpdateWithNativeFocusFromTimer
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28548LL,  "-[VOTElementManager _tvOS_handleUpdateWithNativeFocusFromTimer]",  @"must be on element manager or system event thread");
  }

  if (!self->_isUpdatingFocus)
  {
    self->_isUpdatingFocus = 1;
    -[VOTElementManager _tvOS_updateWithNativeFocus](self, "_tvOS_updateWithNativeFocus");
  }

- (id)_focusElementForFocusUpdate:(id)a3
{
  id v4 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28558LL,  "-[VOTElementManager _focusElementForFocusUpdate:]",  @"must be on element manager or system event thread");
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", v4));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 focusElement]);
  if (!v6)
  {
    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 nativeFocusPreferredElement]);
    }

    else
    {
      uint64_t v7 = VOTLogTVFocus(0LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Suspicious: currentApp was nil", v10, 2u);
      }

      id v6 = 0LL;
    }

    [v4 setFocusElement:v6];
  }

  return v6;
}

- (void)_tvOS_retryUpdateWithNativeFocus
{
  if ((unint64_t)-[VOTElementManager focusRetryAttempts](self, "focusRetryAttempts") <= 0x13)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    unsigned __int8 v4 = [v3 isSpeaking];

    if ((v4 & 1) != 0)
    {
      -[VOTElementManager setWaitingToRetryFocus:](self, "setWaitingToRetryFocus:", 0LL);
      dispatch_time_t v5 = dispatch_time(0LL, (uint64_t)(kSCRCThreadWaitShort * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000959C8;
      block[3] = &unk_100176D38;
      block[4] = self;
      dispatch_after(v5, &_dispatch_main_q, block);
    }

    else
    {
      -[VOTElementManager setFocusRetryAttempts:]( self,  "setFocusRetryAttempts:",  (char *)-[VOTElementManager focusRetryAttempts](self, "focusRetryAttempts") + 1);
      -[VOTElementManager _tvOS_updateWithNativeFocus](self, "_tvOS_updateWithNativeFocus");
    }
  }

- (void)_tvOS_updateWithNativeFocus
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28604LL,  "-[VOTElementManager _tvOS_updateWithNativeFocus]",  @"must be on element manager or system event thread");
  }

  if (!-[VOTElementManager waitingToRetryFocus](self, "waitingToRetryFocus"))
  {
    id v3 = [(id)VOTSharedWorkspace tvInteractionMode];
    if (v3 == (id)2
      && CFAbsoluteTimeGetCurrent() - self->_lastScreenChangeNotificationTime < 1.0
      && !-[VOTElementManager forceUpdateMask](self, "forceUpdateMask"))
    {
      uint64_t v40 = VOTLogTVFocus(0LL);
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "Ignoring focusUpdate because a screen change was just handled",  buf,  2u);
      }

      unsigned __int8 v4 = 0LL;
      uint64_t v37 = 0LL;
      id v17 = 0LL;
      dispatch_time_t v5 = 0LL;
      BOOL v9 = 0LL;
      self->_isUpdatingFocus = 0;
      goto LABEL_73;
    }

    unsigned __int8 v4 = 0LL;
    double v60 = 0LL;
    dispatch_time_t v5 = 0LL;
    for (uint64_t i = 0LL; ; uint64_t i = v17)
    {
      uint64_t v7 = v4;
      self->_needsUpdateFocus = 0;
      -[NSLock lock](self->_tvAccessLock, "lock");
      unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager updateFocusContext](self, "updateFocusContext"));

      -[NSLock unlock](self->_tvAccessLock, "unlock");
      if (([v4 shouldIgnorePreviousFocusedElement] & 1) != 0
        || -[VOTElementManager forceUpdateMask](self, "forceUpdateMask"))
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvSpeechRequestManager](self, "tvSpeechRequestManager"));
        [v8 reset];
      }

      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _focusElementForFocusUpdate:](self, "_focusElementForFocusUpdate:", v4));

      uint64_t v11 = VOTLogTVFocus(v10);
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 138543362;
        NSUInteger v63 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Update FocusElement Candidate: %{public}@",  buf,  0xCu);
      }

      if (!v9) {
        break;
      }
      if (([v9 isEqual:i] & 1) != 0 || !objc_msgSend(v9, "differenceAspectMask:", i))
      {
        int64_t v13 = -[VOTElementManager forceUpdateMask](self, "forceUpdateMask");
        uint64_t v14 = VOTLogTVFocus(v13);
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
        if (!v13)
        {
          if (v16)
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Pending and focus element the same after short delay. Going with original",  buf,  2u);
          }

          goto LABEL_48;
        }

        if (v16)
        {
          *(_DWORD *)__int128 buf = 138543362;
          NSUInteger v63 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Force update mask set. proceeding with element: %{public}@",  buf,  0xCu);
        }
      }

      id v17 = v9;

      if (v3 == (id)2)
      {
        id v18 = (id)objc_claimAutoreleasedReturnValue( -[VOTElementManager __targetElementForFocusElement:mustBeAccessibilityElement:]( self,  "__targetElementForFocusElement:mustBeAccessibilityElement:",  v17,  1LL));

        id v19 = -[VOTElementRotor updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:]( self->_elementRotor,  "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:",  v18,  1LL,  self->_firstResponderElement);
      }

      else
      {
        id v18 = v17;

        -[VOTElementRotor updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:]( self->_elementRotor,  "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:",  v18,  1LL,  self->_firstResponderElement);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvSpeechRequestManager](self, "tvSpeechRequestManager"));
        unsigned int v21 = objc_msgSend( v20,  "updateHeadersAndElementsWithTarget:ignoreLastUpdate:",  v18,  objc_msgSend(v4, "shouldIgnorePreviousFocusedElement"));

        if (v21)
        {
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvSpeechRequestManager](self, "tvSpeechRequestManager"));
          __int128 v23 = (VOTOutputRequest *)objc_claimAutoreleasedReturnValue([v22 generateOutputRequest:&v61]);

          if (!v61)
          {
            uint64_t v25 = VOTLogTVFocus(v24);
            __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "result outputRequest same as last time. setting to nil",  buf,  2u);
            }

            __int128 v23 = 0LL;
          }

          double v60 = v23;
        }

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
        [v27 cancelCurrentReadAll];

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 explorerElements]);
        id v30 = [v29 count];

        if (!v30) {
          self->_explorerElementsNeedUpdate = 1;
        }
      }

      dispatch_time_t v5 = v18;
      if (!self->_needsUpdateFocus)
      {
        uint64_t v37 = v60;
        goto LABEL_50;
      }

      uint64_t v31 = VOTLogTVFocus(v19);
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "reject focus change. Going again", buf, 2u);
      }
    }

    uint64_t v34 = VOTLogTVFocus(v33);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "FocusElement was nil", buf, 2u);
    }

    -[VOTElementManager setNativeFocusElement:](self, "setNativeFocusElement:", 0LL);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvSpeechRequestManager](self, "tvSpeechRequestManager"));
    [v36 reset];

    uint64_t v37 = v60;
    if (v3 == (id)2)
    {
      id v17 = 0LL;
      goto LABEL_50;
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v38 setCursorFrameForElement:0];

    -[VOTElementRotor updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:]( self->_elementRotor,  "updateRotorForElement:shouldPreserveRotorNavigation:firstResponder:",  0LL,  1LL,  self->_firstResponderElement);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[VOTElementManager __consumeAppTransitionForAnnouncingIfNeeded:]( self,  "__consumeAppTransitionForAnnouncingIfNeeded:",  v4));
    if (v15)
    {
      uint64_t v37 = objc_alloc_init(&OBJC_CLASS___VOTOutputRequest);

      id v39 =  -[VOTOutputRequest addString:breakWords:withLanguage:atIndex:]( v37,  "addString:breakWords:withLanguage:atIndex:",  v15,  0LL,  0LL,  0LL);
      -[VOTOutputRequest setGeneratesBraille:](v37, "setGeneratesBraille:", 1LL);
      uint64_t i = 0LL;
      goto LABEL_49;
    }

    self->_explorerElementsNeedUpdate = 1;
    -[VOTElementManager _updateExplorerElementsIfNeeded](self, "_updateExplorerElementsIfNeeded");
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[VOTExplorerElementManagerContext context]( &OBJC_CLASS___VOTExplorerElementManagerContext,  "context"));
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
    [v43 readAll:v42];

    uint64_t i = 0LL;
LABEL_48:
    uint64_t v37 = v60;
LABEL_49:

    id v17 = i;
LABEL_50:
    uint64_t v44 = VOTLogTVFocus(v19);
    double v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138543618;
      NSUInteger v63 = v9;
      __int16 v64 = 2114;
      double v65 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "Did accept focus change: %{public}@\nOutputRequest:%{public}@",  buf,  0x16u);
    }

    -[VOTElementManager setNativeFocusElement:](self, "setNativeFocusElement:", v9);
    self->_forceUpdateMask = 0LL;
    self->_isUpdatingFocus = 0;
    self->_explorerElementsNeedUpdate = 1;
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
    [v46 setCurrentExplorerElement:0];

    self->_elementUnitIndeCGFloat x = -1LL;
    if (v3 != (id)2)
    {
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[VOTCommandHelper commandHelper](&OBJC_CLASS___VOTCommandHelper, "commandHelper"));
      if ([v9 handlesGestureArea])
      {
        [v51 setHelpEnabled:1];
        objc_msgSend(v51, "setPracticeRegion:", 0.0, 0.0, xmmword_1001AD170);
        [v51 setPracticeElement:v9];
      }

      else if ([v51 helpEnabled])
      {
        [v51 setHelpEnabled:0];
      }

      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[VOTOutputRequest outputActions](v37, "outputActions"));
      id v53 = [v52 count];

      if (v53)
      {
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
        [v54 cancelPendingReadAll];

        self->_shouldReadExplorerElementsAfterSpeechFinished = 1;
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager __consumeAppTransitionForAnnouncingIfNeeded:]( self,  "__consumeAppTransitionForAnnouncingIfNeeded:",  v4));
        if (v55) {
          id v56 =  -[VOTOutputRequest addString:breakWords:withLanguage:atIndex:]( v37,  "addString:breakWords:withLanguage:atIndex:",  v55,  0LL,  0LL,  0LL);
        }
        -[VOTElementManager __sendOutputRequest:](self, "__sendOutputRequest:", v37);
      }

      -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", 0LL);

      os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v47 setCursorFrameForElement:v9];
      goto LABEL_71;
    }

    os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
    unint64_t v48 = (unint64_t)[v47 traits];
    if (((kAXTextEntryTrait | kAXSearchFieldTrait) & v48) != 0)
    {
      unint64_t v49 = (unint64_t)[v5 traits];
      BOOL v50 = (kAXKeyboardKeyTrait & v49) != 0;
      if (!v5)
      {
LABEL_71:

        -[VOTElementManager __updateVoiceOverEnabledWarningBannerVisibility]( self,  "__updateVoiceOverEnabledWarningBannerVisibility");
        id v58 = (void *)objc_claimAutoreleasedReturnValue([v4 updateFocusComplete]);

        if (v58)
        {
          CGFloat v59 = (void (**)(void))objc_claimAutoreleasedReturnValue([v4 updateFocusComplete]);
          v59[2]();
        }

- (BOOL)_bundleIdentifierIsHostedByPineBoard:(id)a3
{
  id v3 = a3;
  if (([v3 isEqualToString:@"com.apple.TVScreenSaver"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVIdleScreen"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVAirPlay"] & 1) != 0
    || ([v3 isEqualToString:@"com.apple.TVConferenceRoomDisplay"] & 1) != 0)
  {
    unsigned __int8 v4 = 1;
  }

  else
  {
    unsigned __int8 v4 = [v3 isEqualToString:@"com.apple.TVPeripheralAgent"];
  }

  return v4;
}

- (id)__consumeAppTransitionForAnnouncingIfNeeded:(id)a3
{
  id v4 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28828LL,  "-[VOTElementManager __consumeAppTransitionForAnnouncingIfNeeded:]",  @"must be on element manager or system event thread");
  }

  dispatch_time_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 appTransition]);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", v4));
    unsigned int v7 = [v5 pid];
    if (v7 == [v6 pid]
      || [v6 isSystemApp]
      && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]),
          unsigned int v9 = -[VOTElementManager _bundleIdentifierIsHostedByPineBoard:]( self,  "_bundleIdentifierIsHostedByPineBoard:",  v8),  v8,  v9))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 announcableName]);
    }

    else
    {
      _AXLogWithFacility( 0LL,  0LL,  1LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0.0,  1,  @"appTransition:%@ does not represent our currentApp:%@");
      uint64_t v10 = 0LL;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  [v4 setAppTransition:0];

  return v10;
}

- (id)__targetElementForFocusElement:(id)a3 mustBeAccessibilityElement:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28855LL,  "-[VOTElementManager __targetElementForFocusElement:mustBeAccessibilityElement:]",  @"must be on element manager or system event thread");
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue([v6 accessibleAncestor]);
  if (v7
    || (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 accessibleDescendants]),
        id v7 = (id)objc_claimAutoreleasedReturnValue([v8 firstObject]),
        v8,
        v7))
  {
    if (!v4) {
      goto LABEL_10;
    }
  }

  else
  {
    id v7 = v6;
    if (!v4) {
      goto LABEL_10;
    }
  }

  if (([v7 isAccessibleElement] & 1) == 0)
  {

    id v7 = 0LL;
  }

- (void)_performTouchPadTapAtLocation:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation touchPadRepresentationWithHandType:normalizedLocation:]( &OBJC_CLASS___AXEventRepresentation,  "touchPadRepresentationWithHandType:normalizedLocation:",  1LL));
  dispatch_time_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[AXEventRepresentation touchPadRepresentationWithHandType:normalizedLocation:]( &OBJC_CLASS___AXEventRepresentation,  "touchPadRepresentationWithHandType:normalizedLocation:",  6LL,  x,  y));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
  [v6 sendHIDSystemEvent:v8 repostCreatorHIDEvent:0 senderID:0x8000000817319373];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AXEventTapManager sharedManager](&OBJC_CLASS___AXEventTapManager, "sharedManager"));
  [v7 sendHIDSystemEvent:v5 repostCreatorHIDEvent:0 senderID:0x8000000817319373];
}

- (void)__updateVoiceOverEnabledWarningBannerVisibility
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28894LL,  "-[VOTElementManager __updateVoiceOverEnabledWarningBannerVisibility]",  @"must be on element manager or system event thread");
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  if (v4)
  {
  }

  else if ((unint64_t)-[VOTElementManager focusRetryAttempts](self, "focusRetryAttempts") <= 0x13)
  {
    -[VOTElementManager setWaitingToRetryFocus:](self, "setWaitingToRetryFocus:", 1LL);
    -[VOTElementManager setForceUpdateMask:]( self,  "setForceUpdateMask:",  (unint64_t)-[VOTElementManager forceUpdateMask](self, "forceUpdateMask") | 2);
    dispatch_time_t v5 = dispatch_time(0LL, (uint64_t)(kSCRCThreadWaitShort * 1000000000.0));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100096834;
    block[3] = &unk_100176D38;
    block[4] = self;
    dispatch_after(v5, &_dispatch_main_q, block);
    goto LABEL_16;
  }

  -[VOTElementManager setFocusRetryAttempts:](self, "setFocusRetryAttempts:", 0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  unsigned int v7 = [v6 isEqualToString:AX_PurpleBuddyBundleName];

  if (self->_isShowingVoiceOverEnabledWarningBanner || !v7)
  {
    if (self->_isShowingVoiceOverEnabledWarningBanner) {
      char v9 = v7;
    }
    else {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
      [v10 hideVoiceOverEnabledWarningBanner];

      self->_isShowingVoiceOverEnabledWarningBanner = 0;
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
    [v8 showVoiceOverEnabledWarningBanner];

    self->_isShowingVoiceOverEnabledWarningBanner = 1;
  }

- (void)__handleUpdateVisualsTimer
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28926LL,  "-[VOTElementManager __handleUpdateVisualsTimer]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager __updateElementVisuals](self, "__updateElementVisuals");
}

- (void)__tvOS_handleUpdatePreferredTVInteractionModeTimer
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28932LL,  "-[VOTElementManager __tvOS_handleUpdatePreferredTVInteractionModeTimer]",  @"must be on element manager or system event thread");
  }

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
  objc_msgSend(v3, "setVoiceOverPreferredTVInteractionMode:", objc_msgSend((id)VOTSharedWorkspace, "tvInteractionMode"));
}

- (void)_readExplorerElementsAfterSpeechFinishedTimerFired
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28938LL,  "-[VOTElementManager _readExplorerElementsAfterSpeechFinishedTimerFired]",  @"must be on element manager or system event thread");
  }

  if (self->_shouldReadExplorerElementsAfterSpeechFinished)
  {
    self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
    int64_t v3 = -[VOTElementManager currentRotorType](self, "currentRotorType");
    if (!self->_flags.isReadingAll)
    {
      int64_t v4 = v3;
      if (-[VOTElementManager speakNonfocusableElementsAfterDelay](self, "speakNonfocusableElementsAfterDelay"))
      {
        if (v4 != 1)
        {
          dispatch_time_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
          uint64_t v10 = v5;
          if (!v5 || (unsigned int v6 = [v5 shouldSpeakExplorerElementsAfterFocus], v7 = v10, v6))
          {
            -[VOTElementManager _updateExplorerElementsIfNeeded](self, "_updateExplorerElementsIfNeeded");
            id v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
            char v9 = (void *)objc_claimAutoreleasedReturnValue( +[VOTExplorerElementManagerContext context]( &OBJC_CLASS___VOTExplorerElementManagerContext,  "context"));
            [v8 readAll:v9];

            unsigned int v7 = v10;
          }
        }
      }
    }
  }

- (void)__tvOS_handleValueChangedWithType:(id)a3 oldValue:(id)a4 newValue:(id)a5 insertedTextOrNil:(id)a6 isSecureText:(BOOL)a7
{
  BOOL v7 = a7;
  id v33 = a3;
  __int16 v12 = (__CFString *)a5;
  elementManagerThread = self->_elementManagerThread;
  uint64_t v14 = (__CFString *)a6;
  id v15 = (__CFString *)a4;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  28963LL,  "-[VOTElementManager __tvOS_handleValueChangedWithType:oldValue:newValue:insertedTextOrNil:isSecureText:]",  @"must be on element manager or system event thread");
  }

  if (v12) {
    BOOL v16 = v12;
  }
  else {
    BOOL v16 = &stru_10017A920;
  }
  id v17 = v16;

  if (v15) {
    id v18 = v15;
  }
  else {
    id v18 = &stru_10017A920;
  }
  id v19 = v18;

  if (v14) {
    __int16 v20 = v14;
  }
  else {
    __int16 v20 = &stru_10017A920;
  }
  unsigned int v21 = v20;

  if (-[__CFString rangeOfString:](v21, "rangeOfString:", @"●") != (id)0x7FFFFFFFFFFFFFFFLL)
  {

    unsigned int v21 = 0LL;
  }

  if (v7 && (-[__CFString length](v17, "length") || -[__CFString length](v19, "length") == (id)1))
  {
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidEnterSecureText](&OBJC_CLASS___VOSOutputEvent, "DidEnterSecureText"));
    [v22 sendEvent:v23];
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v25 = -[__CFString length](v17, "length");
  if ([v33 isEqualToString:kAXValueChangeTypeInsert])
  {
    if (v7)
    {
      [v24 axSafelyAddObject:v21];
      if (-[__CFString length](v17, "length"))
      {
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v17));
        [v26 setAttribute:kCFBooleanTrue forKey:off_1001AC2A0];
        [v24 addObject:v26];
      }

      uint64_t v27 = 1LL;
      goto LABEL_43;
    }

    uint64_t v28 = 1LL;
    goto LABEL_30;
  }

  if (![v33 isEqualToString:kAXValueChangeTypeDelete])
  {
    uint64_t v28 = 0LL;
    uint64_t v27 = 0LL;
    if ([v33 isEqualToString:kAXValueChangeTypeReplacement])
    {
LABEL_30:
      id v29 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString stringByReplacingOccurrencesOfString:withString:]( v17,  "stringByReplacingOccurrencesOfString:withString:",  v19,  &stru_10017A920));
      [v24 axSafelyAddObject:v29];

      uint64_t v27 = v28;
    }

- (void)__tvOS_HandleToggleNavigationStyle:(id)a3
{
  int64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance", a3));
  id v5 = [v4 voiceOverPreferredTVInteractionMode];

  if (v5 == (id)2)
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned int v7 = [v6 voiceOverPrefersFollowFocusNavigationStyle];
    [(id)VOTSharedWorkspace setTvInteractionMode:v7 ^ 1];
  }

  else
  {
    [(id)VOTSharedWorkspace setTvInteractionMode:2];
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"));
    -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v6);
  }

  -[VOTElementManager _updateRotorForCurrentElement](self, "_updateRotorForCurrentElement");
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  objc_msgSend(v8, "_tvOS_navigationStyleChanged");
}

- (void)setTvIsInteractingWithRotor:(BOOL)a3
{
  if (self->_tvIsInteractingWithRotor != a3)
  {
    self->_tvIsInteractingWithRotor = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
    if (a3) {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[VOSOutputEvent TVDidBeginInteractionWithRotor]( &OBJC_CLASS___VOSOutputEvent,  "TVDidBeginInteractionWithRotor"));
    }
    else {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[VOSOutputEvent TVDidEndInteractionWithRotor]( &OBJC_CLASS___VOSOutputEvent,  "TVDidEndInteractionWithRotor"));
    }
    id v5 = (void *)v4;
    [v6 sendEvent:v4];
  }

- (void)_tvRotorInteractionTimerFired
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29094LL,  "-[VOTElementManager _tvRotorInteractionTimerFired]",  @"must be on element manager or system event thread");
  }

  -[VOTElementManager setTvIsInteractingWithRotor:](self, "setTvIsInteractingWithRotor:", 0LL);
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 announcement:(BOOL)a5 brailleOnly:(BOOL)a6
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5
{
}

- (void)_speak:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v10 = a4;
  id v12 = a3;
  if ([v12 length])
  {
    id v14 = v12;
    int64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
    -[VOTElementManager _speakMessages:cannotBeInterrupted:pitch:announcement:brailleOnly:]( self,  "_speakMessages:cannotBeInterrupted:pitch:announcement:brailleOnly:",  v13,  v10,  a5,  v8,  v7);
  }
}

- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5
{
}

- (void)_speakMessages:(id)a3 cannotBeInterrupted:(BOOL)a4 pitch:(int64_t)a5 announcement:(BOOL)a6 brailleOnly:(BOOL)a7
{
  BOOL v7 = a7;
  BOOL v8 = a6;
  BOOL v9 = a4;
  id v11 = a3;
  if ([v11 count])
  {
    BOOL v30 = v9;
    BOOL v31 = v8;
    id v12 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    int64_t v13 = v12;
    if (v7) {
      [v12 setLimitToComponentType:3];
    }
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v14 = v11;
    id v15 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v35;
      id v33 = v13;
      do
      {
        id v18 = 0LL;
        do
        {
          if (*(void *)v35 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v18);
          if ([v19 isEqualToString:off_1001AC288])
          {
            LODWORD(v20) = 0.25;
LABEL_15:
            [v13 addPause:v20];
            goto LABEL_16;
          }

          if ([v19 isEqualToString:off_1001AC290])
          {
            LODWORD(v20) = 0.5;
            goto LABEL_15;
          }

          if ([v19 isEqualToString:off_1001AC298])
          {
            LODWORD(v20) = 0.75;
            goto LABEL_15;
          }

          uint64_t v22 = objc_opt_class(&OBJC_CLASS___AXAttributedString, v21);
          if ((objc_opt_isKindOfClass(v19, v22) & 1) != 0)
          {
            id v23 = v19;
            int64_t v13 = v33;
          }

          else
          {
            id v23 = (id)objc_claimAutoreleasedReturnValue( +[AXAttributedString axAttributedStringWithString:]( &OBJC_CLASS___AXAttributedString,  "axAttributedStringWithString:",  v19));
            int64_t v13 = v33;
          }

          id v24 = [v23 length];
          if (a5 == 1)
          {
            id v25 = &UIAccessibilityTokenHighPitch;
            goto LABEL_26;
          }

          if (a5 == 2)
          {
            id v25 = &UIAccessibilityTokenLowPitch;
LABEL_26:
            objc_msgSend(v23, "setAttribute:forKey:withRange:", &__kCFBooleanTrue, *v25, 0, v24);
          }

- (void)__sendOutputRequest:(id)a3
{
  id v4 = a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29200LL,  "-[VOTElementManager __sendOutputRequest:]",  @"must be on element manager or system event thread");
  }

  [v4 send];
}

- (void)_interruptSpeachAndPlayBorderHitSound
{
}

- (void)__interruptSpeachAndPlayBorderHitSound
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29211LL,  "-[VOTElementManager __interruptSpeachAndPlayBorderHitSound]",  @"must be on element manager or system event thread");
  }

  int64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v3 stopSpeakingAtBoundary:0];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v5 sendEvent:v4];
}

- (void)_updateExplorerElementsIfNeeded
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29242LL,  "-[VOTElementManager _updateExplorerElementsIfNeeded]",  @"must be on element manager or system event thread");
  }

  if (self->_explorerElementsNeedUpdate)
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue(-[VOTElementManager focusedApplication:](self, "focusedApplication:", 0LL));
    int64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v13 explorerElements]);
    if ([v13 isHeadBoard])
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement systemAppApplication](&OBJC_CLASS___VOTElement, "systemAppApplication"));
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 explorerElements]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 arrayByAddingObjectsFromArray:v5]);

      int64_t v3 = (void *)v6;
    }

    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v13 nativeFocusElement]);
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager __targetElementForFocusElement:mustBeAccessibilityElement:]( self,  "__targetElementForFocusElement:mustBeAccessibilityElement:",  v7,  0LL));
    [v8 updateWithExplorerElements:v3 focusedElement:v9];

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager explorerElementManager](self, "explorerElementManager"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 tvSpeechRequestManager]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager tvSpeechRequestManager](self, "tvSpeechRequestManager"));
    [v11 transferHeadersFrom:v12];

    self->_explorerElementsNeedUpdate = 0;
  }

- (void)willBeginReadAll:(id)a3
{
  self->_shouldReadExplorerElementsAfterSpeechFinished = 0;
}

- (void)explorerElementManager:(id)a3 didSetExplorerElementFocus:(id)a4
{
  self->_elementUnitIndedouble x = -1LL;
}

- (BOOL)explorerElementManagerShouldBeInUnitTestingMode:(id)a3
{
  return -[VOTElementManager unitTestingMode](self, "unitTestingMode", a3);
}

- (void)explorerElementManager:(id)a3 willReadElement:(id)a4
{
  id v5 = a4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  [v6 setCursorFrameForElement:v5];

  -[VOTElementManager _sendUserEventOccurredIfNeeded](self, "_sendUserEventOccurredIfNeeded");
}

- (void)explorerElementManager:(id)a3 didFinishReadAll:(BOOL)a4
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread",  a3,  a4) & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29287LL,  "-[VOTElementManager explorerElementManager:didFinishReadAll:]",  @"must be on element manager or system event thread");
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[VOTDisplayManager displayManager](&OBJC_CLASS___VOTDisplayManager, "displayManager"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager _currentElement](self, "_currentElement"));
  [v5 setCursorFrameForElement:v6];

  self->_flags.isReadinguint64_t All = 0;
}

- (void)_sendUserEventOccurredIfNeeded
{
  if (vabdd_f64(v3, self->_lastUserEventNotificationTime) > 4.0)
  {
    self->_lastUserEventNotificationTime = v3;
    dispatch_async(&_dispatch_main_q, &stru_100179128);
  }

- (void)gestureRepeaterWillSendFirstRepeaterEvent:(id)a3
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager", a3));
  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent DidBeginPassthrough](&OBJC_CLASS___VOSOutputEvent, "DidBeginPassthrough"));
  [v4 sendEvent:v3];
}

- (void)gestureRepeater:(id)a3 repeaterEventDidFire:(int64_t)a4
{
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread",  a3) & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29315LL,  "-[VOTElementManager gestureRepeater:repeaterEventDidFire:]",  @"must be on element manager or system event thread");
  }

- (_NSRange)_outputRangeForCharacterSegment:(id)a3 direction:(int64_t)a4
{
  id v6 = a3;
  id v7 = [v6 length];
  if (a4 == 2)
  {
    elementUnitIndedouble x = self->_elementUnitIndex;
    if (elementUnitIndex > (uint64_t)v7)
    {
      self->_elementUnitIndedouble x = (int64_t)v7;
      elementUnitIndedouble x = (int64_t)v7;
    }

    if (elementUnitIndex >= 1)
    {
      int64_t v9 = (int64_t)[v6 rangeOfComposedCharacterSequenceAtIndex:elementUnitIndex - 1];
      NSUInteger v11 = v13;
      self->_elementUnitIndedouble x = v9;
      goto LABEL_15;
    }

    NSUInteger v11 = 0LL;
    self->_elementUnitIndedouble x = -1LL;
LABEL_14:
    int64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_15;
  }

  if (a4 != 1)
  {
    NSUInteger v11 = 0LL;
    goto LABEL_14;
  }

  int64_t v8 = self->_elementUnitIndex;
  if (v8 < 0)
  {
    int64_t v8 = 0LL;
    self->_elementUnitIndedouble x = 0LL;
  }

  if (v8 >= (uint64_t)v7)
  {
    NSUInteger v11 = 0LL;
    self->_elementUnitIndedouble x = (int64_t)v7;
    goto LABEL_14;
  }

  int64_t v9 = (int64_t)objc_msgSend(v6, "rangeOfComposedCharacterSequenceAtIndex:");
  NSUInteger v11 = v10;
  self->_elementUnitIndedouble x = v9 + v10;
LABEL_15:

  NSUInteger v14 = v9;
  NSUInteger v15 = v11;
  result.NSUInteger length = v15;
  result.NSUInteger location = v14;
  return result;
}

- (void)outputNextTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6
{
  id v10 = a6;
  id v14 = a5;
  id v11 = -[VOTElementManager outputRangeForTextSegmentUnit:direction:string:element:]( self,  "outputRangeForTextSegmentUnit:direction:string:element:",  a3,  a4,  v14,  v10);
  uint64_t v13 = v12;
  -[VOTElementManager updateIndexesForOutputRange:segment:direction:outputStringLength:]( self,  "updateIndexesForOutputRange:segment:direction:outputStringLength:",  v11,  v12,  a3,  a4,  [v14 length]);
  -[VOTElementManager outputTextSegmentForRange:string:element:usePhonetics:segment:]( self,  "outputTextSegmentForRange:string:element:usePhonetics:segment:",  v11,  v13,  v14,  v10,  a3 == 1,  a3);
}

- (_NSRange)outputRangeForTextSegmentUnit:(int64_t)a3 direction:(int64_t)a4 string:(id)a5 element:(id)a6
{
  id v10 = a5;
  id v11 = a6;
  NSUInteger v12 = 0LL;
  unint64_t v13 = 0x7FFFFFFFLL;
  switch(a3)
  {
    case 1LL:
      id v14 = -[VOTElementManager _outputRangeForCharacterSegment:direction:]( self,  "_outputRangeForCharacterSegment:direction:",  v10,  a4);
      goto LABEL_8;
    case 2LL:
      id v14 = [v10 wordFromPosition:self->_elementUnitIndex inDirection:a4];
      goto LABEL_8;
    case 3LL:
      lastSeenLineAndColumn = self->_lastSeenLineAndColumn;
      if (lastSeenLineAndColumn)
      {
        uint64_t v17 = lastSeenLineAndColumn;
      }

      else
      {
        v59[0] = @"lineNumber";
        v59[1] = @"lineColumn";
        v60[0] = &off_100187988;
        v60[1] = &off_100187988;
        uint64_t v17 = (NSDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v60,  v59,  2LL));
      }

      double v20 = v17;
      uint64_t v21 = (char *)[v11 rangeForLineNumberAndColumn:v17];
      if (v21 == (char *)0x7FFFFFFF)
      {
        id v23 = [v10 lineFromPosition:self->_elementUnitIndex inDirection:a4];
LABEL_13:
        unint64_t v13 = (unint64_t)v23;
        NSUInteger v12 = v24;
        goto LABEL_35;
      }

      unint64_t v13 = (unint64_t)v21;
      NSUInteger v25 = v22;
      p_lastSeenLineAndColumn = &self->_lastSeenLineAndColumn;
      if (!*p_lastSeenLineAndColumn)
      {
        objc_storeStrong((id *)p_lastSeenLineAndColumn, v20);
        NSUInteger v12 = v25;
        goto LABEL_35;
      }

      if (a4 != 1)
      {
        NSUInteger v12 = 0LL;
        if (a4 != 2 || !v21) {
          goto LABEL_34;
        }
        else {
          unint64_t v31 = 0LL;
        }
        v55[0] = @"lineNumber";
        id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v31));
        v55[1] = @"lineColumn";
        v56[0] = v32;
        v56[1] = &off_100187988;
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v56,  v55,  2LL));

        __int128 v34 = (char *)[v11 rangeForLineNumberAndColumn:v33];
        __int128 v36 = &v34[v35];
        __int128 v37 = v33;
        uint64_t v38 = v37;
        if (v36 == (char *)v13)
        {
          if (v34 != (char *)0x7FFFFFFF)
          {
            id v39 = v37;
            while (v31 < (unint64_t)[v10 length])
            {
              double v20 = v38;

              --v31;
              v53[0] = @"lineNumber";
              uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v31));
              v53[1] = @"lineColumn";
              v54[0] = v40;
              v54[1] = &off_100187988;
              uint64_t v38 = (NSDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v54,  v53,  2LL));

              uint64_t v41 = (char *)[v11 rangeForLineNumberAndColumn:v38];
              BOOL v43 = v41 != (char *)0x7FFFFFFF && &v41[v42] == (char *)v13;
              id v39 = v20;
              if (!v43) {
                goto LABEL_48;
              }
            }

            double v20 = v39;
            goto LABEL_48;
          }
        }

        else if (v34 != (char *)0x7FFFFFFF)
        {
          unint64_t v44 = v13 - v25;
          if (v13 < v25) {
            unint64_t v44 = 0LL;
          }
          uint64_t v45 = v44 + 1;
          uint64_t v46 = v37;
          do
          {
            double v20 = v38;

            os_log_type_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v45,  @"lineNumber"));
            v51[1] = @"lineColumn";
            v52[0] = v47;
            v52[1] = &off_100187988;
            uint64_t v38 = (NSDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v52,  v51,  2LL));

            unint64_t v48 = (char *)[v11 rangeForLineNumberAndColumn:v38];
            ++v45;
            BOOL v50 = v48 == (char *)0x7FFFFFFF || &v48[v49] == (char *)v13;
            uint64_t v46 = v20;
          }

          while (!v50);
          goto LABEL_48;
        }

        double v20 = v37;
LABEL_48:

        objc_storeStrong((id *)p_lastSeenLineAndColumn, v20);
        id v23 = [v11 rangeForLineNumberAndColumn:v20];
        goto LABEL_13;
      }

      id v27 = &v21[v22];
      if (&v21[v22] >= [v10 length])
      {
        NSUInteger v12 = 0LL;
LABEL_34:
        unint64_t v13 = 0x7FFFFFFFLL;
        goto LABEL_35;
      }

      v57[0] = @"lineNumber";
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v27));
      v57[1] = @"lineColumn";
      v58[0] = v28;
      v58[1] = &off_100187988;
      id v29 = (NSDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v58,  v57,  2LL));

      objc_storeStrong((id *)p_lastSeenLineAndColumn, v29);
      unint64_t v13 = (unint64_t)[v11 rangeForLineNumberAndColumn:v29];
      NSUInteger v12 = v30;
      double v20 = v29;
LABEL_35:

LABEL_9:
      NSUInteger v18 = v13;
      NSUInteger v19 = v12;
      result.NSUInteger length = v19;
      result.NSUInteger location = v18;
      return result;
    case 5LL:
      id v14 = [v10 sentenceFromPosition:self->_elementUnitIndex inDirection:a4];
      goto LABEL_8;
    case 6LL:
      id v14 = [v10 paragraphFromPosition:self->_elementUnitIndex inDirection:a4];
LABEL_8:
      unint64_t v13 = (unint64_t)v14;
      NSUInteger v12 = v15;
      goto LABEL_9;
    default:
      goto LABEL_9;
  }

- (void)updateIndexesForOutputRange:(_NSRange)a3 segment:(int64_t)a4 direction:(int64_t)a5 outputStringLength:(unint64_t)a6
{
  if (a4 != 1)
  {
    if (a5 != 1) {
      a6 = -1LL;
    }
    if (a5 == 1) {
      NSUInteger length = a3.length;
    }
    else {
      NSUInteger length = 0LL;
    }
    unint64_t v8 = length + a3.location;
    if (a3.location != 0x7FFFFFFF) {
      a6 = v8;
    }
    self->_elementUnitIndedouble x = a6;
  }

- (id)_listItemLabelForAXAttributedString:(id)a3
{
  double v3 = (void *)objc_claimAutoreleasedReturnValue([a3 attributeValueForKey:UIAccessibilityTokenListItemLabel]);
  if ([v3 length])
  {
    id v4 = sub_10004A988(off_1001AC148, @"list.item.label", 0LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v5, v3));
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

- (void)outputTextSegmentForRange:(_NSRange)a3 string:(id)a4 element:(id)a5 usePhonetics:(BOOL)a6 segment:(int64_t)a7
{
  BOOL v8 = a6;
  NSUInteger length = a3.length;
  NSUInteger location = a3.location;
  id v55 = a4;
  id v13 = a5;
  self->_elementUnitOutputRange.NSUInteger location = location;
  self->_elementUnitOutputRange.NSUInteger length = length;
  id v14 = [v55 length];
  if (location != 0x7FFFFFFFFFFFFFFFLL
    && length
    && (!v55 || location <= (unint64_t)v14 && location + length <= (unint64_t)v14))
  {
    uint64_t v15 = objc_opt_class(&OBJC_CLASS___AXAttributedString, v55);
    if ((objc_opt_isKindOfClass(v55, v15) & 1) != 0) {
      uint64_t v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "attributedSubstringFromRange:", location, length));
    }
    else {
      uint64_t v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "substringWithRange:", location, length));
    }
    NSUInteger v19 = (void *)v16;
    id v20 = [objc_allocWithZone((Class)VOTOutputRequest) init];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v13 language]);
    unint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    id v53 = [v22 voiceOverPhoneticsFeedback];

    if (v8)
    {
      uint64_t v54 = 0LL;
      if ([v19 length] == (id)1 && v53) {
        uint64_t v54 = objc_claimAutoreleasedReturnValue( -[VOTElementManager _phoneticStringForLetter:language:]( self,  "_phoneticStringForLetter:language:",  v19,  v21));
      }
    }

    else
    {
      uint64_t v54 = 0LL;
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "attributedValueForRange:", location, length));
    id v24 = [v13 lineRangeForPosition:location];
    NSUInteger v25 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _listItemLabelForAXAttributedString:]( self,  "_listItemLabelForAXAttributedString:",  v23));
    uint64_t v51 = v25;
    if ([v25 length]
      && [v25 length]
      && v24 != (id)self->_lastSeenLineStartPositionForFontProperties)
    {
      id v26 = [v20 addString:v25];
      [v20 setGeneratesBraille:1];
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v20 lastAction]);
      LODWORD(v28) = 1062836634;
      id v29 = v23;
      NSUInteger v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v28));
      [v27 setObject:v30 forVariant:32];

      id v23 = v29;
    }

    self->_lastSeenLineStartPositionForFontProperties = (unint64_t)v24;
    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v23 string]);
    unsigned int v32 = -[VOTElementManager stringIsTextAttachment:](self, "stringIsTextAttachment:", v31);

    id v33 = (void *)v54;
    uint64_t v52 = v23;
    if (v32)
    {
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( -[VOTElementManager _textAttachmentElementForString:inRange:]( self,  "_textAttachmentElementForString:inRange:",  v23,  0,  [v23 length]));
      uint64_t v35 = v34;
      if (v34)
      {
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v34 value]);
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v35 label]);
        BOOL v50 = @"__AXStringForVariablesSentinel";
        uint64_t v37 = __AXStringForVariables(v36);
        id v18 = (id)objc_claimAutoreleasedReturnValue(v37);

        id v33 = (void *)v54;
      }

      else
      {
        id v38 = sub_10004A988(off_1001AC148, @"attachment", 0LL);
        id v18 = (id)objc_claimAutoreleasedReturnValue(v38);
      }
    }

    else
    {
      id v18 = v19;
    }

    id v39 = objc_msgSend(v33, "length", v49, v50);
    if (v39) {
      BOOL v40 = v53 == 0LL;
    }
    else {
      BOOL v40 = 1;
    }
    char v41 = !v40;
    if (v39 && v53 == (id)2)
    {
      if ((v41 & 1) == 0)
      {
LABEL_45:
        --self->_elementUnitOutputRange.length;
        -[VOTElementManager sendRequest:](self, "sendRequest:", v20);

        goto LABEL_46;
      }
    }

    else
    {
      id v42 = [v20 addAttributedString:v18 withLanguage:v21];
      if (a7 == 1)
      {
        unint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v20 lastAction]);
        [v44 setObject:kCFBooleanTrue forVariant:28];
      }

      if ((v41 & 1) == 0) {
        goto LABEL_45;
      }
      LODWORD(v43) = 1061158912;
      [v20 addPause:v43];
    }

    id v45 = [v20 addString:v33];
    if (-[VOTElementManager _needsPhoneticBrailleForLanauge:](self, "_needsPhoneticBrailleForLanauge:", v21)) {
      -[VOTElementManager _sendBrailleAlert:](self, "_sendBrailleAlert:", v33);
    }
    if ([v19 length] == (id)1)
    {
      if (sub_10004A070(v19))
      {
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
        id v47 = [v46 voiceOverCapitalLetterFeedback];

        if (v47 == (id)1)
        {
          unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v20 lastAction]);
          [v48 setObject:&off_100187390 forVariant:32];
        }
      }
    }

    goto LABEL_45;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  [v17 stopSpeakingAtBoundary:0];

  id v18 = (id)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  NSUInteger v19 = (void *)objc_claimAutoreleasedReturnValue(+[VOSOutputEvent BoundaryEncountered](&OBJC_CLASS___VOSOutputEvent, "BoundaryEncountered"));
  [v18 sendEvent:v19];
LABEL_46:
}

- (id)_textAttachmentElementForString:(id)a3 inRange:(_NSRange)a4
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "attributedSubstringFromRange:", a4.location, a4.length));
  id v6 = v5;
  if (self->_inUnitTestingMode) {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 attributeValueForKey:UIAccessibilityTokenAttachment]);
  }
  else {
    uint64_t v7 = objc_claimAutoreleasedReturnValue( +[AXUIElement uiElementWithAXElement:]( AXUIElement,  "uiElementWithAXElement:",  [v5 attributeValueForKey:UIAccessibilityTokenAttachment]));
  }
  BOOL v8 = (void *)v7;
  int64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VOTElement elementWithUIElement:](&OBJC_CLASS___VOTElement, "elementWithUIElement:", v7));

  return v9;
}

- (BOOL)stringIsTextAttachment:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByTrimmingCharactersInSet:v4]);

  BOOL v6 = [v5 length] == (id)1 && objc_msgSend(v5, "characterAtIndex:", 0) == 65532;
  return v6;
}

- (BOOL)_elementMonitoringOutputElement:(id)a3 userMonitored:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 value]);
  id v8 = [v7 length];

  if (v8) {
    uint64_t v9 = 8LL;
  }
  else {
    uint64_t v9 = 1LL;
  }
  [v6 updateLanguage];
  id v10 = [objc_allocWithZone((Class)VOTOutputRequest) init];
  int v11 = 1;
  [v10 setDoesNotInterrupt:1];
  -[VOTElementManager _addDescription:toRequest:withOptions:]( self,  "_addDescription:toRequest:withOptions:",  v6,  v10,  v9);
  NSUInteger v12 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);

  if (![v12 isAXAttributedString])
  {
LABEL_7:
    if (v4) {
      goto LABEL_8;
    }
LABEL_11:
    -[VOTElementManager refreshBraille](self, "refreshBraille");
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 coalescedAttributes]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:UIAccessibilityTokenBrailleDisplayOnly]);
  unsigned int v15 = [v14 BOOLValue];

  if (v15)
  {
    [v10 setLimitToComponentType:3];
    int v11 = 0;
    goto LABEL_7;
  }

  int v11 = 1;
  if (!v4) {
    goto LABEL_11;
  }
LABEL_8:
  [v10 setGeneratesBraille:1];
  [v10 setBrailleType:2];
  if (!v11) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VOTOutputManager outputManager](&OBJC_CLASS___VOTOutputManager, "outputManager"));
  unsigned __int8 v17 = [v16 isSpeaking];

  if ((v17 & 1) != 0)
  {
    BOOL v18 = 0;
    goto LABEL_21;
  }

- (double)_realTimeAdjustableUpdateFrequency:(id)a3
{
  id v4 = a3;
  double v5 = 1.0;
  if (!-[NSArray containsObject:](self->_realTimeElementsCache, "containsObject:", v4))
  {
    double v5 = 0.5;
    if (([v4 doesHaveTraits:kAXAdjustableTrait] & 1) == 0)
    {
      else {
        double v5 = 3.0;
      }
    }
  }

  return v5;
}

- (void)_elementUpdatesFrequently
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager getCurrentElement](self, "getCurrentElement"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
  unsigned __int8 v5 = [v4 ignoreLogging];

  if ((v5 & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
    uint64_t v7 = AXLoggerForFacility(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);

    os_log_type_t v9 = AXOSLogLevelFromAXLogLevel(2LL);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = AXColorizeFormatLog(2LL, @"Updates frequently %@");
      int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v29 = v3;
      uint64_t v12 = _AXStringForArgs(v11);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v8, v9))
      {
        *(_DWORD *)__int128 buf = 138543362;
        unsigned int v32 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}@", buf, 0xCu);
      }
    }
  }

  if ((-[SCRCTargetSelectorTimer isCancelled](self->_elementUpdatesFrequentlyTimer, "isCancelled", v29) & 1) == 0
    && [v3 doesHaveTraits:kAXUpdatesFrequentlyTrait])
  {
    -[VOTElementManager _realTimeAdjustableUpdateFrequency:](self, "_realTimeAdjustableUpdateFrequency:", v3);
    double v15 = v14;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 label]);
    uint64_t v17 = objc_claimAutoreleasedReturnValue([v3 value]);
    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v16, v17));

    NSUInteger v19 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver sharedInstance](&OBJC_CLASS___AXSubsystemVoiceOver, "sharedInstance"));
    LOBYTE(v17) = [v19 ignoreLogging];

    if ((v17 & 1) == 0)
    {
      unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue(+[AXSubsystemVoiceOver identifier](&OBJC_CLASS___AXSubsystemVoiceOver, "identifier"));
      uint64_t v21 = AXLoggerForFacility(v20);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);

      os_log_type_t v23 = AXOSLogLevelFromAXLogLevel(2LL);
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = AXColorizeFormatLog(2LL, @"Updates frequently text %{private}@");
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        id v30 = v18;
        uint64_t v26 = _AXStringForArgs(v25);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v22, v23))
        {
          *(_DWORD *)__int128 buf = 138543362;
          unsigned int v32 = v27;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}@", buf, 0xCu);
        }
      }
    }

    cachedFrequentUpdateText = self->_cachedFrequentUpdateText;
    if (!cachedFrequentUpdateText)
    {
      objc_storeStrong((id *)&self->_cachedFrequentUpdateText, v18);
      cachedFrequentUpdateText = self->_cachedFrequentUpdateText;
    }

    if (!-[NSString isEqualToString:](cachedFrequentUpdateText, "isEqualToString:", v18, v30)
      && -[VOTElementManager _elementMonitoringOutputElement:userMonitored:]( self,  "_elementMonitoringOutputElement:userMonitored:",  v3,  0LL))
    {
      double v15 = v15 / 3.0;
      objc_storeStrong((id *)&self->_cachedFrequentUpdateText, v18);
    }

    -[SCRCTargetSelectorTimer dispatchAfterDelay:](self->_elementUpdatesFrequentlyTimer, "dispatchAfterDelay:", v15);
  }
}

- (void)resetFrequentUpdateTextCache
{
  cachedFrequentUpdateText = self->_cachedFrequentUpdateText;
  self->_cachedFrequentUpdateText = 0LL;
}

- (BOOL)_needsPhoneticBrailleForLanauge:(id)a3
{
  id v3 = a3;
  id v4 = v3;
  if (!v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace selectedLanguage]);
    if (!v4) {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([(id)VOTSharedWorkspace systemSpokenLanguage]);
    }
  }

  else {
    unsigned __int8 v5 = [v4 hasPrefix:@"zh"];
  }

  return v5;
}

- (void)_sendBrailleAlert:(id)a3
{
  id v5 = a3;
  id v3 = +[VOTOutputRequest createRequest](&OBJC_CLASS___VOTOutputRequest, "createRequest");
  id v4 = [v3 addString:v5];
  [v3 setGeneratesBraille:1];
  [v3 setLimitToComponentType:3];
  [v3 setBrailleType:2];
  [v3 send];
}

- (void)moveToElementMatchingRotorType:(int64_t)a3 inDirection:(int64_t)a4
{
}

- (id)elementRotor
{
  return self->_elementRotor;
}

- (void)rotor:(id)a3 didChangeFrom:(int64_t)a4 to:(int64_t)a5 userInitiated:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v17 = (VOTElementRotor *)a3;
  if ((-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_elementManagerThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0 && (-[SCRCThread _debug_currentlyRunningOnThisThread]( self->_systemEventThread,  "_debug_currentlyRunningOnThisThread") & 1) == 0)
  {
    _AXAssert( 0LL,  "/Library/Caches/com.apple.xbs/Sources/VoiceOverTouch/Sources/VOTElementManager.m",  29796LL,  "-[VOTElementManager rotor:didChangeFrom:to:userInitiated:]",  @"must be on element manager or system event thread");
  }

  id v9 = v17;
  if (self->_elementRotor == v17)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AXSettings sharedInstance](&OBJC_CLASS___AXSettings, "sharedInstance"));
    unsigned __int8 v11 = [v10 voiceOverUseTVToggleStyleNavigation];

    if ((v11 & 1) == 0)
    {
      -[SCRCTargetSelectorTimer cancel](self->_updatePreferredTVInteractionModeTimer, "cancel");
      int64_t v12 = -[VOTRotor currentRotorType](self->_elementRotor, "currentRotorType");
      uint64_t v13 = v12;
      switch(v12)
      {
        case '$':
          int64_t v14 = 1LL;
          break;
        case 'U':
          int64_t v14 = 0LL;
          break;
        case 'V':
          int64_t v14 = 2LL;
          break;
        default:
          int64_t v14 = -[VOTElementManager _tvOS_userPreferredNonDirectTouchInteractionMode]( self,  "_tvOS_userPreferredNonDirectTouchInteractionMode");
          break;
      }

      id v9 = [(id)VOTSharedWorkspace setTvInteractionMode:v14];
      if (v6)
      {
        id v9 = (id)sub_1000D4A04(v13);
        if ((_DWORD)v9) {
          id v9 = -[SCRCTargetSelectorTimer dispatchAfterDelay:]( self->_updatePreferredTVInteractionModeTimer,  "dispatchAfterDelay:",  2.0);
        }
      }

      if (a4 == 36)
      {
        double v15 = (void *)objc_claimAutoreleasedReturnValue(-[VOTElementManager nativeFocusElement](self, "nativeFocusElement"));
        -[VOTElementManager _setCurrentElement:](self, "_setCurrentElement:", v15);
      }
    }
  }

  if (_AXSAutomationEnabled(v9))
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    [v16 postNotificationName:@"VoiceOverEventOccurred" object:@"RotorTypeDidChange"];
  }
}

- (int64_t)tvInteractionModeForElementRotor:(id)a3
{
  return (int64_t)objc_msgSend((id)VOTSharedWorkspace, "tvInteractionMode", a3);
}

- (int64_t)actionsRotorAddBehaviorForElementRotor:(id)a3
{
  return 0LL;
}

- (void)outputManagerDidFinishProcessingQueuedRequests:(id)a3
{
}

- (void)outputManager:(id)a3 willProcessNextRequest:(id)a4
{
}

- (id)_lastSeenFontProperties
{
  return self->_lastSeenFontProperties;
}

- (id)_fetchManager
{
  return self->_fetchManager;
}

- (void)_setFetchManager:(id)a3
{
  id v5 = (VOTElementFetcher *)a3;
  fetchManager = self->_fetchManager;
  if (fetchManager != v5)
  {
    uint64_t v7 = v5;
    -[VOTElementFetcher setDelegate:](fetchManager, "setDelegate:", 0LL);
    objc_storeStrong((id *)&self->_fetchManager, a3);
    -[VOTElementFetcher setDelegate:](self->_fetchManager, "setDelegate:", self);
    id v5 = v7;
  }
}

- (void)fillCacheWithElements:(id)a3
{
}

- (VOTElement)touchContainer
{
  return self->_touchContainer;
}

- (void)setTouchContainer:(id)a3
{
}

- (VOTElementUpdateProtocol)updateDelegate
{
  return (VOTElementUpdateProtocol *)objc_loadWeakRetained((id *)&self->_updateDelegate);
}

- (void)setUpdateDelegate:(id)a3
{
}

- (double)timeSpentOnNothing
{
  return self->_timeSpentOnNothing;
}

- (void)setTimeSpentOnNothing:(double)a3
{
  self->_double timeSpentOnNothing = a3;
}

- (double)lastNothingSoundTime
{
  return self->_lastNothingSoundTime;
}

- (void)setLastNothingSoundTime:(double)a3
{
  self->_lastNothingSoundTime = a3;
}

- (double)lastAlertTime
{
  return self->_lastAlertTime;
}

- (void)setLastAlertTime:(double)a3
{
  self->_lastAlertTime = a3;
}

- (double)lastSelectionChangeTime
{
  return self->_lastSelectionChangeTime;
}

- (void)setLastSelectionChangeTime:(double)a3
{
  self->_lastSelectionChangeTime = a3;
}

- (double)lastScreenChangeNotificationTime
{
  return self->_lastScreenChangeNotificationTime;
}

- (void)setLastScreenChangeNotificationTime:(double)a3
{
  self->_double lastScreenChangeNotificationTime = a3;
}

- (double)lastPressOnMediaSessionElement
{
  return self->_lastPressOnMediaSessionElement;
}

- (void)setLastPressOnMediaSessionElement:(double)a3
{
  self->_lastPressOnMediaSessionElement = a3;
}

- (double)touchTypingStartTime
{
  return self->_touchTypingStartTime;
}

- (void)setTouchTypingStartTime:(double)a3
{
  self->_touchTypingStartTime = a3;
}

- (double)lastFirstResponderChangeTime
{
  return self->_lastFirstResponderChangeTime;
}

- (void)setLastFirstResponderChangeTime:(double)a3
{
  self->_lastFirstResponderChangeTime = a3;
}

- (double)lastTemporaryQuickNavDisableTime
{
  return self->_lastTemporaryQuickNavDisableTime;
}

- (void)setLastTemporaryQuickNavDisableTime:(double)a3
{
  self->_lastTemporaryQuickNavDisableTime = a3;
}

- (double)lastEventOccurredTime
{
  return self->_lastEventOccurredTime;
}

- (void)setLastEventOccurredTime:(double)a3
{
  self->_lastEventOccurredTime = a3;
}

- (NSString)lastEventCommand
{
  return self->_lastEventCommand;
}

- (void)setLastEventCommand:(id)a3
{
}

- (double)lastValueChangeTime
{
  return self->_lastValueChangeTime;
}

- (void)setLastValueChangeTime:(double)a3
{
  self->_lastValueChangeTime = a3;
}

- (double)lastWebPageLoadTime
{
  return self->_lastWebPageLoadTime;
}

- (void)setLastWebPageLoadTime:(double)a3
{
  self->_lastWebPageLoadTime = a3;
}

- (double)lastSearchForElementsTime
{
  return self->_lastSearchForElementsTime;
}

- (void)setLastSearchForElementsTime:(double)a3
{
  self->_lastSearchForElementsTime = a3;
}

- (unint64_t)currentSimilarTraits
{
  return self->_currentSimilarTraits;
}

- (void)setCurrentSimilarTraits:(unint64_t)a3
{
  self->_currentSimilarTraits = a3;
}

- (VOTElement)previousFirstResponder
{
  return self->_previousFirstResponder;
}

- (void)setPreviousFirstResponder:(id)a3
{
}

- (NSString)previousFirstResponderValue
{
  return self->_previousFirstResponderValue;
}

- (void)setPreviousFirstResponderValue:(id)a3
{
}

- (NSMutableDictionary)fingersFromTouchCommands
{
  return self->_fingersFromTouchCommands;
}

- (void)setFingersFromTouchCommands:(id)a3
{
}

- (BOOL)didIgnoreLastFirstResponderChangeOnSelectionChange
{
  return self->_didIgnoreLastFirstResponderChangeOnSelectionChange;
}

- (void)setDidIgnoreLastFirstResponderChangeOnSelectionChange:(BOOL)a3
{
  self->_didIgnoreLastFirstResponderChangeOnSelectionChange = a3;
}

- (unint64_t)lastTextPressAction
{
  return self->_lastTextPressAction;
}

- (void)setLastTextPressAction:(unint64_t)a3
{
  self->_unint64_t lastTextPressAction = a3;
}

- (VOTElement)nativeFocusElement
{
  return self->_nativeFocusElement;
}

- (void)setNativeFocusElement:(id)a3
{
}

- (BOOL)tutorialListeningForGestureNotifications
{
  return self->_tutorialListeningForGestureNotifications;
}

- (void)setTutorialListeningForGestureNotifications:(BOOL)a3
{
  self->_tutorialListeningForGestureNotifications = a3;
}

- (NSString)tutorialPage
{
  return self->_tutorialPage;
}

- (void)setTutorialPage:(id)a3
{
}

- (NSMutableArray)tutorialRestrictedCommands
{
  return self->_tutorialRestrictedCommands;
}

- (void)setTutorialRestrictedCommands:(id)a3
{
}

- (int64_t)tutorialActiveRestrictionType
{
  return self->_tutorialActiveRestrictionType;
}

- (void)setTutorialActiveRestrictionType:(int64_t)a3
{
  self->_tutorialActiveRestrictionType = a3;
}

- (NSString)tutorialRecognizedGesture
{
  return self->_tutorialRecognizedGesture;
}

- (void)setTutorialRecognizedGesture:(id)a3
{
}

- (VOTElement)initialReadAllElement
{
  return self->_initialReadAllElement;
}

- (void)setInitialReadAllElement:(id)a3
{
}

- (double)lastLayoutChangeNotificationTime
{
  return self->_lastLayoutChangeNotificationTime;
}

- (void)setLastLayoutChangeNotificationTime:(double)a3
{
  self->_lastLayoutChangeNotificationTime = a3;
}

- (BOOL)unitTestingMode
{
  return self->_unitTestingMode;
}

- (id)elementManagerHandledEventCallback
{
  return self->_elementManagerHandledEventCallback;
}

- (void)setElementManagerHandledEventCallback:(id)a3
{
}

- (id)currentElementChangedCallback
{
  return self->_currentElementChangedCallback;
}

- (void)setCurrentElementChangedCallback:(id)a3
{
}

- (BOOL)tvIsInteractingWithRotor
{
  return self->_tvIsInteractingWithRotor;
}

- (NSArray)previouslySpokenImageCaptionResults
{
  return self->_previouslySpokenImageCaptionResults;
}

- (void)setPreviouslySpokenImageCaptionResults:(id)a3
{
}

- (double)lastCursorBorderHitTime
{
  return self->_lastCursorBorderHitTime;
}

- (void)setLastCursorBorderHitTime:(double)a3
{
  self->_lastCursorBorderHitTime = a3;
}

- (double)lastActivationTime
{
  return self->_lastActivationTime;
}

- (void)setLastActivationTime:(double)a3
{
  self->_lastActivationTime = a3;
}

- (double)lastSilencedAlertTime
{
  return self->_lastSilencedAlertTime;
}

- (void)setLastSilencedAlertTime:(double)a3
{
  self->_lastSilencedAlertTime = a3;
}

- (double)lastScreenWakeViaPlayPause
{
  return self->_lastScreenWakeViaPlayPause;
}

- (void)setLastScreenWakeViaPlayPause:(double)a3
{
  self->_double lastScreenWakeViaPlayPause = a3;
}

- (double)lastExternalUnlockTime
{
  return self->_lastExternalUnlockTime;
}

- (void)setLastExternalUnlockTime:(double)a3
{
  self->_lastExternalUnlockTime = a3;
}

- (double)lastFolderOperationTime
{
  return self->_lastFolderOperationTime;
}

- (void)setLastFolderOperationTime:(double)a3
{
  self->_lastFolderOperationTime = a3;
}

- (double)lastHomeButtonPressTime
{
  return self->_lastHomeButtonPressTime;
}

- (void)setLastHomeButtonPressTime:(double)a3
{
  self->_lastHomeButtonPressTime = a3;
}

- (double)lastBlockedRequestBySiriOrDictationTime
{
  return self->_lastBlockedRequestBySiriOrDictationTime;
}

- (void)setLastBlockedRequestBySiriOrDictationTime:(double)a3
{
  self->_lastBlockedRequestBySiriOrDictationTime = a3;
}

- (double)lastUserElementTouchTime
{
  return self->_lastUserElementTouchTime;
}

- (void)setLastUserElementTouchTime:(double)a3
{
  self->_lastUserElementTouchTime = a3;
}

- (double)lastElementChangeTime
{
  return self->_lastElementChangeTime;
}

- (void)setLastElementChangeTime:(double)a3
{
  self->_lastElementChangeTime = a3;
}

- (VOTElement)nextElementToFocus
{
  return self->_nextElementToFocus;
}

- (void)setNextElementToFocus:(id)a3
{
}

- (NSString)nextStringToSpeakOnScreenChange
{
  return self->_nextStringToSpeakOnScreenChange;
}

- (void)setNextStringToSpeakOnScreenChange:(id)a3
{
}

- (BOOL)screenCurtainIsTemporarilyDisabled
{
  return self->_screenCurtainIsTemporarilyDisabled;
}

- (void)setScreenCurtainIsTemporarilyDisabled:(BOOL)a3
{
  self->_screenCurtainIsTemporarilyDisabled = a3;
}

- (BOOL)didReceiveForceUpdateChangeToken
{
  return self->_didReceiveForceUpdateChangeToken;
}

- (void)setDidReceiveForceUpdateChangeToken:(BOOL)a3
{
  self->_didReceiveForceUpdateChangeToken = a3;
}

- (NSMutableDictionary)previousTableOrCollectionViewToMetadata
{
  return self->_previousTableOrCollectionViewToMetadata;
}

- (void)setPreviousTableOrCollectionViewToMetadata:(id)a3
{
}

- (NSMutableArray)previousTableOrCollectionViewList
{
  return self->_previousTableOrCollectionViewList;
}

- (void)setPreviousTableOrCollectionViewList:(id)a3
{
}

- (VOTElement)previousTableOrCollectionViewApplication
{
  return self->_previousTableOrCollectionViewApplication;
}

- (void)setPreviousTableOrCollectionViewApplication:(id)a3
{
}

- (BOOL)didCacheSideAppDividerElement
{
  return self->_didCacheSideAppDividerElement;
}

- (void)setDidCacheSideAppDividerElement:(BOOL)a3
{
  self->_didCacheSideAppDividerElement = a3;
}

- (VOTElement)cachedSideAppDividerElement
{
  return self->_cachedSideAppDividerElement;
}

- (void)setCachedSideAppDividerElement:(id)a3
{
}

- (NSArray)cachedAdditionalElementCommunities
{
  return self->_cachedAdditionalElementCommunities;
}

- (void)setCachedAdditionalElementCommunities:(id)a3
{
}

- (VOTElement)mostRecentElementCommunity
{
  return self->_mostRecentElementCommunity;
}

- (void)setMostRecentElementCommunity:(id)a3
{
}

- (VOTElement)firstTrackedAppInGesture
{
  return self->_firstTrackedAppInGesture;
}

- (void)setFirstTrackedAppInGesture:(id)a3
{
}

- (NSString)springBoardActionHandlerIdentifier
{
  return self->_springBoardActionHandlerIdentifier;
}

- (void)setSpringBoardActionHandlerIdentifier:(id)a3
{
}

- (BOOL)inTextSelection
{
  return self->_inTextSelection;
}

- (void)setInTextSelection:(BOOL)a3
{
  self->_inTextSelection = a3;
}

- (BOOL)selectingRightward
{
  return self->_selectingRightward;
}

- (void)setSelectingRightward:(BOOL)a3
{
  self->_selectingRightward = a3;
}

- (VOTOutputRequest)delayedNotificationAnnouncementRequest
{
  return self->_delayedNotificationAnnouncementRequest;
}

- (void)setDelayedNotificationAnnouncementRequest:(id)a3
{
}

- (int64_t)lastElementChangeAction
{
  return self->_lastElementChangeAction;
}

- (void)setLastElementChangeAction:(int64_t)a3
{
  self->_lastElementChangeAction = a3;
}

- (VOTElement)lastTrackingUpdateAppsFailureApplication
{
  return self->_lastTrackingUpdateAppsFailureApplication;
}

- (void)setLastTrackingUpdateAppsFailureApplication:(id)a3
{
}

- (double)lastTrackingUpdateAppsFailureTime
{
  return self->_lastTrackingUpdateAppsFailureTime;
}

- (void)setLastTrackingUpdateAppsFailureTime:(double)a3
{
  self->_lastTrackingUpdateAppsFailureTime = a3;
}

- (double)lastDuckingDisablementSessionStart
{
  return self->_lastDuckingDisablementSessionStart;
}

- (void)setLastDuckingDisablementSessionStart:(double)a3
{
  self->_lastDuckingDisablementSessionStart = a3;
}

- (double)lastPauseSpeechAndHapticsStart
{
  return self->_lastPauseSpeechAndHapticsStart;
}

- (void)setLastPauseSpeechAndHapticsStart:(double)a3
{
  self->_lastPauseSpeechAndHapticsStart = a3;
}

- (double)continuousPathTimeout
{
  return self->_continuousPathTimeout;
}

- (void)setContinuousPathTimeout:(double)a3
{
  self->_continuousPathTimeout = a3;
}

- (NSDictionary)previousContextDescriptors
{
  return self->_previousContextDescriptors;
}

- (void)setPreviousContextDescriptors:(id)a3
{
}

- (NSDictionary)currentContextDescriptors
{
  return self->_currentContextDescriptors;
}

- (void)setCurrentContextDescriptors:(id)a3
{
}

- (VOTElement)lastElementForAttemptToShowContextMenu
{
  return self->_lastElementForAttemptToShowContextMenu;
}

- (void)setLastElementForAttemptToShowContextMenu:(id)a3
{
}

- (double)lastAttemptToShowContextMenuTime
{
  return self->_lastAttemptToShowContextMenuTime;
}

- (void)setLastAttemptToShowContextMenuTime:(double)a3
{
  self->_lastAttemptToShowContextMenuTime = a3;
}

- (VOTExplorerElementManager)explorerElementManager
{
  return self->_explorerElementManager;
}

- (void)setExplorerElementManager:(id)a3
{
}

- (VOTTVSpeechRequestManager)tvSpeechRequestManager
{
  return self->_tvSpeechRequestManager;
}

- (void)setTvSpeechRequestManager:(id)a3
{
}

- (VOTTVGestureRepeater)tvGestureRepeater
{
  return self->_tvGestureRepeater;
}

- (void)setTvGestureRepeater:(id)a3
{
}

- (BOOL)isUpdatingFocus
{
  return self->_isUpdatingFocus;
}

- (void)setIsUpdatingFocus:(BOOL)a3
{
  self->_isUpdatingFocus = a3;
}

- (BOOL)needsUpdateFocus
{
  return self->_needsUpdateFocus;
}

- (void)setNeedsUpdateFocus:(BOOL)a3
{
  self->_needsUpdateFocus = a3;
}

- (int64_t)forceUpdateMask
{
  return self->_forceUpdateMask;
}

- (void)setForceUpdateMask:(int64_t)a3
{
  self->_forceUpdateMask = a3;
}

- (int64_t)lastElementHeadingLevel
{
  return self->_lastElementHeadingLevel;
}

- (void)setLastElementHeadingLevel:(int64_t)a3
{
  self->_lastElementHeadingLevel = a3;
}

- (int64_t)lastElementBlockquoteLevel
{
  return self->_lastElementBlockquoteLevel;
}

- (void)setLastElementBlockquoteLevel:(int64_t)a3
{
  self->_lastElementBlockquoteLevel = a3;
}

- (NSLock)tvAccessLock
{
  return self->_tvAccessLock;
}

- (void)setTvAccessLock:(id)a3
{
}

- (VOTUpdateFocusContext)updateFocusContext
{
  return self->_updateFocusContext;
}

- (void)setUpdateFocusContext:(id)a3
{
}

- (int64_t)focusRetryAttempts
{
  return self->_focusRetryAttempts;
}

- (void)setFocusRetryAttempts:(int64_t)a3
{
  self->_focusRetryAttempts = a3;
}

- (BOOL)waitingToRetryFocus
{
  return self->_waitingToRetryFocus;
}

- (void)setWaitingToRetryFocus:(BOOL)a3
{
  self->_waitingToRetryFocus = a3;
}

- (VOTElement)lastContainerForCustomRotorHint
{
  return self->_lastContainerForCustomRotorHint;
}

- (void)setLastContainerForCustomRotorHint:(id)a3
{
}

- (NSSet)previousCustomRotorsForRotorHint
{
  return self->_previousCustomRotorsForRotorHint;
}

- (void)setPreviousCustomRotorsForRotorHint:(id)a3
{
}

- (VOTTextMovementManager)textSelectionMovementManager
{
  return self->_textSelectionMovementManager;
}

- (void)setTextSelectionMovementManager:(id)a3
{
}

- (VOTOutputRequest)lastRequestBlockedBySiriOrDictation
{
  return self->_lastRequestBlockedBySiriOrDictation;
}

- (void)setLastRequestBlockedBySiriOrDictation:(id)a3
{
}

- (unint64_t)elementGeneration
{
  return self->_elementGeneration;
}

- (void)setElementGeneration:(unint64_t)a3
{
  self->_elementGeneration = a3;
}

- (unint64_t)webPageLoadedGenerationMark
{
  return self->_webPageLoadedGenerationMark;
}

- (void)setWebPageLoadedGenerationMark:(unint64_t)a3
{
  self->_webPageLoadedGenerationMark = a3;
}

- (NSURL)webPageLoadURL
{
  return self->_webPageLoadURL;
}

- (void)setWebPageLoadURL:(id)a3
{
}

- (SCRCTargetSelectorTimer)webPageElementFinder
{
  return self->_webPageElementFinder;
}

- (void)setWebPageElementFinder:(id)a3
{
}

- (NSMutableDictionary)directTouchApps
{
  return self->_directTouchApps;
}

- (void)setDirectTouchApps:(id)a3
{
}

- (NSString)lastItemChooserSearchTerm
{
  return self->_lastItemChooserSearchTerm;
}

- (void)setLastItemChooserSearchTerm:(id)a3
{
}

- (AXCameraSceneDescriber)cameraSceneDescriber
{
  return self->_cameraSceneDescriber;
}

- (void)setCameraSceneDescriber:(id)a3
{
}

- (void).cxx_destruct
{
}

@end