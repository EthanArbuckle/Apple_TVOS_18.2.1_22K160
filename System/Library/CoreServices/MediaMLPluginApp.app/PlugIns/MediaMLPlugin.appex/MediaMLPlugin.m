uint64_t one-time initialization function for logger()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;
  v3 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v3, logger);
  __swift_project_value_buffer(v3, (uint64_t)logger);
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MediaML", 0x11uLL, 1);
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DataValidation", 0xEuLL, 1);
  return Logger.init(subsystem:category:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object);
}

{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;
  v3 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v3, static MediaMLPlugin.logger);
  __swift_project_value_buffer(v3, (uint64_t)static MediaMLPlugin.logger);
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "com.apple.MediaMLPluginApp.MediaMLPlugin",  0x28uLL,  1);
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Plugin", 6uLL, 1);
  return Logger.init(subsystem:category:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object);
}

{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;
  v3 = type metadata accessor for Logger(0LL);
  __swift_allocate_value_buffer(v3, static SQLiteDB.logger);
  __swift_project_value_buffer(v3, (uint64_t)static SQLiteDB.logger);
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MediaML", 0x11uLL, 1);
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sql", 3uLL, 1);
  return Logger.init(subsystem:category:)(v0._countAndFlagsBits, v0._object, v1._countAndFlagsBits, v1._object);
}

uint64_t logger.unsafeMutableAddressor()
{
  if (one-time initialization token for logger != -1) {
    swift_once(&one-time initialization token for logger, one-time initialization function for logger);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)logger);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0) {
    return *(void *)a2;
  }
  return v3;
}

Swift::Bool __swiftcall checkValidInterfaceType(data:)(Swift::OpaquePointer data)
{
  uint64_t v10 = 0LL;
  rawValue = data._rawValue;
  char v13 = 0;
  Swift::String v8 = *kMediaML_interfaceType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::String v11 = v8;
  Dictionary.subscript.getter(v12);
  outlined destroy of String((uint64_t)&v11);
  if (v12[3])
  {
    if ((swift_dynamicCast(&v9, v12, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      uint64_t v6 = v9;
      char v7 = 0;
    }

    else
    {
      uint64_t v6 = 0LL;
      char v7 = 1;
    }

    uint64_t v4 = v6;
    char v5 = v7;
  }

  else
  {
    outlined destroy of Any?(v12);
    uint64_t v4 = 0LL;
    char v5 = 1;
  }

  if ((v5 & 1) != 0) {
    return 0;
  }
  uint64_t v10 = v4;
  if (v4 != *kMediaML_InterfaceType_WiFi.unsafeMutableAddressor()
    && v4 != *kMediaML_InterfaceType_Cellular.unsafeMutableAddressor())
  {
    return 0;
  }

  char v13 = 1;
  return 1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  return a1;
}

void *outlined destroy of Any?(void *a1)
{
  if (a1[3]) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(void *a1)
{
  uint64_t v2 = a1[3];
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80LL) & 0x20000) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void *))(*(void *)(v2 - 8) + 8LL))(a1);
  }
}

Swift::Bool __swiftcall checkValidThroughputTrue(data:)(Swift::OpaquePointer data)
{
  double v9 = 0.0;
  rawValue = data._rawValue;
  char v12 = 0;
  Swift::String v7 = *kMediaML_throughputTrue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::String v10 = v7;
  Dictionary.subscript.getter(v11);
  outlined destroy of String((uint64_t)&v10);
  if (v11[3])
  {
    if ((swift_dynamicCast(&v8, v11, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
    {
      double v5 = v8;
      char v6 = 0;
    }

    else
    {
      double v5 = 0.0;
      char v6 = 1;
    }

    double v3 = v5;
    char v4 = v6;
  }

  else
  {
    outlined destroy of Any?(v11);
    double v3 = 0.0;
    char v4 = 1;
  }

  if ((v4 & 1) != 0) {
    return 0;
  }
  double v9 = v3;
  if (v3 <= 0.0) {
    return 0;
  }
  char v12 = 1;
  return 1;
}

Swift::Bool __swiftcall validateAppName(text:)(Swift::String text)
{
  v31 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v25 = 0LL;
  Swift::String v33 = text;
  type metadata accessor for NSRegularExpression();
  Swift::String pattern = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("^[A-Za-z0-9./]{1,155}$", 0x16uLL, 1);
  uint64_t v1 = type metadata accessor for NSRegularExpressionOptions(0LL);
  uint64_t v19 = _allocateUninitializedArray<A>(_:)(0LL, v1);
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  SetAlgebra<>.init(arrayLiteral:)(&v32, v19, v1, v2);
  NSRegularExpression.__allocating_init(pattern:options:)(v3, pattern, v32);
  v21 = v4;
  if (v5)
  {
    Swift::Bool result = swift_unexpectedError(v5, "MediaMLPlugin/DataValidation.swift", 34LL, 1LL, 42LL);
    __break(1u);
  }

  else
  {
    v31 = v4;
    uint64_t v13 = String.count.getter(text._countAndFlagsBits, text._object);
    uint64_t v29 = 0LL;
    uint64_t v30 = v13;
    swift_bridgeObjectRetain(text._object);
    id v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(text._object);
    uint64_t v6 = type metadata accessor for NSMatchingOptions(0LL);
    uint64_t v12 = _allocateUninitializedArray<A>(_:)(0LL, v6);
    unint64_t v7 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
    SetAlgebra<>.init(arrayLiteral:)(&v28, v12, v6, v7);
    uint64_t v26 = 0LL;
    uint64_t v27 = v13;
    id v15 = objc_msgSend(v21, "matchesInString:options:range:", v14, v28, 0, v13);

    unint64_t v8 = type metadata accessor for NSTextCheckingResult();
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v8);
    uint64_t v25 = v16;

    swift_bridgeObjectRetain(v16);
    uint64_t v23 = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSTextCheckingResult]);
    unint64_t v9 = lazy protocol witness table accessor for type [NSTextCheckingResult] and conformance [A]();
    Collection.first.getter(&v24, v17, v9);
    outlined destroy of [NSTextCheckingResult](&v23);
    id v22 = v24;
    BOOL v11 = v24 != 0LL;
    outlined destroy of NSTextCheckingResult?(&v22);
    swift_bridgeObjectRelease(v16);

    return v11;
  }

  return result;
}

unint64_t type metadata accessor for NSRegularExpression()
{
  uint64_t v3 = lazy cache variable for type metadata for NSRegularExpression;
  if (!lazy cache variable for type metadata for NSRegularExpression)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___NSRegularExpression);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSRegularExpression);
    return ObjCClassMetadata;
  }

  return v3;
}

uint64_t type metadata accessor for NSRegularExpressionOptions(uint64_t a1)
{
  uint64_t v5 = lazy cache variable for type metadata for NSRegularExpressionOptions;
  if (!lazy cache variable for type metadata for NSRegularExpressionOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, &unk_100065480);
    uint64_t v5 = ForeignTypeMetadata;
    if (!v1)
    {
      unint64_t v2 = ForeignTypeMetadata;
      atomic_store( ForeignTypeMetadata,  (unint64_t *)&lazy cache variable for type metadata for NSRegularExpressionOptions);
      return v2;
    }
  }

  return v5;
}

unint64_t lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions()
{
  uint64_t v3 = lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions;
  if (!lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions)
  {
    uint64_t v0 = type metadata accessor for NSRegularExpressionOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSRegularExpressionOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions;
  if (!lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions)
  {
    uint64_t v0 = type metadata accessor for NSRegularExpressionOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSRegularExpressionOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions;
  if (!lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions)
  {
    uint64_t v0 = type metadata accessor for NSRegularExpressionOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSRegularExpressionOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions;
  if (!lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions)
  {
    uint64_t v0 = type metadata accessor for NSRegularExpressionOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSRegularExpressionOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions;
  if (!lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions)
  {
    uint64_t v0 = type metadata accessor for NSRegularExpressionOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSRegularExpressionOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions);
    return WitnessTable;
  }

  return v3;
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NSRegularExpression.__allocating_init(pattern:options:)( NSRegularExpression *__return_ptr retstr, Swift::String pattern, NSRegularExpressionOptions options)
{
  uint64_t countAndFlagsBits = pattern._countAndFlagsBits;
  object = pattern._object;
  id v3 = objc_allocWithZone((Class)((Class (*)(NSRegularExpression *__return_ptr))swift_getObjCClassFromMetadata)(retstr));
  @nonobjc NSRegularExpression.init(pattern:options:)(countAndFlagsBits, (uint64_t)object, options);
}

uint64_t type metadata accessor for NSMatchingOptions(uint64_t a1)
{
  uint64_t v5 = lazy cache variable for type metadata for NSMatchingOptions;
  if (!lazy cache variable for type metadata for NSMatchingOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, &unk_100065458);
    uint64_t v5 = ForeignTypeMetadata;
    if (!v1)
    {
      unint64_t v2 = ForeignTypeMetadata;
      atomic_store( ForeignTypeMetadata,  (unint64_t *)&lazy cache variable for type metadata for NSMatchingOptions);
      return v2;
    }
  }

  return v5;
}

unint64_t lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions()
{
  uint64_t v3 = lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions;
  if (!lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions)
  {
    uint64_t v0 = type metadata accessor for NSMatchingOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSMatchingOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions;
  if (!lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions)
  {
    uint64_t v0 = type metadata accessor for NSMatchingOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSMatchingOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions;
  if (!lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions)
  {
    uint64_t v0 = type metadata accessor for NSMatchingOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSMatchingOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions;
  if (!lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions)
  {
    uint64_t v0 = type metadata accessor for NSMatchingOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSMatchingOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions;
  if (!lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions)
  {
    uint64_t v0 = type metadata accessor for NSMatchingOptions(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSMatchingOptions, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type NSMatchingOptions and conformance NSMatchingOptions);
    return WitnessTable;
  }

  return v3;
}

unint64_t type metadata accessor for NSTextCheckingResult()
{
  uint64_t v3 = lazy cache variable for type metadata for NSTextCheckingResult;
  if (!lazy cache variable for type metadata for NSTextCheckingResult)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___NSTextCheckingResult);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSTextCheckingResult);
    return ObjCClassMetadata;
  }

  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2((char *)a1 + (int)*a1, -(*a1 >> 32), 0LL);
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }

  return v4;
}

unint64_t lazy protocol witness table accessor for type [NSTextCheckingResult] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [NSTextCheckingResult] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSTextCheckingResult] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NSTextCheckingResult]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [NSTextCheckingResult] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)*a1,  -(*a1 >> 32),  0LL);
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }

  return v4;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NSTextCheckingResult]( void *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSTextCheckingResult?( id *a1)
{
}

Swift::Bool __swiftcall validateSessionID(text:)(Swift::String text)
{
  v31 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v25 = 0LL;
  Swift::String v33 = text;
  type metadata accessor for NSRegularExpression();
  Swift::String pattern = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$",  0x3EuLL,  1);
  uint64_t v1 = type metadata accessor for NSRegularExpressionOptions(0LL);
  uint64_t v19 = _allocateUninitializedArray<A>(_:)(0LL, v1);
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  SetAlgebra<>.init(arrayLiteral:)(&v32, v19, v1, v2);
  NSRegularExpression.__allocating_init(pattern:options:)(v3, pattern, v32);
  v21 = v4;
  if (v5)
  {
    Swift::Bool result = swift_unexpectedError(v5, "MediaMLPlugin/DataValidation.swift", 34LL, 1LL, 50LL);
    __break(1u);
  }

  else
  {
    v31 = v4;
    uint64_t v13 = String.count.getter(text._countAndFlagsBits, text._object);
    uint64_t v29 = 0LL;
    uint64_t v30 = v13;
    swift_bridgeObjectRetain(text._object);
    id v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(text._object);
    uint64_t v6 = type metadata accessor for NSMatchingOptions(0LL);
    uint64_t v12 = _allocateUninitializedArray<A>(_:)(0LL, v6);
    unint64_t v7 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
    SetAlgebra<>.init(arrayLiteral:)(&v28, v12, v6, v7);
    uint64_t v26 = 0LL;
    uint64_t v27 = v13;
    id v15 = objc_msgSend(v21, "matchesInString:options:range:", v14, v28, 0, v13);

    unint64_t v8 = type metadata accessor for NSTextCheckingResult();
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v8);
    uint64_t v25 = v16;

    swift_bridgeObjectRetain(v16);
    uint64_t v23 = v16;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSTextCheckingResult]);
    unint64_t v9 = lazy protocol witness table accessor for type [NSTextCheckingResult] and conformance [A]();
    Collection.first.getter(&v24, v17, v9);
    outlined destroy of [NSTextCheckingResult](&v23);
    id v22 = v24;
    BOOL v11 = v24 != 0LL;
    outlined destroy of NSTextCheckingResult?(&v22);
    swift_bridgeObjectRelease(v16);

    return v11;
  }

  return result;
}

Swift::Bool __swiftcall validateSSID(text:)(Swift::String text)
{
  uint64_t countAndFlagsBits = text._countAndFlagsBits;
  object = text._object;
  uint64_t v34 = 0LL;
  uint64_t v29 = 0LL;
  Swift::String v36 = text;
  char v35 = 0;
  Swift::Int v30 = String.count.getter(text._countAndFlagsBits, text._object);
  BOOL v32 = *maxSSIDLength.unsafeMutableAddressor() >= v30;
  swift_bridgeObjectRetain(object);
  if (v32)
  {
    Swift::Int v26 = String.count.getter(countAndFlagsBits, object);
    BOOL v27 = v26 < *minSSIDLength.unsafeMutableAddressor();
  }

  else
  {
    BOOL v27 = 1;
  }

  BOOL v25 = v27;
  swift_bridgeObjectRelease(object);
  if (v27)
  {
    int v24 = 0;
  }

  else
  {
    uint64_t v17 = &type metadata for String;
    uint64_t v16 = _allocateUninitializedArray<A>(_:)(3LL, &type metadata for String);
    id v15 = v1;
    uint64_t v13 = 6LL;
    int v14 = 1;
    *uint64_t v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("select", 6uLL, 1);
    Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("delete", 6uLL, 1);
    char v3 = v14;
    v15[1] = v2;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("drop table", 0xAuLL, v3 & 1);
    uint64_t v5 = v16;
    v15[2] = v4;
    _finalizeUninitializedArray<A>(_:)();
    uint64_t v18 = v5;
    uint64_t v34 = v5;
    uint64_t v33 = v5;
    swift_bridgeObjectRetain(object);
    uint64_t v19 = &v10;
    uint64_t v20 = 32LL;
    __chkstk_darwin();
    uint64_t v6 = (char *)&v10 - v20;
    v21 = v6;
    *((void *)v6 + 2) = countAndFlagsBits;
    *((void *)v6 + 3) = v7;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v8 = lazy protocol witness table accessor for type [String] and conformance [A]();
    int v23 = Sequence.contains(where:)(partial apply for closure #1 in validateSSID(text:), v21, v22, v8);
    int v11 = v23;
    swift_bridgeObjectRelease(object);
    int v12 = v11 ^ 1;
    char v35 = (v11 ^ 1) & 1;
    swift_bridgeObjectRelease(v18);
    int v24 = v12;
  }

  return v24 & 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
}

uint64_t closure #1 in validateSSID(text:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v5 = a1[1];
  uint64_t v12 = *a1;
  uint64_t v13 = v5;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  Swift::String v9 = String.lowercased()();
  v8[0] = v12;
  v8[1] = v5;
  unint64_t v6 = lazy protocol witness table accessor for type String and conformance String();
  unint64_t v3 = lazy protocol witness table accessor for type String and conformance String();
  char v7 = BidirectionalCollection<>.starts<A>(with:)(v8, &type metadata for String, &type metadata for String, v6, v3);
  outlined destroy of String((uint64_t)&v9);
  return v7 & 1;
}

uint64_t partial apply for closure #1 in validateSSID(text:)(uint64_t *a1)
{
  return closure #1 in validateSSID(text:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

Swift::Bool __swiftcall checkValidTextInputs(data:)(Swift::OpaquePointer data)
{
  rawValue = data._rawValue;
  uint64_t v282 = 0LL;
  char v281 = 0;
  uint64_t v277 = 0LL;
  v278 = 0LL;
  uint64_t v225 = 0LL;
  uint64_t v266 = 0LL;
  v267 = 0LL;
  uint64_t v249 = 0LL;
  v250 = 0LL;
  uint64_t v226 = type metadata accessor for Logger(0LL);
  uint64_t v227 = *(void *)(v226 - 8);
  unint64_t v228 = (*(void *)(v227 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v1 = __chkstk_darwin(rawValue);
  v229 = (char *)&v98 - v228;
  unint64_t v230 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v1);
  v231 = (char *)&v98 - v230;
  unint64_t v232 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = __chkstk_darwin(v3);
  v233 = (char *)&v98 - v232;
  uint64_t v282 = v5;
  char v281 = 0;
  Swift::String v234 = *kMediaML_appName.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v234._object);
  v236 = &v279;
  Swift::String v279 = v234;
  Dictionary.subscript.getter(v280);
  outlined destroy of String((uint64_t)v236);
  if (v280[3])
  {
    if ((swift_dynamicCast(v237, v280, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v223 = v237[0];
      v224 = (void *)v237[1];
    }

    else
    {
      uint64_t v223 = 0LL;
      v224 = 0LL;
    }

    uint64_t v221 = v223;
    v222 = v224;
  }

  else
  {
    v99 = 0LL;
    outlined destroy of Any?(v280);
    uint64_t v221 = (uint64_t)v99;
    v222 = v99;
  }

  v219 = v222;
  uint64_t v220 = v221;
  if (!v222)
  {
    int v155 = 0;
    return v155 & 1;
  }

  uint64_t v217 = v220;
  v218 = v219;
  v6._uint64_t countAndFlagsBits = v220;
  v6._object = v219;
  v215 = v219;
  uint64_t v216 = v220;
  uint64_t v277 = v220;
  v278 = v219;
  if (validateAppName(text:)(v6))
  {
    Swift::String v213 = *kMediaML_sessionID.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v213._object);
    v214 = &v268;
    Swift::String v268 = v213;
    Dictionary.subscript.getter(v269);
    outlined destroy of String((uint64_t)v214);
    if (v269[3])
    {
      if ((swift_dynamicCast(v238, v269, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v211 = v238[0];
        v212 = (void *)v238[1];
      }

      else
      {
        uint64_t v211 = 0LL;
        v212 = 0LL;
      }

      uint64_t v209 = v211;
      v210 = v212;
    }

    else
    {
      v126 = 0LL;
      outlined destroy of Any?(v269);
      uint64_t v209 = (uint64_t)v126;
      v210 = v126;
    }

    v207 = v210;
    uint64_t v208 = v209;
    if (!v210)
    {
      swift_bridgeObjectRelease(v215);
      int v155 = 0;
      return v155 & 1;
    }

    uint64_t v205 = v208;
    v206 = v207;
    v7._uint64_t countAndFlagsBits = v208;
    v7._object = v207;
    v203 = v207;
    uint64_t v204 = v208;
    uint64_t v266 = v208;
    v267 = v207;
    if (validateSessionID(text:)(v7))
    {
      Swift::String v201 = *kMediaML_interfaceType.unsafeMutableAddressor();
      swift_bridgeObjectRetain(v201._object);
      v202 = &v257;
      Swift::String v257 = v201;
      Dictionary.subscript.getter(v258);
      outlined destroy of String((uint64_t)v202);
      if (v258[3])
      {
        if ((swift_dynamicCast(&v239, v258, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
        {
          uint64_t v199 = v239;
          int v200 = 0;
        }

        else
        {
          uint64_t v199 = 0LL;
          int v200 = 1;
        }

        uint64_t v197 = v199;
        int v198 = v200;
      }

      else
      {
        uint64_t v153 = 0LL;
        outlined destroy of Any?(v258);
        uint64_t v197 = v153;
        int v198 = 1;
      }

      int v196 = v198;
      uint64_t v195 = v197;
      Swift::Int v8 = *kMediaML_InterfaceType_WiFi.unsafeMutableAddressor();
      uint64_t v253 = v195;
      char v254 = v196 & 1;
      Swift::Int v255 = v8;
      char v256 = 0;
      if (!((v196 & 1) == 0
          && (outlined init with copy of Int?((uint64_t)&v253, (uint64_t)&v240), (v256 & 1) == 0)
          && v240 == v255))
        goto LABEL_45;
      Swift::String v192 = *kMediaML_ssid.unsafeMutableAddressor();
      swift_bridgeObjectRetain(v192._object);
      v193 = &v251;
      Swift::String v251 = v192;
      Dictionary.subscript.getter(v252);
      outlined destroy of String((uint64_t)v193);
      if (v252[3])
      {
        if ((swift_dynamicCast(v241, v252, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v190 = v241[0];
          v191 = (void *)v241[1];
        }

        else
        {
          uint64_t v190 = 0LL;
          v191 = 0LL;
        }

        uint64_t v188 = v190;
        v189 = v191;
      }

      else
      {
        v154 = 0LL;
        outlined destroy of Any?(v252);
        uint64_t v188 = (uint64_t)v154;
        v189 = v154;
      }

      v186 = v189;
      uint64_t v187 = v188;
      if (v189)
      {
        uint64_t v184 = v187;
        v185 = v186;
        v9._uint64_t countAndFlagsBits = v187;
        v9._object = v186;
        v182 = v186;
        uint64_t v183 = v187;
        uint64_t v249 = v187;
        v250 = v186;
        if (validateSSID(text:)(v9))
        {
          swift_bridgeObjectRelease(v182);
LABEL_45:
          char v281 = 1;
          swift_bridgeObjectRelease(v203);
          swift_bridgeObjectRelease(v215);
          int v155 = 1;
          return v155 & 1;
        }

        uint64_t v10 = v233;
        uint64_t v11 = logger.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v10, v11, v226);
        swift_bridgeObjectRetain(v182);
        uint64_t v170 = 32LL;
        uint64_t v171 = 7LL;
        uint64_t v12 = swift_allocObject(&unk_100064BC0, 32LL, 7LL);
        uint64_t v13 = v182;
        uint64_t v172 = v12;
        *(void *)(v12 + 16) = v183;
        *(void *)(v12 + 24) = v13;
        v180 = (os_log_s *)Logger.logObject.getter();
        int v181 = static os_log_type_t.error.getter();
        v167 = &v247;
        uint64_t v247 = 12LL;
        unint64_t v165 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v166 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v14 = lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)(&v248, v167, &type metadata for UInt32, &type metadata for Int, v165, v166, v14);
        uint32_t v168 = v248;
        uint64_t v169 = 17LL;
        uint64_t v15 = swift_allocObject(&unk_100064BE8, 17LL, v171);
        uint64_t v16 = v169;
        uint64_t v17 = v171;
        uint64_t v174 = v15;
        *(_BYTE *)(v15 + 16) = 32;
        uint64_t v18 = swift_allocObject(&unk_100064C10, v16, v17);
        uint64_t v19 = v170;
        uint64_t v20 = v171;
        uint64_t v175 = v18;
        *(_BYTE *)(v18 + 16) = 8;
        uint64_t v21 = swift_allocObject(&unk_100064C38, v19, v20);
        uint64_t v22 = v170;
        uint64_t v23 = v171;
        uint64_t v24 = v21;
        uint64_t v25 = v172;
        uint64_t v173 = v24;
        *(void *)(v24 + 16) = partial apply for implicit closure #3 in checkValidTextInputs(data:);
        *(void *)(v24 + 24) = v25;
        uint64_t v26 = swift_allocObject(&unk_100064C60, v22, v23);
        uint64_t v27 = v173;
        uint64_t v177 = v26;
        *(void *)(v26 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v26 + 24) = v27;
        uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v176 = _allocateUninitializedArray<A>(_:)(3LL, v179);
        v178 = v28;
        swift_retain(v174);
        uint64_t v29 = v175;
        uint64_t v30 = v174;
        v31 = v178;
        void *v178 = closure #1 in OSLogArguments.append(_:)partial apply;
        v31[1] = v30;
        swift_retain(v29);
        uint64_t v32 = v177;
        uint64_t v33 = v175;
        uint64_t v34 = v178;
        v178[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v34[3] = v33;
        swift_retain(v32);
        uint64_t v35 = v176;
        uint64_t v36 = v177;
        v37 = v178;
        v178[4] = closure #1 in OSLogArguments.append(_:)partial apply;
        v37[5] = v36;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease(v35);
        if (os_log_type_enabled(v180, (os_log_type_t)v181))
        {
          uint64_t v38 = v225;
          v158 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
          uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v159 = createStorage<A>(capacity:type:)(0LL, v157, v157);
          uint64_t v160 = createStorage<A>(capacity:type:)( 1LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
          v161 = &v246;
          v246 = v158;
          v162 = &v245;
          uint64_t v245 = v159;
          v163 = &v244;
          uint64_t v244 = v160;
          serialize(_:at:)(2LL, &v246);
          serialize(_:at:)(1LL, v161);
          v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v243 = v174;
          closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)v161, (uint64_t)v162, (uint64_t)v163);
          uint64_t v164 = v38;
          if (v38)
          {
            __break(1u);
          }

          else
          {
            v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            uint64_t v243 = v175;
            closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
            uint64_t v156 = 0LL;
            v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            uint64_t v243 = v177;
            closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
            _os_log_impl( (void *)&_mh_execute_header,  v180,  (os_log_type_t)v181,  "ssid in data directory failed validation: %s",  v158,  v168);
            destroyStorage<A>(_:count:)(v159, 0LL);
            destroyStorage<A>(_:count:)(v160, 1LL);
            UnsafeMutablePointer.deallocate()();
            swift_release(v174);
            swift_release(v175);
            swift_release(v177);
          }
        }

        else
        {
          swift_release(v174);
          swift_release(v175);
          swift_release(v177);
        }

        (*(void (**)(char *, uint64_t))(v227 + 8))(v233, v226);
        swift_bridgeObjectRelease(v182);
        swift_bridgeObjectRelease(v203);
        swift_bridgeObjectRelease(v215);
        int v155 = 0;
      }

      else
      {
        swift_bridgeObjectRelease(v203);
        swift_bridgeObjectRelease(v215);
        int v155 = 0;
      }
    }

    else
    {
      v39 = v231;
      uint64_t v40 = logger.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v39, v40, v226);
      swift_bridgeObjectRetain(v203);
      uint64_t v141 = 32LL;
      uint64_t v142 = 7LL;
      uint64_t v41 = swift_allocObject(&unk_100064AF8, 32LL, 7LL);
      v42 = v203;
      uint64_t v143 = v41;
      *(void *)(v41 + 16) = v204;
      *(void *)(v41 + 24) = v42;
      v151 = (os_log_s *)Logger.logObject.getter();
      int v152 = static os_log_type_t.error.getter();
      v138 = &v264;
      uint64_t v264 = 12LL;
      unint64_t v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v137 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v43 = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)(&v265, v138, &type metadata for UInt32, &type metadata for Int, v136, v137, v43);
      uint32_t v139 = v265;
      uint64_t v140 = 17LL;
      uint64_t v44 = swift_allocObject(&unk_100064B20, 17LL, v142);
      uint64_t v45 = v140;
      uint64_t v46 = v142;
      uint64_t v145 = v44;
      *(_BYTE *)(v44 + 16) = 32;
      uint64_t v47 = swift_allocObject(&unk_100064B48, v45, v46);
      uint64_t v48 = v141;
      uint64_t v49 = v142;
      uint64_t v146 = v47;
      *(_BYTE *)(v47 + 16) = 8;
      uint64_t v50 = swift_allocObject(&unk_100064B70, v48, v49);
      uint64_t v51 = v141;
      uint64_t v52 = v142;
      uint64_t v53 = v50;
      uint64_t v54 = v143;
      uint64_t v144 = v53;
      *(void *)(v53 + 16) = partial apply for implicit closure #2 in checkValidTextInputs(data:);
      *(void *)(v53 + 24) = v54;
      uint64_t v55 = swift_allocObject(&unk_100064B98, v51, v52);
      uint64_t v56 = v144;
      uint64_t v148 = v55;
      *(void *)(v55 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v55 + 24) = v56;
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v147 = _allocateUninitializedArray<A>(_:)(3LL, v150);
      v149 = v57;
      swift_retain(v145);
      uint64_t v58 = v146;
      uint64_t v59 = v145;
      v60 = v149;
      void *v149 = closure #1 in OSLogArguments.append(_:)partial apply;
      v60[1] = v59;
      swift_retain(v58);
      uint64_t v61 = v148;
      uint64_t v62 = v146;
      v63 = v149;
      v149[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v63[3] = v62;
      swift_retain(v61);
      uint64_t v64 = v147;
      uint64_t v65 = v148;
      v66 = v149;
      v149[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v66[5] = v65;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease(v64);
      if (os_log_type_enabled(v151, (os_log_type_t)v152))
      {
        uint64_t v67 = v225;
        v129 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
        uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v130 = createStorage<A>(capacity:type:)(0LL, v128, v128);
        uint64_t v131 = createStorage<A>(capacity:type:)( 1LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
        v132 = &v263;
        v263 = v129;
        v133 = &v262;
        uint64_t v262 = v130;
        v134 = &v261;
        uint64_t v261 = v131;
        serialize(_:at:)(2LL, &v263);
        serialize(_:at:)(1LL, v132);
        v259 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v260 = v145;
        closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)v132, (uint64_t)v133, (uint64_t)v134);
        uint64_t v135 = v67;
        if (v67)
        {
          __break(1u);
        }

        else
        {
          v259 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v260 = v146;
          closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)&v263, (uint64_t)&v262, (uint64_t)&v261);
          uint64_t v127 = 0LL;
          v259 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v260 = v148;
          closure #1 in osLogInternal(_:log:type:)(&v259, (uint64_t)&v263, (uint64_t)&v262, (uint64_t)&v261);
          _os_log_impl( (void *)&_mh_execute_header,  v151,  (os_log_type_t)v152,  "sessionID in data directory failed validation: %s",  v129,  v139);
          destroyStorage<A>(_:count:)(v130, 0LL);
          destroyStorage<A>(_:count:)(v131, 1LL);
          UnsafeMutablePointer.deallocate()();
          swift_release(v145);
          swift_release(v146);
          swift_release(v148);
        }
      }

      else
      {
        swift_release(v145);
        swift_release(v146);
        swift_release(v148);
      }

      (*(void (**)(char *, uint64_t))(v227 + 8))(v231, v226);
      swift_bridgeObjectRelease(v203);
      swift_bridgeObjectRelease(v215);
      int v155 = 0;
    }
  }

  else
  {
    v68 = v229;
    uint64_t v69 = logger.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v227 + 16))(v68, v69, v226);
    swift_bridgeObjectRetain(v215);
    uint64_t v114 = 32LL;
    uint64_t v115 = 7LL;
    uint64_t v70 = swift_allocObject(&unk_100064A30, 32LL, 7LL);
    v71 = v215;
    uint64_t v116 = v70;
    *(void *)(v70 + 16) = v216;
    *(void *)(v70 + 24) = v71;
    v124 = (os_log_s *)Logger.logObject.getter();
    int v125 = static os_log_type_t.error.getter();
    v111 = &v275;
    uint64_t v275 = 12LL;
    unint64_t v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v72 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)(&v276, v111, &type metadata for UInt32, &type metadata for Int, v109, v110, v72);
    uint32_t v112 = v276;
    uint64_t v113 = 17LL;
    uint64_t v73 = swift_allocObject(&unk_100064A58, 17LL, v115);
    uint64_t v74 = v113;
    uint64_t v75 = v115;
    uint64_t v118 = v73;
    *(_BYTE *)(v73 + 16) = 32;
    uint64_t v76 = swift_allocObject(&unk_100064A80, v74, v75);
    uint64_t v77 = v114;
    uint64_t v78 = v115;
    uint64_t v119 = v76;
    *(_BYTE *)(v76 + 16) = 8;
    uint64_t v79 = swift_allocObject(&unk_100064AA8, v77, v78);
    uint64_t v80 = v114;
    uint64_t v81 = v115;
    uint64_t v82 = v79;
    uint64_t v83 = v116;
    uint64_t v117 = v82;
    *(void *)(v82 + 16) = partial apply for implicit closure #1 in checkValidTextInputs(data:);
    *(void *)(v82 + 24) = v83;
    uint64_t v84 = swift_allocObject(&unk_100064AD0, v80, v81);
    uint64_t v85 = v117;
    uint64_t v121 = v84;
    *(void *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v84 + 24) = v85;
    uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v120 = _allocateUninitializedArray<A>(_:)(3LL, v123);
    v122 = v86;
    swift_retain(v118);
    uint64_t v87 = v119;
    uint64_t v88 = v118;
    v89 = v122;
    void *v122 = partial apply for closure #1 in OSLogArguments.append(_:);
    v89[1] = v88;
    swift_retain(v87);
    uint64_t v90 = v121;
    uint64_t v91 = v119;
    v92 = v122;
    v122[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v92[3] = v91;
    swift_retain(v90);
    uint64_t v93 = v120;
    uint64_t v94 = v121;
    v95 = v122;
    v122[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v95[5] = v94;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease(v93);
    if (os_log_type_enabled(v124, (os_log_type_t)v125))
    {
      uint64_t v96 = v225;
      v102 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
      uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v103 = createStorage<A>(capacity:type:)(0LL, v101, v101);
      uint64_t v104 = createStorage<A>(capacity:type:)( 1LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      v105 = &v274;
      v274 = v102;
      v106 = &v273;
      uint64_t v273 = v103;
      v107 = &v272;
      uint64_t v272 = v104;
      serialize(_:at:)(2LL, &v274);
      serialize(_:at:)(1LL, v105);
      v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v271 = v118;
      closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)v105, (uint64_t)v106, (uint64_t)v107);
      uint64_t v108 = v96;
      if (v96)
      {
        __break(1u);
      }

      else
      {
        v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v271 = v119;
        closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)&v274, (uint64_t)&v273, (uint64_t)&v272);
        uint64_t v100 = 0LL;
        v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v271 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)&v274, (uint64_t)&v273, (uint64_t)&v272);
        _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v125,  "AppName in data directory failed validation: %s",  v102,  v112);
        destroyStorage<A>(_:count:)(v103, 0LL);
        destroyStorage<A>(_:count:)(v104, 1LL);
        UnsafeMutablePointer.deallocate()();
        swift_release(v118);
        swift_release(v119);
        swift_release(v121);
      }
    }

    else
    {
      swift_release(v118);
      swift_release(v119);
      swift_release(v121);
    }

    (*(void (**)(char *, uint64_t))(v227 + 8))(v229, v226);
    swift_bridgeObjectRelease(v215);
    int v155 = 0;
  }

  return v155 & 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #1 in checkValidTextInputs(data:)()
{
}

uint64_t sub_1000068EC()
{
  return swift_deallocObject(v2, 32LL, 7LL);
}

uint64_t partial apply for implicit closure #1 in checkValidTextInputs(data:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #1 in checkValidTextInputs(data:)();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #2 in checkValidTextInputs(data:)()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in checkValidTextInputs(data:)()
{
}

Swift::Bool __swiftcall checkValidNumericInputRange(data:)(Swift::OpaquePointer data)
{
  rawValue = data._rawValue;
  uint64_t v737 = 0LL;
  char v736 = 0;
  Swift::Int v730 = 0LL;
  Swift::Int v724 = 0LL;
  Swift::Int v718 = 0LL;
  Swift::Int v712 = 0LL;
  Swift::Int v706 = 0LL;
  Swift::Int v700 = 0LL;
  double v694 = 0.0;
  double v688 = 0.0;
  Swift::Int v682 = 0LL;
  uint64_t v585 = 0LL;
  uint64_t v586 = type metadata accessor for Logger(0LL);
  uint64_t v587 = *(void *)(v586 - 8);
  uint64_t v588 = *(void *)(v587 + 64);
  unint64_t v589 = (v588 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v1 = __chkstk_darwin(rawValue);
  v590 = (char *)&v253 - v589;
  unint64_t v591 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v1);
  v592 = (char *)&v253 - v591;
  unint64_t v593 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = __chkstk_darwin(v3);
  v594 = (char *)&v253 - v593;
  unint64_t v595 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v7 = __chkstk_darwin(v5);
  v596 = (char *)&v253 - v595;
  unint64_t v597 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v9 = __chkstk_darwin(v7);
  v598 = (char *)&v253 - v597;
  unint64_t v599 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v11 = __chkstk_darwin(v9);
  v600 = (char *)&v253 - v599;
  unint64_t v601 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v13 = __chkstk_darwin(v11);
  v602 = (char *)&v253 - v601;
  unint64_t v603 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v15 = __chkstk_darwin(v13);
  v604 = (char *)&v253 - v603;
  unint64_t v605 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v17 = __chkstk_darwin(v15);
  v606 = (char *)&v253 - v605;
  uint64_t v737 = v17;
  char v736 = 0;
  Swift::String v607 = *kMediaML_rssi.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v607._object);
  v609 = &v733;
  Swift::String v733 = v607;
  Dictionary.subscript.getter(v734);
  outlined destroy of String((uint64_t)v609);
  if (v734[3])
  {
    if ((swift_dynamicCast(&v610, v734, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v583 = v610;
      int v584 = 0;
    }

    else
    {
      Swift::Int v583 = 0LL;
      int v584 = 1;
    }

    Swift::Int v581 = v583;
    int v582 = v584;
  }

  else
  {
    Swift::Int v253 = 0LL;
    outlined destroy of Any?(v734);
    Swift::Int v581 = v253;
    int v582 = 1;
  }

  Swift::Int v731 = v581;
  char v732 = v582 & 1;
  if ((v582 & 1) != 0) {
    Swift::Int v735 = 0LL;
  }
  else {
    Swift::Int v735 = v731;
  }
  Swift::Int v578 = v735;
  Swift::Int v730 = v735;
  Swift::String v579 = *kMediaML_rsrp.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v579._object);
  v580 = &v727;
  Swift::String v727 = v579;
  Dictionary.subscript.getter(v728);
  outlined destroy of String((uint64_t)v580);
  if (v728[3])
  {
    if ((swift_dynamicCast(&v611, v728, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v576 = v611;
      int v577 = 0;
    }

    else
    {
      Swift::Int v576 = 0LL;
      int v577 = 1;
    }

    Swift::Int v574 = v576;
    int v575 = v577;
  }

  else
  {
    Swift::Int v254 = 0LL;
    outlined destroy of Any?(v728);
    Swift::Int v574 = v254;
    int v575 = 1;
  }

  Swift::Int v725 = v574;
  char v726 = v575 & 1;
  if ((v575 & 1) != 0) {
    Swift::Int v729 = 0LL;
  }
  else {
    Swift::Int v729 = v725;
  }
  Swift::Int v571 = v729;
  Swift::Int v724 = v729;
  Swift::String v572 = *kMediaML_rsrq.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v572._object);
  v573 = &v721;
  Swift::String v721 = v572;
  Dictionary.subscript.getter(v722);
  outlined destroy of String((uint64_t)v573);
  if (v722[3])
  {
    if ((swift_dynamicCast(&v612, v722, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v569 = v612;
      int v570 = 0;
    }

    else
    {
      Swift::Int v569 = 0LL;
      int v570 = 1;
    }

    Swift::Int v567 = v569;
    int v568 = v570;
  }

  else
  {
    Swift::Int v255 = 0LL;
    outlined destroy of Any?(v722);
    Swift::Int v567 = v255;
    int v568 = 1;
  }

  Swift::Int v719 = v567;
  char v720 = v568 & 1;
  if ((v568 & 1) != 0) {
    Swift::Int v723 = 0LL;
  }
  else {
    Swift::Int v723 = v719;
  }
  Swift::Int v564 = v723;
  Swift::Int v718 = v723;
  Swift::String v565 = *kMediaML_rscp.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v565._object);
  v566 = &v715;
  Swift::String v715 = v565;
  Dictionary.subscript.getter(v716);
  outlined destroy of String((uint64_t)v566);
  if (v716[3])
  {
    if ((swift_dynamicCast(&v613, v716, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v562 = v613;
      int v563 = 0;
    }

    else
    {
      Swift::Int v562 = 0LL;
      int v563 = 1;
    }

    Swift::Int v560 = v562;
    int v561 = v563;
  }

  else
  {
    Swift::Int v256 = 0LL;
    outlined destroy of Any?(v716);
    Swift::Int v560 = v256;
    int v561 = 1;
  }

  Swift::Int v713 = v560;
  char v714 = v561 & 1;
  if ((v561 & 1) != 0) {
    Swift::Int v717 = 0LL;
  }
  else {
    Swift::Int v717 = v713;
  }
  Swift::Int v557 = v717;
  Swift::Int v712 = v717;
  Swift::String v558 = *kMediaML_noise.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v558._object);
  v559 = &v709;
  Swift::String v709 = v558;
  Dictionary.subscript.getter(v710);
  outlined destroy of String((uint64_t)v559);
  if (v710[3])
  {
    if ((swift_dynamicCast(&v614, v710, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v555 = v614;
      int v556 = 0;
    }

    else
    {
      Swift::Int v555 = 0LL;
      int v556 = 1;
    }

    Swift::Int v553 = v555;
    int v554 = v556;
  }

  else
  {
    Swift::Int v257 = 0LL;
    outlined destroy of Any?(v710);
    Swift::Int v553 = v257;
    int v554 = 1;
  }

  Swift::Int v707 = v553;
  char v708 = v554 & 1;
  if ((v554 & 1) != 0) {
    Swift::Int v711 = 0LL;
  }
  else {
    Swift::Int v711 = v707;
  }
  Swift::Int v550 = v711;
  Swift::Int v706 = v711;
  Swift::String v551 = *kMediaML_bars.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v551._object);
  v552 = &v703;
  Swift::String v703 = v551;
  Dictionary.subscript.getter(v704);
  outlined destroy of String((uint64_t)v552);
  if (v704[3])
  {
    if ((swift_dynamicCast(&v615, v704, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v548 = v615;
      int v549 = 0;
    }

    else
    {
      Swift::Int v548 = 0LL;
      int v549 = 1;
    }

    Swift::Int v546 = v548;
    int v547 = v549;
  }

  else
  {
    Swift::Int v258 = 0LL;
    outlined destroy of Any?(v704);
    Swift::Int v546 = v258;
    int v547 = 1;
  }

  Swift::Int v701 = v546;
  char v702 = v547 & 1;
  if ((v547 & 1) != 0) {
    Swift::Int v705 = 0LL;
  }
  else {
    Swift::Int v705 = v701;
  }
  Swift::Int v543 = v705;
  Swift::Int v700 = v705;
  Swift::String v544 = *kMediaML_rxRate.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v544._object);
  v545 = &v697;
  Swift::String v697 = v544;
  Dictionary.subscript.getter(v698);
  outlined destroy of String((uint64_t)v545);
  if (v698[3])
  {
    if ((swift_dynamicCast(&v616, v698, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
    {
      double v541 = v616;
      int v542 = 0;
    }

    else
    {
      double v541 = 0.0;
      int v542 = 1;
    }

    double v539 = v541;
    int v540 = v542;
  }

  else
  {
    double v259 = 0.0;
    outlined destroy of Any?(v698);
    double v539 = v259;
    int v540 = 1;
  }

  double v695 = v539;
  char v696 = v540 & 1;
  if ((v540 & 1) != 0) {
    double v699 = 0.0;
  }
  else {
    double v699 = v695;
  }
  Swift::Double v536 = v699;
  double v694 = v699;
  Swift::String v537 = *kMediaML_txRate.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v537._object);
  v538 = &v691;
  Swift::String v691 = v537;
  Dictionary.subscript.getter(v692);
  outlined destroy of String((uint64_t)v538);
  if (v692[3])
  {
    if ((swift_dynamicCast(&v617, v692, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
    {
      double v534 = v617;
      int v535 = 0;
    }

    else
    {
      double v534 = 0.0;
      int v535 = 1;
    }

    double v532 = v534;
    int v533 = v535;
  }

  else
  {
    double v260 = 0.0;
    outlined destroy of Any?(v692);
    double v532 = v260;
    int v533 = 1;
  }

  double v689 = v532;
  char v690 = v533 & 1;
  if ((v533 & 1) != 0) {
    double v693 = 0.0;
  }
  else {
    double v693 = v689;
  }
  Swift::Double v529 = v693;
  double v688 = v693;
  Swift::String v530 = *kMediaML_throughputTrue.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v530._object);
  v531 = &v685;
  Swift::String v685 = v530;
  Dictionary.subscript.getter(v686);
  outlined destroy of String((uint64_t)v531);
  if (v686[3])
  {
    if ((swift_dynamicCast(&v618, v686, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v527 = v618;
      int v528 = 0;
    }

    else
    {
      Swift::Int v527 = 0LL;
      int v528 = 1;
    }

    Swift::Int v525 = v527;
    int v526 = v528;
  }

  else
  {
    Swift::Int v261 = 0LL;
    outlined destroy of Any?(v686);
    Swift::Int v525 = v261;
    int v526 = 1;
  }

  Swift::Int v683 = v525;
  char v684 = v526 & 1;
  if ((v526 & 1) != 0) {
    Swift::Int v687 = 0LL;
  }
  else {
    Swift::Int v687 = v683;
  }
  Swift::Int v524 = v687;
  Swift::Int v682 = v687;
  if (v578 <= 0 && v578 >= *minSignalStrength.unsafeMutableAddressor())
  {
    if (v571 <= 0 && v571 >= *minSignalStrength.unsafeMutableAddressor())
    {
      if (v564 <= 0 && v564 >= *minSignalStrength.unsafeMutableAddressor())
      {
        if (v557 <= 0 && v557 >= *minSignalStrength.unsafeMutableAddressor())
        {
          if (v550 <= 0 && v550 >= *minNoise.unsafeMutableAddressor())
          {
            if (v543 >= 0 && *maxBars.unsafeMutableAddressor() >= v543)
            {
              if (v536 >= 0.0 && v536 <= *maxRxRate.unsafeMutableAddressor())
              {
                if (v529 >= 0.0 && v529 <= *maxTxRate.unsafeMutableAddressor())
                {
                  if (v524 > 0 && *maxThroughput.unsafeMutableAddressor() >= v524)
                  {
                    char v736 = 1;
                    int v514 = 1;
                  }

                  else
                  {
                    uint64_t v18 = v606;
                    uint64_t v19 = logger.unsafeMutableAddressor();
                    (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v18, v19, v586);
                    uint64_t v503 = 7LL;
                    uint64_t v504 = swift_allocObject(&unk_1000652C8, 24LL, 7LL);
                    *(void *)(v504 + 16) = v524;
                    v512 = (os_log_s *)Logger.logObject.getter();
                    int v513 = static os_log_type_t.error.getter();
                    v499 = &v624;
                    uint64_t v624 = 12LL;
                    unint64_t v497 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                    unint64_t v498 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                    unint64_t v20 = lazy protocol witness table accessor for type Int and conformance Int();
                    UnsignedInteger<>.init<A>(_:)( &v625,  v499,  &type metadata for UInt32,  &type metadata for Int,  v497,  v498,  v20);
                    uint32_t v500 = v625;
                    uint64_t v501 = 17LL;
                    uint64_t v21 = swift_allocObject(&unk_1000652F0, 17LL, v503);
                    uint64_t v22 = v501;
                    uint64_t v23 = v503;
                    uint64_t v506 = v21;
                    *(_BYTE *)(v21 + 16) = 0;
                    uint64_t v24 = swift_allocObject(&unk_100065318, v22, v23);
                    uint64_t v25 = v503;
                    uint64_t v507 = v24;
                    *(_BYTE *)(v24 + 16) = 8;
                    uint64_t v502 = 32LL;
                    uint64_t v26 = swift_allocObject(&unk_100065340, 32LL, v25);
                    uint64_t v27 = v502;
                    uint64_t v28 = v503;
                    uint64_t v29 = v26;
                    uint64_t v30 = v504;
                    uint64_t v505 = v29;
                    *(void *)(v29 + 16) = partial apply for implicit closure #27 in checkValidNumericInputRange(data:);
                    *(void *)(v29 + 24) = v30;
                    uint64_t v31 = swift_allocObject(&unk_100065368, v27, v28);
                    uint64_t v32 = v505;
                    uint64_t v509 = v31;
                    *(void *)(v31 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
                    *(void *)(v31 + 24) = v32;
                    uint64_t v511 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
                    uint64_t v508 = _allocateUninitializedArray<A>(_:)(3LL, v511);
                    v510 = v33;
                    swift_retain(v506);
                    uint64_t v34 = v507;
                    uint64_t v35 = v506;
                    uint64_t v36 = v510;
                    void *v510 = closure #1 in OSLogArguments.append(_:)partial apply;
                    v36[1] = v35;
                    swift_retain(v34);
                    uint64_t v37 = v509;
                    uint64_t v38 = v507;
                    v39 = v510;
                    v510[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                    v39[3] = v38;
                    swift_retain(v37);
                    uint64_t v40 = v508;
                    uint64_t v41 = v509;
                    v42 = v510;
                    v510[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
                    v42[5] = v41;
                    _finalizeUninitializedArray<A>(_:)();
                    swift_bridgeObjectRelease(v40);
                    if (os_log_type_enabled(v512, (os_log_type_t)v513))
                    {
                      uint64_t v43 = v585;
                      v490 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
                      uint64_t v488 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                      uint64_t v489 = 0LL;
                      uint64_t v491 = createStorage<A>(capacity:type:)(0LL, v488, v488);
                      uint64_t v492 = createStorage<A>(capacity:type:)( v489,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
                      v493 = &v623;
                      v623 = v490;
                      v494 = &v622;
                      uint64_t v622 = v491;
                      v495 = &v621;
                      uint64_t v621 = v492;
                      serialize(_:at:)(0LL, &v623);
                      serialize(_:at:)(1LL, v493);
                      v619 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                      uint64_t v620 = v506;
                      closure #1 in osLogInternal(_:log:type:)(&v619, (uint64_t)v493, (uint64_t)v494, (uint64_t)v495);
                      uint64_t v496 = v43;
                      if (v43)
                      {
                        __break(1u);
                      }

                      else
                      {
                        v619 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                        uint64_t v620 = v507;
                        closure #1 in osLogInternal(_:log:type:)(&v619, (uint64_t)&v623, (uint64_t)&v622, (uint64_t)&v621);
                        uint64_t v487 = 0LL;
                        v619 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
                        uint64_t v620 = v509;
                        closure #1 in osLogInternal(_:log:type:)(&v619, (uint64_t)&v623, (uint64_t)&v622, (uint64_t)&v621);
                        _os_log_impl( (void *)&_mh_execute_header,  v512,  (os_log_type_t)v513,  "throughput_true in data directory failed validation: %ld",  v490,  v500);
                        uint64_t v486 = 0LL;
                        destroyStorage<A>(_:count:)(v491, 0LL);
                        destroyStorage<A>(_:count:)(v492, v486);
                        UnsafeMutablePointer.deallocate()();
                        swift_release(v506);
                        swift_release(v507);
                        swift_release(v509);
                      }
                    }

                    else
                    {
                      swift_release(v506);
                      swift_release(v507);
                      swift_release(v509);
                    }

                    (*(void (**)(char *, uint64_t))(v587 + 8))(v606, v586);
                    int v514 = 0;
                  }
                }

                else
                {
                  uint64_t v44 = v604;
                  uint64_t v45 = logger.unsafeMutableAddressor();
                  (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v44, v45, v586);
                  uint64_t v475 = 7LL;
                  uint64_t v476 = swift_allocObject(&unk_100065200, 24LL, 7LL);
                  *(Swift::Double *)(v476 + 16) = v529;
                  v484 = (os_log_s *)Logger.logObject.getter();
                  int v485 = static os_log_type_t.error.getter();
                  v471 = &v631;
                  uint64_t v631 = 12LL;
                  unint64_t v469 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                  unint64_t v470 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                  unint64_t v46 = lazy protocol witness table accessor for type Int and conformance Int();
                  UnsignedInteger<>.init<A>(_:)( &v632,  v471,  &type metadata for UInt32,  &type metadata for Int,  v469,  v470,  v46);
                  uint32_t v472 = v632;
                  uint64_t v473 = 17LL;
                  uint64_t v47 = swift_allocObject(&unk_100065228, 17LL, v475);
                  uint64_t v48 = v473;
                  uint64_t v49 = v475;
                  uint64_t v478 = v47;
                  *(_BYTE *)(v47 + 16) = 0;
                  uint64_t v50 = swift_allocObject(&unk_100065250, v48, v49);
                  uint64_t v51 = v475;
                  uint64_t v479 = v50;
                  *(_BYTE *)(v50 + 16) = 8;
                  uint64_t v474 = 32LL;
                  uint64_t v52 = swift_allocObject(&unk_100065278, 32LL, v51);
                  uint64_t v53 = v474;
                  uint64_t v54 = v475;
                  uint64_t v55 = v52;
                  uint64_t v56 = v476;
                  uint64_t v477 = v55;
                  *(void *)(v55 + 16) = partial apply for implicit closure #25 in checkValidNumericInputRange(data:);
                  *(void *)(v55 + 24) = v56;
                  uint64_t v57 = swift_allocObject(&unk_1000652A0, v53, v54);
                  uint64_t v58 = v477;
                  uint64_t v481 = v57;
                  *(void *)(v57 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)partial apply;
                  *(void *)(v57 + 24) = v58;
                  uint64_t v483 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
                  uint64_t v480 = _allocateUninitializedArray<A>(_:)(3LL, v483);
                  v482 = v59;
                  swift_retain(v478);
                  uint64_t v60 = v479;
                  uint64_t v61 = v478;
                  uint64_t v62 = v482;
                  void *v482 = closure #1 in OSLogArguments.append(_:)partial apply;
                  v62[1] = v61;
                  swift_retain(v60);
                  uint64_t v63 = v481;
                  uint64_t v64 = v479;
                  uint64_t v65 = v482;
                  v482[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v65[3] = v64;
                  swift_retain(v63);
                  uint64_t v66 = v480;
                  uint64_t v67 = v481;
                  v68 = v482;
                  v482[4] = closure #1 in OSLogArguments.append(_:)partial apply;
                  v68[5] = v67;
                  _finalizeUninitializedArray<A>(_:)();
                  swift_bridgeObjectRelease(v66);
                  if (os_log_type_enabled(v484, (os_log_type_t)v485))
                  {
                    uint64_t v69 = v585;
                    v462 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
                    uint64_t v460 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                    uint64_t v461 = 0LL;
                    uint64_t v463 = createStorage<A>(capacity:type:)(0LL, v460, v460);
                    uint64_t v464 = createStorage<A>(capacity:type:)( v461,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
                    v465 = &v630;
                    v630 = v462;
                    v466 = &v629;
                    uint64_t v629 = v463;
                    v467 = &v628;
                    uint64_t v628 = v464;
                    serialize(_:at:)(0LL, &v630);
                    serialize(_:at:)(1LL, v465);
                    v626 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                    uint64_t v627 = v478;
                    closure #1 in osLogInternal(_:log:type:)(&v626, (uint64_t)v465, (uint64_t)v466, (uint64_t)v467);
                    uint64_t v468 = v69;
                    if (v69)
                    {
                      __break(1u);
                    }

                    else
                    {
                      v626 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                      uint64_t v627 = v479;
                      closure #1 in osLogInternal(_:log:type:)(&v626, (uint64_t)&v630, (uint64_t)&v629, (uint64_t)&v628);
                      uint64_t v459 = 0LL;
                      v626 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                      uint64_t v627 = v481;
                      closure #1 in osLogInternal(_:log:type:)(&v626, (uint64_t)&v630, (uint64_t)&v629, (uint64_t)&v628);
                      _os_log_impl( (void *)&_mh_execute_header,  v484,  (os_log_type_t)v485,  "txRate in data directory failed validation: %f",  v462,  v472);
                      uint64_t v458 = 0LL;
                      destroyStorage<A>(_:count:)(v463, 0LL);
                      destroyStorage<A>(_:count:)(v464, v458);
                      UnsafeMutablePointer.deallocate()();
                      swift_release(v478);
                      swift_release(v479);
                      swift_release(v481);
                    }
                  }

                  else
                  {
                    swift_release(v478);
                    swift_release(v479);
                    swift_release(v481);
                  }

                  (*(void (**)(char *, uint64_t))(v587 + 8))(v604, v586);
                  int v514 = 0;
                }
              }

              else
              {
                uint64_t v70 = v602;
                uint64_t v71 = logger.unsafeMutableAddressor();
                (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v70, v71, v586);
                uint64_t v447 = 7LL;
                uint64_t v448 = swift_allocObject(&unk_100065138, 24LL, 7LL);
                *(Swift::Double *)(v448 + 16) = v536;
                v456 = (os_log_s *)Logger.logObject.getter();
                int v457 = static os_log_type_t.error.getter();
                v443 = &v638;
                uint64_t v638 = 12LL;
                unint64_t v441 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                unint64_t v442 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
                unint64_t v72 = lazy protocol witness table accessor for type Int and conformance Int();
                UnsignedInteger<>.init<A>(_:)( &v639,  v443,  &type metadata for UInt32,  &type metadata for Int,  v441,  v442,  v72);
                uint32_t v444 = v639;
                uint64_t v445 = 17LL;
                uint64_t v73 = swift_allocObject(&unk_100065160, 17LL, v447);
                uint64_t v74 = v445;
                uint64_t v75 = v447;
                uint64_t v450 = v73;
                *(_BYTE *)(v73 + 16) = 0;
                uint64_t v76 = swift_allocObject(&unk_100065188, v74, v75);
                uint64_t v77 = v447;
                uint64_t v451 = v76;
                *(_BYTE *)(v76 + 16) = 8;
                uint64_t v446 = 32LL;
                uint64_t v78 = swift_allocObject(&unk_1000651B0, 32LL, v77);
                uint64_t v79 = v446;
                uint64_t v80 = v447;
                uint64_t v81 = v78;
                uint64_t v82 = v448;
                uint64_t v449 = v81;
                *(void *)(v81 + 16) = partial apply for implicit closure #23 in checkValidNumericInputRange(data:);
                *(void *)(v81 + 24) = v82;
                uint64_t v83 = swift_allocObject(&unk_1000651D8, v79, v80);
                uint64_t v84 = v449;
                uint64_t v453 = v83;
                *(void *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:);
                *(void *)(v83 + 24) = v84;
                uint64_t v455 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
                uint64_t v452 = _allocateUninitializedArray<A>(_:)(3LL, v455);
                v454 = v85;
                swift_retain(v450);
                uint64_t v86 = v451;
                uint64_t v87 = v450;
                uint64_t v88 = v454;
                void *v454 = closure #1 in OSLogArguments.append(_:)partial apply;
                v88[1] = v87;
                swift_retain(v86);
                uint64_t v89 = v453;
                uint64_t v90 = v451;
                uint64_t v91 = v454;
                v454[2] = closure #1 in OSLogArguments.append(_:)partial apply;
                v91[3] = v90;
                swift_retain(v89);
                uint64_t v92 = v452;
                uint64_t v93 = v453;
                uint64_t v94 = v454;
                v454[4] = partial apply for closure #1 in OSLogArguments.append(_:);
                v94[5] = v93;
                _finalizeUninitializedArray<A>(_:)();
                swift_bridgeObjectRelease(v92);
                if (os_log_type_enabled(v456, (os_log_type_t)v457))
                {
                  uint64_t v95 = v585;
                  v434 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
                  uint64_t v432 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                  uint64_t v433 = 0LL;
                  uint64_t v435 = createStorage<A>(capacity:type:)(0LL, v432, v432);
                  uint64_t v436 = createStorage<A>(capacity:type:)( v433,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
                  v437 = &v637;
                  v637 = v434;
                  v438 = &v636;
                  uint64_t v636 = v435;
                  v439 = &v635;
                  uint64_t v635 = v436;
                  serialize(_:at:)(0LL, &v637);
                  serialize(_:at:)(1LL, v437);
                  v633 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                  uint64_t v634 = v450;
                  closure #1 in osLogInternal(_:log:type:)(&v633, (uint64_t)v437, (uint64_t)v438, (uint64_t)v439);
                  uint64_t v440 = v95;
                  if (v95)
                  {
                    __break(1u);
                  }

                  else
                  {
                    v633 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                    uint64_t v634 = v451;
                    closure #1 in osLogInternal(_:log:type:)(&v633, (uint64_t)&v637, (uint64_t)&v636, (uint64_t)&v635);
                    uint64_t v431 = 0LL;
                    v633 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
                    uint64_t v634 = v453;
                    closure #1 in osLogInternal(_:log:type:)(&v633, (uint64_t)&v637, (uint64_t)&v636, (uint64_t)&v635);
                    _os_log_impl( (void *)&_mh_execute_header,  v456,  (os_log_type_t)v457,  "rxRate in data directory failed validation: %f",  v434,  v444);
                    uint64_t v430 = 0LL;
                    destroyStorage<A>(_:count:)(v435, 0LL);
                    destroyStorage<A>(_:count:)(v436, v430);
                    UnsafeMutablePointer.deallocate()();
                    swift_release(v450);
                    swift_release(v451);
                    swift_release(v453);
                  }
                }

                else
                {
                  swift_release(v450);
                  swift_release(v451);
                  swift_release(v453);
                }

                (*(void (**)(char *, uint64_t))(v587 + 8))(v602, v586);
                int v514 = 0;
              }
            }

            else
            {
              uint64_t v96 = v600;
              uint64_t v97 = logger.unsafeMutableAddressor();
              (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v96, v97, v586);
              uint64_t v419 = 7LL;
              uint64_t v420 = swift_allocObject(&unk_100065070, 24LL, 7LL);
              *(void *)(v420 + 16) = v543;
              v428 = (os_log_s *)Logger.logObject.getter();
              int v429 = static os_log_type_t.error.getter();
              v415 = &v645;
              uint64_t v645 = 12LL;
              unint64_t v413 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              unint64_t v414 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
              unint64_t v98 = lazy protocol witness table accessor for type Int and conformance Int();
              UnsignedInteger<>.init<A>(_:)( &v646,  v415,  &type metadata for UInt32,  &type metadata for Int,  v413,  v414,  v98);
              uint32_t v416 = v646;
              uint64_t v417 = 17LL;
              uint64_t v99 = swift_allocObject(&unk_100065098, 17LL, v419);
              uint64_t v100 = v417;
              uint64_t v101 = v419;
              uint64_t v422 = v99;
              *(_BYTE *)(v99 + 16) = 0;
              uint64_t v102 = swift_allocObject(&unk_1000650C0, v100, v101);
              uint64_t v103 = v419;
              uint64_t v423 = v102;
              *(_BYTE *)(v102 + 16) = 8;
              uint64_t v418 = 32LL;
              uint64_t v104 = swift_allocObject(&unk_1000650E8, 32LL, v103);
              uint64_t v105 = v418;
              uint64_t v106 = v419;
              uint64_t v107 = v104;
              uint64_t v108 = v420;
              uint64_t v421 = v107;
              *(void *)(v107 + 16) = partial apply for implicit closure #21 in checkValidNumericInputRange(data:);
              *(void *)(v107 + 24) = v108;
              uint64_t v109 = swift_allocObject(&unk_100065110, v105, v106);
              uint64_t v110 = v421;
              uint64_t v425 = v109;
              *(void *)(v109 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
              *(void *)(v109 + 24) = v110;
              uint64_t v427 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
              uint64_t v424 = _allocateUninitializedArray<A>(_:)(3LL, v427);
              v426 = v111;
              swift_retain(v422);
              uint64_t v112 = v423;
              uint64_t v113 = v422;
              uint64_t v114 = v426;
              void *v426 = closure #1 in OSLogArguments.append(_:)partial apply;
              v114[1] = v113;
              swift_retain(v112);
              uint64_t v115 = v425;
              uint64_t v116 = v423;
              uint64_t v117 = v426;
              v426[2] = closure #1 in OSLogArguments.append(_:)partial apply;
              v117[3] = v116;
              swift_retain(v115);
              uint64_t v118 = v424;
              uint64_t v119 = v425;
              uint64_t v120 = v426;
              v426[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
              v120[5] = v119;
              _finalizeUninitializedArray<A>(_:)();
              swift_bridgeObjectRelease(v118);
              if (os_log_type_enabled(v428, (os_log_type_t)v429))
              {
                uint64_t v121 = v585;
                v406 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
                uint64_t v404 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                uint64_t v405 = 0LL;
                uint64_t v407 = createStorage<A>(capacity:type:)(0LL, v404, v404);
                uint64_t v408 = createStorage<A>(capacity:type:)( v405,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
                v409 = &v644;
                v644 = v406;
                v410 = &v643;
                uint64_t v643 = v407;
                v411 = &v642;
                uint64_t v642 = v408;
                serialize(_:at:)(0LL, &v644);
                serialize(_:at:)(1LL, v409);
                v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                uint64_t v641 = v422;
                closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)v409, (uint64_t)v410, (uint64_t)v411);
                uint64_t v412 = v121;
                if (v121)
                {
                  __break(1u);
                }

                else
                {
                  v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                  uint64_t v641 = v423;
                  closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
                  uint64_t v403 = 0LL;
                  v640 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
                  uint64_t v641 = v425;
                  closure #1 in osLogInternal(_:log:type:)(&v640, (uint64_t)&v644, (uint64_t)&v643, (uint64_t)&v642);
                  _os_log_impl( (void *)&_mh_execute_header,  v428,  (os_log_type_t)v429,  "bars in data directory failed validation: %ld",  v406,  v416);
                  uint64_t v402 = 0LL;
                  destroyStorage<A>(_:count:)(v407, 0LL);
                  destroyStorage<A>(_:count:)(v408, v402);
                  UnsafeMutablePointer.deallocate()();
                  swift_release(v422);
                  swift_release(v423);
                  swift_release(v425);
                }
              }

              else
              {
                swift_release(v422);
                swift_release(v423);
                swift_release(v425);
              }

              (*(void (**)(char *, uint64_t))(v587 + 8))(v600, v586);
              int v514 = 0;
            }
          }

          else
          {
            v122 = v598;
            uint64_t v123 = logger.unsafeMutableAddressor();
            (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v122, v123, v586);
            uint64_t v391 = 7LL;
            uint64_t v392 = swift_allocObject(&unk_100064FA8, 24LL, 7LL);
            *(void *)(v392 + 16) = v550;
            v400 = (os_log_s *)Logger.logObject.getter();
            int v401 = static os_log_type_t.error.getter();
            v387 = &v652;
            uint64_t v652 = 12LL;
            unint64_t v385 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            unint64_t v386 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            unint64_t v124 = lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)( &v653,  v387,  &type metadata for UInt32,  &type metadata for Int,  v385,  v386,  v124);
            uint32_t v388 = v653;
            uint64_t v389 = 17LL;
            uint64_t v125 = swift_allocObject(&unk_100064FD0, 17LL, v391);
            uint64_t v126 = v389;
            uint64_t v127 = v391;
            uint64_t v394 = v125;
            *(_BYTE *)(v125 + 16) = 0;
            uint64_t v128 = swift_allocObject(&unk_100064FF8, v126, v127);
            uint64_t v129 = v391;
            uint64_t v395 = v128;
            *(_BYTE *)(v128 + 16) = 8;
            uint64_t v390 = 32LL;
            uint64_t v130 = swift_allocObject(&unk_100065020, 32LL, v129);
            uint64_t v131 = v390;
            uint64_t v132 = v391;
            uint64_t v133 = v130;
            uint64_t v134 = v392;
            uint64_t v393 = v133;
            *(void *)(v133 + 16) = partial apply for implicit closure #19 in checkValidNumericInputRange(data:);
            *(void *)(v133 + 24) = v134;
            uint64_t v135 = swift_allocObject(&unk_100065048, v131, v132);
            uint64_t v136 = v393;
            uint64_t v397 = v135;
            *(void *)(v135 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
            *(void *)(v135 + 24) = v136;
            uint64_t v399 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
            uint64_t v396 = _allocateUninitializedArray<A>(_:)(3LL, v399);
            v398 = v137;
            swift_retain(v394);
            uint64_t v138 = v395;
            uint64_t v139 = v394;
            uint64_t v140 = v398;
            void *v398 = closure #1 in OSLogArguments.append(_:)partial apply;
            v140[1] = v139;
            swift_retain(v138);
            uint64_t v141 = v397;
            uint64_t v142 = v395;
            uint64_t v143 = v398;
            v398[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v143[3] = v142;
            swift_retain(v141);
            uint64_t v144 = v396;
            uint64_t v145 = v397;
            uint64_t v146 = v398;
            v398[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
            v146[5] = v145;
            _finalizeUninitializedArray<A>(_:)();
            swift_bridgeObjectRelease(v144);
            if (os_log_type_enabled(v400, (os_log_type_t)v401))
            {
              uint64_t v147 = v585;
              v378 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
              uint64_t v376 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v377 = 0LL;
              uint64_t v379 = createStorage<A>(capacity:type:)(0LL, v376, v376);
              uint64_t v380 = createStorage<A>(capacity:type:)( v377,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
              v381 = &v651;
              v651 = v378;
              v382 = &v650;
              uint64_t v650 = v379;
              v383 = &v649;
              uint64_t v649 = v380;
              serialize(_:at:)(0LL, &v651);
              serialize(_:at:)(1LL, v381);
              v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              uint64_t v648 = v394;
              closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)v381, (uint64_t)v382, (uint64_t)v383);
              uint64_t v384 = v147;
              if (v147)
              {
                __break(1u);
              }

              else
              {
                v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
                uint64_t v648 = v395;
                closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)&v651, (uint64_t)&v650, (uint64_t)&v649);
                uint64_t v375 = 0LL;
                v647 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
                uint64_t v648 = v397;
                closure #1 in osLogInternal(_:log:type:)(&v647, (uint64_t)&v651, (uint64_t)&v650, (uint64_t)&v649);
                _os_log_impl( (void *)&_mh_execute_header,  v400,  (os_log_type_t)v401,  "noise in data directory failed validation: %ld",  v378,  v388);
                uint64_t v374 = 0LL;
                destroyStorage<A>(_:count:)(v379, 0LL);
                destroyStorage<A>(_:count:)(v380, v374);
                UnsafeMutablePointer.deallocate()();
                swift_release(v394);
                swift_release(v395);
                swift_release(v397);
              }
            }

            else
            {
              swift_release(v394);
              swift_release(v395);
              swift_release(v397);
            }

            (*(void (**)(char *, uint64_t))(v587 + 8))(v598, v586);
            int v514 = 0;
          }
        }

        else
        {
          uint64_t v148 = v596;
          uint64_t v149 = logger.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v148, v149, v586);
          uint64_t v363 = 7LL;
          uint64_t v364 = swift_allocObject(&unk_100064EE0, 24LL, 7LL);
          *(void *)(v364 + 16) = v557;
          v372 = (os_log_s *)Logger.logObject.getter();
          int v373 = static os_log_type_t.error.getter();
          v359 = &v659;
          uint64_t v659 = 12LL;
          unint64_t v357 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v358 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          unint64_t v150 = lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)( &v660,  v359,  &type metadata for UInt32,  &type metadata for Int,  v357,  v358,  v150);
          uint32_t v360 = v660;
          uint64_t v361 = 17LL;
          uint64_t v151 = swift_allocObject(&unk_100064F08, 17LL, v363);
          uint64_t v152 = v361;
          uint64_t v153 = v363;
          uint64_t v366 = v151;
          *(_BYTE *)(v151 + 16) = 0;
          uint64_t v154 = swift_allocObject(&unk_100064F30, v152, v153);
          uint64_t v155 = v363;
          uint64_t v367 = v154;
          *(_BYTE *)(v154 + 16) = 8;
          uint64_t v362 = 32LL;
          uint64_t v156 = swift_allocObject(&unk_100064F58, 32LL, v155);
          uint64_t v157 = v362;
          uint64_t v158 = v363;
          uint64_t v159 = v156;
          uint64_t v160 = v364;
          uint64_t v365 = v159;
          *(void *)(v159 + 16) = partial apply for implicit closure #17 in checkValidNumericInputRange(data:);
          *(void *)(v159 + 24) = v160;
          uint64_t v161 = swift_allocObject(&unk_100064F80, v157, v158);
          uint64_t v162 = v365;
          uint64_t v369 = v161;
          *(void *)(v161 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(void *)(v161 + 24) = v162;
          uint64_t v371 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
          uint64_t v368 = _allocateUninitializedArray<A>(_:)(3LL, v371);
          v370 = v163;
          swift_retain(v366);
          uint64_t v164 = v367;
          uint64_t v165 = v366;
          unint64_t v166 = v370;
          void *v370 = closure #1 in OSLogArguments.append(_:)partial apply;
          v166[1] = v165;
          swift_retain(v164);
          uint64_t v167 = v369;
          uint64_t v168 = v367;
          uint64_t v169 = v370;
          v370[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v169[3] = v168;
          swift_retain(v167);
          uint64_t v170 = v368;
          uint64_t v171 = v369;
          uint64_t v172 = v370;
          v370[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
          v172[5] = v171;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease(v170);
          if (os_log_type_enabled(v372, (os_log_type_t)v373))
          {
            uint64_t v173 = v585;
            v350 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
            uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            uint64_t v349 = 0LL;
            uint64_t v351 = createStorage<A>(capacity:type:)(0LL, v348, v348);
            uint64_t v352 = createStorage<A>(capacity:type:)( v349,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
            v353 = &v658;
            v658 = v350;
            v354 = &v657;
            uint64_t v657 = v351;
            v355 = &v656;
            uint64_t v656 = v352;
            serialize(_:at:)(0LL, &v658);
            serialize(_:at:)(1LL, v353);
            v654 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            uint64_t v655 = v366;
            closure #1 in osLogInternal(_:log:type:)(&v654, (uint64_t)v353, (uint64_t)v354, (uint64_t)v355);
            uint64_t v356 = v173;
            if (v173)
            {
              __break(1u);
            }

            else
            {
              v654 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              uint64_t v655 = v367;
              closure #1 in osLogInternal(_:log:type:)(&v654, (uint64_t)&v658, (uint64_t)&v657, (uint64_t)&v656);
              uint64_t v347 = 0LL;
              v654 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
              uint64_t v655 = v369;
              closure #1 in osLogInternal(_:log:type:)(&v654, (uint64_t)&v658, (uint64_t)&v657, (uint64_t)&v656);
              _os_log_impl( (void *)&_mh_execute_header,  v372,  (os_log_type_t)v373,  "rscp in data directory failed validation: %ld",  v350,  v360);
              uint64_t v346 = 0LL;
              destroyStorage<A>(_:count:)(v351, 0LL);
              destroyStorage<A>(_:count:)(v352, v346);
              UnsafeMutablePointer.deallocate()();
              swift_release(v366);
              swift_release(v367);
              swift_release(v369);
            }
          }

          else
          {
            swift_release(v366);
            swift_release(v367);
            swift_release(v369);
          }

          (*(void (**)(char *, uint64_t))(v587 + 8))(v596, v586);
          int v514 = 0;
        }
      }

      else
      {
        uint64_t v174 = v594;
        uint64_t v175 = logger.unsafeMutableAddressor();
        (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v174, v175, v586);
        uint64_t v335 = 7LL;
        uint64_t v336 = swift_allocObject(&unk_100064E18, 24LL, 7LL);
        *(void *)(v336 + 16) = v564;
        v344 = (os_log_s *)Logger.logObject.getter();
        int v345 = static os_log_type_t.error.getter();
        v331 = &v666;
        uint64_t v666 = 12LL;
        unint64_t v329 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v330 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v176 = lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)(&v667, v331, &type metadata for UInt32, &type metadata for Int, v329, v330, v176);
        uint32_t v332 = v667;
        uint64_t v333 = 17LL;
        uint64_t v177 = swift_allocObject(&unk_100064E40, 17LL, v335);
        uint64_t v178 = v333;
        uint64_t v179 = v335;
        uint64_t v338 = v177;
        *(_BYTE *)(v177 + 16) = 0;
        uint64_t v180 = swift_allocObject(&unk_100064E68, v178, v179);
        uint64_t v181 = v335;
        uint64_t v339 = v180;
        *(_BYTE *)(v180 + 16) = 8;
        uint64_t v334 = 32LL;
        uint64_t v182 = swift_allocObject(&unk_100064E90, 32LL, v181);
        uint64_t v183 = v334;
        uint64_t v184 = v335;
        uint64_t v185 = v182;
        uint64_t v186 = v336;
        uint64_t v337 = v185;
        *(void *)(v185 + 16) = partial apply for implicit closure #15 in checkValidNumericInputRange(data:);
        *(void *)(v185 + 24) = v186;
        uint64_t v187 = swift_allocObject(&unk_100064EB8, v183, v184);
        uint64_t v188 = v337;
        uint64_t v341 = v187;
        *(void *)(v187 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
        *(void *)(v187 + 24) = v188;
        uint64_t v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v340 = _allocateUninitializedArray<A>(_:)(3LL, v343);
        v342 = v189;
        swift_retain(v338);
        uint64_t v190 = v339;
        uint64_t v191 = v338;
        Swift::String v192 = v342;
        void *v342 = closure #1 in OSLogArguments.append(_:)partial apply;
        v192[1] = v191;
        swift_retain(v190);
        uint64_t v193 = v341;
        uint64_t v194 = v339;
        uint64_t v195 = v342;
        v342[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v195[3] = v194;
        swift_retain(v193);
        uint64_t v196 = v340;
        uint64_t v197 = v341;
        int v198 = v342;
        v342[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v198[5] = v197;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease(v196);
        if (os_log_type_enabled(v344, (os_log_type_t)v345))
        {
          uint64_t v199 = v585;
          v322 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
          uint64_t v320 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v321 = 0LL;
          uint64_t v323 = createStorage<A>(capacity:type:)(0LL, v320, v320);
          uint64_t v324 = createStorage<A>(capacity:type:)( v321,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
          v325 = &v665;
          v665 = v322;
          v326 = &v664;
          uint64_t v664 = v323;
          v327 = &v663;
          uint64_t v663 = v324;
          serialize(_:at:)(0LL, &v665);
          serialize(_:at:)(1LL, v325);
          v661 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v662 = v338;
          closure #1 in osLogInternal(_:log:type:)(&v661, (uint64_t)v325, (uint64_t)v326, (uint64_t)v327);
          uint64_t v328 = v199;
          if (v199)
          {
            __break(1u);
          }

          else
          {
            v661 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            uint64_t v662 = v339;
            closure #1 in osLogInternal(_:log:type:)(&v661, (uint64_t)&v665, (uint64_t)&v664, (uint64_t)&v663);
            uint64_t v319 = 0LL;
            v661 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
            uint64_t v662 = v341;
            closure #1 in osLogInternal(_:log:type:)(&v661, (uint64_t)&v665, (uint64_t)&v664, (uint64_t)&v663);
            _os_log_impl( (void *)&_mh_execute_header,  v344,  (os_log_type_t)v345,  "rsrq in data directory failed validation: %ld",  v322,  v332);
            uint64_t v318 = 0LL;
            destroyStorage<A>(_:count:)(v323, 0LL);
            destroyStorage<A>(_:count:)(v324, v318);
            UnsafeMutablePointer.deallocate()();
            swift_release(v338);
            swift_release(v339);
            swift_release(v341);
          }
        }

        else
        {
          swift_release(v338);
          swift_release(v339);
          swift_release(v341);
        }

        (*(void (**)(char *, uint64_t))(v587 + 8))(v594, v586);
        int v514 = 0;
      }
    }

    else
    {
      int v200 = v592;
      uint64_t v201 = logger.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v200, v201, v586);
      uint64_t v307 = 7LL;
      uint64_t v308 = swift_allocObject(&unk_100064D50, 24LL, 7LL);
      *(void *)(v308 + 16) = v571;
      v316 = (os_log_s *)Logger.logObject.getter();
      int v317 = static os_log_type_t.error.getter();
      v303 = &v673;
      uint64_t v673 = 12LL;
      unint64_t v301 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v302 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v202 = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)(&v674, v303, &type metadata for UInt32, &type metadata for Int, v301, v302, v202);
      uint32_t v304 = v674;
      uint64_t v305 = 17LL;
      uint64_t v203 = swift_allocObject(&unk_100064D78, 17LL, v307);
      uint64_t v204 = v305;
      uint64_t v205 = v307;
      uint64_t v310 = v203;
      *(_BYTE *)(v203 + 16) = 0;
      uint64_t v206 = swift_allocObject(&unk_100064DA0, v204, v205);
      uint64_t v207 = v307;
      uint64_t v311 = v206;
      *(_BYTE *)(v206 + 16) = 8;
      uint64_t v306 = 32LL;
      uint64_t v208 = swift_allocObject(&unk_100064DC8, 32LL, v207);
      uint64_t v209 = v306;
      uint64_t v210 = v307;
      uint64_t v211 = v208;
      uint64_t v212 = v308;
      uint64_t v309 = v211;
      *(void *)(v211 + 16) = partial apply for implicit closure #13 in checkValidNumericInputRange(data:);
      *(void *)(v211 + 24) = v212;
      uint64_t v213 = swift_allocObject(&unk_100064DF0, v209, v210);
      uint64_t v214 = v309;
      uint64_t v313 = v213;
      *(void *)(v213 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v213 + 24) = v214;
      uint64_t v315 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v312 = _allocateUninitializedArray<A>(_:)(3LL, v315);
      v314 = v215;
      swift_retain(v310);
      uint64_t v216 = v311;
      uint64_t v217 = v310;
      v218 = v314;
      void *v314 = closure #1 in OSLogArguments.append(_:)partial apply;
      v218[1] = v217;
      swift_retain(v216);
      uint64_t v219 = v313;
      uint64_t v220 = v311;
      uint64_t v221 = v314;
      v314[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v221[3] = v220;
      swift_retain(v219);
      uint64_t v222 = v312;
      uint64_t v223 = v313;
      v224 = v314;
      v314[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v224[5] = v223;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease(v222);
      if (os_log_type_enabled(v316, (os_log_type_t)v317))
      {
        uint64_t v225 = v585;
        v294 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
        uint64_t v292 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v293 = 0LL;
        uint64_t v295 = createStorage<A>(capacity:type:)(0LL, v292, v292);
        uint64_t v296 = createStorage<A>(capacity:type:)( v293,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
        v297 = &v672;
        v672 = v294;
        v298 = &v671;
        uint64_t v671 = v295;
        v299 = &v670;
        uint64_t v670 = v296;
        serialize(_:at:)(0LL, &v672);
        serialize(_:at:)(1LL, v297);
        v668 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v669 = v310;
        closure #1 in osLogInternal(_:log:type:)(&v668, (uint64_t)v297, (uint64_t)v298, (uint64_t)v299);
        uint64_t v300 = v225;
        if (v225)
        {
          __break(1u);
        }

        else
        {
          v668 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          uint64_t v669 = v311;
          closure #1 in osLogInternal(_:log:type:)(&v668, (uint64_t)&v672, (uint64_t)&v671, (uint64_t)&v670);
          uint64_t v291 = 0LL;
          v668 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
          uint64_t v669 = v313;
          closure #1 in osLogInternal(_:log:type:)(&v668, (uint64_t)&v672, (uint64_t)&v671, (uint64_t)&v670);
          _os_log_impl( (void *)&_mh_execute_header,  v316,  (os_log_type_t)v317,  "rsrp in data directory failed validation: %ld",  v294,  v304);
          uint64_t v290 = 0LL;
          destroyStorage<A>(_:count:)(v295, 0LL);
          destroyStorage<A>(_:count:)(v296, v290);
          UnsafeMutablePointer.deallocate()();
          swift_release(v310);
          swift_release(v311);
          swift_release(v313);
        }
      }

      else
      {
        swift_release(v310);
        swift_release(v311);
        swift_release(v313);
      }

      (*(void (**)(char *, uint64_t))(v587 + 8))(v592, v586);
      int v514 = 0;
    }
  }

  else
  {
    uint64_t v226 = v590;
    uint64_t v227 = logger.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v587 + 16))(v226, v227, v586);
    uint64_t v279 = 7LL;
    uint64_t v280 = swift_allocObject(&unk_100064C88, 24LL, 7LL);
    *(void *)(v280 + 16) = v578;
    v288 = (os_log_s *)Logger.logObject.getter();
    int v289 = static os_log_type_t.error.getter();
    uint64_t v275 = &v680;
    uint64_t v680 = 12LL;
    unint64_t v273 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v274 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v228 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)(&v681, v275, &type metadata for UInt32, &type metadata for Int, v273, v274, v228);
    uint32_t v276 = v681;
    uint64_t v277 = 17LL;
    uint64_t v229 = swift_allocObject(&unk_100064CB0, 17LL, v279);
    uint64_t v230 = v277;
    uint64_t v231 = v279;
    uint64_t v282 = v229;
    *(_BYTE *)(v229 + 16) = 0;
    uint64_t v232 = swift_allocObject(&unk_100064CD8, v230, v231);
    uint64_t v233 = v279;
    uint64_t v283 = v232;
    *(_BYTE *)(v232 + 16) = 8;
    uint64_t v278 = 32LL;
    uint64_t v234 = swift_allocObject(&unk_100064D00, 32LL, v233);
    uint64_t v235 = v278;
    uint64_t v236 = v279;
    uint64_t v237 = v234;
    uint64_t v238 = v280;
    uint64_t v281 = v237;
    *(void *)(v237 + 16) = partial apply for implicit closure #11 in checkValidNumericInputRange(data:);
    *(void *)(v237 + 24) = v238;
    uint64_t v239 = swift_allocObject(&unk_100064D28, v235, v236);
    uint64_t v240 = v281;
    uint64_t v285 = v239;
    *(void *)(v239 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v239 + 24) = v240;
    uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v284 = _allocateUninitializedArray<A>(_:)(3LL, v287);
    v286 = v241;
    swift_retain(v282);
    uint64_t v242 = v283;
    uint64_t v243 = v282;
    uint64_t v244 = v286;
    void *v286 = closure #1 in OSLogArguments.append(_:)partial apply;
    v244[1] = v243;
    swift_retain(v242);
    uint64_t v245 = v285;
    uint64_t v246 = v283;
    uint64_t v247 = v286;
    v286[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v247[3] = v246;
    swift_retain(v245);
    uint64_t v248 = v284;
    uint64_t v249 = v285;
    v250 = v286;
    v286[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v250[5] = v249;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease(v248);
    if (os_log_type_enabled(v288, (os_log_type_t)v289))
    {
      uint64_t v251 = v585;
      uint64_t v266 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
      uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v265 = 0LL;
      uint64_t v267 = createStorage<A>(capacity:type:)(0LL, v264, v264);
      uint64_t v268 = createStorage<A>(capacity:type:)( v265,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      v269 = &v679;
      v679 = v266;
      v270 = &v678;
      uint64_t v678 = v267;
      uint64_t v271 = &v677;
      uint64_t v677 = v268;
      serialize(_:at:)(0LL, &v679);
      serialize(_:at:)(1LL, v269);
      v675 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v676 = v282;
      closure #1 in osLogInternal(_:log:type:)(&v675, (uint64_t)v269, (uint64_t)v270, (uint64_t)v271);
      uint64_t v272 = v251;
      if (v251)
      {
        __break(1u);
      }

      else
      {
        v675 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        uint64_t v676 = v283;
        closure #1 in osLogInternal(_:log:type:)(&v675, (uint64_t)&v679, (uint64_t)&v678, (uint64_t)&v677);
        uint64_t v263 = 0LL;
        v675 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        uint64_t v676 = v285;
        closure #1 in osLogInternal(_:log:type:)(&v675, (uint64_t)&v679, (uint64_t)&v678, (uint64_t)&v677);
        _os_log_impl( (void *)&_mh_execute_header,  v288,  (os_log_type_t)v289,  "rssi in data directory failed validation: %ld",  v266,  v276);
        uint64_t v262 = 0LL;
        destroyStorage<A>(_:count:)(v267, 0LL);
        destroyStorage<A>(_:count:)(v268, v262);
        UnsafeMutablePointer.deallocate()();
        swift_release(v282);
        swift_release(v283);
        swift_release(v285);
      }
    }

    else
    {
      swift_release(v282);
      swift_release(v283);
      swift_release(v285);
    }

    (*(void (**)(char *, uint64_t))(v587 + 8))(v590, v586);
    int v514 = 0;
  }

  return v514 & 1;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v13 = String._bridgeToObjectiveC()();
  id v19 = 0LL;
  id v18 = 0LL;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
  unint64_t v3 = lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>();
  _convertInOutToPointerArgument<A>(_:)(&v17, &v18, v11, v3);
  id v16 = [v12 initWithPattern:v13 options:a3 error:v17];
  id v15 = v18;
  id v4 = v18;
  uint64_t v5 = v19;
  id v19 = v15;

  if (v16)
  {

    swift_bridgeObjectRelease(a2);
    return v16;
  }

  else
  {
    id v9 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow(v7);
    swift_bridgeObjectRelease(a2);
    return (id)v8;
  }
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSRegularExpressionOptions(uint64_t a1)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  unint64_t v1 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()(a1, v3, v1);
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet<>.contains(_:)(a1, a2, v2) & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet.union(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet.intersection(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet.symmetricDifference(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet<>.insert(_:)(a1, a2, a3, v3) & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet<>.remove(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return OptionSet<>.update(with:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSRegularExpressionOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSMatchingOptions(uint64_t a1)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  unint64_t v1 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()(a1, v3, v1);
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet<>.contains(_:)(a1, a2, v2) & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSMatchingOptions(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet.union(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet.intersection(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet.symmetricDifference(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet<>.insert(_:)(a1, a2, a3, v3) & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSMatchingOptions(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet<>.remove(_:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return OptionSet<>.update(with:)(a1, a2, v2);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2)
{
  unint64_t v5 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  unint64_t v2 = lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)(a1, a2, v5, v2);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSMatchingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSMatchingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSMatchingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSMatchingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSMatchingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSMatchingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSRegularExpressionOptions( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for UInt) & 1;
}

void *protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSRegularExpressionOptions@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
  return SetAlgebra<>.init(arrayLiteral:)(a3, a1, a2, v3);
}

NSRegularExpressionOptions protocol witness for OptionSet.init(rawValue:) in conformance NSRegularExpressionOptions@<X0>( Swift::UInt *a1@<X0>, NSRegularExpressionOptions *a2@<X8>)
{
  NSRegularExpressionOptions result = NSRegularExpressionOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSMatchingOptions( uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return == infix<A>(_:_:)(a1, a2, a3, v3, &protocol witness table for UInt) & 1;
}

void *protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSMatchingOptions@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
  return SetAlgebra<>.init(arrayLiteral:)(a3, a1, a2, v3);
}

NSMatchingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSMatchingOptions@<X0>( Swift::UInt *a1@<X0>, NSMatchingOptions *a2@<X8>)
{
  NSMatchingOptions result = NSMatchingOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

NSRegularExpressionOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSRegularExpressionOptions@<X0>( Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSRegularExpressionOptions result = NSRegularExpressionOptions.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSRegularExpressionOptions@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = NSRegularExpressionOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

NSMatchingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSMatchingOptions@<X0>( Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSMatchingOptions result = NSMatchingOptions.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSMatchingOptions@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = NSMatchingOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t v0 = ((uint64_t (*)(void *, void *))swift_getWitnessTable)( &protocol conformance descriptor for UInt32,  &type metadata for UInt32);
    atomic_store( v0,  (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }

  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }

  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return static UnsafeMutablePointer.allocate(capacity:)(a1, a3);
  }
  else {
    return 0LL;
  }
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

void destroyStorage<A>(_:count:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    UnsafeMutablePointer.deinitialize(count:)(a2);
    UnsafeMutablePointer.deallocate()();
  }

Swift::Void __swiftcall Array._endMutation()()
{
  *unint64_t v0 = *v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  uint64_t v9 = v5;
  uint64_t v6 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  uint64_t v10 = *a1;
  uint64_t v12 = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  swift_bridgeObjectRelease(v9);
  uint64_t result = a1;
  *a1 = v10 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0LL, 0LL, 1, a1, a2);
  uint64_t v15 = v3;
  __int16 v16 = v4;
  uint64_t v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    uint64_t v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }

    __swift_destroy_boxed_opaque_existential_0(v12);
  }

  else
  {
    v13[3] = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }

    swift_bridgeObjectRetain(a2);
    __swift_destroy_boxed_opaque_existential_0(v13);
  }

  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)( uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = (void *)result;
  uint64_t v25 = a6;
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3) {
          __break(1u);
        }
        int64_t v16 = a3 - (void)a2;
      }

      else
      {
        int64_t v16 = 0LL;
      }

      int64_t v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v22[0] = a5;
          v22[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v22, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter(0LL, v15, a2, a3);
          *uint64_t v17 = a2;
          uint64_t v11 = 0LL;
          uint64_t v12 = v15;
          char v13 = 1;
          char v14 = 0;
LABEL_26:
          v22[2] = v11;
          v22[3] = v12;
          char v23 = v13 & 1;
          char v24 = v14 & 1;
          return (uint64_t)v11;
        }

        goto LABEL_28;
      }
    }

LABEL_13:
    uint64_t v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *uint64_t v17 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    char v13 = 0;
    char v14 = 1;
    goto LABEL_26;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0LL)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }

    __break(1u);
  }

  uint64_t result = _StringObject.sharedUTF8.getter(a5, a6);
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v10 = result;
LABEL_21:
  *uint64_t v17 = v10;
  if (a6 < 0)
  {
    uint64_t v9 = 0LL;
LABEL_25:
    uint64_t v11 = (void *)v9;
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
    char v13 = 0;
    char v14 = 0;
    goto LABEL_26;
  }

  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)( const void *a1, size_t a2, void *__dst)
{
  return __dst;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  specialized Array._endMutation()();
  swift_retain(v6);
  uint64_t v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease(v6);
  uint64_t result = (void *)v5;
  if (!__OFSUB__(v5, 1LL)) {
    return v6;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  v10[2] = a2;
  if ((a2 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = String.UTF8View._foreignCount()();
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    uint64_t v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }

  else
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }

  if (!v7) {
    return specialized ContiguousArray.init()();
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0LL);
  swift_retain(v5);
  swift_release(v5);
  uint64_t result = (void *)_StringGuts.copyUTF8(into:)(v5 + 4, v7, a1, a2);
  uint64_t v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain(0xE000000000000000LL);
    uint64_t result = v10;
    v10[0] = 0LL;
    v10[1] = 0xE000000000000000LL;
    outlined destroy of String.UTF8View((uint64_t)v10);
    if (v6 == (void *)v7) {
      return v5;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v4 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v0 = v4;
  if ((result & 1) == 0)
  {
    uint64_t v2 = specialized Array.count.getter(*v3);
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 + 1,  1,  *v3);
    *char v3 = result;
  }

  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 24LL) >> 1 < result + 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( *(void *)(*(void *)v1 + 24LL) >> 1 != 0LL,  result + 1,  1,  *v2);
    *uint64_t v2 = result;
  }

  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  *(void *)(v4 + 16) = v5;
  swift_release(v4);
  uint64_t v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release(v6);
}

void specialized Array._endMutation()()
{
  *unint64_t v0 = *v0;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v7)
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v6 = (void *)swift_allocObject(v2, v7 + 32, 7LL);
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      size_t v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      ((void (*)(void))swift_retain)();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (void)(v6 + 4));
    }

    else
    {
      swift_retain(v6);
      v6[2] = a1;
      v6[3] = 2 * v7;
    }

    swift_release(v6);
    return v6;
  }

  else
  {
    ((void (*)(void))swift_retain)();
    return &_swiftEmptyArrayStorage;
  }

void *specialized ContiguousArray.init()()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result = swift_retain(a4);
  uint64_t v16 = *(void *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2LL) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }

      if (2 * v16 < a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v16;
      }
    }

    else
    {
      uint64_t v11 = *(void *)(a4 + 24) >> 1;
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  int64_t v10 = *(void *)(a4 + 16);
  if (v11 < v10) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v11;
  }
  if (v9)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject(v5, v9 + 32, 7LL);
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      size_t v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain(v8);
      void v8[2] = v10;
      v8[3] = 2 * (v6 - (void)(v8 + 4));
    }

    else
    {
      swift_retain(v8);
      void v8[2] = v10;
      v8[3] = 2 * v9;
    }

    swift_release(v8);
    uint64_t v7 = (char *)v8;
  }

  else
  {
    swift_retain(&_swiftEmptyArrayStorage);
    uint64_t v7 = (char *)&_swiftEmptyArrayStorage;
  }

  if ((a1 & 1) != 0)
  {
    swift_release(a4);
    swift_bridgeObjectRelease(a4);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(void *)(a4 + 16) = 0LL;
    swift_release(a4);
  }

  else
  {
    swift_bridgeObjectRelease(a4);
    swift_release(a4);
    swift_retain(a4);
    swift_release(a4);
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease(a4);
  }

  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result) {
    return (char *)memmove(a3, result, a2);
  }
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  size_t v4 = *result;
  *size_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_10000BDDC()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10000BE0C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

_BYTE **closure #1 in OSLogArguments.append(_:)partial apply(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10000BE3C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10000BE84()
{
  return swift_deallocObject(v2, 32LL);
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10000BECC()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #2 in checkValidTextInputs(data:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #2 in checkValidTextInputs(data:)();
  return result;
}

uint64_t sub_10000BF14()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000BF44()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000BF74()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10000BFBC()
{
  return swift_deallocObject(v2, 32LL);
}

void *closure #1 in OSLogArguments.append(_:)partial apply(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10000C004()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #3 in checkValidTextInputs(data:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #3 in checkValidTextInputs(data:)();
  return result;
}

uint64_t sub_10000C04C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C07C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C0AC()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000C0F4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t outlined init with copy of Int?(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(void *)a2 = *(void *)a1;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_10000C158()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #11 in checkValidNumericInputRange(data:)()
{
  return implicit closure #11 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000C188()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C1B8()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int64_t v15 = a1;
  uint64_t v18 = a6;
  v13[1] = a7;
  uint64_t v22 = a6;
  uint64_t v16 = *(void *)(a6 - 8);
  v13[0] = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v17 = (uint64_t)v13 - v13[0];
  v8(v7);
  uint64_t v14 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  uint64_t v20 = *v15;
  uint64_t v21 = v20 + v14;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( v17,  partial apply for closure #1 in serialize<A>(_:at:),  (uint64_t)v19,  v18,  (uint64_t)&type metadata for Never,  (uint64_t)&type metadata for () + 8,  (uint64_t)&protocol witness table for Never,  v13[2]);
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  *v15 += v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v13 = a5;
  uint64_t v14 = a8;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  uint64_t v21 = a6;
  uint64_t v15 = *(void *)(a5 - 8);
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v9 = __chkstk_darwin();
  uint64_t v18 = (char *)&v12 - v16;
  uint64_t v20 = v9 + *(void *)(*(void *)(v10 - 8) + 64LL);
  uint64_t result = v17();
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v18, v13);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10000C440()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10000C488()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

uint64_t sub_10000C58C()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #13 in checkValidNumericInputRange(data:)()
{
  return implicit closure #13 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000C5BC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C5EC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C61C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10000C664()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)partial apply(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

uint64_t sub_10000C700()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #15 in checkValidNumericInputRange(data:)()
{
  return implicit closure #15 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000C730()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C760()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C790()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000C7D8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000C874()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #17 in checkValidNumericInputRange(data:)()
{
  return implicit closure #17 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000C8A4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C8D4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000C904()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000C94C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000C9E8()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #19 in checkValidNumericInputRange(data:)()
{
  return implicit closure #19 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000CA18()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CA48()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CA78()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000CAC0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000CB5C()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #21 in checkValidNumericInputRange(data:)()
{
  return implicit closure #21 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000CB8C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CBBC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CBEC()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000CC34()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000CCD0()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #23 in checkValidNumericInputRange(data:)()
{
  return implicit closure #23 in checkValidNumericInputRange(data:)(*(double *)(v0 + 16));
}

uint64_t sub_10000CD00()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CD30()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)( uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000CD80()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v4 = a4();
  uint64_t v6 = *a1;
  double v8 = v4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  uint64_t result = a1;
  *a1 = v6 + 8;
  return result;
}

uint64_t sub_10000CE2C()
{
  return swift_deallocObject(v2, 32LL);
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(double (**)(void))(v3 + 16));
}

uint64_t sub_10000CE74()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #25 in checkValidNumericInputRange(data:)()
{
  return implicit closure #25 in checkValidNumericInputRange(data:)(*(double *)(v0 + 16));
}

uint64_t sub_10000CEA4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CED4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CF04()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10000CF4C()
{
  return swift_deallocObject(v2, 32LL);
}

void *closure #1 in OSLogArguments.append(_:)partial apply(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(double (**)(void))(v3 + 16));
}

uint64_t sub_10000CF94()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #27 in checkValidNumericInputRange(data:)()
{
  return implicit closure #27 in checkValidNumericInputRange(data:)(*(void *)(v0 + 16));
}

uint64_t sub_10000CFC4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000CFF4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10000D024()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10000D06C()
{
  return swift_deallocObject(v2, 32LL);
}

unint64_t base witness table accessor for RawRepresentable in NSRegularExpressionOptions()
{
  return lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSRegularExpressionOptions()
{
  return lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSMatchingOptions()
{
  return lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSMatchingOptions()
{
  return lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
}

unint64_t base witness table accessor for Equatable in NSMatchingOptions()
{
  return lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSMatchingOptions()
{
  return lazy protocol witness table accessor for type NSMatchingOptions and conformance NSMatchingOptions();
}

unint64_t base witness table accessor for Equatable in NSRegularExpressionOptions()
{
  return lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSRegularExpressionOptions()
{
  return lazy protocol witness table accessor for type NSRegularExpressionOptions and conformance NSRegularExpressionOptions();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }

  return v2;
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1LL;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View( uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }

  return v2;
}

unint64_t lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v3 = lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>;
  if (!lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>)
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>);
    return WitnessTable;
  }

  return v3;
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80LL) & 0x20000) != 0)
  {
    uint64_t v2 = swift_slowAlloc( *(void *)(*(void *)(a1 - 8) + 64LL),  *(_DWORD *)(*(void *)(a1 - 8) + 80LL));
    *a2 = v2;
    return v2;
  }

  return (uint64_t)v5;
}

Swift::Double __swiftcall getMean(nums:)(Swift::OpaquePointer nums)
{
  *(Swift::OpaquePointer *)&v7[1] = (Swift::OpaquePointer)nums._rawValue;
  v6[1] = nums._rawValue;
  v6[0] = 0LL;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  unint64_t v1 = lazy protocol witness table accessor for type [Double] and conformance [A]();
  Sequence.reduce<A>(_:_:)(v7, v6, implicit closure #1 in getMean(nums:), 0LL, v4, &type metadata for Double, v1);
  double v5 = Double.init(_:)(v7[0]);
  return v5 / (double)specialized Array.count.getter(nums._rawValue);
}

double implicit closure #1 in getMean(nums:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [Double] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

Swift::Double __swiftcall getMedian(nums:)(Swift::OpaquePointer nums)
{
  uint64_t v8 = specialized Array.count.getter(nums._rawValue) / 2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  unint64_t v1 = lazy protocol witness table accessor for type [Double] and conformance [A]();
  uint64_t v10 = Sequence<>.sorted()(v9, v1, &protocol witness table for Double);
  if (specialized Array.count.getter(v10) % 2)
  {
    Swift::Double v12 = specialized Array.subscript.getter(v8, v10);
    Swift::Double v4 = Double.init(_:)(v12);
    swift_bridgeObjectRelease();
    return v4;
  }

  Swift::Double result = specialized Array.subscript.getter(v8, v10);
  double v7 = result;
  if (!__OFSUB__(v8, 1LL))
  {
    double v11 = specialized Array.subscript.getter(v8 - 1, v10);
    Swift::Double v5 = Double.init(_:)((v7 + v11) / 2.0);
    swift_bridgeObjectRelease();
    return v5;
  }

  __break(1u);
  return result;
}

{
  unint64_t v1;
  Swift::Double result;
  Swift::Double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v8 = specialized Array.count.getter() / 2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  unint64_t v1 = lazy protocol witness table accessor for type [Int] and conformance [A]();
  uint64_t v10 = Sequence<>.sorted()(v9, v1, &protocol witness table for Int);
  if (specialized Array.count.getter() % 2)
  {
    Swift::Double v5 = (double)specialized Array.subscript.getter(v8, v10);
    swift_bridgeObjectRelease();
    return v5;
  }

  double v7 = specialized Array.subscript.getter(v8, v10);
  if (__OFSUB__(v8, 1LL))
  {
    __break(1u);
  }

  else
  {
    double v11 = specialized Array.subscript.getter(v8 - 1, v10);
    if (!__OFADD__(v7, v11))
    {
      swift_bridgeObjectRelease();
      return (double)((v7 + v11) / 2);
    }
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [Int] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

{
  uint64_t v0;
  unint64_t WitnessTable;
  uint64_t v3;
  uint64_t v3 = lazy protocol witness table cache variable for type [Int] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Int] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [Int] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

void *getSteadyList(windowSize:rssiThreshold:rssiList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v58 = 0LL;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  uint64_t v41 = 0LL;
  v69[5] = a1;
  v69[4] = a2;
  v69[3] = a3;
  uint64_t v33 = specialized Array.count.getter();
  v69[2] = v33;
  uint64_t v29 = a1 / 2;
  v69[1] = a1 / 2;
  v69[0] = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
  uint64_t v68 = -1LL;
  if (v33 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
    __break(1u);
  }

  uint64_t v61 = 0LL;
  uint64_t v62 = v33;
  uint64_t v63 = specialized Collection<>.makeIterator()(0LL, v33);
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  while (1)
  {
    Swift::Double result = (void *)specialized IndexingIterator.next()();
    uint64_t v59 = result;
    char v60 = v6 & 1;
    uint64_t v28 = result;
    if ((v6 & 1) != 0)
    {
      uint64_t v16 = v69[0];
      swift_bridgeObjectRetain();
      outlined destroy of [Int](v69);
      return (void *)v16;
    }

    uint64_t v58 = result;
    if (v29 < v33)
    {
      if ((uint64_t)result >= v29)
      {
        if (__OFSUB__(result, v29)) {
          goto LABEL_49;
        }
        v39 = (char *)result - v29;
        uint64_t v38 = 0LL;
        Swift::Double result = max<A>(_:_:)(v40, &v39, &v38, &type metadata for Int, &protocol witness table for Int);
        uint64_t v67 = v40[0];
        if (__OFADD__(v28, v29)) {
          goto LABEL_50;
        }
        v37[0] = (char *)v28 + v29;
        if (__OFSUB__(v33, 1LL)) {
          goto LABEL_51;
        }
        uint64_t v36 = v33 - 1;
        min<A>(_:_:)(v37, &v36, &type metadata for Int, &protocol witness table for Int);
        uint64_t v66 = v37[1];
      }

      else
      {
        uint64_t v67 = 0LL;
        if (__OFADD__(result, v29)) {
          goto LABEL_52;
        }
        v35[0] = (char *)result + v29;
        if (__OFSUB__(v33, 1LL)) {
          goto LABEL_53;
        }
        uint64_t v34 = v33 - 1;
        min<A>(_:_:)(v35, &v34, &type metadata for Int, &protocol witness table for Int);
        uint64_t v66 = v35[1];
      }
    }

    else
    {
      uint64_t v67 = 0LL;
      if (__OFSUB__(v33, 1LL)) {
        goto LABEL_54;
      }
      uint64_t v66 = v33 - 1;
    }

    uint64_t v26 = v67;
    uint64_t v27 = v66;
    if (v66 < v67)
    {
      LOBYTE(v15) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v15,  347LL,  0);
      __break(1u);
    }

    swift_bridgeObjectRetain();
    uint64_t v55 = a3;
    v54[0] = v26;
    v54[1] = v27;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
    unint64_t v21 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    unint64_t v13 = lazy protocol witness table accessor for type ClosedRange<Int> and conformance ClosedRange<A>();
    MutableCollection.subscript.getter(&v56, v54, v19, v20, v21, v13);
    outlined destroy of [Int](&v55);
    __int128 v22 = v56;
    __int128 v23 = v57;
    __int128 v52 = v56;
    __int128 v53 = v57;
    __int128 v47 = v56;
    __int128 v48 = v57;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Int>);
    unint64_t v25 = lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
    Sequence<>.max()(&v49, v24);
    if ((v50 & 1) != 0)
    {
      LOBYTE(v15) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/DataPreprocessing.swift",  37LL,  v15,  63LL,  0);
      __break(1u);
    }

    else
    {
      uint64_t v18 = v49;
    }

    __int128 v43 = v22;
    __int128 v44 = v23;
    Swift::Double result = Sequence<>.min()(&v45, v24, v25, &protocol witness table for Int);
    if ((v46 & 1) != 0)
    {
      LOBYTE(v15) = 2;
      Swift::Double result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/DataPreprocessing.swift",  37LL,  v15,  63LL,  0);
      __break(1u);
    }

    else
    {
      uint64_t v17 = v45;
    }

    if (__OFSUB__(v18, v17)) {
      break;
    }
    uint64_t v42 = v18 - v17;
    abs<A>(_:)(&v51, &v42, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int);
    uint64_t v41 = v51;
    uint64_t v68 = a2 >= v51;
    v40[1] = v68;
    specialized Array.append(_:)();
    swift_unknownObjectRelease(v22);
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Int]( void *a1)
{
}

unint64_t lazy protocol witness table accessor for type ClosedRange<Int> and conformance ClosedRange<A>()
{
  uint64_t v3 = lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>;
  if (!lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>)
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClosedRange<Int>);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ClosedRange<A>, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>);
    return WitnessTable;
  }

  return v3;
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>()
{
  uint64_t v3 = lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>)
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Int>);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>);
    return WitnessTable;
  }

  return v3;
}

uint64_t getFlatList(durationThreshold:steadyList:)(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  char v59 = 0;
  uint64_t v51 = 0LL;
  v63[3] = a1;
  v63[2] = a2;
  uint64_t v42 = specialized Array.count.getter();
  v63[1] = v42;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: Int, end: Int, count: Int));
  uint64_t v3 = _allocateUninitializedArray<A>(_:)(0LL, v2);
  uint64_t result = v42;
  v63[0] = v3;
  char v62 = 0;
  uint64_t v61 = 0LL;
  if (v42 < a1)
  {
LABEL_93:
    uint64_t v25 = v63[0];
    swift_bridgeObjectRetain();
    outlined destroy of [(start: Int, end: Int, count: Int)](v63);
    return v25;
  }

  uint64_t v39 = v42 - 2;
  if (!__OFSUB__(v42, 2LL))
  {
    if (v39 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
      __break(1u);
    }

    uint64_t v54 = 0LL;
    uint64_t v55 = v42 - 2;
    uint64_t result = specialized Collection<>.makeIterator()(0LL, v39);
    uint64_t v56 = result;
    uint64_t v57 = v6;
    uint64_t v58 = v7;
    char v59 = v8 & 1;
    while (1)
    {
      uint64_t v52 = specialized IndexingIterator.next()(result);
      char v53 = v9 & 1;
      uint64_t v38 = v52;
      if ((v9 & 1) != 0) {
        goto LABEL_93;
      }
      uint64_t v51 = v52;
      uint64_t v50 = ((uint64_t (*)(void))specialized Array.subscript.getter)();
      BOOL v37 = v50 != 0;
      uint64_t result = swift_bridgeObjectRetain();
      if (v37)
      {
        BOOL v36 = 0;
      }

      else
      {
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_107;
        }
        BOOL v36 = specialized Array.subscript.getter(v38 + 1, a2) == 1;
      }

      uint64_t result = swift_bridgeObjectRelease();
      if (v36)
      {
        char v62 = 0;
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_106;
        }
        uint64_t v61 = v38 + 1;
      }

      else
      {
        uint64_t v49 = specialized Array.subscript.getter(v38, a2);
        BOOL v35 = v49 != 1;
        uint64_t result = swift_bridgeObjectRetain();
        if (v35)
        {
          BOOL v34 = 0;
        }

        else
        {
          if (__OFADD__(v38, 1LL)) {
            goto LABEL_105;
          }
          BOOL v34 = specialized Array.subscript.getter(v38 + 1, a2) == 0;
        }

        uint64_t result = swift_bridgeObjectRelease();
        if (v34)
        {
          char v62 = 0;
          uint64_t v60 = v38;
          if (__OFSUB__(v38, v61)) {
            goto LABEL_102;
          }
          if (v38 - v61 >= a1)
          {
            uint64_t v33 = v38 - v61;
            if (__OFSUB__(v38, v61)) {
              goto LABEL_103;
            }
            if (__OFADD__(v33, 1LL)) {
              goto LABEL_104;
            }
            v43[0] = v61;
            v43[1] = v38;
            v43[2] = v33 + 1;
            uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: Int, end: Int, count: Int)]);
            uint64_t result = Array.append(_:)(v43, v16);
          }
        }

        else
        {
          uint64_t v48 = specialized Array.subscript.getter(v38, a2);
          BOOL v32 = v48 != 1;
          uint64_t result = swift_bridgeObjectRetain();
          if (v32)
          {
            BOOL v31 = 0;
          }

          else
          {
            if (__OFADD__(v38, 1LL)) {
              goto LABEL_101;
            }
            uint64_t v44 = specialized Array.subscript.getter(v38 + 1, a2);
            BOOL v31 = v44 == 1;
          }

          uint64_t result = swift_bridgeObjectRelease();
          if (v31)
          {
            char v62 = 1;
          }

          else
          {
            uint64_t v47 = specialized Array.subscript.getter(v38, a2);
            BOOL v30 = v47 != 0;
            uint64_t result = swift_bridgeObjectRetain();
            if (v30)
            {
              BOOL v29 = 0;
            }

            else
            {
              if (__OFADD__(v38, 1LL)) {
                goto LABEL_100;
              }
              uint64_t v45 = specialized Array.subscript.getter(v38 + 1, a2);
              BOOL v29 = v45 == 0;
            }

            uint64_t result = swift_bridgeObjectRelease();
            if (v29) {
              char v62 = 0;
            }
          }
        }
      }

      if (__OFSUB__(v42, 2LL)) {
        goto LABEL_95;
      }
      if (v38 == v42 - 2 && (v62 & 1) == 1)
      {
        uint64_t v27 = v42 - 1;
        if (__OFSUB__(v42, 1LL)) {
          goto LABEL_98;
        }
        if (__OFSUB__(v27, v61)) {
          goto LABEL_99;
        }
        BOOL v26 = v27 - v61 >= a1;
      }

      else
      {
        BOOL v26 = 0;
      }

      if (v26)
      {
        if (__OFSUB__(v42, 1LL)) {
          goto LABEL_96;
        }
        if (__OFSUB__(v42, v61)) {
          goto LABEL_97;
        }
        v46[0] = v61;
        v46[1] = v42 - 1;
        v46[2] = v42 - v61;
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: Int, end: Int, count: Int)]);
        uint64_t result = Array.append(_:)(v46, v24);
      }
    }
  }

  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
  return result;
}

uint64_t getReducedData(flatList:rssiList:obrList:noiseList:txRateList:rxRateList:dowList:hourList:ssidList:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v130[0] = 0LL;
  v130[1] = 0LL;
  uint64_t v122 = 0LL;
  uint64_t v123 = 0LL;
  uint64_t v124 = 0LL;
  rawValue = 0LL;
  uint64_t v112 = 0LL;
  uint64_t v107 = 0LL;
  uint64_t v102 = 0LL;
  uint64_t v97 = 0LL;
  uint64_t v92 = 0LL;
  uint64_t v87 = 0LL;
  uint64_t v82 = 0LL;
  Swift::Double v81 = 0.0;
  Swift::Double v80 = 0.0;
  Swift::Double v79 = 0.0;
  Swift::Double v78 = 0.0;
  Swift::Double v77 = 0.0;
  uint64_t v73 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v63 = 0LL;
  v131[9] = a1;
  v131[8] = a2;
  v131[7] = a3;
  v131[6] = a4;
  v131[5] = a5;
  v131[4] = a6;
  v131[3] = a7;
  v131[2] = a8;
  v131[1] = a9;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v131[0] = _allocateUninitializedArray<A>(_:)(0LL, v9);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (start: Int, end: Int, count: Int));
  if (Array.count.getter(a1, v10) > 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v129 = a1;
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(start: Int, end: Int, count: Int)]);
    unint64_t v11 = lazy protocol witness table accessor for type [(start: Int, end: Int, count: Int)] and conformance [A]();
    Collection<>.makeIterator()(v130, v53, v11);
    while (1)
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[(start: Int, end: Int, count: Int)]>);
      IndexingIterator.next()(&v125, v12);
      uint64_t v51 = v125;
      uint64_t v52 = v126;
      if ((v128 & 1) != 0) {
        break;
      }
      uint64_t v122 = v125;
      uint64_t v123 = v126;
      uint64_t v124 = v127;
      if (v126 < v125)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v120 = a3;
      v119[0] = v51;
      v119[1] = v52;
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
      unint64_t v47 = lazy protocol witness table accessor for type [Double] and conformance [A]();
      unint64_t v48 = lazy protocol witness table accessor for type ClosedRange<Int> and conformance ClosedRange<A>();
      MutableCollection.subscript.getter(v121, v119, v45, v46, v47, v48);
      outlined destroy of [Double](&v120);
      v118[0] = v121[0];
      v118[1] = v121[1];
      v118[2] = v121[2];
      v118[3] = v121[3];
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Double>);
      lazy protocol witness table accessor for type ArraySlice<Double> and conformance ArraySlice<A>();
      nums._rawValue = (void *)Array.init<A>(_:)(v118, &type metadata for Double, v49);
      rawValue = nums._rawValue;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v115 = a2;
      v114[0] = v51;
      v114[1] = v52;
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      unint64_t v42 = lazy protocol witness table accessor for type [Int] and conformance [A]();
      MutableCollection.subscript.getter(v116, v114, v41, v46, v42, v48);
      outlined destroy of [Int](&v115);
      v113[0] = v116[0];
      v113[1] = v116[1];
      v113[2] = v116[2];
      v113[3] = v116[3];
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Int>);
      lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
      v44._rawValue = (void *)Array.init<A>(_:)(v113, &type metadata for Int, v43);
      uint64_t v112 = v44._rawValue;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v110 = a4;
      v109[0] = v51;
      v109[1] = v52;
      MutableCollection.subscript.getter(v111, v109, v41, v46, v42, v48);
      outlined destroy of [Int](&v110);
      v108[0] = v111[0];
      v108[1] = v111[1];
      v108[2] = v111[2];
      v108[3] = v111[3];
      v40._rawValue = (void *)Array.init<A>(_:)(v108, &type metadata for Int, v43);
      uint64_t v107 = v40._rawValue;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v105 = a5;
      v104[0] = v51;
      v104[1] = v52;
      MutableCollection.subscript.getter(v106, v104, v45, v46, v47, v48);
      outlined destroy of [Double](&v105);
      v103[0] = v106[0];
      v103[1] = v106[1];
      v103[2] = v106[2];
      v103[3] = v106[3];
      v39._rawValue = (void *)Array.init<A>(_:)(v103, &type metadata for Double, v49);
      uint64_t v102 = v39._rawValue;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v100 = a6;
      v99[0] = v51;
      v99[1] = v52;
      MutableCollection.subscript.getter(v101, v99, v45, v46, v47, v48);
      outlined destroy of [Double](&v100);
      v98[0] = v101[0];
      v98[1] = v101[1];
      v98[2] = v101[2];
      v98[3] = v101[3];
      v38._rawValue = (void *)Array.init<A>(_:)(v98, &type metadata for Double, v49);
      uint64_t v97 = v38._rawValue;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v95 = a7;
      v94[0] = v51;
      v94[1] = v52;
      MutableCollection.subscript.getter(v96, v94, v41, v46, v42, v48);
      outlined destroy of [Int](&v95);
      v93[0] = v96[0];
      v93[1] = v96[1];
      v93[2] = v96[2];
      v93[3] = v96[3];
      uint64_t v37 = Array.init<A>(_:)(v93, &type metadata for Int, v43);
      uint64_t v92 = v37;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v90 = a8;
      v89[0] = v51;
      v89[1] = v52;
      MutableCollection.subscript.getter(v91, v89, v41, v46, v42, v48);
      outlined destroy of [Int](&v90);
      v88[0] = v91[0];
      v88[1] = v91[1];
      v88[2] = v91[2];
      v88[3] = v91[3];
      uint64_t v36 = Array.init<A>(_:)(v88, &type metadata for Int, v43);
      uint64_t v87 = v36;
      if (v52 < v51)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v18,  347LL,  0);
        __break(1u);
      }

      swift_bridgeObjectRetain();
      uint64_t v85 = a9;
      v84[0] = v51;
      v84[1] = v52;
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      unint64_t v13 = lazy protocol witness table accessor for type [String] and conformance [A]();
      MutableCollection.subscript.getter(v86, v84, v27, v46, v13, v48);
      outlined destroy of [String](&v85);
      v83[0] = v86[0];
      v83[1] = v86[1];
      v83[2] = v86[2];
      v83[3] = v86[3];
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<String>);
      lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>();
      uint64_t v29 = Array.init<A>(_:)(v83, &type metadata for String, v28);
      uint64_t v82 = v29;
      Swift::Double v30 = getMedian(nums:)(nums);
      Swift::Double v81 = v30;
      Swift::Double v31 = getMedian(nums:)(v44);
      Swift::Double v80 = v31;
      Swift::Double v32 = getMedian(nums:)(v40);
      Swift::Double v79 = v32;
      Swift::Double v33 = getMedian(nums:)(v39);
      Swift::Double v78 = v33;
      Swift::Double v34 = getMedian(nums:)(v38);
      Swift::Double v77 = v34;
      uint64_t v74 = v37;
      unint64_t v35 = lazy protocol witness table accessor for type [Int] and conformance [A]();
      Sequence<>.min()(&v75, v41, v35, &protocol witness table for Int);
      if ((v76 & 1) != 0)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/DataPreprocessing.swift",  37LL,  v18,  132LL,  0);
        __break(1u);
      }

      else
      {
        uint64_t v26 = v75;
      }

      uint64_t v73 = v26;
      uint64_t v70 = v36;
      Sequence<>.min()(&v71, v41, v35, &protocol witness table for Int);
      if ((v72 & 1) != 0)
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/DataPreprocessing.swift",  37LL,  v18,  133LL,  0);
        __break(1u);
      }

      else
      {
        uint64_t v25 = v71;
      }

      uint64_t v69 = v25;
      uint64_t v66 = v29;
      unint64_t v14 = lazy protocol witness table accessor for type [String] and conformance [A]();
      Sequence<>.min()(&v67, v27, v14, &protocol witness table for String);
      if (v68)
      {
        uint64_t v23 = v67;
        uint64_t v24 = v68;
      }

      else
      {
        LOBYTE(v18) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/DataPreprocessing.swift",  37LL,  v18,  134LL,  0);
        __break(1u);
      }

      uint64_t v64 = v23;
      uint64_t v65 = v24;
      uint64_t v22 = specialized Array.count.getter(v44._rawValue);
      uint64_t v63 = v22;
      uint64_t v20 = specialized _allocateUninitializedArray<A>(_:)(9LL);
      unint64_t v21 = v15;
      v15[3] = &type metadata for Double;
      *(Swift::Double *)int v15 = v30;
      v15[7] = &type metadata for Double;
      *((Swift::Double *)v15 + 4) = v31;
      v15[11] = &type metadata for Double;
      *((Swift::Double *)v15 + 8) = v32;
      v15[15] = &type metadata for Double;
      *((Swift::Double *)v15 + 12) = v33;
      v15[19] = &type metadata for Double;
      *((Swift::Double *)v15 + 16) = v34;
      v15[23] = &type metadata for Int;
      v15[20] = v26;
      v15[27] = &type metadata for Int;
      v15[24] = v25;
      swift_bridgeObjectRetain();
      v21[31] = &type metadata for String;
      v21[28] = v23;
      v21[29] = v24;
      v21[35] = &type metadata for Int;
      v21[32] = v22;
      _finalizeUninitializedArray<A>(_:)();
      uint64_t v62 = v20;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [[Any]]);
      Array.append(_:)(&v62, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    outlined destroy of IndexingIterator<[(start: Int, end: Int, count: Int)]>(v130);
  }

  uint64_t v19 = v131[0];
  swift_bridgeObjectRetain();
  outlined destroy of [[Any]](v131);
  return v19;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [[Any]]( void *a1)
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Double]( void *a1)
{
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Double> and conformance ArraySlice<A>()
{
  uint64_t v3 = lazy protocol witness table cache variable for type ArraySlice<Double> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Double> and conformance ArraySlice<A>)
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Double>);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Double> and conformance ArraySlice<A>);
    return WitnessTable;
  }

  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]( void *a1)
{
}

unint64_t lazy protocol witness table accessor for type ArraySlice<String> and conformance ArraySlice<A>()
{
  uint64_t v3 = lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>)
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<String>);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>);
    return WitnessTable;
  }

  return v3;
}

uint64_t preprocessData(rssiList:obrList:noiseList:txRateList:rxRateList:dowList:hourList:ssidList:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = getSteadyList(windowSize:rssiThreshold:rssiList:)(7LL, 5LL, a1);
  uint64_t v18 = getFlatList(durationThreshold:steadyList:)(3LL, (uint64_t)v19);
  uint64_t v17 = getReducedData(flatList:rssiList:obrList:noiseList:txRateList:rxRateList:dowList:hourList:ssidList:)( v18,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t PluginErrors.description.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DataFrame is wrong and doesn't contain required columns",  0x37uLL,  1)._countAndFlagsBits;
}

uint64_t PluginErrors.errorDescription.getter()
{
  return PluginErrors.description.getter();
}

uint64_t static PluginErrors.__derived_enum_equals(_:_:)()
{
  return 1LL;
}

uint64_t PluginErrors.hash(into:)(uint64_t a1)
{
  v2[2] = a1;
  v2[1] = 0LL;
  v2[0] = 0LL;
  return Hasher.combine<A>(_:)(v2, &type metadata for Int, &protocol witness table for Int);
}

uint64_t PluginErrors.hashValue.getter()
{
  unint64_t v0 = lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
  return _hashValue<A>(for:)(v2, &type metadata for PluginErrors, v0);
}

unint64_t lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors;
  if (!lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors)
  {
    unint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for PluginErrors,  &type metadata for PluginErrors);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors;
  if (!lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors)
  {
    unint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for PluginErrors,  &type metadata for PluginErrors);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors;
  if (!lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors)
  {
    unint64_t WitnessTable = swift_getWitnessTable( &protocol conformance descriptor for PluginErrors,  &type metadata for PluginErrors);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type PluginErrors and conformance PluginErrors);
    return WitnessTable;
  }

  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PluginErrors()
{
  return static PluginErrors.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PluginErrors()
{
  return PluginErrors.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PluginErrors(uint64_t a1)
{
  return PluginErrors.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginErrors(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance PluginErrors()
{
  return PluginErrors.errorDescription.getter();
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance PluginErrors()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance PluginErrors()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance PluginErrors()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PluginErrors()
{
  return PluginErrors.description.getter();
}

uint64_t protocol witness for Error._domain.getter in conformance PluginErrors()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance PluginErrors()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance PluginErrors()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance PluginErrors()
{
  return Error._getEmbeddedNSError()();
}

void reportErrorMetrics(interfaceType:validationMeanAbsPercentError:trainingMeanAbsPercentError:rmseError:experimentID:deploymentID:treatmentID:carrierCount:appCount:sessionCount:ssidCount:trainingDataCount:)( Swift::Int a1, uint64_t a2, void *a3, Swift::Int32 a4, uint64_t a5, void *a6, Swift::Int a7, Swift::Int a8, double a9, double a10, Swift::Double a11, Swift::Int a12, Swift::Int a13, Swift::Int a14)
{
  string._uint64_t countAndFlagsBits = a2;
  string._object = a3;
  v23._uint64_t countAndFlagsBits = a5;
  v23._object = a6;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.MediaML.ValidationError", 0x21uLL, 1);
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
  uint64_t v26 = _allocateUninitializedArray<A>(_:)(13LL, v25);
  uint64_t v24 = v14;
  *unint64_t v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InterfaceType", 0xDuLL, 1);
  type metadata accessor for NSNumber();
  v24[1]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.__allocating_init(value:)(a1).super.super.isa;
  *(Swift::String *)((char *)v24 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "InterfaceType_string",  0x14uLL,  1);
  v24[2]._object = NSNumber.__allocating_init(value:)(a1).super.super.isa;
  v24[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ValidationError_MAPE", 0x14uLL, 1);
  v24[4]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.__allocating_init(value:)(a9 * 1000.0).super.super.isa;
  *(Swift::String *)((char *)v24 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "TrainingError_MAPE",  0x12uLL,  1);
  v24[5]._object = NSNumber.__allocating_init(value:)(a10 * 1000.0).super.super.isa;
  v24[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ValidationError_RMSE", 0x14uLL, 1);
  v24[7]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.__allocating_init(value:)(a11).super.super.isa;
  *(Swift::String *)((char *)v24 + 120) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "CarrierCount",  0xCuLL,  1);
  v24[8]._object = NSNumber.__allocating_init(value:)(a7).super.super.isa;
  v24[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AppCount", 8uLL, 1);
  v24[10]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.__allocating_init(value:)(a8).super.super.isa;
  *(Swift::String *)((char *)v24 + 168) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "SessionCount",  0xCuLL,  1);
  v24[11]._object = NSNumber.__allocating_init(value:)(a12).super.super.isa;
  v24[12] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SSIDCount", 9uLL, 1);
  v24[13]._uint64_t countAndFlagsBits = (uint64_t)NSNumber.__allocating_init(value:)(a13).super.super.isa;
  *(Swift::String *)((char *)v24 + 216) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "TrainingDataCount",  0x11uLL,  1);
  v24[14]._object = NSNumber.__allocating_init(value:)(a14).super.super.isa;
  v24[15] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("trialExperimentId", 0x11uLL, 1);
  type metadata accessor for NSString();
  swift_bridgeObjectRetain();
  v24[16]._uint64_t countAndFlagsBits = (uint64_t)NSString.__allocating_init(string:)(string);
  *(Swift::String *)((char *)v24 + 264) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "trialDeploymentId",  0x11uLL,  1);
  v24[17]._object = NSNumber.__allocating_init(value:)(a4).super.super.isa;
  v24[18] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("trialTreatmentId", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v24[19]._uint64_t countAndFlagsBits = (uint64_t)NSString.__allocating_init(string:)(v23);
  _finalizeUninitializedArray<A>(_:)();
  type metadata accessor for NSObject();
  Dictionary.init(dictionaryLiteral:)(v26);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  AnalyticsSendEvent(v28, isa);
}

unint64_t type metadata accessor for NSNumber()
{
  uint64_t v3 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }

  return v3;
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Int value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Double value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)();
}

unint64_t type metadata accessor for NSString()
{
  uint64_t v3 = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___NSString);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSString);
    return ObjCClassMetadata;
  }

  return v3;
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  uint64_t countAndFlagsBits = string._countAndFlagsBits;
  object = string._object;
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc NSString.init(string:)(countAndFlagsBits, (uint64_t)object);
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Int32 value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

unint64_t type metadata accessor for NSObject()
{
  uint64_t v3 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }

  return v3;
}

uint64_t MediaMLPlugin.logger.unsafeMutableAddressor()
{
  if (one-time initialization token for logger != -1) {
    swift_once(&one-time initialization token for logger, one-time initialization function for logger);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)static MediaMLPlugin.logger);
}

uint64_t static MediaMLPlugin.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v1 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v3);
}

uint64_t variable initialization expression of MediaMLPlugin.dbPath@<X0>(uint64_t a1@<X8>)
{
  v5[1] = a1;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v9 - 8);
  v5[0] = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v9);
  uint64_t v1 = (char *)v5 - v5[0];
  char v8 = (char *)v5 - v5[0];
  uint64_t v2 = mediaMLDataDirectory.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v1, v2, v9);
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rawdata.db", 0xAuLL, 1);
  object = v3._object;
  URL.appendingPathComponent(_:isDirectory:)(v3._countAndFlagsBits);
  swift_bridgeObjectRelease(object);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v8, v9);
}

uint64_t MediaMLPlugin.dbPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = OBJC_IVAR___MediaMLPlugin_dbPath;
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1 + v4);
}

uint64_t MediaMLPlugin.database.getter()
{
  uint64_t v24 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v1 = __chkstk_darwin(0LL);
  unint64_t v11 = &v4[-v10];
  unint64_t v12 = (*(void *)(*(void *)(type metadata accessor for SQLiteDB.Location(v1) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v13);
  uint64_t v18 = &v4[-v12];
  uint64_t v24 = v0;
  type metadata accessor for SQLiteDB();
  uint64_t v14 = OBJC_IVAR___MediaMLPlugin_dbPath;
  uint64_t v17 = type metadata accessor for URL(v13);
  uint64_t v16 = *(void *)(v17 - 8);
  (*(void (**)(_BYTE *, uint64_t))(v16 + 16))(v18, v15 + v14);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0LL, 1LL, v17);
  uint64_t v19 = SQLiteDB.__allocating_init(_:)(v18);
  uint64_t v20 = 0LL;
  uint64_t v6 = v19;
  uint64_t v22 = v19;
  swift_retain(v19);
  Swift::Double v5 = &v21;
  uint64_t v21 = v6;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  uint64_t v7 = OSAllocatedUnfairLock<A>.init(initialState:)((uint64_t)v5, v2);
  swift_release(v6);
  return v7;
}

uint64_t OSAllocatedUnfairLock<A>.init(initialState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a1;
  uint64_t v8 = a2;
  uint64_t v11 = a2;
  uint64_t v7 = *(void *)(a2 - 8);
  unint64_t v5 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(a1);
  uint64_t v6 = (uint64_t)&v4 - v5;
  (*(void (**)(void))(v2 + 16))();
  uint64_t v10 = OSAllocatedUnfairLock.init(uncheckedState:)(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  return v10;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #1 in MediaMLPlugin.database.getter()
{
}

uint64_t sub_100011578()
{
  return swift_deallocObject(v2, 24LL);
}

uint64_t partial apply for implicit closure #1 in MediaMLPlugin.database.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #1 in MediaMLPlugin.database.getter();
  return result;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1)._countAndFlagsBits;
}

  ;
}

{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1)._countAndFlagsBits;
}

uint64_t MediaMLPlugin.checkAndPruneProcessedWifiDB()()
{
  v1[27] = v0;
  v1[13] = v1;
  v1[14] = 0LL;
  v1[16] = 0LL;
  v1[18] = 0LL;
  v1[19] = 0LL;
  v1[20] = 0LL;
  v1[21] = 0LL;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[28] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[29] = v3;
  uint64_t v5 = *(void *)(v3 + 64);
  v1[30] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[31] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[14] = v0;
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[32];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB());
  v0[36] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[44];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #3 in MediaMLPlugin.checkAndPruneProcessedWifiDB());
  v0[49] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 384));
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v2;
  *(void *)(v0 + 104) = v0;
  *(void *)(v0 + 432) = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 264);
  *(Swift::String *)(v0 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[50];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))closure #4 in MediaMLPlugin.checkAndPruneProcessedWifiDB());
  v0[53] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v1 = *(Swift::String *)(v0 + 440);
  *(void *)(v0 + 104) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 456) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  Swift::String *v0;
  void *object;
  object = v0[16]._object;
  v0[6]._object = v0;
  v0[29] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pragma wal_checkpoint(truncate)", 0x1FuLL, 1);
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), object);
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v1 = *(Swift::String *)(v0 + 464);
  *(void *)(v0 + 104) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 480) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = v0[38];
  v0[13] = v0;
  swift_release(v1);
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[30];
  swift_release(v0[33]);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0[35];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = v0[36];
  uint64_t v5 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v5);
  uint64_t v6 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = v0[48];
  uint64_t v5 = v0[47];
  uint64_t v6 = v0[38];
  v0[13] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease(v5);
  swift_release(v6);
  uint64_t v2 = v0[49];
  uint64_t v7 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v7);
  uint64_t v8 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[52];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[53];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[56];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[57];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[59];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[60];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

void MediaMLPlugin.checkAndPruneProcessedWifiDB()()
{
  uint64_t v1 = (void *)v0[27];
  v0[13] = v0;
  uint64_t v12 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.checkAndPruneProcessedWifiDB(),  0LL,  v12,  v2,  v2);
  v0[32] = 0LL;
  swift_release(v12);
  object = v11[7]._object;
  v11[16]._object = object;
  if (object)
  {
    v11[8]._uint64_t countAndFlagsBits = (uint64_t)object;
    v11[17] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "SELECT COUNT(*) from processedwifi",  0x22uLL,  1);
    swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), object);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v13 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v13.code;
    uint64_t desc_8 = v13.desc.value._countAndFlagsBits;
    uint64_t v7 = v13.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = v7;
    swift_willThrow(code);
    uint64_t countAndFlagsBits = v11[15]._countAndFlagsBits;
    swift_task_dealloc(v11[15]._object);
    swift_task_dealloc(countAndFlagsBits);
    (*((void (**)(void))v11[6]._object + 1))();
  }

void *MediaMLPlugin.checkAndPruneProcessedWifiDB()()
{
  v0[13] = v0;
  Swift::Int v73 = v0[17];
  v0[19] = v73;
  if (v73 < *MAX_ALLOWED_PROCESSED_DATASIZE.unsafeMutableAddressor())
  {
    uint64_t v16 = *(void *)(v72 + 248);
    uint64_t v17 = *(void *)(v72 + 240);
    swift_release(*(void *)(v72 + 264));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (void *)(*(uint64_t (**)(void))(*(void *)(v72 + 104) + 8LL))();
  }

  uint64_t result = MAX_ALLOWED_PROCESSED_DATASIZE.unsafeMutableAddressor();
  Swift::Int v71 = v73 - *result;
  if (__OFSUB__(v73, *result))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }

  uint64_t result = MAX_ALLOWED_PROCESSED_DATASIZE_PRUNE.unsafeMutableAddressor();
  Swift::Int v70 = v71 + *result;
  BOOL v3 = __OFADD__(v71, *result);
  *(void *)(v72 + 296) = v71 + *result;
  if (v3) {
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)(v72 + 248);
  uint64_t v56 = *(void *)(v72 + 232);
  uint64_t v57 = *(void *)(v72 + 224);
  *(void *)(v72 + 160) = v70;
  uint64_t v55 = swift_allocObject(&unk_1000656B0, 24LL, 7LL);
  *(void *)(v72 + 304) = v55;
  *(void *)(v72 + 168) = v55 + 16;
  *(void *)(v55 + 16) = *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  uint64_t v5 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  *(void *)(v72 + 312) = v6;
  v6(v4, v5, v57);
  uint64_t v61 = swift_allocObject(&unk_1000656D8, 24LL, 7LL);
  *(void *)(v61 + 16) = v70;
  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v69 = static os_log_type_t.info.getter();
  *(void *)(v72 + 176) = 12LL;
  unint64_t v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v72 + 320) = v58;
  unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v72 + 328) = v59;
  unint64_t v7 = lazy protocol witness table accessor for type Int and conformance Int();
  *(void *)(v72 + 336) = v7;
  UnsignedInteger<>.init<A>(_:)( (void *)(v72 + 488),  v72 + 176,  &type metadata for UInt32,  &type metadata for Int,  v58,  v59,  v7);
  uint32_t v60 = *(_DWORD *)(v72 + 488);
  uint64_t v63 = swift_allocObject(&unk_100065700, 17LL, 7LL);
  *(_BYTE *)(v63 + 16) = 0;
  uint64_t v64 = swift_allocObject(&unk_100065728, 17LL, 7LL);
  *(_BYTE *)(v64 + 16) = 8;
  uint64_t v62 = swift_allocObject(&unk_100065750, 32LL, 7LL);
  *(void *)(v62 + 16) = partial apply for implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedWifiDB();
  *(void *)(v62 + 24) = v61;
  uint64_t v65 = swift_allocObject(&unk_100065778, 32LL, 7LL);
  *(void *)(v65 + 16) = _sSiIegd_SiIegr_TRTA_0;
  *(void *)(v65 + 24) = v62;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  *(void *)(v72 + 344) = v67;
  _allocateUninitializedArray<A>(_:)(3LL, v67);
  uint64_t v66 = v8;
  swift_retain(v63);
  void *v66 = closure #1 in OSLogArguments.append(_:)partial apply;
  v66[1] = v63;
  swift_retain(v64);
  v66[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v66[3] = v64;
  swift_retain(v65);
  v66[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v66[5] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v9 = *(void *)(v72 + 288);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v53 = createStorage<A>(capacity:type:)(0LL, v51, v51);
    uint64_t v54 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v74 = buf;
    uint64_t v75 = v53;
    uint64_t v76 = v54;
    serialize(_:at:)(0LL, &v74);
    serialize(_:at:)(1LL, &v74);
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v78 = v63;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    if (v9) {
      return result;
    }
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v78 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v78 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "processedWiFi raw data too large, deleting %ld rows", buf, v60);
    destroyStorage<A>(_:count:)(v53, 0LL);
    destroyStorage<A>(_:count:)(v54, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v63);
    swift_release(v64);
    swift_release(v65);
    uint64_t v50 = 0LL;
  }

  else
  {
    swift_release(v63);
    swift_release(v64);
    swift_release(v65);
    uint64_t v50 = *(void *)(v72 + 288);
  }

  *(void *)(v72 + 352) = v50;
  uint64_t v48 = *(void *)(v72 + 248);
  uint64_t v47 = *(void *)(v72 + 232);
  uint64_t v49 = *(void *)(v72 + 224);

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  *(void *)(v72 + 360) = v10;
  v10(v48, v49);
  if (v70 < *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor())
  {
    uint64_t v46 = *(void *)(v72 + 264);
    *(Swift::String *)(v72 + 368) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedwifi LIMIT ?",  0x21uLL,  1);
    uint64_t v11 = swift_task_alloc(32LL);
    *(void *)(v72 + 384) = v11;
    *(void *)(v11 + 16) = v70;
    return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v46);
  }

  uint64_t v43 = *(void *)(v72 + 304);
  uint64_t v44 = *(void *)(v72 + 296);
  swift_beginAccess(v43 + 16);
  uint64_t v45 = *(void *)(v43 + 16);
  swift_endAccess(v72 + 16);
  if (v45 >= v44)
  {
    *(void *)(v72 + 432) = v50;
    uint64_t v18 = *(void *)(v72 + 264);
    *(Swift::String *)(v72 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
    return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v18);
  }

  else
  {
    uint64_t v40 = *(void *)(v72 + 344);
    uint64_t v32 = *(void *)(v72 + 336);
    uint64_t v31 = *(void *)(v72 + 328);
    uint64_t v30 = *(void *)(v72 + 320);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 312);
    uint64_t v34 = *(void *)(v72 + 304);
    uint64_t v12 = *(void *)(v72 + 240);
    uint64_t v28 = *(void *)(v72 + 224);
    uint64_t v13 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v29(v12, v13, v28);
    uint64_t v14 = swift_retain(v34);
    oslog = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    *(void *)(v72 + 184) = 12LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v72 + 492),  v72 + 184,  &type metadata for UInt32,  &type metadata for Int,  v30,  v31,  v32);
    uint32_t size = *(_DWORD *)(v72 + 492);
    uint64_t v36 = swift_allocObject(&unk_1000657A0, 17LL, 7LL);
    *(_BYTE *)(v36 + 16) = 0;
    uint64_t v37 = swift_allocObject(&unk_1000657C8, 17LL, 7LL);
    *(_BYTE *)(v37 + 16) = 8;
    uint64_t v35 = swift_allocObject(&unk_1000657F0, 32LL, 7LL);
    *(void *)(v35 + 16) = partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB();
    *(void *)(v35 + 24) = v34;
    uint64_t v38 = swift_allocObject(&unk_100065818, 32LL, 7LL);
    *(void *)(v38 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v38 + 24) = v35;
    _allocateUninitializedArray<A>(_:)(3LL, v40);
    Swift::OpaquePointer v39 = v15;
    swift_retain(v36);
    void *v39 = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[1] = v36;
    swift_retain(v37);
    v39[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[3] = v37;
    swift_retain(v38);
    v39[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(oslog, v42))
    {
      swift_release(v36);
      swift_release(v37);
      swift_release(v38);
      uint64_t v23 = v50;
      goto LABEL_23;
    }

    uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(0LL, v24, v24);
    uint64_t v27 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v72 + 192) = v25;
    *(void *)(v72 + 200) = v26;
    *(void *)(v72 + 208) = v27;
    serialize(_:at:)(0LL, (_BYTE **)(v72 + 192));
    serialize(_:at:)(1LL, (_BYTE **)(v72 + 192));
    *(void *)(v72 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v72 + 96) = v36;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
    if (!v50)
    {
      *(void *)(v72 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v72 + 96) = v37;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
      *(void *)(v72 + 88) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v72 + 96) = v38;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
      _os_log_impl((void *)&_mh_execute_header, oslog, v42, "Deleting %ldth rows", v25, size);
      destroyStorage<A>(_:count:)(v26, 0LL);
      destroyStorage<A>(_:count:)(v27, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v36);
      swift_release(v37);
      swift_release(v38);
      uint64_t v23 = 0LL;
LABEL_23:
      *(void *)(v72 + 400) = v23;
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v72 + 360);
      uint64_t v22 = *(void *)(v72 + 264);
      uint64_t v19 = *(void *)(v72 + 240);
      uint64_t v20 = *(void *)(v72 + 224);

      v21(v19, v20);
      *(Swift::String *)(v72 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedwifi LIMIT ?",  0x21uLL,  1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v22);
    }
  }

  return result;
}

{
  uint64_t v0;
  void *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  os_log_s *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v38 = *(void *)(v0 + 304);
  *(void *)(v0 + 104) = v0;
  swift_beginAccess(v38 + 16);
  Swift::OpaquePointer v39 = *(void *)(v38 + 16);
  swift_endAccess(v0 + 40);
  uint64_t result = DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  uint64_t v40 = v39 + *result;
  if (__OFADD__(v39, *result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *(void *)(v37 + 304);
    swift_beginAccess(v8 + 16);
    *(void *)(v8 + 16) = v40;
    swift_endAccess(v37 + 64);
    uint64_t v17 = *(void *)(v37 + 424);
    uint64_t v9 = *(void *)(v37 + 304);
    uint64_t v10 = *(void *)(v37 + 296);
    swift_beginAccess(v9 + 16);
    uint64_t v11 = *(void *)(v9 + 16);
    swift_endAccess(v37 + 16);
    if (v11 >= v10)
    {
      *(void *)(v37 + 432) = v17;
      unint64_t v7 = *(void *)(v37 + 264);
      *(Swift::String *)(v37 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v7);
    }

    uint64_t v34 = *(void *)(v37 + 344);
    uint64_t v26 = *(void *)(v37 + 336);
    uint64_t v25 = *(void *)(v37 + 328);
    uint64_t v24 = *(void *)(v37 + 320);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 312);
    uint64_t v28 = *(void *)(v37 + 304);
    BOOL v3 = *(void *)(v37 + 240);
    uint64_t v22 = *(void *)(v37 + 224);
    uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v23(v3, v4, v22);
    uint64_t v5 = swift_retain(v28);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v5);
    uint64_t v36 = static os_log_type_t.debug.getter();
    *(void *)(v37 + 184) = 12LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v37 + 492),  v37 + 184,  &type metadata for UInt32,  &type metadata for Int,  v24,  v25,  v26);
    uint64_t v27 = *(_DWORD *)(v37 + 492);
    uint64_t v30 = swift_allocObject(&unk_1000657A0, 17LL, 7LL);
    *(_BYTE *)(v30 + 16) = 0;
    uint64_t v31 = swift_allocObject(&unk_1000657C8, 17LL, 7LL);
    *(_BYTE *)(v31 + 16) = 8;
    uint64_t v29 = swift_allocObject(&unk_1000657F0, 32LL, 7LL);
    *(void *)(v29 + 16) = partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB();
    *(void *)(v29 + 24) = v28;
    uint64_t v32 = swift_allocObject(&unk_100065818, 32LL, 7LL);
    *(void *)(v32 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v32 + 24) = v29;
    _allocateUninitializedArray<A>(_:)(3LL, v34);
    Swift::Double v33 = v6;
    swift_retain(v30);
    *Swift::Double v33 = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[1] = v30;
    swift_retain(v31);
    v33[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[3] = v31;
    swift_retain(v32);
    v33[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v35, v36))
    {
      swift_release(v30);
      swift_release(v31);
      swift_release(v32);
      uint64_t v16 = v17;
      goto LABEL_11;
    }

    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0LL, v18, v18);
    uint64_t v21 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v37 + 192) = buf;
    *(void *)(v37 + 200) = v20;
    *(void *)(v37 + 208) = v21;
    serialize(_:at:)(0LL, (_BYTE **)(v37 + 192));
    serialize(_:at:)(1LL, (_BYTE **)(v37 + 192));
    *(void *)(v37 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v37 + 96) = v30;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
    if (!v17)
    {
      *(void *)(v37 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v37 + 96) = v31;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
      *(void *)(v37 + 88) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v37 + 96) = v32;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Deleting %ldth rows", buf, v27);
      destroyStorage<A>(_:count:)(v20, 0LL);
      destroyStorage<A>(_:count:)(v21, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v30);
      swift_release(v31);
      swift_release(v32);
      uint64_t v16 = 0LL;
LABEL_11:
      *(void *)(v37 + 400) = v16;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v37 + 360);
      uint64_t v15 = *(void *)(v37 + 264);
      uint64_t v12 = *(void *)(v37 + 240);
      uint64_t v13 = *(void *)(v37 + 224);

      v14(v12, v13);
      *(Swift::String *)(v37 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedwifi LIMIT ?",  0x21uLL,  1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedWifiDB(), v15);
    }
  }

  return result;
}

void *closure #1 in MediaMLPlugin.checkAndPruneProcessedWifiDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

void OSAllocatedUnfairLock.withLock<A>(_:)( void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[1] = a1;
  (*(void (**)(void *__return_ptr, void *, _UNKNOWN **))(*(void *)a1 + 160LL))( v7,  &type metadata for Int,  &protocol witness table for Int);
  if (v2)
  {
    swift_errorRelease(v2);
    uint64_t v4 = 0LL;
    char v5 = 1;
  }

  else
  {
    uint64_t v4 = v7[0];
    char v5 = 0;
  }

  uint64_t result = 0LL;
  if ((v5 & 1) != 0) {
    *a2 = 0LL;
  }
  else {
    *a2 = v4;
  }
  return result;
}

uint64_t closure #3 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(1LL, v7);
  v3[3] = &type metadata for Int;
  v3[4] = &protocol witness table for Int;
  *BOOL v3 = a2;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  swift_endAccess(v4);
  return v3;
}

uint64_t closure #4 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(uint64_t a1)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(1LL, v7);
  uint64_t v6 = v2;
  Swift::Int v3 = *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  v6[3] = (Swift::Int)&type metadata for Int;
  v6[4] = (Swift::Int)&protocol witness table for Int;
  *uint64_t v6 = v3;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t MediaMLPlugin.checkAndPruneProcessedCellDB()()
{
  v1[27] = v0;
  v1[13] = v1;
  v1[14] = 0LL;
  v1[16] = 0LL;
  v1[18] = 0LL;
  v1[19] = 0LL;
  v1[20] = 0LL;
  v1[21] = 0LL;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[28] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[29] = v3;
  uint64_t v5 = *(void *)(v3 + 64);
  v1[30] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[31] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[14] = v0;
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[32];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB());
  v0[36] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[44];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #3 in MediaMLPlugin.checkAndPruneProcessedCellDB());
  v0[49] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 384));
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v2;
  *(void *)(v0 + 104) = v0;
  *(void *)(v0 + 432) = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 264);
  *(Swift::String *)(v0 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v2);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[51];
  uint64_t v3 = v0[50];
  v0[13] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))closure #4 in MediaMLPlugin.checkAndPruneProcessedCellDB());
  v0[53] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v1 = *(Swift::String *)(v0 + 440);
  *(void *)(v0 + 104) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 456) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  Swift::String *v0;
  void *object;
  object = v0[16]._object;
  v0[6]._object = v0;
  v0[29] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pragma wal_checkpoint(truncate)", 0x1FuLL, 1);
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), object);
}

{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v1 = *(Swift::String *)(v0 + 464);
  *(void *)(v0 + 104) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 480) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = v0[38];
  v0[13] = v0;
  swift_release(v1);
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[30];
  swift_release(v0[33]);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v1 = v0[35];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = v0[36];
  uint64_t v5 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v5);
  uint64_t v6 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v1 = v0[48];
  uint64_t v5 = v0[47];
  uint64_t v6 = v0[38];
  v0[13] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease(v5);
  swift_release(v6);
  uint64_t v2 = v0[49];
  uint64_t v7 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v7);
  uint64_t v8 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[52];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[53];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[56];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[57];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v1 = v0[59];
  uint64_t v5 = v0[38];
  v0[13] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v5);
  uint64_t v2 = v0[60];
  uint64_t v6 = v0[33];
  uint64_t v3 = swift_errorRetain(v2);
  v0[18] = v2;
  swift_willThrow(v3);
  swift_errorRelease(v2);
  swift_release(v6);
  uint64_t v7 = v0[30];
  swift_task_dealloc(v0[31]);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0[13] + 8LL))();
}

void MediaMLPlugin.checkAndPruneProcessedCellDB()()
{
  uint64_t v1 = (void *)v0[27];
  v0[13] = v0;
  uint64_t v12 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.checkAndPruneProcessedCellDB(),  0LL,  v12,  v2,  v2);
  v0[32] = 0LL;
  swift_release(v12);
  object = v11[7]._object;
  v11[16]._object = object;
  if (object)
  {
    v11[8]._uint64_t countAndFlagsBits = (uint64_t)object;
    v11[17] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "SELECT COUNT(*) from processedcell",  0x22uLL,  1);
    swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), object);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v13 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v13.code;
    uint64_t desc_8 = v13.desc.value._countAndFlagsBits;
    uint64_t v7 = v13.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = v7;
    swift_willThrow(code);
    uint64_t countAndFlagsBits = v11[15]._countAndFlagsBits;
    swift_task_dealloc(v11[15]._object);
    swift_task_dealloc(countAndFlagsBits);
    (*((void (**)(void))v11[6]._object + 1))();
  }

void *MediaMLPlugin.checkAndPruneProcessedCellDB()()
{
  v0[13] = v0;
  Swift::Int v73 = v0[17];
  v0[19] = v73;
  if (v73 < *MAX_ALLOWED_PROCESSED_DATASIZE.unsafeMutableAddressor())
  {
    uint64_t v16 = *(void *)(v72 + 248);
    uint64_t v17 = *(void *)(v72 + 240);
    swift_release(*(void *)(v72 + 264));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (void *)(*(uint64_t (**)(void))(*(void *)(v72 + 104) + 8LL))();
  }

  uint64_t result = MAX_ALLOWED_PROCESSED_DATASIZE.unsafeMutableAddressor();
  Swift::Int v71 = v73 - *result;
  if (__OFSUB__(v73, *result))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }

  uint64_t result = MAX_ALLOWED_PROCESSED_DATASIZE_PRUNE.unsafeMutableAddressor();
  Swift::Int v70 = v71 + *result;
  BOOL v3 = __OFADD__(v71, *result);
  *(void *)(v72 + 296) = v71 + *result;
  if (v3) {
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)(v72 + 248);
  uint64_t v56 = *(void *)(v72 + 232);
  uint64_t v57 = *(void *)(v72 + 224);
  *(void *)(v72 + 160) = v70;
  uint64_t v55 = swift_allocObject(&unk_1000656B0, 24LL, 7LL);
  *(void *)(v72 + 304) = v55;
  *(void *)(v72 + 168) = v55 + 16;
  *(void *)(v55 + 16) = *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  uint64_t v5 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
  *(void *)(v72 + 312) = v6;
  v6(v4, v5, v57);
  uint64_t v61 = swift_allocObject(&unk_100065840, 24LL, 7LL);
  *(void *)(v61 + 16) = v70;
  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v69 = static os_log_type_t.info.getter();
  *(void *)(v72 + 176) = 12LL;
  unint64_t v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v72 + 320) = v58;
  unint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v72 + 328) = v59;
  unint64_t v7 = lazy protocol witness table accessor for type Int and conformance Int();
  *(void *)(v72 + 336) = v7;
  UnsignedInteger<>.init<A>(_:)( (void *)(v72 + 488),  v72 + 176,  &type metadata for UInt32,  &type metadata for Int,  v58,  v59,  v7);
  uint32_t v60 = *(_DWORD *)(v72 + 488);
  uint64_t v63 = swift_allocObject(&unk_100065868, 17LL, 7LL);
  *(_BYTE *)(v63 + 16) = 0;
  uint64_t v64 = swift_allocObject(&unk_100065890, 17LL, 7LL);
  *(_BYTE *)(v64 + 16) = 8;
  uint64_t v62 = swift_allocObject(&unk_1000658B8, 32LL, 7LL);
  *(void *)(v62 + 16) = partial apply for implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedCellDB();
  *(void *)(v62 + 24) = v61;
  uint64_t v65 = swift_allocObject(&unk_1000658E0, 32LL, 7LL);
  *(void *)(v65 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v65 + 24) = v62;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  *(void *)(v72 + 344) = v67;
  _allocateUninitializedArray<A>(_:)(3LL, v67);
  uint64_t v66 = v8;
  swift_retain(v63);
  void *v66 = closure #1 in OSLogArguments.append(_:)partial apply;
  v66[1] = v63;
  swift_retain(v64);
  v66[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v66[3] = v64;
  swift_retain(v65);
  v66[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v66[5] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v9 = *(void *)(v72 + 288);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v53 = createStorage<A>(capacity:type:)(0LL, v51, v51);
    uint64_t v54 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v74 = buf;
    uint64_t v75 = v53;
    uint64_t v76 = v54;
    serialize(_:at:)(0LL, &v74);
    serialize(_:at:)(1LL, &v74);
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v78 = v63;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    if (v9) {
      return result;
    }
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v78 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    Swift::Double v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v78 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v77, (uint64_t)&v74, (uint64_t)&v75, (uint64_t)&v76);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "processedcell data too large, deleting %ld rows", buf, v60);
    destroyStorage<A>(_:count:)(v53, 0LL);
    destroyStorage<A>(_:count:)(v54, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v63);
    swift_release(v64);
    swift_release(v65);
    uint64_t v50 = 0LL;
  }

  else
  {
    swift_release(v63);
    swift_release(v64);
    swift_release(v65);
    uint64_t v50 = *(void *)(v72 + 288);
  }

  *(void *)(v72 + 352) = v50;
  uint64_t v48 = *(void *)(v72 + 248);
  uint64_t v47 = *(void *)(v72 + 232);
  uint64_t v49 = *(void *)(v72 + 224);

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  *(void *)(v72 + 360) = v10;
  v10(v48, v49);
  if (v70 < *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor())
  {
    uint64_t v46 = *(void *)(v72 + 264);
    *(Swift::String *)(v72 + 368) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedcell LIMIT ?",  0x21uLL,  1);
    uint64_t v11 = swift_task_alloc(32LL);
    *(void *)(v72 + 384) = v11;
    *(void *)(v11 + 16) = v70;
    return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v46);
  }

  uint64_t v43 = *(void *)(v72 + 304);
  uint64_t v44 = *(void *)(v72 + 296);
  swift_beginAccess(v43 + 16);
  uint64_t v45 = *(void *)(v43 + 16);
  swift_endAccess(v72 + 16);
  if (v45 >= v44)
  {
    *(void *)(v72 + 432) = v50;
    uint64_t v18 = *(void *)(v72 + 264);
    *(Swift::String *)(v72 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
    return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v18);
  }

  else
  {
    uint64_t v40 = *(void *)(v72 + 344);
    uint64_t v32 = *(void *)(v72 + 336);
    uint64_t v31 = *(void *)(v72 + 328);
    uint64_t v30 = *(void *)(v72 + 320);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 312);
    uint64_t v34 = *(void *)(v72 + 304);
    uint64_t v12 = *(void *)(v72 + 240);
    uint64_t v28 = *(void *)(v72 + 224);
    uint64_t v13 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v29(v12, v13, v28);
    uint64_t v14 = swift_retain(v34);
    oslog = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    *(void *)(v72 + 184) = 12LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v72 + 492),  v72 + 184,  &type metadata for UInt32,  &type metadata for Int,  v30,  v31,  v32);
    uint32_t size = *(_DWORD *)(v72 + 492);
    uint64_t v36 = swift_allocObject(&unk_100065908, 17LL, 7LL);
    *(_BYTE *)(v36 + 16) = 0;
    uint64_t v37 = swift_allocObject(&unk_100065930, 17LL, 7LL);
    *(_BYTE *)(v37 + 16) = 8;
    uint64_t v35 = swift_allocObject(&unk_100065958, 32LL, 7LL);
    *(void *)(v35 + 16) = partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB();
    *(void *)(v35 + 24) = v34;
    uint64_t v38 = swift_allocObject(&unk_100065980, 32LL, 7LL);
    *(void *)(v38 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v38 + 24) = v35;
    _allocateUninitializedArray<A>(_:)(3LL, v40);
    Swift::OpaquePointer v39 = v15;
    swift_retain(v36);
    void *v39 = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[1] = v36;
    swift_retain(v37);
    v39[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[3] = v37;
    swift_retain(v38);
    v39[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(oslog, v42))
    {
      swift_release(v36);
      swift_release(v37);
      swift_release(v38);
      uint64_t v23 = v50;
      goto LABEL_23;
    }

    uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(0LL, v24, v24);
    uint64_t v27 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v72 + 192) = v25;
    *(void *)(v72 + 200) = v26;
    *(void *)(v72 + 208) = v27;
    serialize(_:at:)(0LL, (_BYTE **)(v72 + 192));
    serialize(_:at:)(1LL, (_BYTE **)(v72 + 192));
    *(void *)(v72 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v72 + 96) = v36;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
    if (!v50)
    {
      *(void *)(v72 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v72 + 96) = v37;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
      *(void *)(v72 + 88) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v72 + 96) = v38;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 88),  v72 + 192,  v72 + 200,  v72 + 208);
      _os_log_impl((void *)&_mh_execute_header, oslog, v42, "Deleting %ldth rows", v25, size);
      destroyStorage<A>(_:count:)(v26, 0LL);
      destroyStorage<A>(_:count:)(v27, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v36);
      swift_release(v37);
      swift_release(v38);
      uint64_t v23 = 0LL;
LABEL_23:
      *(void *)(v72 + 400) = v23;
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v72 + 360);
      uint64_t v22 = *(void *)(v72 + 264);
      uint64_t v19 = *(void *)(v72 + 240);
      uint64_t v20 = *(void *)(v72 + 224);

      v21(v19, v20);
      *(Swift::String *)(v72 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedcell LIMIT ?",  0x21uLL,  1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v22);
    }
  }

  return result;
}

{
  uint64_t v0;
  void *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  os_log_s *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v38 = *(void *)(v0 + 304);
  *(void *)(v0 + 104) = v0;
  swift_beginAccess(v38 + 16);
  Swift::OpaquePointer v39 = *(void *)(v38 + 16);
  swift_endAccess(v0 + 40);
  uint64_t result = DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  uint64_t v40 = v39 + *result;
  if (__OFADD__(v39, *result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = *(void *)(v37 + 304);
    swift_beginAccess(v8 + 16);
    *(void *)(v8 + 16) = v40;
    swift_endAccess(v37 + 64);
    uint64_t v17 = *(void *)(v37 + 424);
    uint64_t v9 = *(void *)(v37 + 304);
    uint64_t v10 = *(void *)(v37 + 296);
    swift_beginAccess(v9 + 16);
    uint64_t v11 = *(void *)(v9 + 16);
    swift_endAccess(v37 + 16);
    if (v11 >= v10)
    {
      *(void *)(v37 + 432) = v17;
      unint64_t v7 = *(void *)(v37 + 264);
      *(Swift::String *)(v37 + 440) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v7);
    }

    uint64_t v34 = *(void *)(v37 + 344);
    uint64_t v26 = *(void *)(v37 + 336);
    uint64_t v25 = *(void *)(v37 + 328);
    uint64_t v24 = *(void *)(v37 + 320);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 312);
    uint64_t v28 = *(void *)(v37 + 304);
    BOOL v3 = *(void *)(v37 + 240);
    uint64_t v22 = *(void *)(v37 + 224);
    uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v23(v3, v4, v22);
    uint64_t v5 = swift_retain(v28);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v5);
    uint64_t v36 = static os_log_type_t.debug.getter();
    *(void *)(v37 + 184) = 12LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v37 + 492),  v37 + 184,  &type metadata for UInt32,  &type metadata for Int,  v24,  v25,  v26);
    uint64_t v27 = *(_DWORD *)(v37 + 492);
    uint64_t v30 = swift_allocObject(&unk_100065908, 17LL, 7LL);
    *(_BYTE *)(v30 + 16) = 0;
    uint64_t v31 = swift_allocObject(&unk_100065930, 17LL, 7LL);
    *(_BYTE *)(v31 + 16) = 8;
    uint64_t v29 = swift_allocObject(&unk_100065958, 32LL, 7LL);
    *(void *)(v29 + 16) = partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB();
    *(void *)(v29 + 24) = v28;
    uint64_t v32 = swift_allocObject(&unk_100065980, 32LL, 7LL);
    *(void *)(v32 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v32 + 24) = v29;
    _allocateUninitializedArray<A>(_:)(3LL, v34);
    Swift::Double v33 = v6;
    swift_retain(v30);
    *Swift::Double v33 = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[1] = v30;
    swift_retain(v31);
    v33[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[3] = v31;
    swift_retain(v32);
    v33[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v35, v36))
    {
      swift_release(v30);
      swift_release(v31);
      swift_release(v32);
      uint64_t v16 = v17;
      goto LABEL_11;
    }

    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0LL, v18, v18);
    uint64_t v21 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v37 + 192) = buf;
    *(void *)(v37 + 200) = v20;
    *(void *)(v37 + 208) = v21;
    serialize(_:at:)(0LL, (_BYTE **)(v37 + 192));
    serialize(_:at:)(1LL, (_BYTE **)(v37 + 192));
    *(void *)(v37 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v37 + 96) = v30;
    uint64_t result = (void *)closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
    if (!v17)
    {
      *(void *)(v37 + 88) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v37 + 96) = v31;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
      *(void *)(v37 + 88) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v37 + 96) = v32;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 88),  v37 + 192,  v37 + 200,  v37 + 208);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Deleting %ldth rows", buf, v27);
      destroyStorage<A>(_:count:)(v20, 0LL);
      destroyStorage<A>(_:count:)(v21, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v30);
      swift_release(v31);
      swift_release(v32);
      uint64_t v16 = 0LL;
LABEL_11:
      *(void *)(v37 + 400) = v16;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v37 + 360);
      uint64_t v15 = *(void *)(v37 + 264);
      uint64_t v12 = *(void *)(v37 + 240);
      uint64_t v13 = *(void *)(v37 + 224);

      v14(v12, v13);
      *(Swift::String *)(v37 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM processedcell LIMIT ?",  0x21uLL,  1);
      return (void *)swift_task_switch(MediaMLPlugin.checkAndPruneProcessedCellDB(), v15);
    }
  }

  return result;
}

void *closure #1 in MediaMLPlugin.checkAndPruneProcessedCellDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v7[1] = a1;
  (*(void (**)(void *__return_ptr, void *, _UNKNOWN **))(*(void *)a1 + 160LL))( v7,  &type metadata for Int,  &protocol witness table for Int);
  if (v2)
  {
    swift_errorRelease(v2);
    uint64_t v4 = 0LL;
    char v5 = 1;
  }

  else
  {
    uint64_t v4 = v7[0];
    char v5 = 0;
  }

  uint64_t result = 0LL;
  if ((v5 & 1) != 0) {
    *a2 = 0LL;
  }
  else {
    *a2 = v4;
  }
  return result;
}

uint64_t closure #3 in MediaMLPlugin.checkAndPruneProcessedCellDB()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(1LL, v7);
  v3[3] = &type metadata for Int;
  v3[4] = &protocol witness table for Int;
  *BOOL v3 = a2;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  swift_endAccess(v4);
  return v3;
}

uint64_t closure #4 in MediaMLPlugin.checkAndPruneProcessedCellDB()(uint64_t a1)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(1LL, v7);
  uint64_t v6 = v2;
  Swift::Int v3 = *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor();
  v6[3] = (Swift::Int)&type metadata for Int;
  v6[4] = (Swift::Int)&protocol witness table for Int;
  *uint64_t v6 = v3;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t MediaMLPlugin.cleanRawWiFiDataFromDB()()
{
  v1[6] = v0;
  v1[2] = v1;
  v1[3] = 0LL;
  v1[5] = 0LL;
  v1[3] = v0;
  return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  Swift::Int v3 = v0[7];
  v0[2] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)(v2, v1, (void (*)(void))closure #2 in MediaMLPlugin.cleanRawWiFiDataFromDB());
  v0[11] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), 0LL);
}

{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  uint64_t countAndFlagsBits = v0[4]._countAndFlagsBits;
  v0[1]._uint64_t countAndFlagsBits = (uint64_t)v0;
  v0[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
  return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), countAndFlagsBits);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  Swift::Int v3 = v0[11];
  v0[2] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)(v2, v1, (void (*)(void))closure #3 in MediaMLPlugin.cleanRawWiFiDataFromDB());
  v0[14] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v1 = v0[10];
  Swift::Int v3 = v0[8];
  v0[2] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v1 = v0[13];
  Swift::Int v3 = v0[8];
  v0[2] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void MediaMLPlugin.cleanRawWiFiDataFromDB()()
{
  uint64_t v1 = (void *)v0[6];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.cleanRawWiFiDataFromDB(),  0LL,  v11,  v2,  v2);
  v0[7] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 64) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM wifi",  0x10uLL,  1);
    swift_task_switch(MediaMLPlugin.cleanRawWiFiDataFromDB(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

void *closure #1 in MediaMLPlugin.cleanRawWiFiDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.cleanRawWiFiDataFromDB()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t closure #3 in MediaMLPlugin.cleanRawWiFiDataFromDB()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t MediaMLPlugin.cleanRawCellDataFromDB()()
{
  v1[6] = v0;
  v1[2] = v1;
  v1[3] = 0LL;
  v1[5] = 0LL;
  v1[3] = v0;
  return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[9];
  Swift::String v3 = v0[7];
  v0[2] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)(v2, v1, (void (*)(void))closure #2 in MediaMLPlugin.cleanRawCellDataFromDB());
  v0[11] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), 0LL);
}

{
  Swift::String *v0;
  uint64_t countAndFlagsBits;
  uint64_t countAndFlagsBits = v0[4]._countAndFlagsBits;
  v0[1]._uint64_t countAndFlagsBits = (uint64_t)v0;
  v0[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("VACUUM", 6uLL, 1);
  return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), countAndFlagsBits);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  Swift::String v3 = v0[11];
  v0[2] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)(v2, v1, (void (*)(void))closure #3 in MediaMLPlugin.cleanRawCellDataFromDB());
  v0[14] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 64);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v1 = v0[10];
  Swift::String v3 = v0[8];
  v0[2] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v1 = v0[13];
  Swift::String v3 = v0[8];
  v0[2] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void MediaMLPlugin.cleanRawCellDataFromDB()()
{
  uint64_t v1 = (void *)v0[6];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.cleanRawCellDataFromDB(),  0LL,  v11,  v2,  v2);
  v0[7] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 64) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM cell",  0x10uLL,  1);
    swift_task_switch(MediaMLPlugin.cleanRawCellDataFromDB(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

void *closure #1 in MediaMLPlugin.cleanRawCellDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.cleanRawCellDataFromDB()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t closure #3 in MediaMLPlugin.cleanRawCellDataFromDB()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t MediaMLPlugin.getRawCellDataFromDB()(uint64_t a1)
{
  v2[15] = v1;
  v2[14] = a1;
  v2[4] = v2;
  v2[5] = 0LL;
  v2[7] = 0LL;
  v2[13] = 0LL;
  v2[5] = v1;
  return swift_task_switch(MediaMLPlugin.getRawCellDataFromDB(), 0LL);
}

void MediaMLPlugin.getRawCellDataFromDB()()
{
  uint64_t v1 = (void *)v0[15];
  v0[4] = v0;
  uint64_t v21 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getRawCellDataFromDB(),  0LL,  v21,  v2,  v2);
  v0[16] = 0LL;
  swift_release(v21);
  uint64_t v19 = v20[6];
  v20[17] = v19;
  if (v19)
  {
    v20[7] = v19;
    v20[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(466LL, 5LL);
    v20[3] = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "\t\t\t\t\t\t\t\t\t\t\t  WITH CTE AS (SELECT carrier, app_name, rssi/",  0x39uLL,  1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v20[8] = *cell_signal_binsize.unsafeMutableAddressor();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20 + 8);
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" as binned_rssi, rsrp/", 0x16uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    v20[9] = *cell_signal_binsize.unsafeMutableAddressor();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20 + 9);
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" as binned_rsrp, rsrq/", 0x16uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v20[10] = *cell_signal_binsize.unsafeMutableAddressor();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20 + 10);
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" as binned_rsrq, rscp/", 0x16uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v20[11] = *cell_signal_binsize.unsafeMutableAddressor();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20 + 11);
    Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" as binned_rscp, snr/", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    v20[12] = *cell_snr_binsize.unsafeMutableAddressor();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v20 + 12);
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( " as binned_snr, bars, throughput_true FROM cell) SELECT carrier, app_name, binned_rssi, binned_rsrp, binned_r srq, binned_rscp, binned_snr, bars, throughput_true, COUNT(throughput_true) OVER (partition by carrier, carri er, app_name, binned_rssi, binned_rsrp, binned_rscp, binned_rsrq, binned_snr, bars) as rowcount FROM CTE",  0x142uLL,  1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v18 = v20[2];
    uint64_t v17 = v20[3];
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation((uint64_t)(v20 + 2));
    v20[18] = String.init(stringInterpolation:)(v18, v17);
    v20[19] = v10;
    swift_task_switch(MediaMLPlugin.getRawCellDataFromDB(), v19);
  }

  else
  {
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v22 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v11);
    unsigned __int32 code = v22.code;
    uint64_t desc_8 = v22.desc.value._countAndFlagsBits;
    object = v22.desc.value._object;
    unint64_t v12 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v12, 0LL, 0LL);
    *(_DWORD *)uint64_t v13 = code;
    *(void *)(v13 + 8) = desc_8;
    *(void *)(v13 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(v20[4] + 8LL))();
  }

uint64_t MediaMLPlugin.getRawCellDataFromDB()()
{
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[18];
  uint64_t v1 = v0[16];
  v0[4] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)(v4, v3, (void (*)(void))closure #2 in MediaMLPlugin.getRawCellDataFromDB());
  v0[20] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getRawCellDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getRawCellDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 136);
  *(void *)(v0 + 32) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[19];
  Swift::String v5 = v0[17];
  v0[4] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[13] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[4] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getRawCellDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getRawCellDataFromDB()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v127 = 0LL;
  uint64_t v126 = 0LL;
  uint64_t v92 = &v125;
  uint64_t v125 = 0LL;
  uint64_t v93 = &v124;
  uint64_t v124 = 0LL;
  uint64_t v94 = &v123;
  uint64_t v123 = 0LL;
  uint64_t v95 = &v122;
  uint64_t v122 = 0LL;
  uint64_t v96 = &v121;
  uint64_t v121 = 0LL;
  uint64_t v97 = &v120;
  uint64_t v120 = 0LL;
  unint64_t v98 = &v119;
  uint64_t v119 = 0LL;
  uint64_t v99 = &v118;
  uint64_t v118 = 0LL;
  uint64_t v100 = &v117;
  uint64_t v117 = 0LL;
  uint64_t v101 = &v116;
  uint64_t v116 = 0LL;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v74 = *(void *)(v73 - 8);
  unint64_t v75 = (*(void *)(v74 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v73);
  uint64_t v76 = (char *)v18 - v75;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v78 = *(void *)(v77 - 8);
  unint64_t v79 = (*(void *)(v78 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v77);
  Swift::Double v80 = (char *)v18 - v79;
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v82 = *(void *)(v81 - 8);
  unint64_t v83 = (*(void *)(v82 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v81);
  uint64_t v84 = (char *)v18 - v83;
  uint64_t v91 = 0LL;
  uint64_t v85 = type metadata accessor for DataFrame(0LL);
  uint64_t v86 = *(void *)(v85 - 8);
  unint64_t v87 = (*(void *)(v86 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v91);
  uint64_t v88 = (char *)v18 - v87;
  uint64_t v127 = (char *)v18 - v87;
  uint64_t v126 = a1;
  uint64_t v89 = &type metadata for String;
  uint64_t v125 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v124 = _allocateUninitializedArray<A>(_:)(v91, v89);
  uint64_t v90 = &type metadata for Int;
  uint64_t v123 = _allocateUninitializedArray<A>(_:)(v91, &type metadata for Int);
  uint64_t v122 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v121 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v120 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v119 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v118 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v117 = _allocateUninitializedArray<A>(_:)(v91, &type metadata for Double);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v91, v90);
  uint64_t v5 = v102;
  uint64_t v116 = v4;
  v105[2] = v92;
  v105[3] = v93;
  v105[4] = v94;
  v105[5] = v95;
  v105[6] = v96;
  v105[7] = v97;
  v105[8] = v98;
  v105[9] = v99;
  v105[10] = v100;
  v105[11] = v101;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), void *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getRawCellDataFromDB(),  v105);
  uint64_t v103 = v5;
  uint64_t v104 = v5;
  if (v5)
  {
    v18[1] = v104;
    outlined destroy of [Int](&v116);
    outlined destroy of [Double](&v117);
    outlined destroy of [Int](&v118);
    outlined destroy of [Int](&v119);
    outlined destroy of [Int](&v120);
    outlined destroy of [Int](&v121);
    outlined destroy of [Int](&v122);
    outlined destroy of [Int](&v123);
    outlined destroy of [String](&v124);
    uint64_t result = &v125;
    outlined destroy of [String](&v125);
  }

  else
  {
    DataFrame.init()(v6);
    Swift::String v7 = kMediaML_carrier.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
    object = v7->_object;
    swift_bridgeObjectRetain();
    Swift::Int v71 = &v125;
    uint64_t v19 = v125;
    swift_bridgeObjectRetain();
    uint64_t v21 = &v115;
    uint64_t v115 = v19;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v27 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v28 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v21);
    DataFrame.append<A>(column:)(v84, v28);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v82 + 8);
    v29(v84, v81);
    Swift::String v8 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t v23 = v8->_countAndFlagsBits;
    uint64_t v25 = v8->_object;
    swift_bridgeObjectRetain();
    Swift::Int v70 = &v124;
    uint64_t v24 = v124;
    swift_bridgeObjectRetain();
    uint64_t v114 = v24;
    Column.init<A>(name:contents:)(v23, v25, &v114);
    DataFrame.append<A>(column:)(v84, v28);
    v29(v84, v81);
    Swift::String v9 = kMediaML_binnedRssi.unsafeMutableAddressor();
    uint64_t v33 = v9->_countAndFlagsBits;
    uint64_t v31 = v9->_object;
    swift_bridgeObjectRetain();
    os_log_type_t v69 = &v123;
    uint64_t v30 = v123;
    swift_bridgeObjectRetain();
    uint64_t v32 = &v113;
    uint64_t v113 = v30;
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v59 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint32_t v60 = &type metadata for Int;
    Column.init<A>(name:contents:)(v33, v31, v32);
    DataFrame.append<A>(column:)(v80, v60);
    uint64_t v61 = *(void (**)(char *, uint64_t))(v78 + 8);
    v61(v80, v77);
    uint64_t v10 = kMediaML_binnedRsrp.unsafeMutableAddressor();
    uint64_t v34 = v10->_countAndFlagsBits;
    uint64_t v36 = v10->_object;
    swift_bridgeObjectRetain();
    uint64_t v68 = &v122;
    uint64_t v35 = v122;
    swift_bridgeObjectRetain();
    uint64_t v112 = v35;
    Column.init<A>(name:contents:)(v34, v36, &v112);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    Swift::String v11 = kMediaML_binnedRsrq.unsafeMutableAddressor();
    uint64_t v37 = v11->_countAndFlagsBits;
    Swift::OpaquePointer v39 = v11->_object;
    swift_bridgeObjectRetain();
    uint64_t v67 = &v121;
    uint64_t v38 = v121;
    swift_bridgeObjectRetain();
    uint64_t v111 = v38;
    Column.init<A>(name:contents:)(v37, v39, &v111);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    unint64_t v12 = kMediaML_binnedRscp.unsafeMutableAddressor();
    uint64_t v40 = v12->_countAndFlagsBits;
    os_log_type_t v42 = v12->_object;
    swift_bridgeObjectRetain();
    uint64_t v66 = &v120;
    uint64_t v41 = v120;
    swift_bridgeObjectRetain();
    uint64_t v110 = v41;
    Column.init<A>(name:contents:)(v40, v42, &v110);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    uint64_t v13 = kMediaML_binnedSnr.unsafeMutableAddressor();
    uint64_t v43 = v13->_countAndFlagsBits;
    uint64_t v45 = v13->_object;
    swift_bridgeObjectRetain();
    uint64_t v65 = &v119;
    uint64_t v44 = v119;
    swift_bridgeObjectRetain();
    uint64_t v109 = v44;
    Column.init<A>(name:contents:)(v43, v45, &v109);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    uint64_t v14 = kMediaML_bars.unsafeMutableAddressor();
    uint64_t v46 = v14->_countAndFlagsBits;
    uint64_t v48 = v14->_object;
    swift_bridgeObjectRetain();
    uint64_t v64 = &v118;
    uint64_t v47 = v118;
    swift_bridgeObjectRetain();
    uint64_t v108 = v47;
    Column.init<A>(name:contents:)(v46, v48, &v108);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    uint64_t v15 = kMediaML_throughputTrue.unsafeMutableAddressor();
    uint64_t v53 = v15->_countAndFlagsBits;
    uint64_t v50 = v15->_object;
    swift_bridgeObjectRetain();
    uint64_t v63 = &v117;
    uint64_t v49 = v117;
    swift_bridgeObjectRetain();
    uint64_t v51 = &v107;
    uint64_t v107 = v49;
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v54 = &type metadata for Double;
    Column.init<A>(name:contents:)(v53, v50, v51);
    DataFrame.append<A>(column:)(v76, v54);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v73);
    uint64_t v16 = kMediaML_count.unsafeMutableAddressor();
    uint64_t v55 = v16->_countAndFlagsBits;
    uint64_t v57 = v16->_object;
    swift_bridgeObjectRetain();
    uint64_t v62 = &v116;
    uint64_t v56 = v116;
    swift_bridgeObjectRetain();
    uint64_t v106 = v56;
    Column.init<A>(name:contents:)(v55, v57, &v106);
    DataFrame.append<A>(column:)(v80, v60);
    v61(v80, v77);
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v72, v88, v85);
    outlined destroy of [Int](v62);
    outlined destroy of [Double](v63);
    outlined destroy of [Int](v64);
    outlined destroy of [Int](v65);
    outlined destroy of [Int](v66);
    outlined destroy of [Int](v67);
    outlined destroy of [Int](v68);
    outlined destroy of [Int](v69);
    outlined destroy of [String](v70);
    uint64_t result = v71;
    outlined destroy of [String](v71);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getRawCellDataFromDB()(uint64_t a1)
{
  if (v19)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v18)
    {
      SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(3LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(4LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(5LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(6LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(7LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(8LL, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
      SQLiteDB.Row.get<A>(at:)(9LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      uint64_t v8 = specialized Array.append(_:)();
      specialized Array.append(_:)(v8);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name not of type String", 0x1BuLL, 1);
      MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 code = v21.code;
      uint64_t countAndFlagsBits = v21.desc.value._countAndFlagsBits;
      object = v21.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v12 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = code;
      *(void *)(v7 + 8) = countAndFlagsBits;
      *(void *)(v7 + 16) = object;
      swift_willThrow(code);
      swift_bridgeObjectRelease();
      return v12;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("carrier not of type String", 0x1AuLL, 1);
    MediaMLPlugin::SQLError v20 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v15 = v20.code;
    uint64_t desc_8 = v20.desc.value._countAndFlagsBits;
    uint64_t v14 = v20.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v15;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v14;
    swift_willThrow(v15);
    return v16;
  }

uint64_t MediaMLPlugin.getRawWiFiDataFromDB()(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  void v2[3] = v1;
  return swift_task_switch(MediaMLPlugin.getRawWiFiDataFromDB(), 0LL);
}

void MediaMLPlugin.getRawWiFiDataFromDB()()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getRawWiFiDataFromDB(),  0LL,  v11,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 80) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "SELECT session_id, timestamp, app_name, ssid, hour, dow, rssi, cca, noise, snr, tx_ rate, rx_rate, throughput_true FROM wifi",  0x7BuLL,  1);
    swift_task_switch(MediaMLPlugin.getRawWiFiDataFromDB(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.getRawWiFiDataFromDB()()
{
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[2] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)(v4, v3, (void (*)(void))closure #2 in MediaMLPlugin.getRawWiFiDataFromDB());
  v0[13] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getRawWiFiDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getRawWiFiDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[10];
  v0[2] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[6] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getRawWiFiDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getRawWiFiDataFromDB()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v93 = a2;
  uint64_t v158 = 0LL;
  uint64_t v157 = 0LL;
  uint64_t v114 = &v156;
  uint64_t v156 = 0LL;
  uint64_t v115 = &v155;
  uint64_t v155 = 0LL;
  uint64_t v127 = &v154;
  uint64_t v154 = 0LL;
  uint64_t v118 = &v153;
  uint64_t v153 = 0LL;
  uint64_t v116 = &v152;
  uint64_t v152 = 0LL;
  uint64_t v117 = &v151;
  uint64_t v151 = 0LL;
  uint64_t v119 = &v150;
  uint64_t v150 = 0LL;
  uint64_t v120 = &v149;
  uint64_t v149 = 0LL;
  uint64_t v121 = &v148;
  uint64_t v148 = 0LL;
  uint64_t v122 = &v147;
  uint64_t v147 = 0LL;
  uint64_t v123 = &v146;
  uint64_t v146 = 0LL;
  uint64_t v124 = &v145;
  uint64_t v145 = 0LL;
  uint64_t v125 = &v144;
  uint64_t v144 = 0LL;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v95 = *(void *)(v94 - 8);
  unint64_t v96 = (*(void *)(v95 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v94);
  uint64_t v97 = (char *)v21 - v96;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v99 = *(void *)(v98 - 8);
  unint64_t v100 = (*(void *)(v99 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v98);
  uint64_t v101 = (char *)v21 - v100;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v103 = *(void *)(v102 - 8);
  unint64_t v104 = (*(void *)(v103 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v102);
  uint64_t v105 = (char *)v21 - v104;
  uint64_t v113 = 0LL;
  uint64_t v106 = type metadata accessor for DataFrame(0LL);
  uint64_t v107 = *(void *)(v106 - 8);
  unint64_t v108 = (*(void *)(v107 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v113);
  uint64_t v109 = (char *)v21 - v108;
  uint64_t v158 = (char *)v21 - v108;
  uint64_t v157 = a1;
  uint64_t v110 = &type metadata for String;
  uint64_t v156 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v112 = &type metadata for Double;
  uint64_t v155 = _allocateUninitializedArray<A>(_:)(v113, &type metadata for Double);
  uint64_t v154 = _allocateUninitializedArray<A>(_:)(v113, v110);
  uint64_t v153 = _allocateUninitializedArray<A>(_:)(v113, v110);
  uint64_t v111 = &type metadata for Int;
  uint64_t v152 = _allocateUninitializedArray<A>(_:)(v113, &type metadata for Int);
  uint64_t v151 = _allocateUninitializedArray<A>(_:)(v113, v111);
  uint64_t v150 = _allocateUninitializedArray<A>(_:)(v113, v111);
  uint64_t v149 = _allocateUninitializedArray<A>(_:)(v113, v111);
  uint64_t v148 = _allocateUninitializedArray<A>(_:)(v113, v111);
  uint64_t v147 = _allocateUninitializedArray<A>(_:)(v113, v111);
  uint64_t v146 = _allocateUninitializedArray<A>(_:)(v113, v112);
  uint64_t v145 = _allocateUninitializedArray<A>(_:)(v113, v112);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v113, v112);
  uint64_t v5 = v126;
  uint64_t v144 = v4;
  void v130[2] = v114;
  v130[3] = v115;
  v130[4] = v127;
  v130[5] = v116;
  v130[6] = v117;
  v130[7] = v118;
  v130[8] = v119;
  v130[9] = v120;
  v130[10] = v121;
  v130[11] = v122;
  v130[12] = v123;
  v130[13] = v124;
  v130[14] = v125;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), void *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getRawWiFiDataFromDB(),  v130);
  uint64_t v128 = v5;
  uint64_t v129 = v5;
  if (v5)
  {
    v21[1] = v129;
    outlined destroy of [Double](&v144);
    outlined destroy of [Double](&v145);
    outlined destroy of [Double](&v146);
    outlined destroy of [Int](&v147);
    outlined destroy of [Int](&v148);
    outlined destroy of [Int](&v149);
    outlined destroy of [Int](&v150);
    outlined destroy of [Int](&v151);
    outlined destroy of [Int](&v152);
    outlined destroy of [String](&v153);
    outlined destroy of [String](&v154);
    outlined destroy of [Double](&v155);
    uint64_t result = &v156;
    outlined destroy of [String](&v156);
  }

  else
  {
    DataFrame.init()(v6);
    int v72 = 1;
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("session_id", 0xAuLL, 1);
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    object = v7._object;
    uint64_t v92 = &v156;
    uint64_t v22 = v156;
    swift_bridgeObjectRetain();
    uint64_t v24 = &v143;
    uint64_t v143 = v22;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v37 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v38 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v24);
    DataFrame.append<A>(column:)(v105, v38);
    Swift::OpaquePointer v39 = *(void (**)(char *, uint64_t))(v103 + 8);
    v39(v105, v102);
    Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("timestamp", 9uLL, v72 & 1);
    uint64_t v29 = v8._countAndFlagsBits;
    unint64_t v27 = v8._object;
    uint64_t v91 = &v155;
    uint64_t v26 = v155;
    swift_bridgeObjectRetain();
    uint64_t v28 = &v142;
    uint64_t v142 = v26;
    uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    unint64_t v77 = lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v78 = &type metadata for Double;
    Column.init<A>(name:contents:)(v29, v27, v28);
    DataFrame.append<A>(column:)(v101, v78);
    unint64_t v79 = *(void (**)(char *, uint64_t))(v99 + 8);
    v79(v101, v98);
    Swift::String v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name", 8uLL, v72 & 1);
    uint64_t v30 = v9._countAndFlagsBits;
    uint64_t v32 = v9._object;
    uint64_t v90 = &v154;
    uint64_t v31 = v154;
    swift_bridgeObjectRetain();
    uint64_t v141 = v31;
    Column.init<A>(name:contents:)(v30, v32, &v141);
    DataFrame.append<A>(column:)(v105, v38);
    v39(v105, v102);
    Builtin::Word v47 = 4LL;
    Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssid", 4uLL, v72 & 1);
    uint64_t v33 = v10._countAndFlagsBits;
    uint64_t v35 = v10._object;
    uint64_t v89 = &v153;
    uint64_t v34 = v153;
    swift_bridgeObjectRetain();
    uint64_t v140 = v34;
    Column.init<A>(name:contents:)(v33, v35, &v140);
    DataFrame.append<A>(column:)(v105, v38);
    v39(v105, v102);
    Swift::String v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hour", v47, v72 & 1);
    uint64_t v43 = v11._countAndFlagsBits;
    uint64_t v41 = v11._object;
    uint64_t v88 = &v152;
    uint64_t v40 = v152;
    swift_bridgeObjectRetain();
    os_log_type_t v42 = &v139;
    uint64_t v139 = v40;
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v62 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v63 = &type metadata for Int;
    Column.init<A>(name:contents:)(v43, v41, v42);
    DataFrame.append<A>(column:)(v97, v63);
    uint64_t v64 = *(void (**)(char *, uint64_t))(v95 + 8);
    v64(v97, v94);
    Builtin::Word v57 = 3LL;
    Swift::String v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("dow", 3uLL, v72 & 1);
    uint64_t v44 = v12._countAndFlagsBits;
    uint64_t v46 = v12._object;
    unint64_t v87 = &v151;
    uint64_t v45 = v151;
    swift_bridgeObjectRetain();
    uint64_t v138 = v45;
    Column.init<A>(name:contents:)(v44, v46, &v138);
    DataFrame.append<A>(column:)(v97, v63);
    v64(v97, v94);
    Swift::String v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rssi", v47, v72 & 1);
    uint64_t v48 = v13._countAndFlagsBits;
    uint64_t v50 = v13._object;
    uint64_t v86 = &v150;
    uint64_t v49 = v150;
    swift_bridgeObjectRetain();
    uint64_t v137 = v49;
    Column.init<A>(name:contents:)(v48, v50, &v137);
    DataFrame.append<A>(column:)(v97, v63);
    v64(v97, v94);
    Swift::String v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cca", v57, v72 & 1);
    uint64_t v51 = v14._countAndFlagsBits;
    uint64_t v53 = v14._object;
    uint64_t v85 = &v149;
    uint64_t v52 = v149;
    swift_bridgeObjectRetain();
    uint64_t v136 = v52;
    Column.init<A>(name:contents:)(v51, v53, &v136);
    DataFrame.append<A>(column:)(v97, v63);
    v64(v97, v94);
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noise", 5uLL, v72 & 1);
    uint64_t v54 = v15._countAndFlagsBits;
    uint64_t v56 = v15._object;
    uint64_t v84 = &v148;
    uint64_t v55 = v148;
    swift_bridgeObjectRetain();
    uint64_t v135 = v55;
    Column.init<A>(name:contents:)(v54, v56, &v135);
    DataFrame.append<A>(column:)(v97, v63);
    v64(v97, v94);
    Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("snr", v57, v72 & 1);
    uint64_t v58 = v16._countAndFlagsBits;
    uint32_t v60 = v16._object;
    unint64_t v83 = &v147;
    uint64_t v59 = v147;
    swift_bridgeObjectRetain();
    uint64_t v134 = v59;
    Column.init<A>(name:contents:)(v58, v60, &v134);
    DataFrame.append<A>(column:)(v97, v63);
    v64(v97, v94);
    Builtin::Word v68 = 7LL;
    Swift::String v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("tx_rate", 7uLL, v72 & 1);
    uint64_t v65 = v17._countAndFlagsBits;
    uint64_t v67 = v17._object;
    uint64_t v82 = &v146;
    uint64_t v66 = v146;
    swift_bridgeObjectRetain();
    uint64_t v133 = v66;
    Column.init<A>(name:contents:)(v65, v67, &v133);
    DataFrame.append<A>(column:)(v101, v78);
    v79(v101, v98);
    Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rx_rate", v68, v72 & 1);
    uint64_t v69 = v18._countAndFlagsBits;
    Swift::Int v71 = v18._object;
    uint64_t v81 = &v145;
    uint64_t v70 = v145;
    swift_bridgeObjectRetain();
    uint64_t v132 = v70;
    Column.init<A>(name:contents:)(v69, v71, &v132);
    DataFrame.append<A>(column:)(v101, v78);
    v79(v101, v98);
    Swift::String v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("throughput_true", 0xFuLL, v72 & 1);
    uint64_t v73 = v19._countAndFlagsBits;
    unint64_t v75 = v19._object;
    Swift::Double v80 = &v144;
    uint64_t v74 = v144;
    swift_bridgeObjectRetain();
    uint64_t v131 = v74;
    Column.init<A>(name:contents:)(v73, v75, &v131);
    DataFrame.append<A>(column:)(v101, v78);
    v79(v101, v98);
    (*(void (**)(uint64_t, char *, uint64_t))(v107 + 32))(v93, v109, v106);
    outlined destroy of [Double](v80);
    outlined destroy of [Double](v81);
    outlined destroy of [Double](v82);
    outlined destroy of [Int](v83);
    outlined destroy of [Int](v84);
    outlined destroy of [Int](v85);
    outlined destroy of [Int](v86);
    outlined destroy of [Int](v87);
    outlined destroy of [Int](v88);
    outlined destroy of [String](v89);
    outlined destroy of [String](v90);
    outlined destroy of [Double](v91);
    uint64_t result = v92;
    outlined destroy of [String](v92);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getRawWiFiDataFromDB()(uint64_t a1)
{
  if (v30)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
    SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v29)
    {
      SQLiteDB.Row.get<A>(at:)(3LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      if (v28)
      {
        SQLiteDB.Row.get<A>(at:)(4LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(5LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(6LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(7LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(8LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(9LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)( 10LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        SQLiteDB.Row.get<A>(at:)( 11LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        SQLiteDB.Row.get<A>(at:)( 12LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        swift_bridgeObjectRetain();
        uint64_t v11 = specialized Array.append(_:)();
        specialized Array.append(_:)(v11);
        swift_bridgeObjectRetain();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        swift_bridgeObjectRetain();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        uint64_t v12 = specialized Array.append(_:)();
        uint64_t v13 = specialized Array.append(_:)(v12);
        uint64_t v14 = specialized Array.append(_:)(v13);
        specialized Array.append(_:)(v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      else
      {
        Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssid not of type String", 0x17uLL, 1);
        MediaMLPlugin::SQLError v33 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v8);
        unsigned __int32 code = v33.code;
        uint64_t countAndFlagsBits = v33.desc.value._countAndFlagsBits;
        object = v33.desc.value._object;
        unint64_t v9 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
        uint64_t v18 = swift_allocError(&type metadata for SQLError, v9, 0LL, 0LL);
        *(_DWORD *)uint64_t v10 = code;
        *(void *)(v10 + 8) = countAndFlagsBits;
        *(void *)(v10 + 16) = object;
        swift_willThrow(code);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v18;
      }
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name not of type String", 0x1BuLL, 1);
      MediaMLPlugin::SQLError v32 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 v21 = v32.code;
      uint64_t v19 = v32.desc.value._countAndFlagsBits;
      MediaMLPlugin::SQLError v20 = v32.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v22 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = v21;
      *(void *)(v7 + 8) = v19;
      *(void *)(v7 + 16) = v20;
      swift_willThrow(v21);
      swift_bridgeObjectRelease();
      return v22;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("session_id not of type String", 0x1DuLL, 1);
    MediaMLPlugin::SQLError v31 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v25 = v31.code;
    uint64_t desc_8 = v31.desc.value._countAndFlagsBits;
    uint64_t v24 = v31.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v26 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v25;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v24;
    swift_willThrow(v25);
    return v26;
  }

uint64_t MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 1072) = v2;
  *(void *)(v3 + 1064) = a2;
  *(void *)(v3 + 1056) = a1;
  *(void *)(v3 + 768) = v3;
  *(void *)(v3 + 776) = 0LL;
  *(void *)(v3 + 784) = 0LL;
  *(void *)(v3 + 800) = 0LL;
  *(void *)(v3 + 856) = 0LL;
  *(void *)(v3 + 888) = 0LL;
  *(void *)(v3 + 656) = 0LL;
  *(void *)(v3 + 664) = 0LL;
  *(void *)(v3 + 672) = 0LL;
  *(_BYTE *)(v3 + 680) = 0;
  *(void *)(v3 + 920) = 0LL;
  *(void *)(v3 + 720) = 0LL;
  *(void *)(v3 + 728) = 0LL;
  *(void *)(v3 + 752) = 0LL;
  *(void *)(v3 + 760) = 0LL;
  *(void *)(v3 + 936) = 0LL;
  *(void *)(v3 + 952) = 0LL;
  *(void *)(v3 + 968) = 0LL;
  *(void *)(v3 + 984) = 0LL;
  *(void *)(v3 + 1000) = 0LL;
  *(void *)(v3 + 1016) = 0LL;
  *(void *)(v3 + 1032) = 0LL;
  *(void *)(v3 + 1048) = 0LL;
  uint64_t v4 = type metadata accessor for AnyColumn();
  *(void *)(v3 + 1080) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 1088) = v5;
  uint64_t v14 = *(void *)(v5 + 64);
  *(void *)(v3 + 1096) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1104) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1112) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1120) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1128) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1136) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1144) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1152) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1160) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1168) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 1176) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 1184) = v7;
  uint64_t v15 = *(void *)(v7 + 64);
  *(void *)(v3 + 1192) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1200) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1208) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1216) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Order?);
  *(void *)(v3 + 1224) = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of DataFrameProtocol.grouped(by:)>>.0);
  *(void *)(v3 + 1232) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v3 + 1240) = v10;
  *(void *)(v3 + 1248) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DataFrame(0LL);
  *(void *)(v3 + 1256) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v3 + 1264) = v12;
  uint64_t v16 = *(void *)(v12 + 64);
  *(void *)(v3 + 1272) = v16;
  *(void *)(v3 + 1280) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1288) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1296) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1304) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1312) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1320) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1328) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1336) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1344) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1352) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1360) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1368) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 776) = a2;
  *(void *)(v3 + 784) = v2;
  return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), 0LL);
}

void MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  Swift::String v1 = *(void **)(v0 + 1072);
  *(void *)(v0 + 768) = v0;
  uint64_t v265 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:),  0LL,  v265,  v2,  v2);
  swift_release(v265);
  uint64_t v263 = *(void *)(v264 + 792);
  *(void *)(v264 + 1376) = v263;
  if (!v263)
  {
    Swift::String v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v277 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v41);
    unsigned __int32 code = v277.code;
    uint64_t desc_8 = v277.desc.value._countAndFlagsBits;
    object = v277.desc.value._object;
    unint64_t v42 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v42, 0LL, 0LL);
    *(_DWORD *)uint64_t v43 = code;
    *(void *)(v43 + 8) = desc_8;
    *(void *)(v43 + 16) = object;
    swift_willThrow(code);
LABEL_70:
    uint64_t v45 = *(void *)(v264 + 1360);
    uint64_t v46 = *(void *)(v264 + 1352);
    uint64_t v47 = *(void *)(v264 + 1344);
    uint64_t v48 = *(void *)(v264 + 1336);
    uint64_t v49 = *(void *)(v264 + 1328);
    uint64_t v50 = *(void *)(v264 + 1320);
    uint64_t v51 = *(void *)(v264 + 1312);
    uint64_t v52 = *(void *)(v264 + 1304);
    uint64_t v53 = *(void *)(v264 + 1296);
    uint64_t v54 = *(void *)(v264 + 1288);
    uint64_t v55 = *(void *)(v264 + 1280);
    uint64_t v56 = *(void *)(v264 + 1248);
    uint64_t v57 = *(void *)(v264 + 1224);
    uint64_t v58 = *(void *)(v264 + 1216);
    uint64_t v59 = *(void *)(v264 + 1208);
    uint64_t v60 = *(void *)(v264 + 1200);
    uint64_t v61 = *(void *)(v264 + 1192);
    uint64_t v62 = *(void *)(v264 + 1168);
    uint64_t v63 = *(void *)(v264 + 1160);
    uint64_t v64 = *(void *)(v264 + 1152);
    uint64_t v65 = *(void *)(v264 + 1144);
    uint64_t v66 = *(void *)(v264 + 1136);
    uint64_t v67 = *(void *)(v264 + 1128);
    uint64_t v68 = *(void *)(v264 + 1120);
    uint64_t v69 = *(void *)(v264 + 1112);
    uint64_t v70 = *(void *)(v264 + 1104);
    uint64_t v71 = *(void *)(v264 + 1096);
    swift_task_dealloc(*(void *)(v264 + 1368));
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    (*(void (**)(void))(*(void *)(v264 + 768) + 8LL))();
    return;
  }

  uint64_t v258 = *(void *)(v264 + 1368);
  uint64_t v257 = *(void *)(v264 + 1264);
  uint64_t v260 = *(void *)(v264 + 1256);
  uint64_t v259 = *(void *)(v264 + 1064);
  *(void *)(v264 + 800) = v263;
  Swift::String v256 = *kMediaML_appName.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v256._object);
  Swift::Bool v262 = DataFrame.containsColumn(_:)(v256);
  swift_bridgeObjectRelease(v256._object);
  Swift::Int v261 = *(void (**)(uint64_t, uint64_t, uint64_t))(v257 + 16);
  *(void *)(v264 + 1384) = v261;
  v261(v258, v259, v260);
  if (v262)
  {
    Swift::String v253 = *kMediaML_carrier.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v253._object);
    Swift::Bool v254 = DataFrame.containsColumn(_:)(v253);
    swift_bridgeObjectRelease(v253._object);
    Swift::Bool v255 = v254;
  }

  else
  {
    Swift::Bool v255 = 0;
  }

  uint64_t v3 = *(void *)(v264 + 1368);
  uint64_t v250 = *(void *)(v264 + 1360);
  uint64_t v252 = *(void *)(v264 + 1256);
  uint64_t v251 = *(void *)(v264 + 1064);
  uint64_t v249 = *(void (**)(uint64_t))(*(void *)(v264 + 1264) + 8LL);
  *(void *)(v264 + 1392) = v249;
  v249(v3);
  v261(v250, v251, v252);
  if (v255)
  {
    Swift::String v246 = *kMediaML_binnedRssi.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v246._object);
    Swift::Bool v247 = DataFrame.containsColumn(_:)(v246);
    swift_bridgeObjectRelease(v246._object);
    Swift::Bool v248 = v247;
  }

  else
  {
    Swift::Bool v248 = 0;
  }

  uint64_t v243 = *(void *)(v264 + 1352);
  uint64_t v245 = *(void *)(v264 + 1256);
  uint64_t v244 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1360));
  v261(v243, v244, v245);
  if (v248)
  {
    Swift::String v240 = *kMediaML_binnedRsrp.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v240._object);
    Swift::Bool v241 = DataFrame.containsColumn(_:)(v240);
    swift_bridgeObjectRelease(v240._object);
    Swift::Bool v242 = v241;
  }

  else
  {
    Swift::Bool v242 = 0;
  }

  uint64_t v237 = *(void *)(v264 + 1344);
  uint64_t v239 = *(void *)(v264 + 1256);
  uint64_t v238 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1352));
  v261(v237, v238, v239);
  if (v242)
  {
    Swift::String v234 = *kMediaML_binnedRsrq.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v234._object);
    Swift::Bool v235 = DataFrame.containsColumn(_:)(v234);
    swift_bridgeObjectRelease(v234._object);
    Swift::Bool v236 = v235;
  }

  else
  {
    Swift::Bool v236 = 0;
  }

  uint64_t v231 = *(void *)(v264 + 1336);
  uint64_t v233 = *(void *)(v264 + 1256);
  uint64_t v232 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1344));
  v261(v231, v232, v233);
  if (v236)
  {
    Swift::String v228 = *kMediaML_binnedRscp.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v228._object);
    Swift::Bool v229 = DataFrame.containsColumn(_:)(v228);
    swift_bridgeObjectRelease(v228._object);
    Swift::Bool v230 = v229;
  }

  else
  {
    Swift::Bool v230 = 0;
  }

  uint64_t v225 = *(void *)(v264 + 1328);
  uint64_t v227 = *(void *)(v264 + 1256);
  uint64_t v226 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1336));
  v261(v225, v226, v227);
  if (v230)
  {
    Swift::String v222 = *kMediaML_binnedSnr.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v222._object);
    Swift::Bool v223 = DataFrame.containsColumn(_:)(v222);
    swift_bridgeObjectRelease(v222._object);
    Swift::Bool v224 = v223;
  }

  else
  {
    Swift::Bool v224 = 0;
  }

  uint64_t v219 = *(void *)(v264 + 1320);
  uint64_t v221 = *(void *)(v264 + 1256);
  uint64_t v220 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1328));
  v261(v219, v220, v221);
  if (v224)
  {
    Swift::String v216 = *kMediaML_bars.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v216._object);
    Swift::Bool v217 = DataFrame.containsColumn(_:)(v216);
    swift_bridgeObjectRelease(v216._object);
    Swift::Bool v218 = v217;
  }

  else
  {
    Swift::Bool v218 = 0;
  }

  uint64_t v213 = *(void *)(v264 + 1312);
  uint64_t v215 = *(void *)(v264 + 1256);
  uint64_t v214 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1320));
  v261(v213, v214, v215);
  if (v218)
  {
    Swift::String v210 = *kMediaML_count.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v210._object);
    Swift::Bool v211 = DataFrame.containsColumn(_:)(v210);
    swift_bridgeObjectRelease(v210._object);
    Swift::Bool v212 = v211;
  }

  else
  {
    Swift::Bool v212 = 0;
  }

  uint64_t v207 = *(void *)(v264 + 1304);
  uint64_t v209 = *(void *)(v264 + 1256);
  uint64_t v208 = *(void *)(v264 + 1064);
  v249(*(void *)(v264 + 1312));
  v261(v207, v208, v209);
  if (!v212)
  {
    ((void (*)(void, void))v249)(*(void *)(v264 + 1304), *(void *)(v264 + 1256));
LABEL_66:
    uint64_t v34 = *(void *)(v264 + 1192);
    uint64_t v85 = *(void *)(v264 + 1184);
    uint64_t v86 = *(void *)(v264 + 1176);
    uint64_t v35 = MediaMLPlugin.logger.unsafeMutableAddressor();
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v34, v35, v86);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v90 = static os_log_type_t.error.getter();
    *(void *)(v264 + 808) = 2LL;
    unint64_t v87 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v37 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v264 + 684),  v264 + 808,  &type metadata for UInt32,  &type metadata for Int,  v87,  v88,  v37);
    uint32_t v89 = *(_DWORD *)(v264 + 684);
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v92 = _allocateUninitializedArray<A>(_:)(0LL, v38);
    if (os_log_type_enabled(v91, v90))
    {
      Swift::Double v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v81 = createStorage<A>(capacity:type:)(0LL, v79, v79);
      uint64_t v82 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v264 + 816) = v80;
      *(void *)(v264 + 824) = v81;
      *(void *)(v264 + 832) = v82;
      serialize(_:at:)(0LL, (_BYTE **)(v264 + 816));
      serialize(_:at:)(0LL, (_BYTE **)(v264 + 816));
      *(void *)(v264 + 840) = v92;
      unint64_t v83 = (void *)swift_task_alloc(48LL);
      v83[2] = v264 + 816;
      v83[3] = v264 + 824;
      void v83[4] = v264 + 832;
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      unint64_t v39 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)(partial apply for closure #1 in osLogInternal(_:log:type:), v83, v84, v39);
      swift_task_dealloc(v83);
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v90,  "GetAndSavePreProcessedCellData: DataFrame did not contain all required columns",  v80,  v89);
      destroyStorage<A>(_:count:)(v81, 0LL);
      destroyStorage<A>(_:count:)(v82, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_bridgeObjectRelease(v92);
    uint64_t v76 = *(void *)(v264 + 1192);
    uint64_t v75 = *(void *)(v264 + 1184);
    uint64_t v77 = *(void *)(v264 + 1176);

    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
    unint64_t v40 = lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
    uint64_t v78 = swift_allocError(&type metadata for PluginErrors, v40, 0LL, 0LL);
    swift_willThrow(v78);
    swift_release(v263);
    goto LABEL_70;
  }

  Swift::String v205 = *kMediaML_throughputTrue.unsafeMutableAddressor();
  swift_bridgeObjectRetain(v205._object);
  Swift::Bool v206 = DataFrame.containsColumn(_:)(v205);
  swift_bridgeObjectRelease(v205._object);
  ((void (*)(void, void))v249)(*(void *)(v264 + 1304), *(void *)(v264 + 1256));
  if (!v206) {
    goto LABEL_66;
  }
  uint64_t v196 = *(void *)(v264 + 1256);
  uint64_t v202 = *(void *)(v264 + 1248);
  uint64_t v201 = *(void *)(v264 + 1240);
  uint64_t v203 = *(void *)(v264 + 1232);
  uint64_t v199 = *(void *)(v264 + 1224);
  uint64_t v195 = _allocateUninitializedArray<A>(_:)(9LL, &type metadata for String);
  uint64_t v194 = v4;
  uint64_t v5 = kMediaML_appName.unsafeMutableAddressor();
  outlined init with copy of String(v5, v194);
  uint64_t v6 = kMediaML_carrier.unsafeMutableAddressor();
  outlined init with copy of String(v6, v194 + 2);
  uint64_t v7 = kMediaML_binnedRssi.unsafeMutableAddressor();
  outlined init with copy of String(v7, v194 + 4);
  uint64_t v8 = kMediaML_binnedRsrp.unsafeMutableAddressor();
  outlined init with copy of String(v8, v194 + 6);
  uint64_t v9 = kMediaML_binnedRsrq.unsafeMutableAddressor();
  outlined init with copy of String(v9, v194 + 8);
  uint64_t v10 = kMediaML_binnedRscp.unsafeMutableAddressor();
  outlined init with copy of String(v10, v194 + 10);
  uint64_t v11 = kMediaML_binnedSnr.unsafeMutableAddressor();
  outlined init with copy of String(v11, v194 + 12);
  uint64_t v12 = kMediaML_bars.unsafeMutableAddressor();
  outlined init with copy of String(v12, v194 + 14);
  uint64_t v13 = kMediaML_count.unsafeMutableAddressor();
  outlined init with copy of String(v13, v194 + 16);
  _finalizeUninitializedArray<A>(_:)();
  DataFrameProtocol.grouped(by:)();
  swift_bridgeObjectRelease(v195);
  uint64_t v14 = kMediaML_throughputTrue.unsafeMutableAddressor();
  uint64_t countAndFlagsBits = v14->_countAndFlagsBits;
  int v200 = v14->_object;
  swift_bridgeObjectRetain(v200);
  *(double *)(v264 + 848) = 0.5;
  uint64_t v15 = type metadata accessor for Order(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v199, 1LL);
  *(void *)(v264 + 688) = v196;
  *(void *)(v264 + 696) = &protocol witness table for DataFrame;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2( v264 + 688,  &opaque type descriptor for <<opaque return type of DataFrameProtocol.grouped(by:)>>,  1LL);
  unint64_t v16 = lazy protocol witness table accessor for type Double and conformance Double();
  RowGroupingProtocol.quantiles<A>(_:_:quantile:order:)( countAndFlagsBits,  v200,  &type metadata for Double,  v264 + 848,  v199,  v203,  &type metadata for Double,  OpaqueTypeConformance2,  v16);
  outlined destroy of Order?(v199);
  swift_bridgeObjectRelease(v200);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v201 + 8))(v202, v203);
  uint64_t v204 = DataFrame.shape.getter(v17);
  *(void *)(v264 + 856) = v204;
  if (__OFSUB__(v204, 1LL))
  {
    __break(1u);
  }

  else
  {
    *(void *)(v264 + 872) = v204 - 1;
    *(void *)(v264 + 880) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
    min<A>(_:_:)(v264 + 872, v264 + 880, &type metadata for Int, &protocol witness table for Int);
    uint64_t v193 = *(void *)(v264 + 864);
    *(void *)(v264 + 888) = v193;
    if (v204 <= 0) {
      goto LABEL_65;
    }
    uint64_t v168 = *(void *)(v264 + 1296);
    uint64_t v171 = *(void *)(v264 + 1288);
    uint64_t v170 = *(void *)(v264 + 1272);
    uint64_t v167 = *(void *)(v264 + 1264);
    uint64_t v172 = *(void *)(v264 + 1256);
    uint64_t v19 = *(void *)(v264 + 1216);
    uint64_t v163 = *(void *)(v264 + 1184);
    uint64_t v164 = *(void *)(v264 + 1176);
    uint64_t v20 = MediaMLPlugin.logger.unsafeMutableAddressor();
    uint64_t v165 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 16);
    v165(v19, v20, v164);
    v261(v171, v168, v172);
    int v169 = *(_DWORD *)(v167 + 80);
    unint64_t v166 = (v169 + 16LL) & ~(unint64_t)v169;
    uint64_t v178 = swift_allocObject(&unk_100065B38, v166 + v170, v169 | 7LL);
    uint64_t v173 = *(void (**)(unint64_t, uint64_t, uint64_t))(v167 + 32);
    v173(v178 + v166, v171, v172);
    v261(v171, v168, v172);
    uint64_t v180 = swift_allocObject(&unk_100065B60, v166 + v170, v169 | 7LL);
    uint64_t v21 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v173)(v180 + v166, v171, v172);
    oslog = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v192 = static os_log_type_t.info.getter();
    *(void *)(v264 + 904) = 22LL;
    unint64_t v174 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v175 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v176 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v264 + 1476),  v264 + 904,  &type metadata for UInt32,  &type metadata for Int,  v174,  v175,  v176);
    uint32_t size = *(_DWORD *)(v264 + 1476);
    uint64_t v182 = swift_allocObject(&unk_100065B88, 17LL, 7LL);
    *(_BYTE *)(v182 + 16) = 0;
    uint64_t v183 = swift_allocObject(&unk_100065BB0, 17LL, 7LL);
    *(_BYTE *)(v183 + 16) = 8;
    uint64_t v179 = swift_allocObject(&unk_100065BD8, 32LL, 7LL);
    *(void *)(v179 + 16) = partial apply for implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
    *(void *)(v179 + 24) = v178;
    uint64_t v184 = swift_allocObject(&unk_100065C00, 32LL, 7LL);
    *(void *)(v184 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v184 + 24) = v179;
    uint64_t v185 = swift_allocObject(&unk_100065C28, 17LL, 7LL);
    *(_BYTE *)(v185 + 16) = 0;
    uint64_t v186 = swift_allocObject(&unk_100065C50, 17LL, 7LL);
    *(_BYTE *)(v186 + 16) = 8;
    uint64_t v181 = swift_allocObject(&unk_100065C78, 32LL, 7LL);
    *(void *)(v181 + 16) = partial apply for implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
    *(void *)(v181 + 24) = v180;
    uint64_t v188 = swift_allocObject(&unk_100065CA0, 32LL, 7LL);
    *(void *)(v188 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v188 + 24) = v181;
    uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v187 = _allocateUninitializedArray<A>(_:)(6LL, v190);
    v189 = v22;
    swift_retain(v182);
    void *v189 = closure #1 in OSLogArguments.append(_:)partial apply;
    v189[1] = v182;
    swift_retain(v183);
    v189[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v189[3] = v183;
    swift_retain(v184);
    v189[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v189[5] = v184;
    swift_retain(v185);
    v189[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v189[7] = v185;
    swift_retain(v186);
    v189[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v189[9] = v186;
    swift_retain(v188);
    v189[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v189[11] = v188;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease(v187);
    if (os_log_type_enabled(oslog, v192))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v161 = createStorage<A>(capacity:type:)(0LL, v159, v159);
      uint64_t v162 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      uint64_t v272 = buf;
      uint64_t v273 = v161;
      uint64_t v274 = v162;
      serialize(_:at:)(0LL, &v272);
      serialize(_:at:)(2LL, &v272);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v276 = v182;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v276 = v183;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      uint64_t v276 = v184;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v276 = v185;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v276 = v186;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      uint64_t v276 = v188;
      closure #1 in osLogInternal(_:log:type:)(&v275, (uint64_t)&v272, (uint64_t)&v273, (uint64_t)&v274);
      _os_log_impl((void *)&_mh_execute_header, oslog, v192, "Processed cell data, shape =%ld,%ld", buf, size);
      destroyStorage<A>(_:count:)(v161, 0LL);
      destroyStorage<A>(_:count:)(v162, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v182);
      swift_release(v183);
      swift_release(v184);
      swift_release(v185);
      swift_release(v186);
      swift_release(v188);
    }

    else
    {
      swift_release(v182);
      swift_release(v183);
      swift_release(v184);
      swift_release(v185);
      swift_release(v186);
      swift_release(v188);
    }

    uint64_t v146 = *(void *)(v264 + 1216);
    uint64_t v23 = *(void *)(v264 + 1208);
    uint64_t v145 = *(void *)(v264 + 1184);
    uint64_t v148 = *(void *)(v264 + 1176);

    uint64_t v147 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
    v147(v146, v148);
    uint64_t v24 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v165(v23, v24, v148);
    uint64_t v150 = swift_allocObject(&unk_100065CC8, 24LL, 7LL);
    *(void *)(v150 + 16) = v193;
    log = (os_log_s *)Logger.logObject.getter(v150);
    os_log_type_t v158 = static os_log_type_t.debug.getter();
    *(void *)(v264 + 912) = 12LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v264 + 1480),  v264 + 912,  &type metadata for UInt32,  &type metadata for Int,  v174,  v175,  v176);
    uint32_t v149 = *(_DWORD *)(v264 + 1480);
    uint64_t v152 = swift_allocObject(&unk_100065CF0, 17LL, 7LL);
    *(_BYTE *)(v152 + 16) = 0;
    uint64_t v153 = swift_allocObject(&unk_100065D18, 17LL, 7LL);
    *(_BYTE *)(v153 + 16) = 8;
    uint64_t v151 = swift_allocObject(&unk_100065D40, 32LL, 7LL);
    *(void *)(v151 + 16) = partial apply for implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
    *(void *)(v151 + 24) = v150;
    uint64_t v155 = swift_allocObject(&unk_100065D68, 32LL, 7LL);
    *(void *)(v155 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v155 + 24) = v151;
    uint64_t v154 = _allocateUninitializedArray<A>(_:)(3LL, v190);
    uint64_t v156 = v25;
    swift_retain(v152);
    *uint64_t v156 = closure #1 in OSLogArguments.append(_:)partial apply;
    v156[1] = v152;
    swift_retain(v153);
    v156[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v156[3] = v153;
    swift_retain(v155);
    v156[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v156[5] = v155;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease(v154);
    if (os_log_type_enabled(log, v158))
    {
      uint64_t v142 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
      uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v143 = createStorage<A>(capacity:type:)(0LL, v141, v141);
      uint64_t v144 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      uint64_t v267 = v142;
      uint64_t v268 = v143;
      uint64_t v269 = v144;
      serialize(_:at:)(0LL, &v267);
      serialize(_:at:)(1LL, &v267);
      v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v271 = v152;
      closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)&v267, (uint64_t)&v268, (uint64_t)&v269);
      v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v271 = v153;
      closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)&v267, (uint64_t)&v268, (uint64_t)&v269);
      v270 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      uint64_t v271 = v155;
      closure #1 in osLogInternal(_:log:type:)(&v270, (uint64_t)&v267, (uint64_t)&v268, (uint64_t)&v269);
      _os_log_impl((void *)&_mh_execute_header, log, v158, "Writing %ld rows into processedcell table", v142, v149);
      destroyStorage<A>(_:count:)(v143, 0LL);
      destroyStorage<A>(_:count:)(v144, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v152);
      swift_release(v153);
      swift_release(v155);
    }

    else
    {
      swift_release(v152);
      swift_release(v153);
      swift_release(v155);
    }

    uint64_t v139 = *(void *)(v264 + 1208);
    uint64_t v140 = *(void *)(v264 + 1176);

    v147(v139, v140);
    if (v193 < 0)
    {
      LOBYTE(v44) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  v44,  347LL,  0);
      return;
    }

    uint64_t v26 = specialized Collection<>.makeIterator()(0LL, v193);
    *(void *)(v264 + 656) = v26;
    *(void *)(v264 + 664) = v27;
    *(void *)(v264 + 672) = v28;
    *(_BYTE *)(v264 + 680) = v29 & 1;
    *(void *)(v264 + 1400) = 0LL;
    uint64_t v266 = specialized IndexingIterator.next()(v26);
    if ((v30 & 1) != 0)
    {
LABEL_65:
      MediaMLPlugin::SQLError v32 = *(int **)((**(void **)(v264 + 1072) & swift_isaMask) + 0xA0LL);
      uint64_t v93 = (void (*)(void))((char *)v32 + *v32);
      MediaMLPlugin::SQLError v33 = (void *)swift_task_alloc(v32[1]);
      *(void *)(v264 + 1456) = v33;
      *MediaMLPlugin::SQLError v33 = *(void *)(v264 + 768);
      v33[1] = MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
      v93(*(void *)(v264 + 1280));
    }

    else
    {
      uint64_t v136 = *(void *)(v264 + 1168);
      uint64_t v135 = *(void *)(v264 + 1088);
      uint64_t v137 = *(void *)(v264 + 1080);
      *(void *)(v264 + 920) = v266;
      Swift::String v134 = *kMediaML_carrier.unsafeMutableAddressor();
      swift_bridgeObjectRetain(v134._object);
      DataFrame.subscript.getter(v134._countAndFlagsBits, v134._object);
      AnyColumn.subscript.getter(v266);
      uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
      v138(v136, v137);
      if (*(void *)(v264 + 72))
      {
        uint64_t v132 = *(void *)(v264 + 1160);
        uint64_t v133 = *(void *)(v264 + 1080);
        outlined init with take of Any(v264 + 48, v264 + 16);
        swift_dynamicCast(v264 + 704, v264 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        uint64_t v129 = *(void *)(v264 + 704);
        uint64_t v130 = *(void *)(v264 + 712);
        *(void *)(v264 + 1408) = v130;
        *(void *)(v264 + 720) = v129;
        *(void *)(v264 + 728) = v130;
        swift_bridgeObjectRelease(v134._object);
        Swift::String v131 = *kMediaML_appName.unsafeMutableAddressor();
        swift_bridgeObjectRetain(v131._object);
        DataFrame.subscript.getter(v131._countAndFlagsBits, v131._object);
        AnyColumn.subscript.getter(v266);
        v138(v132, v133);
        if (*(void *)(v264 + 136))
        {
          uint64_t v127 = *(void *)(v264 + 1152);
          uint64_t v128 = *(void *)(v264 + 1080);
          outlined init with take of Any(v264 + 112, v264 + 80);
          swift_dynamicCast(v264 + 736, v264 + 80, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
          uint64_t v124 = *(void *)(v264 + 736);
          uint64_t v125 = *(void *)(v264 + 744);
          *(void *)(v264 + 1416) = v125;
          *(void *)(v264 + 752) = v124;
          *(void *)(v264 + 760) = v125;
          swift_bridgeObjectRelease(v131._object);
          Swift::String v126 = *kMediaML_binnedRssi.unsafeMutableAddressor();
          swift_bridgeObjectRetain(v126._object);
          DataFrame.subscript.getter(v126._countAndFlagsBits, v126._object);
          AnyColumn.subscript.getter(v266);
          v138(v127, v128);
          if (*(void *)(v264 + 200))
          {
            uint64_t v122 = *(void *)(v264 + 1144);
            uint64_t v123 = *(void *)(v264 + 1080);
            outlined init with take of Any(v264 + 176, v264 + 144);
            swift_dynamicCast(v264 + 928, v264 + 144, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
            uint64_t v120 = *(void *)(v264 + 928);
            *(void *)(v264 + 936) = v120;
            swift_bridgeObjectRelease(v126._object);
            Swift::String v121 = *kMediaML_binnedRsrp.unsafeMutableAddressor();
            swift_bridgeObjectRetain(v121._object);
            DataFrame.subscript.getter(v121._countAndFlagsBits, v121._object);
            AnyColumn.subscript.getter(v266);
            v138(v122, v123);
            if (*(void *)(v264 + 264))
            {
              uint64_t v118 = *(void *)(v264 + 1136);
              uint64_t v119 = *(void *)(v264 + 1080);
              outlined init with take of Any(v264 + 240, v264 + 208);
              swift_dynamicCast(v264 + 944, v264 + 208, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
              uint64_t v116 = *(void *)(v264 + 944);
              *(void *)(v264 + 952) = v116;
              swift_bridgeObjectRelease(v121._object);
              Swift::String v117 = *kMediaML_binnedRsrq.unsafeMutableAddressor();
              swift_bridgeObjectRetain(v117._object);
              DataFrame.subscript.getter(v117._countAndFlagsBits, v117._object);
              AnyColumn.subscript.getter(v266);
              v138(v118, v119);
              if (*(void *)(v264 + 328))
              {
                uint64_t v114 = *(void *)(v264 + 1128);
                uint64_t v115 = *(void *)(v264 + 1080);
                outlined init with take of Any(v264 + 304, v264 + 272);
                swift_dynamicCast( v264 + 960,  v264 + 272,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                uint64_t v112 = *(void *)(v264 + 960);
                *(void *)(v264 + 968) = v112;
                swift_bridgeObjectRelease(v117._object);
                Swift::String v113 = *kMediaML_binnedRscp.unsafeMutableAddressor();
                swift_bridgeObjectRetain(v113._object);
                DataFrame.subscript.getter(v113._countAndFlagsBits, v113._object);
                AnyColumn.subscript.getter(v266);
                v138(v114, v115);
                if (*(void *)(v264 + 392))
                {
                  uint64_t v110 = *(void *)(v264 + 1120);
                  uint64_t v111 = *(void *)(v264 + 1080);
                  outlined init with take of Any(v264 + 368, v264 + 336);
                  swift_dynamicCast( v264 + 976,  v264 + 336,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                  uint64_t v108 = *(void *)(v264 + 976);
                  *(void *)(v264 + 984) = v108;
                  swift_bridgeObjectRelease(v113._object);
                  Swift::String v109 = *kMediaML_binnedSnr.unsafeMutableAddressor();
                  swift_bridgeObjectRetain(v109._object);
                  DataFrame.subscript.getter(v109._countAndFlagsBits, v109._object);
                  AnyColumn.subscript.getter(v266);
                  v138(v110, v111);
                  if (*(void *)(v264 + 456))
                  {
                    uint64_t v106 = *(void *)(v264 + 1112);
                    uint64_t v107 = *(void *)(v264 + 1080);
                    outlined init with take of Any(v264 + 432, v264 + 400);
                    swift_dynamicCast( v264 + 992,  v264 + 400,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                    uint64_t v104 = *(void *)(v264 + 992);
                    *(void *)(v264 + 1000) = v104;
                    swift_bridgeObjectRelease(v109._object);
                    Swift::String v105 = *kMediaML_bars.unsafeMutableAddressor();
                    swift_bridgeObjectRetain(v105._object);
                    DataFrame.subscript.getter(v105._countAndFlagsBits, v105._object);
                    AnyColumn.subscript.getter(v266);
                    v138(v106, v107);
                    if (*(void *)(v264 + 520))
                    {
                      uint64_t v102 = *(void *)(v264 + 1104);
                      uint64_t v103 = *(void *)(v264 + 1080);
                      outlined init with take of Any(v264 + 496, v264 + 464);
                      swift_dynamicCast( v264 + 1008,  v264 + 464,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                      uint64_t v100 = *(void *)(v264 + 1008);
                      *(void *)(v264 + 1016) = v100;
                      swift_bridgeObjectRelease(v105._object);
                      Swift::String v101 = *kMediaML_count.unsafeMutableAddressor();
                      swift_bridgeObjectRetain(v101._object);
                      DataFrame.subscript.getter(v101._countAndFlagsBits, v101._object);
                      AnyColumn.subscript.getter(v266);
                      v138(v102, v103);
                      if (*(void *)(v264 + 584))
                      {
                        uint64_t v98 = *(void *)(v264 + 1096);
                        uint64_t v99 = *(void *)(v264 + 1080);
                        outlined init with take of Any(v264 + 560, v264 + 528);
                        swift_dynamicCast( v264 + 1024,  v264 + 528,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                        uint64_t v96 = *(void *)(v264 + 1024);
                        *(void *)(v264 + 1032) = v96;
                        swift_bridgeObjectRelease(v101._object);
                        Swift::String v97 = *kMediaML_medianThroughputTrue.unsafeMutableAddressor();
                        swift_bridgeObjectRetain(v97._object);
                        DataFrame.subscript.getter(v97._countAndFlagsBits, v97._object);
                        AnyColumn.subscript.getter(v266);
                        v138(v98, v99);
                        if (*(void *)(v264 + 648))
                        {
                          uint64_t v95 = *(void *)(v264 + 1376);
                          outlined init with take of Any(v264 + 624, v264 + 592);
                          swift_dynamicCast( v264 + 1040,  v264 + 592,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
                          uint64_t v94 = *(void *)(v264 + 1040);
                          *(void *)(v264 + 1048) = v94;
                          swift_bridgeObjectRelease(v97._object);
                          *(Swift::String *)(v264 + 1424) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO processedcell (carrier, app_name, binned_rssi, binned_rsrp, binned_rsrq, binned_rscp, binned_snr, bars, count, throughput_true) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  0xB1uLL,  1);
                          swift_bridgeObjectRetain(v130);
                          swift_bridgeObjectRetain(v125);
                          MediaMLPlugin::SQLError v31 = (void *)swift_task_alloc(112LL);
                          *(void *)(v264 + 1440) = v31;
                          v31[2] = v129;
                          v31[3] = v130;
                          v31[4] = v124;
                          v31[5] = v125;
                          v31[6] = v120;
                          v31[7] = v116;
                          v31[8] = v112;
                          v31[9] = v108;
                          v31[10] = v104;
                          v31[11] = v100;
                          v31[12] = v96;
                          v31[13] = v94;
                          swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), v95);
                        }

                        else
                        {
                          LOBYTE(v44) = 2;
                          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  368LL,  0);
                        }
                      }

                      else
                      {
                        LOBYTE(v44) = 2;
                        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  367LL,  0);
                      }
                    }

                    else
                    {
                      LOBYTE(v44) = 2;
                      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  366LL,  0);
                    }
                  }

                  else
                  {
                    LOBYTE(v44) = 2;
                    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  365LL,  0);
                  }
                }

                else
                {
                  LOBYTE(v44) = 2;
                  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  364LL,  0);
                }
              }

              else
              {
                LOBYTE(v44) = 2;
                _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  363LL,  0);
              }
            }

            else
            {
              LOBYTE(v44) = 2;
              _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  362LL,  0);
            }
          }

          else
          {
            LOBYTE(v44) = 2;
            _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  361LL,  0);
          }
        }

        else
        {
          LOBYTE(v44) = 2;
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  360LL,  0);
        }
      }

      else
      {
        LOBYTE(v44) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v44,  359LL,  0);
      }
    }
  }

uint64_t MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  uint64_t v1 = v0[179];
  uint64_t v2 = v0[178];
  uint64_t v3 = v0[175];
  v0[96] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #2 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:));
  v0[181] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), 0LL);
  }
  uint64_t v7 = v8[179];
  uint64_t v6 = v8[177];
  uint64_t v5 = v8[176];
  swift_task_dealloc(v8[180]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), 0LL);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  void *v6;
  int *v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v1 = v0[177];
  uint64_t v56 = v0[176];
  v0[96] = v0;
  swift_bridgeObjectRelease(v1);
  uint64_t v2 = swift_bridgeObjectRelease(v56);
  v0[175] = v0[181];
  uint64_t v3 = specialized IndexingIterator.next()(v2);
  uint64_t v57 = v3;
  if ((v4 & 1) != 0)
  {
    uint64_t v7 = *(int **)((**(void **)(v55 + 1072) & swift_isaMask) + 0xA0LL);
    uint64_t v9 = (uint64_t (*)(void))((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v55 + 1456) = v8;
    *uint64_t v8 = *(void *)(v55 + 768);
    v8[1] = MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
    return v9(*(void *)(v55 + 1280));
  }

  else
  {
    uint64_t v52 = *(void *)(v55 + 1168);
    uint64_t v51 = *(void *)(v55 + 1088);
    uint64_t v53 = *(void *)(v55 + 1080);
    *(void *)(v55 + 920) = v3;
    uint64_t v50 = *kMediaML_carrier.unsafeMutableAddressor();
    swift_bridgeObjectRetain(v50._object);
    DataFrame.subscript.getter(v50._countAndFlagsBits, v50._object);
    AnyColumn.subscript.getter(v57);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    v54(v52, v53);
    if (*(void *)(v55 + 72))
    {
      uint64_t v48 = *(void *)(v55 + 1160);
      uint64_t v49 = *(void *)(v55 + 1080);
      outlined init with take of Any(v55 + 48, v55 + 16);
      swift_dynamicCast(v55 + 704, v55 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      uint64_t v45 = *(void *)(v55 + 704);
      uint64_t v46 = *(void *)(v55 + 712);
      *(void *)(v55 + 1408) = v46;
      *(void *)(v55 + 720) = v45;
      *(void *)(v55 + 728) = v46;
      swift_bridgeObjectRelease(v50._object);
      uint64_t v47 = *kMediaML_appName.unsafeMutableAddressor();
      swift_bridgeObjectRetain(v47._object);
      DataFrame.subscript.getter(v47._countAndFlagsBits, v47._object);
      AnyColumn.subscript.getter(v57);
      v54(v48, v49);
      if (*(void *)(v55 + 136))
      {
        uint64_t v43 = *(void *)(v55 + 1152);
        int v44 = *(void *)(v55 + 1080);
        outlined init with take of Any(v55 + 112, v55 + 80);
        swift_dynamicCast(v55 + 736, v55 + 80, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        unint64_t v40 = *(void *)(v55 + 736);
        Swift::String v41 = *(void *)(v55 + 744);
        *(void *)(v55 + 1416) = v41;
        *(void *)(v55 + 752) = v40;
        *(void *)(v55 + 760) = v41;
        swift_bridgeObjectRelease(v47._object);
        unint64_t v42 = *kMediaML_binnedRssi.unsafeMutableAddressor();
        swift_bridgeObjectRetain(v42._object);
        DataFrame.subscript.getter(v42._countAndFlagsBits, v42._object);
        AnyColumn.subscript.getter(v57);
        v54(v43, v44);
        if (*(void *)(v55 + 200))
        {
          uint64_t v38 = *(void *)(v55 + 1144);
          unint64_t v39 = *(void *)(v55 + 1080);
          outlined init with take of Any(v55 + 176, v55 + 144);
          swift_dynamicCast(v55 + 928, v55 + 144, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
          uint64_t v36 = *(void *)(v55 + 928);
          *(void *)(v55 + 936) = v36;
          swift_bridgeObjectRelease(v42._object);
          unint64_t v37 = *kMediaML_binnedRsrp.unsafeMutableAddressor();
          swift_bridgeObjectRetain(v37._object);
          DataFrame.subscript.getter(v37._countAndFlagsBits, v37._object);
          AnyColumn.subscript.getter(v57);
          v54(v38, v39);
          if (*(void *)(v55 + 264))
          {
            uint64_t v34 = *(void *)(v55 + 1136);
            uint64_t v35 = *(void *)(v55 + 1080);
            outlined init with take of Any(v55 + 240, v55 + 208);
            swift_dynamicCast(v55 + 944, v55 + 208, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
            MediaMLPlugin::SQLError v32 = *(void *)(v55 + 944);
            *(void *)(v55 + 952) = v32;
            swift_bridgeObjectRelease(v37._object);
            MediaMLPlugin::SQLError v33 = *kMediaML_binnedRsrq.unsafeMutableAddressor();
            swift_bridgeObjectRetain(v33._object);
            DataFrame.subscript.getter(v33._countAndFlagsBits, v33._object);
            AnyColumn.subscript.getter(v57);
            v54(v34, v35);
            if (*(void *)(v55 + 328))
            {
              char v30 = *(void *)(v55 + 1128);
              MediaMLPlugin::SQLError v31 = *(void *)(v55 + 1080);
              outlined init with take of Any(v55 + 304, v55 + 272);
              swift_dynamicCast(v55 + 960, v55 + 272, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
              uint64_t v28 = *(void *)(v55 + 960);
              *(void *)(v55 + 968) = v28;
              swift_bridgeObjectRelease(v33._object);
              char v29 = *kMediaML_binnedRscp.unsafeMutableAddressor();
              swift_bridgeObjectRetain(v29._object);
              DataFrame.subscript.getter(v29._countAndFlagsBits, v29._object);
              AnyColumn.subscript.getter(v57);
              v54(v30, v31);
              if (*(void *)(v55 + 392))
              {
                uint64_t v26 = *(void *)(v55 + 1120);
                uint64_t v27 = *(void *)(v55 + 1080);
                outlined init with take of Any(v55 + 368, v55 + 336);
                swift_dynamicCast(v55 + 976, v55 + 336, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
                uint64_t v24 = *(void *)(v55 + 976);
                *(void *)(v55 + 984) = v24;
                swift_bridgeObjectRelease(v29._object);
                unsigned __int32 v25 = *kMediaML_binnedSnr.unsafeMutableAddressor();
                swift_bridgeObjectRetain(v25._object);
                DataFrame.subscript.getter(v25._countAndFlagsBits, v25._object);
                AnyColumn.subscript.getter(v57);
                v54(v26, v27);
                if (*(void *)(v55 + 456))
                {
                  uint64_t v22 = *(void *)(v55 + 1112);
                  uint64_t v23 = *(void *)(v55 + 1080);
                  outlined init with take of Any(v55 + 432, v55 + 400);
                  swift_dynamicCast( v55 + 992,  v55 + 400,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                  uint64_t v20 = *(void *)(v55 + 992);
                  *(void *)(v55 + 1000) = v20;
                  swift_bridgeObjectRelease(v25._object);
                  uint64_t v21 = *kMediaML_bars.unsafeMutableAddressor();
                  swift_bridgeObjectRetain(v21._object);
                  DataFrame.subscript.getter(v21._countAndFlagsBits, v21._object);
                  AnyColumn.subscript.getter(v57);
                  v54(v22, v23);
                  if (*(void *)(v55 + 520))
                  {
                    uint64_t v18 = *(void *)(v55 + 1104);
                    uint64_t v19 = *(void *)(v55 + 1080);
                    outlined init with take of Any(v55 + 496, v55 + 464);
                    swift_dynamicCast( v55 + 1008,  v55 + 464,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                    unint64_t v16 = *(void *)(v55 + 1008);
                    *(void *)(v55 + 1016) = v16;
                    swift_bridgeObjectRelease(v21._object);
                    uint64_t v17 = *kMediaML_count.unsafeMutableAddressor();
                    swift_bridgeObjectRetain(v17._object);
                    DataFrame.subscript.getter(v17._countAndFlagsBits, v17._object);
                    AnyColumn.subscript.getter(v57);
                    v54(v18, v19);
                    if (*(void *)(v55 + 584))
                    {
                      uint64_t v14 = *(void *)(v55 + 1096);
                      uint64_t v15 = *(void *)(v55 + 1080);
                      outlined init with take of Any(v55 + 560, v55 + 528);
                      swift_dynamicCast( v55 + 1024,  v55 + 528,  (char *)&type metadata for Any + 8,  &type metadata for Int,  7LL);
                      uint64_t v12 = *(void *)(v55 + 1024);
                      *(void *)(v55 + 1032) = v12;
                      swift_bridgeObjectRelease(v17._object);
                      uint64_t v13 = *kMediaML_medianThroughputTrue.unsafeMutableAddressor();
                      swift_bridgeObjectRetain(v13._object);
                      DataFrame.subscript.getter(v13._countAndFlagsBits, v13._object);
                      AnyColumn.subscript.getter(v57);
                      v54(v14, v15);
                      if (*(void *)(v55 + 648))
                      {
                        uint64_t v11 = *(void *)(v55 + 1376);
                        outlined init with take of Any(v55 + 624, v55 + 592);
                        swift_dynamicCast( v55 + 1040,  v55 + 592,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
                        uint64_t v10 = *(void *)(v55 + 1040);
                        *(void *)(v55 + 1048) = v10;
                        swift_bridgeObjectRelease(v13._object);
                        *(Swift::String *)(v55 + 1424) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO processedcell (carrier, app_name, binned_rssi, bi nned_rsrp, binned_rsrq, binned_rscp, binned_snr, bars, count, throughput_true) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  0xB1uLL,  1);
                        swift_bridgeObjectRetain(v46);
                        swift_bridgeObjectRetain(v41);
                        uint64_t v6 = (void *)swift_task_alloc(112LL);
                        *(void *)(v55 + 1440) = v6;
                        void v6[2] = v45;
                        v6[3] = v46;
                        v6[4] = v40;
                        v6[5] = v41;
                        v6[6] = v36;
                        v6[7] = v32;
                        v6[8] = v28;
                        v6[9] = v24;
                        v6[10] = v20;
                        v6[11] = v16;
                        v6[12] = v12;
                        v6[13] = v10;
                        return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), v11);
                      }

                      else
                      {
                        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  368LL,  0);
                      }
                    }

                    else
                    {
                      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  367LL,  0);
                    }
                  }

                  else
                  {
                    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  366LL,  0);
                  }
                }

                else
                {
                  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  365LL,  0);
                }
              }

              else
              {
                return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  364LL,  0);
              }
            }

            else
            {
              return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  363LL,  0);
            }
          }

          else
          {
            return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  362LL,  0);
          }
        }

        else
        {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  361LL,  0);
        }
      }

      else
      {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  360LL,  0);
      }
    }

    else
    {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  359LL,  0);
    }
  }

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1456);
  *(void *)(v2 + 768) = *v1;
  *(void *)(v2 + 1464) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), 0LL);
  }
  else {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *buf;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(unint64_t, uint64_t, uint64_t);
  unint64_t v59;
  unint64_t v60;
  uint32_t size;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  os_log_s *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v53 = (void (*)(uint64_t, uint64_t, uint64_t))v0[173];
  uint64_t v56 = v0[161];
  uint64_t v52 = v0[160];
  uint64_t v55 = v0[159];
  uint64_t v50 = v0[158];
  uint64_t v57 = v0[157];
  uint64_t v1 = v0[150];
  uint64_t v48 = v0[148];
  uint64_t v49 = v0[147];
  v0[96] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v1, v2, v49);
  v53(v56, v52, v57);
  uint64_t v54 = *(_DWORD *)(v50 + 80);
  uint64_t v51 = (v54 + 16LL) & ~(unint64_t)v54;
  uint64_t v62 = swift_allocObject(&unk_1000659A8, v51 + v55, v54 | 7LL);
  uint64_t v58 = *(void (**)(unint64_t, uint64_t, uint64_t))(v50 + 32);
  v58(v62 + v51, v56, v57);
  v53(v56, v52, v57);
  uint64_t v64 = swift_allocObject(&unk_1000659D0, v51 + v55, v54 | 7LL);
  uint64_t v3 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v58)(v64 + v51, v56, v57);
  uint64_t v75 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v76 = static os_log_type_t.debug.getter();
  v0[112] = 22LL;
  uint64_t v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)(v0 + 184, v0 + 112, &type metadata for UInt32, &type metadata for Int, v59, v60, v4);
  uint32_t size = *((_DWORD *)v0 + 368);
  uint64_t v66 = swift_allocObject(&unk_1000659F8, 17LL, 7LL);
  *(_BYTE *)(v66 + 16) = 0;
  uint64_t v67 = swift_allocObject(&unk_100065A20, 17LL, 7LL);
  *(_BYTE *)(v67 + 16) = 8;
  uint64_t v63 = swift_allocObject(&unk_100065A48, 32LL, 7LL);
  *(void *)(v63 + 16) = partial apply for implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
  *(void *)(v63 + 24) = v62;
  uint64_t v68 = swift_allocObject(&unk_100065A70, 32LL, 7LL);
  *(void *)(v68 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v68 + 24) = v63;
  uint64_t v69 = swift_allocObject(&unk_100065A98, 17LL, 7LL);
  *(_BYTE *)(v69 + 16) = 0;
  uint64_t v70 = swift_allocObject(&unk_100065AC0, 17LL, 7LL);
  *(_BYTE *)(v70 + 16) = 8;
  uint64_t v65 = swift_allocObject(&unk_100065AE8, 32LL, 7LL);
  *(void *)(v65 + 16) = partial apply for implicit closure #14 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:);
  *(void *)(v65 + 24) = v64;
  int v72 = swift_allocObject(&unk_100065B10, 32LL, 7LL);
  *(void *)(v72 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v72 + 24) = v65;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v71 = _allocateUninitializedArray<A>(_:)(6LL, v74);
  uint64_t v73 = v5;
  swift_retain(v66);
  *uint64_t v73 = closure #1 in OSLogArguments.append(_:)partial apply;
  v73[1] = v66;
  swift_retain(v67);
  v73[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v73[3] = v67;
  swift_retain(v68);
  v73[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v73[5] = v68;
  swift_retain(v69);
  v73[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v73[7] = v69;
  swift_retain(v70);
  v73[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v73[9] = v70;
  swift_retain(v72);
  v73[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v73[11] = v72;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease(v71);
  if (!os_log_type_enabled(v75, v76))
  {
    swift_release(v66);
    swift_release(v67);
    swift_release(v68);
    swift_release(v69);
    swift_release(v70);
    swift_release(v72);
    goto LABEL_6;
  }

  uint64_t v6 = v47[183];
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v45 = createStorage<A>(capacity:type:)(0LL, v43, v43);
  uint64_t v46 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  uint64_t v77 = buf;
  uint64_t v78 = v45;
  uint64_t v79 = v46;
  serialize(_:at:)(0LL, &v77);
  serialize(_:at:)(2LL, &v77);
  Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v81 = v66;
  uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
  if (!v6)
  {
    Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v81 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
    Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v81 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
    Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v81 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
    Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v81 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
    Swift::Double v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v81 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Returning a dataframe of size=%ld,%ld", buf, size);
    destroyStorage<A>(_:count:)(v45, 0LL);
    destroyStorage<A>(_:count:)(v46, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v66);
    swift_release(v67);
    swift_release(v68);
    swift_release(v69);
    swift_release(v70);
    swift_release(v72);
LABEL_6:
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v47[174];
    uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v47[173];
    uint64_t v15 = v47[171];
    unint64_t v16 = v47[170];
    uint64_t v17 = v47[169];
    uint64_t v18 = v47[168];
    uint64_t v19 = v47[167];
    uint64_t v20 = v47[166];
    uint64_t v21 = v47[165];
    uint64_t v22 = v47[164];
    uint64_t v23 = v47[163];
    uint64_t v24 = v47[162];
    unsigned __int32 v25 = v47[161];
    uint64_t v26 = v47[160];
    uint64_t v12 = v47[157];
    uint64_t v27 = v47[156];
    uint64_t v28 = v47[153];
    char v29 = v47[152];
    char v30 = v47[151];
    MediaMLPlugin::SQLError v31 = v47[150];
    MediaMLPlugin::SQLError v32 = v47[149];
    uint64_t v8 = v47[148];
    uint64_t v9 = v47[147];
    MediaMLPlugin::SQLError v33 = v47[146];
    uint64_t v34 = v47[145];
    uint64_t v35 = v47[144];
    uint64_t v36 = v47[143];
    unint64_t v37 = v47[142];
    uint64_t v38 = v47[141];
    unint64_t v39 = v47[140];
    unint64_t v40 = v47[139];
    Swift::String v41 = v47[138];
    unint64_t v42 = v47[137];
    uint64_t v10 = v47[132];
    uint64_t v14 = v47[172];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v31, v9);
    v11(v10, v26, v12);
    v13(v26, v12);
    v13(v24, v12);
    swift_release(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v47[96] + 8LL))();
  }

  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v1 = v0[180];
  uint64_t v3 = v0[179];
  uint64_t v4 = v0[177];
  uint64_t v5 = v0[176];
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[174];
  uint64_t v9 = v0[172];
  uint64_t v6 = v0[162];
  uint64_t v7 = v0[157];
  v0[96] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  v8(v6, v7);
  swift_release(v9);
  uint64_t v10 = v0[170];
  uint64_t v11 = v0[169];
  uint64_t v12 = v0[168];
  uint64_t v13 = v0[167];
  uint64_t v14 = v0[166];
  uint64_t v15 = v0[165];
  unint64_t v16 = v0[164];
  uint64_t v17 = v0[163];
  uint64_t v18 = v0[162];
  uint64_t v19 = v0[161];
  uint64_t v20 = v0[160];
  uint64_t v21 = v0[156];
  uint64_t v22 = v0[153];
  uint64_t v23 = v0[152];
  uint64_t v24 = v0[151];
  unsigned __int32 v25 = v0[150];
  uint64_t v26 = v0[149];
  uint64_t v27 = v0[146];
  uint64_t v28 = v0[145];
  char v29 = v0[144];
  char v30 = v0[143];
  MediaMLPlugin::SQLError v31 = v0[142];
  MediaMLPlugin::SQLError v32 = v0[141];
  MediaMLPlugin::SQLError v33 = v0[140];
  uint64_t v34 = v0[139];
  uint64_t v35 = v0[138];
  uint64_t v36 = v0[137];
  swift_task_dealloc(v0[171]);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0[96] + 8LL))();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[174];
  uint64_t v5 = v0[172];
  uint64_t v2 = v0[162];
  uint64_t v3 = v0[157];
  v0[96] = v0;
  v1(v2, v3);
  swift_release(v5);
  uint64_t v6 = v0[170];
  uint64_t v7 = v0[169];
  uint64_t v8 = v0[168];
  uint64_t v9 = v0[167];
  uint64_t v10 = v0[166];
  uint64_t v11 = v0[165];
  uint64_t v12 = v0[164];
  uint64_t v13 = v0[163];
  uint64_t v14 = v0[162];
  uint64_t v15 = v0[161];
  unint64_t v16 = v0[160];
  uint64_t v17 = v0[156];
  uint64_t v18 = v0[153];
  uint64_t v19 = v0[152];
  uint64_t v20 = v0[151];
  uint64_t v21 = v0[150];
  uint64_t v22 = v0[149];
  uint64_t v23 = v0[146];
  uint64_t v24 = v0[145];
  unsigned __int32 v25 = v0[144];
  uint64_t v26 = v0[143];
  uint64_t v27 = v0[142];
  uint64_t v28 = v0[141];
  char v29 = v0[140];
  char v30 = v0[139];
  MediaMLPlugin::SQLError v31 = v0[138];
  MediaMLPlugin::SQLError v32 = v0[137];
  swift_task_dealloc(v0[171]);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0[96] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return v0;
}

uint64_t closure #2 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  uint64_t v19 = _allocateUninitializedArray<A>(_:)(10LL, v27);
  uint64_t v25 = v14;
  swift_bridgeObjectRetain(a3);
  *(void *)(v25 + 24) = &type metadata for String;
  *(void *)(v25 + 32) = &protocol witness table for String;
  *(void *)uint64_t v25 = a2;
  *(void *)(v25 + 8) = a3;
  swift_bridgeObjectRetain(a5);
  *(void *)(v25 + 64) = &type metadata for String;
  *(void *)(v25 + 72) = &protocol witness table for String;
  *(void *)(v25 + 40) = a4;
  *(void *)(v25 + 48) = a5;
  *(void *)(v25 + 104) = &type metadata for Int;
  *(void *)(v25 + 112) = &protocol witness table for Int;
  *(void *)(v25 + 80) = a6;
  *(void *)(v25 + 144) = &type metadata for Int;
  *(void *)(v25 + 152) = &protocol witness table for Int;
  *(void *)(v25 + 120) = a7;
  *(void *)(v25 + 184) = &type metadata for Int;
  *(void *)(v25 + 192) = &protocol witness table for Int;
  *(void *)(v25 + 160) = a8;
  *(void *)(v25 + 224) = &type metadata for Int;
  *(void *)(v25 + 232) = &protocol witness table for Int;
  *(void *)(v25 + 200) = a10;
  *(void *)(v25 + 264) = &type metadata for Int;
  *(void *)(v25 + 272) = &protocol witness table for Int;
  *(void *)(v25 + 240) = a11;
  *(void *)(v25 + 304) = &type metadata for Int;
  *(void *)(v25 + 312) = &protocol witness table for Int;
  *(void *)(v25 + 280) = a12;
  *(void *)(v25 + 344) = &type metadata for Int;
  *(void *)(v25 + 352) = &protocol witness table for Int;
  *(void *)(v25 + 320) = a13;
  *(void *)(v25 + 384) = &type metadata for Double;
  *(void *)(v25 + 392) = &protocol witness table for Double;
  *(double *)(v25 + 360) = a9;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease(v19);
  if (!v28) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #14 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return v0;
}

uint64_t MediaMLPlugin.getProcessedCellDataFromDB()(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  void v2[3] = v1;
  return swift_task_switch(MediaMLPlugin.getProcessedCellDataFromDB(), 0LL);
}

void MediaMLPlugin.getProcessedCellDataFromDB()()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getProcessedCellDataFromDB(),  0LL,  v11,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 80) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "WITH CarrierAppNamepair as (SELECT carrier, app_name FROM processedcell GROUP BY ca rrier, app_name HAVING COUNT(*) > 5)\n SELECT p.carrier, p.app_name, binned_rssi, binned_rsrp, binned_rsrq, binned_rscp, b inned_snr, bars, throughput_true\n FROM processedcell p JOIN CarrierAppNamepair c\n ON p.carrier = c.carrier AND p.app_name = c.app_name",  0x150uLL,  1);
    swift_task_switch(MediaMLPlugin.getProcessedCellDataFromDB(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.getProcessedCellDataFromDB()()
{
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[2] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)( v4,  v3,  (void (*)(void))closure #2 in MediaMLPlugin.getProcessedCellDataFromDB());
  v0[13] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getProcessedCellDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getProcessedCellDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[10];
  v0[2] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[6] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getProcessedCellDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getProcessedCellDataFromDB()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v119 = 0LL;
  uint64_t v118 = 0LL;
  unint64_t v87 = &v117;
  uint64_t v117 = 0LL;
  unint64_t v88 = &v116;
  uint64_t v116 = 0LL;
  uint32_t v89 = &v115;
  uint64_t v115 = 0LL;
  os_log_type_t v90 = &v114;
  uint64_t v114 = 0LL;
  uint64_t v91 = &v113;
  uint64_t v113 = 0LL;
  uint64_t v92 = &v112;
  uint64_t v112 = 0LL;
  uint64_t v93 = &v111;
  uint64_t v111 = 0LL;
  uint64_t v94 = &v110;
  uint64_t v110 = 0LL;
  uint64_t v95 = &v109;
  uint64_t v109 = 0LL;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v69 = *(void *)(v68 - 8);
  unint64_t v70 = (*(void *)(v69 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v68);
  uint64_t v71 = (char *)&v17 - v70;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v73 = *(void *)(v72 - 8);
  unint64_t v74 = (*(void *)(v73 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v72);
  uint64_t v75 = (char *)&v17 - v74;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v77 = *(void *)(v76 - 8);
  unint64_t v78 = (*(void *)(v77 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v76);
  uint64_t v79 = (char *)&v17 - v78;
  uint64_t v86 = 0LL;
  uint64_t v80 = type metadata accessor for DataFrame(0LL);
  uint64_t v81 = *(void *)(v80 - 8);
  unint64_t v82 = (*(void *)(v81 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v86);
  unint64_t v83 = (char *)&v17 - v82;
  uint64_t v119 = (char *)&v17 - v82;
  uint64_t v118 = a1;
  uint64_t v84 = &type metadata for String;
  uint64_t v117 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v116 = _allocateUninitializedArray<A>(_:)(v86, v84);
  uint64_t v85 = &type metadata for Int;
  uint64_t v115 = _allocateUninitializedArray<A>(_:)(v86, &type metadata for Int);
  uint64_t v114 = _allocateUninitializedArray<A>(_:)(v86, v85);
  uint64_t v113 = _allocateUninitializedArray<A>(_:)(v86, v85);
  uint64_t v112 = _allocateUninitializedArray<A>(_:)(v86, v85);
  uint64_t v111 = _allocateUninitializedArray<A>(_:)(v86, v85);
  uint64_t v110 = _allocateUninitializedArray<A>(_:)(v86, v85);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v86, &type metadata for Double);
  uint64_t v5 = v96;
  uint64_t v109 = v4;
  void v99[2] = v87;
  v99[3] = v88;
  v99[4] = v89;
  v99[5] = v90;
  v99[6] = v91;
  v99[7] = v92;
  v99[8] = v93;
  v99[9] = v94;
  v99[10] = v95;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), void *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getProcessedCellDataFromDB(),  v99);
  uint64_t v97 = v5;
  uint64_t v98 = v5;
  if (v5)
  {
    uint64_t v17 = v98;
    outlined destroy of [Double](&v109);
    outlined destroy of [Int](&v110);
    outlined destroy of [Int](&v111);
    outlined destroy of [Int](&v112);
    outlined destroy of [Int](&v113);
    outlined destroy of [Int](&v114);
    outlined destroy of [Int](&v115);
    outlined destroy of [String](&v116);
    uint64_t result = &v117;
    outlined destroy of [String](&v117);
  }

  else
  {
    DataFrame.init()(v6);
    uint64_t v7 = kMediaML_carrier.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
    object = v7->_object;
    swift_bridgeObjectRetain();
    uint64_t v66 = &v117;
    uint64_t v18 = v117;
    swift_bridgeObjectRetain();
    uint64_t v20 = &v108;
    uint64_t v108 = v18;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v26 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v27 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v20);
    DataFrame.append<A>(column:)(v79, v27);
    uint64_t v28 = *(void (**)(char *, uint64_t))(v77 + 8);
    v28(v79, v76);
    uint64_t v8 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t v22 = v8->_countAndFlagsBits;
    uint64_t v24 = v8->_object;
    swift_bridgeObjectRetain();
    uint64_t v65 = &v116;
    uint64_t v23 = v116;
    swift_bridgeObjectRetain();
    uint64_t v107 = v23;
    Column.init<A>(name:contents:)(v22, v24, &v107);
    DataFrame.append<A>(column:)(v79, v27);
    v28(v79, v76);
    uint64_t v9 = kMediaML_binnedRssi.unsafeMutableAddressor();
    uint64_t v32 = v9->_countAndFlagsBits;
    char v30 = v9->_object;
    swift_bridgeObjectRetain();
    uint64_t v64 = &v115;
    uint64_t v29 = v115;
    swift_bridgeObjectRetain();
    MediaMLPlugin::SQLError v31 = &v106;
    uint64_t v106 = v29;
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v49 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v50 = &type metadata for Int;
    Column.init<A>(name:contents:)(v32, v30, v31);
    DataFrame.append<A>(column:)(v75, v50);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v73 + 8);
    v51(v75, v72);
    uint64_t v10 = kMediaML_binnedRsrp.unsafeMutableAddressor();
    uint64_t v33 = v10->_countAndFlagsBits;
    uint64_t v35 = v10->_object;
    swift_bridgeObjectRetain();
    uint64_t v63 = &v114;
    uint64_t v34 = v114;
    swift_bridgeObjectRetain();
    uint64_t v105 = v34;
    Column.init<A>(name:contents:)(v33, v35, &v105);
    DataFrame.append<A>(column:)(v75, v50);
    v51(v75, v72);
    uint64_t v11 = kMediaML_binnedRsrq.unsafeMutableAddressor();
    uint64_t v36 = v11->_countAndFlagsBits;
    uint64_t v38 = v11->_object;
    swift_bridgeObjectRetain();
    uint64_t v62 = &v113;
    uint64_t v37 = v113;
    swift_bridgeObjectRetain();
    uint64_t v104 = v37;
    Column.init<A>(name:contents:)(v36, v38, &v104);
    DataFrame.append<A>(column:)(v75, v50);
    v51(v75, v72);
    MediaMLPlugin::SQLError v12 = kMediaML_binnedRscp.unsafeMutableAddressor();
    uint64_t v39 = v12->_countAndFlagsBits;
    Swift::String v41 = v12->_object;
    swift_bridgeObjectRetain();
    uint64_t v61 = &v112;
    uint64_t v40 = v112;
    swift_bridgeObjectRetain();
    uint64_t v103 = v40;
    Column.init<A>(name:contents:)(v39, v41, &v103);
    DataFrame.append<A>(column:)(v75, v50);
    v51(v75, v72);
    uint64_t v13 = kMediaML_binnedSnr.unsafeMutableAddressor();
    uint64_t v42 = v13->_countAndFlagsBits;
    int v44 = v13->_object;
    swift_bridgeObjectRetain();
    uint64_t v60 = &v111;
    uint64_t v43 = v111;
    swift_bridgeObjectRetain();
    uint64_t v102 = v43;
    Column.init<A>(name:contents:)(v42, v44, &v102);
    DataFrame.append<A>(column:)(v75, v50);
    v51(v75, v72);
    uint64_t v14 = kMediaML_bars.unsafeMutableAddressor();
    uint64_t v45 = v14->_countAndFlagsBits;
    uint64_t v47 = v14->_object;
    swift_bridgeObjectRetain();
    uint64_t v59 = &v110;
    uint64_t v46 = v110;
    swift_bridgeObjectRetain();
    uint64_t v101 = v46;
    Column.init<A>(name:contents:)(v45, v47, &v101);
    DataFrame.append<A>(column:)(v75, v50);
    v51(v75, v72);
    uint64_t v15 = kMediaML_throughputTrue.unsafeMutableAddressor();
    uint64_t v56 = v15->_countAndFlagsBits;
    uint64_t v53 = v15->_object;
    swift_bridgeObjectRetain();
    uint64_t v58 = &v109;
    uint64_t v52 = v109;
    swift_bridgeObjectRetain();
    uint64_t v54 = &v100;
    uint64_t v100 = v52;
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v57 = &type metadata for Double;
    Column.init<A>(name:contents:)(v56, v53, v54);
    DataFrame.append<A>(column:)(v71, v57);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v68);
    (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v67, v83, v80);
    outlined destroy of [Double](v58);
    outlined destroy of [Int](v59);
    outlined destroy of [Int](v60);
    outlined destroy of [Int](v61);
    outlined destroy of [Int](v62);
    outlined destroy of [Int](v63);
    outlined destroy of [Int](v64);
    outlined destroy of [String](v65);
    uint64_t result = v66;
    outlined destroy of [String](v66);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getProcessedCellDataFromDB()(uint64_t a1)
{
  if (v19)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v18)
    {
      SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(3LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(4LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(5LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(6LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(7LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(8LL, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      specialized Array.append(_:)();
      uint64_t v8 = specialized Array.append(_:)();
      specialized Array.append(_:)(v8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appName not of type String", 0x1AuLL, 1);
      MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 code = v21.code;
      uint64_t countAndFlagsBits = v21.desc.value._countAndFlagsBits;
      object = v21.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v12 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = code;
      *(void *)(v7 + 8) = countAndFlagsBits;
      *(void *)(v7 + 16) = object;
      swift_willThrow(code);
      swift_bridgeObjectRelease();
      return v12;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("carrier not of type String", 0x1AuLL, 1);
    MediaMLPlugin::SQLError v20 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v15 = v20.code;
    uint64_t desc_8 = v20.desc.value._countAndFlagsBits;
    uint64_t v14 = v20.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v15;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v14;
    swift_willThrow(v15);
    return v16;
  }

uint64_t MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 1864) = v2;
  *(void *)(v3 + 1856) = a2;
  *(void *)(v3 + 1848) = a1;
  *(void *)(v3 + 1312) = v3;
  *(void *)(v3 + 1320) = 0LL;
  *(void *)(v3 + 1328) = 0LL;
  *(void *)(v3 + 1344) = 0LL;
  *(void *)(v3 + 1400) = 0LL;
  *(void *)(v3 + 1408) = 0LL;
  *(void *)(v3 + 1416) = 0LL;
  *(void *)(v3 + 1424) = 0LL;
  *(void *)(v3 + 1432) = 0LL;
  *(void *)(v3 + 1440) = 0LL;
  *(void *)(v3 + 1448) = 0LL;
  *(void *)(v3 + 1456) = 0LL;
  *(void *)(v3 + 1464) = 0LL;
  *(void *)(v3 + 1472) = 0LL;
  *(void *)(v3 + 1480) = 0LL;
  *(void *)(v3 + 1488) = 0LL;
  *(void *)(v3 + 1504) = 0LL;
  *(void *)(v3 + 1520) = 0LL;
  *(void *)(v3 + 1552) = 0LL;
  *(void *)(v3 + 1136) = 0LL;
  *(void *)(v3 + 1144) = 0LL;
  *(void *)(v3 + 1152) = 0LL;
  *(_BYTE *)(v3 + 1160) = 0;
  *(void *)(v3 + 1560) = 0LL;
  *(void *)(v3 + 1584) = 0LL;
  *(void *)(v3 + 1608) = 0LL;
  *(void *)(v3 + 1632) = 0LL;
  *(void *)(v3 + 1656) = 0LL;
  *(void *)(v3 + 1680) = 0LL;
  *(void *)(v3 + 1704) = 0LL;
  *(void *)(v3 + 1728) = 0LL;
  *(void *)(v3 + 1184) = 0LL;
  *(void *)(v3 + 1192) = 0LL;
  *(void *)(v3 + 1200) = 0LL;
  *(void *)(v3 + 1208) = 0LL;
  *(void *)(v3 + 1216) = 0LL;
  *(void *)(v3 + 1224) = 0LL;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 1872) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 1880) = v5;
  uint64_t v16 = *(void *)(v5 + 64);
  *(void *)(v3 + 1888) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1896) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1904) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1912) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DataFrame.Slice(0LL);
  *(void *)(v3 + 1920) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 1928) = v7;
  uint64_t v17 = *(void *)(v7 + 64);
  *(void *)(v3 + 1936) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1944) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AnyColumnSlice>);
  *(void *)(v3 + 1952) = v8;
  uint64_t v18 = *(void *)(*(void *)(v8 - 8) + 64LL);
  *(void *)(v3 + 1960) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1968) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AnyColumn(0LL);
  *(void *)(v3 + 1976) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v3 + 1984) = v10;
  uint64_t v19 = *(void *)(v10 + 64);
  *(void *)(v3 + 1992) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2000) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2008) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2016) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2024) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2032) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2040) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2048) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2056) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2064) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2072) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AnyColumnSlice(0LL);
  *(void *)(v3 + 2080) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v3 + 2088) = v12;
  uint64_t v20 = *(void *)(v12 + 64);
  *(void *)(v3 + 2096) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2104) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2112) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DataFrame(0LL);
  *(void *)(v3 + 2120) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v3 + 2128) = v14;
  uint64_t v21 = *(void *)(v14 + 64);
  *(void *)(v3 + 2136) = v21;
  *(void *)(v3 + 2144) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2152) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2160) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2168) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2176) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2184) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2192) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2200) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2208) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 2216) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v3 + 1320) = a2;
  *(void *)(v3 + 1328) = v2;
  return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), 0LL);
}

void MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  Swift::String v1 = *(void **)(v0 + 1864);
  *(void *)(v0 + 1312) = v0;
  uint64_t v311 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:),  0LL,  v311,  v2,  v2);
  swift_release(v311);
  uint64_t v309 = *(void *)(v310 + 1336);
  *(void *)(v310 + 2224) = v309;
  if (!v309)
  {
    Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v314 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v46);
    unsigned __int32 code = v314.code;
    uint64_t desc_8 = v314.desc.value._countAndFlagsBits;
    object = v314.desc.value._object;
    unint64_t v47 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v47, 0LL, 0LL);
    *(_DWORD *)uint64_t v48 = code;
    *(void *)(v48 + 8) = desc_8;
    *(void *)(v48 + 16) = object;
    swift_willThrow(code);
LABEL_84:
    uint64_t v49 = *(void *)(v310 + 2208);
    uint64_t v50 = *(void *)(v310 + 2200);
    uint64_t v51 = *(void *)(v310 + 2192);
    uint64_t v52 = *(void *)(v310 + 2184);
    uint64_t v53 = *(void *)(v310 + 2176);
    uint64_t v54 = *(void *)(v310 + 2168);
    uint64_t v55 = *(void *)(v310 + 2160);
    uint64_t v56 = *(void *)(v310 + 2152);
    uint64_t v57 = *(void *)(v310 + 2144);
    uint64_t v58 = *(void *)(v310 + 2112);
    uint64_t v59 = *(void *)(v310 + 2104);
    uint64_t v60 = *(void *)(v310 + 2096);
    uint64_t v61 = *(void *)(v310 + 2072);
    uint64_t v62 = *(void *)(v310 + 2064);
    uint64_t v63 = *(void *)(v310 + 2056);
    uint64_t v64 = *(void *)(v310 + 2048);
    uint64_t v65 = *(void *)(v310 + 2040);
    uint64_t v66 = *(void *)(v310 + 2032);
    uint64_t v67 = *(void *)(v310 + 2024);
    uint64_t v68 = *(void *)(v310 + 2016);
    uint64_t v69 = *(void *)(v310 + 2008);
    uint64_t v70 = *(void *)(v310 + 2000);
    uint64_t v71 = *(void *)(v310 + 1992);
    uint64_t v72 = *(void *)(v310 + 1968);
    uint64_t v73 = *(void *)(v310 + 1960);
    uint64_t v74 = *(void *)(v310 + 1944);
    uint64_t v75 = *(void *)(v310 + 1936);
    uint64_t v76 = *(void *)(v310 + 1912);
    uint64_t v77 = *(void *)(v310 + 1904);
    uint64_t v78 = *(void *)(v310 + 1896);
    uint64_t v79 = *(void *)(v310 + 1888);
    swift_task_dealloc(*(void *)(v310 + 2216));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    (*(void (**)(void))(*(void *)(v310 + 1312) + 8LL))();
    return;
  }

  uint64_t v304 = *(void *)(v310 + 2216);
  uint64_t v303 = *(void *)(v310 + 2128);
  uint64_t v306 = *(void *)(v310 + 2120);
  uint64_t v305 = *(void *)(v310 + 1856);
  *(void *)(v310 + 1344) = v309;
  Swift::String v302 = *kMediaML_rssi.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::Bool v308 = DataFrame.containsColumn(_:)(v302);
  swift_bridgeObjectRelease();
  uint64_t v307 = *(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 16);
  *(void *)(v310 + 2232) = v307;
  v307(v304, v305, v306);
  if (v308)
  {
    Swift::String v299 = *kMediaML_throughputTrue.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v300 = DataFrame.containsColumn(_:)(v299);
    swift_bridgeObjectRelease();
    Swift::Bool v301 = v300;
  }

  else
  {
    Swift::Bool v301 = 0;
  }

  uint64_t v3 = *(void *)(v310 + 2216);
  uint64_t v296 = *(void *)(v310 + 2208);
  uint64_t v298 = *(void *)(v310 + 2120);
  uint64_t v297 = *(void *)(v310 + 1856);
  uint64_t v295 = *(void (**)(uint64_t))(*(void *)(v310 + 2128) + 8LL);
  *(void *)(v310 + 2240) = v295;
  v295(v3);
  v307(v296, v297, v298);
  if (v301)
  {
    Swift::String v292 = *kMediaML_noise.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v293 = DataFrame.containsColumn(_:)(v292);
    swift_bridgeObjectRelease();
    Swift::Bool v294 = v293;
  }

  else
  {
    Swift::Bool v294 = 0;
  }

  uint64_t v289 = *(void *)(v310 + 2200);
  uint64_t v291 = *(void *)(v310 + 2120);
  uint64_t v290 = *(void *)(v310 + 1856);
  v295(*(void *)(v310 + 2208));
  v307(v289, v290, v291);
  if (v294)
  {
    Swift::String v286 = *kMediaML_txRate.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v287 = DataFrame.containsColumn(_:)(v286);
    swift_bridgeObjectRelease();
    Swift::Bool v288 = v287;
  }

  else
  {
    Swift::Bool v288 = 0;
  }

  uint64_t v283 = *(void *)(v310 + 2192);
  uint64_t v285 = *(void *)(v310 + 2120);
  uint64_t v284 = *(void *)(v310 + 1856);
  v295(*(void *)(v310 + 2200));
  v307(v283, v284, v285);
  if (v288)
  {
    Swift::String v280 = *kMediaML_rxRate.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v281 = DataFrame.containsColumn(_:)(v280);
    swift_bridgeObjectRelease();
    Swift::Bool v282 = v281;
  }

  else
  {
    Swift::Bool v282 = 0;
  }

  uint64_t v277 = *(void *)(v310 + 2184);
  uint64_t v279 = *(void *)(v310 + 2120);
  uint64_t v278 = *(void *)(v310 + 1856);
  v295(*(void *)(v310 + 2192));
  v307(v277, v278, v279);
  if (v282)
  {
    Swift::String v274 = *kMediaML_dayOfWeek.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v275 = DataFrame.containsColumn(_:)(v274);
    swift_bridgeObjectRelease();
    Swift::Bool v276 = v275;
  }

  else
  {
    Swift::Bool v276 = 0;
  }

  uint64_t v271 = *(void *)(v310 + 2176);
  uint64_t v273 = *(void *)(v310 + 2120);
  uint64_t v272 = *(void *)(v310 + 1856);
  v295(*(void *)(v310 + 2184));
  v307(v271, v272, v273);
  if (v276)
  {
    Swift::String v268 = *kMediaML_hourOfDay.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v269 = DataFrame.containsColumn(_:)(v268);
    swift_bridgeObjectRelease();
    Swift::Bool v270 = v269;
  }

  else
  {
    Swift::Bool v270 = 0;
  }

  uint64_t v265 = *(void *)(v310 + 2168);
  uint64_t v267 = *(void *)(v310 + 2120);
  uint64_t v266 = *(void *)(v310 + 1856);
  v295(*(void *)(v310 + 2176));
  v307(v265, v266, v267);
  if (!v270)
  {
    ((void (*)(void, void))v295)(*(void *)(v310 + 2168), *(void *)(v310 + 2120));
LABEL_80:
    uint64_t v39 = *(void *)(v310 + 1888);
    uint64_t v93 = *(void *)(v310 + 1880);
    uint64_t v94 = *(void *)(v310 + 1872);
    uint64_t v40 = MediaMLPlugin.logger.unsafeMutableAddressor();
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 16))(v39, v40, v94);
    uint64_t v99 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v98 = static os_log_type_t.error.getter();
    *(void *)(v310 + 1352) = 2LL;
    unint64_t v95 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v96 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v42 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v310 + 1164),  v310 + 1352,  &type metadata for UInt32,  &type metadata for Int,  v95,  v96,  v42);
    uint32_t v97 = *(_DWORD *)(v310 + 1164);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v100 = _allocateUninitializedArray<A>(_:)(0LL, v43);
    if (os_log_type_enabled(v99, v98))
    {
      unint64_t v88 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v89 = createStorage<A>(capacity:type:)(0LL, v87, v87);
      uint64_t v90 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v310 + 1360) = v88;
      *(void *)(v310 + 1368) = v89;
      *(void *)(v310 + 1376) = v90;
      serialize(_:at:)(0LL, (_BYTE **)(v310 + 1360));
      serialize(_:at:)(0LL, (_BYTE **)(v310 + 1360));
      *(void *)(v310 + 1384) = v100;
      uint64_t v91 = (void *)swift_task_alloc(48LL);
      v91[2] = v310 + 1360;
      v91[3] = v310 + 1368;
      void v91[4] = v310 + 1376;
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      unint64_t v44 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v91, v92, v44);
      swift_task_dealloc(v91);
      _os_log_impl( (void *)&_mh_execute_header,  v99,  v98,  "getAndSavePreProcessedWifiData: DataFrame did not contain all required columns",  v88,  v97);
      destroyStorage<A>(_:count:)(v89, 0LL);
      destroyStorage<A>(_:count:)(v90, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_bridgeObjectRelease();
    uint64_t v84 = *(void *)(v310 + 1888);
    uint64_t v83 = *(void *)(v310 + 1880);
    uint64_t v85 = *(void *)(v310 + 1872);

    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v85);
    unint64_t v45 = lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
    uint64_t v86 = swift_allocError(&type metadata for PluginErrors, v45, 0LL, 0LL);
    swift_willThrow(v86);
    swift_release(v309);
    goto LABEL_84;
  }

  Swift::String v263 = *kMediaML_ssid.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::Bool v264 = DataFrame.containsColumn(_:)(v263);
  swift_bridgeObjectRelease();
  ((void (*)(void, void))v295)(*(void *)(v310 + 2168), *(void *)(v310 + 2120));
  if (!v264) {
    goto LABEL_80;
  }
  uint64_t v260 = *(void *)(v310 + 2112);
  uint64_t v254 = *(void *)(v310 + 2104);
  uint64_t v259 = *(void *)(v310 + 2088);
  uint64_t v262 = *(void *)(v310 + 2080);
  uint64_t v256 = *(void *)(v310 + 2072);
  uint64_t v255 = *(void *)(v310 + 1984);
  uint64_t v257 = *(void *)(v310 + 1976);
  Swift::Int v261 = *(void **)(v310 + 1968);
  uint64_t v4 = kMediaML_sessionID.unsafeMutableAddressor();
  uint64_t countAndFlagsBits = v4->_countAndFlagsBits;
  uint64_t v258 = v4->_object;
  swift_bridgeObjectRetain();
  uint64_t v5 = DataFrame.subscript.getter(countAndFlagsBits, v258);
  AnyColumn.distinct()(v5);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v255 + 8);
  *(void *)(v310 + 2248) = v6;
  v6(v256, v257);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v259 + 16);
  *(void *)(v310 + 2256) = v7;
  v7(v254, v260, v262);
  unint64_t v8 = lazy protocol witness table accessor for type AnyColumnSlice and conformance AnyColumnSlice();
  *(void *)(v310 + 2264) = v8;
  Collection<>.makeIterator()(v261, v262, v8);
LABEL_25:
  IndexingIterator.next()((void *)(v310 + 16), *(void *)(v310 + 1952));
  if (*(void *)(v310 + 40) == 1LL)
  {
    outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v310 + 1968));
    uint64_t v38 = (void *)swift_task_alloc(dword_100068C04);
    *(void *)(v310 + 2360) = v38;
    *uint64_t v38 = *(void *)(v310 + 1312);
    v38[1] = MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
    MediaMLPlugin.getProcessedWiFiDataFromDB()(*(void *)(v310 + 2144));
    return;
  }

  outlined init with take of Any?((_OWORD *)(v310 + 16), (_OWORD *)(v310 + 48));
  uint64_t v9 = kMediaML_sessionID.unsafeMutableAddressor();
  uint64_t v251 = v9->_countAndFlagsBits;
  uint64_t v250 = v9->_object;
  swift_bridgeObjectRetain();
  outlined init with copy of Any?(v310 + 48, v310 + 80);
  uint64_t v252 = swift_task_alloc(32LL);
  *(void *)(v252 + 16) = v310 + 80;
  DataFrame.filter<A>(on:_:_:)( v251,  v250,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:));
  uint64_t v248 = *(void *)(v310 + 2264);
  Swift::String v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(v310 + 2256);
  uint64_t v242 = *(void *)(v310 + 2104);
  uint64_t v245 = *(void *)(v310 + 2096);
  uint64_t v243 = *(void *)(v310 + 2088);
  uint64_t v249 = *(void *)(v310 + 2080);
  Swift::Bool v247 = *(void **)(v310 + 1960);
  swift_task_dealloc(v252);
  outlined destroy of Any?((void *)(v310 + 80));
  swift_bridgeObjectRelease();
  uint64_t v10 = kMediaML_ssid.unsafeMutableAddressor();
  uint64_t v241 = v10->_countAndFlagsBits;
  uint64_t v244 = v10->_object;
  swift_bridgeObjectRetain();
  uint64_t v11 = DataFrame.Slice.subscript.getter(v241, v244);
  AnyColumnSlice.distinct()(v11);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
  *(void *)(v310 + 2272) = v12;
  v12(v242, v249);
  swift_bridgeObjectRelease();
  v246(v242, v245, v249);
  Collection<>.makeIterator()(v247, v249, v248);
  while (1)
  {
    IndexingIterator.next()((void *)(v310 + 112), *(void *)(v310 + 1952));
    if (*(void *)(v310 + 136) == 1LL)
    {
      uint64_t v102 = *(void (**)(uint64_t, uint64_t))(v310 + 2272);
      uint64_t v103 = *(void *)(v310 + 2096);
      uint64_t v101 = *(void *)(v310 + 2080);
      uint64_t v105 = *(void *)(v310 + 1944);
      uint64_t v104 = *(void *)(v310 + 1928);
      uint64_t v106 = *(void *)(v310 + 1920);
      outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v310 + 1960));
      v102(v103, v101);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v105, v106);
      outlined destroy of Any?((void *)(v310 + 48));
      goto LABEL_25;
    }

    outlined init with take of Any?((_OWORD *)(v310 + 112), (_OWORD *)(v310 + 144));
    uint64_t v13 = kMediaML_ssid.unsafeMutableAddressor();
    uint64_t v239 = v13->_countAndFlagsBits;
    uint64_t v238 = v13->_object;
    swift_bridgeObjectRetain();
    outlined init with copy of Any?(v310 + 144, v310 + 176);
    uint64_t v240 = swift_task_alloc(32LL);
    *(void *)(v240 + 16) = v310 + 176;
    DataFrame.Slice.filter<A>(on:_:_:)( v239,  v238,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:));
    uint64_t v214 = *(void (**)(uint64_t, uint64_t, uint64_t))(v310 + 2232);
    uint64_t v213 = *(void *)(v310 + 2160);
    uint64_t v217 = *(void *)(v310 + 2152);
    uint64_t v216 = *(void *)(v310 + 2136);
    uint64_t v212 = *(void *)(v310 + 2128);
    uint64_t v218 = *(void *)(v310 + 2120);
    uint64_t v205 = *(void *)(v310 + 1936);
    uint64_t v206 = *(void *)(v310 + 1912);
    uint64_t v208 = *(void *)(v310 + 1880);
    uint64_t v209 = *(void *)(v310 + 1872);
    swift_task_dealloc(v240);
    outlined destroy of Any?((void *)(v310 + 176));
    swift_bridgeObjectRelease();
    DataFrame.init(_:)(v205);
    *(void *)(v310 + 1400) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
    *(void *)(v310 + 1408) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
    *(void *)(v310 + 1416) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
    *(void *)(v310 + 1424) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
    *(void *)(v310 + 1432) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
    *(void *)(v310 + 1440) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
    *(void *)(v310 + 1448) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
    *(void *)(v310 + 1456) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
    *(void *)(v310 + 1464) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
    uint64_t v14 = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
    *(void *)(v310 + 1472) = v14;
    *(void *)(v310 + 1480) = 0LL;
    uint64_t v207 = DataFrame.shape.getter(v14);
    *(void *)(v310 + 1488) = v207;
    uint64_t v15 = MediaMLPlugin.logger.unsafeMutableAddressor();
    Swift::String v210 = *(void (**)(uint64_t, uint64_t, uint64_t))(v208 + 16);
    v210(v206, v15, v209);
    v214(v217, v213, v218);
    int v215 = *(_DWORD *)(v212 + 80);
    unint64_t v211 = (v215 + 16LL) & ~(unint64_t)v215;
    uint64_t v224 = swift_allocObject(&unk_100065F20, v211 + v216, v215 | 7LL);
    uint64_t v219 = *(void (**)(unint64_t, uint64_t, uint64_t))(v212 + 32);
    v219(v224 + v211, v217, v218);
    v214(v217, v213, v218);
    uint64_t v226 = swift_allocObject(&unk_100065F48, v211 + v216, v215 | 7LL);
    uint64_t v16 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v219)(v226 + v211, v217, v218);
    oslog = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v237 = static os_log_type_t.debug.getter();
    *(void *)(v310 + 1496) = 22LL;
    unint64_t v220 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v221 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v222 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v310 + 2380),  v310 + 1496,  &type metadata for UInt32,  &type metadata for Int,  v220,  v221,  v222);
    uint32_t size = *(_DWORD *)(v310 + 2380);
    uint64_t v228 = swift_allocObject(&unk_100065F70, 17LL, 7LL);
    *(_BYTE *)(v228 + 16) = 0;
    uint64_t v229 = swift_allocObject(&unk_100065F98, 17LL, 7LL);
    *(_BYTE *)(v229 + 16) = 8;
    uint64_t v225 = swift_allocObject(&unk_100065FC0, 32LL, 7LL);
    *(void *)(v225 + 16) = partial apply for implicit closure #8 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
    *(void *)(v225 + 24) = v224;
    uint64_t v230 = swift_allocObject(&unk_100065FE8, 32LL, 7LL);
    *(void *)(v230 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v230 + 24) = v225;
    uint64_t v231 = swift_allocObject(&unk_100066010, 17LL, 7LL);
    *(_BYTE *)(v231 + 16) = 0;
    uint64_t v232 = swift_allocObject(&unk_100066038, 17LL, 7LL);
    *(_BYTE *)(v232 + 16) = 8;
    uint64_t v227 = swift_allocObject(&unk_100066060, 32LL, 7LL);
    *(void *)(v227 + 16) = partial apply for implicit closure #9 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
    *(void *)(v227 + 24) = v226;
    uint64_t v233 = swift_allocObject(&unk_100066088, 32LL, 7LL);
    *(void *)(v233 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v233 + 24) = v227;
    uint64_t v235 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)(6LL, v235);
    Swift::String v234 = v17;
    swift_retain(v228);
    *Swift::String v234 = closure #1 in OSLogArguments.append(_:)partial apply;
    v234[1] = v228;
    swift_retain(v229);
    v234[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v234[3] = v229;
    swift_retain(v230);
    v234[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v234[5] = v230;
    swift_retain(v231);
    v234[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v234[7] = v231;
    swift_retain(v232);
    v234[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v234[9] = v232;
    swift_retain(v233);
    v234[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v234[11] = v233;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v237))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v203 = createStorage<A>(capacity:type:)(0LL, v201, v201);
      uint64_t v204 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v310 + 1824) = buf;
      *(void *)(v310 + 1832) = v203;
      *(void *)(v310 + 1840) = v204;
      serialize(_:at:)(0LL, (_BYTE **)(v310 + 1824));
      serialize(_:at:)(2LL, (_BYTE **)(v310 + 1824));
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1304) = v228;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1304) = v229;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v310 + 1304) = v230;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1304) = v231;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1304) = v232;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      *(void *)(v310 + 1296) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v310 + 1304) = v233;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1296),  v310 + 1824,  v310 + 1832,  v310 + 1840);
      _os_log_impl((void *)&_mh_execute_header, oslog, v237, "Filtered dataframe shape=%ld,%ld", buf, size);
      destroyStorage<A>(_:count:)(v203, 0LL);
      destroyStorage<A>(_:count:)(v204, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_release(v228);
    swift_release(v229);
    swift_release(v230);
    swift_release(v231);
    swift_release(v232);
    swift_release(v233);
    uint64_t v198 = *(void *)(v310 + 1912);
    uint64_t v197 = *(void *)(v310 + 1880);
    uint64_t v199 = *(void *)(v310 + 1872);

    int v200 = *(void (**)(uint64_t, uint64_t))(v197 + 8);
    v200(v198, v199);
    while (*(void *)(v310 + 1480) < v207)
    {
      uint64_t v196 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v194 = *(void *)(v310 + 2064);
      uint64_t v195 = *(void *)(v310 + 1976);
      Swift::String v193 = *kMediaML_rssi.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v193._countAndFlagsBits, v193._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v196(v194, v195);
      if (!*(void *)(v310 + 552))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  492LL,  0);
        return;
      }

      os_log_type_t v192 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v190 = *(void *)(v310 + 2056);
      uint64_t v191 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 528, v310 + 496);
      swift_dynamicCast(v310 + 1768, v310 + 496, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v189 = *kMediaML_throughputTrue.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v189._countAndFlagsBits, v189._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v192(v190, v191);
      if (!*(void *)(v310 + 616))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  493LL,  0);
        return;
      }

      uint64_t v188 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v186 = *(void *)(v310 + 2048);
      uint64_t v187 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 592, v310 + 560);
      uint64_t v18 = swift_dynamicCast( v310 + 1776,  v310 + 560,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
      specialized Array.append(_:)(v18);
      swift_bridgeObjectRelease();
      Swift::String v185 = *kMediaML_noise.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v185._countAndFlagsBits, v185._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v188(v186, v187);
      if (!*(void *)(v310 + 680))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  494LL,  0);
        return;
      }

      uint64_t v184 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v182 = *(void *)(v310 + 2040);
      uint64_t v183 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 656, v310 + 624);
      swift_dynamicCast(v310 + 1784, v310 + 624, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v181 = *kMediaML_txRate.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v181._countAndFlagsBits, v181._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v184(v182, v183);
      if (!*(void *)(v310 + 744))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  495LL,  0);
        return;
      }

      uint64_t v180 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v178 = *(void *)(v310 + 2032);
      uint64_t v179 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 720, v310 + 688);
      uint64_t v19 = swift_dynamicCast( v310 + 1792,  v310 + 688,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
      specialized Array.append(_:)(v19);
      swift_bridgeObjectRelease();
      Swift::String v177 = *kMediaML_rxRate.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v177._countAndFlagsBits, v177._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v180(v178, v179);
      if (!*(void *)(v310 + 808))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  496LL,  0);
        return;
      }

      unint64_t v176 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v174 = *(void *)(v310 + 2024);
      uint64_t v175 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 784, v310 + 752);
      uint64_t v20 = swift_dynamicCast( v310 + 1800,  v310 + 752,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
      specialized Array.append(_:)(v20);
      swift_bridgeObjectRelease();
      Swift::String v173 = *kMediaML_dayOfWeek.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v173._countAndFlagsBits, v173._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v176(v174, v175);
      if (!*(void *)(v310 + 872))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  497LL,  0);
        return;
      }

      uint64_t v172 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v170 = *(void *)(v310 + 2016);
      uint64_t v171 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 848, v310 + 816);
      swift_dynamicCast(v310 + 1808, v310 + 816, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v169 = *kMediaML_hourOfDay.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v169._countAndFlagsBits, v169._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v172(v170, v171);
      if (!*(void *)(v310 + 936))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  498LL,  0);
        return;
      }

      uint64_t v168 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v166 = *(void *)(v310 + 2008);
      uint64_t v167 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 912, v310 + 880);
      swift_dynamicCast(v310 + 1816, v310 + 880, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v165 = *kMediaML_ssid.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v165._countAndFlagsBits, v165._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v168(v166, v167);
      if (!*(void *)(v310 + 1000))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  499LL,  0);
        return;
      }

      uint64_t v164 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v162 = *(void *)(v310 + 2000);
      uint64_t v163 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 976, v310 + 944);
      swift_dynamicCast(v310 + 1248, v310 + 944, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v161 = *kMediaML_appName.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v161._countAndFlagsBits, v161._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v164(v162, v163);
      if (!*(void *)(v310 + 1064))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  500LL,  0);
        return;
      }

      uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v310 + 2248);
      uint64_t v158 = *(void *)(v310 + 1992);
      uint64_t v159 = *(void *)(v310 + 1976);
      outlined init with take of Any(v310 + 1040, v310 + 1008);
      swift_dynamicCast(v310 + 1264, v310 + 1008, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      Swift::String v157 = *kMediaML_sessionID.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v157._countAndFlagsBits, v157._object);
      AnyColumn.subscript.getter(*(void *)(v310 + 1480));
      v160(v158, v159);
      if (!*(void *)(v310 + 1128))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  501LL,  0);
        return;
      }

      outlined init with take of Any(v310 + 1104, v310 + 1072);
      swift_dynamicCast(v310 + 1280, v310 + 1072, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      specialized Array.append(_:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(v310 + 1480);
      uint64_t v156 = v21 + 1;
      if (__OFADD__(v21, 1LL)) {
        goto LABEL_86;
      }
      *(void *)(v310 + 1480) = v156;
    }

    uint64_t v23 = *(void *)(v310 + 1904);
    uint64_t v139 = *(void *)(v310 + 1872);
    uint64_t v138 = *(void *)(v310 + 1400);
    swift_bridgeObjectRetain();
    uint64_t v137 = *(void *)(v310 + 1408);
    swift_bridgeObjectRetain();
    uint64_t v136 = *(void *)(v310 + 1416);
    swift_bridgeObjectRetain();
    uint64_t v135 = *(void *)(v310 + 1424);
    swift_bridgeObjectRetain();
    uint64_t v134 = *(void *)(v310 + 1432);
    swift_bridgeObjectRetain();
    uint64_t v133 = *(void *)(v310 + 1440);
    swift_bridgeObjectRetain();
    uint64_t v132 = *(void *)(v310 + 1448);
    swift_bridgeObjectRetain();
    uint64_t v131 = *(void *)(v310 + 1456);
    swift_bridgeObjectRetain();
    uint64_t v140 = preprocessData(rssiList:obrList:noiseList:txRateList:rxRateList:dowList:hourList:ssidList:)( v138,  v137,  v136,  v135,  v134,  v133,  v132,  v131);
    *(void *)(v310 + 2280) = v140;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v310 + 1504) = v140;
    uint64_t v24 = MediaMLPlugin.logger.unsafeMutableAddressor();
    v210(v23, v24, v139);
    outlined init with copy of Any?(v310 + 48, v310 + 208);
    uint64_t v143 = swift_allocObject(&unk_1000660B0, 48LL, 7LL);
    outlined init with take of Any?((_OWORD *)(v310 + 208), (_OWORD *)(v143 + 16));
    swift_bridgeObjectRetain();
    uint64_t v141 = swift_allocObject(&unk_1000660D8, 24LL, 7LL);
    *(void *)(v141 + 16) = v140;
    swift_retain(v141);
    uint64_t v145 = swift_allocObject(&unk_100066100, 32LL, 7LL);
    *(void *)(v145 + 16) = partial apply for implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
    *(void *)(v145 + 24) = v141;
    uint64_t v25 = swift_release(v141);
    log = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v155 = static os_log_type_t.debug.getter();
    *(void *)(v310 + 1512) = 22LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v310 + 2384),  v310 + 1512,  &type metadata for UInt32,  &type metadata for Int,  v220,  v221,  v222);
    uint32_t v142 = *(_DWORD *)(v310 + 2384);
    uint64_t v147 = swift_allocObject(&unk_100066128, 17LL, 7LL);
    *(_BYTE *)(v147 + 16) = 32;
    uint64_t v148 = swift_allocObject(&unk_100066150, 17LL, 7LL);
    *(_BYTE *)(v148 + 16) = 8;
    uint64_t v144 = swift_allocObject(&unk_100066178, 32LL, 7LL);
    *(void *)(v144 + 16) = partial apply for implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
    *(void *)(v144 + 24) = v143;
    uint64_t v149 = swift_allocObject(&unk_1000661A0, 32LL, 7LL);
    *(void *)(v149 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0;
    *(void *)(v149 + 24) = v144;
    uint64_t v150 = swift_allocObject(&unk_1000661C8, 17LL, 7LL);
    *(_BYTE *)(v150 + 16) = 32;
    uint64_t v151 = swift_allocObject(&unk_1000661F0, 17LL, 7LL);
    *(_BYTE *)(v151 + 16) = 8;
    uint64_t v146 = swift_allocObject(&unk_100066218, 32LL, 7LL);
    *(void *)(v146 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v146 + 24) = v145;
    uint64_t v152 = swift_allocObject(&unk_100066240, 32LL, 7LL);
    *(void *)(v152 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v152 + 24) = v146;
    _allocateUninitializedArray<A>(_:)(6LL, v235);
    uint64_t v153 = v26;
    swift_retain(v147);
    *uint64_t v153 = closure #1 in OSLogArguments.append(_:)partial apply;
    v153[1] = v147;
    swift_retain(v148);
    v153[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v153[3] = v148;
    swift_retain(v149);
    v153[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v153[5] = v149;
    swift_retain(v150);
    v153[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v153[7] = v150;
    swift_retain(v151);
    v153[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v153[9] = v151;
    swift_retain(v152);
    v153[10] = closure #1 in OSLogArguments.append(_:)partial apply;
    v153[11] = v152;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v155))
    {
      uint64_t v128 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v129 = createStorage<A>(capacity:type:)(0LL, v127, v127);
      uint64_t v130 = createStorage<A>(capacity:type:)( 2LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v310 + 1744) = v128;
      *(void *)(v310 + 1752) = v129;
      *(void *)(v310 + 1760) = v130;
      serialize(_:at:)(2LL, (_BYTE **)(v310 + 1744));
      serialize(_:at:)(2LL, (_BYTE **)(v310 + 1744));
      *(void *)(v310 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1240) = v147;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      *(void *)(v310 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1240) = v148;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      *(void *)(v310 + 1232) = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      *(void *)(v310 + 1240) = v149;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      *(void *)(v310 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1240) = v150;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      *(void *)(v310 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1240) = v151;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      *(void *)(v310 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v310 + 1240) = v152;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v310 + 1232),  v310 + 1744,  v310 + 1752,  v310 + 1760);
      _os_log_impl((void *)&_mh_execute_header, log, v155, "processedData for session=%s %s", v128, v142);
      destroyStorage<A>(_:count:)(v129, 0LL);
      destroyStorage<A>(_:count:)(v130, 2LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_release(v147);
    swift_release(v148);
    swift_release(v149);
    swift_release(v150);
    swift_release(v151);
    swift_release(v152);
    uint64_t v124 = *(void *)(v310 + 1904);
    uint64_t v125 = *(void *)(v310 + 1872);

    v200(v124, v125);
    uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    *(void *)(v310 + 2288) = v126;
    uint64_t v27 = Array.count.getter(v140, v126);
    *(void *)(v310 + 1520) = v27;
    if (__OFSUB__(v27, 1LL)) {
      break;
    }
    *(void *)(v310 + 1536) = v27 - 1;
    *(void *)(v310 + 1544) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
    min<A>(_:_:)(v310 + 1536, v310 + 1544, &type metadata for Int, &protocol witness table for Int);
    uint64_t v123 = *(void *)(v310 + 1528);
    *(void *)(v310 + 1552) = v123;
    if (Array.count.getter(v140, v126) > 0)
    {
      if (v123 < 0)
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
        return;
      }

      uint64_t v29 = specialized Collection<>.makeIterator()(0LL, v123);
      *(void *)(v310 + 1136) = v29;
      *(void *)(v310 + 1144) = v30;
      *(void *)(v310 + 1152) = v31;
      *(_BYTE *)(v310 + 1160) = v32 & 1;
      *(void *)(v310 + 2296) = 0LL;
      uint64_t v33 = specialized IndexingIterator.next()(v29);
      uint64_t v122 = v33;
      if ((v34 & 1) == 0)
      {
        *(void *)(v310 + 1560) = v33;
        Array.subscript.getter(v33);
        Array.subscript.getter(0LL);
        swift_bridgeObjectRelease();
        swift_dynamicCast(v310 + 1576, v310 + 240, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
        uint64_t v120 = *(void *)(v310 + 1576);
        *(void *)(v310 + 1584) = v120;
        Array.subscript.getter(v122);
        Array.subscript.getter(1LL);
        swift_bridgeObjectRelease();
        swift_dynamicCast(v310 + 1600, v310 + 272, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
        double v121 = *(double *)(v310 + 1600);
        if (((*(void *)&v121 >> 52) & 0x7FFLL) == 0x7FF)
        {
LABEL_68:
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because it is either infinite or NaN",  76LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14133LL,  0);
          return;
        }

        if (v121 <= -9.22337204e18)
        {
LABEL_70:
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be less than Int.min",  85LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14136LL,  0);
          return;
        }

        if (v121 < 9.22337204e18)
        {
          *(void *)(v310 + 1608) = (uint64_t)v121;
          Array.subscript.getter(v122);
          Array.subscript.getter(2LL);
          swift_bridgeObjectRelease();
          swift_dynamicCast(v310 + 1624, v310 + 304, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
          double v119 = *(double *)(v310 + 1624);
          if (((*(void *)&v119 >> 52) & 0x7FFLL) == 0x7FF) {
            goto LABEL_68;
          }
          if (v119 <= -9.22337204e18) {
            goto LABEL_70;
          }
          if (v119 < 9.22337204e18)
          {
            uint64_t v118 = *(void *)(v310 + 2224);
            *(void *)(v310 + 1632) = (uint64_t)v119;
            Array.subscript.getter(v122);
            Array.subscript.getter(3LL);
            swift_bridgeObjectRelease();
            swift_dynamicCast( v310 + 1648,  v310 + 336,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
            uint64_t v116 = *(void *)(v310 + 1648);
            *(void *)(v310 + 1656) = v116;
            Array.subscript.getter(v122);
            Array.subscript.getter(4LL);
            swift_bridgeObjectRelease();
            swift_dynamicCast( v310 + 1672,  v310 + 368,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
            uint64_t v117 = *(void *)(v310 + 1672);
            *(void *)(v310 + 1680) = v117;
            Array.subscript.getter(v122);
            Array.subscript.getter(5LL);
            swift_bridgeObjectRelease();
            swift_dynamicCast(v310 + 1696, v310 + 400, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
            uint64_t v115 = *(void *)(v310 + 1696);
            *(void *)(v310 + 1704) = v115;
            Array.subscript.getter(v122);
            Array.subscript.getter(6LL);
            swift_bridgeObjectRelease();
            swift_dynamicCast(v310 + 1720, v310 + 432, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
            uint64_t v114 = *(void *)(v310 + 1720);
            *(void *)(v310 + 1728) = v114;
            Array.subscript.getter(v122);
            Array.subscript.getter(7LL);
            swift_bridgeObjectRelease();
            swift_dynamicCast( v310 + 1168,  v310 + 464,  (char *)&type metadata for Any + 8,  &type metadata for String,  7LL);
            uint64_t v112 = *(void *)(v310 + 1168);
            uint64_t v113 = *(void *)(v310 + 1176);
            *(void *)(v310 + 2304) = v113;
            *(void *)(v310 + 1184) = v112;
            *(void *)(v310 + 1192) = v113;
            uint64_t v312 = specialized Array.subscript.getter(0LL, *(void *)(v310 + 1464));
            uint64_t v111 = v35;
            *(void *)(v310 + 2312) = v35;
            *(void *)(v310 + 1200) = v312;
            *(void *)(v310 + 1208) = v35;
            uint64_t v313 = specialized Array.subscript.getter(0LL, *(void *)(v310 + 1472));
            uint64_t v110 = v36;
            *(void *)(v310 + 2320) = v36;
            *(void *)(v310 + 1216) = v313;
            *(void *)(v310 + 1224) = v36;
            *(Swift::String *)(v310 + 2328) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO processedwifi (session_id, app_name, ssid, hour, dow, rssi, noise, tx_rate, rx_rate, throughput_true) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  0x97uLL,  1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v37 = (void *)swift_task_alloc(128LL);
            *(void *)(v310 + 2344) = v37;
            void v37[2] = v313;
            v37[3] = v110;
            v37[4] = v312;
            v37[5] = v111;
            v37[6] = v112;
            v37[7] = v113;
            v37[8] = v114;
            v37[9] = v115;
            v37[10] = (uint64_t)v121;
            v37[11] = (uint64_t)v119;
            v37[12] = v116;
            v37[13] = v117;
            v37[14] = v120;
            swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), v118);
            return;
          }
        }

        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be greater than Int.max",  88LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14139LL,  0);
        return;
      }
    }

    uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v310 + 2240);
    uint64_t v109 = *(void *)(v310 + 2160);
    uint64_t v107 = *(void *)(v310 + 2120);
    swift_bridgeObjectRelease();
    outlined destroy of [String]((void *)(v310 + 1472));
    outlined destroy of [String]((void *)(v310 + 1464));
    outlined destroy of [String]((void *)(v310 + 1456));
    outlined destroy of [Int]((void *)(v310 + 1448));
    outlined destroy of [Int]((void *)(v310 + 1440));
    outlined destroy of [Double]((void *)(v310 + 1432));
    outlined destroy of [Double]((void *)(v310 + 1424));
    outlined destroy of [Int]((void *)(v310 + 1416));
    outlined destroy of [Double]((void *)(v310 + 1408));
    outlined destroy of [Int]((void *)(v310 + 1400));
    v108(v109, v107);
    outlined destroy of Any?((void *)(v310 + 144));
  }

  __break(1u);
LABEL_86:
  __break(1u);
}

uint64_t MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  uint64_t v1 = v0[292];
  uint64_t v2 = v0[291];
  uint64_t v3 = v0[287];
  v0[164] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #4 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:));
  v0[294] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 2344));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String *v2;
  uint64_t result;
  Swift::String *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  Swift::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint32_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  os_log_s *log;
  os_log_type_t v84;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  Swift::String v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  Swift::String v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  Swift::String v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  Swift::String v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  uint64_t v130;
  uint8_t *buf;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(unint64_t, uint64_t, uint64_t);
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint32_t size;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  os_log_s *oslog;
  os_log_type_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t, uint64_t);
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t j;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v182;
  uint64_t v183;
  uint64_t i;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  *(void *)(v0 + 1312) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRelease();
  for (i = *(void *)(v0 + 2352); ; i = 0LL)
  {
    *(void *)(v183 + 2296) = i;
    Swift::String v185 = specialized IndexingIterator.next()(v1);
    if ((v25 & 1) == 0) {
      break;
    }
    uint64_t v39 = i;
    while (2)
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v183 + 2240);
      uint64_t v38 = *(void *)(v183 + 2160);
      uint64_t v36 = *(void *)(v183 + 2120);
      swift_bridgeObjectRelease();
      outlined destroy of [String]((void *)(v183 + 1472));
      outlined destroy of [String]((void *)(v183 + 1464));
      outlined destroy of [String]((void *)(v183 + 1456));
      outlined destroy of [Int]((void *)(v183 + 1448));
      outlined destroy of [Int]((void *)(v183 + 1440));
      outlined destroy of [Double]((void *)(v183 + 1432));
      outlined destroy of [Double]((void *)(v183 + 1424));
      outlined destroy of [Int]((void *)(v183 + 1416));
      outlined destroy of [Double]((void *)(v183 + 1408));
      outlined destroy of [Int]((void *)(v183 + 1400));
      v37(v38, v36);
      outlined destroy of Any?((void *)(v183 + 144));
      for (j = v39; ; j = 0LL)
      {
        IndexingIterator.next()((void *)(v183 + 112), *(void *)(v183 + 1952));
        if (*(void *)(v183 + 136) != 1LL) {
          break;
        }
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v183 + 2272);
        char v32 = *(void *)(v183 + 2096);
        uint64_t v30 = *(void *)(v183 + 2080);
        char v34 = *(void *)(v183 + 1944);
        uint64_t v33 = *(void *)(v183 + 1928);
        uint64_t v35 = *(void *)(v183 + 1920);
        outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v183 + 1960));
        v31(v32, v30);
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v35);
        outlined destroy of Any?((void *)(v183 + 48));
        IndexingIterator.next()((void *)(v183 + 16), *(void *)(v183 + 1952));
        if (*(void *)(v183 + 40) == 1LL)
        {
          outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v183 + 1968));
          uint64_t v29 = (void *)swift_task_alloc(dword_100068C04);
          *(void *)(v183 + 2360) = v29;
          *uint64_t v29 = *(void *)(v183 + 1312);
          v29[1] = MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
          return MediaMLPlugin.getProcessedWiFiDataFromDB()(*(void *)(v183 + 2144));
        }

        outlined init with take of Any?((_OWORD *)(v183 + 16), (_OWORD *)(v183 + 48));
        uint64_t v2 = kMediaML_sessionID.unsafeMutableAddressor();
        uint64_t countAndFlagsBits = v2->_countAndFlagsBits;
        object = v2->_object;
        swift_bridgeObjectRetain();
        outlined init with copy of Any?(v183 + 48, v183 + 80);
        uint64_t v182 = swift_task_alloc(32LL);
        *(void *)(v182 + 16) = v183 + 80;
        uint64_t result = DataFrame.filter<A>(on:_:_:)( countAndFlagsBits,  object,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:));
        if (j) {
          return result;
        }
        Swift::String v177 = *(void *)(v183 + 2264);
        uint64_t v175 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 2256);
        uint64_t v171 = *(void *)(v183 + 2104);
        uint64_t v174 = *(void *)(v183 + 2096);
        uint64_t v172 = *(void *)(v183 + 2088);
        uint64_t v178 = *(void *)(v183 + 2080);
        unint64_t v176 = *(void **)(v183 + 1960);
        swift_task_dealloc(v182);
        outlined destroy of Any?((void *)(v183 + 80));
        swift_bridgeObjectRelease();
        uint64_t v4 = kMediaML_ssid.unsafeMutableAddressor();
        uint64_t v170 = v4->_countAndFlagsBits;
        Swift::String v173 = v4->_object;
        swift_bridgeObjectRetain();
        uint64_t v5 = DataFrame.Slice.subscript.getter(v170, v173);
        AnyColumnSlice.distinct()(v5);
        uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v172 + 8);
        *(void *)(v183 + 2272) = v6;
        v6(v171, v178);
        swift_bridgeObjectRelease();
        v175(v171, v174, v178);
        Collection<>.makeIterator()(v176, v178, v177);
      }

      outlined init with take of Any?((_OWORD *)(v183 + 112), (_OWORD *)(v183 + 144));
      uint64_t v7 = kMediaML_ssid.unsafeMutableAddressor();
      uint64_t v168 = v7->_countAndFlagsBits;
      uint64_t v167 = v7->_object;
      swift_bridgeObjectRetain();
      outlined init with copy of Any?(v183 + 144, v183 + 176);
      Swift::String v169 = swift_task_alloc(32LL);
      *(void *)(v169 + 16) = v183 + 176;
      uint64_t result = DataFrame.Slice.filter<A>(on:_:_:)( v168,  v167,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:));
      if (j) {
        return result;
      }
      uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 2232);
      uint32_t v142 = *(void *)(v183 + 2160);
      uint64_t v146 = *(void *)(v183 + 2152);
      uint64_t v145 = *(void *)(v183 + 2136);
      uint64_t v141 = *(void *)(v183 + 2128);
      uint64_t v147 = *(void *)(v183 + 2120);
      uint64_t v134 = *(void *)(v183 + 1936);
      uint64_t v135 = *(void *)(v183 + 1912);
      uint64_t v137 = *(void *)(v183 + 1880);
      uint64_t v138 = *(void *)(v183 + 1872);
      swift_task_dealloc(v169);
      outlined destroy of Any?((void *)(v183 + 176));
      swift_bridgeObjectRelease();
      DataFrame.init(_:)(v134);
      *(void *)(v183 + 1400) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
      *(void *)(v183 + 1408) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
      *(void *)(v183 + 1416) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
      *(void *)(v183 + 1424) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
      *(void *)(v183 + 1432) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
      *(void *)(v183 + 1440) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
      *(void *)(v183 + 1448) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Int);
      *(void *)(v183 + 1456) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
      *(void *)(v183 + 1464) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
      unint64_t v8 = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for String);
      *(void *)(v183 + 1472) = v8;
      *(void *)(v183 + 1480) = 0LL;
      uint64_t v136 = DataFrame.shape.getter(v8);
      *(void *)(v183 + 1488) = v136;
      uint64_t v9 = MediaMLPlugin.logger.unsafeMutableAddressor();
      uint64_t v139 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 16);
      v139(v135, v9, v138);
      v143(v146, v142, v147);
      uint64_t v144 = *(_DWORD *)(v141 + 80);
      uint64_t v140 = (v144 + 16LL) & ~(unint64_t)v144;
      uint64_t v153 = swift_allocObject(&unk_100065F20, v140 + v145, v144 | 7LL);
      uint64_t v148 = *(void (**)(unint64_t, uint64_t, uint64_t))(v141 + 32);
      v148(v153 + v140, v146, v147);
      v143(v146, v142, v147);
      os_log_type_t v155 = swift_allocObject(&unk_100065F48, v140 + v145, v144 | 7LL);
      uint64_t v10 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v148)(v155 + v140, v146, v147);
      oslog = (os_log_s *)Logger.logObject.getter(v10);
      uint64_t v166 = static os_log_type_t.debug.getter();
      *(void *)(v183 + 1496) = 22LL;
      uint64_t v149 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v150 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v151 = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)( (void *)(v183 + 2380),  v183 + 1496,  &type metadata for UInt32,  &type metadata for Int,  v149,  v150,  v151);
      uint32_t size = *(_DWORD *)(v183 + 2380);
      Swift::String v157 = swift_allocObject(&unk_100065F70, 17LL, 7LL);
      *(_BYTE *)(v157 + 16) = 0;
      uint64_t v158 = swift_allocObject(&unk_100065F98, 17LL, 7LL);
      *(_BYTE *)(v158 + 16) = 8;
      uint64_t v154 = swift_allocObject(&unk_100065FC0, 32LL, 7LL);
      *(void *)(v154 + 16) = partial apply for implicit closure #8 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
      *(void *)(v154 + 24) = v153;
      uint64_t v159 = swift_allocObject(&unk_100065FE8, 32LL, 7LL);
      *(void *)(v159 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v159 + 24) = v154;
      uint64_t v160 = swift_allocObject(&unk_100066010, 17LL, 7LL);
      *(_BYTE *)(v160 + 16) = 0;
      Swift::String v161 = swift_allocObject(&unk_100066038, 17LL, 7LL);
      *(_BYTE *)(v161 + 16) = 8;
      uint64_t v156 = swift_allocObject(&unk_100066060, 32LL, 7LL);
      *(void *)(v156 + 16) = partial apply for implicit closure #9 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
      *(void *)(v156 + 24) = v155;
      uint64_t v162 = swift_allocObject(&unk_100066088, 32LL, 7LL);
      *(void *)(v162 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v162 + 24) = v156;
      uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)(6LL, v164);
      uint64_t v163 = v11;
      swift_retain(v157);
      void *v163 = closure #1 in OSLogArguments.append(_:)partial apply;
      v163[1] = v157;
      swift_retain(v158);
      v163[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v163[3] = v158;
      swift_retain(v159);
      v163[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v163[5] = v159;
      swift_retain(v160);
      v163[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v163[7] = v160;
      swift_retain(v161);
      v163[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v163[9] = v161;
      swift_retain(v162);
      v163[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v163[11] = v162;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v166))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
        uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v132 = createStorage<A>(capacity:type:)(0LL, v130, v130);
        uint64_t v133 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
        *(void *)(v183 + 1824) = buf;
        *(void *)(v183 + 1832) = v132;
        *(void *)(v183 + 1840) = v133;
        serialize(_:at:)(0LL, (_BYTE **)(v183 + 1824));
        serialize(_:at:)(2LL, (_BYTE **)(v183 + 1824));
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1304) = v157;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1304) = v158;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
        *(void *)(v183 + 1304) = v159;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1304) = v160;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1304) = v161;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        *(void *)(v183 + 1296) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
        *(void *)(v183 + 1304) = v162;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1296),  v183 + 1824,  v183 + 1832,  v183 + 1840);
        _os_log_impl((void *)&_mh_execute_header, oslog, v166, "Filtered dataframe shape=%ld,%ld", buf, size);
        destroyStorage<A>(_:count:)(v132, 0LL);
        destroyStorage<A>(_:count:)(v133, 0LL);
        UnsafeMutablePointer.deallocate()();
      }

      swift_release(v157);
      swift_release(v158);
      swift_release(v159);
      swift_release(v160);
      swift_release(v161);
      swift_release(v162);
      uint64_t v127 = *(void *)(v183 + 1912);
      uint64_t v126 = *(void *)(v183 + 1880);
      uint64_t v128 = *(void *)(v183 + 1872);

      uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v129(v127, v128);
      while (*(void *)(v183 + 1480) < v136)
      {
        uint64_t v125 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v123 = *(void *)(v183 + 2064);
        uint64_t v124 = *(void *)(v183 + 1976);
        uint64_t v122 = *kMediaML_rssi.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v122._countAndFlagsBits, v122._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v125(v123, v124);
        if (!*(void *)(v183 + 552)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  492LL,  0);
        }
        double v121 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        double v119 = *(void *)(v183 + 2056);
        uint64_t v120 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 528, v183 + 496);
        swift_dynamicCast(v183 + 1768, v183 + 496, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        uint64_t v118 = *kMediaML_throughputTrue.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v118._countAndFlagsBits, v118._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v121(v119, v120);
        if (!*(void *)(v183 + 616)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  493LL,  0);
        }
        uint64_t v117 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v115 = *(void *)(v183 + 2048);
        uint64_t v116 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 592, v183 + 560);
        uint64_t v12 = swift_dynamicCast( v183 + 1776,  v183 + 560,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
        specialized Array.append(_:)(v12);
        swift_bridgeObjectRelease();
        uint64_t v114 = *kMediaML_noise.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v114._countAndFlagsBits, v114._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v117(v115, v116);
        if (!*(void *)(v183 + 680)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  494LL,  0);
        }
        uint64_t v113 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v111 = *(void *)(v183 + 2040);
        uint64_t v112 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 656, v183 + 624);
        swift_dynamicCast(v183 + 1784, v183 + 624, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        uint64_t v110 = *kMediaML_txRate.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v110._countAndFlagsBits, v110._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v113(v111, v112);
        if (!*(void *)(v183 + 744)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  495LL,  0);
        }
        uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v107 = *(void *)(v183 + 2032);
        uint64_t v108 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 720, v183 + 688);
        uint64_t v13 = swift_dynamicCast( v183 + 1792,  v183 + 688,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
        specialized Array.append(_:)(v13);
        swift_bridgeObjectRelease();
        uint64_t v106 = *kMediaML_rxRate.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v106._countAndFlagsBits, v106._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v109(v107, v108);
        if (!*(void *)(v183 + 808)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  496LL,  0);
        }
        uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v103 = *(void *)(v183 + 2024);
        uint64_t v104 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 784, v183 + 752);
        uint64_t v14 = swift_dynamicCast( v183 + 1800,  v183 + 752,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
        specialized Array.append(_:)(v14);
        swift_bridgeObjectRelease();
        uint64_t v102 = *kMediaML_dayOfWeek.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v102._countAndFlagsBits, v102._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v105(v103, v104);
        if (!*(void *)(v183 + 872)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  497LL,  0);
        }
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v99 = *(void *)(v183 + 2016);
        uint64_t v100 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 848, v183 + 816);
        swift_dynamicCast(v183 + 1808, v183 + 816, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        os_log_type_t v98 = *kMediaML_hourOfDay.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v98._countAndFlagsBits, v98._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v101(v99, v100);
        if (!*(void *)(v183 + 936)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  498LL,  0);
        }
        uint32_t v97 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        unint64_t v95 = *(void *)(v183 + 2008);
        unint64_t v96 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 912, v183 + 880);
        swift_dynamicCast(v183 + 1816, v183 + 880, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        uint64_t v94 = *kMediaML_ssid.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v94._countAndFlagsBits, v94._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v97(v95, v96);
        if (!*(void *)(v183 + 1000)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  499LL,  0);
        }
        uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v91 = *(void *)(v183 + 2000);
        uint64_t v92 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 976, v183 + 944);
        swift_dynamicCast(v183 + 1248, v183 + 944, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        uint64_t v90 = *kMediaML_appName.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v90._countAndFlagsBits, v90._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v93(v91, v92);
        if (!*(void *)(v183 + 1064)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  500LL,  0);
        }
        uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v183 + 2248);
        uint64_t v87 = *(void *)(v183 + 1992);
        unint64_t v88 = *(void *)(v183 + 1976);
        outlined init with take of Any(v183 + 1040, v183 + 1008);
        swift_dynamicCast(v183 + 1264, v183 + 1008, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        specialized Array.append(_:)();
        swift_bridgeObjectRelease();
        uint64_t v86 = *kMediaML_sessionID.unsafeMutableAddressor();
        swift_bridgeObjectRetain();
        DataFrame.subscript.getter(v86._countAndFlagsBits, v86._object);
        AnyColumn.subscript.getter(*(void *)(v183 + 1480));
        v89(v87, v88);
        if (!*(void *)(v183 + 1128)) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  501LL,  0);
        }
        outlined init with take of Any(v183 + 1104, v183 + 1072);
        swift_dynamicCast(v183 + 1280, v183 + 1072, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        specialized Array.append(_:)();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v15 = *(void *)(v183 + 1480);
        uint64_t v85 = v15 + 1;
        if (__OFADD__(v15, 1LL)) {
          goto LABEL_64;
        }
        *(void *)(v183 + 1480) = v85;
      }

      uint64_t v17 = *(void *)(v183 + 1904);
      uint64_t v68 = *(void *)(v183 + 1872);
      uint64_t v67 = *(void *)(v183 + 1400);
      swift_bridgeObjectRetain();
      uint64_t v66 = *(void *)(v183 + 1408);
      swift_bridgeObjectRetain();
      uint64_t v65 = *(void *)(v183 + 1416);
      swift_bridgeObjectRetain();
      uint64_t v64 = *(void *)(v183 + 1424);
      swift_bridgeObjectRetain();
      uint64_t v63 = *(void *)(v183 + 1432);
      swift_bridgeObjectRetain();
      uint64_t v62 = *(void *)(v183 + 1440);
      swift_bridgeObjectRetain();
      uint64_t v61 = *(void *)(v183 + 1448);
      swift_bridgeObjectRetain();
      uint64_t v60 = *(void *)(v183 + 1456);
      swift_bridgeObjectRetain();
      uint64_t v69 = preprocessData(rssiList:obrList:noiseList:txRateList:rxRateList:dowList:hourList:ssidList:)( v67,  v66,  v65,  v64,  v63,  v62,  v61,  v60);
      *(void *)(v183 + 2280) = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v183 + 1504) = v69;
      uint64_t v18 = MediaMLPlugin.logger.unsafeMutableAddressor();
      v139(v17, v18, v68);
      outlined init with copy of Any?(v183 + 48, v183 + 208);
      uint64_t v72 = swift_allocObject(&unk_1000660B0, 48LL, 7LL);
      outlined init with take of Any?((_OWORD *)(v183 + 208), (_OWORD *)(v72 + 16));
      swift_bridgeObjectRetain();
      uint64_t v70 = swift_allocObject(&unk_1000660D8, 24LL, 7LL);
      *(void *)(v70 + 16) = v69;
      swift_retain(v70);
      uint64_t v74 = swift_allocObject(&unk_100066100, 32LL, 7LL);
      *(void *)(v74 + 16) = partial apply for implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
      *(void *)(v74 + 24) = v70;
      uint64_t v19 = swift_release(v70);
      log = (os_log_s *)Logger.logObject.getter(v19);
      uint64_t v84 = static os_log_type_t.debug.getter();
      *(void *)(v183 + 1512) = 22LL;
      UnsignedInteger<>.init<A>(_:)( (void *)(v183 + 2384),  v183 + 1512,  &type metadata for UInt32,  &type metadata for Int,  v149,  v150,  v151);
      uint64_t v71 = *(_DWORD *)(v183 + 2384);
      uint64_t v76 = swift_allocObject(&unk_100066128, 17LL, 7LL);
      *(_BYTE *)(v76 + 16) = 32;
      uint64_t v77 = swift_allocObject(&unk_100066150, 17LL, 7LL);
      *(_BYTE *)(v77 + 16) = 8;
      uint64_t v73 = swift_allocObject(&unk_100066178, 32LL, 7LL);
      *(void *)(v73 + 16) = partial apply for implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
      *(void *)(v73 + 24) = v72;
      uint64_t v78 = swift_allocObject(&unk_1000661A0, 32LL, 7LL);
      *(void *)(v78 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0;
      *(void *)(v78 + 24) = v73;
      uint64_t v79 = swift_allocObject(&unk_1000661C8, 17LL, 7LL);
      *(_BYTE *)(v79 + 16) = 32;
      uint64_t v80 = swift_allocObject(&unk_1000661F0, 17LL, 7LL);
      *(_BYTE *)(v80 + 16) = 8;
      uint64_t v75 = swift_allocObject(&unk_100066218, 32LL, 7LL);
      *(void *)(v75 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
      *(void *)(v75 + 24) = v74;
      uint64_t v81 = swift_allocObject(&unk_100066240, 32LL, 7LL);
      *(void *)(v81 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v81 + 24) = v75;
      _allocateUninitializedArray<A>(_:)(6LL, v164);
      unint64_t v82 = v20;
      swift_retain(v76);
      *unint64_t v82 = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[1] = v76;
      swift_retain(v77);
      v82[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[3] = v77;
      swift_retain(v78);
      v82[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v82[5] = v78;
      swift_retain(v79);
      v82[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[7] = v79;
      swift_retain(v80);
      v82[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[9] = v80;
      swift_retain(v81);
      v82[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[11] = v81;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v84))
      {
        uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v58 = createStorage<A>(capacity:type:)(0LL, v56, v56);
        uint64_t v59 = createStorage<A>(capacity:type:)( 2LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
        *(void *)(v183 + 1744) = v57;
        *(void *)(v183 + 1752) = v58;
        *(void *)(v183 + 1760) = v59;
        serialize(_:at:)(2LL, (_BYTE **)(v183 + 1744));
        serialize(_:at:)(2LL, (_BYTE **)(v183 + 1744));
        *(void *)(v183 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1240) = v76;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        *(void *)(v183 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1240) = v77;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        *(void *)(v183 + 1232) = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        *(void *)(v183 + 1240) = v78;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        *(void *)(v183 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1240) = v79;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        *(void *)(v183 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1240) = v80;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        *(void *)(v183 + 1232) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v183 + 1240) = v81;
        closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 1232),  v183 + 1744,  v183 + 1752,  v183 + 1760);
        _os_log_impl((void *)&_mh_execute_header, log, v84, "processedData for session=%s %s", v57, v71);
        destroyStorage<A>(_:count:)(v58, 0LL);
        destroyStorage<A>(_:count:)(v59, 2LL);
        UnsafeMutablePointer.deallocate()();
      }

      swift_release(v76);
      swift_release(v77);
      swift_release(v78);
      swift_release(v79);
      swift_release(v80);
      swift_release(v81);
      uint64_t v53 = *(void *)(v183 + 1904);
      uint64_t v54 = *(void *)(v183 + 1872);

      v129(v53, v54);
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      *(void *)(v183 + 2288) = v55;
      uint64_t result = Array.count.getter(v69, v55);
      *(void *)(v183 + 1520) = result;
      if (__OFSUB__(result, 1LL))
      {
        __break(1u);
LABEL_64:
        __break(1u);
        return result;
      }

      *(void *)(v183 + 1536) = result - 1;
      *(void *)(v183 + 1544) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
      min<A>(_:_:)(v183 + 1536, v183 + 1544, &type metadata for Int, &protocol witness table for Int);
      uint64_t v52 = *(void *)(v183 + 1528);
      *(void *)(v183 + 1552) = v52;
      if (Array.count.getter(v69, v55) <= 0)
      {
        uint64_t v39 = 0LL;
        continue;
      }

      break;
    }

    if (v52 < 0) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
    }
    uint64_t v1 = specialized Collection<>.makeIterator()(0LL, v52);
    *(void *)(v183 + 1136) = v1;
    *(void *)(v183 + 1144) = v22;
    *(void *)(v183 + 1152) = v23;
    *(_BYTE *)(v183 + 1160) = v24 & 1;
  }

  *(void *)(v183 + 1560) = v185;
  ((void (*)(void))Array.subscript.getter)();
  Array.subscript.getter(0LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1576, v183 + 240, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
  uint64_t v50 = *(void *)(v183 + 1576);
  *(void *)(v183 + 1584) = v50;
  Array.subscript.getter(v185);
  Array.subscript.getter(1LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1600, v183 + 272, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
  uint64_t v51 = *(double *)(v183 + 1600);
  if (((*(void *)&v51 >> 52) & 0x7FFLL) == 0x7FF) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because it is either infinite or NaN",  76LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14133LL,  0);
  }
  if (v51 <= -9.22337204e18) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be less than Int.min",  85LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14136LL,  0);
  }
  if (v51 >= 9.22337204e18) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be greater than Int.max",  88LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14139LL,  0);
  }
  *(void *)(v183 + 1608) = (uint64_t)v51;
  Array.subscript.getter(v185);
  Array.subscript.getter(2LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1624, v183 + 304, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
  uint64_t v49 = *(double *)(v183 + 1624);
  if (((*(void *)&v49 >> 52) & 0x7FFLL) == 0x7FF) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because it is either infinite or NaN",  76LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14133LL,  0);
  }
  if (v49 <= -9.22337204e18) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be less than Int.min",  85LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14136LL,  0);
  }
  if (v49 >= 9.22337204e18) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Double value cannot be converted to Int because the result would be greater than Int.max",  88LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14139LL,  0);
  }
  uint64_t v48 = *(void *)(v183 + 2224);
  *(void *)(v183 + 1632) = (uint64_t)v49;
  Array.subscript.getter(v185);
  Array.subscript.getter(3LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1648, v183 + 336, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
  Swift::String v46 = *(void *)(v183 + 1648);
  *(void *)(v183 + 1656) = v46;
  Array.subscript.getter(v185);
  Array.subscript.getter(4LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1672, v183 + 368, (char *)&type metadata for Any + 8, &type metadata for Double, 7LL);
  unint64_t v47 = *(void *)(v183 + 1672);
  *(void *)(v183 + 1680) = v47;
  Array.subscript.getter(v185);
  Array.subscript.getter(5LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1696, v183 + 400, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
  unint64_t v45 = *(void *)(v183 + 1696);
  *(void *)(v183 + 1704) = v45;
  Array.subscript.getter(v185);
  Array.subscript.getter(6LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1720, v183 + 432, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
  unint64_t v44 = *(void *)(v183 + 1720);
  *(void *)(v183 + 1728) = v44;
  Array.subscript.getter(v185);
  Array.subscript.getter(7LL);
  swift_bridgeObjectRelease();
  swift_dynamicCast(v183 + 1168, v183 + 464, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  unint64_t v42 = *(void *)(v183 + 1168);
  uint64_t v43 = *(void *)(v183 + 1176);
  *(void *)(v183 + 2304) = v43;
  *(void *)(v183 + 1184) = v42;
  *(void *)(v183 + 1192) = v43;
  uint64_t v186 = ((uint64_t (*)(void))specialized Array.subscript.getter)();
  uint64_t v41 = v26;
  *(void *)(v183 + 2312) = v26;
  *(void *)(v183 + 1200) = v186;
  *(void *)(v183 + 1208) = v26;
  uint64_t v187 = specialized Array.subscript.getter(0LL, *(void *)(v183 + 1472));
  uint64_t v40 = v27;
  *(void *)(v183 + 2320) = v27;
  *(void *)(v183 + 1216) = v187;
  *(void *)(v183 + 1224) = v27;
  *(Swift::String *)(v183 + 2328) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO processedwifi (session_id, app_name, ssid, hour, dow, rssi, noise, tx_ rate, rx_rate, throughput_true) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  0x97uLL,  1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = (void *)swift_task_alloc(128LL);
  *(void *)(v183 + 2344) = v28;
  v28[2] = v187;
  v28[3] = v40;
  v28[4] = v186;
  v28[5] = v41;
  v28[6] = v42;
  v28[7] = v43;
  v28[8] = v44;
  v28[9] = v45;
  v28[10] = (uint64_t)v51;
  v28[11] = (uint64_t)v49;
  v28[12] = v46;
  v28[13] = v47;
  v28[14] = v50;
  return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), v48);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 2360);
  *(void *)(v2 + 1312) = *v1;
  *(void *)(v2 + 2368) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), 0LL);
  }
  else {
    return swift_task_switch(MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *buf;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(unint64_t, uint64_t, uint64_t);
  unint64_t v65;
  unint64_t v66;
  uint32_t size;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  os_log_s *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t))v0[279];
  uint64_t v62 = v0[269];
  uint64_t v58 = v0[268];
  uint64_t v61 = v0[267];
  uint64_t v56 = v0[266];
  uint64_t v63 = v0[265];
  uint64_t v1 = v0[237];
  uint64_t v54 = v0[235];
  uint64_t v55 = v0[234];
  v0[164] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v1, v2, v55);
  v59(v62, v58, v63);
  uint64_t v60 = *(_DWORD *)(v56 + 80);
  uint64_t v57 = (v60 + 16LL) & ~(unint64_t)v60;
  uint64_t v68 = swift_allocObject(&unk_100065D90, v57 + v61, v60 | 7LL);
  uint64_t v64 = *(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 32);
  v64(v68 + v57, v62, v63);
  v59(v62, v58, v63);
  uint64_t v70 = swift_allocObject(&unk_100065DB8, v57 + v61, v60 | 7LL);
  uint64_t v3 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v64)(v70 + v57, v62, v63);
  uint64_t v80 = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v81 = static os_log_type_t.debug.getter();
  v0[174] = 22LL;
  uint64_t v65 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v66 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)(v0 + 297, v0 + 174, &type metadata for UInt32, &type metadata for Int, v65, v66, v4);
  uint32_t size = *((_DWORD *)v0 + 594);
  uint64_t v72 = swift_allocObject(&unk_100065DE0, 17LL, 7LL);
  *(_BYTE *)(v72 + 16) = 0;
  uint64_t v73 = swift_allocObject(&unk_100065E08, 17LL, 7LL);
  *(_BYTE *)(v73 + 16) = 8;
  uint64_t v69 = swift_allocObject(&unk_100065E30, 32LL, 7LL);
  *(void *)(v69 + 16) = partial apply for implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
  *(void *)(v69 + 24) = v68;
  uint64_t v74 = swift_allocObject(&unk_100065E58, 32LL, 7LL);
  *(void *)(v74 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v74 + 24) = v69;
  uint64_t v75 = swift_allocObject(&unk_100065E80, 17LL, 7LL);
  *(_BYTE *)(v75 + 16) = 0;
  uint64_t v76 = swift_allocObject(&unk_100065EA8, 17LL, 7LL);
  *(_BYTE *)(v76 + 16) = 8;
  uint64_t v71 = swift_allocObject(&unk_100065ED0, 32LL, 7LL);
  *(void *)(v71 + 16) = partial apply for implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:);
  *(void *)(v71 + 24) = v70;
  uint64_t v77 = swift_allocObject(&unk_100065EF8, 32LL, 7LL);
  *(void *)(v77 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v77 + 24) = v71;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(6LL, v79);
  uint64_t v78 = v5;
  swift_retain(v72);
  *uint64_t v78 = closure #1 in OSLogArguments.append(_:)partial apply;
  v78[1] = v72;
  swift_retain(v73);
  v78[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v78[3] = v73;
  swift_retain(v74);
  v78[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v78[5] = v74;
  swift_retain(v75);
  v78[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v78[7] = v75;
  swift_retain(v76);
  v78[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v78[9] = v76;
  swift_retain(v77);
  v78[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v78[11] = v77;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v80, v81))
  {
    swift_release(v72);
    swift_release(v73);
    swift_release(v74);
    swift_release(v75);
    swift_release(v76);
    swift_release(v77);
    goto LABEL_6;
  }

  uint64_t v6 = v53[296];
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v51 = createStorage<A>(capacity:type:)(0LL, v49, v49);
  uint64_t v52 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  unint64_t v82 = buf;
  uint64_t v83 = v51;
  uint64_t v84 = v52;
  serialize(_:at:)(0LL, &v82);
  serialize(_:at:)(2LL, &v82);
  uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
  uint64_t v86 = v72;
  uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
  if (!v6)
  {
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v86 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v86 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v86 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v86 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
    uint64_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v86 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "Returning a dataframe of size=%ld,%ld", buf, size);
    destroyStorage<A>(_:count:)(v51, 0LL);
    destroyStorage<A>(_:count:)(v52, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v72);
    swift_release(v73);
    swift_release(v74);
    swift_release(v75);
    swift_release(v76);
    swift_release(v77);
LABEL_6:
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v53[280];
    uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v53[279];
    uint64_t v17 = v53[277];
    uint64_t v18 = v53[276];
    uint64_t v19 = v53[275];
    uint64_t v20 = v53[274];
    uint64_t v21 = v53[273];
    uint64_t v22 = v53[272];
    uint64_t v23 = v53[271];
    uint64_t v24 = v53[270];
    uint64_t v25 = v53[269];
    unint64_t v26 = v53[268];
    uint64_t v12 = v53[265];
    uint64_t v27 = v53[264];
    uint64_t v28 = v53[263];
    uint64_t v29 = v53[262];
    uint64_t v14 = v53[261];
    uint64_t v15 = v53[260];
    uint64_t v30 = v53[259];
    uint64_t v31 = v53[258];
    char v32 = v53[257];
    uint64_t v33 = v53[256];
    char v34 = v53[255];
    uint64_t v35 = v53[254];
    uint64_t v36 = v53[253];
    uint64_t v37 = v53[252];
    uint64_t v38 = v53[251];
    uint64_t v39 = v53[250];
    uint64_t v40 = v53[249];
    uint64_t v41 = v53[246];
    unint64_t v42 = v53[245];
    uint64_t v43 = v53[243];
    unint64_t v44 = v53[242];
    unint64_t v45 = v53[239];
    Swift::String v46 = v53[238];
    unint64_t v47 = v53[237];
    uint64_t v48 = v53[236];
    unint64_t v8 = v53[235];
    uint64_t v9 = v53[234];
    uint64_t v10 = v53[231];
    uint64_t v16 = v53[278];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v47, v9);
    v11(v10, v26, v12);
    v13(v26, v12);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v15);
    swift_release(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v53[164] + 8LL))();
  }

  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v1 = v0[293];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[284];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[280];
  uint64_t v15 = v0[278];
  uint64_t v5 = v0[270];
  uint64_t v3 = v0[265];
  uint64_t v14 = v0[264];
  uint64_t v7 = v0[262];
  uint64_t v12 = v0[260];
  uint64_t v11 = v0[246];
  uint64_t v6 = v0[245];
  uint64_t v9 = v0[243];
  unint64_t v8 = v0[241];
  uint64_t v10 = v0[240];
  v0[164] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String](v0 + 184);
  outlined destroy of [String](v0 + 183);
  outlined destroy of [String](v0 + 182);
  outlined destroy of [Int](v0 + 181);
  outlined destroy of [Int](v0 + 180);
  outlined destroy of [Double](v0 + 179);
  outlined destroy of [Double](v0 + 178);
  outlined destroy of [Int](v0 + 177);
  outlined destroy of [Double](v0 + 176);
  outlined destroy of [Int](v0 + 175);
  v4(v5, v3);
  outlined destroy of Any?(v0 + 18);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v6);
  v13(v7, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  outlined destroy of Any?(v0 + 6);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v11);
  v13(v14, v12);
  swift_release(v15);
  uint64_t v16 = v0[276];
  uint64_t v17 = v0[275];
  uint64_t v18 = v0[274];
  uint64_t v19 = v0[273];
  uint64_t v20 = v0[272];
  uint64_t v21 = v0[271];
  uint64_t v22 = v0[270];
  uint64_t v23 = v0[269];
  uint64_t v24 = v0[268];
  uint64_t v25 = v0[264];
  unint64_t v26 = v0[263];
  uint64_t v27 = v0[262];
  uint64_t v28 = v0[259];
  uint64_t v29 = v0[258];
  uint64_t v30 = v0[257];
  uint64_t v31 = v0[256];
  char v32 = v0[255];
  uint64_t v33 = v0[254];
  char v34 = v0[253];
  uint64_t v35 = v0[252];
  uint64_t v36 = v0[251];
  uint64_t v37 = v0[250];
  uint64_t v38 = v0[249];
  uint64_t v39 = v0[246];
  uint64_t v40 = v0[245];
  uint64_t v41 = v0[243];
  unint64_t v42 = v0[242];
  uint64_t v43 = v0[239];
  unint64_t v44 = v0[238];
  unint64_t v45 = v0[237];
  Swift::String v46 = v0[236];
  swift_task_dealloc(v0[277]);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0[164] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v5 = v0[278];
  uint64_t v1 = v0[264];
  uint64_t v2 = v0[261];
  uint64_t v3 = v0[260];
  v0[164] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release(v5);
  uint64_t v6 = v0[276];
  uint64_t v7 = v0[275];
  unint64_t v8 = v0[274];
  uint64_t v9 = v0[273];
  uint64_t v10 = v0[272];
  uint64_t v11 = v0[271];
  uint64_t v12 = v0[270];
  uint64_t v13 = v0[269];
  uint64_t v14 = v0[268];
  uint64_t v15 = v0[264];
  uint64_t v16 = v0[263];
  uint64_t v17 = v0[262];
  uint64_t v18 = v0[259];
  uint64_t v19 = v0[258];
  uint64_t v20 = v0[257];
  uint64_t v21 = v0[256];
  uint64_t v22 = v0[255];
  uint64_t v23 = v0[254];
  uint64_t v24 = v0[253];
  uint64_t v25 = v0[252];
  unint64_t v26 = v0[251];
  uint64_t v27 = v0[250];
  uint64_t v28 = v0[249];
  uint64_t v29 = v0[246];
  uint64_t v30 = v0[245];
  uint64_t v31 = v0[243];
  char v32 = v0[242];
  uint64_t v33 = v0[239];
  char v34 = v0[238];
  uint64_t v35 = v0[237];
  uint64_t v36 = v0[236];
  swift_task_dealloc(v0[277]);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0[164] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  471LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t closure #3 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  475LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t implicit closure #8 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #9 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return v0;
}

uint64_t implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  return Optional.debugDescription.getter(v0);
}

uint64_t implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = a1;
  *a2 = a1;
  return result;
}

uint64_t closure #4 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(10LL, v29);
  uint64_t v27 = v15;
  swift_bridgeObjectRetain();
  *(void *)(v27 + 24) = &type metadata for String;
  *(void *)(v27 + 32) = &protocol witness table for String;
  *(void *)uint64_t v27 = a2;
  *(void *)(v27 + 8) = a3;
  swift_bridgeObjectRetain();
  *(void *)(v27 + 64) = &type metadata for String;
  *(void *)(v27 + 72) = &protocol witness table for String;
  *(void *)(v27 + 40) = a4;
  *(void *)(v27 + 48) = a5;
  swift_bridgeObjectRetain();
  *(void *)(v27 + 104) = &type metadata for String;
  *(void *)(v27 + 112) = &protocol witness table for String;
  *(void *)(v27 + 80) = a6;
  *(void *)(v27 + 88) = a7;
  *(void *)(v27 + 144) = &type metadata for Int;
  *(void *)(v27 + 152) = &protocol witness table for Int;
  *(void *)(v27 + 120) = a8;
  *(void *)(v27 + 184) = &type metadata for Int;
  *(void *)(v27 + 192) = &protocol witness table for Int;
  *(void *)(v27 + 160) = a12;
  *(void *)(v27 + 224) = &type metadata for Int;
  *(void *)(v27 + 232) = &protocol witness table for Int;
  *(void *)(v27 + 200) = a13;
  *(void *)(v27 + 264) = &type metadata for Int;
  *(void *)(v27 + 272) = &protocol witness table for Int;
  *(void *)(v27 + 240) = a14;
  *(void *)(v27 + 304) = &type metadata for Double;
  *(void *)(v27 + 312) = &protocol witness table for Double;
  *(double *)(v27 + 280) = a9;
  *(void *)(v27 + 344) = &type metadata for Double;
  *(void *)(v27 + 352) = &protocol witness table for Double;
  *(double *)(v27 + 320) = a10;
  *(void *)(v27 + 384) = &type metadata for Double;
  *(void *)(v27 + 392) = &protocol witness table for Double;
  *(double *)(v27 + 360) = a11;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v30) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return v0;
}

uint64_t MediaMLPlugin.getProcessedWiFiDataFromDB()(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  void v2[3] = v1;
  return swift_task_switch(MediaMLPlugin.getProcessedWiFiDataFromDB(), 0LL);
}

void MediaMLPlugin.getProcessedWiFiDataFromDB()()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getProcessedWiFiDataFromDB(),  0LL,  v11,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 80) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "WITH AppNameSSIDpairs as (SELECT app_name, ssid FROM processedwifi GROUP BY app_nam e, ssid HAVING COUNT(*)>20)\n SELECT session_id, p.app_name, p.ssid, hour, dow, rssi, noise, tx_rate, rx_rate, th roughput_true\n FROM processedwifi p JOIN AppNameSSIDpairs a\n ON p.app_name = a.app_name AND p.ssid = a.ssid",  0x12BuLL,  1);
    swift_task_switch(MediaMLPlugin.getProcessedWiFiDataFromDB(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.getProcessedWiFiDataFromDB()()
{
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[2] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)( v4,  v3,  (void (*)(void))closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB());
  v0[13] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getProcessedWiFiDataFromDB(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getProcessedWiFiDataFromDB(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[10];
  v0[2] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[6] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getProcessedWiFiDataFromDB()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = a2;
  uint64_t v130 = 0LL;
  uint64_t v129 = 0LL;
  unint64_t v95 = &v128;
  uint64_t v128 = 0LL;
  unint64_t v96 = &v127;
  uint64_t v127 = 0LL;
  uint64_t v99 = &v126;
  uint64_t v126 = 0LL;
  uint32_t v97 = &v125;
  uint64_t v125 = 0LL;
  os_log_type_t v98 = &v124;
  uint64_t v124 = 0LL;
  uint64_t v100 = &v123;
  uint64_t v123 = 0LL;
  uint64_t v101 = &v122;
  uint64_t v122 = 0LL;
  uint64_t v102 = &v121;
  uint64_t v121 = 0LL;
  uint64_t v103 = &v120;
  uint64_t v120 = 0LL;
  uint64_t v104 = &v119;
  uint64_t v119 = 0LL;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v76 = *(void *)(v75 - 8);
  unint64_t v77 = (*(void *)(v76 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v75);
  uint64_t v78 = (char *)&v18 - v77;
  uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v80 = *(void *)(v79 - 8);
  unint64_t v81 = (*(void *)(v80 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v79);
  unint64_t v82 = (char *)&v18 - v81;
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v84 = *(void *)(v83 - 8);
  unint64_t v85 = (*(void *)(v84 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v83);
  uint64_t v86 = (char *)&v18 - v85;
  uint64_t v94 = 0LL;
  uint64_t v87 = type metadata accessor for DataFrame(0LL);
  uint64_t v88 = *(void *)(v87 - 8);
  unint64_t v89 = (*(void *)(v88 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v94);
  uint64_t v90 = (char *)&v18 - v89;
  uint64_t v130 = (char *)&v18 - v89;
  uint64_t v129 = a1;
  uint64_t v91 = &type metadata for String;
  uint64_t v128 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v127 = _allocateUninitializedArray<A>(_:)(v94, v91);
  uint64_t v126 = _allocateUninitializedArray<A>(_:)(v94, v91);
  uint64_t v92 = &type metadata for Int;
  uint64_t v125 = _allocateUninitializedArray<A>(_:)(v94, &type metadata for Int);
  uint64_t v124 = _allocateUninitializedArray<A>(_:)(v94, v92);
  uint64_t v123 = _allocateUninitializedArray<A>(_:)(v94, v92);
  uint64_t v122 = _allocateUninitializedArray<A>(_:)(v94, v92);
  uint64_t v93 = &type metadata for Double;
  uint64_t v121 = _allocateUninitializedArray<A>(_:)(v94, &type metadata for Double);
  uint64_t v120 = _allocateUninitializedArray<A>(_:)(v94, v93);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v94, v93);
  uint64_t v5 = v105;
  uint64_t v119 = v4;
  v108[2] = v95;
  v108[3] = v96;
  void v108[4] = v97;
  v108[5] = v98;
  v108[6] = v99;
  v108[7] = v100;
  v108[8] = v101;
  v108[9] = v102;
  v108[10] = v103;
  v108[11] = v104;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), void *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB(),  v108);
  uint64_t v106 = v5;
  uint64_t v107 = v5;
  if (v5)
  {
    uint64_t v18 = v107;
    outlined destroy of [Double](&v119);
    outlined destroy of [Double](&v120);
    outlined destroy of [Double](&v121);
    outlined destroy of [Int](&v122);
    outlined destroy of [Int](&v123);
    outlined destroy of [Int](&v124);
    outlined destroy of [Int](&v125);
    outlined destroy of [String](&v126);
    outlined destroy of [String](&v127);
    uint64_t result = &v128;
    outlined destroy of [String](&v128);
  }

  else
  {
    DataFrame.init()(v6);
    uint64_t v7 = kMediaML_sessionID.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
    object = v7->_object;
    swift_bridgeObjectRetain();
    uint64_t v73 = &v128;
    uint64_t v19 = v128;
    swift_bridgeObjectRetain();
    uint64_t v21 = &v118;
    uint64_t v118 = v19;
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v30 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v31 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v21);
    DataFrame.append<A>(column:)(v86, v31);
    char v32 = *(void (**)(char *, uint64_t))(v84 + 8);
    v32(v86, v83);
    char v8 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t v23 = v8->_countAndFlagsBits;
    uint64_t v25 = v8->_object;
    swift_bridgeObjectRetain();
    uint64_t v72 = &v127;
    uint64_t v24 = v127;
    swift_bridgeObjectRetain();
    uint64_t v117 = v24;
    Column.init<A>(name:contents:)(v23, v25, &v117);
    DataFrame.append<A>(column:)(v86, v31);
    v32(v86, v83);
    uint64_t v9 = kMediaML_ssid.unsafeMutableAddressor();
    uint64_t v26 = v9->_countAndFlagsBits;
    uint64_t v28 = v9->_object;
    swift_bridgeObjectRetain();
    uint64_t v71 = &v126;
    uint64_t v27 = v126;
    swift_bridgeObjectRetain();
    uint64_t v116 = v27;
    Column.init<A>(name:contents:)(v26, v28, &v116);
    DataFrame.append<A>(column:)(v86, v31);
    v32(v86, v83);
    uint64_t v10 = kMediaML_hourOfDay.unsafeMutableAddressor();
    uint64_t v36 = v10->_countAndFlagsBits;
    char v34 = v10->_object;
    swift_bridgeObjectRetain();
    uint64_t v70 = &v125;
    uint64_t v33 = v125;
    swift_bridgeObjectRetain();
    uint64_t v35 = &v115;
    uint64_t v115 = v33;
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    unint64_t v47 = lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v48 = &type metadata for Int;
    Column.init<A>(name:contents:)(v36, v34, v35);
    DataFrame.append<A>(column:)(v82, v48);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v80 + 8);
    v49(v82, v79);
    uint64_t v11 = kMediaML_dayOfWeek.unsafeMutableAddressor();
    uint64_t v37 = v11->_countAndFlagsBits;
    uint64_t v39 = v11->_object;
    swift_bridgeObjectRetain();
    uint64_t v69 = &v124;
    uint64_t v38 = v124;
    swift_bridgeObjectRetain();
    uint64_t v114 = v38;
    Column.init<A>(name:contents:)(v37, v39, &v114);
    DataFrame.append<A>(column:)(v82, v48);
    v49(v82, v79);
    MediaMLPlugin::SQLError v12 = kMediaML_rssi.unsafeMutableAddressor();
    uint64_t v40 = v12->_countAndFlagsBits;
    unint64_t v42 = v12->_object;
    swift_bridgeObjectRetain();
    uint64_t v68 = &v123;
    uint64_t v41 = v123;
    swift_bridgeObjectRetain();
    uint64_t v113 = v41;
    Column.init<A>(name:contents:)(v40, v42, &v113);
    DataFrame.append<A>(column:)(v82, v48);
    v49(v82, v79);
    uint64_t v13 = kMediaML_noise.unsafeMutableAddressor();
    uint64_t v43 = v13->_countAndFlagsBits;
    unint64_t v45 = v13->_object;
    swift_bridgeObjectRetain();
    uint64_t v67 = &v122;
    uint64_t v44 = v122;
    swift_bridgeObjectRetain();
    uint64_t v112 = v44;
    Column.init<A>(name:contents:)(v43, v45, &v112);
    DataFrame.append<A>(column:)(v82, v48);
    v49(v82, v79);
    uint64_t v14 = kMediaML_txRate.unsafeMutableAddressor();
    uint64_t v53 = v14->_countAndFlagsBits;
    uint64_t v51 = v14->_object;
    swift_bridgeObjectRetain();
    uint64_t v66 = &v121;
    uint64_t v50 = v121;
    swift_bridgeObjectRetain();
    uint64_t v52 = &v111;
    uint64_t v111 = v50;
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    unint64_t v61 = lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v62 = &type metadata for Double;
    Column.init<A>(name:contents:)(v53, v51, v52);
    DataFrame.append<A>(column:)(v78, v62);
    uint64_t v63 = *(void (**)(char *, uint64_t))(v76 + 8);
    v63(v78, v75);
    uint64_t v15 = kMediaML_rxRate.unsafeMutableAddressor();
    uint64_t v54 = v15->_countAndFlagsBits;
    uint64_t v56 = v15->_object;
    swift_bridgeObjectRetain();
    uint64_t v65 = &v120;
    uint64_t v55 = v120;
    swift_bridgeObjectRetain();
    uint64_t v110 = v55;
    Column.init<A>(name:contents:)(v54, v56, &v110);
    DataFrame.append<A>(column:)(v78, v62);
    v63(v78, v75);
    uint64_t v16 = kMediaML_throughputTrue.unsafeMutableAddressor();
    uint64_t v57 = v16->_countAndFlagsBits;
    uint64_t v59 = v16->_object;
    swift_bridgeObjectRetain();
    uint64_t v64 = &v119;
    uint64_t v58 = v119;
    swift_bridgeObjectRetain();
    uint64_t v109 = v58;
    Column.init<A>(name:contents:)(v57, v59, &v109);
    DataFrame.append<A>(column:)(v78, v62);
    v63(v78, v75);
    (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v74, v90, v87);
    outlined destroy of [Double](v64);
    outlined destroy of [Double](v65);
    outlined destroy of [Double](v66);
    outlined destroy of [Int](v67);
    outlined destroy of [Int](v68);
    outlined destroy of [Int](v69);
    outlined destroy of [Int](v70);
    outlined destroy of [String](v71);
    outlined destroy of [String](v72);
    uint64_t result = v73;
    outlined destroy of [String](v73);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB()(uint64_t a1)
{
  if (v29)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v28)
    {
      SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      if (v27)
      {
        SQLiteDB.Row.get<A>(at:)(3LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(4LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(5LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)(6LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
        SQLiteDB.Row.get<A>(at:)( 7LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        SQLiteDB.Row.get<A>(at:)( 8LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        SQLiteDB.Row.get<A>(at:)( 9LL,  a1,  (uint64_t)&type metadata for Double,  (uint64_t)&protocol witness table for Double);
        swift_bridgeObjectRetain();
        specialized Array.append(_:)();
        swift_bridgeObjectRetain();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        swift_bridgeObjectRetain();
        specialized Array.append(_:)();
        specialized Array.append(_:)();
        uint64_t v11 = specialized Array.append(_:)();
        uint64_t v12 = specialized Array.append(_:)(v11);
        uint64_t v13 = specialized Array.append(_:)(v12);
        specialized Array.append(_:)(v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }

      else
      {
        Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssid not of type String", 0x17uLL, 1);
        MediaMLPlugin::SQLError v32 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v8);
        unsigned __int32 code = v32.code;
        uint64_t countAndFlagsBits = v32.desc.value._countAndFlagsBits;
        object = v32.desc.value._object;
        unint64_t v9 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
        uint64_t v17 = swift_allocError(&type metadata for SQLError, v9, 0LL, 0LL);
        *(_DWORD *)uint64_t v10 = code;
        *(void *)(v10 + 8) = countAndFlagsBits;
        *(void *)(v10 + 16) = object;
        swift_willThrow(code);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v17;
      }
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name not of type String", 0x1BuLL, 1);
      MediaMLPlugin::SQLError v31 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 v20 = v31.code;
      uint64_t v18 = v31.desc.value._countAndFlagsBits;
      uint64_t v19 = v31.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v21 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = v20;
      *(void *)(v7 + 8) = v18;
      *(void *)(v7 + 16) = v19;
      swift_willThrow(v20);
      swift_bridgeObjectRelease();
      return v21;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("session_id not of type String", 0x1DuLL, 1);
    MediaMLPlugin::SQLError v30 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v24 = v30.code;
    uint64_t desc_8 = v30.desc.value._countAndFlagsBits;
    uint64_t v23 = v30.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v25 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v24;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v23;
    swift_willThrow(v24);
    return v25;
  }

uint64_t MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  *(void *)(v1 + 720) = v0;
  *(void *)(v1 + 512) = v1;
  *(void *)(v1 + 520) = 0LL;
  *(void *)(v1 + 536) = 0LL;
  *(void *)(v1 + 544) = 0LL;
  *(void *)(v1 + 600) = 0LL;
  *(void *)(v1 + 608) = 0LL;
  *(void *)(v1 + 616) = 0LL;
  *(void *)(v1 + 632) = 0LL;
  *(void *)(v1 + 664) = 0LL;
  *(void *)(v1 + 400) = 0LL;
  *(void *)(v1 + 408) = 0LL;
  *(void *)(v1 + 416) = 0LL;
  *(_BYTE *)(v1 + 424) = 0;
  *(void *)(v1 + 672) = 0LL;
  *(void *)(v1 + 448) = 0LL;
  *(void *)(v1 + 456) = 0LL;
  *(void *)(v1 + 480) = 0LL;
  *(void *)(v1 + 488) = 0LL;
  *(void *)(v1 + 680) = 0LL;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v1 + 728) = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)(v1 + 736) = v3;
  uint64_t v14 = *(void *)(v3 + 64);
  *(void *)(v1 + 744) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 752) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 760) = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DataFrame.Slice(0LL);
  *(void *)(v1 + 768) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v1 + 776) = v5;
  uint64_t v15 = *(void *)(v5 + 64);
  *(void *)(v1 + 784) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 792) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AnyColumnSlice>);
  *(void *)(v1 + 800) = v6;
  uint64_t v16 = *(void *)(*(void *)(v6 - 8) + 64LL);
  *(void *)(v1 + 808) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 816) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AnyColumn(0LL);
  *(void *)(v1 + 824) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v1 + 832) = v8;
  uint64_t v17 = *(void *)(v8 + 64);
  *(void *)(v1 + 840) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 848) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AnyColumnSlice(0LL);
  *(void *)(v1 + 856) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v1 + 864) = v10;
  uint64_t v18 = *(void *)(v10 + 64);
  *(void *)(v1 + 872) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 880) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 888) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DataFrame(0LL);
  *(void *)(v1 + 896) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v1 + 904) = v12;
  uint64_t v19 = *(void *)(v12 + 64);
  *(void *)(v1 + 912) = v19;
  *(void *)(v1 + 920) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 928) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 936) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 944) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 952) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 520) = v0;
  return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), 0LL);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 968);
  *(void *)(v2 + 512) = *v1;
  *(void *)(v2 + 976) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), 0LL);
  }
  else {
    return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), 0LL);
  }
}

{
  void *v0;
  Swift::Int DateIn;
  uint64_t v2;
  Swift::String *v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  void (*v6)(uint64_t, uint64_t, uint64_t);
  unint64_t v7;
  Swift::String *v8;
  uint64_t result;
  Swift::String *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  Swift::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint32_t v76;
  os_log_type_t v77;
  os_log_s *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(unint64_t, uint64_t, uint64_t);
  unint64_t v119;
  unint64_t v120;
  uint32_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  os_log_s *log;
  os_log_type_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  Swift::String v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *buf;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t, uint64_t);
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(unint64_t, uint64_t, uint64_t);
  unint64_t v182;
  unint64_t v183;
  uint32_t size;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  os_log_s *oslog;
  os_log_type_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, uint64_t);
  void *v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t countAndFlagsBits;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *object;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t i;
  Swift::String v225;
  Swift::Bool v226;
  void (*v227)(uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  Swift::String v231;
  Swift::Bool v232;
  Swift::Bool v233;
  uint64_t v234;
  Swift::String v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void (*v240)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v238 = v0[119];
  os_log_type_t v237 = v0[118];
  Swift::Bool v236 = v0[113];
  uint64_t v239 = v0[112];
  v0[64] = v0;
  DateIn = getDateInEpoch()();
  v0[123] = DateIn;
  v0[68] = DateIn;
  uint64_t v235 = *kMediaML_appName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t v241 = DataFrame.containsColumn(_:)(v235);
  swift_bridgeObjectRelease();
  uint64_t v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(v236 + 16);
  v0[124] = v240;
  v240(v237, v238, v239);
  if (v241)
  {
    uint64_t v231 = *kMediaML_ssid.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    uint64_t v232 = DataFrame.containsColumn(_:)(v231);
    swift_bridgeObjectRelease();
    uint64_t v233 = v232;
  }

  else
  {
    uint64_t v233 = 0;
  }

  uint64_t v229 = *(void *)(v234 + 952);
  uint64_t v2 = *(void *)(v234 + 944);
  uint64_t v228 = *(void *)(v234 + 936);
  uint64_t v230 = *(void *)(v234 + 896);
  uint64_t v227 = *(void (**)(uint64_t))(*(void *)(v234 + 904) + 8LL);
  *(void *)(v234 + 1000) = v227;
  v227(v2);
  v240(v228, v229, v230);
  if (v233)
  {
    uint64_t v225 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    uint64_t v226 = DataFrame.containsColumn(_:)(v225);
    swift_bridgeObjectRelease();
    ((void (*)(void, void))v227)(*(void *)(v234 + 936), *(void *)(v234 + 896));
    if (v226)
    {
      unint64_t v221 = *(void *)(v234 + 888);
      int v215 = *(void *)(v234 + 880);
      unint64_t v220 = *(void *)(v234 + 864);
      Swift::Bool v223 = *(void *)(v234 + 856);
      uint64_t v217 = *(void *)(v234 + 848);
      uint64_t v216 = *(void *)(v234 + 832);
      uint64_t v218 = *(void *)(v234 + 824);
      unint64_t v222 = *(void **)(v234 + 816);
      uint64_t v3 = kMediaML_appName.unsafeMutableAddressor();
      uint64_t countAndFlagsBits = v3->_countAndFlagsBits;
      object = v3->_object;
      swift_bridgeObjectRetain();
      uint64_t v4 = DataFrame.subscript.getter(countAndFlagsBits, object);
      AnyColumn.distinct()(v4);
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v216 + 8);
      *(void *)(v234 + 1008) = v5;
      v5(v217, v218);
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 16);
      *(void *)(v234 + 1016) = v6;
      v6(v215, v221, v223);
      uint64_t v7 = lazy protocol witness table accessor for type AnyColumnSlice and conformance AnyColumnSlice();
      *(void *)(v234 + 1024) = v7;
      Collection<>.makeIterator()(v222, v223, v7);
      for (i = *(void *)(v234 + 976); ; i = 0LL)
      {
        IndexingIterator.next()((void *)(v234 + 16), *(void *)(v234 + 800));
        if (*(void *)(v234 + 40) == 1LL) {
          break;
        }
        outlined init with take of Any?((_OWORD *)(v234 + 16), (_OWORD *)(v234 + 48));
        uint64_t v8 = kMediaML_appName.unsafeMutableAddressor();
        uint64_t v212 = v8->_countAndFlagsBits;
        unint64_t v211 = v8->_object;
        swift_bridgeObjectRetain();
        outlined init with copy of Any?(v234 + 48, v234 + 80);
        uint64_t v213 = swift_task_alloc(32LL);
        *(void *)(v213 + 16) = v234 + 80;
        uint64_t result = DataFrame.filter<A>(on:_:_:)( v212,  v211,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.saveWiFiDataStandardDeviation());
        if (i) {
          return result;
        }
        uint64_t v209 = *(void *)(v234 + 1024);
        uint64_t v207 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 1016);
        uint64_t v203 = *(void *)(v234 + 880);
        uint64_t v206 = *(void *)(v234 + 872);
        uint64_t v204 = *(void *)(v234 + 864);
        Swift::String v210 = *(void *)(v234 + 856);
        uint64_t v208 = *(void **)(v234 + 808);
        swift_task_dealloc(v213);
        outlined destroy of Any?((void *)(v234 + 80));
        swift_bridgeObjectRelease();
        uint64_t v10 = kMediaML_ssid.unsafeMutableAddressor();
        uint64_t v202 = v10->_countAndFlagsBits;
        uint64_t v205 = v10->_object;
        swift_bridgeObjectRetain();
        uint64_t v11 = DataFrame.Slice.subscript.getter(v202, v205);
        AnyColumnSlice.distinct()(v11);
        uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
        *(void *)(v234 + 1032) = v12;
        v12(v203, v210);
        swift_bridgeObjectRelease();
        v207(v203, v206, v210);
        Collection<>.makeIterator()(v208, v210, v209);
        while (2)
        {
          IndexingIterator.next()((void *)(v234 + 112), *(void *)(v234 + 800));
          if (*(void *)(v234 + 136) != 1LL)
          {
            outlined init with take of Any?((_OWORD *)(v234 + 112), (_OWORD *)(v234 + 144));
            uint64_t v13 = kMediaML_ssid.unsafeMutableAddressor();
            int v200 = v13->_countAndFlagsBits;
            uint64_t v199 = v13->_object;
            swift_bridgeObjectRetain();
            outlined init with copy of Any?(v234 + 144, v234 + 176);
            uint64_t v201 = swift_task_alloc(32LL);
            *(void *)(v201 + 16) = v234 + 176;
            DataFrame.Slice.filter<A>(on:_:_:)( v200,  v199,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation());
            unint64_t v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 992);
            uint64_t v175 = *(void *)(v234 + 928);
            uint64_t v179 = *(void *)(v234 + 920);
            uint64_t v178 = *(void *)(v234 + 912);
            uint64_t v174 = *(void *)(v234 + 904);
            uint64_t v180 = *(void *)(v234 + 896);
            uint64_t v168 = *(void *)(v234 + 784);
            Swift::String v169 = *(void *)(v234 + 760);
            uint64_t v171 = *(void *)(v234 + 736);
            uint64_t v172 = *(void *)(v234 + 728);
            swift_task_dealloc(v201);
            outlined destroy of Any?((void *)(v234 + 176));
            swift_bridgeObjectRelease();
            uint64_t v14 = DataFrame.init(_:)(v168);
            uint64_t v170 = DataFrame.shape.getter(v14);
            *(void *)(v234 + 600) = v170;
            *(void *)(v234 + 608) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
            *(void *)(v234 + 616) = 0LL;
            uint64_t v15 = MediaMLPlugin.logger.unsafeMutableAddressor();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16))(v169, v15, v172);
            v176(v179, v175, v180);
            Swift::String v177 = *(_DWORD *)(v174 + 80);
            Swift::String v173 = (v177 + 16LL) & ~(unint64_t)v177;
            Swift::String v185 = swift_allocObject(&unk_1000663F8, v173 + v178, v177 | 7LL);
            Swift::String v181 = *(void (**)(unint64_t, uint64_t, uint64_t))(v174 + 32);
            v181(v185 + v173, v179, v180);
            v176(v179, v175, v180);
            uint64_t v187 = swift_allocObject(&unk_100066420, v173 + v178, v177 | 7LL);
            uint64_t v16 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v181)(v187 + v173, v179, v180);
            oslog = (os_log_s *)Logger.logObject.getter(v16);
            uint64_t v198 = static os_log_type_t.debug.getter();
            *(void *)(v234 + 624) = 22LL;
            uint64_t v182 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            uint64_t v183 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
            uint64_t v17 = lazy protocol witness table accessor for type Int and conformance Int();
            UnsignedInteger<>.init<A>(_:)( (void *)(v234 + 1100),  v234 + 624,  &type metadata for UInt32,  &type metadata for Int,  v182,  v183,  v17);
            uint32_t size = *(_DWORD *)(v234 + 1100);
            Swift::String v189 = swift_allocObject(&unk_100066448, 17LL, 7LL);
            *(_BYTE *)(v189 + 16) = 0;
            uint64_t v190 = swift_allocObject(&unk_100066470, 17LL, 7LL);
            *(_BYTE *)(v190 + 16) = 8;
            uint64_t v186 = swift_allocObject(&unk_100066498, 32LL, 7LL);
            *(void *)(v186 + 16) = partial apply for implicit closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation();
            *(void *)(v186 + 24) = v185;
            uint64_t v191 = swift_allocObject(&unk_1000664C0, 32LL, 7LL);
            *(void *)(v191 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
            *(void *)(v191 + 24) = v186;
            os_log_type_t v192 = swift_allocObject(&unk_1000664E8, 17LL, 7LL);
            *(_BYTE *)(v192 + 16) = 0;
            Swift::String v193 = swift_allocObject(&unk_100066510, 17LL, 7LL);
            *(_BYTE *)(v193 + 16) = 8;
            uint64_t v188 = swift_allocObject(&unk_100066538, 32LL, 7LL);
            *(void *)(v188 + 16) = partial apply for implicit closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation();
            *(void *)(v188 + 24) = v187;
            uint64_t v194 = swift_allocObject(&unk_100066560, 32LL, 7LL);
            *(void *)(v194 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
            *(void *)(v194 + 24) = v188;
            uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
            _allocateUninitializedArray<A>(_:)(6LL, v196);
            uint64_t v195 = v18;
            swift_retain(v189);
            *uint64_t v195 = closure #1 in OSLogArguments.append(_:)partial apply;
            v195[1] = v189;
            swift_retain(v190);
            v195[2] = closure #1 in OSLogArguments.append(_:)partial apply;
            v195[3] = v190;
            swift_retain(v191);
            v195[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
            v195[5] = v191;
            swift_retain(v192);
            v195[6] = closure #1 in OSLogArguments.append(_:)partial apply;
            v195[7] = v192;
            swift_retain(v193);
            v195[8] = closure #1 in OSLogArguments.append(_:)partial apply;
            v195[9] = v193;
            swift_retain(v194);
            v195[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
            v195[11] = v194;
            _finalizeUninitializedArray<A>(_:)();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(oslog, v198))
            {
              buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
              uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              uint64_t v166 = createStorage<A>(capacity:type:)(0LL, v164, v164);
              uint64_t v167 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
              *(void *)(v234 + 696) = buf;
              *(void *)(v234 + 704) = v166;
              *(void *)(v234 + 712) = v167;
              serialize(_:at:)(0LL, (_BYTE **)(v234 + 696));
              serialize(_:at:)(2LL, (_BYTE **)(v234 + 696));
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v234 + 504) = v189;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v234 + 504) = v190;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
              *(void *)(v234 + 504) = v191;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v234 + 504) = v192;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v234 + 504) = v193;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              *(void *)(v234 + 496) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
              *(void *)(v234 + 504) = v194;
              closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 496),  v234 + 696,  v234 + 704,  v234 + 712);
              _os_log_impl((void *)&_mh_execute_header, oslog, v198, "Filtered dataframe shape=%ld,%ld", buf, size);
              destroyStorage<A>(_:count:)(v166, 0LL);
              destroyStorage<A>(_:count:)(v167, 0LL);
              UnsafeMutablePointer.deallocate()();
            }

            swift_release(v189);
            swift_release(v190);
            swift_release(v191);
            swift_release(v192);
            swift_release(v193);
            swift_release(v194);
            uint64_t v162 = *(void *)(v234 + 760);
            Swift::String v161 = *(void *)(v234 + 736);
            uint64_t v163 = *(void *)(v234 + 728);

            (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v163);
            while (*(void *)(v234 + 616) < v170)
            {
              uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v234 + 1008);
              uint64_t v158 = *(void *)(v234 + 840);
              uint64_t v159 = *(void *)(v234 + 824);
              Swift::String v157 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
              swift_bridgeObjectRetain();
              DataFrame.subscript.getter(v157._countAndFlagsBits, v157._object);
              AnyColumn.subscript.getter(*(void *)(v234 + 616));
              v160(v158, v159);
              if (!*(void *)(v234 + 392)) {
                return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  646LL,  0);
              }
              outlined init with take of Any(v234 + 368, v234 + 336);
              uint64_t v19 = swift_dynamicCast( v234 + 688,  v234 + 336,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
              uint64_t v251 = *(void *)(v234 + 688);
              specialized Array.append(_:)(v19);
              uint64_t result = swift_bridgeObjectRelease();
              unsigned __int32 v20 = *(void *)(v234 + 616);
              uint64_t v156 = v20 + 1;
              if (__OFADD__(v20, 1LL)) {
                goto LABEL_53;
              }
              *(void *)(v234 + 616) = v156;
            }

            uint64_t v154 = *(void *)(v234 + 608);
            swift_bridgeObjectRetain();
            os_log_type_t v155 = specialized Array.count.getter(v154);
            *(void *)(v234 + 632) = v155;
            swift_bridgeObjectRelease();
            uint64_t result = v155;
            if (__OFSUB__(v155, 1LL))
            {
              __break(1u);
LABEL_53:
              __break(1u);
              return result;
            }

            *(void *)(v234 + 648) = v155 - 1;
            *(void *)(v234 + 656) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
            min<A>(_:_:)(v234 + 648, v234 + 656, &type metadata for Int, &protocol witness table for Int);
            uint64_t v153 = *(void *)(v234 + 640);
            *(void *)(v234 + 664) = v153;
            if (v155 <= 0) {
              goto LABEL_37;
            }
            if (v153 < 0) {
              return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
            }
            Swift::Bool v247 = 0LL;
            uint64_t v248 = v153;
            uint64_t v23 = specialized Collection<>.makeIterator()(0LL, v153);
            *(void *)(v234 + 400) = v23;
            *(void *)(v234 + 408) = v24;
            *(void *)(v234 + 416) = v25;
            *(_BYTE *)(v234 + 424) = v26 & 1;
            *(void *)(v234 + 1040) = 0LL;
            uint64_t v27 = specialized IndexingIterator.next()(v23);
            uint64_t v249 = v27;
            uint64_t v250 = v28 & 1;
            uint64_t v152 = v27;
            if ((v28 & 1) != 0)
            {
LABEL_37:
              uint64_t v143 = *(void (**)(uint64_t, uint64_t))(v234 + 1000);
              uint64_t v144 = *(void *)(v234 + 928);
              uint32_t v142 = *(void *)(v234 + 896);
              outlined destroy of [Double]((void *)(v234 + 608));
              v143(v144, v142);
              outlined destroy of Any?((void *)(v234 + 144));
              continue;
            }

            *(void *)(v234 + 672) = v27;
            outlined init with copy of Any?(v234 + 48, v234 + 240);
            if (!*(void *)(v234 + 264)) {
              return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  656LL,  0);
            }
            outlined init with take of Any(v234 + 240, v234 + 208);
            swift_dynamicCast( v234 + 432,  v234 + 208,  (char *)&type metadata for Any + 8,  &type metadata for String,  7LL);
            uint64_t v150 = *(void *)(v234 + 432);
            uint64_t v151 = *(void *)(v234 + 440);
            *(void *)(v234 + 1048) = v151;
            *(void *)(v234 + 448) = v150;
            *(void *)(v234 + 456) = v151;
            outlined init with copy of Any?(v234 + 144, v234 + 304);
            if (!*(void *)(v234 + 328)) {
              return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  657LL,  0);
            }
            uint64_t v148 = *(void *)(v234 + 984);
            uint64_t v149 = *(void *)(v234 + 960);
            outlined init with take of Any(v234 + 304, v234 + 272);
            swift_dynamicCast( v234 + 464,  v234 + 272,  (char *)&type metadata for Any + 8,  &type metadata for String,  7LL);
            uint64_t v145 = *(void *)(v234 + 464);
            uint64_t v146 = *(void *)(v234 + 472);
            *(void *)(v234 + 1056) = v146;
            *(void *)(v234 + 480) = v145;
            *(void *)(v234 + 488) = v146;
            uint64_t v147 = specialized Array.subscript.getter(v152, *(void *)(v234 + 608));
            *(double *)(v234 + 680) = v147;
            *(Swift::String *)(v234 + 1064) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO wifiStdDev (app_name, ssid, throughput_stddev, training_date) VALUES (?, ?, ?, ?)",  0x5DuLL,  1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v29 = (double *)swift_task_alloc(64LL);
            *(void *)(v234 + 1080) = v29;
            *((void *)v29 + 2) = v150;
            *((void *)v29 + 3) = v151;
            *((void *)v29 + 4) = v145;
            *((void *)v29 + 5) = v146;
            v29[6] = v147;
            *((void *)v29 + 7) = v148;
            return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), v149);
          }

          break;
        }

        uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v234 + 1032);
        uint64_t v138 = *(void *)(v234 + 872);
        uint64_t v136 = *(void *)(v234 + 856);
        uint64_t v140 = *(void *)(v234 + 792);
        uint64_t v139 = *(void *)(v234 + 776);
        uint64_t v141 = *(void *)(v234 + 768);
        outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v234 + 808));
        v137(v138, v136);
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v140, v141);
        outlined destroy of Any?((void *)(v234 + 48));
      }

      uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v234 + 992);
      uint64_t v112 = *(void *)(v234 + 952);
      uint64_t v116 = *(void *)(v234 + 920);
      uint64_t v115 = *(void *)(v234 + 912);
      uint64_t v111 = *(void *)(v234 + 904);
      uint64_t v117 = *(void *)(v234 + 896);
      MediaMLPlugin::SQLError v30 = *(void *)(v234 + 752);
      uint64_t v108 = *(void *)(v234 + 736);
      uint64_t v109 = *(void *)(v234 + 728);
      outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v234 + 816));
      MediaMLPlugin::SQLError v31 = MediaMLPlugin.logger.unsafeMutableAddressor();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16))(v30, v31, v109);
      v113(v116, v112, v117);
      uint64_t v114 = *(_DWORD *)(v111 + 80);
      uint64_t v110 = (v114 + 16LL) & ~(unint64_t)v114;
      uint64_t v122 = swift_allocObject(&unk_100066268, v110 + v115, v114 | 7LL);
      uint64_t v118 = *(void (**)(unint64_t, uint64_t, uint64_t))(v111 + 32);
      v118(v122 + v110, v116, v117);
      v113(v116, v112, v117);
      uint64_t v124 = swift_allocObject(&unk_100066290, v110 + v115, v114 | 7LL);
      MediaMLPlugin::SQLError v32 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v118)(v124 + v110, v116, v117);
      log = (os_log_s *)Logger.logObject.getter(v32);
      uint64_t v135 = static os_log_type_t.debug.getter();
      *(void *)(v234 + 592) = 22LL;
      uint64_t v119 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v120 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      uint64_t v33 = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)( (void *)(v234 + 1096),  v234 + 592,  &type metadata for UInt32,  &type metadata for Int,  v119,  v120,  v33);
      uint64_t v121 = *(_DWORD *)(v234 + 1096);
      uint64_t v126 = swift_allocObject(&unk_1000662B8, 17LL, 7LL);
      *(_BYTE *)(v126 + 16) = 0;
      uint64_t v127 = swift_allocObject(&unk_1000662E0, 17LL, 7LL);
      *(_BYTE *)(v127 + 16) = 8;
      uint64_t v123 = swift_allocObject(&unk_100066308, 32LL, 7LL);
      *(void *)(v123 + 16) = partial apply for implicit closure #5 in MediaMLPlugin.saveWiFiDataStandardDeviation();
      *(void *)(v123 + 24) = v122;
      uint64_t v128 = swift_allocObject(&unk_100066330, 32LL, 7LL);
      *(void *)(v128 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v128 + 24) = v123;
      uint64_t v129 = swift_allocObject(&unk_100066358, 17LL, 7LL);
      *(_BYTE *)(v129 + 16) = 0;
      uint64_t v130 = swift_allocObject(&unk_100066380, 17LL, 7LL);
      *(_BYTE *)(v130 + 16) = 8;
      uint64_t v125 = swift_allocObject(&unk_1000663A8, 32LL, 7LL);
      *(void *)(v125 + 16) = partial apply for implicit closure #6 in MediaMLPlugin.saveWiFiDataStandardDeviation();
      *(void *)(v125 + 24) = v124;
      uint64_t v131 = swift_allocObject(&unk_1000663D0, 32LL, 7LL);
      *(void *)(v131 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v131 + 24) = v125;
      uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)(6LL, v133);
      uint64_t v132 = v34;
      swift_retain(v126);
      *uint64_t v132 = closure #1 in OSLogArguments.append(_:)partial apply;
      v132[1] = v126;
      swift_retain(v127);
      v132[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v132[3] = v127;
      swift_retain(v128);
      v132[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v132[5] = v128;
      swift_retain(v129);
      v132[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v132[7] = v129;
      swift_retain(v130);
      v132[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v132[9] = v130;
      swift_retain(v131);
      v132[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v132[11] = v131;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v135))
      {
        uint64_t v105 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
        uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v106 = createStorage<A>(capacity:type:)(0LL, v104, v104);
        uint64_t v107 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
        uint64_t v242 = v105;
        uint64_t v243 = v106;
        uint64_t v244 = v107;
        serialize(_:at:)(0LL, &v242);
        serialize(_:at:)(2LL, &v242);
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        Swift::String v246 = v126;
        uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        if (i) {
          return result;
        }
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        Swift::String v246 = v127;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        Swift::String v246 = v128;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        Swift::String v246 = v129;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        Swift::String v246 = v130;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        uint64_t v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        Swift::String v246 = v131;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v242, (uint64_t)&v243, (uint64_t)&v244);
        _os_log_impl((void *)&_mh_execute_header, log, v135, "Returning a dataframe of size=%ld,%ld", v105, v121);
        destroyStorage<A>(_:count:)(v106, 0LL);
        destroyStorage<A>(_:count:)(v107, 0LL);
        UnsafeMutablePointer.deallocate()();
        swift_release(v126);
        swift_release(v127);
        swift_release(v128);
        swift_release(v129);
        swift_release(v130);
        swift_release(v131);
      }

      else
      {
        swift_release(v126);
        swift_release(v127);
        swift_release(v128);
        swift_release(v129);
        swift_release(v130);
        swift_release(v131);
      }

      unint64_t v85 = *(void (**)(uint64_t, uint64_t))(v234 + 1000);
      uint64_t v87 = *(void *)(v234 + 952);
      uint64_t v88 = *(void *)(v234 + 944);
      unint64_t v89 = *(void *)(v234 + 936);
      uint64_t v90 = *(void *)(v234 + 928);
      uint64_t v91 = *(void *)(v234 + 920);
      uint64_t v84 = *(void *)(v234 + 896);
      uint64_t v92 = *(void *)(v234 + 888);
      uint64_t v93 = *(void *)(v234 + 880);
      uint64_t v94 = *(void *)(v234 + 872);
      unint64_t v82 = *(void *)(v234 + 864);
      uint64_t v83 = *(void *)(v234 + 856);
      unint64_t v95 = *(void *)(v234 + 848);
      unint64_t v96 = *(void *)(v234 + 840);
      uint32_t v97 = *(void *)(v234 + 816);
      os_log_type_t v98 = *(void *)(v234 + 808);
      uint64_t v99 = *(void *)(v234 + 792);
      uint64_t v100 = *(void *)(v234 + 784);
      uint64_t v101 = *(void *)(v234 + 760);
      uint64_t v102 = *(void *)(v234 + 752);
      uint64_t v103 = *(void *)(v234 + 744);
      uint64_t v80 = *(void *)(v234 + 736);
      unint64_t v81 = *(void *)(v234 + 728);
      uint64_t v86 = *(void *)(v234 + 960);

      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v102, v81);
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v92, v83);
      v85(v87, v84);
      swift_release(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v89);
      swift_task_dealloc(v90);
      swift_task_dealloc(v91);
      swift_task_dealloc(v92);
      swift_task_dealloc(v93);
      swift_task_dealloc(v94);
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      return (*(uint64_t (**)(void))(*(void *)(v234 + 512) + 8LL))();
    }
  }

  else
  {
    ((void (*)(void, void))v227)(*(void *)(v234 + 936), *(void *)(v234 + 896));
  }

  uint64_t v35 = *(void *)(v234 + 744);
  uint64_t v72 = *(void *)(v234 + 736);
  uint64_t v73 = *(void *)(v234 + 728);
  uint64_t v36 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v35, v36, v73);
  uint64_t v78 = (os_log_s *)Logger.logObject.getter(v37);
  unint64_t v77 = static os_log_type_t.error.getter();
  *(void *)(v234 + 552) = 2LL;
  uint64_t v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v75 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v38 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)(v234 + 428),  v234 + 552,  &type metadata for UInt32,  &type metadata for Int,  v74,  v75,  v38);
  uint64_t v76 = *(_DWORD *)(v234 + 428);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v79 = _allocateUninitializedArray<A>(_:)(0LL, v39);
  if (!os_log_type_enabled(v78, v77))
  {
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }

  uint64_t v40 = *(void *)(v234 + 976);
  uint64_t v67 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v68 = createStorage<A>(capacity:type:)(0LL, v66, v66);
  uint64_t v69 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  *(void *)(v234 + 560) = v67;
  *(void *)(v234 + 568) = v68;
  *(void *)(v234 + 576) = v69;
  serialize(_:at:)(0LL, (_BYTE **)(v234 + 560));
  serialize(_:at:)(0LL, (_BYTE **)(v234 + 560));
  *(void *)(v234 + 584) = v79;
  uint64_t v70 = (void *)swift_task_alloc(48LL);
  v70[2] = v234 + 560;
  v70[3] = v234 + 568;
  v70[4] = v234 + 576;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  uint64_t v41 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v70, v71, v41);
  if (!v40)
  {
    swift_task_dealloc(v70);
    _os_log_impl( (void *)&_mh_execute_header,  v78,  v77,  "saveWiFiDataStandardDeviation: DataFrame stddevDF did not contain all required columns",  v67,  v76);
    destroyStorage<A>(_:count:)(v68, 0LL);
    destroyStorage<A>(_:count:)(v69, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
LABEL_50:
    unint64_t v47 = *(void *)(v234 + 952);
    uint64_t v48 = *(void *)(v234 + 896);
    uint64_t v44 = *(void *)(v234 + 744);
    uint64_t v43 = *(void *)(v234 + 736);
    unint64_t v45 = *(void *)(v234 + 728);
    uint64_t v49 = *(void *)(v234 + 960);

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    unint64_t v42 = lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
    uint64_t v46 = swift_allocError(&type metadata for PluginErrors, v42, 0LL, 0LL);
    swift_willThrow(v46);
    ((void (*)(uint64_t, uint64_t))v227)(v47, v48);
    swift_release(v49);
    uint64_t v50 = *(void *)(v234 + 944);
    uint64_t v51 = *(void *)(v234 + 936);
    uint64_t v52 = *(void *)(v234 + 928);
    uint64_t v53 = *(void *)(v234 + 920);
    uint64_t v54 = *(void *)(v234 + 888);
    uint64_t v55 = *(void *)(v234 + 880);
    uint64_t v56 = *(void *)(v234 + 872);
    uint64_t v57 = *(void *)(v234 + 848);
    uint64_t v58 = *(void *)(v234 + 840);
    uint64_t v59 = *(void *)(v234 + 816);
    uint64_t v60 = *(void *)(v234 + 808);
    unint64_t v61 = *(void *)(v234 + 792);
    uint64_t v62 = *(void *)(v234 + 784);
    uint64_t v63 = *(void *)(v234 + 760);
    uint64_t v64 = *(void *)(v234 + 752);
    uint64_t v65 = *(void *)(v234 + 744);
    swift_task_dealloc(*(void *)(v234 + 952));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    return (*(uint64_t (**)(void))(*(void *)(v234 + 512) + 8LL))();
  }

  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[134];
  uint64_t v2 = v0[133];
  uint64_t v3 = v0[130];
  v0[64] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation());
  v0[136] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 1080));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String *v2;
  uint64_t result;
  Swift::String *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  Swift::String *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(unint64_t, uint64_t, uint64_t);
  unint64_t v66;
  unint64_t v67;
  uint32_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  os_log_s *log;
  os_log_type_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t *buf;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(unint64_t, uint64_t, uint64_t);
  unint64_t v130;
  unint64_t v131;
  uint32_t size;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  os_log_s *oslog;
  os_log_type_t v146;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t);
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t i;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  *(void *)(v0 + 512) = v0;
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRelease();
  uint64_t v164 = *(void *)(v0 + 1088);
LABEL_25:
  *(void *)(v163 + 1040) = v164;
  uint64_t v172 = specialized IndexingIterator.next()(v1);
  Swift::String v173 = v20 & 1;
  uint64_t v100 = v172;
  if ((v20 & 1) != 0)
  {
    uint64_t v92 = v164;
LABEL_33:
    uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v163 + 1000);
    uint64_t v91 = *(void *)(v163 + 928);
    unint64_t v89 = *(void *)(v163 + 896);
    outlined destroy of [Double]((void *)(v163 + 608));
    v90(v91, v89);
    outlined destroy of Any?((void *)(v163 + 144));
    for (i = v92; ; i = 0LL)
    {
      IndexingIterator.next()((void *)(v163 + 112), *(void *)(v163 + 800));
      if (*(void *)(v163 + 136) != 1LL)
      {
        outlined init with take of Any?((_OWORD *)(v163 + 112), (_OWORD *)(v163 + 144));
        uint64_t v7 = kMediaML_ssid.unsafeMutableAddressor();
        uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
        object = v7->_object;
        swift_bridgeObjectRetain();
        outlined init with copy of Any?(v163 + 144, v163 + 176);
        uint64_t v149 = swift_task_alloc(32LL);
        *(void *)(v149 + 16) = v163 + 176;
        uint64_t result = DataFrame.Slice.filter<A>(on:_:_:)( countAndFlagsBits,  object,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation());
        if (i) {
          return result;
        }
        uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 992);
        uint64_t v123 = *(void *)(v163 + 928);
        uint64_t v127 = *(void *)(v163 + 920);
        uint64_t v126 = *(void *)(v163 + 912);
        uint64_t v122 = *(void *)(v163 + 904);
        uint64_t v128 = *(void *)(v163 + 896);
        uint64_t v116 = *(void *)(v163 + 784);
        uint64_t v117 = *(void *)(v163 + 760);
        uint64_t v119 = *(void *)(v163 + 736);
        uint64_t v120 = *(void *)(v163 + 728);
        swift_task_dealloc(v149);
        outlined destroy of Any?((void *)(v163 + 176));
        swift_bridgeObjectRelease();
        uint64_t v8 = DataFrame.init(_:)(v116);
        uint64_t v118 = DataFrame.shape.getter(v8);
        *(void *)(v163 + 600) = v118;
        *(void *)(v163 + 608) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
        *(void *)(v163 + 616) = 0LL;
        uint64_t v9 = MediaMLPlugin.logger.unsafeMutableAddressor();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v117, v9, v120);
        v124(v127, v123, v128);
        uint64_t v125 = *(_DWORD *)(v122 + 80);
        uint64_t v121 = (v125 + 16LL) & ~(unint64_t)v125;
        uint64_t v133 = swift_allocObject(&unk_1000663F8, v121 + v126, v125 | 7LL);
        uint64_t v129 = *(void (**)(unint64_t, uint64_t, uint64_t))(v122 + 32);
        v129(v133 + v121, v127, v128);
        v124(v127, v123, v128);
        uint64_t v135 = swift_allocObject(&unk_100066420, v121 + v126, v125 | 7LL);
        uint64_t v10 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v129)(v135 + v121, v127, v128);
        oslog = (os_log_s *)Logger.logObject.getter(v10);
        uint64_t v146 = static os_log_type_t.debug.getter();
        *(void *)(v163 + 624) = 22LL;
        uint64_t v130 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        uint64_t v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        uint64_t v11 = lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)( (void *)(v163 + 1100),  v163 + 624,  &type metadata for UInt32,  &type metadata for Int,  v130,  v131,  v11);
        uint32_t size = *(_DWORD *)(v163 + 1100);
        uint64_t v137 = swift_allocObject(&unk_100066448, 17LL, 7LL);
        *(_BYTE *)(v137 + 16) = 0;
        uint64_t v138 = swift_allocObject(&unk_100066470, 17LL, 7LL);
        *(_BYTE *)(v138 + 16) = 8;
        uint64_t v134 = swift_allocObject(&unk_100066498, 32LL, 7LL);
        *(void *)(v134 + 16) = partial apply for implicit closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation();
        *(void *)(v134 + 24) = v133;
        uint64_t v139 = swift_allocObject(&unk_1000664C0, 32LL, 7LL);
        *(void *)(v139 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
        *(void *)(v139 + 24) = v134;
        uint64_t v140 = swift_allocObject(&unk_1000664E8, 17LL, 7LL);
        *(_BYTE *)(v140 + 16) = 0;
        uint64_t v141 = swift_allocObject(&unk_100066510, 17LL, 7LL);
        *(_BYTE *)(v141 + 16) = 8;
        uint64_t v136 = swift_allocObject(&unk_100066538, 32LL, 7LL);
        *(void *)(v136 + 16) = partial apply for implicit closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation();
        *(void *)(v136 + 24) = v135;
        uint32_t v142 = swift_allocObject(&unk_100066560, 32LL, 7LL);
        *(void *)(v142 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
        *(void *)(v142 + 24) = v136;
        uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)(6LL, v144);
        uint64_t v143 = v12;
        swift_retain(v137);
        *uint64_t v143 = closure #1 in OSLogArguments.append(_:)partial apply;
        v143[1] = v137;
        swift_retain(v138);
        v143[2] = closure #1 in OSLogArguments.append(_:)partial apply;
        v143[3] = v138;
        swift_retain(v139);
        v143[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v143[5] = v139;
        swift_retain(v140);
        v143[6] = closure #1 in OSLogArguments.append(_:)partial apply;
        v143[7] = v140;
        swift_retain(v141);
        v143[8] = closure #1 in OSLogArguments.append(_:)partial apply;
        v143[9] = v141;
        swift_retain(v142);
        v143[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v143[11] = v142;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(oslog, v146))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
          uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v114 = createStorage<A>(capacity:type:)(0LL, v112, v112);
          uint64_t v115 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
          *(void *)(v163 + 696) = buf;
          *(void *)(v163 + 704) = v114;
          *(void *)(v163 + 712) = v115;
          serialize(_:at:)(0LL, (_BYTE **)(v163 + 696));
          serialize(_:at:)(2LL, (_BYTE **)(v163 + 696));
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v163 + 504) = v137;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v163 + 504) = v138;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
          *(void *)(v163 + 504) = v139;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v163 + 504) = v140;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v163 + 504) = v141;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          *(void *)(v163 + 496) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
          *(void *)(v163 + 504) = v142;
          closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v163 + 496),  v163 + 696,  v163 + 704,  v163 + 712);
          _os_log_impl((void *)&_mh_execute_header, oslog, v146, "Filtered dataframe shape=%ld,%ld", buf, size);
          destroyStorage<A>(_:count:)(v114, 0LL);
          destroyStorage<A>(_:count:)(v115, 0LL);
          UnsafeMutablePointer.deallocate()();
        }

        swift_release(v137);
        swift_release(v138);
        swift_release(v139);
        swift_release(v140);
        swift_release(v141);
        swift_release(v142);
        uint64_t v110 = *(void *)(v163 + 760);
        uint64_t v109 = *(void *)(v163 + 736);
        uint64_t v111 = *(void *)(v163 + 728);

        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v111);
        while (*(void *)(v163 + 616) < v118)
        {
          uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v163 + 1008);
          uint64_t v106 = *(void *)(v163 + 840);
          uint64_t v107 = *(void *)(v163 + 824);
          uint64_t v105 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
          swift_bridgeObjectRetain();
          DataFrame.subscript.getter(v105._countAndFlagsBits, v105._object);
          AnyColumn.subscript.getter(*(void *)(v163 + 616));
          v108(v106, v107);
          if (!*(void *)(v163 + 392)) {
            return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  646LL,  0);
          }
          outlined init with take of Any(v163 + 368, v163 + 336);
          uint64_t v13 = swift_dynamicCast( v163 + 688,  v163 + 336,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
          uint64_t v174 = *(void *)(v163 + 688);
          specialized Array.append(_:)(v13);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v14 = *(void *)(v163 + 616);
          uint64_t v104 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_44;
          }
          *(void *)(v163 + 616) = v104;
        }

        uint64_t v102 = *(void *)(v163 + 608);
        swift_bridgeObjectRetain();
        uint64_t v103 = specialized Array.count.getter(v102);
        *(void *)(v163 + 632) = v103;
        swift_bridgeObjectRelease();
        uint64_t result = v103;
        if (__OFSUB__(v103, 1LL))
        {
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        *(void *)(v163 + 648) = v103 - 1;
        *(void *)(v163 + 656) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
        min<A>(_:_:)(v163 + 648, v163 + 656, &type metadata for Int, &protocol witness table for Int);
        uint64_t v101 = *(void *)(v163 + 640);
        *(void *)(v163 + 664) = v101;
        if (v103 <= 0)
        {
          uint64_t v92 = 0LL;
          goto LABEL_33;
        }

        if (v101 < 0) {
          return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
        }
        uint64_t v170 = 0LL;
        uint64_t v171 = v101;
        uint64_t v1 = specialized Collection<>.makeIterator()(0LL, v101);
        *(void *)(v163 + 400) = v1;
        *(void *)(v163 + 408) = v17;
        *(void *)(v163 + 416) = v18;
        *(_BYTE *)(v163 + 424) = v19 & 1;
        uint64_t v164 = 0LL;
        goto LABEL_25;
      }

      uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v163 + 1032);
      unint64_t v85 = *(void *)(v163 + 872);
      uint64_t v83 = *(void *)(v163 + 856);
      uint64_t v87 = *(void *)(v163 + 792);
      uint64_t v86 = *(void *)(v163 + 776);
      uint64_t v88 = *(void *)(v163 + 768);
      outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v163 + 808));
      v84(v85, v83);
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
      outlined destroy of Any?((void *)(v163 + 48));
      IndexingIterator.next()((void *)(v163 + 16), *(void *)(v163 + 800));
      if (*(void *)(v163 + 40) == 1LL) {
        break;
      }
      outlined init with take of Any?((_OWORD *)(v163 + 16), (_OWORD *)(v163 + 48));
      uint64_t v2 = kMediaML_appName.unsafeMutableAddressor();
      Swift::String v161 = v2->_countAndFlagsBits;
      uint64_t v160 = v2->_object;
      swift_bridgeObjectRetain();
      outlined init with copy of Any?(v163 + 48, v163 + 80);
      uint64_t v162 = swift_task_alloc(32LL);
      *(void *)(v162 + 16) = v163 + 80;
      uint64_t result = DataFrame.filter<A>(on:_:_:)( v161,  v160,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.saveWiFiDataStandardDeviation());
      if (i) {
        return result;
      }
      Swift::String v157 = *(void *)(v163 + 1024);
      os_log_type_t v155 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 1016);
      uint64_t v151 = *(void *)(v163 + 880);
      uint64_t v154 = *(void *)(v163 + 872);
      uint64_t v152 = *(void *)(v163 + 864);
      uint64_t v158 = *(void *)(v163 + 856);
      uint64_t v156 = *(void **)(v163 + 808);
      swift_task_dealloc(v162);
      outlined destroy of Any?((void *)(v163 + 80));
      swift_bridgeObjectRelease();
      uint64_t v4 = kMediaML_ssid.unsafeMutableAddressor();
      uint64_t v150 = v4->_countAndFlagsBits;
      uint64_t v153 = v4->_object;
      swift_bridgeObjectRetain();
      uint64_t v5 = DataFrame.Slice.subscript.getter(v150, v153);
      AnyColumnSlice.distinct()(v5);
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v152 + 8);
      *(void *)(v163 + 1032) = v6;
      v6(v151, v158);
      swift_bridgeObjectRelease();
      v155(v151, v154, v158);
      Collection<>.makeIterator()(v156, v158, v157);
    }

    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 992);
    uint64_t v59 = *(void *)(v163 + 952);
    uint64_t v63 = *(void *)(v163 + 920);
    uint64_t v62 = *(void *)(v163 + 912);
    uint64_t v58 = *(void *)(v163 + 904);
    uint64_t v64 = *(void *)(v163 + 896);
    uint64_t v22 = *(void *)(v163 + 752);
    uint64_t v55 = *(void *)(v163 + 736);
    uint64_t v56 = *(void *)(v163 + 728);
    outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v163 + 816));
    uint64_t v23 = MediaMLPlugin.logger.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v22, v23, v56);
    v60(v63, v59, v64);
    unint64_t v61 = *(_DWORD *)(v58 + 80);
    uint64_t v57 = (v61 + 16LL) & ~(unint64_t)v61;
    uint64_t v69 = swift_allocObject(&unk_100066268, v57 + v62, v61 | 7LL);
    uint64_t v65 = *(void (**)(unint64_t, uint64_t, uint64_t))(v58 + 32);
    v65(v69 + v57, v63, v64);
    v60(v63, v59, v64);
    uint64_t v71 = swift_allocObject(&unk_100066290, v57 + v62, v61 | 7LL);
    unsigned __int32 v24 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v65)(v71 + v57, v63, v64);
    log = (os_log_s *)Logger.logObject.getter(v24);
    unint64_t v82 = static os_log_type_t.debug.getter();
    *(void *)(v163 + 592) = 22LL;
    uint64_t v66 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v67 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v25 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v163 + 1096),  v163 + 592,  &type metadata for UInt32,  &type metadata for Int,  v66,  v67,  v25);
    uint64_t v68 = *(_DWORD *)(v163 + 1096);
    uint64_t v73 = swift_allocObject(&unk_1000662B8, 17LL, 7LL);
    *(_BYTE *)(v73 + 16) = 0;
    uint64_t v74 = swift_allocObject(&unk_1000662E0, 17LL, 7LL);
    *(_BYTE *)(v74 + 16) = 8;
    uint64_t v70 = swift_allocObject(&unk_100066308, 32LL, 7LL);
    *(void *)(v70 + 16) = partial apply for implicit closure #5 in MediaMLPlugin.saveWiFiDataStandardDeviation();
    *(void *)(v70 + 24) = v69;
    uint64_t v75 = swift_allocObject(&unk_100066330, 32LL, 7LL);
    *(void *)(v75 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v75 + 24) = v70;
    uint64_t v76 = swift_allocObject(&unk_100066358, 17LL, 7LL);
    *(_BYTE *)(v76 + 16) = 0;
    unint64_t v77 = swift_allocObject(&unk_100066380, 17LL, 7LL);
    *(_BYTE *)(v77 + 16) = 8;
    uint64_t v72 = swift_allocObject(&unk_1000663A8, 32LL, 7LL);
    *(void *)(v72 + 16) = partial apply for implicit closure #6 in MediaMLPlugin.saveWiFiDataStandardDeviation();
    *(void *)(v72 + 24) = v71;
    uint64_t v78 = swift_allocObject(&unk_1000663D0, 32LL, 7LL);
    *(void *)(v78 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v78 + 24) = v72;
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)(6LL, v80);
    uint64_t v79 = v26;
    swift_retain(v73);
    *uint64_t v79 = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[1] = v73;
    swift_retain(v74);
    v79[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[3] = v74;
    swift_retain(v75);
    v79[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v79[5] = v75;
    swift_retain(v76);
    v79[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[7] = v76;
    swift_retain(v77);
    v79[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[9] = v77;
    swift_retain(v78);
    v79[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v79[11] = v78;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v82))
    {
      uint64_t v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v53 = createStorage<A>(capacity:type:)(0LL, v51, v51);
      uint64_t v54 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      Swift::String v165 = v52;
      uint64_t v166 = v53;
      uint64_t v167 = v54;
      serialize(_:at:)(0LL, &v165);
      serialize(_:at:)(2LL, &v165);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      Swift::String v169 = v73;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      if (i) {
        return result;
      }
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      Swift::String v169 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      Swift::String v169 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      Swift::String v169 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      Swift::String v169 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      uint64_t v168 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      Swift::String v169 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v168, (uint64_t)&v165, (uint64_t)&v166, (uint64_t)&v167);
      _os_log_impl((void *)&_mh_execute_header, log, v82, "Returning a dataframe of size=%ld,%ld", v52, v68);
      destroyStorage<A>(_:count:)(v53, 0LL);
      destroyStorage<A>(_:count:)(v54, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v73);
      swift_release(v74);
      swift_release(v75);
      swift_release(v76);
      swift_release(v77);
      swift_release(v78);
    }

    else
    {
      swift_release(v73);
      swift_release(v74);
      swift_release(v75);
      swift_release(v76);
      swift_release(v77);
      swift_release(v78);
    }

    MediaMLPlugin::SQLError v32 = *(void (**)(uint64_t, uint64_t))(v163 + 1000);
    char v34 = *(void *)(v163 + 952);
    uint64_t v35 = *(void *)(v163 + 944);
    uint64_t v36 = *(void *)(v163 + 936);
    uint64_t v37 = *(void *)(v163 + 928);
    uint64_t v38 = *(void *)(v163 + 920);
    MediaMLPlugin::SQLError v31 = *(void *)(v163 + 896);
    uint64_t v39 = *(void *)(v163 + 888);
    uint64_t v40 = *(void *)(v163 + 880);
    uint64_t v41 = *(void *)(v163 + 872);
    uint64_t v29 = *(void *)(v163 + 864);
    MediaMLPlugin::SQLError v30 = *(void *)(v163 + 856);
    unint64_t v42 = *(void *)(v163 + 848);
    uint64_t v43 = *(void *)(v163 + 840);
    uint64_t v44 = *(void *)(v163 + 816);
    unint64_t v45 = *(void *)(v163 + 808);
    uint64_t v46 = *(void *)(v163 + 792);
    unint64_t v47 = *(void *)(v163 + 784);
    uint64_t v48 = *(void *)(v163 + 760);
    uint64_t v49 = *(void *)(v163 + 752);
    uint64_t v50 = *(void *)(v163 + 744);
    uint64_t v27 = *(void *)(v163 + 736);
    uint64_t v28 = *(void *)(v163 + 728);
    uint64_t v33 = *(void *)(v163 + 960);

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v49, v28);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v39, v30);
    v32(v34, v31);
    swift_release(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(void))(*(void *)(v163 + 512) + 8LL))();
  }

  else
  {
    *(void *)(v163 + 672) = v172;
    outlined init with copy of Any?(v163 + 48, v163 + 240);
    if (*(void *)(v163 + 264))
    {
      outlined init with take of Any(v163 + 240, v163 + 208);
      swift_dynamicCast(v163 + 432, v163 + 208, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      os_log_type_t v98 = *(void *)(v163 + 432);
      uint64_t v99 = *(void *)(v163 + 440);
      *(void *)(v163 + 1048) = v99;
      *(void *)(v163 + 448) = v98;
      *(void *)(v163 + 456) = v99;
      outlined init with copy of Any?(v163 + 144, v163 + 304);
      if (*(void *)(v163 + 328))
      {
        unint64_t v96 = *(void *)(v163 + 984);
        uint32_t v97 = *(void *)(v163 + 960);
        outlined init with take of Any(v163 + 304, v163 + 272);
        swift_dynamicCast(v163 + 464, v163 + 272, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        uint64_t v93 = *(void *)(v163 + 464);
        uint64_t v94 = *(void *)(v163 + 472);
        *(void *)(v163 + 1056) = v94;
        *(void *)(v163 + 480) = v93;
        *(void *)(v163 + 488) = v94;
        unint64_t v95 = specialized Array.subscript.getter(v100, *(void *)(v163 + 608));
        *(double *)(v163 + 680) = v95;
        *(Swift::String *)(v163 + 1064) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO wifiStdDev (app_name, ssid, throughput_stddev, training_date) VA LUES (?, ?, ?, ?)",  0x5DuLL,  1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v21 = (double *)swift_task_alloc(64LL);
        *(void *)(v163 + 1080) = v21;
        *((void *)v21 + 2) = v98;
        *((void *)v21 + 3) = v99;
        *((void *)v21 + 4) = v93;
        *((void *)v21 + 5) = v94;
        v21[6] = v95;
        *((void *)v21 + 7) = v96;
        return swift_task_switch(MediaMLPlugin.saveWiFiDataStandardDeviation(), v97);
      }

      else
      {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  657LL,  0);
      }
    }

    else
    {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  656LL,  0);
    }
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v1 = v0[120];
  v0[64] = v0;
  swift_release(v1);
  uint64_t v3 = v0[118];
  uint64_t v4 = v0[117];
  uint64_t v5 = v0[116];
  uint64_t v6 = v0[115];
  uint64_t v7 = v0[111];
  uint64_t v8 = v0[110];
  uint64_t v9 = v0[109];
  uint64_t v10 = v0[106];
  uint64_t v11 = v0[105];
  uint64_t v12 = v0[102];
  uint64_t v13 = v0[101];
  uint64_t v14 = v0[99];
  uint64_t v15 = v0[98];
  uint64_t v16 = v0[95];
  uint64_t v17 = v0[94];
  uint64_t v18 = v0[93];
  swift_task_dealloc(v0[119]);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0[64] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v1 = v0[135];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[129];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[125];
  uint64_t v16 = v0[120];
  uint64_t v13 = v0[119];
  uint64_t v3 = v0[116];
  uint64_t v14 = v0[112];
  uint64_t v12 = v0[111];
  uint64_t v5 = v0[109];
  uint64_t v10 = v0[107];
  uint64_t v9 = v0[102];
  uint64_t v4 = v0[101];
  uint64_t v7 = v0[99];
  uint64_t v6 = v0[97];
  uint64_t v8 = v0[96];
  v0[64] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [Double](v0 + 76);
  v15(v3, v14);
  outlined destroy of Any?(v0 + 18);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v4);
  v11(v5, v10);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  outlined destroy of Any?(v0 + 6);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v9);
  v11(v12, v10);
  v15(v13, v14);
  swift_release(v16);
  uint64_t v17 = v0[118];
  uint64_t v18 = v0[117];
  uint64_t v19 = v0[116];
  unsigned __int32 v20 = v0[115];
  uint64_t v21 = v0[111];
  uint64_t v22 = v0[110];
  uint64_t v23 = v0[109];
  unsigned __int32 v24 = v0[106];
  uint64_t v25 = v0[105];
  uint64_t v26 = v0[102];
  uint64_t v27 = v0[101];
  uint64_t v28 = v0[99];
  uint64_t v29 = v0[98];
  MediaMLPlugin::SQLError v30 = v0[95];
  MediaMLPlugin::SQLError v31 = v0[94];
  MediaMLPlugin::SQLError v32 = v0[93];
  swift_task_dealloc(v0[119]);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0[64] + 8LL))();
}

void MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  uint64_t v1 = *(void **)(v0 + 720);
  *(void *)(v0 + 512) = v0;
  uint64_t v28 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.saveWiFiDataStandardDeviation(),  0LL,  v28,  v2,  v2);
  swift_release(v28);
  uint64_t v26 = v27[66];
  v27[120] = v26;
  if (v26)
  {
    v27[67] = v26;
    uint64_t v3 = (void *)swift_task_alloc(dword_100068C2C);
    v27[121] = v3;
    *uint64_t v3 = v27[64];
    v3[1] = MediaMLPlugin.saveWiFiDataStandardDeviation();
    MediaMLPlugin.getWiFiDataStandardDeviation()(v27[119]);
  }

  else
  {
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v29 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v4);
    unsigned __int32 code = v29.code;
    uint64_t desc_8 = v29.desc.value._countAndFlagsBits;
    object = v29.desc.value._object;
    unint64_t v5 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v5, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = code;
    *(void *)(v6 + 8) = desc_8;
    *(void *)(v6 + 16) = object;
    swift_willThrow(code);
    uint64_t v10 = v27[118];
    uint64_t v11 = v27[117];
    uint64_t v12 = v27[116];
    uint64_t v13 = v27[115];
    uint64_t v14 = v27[111];
    uint64_t v15 = v27[110];
    uint64_t v16 = v27[109];
    uint64_t v17 = v27[106];
    uint64_t v18 = v27[105];
    uint64_t v19 = v27[102];
    uint64_t v20 = v27[101];
    uint64_t v21 = v27[99];
    uint64_t v22 = v27[98];
    uint64_t v23 = v27[95];
    uint64_t v24 = v27[94];
    uint64_t v25 = v27[93];
    swift_task_dealloc(v27[119]);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    (*(void (**)(void))(v27[64] + 8LL))();
  }

void *closure #1 in MediaMLPlugin.saveWiFiDataStandardDeviation()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.saveWiFiDataStandardDeviation()(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  634LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  638LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t implicit closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return v0;
}

uint64_t closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(4LL, v18);
  uint64_t v16 = v8;
  swift_bridgeObjectRetain();
  *(void *)(v16 + 24) = &type metadata for String;
  *(void *)(v16 + 32) = &protocol witness table for String;
  *(void *)uint64_t v16 = a2;
  *(void *)(v16 + 8) = a3;
  swift_bridgeObjectRetain();
  *(void *)(v16 + 64) = &type metadata for String;
  *(void *)(v16 + 72) = &protocol witness table for String;
  *(void *)(v16 + 40) = a4;
  *(void *)(v16 + 48) = a5;
  *(void *)(v16 + 104) = &type metadata for Double;
  *(void *)(v16 + 112) = &protocol witness table for Double;
  *(double *)(v16 + 80) = a7;
  *(void *)(v16 + 144) = &type metadata for Int;
  *(void *)(v16 + 152) = &protocol witness table for Int;
  *(void *)(v16 + 120) = a6;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v19) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #5 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #6 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return v0;
}

uint64_t MediaMLPlugin.getWiFiDataStandardDeviation()(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  void v2[3] = v1;
  return swift_task_switch(MediaMLPlugin.getWiFiDataStandardDeviation(), 0LL);
}

void MediaMLPlugin.getWiFiDataStandardDeviation()()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getWiFiDataStandardDeviation(),  0LL,  v11,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 80) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "WITH CTE as (SELECT app_name, ssid, AVG(throughput_true) AS throughput_mean FROM pr ocessedwifi GROUP BY app_name, ssid, session_id)\n SELECT app_name, ssid, AVG(throughput_mean*throughput_mean)-(AVG(throughput_mean)*A VG(throughput_mean)) AS throughput_var\n FROM CTE\n GROUP BY app_name, ssid",  0x11EuLL,  1);
    swift_task_switch(MediaMLPlugin.getWiFiDataStandardDeviation(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.getWiFiDataStandardDeviation()()
{
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[2] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)( v4,  v3,  (void (*)(void))closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation());
  v0[13] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getWiFiDataStandardDeviation(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getWiFiDataStandardDeviation(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[10];
  v0[2] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[6] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getWiFiDataStandardDeviation()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v64 = 0LL;
  uint64_t v63 = 0LL;
  unint64_t v47 = &v62;
  uint64_t v62 = 0LL;
  uint64_t v48 = &v61;
  uint64_t v61 = 0LL;
  uint64_t v49 = &v60;
  uint64_t v60 = 0LL;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v34 = *(void *)(v33 - 8);
  unint64_t v35 = (*(void *)(v34 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v11 - v35;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v38 = *(void *)(v37 - 8);
  unint64_t v39 = (*(void *)(v38 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v11 - v39;
  uint64_t v46 = 0LL;
  uint64_t v41 = type metadata accessor for DataFrame(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  unint64_t v43 = (*(void *)(v42 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v46);
  uint64_t v44 = (char *)&v11 - v43;
  uint64_t v64 = (char *)&v11 - v43;
  uint64_t v63 = a1;
  unint64_t v45 = &type metadata for String;
  uint64_t v62 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v61 = _allocateUninitializedArray<A>(_:)(v46, v45);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v46, &type metadata for Double);
  uint64_t v5 = v50;
  uint64_t v60 = v4;
  uint64_t v54 = v47;
  uint64_t v55 = v48;
  uint64_t v56 = v49;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), char *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation(),  v53);
  uint64_t v51 = v5;
  uint64_t v52 = v5;
  if (v5)
  {
    uint64_t v11 = v52;
    outlined destroy of [Double](&v60);
    outlined destroy of [String](&v61);
    uint64_t result = &v62;
    outlined destroy of [String](&v62);
  }

  else
  {
    DataFrame.init()(v6);
    uint64_t v7 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
    object = v7->_object;
    swift_bridgeObjectRetain();
    MediaMLPlugin::SQLError v31 = &v62;
    uint64_t v12 = v62;
    swift_bridgeObjectRetain();
    uint64_t v14 = &v59;
    uint64_t v59 = v12;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v20 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v21 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v14);
    DataFrame.append<A>(column:)(v40, v21);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v38 + 8);
    v22(v40, v37);
    uint64_t v8 = kMediaML_ssid.unsafeMutableAddressor();
    uint64_t v16 = v8->_countAndFlagsBits;
    uint64_t v18 = v8->_object;
    swift_bridgeObjectRetain();
    MediaMLPlugin::SQLError v30 = &v61;
    uint64_t v17 = v61;
    swift_bridgeObjectRetain();
    uint64_t v58 = v17;
    Column.init<A>(name:contents:)(v16, v18, &v58);
    DataFrame.append<A>(column:)(v40, v21);
    v22(v40, v37);
    uint64_t v9 = kMediaML_throughputStdDev.unsafeMutableAddressor();
    uint64_t v27 = v9->_countAndFlagsBits;
    uint64_t v24 = v9->_object;
    swift_bridgeObjectRetain();
    MediaMLPlugin::SQLError v29 = &v60;
    uint64_t v23 = v60;
    swift_bridgeObjectRetain();
    uint64_t v25 = &v57;
    uint64_t v57 = v23;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v28 = &type metadata for Double;
    Column.init<A>(name:contents:)(v27, v24, v25);
    DataFrame.append<A>(column:)(v36, v28);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v32, v44, v41);
    outlined destroy of [Double](v29);
    outlined destroy of [String](v30);
    uint64_t result = v31;
    outlined destroy of [String](v31);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation()(uint64_t a1)
{
  if (v19)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v18)
    {
      SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized Array.append(_:)();
      specialized Array.append(_:)(v8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssid not of type String", 0x17uLL, 1);
      MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 code = v21.code;
      uint64_t countAndFlagsBits = v21.desc.value._countAndFlagsBits;
      object = v21.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v12 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = code;
      *(void *)(v7 + 8) = countAndFlagsBits;
      *(void *)(v7 + 16) = object;
      swift_willThrow(code);
      swift_bridgeObjectRelease();
      return v12;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name not of type String", 0x1BuLL, 1);
    MediaMLPlugin::SQLError v20 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v15 = v20.code;
    uint64_t desc_8 = v20.desc.value._countAndFlagsBits;
    uint64_t v14 = v20.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v15;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v14;
    swift_willThrow(v15);
    return v16;
  }

uint64_t MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t a1)
{
  *(void *)(v2 + 912) = v1;
  *(void *)(v2 + 904) = a1;
  *(void *)(v2 + 672) = v2;
  *(void *)(v2 + 680) = 0LL;
  *(void *)(v2 + 688) = 0LL;
  *(void *)(v2 + 704) = 0LL;
  *(void *)(v2 + 752) = 0LL;
  *(void *)(v2 + 768) = 0LL;
  *(void *)(v2 + 776) = 0LL;
  *(void *)(v2 + 784) = 0LL;
  *(void *)(v2 + 800) = 0LL;
  *(void *)(v2 + 832) = 0LL;
  *(void *)(v2 + 560) = 0LL;
  *(void *)(v2 + 568) = 0LL;
  *(void *)(v2 + 576) = 0LL;
  *(_BYTE *)(v2 + 584) = 0;
  *(void *)(v2 + 840) = 0LL;
  *(void *)(v2 + 608) = 0LL;
  *(void *)(v2 + 616) = 0LL;
  *(void *)(v2 + 640) = 0LL;
  *(void *)(v2 + 648) = 0LL;
  *(void *)(v2 + 856) = 0LL;
  *(void *)(v2 + 864) = 0LL;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  *(void *)(v2 + 920) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 928) = v4;
  uint64_t v15 = *(void *)(v4 + 64);
  *(void *)(v2 + 936) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 944) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 952) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DataFrame.Slice(0LL);
  *(void *)(v2 + 960) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v2 + 968) = v6;
  uint64_t v16 = *(void *)(v6 + 64);
  *(void *)(v2 + 976) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 984) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 992) = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<AnyColumnSlice>);
  *(void *)(v2 + 1000) = v7;
  uint64_t v17 = *(void *)(*(void *)(v7 - 8) + 64LL);
  *(void *)(v2 + 1008) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1016) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1024) = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AnyColumn(0LL);
  *(void *)(v2 + 1032) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v2 + 1040) = v9;
  uint64_t v18 = *(void *)(v9 + 64);
  *(void *)(v2 + 1048) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1056) = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AnyColumnSlice(0LL);
  *(void *)(v2 + 1064) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v2 + 1072) = v11;
  uint64_t v19 = *(void *)(v11 + 64);
  *(void *)(v2 + 1080) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1088) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1096) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1104) = swift_task_alloc((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DataFrame(0LL);
  *(void *)(v2 + 1112) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v2 + 1120) = v13;
  uint64_t v20 = *(void *)(v13 + 64);
  *(void *)(v2 + 1128) = v20;
  *(void *)(v2 + 1136) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1144) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1152) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1160) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1168) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 1176) = swift_task_alloc((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + 680) = a1;
  *(void *)(v2 + 688) = v1;
  return swift_task_switch(MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:), 0LL);
}

void MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  uint64_t v1 = *(void **)(v0 + 912);
  *(void *)(v0 + 672) = v0;
  uint64_t v282 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:),  0LL,  v282,  v2,  v2);
  swift_release(v282);
  uint64_t v280 = *(void *)(v281 + 696);
  *(void *)(v281 + 1184) = v280;
  if (!v280)
  {
    Swift::String v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v293 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v46);
    unsigned __int32 code = v293.code;
    uint64_t desc_8 = v293.desc.value._countAndFlagsBits;
    object = v293.desc.value._object;
    unint64_t v47 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v47, 0LL, 0LL);
    *(_DWORD *)uint64_t v48 = code;
    *(void *)(v48 + 8) = desc_8;
    *(void *)(v48 + 16) = object;
    swift_willThrow(code);
LABEL_55:
    uint64_t v49 = *(void *)(v281 + 1168);
    uint64_t v50 = *(void *)(v281 + 1160);
    uint64_t v51 = *(void *)(v281 + 1152);
    uint64_t v52 = *(void *)(v281 + 1144);
    uint64_t v53 = *(void *)(v281 + 1136);
    uint64_t v54 = *(void *)(v281 + 1104);
    uint64_t v55 = *(void *)(v281 + 1096);
    uint64_t v56 = *(void *)(v281 + 1088);
    uint64_t v57 = *(void *)(v281 + 1080);
    uint64_t v58 = *(void *)(v281 + 1056);
    uint64_t v59 = *(void *)(v281 + 1048);
    uint64_t v60 = *(void *)(v281 + 1024);
    uint64_t v61 = *(void *)(v281 + 1016);
    uint64_t v62 = *(void *)(v281 + 1008);
    uint64_t v63 = *(void *)(v281 + 992);
    uint64_t v64 = *(void *)(v281 + 984);
    uint64_t v65 = *(void *)(v281 + 976);
    uint64_t v66 = *(void *)(v281 + 952);
    uint64_t v67 = *(void *)(v281 + 944);
    uint64_t v68 = *(void *)(v281 + 936);
    swift_task_dealloc(*(void *)(v281 + 1176));
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    (*(void (**)(void))(*(void *)(v281 + 672) + 8LL))();
    return;
  }

  uint64_t v275 = *(void *)(v281 + 1176);
  uint64_t v274 = *(void *)(v281 + 1120);
  uint64_t v277 = *(void *)(v281 + 1112);
  uint64_t v276 = *(void *)(v281 + 904);
  *(void *)(v281 + 704) = v280;
  Swift::String v273 = *kMediaML_appName.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::Bool v279 = DataFrame.containsColumn(_:)(v273);
  swift_bridgeObjectRelease();
  uint64_t v278 = *(void (**)(uint64_t, uint64_t, uint64_t))(v274 + 16);
  *(void *)(v281 + 1192) = v278;
  v278(v275, v276, v277);
  if (v279)
  {
    Swift::String v270 = *kMediaML_carrier.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v271 = DataFrame.containsColumn(_:)(v270);
    swift_bridgeObjectRelease();
    Swift::Bool v272 = v271;
  }

  else
  {
    Swift::Bool v272 = 0;
  }

  uint64_t v3 = *(void *)(v281 + 1176);
  uint64_t v267 = *(void *)(v281 + 1168);
  uint64_t v269 = *(void *)(v281 + 1112);
  uint64_t v268 = *(void *)(v281 + 904);
  uint64_t v266 = *(void (**)(uint64_t))(*(void *)(v281 + 1120) + 8LL);
  *(void *)(v281 + 1200) = v266;
  v266(v3);
  v278(v267, v268, v269);
  if (v272)
  {
    Swift::String v263 = *kMediaML_bars.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    Swift::Bool v264 = DataFrame.containsColumn(_:)(v263);
    swift_bridgeObjectRelease();
    Swift::Bool v265 = v264;
  }

  else
  {
    Swift::Bool v265 = 0;
  }

  uint64_t v260 = *(void *)(v281 + 1160);
  uint64_t v262 = *(void *)(v281 + 1112);
  uint64_t v261 = *(void *)(v281 + 904);
  v266(*(void *)(v281 + 1168));
  v278(v260, v261, v262);
  if (!v265)
  {
    ((void (*)(void, void))v266)(*(void *)(v281 + 1160), *(void *)(v281 + 1112));
LABEL_51:
    uint64_t v39 = *(void *)(v281 + 936);
    uint64_t v82 = *(void *)(v281 + 928);
    uint64_t v83 = *(void *)(v281 + 920);
    uint64_t v40 = MediaMLPlugin.logger.unsafeMutableAddressor();
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v39, v40, v83);
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v87 = static os_log_type_t.error.getter();
    *(void *)(v281 + 712) = 2LL;
    unint64_t v84 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v85 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v42 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v281 + 588),  v281 + 712,  &type metadata for UInt32,  &type metadata for Int,  v84,  v85,  v42);
    uint32_t v86 = *(_DWORD *)(v281 + 588);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v89 = _allocateUninitializedArray<A>(_:)(0LL, v43);
    if (os_log_type_enabled(v88, v87))
    {
      unint64_t v77 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v78 = createStorage<A>(capacity:type:)(0LL, v76, v76);
      uint64_t v79 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v281 + 720) = v77;
      *(void *)(v281 + 728) = v78;
      *(void *)(v281 + 736) = v79;
      serialize(_:at:)(0LL, (_BYTE **)(v281 + 720));
      serialize(_:at:)(0LL, (_BYTE **)(v281 + 720));
      *(void *)(v281 + 744) = v89;
      uint64_t v80 = (void *)swift_task_alloc(48LL);
      v80[2] = v281 + 720;
      v80[3] = v281 + 728;
      v80[4] = v281 + 736;
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      unint64_t v44 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v80, v81, v44);
      swift_task_dealloc(v80);
      _os_log_impl( (void *)&_mh_execute_header,  v88,  v87,  "saveCellDataStandardDeviation: DataFrame did not contain all required columns",  v77,  v86);
      destroyStorage<A>(_:count:)(v78, 0LL);
      destroyStorage<A>(_:count:)(v79, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_bridgeObjectRelease();
    uint64_t v73 = *(void *)(v281 + 936);
    uint64_t v72 = *(void *)(v281 + 928);
    uint64_t v74 = *(void *)(v281 + 920);

    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v74);
    unint64_t v45 = lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
    uint64_t v75 = swift_allocError(&type metadata for PluginErrors, v45, 0LL, 0LL);
    swift_willThrow(v75);
    swift_release(v280);
    goto LABEL_55;
  }

  Swift::String v258 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Swift::Bool v259 = DataFrame.containsColumn(_:)(v258);
  swift_bridgeObjectRelease();
  ((void (*)(void, void))v266)(*(void *)(v281 + 1160), *(void *)(v281 + 1112));
  if (!v259) {
    goto LABEL_51;
  }
  uint64_t v255 = *(void *)(v281 + 1104);
  uint64_t v249 = *(void *)(v281 + 1096);
  uint64_t v254 = *(void *)(v281 + 1072);
  uint64_t v257 = *(void *)(v281 + 1064);
  uint64_t v251 = *(void *)(v281 + 1056);
  uint64_t v250 = *(void *)(v281 + 1040);
  uint64_t v252 = *(void *)(v281 + 1032);
  uint64_t v256 = *(void **)(v281 + 1024);
  Swift::Int DateIn = getDateInEpoch()();
  *(void *)(v281 + 1208) = DateIn;
  *(void *)(v281 + 752) = DateIn;
  uint64_t v5 = kMediaML_appName.unsafeMutableAddressor();
  uint64_t countAndFlagsBits = v5->_countAndFlagsBits;
  Swift::String v253 = v5->_object;
  swift_bridgeObjectRetain();
  uint64_t v6 = DataFrame.subscript.getter(countAndFlagsBits, v253);
  AnyColumn.distinct()(v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v250 + 8);
  *(void *)(v281 + 1216) = v7;
  v7(v251, v252);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v254 + 16);
  *(void *)(v281 + 1224) = v8;
  v8(v249, v255, v257);
  unint64_t v9 = lazy protocol witness table accessor for type AnyColumnSlice and conformance AnyColumnSlice();
  *(void *)(v281 + 1232) = v9;
  Collection<>.makeIterator()(v256, v257, v9);
LABEL_13:
  IndexingIterator.next()((void *)(v281 + 16), *(void *)(v281 + 1000));
  if (*(void *)(v281 + 40) == 1LL)
  {
    uint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v281 + 1192);
    uint64_t v128 = *(void *)(v281 + 1136);
    uint64_t v127 = *(void *)(v281 + 1128);
    uint64_t v123 = *(void *)(v281 + 1120);
    uint64_t v129 = *(void *)(v281 + 1112);
    uint64_t v34 = *(void *)(v281 + 944);
    uint64_t v120 = *(void *)(v281 + 928);
    uint64_t v121 = *(void *)(v281 + 920);
    uint64_t v124 = *(void *)(v281 + 904);
    outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v281 + 1024));
    uint64_t v35 = MediaMLPlugin.logger.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v34, v35, v121);
    v125(v128, v124, v129);
    int v126 = *(_DWORD *)(v123 + 80);
    unint64_t v122 = (v126 + 16LL) & ~(unint64_t)v126;
    uint64_t v134 = swift_allocObject(&unk_100066588, v122 + v127, v126 | 7LL);
    uint64_t v130 = *(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 32);
    v130(v134 + v122, v128, v129);
    v125(v128, v124, v129);
    uint64_t v136 = swift_allocObject(&unk_1000665B0, v122 + v127, v126 | 7LL);
    uint64_t v36 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v130)(v136 + v122, v128, v129);
    log = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v147 = static os_log_type_t.debug.getter();
    *(void *)(v281 + 760) = 22LL;
    unint64_t v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v132 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v37 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v281 + 1304),  v281 + 760,  &type metadata for UInt32,  &type metadata for Int,  v131,  v132,  v37);
    uint32_t v133 = *(_DWORD *)(v281 + 1304);
    uint64_t v138 = swift_allocObject(&unk_1000665D8, 17LL, 7LL);
    *(_BYTE *)(v138 + 16) = 0;
    uint64_t v139 = swift_allocObject(&unk_100066600, 17LL, 7LL);
    *(_BYTE *)(v139 + 16) = 8;
    uint64_t v135 = swift_allocObject(&unk_100066628, 32LL, 7LL);
    *(void *)(v135 + 16) = partial apply for implicit closure #6 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v135 + 24) = v134;
    uint64_t v140 = swift_allocObject(&unk_100066650, 32LL, 7LL);
    *(void *)(v140 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v140 + 24) = v135;
    uint64_t v141 = swift_allocObject(&unk_100066678, 17LL, 7LL);
    *(_BYTE *)(v141 + 16) = 0;
    uint64_t v142 = swift_allocObject(&unk_1000666A0, 17LL, 7LL);
    *(_BYTE *)(v142 + 16) = 8;
    uint64_t v137 = swift_allocObject(&unk_1000666C8, 32LL, 7LL);
    *(void *)(v137 + 16) = partial apply for implicit closure #7 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v137 + 24) = v136;
    uint64_t v143 = swift_allocObject(&unk_1000666F0, 32LL, 7LL);
    *(void *)(v143 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v143 + 24) = v137;
    uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)(6LL, v145);
    uint64_t v144 = v38;
    swift_retain(v138);
    *uint64_t v144 = closure #1 in OSLogArguments.append(_:)partial apply;
    v144[1] = v138;
    swift_retain(v139);
    v144[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v144[3] = v139;
    swift_retain(v140);
    v144[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v144[5] = v140;
    swift_retain(v141);
    v144[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v144[7] = v141;
    swift_retain(v142);
    v144[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v144[9] = v142;
    swift_retain(v143);
    v144[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v144[11] = v143;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v147))
    {
      uint64_t v117 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v118 = createStorage<A>(capacity:type:)(0LL, v116, v116);
      uint64_t v119 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      uint64_t v283 = v117;
      uint64_t v284 = v118;
      uint64_t v285 = v119;
      serialize(_:at:)(0LL, &v283);
      serialize(_:at:)(2LL, &v283);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v287 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v287 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      uint64_t v287 = v140;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v287 = v141;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v287 = v142;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      Swift::String v286 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      uint64_t v287 = v143;
      closure #1 in osLogInternal(_:log:type:)(&v286, (uint64_t)&v283, (uint64_t)&v284, (uint64_t)&v285);
      _os_log_impl((void *)&_mh_execute_header, log, v147, "Returning a dataframe of size=%ld,%ld", v117, v133);
      destroyStorage<A>(_:count:)(v118, 0LL);
      destroyStorage<A>(_:count:)(v119, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v138);
      swift_release(v139);
      swift_release(v140);
      swift_release(v141);
      swift_release(v142);
      swift_release(v143);
    }

    else
    {
      swift_release(v138);
      swift_release(v139);
      swift_release(v140);
      swift_release(v141);
      swift_release(v142);
      swift_release(v143);
    }

    uint64_t v95 = *(void *)(v281 + 1176);
    uint64_t v96 = *(void *)(v281 + 1168);
    uint64_t v97 = *(void *)(v281 + 1160);
    uint64_t v98 = *(void *)(v281 + 1152);
    uint64_t v99 = *(void *)(v281 + 1144);
    uint64_t v100 = *(void *)(v281 + 1136);
    uint64_t v101 = *(void *)(v281 + 1104);
    uint64_t v102 = *(void *)(v281 + 1096);
    uint64_t v103 = *(void *)(v281 + 1088);
    uint64_t v104 = *(void *)(v281 + 1080);
    uint64_t v92 = *(void *)(v281 + 1072);
    uint64_t v93 = *(void *)(v281 + 1064);
    uint64_t v105 = *(void *)(v281 + 1056);
    uint64_t v106 = *(void *)(v281 + 1048);
    uint64_t v107 = *(void *)(v281 + 1024);
    uint64_t v108 = *(void *)(v281 + 1016);
    uint64_t v109 = *(void *)(v281 + 1008);
    uint64_t v110 = *(void *)(v281 + 992);
    uint64_t v111 = *(void *)(v281 + 984);
    uint64_t v112 = *(void *)(v281 + 976);
    uint64_t v113 = *(void *)(v281 + 952);
    uint64_t v114 = *(void *)(v281 + 944);
    uint64_t v115 = *(void *)(v281 + 936);
    uint64_t v90 = *(void *)(v281 + 928);
    uint64_t v91 = *(void *)(v281 + 920);
    uint64_t v94 = *(void *)(v281 + 1184);

    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v114, v91);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v101, v93);
    swift_release(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    (*(void (**)(void))(*(void *)(v281 + 672) + 8LL))();
  }

  else
  {
    outlined init with take of Any?((_OWORD *)(v281 + 16), (_OWORD *)(v281 + 48));
    uint64_t v10 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t v246 = v10->_countAndFlagsBits;
    uint64_t v245 = v10->_object;
    swift_bridgeObjectRetain();
    outlined init with copy of Any?(v281 + 48, v281 + 80);
    uint64_t v247 = swift_task_alloc(32LL);
    *(void *)(v247 + 16) = v281 + 80;
    DataFrame.filter<A>(on:_:_:)( v246,  v245,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
    uint64_t v243 = *(void *)(v281 + 1232);
    uint64_t v241 = *(void (**)(uint64_t, uint64_t, uint64_t))(v281 + 1224);
    uint64_t v237 = *(void *)(v281 + 1096);
    uint64_t v240 = *(void *)(v281 + 1088);
    uint64_t v238 = *(void *)(v281 + 1072);
    uint64_t v244 = *(void *)(v281 + 1064);
    uint64_t v242 = *(void **)(v281 + 1016);
    swift_task_dealloc(v247);
    outlined destroy of Any?((void *)(v281 + 80));
    swift_bridgeObjectRelease();
    uint64_t v11 = kMediaML_carrier.unsafeMutableAddressor();
    uint64_t v236 = v11->_countAndFlagsBits;
    uint64_t v239 = v11->_object;
    swift_bridgeObjectRetain();
    uint64_t v12 = DataFrame.Slice.subscript.getter(v236, v239);
    AnyColumnSlice.distinct()(v12);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v238 + 8);
    *(void *)(v281 + 1240) = v13;
    v13(v237, v244);
    swift_bridgeObjectRelease();
    v241(v237, v240, v244);
    Collection<>.makeIterator()(v242, v244, v243);
    while (1)
    {
      IndexingIterator.next()((void *)(v281 + 112), *(void *)(v281 + 1000));
      if (*(void *)(v281 + 136) == 1LL)
      {
        uint64_t v149 = *(void (**)(uint64_t, uint64_t))(v281 + 1240);
        uint64_t v150 = *(void *)(v281 + 1088);
        uint64_t v148 = *(void *)(v281 + 1064);
        uint64_t v152 = *(void *)(v281 + 992);
        uint64_t v151 = *(void *)(v281 + 968);
        uint64_t v153 = *(void *)(v281 + 960);
        outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v281 + 1016));
        v149(v150, v148);
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v152, v153);
        outlined destroy of Any?((void *)(v281 + 48));
        goto LABEL_13;
      }

      outlined init with take of Any?((_OWORD *)(v281 + 112), (_OWORD *)(v281 + 144));
      uint64_t v14 = kMediaML_carrier.unsafeMutableAddressor();
      uint64_t v234 = v14->_countAndFlagsBits;
      uint64_t v233 = v14->_object;
      swift_bridgeObjectRetain();
      outlined init with copy of Any?(v281 + 144, v281 + 176);
      uint64_t v235 = swift_task_alloc(32LL);
      *(void *)(v235 + 16) = v281 + 176;
      DataFrame.Slice.filter<A>(on:_:_:)( v234,  v233,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
      uint64_t v231 = *(void *)(v281 + 1232);
      uint64_t v229 = *(void (**)(uint64_t, uint64_t, uint64_t))(v281 + 1224);
      uint64_t v226 = *(void (**)(uint64_t, uint64_t))(v281 + 1216);
      uint64_t v223 = *(void *)(v281 + 1096);
      uint64_t v228 = *(void *)(v281 + 1080);
      uint64_t v232 = *(void *)(v281 + 1064);
      uint64_t v224 = *(void *)(v281 + 1056);
      uint64_t v225 = *(void *)(v281 + 1032);
      uint64_t v230 = *(void **)(v281 + 1008);
      uint64_t v221 = *(void *)(v281 + 984);
      swift_task_dealloc(v235);
      outlined destroy of Any?((void *)(v281 + 176));
      swift_bridgeObjectRelease();
      DataFrame.init(_:)(v221);
      uint64_t v15 = kMediaML_bars.unsafeMutableAddressor();
      uint64_t v222 = v15->_countAndFlagsBits;
      uint64_t v227 = v15->_object;
      swift_bridgeObjectRetain();
      uint64_t v16 = DataFrame.subscript.getter(v222, v227);
      AnyColumn.distinct()(v16);
      v226(v224, v225);
      swift_bridgeObjectRelease();
      v229(v223, v228, v232);
      Collection<>.makeIterator()(v230, v232, v231);
LABEL_17:
      IndexingIterator.next()((void *)(v281 + 208), *(void *)(v281 + 1000));
      if (*(void *)(v281 + 232) != 1LL) {
        break;
      }
      os_log_type_t v155 = *(void (**)(uint64_t, uint64_t))(v281 + 1240);
      uint64_t v159 = *(void (**)(uint64_t, uint64_t))(v281 + 1200);
      uint64_t v157 = *(void *)(v281 + 1152);
      uint64_t v158 = *(void *)(v281 + 1112);
      uint64_t v156 = *(void *)(v281 + 1080);
      uint64_t v154 = *(void *)(v281 + 1064);
      outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v281 + 1008));
      v155(v156, v154);
      v159(v157, v158);
      outlined destroy of Any?((void *)(v281 + 144));
    }

    outlined init with take of Any?((_OWORD *)(v281 + 208), (_OWORD *)(v281 + 240));
    uint64_t v17 = kMediaML_bars.unsafeMutableAddressor();
    uint64_t v219 = v17->_countAndFlagsBits;
    uint64_t v218 = v17->_object;
    swift_bridgeObjectRetain();
    outlined init with copy of Any?(v281 + 240, v281 + 272);
    uint64_t v220 = swift_task_alloc(32LL);
    *(void *)(v220 + 16) = v281 + 272;
    DataFrame.filter<A>(on:_:_:)( v219,  v218,  &type metadata for Int,  partial apply for closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
    uint64_t v195 = *(void (**)(uint64_t, uint64_t, uint64_t))(v281 + 1192);
    uint64_t v194 = *(void *)(v281 + 1144);
    uint64_t v198 = *(void *)(v281 + 1136);
    uint64_t v197 = *(void *)(v281 + 1128);
    uint64_t v193 = *(void *)(v281 + 1120);
    uint64_t v199 = *(void *)(v281 + 1112);
    uint64_t v187 = *(void *)(v281 + 976);
    uint64_t v188 = *(void *)(v281 + 952);
    uint64_t v190 = *(void *)(v281 + 928);
    uint64_t v191 = *(void *)(v281 + 920);
    swift_task_dealloc(v220);
    outlined destroy of Any?((void *)(v281 + 272));
    swift_bridgeObjectRelease();
    uint64_t v18 = DataFrame.init(_:)(v187);
    uint64_t v189 = DataFrame.shape.getter(v18);
    *(void *)(v281 + 768) = v189;
    *(void *)(v281 + 776) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
    *(void *)(v281 + 784) = 0LL;
    uint64_t v19 = MediaMLPlugin.logger.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 16))(v188, v19, v191);
    v195(v198, v194, v199);
    int v196 = *(_DWORD *)(v193 + 80);
    unint64_t v192 = (v196 + 16LL) & ~(unint64_t)v196;
    uint64_t v204 = swift_allocObject(&unk_100066718, v192 + v197, v196 | 7LL);
    int v200 = *(void (**)(unint64_t, uint64_t, uint64_t))(v193 + 32);
    v200(v204 + v192, v198, v199);
    v195(v198, v194, v199);
    uint64_t v206 = swift_allocObject(&unk_100066740, v192 + v197, v196 | 7LL);
    uint64_t v20 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v200)(v206 + v192, v198, v199);
    oslog = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v217 = static os_log_type_t.debug.getter();
    *(void *)(v281 + 792) = 22LL;
    unint64_t v201 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v202 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v21 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v281 + 1308),  v281 + 792,  &type metadata for UInt32,  &type metadata for Int,  v201,  v202,  v21);
    uint32_t size = *(_DWORD *)(v281 + 1308);
    uint64_t v208 = swift_allocObject(&unk_100066768, 17LL, 7LL);
    *(_BYTE *)(v208 + 16) = 0;
    uint64_t v209 = swift_allocObject(&unk_100066790, 17LL, 7LL);
    *(_BYTE *)(v209 + 16) = 8;
    uint64_t v205 = swift_allocObject(&unk_1000667B8, 32LL, 7LL);
    *(void *)(v205 + 16) = partial apply for implicit closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v205 + 24) = v204;
    uint64_t v210 = swift_allocObject(&unk_1000667E0, 32LL, 7LL);
    *(void *)(v210 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v210 + 24) = v205;
    uint64_t v211 = swift_allocObject(&unk_100066808, 17LL, 7LL);
    *(_BYTE *)(v211 + 16) = 0;
    uint64_t v212 = swift_allocObject(&unk_100066830, 17LL, 7LL);
    *(_BYTE *)(v212 + 16) = 8;
    uint64_t v207 = swift_allocObject(&unk_100066858, 32LL, 7LL);
    *(void *)(v207 + 16) = partial apply for implicit closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v207 + 24) = v206;
    uint64_t v213 = swift_allocObject(&unk_100066880, 32LL, 7LL);
    *(void *)(v213 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v213 + 24) = v207;
    uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)(6LL, v215);
    uint64_t v214 = v22;
    swift_retain(v208);
    void *v214 = closure #1 in OSLogArguments.append(_:)partial apply;
    v214[1] = v208;
    swift_retain(v209);
    v214[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v214[3] = v209;
    swift_retain(v210);
    v214[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v214[5] = v210;
    swift_retain(v211);
    v214[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v214[7] = v211;
    swift_retain(v212);
    v214[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v214[9] = v212;
    swift_retain(v213);
    v214[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v214[11] = v213;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v217))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v185 = createStorage<A>(capacity:type:)(0LL, v183, v183);
      uint64_t v186 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v281 + 880) = buf;
      *(void *)(v281 + 888) = v185;
      *(void *)(v281 + 896) = v186;
      serialize(_:at:)(0LL, (_BYTE **)(v281 + 880));
      serialize(_:at:)(2LL, (_BYTE **)(v281 + 880));
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v281 + 664) = v208;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v281 + 664) = v209;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v281 + 664) = v210;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v281 + 664) = v211;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v281 + 664) = v212;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      *(void *)(v281 + 656) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v281 + 664) = v213;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 656),  v281 + 880,  v281 + 888,  v281 + 896);
      _os_log_impl((void *)&_mh_execute_header, oslog, v217, "Filtered dataframe shape=%ld,%ld", buf, size);
      destroyStorage<A>(_:count:)(v185, 0LL);
      destroyStorage<A>(_:count:)(v186, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_release(v208);
    swift_release(v209);
    swift_release(v210);
    swift_release(v211);
    swift_release(v212);
    swift_release(v213);
    uint64_t v181 = *(void *)(v281 + 952);
    uint64_t v180 = *(void *)(v281 + 928);
    uint64_t v182 = *(void *)(v281 + 920);

    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v181, v182);
    while (*(void *)(v281 + 784) < v189)
    {
      uint64_t v179 = *(void (**)(uint64_t, uint64_t))(v281 + 1216);
      uint64_t v177 = *(void *)(v281 + 1048);
      uint64_t v178 = *(void *)(v281 + 1032);
      Swift::String v176 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v176._countAndFlagsBits, v176._object);
      AnyColumn.subscript.getter(*(void *)(v281 + 784));
      v179(v177, v178);
      if (!*(void *)(v281 + 552))
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  759LL,  0);
        return;
      }

      outlined init with take of Any(v281 + 528, v281 + 496);
      uint64_t v23 = swift_dynamicCast( v281 + 872,  v281 + 496,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
      uint64_t v292 = *(void *)(v281 + 872);
      specialized Array.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(v281 + 784);
      uint64_t v175 = v24 + 1;
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_57;
      }
      *(void *)(v281 + 784) = v175;
    }

    uint64_t v173 = *(void *)(v281 + 776);
    swift_bridgeObjectRetain();
    uint64_t v174 = specialized Array.count.getter(v173);
    *(void *)(v281 + 800) = v174;
    swift_bridgeObjectRelease();
    if (__OFSUB__(v174, 1LL))
    {
      __break(1u);
LABEL_57:
      __break(1u);
      return;
    }

    *(void *)(v281 + 816) = v174 - 1;
    *(void *)(v281 + 824) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
    min<A>(_:_:)(v281 + 816, v281 + 824, &type metadata for Int, &protocol witness table for Int);
    uint64_t v172 = *(void *)(v281 + 808);
    *(void *)(v281 + 832) = v172;
    if (v174 <= 0) {
      goto LABEL_44;
    }
    if (v172 < 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
      return;
    }

    uint64_t v288 = 0LL;
    uint64_t v289 = v172;
    uint64_t v27 = specialized Collection<>.makeIterator()(0LL, v172);
    *(void *)(v281 + 560) = v27;
    *(void *)(v281 + 568) = v28;
    *(void *)(v281 + 576) = v29;
    *(_BYTE *)(v281 + 584) = v30 & 1;
    *(void *)(v281 + 1248) = 0LL;
    uint64_t v31 = specialized IndexingIterator.next()(v27);
    uint64_t v290 = v31;
    char v291 = v32 & 1;
    uint64_t v171 = v31;
    if ((v32 & 1) != 0)
    {
LABEL_44:
      Swift::String v161 = *(void (**)(uint64_t, uint64_t))(v281 + 1200);
      uint64_t v162 = *(void *)(v281 + 1144);
      uint64_t v160 = *(void *)(v281 + 1112);
      outlined destroy of [Double]((void *)(v281 + 776));
      v161(v162, v160);
      outlined destroy of Any?((void *)(v281 + 240));
      goto LABEL_17;
    }

    *(void *)(v281 + 840) = v31;
    outlined init with copy of Any?(v281 + 48, v281 + 336);
    if (*(void *)(v281 + 360))
    {
      outlined init with take of Any(v281 + 336, v281 + 304);
      swift_dynamicCast(v281 + 592, v281 + 304, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      uint64_t v169 = *(void *)(v281 + 592);
      uint64_t v170 = *(void *)(v281 + 600);
      *(void *)(v281 + 1256) = v170;
      *(void *)(v281 + 608) = v169;
      *(void *)(v281 + 616) = v170;
      outlined init with copy of Any?(v281 + 144, v281 + 400);
      if (*(void *)(v281 + 424))
      {
        outlined init with take of Any(v281 + 400, v281 + 368);
        swift_dynamicCast(v281 + 624, v281 + 368, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
        uint64_t v167 = *(void *)(v281 + 624);
        uint64_t v168 = *(void *)(v281 + 632);
        *(void *)(v281 + 1264) = v168;
        *(void *)(v281 + 640) = v167;
        *(void *)(v281 + 648) = v168;
        outlined init with copy of Any?(v281 + 240, v281 + 464);
        if (*(void *)(v281 + 488))
        {
          uint64_t v165 = *(void *)(v281 + 1208);
          uint64_t v166 = *(void *)(v281 + 1184);
          outlined init with take of Any(v281 + 464, v281 + 432);
          swift_dynamicCast(v281 + 848, v281 + 432, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
          uint64_t v163 = *(void *)(v281 + 848);
          *(void *)(v281 + 856) = v163;
          double v164 = specialized Array.subscript.getter(v171, *(void *)(v281 + 776));
          *(double *)(v281 + 864) = v164;
          *(Swift::String *)(v281 + 1272) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO cellStdDev (app_name, carrier, bars, throughput_stddev, traini ng_date) VALUES (?, ?, ?, ?, ?)",  0x69uLL,  1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v33 = (double *)swift_task_alloc(80LL);
          *(void *)(v281 + 1288) = v33;
          *((void *)v33 + 2) = v169;
          *((void *)v33 + 3) = v170;
          *((void *)v33 + 4) = v167;
          *((void *)v33 + 5) = v168;
          *((void *)v33 + 6) = v163;
          v33[7] = v164;
          *((void *)v33 + 8) = v165;
          swift_task_switch(MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:), v166);
        }

        else
        {
          _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  771LL,  0);
        }
      }

      else
      {
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  770LL,  0);
      }
    }

    else
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  769LL,  0);
    }
  }

uint64_t MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  uint64_t v1 = v0[160];
  uint64_t v2 = v0[159];
  uint64_t v3 = v0[156];
  v0[84] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
  v0[162] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 1288));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String *v2;
  uint64_t result;
  Swift::String *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  Swift::String *v7;
  Swift::String *v8;
  uint64_t v9;
  Swift::String *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(unint64_t, uint64_t, uint64_t);
  unint64_t v71;
  unint64_t v72;
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  os_log_s *log;
  os_log_type_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  Swift::String v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint8_t *buf;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(unint64_t, uint64_t, uint64_t);
  unint64_t v142;
  unint64_t v143;
  uint32_t size;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  os_log_s *oslog;
  os_log_type_t v158;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t);
  void *v168;
  uint64_t v169;
  void (*v170)(uint64_t, uint64_t, uint64_t);
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t, uint64_t);
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t j;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t i;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  *(void *)(v0 + 672) = v0;
  swift_bridgeObjectRelease();
  uint64_t v1 = swift_bridgeObjectRelease();
  for (i = *(void *)(v0 + 1296); ; i = 0LL)
  {
    *(void *)(v191 + 1248) = i;
    int v200 = specialized IndexingIterator.next()(v1);
    unint64_t v201 = v23 & 1;
    uint64_t v112 = v200;
    if ((v23 & 1) == 0)
    {
      *(void *)(v191 + 840) = v200;
      outlined init with copy of Any?(v191 + 48, v191 + 336);
      if (!*(void *)(v191 + 360)) {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  769LL,  0);
      }
      outlined init with take of Any(v191 + 336, v191 + 304);
      swift_dynamicCast(v191 + 592, v191 + 304, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      uint64_t v110 = *(void *)(v191 + 592);
      uint64_t v111 = *(void *)(v191 + 600);
      *(void *)(v191 + 1256) = v111;
      *(void *)(v191 + 608) = v110;
      *(void *)(v191 + 616) = v111;
      outlined init with copy of Any?(v191 + 144, v191 + 400);
      if (!*(void *)(v191 + 424)) {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  770LL,  0);
      }
      outlined init with take of Any(v191 + 400, v191 + 368);
      swift_dynamicCast(v191 + 624, v191 + 368, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
      uint64_t v108 = *(void *)(v191 + 624);
      uint64_t v109 = *(void *)(v191 + 632);
      *(void *)(v191 + 1264) = v109;
      *(void *)(v191 + 640) = v108;
      *(void *)(v191 + 648) = v109;
      outlined init with copy of Any?(v191 + 240, v191 + 464);
      if (!*(void *)(v191 + 488)) {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  771LL,  0);
      }
      uint64_t v106 = *(void *)(v191 + 1208);
      uint64_t v107 = *(void *)(v191 + 1184);
      outlined init with take of Any(v191 + 464, v191 + 432);
      swift_dynamicCast(v191 + 848, v191 + 432, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
      uint64_t v104 = *(void *)(v191 + 848);
      *(void *)(v191 + 856) = v104;
      uint64_t v105 = specialized Array.subscript.getter(v112, *(void *)(v191 + 776));
      *(double *)(v191 + 864) = v105;
      *(Swift::String *)(v191 + 1272) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO cellStdDev (app_name, carrier, bars, throughput_stddev, training_d ate) VALUES (?, ?, ?, ?, ?)",  0x69uLL,  1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = (double *)swift_task_alloc(80LL);
      *(void *)(v191 + 1288) = v24;
      *((void *)v24 + 2) = v110;
      *((void *)v24 + 3) = v111;
      *((void *)v24 + 4) = v108;
      *((void *)v24 + 5) = v109;
      *((void *)v24 + 6) = v104;
      v24[7] = v105;
      *((void *)v24 + 8) = v106;
      return swift_task_switch(MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:), v107);
    }

    uint64_t v103 = i;
LABEL_38:
    uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v191 + 1200);
    uint64_t v102 = *(void *)(v191 + 1144);
    uint64_t v100 = *(void *)(v191 + 1112);
    outlined destroy of [Double]((void *)(v191 + 776));
    v101(v102, v100);
    outlined destroy of Any?((void *)(v191 + 240));
    uint64_t v174 = v103;
LABEL_7:
    IndexingIterator.next()((void *)(v191 + 208), *(void *)(v191 + 1000));
    if (*(void *)(v191 + 232) == 1LL) {
      break;
    }
    outlined init with take of Any?((_OWORD *)(v191 + 208), (_OWORD *)(v191 + 240));
    uint64_t v10 = kMediaML_bars.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v10->_countAndFlagsBits;
    object = v10->_object;
    swift_bridgeObjectRetain();
    outlined init with copy of Any?(v191 + 240, v191 + 272);
    Swift::String v161 = swift_task_alloc(32LL);
    *(void *)(v161 + 16) = v191 + 272;
    uint64_t result = DataFrame.filter<A>(on:_:_:)( countAndFlagsBits,  object,  &type metadata for Int,  partial apply for closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
    if (v174) {
      return result;
    }
    uint64_t v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 1192);
    uint64_t v135 = *(void *)(v191 + 1144);
    uint64_t v139 = *(void *)(v191 + 1136);
    uint64_t v138 = *(void *)(v191 + 1128);
    uint64_t v134 = *(void *)(v191 + 1120);
    uint64_t v140 = *(void *)(v191 + 1112);
    uint64_t v128 = *(void *)(v191 + 976);
    uint64_t v129 = *(void *)(v191 + 952);
    unint64_t v131 = *(void *)(v191 + 928);
    unint64_t v132 = *(void *)(v191 + 920);
    swift_task_dealloc(v161);
    outlined destroy of Any?((void *)(v191 + 272));
    swift_bridgeObjectRelease();
    uint64_t v11 = DataFrame.init(_:)(v128);
    uint64_t v130 = DataFrame.shape.getter(v11);
    *(void *)(v191 + 768) = v130;
    *(void *)(v191 + 776) = _allocateUninitializedArray<A>(_:)(0LL, &type metadata for Double);
    *(void *)(v191 + 784) = 0LL;
    uint64_t v12 = MediaMLPlugin.logger.unsafeMutableAddressor();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v129, v12, v132);
    v136(v139, v135, v140);
    uint64_t v137 = *(_DWORD *)(v134 + 80);
    uint32_t v133 = (v137 + 16LL) & ~(unint64_t)v137;
    uint64_t v145 = swift_allocObject(&unk_100066718, v133 + v138, v137 | 7LL);
    uint64_t v141 = *(void (**)(unint64_t, uint64_t, uint64_t))(v134 + 32);
    v141(v145 + v133, v139, v140);
    v136(v139, v135, v140);
    os_log_type_t v147 = swift_allocObject(&unk_100066740, v133 + v138, v137 | 7LL);
    uint64_t v13 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v141)(v147 + v133, v139, v140);
    oslog = (os_log_s *)Logger.logObject.getter(v13);
    uint64_t v158 = static os_log_type_t.debug.getter();
    *(void *)(v191 + 792) = 22LL;
    uint64_t v142 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v143 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    uint64_t v14 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)( (void *)(v191 + 1308),  v191 + 792,  &type metadata for UInt32,  &type metadata for Int,  v142,  v143,  v14);
    uint32_t size = *(_DWORD *)(v191 + 1308);
    uint64_t v149 = swift_allocObject(&unk_100066768, 17LL, 7LL);
    *(_BYTE *)(v149 + 16) = 0;
    uint64_t v150 = swift_allocObject(&unk_100066790, 17LL, 7LL);
    *(_BYTE *)(v150 + 16) = 8;
    uint64_t v146 = swift_allocObject(&unk_1000667B8, 32LL, 7LL);
    *(void *)(v146 + 16) = partial apply for implicit closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v146 + 24) = v145;
    uint64_t v151 = swift_allocObject(&unk_1000667E0, 32LL, 7LL);
    *(void *)(v151 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v151 + 24) = v146;
    uint64_t v152 = swift_allocObject(&unk_100066808, 17LL, 7LL);
    *(_BYTE *)(v152 + 16) = 0;
    uint64_t v153 = swift_allocObject(&unk_100066830, 17LL, 7LL);
    *(_BYTE *)(v153 + 16) = 8;
    uint64_t v148 = swift_allocObject(&unk_100066858, 32LL, 7LL);
    *(void *)(v148 + 16) = partial apply for implicit closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
    *(void *)(v148 + 24) = v147;
    uint64_t v154 = swift_allocObject(&unk_100066880, 32LL, 7LL);
    *(void *)(v154 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v154 + 24) = v148;
    uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)(6LL, v156);
    os_log_type_t v155 = v15;
    swift_retain(v149);
    *os_log_type_t v155 = closure #1 in OSLogArguments.append(_:)partial apply;
    v155[1] = v149;
    swift_retain(v150);
    v155[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v155[3] = v150;
    swift_retain(v151);
    v155[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v155[5] = v151;
    swift_retain(v152);
    v155[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v155[7] = v152;
    swift_retain(v153);
    v155[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v155[9] = v153;
    swift_retain(v154);
    v155[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v155[11] = v154;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v158))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
      uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      int v126 = createStorage<A>(capacity:type:)(0LL, v124, v124);
      uint64_t v127 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v191 + 880) = buf;
      *(void *)(v191 + 888) = v126;
      *(void *)(v191 + 896) = v127;
      serialize(_:at:)(0LL, (_BYTE **)(v191 + 880));
      serialize(_:at:)(2LL, (_BYTE **)(v191 + 880));
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v191 + 664) = v149;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v191 + 664) = v150;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v191 + 664) = v151;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v191 + 664) = v152;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v191 + 664) = v153;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      *(void *)(v191 + 656) = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      *(void *)(v191 + 664) = v154;
      closure #1 in osLogInternal(_:log:type:)( (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 656),  v191 + 880,  v191 + 888,  v191 + 896);
      _os_log_impl((void *)&_mh_execute_header, oslog, v158, "Filtered dataframe shape=%ld,%ld", buf, size);
      destroyStorage<A>(_:count:)(v126, 0LL);
      destroyStorage<A>(_:count:)(v127, 0LL);
      UnsafeMutablePointer.deallocate()();
    }

    swift_release(v149);
    swift_release(v150);
    swift_release(v151);
    swift_release(v152);
    swift_release(v153);
    swift_release(v154);
    unint64_t v122 = *(void *)(v191 + 952);
    uint64_t v121 = *(void *)(v191 + 928);
    uint64_t v123 = *(void *)(v191 + 920);

    (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v122, v123);
    while (*(void *)(v191 + 784) < v130)
    {
      uint64_t v120 = *(void (**)(uint64_t, uint64_t))(v191 + 1216);
      uint64_t v118 = *(void *)(v191 + 1048);
      uint64_t v119 = *(void *)(v191 + 1032);
      uint64_t v117 = *kMediaML_throughputStdDev.unsafeMutableAddressor();
      swift_bridgeObjectRetain();
      DataFrame.subscript.getter(v117._countAndFlagsBits, v117._object);
      AnyColumn.subscript.getter(*(void *)(v191 + 784));
      v120(v118, v119);
      if (!*(void *)(v191 + 552)) {
        return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  759LL,  0);
      }
      outlined init with take of Any(v191 + 528, v191 + 496);
      uint64_t v16 = swift_dynamicCast( v191 + 872,  v191 + 496,  (char *)&type metadata for Any + 8,  &type metadata for Double,  7LL);
      unint64_t v202 = *(void *)(v191 + 872);
      specialized Array.append(_:)(v16);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(v191 + 784);
      uint64_t v116 = v17 + 1;
      if (__OFADD__(v17, 1LL)) {
        goto LABEL_51;
      }
      *(void *)(v191 + 784) = v116;
    }

    uint64_t v114 = *(void *)(v191 + 776);
    swift_bridgeObjectRetain();
    uint64_t v115 = specialized Array.count.getter(v114);
    *(void *)(v191 + 800) = v115;
    swift_bridgeObjectRelease();
    uint64_t result = v115;
    if (__OFSUB__(v115, 1LL))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }

    *(void *)(v191 + 816) = v115 - 1;
    *(void *)(v191 + 824) = *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor();
    min<A>(_:_:)(v191 + 816, v191 + 824, &type metadata for Int, &protocol witness table for Int);
    uint64_t v113 = *(void *)(v191 + 808);
    *(void *)(v191 + 832) = v113;
    if (v115 <= 0)
    {
      uint64_t v103 = 0LL;
      goto LABEL_38;
    }

    if (v113 < 0) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/ClosedRange.swift",  23LL,  2,  347LL,  0);
    }
    uint64_t v198 = 0LL;
    uint64_t v199 = v113;
    uint64_t v1 = specialized Collection<>.makeIterator()(0LL, v113);
    *(void *)(v191 + 560) = v1;
    *(void *)(v191 + 568) = v20;
    *(void *)(v191 + 576) = v21;
    *(_BYTE *)(v191 + 584) = v22 & 1;
  }

  uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v191 + 1240);
  uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v191 + 1200);
  uint64_t v97 = *(void *)(v191 + 1152);
  uint64_t v98 = *(void *)(v191 + 1112);
  uint64_t v96 = *(void *)(v191 + 1080);
  uint64_t v94 = *(void *)(v191 + 1064);
  outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v191 + 1008));
  v95(v96, v94);
  v99(v97, v98);
  outlined destroy of Any?((void *)(v191 + 144));
  for (j = v174; ; j = 0LL)
  {
    IndexingIterator.next()((void *)(v191 + 112), *(void *)(v191 + 1000));
    if (*(void *)(v191 + 136) != 1LL)
    {
      outlined init with take of Any?((_OWORD *)(v191 + 112), (_OWORD *)(v191 + 144));
      uint64_t v7 = kMediaML_carrier.unsafeMutableAddressor();
      Swift::String v176 = v7->_countAndFlagsBits;
      uint64_t v175 = v7->_object;
      swift_bridgeObjectRetain();
      outlined init with copy of Any?(v191 + 144, v191 + 176);
      uint64_t v177 = swift_task_alloc(32LL);
      *(void *)(v177 + 16) = v191 + 176;
      uint64_t result = DataFrame.Slice.filter<A>(on:_:_:)( v176,  v175,  &type metadata for String,  partial apply for closure #3 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
      if (j) {
        return result;
      }
      uint64_t v172 = *(void *)(v191 + 1232);
      uint64_t v170 = *(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 1224);
      uint64_t v167 = *(void (**)(uint64_t, uint64_t))(v191 + 1216);
      double v164 = *(void *)(v191 + 1096);
      uint64_t v169 = *(void *)(v191 + 1080);
      uint64_t v173 = *(void *)(v191 + 1064);
      uint64_t v165 = *(void *)(v191 + 1056);
      uint64_t v166 = *(void *)(v191 + 1032);
      uint64_t v171 = *(void **)(v191 + 1008);
      uint64_t v162 = *(void *)(v191 + 984);
      swift_task_dealloc(v177);
      outlined destroy of Any?((void *)(v191 + 176));
      swift_bridgeObjectRelease();
      DataFrame.init(_:)(v162);
      uint64_t v8 = kMediaML_bars.unsafeMutableAddressor();
      uint64_t v163 = v8->_countAndFlagsBits;
      uint64_t v168 = v8->_object;
      swift_bridgeObjectRetain();
      unint64_t v9 = DataFrame.subscript.getter(v163, v168);
      AnyColumn.distinct()(v9);
      v167(v165, v166);
      swift_bridgeObjectRelease();
      v170(v164, v169, v173);
      Collection<>.makeIterator()(v171, v173, v172);
      uint64_t v174 = 0LL;
      goto LABEL_7;
    }

    uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v191 + 1240);
    uint64_t v90 = *(void *)(v191 + 1088);
    uint64_t v88 = *(void *)(v191 + 1064);
    uint64_t v92 = *(void *)(v191 + 992);
    uint64_t v91 = *(void *)(v191 + 968);
    uint64_t v93 = *(void *)(v191 + 960);
    outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v191 + 1016));
    v89(v90, v88);
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v93);
    outlined destroy of Any?((void *)(v191 + 48));
    IndexingIterator.next()((void *)(v191 + 16), *(void *)(v191 + 1000));
    if (*(void *)(v191 + 40) == 1LL) {
      break;
    }
    outlined init with take of Any?((_OWORD *)(v191 + 16), (_OWORD *)(v191 + 48));
    uint64_t v2 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t v189 = v2->_countAndFlagsBits;
    uint64_t v188 = v2->_object;
    swift_bridgeObjectRetain();
    outlined init with copy of Any?(v191 + 48, v191 + 80);
    uint64_t v190 = swift_task_alloc(32LL);
    *(void *)(v190 + 16) = v191 + 80;
    uint64_t result = DataFrame.filter<A>(on:_:_:)( v189,  v188,  &type metadata for String,  partial apply for closure #2 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:));
    if (j) {
      return result;
    }
    uint64_t v185 = *(void *)(v191 + 1232);
    uint64_t v183 = *(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 1224);
    uint64_t v179 = *(void *)(v191 + 1096);
    uint64_t v182 = *(void *)(v191 + 1088);
    uint64_t v180 = *(void *)(v191 + 1072);
    uint64_t v186 = *(void *)(v191 + 1064);
    uint64_t v184 = *(void **)(v191 + 1016);
    swift_task_dealloc(v190);
    outlined destroy of Any?((void *)(v191 + 80));
    swift_bridgeObjectRelease();
    uint64_t v4 = kMediaML_carrier.unsafeMutableAddressor();
    uint64_t v178 = v4->_countAndFlagsBits;
    uint64_t v181 = v4->_object;
    swift_bridgeObjectRetain();
    uint64_t v5 = DataFrame.Slice.subscript.getter(v178, v181);
    AnyColumnSlice.distinct()(v5);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
    *(void *)(v191 + 1240) = v6;
    v6(v179, v186);
    swift_bridgeObjectRelease();
    v183(v179, v182, v186);
    Collection<>.makeIterator()(v184, v186, v185);
  }

  uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v191 + 1192);
  uint64_t v68 = *(void *)(v191 + 1136);
  uint64_t v67 = *(void *)(v191 + 1128);
  uint64_t v63 = *(void *)(v191 + 1120);
  uint64_t v69 = *(void *)(v191 + 1112);
  uint64_t v25 = *(void *)(v191 + 944);
  uint64_t v60 = *(void *)(v191 + 928);
  uint64_t v61 = *(void *)(v191 + 920);
  uint64_t v64 = *(void *)(v191 + 904);
  outlined destroy of IndexingIterator<AnyColumnSlice>(*(void *)(v191 + 1024));
  uint64_t v26 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v25, v26, v61);
  v65(v68, v64, v69);
  uint64_t v66 = *(_DWORD *)(v63 + 80);
  uint64_t v62 = (v66 + 16LL) & ~(unint64_t)v66;
  uint64_t v74 = swift_allocObject(&unk_100066588, v62 + v67, v66 | 7LL);
  uint64_t v70 = *(void (**)(unint64_t, uint64_t, uint64_t))(v63 + 32);
  v70(v74 + v62, v68, v69);
  v65(v68, v64, v69);
  uint64_t v76 = swift_allocObject(&unk_1000665B0, v62 + v67, v66 | 7LL);
  uint64_t v27 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v70)(v76 + v62, v68, v69);
  log = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v87 = static os_log_type_t.debug.getter();
  *(void *)(v191 + 760) = 22LL;
  uint64_t v71 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v28 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)(v191 + 1304),  v191 + 760,  &type metadata for UInt32,  &type metadata for Int,  v71,  v72,  v28);
  uint64_t v73 = *(_DWORD *)(v191 + 1304);
  uint64_t v78 = swift_allocObject(&unk_1000665D8, 17LL, 7LL);
  *(_BYTE *)(v78 + 16) = 0;
  uint64_t v79 = swift_allocObject(&unk_100066600, 17LL, 7LL);
  *(_BYTE *)(v79 + 16) = 8;
  uint64_t v75 = swift_allocObject(&unk_100066628, 32LL, 7LL);
  *(void *)(v75 + 16) = partial apply for implicit closure #6 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
  *(void *)(v75 + 24) = v74;
  uint64_t v80 = swift_allocObject(&unk_100066650, 32LL, 7LL);
  *(void *)(v80 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v80 + 24) = v75;
  uint64_t v81 = swift_allocObject(&unk_100066678, 17LL, 7LL);
  *(_BYTE *)(v81 + 16) = 0;
  uint64_t v82 = swift_allocObject(&unk_1000666A0, 17LL, 7LL);
  *(_BYTE *)(v82 + 16) = 8;
  unint64_t v77 = swift_allocObject(&unk_1000666C8, 32LL, 7LL);
  *(void *)(v77 + 16) = partial apply for implicit closure #7 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:);
  *(void *)(v77 + 24) = v76;
  uint64_t v83 = swift_allocObject(&unk_1000666F0, 32LL, 7LL);
  *(void *)(v83 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(void *)(v83 + 24) = v77;
  unint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(6LL, v85);
  unint64_t v84 = v29;
  swift_retain(v78);
  *unint64_t v84 = closure #1 in OSLogArguments.append(_:)partial apply;
  v84[1] = v78;
  swift_retain(v79);
  void v84[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v84[3] = v79;
  swift_retain(v80);
  v84[4] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v84[5] = v80;
  swift_retain(v81);
  v84[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v84[7] = v81;
  swift_retain(v82);
  v84[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v84[9] = v82;
  swift_retain(v83);
  v84[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v84[11] = v83;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v87))
  {
    uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v58 = createStorage<A>(capacity:type:)(0LL, v56, v56);
    uint64_t v59 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v193 = v57;
    uint64_t v194 = v58;
    uint64_t v195 = v59;
    serialize(_:at:)(0LL, &v193);
    serialize(_:at:)(2LL, &v193);
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v197 = v78;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    if (j) {
      return result;
    }
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v197 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v197 = v80;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v197 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v197 = v82;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    int v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
    uint64_t v197 = v83;
    closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v193, (uint64_t)&v194, (uint64_t)&v195);
    _os_log_impl((void *)&_mh_execute_header, log, v87, "Returning a dataframe of size=%ld,%ld", v57, v73);
    destroyStorage<A>(_:count:)(v58, 0LL);
    destroyStorage<A>(_:count:)(v59, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v78);
    swift_release(v79);
    swift_release(v80);
    swift_release(v81);
    swift_release(v82);
    swift_release(v83);
  }

  else
  {
    swift_release(v78);
    swift_release(v79);
    swift_release(v80);
    swift_release(v81);
    swift_release(v82);
    swift_release(v83);
  }

  uint64_t v35 = *(void *)(v191 + 1176);
  uint64_t v36 = *(void *)(v191 + 1168);
  unint64_t v37 = *(void *)(v191 + 1160);
  uint64_t v38 = *(void *)(v191 + 1152);
  uint64_t v39 = *(void *)(v191 + 1144);
  uint64_t v40 = *(void *)(v191 + 1136);
  uint64_t v41 = *(void *)(v191 + 1104);
  unint64_t v42 = *(void *)(v191 + 1096);
  uint64_t v43 = *(void *)(v191 + 1088);
  unint64_t v44 = *(void *)(v191 + 1080);
  char v32 = *(void *)(v191 + 1072);
  uint64_t v33 = *(void *)(v191 + 1064);
  unint64_t v45 = *(void *)(v191 + 1056);
  Swift::String v46 = *(void *)(v191 + 1048);
  unint64_t v47 = *(void *)(v191 + 1024);
  uint64_t v48 = *(void *)(v191 + 1016);
  uint64_t v49 = *(void *)(v191 + 1008);
  uint64_t v50 = *(void *)(v191 + 992);
  uint64_t v51 = *(void *)(v191 + 984);
  uint64_t v52 = *(void *)(v191 + 976);
  uint64_t v53 = *(void *)(v191 + 952);
  uint64_t v54 = *(void *)(v191 + 944);
  uint64_t v55 = *(void *)(v191 + 936);
  char v30 = *(void *)(v191 + 928);
  uint64_t v31 = *(void *)(v191 + 920);
  uint64_t v34 = *(void *)(v191 + 1184);

  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v54, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v41, v33);
  swift_release(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(*(void *)(v191 + 672) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v1 = v0[161];
  uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[155];
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[150];
  uint64_t v18 = v0[148];
  uint64_t v6 = v0[144];
  uint64_t v3 = v0[143];
  uint64_t v7 = v0[139];
  uint64_t v17 = v0[138];
  uint64_t v10 = v0[136];
  uint64_t v5 = v0[135];
  uint64_t v15 = v0[133];
  uint64_t v14 = v0[128];
  unint64_t v9 = v0[127];
  uint64_t v4 = v0[126];
  uint64_t v12 = v0[124];
  uint64_t v11 = v0[121];
  uint64_t v13 = v0[120];
  v0[84] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [Double](v0 + 97);
  v8(v3, v7);
  outlined destroy of Any?(v0 + 30);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v4);
  v16(v5, v15);
  v8(v6, v7);
  outlined destroy of Any?(v0 + 18);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v9);
  v16(v10, v15);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  outlined destroy of Any?(v0 + 6);
  outlined destroy of IndexingIterator<AnyColumnSlice>(v14);
  v16(v17, v15);
  swift_release(v18);
  uint64_t v19 = v0[146];
  uint64_t v20 = v0[145];
  unint64_t v21 = v0[144];
  uint64_t v22 = v0[143];
  uint64_t v23 = v0[142];
  uint64_t v24 = v0[138];
  uint64_t v25 = v0[137];
  uint64_t v26 = v0[136];
  uint64_t v27 = v0[135];
  uint64_t v28 = v0[132];
  uint64_t v29 = v0[131];
  char v30 = v0[128];
  uint64_t v31 = v0[127];
  char v32 = v0[126];
  uint64_t v33 = v0[124];
  uint64_t v34 = v0[123];
  uint64_t v35 = v0[122];
  uint64_t v36 = v0[119];
  unint64_t v37 = v0[118];
  uint64_t v38 = v0[117];
  swift_task_dealloc(v0[147]);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0[84] + 8LL))();
}

void *closure #1 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  743LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t closure #3 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v2 = a1[1];
  uint64_t v22 = *a1;
  uint64_t v23 = v2;
  uint64_t v21 = a2;
  v20[0] = v22;
  v20[1] = v2;
  outlined init with copy of Any?(a2, (uint64_t)v17);
  if (!v18)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  747LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v17, (uint64_t)v19);
  swift_dynamicCast(v16, v19, (char *)&type metadata for Any + 8, &type metadata for String, 7LL);
  uint64_t v10 = v16[0];
  uint64_t v11 = v16[1];
  swift_bridgeObjectRetain();
  outlined init with copy of String?(v20, v13);
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  if (!v13[1])
  {
    if (!v15)
    {
      outlined destroy of String?((uint64_t)v13);
      char v9 = 1;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  outlined init with copy of String?(v13, v12);
  if (!v15)
  {
    outlined destroy of String((uint64_t)v12);
LABEL_10:
    outlined destroy of (String?, String?)((uint64_t)v13);
    char v9 = 0;
    goto LABEL_9;
  }

  uint64_t v4 = v12[0];
  uint64_t v7 = v12[1];
  swift_bridgeObjectRetain();
  uint64_t v5 = v14;
  uint64_t v6 = v15;
  swift_bridgeObjectRetain();
  char v8 = static String.== infix(_:_:)(v4, v7, v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?((uint64_t)v13);
  char v9 = v8;
LABEL_9:
  swift_bridgeObjectRelease();
  return v9 & 1;
}

BOOL closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = 0LL;
  char v17 = 0;
  uint64_t v15 = 0LL;
  uint64_t v4 = *a1;
  char v5 = *((_BYTE *)a1 + 8);
  uint64_t v16 = *a1;
  char v17 = v5 & 1;
  uint64_t v15 = a2;
  outlined init with copy of Any?(a2, (uint64_t)v12);
  if (!v13)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  751LL,  0);
    __break(1u);
  }

  outlined init with take of Any((uint64_t)v12, (uint64_t)v14);
  swift_dynamicCast(&v11, v14, (char *)&type metadata for Any + 8, &type metadata for Int, 7LL);
  uint64_t v7 = v4;
  char v8 = v5 & 1;
  uint64_t v9 = v11;
  char v10 = 0;
  BOOL v3 = (v5 & 1) == 0 && (outlined init with copy of Int?((uint64_t)&v7, (uint64_t)&v6), (v10 & 1) == 0) && v6 == v9;
  return v3;
}

uint64_t implicit closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return v0;
}

uint64_t closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(5LL, v20);
  uint64_t v18 = v9;
  swift_bridgeObjectRetain();
  *(void *)(v18 + 24) = &type metadata for String;
  *(void *)(v18 + 32) = &protocol witness table for String;
  *(void *)uint64_t v18 = a2;
  *(void *)(v18 + 8) = a3;
  swift_bridgeObjectRetain();
  *(void *)(v18 + 64) = &type metadata for String;
  *(void *)(v18 + 72) = &protocol witness table for String;
  *(void *)(v18 + 40) = a4;
  *(void *)(v18 + 48) = a5;
  *(void *)(v18 + 104) = &type metadata for Int;
  *(void *)(v18 + 112) = &protocol witness table for Int;
  *(void *)(v18 + 80) = a6;
  *(void *)(v18 + 144) = &type metadata for Double;
  *(void *)(v18 + 152) = &protocol witness table for Double;
  *(double *)(v18 + 120) = a8;
  *(void *)(v18 + 184) = &type metadata for Int;
  *(void *)(v18 + 192) = &protocol witness table for Int;
  *(void *)(v18 + 160) = a7;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v21) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t implicit closure #6 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return DataFrame.shape.getter();
}

uint64_t implicit closure #7 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return v0;
}

uint64_t MediaMLPlugin.getCellDataStandardDeviation()(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[5] = 0LL;
  v2[6] = 0LL;
  void v2[3] = v1;
  return swift_task_switch(MediaMLPlugin.getCellDataStandardDeviation(), 0LL);
}

void MediaMLPlugin.getCellDataStandardDeviation()()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v11 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.getCellDataStandardDeviation(),  0LL,  v11,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v11);
  uint64_t v9 = *(void *)(v10 + 32);
  *(void *)(v10 + 80) = v9;
  if (v9)
  {
    *(void *)(v10 + 40) = v9;
    *(Swift::String *)(v10 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "WITH CTE AS (SELECT app_name, carrier, bars, AVG(throughput_true) AS throughput_mea n FROM cell GROUP BY app_name, carrier, bars, session_id)\n SELECT app_name, carrier, bars, AVG(throughput_mean*throughput_mean)-(AVG(throughpu t_mean)*AVG(throughput_mean)) AS throughput_var\n FROM CTE\n GROUP BY app_name, carrier, bars",  0x139uLL,  1);
    swift_task_switch(MediaMLPlugin.getCellDataStandardDeviation(), v9);
  }

  else
  {
    Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v12 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v3);
    unsigned __int32 code = v12.code;
    uint64_t desc_8 = v12.desc.value._countAndFlagsBits;
    object = v12.desc.value._object;
    unint64_t v4 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v4, 0LL, 0LL);
    *(_DWORD *)uint64_t v5 = code;
    *(void *)(v5 + 8) = desc_8;
    *(void *)(v5 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v10 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.getCellDataStandardDeviation()()
{
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[11];
  uint64_t v1 = v0[9];
  v0[2] = v0;
  type metadata accessor for DataFrame(0LL);
  SQLiteDB.withStatement<A>(sql:handler:)( v4,  v3,  (void (*)(void))closure #2 in MediaMLPlugin.getCellDataStandardDeviation());
  v0[13] = v1;
  if (v1) {
    return swift_task_switch(MediaMLPlugin.getCellDataStandardDeviation(), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.getCellDataStandardDeviation(), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[10];
  v0[2] = v0;
  swift_bridgeObjectRelease(v2);
  uint64_t v3 = swift_errorRetain(v1);
  v0[6] = v1;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  swift_release(v5);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.getCellDataStandardDeviation()@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t *closure #2 in MediaMLPlugin.getCellDataStandardDeviation()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v80 = 0LL;
  uint64_t v79 = 0LL;
  uint64_t v59 = &v78;
  uint64_t v78 = 0LL;
  uint64_t v60 = &v77;
  uint64_t v77 = 0LL;
  uint64_t v61 = &v76;
  uint64_t v76 = 0LL;
  uint64_t v62 = &v75;
  uint64_t v75 = 0LL;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Double>);
  uint64_t v42 = *(void *)(v41 - 8);
  unint64_t v43 = (*(void *)(v42 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v41);
  unint64_t v44 = (char *)&v12 - v43;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Column<Int>);
  uint64_t v46 = *(void *)(v45 - 8);
  unint64_t v47 = (*(void *)(v46 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v45);
  uint64_t v48 = (char *)&v12 - v47;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Column<String>);
  uint64_t v50 = *(void *)(v49 - 8);
  unint64_t v51 = (*(void *)(v50 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v49);
  uint64_t v52 = (char *)&v12 - v51;
  uint64_t v58 = 0LL;
  uint64_t v53 = type metadata accessor for DataFrame(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  unint64_t v55 = (*(void *)(v54 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v12 - v55;
  uint64_t v80 = (char *)&v12 - v55;
  uint64_t v79 = a1;
  uint64_t v57 = &type metadata for String;
  uint64_t v78 = _allocateUninitializedArray<A>(_:)(v3, &type metadata for String);
  uint64_t v77 = _allocateUninitializedArray<A>(_:)(v58, v57);
  uint64_t v76 = _allocateUninitializedArray<A>(_:)(v58, &type metadata for Int);
  uint64_t v4 = _allocateUninitializedArray<A>(_:)(v58, &type metadata for Double);
  uint64_t v5 = v63;
  uint64_t v75 = v4;
  uint64_t v67 = v59;
  uint64_t v68 = v60;
  uint64_t v69 = v61;
  uint64_t v70 = v62;
  uint64_t v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), char *))(*(void *)a1 + 144LL))( partial apply for closure #1 in closure #2 in MediaMLPlugin.getCellDataStandardDeviation(),  v66);
  uint64_t v64 = v5;
  uint64_t v65 = v5;
  if (v5)
  {
    uint64_t v12 = v65;
    outlined destroy of [Double](&v75);
    outlined destroy of [Int](&v76);
    outlined destroy of [String](&v77);
    uint64_t result = &v78;
    outlined destroy of [String](&v78);
  }

  else
  {
    DataFrame.init()(v6);
    uint64_t v7 = kMediaML_appName.unsafeMutableAddressor();
    uint64_t countAndFlagsBits = v7->_countAndFlagsBits;
    object = v7->_object;
    swift_bridgeObjectRetain();
    uint64_t v39 = &v78;
    uint64_t v13 = v78;
    swift_bridgeObjectRetain();
    uint64_t v15 = &v74;
    uint64_t v74 = v13;
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    unint64_t v21 = lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v22 = &type metadata for String;
    Column.init<A>(name:contents:)(countAndFlagsBits, object, v15);
    DataFrame.append<A>(column:)(v52, v22);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v50 + 8);
    v23(v52, v49);
    char v8 = kMediaML_carrier.unsafeMutableAddressor();
    uint64_t v17 = v8->_countAndFlagsBits;
    uint64_t v19 = v8->_object;
    swift_bridgeObjectRetain();
    uint64_t v38 = &v77;
    uint64_t v18 = v77;
    swift_bridgeObjectRetain();
    uint64_t v73 = v18;
    Column.init<A>(name:contents:)(v17, v19, &v73);
    DataFrame.append<A>(column:)(v52, v22);
    v23(v52, v49);
    uint64_t v9 = kMediaML_bars.unsafeMutableAddressor();
    uint64_t v28 = v9->_countAndFlagsBits;
    uint64_t v25 = v9->_object;
    swift_bridgeObjectRetain();
    unint64_t v37 = &v76;
    uint64_t v24 = v76;
    swift_bridgeObjectRetain();
    uint64_t v26 = &v72;
    uint64_t v72 = v24;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance [A]();
    uint64_t v29 = &type metadata for Int;
    Column.init<A>(name:contents:)(v28, v25, v26);
    DataFrame.append<A>(column:)(v48, v29);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v45);
    uint64_t v10 = kMediaML_throughputStdDev.unsafeMutableAddressor();
    uint64_t v34 = v10->_countAndFlagsBits;
    uint64_t v31 = v10->_object;
    swift_bridgeObjectRetain();
    uint64_t v36 = &v75;
    uint64_t v30 = v75;
    swift_bridgeObjectRetain();
    char v32 = &v71;
    uint64_t v71 = v30;
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    uint64_t v35 = &type metadata for Double;
    Column.init<A>(name:contents:)(v34, v31, v32);
    DataFrame.append<A>(column:)(v44, v35);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v40, v56, v53);
    outlined destroy of [Double](v36);
    outlined destroy of [Int](v37);
    outlined destroy of [String](v38);
    uint64_t result = v39;
    outlined destroy of [String](v39);
  }

  return result;
}

uint64_t closure #1 in closure #2 in MediaMLPlugin.getCellDataStandardDeviation()(uint64_t a1)
{
  if (v19)
  {
    SQLiteDB.Row.get<A>(at:)(1LL, a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    if (v18)
    {
      SQLiteDB.Row.get<A>(at:)(2LL, a1, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int);
      SQLiteDB.Row.get<A>(at:)(3LL, a1, (uint64_t)&type metadata for Double, (uint64_t)&protocol witness table for Double);
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      swift_bridgeObjectRetain();
      specialized Array.append(_:)();
      uint64_t v8 = specialized Array.append(_:)();
      specialized Array.append(_:)(v8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    else
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("carrier not of type String", 0x1AuLL, 1);
      MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v5);
      unsigned __int32 code = v21.code;
      uint64_t countAndFlagsBits = v21.desc.value._countAndFlagsBits;
      object = v21.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v12 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = code;
      *(void *)(v7 + 8) = countAndFlagsBits;
      *(void *)(v7 + 16) = object;
      swift_willThrow(code);
      swift_bridgeObjectRelease();
      return v12;
    }
  }

  else
  {
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name not of type String", 0x1BuLL, 1);
    MediaMLPlugin::SQLError v20 = SQLError.init(code:desc:)(-1, (Swift::String_optional)v1);
    unsigned __int32 v15 = v20.code;
    uint64_t desc_8 = v20.desc.value._countAndFlagsBits;
    uint64_t v14 = v20.desc.value._object;
    unint64_t v2 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = swift_allocError(&type metadata for SQLError, v2, 0LL, 0LL);
    *(_DWORD *)uint64_t v3 = v15;
    *(void *)(v3 + 8) = desc_8;
    *(void *)(v3 + 16) = v14;
    swift_willThrow(v15);
    return v16;
  }

uint64_t MediaMLPlugin.saveModelStatsToDB(modelStats:)(uint64_t a1)
{
  v2[8] = v1;
  v2[7] = a1;
  v2[2] = v2;
  void v2[3] = 0LL;
  v2[4] = 0LL;
  v2[6] = 0LL;
  void v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch(MediaMLPlugin.saveModelStatsToDB(modelStats:), 0LL);
}

void MediaMLPlugin.saveModelStatsToDB(modelStats:)()
{
  uint64_t v1 = (void *)v0[8];
  v0[2] = v0;
  uint64_t v13 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.saveModelStatsToDB(modelStats:),  0LL,  v13,  v2,  v2);
  v0[9] = 0LL;
  swift_release(v13);
  uint64_t v11 = *(void *)(v12 + 40);
  *(void *)(v12 + 80) = v11;
  if (v11)
  {
    uint64_t v10 = *(void *)(v12 + 56);
    *(void *)(v12 + 48) = v11;
    *(Swift::String *)(v12 + 88) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "INSERT INTO modelStats (interfaceType, trainingRowCount, validationRowCount, carrie rCount, ssidCount, appNameCount, sessionIDCount, trainingMAPE, validationMAPE, trai ningDate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",  0xD5uLL,  1);
    uint64_t v3 = swift_task_alloc(32LL);
    *(void *)(v12 + 104) = v3;
    *(void *)(v3 + 16) = v10;
    swift_task_switch(MediaMLPlugin.saveModelStatsToDB(modelStats:), v11);
  }

  else
  {
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v14 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v4);
    unsigned __int32 code = v14.code;
    uint64_t desc_8 = v14.desc.value._countAndFlagsBits;
    object = v14.desc.value._object;
    unint64_t v5 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v5, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = code;
    *(void *)(v6 + 8) = desc_8;
    *(void *)(v6 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(*(void *)(v12 + 16) + 8LL))();
  }

uint64_t MediaMLPlugin.saveModelStatsToDB(modelStats:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[9];
  v0[2] = v0;
  SQLiteDB.withStatement<A>(sql:handler:)( v2,  v1,  (void (*)(void))partial apply for closure #2 in MediaMLPlugin.saveModelStatsToDB(modelStats:));
  v0[14] = v3;
  if (v3) {
    return swift_task_switch(MediaMLPlugin.saveModelStatsToDB(modelStats:), 0LL);
  }
  swift_task_dealloc(*(void *)(v5 + 104));
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.saveModelStatsToDB(modelStats:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[12];
  Swift::String v4 = v0[10];
  v0[2] = v0;
  swift_task_dealloc(v1);
  swift_bridgeObjectRelease(v3);
  swift_release(v4);
  return (*(uint64_t (**)(void))(v0[2] + 8LL))();
}

void *closure #1 in MediaMLPlugin.saveModelStatsToDB(modelStats:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t closure #2 in MediaMLPlugin.saveModelStatsToDB(modelStats:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLBindable);
  _allocateUninitializedArray<A>(_:)(10LL, v7);
  uint64_t v18 = *a2;
  v3[3] = &type metadata for Int;
  v3[4] = &protocol witness table for Int;
  *uint64_t v3 = v18;
  uint64_t v17 = a2[1];
  v3[8] = &type metadata for Int;
  v3[9] = &protocol witness table for Int;
  v3[5] = v17;
  uint64_t v16 = a2[2];
  v3[13] = &type metadata for Int;
  v3[14] = &protocol witness table for Int;
  v3[10] = v16;
  uint64_t v15 = a2[3];
  v3[18] = &type metadata for Int;
  v3[19] = &protocol witness table for Int;
  v3[15] = v15;
  uint64_t v14 = a2[4];
  v3[23] = &type metadata for Int;
  v3[24] = &protocol witness table for Int;
  v3[20] = v14;
  uint64_t v13 = a2[5];
  v3[28] = &type metadata for Int;
  v3[29] = &protocol witness table for Int;
  v3[25] = v13;
  uint64_t v12 = a2[6];
  v3[33] = &type metadata for Int;
  v3[34] = &protocol witness table for Int;
  v3[30] = v12;
  uint64_t v11 = a2[7];
  v3[38] = &type metadata for Double;
  v3[39] = &protocol witness table for Double;
  v3[35] = v11;
  uint64_t v10 = a2[8];
  v3[43] = &type metadata for Double;
  v3[44] = &protocol witness table for Double;
  v3[40] = v10;
  uint64_t v9 = a2[9];
  v3[48] = &type metadata for Int;
  v3[49] = &protocol witness table for Int;
  v3[45] = v9;
  _finalizeUninitializedArray<A>(_:)();
  (*(void (**)(void))(*(void *)a1 + 192LL))();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(result);
  }
  return result;
}

uint64_t MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:)(uint64_t a1)
{
  v2[14] = v1;
  v2[13] = a1;
  v2[4] = v2;
  v2[7] = 0LL;
  v2[8] = 0LL;
  v2[10] = 0LL;
  v2[7] = a1;
  v2[8] = v1;
  return swift_task_switch(MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:), 0LL);
}

void MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:)()
{
  uint64_t v1 = (void *)v0[14];
  v0[4] = v0;
  uint64_t v19 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:),  0LL,  v19,  v2,  v2);
  v0[15] = 0LL;
  swift_release(v19);
  uint64_t v17 = v18[9];
  v18[16] = v17;
  if (v17)
  {
    uint64_t v14 = (void *)v18[13];
    v18[10] = v17;
    void v18[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(65LL, 2LL);
    v18[3] = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM modelStats WHERE interfaceType = ",  0x2DuLL,  1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v18[5] = *v14;
    v18[11] = v18[5];
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v18 + 11);
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" AND trainingDate < ", 0x14uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    v18[6] = v14[9];
    v18[12] = v18[6];
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v18 + 12);
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t v16 = v18[2];
    uint64_t v15 = v18[3];
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation((uint64_t)(v18 + 2));
    v18[17] = String.init(stringInterpolation:)(v16, v15);
    v18[18] = v7;
    swift_task_switch(MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:), v17);
  }

  else
  {
    Swift::String v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v20 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v8);
    unsigned __int32 code = v20.code;
    uint64_t desc_8 = v20.desc.value._countAndFlagsBits;
    object = v20.desc.value._object;
    unint64_t v9 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v9, 0LL, 0LL);
    *(_DWORD *)uint64_t v10 = code;
    *(void *)(v10 + 8) = desc_8;
    *(void *)(v10 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(v18[4] + 8LL))();
  }

uint64_t MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:)()
{
  Swift::String v1 = *(Swift::String *)(v0 + 136);
  *(void *)(v0 + 32) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 152) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v1 = *(void *)(v0 + 128);
  *(void *)(v0 + 32) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v1 = v0[18];
  uint64_t v3 = v0[16];
  v0[4] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[4] + 8LL))();
}

void *closure #1 in MediaMLPlugin.deletePreviousModelStatsFromDB(modelStats:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:)(uint64_t a1)
{
  v2[12] = v1;
  v2[11] = a1;
  v2[4] = v2;
  v2[6] = 0LL;
  v2[7] = 0LL;
  v2[9] = 0LL;
  v2[6] = a1;
  v2[7] = v1;
  return swift_task_switch(MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:), 0LL);
}

void MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:)()
{
  uint64_t v1 = (void *)v0[12];
  v0[4] = v0;
  uint64_t v18 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:),  0LL,  v18,  v2,  v2);
  v0[13] = 0LL;
  swift_release(v18);
  uint64_t v16 = v17[8];
  v17[14] = v16;
  if (v16)
  {
    uint64_t v13 = v17[11];
    v17[9] = v16;
    v17[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 1LL);
    v17[3] = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM wifiStdDev WHERE training_date < ",  0x2DuLL,  1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v17[5] = *(void *)(v13 + 72);
    v17[10] = v17[5];
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v17 + 10);
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t v15 = v17[2];
    uint64_t v14 = v17[3];
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation((uint64_t)(v17 + 2));
    v17[15] = String.init(stringInterpolation:)(v15, v14);
    v17[16] = v6;
    swift_task_switch(MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:), v16);
  }

  else
  {
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v19 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v7);
    unsigned __int32 code = v19.code;
    uint64_t desc_8 = v19.desc.value._countAndFlagsBits;
    object = v19.desc.value._object;
    unint64_t v8 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v8, 0LL, 0LL);
    *(_DWORD *)uint64_t v9 = code;
    *(void *)(v9 + 8) = desc_8;
    *(void *)(v9 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(v17[4] + 8LL))();
  }

uint64_t MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:)()
{
  Swift::String v1 = *(Swift::String *)(v0 + 120);
  *(void *)(v0 + 32) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 136) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v1 = *(void *)(v0 + 112);
  *(void *)(v0 + 32) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v1 = v0[16];
  uint64_t v3 = v0[14];
  v0[4] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[4] + 8LL))();
}

void *closure #1 in MediaMLPlugin.deletePreviousWiFiStdDevDB(modelStats:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:)(uint64_t a1)
{
  v2[12] = v1;
  v2[11] = a1;
  v2[4] = v2;
  v2[6] = 0LL;
  v2[7] = 0LL;
  v2[9] = 0LL;
  v2[6] = a1;
  v2[7] = v1;
  return swift_task_switch(MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:), 0LL);
}

void MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:)()
{
  uint64_t v1 = (void *)v0[12];
  v0[4] = v0;
  uint64_t v18 = (*(uint64_t (**)(void))((*v1 & swift_isaMask) + 0x58LL))();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:),  0LL,  v18,  v2,  v2);
  v0[13] = 0LL;
  swift_release(v18);
  uint64_t v16 = v17[8];
  v17[14] = v16;
  if (v16)
  {
    uint64_t v13 = v17[11];
    v17[9] = v16;
    v17[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 1LL);
    v17[3] = v3;
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "DELETE FROM cellStdDev WHERE training_date < ",  0x2DuLL,  1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v17[5] = *(void *)(v13 + 72);
    v17[10] = v17[5];
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v17 + 10);
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    uint64_t v15 = v17[2];
    uint64_t v14 = v17[3];
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation((uint64_t)(v17 + 2));
    v17[15] = String.init(stringInterpolation:)(v15, v14);
    v17[16] = v6;
    swift_task_switch(MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:), v16);
  }

  else
  {
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("database not available", 0x16uLL, 1);
    MediaMLPlugin::SQLError v19 = SQLError.init(code:desc:)(-3, (Swift::String_optional)v7);
    unsigned __int32 code = v19.code;
    uint64_t desc_8 = v19.desc.value._countAndFlagsBits;
    object = v19.desc.value._object;
    unint64_t v8 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v8, 0LL, 0LL);
    *(_DWORD *)uint64_t v9 = code;
    *(void *)(v9 + 8) = desc_8;
    *(void *)(v9 + 16) = object;
    swift_willThrow(code);
    (*(void (**)(void))(v17[4] + 8LL))();
  }

uint64_t MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:)()
{
  Swift::String v1 = *(Swift::String *)(v0 + 120);
  *(void *)(v0 + 32) = v0;
  SQLiteDB.execute(_:)(v1);
  *(void *)(v0 + 136) = v2;
  if (v2) {
    return swift_task_switch(MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:), 0LL);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:), 0LL);
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v1 = *(void *)(v0 + 112);
  *(void *)(v0 + 32) = v0;
  swift_release(v1);
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v1 = v0[16];
  uint64_t v3 = v0[14];
  v0[4] = v0;
  swift_bridgeObjectRelease(v1);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0[4] + 8LL))();
}

void *closure #1 in MediaMLPlugin.deletePreviousCellStdDevDB(modelStats:)@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

uint64_t MediaMLPlugin.perform(_:)(void *a1)
{
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v22 = a1;
  MediaMLPlugin::SQLError v21 = v1;
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "com.apple.MediaMLPlugin.perform-task",  0x24uLL,  1)._countAndFlagsBits;
  uint64_t v9 = String.utf8CString.getter(countAndFlagsBits);
  swift_retain(v9);
  swift_release(v9);
  swift_retain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = os_transaction_create(v9 + 32);
  swift_unknownObjectRelease(v9);
  swift_bridgeObjectRelease();
  void v20[2] = v10;
  v20[0] = v10;
  id v3 = v1;
  id v4 = a1;
  uint64_t v17 = v1;
  uint64_t v18 = a1;
  uint64_t v19 = ObjectType;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OS_os_transaction?);
  unint64_t v5 = type metadata accessor for MLRTrialTaskResult();
  uint64_t result = _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( (uint64_t)v20,  (uint64_t)partial apply for closure #1 in MediaMLPlugin.perform(_:),  (uint64_t)v16,  v13,  (uint64_t)&type metadata for Never,  v5,  (uint64_t)&protocol witness table for Never,  v15);
  if (v14)
  {
    __break(1u);
  }

  else
  {

    uint64_t v7 = v20[1];
    swift_unknownObjectRelease(v10);
    return v7;
  }

  return result;
}

void closure #1 in MediaMLPlugin.perform(_:)( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  Swift::String v258 = a4;
  Swift::Bool v279 = a1;
  id v270 = a2;
  uint64_t v259 = a3;
  int v317 = 0LL;
  uint64_t v316 = 0LL;
  uint64_t v315 = 0LL;
  id v314 = 0LL;
  uint64_t v312 = 0LL;
  dispatch_semaphore_t v309 = 0LL;
  id v308 = 0LL;
  uint64_t v306 = 0LL;
  uint64_t v307 = 0LL;
  id v305 = 0LL;
  double v301 = 0.0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  unint64_t v260 = (*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v4);
  uint64_t v261 = (char *)&v145 - v260;
  uint64_t v271 = 0LL;
  uint64_t v262 = type metadata accessor for Logger(0LL);
  Swift::String v263 = *(void **)(v262 - 8);
  unint64_t v264 = (v263[8] + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = __chkstk_darwin(v271);
  Swift::Bool v265 = (char *)&v145 - v264;
  unint64_t v266 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v267 = (char *)&v145 - v266;
  unint64_t v268 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v269 = (char *)&v145 - v268;
  uint64_t v272 = type metadata accessor for DispatchTime(v9);
  uint64_t v273 = *(void *)(v272 - 8);
  uint64_t v275 = *(void *)(v273 + 64);
  unint64_t v274 = (v275 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v10 = __chkstk_darwin(v271);
  uint64_t v276 = (char *)&v145 - v274;
  unint64_t v277 = (v275 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin(v10);
  uint64_t v278 = (char *)&v145 - v277;
  int v317 = (char *)&v145 - v277;
  uint64_t v316 = v11;
  uint64_t v315 = v12;
  type metadata accessor for MLRTrialTaskResult();
  id v280 = MLRTrialTaskResult.__allocating_init()(v13);
  id v314 = v280;
  uint64_t v281 = (*(uint64_t (**)(void))((*v279 & swift_isaMask) + 0x58LL))();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLiteDB?);
  uint64_t v15 = v282;
  OSAllocatedUnfairLock.withLock<A>(_:)( (void (*)(uint64_t))closure #1 in closure #1 in MediaMLPlugin.perform(_:),  0LL,  v281,  v14,  v14);
  uint64_t v283 = v15;
  if (v15)
  {
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }

  uint64_t v16 = swift_release(v281);
  uint64_t v257 = v313;
  if (!v313)
  {
    id v17 = v280;
    id v18 = v280;
    *Swift::String v258 = v280;

    uint64_t v255 = v283;
    return;
  }

  uint64_t v256 = v257;
  uint64_t v19 = v269;
  uint64_t v235 = v257;
  uint64_t v312 = v257;
  static DispatchTime.now()(v16);
  uint64_t v20 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v236 = (void (*)(char *, uint64_t, uint64_t))v263[2];
  v236(v19, v20, v262);
  id v21 = v270;
  uint64_t v244 = 7LL;
  uint64_t v22 = swift_allocObject(&unk_100066938, 24LL, 7LL);
  uint64_t v245 = v22;
  *(void *)(v22 + 16) = v270;
  Swift::String v253 = (os_log_s *)Logger.logObject.getter(v22);
  int v254 = static os_log_type_t.info.getter();
  uint64_t v239 = &v310;
  uint64_t v310 = 12LL;
  unint64_t v237 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v238 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v240 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)(&v311, v239, &type metadata for UInt32, &type metadata for Int, v237, v238, v240);
  uint32_t v241 = v311;
  uint64_t v242 = 17LL;
  uint64_t v23 = swift_allocObject(&unk_100066960, 17LL, v244);
  uint64_t v24 = v242;
  uint64_t v25 = v244;
  uint64_t v247 = v23;
  *(_BYTE *)(v23 + 16) = 64;
  uint64_t v26 = swift_allocObject(&unk_100066988, v24, v25);
  uint64_t v27 = v244;
  uint64_t v248 = v26;
  *(_BYTE *)(v26 + 16) = 8;
  uint64_t v243 = 32LL;
  uint64_t v28 = swift_allocObject(&unk_1000669B0, 32LL, v27);
  uint64_t v29 = v243;
  uint64_t v30 = v244;
  uint64_t v31 = v28;
  uint64_t v32 = v245;
  uint64_t v246 = v31;
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v31 + 24) = v32;
  uint64_t v33 = swift_allocObject(&unk_1000669D8, v29, v30);
  uint64_t v34 = v246;
  uint64_t v250 = v33;
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v33 + 24) = v34;
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v249 = _allocateUninitializedArray<A>(_:)(3LL, v252);
  uint64_t v251 = v35;
  swift_retain(v247);
  uint64_t v36 = v248;
  uint64_t v37 = v247;
  uint64_t v38 = v251;
  *uint64_t v251 = closure #1 in OSLogArguments.append(_:)partial apply;
  v38[1] = v37;
  swift_retain(v36);
  uint64_t v39 = v250;
  uint64_t v40 = v248;
  uint64_t v41 = v251;
  v251[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v41[3] = v40;
  swift_retain(v39);
  uint64_t v42 = v250;
  unint64_t v43 = v251;
  v251[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v43[5] = v42;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v253, (os_log_type_t)v254))
  {
    uint64_t v228 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v229 = createStorage<A>(capacity:type:)(1LL, v227, v227);
    uint64_t v230 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v231 = &v288;
    uint64_t v288 = v228;
    uint64_t v232 = &v287;
    uint64_t v287 = v229;
    uint64_t v233 = &v286;
    uint64_t v286 = v230;
    serialize(_:at:)(2LL, &v288);
    serialize(_:at:)(1LL, v231);
    uint64_t v44 = v283;
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v285 = v247;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)v231, (uint64_t)v232, (uint64_t)v233);
    uint64_t v234 = v44;
    if (v44)
    {
      __break(1u);
    }

    else
    {
      uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v285 = v248;
      closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v288, (uint64_t)&v287, (uint64_t)&v286);
      uint64_t v225 = 0LL;
      uint64_t v45 = v225;
      uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v285 = v250;
      closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v288, (uint64_t)&v287, (uint64_t)&v286);
      uint64_t v224 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v253,  (os_log_type_t)v254,  "Running MLRTrialTask with trialClient: %@",  v228,  v241);
      destroyStorage<A>(_:count:)(v229, 1LL);
      destroyStorage<A>(_:count:)(v230, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_release(v247);
      swift_release(v248);
      swift_release(v250);
      uint64_t v226 = v224;
    }
  }

  else
  {
    swift_release(v247);
    swift_release(v248);
    swift_release(v250);
    uint64_t v226 = v283;
  }

  uint64_t v46 = v267;
  uint64_t v197 = v226;

  uint64_t v198 = (void (*)(char *, uint64_t))v263[1];
  v198(v269, v262);
  dispatch_semaphore_t v199 = dispatch_semaphore_create(0LL);
  dispatch_semaphore_t v309 = v199;
  id v201 = [v270 triClient];
  id v308 = v201;
  [v201 refresh];
  id v200 = [(id)objc_opt_self(TRINamespace) namespaceNameFromId:314];
  uint64_t v204 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v205 = v47;
  uint64_t v306 = v204;
  uint64_t v307 = v47;

  swift_bridgeObjectRetain();
  id v202 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v203 = [v201 experimentIdentifiersWithNamespaceName:v202];

  id v305 = v203;
  uint64_t v48 = MediaMLPlugin.logger.unsafeMutableAddressor();
  v236(v46, v48, v262);
  id v49 = v203;
  uint64_t v211 = 7LL;
  uint64_t v207 = swift_allocObject(&unk_100066A00, 24LL, 7LL);
  *(void *)(v207 + 16) = v203;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v210 = 32LL;
  uint64_t v50 = swift_allocObject(&unk_100066A28, 32LL, v211);
  uint64_t v51 = v205;
  uint64_t v212 = v50;
  *(void *)(v50 + 16) = v204;
  *(void *)(v50 + 24) = v51;
  uint64_t v222 = (os_log_s *)Logger.logObject.getter(v50);
  int v223 = static os_log_type_t.debug.getter();
  uint64_t v303 = 22LL;
  UnsignedInteger<>.init<A>(_:)(&v304, &v303, &type metadata for UInt32, &type metadata for Int, v237, v238, v240);
  uint32_t v206 = v304;
  uint64_t v208 = 17LL;
  uint64_t v52 = swift_allocObject(&unk_100066A50, 17LL, v211);
  uint64_t v53 = v208;
  uint64_t v54 = v211;
  uint64_t v214 = v52;
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v55 = swift_allocObject(&unk_100066A78, v53, v54);
  uint64_t v56 = v210;
  uint64_t v57 = v211;
  uint64_t v215 = v55;
  int v209 = 8;
  *(_BYTE *)(v55 + 16) = 8;
  uint64_t v58 = swift_allocObject(&unk_100066AA0, v56, v57);
  uint64_t v59 = v208;
  uint64_t v60 = v211;
  uint64_t v61 = v58;
  uint64_t v62 = v207;
  uint64_t v216 = v61;
  *(void *)(v61 + 16) = partial apply for implicit closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v61 + 24) = v62;
  uint64_t v63 = swift_allocObject(&unk_100066AC8, v59, v60);
  uint64_t v64 = v208;
  uint64_t v65 = v211;
  uint64_t v217 = v63;
  *(_BYTE *)(v63 + 16) = 32;
  uint64_t v66 = swift_allocObject(&unk_100066AF0, v64, v65);
  uint64_t v67 = v210;
  uint64_t v68 = v211;
  uint64_t v218 = v66;
  *(_BYTE *)(v66 + 16) = v209;
  uint64_t v69 = swift_allocObject(&unk_100066B18, v67, v68);
  uint64_t v70 = v210;
  uint64_t v71 = v211;
  uint64_t v72 = v69;
  uint64_t v73 = v212;
  uint64_t v213 = v72;
  *(void *)(v72 + 16) = partial apply for implicit closure #3 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v72 + 24) = v73;
  uint64_t v74 = swift_allocObject(&unk_100066B40, v70, v71);
  uint64_t v75 = v252;
  uint64_t v76 = v74;
  uint64_t v77 = v213;
  uint64_t v220 = v76;
  *(void *)(v76 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(void *)(v76 + 24) = v77;
  uint64_t v219 = _allocateUninitializedArray<A>(_:)(6LL, v75);
  uint64_t v221 = v78;
  swift_retain(v214);
  uint64_t v79 = v215;
  uint64_t v80 = v214;
  uint64_t v81 = v221;
  *uint64_t v221 = closure #1 in OSLogArguments.append(_:)partial apply;
  v81[1] = v80;
  swift_retain(v79);
  uint64_t v82 = v216;
  uint64_t v83 = v215;
  unint64_t v84 = v221;
  v221[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v84[3] = v83;
  swift_retain(v82);
  uint64_t v85 = v217;
  uint64_t v86 = v216;
  os_log_type_t v87 = v221;
  v221[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v87[5] = v86;
  swift_retain(v85);
  uint64_t v88 = v218;
  uint64_t v89 = v217;
  uint64_t v90 = v221;
  v221[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v90[7] = v89;
  swift_retain(v88);
  uint64_t v91 = v220;
  uint64_t v92 = v218;
  uint64_t v93 = v221;
  v221[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v93[9] = v92;
  swift_retain(v91);
  uint64_t v94 = v220;
  uint64_t v95 = v221;
  v221[10] = closure #1 in OSLogArguments.append(_:)partial apply;
  v95[11] = v94;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v222, (os_log_type_t)v223))
  {
    uint64_t v189 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(22LL, &type metadata for UInt8);
    uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v188 = 1LL;
    uint64_t v190 = createStorage<A>(capacity:type:)(1LL, v187, v187);
    uint64_t v191 = createStorage<A>(capacity:type:)( v188,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v193 = &v293;
    MediaMLPlugin::SQLError v293 = v189;
    uint64_t v194 = &v292;
    uint64_t v292 = v190;
    uint64_t v195 = &v291;
    uint64_t v291 = v191;
    unsigned int v192 = 2;
    serialize(_:at:)(2LL, &v293);
    serialize(_:at:)(v192, v193);
    uint64_t v96 = v197;
    uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v290 = v214;
    closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)v193, (uint64_t)v194, (uint64_t)v195);
    uint64_t v196 = v96;
    if (v96)
    {
      __break(1u);
    }

    else
    {
      uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v290 = v215;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v293, (uint64_t)&v292, (uint64_t)&v291);
      uint64_t v185 = 0LL;
      uint64_t v97 = v185;
      uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v290 = v216;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v293, (uint64_t)&v292, (uint64_t)&v291);
      uint64_t v184 = v97;
      uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v290 = v217;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v293, (uint64_t)&v292, (uint64_t)&v291);
      uint64_t v183 = 0LL;
      uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v290 = v218;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v293, (uint64_t)&v292, (uint64_t)&v291);
      uint64_t v182 = 0LL;
      uint64_t v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v290 = v220;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v293, (uint64_t)&v292, (uint64_t)&v291);
      uint64_t v181 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v222,  (os_log_type_t)v223,  "Found all trialIDs = %@ namespace=%s",  v189,  v206);
      uint64_t v180 = 1LL;
      destroyStorage<A>(_:count:)(v190, 1LL);
      destroyStorage<A>(_:count:)(v191, v180);
      UnsafeMutablePointer.deallocate()();
      swift_release(v214);
      swift_release(v215);
      swift_release(v216);
      swift_release(v217);
      swift_release(v218);
      swift_release(v220);
      uint64_t v186 = v181;
    }
  }

  else
  {
    swift_release(v214);
    swift_release(v215);
    swift_release(v216);
    swift_release(v217);
    swift_release(v218);
    swift_release(v220);
    uint64_t v186 = v197;
  }

  dispatch_semaphore_t v98 = v199;
  uint64_t v176 = v186;

  v198(v267, v262);
  uint64_t v99 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v99 - 8) + 56LL))(v261, 1LL);
  uint64_t v100 = v279;
  id v101 = v203;
  uint64_t v102 = v98;
  uint64_t v103 = swift_allocObject(&unk_100066B68, 64LL, 7LL);
  uint64_t v104 = v279;
  id v105 = v203;
  uint64_t v106 = v259;
  uint64_t v107 = (void *)v103;
  uint64_t v108 = (uint64_t)v261;
  v107[2] = 0LL;
  v107[3] = 0LL;
  v107[4] = v104;
  v107[5] = v105;
  v107[6] = v98;
  v107[7] = v106;
  uint64_t v109 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC( v108,  (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in MediaMLPlugin.perform(_:),  (uint64_t)v107,  (uint64_t)&type metadata for () + 8);
  swift_release(v109);
  OS_dispatch_semaphore.wait()();
  uint64_t v111 = static DispatchTime.now()(v110);
  unint64_t v178 = DispatchTime.uptimeNanoseconds.getter(v111);
  uint64_t v177 = *(uint64_t (**)(char *, uint64_t))(v273 + 8);
  uint64_t v112 = v177(v276, v272);
  unint64_t v113 = DispatchTime.uptimeNanoseconds.getter(v112);
  unint64_t v179 = v178 - v113;
  if (v178 < v113) {
    goto LABEL_33;
  }
  uint64_t v114 = v265;
  uint64_t v160 = &v302;
  unint64_t v302 = v179;
  unint64_t v115 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  double v161 = Double.init<A>(_:)(v160, &type metadata for UInt64, v115);
  double v162 = v161 / *kSecondsFromNanoseconds.unsafeMutableAddressor();
  double v301 = v162;
  uint64_t v116 = MediaMLPlugin.logger.unsafeMutableAddressor();
  v236(v114, v116, v262);
  uint64_t v166 = 7LL;
  uint64_t v117 = swift_allocObject(&unk_100066B90, 24LL, 7LL);
  uint64_t v167 = v117;
  *(double *)(v117 + 16) = v162;
  uint64_t v174 = (os_log_s *)Logger.logObject.getter(v117);
  int v175 = static os_log_type_t.info.getter();
  uint64_t v299 = 12LL;
  UnsignedInteger<>.init<A>(_:)(&v300, &v299, &type metadata for UInt32, &type metadata for Int, v237, v238, v240);
  uint32_t v163 = v300;
  uint64_t v164 = 17LL;
  uint64_t v118 = swift_allocObject(&unk_100066BB8, 17LL, v166);
  uint64_t v119 = v164;
  uint64_t v120 = v166;
  uint64_t v169 = v118;
  *(_BYTE *)(v118 + 16) = 0;
  uint64_t v121 = swift_allocObject(&unk_100066BE0, v119, v120);
  uint64_t v122 = v166;
  uint64_t v170 = v121;
  *(_BYTE *)(v121 + 16) = 8;
  uint64_t v165 = 32LL;
  uint64_t v123 = swift_allocObject(&unk_100066C08, 32LL, v122);
  uint64_t v124 = v165;
  uint64_t v125 = v166;
  uint64_t v126 = v123;
  uint64_t v127 = v167;
  uint64_t v168 = v126;
  *(void *)(v126 + 16) = partial apply for implicit closure #4 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v126 + 24) = v127;
  uint64_t v128 = swift_allocObject(&unk_100066C30, v124, v125);
  uint64_t v129 = v252;
  uint64_t v130 = v128;
  uint64_t v131 = v168;
  uint64_t v172 = v130;
  *(void *)(v130 + 16) = _s2os18OSLogInterpolationV06appendC0_6format5align7privacyySdyXA_AA0B15FloatFormattingVAA0B15StringAlignmentVAA0B7PrivacyVtFSdycfu_TA_0;
  *(void *)(v130 + 24) = v131;
  uint64_t v171 = _allocateUninitializedArray<A>(_:)(3LL, v129);
  uint64_t v173 = v132;
  swift_retain(v169);
  uint64_t v133 = v170;
  uint64_t v134 = v169;
  uint64_t v135 = v173;
  *uint64_t v173 = closure #1 in OSLogArguments.append(_:)partial apply;
  v135[1] = v134;
  swift_retain(v133);
  uint64_t v136 = v172;
  uint64_t v137 = v170;
  uint64_t v138 = v173;
  v173[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v138[3] = v137;
  swift_retain(v136);
  uint64_t v139 = v172;
  uint64_t v140 = v173;
  v173[4] = _s2os14OSLogArgumentsV6appendyySdycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v140[5] = v139;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v174, (os_log_type_t)v175))
  {
    uint64_t v153 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v152 = 0LL;
    uint64_t v154 = createStorage<A>(capacity:type:)(0LL, v151, v151);
    uint64_t v155 = createStorage<A>(capacity:type:)( v152,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v156 = &v298;
    uint64_t v298 = v153;
    uint64_t v157 = &v297;
    uint64_t v297 = v154;
    uint64_t v158 = &v296;
    uint64_t v296 = v155;
    serialize(_:at:)(0LL, &v298);
    serialize(_:at:)(1LL, v156);
    uint64_t v141 = v176;
    Swift::Bool v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v295 = v169;
    closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)v156, (uint64_t)v157, (uint64_t)v158);
    uint64_t v159 = v141;
    if (v141)
    {
      __break(1u);
    }

    else
    {
      Swift::Bool v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      uint64_t v295 = v170;
      closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)&v298, (uint64_t)&v297, (uint64_t)&v296);
      uint64_t v149 = 0LL;
      uint64_t v142 = v149;
      Swift::Bool v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySdycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v295 = v172;
      closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)&v298, (uint64_t)&v297, (uint64_t)&v296);
      uint64_t v148 = v142;
      _os_log_impl( (void *)&_mh_execute_header,  v174,  (os_log_type_t)v175,  "Total Time taken to finish running plugin=%f[s]",  v153,  v163);
      uint64_t v147 = 0LL;
      destroyStorage<A>(_:count:)(v154, 0LL);
      destroyStorage<A>(_:count:)(v155, v147);
      UnsafeMutablePointer.deallocate()();
      swift_release(v169);
      swift_release(v170);
      swift_release(v172);
      uint64_t v150 = v148;
    }
  }

  else
  {
    swift_release(v169);
    swift_release(v170);
    swift_release(v172);
    uint64_t v150 = v176;
  }

  uint64_t v146 = v150;

  v198(v265, v262);
  id v143 = v280;
  id v144 = v203;
  *Swift::String v258 = v280;

  swift_bridgeObjectRelease();
  v177(v278, v272);
  swift_release(v235);

  uint64_t v255 = v146;
}

id MLRTrialTaskResult.__allocating_init()@<X0>(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a1, v1));
  return @nonobjc MLRTrialTaskResult.init()();
}

void *closure #1 in closure #1 in MediaMLPlugin.perform(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return outlined init with copy of SQLiteDB?(a1, a2);
}

id implicit closure #1 in closure #1 in MediaMLPlugin.perform(_:)(void *a1)
{
  return [a1 triClient];
}

void *implicit closure #2 in closure #1 in MediaMLPlugin.perform(_:)(void *a1)
{
  id v1 = a1;
  if (a1) {
    return a1;
  }
  else {
    return 0LL;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in closure #1 in MediaMLPlugin.perform(_:)()
{
}

uint64_t closure #2 in closure #1 in MediaMLPlugin.perform(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[176] = a6;
  v6[175] = a5;
  v6[174] = a4;
  v6[106] = v6;
  v6[107] = 0LL;
  v6[108] = 0LL;
  v6[109] = 0LL;
  v6[110] = 0LL;
  v6[111] = 0LL;
  v6[112] = 0LL;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[177] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[178] = v8;
  uint64_t v13 = *(void *)(v8 + 64);
  v6[179] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[180] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[181] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[182] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[183] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[184] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[185] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[186] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[187] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[188] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[189] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[190] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[191] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DataFrame(0LL);
  v6[192] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[193] = v10;
  uint64_t v14 = *(void *)(v10 + 64);
  v6[194] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[195] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[196] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[197] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[198] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v6[107] = a4;
  v6[108] = a5;
  v6[109] = a6;
  type metadata accessor for WifiModel(0LL);
  uint64_t v11 = (void *)swift_task_alloc(async function pointer to WifiModel.__allocating_init()[1]);
  *(void *)(v18 + 1592) = v11;
  *uint64_t v11 = *(void *)(v18 + 848);
  v11[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return WifiModel.__allocating_init()();
}

uint64_t closure #2 in closure #1 in MediaMLPlugin.perform(_:)(uint64_t a1)
{
  uint64_t v7 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1592LL);
  v7[106] = *(void *)v1;
  v7[200] = a1;
  swift_task_dealloc(v3);
  v7[110] = a1;
  type metadata accessor for CellularModel(0LL);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to CellularModel.__allocating_init()[1]);
  v7[201] = v4;
  *uint64_t v4 = v7[106];
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return CellularModel.__allocating_init()();
}

{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v7;
  uint64_t v7 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1608LL);
  v7[106] = *(void *)v1;
  v7[202] = a1;
  swift_task_dealloc(v3);
  v7[111] = a1;
  uint64_t v4 = (void *)swift_task_alloc(dword_100068B84);
  v7[203] = v4;
  *uint64_t v4 = v7[106];
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.checkAndPruneProcessedCellDB()();
}

uint64_t closure #2 in closure #1 in MediaMLPlugin.perform(_:)()
{
  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1624);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1632) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_100068B9C);
  *(void *)(v5 + 1624) = v3;
  *uint64_t v3 = *v6;
  v3[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.getRawCellDataFromDB()(*(void *)(v5 + 1568));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1640);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1648) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_100068C3C);
  *(void *)(v5 + 1640) = v3;
  *uint64_t v3 = *v6;
  v3[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.getCellDataStandardDeviation()(*(void *)(v5 + 1560));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  void *v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 16;
  uint64_t v9 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1656);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1664) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = *(int **)((**(void **)(v8 + 1376) & swift_isaMask) + 0x98LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v8 + 1656) = v4;
  *uint64_t v4 = *v9;
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return ((uint64_t (*)(void, void))v6)(*(void *)(v8 + 1552), *(void *)(v8 + 1568));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  void *v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 16;
  uint64_t v9 = (void *)(*v1 + 848);
  uint64_t v10 = *v1 + 104;
  uint64_t v2 = *(void *)(*v1 + 1672);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1680) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = *(int **)(**(void **)(v8 + 1600) + 168LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v8 + 1672) = v4;
  *uint64_t v4 = *v9;
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return ((uint64_t (*)(uint64_t, void))v6)(v10, *(void *)(v8 + 1552));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;
  const void *v7;
  void *__dst;
  uint64_t v9;
  uint64_t v9 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 848);
  uint64_t v7 = (const void *)(*v1 + 104);
  __dst = (void *)(*v1 + 280);
  uint64_t v2 = *(void *)(*v1 + 1688);
  *(void *)(v9 + 848) = *v1;
  *(void *)(v9 + 1696) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  outlined init with take of ModelStats?(v7, __dst);
  uint64_t v3 = (void *)swift_task_alloc(dword_100068B94);
  *(void *)(v5 + 1688) = v3;
  *uint64_t v3 = *v6;
  v3[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.cleanRawCellDataFromDB()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1704);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1712) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint32_t size;
  os_log_type_t v27;
  os_log_s *oslog;
  uint64_t v29;
  uint64_t v1 = v0[191];
  uint64_t v22 = v0[178];
  uint64_t v23 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  v0[215] = v3;
  uint64_t v4 = v3(v1, v2, v23);
  oslog = (os_log_s *)Logger.logObject.getter(v4);
  uint64_t v27 = static os_log_type_t.info.getter();
  v0[114] = 2LL;
  uint64_t v24 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v0[216] = v24;
  uint64_t v25 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v0[217] = v25;
  uint64_t v5 = lazy protocol witness table accessor for type Int and conformance Int();
  v0[218] = v5;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 188),  v0 + 114,  &type metadata for UInt32,  &type metadata for Int,  v24,  v25,  v5);
  uint32_t size = *((_DWORD *)v0 + 47);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v0[219] = v6;
  uint64_t v29 = _allocateUninitializedArray<A>(_:)(0LL, v6);
  if (!os_log_type_enabled(oslog, v27))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(v21 + 1712);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  id v17 = createStorage<A>(capacity:type:)(0LL, v15, v15);
  uint64_t v18 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  *(void *)(v21 + 1360) = buf;
  *(void *)(v21 + 1368) = v17;
  *(void *)(v21 + 1376) = v18;
  serialize(_:at:)(0LL, (_BYTE **)(v21 + 1360));
  serialize(_:at:)(0LL, (_BYTE **)(v21 + 1360));
  *(void *)(v21 + 1384) = v29;
  uint64_t v19 = (void *)swift_task_alloc(48LL);
  v19[2] = v21 + 1360;
  v19[3] = v21 + 1368;
  v19[4] = v21 + 1376;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  uint64_t v8 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v19, v20, v8);
  if (!v7)
  {
    swift_task_dealloc(v19);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v27,  "Finished cell model training and received modelStats",  buf,  size);
    destroyStorage<A>(_:count:)(v17, 0LL);
    destroyStorage<A>(_:count:)(v18, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v13 = *(void *)(v21 + 1528);
    uint64_t v12 = *(void *)(v21 + 1424);
    uint64_t v14 = *(void *)(v21 + 1416);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    *(void *)(v21 + 1760) = v10;
    v10(v13, v14);
    uint64_t v11 = (void *)swift_task_alloc(dword_100068B6C);
    *(void *)(v21 + 1768) = v11;
    *uint64_t v11 = *(void *)(v21 + 848);
    v11[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
    return MediaMLPlugin.checkAndPruneProcessedWifiDB()();
  }

  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v7 = *v1;
  uint64_t v5 = *v1 + 16;
  uint64_t v6 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1768);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1776) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = (void *)swift_task_alloc(dword_100068BA4);
  *(void *)(v5 + 1768) = v3;
  *uint64_t v3 = *v6;
  v3[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.getRawWiFiDataFromDB()(*(void *)(v5 + 1544));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  void *v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 16;
  uint64_t v9 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1784);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1792) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = *(int **)((**(void **)(v8 + 1376) & swift_isaMask) + 0xA8LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v8 + 1784) = v4;
  *uint64_t v4 = *v9;
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return ((uint64_t (*)(void, void))v6)(*(void *)(v8 + 1536), *(void *)(v8 + 1544));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  int *v3;
  void *v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 16;
  uint64_t v9 = (void *)(*v1 + 848);
  uint64_t v2 = *(void *)(*v1 + 1800);
  *(void *)(v7 + 848) = *v1;
  *(void *)(v7 + 1808) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  uint64_t v3 = *(int **)(**(void **)(v8 + 1584) + 160LL);
  uint64_t v6 = (int *)((char *)v3 + *v3);
  uint64_t v4 = (void *)swift_task_alloc(v3[1]);
  *(void *)(v8 + 1800) = v4;
  *uint64_t v4 = *v9;
  v4[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return ((uint64_t (*)(uint64_t, void))v6)(v8, *(void *)(v8 + 1536));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v5;
  void *v6;
  void *__dst;
  uint64_t v8;
  uint64_t v8 = *v1;
  uint64_t v5 = (void *)(*v1 + 16);
  uint64_t v6 = (void *)(*v1 + 848);
  __dst = (void *)(*v1 + 192);
  uint64_t v2 = *(void *)(*v1 + 1816);
  *(void *)(v8 + 848) = *v1;
  *(void *)(v8 + 1824) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  outlined init with take of ModelStats?(v5, __dst);
  uint64_t v3 = (void *)swift_task_alloc(dword_100068B8C);
  v5[227] = v3;
  *uint64_t v3 = *v6;
  v3[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return MediaMLPlugin.cleanRawWiFiDataFromDB()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1832);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1840) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1848);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1856) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  void *v7;
  int *v8;
  void *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32_t size;
  os_log_type_t v37;
  os_log_s *oslog;
  uint64_t v39;
  uint64_t v35 = v0[219];
  uint64_t v34 = v0[218];
  uint64_t v33 = v0[217];
  uint64_t v32 = v0[216];
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[188];
  uint64_t v30 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v31(v1, v2, v30);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v37 = static os_log_type_t.info.getter();
  v0[142] = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 1996),  v0 + 142,  &type metadata for UInt32,  &type metadata for Int,  v32,  v33,  v34);
  uint32_t size = *((_DWORD *)v0 + 499);
  uint64_t v39 = _allocateUninitializedArray<A>(_:)(0LL, v35);
  if (os_log_type_enabled(oslog, v37))
  {
    uint64_t v4 = *(void *)(v29 + 1856);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0LL, v23, v23);
    uint64_t v26 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v29 + 1264) = buf;
    *(void *)(v29 + 1272) = v25;
    *(void *)(v29 + 1280) = v26;
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1264));
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1264));
    *(void *)(v29 + 1288) = v39;
    uint64_t v27 = (void *)swift_task_alloc(48LL);
    v27[2] = v29 + 1264;
    v27[3] = v29 + 1272;
    v27[4] = v29 + 1280;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v27, v28, v5);
    if (v4) {
      return result;
    }
    swift_task_dealloc(v27);
    _os_log_impl((void *)&_mh_execute_header, oslog, v37, "Saved wifiModelStats to modelStats table", buf, size);
    destroyStorage<A>(_:count:)(v25, 0LL);
    destroyStorage<A>(_:count:)(v26, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v29 + 1760);
  uint64_t v11 = *(void *)(v29 + 1504);
  uint64_t v12 = *(void *)(v29 + 1416);

  v13(v11, v12);
  uint64_t v14 = *(void *)(v29 + 200);
  uint64_t v15 = *(void *)(v29 + 208);
  uint64_t v16 = *(void *)(v29 + 216);
  id v17 = *(void *)(v29 + 224);
  uint64_t v18 = *(void *)(v29 + 232);
  uint64_t v19 = *(void *)(v29 + 240);
  uint64_t v20 = *(void *)(v29 + 248);
  id v21 = *(void *)(v29 + 256);
  uint64_t v22 = *(void *)(v29 + 264);
  if ((*(_BYTE *)(v29 + 272) & 1) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  949LL,  0);
  }
  uint64_t v7 = *(void **)(v29 + 1392);
  *(void *)(v29 + 448) = *(void *)(v29 + 192);
  *(void *)(v29 + 456) = v14;
  *(void *)(v29 + 464) = v15;
  *(void *)(v29 + 472) = v16;
  *(void *)(v29 + 480) = v17;
  *(void *)(v29 + 488) = v18;
  *(void *)(v29 + 496) = v19;
  *(void *)(v29 + 504) = v20;
  *(void *)(v29 + 512) = v21;
  *(void *)(v29 + 520) = v22;
  uint64_t v8 = *(int **)((*v7 & swift_isaMask) + 0xE0LL);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v29 + 1864) = v9;
  *uint64_t v9 = *(void *)(v29 + 848);
  v9[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return v10(v29 + 448);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1864);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1872) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t size;
  os_log_type_t v28;
  os_log_s *oslog;
  uint64_t v30;
  uint64_t v26 = v0[219];
  uint64_t v25 = v0[218];
  uint64_t v24 = v0[217];
  uint64_t v23 = v0[216];
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[187];
  id v21 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v22(v1, v2, v21);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v28 = static os_log_type_t.info.getter();
  v0[143] = 2LL;
  UnsignedInteger<>.init<A>(_:)(v0 + 250, v0 + 143, &type metadata for UInt32, &type metadata for Int, v23, v24, v25);
  uint32_t size = *((_DWORD *)v0 + 500);
  uint64_t v30 = _allocateUninitializedArray<A>(_:)(0LL, v26);
  if (!os_log_type_enabled(oslog, v28))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v4 = *(void *)(v20 + 1872);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v16 = createStorage<A>(capacity:type:)(0LL, v14, v14);
  id v17 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  *(void *)(v20 + 1232) = buf;
  *(void *)(v20 + 1240) = v16;
  *(void *)(v20 + 1248) = v17;
  serialize(_:at:)(0LL, (_BYTE **)(v20 + 1232));
  serialize(_:at:)(0LL, (_BYTE **)(v20 + 1232));
  *(void *)(v20 + 1256) = v30;
  uint64_t v18 = (void *)swift_task_alloc(48LL);
  void v18[2] = v20 + 1232;
  v18[3] = v20 + 1240;
  v18[4] = v20 + 1248;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v18, v19, v5);
  if (!v4)
  {
    swift_task_dealloc(v18);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v28,  "Deleted previous wifiModelStats from modelStats table",  buf,  size);
    destroyStorage<A>(_:count:)(v16, 0LL);
    destroyStorage<A>(_:count:)(v17, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v20 + 1760);
    uint64_t v9 = *(void *)(v20 + 1496);
    uint64_t v10 = *(void *)(v20 + 1416);
    uint64_t v12 = *(void **)(v20 + 1392);

    v11(v9, v10);
    uint64_t v7 = *(int **)((*v12 & swift_isaMask) + 0xB8LL);
    uint64_t v13 = (uint64_t (*)(void))((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v20 + 1880) = v8;
    *uint64_t v8 = *(void *)(v20 + 848);
    v8[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
    return v13();
  }

  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1880);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1888) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  void *v7;
  int *v8;
  void *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32_t size;
  os_log_type_t v37;
  os_log_s *oslog;
  uint64_t v39;
  uint64_t v35 = v0[219];
  uint64_t v34 = v0[218];
  uint64_t v33 = v0[217];
  uint64_t v32 = v0[216];
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[186];
  uint64_t v30 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v31(v1, v2, v30);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v37 = static os_log_type_t.info.getter();
  v0[144] = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 2004),  v0 + 144,  &type metadata for UInt32,  &type metadata for Int,  v32,  v33,  v34);
  uint32_t size = *((_DWORD *)v0 + 501);
  uint64_t v39 = _allocateUninitializedArray<A>(_:)(0LL, v35);
  if (os_log_type_enabled(oslog, v37))
  {
    uint64_t v4 = *(void *)(v29 + 1888);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0LL, v23, v23);
    uint64_t v26 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v29 + 1200) = buf;
    *(void *)(v29 + 1208) = v25;
    *(void *)(v29 + 1216) = v26;
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1200));
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1200));
    *(void *)(v29 + 1224) = v39;
    uint64_t v27 = (void *)swift_task_alloc(48LL);
    v27[2] = v29 + 1200;
    v27[3] = v29 + 1208;
    v27[4] = v29 + 1216;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v27, v28, v5);
    if (v4) {
      return result;
    }
    swift_task_dealloc(v27);
    _os_log_impl((void *)&_mh_execute_header, oslog, v37, "Saved wifiStandardDeviation to wifiStdDev table", buf, size);
    destroyStorage<A>(_:count:)(v25, 0LL);
    destroyStorage<A>(_:count:)(v26, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v29 + 1760);
  uint64_t v11 = *(void *)(v29 + 1488);
  uint64_t v12 = *(void *)(v29 + 1416);

  v13(v11, v12);
  uint64_t v14 = *(void *)(v29 + 200);
  uint64_t v15 = *(void *)(v29 + 208);
  uint64_t v16 = *(void *)(v29 + 216);
  id v17 = *(void *)(v29 + 224);
  uint64_t v18 = *(void *)(v29 + 232);
  uint64_t v19 = *(void *)(v29 + 240);
  uint64_t v20 = *(void *)(v29 + 248);
  id v21 = *(void *)(v29 + 256);
  uint64_t v22 = *(void *)(v29 + 264);
  if ((*(_BYTE *)(v29 + 272) & 1) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  953LL,  0);
  }
  uint64_t v7 = *(void **)(v29 + 1392);
  *(void *)(v29 + 528) = *(void *)(v29 + 192);
  *(void *)(v29 + 536) = v14;
  *(void *)(v29 + 544) = v15;
  *(void *)(v29 + 552) = v16;
  *(void *)(v29 + 560) = v17;
  *(void *)(v29 + 568) = v18;
  *(void *)(v29 + 576) = v19;
  *(void *)(v29 + 584) = v20;
  *(void *)(v29 + 592) = v21;
  *(void *)(v29 + 600) = v22;
  uint64_t v8 = *(int **)((*v7 & swift_isaMask) + 0xE8LL);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v29 + 1896) = v9;
  *uint64_t v9 = *(void *)(v29 + 848);
  v9[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return v10(v29 + 528);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1896);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1904) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1912);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1920) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  void *v7;
  int *v8;
  void *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32_t size;
  os_log_type_t v37;
  os_log_s *oslog;
  uint64_t v39;
  uint64_t v35 = v0[219];
  uint64_t v34 = v0[218];
  uint64_t v33 = v0[217];
  uint64_t v32 = v0[216];
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[183];
  uint64_t v30 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v31(v1, v2, v30);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v37 = static os_log_type_t.info.getter();
  v0[117] = 2LL;
  UnsignedInteger<>.init<A>(_:)(v0 + 247, v0 + 117, &type metadata for UInt32, &type metadata for Int, v32, v33, v34);
  uint32_t size = *((_DWORD *)v0 + 494);
  uint64_t v39 = _allocateUninitializedArray<A>(_:)(0LL, v35);
  if (os_log_type_enabled(oslog, v37))
  {
    uint64_t v4 = *(void *)(v29 + 1920);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0LL, v23, v23);
    uint64_t v26 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v29 + 1064) = buf;
    *(void *)(v29 + 1072) = v25;
    *(void *)(v29 + 1080) = v26;
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1064));
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1064));
    *(void *)(v29 + 1088) = v39;
    uint64_t v27 = (void *)swift_task_alloc(48LL);
    v27[2] = v29 + 1064;
    v27[3] = v29 + 1072;
    v27[4] = v29 + 1080;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v27, v28, v5);
    if (v4) {
      return result;
    }
    swift_task_dealloc(v27);
    _os_log_impl((void *)&_mh_execute_header, oslog, v37, "Saved cellModelStats to modelStats table", buf, size);
    destroyStorage<A>(_:count:)(v25, 0LL);
    destroyStorage<A>(_:count:)(v26, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v29 + 1760);
  uint64_t v11 = *(void *)(v29 + 1464);
  uint64_t v12 = *(void *)(v29 + 1416);

  v13(v11, v12);
  uint64_t v14 = *(void *)(v29 + 288);
  uint64_t v15 = *(void *)(v29 + 296);
  uint64_t v16 = *(void *)(v29 + 304);
  id v17 = *(void *)(v29 + 312);
  uint64_t v18 = *(void *)(v29 + 320);
  uint64_t v19 = *(void *)(v29 + 328);
  uint64_t v20 = *(void *)(v29 + 336);
  id v21 = *(void *)(v29 + 344);
  uint64_t v22 = *(void *)(v29 + 352);
  if ((*(_BYTE *)(v29 + 360) & 1) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  975LL,  0);
  }
  uint64_t v7 = *(void **)(v29 + 1392);
  *(void *)(v29 + 688) = *(void *)(v29 + 280);
  *(void *)(v29 + 696) = v14;
  *(void *)(v29 + 704) = v15;
  *(void *)(v29 + 712) = v16;
  *(void *)(v29 + 720) = v17;
  *(void *)(v29 + 728) = v18;
  *(void *)(v29 + 736) = v19;
  *(void *)(v29 + 744) = v20;
  *(void *)(v29 + 752) = v21;
  *(void *)(v29 + 760) = v22;
  uint64_t v8 = *(int **)((*v7 & swift_isaMask) + 0xE0LL);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v29 + 1928) = v9;
  *uint64_t v9 = *(void *)(v29 + 848);
  v9[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return v10(v29 + 688);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1928);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1936) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint32_t size;
  os_log_type_t v28;
  os_log_s *oslog;
  uint64_t v30;
  uint64_t v26 = v0[219];
  uint64_t v25 = v0[218];
  uint64_t v24 = v0[217];
  uint64_t v23 = v0[216];
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[182];
  id v21 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v22(v1, v2, v21);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v28 = static os_log_type_t.info.getter();
  v0[118] = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 1980),  v0 + 118,  &type metadata for UInt32,  &type metadata for Int,  v23,  v24,  v25);
  uint32_t size = *((_DWORD *)v0 + 495);
  uint64_t v30 = _allocateUninitializedArray<A>(_:)(0LL, v26);
  if (!os_log_type_enabled(oslog, v28))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v4 = *(void *)(v20 + 1936);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v16 = createStorage<A>(capacity:type:)(0LL, v14, v14);
  id v17 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  *(void *)(v20 + 1032) = buf;
  *(void *)(v20 + 1040) = v16;
  *(void *)(v20 + 1048) = v17;
  serialize(_:at:)(0LL, (_BYTE **)(v20 + 1032));
  serialize(_:at:)(0LL, (_BYTE **)(v20 + 1032));
  *(void *)(v20 + 1056) = v30;
  uint64_t v18 = (void *)swift_task_alloc(48LL);
  void v18[2] = v20 + 1032;
  v18[3] = v20 + 1040;
  v18[4] = v20 + 1048;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v18, v19, v5);
  if (!v4)
  {
    swift_task_dealloc(v18);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v28,  "Deleted previous cellModelStats from modelStats table",  buf,  size);
    destroyStorage<A>(_:count:)(v16, 0LL);
    destroyStorage<A>(_:count:)(v17, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v20 + 1760);
    uint64_t v9 = *(void *)(v20 + 1456);
    uint64_t v10 = *(void *)(v20 + 1416);
    uint64_t v12 = *(void **)(v20 + 1392);

    v11(v9, v10);
    uint64_t v7 = *(int **)((*v12 & swift_isaMask) + 0xC8LL);
    uint64_t v13 = (uint64_t (*)(void))((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v20 + 1944) = v8;
    *uint64_t v8 = *(void *)(v20 + 848);
    v8[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
    return v13(*(void *)(v20 + 1576));
  }

  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1944);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1952) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  void *v7;
  int *v8;
  void *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32_t size;
  os_log_type_t v37;
  os_log_s *oslog;
  uint64_t v39;
  uint64_t v35 = v0[219];
  uint64_t v34 = v0[218];
  uint64_t v33 = v0[217];
  uint64_t v32 = v0[216];
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[181];
  uint64_t v30 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v31(v1, v2, v30);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v37 = static os_log_type_t.info.getter();
  v0[119] = 2LL;
  UnsignedInteger<>.init<A>(_:)(v0 + 248, v0 + 119, &type metadata for UInt32, &type metadata for Int, v32, v33, v34);
  uint32_t size = *((_DWORD *)v0 + 496);
  uint64_t v39 = _allocateUninitializedArray<A>(_:)(0LL, v35);
  if (os_log_type_enabled(oslog, v37))
  {
    uint64_t v4 = *(void *)(v29 + 1952);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v25 = createStorage<A>(capacity:type:)(0LL, v23, v23);
    uint64_t v26 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v29 + 1000) = buf;
    *(void *)(v29 + 1008) = v25;
    *(void *)(v29 + 1016) = v26;
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1000));
    serialize(_:at:)(0LL, (_BYTE **)(v29 + 1000));
    *(void *)(v29 + 1024) = v39;
    uint64_t v27 = (void *)swift_task_alloc(48LL);
    v27[2] = v29 + 1000;
    v27[3] = v29 + 1008;
    v27[4] = v29 + 1016;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v27, v28, v5);
    if (v4) {
      return result;
    }
    swift_task_dealloc(v27);
    _os_log_impl((void *)&_mh_execute_header, oslog, v37, "Saved cellStandardDeviation to cellStdDev table", buf, size);
    destroyStorage<A>(_:count:)(v25, 0LL);
    destroyStorage<A>(_:count:)(v26, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v29 + 1760);
  uint64_t v11 = *(void *)(v29 + 1448);
  uint64_t v12 = *(void *)(v29 + 1416);

  v13(v11, v12);
  uint64_t v14 = *(void *)(v29 + 288);
  uint64_t v15 = *(void *)(v29 + 296);
  uint64_t v16 = *(void *)(v29 + 304);
  id v17 = *(void *)(v29 + 312);
  uint64_t v18 = *(void *)(v29 + 320);
  uint64_t v19 = *(void *)(v29 + 328);
  uint64_t v20 = *(void *)(v29 + 336);
  id v21 = *(void *)(v29 + 344);
  uint64_t v22 = *(void *)(v29 + 352);
  if ((*(_BYTE *)(v29 + 360) & 1) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  979LL,  0);
  }
  uint64_t v7 = *(void **)(v29 + 1392);
  *(void *)(v29 + 768) = *(void *)(v29 + 280);
  *(void *)(v29 + 776) = v14;
  *(void *)(v29 + 784) = v15;
  *(void *)(v29 + 792) = v16;
  *(void *)(v29 + 800) = v17;
  *(void *)(v29 + 808) = v18;
  *(void *)(v29 + 816) = v19;
  *(void *)(v29 + 824) = v20;
  *(void *)(v29 + 832) = v21;
  *(void *)(v29 + 840) = v22;
  uint64_t v8 = *(int **)((*v7 & swift_isaMask) + 0xF0LL);
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  *(void *)(v29 + 1960) = v9;
  *uint64_t v9 = *(void *)(v29 + 848);
  v9[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return v10(v29 + 768);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1960);
  *(void *)(v2 + 848) = *v1;
  *(void *)(v2 + 1968) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
  else {
    return swift_task_switch(closure #2 in closure #1 in MediaMLPlugin.perform(_:), 0LL);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *buf;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint32_t size;
  os_log_type_t v50;
  os_log_s *oslog;
  uint64_t v52;
  uint64_t v48 = v0[219];
  uint64_t v47 = v0[218];
  uint64_t v46 = v0[217];
  uint64_t v45 = v0[216];
  uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[180];
  unint64_t v43 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v44(v1, v2, v43);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v50 = static os_log_type_t.info.getter();
  v0[120] = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 1988),  v0 + 120,  &type metadata for UInt32,  &type metadata for Int,  v45,  v46,  v47);
  uint32_t size = *((_DWORD *)v0 + 497);
  uint64_t v52 = _allocateUninitializedArray<A>(_:)(0LL, v48);
  if (!os_log_type_enabled(oslog, v50))
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  uint64_t v4 = *(void *)(v42 + 1968);
  buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v38 = createStorage<A>(capacity:type:)(0LL, v36, v36);
  uint64_t v39 = createStorage<A>(capacity:type:)(0LL, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for Any + 8);
  *(void *)(v42 + 968) = buf;
  *(void *)(v42 + 976) = v38;
  *(void *)(v42 + 984) = v39;
  serialize(_:at:)(0LL, (_BYTE **)(v42 + 968));
  serialize(_:at:)(0LL, (_BYTE **)(v42 + 968));
  *(void *)(v42 + 992) = v52;
  uint64_t v40 = (void *)swift_task_alloc(48LL);
  void v40[2] = v42 + 968;
  v40[3] = v42 + 976;
  v40[4] = v42 + 984;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
  uint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
  uint64_t result = Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v40, v41, v5);
  if (!v4)
  {
    swift_task_dealloc(v40);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v50,  "Deleted previous cellStandardDeviation from cellStdDev table",  buf,  size);
    destroyStorage<A>(_:count:)(v38, 0LL);
    destroyStorage<A>(_:count:)(v39, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v42 + 1760);
    uint64_t v7 = *(void *)(v42 + 1440);
    uint64_t v8 = *(void *)(v42 + 1416);

    v9(v7, v8);
    uint64_t v13 = *(void *)(v42 + 1584);
    uint64_t v12 = *(void *)(v42 + 1576);
    uint64_t v11 = *(void *)(v42 + 1568);
    uint64_t v10 = *(void *)(v42 + 1560);
    uint64_t v14 = *(void *)(v42 + 1536);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v42 + 1544) + 8LL);
    ((void (*)(void))v15)(*(void *)(v42 + 1552));
    v15(v10, v14);
    v15(v11, v14);
    v15(v12, v14);
    v15(v13, v14);
    uint64_t v16 = *(void *)(v42 + 1616);
    id v17 = *(void *)(v42 + 1600);
    uint64_t v18 = *(void *)(v42 + 1584);
    uint64_t v19 = *(void *)(v42 + 1576);
    uint64_t v20 = *(void *)(v42 + 1568);
    id v21 = *(void *)(v42 + 1560);
    uint64_t v22 = *(void *)(v42 + 1552);
    uint64_t v23 = *(void *)(v42 + 1528);
    uint64_t v24 = *(void *)(v42 + 1520);
    uint64_t v25 = *(void *)(v42 + 1512);
    uint64_t v26 = *(void *)(v42 + 1504);
    uint64_t v27 = *(void *)(v42 + 1496);
    uint64_t v28 = *(void *)(v42 + 1488);
    uint64_t v29 = *(void *)(v42 + 1480);
    uint64_t v30 = *(void *)(v42 + 1472);
    uint64_t v31 = *(void *)(v42 + 1464);
    uint64_t v32 = *(void *)(v42 + 1456);
    uint64_t v33 = *(void *)(v42 + 1448);
    uint64_t v34 = *(void *)(v42 + 1440);
    uint64_t v35 = *(void *)(v42 + 1432);
    OS_dispatch_semaphore.signal()();
    swift_release(v16);
    swift_release(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(*(void *)(v42 + 848) + 8LL))();
  }

  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint32_t size;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  os_log_s *oslog;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  v0[106] = v0;
  uint64_t v37 = v0[204];
  uint64_t v1 = v0[179];
  uint64_t v35 = v0[178];
  uint64_t v36 = v0[177];
  swift_errorRetain(v37);
  v0[112] = v37;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v1, v2, v36);
  swift_errorRetain(v37);
  uint64_t v41 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v41 + 16) = v37;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v3 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v50 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v39 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v38,  v39,  v4);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v44 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v44 + 16) = 64;
  uint64_t v45 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v45 + 16) = 8;
  uint64_t v42 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v42 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v42 + 24) = v41;
  unint64_t v43 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v43 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v43 + 24) = v42;
  uint64_t v46 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v46 + 24) = v43;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v48);
  uint64_t v47 = v5;
  swift_retain(v44);
  *uint64_t v47 = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[1] = v44;
  swift_retain(v45);
  v47[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[3] = v45;
  swift_retain(v46);
  v47[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[5] = v46;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v50))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = createStorage<A>(capacity:type:)(1LL, v30, v30);
    uint64_t v33 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v51 = buf;
    uint64_t v52 = v32;
    uint64_t v53 = v33;
    serialize(_:at:)(2LL, &v51);
    serialize(_:at:)(1LL, &v51);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v44;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    _os_log_impl((void *)&_mh_execute_header, oslog, v50, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v32, 1LL);
    destroyStorage<A>(_:count:)(v33, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v44);
    swift_release(v45);
    swift_release(v46);
  }

  else
  {
    swift_release(v44);
    swift_release(v45);
    swift_release(v46);
  }

  uint64_t v8 = v34[179];
  uint64_t v7 = v34[178];
  uint64_t v9 = v34[177];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_errorRelease(v37);
  swift_errorRelease(v37);
  uint64_t v10 = v34[202];
  uint64_t v11 = v34[200];
  uint64_t v12 = v34[198];
  uint64_t v13 = v34[197];
  uint64_t v14 = v34[196];
  uint64_t v15 = v34[195];
  uint64_t v16 = v34[194];
  id v17 = v34[191];
  uint64_t v18 = v34[190];
  uint64_t v19 = v34[189];
  uint64_t v20 = v34[188];
  id v21 = v34[187];
  uint64_t v22 = v34[186];
  uint64_t v23 = v34[185];
  uint64_t v24 = v34[184];
  uint64_t v25 = v34[183];
  uint64_t v26 = v34[182];
  uint64_t v27 = v34[181];
  uint64_t v28 = v34[180];
  uint64_t v29 = v34[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v10);
  swift_release(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v34[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *buf;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint32_t size;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  os_log_s *oslog;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  v0[106] = v0;
  uint64_t v37 = v0[206];
  uint64_t v1 = v0[179];
  uint64_t v35 = v0[178];
  uint64_t v36 = v0[177];
  swift_errorRetain(v37);
  v0[112] = v37;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v1, v2, v36);
  swift_errorRetain(v37);
  uint64_t v41 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v41 + 16) = v37;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v3 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  uint64_t v50 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v39 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v38,  v39,  v4);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v44 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v44 + 16) = 64;
  uint64_t v45 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v45 + 16) = 8;
  uint64_t v42 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v42 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v42 + 24) = v41;
  unint64_t v43 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v43 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v43 + 24) = v42;
  uint64_t v46 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v46 + 24) = v43;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v48);
  uint64_t v47 = v5;
  swift_retain(v44);
  *uint64_t v47 = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[1] = v44;
  swift_retain(v45);
  v47[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[3] = v45;
  swift_retain(v46);
  v47[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v47[5] = v46;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v50))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v32 = createStorage<A>(capacity:type:)(1LL, v30, v30);
    uint64_t v33 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v51 = buf;
    uint64_t v52 = v32;
    uint64_t v53 = v33;
    serialize(_:at:)(2LL, &v51);
    serialize(_:at:)(1LL, &v51);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v44;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v45;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v55 = v46;
    closure #1 in osLogInternal(_:log:type:)(&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    _os_log_impl((void *)&_mh_execute_header, oslog, v50, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v32, 1LL);
    destroyStorage<A>(_:count:)(v33, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v44);
    swift_release(v45);
    swift_release(v46);
  }

  else
  {
    swift_release(v44);
    swift_release(v45);
    swift_release(v46);
  }

  uint64_t v8 = v34[179];
  uint64_t v7 = v34[178];
  uint64_t v9 = v34[177];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_errorRelease(v37);
  swift_errorRelease(v37);
  uint64_t v10 = v34[202];
  uint64_t v11 = v34[200];
  uint64_t v12 = v34[198];
  uint64_t v13 = v34[197];
  uint64_t v14 = v34[196];
  uint64_t v15 = v34[195];
  uint64_t v16 = v34[194];
  id v17 = v34[191];
  uint64_t v18 = v34[190];
  uint64_t v19 = v34[189];
  uint64_t v20 = v34[188];
  id v21 = v34[187];
  uint64_t v22 = v34[186];
  uint64_t v23 = v34[185];
  uint64_t v24 = v34[184];
  uint64_t v25 = v34[183];
  uint64_t v26 = v34[182];
  uint64_t v27 = v34[181];
  uint64_t v28 = v34[180];
  uint64_t v29 = v34[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v10);
  swift_release(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v34[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *buf;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint32_t size;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  os_log_s *oslog;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v1 = v0[198];
  uint64_t v2 = v0[193];
  uint64_t v3 = v0[192];
  v0[106] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v40 = v0[208];
  uint64_t v4 = v0[179];
  uint64_t v38 = v0[178];
  uint64_t v39 = v0[177];
  swift_errorRetain(v40);
  v0[112] = v40;
  uint64_t v5 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v4, v5, v39);
  swift_errorRetain(v40);
  uint64_t v44 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v44 + 16) = v40;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v6 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v53 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v41 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v7 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v41,  v42,  v7);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v47 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v47 + 16) = 64;
  uint64_t v48 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v48 + 16) = 8;
  uint64_t v45 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v45 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v45 + 24) = v44;
  uint64_t v46 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v46 + 24) = v45;
  id v49 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v49 + 24) = v46;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v51);
  uint64_t v50 = v8;
  swift_retain(v47);
  *uint64_t v50 = closure #1 in OSLogArguments.append(_:)partial apply;
  v50[1] = v47;
  swift_retain(v48);
  v50[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v50[3] = v48;
  swift_retain(v49);
  v50[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v50[5] = v49;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v53))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v35 = createStorage<A>(capacity:type:)(1LL, v33, v33);
    uint64_t v36 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v54 = buf;
    uint64_t v55 = v35;
    uint64_t v56 = v36;
    serialize(_:at:)(2LL, &v54);
    serialize(_:at:)(1LL, &v54);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v58 = v47;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v58 = v48;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v58 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    _os_log_impl((void *)&_mh_execute_header, oslog, v53, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v35, 1LL);
    destroyStorage<A>(_:count:)(v36, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v47);
    swift_release(v48);
    swift_release(v49);
  }

  else
  {
    swift_release(v47);
    swift_release(v48);
    swift_release(v49);
  }

  uint64_t v11 = v37[179];
  uint64_t v10 = v37[178];
  uint64_t v12 = v37[177];

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_errorRelease(v40);
  swift_errorRelease(v40);
  uint64_t v13 = v37[202];
  uint64_t v14 = v37[200];
  uint64_t v15 = v37[198];
  uint64_t v16 = v37[197];
  id v17 = v37[196];
  uint64_t v18 = v37[195];
  uint64_t v19 = v37[194];
  uint64_t v20 = v37[191];
  id v21 = v37[190];
  uint64_t v22 = v37[189];
  uint64_t v23 = v37[188];
  uint64_t v24 = v37[187];
  uint64_t v25 = v37[186];
  uint64_t v26 = v37[185];
  uint64_t v27 = v37[184];
  uint64_t v28 = v37[183];
  uint64_t v29 = v37[182];
  uint64_t v30 = v37[181];
  uint64_t v31 = v37[180];
  uint64_t v32 = v37[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v13);
  swift_release(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v37[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint32_t size;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  os_log_s *oslog;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v37 = v0[198];
  uint64_t v1 = v0[197];
  uint64_t v2 = v0[193];
  uint64_t v38 = v0[192];
  v0[106] = v0;
  uint64_t v39 = *(void (**)(uint64_t))(v2 + 8);
  v39(v1);
  ((void (*)(uint64_t, uint64_t))v39)(v37, v38);
  uint64_t v42 = v0[210];
  uint64_t v3 = v0[179];
  uint64_t v40 = v0[178];
  uint64_t v41 = v0[177];
  swift_errorRetain(v42);
  v0[112] = v42;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v3, v4, v41);
  swift_errorRetain(v42);
  uint64_t v46 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v46 + 16) = v42;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v55 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  unint64_t v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v43,  v44,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  id v49 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v49 + 16) = 64;
  uint64_t v50 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v50 + 16) = 8;
  uint64_t v47 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v47 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v47 + 24) = v46;
  uint64_t v48 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v48 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v48 + 24) = v47;
  uint64_t v51 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v48;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v53);
  uint64_t v52 = v7;
  swift_retain(v49);
  *uint64_t v52 = closure #1 in OSLogArguments.append(_:)partial apply;
  v52[1] = v49;
  swift_retain(v50);
  v52[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v52[3] = v50;
  swift_retain(v51);
  v52[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v52[5] = v51;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v55))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v56 = buf;
    uint64_t v57 = v34;
    uint64_t v58 = v35;
    serialize(_:at:)(2LL, &v56);
    serialize(_:at:)(1LL, &v56);
    uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v60 = v49;
    closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)&v56, (uint64_t)&v57, (uint64_t)&v58);
    uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v60 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)&v56, (uint64_t)&v57, (uint64_t)&v58);
    uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v60 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v59, (uint64_t)&v56, (uint64_t)&v57, (uint64_t)&v58);
    _os_log_impl((void *)&_mh_execute_header, oslog, v55, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v49);
    swift_release(v50);
    swift_release(v51);
  }

  else
  {
    swift_release(v49);
    swift_release(v50);
    swift_release(v51);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v42);
  swift_errorRelease(v42);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint32_t size;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  os_log_s *oslog;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v38 = v0[198];
  uint64_t v37 = v0[197];
  uint64_t v1 = v0[196];
  uint64_t v2 = v0[193];
  uint64_t v39 = v0[192];
  v0[106] = v0;
  uint64_t v40 = *(void (**)(uint64_t))(v2 + 8);
  v40(v1);
  ((void (*)(uint64_t, uint64_t))v40)(v37, v39);
  ((void (*)(uint64_t, uint64_t))v40)(v38, v39);
  unint64_t v43 = v0[212];
  uint64_t v3 = v0[179];
  uint64_t v41 = v0[178];
  uint64_t v42 = v0[177];
  swift_errorRetain(v43);
  v0[112] = v43;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v3, v4, v42);
  swift_errorRetain(v43);
  uint64_t v47 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v47 + 16) = v43;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v56 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v44,  v45,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v50 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v50 + 16) = 64;
  uint64_t v51 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v51 + 16) = 8;
  uint64_t v48 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v48 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v48 + 24) = v47;
  id v49 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v49 + 24) = v48;
  uint64_t v52 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v52 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v52 + 24) = v49;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v54);
  uint64_t v53 = v7;
  swift_retain(v50);
  *uint64_t v53 = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[1] = v50;
  swift_retain(v51);
  v53[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[3] = v51;
  swift_retain(v52);
  v53[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[5] = v52;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v56))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v57 = buf;
    uint64_t v58 = v34;
    uint64_t v59 = v35;
    serialize(_:at:)(2LL, &v57);
    serialize(_:at:)(1LL, &v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    _os_log_impl((void *)&_mh_execute_header, oslog, v56, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  else
  {
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v43);
  swift_errorRelease(v43);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint32_t size;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  os_log_s *oslog;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v38 = v0[198];
  uint64_t v37 = v0[197];
  uint64_t v1 = v0[196];
  uint64_t v2 = v0[193];
  uint64_t v39 = v0[192];
  v0[106] = v0;
  uint64_t v40 = *(void (**)(uint64_t))(v2 + 8);
  v40(v1);
  ((void (*)(uint64_t, uint64_t))v40)(v37, v39);
  ((void (*)(uint64_t, uint64_t))v40)(v38, v39);
  unint64_t v43 = v0[214];
  uint64_t v3 = v0[179];
  uint64_t v41 = v0[178];
  uint64_t v42 = v0[177];
  swift_errorRetain(v43);
  v0[112] = v43;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v3, v4, v42);
  swift_errorRetain(v43);
  uint64_t v47 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v47 + 16) = v43;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v56 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v44,  v45,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v50 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v50 + 16) = 64;
  uint64_t v51 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v51 + 16) = 8;
  uint64_t v48 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v48 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v48 + 24) = v47;
  id v49 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v49 + 24) = v48;
  uint64_t v52 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v52 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v52 + 24) = v49;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v54);
  uint64_t v53 = v7;
  swift_retain(v50);
  *uint64_t v53 = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[1] = v50;
  swift_retain(v51);
  v53[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[3] = v51;
  swift_retain(v52);
  v53[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[5] = v52;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v56))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v57 = buf;
    uint64_t v58 = v34;
    uint64_t v59 = v35;
    serialize(_:at:)(2LL, &v57);
    serialize(_:at:)(1LL, &v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    _os_log_impl((void *)&_mh_execute_header, oslog, v56, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  else
  {
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v43);
  swift_errorRelease(v43);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint32_t size;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  os_log_s *oslog;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v38 = v0[198];
  uint64_t v37 = v0[197];
  uint64_t v1 = v0[196];
  uint64_t v2 = v0[193];
  uint64_t v39 = v0[192];
  v0[106] = v0;
  uint64_t v40 = *(void (**)(uint64_t))(v2 + 8);
  v40(v1);
  ((void (*)(uint64_t, uint64_t))v40)(v37, v39);
  ((void (*)(uint64_t, uint64_t))v40)(v38, v39);
  unint64_t v43 = v0[222];
  uint64_t v3 = v0[179];
  uint64_t v41 = v0[178];
  uint64_t v42 = v0[177];
  swift_errorRetain(v43);
  v0[112] = v43;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v3, v4, v42);
  swift_errorRetain(v43);
  uint64_t v47 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v47 + 16) = v43;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v56 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v44,  v45,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v50 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v50 + 16) = 64;
  uint64_t v51 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v51 + 16) = 8;
  uint64_t v48 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v48 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v48 + 24) = v47;
  id v49 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v49 + 24) = v48;
  uint64_t v52 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v52 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v52 + 24) = v49;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v54);
  uint64_t v53 = v7;
  swift_retain(v50);
  *uint64_t v53 = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[1] = v50;
  swift_retain(v51);
  v53[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[3] = v51;
  swift_retain(v52);
  v53[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[5] = v52;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v56))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v57 = buf;
    uint64_t v58 = v34;
    uint64_t v59 = v35;
    serialize(_:at:)(2LL, &v57);
    serialize(_:at:)(1LL, &v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    _os_log_impl((void *)&_mh_execute_header, oslog, v56, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  else
  {
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v43);
  swift_errorRelease(v43);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint32_t size;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  os_log_s *oslog;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v38 = v0[198];
  uint64_t v37 = v0[197];
  uint64_t v1 = v0[196];
  uint64_t v2 = v0[193];
  uint64_t v39 = v0[192];
  v0[106] = v0;
  uint64_t v40 = *(void (**)(uint64_t))(v2 + 8);
  v40(v1);
  ((void (*)(uint64_t, uint64_t))v40)(v37, v39);
  ((void (*)(uint64_t, uint64_t))v40)(v38, v39);
  unint64_t v43 = v0[224];
  uint64_t v3 = v0[179];
  uint64_t v41 = v0[178];
  uint64_t v42 = v0[177];
  swift_errorRetain(v43);
  v0[112] = v43;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v3, v4, v42);
  swift_errorRetain(v43);
  uint64_t v47 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v47 + 16) = v43;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v56 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v44,  v45,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v50 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v50 + 16) = 64;
  uint64_t v51 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v51 + 16) = 8;
  uint64_t v48 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v48 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v48 + 24) = v47;
  id v49 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v49 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v49 + 24) = v48;
  uint64_t v52 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v52 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v52 + 24) = v49;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v54);
  uint64_t v53 = v7;
  swift_retain(v50);
  *uint64_t v53 = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[1] = v50;
  swift_retain(v51);
  v53[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[3] = v51;
  swift_retain(v52);
  v53[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v53[5] = v52;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v56))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v57 = buf;
    uint64_t v58 = v34;
    uint64_t v59 = v35;
    serialize(_:at:)(2LL, &v57);
    serialize(_:at:)(1LL, &v57);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v50;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v61 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v60, (uint64_t)&v57, (uint64_t)&v58, (uint64_t)&v59);
    _os_log_impl((void *)&_mh_execute_header, oslog, v56, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  else
  {
    swift_release(v50);
    swift_release(v51);
    swift_release(v52);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v43);
  swift_errorRelease(v43);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint32_t size;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  os_log_s *oslog;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v39 = v0[198];
  uint64_t v38 = v0[197];
  uint64_t v37 = v0[196];
  uint64_t v1 = v0[195];
  uint64_t v2 = v0[193];
  uint64_t v40 = v0[192];
  v0[106] = v0;
  uint64_t v41 = *(void (**)(uint64_t))(v2 + 8);
  v41(v1);
  ((void (*)(uint64_t, uint64_t))v41)(v37, v40);
  ((void (*)(uint64_t, uint64_t))v41)(v38, v40);
  ((void (*)(uint64_t, uint64_t))v41)(v39, v40);
  uint64_t v44 = v0[226];
  uint64_t v3 = v0[179];
  uint64_t v42 = v0[178];
  unint64_t v43 = v0[177];
  swift_errorRetain(v44);
  v0[112] = v44;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v3, v4, v43);
  swift_errorRetain(v44);
  uint64_t v48 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v48 + 16) = v44;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v57 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v45,  v46,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v51 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v51 + 16) = 64;
  uint64_t v52 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 8;
  id v49 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v49 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v49 + 24) = v48;
  uint64_t v50 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v50 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v50 + 24) = v49;
  uint64_t v53 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v53 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v53 + 24) = v50;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v55);
  uint64_t v54 = v7;
  swift_retain(v51);
  *uint64_t v54 = closure #1 in OSLogArguments.append(_:)partial apply;
  v54[1] = v51;
  swift_retain(v52);
  void v54[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v54[3] = v52;
  swift_retain(v53);
  v54[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v54[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v57))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v58 = buf;
    uint64_t v59 = v34;
    uint64_t v60 = v35;
    serialize(_:at:)(2LL, &v58);
    serialize(_:at:)(1LL, &v58);
    uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v62 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)&v58, (uint64_t)&v59, (uint64_t)&v60);
    uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v62 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)&v58, (uint64_t)&v59, (uint64_t)&v60);
    uint64_t v61 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v62 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v61, (uint64_t)&v58, (uint64_t)&v59, (uint64_t)&v60);
    _os_log_impl((void *)&_mh_execute_header, oslog, v57, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v51);
    swift_release(v52);
    swift_release(v53);
  }

  else
  {
    swift_release(v51);
    swift_release(v52);
    swift_release(v53);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v44);
  swift_errorRelease(v44);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[228];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[230];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[232];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[234];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[236];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[238];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[240];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[242];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[244];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *buf;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint32_t size;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  os_log_s *oslog;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v40 = v0[198];
  uint64_t v39 = v0[197];
  uint64_t v38 = v0[196];
  uint64_t v37 = v0[195];
  uint64_t v1 = v0[194];
  uint64_t v2 = v0[193];
  uint64_t v41 = v0[192];
  v0[106] = v0;
  uint64_t v42 = *(void (**)(uint64_t))(v2 + 8);
  v42(v1);
  ((void (*)(uint64_t, uint64_t))v42)(v37, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v38, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v39, v41);
  ((void (*)(uint64_t, uint64_t))v42)(v40, v41);
  uint64_t v45 = v0[246];
  uint64_t v3 = v0[179];
  unint64_t v43 = v0[178];
  uint64_t v44 = v0[177];
  swift_errorRetain(v45);
  v0[112] = v45;
  uint64_t v4 = MediaMLPlugin.logger.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v3, v4, v44);
  swift_errorRetain(v45);
  id v49 = swift_allocObject(&unk_100066C80, 24LL, 7LL);
  *(void *)(v49 + 16) = v45;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  uint64_t v5 = swift_bridgeObjectRelease();
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  uint64_t v58 = static os_log_type_t.error.getter();
  v0[113] = 12LL;
  uint64_t v46 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v47 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 100),  v0 + 113,  &type metadata for UInt32,  &type metadata for Int,  v46,  v47,  v6);
  uint32_t size = *((_DWORD *)v0 + 25);
  uint64_t v52 = swift_allocObject(&unk_100066CA8, 17LL, 7LL);
  *(_BYTE *)(v52 + 16) = 64;
  uint64_t v53 = swift_allocObject(&unk_100066CD0, 17LL, 7LL);
  *(_BYTE *)(v53 + 16) = 8;
  uint64_t v50 = swift_allocObject(&unk_100066CF8, 32LL, 7LL);
  *(void *)(v50 + 16) = partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  *(void *)(v50 + 24) = v49;
  uint64_t v51 = swift_allocObject(&unk_100066D20, 32LL, 7LL);
  *(void *)(v51 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v51 + 24) = v50;
  uint64_t v54 = swift_allocObject(&unk_100066D48, 32LL, 7LL);
  *(void *)(v54 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply;
  *(void *)(v54 + 24) = v51;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)(3LL, v56);
  uint64_t v55 = v7;
  swift_retain(v52);
  *uint64_t v55 = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[1] = v52;
  swift_retain(v53);
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[3] = v53;
  swift_retain(v54);
  v55[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v55[5] = v54;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v58))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(12LL, &type metadata for UInt8);
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v34 = createStorage<A>(capacity:type:)(1LL, v32, v32);
    uint64_t v35 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    uint64_t v59 = buf;
    uint64_t v60 = v34;
    uint64_t v61 = v35;
    serialize(_:at:)(2LL, &v59);
    serialize(_:at:)(1LL, &v59);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v52;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v53;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    uint64_t v63 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v62, (uint64_t)&v59, (uint64_t)&v60, (uint64_t)&v61);
    _os_log_impl((void *)&_mh_execute_header, oslog, v58, "Failed to train model with error=%@", buf, size);
    destroyStorage<A>(_:count:)(v34, 1LL);
    destroyStorage<A>(_:count:)(v35, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  else
  {
    swift_release(v52);
    swift_release(v53);
    swift_release(v54);
  }

  uint64_t v10 = v36[179];
  uint64_t v9 = v36[178];
  uint64_t v11 = v36[177];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_errorRelease(v45);
  swift_errorRelease(v45);
  uint64_t v12 = v36[202];
  uint64_t v13 = v36[200];
  uint64_t v14 = v36[198];
  uint64_t v15 = v36[197];
  uint64_t v16 = v36[196];
  id v17 = v36[195];
  uint64_t v18 = v36[194];
  uint64_t v19 = v36[191];
  uint64_t v20 = v36[190];
  id v21 = v36[189];
  uint64_t v22 = v36[188];
  uint64_t v23 = v36[187];
  uint64_t v24 = v36[186];
  uint64_t v25 = v36[185];
  uint64_t v26 = v36[184];
  uint64_t v27 = v36[183];
  uint64_t v28 = v36[182];
  uint64_t v29 = v36[181];
  uint64_t v30 = v36[180];
  uint64_t v31 = v36[179];
  OS_dispatch_semaphore.signal()();
  swift_release(v12);
  swift_release(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v36[106] + 8LL))();
}

void closure #2 in closure #1 in MediaMLPlugin.perform(_:)()
{
  uint64_t v176 = v0[219];
  uint64_t v175 = v0[218];
  uint64_t v174 = v0[217];
  uint64_t v173 = v0[216];
  uint64_t v172 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[190];
  uint64_t v171 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v172(v1, v2, v171);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v178 = static os_log_type_t.info.getter();
  v0[115] = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)((char *)v0 + 276),  v0 + 115,  &type metadata for UInt32,  &type metadata for Int,  v173,  v174,  v175);
  uint32_t size = *((_DWORD *)v0 + 69);
  uint64_t v180 = _allocateUninitializedArray<A>(_:)(0LL, v176);
  if (os_log_type_enabled(oslog, v178))
  {
    uint64_t v4 = *(void *)(v170 + 1840);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v166 = createStorage<A>(capacity:type:)(0LL, v164, v164);
    uint64_t v167 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v170 + 1328) = buf;
    *(void *)(v170 + 1336) = v166;
    *(void *)(v170 + 1344) = v167;
    serialize(_:at:)(0LL, (_BYTE **)(v170 + 1328));
    serialize(_:at:)(0LL, (_BYTE **)(v170 + 1328));
    *(void *)(v170 + 1352) = v180;
    uint64_t v168 = (void *)swift_task_alloc(48LL);
    v168[2] = v170 + 1328;
    v168[3] = v170 + 1336;
    v168[4] = v170 + 1344;
    uint64_t v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v168, v169, v5);
    if (v4) {
      return;
    }
    swift_task_dealloc(v168);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v178,  "Finished wifi model training and received modelStats",  buf,  size);
    destroyStorage<A>(_:count:)(v166, 0LL);
    destroyStorage<A>(_:count:)(v167, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
    uint64_t v163 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v163 = *(void *)(v170 + 1840);
  }

  double v161 = *(void (**)(uint64_t, uint64_t))(v170 + 1760);
  uint64_t v159 = *(void *)(v170 + 1520);
  uint64_t v160 = *(void *)(v170 + 1416);
  uint64_t v162 = *(void *)(v170 + 1400);

  v161(v159, v160);
  if (v162 && (*(_BYTE *)(v170 + 272) & 1) == 0)
  {
    Swift::Int v158 = *(void *)(v170 + 192);
    double v157 = *(double *)(v170 + 256);
    uint64_t v156 = *(void **)(v170 + 1400);
    double v155 = *(double *)(v170 + 248);
    id v7 = v156;
    if (!v156)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  936LL,  0);
      return;
    }

    id v152 = *(id *)(v170 + 1400);
    id v151 = [v152 experimentId];
    uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v154 = v8;

    id v9 = v152;
    if (!v152)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  937LL,  0);
      return;
    }

    id v149 = *(id *)(v170 + 1400);
    Swift::Int32 v150 = [v149 deploymentId];

    id v10 = v149;
    if (!v149)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  938LL,  0);
      return;
    }

    id v146 = *(id *)(v170 + 1400);
    id v145 = [v146 treatmentId];
    uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v148 = v11;

    if ((*(_BYTE *)(v170 + 272) & 1) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  939LL,  0);
      return;
    }

    if ((*(_BYTE *)(v170 + 272) & 1) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  940LL,  0);
      return;
    }

    uint64_t v144 = *(void *)(v170 + 200);
    uint64_t v12 = *(void *)(v170 + 208);
    if (__OFADD__(v144, v12)) {
      goto LABEL_74;
    }
    uint64_t v139 = *(void *)(v170 + 1752);
    uint64_t v138 = *(void *)(v170 + 1744);
    uint64_t v137 = *(void *)(v170 + 1736);
    uint64_t v136 = *(void *)(v170 + 1728);
    uint64_t v135 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 1720);
    uint64_t v14 = *(void *)(v170 + 1512);
    uint64_t v134 = *(void *)(v170 + 1416);
    reportErrorMetrics(interfaceType:validationMeanAbsPercentError:trainingMeanAbsPercentError:rmseError:experimentID:deploymentID:treatmentID:carrierCount:appCount:sessionCount:ssidCount:trainingDataCount:)( v158,  v153,  v154,  v150,  v147,  v148,  *(void *)(v170 + 216),  *(void *)(v170 + 232),  v157,  v155,  1.2,  *(void *)(v170 + 240),  *(void *)(v170 + 224),  v144 + v12);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v15 = MediaMLPlugin.logger.unsafeMutableAddressor();
    uint64_t v16 = v135(v14, v15, v134);
    log = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v141 = static os_log_type_t.info.getter();
    *(void *)(v170 + 1128) = 2LL;
    UnsignedInteger<>.init<A>(_:)( (void *)(v170 + 1992),  v170 + 1128,  &type metadata for UInt32,  &type metadata for Int,  v136,  v137,  v138);
    uint32_t v140 = *(_DWORD *)(v170 + 1992);
    uint64_t v143 = _allocateUninitializedArray<A>(_:)(0LL, v139);
    if (os_log_type_enabled(log, v141))
    {
      uint64_t v129 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
      uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v130 = createStorage<A>(capacity:type:)(0LL, v128, v128);
      uint64_t v131 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
      *(void *)(v170 + 1296) = v129;
      *(void *)(v170 + 1304) = v130;
      *(void *)(v170 + 1312) = v131;
      serialize(_:at:)(0LL, (_BYTE **)(v170 + 1296));
      serialize(_:at:)(0LL, (_BYTE **)(v170 + 1296));
      *(void *)(v170 + 1320) = v143;
      unint64_t v132 = (void *)swift_task_alloc(48LL);
      v132[2] = v170 + 1296;
      v132[3] = v170 + 1304;
      v132[4] = v170 + 1312;
      uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      unint64_t v17 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v132, v133, v17);
      if (v163) {
        return;
      }
      swift_task_dealloc(v132);
      _os_log_impl((void *)&_mh_execute_header, log, v141, "Reported wifiModelStats to Core Analytics", v129, v140);
      destroyStorage<A>(_:count:)(v130, 0LL);
      destroyStorage<A>(_:count:)(v131, 0LL);
      UnsafeMutablePointer.deallocate()();
      swift_bridgeObjectRelease();
      uint64_t v127 = 0LL;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v127 = v163;
    }

    uint64_t v126 = *(uint64_t (**)(uint64_t, uint64_t))(v170 + 1760);
    uint64_t v124 = *(void *)(v170 + 1512);
    uint64_t v125 = *(void *)(v170 + 1416);

    uint64_t v18 = v126(v124, v125);
    if ((*(_BYTE *)(v170 + 272) & 1) != 0)
    {
      LOBYTE(v39) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  946LL,  0);
      return;
    }

    double v123 = *(double *)(v170 + 256);
    uint64_t v19 = (double *)modelMAPEThreshold.unsafeMutableAddressor(v18);
    v6.n128_f64[0] = v123;
    if (v123 < *v19)
    {
      uint64_t v114 = *(void *)(v170 + 200);
      uint64_t v115 = *(void *)(v170 + 208);
      uint64_t v116 = *(void *)(v170 + 216);
      uint64_t v117 = *(void *)(v170 + 224);
      uint64_t v118 = *(void *)(v170 + 232);
      uint64_t v119 = *(void *)(v170 + 240);
      uint64_t v120 = *(void *)(v170 + 248);
      uint64_t v121 = *(void *)(v170 + 256);
      uint64_t v122 = *(void *)(v170 + 264);
      if ((*(_BYTE *)(v170 + 272) & 1) != 0)
      {
        LOBYTE(v39) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  947LL,  0);
      }

      else
      {
        uint64_t v20 = *(void **)(v170 + 1392);
        *(void *)(v170 + 368) = *(void *)(v170 + 192);
        *(void *)(v170 + 376) = v114;
        *(void *)(v170 + 384) = v115;
        *(void *)(v170 + 392) = v116;
        *(void *)(v170 + 400) = v117;
        *(void *)(v170 + 408) = v118;
        *(void *)(v170 + 416) = v119;
        *(void *)(v170 + 424) = v120;
        *(void *)(v170 + 432) = v121;
        *(void *)(v170 + 440) = v122;
        id v21 = *(int **)((*v20 & swift_isaMask) + 0xD8LL);
        unint64_t v113 = (void (*)(uint64_t))((char *)v21 + *v21);
        uint64_t v22 = (void *)swift_task_alloc(v21[1]);
        *(void *)(v170 + 1848) = v22;
        *uint64_t v22 = *(void *)(v170 + 848);
        v22[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
        v113(v170 + 368);
      }

      return;
    }

    uint64_t v112 = v127;
  }

  else
  {
    uint64_t v112 = v163;
  }

  if (!*(void *)(v170 + 1400) || (*(_BYTE *)(v170 + 360) & 1) != 0)
  {
LABEL_72:
    uint64_t v44 = *(void *)(v170 + 1584);
    uint64_t v43 = *(void *)(v170 + 1576);
    uint64_t v42 = *(void *)(v170 + 1568);
    uint64_t v41 = *(void *)(v170 + 1560);
    uint64_t v45 = *(void *)(v170 + 1536);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)(v170 + 1544) + 8LL);
    ((void (*)(void, __n128))v46)(*(void *)(v170 + 1552), v6);
    v46(v41, v45);
    v46(v42, v45);
    v46(v43, v45);
    v46(v44, v45);
    uint64_t v47 = *(void *)(v170 + 1616);
    uint64_t v48 = *(void *)(v170 + 1600);
    uint64_t v49 = *(void *)(v170 + 1584);
    uint64_t v50 = *(void *)(v170 + 1576);
    uint64_t v51 = *(void *)(v170 + 1568);
    uint64_t v52 = *(void *)(v170 + 1560);
    uint64_t v53 = *(void *)(v170 + 1552);
    uint64_t v54 = *(void *)(v170 + 1528);
    uint64_t v55 = *(void *)(v170 + 1520);
    uint64_t v56 = *(void *)(v170 + 1512);
    uint64_t v57 = *(void *)(v170 + 1504);
    uint64_t v58 = *(void *)(v170 + 1496);
    uint64_t v59 = *(void *)(v170 + 1488);
    uint64_t v60 = *(void *)(v170 + 1480);
    uint64_t v61 = *(void *)(v170 + 1472);
    uint64_t v62 = *(void *)(v170 + 1464);
    uint64_t v63 = *(void *)(v170 + 1456);
    uint64_t v64 = *(void *)(v170 + 1448);
    uint64_t v65 = *(void *)(v170 + 1440);
    uint64_t v66 = *(void *)(v170 + 1432);
    OS_dispatch_semaphore.signal()();
    swift_release(v47);
    swift_release(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    (*(void (**)(void))(*(void *)(v170 + 848) + 8LL))();
    return;
  }

  Swift::Int v111 = *(void *)(v170 + 280);
  double v110 = *(double *)(v170 + 344);
  uint64_t v109 = *(void **)(v170 + 1400);
  double v108 = *(double *)(v170 + 336);
  id v23 = v109;
  if (!v109)
  {
    LOBYTE(v39) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  962LL,  0);
    return;
  }

  id v105 = *(id *)(v170 + 1400);
  id v104 = [v105 experimentId];
  uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v107 = v24;

  id v25 = v105;
  if (!v105)
  {
    LOBYTE(v39) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  963LL,  0);
    return;
  }

  id v102 = *(id *)(v170 + 1400);
  Swift::Int32 v103 = [v102 deploymentId];

  id v26 = v102;
  if (!v102)
  {
    LOBYTE(v39) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  964LL,  0);
    return;
  }

  id v99 = *(id *)(v170 + 1400);
  id v98 = [v99 treatmentId];
  uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v101 = v27;

  if ((*(_BYTE *)(v170 + 360) & 1) != 0)
  {
    LOBYTE(v39) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  965LL,  0);
    return;
  }

  if ((*(_BYTE *)(v170 + 360) & 1) != 0)
  {
    LOBYTE(v39) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v39,  966LL,  0);
    return;
  }

  uint64_t v97 = *(void *)(v170 + 288);
  uint64_t v28 = *(void *)(v170 + 296);
  if (__OFADD__(v97, v28))
  {
    __break(1u);
LABEL_74:
    __break(1u);
    return;
  }

  uint64_t v92 = *(void *)(v170 + 1752);
  uint64_t v91 = *(void *)(v170 + 1744);
  uint64_t v90 = *(void *)(v170 + 1736);
  uint64_t v89 = *(void *)(v170 + 1728);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 1720);
  uint64_t v30 = *(void *)(v170 + 1472);
  uint64_t v87 = *(void *)(v170 + 1416);
  reportErrorMetrics(interfaceType:validationMeanAbsPercentError:trainingMeanAbsPercentError:rmseError:experimentID:deploymentID:treatmentID:carrierCount:appCount:sessionCount:ssidCount:trainingDataCount:)( v111,  v106,  v107,  v103,  v100,  v101,  *(void *)(v170 + 304),  *(void *)(v170 + 320),  v110,  v108,  1.2,  *(void *)(v170 + 328),  *(void *)(v170 + 312),  v97 + v28);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v31 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v32 = v88(v30, v31, v87);
  uint64_t v95 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v94 = static os_log_type_t.info.getter();
  *(void *)(v170 + 928) = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)(v170 + 364),  v170 + 928,  &type metadata for UInt32,  &type metadata for Int,  v89,  v90,  v91);
  uint32_t v93 = *(_DWORD *)(v170 + 364);
  uint64_t v96 = _allocateUninitializedArray<A>(_:)(0LL, v92);
  if (os_log_type_enabled(v95, v94))
  {
    uint64_t v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v83 = createStorage<A>(capacity:type:)(0LL, v81, v81);
    uint64_t v84 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v170 + 1096) = v82;
    *(void *)(v170 + 1104) = v83;
    *(void *)(v170 + 1112) = v84;
    serialize(_:at:)(0LL, (_BYTE **)(v170 + 1096));
    serialize(_:at:)(0LL, (_BYTE **)(v170 + 1096));
    *(void *)(v170 + 1120) = v96;
    uint64_t v85 = (void *)swift_task_alloc(48LL);
    v85[2] = v170 + 1096;
    v85[3] = v170 + 1104;
    v85[4] = v170 + 1112;
    uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t v33 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v85, v86, v33);
    if (v112) {
      return;
    }
    swift_task_dealloc(v85);
    _os_log_impl((void *)&_mh_execute_header, v95, v94, "Reported cellModelStats to Core Analytics", v82, v93);
    destroyStorage<A>(_:count:)(v83, 0LL);
    destroyStorage<A>(_:count:)(v84, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t))(v170 + 1760);
  uint64_t v78 = *(void *)(v170 + 1472);
  uint64_t v79 = *(void *)(v170 + 1416);

  uint64_t v34 = v80(v78, v79);
  if ((*(_BYTE *)(v170 + 360) & 1) != 0)
  {
    LOBYTE(v40) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v40,  972LL,  0);
    return;
  }

  double v77 = *(double *)(v170 + 344);
  uint64_t v35 = (double *)modelMAPEThreshold.unsafeMutableAddressor(v34);
  v6.n128_f64[0] = v77;
  if (v77 >= *v35) {
    goto LABEL_72;
  }
  uint64_t v68 = *(void *)(v170 + 288);
  uint64_t v69 = *(void *)(v170 + 296);
  uint64_t v70 = *(void *)(v170 + 304);
  uint64_t v71 = *(void *)(v170 + 312);
  uint64_t v72 = *(void *)(v170 + 320);
  uint64_t v73 = *(void *)(v170 + 328);
  uint64_t v74 = *(void *)(v170 + 336);
  uint64_t v75 = *(void *)(v170 + 344);
  uint64_t v76 = *(void *)(v170 + 352);
  if ((*(_BYTE *)(v170 + 360) & 1) != 0)
  {
    LOBYTE(v40) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v40,  973LL,  0);
  }

  else
  {
    uint64_t v36 = *(void **)(v170 + 1392);
    *(void *)(v170 + 608) = *(void *)(v170 + 280);
    *(void *)(v170 + 616) = v68;
    *(void *)(v170 + 624) = v69;
    *(void *)(v170 + 632) = v70;
    *(void *)(v170 + 640) = v71;
    *(void *)(v170 + 648) = v72;
    *(void *)(v170 + 656) = v73;
    *(void *)(v170 + 664) = v74;
    *(void *)(v170 + 672) = v75;
    *(void *)(v170 + 680) = v76;
    uint64_t v37 = *(int **)((*v36 & swift_isaMask) + 0xD8LL);
    uint64_t v67 = (void (*)(uint64_t))((char *)v37 + *v37);
    uint64_t v38 = (void *)swift_task_alloc(v37[1]);
    *(void *)(v170 + 1912) = v38;
    *uint64_t v38 = *(void *)(v170 + 848);
    v38[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
    v67(v170 + 608);
  }

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  double *v19;
  void *v20;
  int *v21;
  void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint32_t v76;
  os_log_type_t v77;
  os_log_s *log;
  uint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  void *v84;
  id v85;
  Swift::Int32 v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  double v91;
  void *v92;
  double v93;
  Swift::Int v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint8_t *buf;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint32_t size;
  os_log_type_t v113;
  os_log_s *oslog;
  uint64_t v115;
  Swift::Int v111 = v0[219];
  double v110 = v0[218];
  uint64_t v109 = v0[217];
  double v108 = v0[216];
  uint64_t v107 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[215];
  uint64_t v1 = v0[185];
  uint64_t v106 = v0[177];
  v0[106] = v0;
  uint64_t v2 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v3 = v107(v1, v2, v106);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  unint64_t v113 = static os_log_type_t.info.getter();
  v0[145] = 2LL;
  UnsignedInteger<>.init<A>(_:)(v0 + 251, v0 + 145, &type metadata for UInt32, &type metadata for Int, v108, v109, v110);
  uint32_t size = *((_DWORD *)v0 + 502);
  uint64_t v115 = _allocateUninitializedArray<A>(_:)(0LL, v111);
  if (os_log_type_enabled(oslog, v113))
  {
    uint64_t v4 = *(void *)(v105 + 1904);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    id v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    id v101 = createStorage<A>(capacity:type:)(0LL, v99, v99);
    id v102 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v105 + 1168) = buf;
    *(void *)(v105 + 1176) = v101;
    *(void *)(v105 + 1184) = v102;
    serialize(_:at:)(0LL, (_BYTE **)(v105 + 1168));
    serialize(_:at:)(0LL, (_BYTE **)(v105 + 1168));
    *(void *)(v105 + 1192) = v115;
    Swift::Int32 v103 = (void *)swift_task_alloc(48LL);
    v103[2] = v105 + 1168;
    v103[3] = v105 + 1176;
    void v103[4] = v105 + 1184;
    id v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t v5 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v103, v104, v5);
    if (v4) {
      return;
    }
    swift_task_dealloc(v103);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v113,  "Deleted previous wifiStandardDeviation from wifiStdDev table",  buf,  size);
    destroyStorage<A>(_:count:)(v101, 0LL);
    destroyStorage<A>(_:count:)(v102, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
    id v98 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    id v98 = *(void *)(v105 + 1904);
  }

  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v105 + 1760);
  uint64_t v95 = *(void *)(v105 + 1480);
  uint64_t v96 = *(void *)(v105 + 1416);

  v97(v95, v96);
  if (!*(void *)(v105 + 1400) || (*(_BYTE *)(v105 + 360) & 1) != 0)
  {
LABEL_38:
    uint64_t v27 = *(void *)(v105 + 1584);
    id v26 = *(void *)(v105 + 1576);
    id v25 = *(void *)(v105 + 1568);
    uint64_t v24 = *(void *)(v105 + 1560);
    uint64_t v28 = *(void *)(v105 + 1536);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(*(void *)(v105 + 1544) + 8LL);
    ((void (*)(void, __n128))v29)(*(void *)(v105 + 1552), v6);
    v29(v24, v28);
    v29(v25, v28);
    v29(v26, v28);
    v29(v27, v28);
    uint64_t v30 = *(void *)(v105 + 1616);
    uint64_t v31 = *(void *)(v105 + 1600);
    uint64_t v32 = *(void *)(v105 + 1584);
    unint64_t v33 = *(void *)(v105 + 1576);
    uint64_t v34 = *(void *)(v105 + 1568);
    uint64_t v35 = *(void *)(v105 + 1560);
    uint64_t v36 = *(void *)(v105 + 1552);
    uint64_t v37 = *(void *)(v105 + 1528);
    uint64_t v38 = *(void *)(v105 + 1520);
    int v39 = *(void *)(v105 + 1512);
    int v40 = *(void *)(v105 + 1504);
    uint64_t v41 = *(void *)(v105 + 1496);
    uint64_t v42 = *(void *)(v105 + 1488);
    uint64_t v43 = *(void *)(v105 + 1480);
    uint64_t v44 = *(void *)(v105 + 1472);
    uint64_t v45 = *(void *)(v105 + 1464);
    uint64_t v46 = *(void *)(v105 + 1456);
    uint64_t v47 = *(void *)(v105 + 1448);
    uint64_t v48 = *(void *)(v105 + 1440);
    uint64_t v49 = *(void *)(v105 + 1432);
    OS_dispatch_semaphore.signal()();
    swift_release(v30);
    swift_release(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    (*(void (**)(void))(*(void *)(v105 + 848) + 8LL))();
    return;
  }

  os_log_type_t v94 = *(void *)(v105 + 280);
  uint32_t v93 = *(double *)(v105 + 344);
  uint64_t v92 = *(void **)(v105 + 1400);
  uint64_t v91 = *(double *)(v105 + 336);
  id v7 = v92;
  if (!v92)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  962LL,  0);
    return;
  }

  uint64_t v88 = *(id *)(v105 + 1400);
  uint64_t v87 = [v88 experimentId];
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v90 = v8;

  id v9 = v88;
  if (!v88)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  963LL,  0);
    return;
  }

  uint64_t v85 = *(id *)(v105 + 1400);
  uint64_t v86 = [v85 deploymentId];

  id v10 = v85;
  if (!v85)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  964LL,  0);
    return;
  }

  uint64_t v82 = *(id *)(v105 + 1400);
  uint64_t v81 = [v82 treatmentId];
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v84 = v11;

  if ((*(_BYTE *)(v105 + 360) & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  965LL,  0);
    return;
  }

  if ((*(_BYTE *)(v105 + 360) & 1) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  2,  966LL,  0);
    return;
  }

  uint64_t v80 = *(void *)(v105 + 288);
  uint64_t v12 = *(void *)(v105 + 296);
  if (__OFADD__(v80, v12))
  {
    __break(1u);
    return;
  }

  uint64_t v75 = *(void *)(v105 + 1752);
  uint64_t v74 = *(void *)(v105 + 1744);
  uint64_t v73 = *(void *)(v105 + 1736);
  uint64_t v72 = *(void *)(v105 + 1728);
  uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 1720);
  uint64_t v14 = *(void *)(v105 + 1472);
  uint64_t v70 = *(void *)(v105 + 1416);
  reportErrorMetrics(interfaceType:validationMeanAbsPercentError:trainingMeanAbsPercentError:rmseError:experimentID:deploymentID:treatmentID:carrierCount:appCount:sessionCount:ssidCount:trainingDataCount:)( v94,  v89,  v90,  v86,  v83,  v84,  *(void *)(v105 + 304),  *(void *)(v105 + 320),  v93,  v91,  1.2,  *(void *)(v105 + 328),  *(void *)(v105 + 312),  v80 + v12);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v15 = MediaMLPlugin.logger.unsafeMutableAddressor();
  uint64_t v16 = v71(v14, v15, v70);
  log = (os_log_s *)Logger.logObject.getter(v16);
  double v77 = static os_log_type_t.info.getter();
  *(void *)(v105 + 928) = 2LL;
  UnsignedInteger<>.init<A>(_:)( (void *)(v105 + 364),  v105 + 928,  &type metadata for UInt32,  &type metadata for Int,  v72,  v73,  v74);
  uint64_t v76 = *(_DWORD *)(v105 + 364);
  uint64_t v79 = _allocateUninitializedArray<A>(_:)(0LL, v75);
  if (os_log_type_enabled(log, v77))
  {
    uint64_t v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)(2LL, &type metadata for UInt8);
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v66 = createStorage<A>(capacity:type:)(0LL, v64, v64);
    uint64_t v67 = createStorage<A>(capacity:type:)( 0LL,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Any + 8);
    *(void *)(v105 + 1096) = v65;
    *(void *)(v105 + 1104) = v66;
    *(void *)(v105 + 1112) = v67;
    serialize(_:at:)(0LL, (_BYTE **)(v105 + 1096));
    serialize(_:at:)(0LL, (_BYTE **)(v105 + 1096));
    *(void *)(v105 + 1120) = v79;
    uint64_t v68 = (void *)swift_task_alloc(48LL);
    v68[2] = v105 + 1096;
    v68[3] = v105 + 1104;
    v68[4] = v105 + 1112;
    uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t v17 = lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)(closure #1 in osLogInternal(_:log:type:)partial apply, v68, v69, v17);
    if (v98) {
      return;
    }
    swift_task_dealloc(v68);
    _os_log_impl((void *)&_mh_execute_header, log, v77, "Reported cellModelStats to Core Analytics", v65, v76);
    destroyStorage<A>(_:count:)(v66, 0LL);
    destroyStorage<A>(_:count:)(v67, 0LL);
    UnsafeMutablePointer.deallocate()();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 1760);
  uint64_t v61 = *(void *)(v105 + 1472);
  uint64_t v62 = *(void *)(v105 + 1416);

  uint64_t v18 = v63(v61, v62);
  if ((*(_BYTE *)(v105 + 360) & 1) != 0)
  {
    LOBYTE(v23) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v23,  972LL,  0);
    return;
  }

  uint64_t v60 = *(double *)(v105 + 344);
  uint64_t v19 = (double *)modelMAPEThreshold.unsafeMutableAddressor(v18);
  v6.n128_f64[0] = v60;
  if (v60 >= *v19) {
    goto LABEL_38;
  }
  uint64_t v51 = *(void *)(v105 + 288);
  uint64_t v52 = *(void *)(v105 + 296);
  uint64_t v53 = *(void *)(v105 + 304);
  uint64_t v54 = *(void *)(v105 + 312);
  uint64_t v55 = *(void *)(v105 + 320);
  uint64_t v56 = *(void *)(v105 + 328);
  uint64_t v57 = *(void *)(v105 + 336);
  uint64_t v58 = *(void *)(v105 + 344);
  uint64_t v59 = *(void *)(v105 + 352);
  if ((*(_BYTE *)(v105 + 360) & 1) != 0)
  {
    LOBYTE(v23) = 2;
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/Plugin.swift",  26LL,  v23,  973LL,  0);
  }

  else
  {
    uint64_t v20 = *(void **)(v105 + 1392);
    *(void *)(v105 + 608) = *(void *)(v105 + 280);
    *(void *)(v105 + 616) = v51;
    *(void *)(v105 + 624) = v52;
    *(void *)(v105 + 632) = v53;
    *(void *)(v105 + 640) = v54;
    *(void *)(v105 + 648) = v55;
    *(void *)(v105 + 656) = v56;
    *(void *)(v105 + 664) = v57;
    *(void *)(v105 + 672) = v58;
    *(void *)(v105 + 680) = v59;
    id v21 = *(int **)((*v20 & swift_isaMask) + 0xD8LL);
    uint64_t v50 = (void (*)(uint64_t))((char *)v21 + *v21);
    uint64_t v22 = (void *)swift_task_alloc(v21[1]);
    *(void *)(v105 + 1912) = v22;
    *uint64_t v22 = *(void *)(v105 + 848);
    v22[1] = closure #2 in closure #1 in MediaMLPlugin.perform(_:);
    v50(v105 + 608);
  }

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:)( uint64_t a1)
{
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v23[4] = a4;
  uint64_t v21 = type metadata accessor for TaskPriority(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v22 + 48))(a1, 1LL) == 1)
  {
    outlined destroy of TaskPriority?(a1);
    uint64_t v16 = 0LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, v21);
    uint64_t v16 = v15;
  }

  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  swift_unknownObjectRetain();
  if (v14)
  {
    uint64_t ObjectType = swift_getObjectType(v14);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
    uint64_t v10 = v5;
    swift_unknownObjectRelease(v14);
    uint64_t v11 = v9;
    uint64_t v12 = v10;
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
  }

  id v7 = (void *)swift_allocObject(&unk_100066C58, 40LL, 7LL);
  void v7[2] = a4;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v8 = 0LL;
  if (v11 != 0 || v12 != 0)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    v23[2] = v11;
    v23[3] = v12;
    uint64_t v8 = v23;
  }

  return swift_task_create(v16 | 0x1C00, v8, a4, &_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATu, v7);
}

uint64_t _ss20withExtendedLifetimeyq0_x_q0_yq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v20 = a4;
  uint64_t v19 = a5;
  uint64_t v18 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin();
  uint64_t v16 = (char *)&v11 - v15;
  uint64_t result = v9();
  uint64_t v17 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v16, v12);
  }
  return result;
}

id MediaMLPlugin.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id MediaMLPlugin.init()()
{
  id v19 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v13 - 8);
  unint64_t v8 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v0 = (char *)&v7 - v8;
  uint64_t v12 = (char *)&v7 - v8;
  id v1 = (id)__chkstk_darwin(v14);
  id v19 = v14;
  uint64_t v9 = OBJC_IVAR___MediaMLPlugin_dbPath;
  uint64_t v2 = mediaMLDataDirectory.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v0, v2, v13);
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rawdata.db", 0xAuLL, 1);
  object = v3._object;
  URL.appendingPathComponent(_:isDirectory:)(v3._countAndFlagsBits);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);

  uint64_t v16 = v19;
  uint64_t v4 = (objc_class *)type metadata accessor for MediaMLPlugin(v15);
  v18.receiver = v16;
  v18.super_class = v4;
  id v17 = objc_msgSendSuper2(&v18, "init");
  id v5 = v17;
  id v19 = v17;

  return v17;
}

id MediaMLPlugin.__deallocating_deinit()
{
  Swift::String v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MediaMLPlugin(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id @nonobjc NSNumber.init(value:)(uint64_t a1)
{
  return [v1 initWithInteger:a1];
}

{
  void *v1;
  return [v1 initWithInt:a1];
}

id @nonobjc NSNumber.init(value:)()
{
  return objc_msgSend(v0, "initWithDouble:");
}

id @nonobjc NSString.init(string:)(uint64_t a1, uint64_t a2)
{
  id v4 = String._bridgeToObjectiveC()();
  id v6 = objc_msgSend(v3, "initWithString:");

  swift_bridgeObjectRelease(a2);
  return v6;
}

id @nonobjc MLRTrialTaskResult.init()()
{
  return [v0 init];
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = *(void *)(a3 - 8);
  unint64_t v8 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  id v4 = (void (*)(void))__chkstk_darwin();
  uint64_t v11 = (char *)&v7 - v8;
  v4();
  uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v12, v9);
  uint64_t v14 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t OSAllocatedUnfairLock.init(uncheckedState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v2 = type metadata accessor for os_unfair_lock_s(255LL);
  type metadata accessor for ManagedBuffer(0LL, a2, v2);
  uint64_t v8 = a1;
  uint64_t v6 = static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)( 1LL,  partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:),  v7);
  (*(void (**)(uint64_t))(*(void *)(a2 - 8) + 8LL))(a1);
  return v6;
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  id v4 = (void *)_swift_stdlib_bridgeErrorToNSError(v1);
  id v2 = v4;
  swift_unknownObjectRelease(v4);
  return v4;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)( uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3LL) & 0xFFFFFFFFFFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v4 + class metadata base offset for ManagedBuffer)
                                                        - 8LL)
                                            + 16LL))(a2);
}

void OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)( void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[1] = a5;
  closure #1 in OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)( a3 + *(void *)(*(void *)a3 + class metadata base offset for ManagedBuffer + 16LL),  (os_unfair_lock_t)(a3 + ((*(unsigned int *)(*(void *)a3 + 48LL) + 3LL) & 0xFFFFFFFFFFFFFFFCLL)),  a1,  a2,  a4,  a5,  v5);
}

void closure #1 in OSAllocatedUnfairLock.withLockUncheckedInternal<A>(body:)( uint64_t a1, os_unfair_lock_t lock, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (v10) {
    *a7 = v10;
  }
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = v2;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *id v3 = *(void *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *(void *)(*v0 + 24);
  *(void *)(*v0 + 16) = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 8LL))();
}

uint64_t sub_10004EA88()
{
  return swift_deallocObject(v0, 17LL);
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0( _BYTE **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_10004EAB8()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004EAE8()
{
  return swift_deallocObject(v2, 32LL);
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10004EB30()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7 = (id)a4();
  uint64_t v8 = *a1;
  if (v7)
  {
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10);
  }

  else
  {
    uint64_t v10 = 0LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  }

  *a1 = v8 + 8;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *uint64_t v4 = v7;
    *a2 = v4 + 1;
  }

  else
  {
  }

uint64_t sub_10004ECB4()
{
  return swift_deallocObject(v2, 32LL);
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3)
{
}

unint64_t lazy protocol witness table accessor for type SQLError and conformance SQLError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type SQLError and conformance SQLError;
  if (!lazy protocol witness table cache variable for type SQLError and conformance SQLError)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for SQLError, &type metadata for SQLError);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type SQLError and conformance SQLError);
    return WitnessTable;
  }

  return v2;
}

uint64_t sub_10004ED64()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t sub_10004ED8C()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedWifiDB()()
{
  return implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(*(void *)(v0 + 16));
}

uint64_t sub_10004EDBC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004EDEC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004EE1C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t _sSiIegd_SiIegr_TRTA_0@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_10004EE64()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0( uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, (uint64_t)&type metadata for Int, v4);
}

uint64_t partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB()()
{
  return implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(v0);
}

uint64_t sub_10004EF08()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004EF38()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004EF68()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004EFB0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #3 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(uint64_t a1)
{
  return closure #3 in MediaMLPlugin.checkAndPruneProcessedWifiDB()(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004F070()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedCellDB()()
{
  return implicit closure #1 in MediaMLPlugin.checkAndPruneProcessedCellDB()(*(void *)(v0 + 16));
}

uint64_t sub_10004F0A0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F0D0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F100()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F148()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB()()
{
  return implicit closure #2 in MediaMLPlugin.checkAndPruneProcessedCellDB()(v0);
}

uint64_t sub_10004F1EC()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F21C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F24C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F294()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #3 in MediaMLPlugin.checkAndPruneProcessedCellDB()(uint64_t a1)
{
  return closure #3 in MediaMLPlugin.checkAndPruneProcessedCellDB()(a1, *(void *)(v1 + 16));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation( uint64_t a1)
{
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)( uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

void *outlined init with copy of String(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
    return WitnessTable;
  }

  return v2;
}

uint64_t outlined destroy of Order?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Order(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  return a1;
}

uint64_t sub_10004F598()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)();
}

uint64_t sub_10004F638()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #14 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return implicit closure #14 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)();
}

uint64_t sub_10004F6D8()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F708()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F738()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F780()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F81C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F84C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004F87C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F8C4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004F960()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)();
}

uint64_t sub_10004FA00()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)();
}

uint64_t sub_10004FAA0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FAD0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FB00()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004FB48()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004FBE4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FC14()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FC44()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004FC8C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004FD28()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)()
{
  return implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)(*(void *)(v0 + 16));
}

uint64_t sub_10004FD58()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FD88()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10004FDB8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10004FE00()
{
  return swift_deallocObject(v2, 32LL);
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t partial apply for closure #2 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)(uint64_t a1)
{
  return closure #2 in MediaMLPlugin.getAndSavePreProcessedCellData(dataFrame:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(double *)(v1 + 104),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88),  *(void *)(v1 + 96));
}

uint64_t closure #1 in osLogInternal(_:log:type:)partial apply( uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type AnyColumnSlice and conformance AnyColumnSlice()
{
  uint64_t v3 = lazy protocol witness table cache variable for type AnyColumnSlice and conformance AnyColumnSlice;
  if (!lazy protocol witness table cache variable for type AnyColumnSlice and conformance AnyColumnSlice)
  {
    uint64_t v0 = type metadata accessor for AnyColumnSlice(255LL);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AnyColumnSlice, v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type AnyColumnSlice and conformance AnyColumnSlice);
    return WitnessTable;
  }

  return v3;
}

uint64_t outlined destroy of IndexingIterator<AnyColumnSlice>(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for AnyColumnSlice(0LL);
  (*(void (**)(uint64_t))(*(void *)(v1 - 8) + 8LL))(a1);
  return a1;
}

uint64_t sub_10004FFFC()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return implicit closure #12 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)();
}

uint64_t sub_10005009C()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return implicit closure #13 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)();
}

uint64_t sub_10005013C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10005016C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10005019C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000501E4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050280()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000502B0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000502E0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050328()
{
  return swift_deallocObject(v2, 32LL);
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    *(void *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }

  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }

  return a2;
}

uint64_t partial apply for closure #2 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)( uint64_t *a1)
{
  return closure #2 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #3 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)( uint64_t *a1)
{
  return closure #3 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000504F0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #8 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return implicit closure #8 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)();
}

uint64_t sub_100050590()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #9 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return implicit closure #9 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)();
}

uint64_t sub_100050630()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050660()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050690()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000506D8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050774()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000507A4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000507D4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10005081C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000508B8()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_0((void *)(v2 + 16));
  }
  return swift_deallocObject(v2, 48LL);
}

uint64_t partial apply for implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)()
{
  return implicit closure #10 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)();
}

uint64_t sub_100050918()
{
  return swift_deallocObject(v2, 24LL);
}

uint64_t partial apply for implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)@<X0>( void *a1@<X8>)
{
  return implicit closure #11 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_10005095C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [[Any]]);
  unint64_t v1 = lazy protocol witness table accessor for type [[Any]] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [[Any]] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [[Any]] and conformance [A];
  if (!lazy protocol witness table cache variable for type [[Any]] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [[Any]]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [[Any]] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

uint64_t sub_100050A54()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050A84()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050AB4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100050AFC()
{
  return swift_deallocObject(v2, 32LL);
}

void *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0( void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100050B44()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050B74()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050BA4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050BEC()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #4 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)(uint64_t a1)
{
  return closure #4 in MediaMLPlugin.getAndSavePreProcessedWifiData(dataFrame:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(double *)(v1 + 96),  *(double *)(v1 + 104),  *(double *)(v1 + 112),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88));
}

uint64_t sub_100050CCC()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #5 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return implicit closure #5 in MediaMLPlugin.saveWiFiDataStandardDeviation()();
}

uint64_t sub_100050D6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #6 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return implicit closure #6 in MediaMLPlugin.saveWiFiDataStandardDeviation()();
}

uint64_t sub_100050E0C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050E3C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050E6C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050EB4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050F50()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050F80()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100050FB0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100050FF8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #2 in MediaMLPlugin.saveWiFiDataStandardDeviation()(uint64_t *a1)
{
  return closure #2 in MediaMLPlugin.saveWiFiDataStandardDeviation()(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()(uint64_t *a1)
{
  return closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000510E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return implicit closure #3 in MediaMLPlugin.saveWiFiDataStandardDeviation()();
}

uint64_t sub_100051184()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()()
{
  return implicit closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()();
}

uint64_t sub_100051224()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051254()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051284()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000512CC()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051368()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051398()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000513C8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051410()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()(uint64_t a1)
{
  return closure #4 in MediaMLPlugin.saveWiFiDataStandardDeviation()( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 56),  *(double *)(v1 + 48));
}

uint64_t sub_100051510()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #6 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return implicit closure #6 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)();
}

uint64_t sub_1000515B0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #7 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return implicit closure #7 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)();
}

uint64_t sub_100051650()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051680()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000516B0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000516F8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051794()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000517C4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000517F4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10005183C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #2 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1)
{
  return closure #2 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #3 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1)
{
  return closure #3 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(a1, *(void *)(v1 + 16)) & 1;
}

BOOL partial apply for closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t *a1)
{
  return closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_100051950()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return implicit closure #4 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)();
}

uint64_t sub_1000519F0()
{
  uint64_t v1 = *(void *)(type metadata accessor for DataFrame(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v5 = v2 + *(void *)(v1 + 64);
  (*(void (**)(unint64_t))(v1 + 8))(v0 + v2);
  return swift_deallocObject(v4, v5);
}

uint64_t partial apply for implicit closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)()
{
  return implicit closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)();
}

uint64_t sub_100051A90()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051AC0()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051AF0()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051B38()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051BD4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051C04()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100051C34()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_100051C7C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)(uint64_t a1)
{
  return closure #5 in MediaMLPlugin.saveCellDataStandardDeviation(dataFrame:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 64),  *(double *)(v1 + 56));
}

uint64_t partial apply for closure #2 in MediaMLPlugin.saveModelStatsToDB(modelStats:)(uint64_t a1)
{
  return closure #2 in MediaMLPlugin.saveModelStatsToDB(modelStats:)(a1, *(uint64_t **)(v1 + 16));
}

void partial apply for closure #1 in MediaMLPlugin.perform(_:)(void *a1@<X8>)
{
}

unint64_t type metadata accessor for MLRTrialTaskResult()
{
  uint64_t v3 = lazy cache variable for type metadata for MLRTrialTaskResult;
  if (!lazy cache variable for type metadata for MLRTrialTaskResult)
  {
    uint64_t v0 = objc_opt_self(&OBJC_CLASS___MLRTrialTaskResult);
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata(v0);
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for MLRTrialTaskResult);
    return ObjCClassMetadata;
  }

  return v3;
}

uint64_t type metadata accessor for MediaMLPlugin(uint64_t a1)
{
  uint64_t v2 = type metadata singleton initialization cache for MediaMLPlugin;
  if (!type metadata singleton initialization cache for MediaMLPlugin) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediaMLPlugin);
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in PluginErrors()
{
  return lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
}

unint64_t base witness table accessor for Error in PluginErrors()
{
  return lazy protocol witness table accessor for type PluginErrors and conformance PluginErrors();
}

uint64_t getEnumTagSinglePayload for PluginErrors(unsigned __int8 *a1, int a2)
{
  if (a2)
  {
    int v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      else {
        int v2 = 2;
      }
      int v6 = v2;
    }

    if (v6 == 1)
    {
      int v5 = *a1;
    }

    else if (v6 == 2)
    {
      int v5 = *(unsigned __int16 *)a1;
    }

    else
    {
      int v5 = *(_DWORD *)a1;
    }

    if (v5) {
      int v4 = v5 - 1;
    }
    else {
      int v4 = -1;
    }
  }

  else
  {
    int v4 = -1;
  }

  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for PluginErrors(_BYTE *result, int a2, int a3)
{
  int v5 = 0;
  if (a3)
  {
    int v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      else {
        int v3 = 2;
      }
      int v4 = v3;
    }

    int v5 = v4;
  }

  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *__n128 result = a2;
      }

      else if (v5 == 2)
      {
        *(_WORD *)__n128 result = a2;
      }

      else
      {
        *(_DWORD *)__n128 result = a2;
      }
    }
  }

  else if (v5)
  {
    if (v5 == 1)
    {
      *__n128 result = 0;
    }

    else if (v5 == 2)
    {
      *(_WORD *)__n128 result = 0;
    }

    else
    {
      *(_DWORD *)__n128 result = 0;
    }
  }

  return result;
}

uint64_t getEnumTag for PluginErrors()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for PluginErrors()
{
  return &type metadata for PluginErrors;
}

uint64_t ObjC metadata update function for MediaMLPlugin()
{
  return type metadata accessor for MediaMLPlugin(0LL);
}

uint64_t type metadata completion function for MediaMLPlugin(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(319LL);
  uint64_t updated = v1;
  if (v2 <= 0x3F)
  {
    uint64_t v6 = *(void *)(v1 - 8) + 64LL;
    uint64_t updated = swift_updateClassMetadata2(a1, 256LL, 1LL, &v6, a1 + 80);
    if (!updated) {
      return 0LL;
    }
  }

  return updated;
}

uint64_t sub_1000523A4()
{
  return swift_deallocObject(v2, 24LL);
}

id partial apply for implicit closure #1 in closure #1 in MediaMLPlugin.perform(_:)()
{
  return implicit closure #1 in closure #1 in MediaMLPlugin.perform(_:)(*(void **)(v0 + 16));
}

uint64_t sub_1000523E8()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100052418()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100052468()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000524B0()
{
  return swift_deallocObject(v2, 32LL);
}

void closure #1 in OSLogArguments.append(_:)partial apply(uint64_t *a1, void **a2, uint64_t a3)
{
}

{
  uint64_t v3;
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000524F8()
{
  return swift_deallocObject(v2, 24LL);
}

void *partial apply for implicit closure #2 in closure #1 in MediaMLPlugin.perform(_:)()
{
  return implicit closure #2 in closure #1 in MediaMLPlugin.perform(_:)(*(void **)(v0 + 16));
}

uint64_t sub_10005253C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t partial apply for implicit closure #3 in closure #1 in MediaMLPlugin.perform(_:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #3 in closure #1 in MediaMLPlugin.perform(_:)();
  return result;
}

uint64_t sub_100052584()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000525B4()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_1000525E4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10005262C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10005265C()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_10005268C()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_1000526D4()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t sub_10005271C()
{
  return swift_deallocObject(v2, 64LL);
}

uint64_t partial apply for closure #2 in closure #1 in MediaMLPlugin.perform(_:)(uint64_t a1)
{
  *(void *)(v2 + 16) = v2;
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v3 = (void *)swift_task_alloc(dword_100068D74);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = *(void *)(v2 + 16);
  v3[1] = partial apply for closure #2 in closure #1 in MediaMLPlugin.perform(_:);
  return closure #2 in closure #1 in MediaMLPlugin.perform(_:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #2 in closure #1 in MediaMLPlugin.perform(_:)()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *(void *)(*v0 + 24);
  *(void *)(*v0 + 16) = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 8LL))();
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
    return WitnessTable;
  }

  return v2;
}

uint64_t sub_1000528F4()
{
  return swift_deallocObject(v0, 24LL);
}

uint64_t partial apply for implicit closure #4 in closure #1 in MediaMLPlugin.perform(_:)()
{
  return implicit closure #4 in closure #1 in MediaMLPlugin.perform(_:)(*(double *)(v0 + 16));
}

uint64_t sub_100052924()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100052954()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100052984()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t _s2os18OSLogInterpolationV06appendC0_6format5align7privacyySdyXA_AA0B15FloatFormattingVAA0B15StringAlignmentVAA0B7PrivacyVtFSdycfu_TA_0()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000529CC()
{
  return swift_deallocObject(v2, 32LL);
}

void *_s2os14OSLogArgumentsV6appendyySdycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0( void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(double (**)(void))(v3 + 16));
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  return a1;
}

uint64_t sub_100052A84()
{
  return swift_deallocObject(v2, 40LL);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  *(void *)(v2 + 16) = v2;
  uint64_t v5 = *(int **)(v1 + 24);
  uint64_t v3 = (void *)swift_task_alloc(dword_100068D8C);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = *(void *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))( a1,  v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_()
{
  uint64_t v3 = *v0;
  uint64_t v1 = *(void *)(*v0 + 24);
  *(void *)(*v0 + 16) = *v0;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(*(void *)(v3 + 16) + 8LL))();
}

uint64_t sub_100052BDC()
{
  return swift_deallocObject(v2, 24LL);
}

void partial apply for implicit closure #3 in closure #2 in closure #1 in MediaMLPlugin.perform(_:)()
{
}

uint64_t sub_100052C20()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100052C50()
{
  return swift_deallocObject(v0, 17LL);
}

uint64_t sub_100052C80()
{
  return swift_deallocObject(v2, 32LL);
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100052CC8()
{
  return swift_deallocObject(v2, 32LL);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)partial apply()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100052D10()
{
  return swift_deallocObject(v2, 32LL);
}

void *outlined init with take of ModelStats?(const void *a1, void *__dst)
{
  return __dst;
}

void *outlined init with copy of SQLiteDB?(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_retain();
  uint64_t result = a2;
  *a2 = v4;
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getCellDataStandardDeviation()( uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getCellDataStandardDeviation()(a1);
}

void *outlined init with copy of String?(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

uint64_t outlined destroy of (String?, String?)(uint64_t a1)
{
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String?( uint64_t a1)
{
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation()( uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getWiFiDataStandardDeviation()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB()(uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getProcessedWiFiDataFromDB()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getProcessedCellDataFromDB()(uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getProcessedCellDataFromDB()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getRawWiFiDataFromDB()(uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getRawWiFiDataFromDB()(a1);
}

uint64_t partial apply for closure #1 in closure #2 in MediaMLPlugin.getRawCellDataFromDB()(uint64_t a1)
{
  return closure #1 in closure #2 in MediaMLPlugin.getRawCellDataFromDB()(a1);
}

uint64_t type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  uint64_t v5 = lazy cache variable for type metadata for os_unfair_lock_s;
  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(a1, &unk_100066D70);
    uint64_t v5 = ForeignTypeMetadata;
    if (!v1)
    {
      unint64_t v2 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
      return v2;
    }
  }

  return v5;
}

uint64_t partial apply for closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in OSAllocatedUnfairLock.init(uncheckedState:)(a1, a2);
}

uint64_t SQLError.description.getter(unsigned int a1, uint64_t a2, void *a3)
{
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  id v19 = a3;
  swift_bridgeObjectRetain();
  Swift::String v15 = v14;
  if (v14._object)
  {
    Swift::String v16 = v15;
  }

  else
  {
    Swift::String v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SQL Error", 9uLL, 1);
    outlined destroy of String?((uint64_t)&v15);
  }

  uint64_t countAndFlagsBits = v16._countAndFlagsBits;
  object = v16._object;
  uint64_t v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1)._countAndFlagsBits;
  uint64_t v9 = static String.+ infix(_:_:)(countAndFlagsBits, object, v3);
  uint64_t v10 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = sqlite3_errstr(a1);
  if (v12)
  {
    uint64_t v5 = String.init(cString:)(v12);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while implicitly unwrapping an Optional value",  68LL,  2LL,  "MediaMLPlugin/SQLite.swift",  26LL,  2,  14LL,  0);
    __break(1u);
    uint64_t v5 = ((uint64_t (*)())String.init(cString:))();
  }

  uint64_t v7 = static String.+ infix(_:_:)(v9, v10, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t SQLError.errorDescription.getter(unsigned int a1, uint64_t a2, void *a3)
{
  return SQLError.description.getter(a1, a2, a3);
}

uint64_t SQLError.code.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SQLError.code.modify())()
{
  return SQLError.code.modify;
}

uint64_t variable initialization expression of SQLError.desc()
{
  return 0LL;
}

uint64_t SQLError.desc.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t SQLError.desc.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  swift_bridgeObjectRelease(v3);
  return swift_bridgeObjectRelease(a2);
}

uint64_t (*SQLError.desc.modify())()
{
  return SQLError.desc.modify;
}

uint64_t default argument 1 of SQLError.init(code:desc:)()
{
  return 0LL;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance SQLError()
{
  return SQLError.errorDescription.getter(*(_DWORD *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance SQLError()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance SQLError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance SQLError()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SQLError()
{
  return SQLError.description.getter(*(_DWORD *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t protocol witness for Error._domain.getter in conformance SQLError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance SQLError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance SQLError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SQLError()
{
  return Error._getEmbeddedNSError()();
}

void DBError.description.getter(char a1)
{
  __asm { BR              X8 }

uint64_t sub_100053710()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("statement returned no rows", 0x1AuLL, 1)._countAndFlagsBits;
}

void DBError.errorDescription.getter(char a1)
{
}

void static DBError.__derived_enum_equals(_:_:)(char a1)
{
  __asm { BR              X8 }

uint64_t sub_10005383C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_100053888
                                                                                       + *((int *)qword_1000538F0 + a12)))( a1,  a2,  a3,  a4,  a5,  a6);
}

BOOL sub_100053898()
{
  return v1 == 0;
}

void DBError.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }

uint64_t sub_100053950()
{
  v1[1] = 0LL;
  v1[0] = 0LL;
  return Hasher.combine<A>(_:)(v1, &type metadata for Int, &protocol witness table for Int);
}

uint64_t DBError.hashValue.getter(char a1)
{
  v3[1] = a1;
  v3[0] = a1;
  unint64_t v1 = lazy protocol witness table accessor for type DBError and conformance DBError();
  return _hashValue<A>(for:)(v3, &type metadata for DBError, v1);
}

unint64_t lazy protocol witness table accessor for type DBError and conformance DBError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DBError and conformance DBError;
  if (!lazy protocol witness table cache variable for type DBError and conformance DBError)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DBError, &type metadata for DBError);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type DBError and conformance DBError);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type DBError and conformance DBError;
  if (!lazy protocol witness table cache variable for type DBError and conformance DBError)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DBError, &type metadata for DBError);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type DBError and conformance DBError);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type DBError and conformance DBError;
  if (!lazy protocol witness table cache variable for type DBError and conformance DBError)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DBError, &type metadata for DBError);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type DBError and conformance DBError);
    return WitnessTable;
  }

  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DBError(char *a1)
{
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DBError()
{
  return DBError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance DBError(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DBError(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for LocalizedError.errorDescription.getter in conformance DBError()
{
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance DBError()
{
  return LocalizedError.failureReason.getter();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance DBError()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance DBError()
{
  return LocalizedError.helpAnchor.getter();
}

void protocol witness for CustomStringConvertible.description.getter in conformance DBError()
{
}

uint64_t protocol witness for Error._domain.getter in conformance DBError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance DBError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance DBError()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance DBError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t SQLiteDB.logger.unsafeMutableAddressor()
{
  if (one-time initialization token for logger != -1) {
    swift_once(&one-time initialization token for logger, one-time initialization function for logger);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)static SQLiteDB.logger);
}

uint64_t SQLiteDB.Location.path.getter()
{
  Swift::String v16 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v14 - 8);
  unint64_t v9 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v0 = __chkstk_darwin(0LL);
  uint64_t v10 = (char *)&v6 - v9;
  uint64_t v17 = (char *)&v6 - v9;
  unint64_t v12 = (*(void *)(*(void *)(type metadata accessor for SQLiteDB.Location(v0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  char v1 = (const void *)__chkstk_darwin(v11);
  Swift::String v15 = (char *)&v6 - v12;
  Swift::String v16 = v1;
  outlined init with copy of SQLiteDB.Location(v1, (char *)&v6 - v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v15, 1LL, v14) == 1)
  {
    Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(":memory:", 8uLL, 1);
  }

  else
  {
    uint64_t v2 = v10;
    uint64_t v3 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v10, v15, v14);
    uint64_t v17 = v2;
    v6._uint64_t countAndFlagsBits = URL.path.getter(v3);
    v6._object = v4;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v14);
    Swift::String v7 = v6;
  }

  return v7._countAndFlagsBits;
}

uint64_t type metadata accessor for SQLiteDB.Location(uint64_t a1)
{
  uint64_t v2 = type metadata singleton initialization cache for SQLiteDB.Location;
  if (!type metadata singleton initialization cache for SQLiteDB.Location) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SQLiteDB.Location);
  }
  return v2;
}

void *outlined init with copy of SQLiteDB.Location(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1LL))
  {
    uint64_t v2 = type metadata accessor for SQLiteDB.Location(0LL);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0LL, 1LL, v6);
  }

  return a2;
}

uint64_t *SQLiteDB.DBHandle.__allocating_init(location:)(uint64_t a1)
{
  uint64_t v6 = SQLiteDB.DBHandle.init(location:)(a1);
  if (v4) {
    return (uint64_t *)v3;
  }
  else {
    return v6;
  }
}

uint64_t *SQLiteDB.DBHandle.init(location:)(uint64_t a1)
{
  uint64_t v14 = *v1;
  *((_BYTE *)v1 + 24) = 0;
  uint64_t v18 = 0LL;
  uint64_t v2 = SQLiteDB.Location.path.getter();
  uint64_t v16 = v3;
  uint64_t v15 = String.utf8CString.getter(v2);
  swift_retain(v15);
  swift_release(v15);
  swift_retain(v15);
  swift_bridgeObjectRelease(v15);
  Swift::Int32 v17 = sqlite3_open_v2((const char *)(v15 + 32), &v18, 32774, 0LL);
  swift_unknownObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  if (v18)
  {
    if (!v17)
    {
      v1[2] = (uint64_t)v18;
      outlined destroy of SQLiteDB.Location(a1);
      return v1;
    }

    unint64_t v12 = v1;
  }

  else
  {
    unint64_t v12 = v1;
  }

  Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to open database", 0x17uLL, 1);
  MediaMLPlugin::SQLError v19 = SQLError.init(code:desc:)(v17, (Swift::String_optional)v5);
  unsigned __int32 code = v19.code;
  uint64_t desc_8 = v19.desc.value._countAndFlagsBits;
  object = v19.desc.value._object;
  unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
  swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
  *(_DWORD *)uint64_t v7 = code;
  *(void *)(v7 + 8) = desc_8;
  *(void *)(v7 + 16) = object;
  swift_willThrow(code);
  swift_deallocPartialClassInstance(v12, v14, 25LL, 7LL);
  outlined destroy of SQLiteDB.Location(a1);
  return (uint64_t *)v8;
}

uint64_t outlined destroy of SQLiteDB.Location(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  return a1;
}

uint64_t SQLiteDB.DBHandle.close()()
{
  uint64_t v6 = v0;
  swift_beginAccess(v0 + 24);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t result = swift_endAccess(v5);
  if ((v3 & 1) == 0)
  {
    swift_beginAccess(v2 + 24);
    *(_BYTE *)(v2 + 24) = 1;
    swift_endAccess(v4);
    return sqlite3_close_v2(*(sqlite3 **)(v2 + 16));
  }

  return result;
}

uint64_t SQLiteDB.DBHandle.deinit()
{
  return v1;
}

uint64_t SQLiteDB.DBHandle.__deallocating_deinit()
{
  uint64_t v0 = SQLiteDB.DBHandle.deinit();
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t SQLiteDB.Statement.handle.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SQLiteDB.Statement.sqlString.getter()
{
  uint64_t v4 = sqlite3_expanded_sql(*(sqlite3_stmt **)(v0 + 16));
  if (!v4) {
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0LL, 1)._countAndFlagsBits;
  }
  uint64_t v2 = String.init(cString:)(v4);
  $defer #1 () in SQLiteDB.Statement.sqlString.getter(v4);
  return v2;
}

void $defer #1 () in SQLiteDB.Statement.sqlString.getter(void *a1)
{
}

uint64_t variable initialization expression of SQLiteDB.Statement.finished()
{
  return 0LL;
}

uint64_t key path getter for SQLiteDB.Statement.finished : SQLiteDB.Statement@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104LL))(v2) & 1;
  return swift_release(v4);
}

uint64_t key path setter for SQLiteDB.Statement.finished : SQLiteDB.Statement(char *a1, void *a2)
{
  char v4 = *a1;
  uint64_t v3 = *a2;
  swift_retain(*a2);
  SQLiteDB.Statement.finished.setter(v4 & 1);
  return swift_release(v3);
}

uint64_t SQLiteDB.Statement.finished.getter()
{
  char v2 = *(_BYTE *)(v0 + 24);
  swift_endAccess(v3);
  return v2 & 1;
}

uint64_t SQLiteDB.Statement.finished.setter(char a1)
{
  *(_BYTE *)(v1 + swift_beginAccess(v1 + 24) = a1 & 1;
  return swift_endAccess(v4);
}

uint64_t (*SQLiteDB.Statement.finished.modify())(uint64_t a1)
{
  return SQLiteDB.Statement.finished.modify;
}

uint64_t SQLiteDB.Statement.finished.modify(uint64_t a1)
{
  return swift_endAccess(a1);
}

uint64_t SQLiteDB.Statement.__allocating_init(handle:)(uint64_t a1)
{
  return SQLiteDB.Statement.init(handle:)(a1);
}

uint64_t SQLiteDB.Statement.init(handle:)(uint64_t a1)
{
  uint64_t result = v1;
  *(_BYTE *)(v1 + swift_beginAccess(v0 + 24) = 0;
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t SQLiteDB.Statement.step()()
{
  Swift::Int32 v25 = 0;
  uint64_t v26 = v0;
  Swift::Int32 v20 = sqlite3_step(*(sqlite3_stmt **)(v0 + 16));
  Swift::Int32 v25 = v20;
  if (v20 == 100)
  {
    swift_retain();
    return SQLiteDB.Row.init(statement:)();
  }

  else
  {
    if (v20 != 101)
    {
      uint64_t v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(36LL, 1LL);
      uint64_t v24 = v1;
      Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Statement ((", 0xCuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v2);
      uint64_t v3 = swift_bridgeObjectRelease();
      v22[0] = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96LL))(v3);
      v22[1] = v4;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String((uint64_t)v22);
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")) could not be executed", 0x18uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v5);
      swift_bridgeObjectRelease();
      uint64_t v12 = v23;
      uint64_t v11 = v24;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation((uint64_t)&v23);
      uint64_t desc = String.init(stringInterpolation:)(v12, v11);
      v7.value._object = v6;
      v7.value._uint64_t countAndFlagsBits = desc;
      MediaMLPlugin::SQLError v27 = SQLError.init(code:desc:)(v20, v7);
      unsigned __int32 code = v27.code;
      uint64_t desc_8 = v27.desc.value._countAndFlagsBits;
      object = v27.desc.value._object;
      unint64_t v8 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError(&type metadata for SQLError, v8, 0LL, 0LL);
      *(_DWORD *)uint64_t v9 = code;
      *(void *)(v9 + 8) = desc_8;
      *(void *)(v9 + 16) = object;
      swift_willThrow(code);
      return v17;
    }

    swift_beginAccess(v19 + 24);
    v19[24] = 1;
    swift_endAccess(v21);
    return 0LL;
  }

uint64_t SQLiteDB.Statement.forEach(handler:)(void (*a1)(void))
{
  while (1)
  {
    uint64_t result = SQLiteDB.Statement.step()();
    if (v4) {
      break;
    }
    uint64_t v2 = result;
    if (!result) {
      break;
    }
    a1();
    swift_release(v2);
    uint64_t v4 = 0LL;
  }

  return result;
}

uint64_t SQLiteDB.Statement.queryOneRow<A>(handler:)@<X0>( void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v52 = 0LL;
  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v49 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v53 = a3;
  uint64_t v40 = *(void *)(a3 - 8);
  unint64_t v41 = (*(void *)(v40 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v42 = (char *)v18 - v41;
  uint64_t v52 = (char *)v18 - v41;
  uint64_t v50 = __chkstk_darwin(a1);
  uint64_t v51 = v6;
  uint64_t v49 = v4;
  uint64_t result = SQLiteDB.Statement.step()();
  uint64_t v43 = v5;
  uint64_t v44 = result;
  uint64_t v45 = v5;
  if (v5)
  {
    uint64_t v21 = v45;
  }

  else
  {
    uint64_t v35 = v44;
    if (v44)
    {
      uint64_t v34 = v35;
      uint64_t v8 = v43;
      uint64_t v31 = v35;
      uint64_t v48 = v35;
      v37();
      uint64_t v32 = v8;
      uint64_t v33 = v8;
      uint64_t v9 = SQLiteDB.Statement.step()();
      *(_DWORD *)&v28[8] = 0;
      uint64_t v29 = v9;
      uint64_t v30 = 0LL;
      uint64_t v47 = v9;
      *(void *)uint64_t v28 = v9 != 0;
      BOOL v27 = v9 != 0;
      outlined destroy of SQLiteDB.Row?(&v47);
      if (v27)
      {
        for (uint64_t i = *(void *)&v28[4]; ; uint64_t i = *(void *)&v23[4])
        {
          uint64_t v10 = i;
          uint64_t v11 = SQLiteDB.Statement.step()();
          *(void *)&v23[4] = v10;
          uint64_t v24 = v11;
          uint64_t v25 = v10;
          if (v10) {
            break;
          }
          uint64_t v46 = v24;
          *(void *)uint64_t v23 = v24 != 0;
          BOOL v22 = v24 != 0;
          outlined destroy of SQLiteDB.Row?(&v46);
          if (!v22)
          {
            unint64_t v12 = lazy protocol witness table accessor for type DBError and conformance DBError();
            uint64_t v13 = swift_allocError(&type metadata for DBError, v12, 0LL, 0LL);
            uint64_t v20 = v13;
            *uint64_t v14 = 1;
            swift_willThrow(v13);
            (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
            swift_release(v31);
            uint64_t result = v20;
            uint64_t v21 = v20;
            return result;
          }
        }

        v18[0] = v25;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
        return swift_release(v31);
      }

      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v40 + 16))(v36, v42, v39);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
        return swift_release(v31);
      }
    }

    else
    {
      unint64_t v15 = lazy protocol witness table accessor for type DBError and conformance DBError();
      uint64_t v16 = swift_allocError(&type metadata for DBError, v15, 0LL, 0LL);
      uint64_t v19 = v16;
      *uint64_t v17 = 0;
      swift_willThrow(v16);
      uint64_t result = v19;
      uint64_t v21 = v19;
    }
  }

  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of SQLiteDB.Row?( void *a1)
{
}

uint64_t SQLiteDB.Statement.queryOne<A>()(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  uint64_t v7 = v2;
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  return (*(uint64_t (**)(uint64_t (*)(uint64_t), _BYTE *))(*(void *)v2 + 152LL))( partial apply for closure #1 in SQLiteDB.Statement.queryOne<A>(),  v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t (*)(uint64_t), _BYTE *, uint64_t);
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v10 = a1;
  uint64_t v9 = v2;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  uint64_t v5 = *(uint64_t (**)(uint64_t (*)(uint64_t), _BYTE *, uint64_t))(*(void *)v2 + 152LL);
  uint64_t v3 = type metadata accessor for Optional(0LL);
  return v5(partial apply for closure #1 in SQLiteDB.Statement.queryOne<A>(), v6, v3);
}

uint64_t closure #1 in SQLiteDB.Statement.queryOne<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (SQLiteDB.Row.count.getter(a1) == 1)
  {
    swift_retain();
    return (*(uint64_t (**)(uint64_t, void))(a3 + 8))(a1, 0LL);
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type DBError and conformance DBError();
    uint64_t v6 = swift_allocError(&type metadata for DBError, v4, 0LL, 0LL);
    *uint64_t v5 = 2;
    return swift_willThrow(v6);
  }

{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  if (SQLiteDB.Row.count.getter(a1) == 1)
  {
    swift_retain();
    return (*(uint64_t (**)(uint64_t, void))(a3 + 8))(a1, 0LL);
  }

  else
  {
    unint64_t v4 = lazy protocol witness table accessor for type DBError and conformance DBError();
    uint64_t v6 = swift_allocError(&type metadata for DBError, v4, 0LL, 0LL);
    *uint64_t v5 = 2;
    return swift_willThrow(v6);
  }

uint64_t partial apply for closure #1 in SQLiteDB.Statement.queryOne<A>()(uint64_t a1)
{
  return closure #1 in SQLiteDB.Statement.queryOne<A>()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

{
  uint64_t v1;
  return closure #1 in SQLiteDB.Statement.queryOne<A>()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t SQLiteDB.Row.count.getter(uint64_t a1)
{
  pStmt = *(sqlite3_stmt **)(a1 + 16);
  swift_release(a1);
  return sqlite3_column_count(pStmt);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteDB.Statement.execute()()
{
  v3[1] = 0LL;
  while (1)
  {
    *(_DWORD *)&v0[8] = HIDWORD(v2);
    uint64_t v1 = SQLiteDB.Statement.step()();
    if (v2) {
      break;
    }
    v3[0] = v1;
    outlined destroy of SQLiteDB.Row?(v3);
    if (!v1) {
      break;
    }
    *(void *)uint64_t v0 = 1LL;
    uint64_t v2 = *(void *)&v0[4];
  }

uint64_t SQLiteDB.Statement.bind(at:to:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(v6, a1, v4);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 8) + 80LL);
  if ((v2 & 0x20000) != 0) {
    return (void *)(*result + ((v2 + 16LL) & ~(unint64_t)v2));
  }
  return result;
}

void *SQLiteDB.Statement.bind(values:)(uint64_t a1)
{
  v16[4] = a1;
  v14[6] = a1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SQLBindable]);
  unint64_t v1 = lazy protocol witness table accessor for type [SQLBindable] and conformance [A]();
  Sequence.enumerated()(&v15, v8, v1);
  v14[5] = v15;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[SQLBindable]>);
  EnumeratedSequence.makeIterator()(v2);
  for (uint64_t i = v9; ; uint64_t i = 0LL)
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[SQLBindable]>.Iterator);
    EnumeratedSequence.Iterator.next()(v3);
    outlined init with take of (offset: Int, element: SQLBindable)?(v12, &v13);
    if (!v14[3])
    {
      uint64_t result = v16;
      outlined destroy of EnumeratedSequence<[SQLBindable]>.Iterator(v16);
      return result;
    }

    uint64_t v6 = v13;
    uint64_t result = outlined init with take of SQLBindable(v14, __dst);
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 184LL))(v6 + 1, __dst);
    if (i)
    {
      __swift_destroy_boxed_opaque_existential_1(__dst);
      uint64_t result = v16;
      outlined destroy of EnumeratedSequence<[SQLBindable]>.Iterator(v16);
      return result;
    }

    __swift_destroy_boxed_opaque_existential_1(__dst);
  }

  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [SQLBindable] and conformance [A]()
{
  uint64_t v3 = lazy protocol witness table cache variable for type [SQLBindable] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SQLBindable] and conformance [A])
  {
    uint64_t v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SQLBindable]);
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v0);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type [SQLBindable] and conformance [A]);
    return WitnessTable;
  }

  return v3;
}

void *outlined init with take of (offset: Int, element: SQLBindable)?(const void *a1, void *a2)
{
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of EnumeratedSequence<[SQLBindable]>.Iterator( void *a1)
{
}

void *outlined init with take of SQLBindable(const void *a1, void *__dst)
{
  return __dst;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(void *a1)
{
  uint64_t v2 = a1[3];
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80LL) & 0x20000) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void *))(*(void *)(v2 - 8) + 8LL))(a1);
  }
}

uint64_t SQLiteDB.Statement.deinit()
{
  return v2;
}

uint64_t SQLiteDB.Statement.__deallocating_deinit()
{
  uint64_t v0 = SQLiteDB.Statement.deinit();
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteDB.Row.statement.getter()
{
}

uint64_t SQLiteDB.Row.get<A>(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a1);
}

{
  swift_retain();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a1);
}

uint64_t variable initialization expression of SQLiteDB.Transaction.finalized()
{
  return 0LL;
}

uint64_t key path getter for SQLiteDB.Transaction.finalized : SQLiteDB.Transaction@<X0>( uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96LL))(v2) & 1;
  return swift_release(v4);
}

uint64_t key path setter for SQLiteDB.Transaction.finalized : SQLiteDB.Transaction(char *a1, uint64_t *a2)
{
  char v4 = *a1;
  uint64_t v3 = *a2;
  swift_retain();
  (*(void (**)(void))(*(void *)v3 + 104LL))(v4 & 1);
  return swift_release(v3);
}

uint64_t SQLiteDB.Transaction.finalized.getter()
{
  char v2 = *(_BYTE *)(v0 + 24);
  swift_endAccess(v3);
  return v2 & 1;
}

uint64_t SQLiteDB.Transaction.finalized.setter(char a1)
{
  *(_BYTE *)(v1 + swift_beginAccess(v1 + 24) = a1 & 1;
  return swift_endAccess(v4);
}

uint64_t (*SQLiteDB.Transaction.finalized.modify())(uint64_t a1)
{
  return SQLiteDB.Transaction.finalized.modify;
}

uint64_t SQLiteDB.Transaction.finalized.modify(uint64_t a1)
{
  return swift_endAccess(a1);
}

uint64_t SQLiteDB.Transaction.__allocating_init(_:)(uint64_t a1)
{
  return SQLiteDB.Transaction.init(_:)(a1);
}

uint64_t SQLiteDB.Transaction.init(_:)(uint64_t a1)
{
  *(_BYTE *)(v1 + swift_beginAccess(v0 + 24) = 0;
  swift_retain();
  *(void *)(v1 + 16) = a1;
  swift_release(a1);
  return v4;
}

uint64_t SQLiteDB.Transaction.withStatement<A>(sql:handler:)( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  if (((*(uint64_t (**)(void))(*(void *)v4 + 96LL))() & 1) != 0)
  {
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("transaction already finalized", 0x1DuLL, 1);
    MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(1, (Swift::String_optional)v6);
    unsigned __int32 code = v21.code;
    uint64_t desc_8 = v21.desc.value._countAndFlagsBits;
    object = v21.desc.value._object;
    unint64_t v7 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v12 = swift_allocError(&type metadata for SQLError, v7, 0LL, 0LL);
    *(_DWORD *)uint64_t v8 = code;
    *(void *)(v8 + 8) = desc_8;
    *(void *)(v8 + 16) = object;
    swift_willThrow(code);
    return v12;
  }

  else
  {
    uint64_t v13 = *(void *)(v19 + 16);
    swift_retain();
    uint64_t v14 = SQLiteDB.makeStatement(with:)(a1, a2);
    if (v20)
    {
      return swift_release(v13);
    }

    else
    {
      swift_release(v13);
      swift_retain();
      a3(v14);
      swift_release(a4);
      return swift_release(v14);
    }
  }

uint64_t SQLiteDB.makeStatement(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v42 = 0LL;
  Swift::Int32 v40 = 0;
  uint64_t v39 = 0LL;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = v2;
  uint64_t v37 = *(void *)(v2 + 112);
  swift_retain(v37);
  uint64_t v36 = v44;
  swift_beginAccess(v37 + 24);
  int v38 = *(unsigned __int8 *)(v37 + 24);
  swift_endAccess(v44);
  swift_release(v37);
  if ((v38 & 1) != 0)
  {
    unint64_t v13 = lazy protocol witness table accessor for type DBError and conformance DBError();
    uint64_t v14 = swift_allocError(&type metadata for DBError, v13, 0LL, 0LL);
    v16[0] = v14;
    *uint64_t v15 = 3;
    swift_willThrow(v14);
    uint64_t v21 = v16[0];
  }

  else
  {
    uint64_t v28 = &v43;
    uint64_t v43 = 0LL;
    uint64_t v3 = v35;
    uint64_t v29 = String.utf8CString.getter(v32);
    uint64_t v42 = v29;
    swift_retain(v34);
    swift_retain(v29);
    uint64_t v30 = v16;
    __chkstk_darwin(v16);
    ContiguousArray.withUnsafeBufferPointer<A>(_:)(&v41, partial apply for closure #1 in SQLiteDB.makeStatement(with:));
    uint64_t v31 = v3;
    if (v3)
    {
      __break(1u);
    }

    else
    {
      swift_release(v34);
      swift_release(v29);
      Swift::Int32 v25 = v41;
      Swift::Int32 v40 = v41;
      uint64_t v26 = v43;
      if (v43)
      {
        uint64_t v24 = v26;
        uint64_t v23 = v26;
        uint64_t v39 = v26;
        if (!v25)
        {
          type metadata accessor for SQLiteDB.Statement();
          uint64_t v22 = SQLiteDB.Statement.__allocating_init(handle:)(v23);
          swift_release(v29);
          return v22;
        }
      }

      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to prepare statement", 0x1BuLL, 1);
      v16[1] = v5._countAndFlagsBits;
      MediaMLPlugin::SQLError v48 = SQLError.init(code:desc:)(v25, (Swift::String_optional)v5);
      unsigned __int32 code = v48.code;
      uint64_t countAndFlagsBits = v48.desc.value._countAndFlagsBits;
      object = v48.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v7 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      uint64_t v8 = countAndFlagsBits;
      uint64_t v9 = object;
      uint64_t v10 = v7;
      uint64_t v11 = code;
      uint64_t v20 = v10;
      *(_DWORD *)uint64_t v12 = code;
      *(void *)(v12 + 8) = v8;
      *(void *)(v12 + 16) = v9;
      swift_willThrow(v11);
      swift_release(v29);
      uint64_t v21 = v20;
    }
  }

  return v27;
}

Swift::Int64 __swiftcall SQLiteDB.Transaction.changes()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  uint64_t v3 = *(void *)(v2 + 112);
  swift_retain();
  swift_release(v2);
  uint64_t v4 = *(sqlite3 **)(v3 + 16);
  swift_release(v3);
  return sqlite3_changes64(v4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteDB.Transaction.commit()()
{
  if (((*(uint64_t (**)(void))(*(void *)v0 + 96LL))() & 1) != 0)
  {
    Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("transaction already finalized", 0x1DuLL, 1);
    MediaMLPlugin::SQLError v11 = SQLError.init(code:desc:)(1, (Swift::String_optional)v2);
    unsigned __int32 code = v11.code;
    uint64_t desc_8 = v11.desc.value._countAndFlagsBits;
    object = v11.desc.value._object;
    unint64_t v3 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v3, 0LL, 0LL);
    *(_DWORD *)uint64_t v4 = code;
    *(void *)(v4 + 8) = desc_8;
    *(void *)(v4 + 16) = object;
    swift_willThrow(code);
  }

  else
  {
    uint64_t v8 = v9[2];
    swift_retain();
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("COMMIT", 6uLL, 1);
    SQLiteDB.executeRaw(_:)(v1._countAndFlagsBits, (uint64_t)v1._object);
    swift_bridgeObjectRelease();
    swift_release(v8);
    if (!v10) {
      (*(void (**)(uint64_t))(*v9 + 104LL))(1LL);
    }
  }

uint64_t SQLiteDB.executeRaw(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v25 = v2;
  uint64_t v22 = *(void *)(v2 + 112);
  swift_retain(v22);
  swift_beginAccess(v22 + 24);
  char v23 = *(_BYTE *)(v22 + 24);
  swift_endAccess(v24);
  swift_release(v22);
  if ((v23 & 1) != 0)
  {
    unint64_t v8 = lazy protocol witness table accessor for type DBError and conformance DBError();
    uint64_t v10 = swift_allocError(&type metadata for DBError, v8, 0LL, 0LL);
    *uint64_t v9 = 3;
    swift_willThrow(v10);
    return v10;
  }

  else
  {
    uint64_t v16 = *(void *)(v21 + 112);
    swift_retain(v16);
    uint64_t v17 = *(sqlite3 **)(v16 + 16);
    swift_release(v16);
    swift_bridgeObjectRetain();
    uint64_t v18 = String.utf8CString.getter(a1);
    swift_retain(v18);
    swift_release(v18);
    swift_retain(v18);
    swift_bridgeObjectRelease();
    unsigned int code = sqlite3_exec(v17, (const char *)(v18 + 32), 0LL, 0LL, 0LL);
    swift_unknownObjectRelease(v18);
    swift_bridgeObjectRelease();
    uint64_t result = code;
    if (code)
    {
      uint64_t desc = default argument 1 of SQLError.init(code:desc:)();
      v5.value._object = v4;
      v5.value._uint64_t countAndFlagsBits = desc;
      MediaMLPlugin::SQLError v28 = SQLError.init(code:desc:)(code, v5);
      unsigned __int32 v14 = v28.code;
      uint64_t desc_8 = v28.desc.value._countAndFlagsBits;
      object = v28.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v15 = swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = v14;
      *(void *)(v7 + 8) = desc_8;
      *(void *)(v7 + 16) = object;
      swift_willThrow(v14);
      return v15;
    }
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteDB.Transaction.rollback()()
{
  if (((*(uint64_t (**)(void))(*(void *)v0 + 96LL))() & 1) != 0)
  {
    Swift::String v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("transaction already finalized", 0x1DuLL, 1);
    MediaMLPlugin::SQLError v11 = SQLError.init(code:desc:)(1, (Swift::String_optional)v2);
    unsigned __int32 code = v11.code;
    uint64_t desc_8 = v11.desc.value._countAndFlagsBits;
    object = v11.desc.value._object;
    unint64_t v3 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v3, 0LL, 0LL);
    *(_DWORD *)uint64_t v4 = code;
    *(void *)(v4 + 8) = desc_8;
    *(void *)(v4 + 16) = object;
    swift_willThrow(code);
  }

  else
  {
    uint64_t v8 = v9[2];
    swift_retain();
    Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ROLLBACK", 8uLL, 1);
    SQLiteDB.executeRaw(_:)(v1._countAndFlagsBits, (uint64_t)v1._object);
    swift_bridgeObjectRelease();
    swift_release(v8);
    if (!v10) {
      (*(void (**)(uint64_t))(*v9 + 104LL))(1LL);
    }
  }

uint64_t SQLiteDB.Transaction.deinit()
{
  return v2;
}

uint64_t SQLiteDB.Transaction.__deallocating_deinit()
{
  uint64_t v0 = SQLiteDB.Transaction.deinit();
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t SQLiteDB.__allocating_init(_:)(const void *a1)
{
  uint64_t v6 = SQLiteDB.init(_:)(a1);
  if (v4) {
    return v3;
  }
  else {
    return v6;
  }
}

uint64_t SQLiteDB.init(_:)(const void *a1)
{
  uint64_t v57 = a1;
  uint64_t v53 = *v1;
  uint64_t v67 = 0LL;
  uint64_t v66 = 0LL;
  uint64_t v65 = 0LL;
  Swift::Int32 v64 = 0;
  Swift::Int32 v63 = 0;
  uint64_t v56 = 0LL;
  unint64_t v55 = (*(void *)(*(void *)(type metadata accessor for SQLiteDB.Location(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v2 = __chkstk_darwin(v54);
  uint64_t v59 = (char *)&v26 - v55;
  uint64_t v67 = v3;
  uint64_t v66 = v2;
  swift_defaultActor_initialize();
  type metadata accessor for SQLiteDB.DBHandle();
  outlined init with copy of SQLiteDB.Location(v57, v59);
  uint64_t v4 = v58;
  Swift::String_optional v5 = SQLiteDB.DBHandle.__allocating_init(location:)((uint64_t)v59);
  uint64_t v60 = v4;
  uint64_t v61 = v5;
  uint64_t v62 = v4;
  if (v4)
  {
    uint64_t v40 = v62;
    uint64_t v41 = v54;
  }

  else
  {
    uint64_t v47 = v61;
    uint64_t v65 = v61;
    uint64_t v49 = (sqlite3 *)v61[2];
    Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PRAGMA journal_mode=WAL;", 0x18uLL, 1);
    object = v6._object;
    uint64_t v50 = String.utf8CString.getter(v6._countAndFlagsBits);
    swift_retain(v50);
    swift_release(v50);
    swift_retain(v50);
    MediaMLPlugin::SQLError v48 = (const char *)(v50 + 32);
    swift_bridgeObjectRelease(v50);
    Swift::Int32 v52 = sqlite3_exec(v49, v48, 0LL, 0LL, 0LL);
    swift_unknownObjectRelease(v50);
    swift_bridgeObjectRelease(object);
    Swift::Int32 v64 = v52;
    if (v52)
    {
      Swift::String v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to enable WAL", 0x14uLL, 1);
      uint64_t countAndFlagsBits = v18._countAndFlagsBits;
      MediaMLPlugin::SQLError v69 = SQLError.init(code:desc:)(v52, (Swift::String_optional)v18);
      unsigned __int32 code = v69.code;
      uint64_t v30 = v69.desc.value._countAndFlagsBits;
      uint64_t v31 = v69.desc.value._object;
      unint64_t v19 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v20 = swift_allocError(&type metadata for SQLError, v19, 0LL, 0LL);
      uint64_t v21 = v30;
      uint64_t v22 = v31;
      uint64_t v23 = v20;
      uint64_t v24 = code;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v25 = code;
      *(void *)(v25 + 8) = v21;
      *(void *)(v25 + 16) = v22;
      swift_willThrow(v24);
      swift_release(v47);
      uint64_t v40 = v33;
      uint64_t v41 = v54;
    }

    else
    {
      uint64_t v43 = (sqlite3 *)v47[2];
      Swift::String v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PRAGMA foreign_keys=ON;", 0x17uLL, 1);
      uint64_t v45 = v7._object;
      uint64_t v44 = String.utf8CString.getter(v7._countAndFlagsBits);
      swift_retain(v44);
      swift_release(v44);
      swift_retain(v44);
      uint64_t v42 = (const char *)(v44 + 32);
      swift_bridgeObjectRelease(v44);
      Swift::Int32 v46 = sqlite3_exec(v43, v42, 0LL, 0LL, 0LL);
      swift_unknownObjectRelease(v44);
      swift_bridgeObjectRelease(v45);
      Swift::Int32 v63 = v46;
      if (!v46)
      {
        swift_retain(v47);
        uint64_t v8 = v47;
        *(void *)(v54 + 112) = v47;
        swift_release(v8);
        outlined destroy of SQLiteDB.Location((uint64_t)v57);
        return v54;
      }

      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to enable FK", 0x13uLL, 1);
      uint64_t v35 = v10._countAndFlagsBits;
      MediaMLPlugin::SQLError v68 = SQLError.init(code:desc:)(v46, (Swift::String_optional)v10);
      unsigned __int32 v38 = v68.code;
      uint64_t v36 = v68.desc.value._countAndFlagsBits;
      uint64_t v37 = v68.desc.value._object;
      unint64_t v11 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v12 = swift_allocError(&type metadata for SQLError, v11, 0LL, 0LL);
      uint64_t v13 = v36;
      unsigned __int32 v14 = v37;
      uint64_t v15 = v12;
      uint64_t v16 = v38;
      uint64_t v39 = v15;
      *(_DWORD *)uint64_t v17 = v38;
      *(void *)(v17 + 8) = v13;
      *(void *)(v17 + 16) = v14;
      swift_willThrow(v16);
      swift_release(v47);
      uint64_t v40 = v39;
      uint64_t v41 = v54;
    }
  }

  uint64_t v27 = v41;
  uint64_t v28 = v40;
  swift_defaultActor_destroy(v41);
  swift_deallocPartialClassInstance(v27, v53, 120LL, 15LL);
  outlined destroy of SQLiteDB.Location((uint64_t)v57);
  return v34;
}

uint64_t closure #1 in SQLiteDB.makeStatement(with:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sqlite3_stmt **a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v22 = a3;
  uint64_t v21 = a4;
  uint64_t v20 = a5;
  uint64_t v13 = *(void *)(a3 + 112);
  swift_retain(v13);
  unsigned __int32 v14 = *(sqlite3 **)(v13 + 16);
  swift_release(v13);
  uint64_t v17 = (const char *)UnsafeBufferPointer.baseAddress.getter(a1, a2, &type metadata for Int8);
  if (!v17)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "MediaMLPlugin/SQLite.swift",  26LL,  2,  244LL,  0);
    __break(1u);
  }

  uint64_t v18 = ContiguousArray.count.getter(a4, &type metadata for Int8);
  unint64_t v8 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v9 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v19, &v18, &type metadata for Int32, &type metadata for Int, v8, v9, v6);
  uint64_t result = sqlite3_prepare_v2(v14, v17, v19, a5, 0LL);
  *a6 = result;
  return result;
}

uint64_t partial apply for closure #1 in SQLiteDB.makeStatement(with:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return closure #1 in SQLiteDB.makeStatement(with:)( a1,  a2,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(sqlite3_stmt ***)(v3 + 32),  a3);
}

uint64_t type metadata accessor for SQLiteDB.Statement()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13MediaMLPlugin8SQLiteDB9Statement);
}

uint64_t type metadata accessor for SQLiteDB.DBHandle()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13MediaMLPlugin8SQLiteDBP33_202BF1C00B4C14B9C94E7B7A5A6421C48DBHandle);
}

uint64_t SQLiteDB.withStatement<A>(sql:handler:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result = SQLiteDB.makeStatement(with:)(a1, a2);
  uint64_t v6 = result;
  if (!v3)
  {
    a3();
    return swift_release(v6);
  }

  return result;
}

uint64_t SQLiteDB.withTransaction<A>(handler:)@<X0>( uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v41 = 0LL;
  uint64_t v39 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v37 = 0LL;
  uint64_t v42 = a3;
  uint64_t v28 = *(void *)(a3 - 8);
  unint64_t v29 = (*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v30 = (char *)&v13 - v29;
  uint64_t v41 = (char *)&v13 - v29;
  uint64_t v39 = __chkstk_darwin(a1);
  uint64_t v40 = v5;
  uint64_t v38 = v4;
  type metadata accessor for SQLiteDB.Transaction();
  swift_retain();
  uint64_t v32 = SQLiteDB.Transaction.__allocating_init(_:)(v31);
  uint64_t v37 = v32;
  Swift::String v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BEGIN TRANSACTION", 0x11uLL, 1);
  uint64_t v7 = v33;
  object = v6._object;
  SQLiteDB.executeRaw(_:)(v6._countAndFlagsBits, (uint64_t)v6._object);
  uint64_t v35 = v7;
  uint64_t v36 = v7;
  if (v7)
  {
    uint64_t v15 = v36;
    swift_bridgeObjectRelease();
    uint64_t result = swift_release(v32);
    uint64_t v16 = v15;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = v35;
    uint64_t v9 = v25(v32);
    uint64_t v22 = v8;
    uint64_t v23 = v8;
    if (v8)
    {
      uint64_t v14 = v23;
      uint64_t result = swift_release(v32);
      uint64_t v16 = v14;
    }

    else
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v32 + 96LL))(v9) & 1) != 0)
      {
        uint64_t v18 = v22;
        goto LABEL_7;
      }

      Swift::String v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("COMMIT", 6uLL, 1);
      uint64_t v11 = v22;
      int v19 = v10._object;
      SQLiteDB.executeRaw(_:)(v10._countAndFlagsBits, (uint64_t)v10._object);
      uint64_t v20 = v11;
      uint64_t v21 = v11;
      if (!v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v20;
LABEL_7:
        uint64_t v17 = v18;
        (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v24, v30, v27);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
        return swift_release(v32);
      }

      uint64_t v13 = v21;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
      return swift_release(v32);
    }
  }

  return result;
}

uint64_t type metadata accessor for SQLiteDB.Transaction()
{
  return objc_opt_self(&OBJC_CLASS____TtCC13MediaMLPlugin8SQLiteDB11Transaction);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteDB.execute(_:)( Swift::String a1)
{
}

Swift::Void __swiftcall SQLiteDB.close()()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_retain();
  SQLiteDB.DBHandle.close()();
  swift_release(v1);
}

uint64_t SQLiteDB.deinit()
{
  return v2;
}

uint64_t SQLiteDB.__deallocating_deinit()
{
  uint64_t v0 = SQLiteDB.deinit();
  return swift_defaultActor_deallocate(v0);
}

uint64_t SQLiteDB.unownedExecutor.getter()
{
  return UnownedSerialExecutor.init(_:)();
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance SQLiteDB()
{
  return SQLiteDB.unownedExecutor.getter();
}

uint64_t SQLNullableType<>.init(with:column:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  unint64_t v29 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v30 = a3;
  uint64_t v14 = *(void *)(a3 - 8);
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v16 = (char *)&v11 - v15;
  unint64_t v17 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v18 = (char *)&v11 - v17;
  unint64_t v29 = (char *)&v11 - v17;
  uint64_t v28 = v7;
  uint64_t v27 = v8;
  swift_retain();
  uint64_t v24 = *(sqlite3_stmt **)(v19 + 16);
  swift_release(v19);
  uint64_t v23 = &v25;
  uint64_t v25 = v20;
  unint64_t v21 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v22 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v9 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v26, v23, &type metadata for Int32, &type metadata for Int, v21, v22, v9);
  if (sqlite3_column_type(v24, v26) == 5)
  {
    swift_release(v19);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, 1LL, 1LL, v12);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v19, v20);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v16, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v11, v18, v12);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v12);
  }

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }

  return v2;
}

uint64_t Int.init(with:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  void v16[2] = a1;
  v16[1] = a2;
  swift_retain();
  uint64_t v8 = *(sqlite3_stmt **)(a1 + 16);
  swift_release(a1);
  uint64_t v14 = a2;
  unint64_t v6 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v7 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v15, &v14, &type metadata for Int32, &type metadata for Int, v6, v7, v2);
  int v13 = sqlite3_column_int(v8, v15);
  unint64_t v9 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v10 = lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v3 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  SignedInteger<>.init<A>(_:)(v16, &v13, &type metadata for Int, &type metadata for Int32, v9, v10, v3);
  uint64_t v12 = v16[0];
  uint64_t v17 = v16[0];
  swift_release(a1);
  return v12;
}

uint64_t Int.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a1;
  uint64_t v22 = a2;
  uint64_t v21 = a3;
  uint64_t v14 = *(sqlite3_stmt **)(a1 + 16);
  uint64_t v19 = a2;
  unint64_t v11 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v12 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v13 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v20, &v19, &type metadata for Int32, &type metadata for Int, v11, v12, v13);
  int v15 = v20;
  uint64_t v17 = a3;
  SignedInteger<>.init<A>(_:)(&v18, &v17, &type metadata for Int32, &type metadata for Int, v11, v12, v13);
  uint64_t result = sqlite3_bind_int(v14, v15, v18);
  Swift::Int32 v16 = result;
  if ((_DWORD)result)
  {
    Swift::String v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to bind Int", 0x12uLL, 1);
    MediaMLPlugin::SQLError v24 = SQLError.init(code:desc:)(v16, (Swift::String_optional)v4);
    unsigned __int32 code = v24.code;
    uint64_t desc_8 = v24.desc.value._countAndFlagsBits;
    object = v24.desc.value._object;
    unint64_t v5 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v5, 0LL, 0LL);
    *(_DWORD *)uint64_t v6 = code;
    *(void *)(v6 + 8) = desc_8;
    *(void *)(v6 + 16) = object;
    return swift_willThrow(code);
  }

  return result;
}

uint64_t protocol witness for SQLType.init(with:column:) in conformance Int@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Int.init(with:column:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for SQLBindable.bind(to:at:) in conformance Int(uint64_t a1, uint64_t a2)
{
  return Int.bind(to:at:)(a1, a2, *v2);
}

uint64_t Int64.init(with:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  void v16[2] = a1;
  v16[1] = a2;
  swift_retain();
  uint64_t v8 = *(sqlite3_stmt **)(a1 + 16);
  swift_release(a1);
  uint64_t v14 = a2;
  unint64_t v6 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v7 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v15, &v14, &type metadata for Int32, &type metadata for Int, v6, v7, v2);
  sqlite3_int64 v13 = sqlite3_column_int64(v8, v15);
  unint64_t v9 = lazy protocol witness table accessor for type Int64 and conformance Int64();
  unint64_t v10 = lazy protocol witness table accessor for type Int64 and conformance Int64();
  unint64_t v3 = lazy protocol witness table accessor for type Int64 and conformance Int64();
  SignedInteger<>.init<A>(_:)(v16, &v13, &type metadata for Int64, &type metadata for Int64, v9, v10, v3);
  uint64_t v12 = v16[0];
  uint64_t v17 = v16[0];
  swift_release(a1);
  return v12;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return WitnessTable;
  }

  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;
  uint64_t v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store( WitnessTable,  (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return WitnessTable;
  }

  return v2;
}

uint64_t Int64.bind(to:at:)(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  sqlite3_int64 v18 = a3;
  sqlite3_int64 v13 = *(sqlite3_stmt **)(a1 + 16);
  uint64_t v16 = a2;
  unint64_t v11 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v12 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v3 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v17, &v16, &type metadata for Int32, &type metadata for Int, v11, v12, v3);
  uint64_t result = sqlite3_bind_int64(v13, v17, a3);
  Swift::Int32 v15 = result;
  if ((_DWORD)result)
  {
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to bind Int64", 0x14uLL, 1);
    MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(v15, (Swift::String_optional)v5);
    unsigned __int32 code = v21.code;
    uint64_t desc_8 = v21.desc.value._countAndFlagsBits;
    object = v21.desc.value._object;
    unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
    *(_DWORD *)uint64_t v7 = code;
    *(void *)(v7 + 8) = desc_8;
    *(void *)(v7 + 16) = object;
    return swift_willThrow(code);
  }

  return result;
}

uint64_t protocol witness for SQLType.init(with:column:) in conformance Int64@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Int64.init(with:column:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for SQLBindable.bind(to:at:) in conformance Int64(uint64_t a1, uint64_t a2)
{
  return Int64.bind(to:at:)(a1, a2, *v2);
}

double Double.init(with:column:)(uint64_t a1, uint64_t a2)
{
  double v15 = 0.0;
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  swift_retain();
  uint64_t v8 = *(sqlite3_stmt **)(a1 + 16);
  swift_release(a1);
  uint64_t v11 = a2;
  unint64_t v6 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v7 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v12, &v11, &type metadata for Int32, &type metadata for Int, v6, v7, v2);
  double v3 = sqlite3_column_double(v8, v12);
  double v10 = Double.init(_:)(v3);
  double v15 = v10;
  swift_release(a1);
  return v10;
}

uint64_t Double.bind(to:at:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  double v18 = a3;
  uint64_t v13 = *(sqlite3_stmt **)(a1 + 16);
  uint64_t v16 = a2;
  unint64_t v11 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v12 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v3 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v17, &v16, &type metadata for Int32, &type metadata for Int, v11, v12, v3);
  uint64_t result = sqlite3_bind_double(v13, v17, a3);
  Swift::Int32 v15 = result;
  if ((_DWORD)result)
  {
    Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to bind Double", 0x15uLL, 1);
    MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(v15, (Swift::String_optional)v5);
    unsigned __int32 code = v21.code;
    uint64_t desc_8 = v21.desc.value._countAndFlagsBits;
    object = v21.desc.value._object;
    unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
    *(_DWORD *)uint64_t v7 = code;
    *(void *)(v7 + 8) = desc_8;
    *(void *)(v7 + 16) = object;
    return swift_willThrow(code);
  }

  return result;
}

void protocol witness for SQLType.init(with:column:) in conformance Double( uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  *a3 = Double.init(with:column:)(a1, a2);
}

uint64_t protocol witness for SQLBindable.bind(to:at:) in conformance Double(uint64_t a1, uint64_t a2)
{
  return Double.bind(to:at:)(a1, a2, *v2);
}

uint64_t String.init(with:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v16 = a1;
  uint64_t v15 = a2;
  swift_retain();
  unint64_t v12 = *(sqlite3_stmt **)(a1 + 16);
  swift_release(a1);
  uint64_t v13 = a2;
  unint64_t v10 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v11 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v2 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v14, &v13, &type metadata for Int32, &type metadata for Int, v10, v11, v2);
  if (sqlite3_column_text(v12, v14))
  {
    uint64_t v6 = String.init(cString:)();
    uint64_t v5 = v3;
    swift_bridgeObjectRetain();
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    swift_release(a1);
    outlined destroy of String((uint64_t)&v17);
    return v6;
  }

  else
  {
    swift_release(a1);
    return 0LL;
  }

void *String.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a1;
  uint64_t v19 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v14 = String.utf8CString.getter(a3);
  uint64_t v16 = v14;
  swift_retain();
  swift_retain();
  uint64_t result = ContiguousArray.withUnsafeBufferPointer<A>(_:)(&v15, partial apply for closure #1 in String.bind(to:at:));
  if (v12)
  {
    __break(1u);
  }

  else
  {
    swift_release(a1);
    swift_release(v14);
    Swift::Int32 code = v15;
    if (v15)
    {
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to bind String", 0x15uLL, 1);
      MediaMLPlugin::SQLError v21 = SQLError.init(code:desc:)(code, (Swift::String_optional)v5);
      unsigned __int32 v10 = v21.code;
      uint64_t desc_8 = v21.desc.value._countAndFlagsBits;
      object = v21.desc.value._object;
      unint64_t v6 = lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError(&type metadata for SQLError, v6, 0LL, 0LL);
      *(_DWORD *)uint64_t v7 = v10;
      *(void *)(v7 + 8) = desc_8;
      *(void *)(v7 + 16) = object;
      swift_willThrow(v10);
    }

    return (void *)swift_release(v14);
  }

  return result;
}

uint64_t closure #1 in String.bind(to:at:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v25 = a3;
  uint64_t v24 = a4;
  uint64_t v23 = a5;
  uint64_t v17 = *(sqlite3_stmt **)(a3 + 16);
  uint64_t v21 = a4;
  unint64_t v11 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v12 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  unint64_t v13 = lazy protocol witness table accessor for type Int and conformance Int();
  SignedInteger<>.init<A>(_:)(&v22, &v21, &type metadata for Int32, &type metadata for Int, v11, v12, v13);
  int v14 = v22;
  Swift::Int32 v15 = (char *)UnsafeBufferPointer.baseAddress.getter(a1, a2, &type metadata for Int8);
  uint64_t v19 = ContiguousArray.count.getter(a5, &type metadata for Int8);
  SignedInteger<>.init<A>(_:)(&v20, &v19, &type metadata for Int32, &type metadata for Int, v11, v12, v13);
  int v16 = v20;
  unint64_t v6 = SQLITE_TRANSIENT.unsafeMutableAddressor();
  uint64_t result = sqlite3_bind_text(v17, v14, v15, v16, (void (__cdecl *)(void *))*v6);
  *a6 = result;
  return result;
}

uint64_t partial apply for closure #1 in String.bind(to:at:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return closure #1 in String.bind(to:at:)(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t *SQLITE_TRANSIENT.unsafeMutableAddressor()
{
  if (one-time initialization token for SQLITE_TRANSIENT != -1) {
    swift_once( &one-time initialization token for SQLITE_TRANSIENT,  one-time initialization function for SQLITE_TRANSIENT);
  }
  return &SQLITE_TRANSIENT;
}

uint64_t protocol witness for SQLNullableType.init(with:column:) in conformance String@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = String.init(with:column:)(a1, a2);
  *a3 = result;
  a3[1] = v4;
  return result;
}

void *protocol witness for SQLBindable.bind(to:at:) in conformance String(uint64_t a1, uint64_t a2)
{
  return String.bind(to:at:)(a1, a2, *v2, v2[1]);
}

void one-time initialization function for SQLITE_TRANSIENT()
{
  SQLITE_TRANSIENT = -1LL;
}

unint64_t base witness table accessor for Error in SQLError()
{
  return lazy protocol witness table accessor for type SQLError and conformance SQLError();
}

unint64_t base witness table accessor for Equatable in DBError()
{
  return lazy protocol witness table accessor for type DBError and conformance DBError();
}

unint64_t base witness table accessor for Error in DBError()
{
  return lazy protocol witness table accessor for type DBError and conformance DBError();
}

uint64_t initializeBufferWithCopyOfBuffer for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t destroy for SQLError(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t assignWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v2);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t assignWithTake for SQLError(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      int v5 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      int v4 = -1;
      if (!HIDWORD(*(void *)(a1 + 16))) {
        int v4 = *(void *)(a1 + 16);
      }
      int v2 = v4 - 1;
      if (v4 - 1 < 0) {
        int v2 = -1;
      }
      int v5 = v2;
    }
  }

  else
  {
    int v5 = -1;
  }

  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3) {
        *(_BYTE *)(result + swift_beginAccess(v0 + 24) = 1;
      }
      else {
        __break(1u);
      }
    }
  }

  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3) {
        *(_BYTE *)(result + swift_beginAccess(v0 + 24) = 0;
      }
      else {
        __break(1u);
      }
    }

    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SQLError()
{
  return &type metadata for SQLError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DBError(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFC) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 3) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }

    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }

    else
    {
LABEL_15:
      int v3 = *a1 - 4;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }

  else
  {
    int v5 = -1;
  }

  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for DBError(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFC)
  {
    unsigned int v5 = ((a3 + 3) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }

    int v7 = v6;
  }

  if (a2 > 0xFC)
  {
    unsigned int v4 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }

      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }

      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }

  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }

      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }

      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }

    if (a2) {
      *__n128 result = a2 + 3;
    }
  }

  return result;
}

uint64_t getEnumTag for DBError(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for DBError(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DBError()
{
  return &type metadata for DBError;
}

uint64_t type metadata accessor for SQLiteDB()
{
  return objc_opt_self(&OBJC_CLASS____TtC13MediaMLPlugin8SQLiteDB);
}

unint64_t initializeBufferWithCopyOfBuffer for SQLiteDB.Location(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v10 = *(void *)(a3 - 8);
  int v11 = *(_DWORD *)(v10 + 80);
  if ((v11 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    swift_retain();
    *a1 = v6;
    return *a1 + ((v11 + 16LL) & ~(unint64_t)v11);
  }

  else
  {
    uint64_t v4 = type metadata accessor for URL(0LL);
    uint64_t v5 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v5 + 48))(a2, 1LL))
    {
      memcpy(a1, a2, *(void *)(v10 + 64));
    }

    else
    {
      (*(void (**)(void *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0LL, 1LL, v4);
    }

    return (unint64_t)a1;
  }

uint64_t destroy for SQLiteDB.Location(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1LL);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for SQLiteDB.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v8 + 48))(a2, 1LL))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
  }

  return a1;
}

void *assignWithCopy for SQLiteDB.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a1, 1LL))
  {
    if (v9(a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }
  }

  else if (v9(a2, 1LL, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v7);
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v7);
  }

  return a1;
}

void *initializeWithTake for SQLiteDB.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v8 + 48))(a2, 1LL))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
  }

  return a1;
}

void *assignWithTake for SQLiteDB.Location(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a1, 1LL))
  {
    if (v9(a2, 1LL, v7))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }
  }

  else if (v9(a2, 1LL, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v7);
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v7);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteDB.Location(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059664);
}

uint64_t sub_100059664(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  unsigned int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v2 - 8) + 48LL))(a1, a2);
  if (v3 > 1) {
    return v3 - 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SQLiteDB.Location(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000596DC);
}

uint64_t sub_1000596DC(uint64_t a1, int a2, unsigned int a3)
{
  if (a2) {
    unsigned int v3 = a2 + 1;
  }
  else {
    unsigned int v3 = 0;
  }
  unsigned int v7 = v3;
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v4 - 8) + 56LL))(a1, v7, a3);
}

uint64_t getEnumTag for SQLiteDB.Location(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 48LL))(a1, 1LL);
}

uint64_t destructiveInjectEnumTag for SQLiteDB.Location(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, a2, 1LL);
}

uint64_t type metadata completion function for SQLiteDB.Location(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for URL(319LL);
  uint64_t v5 = v4;
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256LL, *(void *)(v4 - 8) + 64LL, 1LL);
    return 0LL;
  }

  return v5;
}

ValueMetadata *type metadata accessor for SQLiteDB.Row()
{
  return &type metadata for SQLiteDB.Row;
}

Swift::Double *kSecondsFromNanoseconds.unsafeMutableAddressor()
{
  return &kSecondsFromNanoseconds;
}

uint64_t one-time initialization function for kMediaML_rssi()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rssi", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_rssuint64_t i = v1;
  return result;
}

Swift::String *kMediaML_rssi.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_rssi != -1) {
    swift_once(&one-time initialization token for kMediaML_rssi, one-time initialization function for kMediaML_rssi);
  }
  return &kMediaML_rssi;
}

uint64_t one-time initialization function for kMediaML_cca()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cca", 3uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_cca = v1;
  return result;
}

Swift::String *kMediaML_cca.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_cca != -1) {
    swift_once(&one-time initialization token for kMediaML_cca, one-time initialization function for kMediaML_cca);
  }
  return &kMediaML_cca;
}

uint64_t one-time initialization function for kMediaML_snr()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("snr", 3uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_snr = v1;
  return result;
}

Swift::String *kMediaML_snr.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_snr != -1) {
    swift_once(&one-time initialization token for kMediaML_snr, one-time initialization function for kMediaML_snr);
  }
  return &kMediaML_snr;
}

uint64_t one-time initialization function for kMediaML_noise()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("noise", 5uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_noise = v1;
  return result;
}

Swift::String *kMediaML_noise.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_noise != -1) {
    swift_once(&one-time initialization token for kMediaML_noise, one-time initialization function for kMediaML_noise);
  }
  return &kMediaML_noise;
}

uint64_t one-time initialization function for kMediaML_throughputTrue()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("throughput_true", 0xFuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_throughputTrue = v1;
  return result;
}

Swift::String *kMediaML_throughputTrue.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_throughputTrue != -1) {
    swift_once( &one-time initialization token for kMediaML_throughputTrue,  one-time initialization function for kMediaML_throughputTrue);
  }
  return &kMediaML_throughputTrue;
}

uint64_t one-time initialization function for kMediaML_txRate()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("tx_rate", 7uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_txRate = v1;
  return result;
}

Swift::String *kMediaML_txRate.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_txRate != -1) {
    swift_once(&one-time initialization token for kMediaML_txRate, one-time initialization function for kMediaML_txRate);
  }
  return &kMediaML_txRate;
}

uint64_t one-time initialization function for kMediaML_rxRate()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rx_rate", 7uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_rxRate = v1;
  return result;
}

Swift::String *kMediaML_rxRate.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_rxRate != -1) {
    swift_once(&one-time initialization token for kMediaML_rxRate, one-time initialization function for kMediaML_rxRate);
  }
  return &kMediaML_rxRate;
}

uint64_t one-time initialization function for kMediaML_dayOfWeek()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("dow", 3uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_dayOfWeek = v1;
  return result;
}

Swift::String *kMediaML_dayOfWeek.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_dayOfWeek != -1) {
    swift_once( &one-time initialization token for kMediaML_dayOfWeek,  one-time initialization function for kMediaML_dayOfWeek);
  }
  return &kMediaML_dayOfWeek;
}

uint64_t one-time initialization function for kMediaML_hourOfDay()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hour", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_hourOfDay = v1;
  return result;
}

Swift::String *kMediaML_hourOfDay.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_hourOfDay != -1) {
    swift_once( &one-time initialization token for kMediaML_hourOfDay,  one-time initialization function for kMediaML_hourOfDay);
  }
  return &kMediaML_hourOfDay;
}

uint64_t one-time initialization function for kMediaML_ssid()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssid", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_ssid = v1;
  return result;
}

Swift::String *kMediaML_ssid.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_ssid != -1) {
    swift_once(&one-time initialization token for kMediaML_ssid, one-time initialization function for kMediaML_ssid);
  }
  return &kMediaML_ssid;
}

uint64_t one-time initialization function for kMediaML_interfaceType()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ifty", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_interfaceType = v1;
  return result;
}

Swift::String *kMediaML_interfaceType.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_interfaceType != -1) {
    ((void (*)(uint64_t *, uint64_t (*)()))swift_once)( &one-time initialization token for kMediaML_interfaceType,  one-time initialization function for kMediaML_interfaceType);
  }
  return &kMediaML_interfaceType;
}

uint64_t one-time initialization function for kMediaML_nData()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ndata", 5uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_nData = v1;
  return result;
}

Swift::String *kMediaML_nData.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_nData != -1) {
    swift_once(&one-time initialization token for kMediaML_nData, one-time initialization function for kMediaML_nData);
  }
  return &kMediaML_nData;
}

uint64_t one-time initialization function for kMediaML_appName()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("app_name", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_appName = v1;
  return result;
}

Swift::String *kMediaML_appName.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_appName != -1) {
    swift_once( &one-time initialization token for kMediaML_appName,  one-time initialization function for kMediaML_appName);
  }
  return &kMediaML_appName;
}

uint64_t one-time initialization function for kMediaML_sessionID()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("session_id", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_sessionID = v1;
  return result;
}

Swift::String *kMediaML_sessionID.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_sessionID != -1) {
    swift_once( &one-time initialization token for kMediaML_sessionID,  one-time initialization function for kMediaML_sessionID);
  }
  return &kMediaML_sessionID;
}

uint64_t one-time initialization function for kMediaML_carrier()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("carrier", 7uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_carrier = v1;
  return result;
}

Swift::String *kMediaML_carrier.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_carrier != -1) {
    swift_once( &one-time initialization token for kMediaML_carrier,  one-time initialization function for kMediaML_carrier);
  }
  return &kMediaML_carrier;
}

uint64_t one-time initialization function for kMediaML_rsrp()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsrp", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_rsrp = v1;
  return result;
}

Swift::String *kMediaML_rsrp.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_rsrp != -1) {
    swift_once(&one-time initialization token for kMediaML_rsrp, one-time initialization function for kMediaML_rsrp);
  }
  return &kMediaML_rsrp;
}

uint64_t one-time initialization function for kMediaML_rscp()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rscp", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_rscp = v1;
  return result;
}

Swift::String *kMediaML_rscp.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_rscp != -1) {
    swift_once(&one-time initialization token for kMediaML_rscp, one-time initialization function for kMediaML_rscp);
  }
  return &kMediaML_rscp;
}

uint64_t one-time initialization function for kMediaML_rsrq()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsrq", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_rsrq = v1;
  return result;
}

Swift::String *kMediaML_rsrq.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_rsrq != -1) {
    swift_once(&one-time initialization token for kMediaML_rsrq, one-time initialization function for kMediaML_rsrq);
  }
  return &kMediaML_rsrq;
}

uint64_t one-time initialization function for kMediaML_bars()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bars", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_bars = v1;
  return result;
}

Swift::String *kMediaML_bars.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_bars != -1) {
    swift_once(&one-time initialization token for kMediaML_bars, one-time initialization function for kMediaML_bars);
  }
  return &kMediaML_bars;
}

uint64_t one-time initialization function for kMediaML_count()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("count", 5uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_count = v1;
  return result;
}

Swift::String *kMediaML_count.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_count != -1) {
    swift_once(&one-time initialization token for kMediaML_count, one-time initialization function for kMediaML_count);
  }
  return &kMediaML_count;
}

uint64_t one-time initialization function for kMediaML_medianThroughputTrue()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("quantile(throughput_true)", 0x19uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_medianThroughputTrue = v1;
  return result;
}

Swift::String *kMediaML_medianThroughputTrue.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_medianThroughputTrue != -1) {
    swift_once( &one-time initialization token for kMediaML_medianThroughputTrue,  one-time initialization function for kMediaML_medianThroughputTrue);
  }
  return &kMediaML_medianThroughputTrue;
}

uint64_t one-time initialization function for kMediaML_binnedRssi()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binned_rssi", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_binnedRssuint64_t i = v1;
  return result;
}

Swift::String *kMediaML_binnedRssi.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_binnedRssi != -1) {
    swift_once( &one-time initialization token for kMediaML_binnedRssi,  one-time initialization function for kMediaML_binnedRssi);
  }
  return &kMediaML_binnedRssi;
}

uint64_t one-time initialization function for kMediaML_binnedRsrp()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binned_rsrp", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_binnedRsrp = v1;
  return result;
}

Swift::String *kMediaML_binnedRsrp.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_binnedRsrp != -1) {
    swift_once( &one-time initialization token for kMediaML_binnedRsrp,  one-time initialization function for kMediaML_binnedRsrp);
  }
  return &kMediaML_binnedRsrp;
}

uint64_t one-time initialization function for kMediaML_binnedRsrq()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binned_rsrq", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_binnedRsrq = v1;
  return result;
}

Swift::String *kMediaML_binnedRsrq.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_binnedRsrq != -1) {
    swift_once( &one-time initialization token for kMediaML_binnedRsrq,  one-time initialization function for kMediaML_binnedRsrq);
  }
  return &kMediaML_binnedRsrq;
}

uint64_t one-time initialization function for kMediaML_binnedRscp()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binned_rscp", 0xBuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_binnedRscp = v1;
  return result;
}

Swift::String *kMediaML_binnedRscp.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_binnedRscp != -1) {
    swift_once( &one-time initialization token for kMediaML_binnedRscp,  one-time initialization function for kMediaML_binnedRscp);
  }
  return &kMediaML_binnedRscp;
}

uint64_t one-time initialization function for kMediaML_binnedSnr()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("binned_snr", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_binnedSnr = v1;
  return result;
}

Swift::String *kMediaML_binnedSnr.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_binnedSnr != -1) {
    swift_once( &one-time initialization token for kMediaML_binnedSnr,  one-time initialization function for kMediaML_binnedSnr);
  }
  return &kMediaML_binnedSnr;
}

uint64_t one-time initialization function for kMediaML_throughputStdDev()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("predStdDev", 0xAuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_throughputStdDev = v1;
  return result;
}

Swift::String *kMediaML_throughputStdDev.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_throughputStdDev != -1) {
    swift_once( &one-time initialization token for kMediaML_throughputStdDev,  one-time initialization function for kMediaML_throughputStdDev);
  }
  return &kMediaML_throughputStdDev;
}

uint64_t one-time initialization function for kMediaML_throughputPrediction()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("predVal", 7uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_throughputPrediction = v1;
  return result;
}

Swift::String *kMediaML_throughputPrediction.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_throughputPrediction != -1) {
    swift_once( &one-time initialization token for kMediaML_throughputPrediction,  one-time initialization function for kMediaML_throughputPrediction);
  }
  return &kMediaML_throughputPrediction;
}

Swift::Int *cell_signal_binsize.unsafeMutableAddressor()
{
  return &cell_signal_binsize;
}

Swift::Int *cell_snr_binsize.unsafeMutableAddressor()
{
  return &cell_snr_binsize;
}

Swift::Int *rssiBucket_low_medium_boundary.unsafeMutableAddressor()
{
  return &rssiBucket_low_medium_boundary;
}

Swift::Int *rssiBucket_medium_high_boundary.unsafeMutableAddressor()
{
  return &rssiBucket_medium_high_boundary;
}

uint64_t one-time initialization function for rssiBucket_low()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("low", 3uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  rssiBucket_low = v1;
  return result;
}

Swift::String *rssiBucket_low.unsafeMutableAddressor()
{
  if (one-time initialization token for rssiBucket_low != -1) {
    swift_once(&one-time initialization token for rssiBucket_low, one-time initialization function for rssiBucket_low);
  }
  return &rssiBucket_low;
}

uint64_t one-time initialization function for rssiBucket_medium()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("medium", 6uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  rssiBucket_medium = v1;
  return result;
}

Swift::String *rssiBucket_medium.unsafeMutableAddressor()
{
  if (one-time initialization token for rssiBucket_medium != -1) {
    swift_once( &one-time initialization token for rssiBucket_medium,  one-time initialization function for rssiBucket_medium);
  }
  return &rssiBucket_medium;
}

uint64_t one-time initialization function for rssiBucket_high()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("high", 4uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  rssiBucket_high = v1;
  return result;
}

Swift::String *rssiBucket_high.unsafeMutableAddressor()
{
  if (one-time initialization token for rssiBucket_high != -1) {
    swift_once(&one-time initialization token for rssiBucket_high, one-time initialization function for rssiBucket_high);
  }
  return &rssiBucket_high;
}

uint64_t one-time initialization function for kMediaML_trainingRowCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("trainingRowCount", 0x10uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_trainingRowCount = v1;
  return result;
}

Swift::String *kMediaML_trainingRowCount.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_trainingRowCount != -1) {
    swift_once( &one-time initialization token for kMediaML_trainingRowCount,  one-time initialization function for kMediaML_trainingRowCount);
  }
  return &kMediaML_trainingRowCount;
}

uint64_t one-time initialization function for kMediaML_validationRowCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("validationRowCount", 0x12uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_validationRowCount = v1;
  return result;
}

Swift::String *kMediaML_validationRowCount.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_validationRowCount != -1) {
    swift_once( &one-time initialization token for kMediaML_validationRowCount,  one-time initialization function for kMediaML_validationRowCount);
  }
  return &kMediaML_validationRowCount;
}

uint64_t one-time initialization function for kMediaML_ssidCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ssidCount", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_ssidCount = v1;
  return result;
}

Swift::String *kMediaML_ssidCount.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_ssidCount != -1) {
    swift_once( &one-time initialization token for kMediaML_ssidCount,  one-time initialization function for kMediaML_ssidCount);
  }
  return &kMediaML_ssidCount;
}

uint64_t one-time initialization function for kMediaML_appNameCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("appNameCount", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_appNameCount = v1;
  return result;
}

Swift::String *kMediaML_appNameCount.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_appNameCount != -1) {
    swift_once( &one-time initialization token for kMediaML_appNameCount,  one-time initialization function for kMediaML_appNameCount);
  }
  return &kMediaML_appNameCount;
}

uint64_t one-time initialization function for kMediaML_sessionIDCount()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("sessionIDCount", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_sessionIDCount = v1;
  return result;
}

Swift::String *kMediaML_sessionIDCount.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_sessionIDCount != -1) {
    swift_once( &one-time initialization token for kMediaML_sessionIDCount,  one-time initialization function for kMediaML_sessionIDCount);
  }
  return &kMediaML_sessionIDCount;
}

uint64_t one-time initialization function for kMediaML_trainingMAPE()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("trainingMAPE", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_trainingMAPE = v1;
  return result;
}

Swift::String *kMediaML_trainingMAPE.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_trainingMAPE != -1) {
    swift_once( &one-time initialization token for kMediaML_trainingMAPE,  one-time initialization function for kMediaML_trainingMAPE);
  }
  return &kMediaML_trainingMAPE;
}

uint64_t one-time initialization function for kMediaML_validationMAPE()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("validationMAPE", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  kMediaML_validationMAPE = v1;
  return result;
}

Swift::String *kMediaML_validationMAPE.unsafeMutableAddressor()
{
  if (one-time initialization token for kMediaML_validationMAPE != -1) {
    swift_once( &one-time initialization token for kMediaML_validationMAPE,  one-time initialization function for kMediaML_validationMAPE);
  }
  return &kMediaML_validationMAPE;
}

uint64_t one-time initialization function for mediaMLBaseDirectory()
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  __swift_allocate_value_buffer(v2, mediaMLBaseDirectory);
  __swift_project_value_buffer(v2, (uint64_t)mediaMLBaseDirectory);
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "/private/var/mobile/Library/MediaML/",  0x24uLL,  1)._countAndFlagsBits;
  URL.init(fileURLWithPath:)(countAndFlagsBits);
  return swift_bridgeObjectRelease();
}

uint64_t mediaMLBaseDirectory.unsafeMutableAddressor()
{
  if (one-time initialization token for mediaMLBaseDirectory != -1) {
    swift_once( &one-time initialization token for mediaMLBaseDirectory,  one-time initialization function for mediaMLBaseDirectory);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)mediaMLBaseDirectory);
}

uint64_t one-time initialization function for mediaMLModelDirectory()
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  __swift_allocate_value_buffer(v2, mediaMLModelDirectory);
  __swift_project_value_buffer(v2, (uint64_t)mediaMLModelDirectory);
  uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "/private/var/mobile/Library/MediaML/model/",  0x2AuLL,  1)._countAndFlagsBits;
  URL.init(fileURLWithPath:)(countAndFlagsBits);
  return swift_bridgeObjectRelease();
}

uint64_t mediaMLModelDirectory.unsafeMutableAddressor()
{
  if (one-time initialization token for mediaMLModelDirectory != -1) {
    swift_once( &one-time initialization token for mediaMLModelDirectory,  one-time initialization function for mediaMLModelDirectory);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)mediaMLModelDirectory);
}

uint64_t one-time initialization function for mediaMLDataDirectory()
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  __swift_allocate_value_buffer(v2, mediaMLDataDirectory);
  __swift_project_value_buffer(v2, (uint64_t)mediaMLDataDirectory);
  Swift::String v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "/private/var/mobile/Library/MediaML/data/",  0x29uLL,  1);
  URL.init(fileURLWithPath:)(v0._countAndFlagsBits);
  return swift_bridgeObjectRelease(v0._object);
}

uint64_t mediaMLDataDirectory.unsafeMutableAddressor()
{
  if (one-time initialization token for mediaMLDataDirectory != -1) {
    swift_once( &one-time initialization token for mediaMLDataDirectory,  one-time initialization function for mediaMLDataDirectory);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  return __swift_project_value_buffer(v0, (uint64_t)mediaMLDataDirectory);
}

Swift::Int *MAX_ALLOWED_RAW_DATASIZE.unsafeMutableAddressor()
{
  return &MAX_ALLOWED_RAW_DATASIZE;
}

Swift::Int *MAX_ALLOWED_PROCESSED_DATASIZE.unsafeMutableAddressor()
{
  return &MAX_ALLOWED_PROCESSED_DATASIZE;
}

Swift::Int *MAX_ALLOWED_PROCESSED_DATASIZE_PRUNE.unsafeMutableAddressor()
{
  return &MAX_ALLOWED_PROCESSED_DATASIZE_PRUNE;
}

Swift::Int *MAX_ALLOWED_PROCESSED_DATASIZE_WRITE.unsafeMutableAddressor()
{
  return &MAX_ALLOWED_PROCESSED_DATASIZE_WRITE;
}

Swift::Int *DB_DELETION_BUCKET_SIZE.unsafeMutableAddressor()
{
  return &DB_DELETION_BUCKET_SIZE;
}

Swift::Int *kMediaML_InterfaceType_WiFi.unsafeMutableAddressor()
{
  return &kMediaML_InterfaceType_WiFi;
}

Swift::Int *kMediaML_InterfaceType_Cellular.unsafeMutableAddressor()
{
  return &kMediaML_InterfaceType_Cellular;
}

Swift::Int *maxThroughput.unsafeMutableAddressor()
{
  return &maxThroughput;
}

Swift::Int *minSignalStrength.unsafeMutableAddressor()
{
  return &minSignalStrength;
}

Swift::Int *minNoise.unsafeMutableAddressor()
{
  return &minNoise;
}

Swift::Double *maxTxRate.unsafeMutableAddressor()
{
  return &maxTxRate;
}

Swift::Double *maxRxRate.unsafeMutableAddressor()
{
  return &maxRxRate;
}

Swift::Int *minSSIDLength.unsafeMutableAddressor()
{
  return &minSSIDLength;
}

Swift::Int *maxSSIDLength.unsafeMutableAddressor()
{
  return &maxSSIDLength;
}

Swift::Int *maxBars.unsafeMutableAddressor()
{
  return &maxBars;
}