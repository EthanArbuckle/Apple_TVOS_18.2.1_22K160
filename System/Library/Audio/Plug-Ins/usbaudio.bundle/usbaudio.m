int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  uint64_t v4;
  qword_100117150 = 0xD000000000000013LL;
  *(void *)algn_100117158 = 0x80000001000CC390LL;
  sub_100001D90();
  v3 = (void *)static OS_os_log.default.getter();
  v4 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("usbaudiod started", 17LL, 2LL, &_mh_execute_header, v3, v4, _swiftEmptyArrayStorage);

  type metadata accessor for DriverPlugin();
  static DriverPlugin.registerActiveDriverInLoop()();
  dispatch_main();
}

unint64_t sub_100001D90()
{
  unint64_t result = qword_1001128D0;
  if (!qword_1001128D0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001128D0);
  }

  return result;
}

uint64_t AUAGetBootArg(void *a1, uint64_t a2)
{
  return os_parse_boot_arg_int([a1 cStringUsingEncoding:4], a2);
}

void *AudioDeviceRealtimeGetZeroTimestampBlock(void *a1)
{
  id v1 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100001F50;
  v5[3] = &unk_1000FD778;
  v5[4] = [v1 timestamps];
  v5[5] = [v1 seed];
  v2 = objc_retainBlock(v5);
  v3 = objc_retainBlock(v2);

  return v3;
}

void sub_100001F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100001F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100001F50(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  signed int v5 = atomic_load((unsigned int *)(v4 + 64));
  v6 = (unint64_t *)(v4 + 8LL * v5);
  unint64_t v7 = atomic_load(v6 + 4);
  *a3 = v7;
  unint64_t v8 = atomic_load(v6);
  *a2 = v8;
  *a4 = *(void *)(a1 + 40);
  return 0LL;
}

void *AudioDeviceCreateGenericWillDoBlock(char a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100001FF0;
  v4[3] = &unk_1000FD798;
  char v5 = a1;
  id v1 = objc_retainBlock(v4);
  v2 = objc_retainBlock(v1);

  return v2;
}

uint64_t sub_100001FF0(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result = 1970171760LL;
  if (a3)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      *a3 = *(_BYTE *)(a1 + 32);
      *a4 = 1;
    }
  }

  return result;
}

dispatch_queue_t CreateFixedPriorityDispatchQueue(uint64_t a1, uint64_t a2)
{
  id v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%s.workloop", a1));
  dispatch_workloop_t inactive = dispatch_workloop_create_inactive((const char *)[v4 UTF8String]);

  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority(inactive, a2, 1LL);
    dispatch_activate(inactive);
    initially_dispatch_workloop_t inactive = dispatch_queue_attr_make_initially_inactive(0LL);
    unint64_t v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
    dispatch_queue_attr_t v8 = dispatch_queue_attr_make_with_qos_class(v7, QOS_CLASS_USER_INTERACTIVE, 0);
    v9 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v8);

    id v10 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%s.queue", a1));
    dispatch_queue_t v11 = dispatch_queue_create((const char *)[v10 UTF8String], v9);

    if (v11)
    {
      dispatch_set_target_queue(v11, inactive);
      dispatch_activate(v11);
      v12 = v11;
    }
  }

  else
  {
    dispatch_queue_t v11 = 0LL;
  }

  return v11;
}

void sub_100002134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000214C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002174()
{
  v0 = objc_autoreleasePoolPush();
  dword_1001171A0 = 0;
  qword_1001171A8 = 0LL;
  objc_autoreleasePoolPop(v0);
}

char *AUAPeriodicEventRTImpl::AUAPeriodicEventRTImpl(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = a2;
  id v11 = a5;
  *(void *)a1 = off_1000FD7C8;
  *((_DWORD *)a1 + 2) = 0;
  *((void *)a1 + 2) = a3;
  *((void *)a1 + 3) = a4;
  *((void *)a1 + 4) = 0LL;
  *((void *)a1 + 20) = 0LL;
  *((void *)a1 + 21) = &stru_100108E48;
  *((void *)a1 + 22) = 0LL;
  id v12 = [v11 copy];
  v13 = (void *)*((void *)a1 + 4);
  *((void *)a1 + 4) = v12;

  objc_storeStrong((id *)a1 + 21, a2);
  if (pthread_mutex_init((pthread_mutex_t *)(a1 + 40), 0LL)) {
    __assert_rtn("AUAPeriodicEventRTImpl", "AUAPeriodicEventRT.mm", 102, "!error");
  }
  pthread_cond_init((pthread_cond_t *)(a1 + 112), 0LL);
  if (pthread_attr_init(&v19))
  {
    v17 = "!error";
    int v18 = 108;
    goto LABEL_10;
  }

  *((_DWORD *)a1 + 2) = 1;
  uint64_t v14 = os_workgroup_interval_create("AUAPeriodicEventRT", 32LL, 0LL);
  v15 = (void *)*((void *)a1 + 22);
  *((void *)a1 + 22) = v14;

  if (!*((void *)a1 + 22))
  {
    v17 = "_workgroup";
    int v18 = 115;
    goto LABEL_10;
  }

  if (pthread_create((pthread_t *)a1 + 13, &v19, (void *(__cdecl *)(void *))AUAPeriodicEventRTImpl::eventThread, a1))
  {
    v17 = "!error";
    int v18 = 119;
LABEL_10:
    __assert_rtn("AUAPeriodicEventRTImpl", "AUAPeriodicEventRT.mm", v18, v17);
  }

  pthread_attr_destroy(&v19);

  return a1;
}

void sub_10000250C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUAPeriodicEventRTImpl::eventThread(AUAPeriodicEventRTImpl *this, void *a2)
{
  LODWORD(policy_info) = this->var3;
  HIDWORD(policy_info) = 3000000 * (unint64_t)info.denom / info.numer;
  unsigned int v22 = 4000000 * (unint64_t)info.denom / info.numer;
  int v23 = 0;
  thread_act_t v3 = mach_thread_self();
  if (thread_policy_set(v3, 2u, (thread_policy_t)&policy_info, 4u)) {
    sub_100002A9C();
  }
  if (os_workgroup_join((os_workgroup_t)this->var10, &this->var11)) {
    sub_100002A74();
  }
  pthread_setname_np((const char *)[this->var9 UTF8String]);
  while (1)
  {
    uint64_t result = pthread_mutex_lock(&this->var5);
    int var1 = this->var1;
    if (var1 != 1) {
      break;
    }
    this->unint64_t var8 = 0LL;
    var6 = this->var6;
    if (var6 == pthread_self()) {
      pthread_cond_wait(&this->var7, &this->var5);
    }
LABEL_6:
    pthread_mutex_unlock(&this->var5);
  }

  if (var1 == 2)
  {
    uint64_t v7 = mach_absolute_time();
    uint64_t v8 = v7;
    unint64_t var8 = this->var8;
    if (!var8)
    {
      uint64_t v19 = this->var2 + v7;
      goto LABEL_29;
    }

    if (this->var4)
    {
      uint64_t v10 = v7 + v22;
      uint64_t v11 = os_workgroup_interval_start((os_workgroup_interval_t)this->var10, v7 - 1, v10, 0LL);
      if ((_DWORD)v11) {
        NSLog(@"Failed to start work interval: %d, start %llu deadline %llu\n", v11, v8, v10, policy_info);
      }
      this->unint64_t var8 = (*((uint64_t (**)(void))this->var4 + 2))();
      uint64_t v12 = this->var8;
      if (v12 < mach_absolute_time())
      {
        do
        {
          unint64_t var8 = this->var2;
          unint64_t var2 = this->var8;
LABEL_28:
          uint64_t v19 = var2 + var8;
LABEL_29:
          this->unint64_t var8 = v19;
        }

        while (v19 < mach_absolute_time());
      }

      unint64_t v13 = this->var8;
      uint64_t v14 = mach_absolute_time();
      unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_1001172E8);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1001172E8))
      {
        mach_timebase_info((mach_timebase_info_t)&v25);
        qword_1001172E0 = v25.tv_sec;
        __cxa_guard_release(&qword_1001172E8);
      }

      unint64_t v16 = v13 - v14;
      if ((_DWORD)qword_1001172E0 != HIDWORD(qword_1001172E0)) {
        unint64_t v16 = v16 * qword_1001172E0 / HIDWORD(qword_1001172E0);
      }
      v17 = this->var6;
      if (v17 == pthread_self())
      {
        if (v16 >= 0x3B9ACA00)
        {
          __darwin_time_t v18 = v16 / 0x3B9ACA00;
          v16 %= 0x3B9ACA00uLL;
        }

        else
        {
          __darwin_time_t v18 = 0LL;
        }

        v25.tv_sec = v18;
        v25.tv_nsec = v16;
        pthread_cond_timedwait_relative_np(&this->var7, &this->var5, &v25);
      }

      goto LABEL_6;
    }

    unint64_t var2 = this->var2;
    goto LABEL_28;
  }

  if (var1)
  {
    __break(1u);
  }

  else
  {
    pthread_mutex_unlock(&this->var5);
    os_workgroup_leave((os_workgroup_t)this->var10, &this->var11);
    return 0LL;
  }

  return result;
}

void sub_1000027DC(_Unwind_Exception *a1)
{
}

void AUAPeriodicEventRTImpl::~AUAPeriodicEventRTImpl(AUAPeriodicEventRTImpl *this)
{
  this->var0 = (void **)off_1000FD7C8;
  p_var5 = &this->var5;
  pthread_mutex_lock(&this->var5);
  this->int var1 = 0;
  pthread_cond_signal(&this->var7);
  pthread_mutex_unlock(p_var5);
  pthread_join(this->var6, 0LL);
  pthread_cond_destroy(&this->var7);
  pthread_mutex_destroy(p_var5);
}

{
  void *v1;
  AUAPeriodicEventRTImpl::~AUAPeriodicEventRTImpl(this);
  operator delete(v1);
}

void sub_100002884(void *a1)
{
}

void sub_100002940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10000295C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}
}

void sub_100002A1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___AUAPeriodicEventRT;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100002A4C()
{
  __assert_rtn("eventThread", "AUAPeriodicEventRT.mm", 201, "rv == 0");
}

void sub_100002A74()
{
  __assert_rtn("eventThread", "AUAPeriodicEventRT.mm", 156, "rv == 0");
}

void sub_100002A9C()
{
}

void sub_100002BCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100002C48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___USBFrameTimeCorrelater;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100002E78(_Unwind_Exception *a1)
{
}

void sub_100002E90(_Unwind_Exception *a1)
{
}

void sub_100002EA8(_Unwind_Exception *a1)
{
}

void sub_100002EC0(_Unwind_Exception *a1)
{
}

void sub_100002ED8(_Unwind_Exception *a1)
{
}

void sub_10000315C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location, char a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

__n128 sub_1000031B4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1000031CC(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 72));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = a1 + 40;
    uint64_t v6 = v2 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      if (v6 > *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
      {
        uint64_t v7 = 644LL;
LABEL_21:
        ++*(_DWORD *)&v4[v7];
        *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = qword_1001172F8
                                                                    + *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL)
                                                                                + 24LL)
                                                                    - qword_100117308;
        goto LABEL_22;
      }

      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v8 = 2LL;
    }

    v9 = (char *)[WeakRetained updateTimesWithRetries:v8];
    if (!v9)
    {
      uint64_t v7 = 640LL;
      goto LABEL_21;
    }

    uint64_t v10 = mach_absolute_time();
    uint64_t v11 = *(uint64x2_t **)(*(void *)(a1 + 64) + 8LL);
    uint64_t v12 = 10 * qword_100117308;
    if (10 * qword_100117308 >= qword_100117308 + v6) {
      uint64_t v12 = qword_100117308 + v6;
    }
    uint64_t v13 = v11[5].i64[0];
    v11[3].i64[v13] = v12;
    else {
      uint64_t v14 = 0LL;
    }
    v11[5].i64[0] = v14;
    int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u64(v11[3], v11[4]), (int8x16_t)v11[3], (int8x16_t)v11[4]);
    unint64_t v16 = vextq_s8(v15, v15, 8uLL).u64[0];
    *(int8x8_t *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = vbsl_s8( (int8x8_t)vcgtd_u64(v15.u64[0], v16),  *(int8x8_t *)v15.i8,  (int8x8_t)v16);
    *((void *)v4 + 76) = *((void *)v4 + 75);
    *((void *)v4 + 75) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    v15.i64[0] = v6;
    v15.i64[1] = v10 - v2;
    *(int8x16_t *)(v4 + 616) = vbslq_s8( (int8x16_t)vcgtq_u64((uint64x2_t)v15, *(uint64x2_t *)(v4 + 616)),  v15,  *(int8x16_t *)(v4 + 616));
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL)
                                                                           + 24LL) > 4uLL;
    int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    uint64_t v19 = qword_1001172F8;
    uint64_t v18 = qword_100117300;
    sub_100003A04((uint64_t)(v4 + 256), &v25);
    if (v17) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v19;
    }
    uint64_t v22 = qword_100117310;
    if (qword_100117310 >= v21) {
      uint64_t v22 = v21;
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = &v9[v22];
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = qword_1001172F8 + mach_absolute_time();
    uint64_t v5 = a1 + 40;
  }

LABEL_22:
  uint64_t v23 = *(void *)(*(void *)(*(void *)v5 + 8LL) + 24LL);
  return v23;
}

      if (v8 >= 0) {
        v43 = v11;
      }
      else {
        v43 = v8;
      }
      swift_bridgeObjectRetain(v8);
      v31 = _CocoaArrayWrapper.endIndex.getter(v43);
      v120 = v4;
      v121 = v5;
      if (v31) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
}

        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }

    __break(1u);
    goto LABEL_22;
  }

  if (a2 < 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v5 = 6 * a2;
  if ((unsigned __int128)(a2 * (__int128)6LL) >> 64 != (6 * a2) >> 63)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v4 = v5 + 2;
  if (!__OFADD__(v5, 2LL)) {
    goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

        swift_bridgeObjectRelease(v11);
        return (id)a1;
      }
    }

    else
    {
      a1 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (a1 != 1) {
        goto LABEL_5;
      }
    }

    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        int v17 = v11;
      }
      else {
        int v17 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      a1 = _CocoaArrayWrapper.endIndex.getter(v17);
      __n128 result = (id)swift_bridgeObjectRelease(v11);
      if (!a1) {
        goto LABEL_22;
      }
    }

    else
    {
      a1 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (!a1) {
        goto LABEL_22;
      }
    }

    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
      goto LABEL_21;
    }

    if (*(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v18 = *(id *)(v11 + 32);
LABEL_21:
      a1 = (uint64_t)v18;
      goto LABEL_22;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100003450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000355C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003768(uint64_t a1, double *a2)
{
  id v4 = (unsigned __int8 *)(a1 + 192);
  sub_100003A04(a1 + 192, &v34);
  if (v34.n128_u64[1] == *((void *)a2 + 1)) {
    return;
  }
  if (v34.n128_u64[1]) {
    BOOL v5 = v34.n128_u64[0] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    double v6 = *a2;
    sub_100003A04((uint64_t)v4, &v35);
    int64_t v7 = v35.n128_u64[1] + (uint64_t)(v36 * (double)(uint64_t)(*(void *)&v6 - v35.n128_u64[0]));
    double v9 = *a2;
    int64_t v8 = *((void *)a2 + 1);
    BOOL v10 = v8 < v7;
    uint64_t v11 = v8 - v7;
    if (v10) {
      ++v11;
    }
    int64_t v12 = v7 + (v11 >> 1);
    *((void *)a2 + 1) = v12;
    double v13 = (double)(v12 - v34.n128_u64[1]) / (double)(*(void *)&v9 - v34.n128_u64[0]);
    *(double *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(double *)(a1 + 128) + v13;
    uint64_t v14 = *(void *)(a1 + 144);
    double v15 = *(double *)(a1 + 8 * v14);
    *(double *)(a1 + 8 * v14) = v13;
    unint64_t v16 = v14 + 1;
    unint64_t v17 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v17 + 1;
    *(void *)(a1 + 144) = v16;
    if (v17 > 0xF)
    {
      *(double *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(double *)(a1 + 128) - v15;
      double v18 = 16.0;
      if (v16 < 0x10)
      {
LABEL_13:
        a2[2] = *(double *)(a1 + 128) / v18;
        goto LABEL_14;
      }
    }

    else
    {
      double v18 = (double)v16;
      if (v16 < 0x10) {
        goto LABEL_13;
      }
    }

    *(void *)(a1 + 144) = 0LL;
    goto LABEL_13;
  }

LABEL_14:
  uint64_t v19 = (unsigned int *)(a1 + 196);
  uint64_t v20 = a1 + 256;
  do
    unsigned int v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  uint64_t v22 = v20 + ((unint64_t)(v21 & 3) << 6);
  int v23 = 2 * v21;
  atomic_store(2 * v21, (unsigned int *)v22);
  __int128 v24 = *(_OWORD *)a2;
  *(double *)(v22 + 24) = a2[2];
  *(_OWORD *)(v22 + _Block_object_dispose((const void *)(v30 - 136), 8) = v24;
  __dmb(0xBu);
  unsigned int v25 = (2 * v21) | 1;
  do
  {
    unsigned int v26 = __ldaxr((unsigned int *)v22);
    if (v26 != v23)
    {
      int v27 = 0;
      while (1)
      {
        __clrex();
        if (++v27 == 100)
        {
          sched_yield();
          int v27 = 0;
        }

        do
          unsigned int v28 = __ldaxr(v19);
        while (__stlxr(v28 + 1, v19));
        uint64_t v29 = v20 + ((unint64_t)(v28 & 3) << 6);
        int v30 = 2 * v28;
        atomic_store(2 * v28, (unsigned int *)v29);
        __int128 v31 = *(_OWORD *)a2;
        *(double *)(v29 + 24) = a2[2];
        *(_OWORD *)(v29 + _Block_object_dispose((const void *)(v30 - 136), 8) = v31;
        __dmb(0xBu);
        unsigned int v32 = (2 * v28) | 1;
        while (1)
        {
          unsigned int v33 = __ldaxr((unsigned int *)v29);
          if (v33 != v30) {
            break;
          }
        }
      }
    }
  }

  while (__stlxr(v25, (unsigned int *)v22));
LABEL_27:
  atomic_store(1u, v4);
}

      __break(1u);
LABEL_15:
      if (v4 < 0) {
        int64_t v12 = v4;
      }
      else {
        int64_t v12 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v4, 2LL);
      BOOL v5 = _CocoaArrayWrapper.endIndex.getter(v12);
      active = 0;
      if (!v5) {
        goto LABEL_19;
      }
    }

  swift_bridgeObjectRelease_n(v5, 2LL);
  uint64_t v11 = [v1 outputStreams];
  if (!v11)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_65:
    __break(1u);
    return;
  }

  int64_t v12 = v11;
  double v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v4);

  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0) {
      double v18 = v13;
    }
    else {
      double v18 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v13);
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (v14)
    {
LABEL_17:
      if (v14 >= 1)
      {
        for (j = 0LL; j != v14; ++j)
        {
          if ((v13 & 0xC000000000000001LL) != 0) {
            unint64_t v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v13);
          }
          else {
            unint64_t v16 = *(id *)(v13 + 8 * j + 32);
          }
          unint64_t v17 = v16;
          [v1 removeOutputStream:v16];
        }

        goto LABEL_27;
      }

      goto LABEL_60;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (v14) {
      goto LABEL_17;
    }
  }

  if (v21 < 1)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  v41 = v3;
  uint64_t v22 = 0LL;
  int v23 = 0LL;
  __int128 v24 = 0LL;
  do
  {
    if ((v6 & 0xC000000000000001LL) != 0) {
      unsigned int v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v6);
    }
    else {
      unsigned int v25 = (char *)*(id *)(v6 + 8 * v24 + 32);
    }
    unsigned int v26 = v25;
    ++v24;
    int v27 = [v25 direction];
    unsigned int v28 = *(void *)&v26[OBJC_IVAR___AUAStream_latencyInMs];

    if (v28 <= v22) {
      uint64_t v29 = v22;
    }
    else {
      uint64_t v29 = v28;
    }
    if (v28 <= v23) {
      int v30 = v23;
    }
    else {
      int v30 = v28;
    }
    if (v27 == 1768845428) {
      int v23 = v30;
    }
    else {
      uint64_t v22 = v29;
    }
  }

  while (v21 != v24);
  swift_bridgeObjectRelease(v6);
  __int128 v3 = v41;
LABEL_40:
  [v3 samplingRate];
  unsigned int v33 = v32 * 0.25;
  if ((~*(void *)&v33 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_63;
  }

  if (v33 <= -1.0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  if (v33 >= 4294967300.0)
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  [v3 setTimestampPeriod:v33];
  AUAAudioDevice.updateSafetyOffsets()();
  if (v23 < 1)
  {
    double v36 = (unint64_t)[v3 inputSafetyOffset];
    goto LABEL_52;
  }

  [v3 samplingRate];
  if ((~*(void *)&v34 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_65;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  if (v34 >= 9.22337204e18)
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }

  __n128 v35 = (uint64_t)v34 / 1000;
  double v36 = v23 * v35;
  if ((unsigned __int128)(v23 * (__int128)v35) >> 64 != (v23 * v35) >> 63)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  if ((v36 & 0x8000000000000000LL) != 0)
  {
LABEL_76:
    __n128 result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    goto LABEL_77;
  }

  if (HIDWORD(v36)) {
    goto LABEL_59;
  }
LABEL_52:
  [v3 setInputLatency:v36];
  if (v22 < 1)
  {
    v39 = (unint64_t)[v3 outputSafetyOffset];
    return [v3 setOutputLatency:v39];
  }

  [v3 samplingRate];
  if ((~*(void *)&v37 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_68;
  }
  if (v37 <= -9.22337204e18)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  if (v37 >= 9.22337204e18)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }

  v38 = (uint64_t)v37 / 1000;
  v39 = v22 * v38;
  if ((unsigned __int128)(v22 * (__int128)v38) >> 64 != (v22 * v38) >> 63)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  if ((v39 & 0x8000000000000000LL) != 0) {
    goto LABEL_76;
  }
  if (!HIDWORD(v39)) {
    return [v3 setOutputLatency:v39];
  }
LABEL_59:
  __n128 result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_77:
  __break(1u);
  return result;
}

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_14;
  }

  unsigned int v25 = sub_10000AE14();
  unsigned int v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
  *(_BYTE *)int v27 = 51;
  *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v27 + 16) = 0xE000000000000000LL;
  *(void *)(v27 + 24) = 0xD00000000000001FLL;
  *(void *)(v27 + 32) = 0x80000001000CEF90LL;
  *(void *)(v27 + 40) = 0xD00000000000001ELL;
  *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
  *(void *)(v27 + 56) = 801LL;
  swift_willThrow(v26);
}

  swift_release(v5);
  return v7;
}

  double v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  double v15 = __OFADD__(v14, 1LL);
  unint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

  double v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v13 + 48) + a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  double v15 = __OFADD__(v14, 1LL);
  unint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

  swift_release(v5);
  return v7;
}

__n128 sub_100003A04@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a1);
  if ((v3 & 1) != 0)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)a1);
    if ((v6 & 1) == 0) {
LABEL_14:
    }
      sub_100003AF8();
    int v7 = 0;
    uint64_t v8 = a1 + 64;
    while (1)
    {
      char v10 = atomic_load((unsigned int *)(a1 + 4));
      uint64_t v11 = (v10 - 1) & 3;
      int64_t v12 = (unsigned int *)(v8 + (v11 << 6));
      unsigned int v13 = atomic_load(v12);
      if ((v13 & 1) != 0) {
        goto LABEL_11;
      }
      uint64_t v11 = (v10 + 2) & 3;
      int64_t v12 = (unsigned int *)(v8 + (v11 << 6));
      unsigned int v13 = atomic_load(v12);
      if ((v13 & 1) != 0
        || (uint64_t v11 = (v10 + 1) & 3, v12 = (unsigned int *)(v8 + (v11 << 6)), v13 = atomic_load(v12), (v13 & 1) != 0)
        || (uint64_t v11 = v10 & 3, v12 = (unsigned int *)(v8 + (v11 << 6)), v13 = atomic_load(v12), (v13 & 1) != 0))
      {
LABEL_11:
        uint64_t v14 = v8 + (v11 << 6);
        __n128 result = *(__n128 *)(v14 + 8);
        *a2 = result;
        a2[1].n128_u64[0] = *(void *)(v14 + 24);
        __dmb(9u);
        if (v13 == *v12) {
          return result;
        }
        if (++v7 == 100)
        {
          sched_yield();
          int v7 = 0;
        }
      }

      unsigned __int8 v9 = atomic_load((unsigned __int8 *)a1);
      if ((v9 & 1) == 0) {
        goto LABEL_14;
      }
    }
  }

  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  result.n128_u64[0] = qword_1001172F0;
  a2[1].n128_u64[0] = qword_1001172F0;
  return result;
}

void sub_100003AF8()
{
  uint64_t v0 = _os_assert_log(0LL);
  _os_crash(v0);
  __break(1u);
}

void sub_100003B10()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_100117320);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_100117320))
  {
    mach_timebase_info(&info);
    qword_100117318 = (uint64_t)info;
    __cxa_guard_release(&qword_100117320);
  }

  if ((_DWORD)qword_100117318 == HIDWORD(qword_100117318)) {
    double v2 = 1000000.0;
  }
  else {
    double v2 = (double)(1000000 * (unint64_t)HIDWORD(qword_100117318) / qword_100117318);
  }
  qword_1001172F0 = *(void *)&v2;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_100117320);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100117320))
  {
    mach_timebase_info(&info);
    qword_100117318 = (uint64_t)info;
    __cxa_guard_release(&qword_100117320);
  }

  unint64_t v4 = 200000000LL;
  if ((_DWORD)qword_100117318 != HIDWORD(qword_100117318)) {
    unint64_t v4 = 200000000 * (unint64_t)HIDWORD(qword_100117318) / qword_100117318;
  }
  qword_1001172F8 = v4;
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_100117320);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_100117320))
  {
    mach_timebase_info(&info);
    qword_100117318 = (uint64_t)info;
    __cxa_guard_release(&qword_100117320);
  }

  unint64_t v6 = 2000000000LL;
  if ((_DWORD)qword_100117318 != HIDWORD(qword_100117318)) {
    unint64_t v6 = 2000000000 * (unint64_t)HIDWORD(qword_100117318) / qword_100117318;
  }
  qword_100117300 = v6;
  qword_100117310 = qword_1001172F8 + v6;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_100117320);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_100117320))
  {
    mach_timebase_info(&info);
    qword_100117318 = (uint64_t)info;
    __cxa_guard_release(&qword_100117320);
  }

  if ((_DWORD)qword_100117318 == HIDWORD(qword_100117318)) {
    unint64_t v8 = 50000LL;
  }
  else {
    unint64_t v8 = 50000 * (unint64_t)HIDWORD(qword_100117318) / qword_100117318;
  }
  qword_100117308 = v8;
  objc_autoreleasePoolPop(v0);
}

void sub_100003CE8(_Unwind_Exception *a1)
{
}

void sub_100003D00(_Unwind_Exception *a1)
{
}

void sub_100003D18(_Unwind_Exception *a1)
{
}

void sub_100003D30(_Unwind_Exception *a1)
{
}

uint64_t AUARecordBlockCompletion( uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (v5 >= a4)
  {
    uint64_t v6 = 0LL;
    if (a4)
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = a3 % a2;
      unsigned __int8 v9 = *(_DWORD **)(a1 + 16);
      LODWORD(v10) = v5 / a4;
      else {
        uint64_t v10 = v10;
      }
      unint64_t v11 = a3 % a2;
      do
      {
        int v12 = 0;
        unsigned int v13 = &v9[7 * a4];
        unsigned int v14 = a4;
        while (!*v9 || *v9 == -536870169)
        {
          unsigned int v16 = v9[3] / a5;
          if (!*(void *)(a1 + 56))
          {
            v11 += v16;
            if (v11 >= a2)
            {
              *(void *)(a1 + 56) = *(void *)(a1 + 32) + v7;
              *(_DWORD *)(a1 + 64) = a2 - v8;
            }
          }

          v12 += v16;
          v9 += 7;
          if (!--v14)
          {
            unsigned __int8 v9 = v13;
            break;
          }
        }

        uint64_t v6 = (v12 + v6);
        LODWORD(v_Block_object_dispose((const void *)(v30 - 136), 8) = v8 + v12;
        ++v7;
      }

      while (v7 != v10);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *(void *)(a1 + 40) = a3;
  return v6;
}

void *AUARealtimeReadInputBlock(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  v12[0] = 0LL;
  v12[1] = v12;
  v12[2] = 0x5810000000LL;
  v12[3] = &unk_1000DD1FD;
  v12[4] = a1;
  int v13 = a2;
  int v14 = a3;
  int v15 = a4;
  int v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  int v19 = 0;
  uint64_t v20 = 0LL;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100003ED8;
  v9[3] = &unk_1000FD818;
  v9[4] = v12;
  v9[5] = a7;
  int v10 = a2;
  int v11 = a4;
  uint64_t v7 = objc_retainBlock(v9);
  _Block_object_dispose(v12, 8);
  return v7;
}

uint64_t sub_100003ED8(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = 2003329396LL;
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  unsigned int v5 = a4;
  if (!a4) {
    return v4;
  }
  double v6 = *(double *)(a3 + 80);
  unint64_t v7 = (unint64_t)v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *(unsigned int *)(v8 + 44);
  if (*(void *)(v8 + 80) != *(void *)(v9 + 88LL * *(unsigned int *)(v8 + 72) + 40))
  {
    if ((_DWORD)v10)
    {
      uint64_t v11 = 0LL;
      unsigned int v12 = 0;
      unint64_t v13 = 0LL;
      int v14 = (unint64_t *)(v9 + 40);
      do
      {
        unint64_t v16 = *v14;
        v14 += 11;
        unint64_t v15 = v16;
        if (v16 != -1LL && v16 > v13)
        {
          unint64_t v13 = v15;
          unsigned int v12 = v11;
        }

        ++v11;
      }

      while (v10 != v11);
    }

    else
    {
      unint64_t v13 = 0LL;
      unsigned int v12 = 0;
    }

    *(_BYTE *)(v9 + 88LL * v12 + 80) = 1;
    *(void *)(v8 + 80) = v13;
    *(_DWORD *)(v8 + 72) = v12;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v9 = *(void *)(v8 + 56);
    LODWORD(v10) = *(_DWORD *)(v8 + 44);
  }

  unsigned int v17 = *(_DWORD *)(v8 + 40);
  v80 = *(char **)(v8 + 64);
  unint64_t v18 = *(unsigned int *)(v8 + 48);
  uint64_t v19 = *(unsigned int *)(v8 + 72);
  uint64_t v20 = v9 + 88LL * v19;
  unint64_t v21 = *(unsigned int *)(v20 + 72);
  v79 = (_DWORD *)(v20 + 72);
  unint64_t v22 = *(unsigned int *)(v20 + 24);
  v78 = (unsigned int *)(v20 + 24);
  if (v21 >= v22) {
    goto LABEL_50;
  }
  unint64_t v71 = (unint64_t)v6;
  uint64_t v72 = a1;
  int v73 = a2;
  int v70 = a2;
  uint64_t v23 = v9 + 88LL * v19;
  uint64_t v24 = *(unsigned int *)(v23 + 68);
  uint64_t v25 = *(void *)(v23 + 40);
  uint64_t v26 = -1LL;
  uint64_t v76 = v9;
  unsigned int v66 = v10;
  uint64_t v67 = v8;
  while (2)
  {
    unsigned int v27 = 0;
    uint64_t v75 = v19;
    uint64_t v28 = v9 + 88 * v19;
    uint64_t v29 = (_DWORD *)(v28 + 68);
    uint64_t v77 = *(void *)(v28 + 8);
    unint64_t v30 = v24 + v25;
    __int128 v31 = (uint64_t *)(v28 + 16);
    v68 = (_BYTE *)(v28 + 81);
    v69 = (void *)(v28 + 40);
    while (1)
    {
      uint64_t v32 = *v31;
      unsigned int v33 = (int *)(*v31 + 28 * v21);
      int v34 = *v33;
      if (*v33) {
        BOOL v35 = v34 == -536870169;
      }
      else {
        BOOL v35 = 1;
      }
      if (!v35 || (unsigned int v36 = v33[3], (signed int)v36 > *(_DWORD *)(v32 + 28 * v21 + 4)))
      {
        int v37 = 2 * (v34 == -536870911);
LABEL_41:
        uint64_t v4 = 2003329396LL;
        unsigned int v5 = a4;
        uint64_t v19 = v75;
        a2 = v73;
        unint64_t v7 = v71;
        a1 = v72;
        uint64_t v9 = v76;
        goto LABEL_42;
      }

      if (v36 >= v17) {
        break;
      }
      ++v27;
      int v37 = 2;
      if (v21 >= v22) {
        goto LABEL_41;
      }
LABEL_36:
      if (v27 >= 2) {
        goto LABEL_41;
      }
    }

    uint64_t v38 = v77 + *(unsigned int *)(v32 + 28 * v21 + 8);
    int v39 = v30 % v18;
    unsigned int v40 = v36 / v17;
    int v41 = v18 - v39;
    else {
      int v42 = 0;
    }
    unsigned int v43 = v41 * v17;
    if (v41 * v17) {
      memcpy(&v80[v17 * v39], (const void *)(v77 + *(unsigned int *)(v32 + 28 * v21 + 8)), v41 * v17);
    }
    size_t v44 = v42 * v17;
    if ((_DWORD)v44) {
      memcpy(v80, (const void *)(v38 + v43), v44);
    }
    uint64_t v26 = v30 + v40;
    unsigned int v45 = *v29 + v40;
    _DWORD *v29 = v45;
    _DWORD *v79 = ++v21;
    unint64_t v22 = *v78;
    if (v21 != v22)
    {
      unsigned int v27 = 0;
      v30 += v40;
      int v37 = 2;
      if (v21 >= v22) {
        goto LABEL_41;
      }
      goto LABEL_36;
    }

    uint64_t v24 = 0LL;
    _BYTE *v68 = 1;
    *(void *)(v67 + 80) = *v69 + v45;
    *(_DWORD *)(v67 + 72) = (*(_DWORD *)(v67 + 72) + 1) % v66;
    uint64_t v19 = *(unsigned int *)(v67 + 72);
    uint64_t v9 = v76;
    v46 = (_DWORD *)(v76 + 88LL * v19);
    unsigned int v47 = v46[18];
    v46 += 18;
    unint64_t v21 = v47;
    *(v46 - 1) = 0;
    uint64_t v25 = *(void *)(v67 + 80);
    *((void *)v46 - 4) = v25;
    v79 = v46;
    v48 = v46 - 12;
    unint64_t v22 = *(v46 - 12);
    v78 = v48;
    if (v47 < v22) {
      continue;
    }
    break;
  }

  int v37 = 2;
  uint64_t v4 = 2003329396LL;
  unsigned int v5 = a4;
  a2 = v73;
  unint64_t v7 = v71;
  a1 = v72;
LABEL_42:
  if (v26 != -1)
  {
    int v49 = v26 - (v7 + v70);
    uint64_t v50 = v9 + 88 * v19;
    int v53 = *(_DWORD *)(v50 + 76);
    v51 = (_DWORD *)(v50 + 76);
    int v52 = v53;
    if (v53 > v49 || v52 == 0x7FFFFFFF) {
      _DWORD *v51 = v49;
    }
  }

  if (v37) {
LABEL_50:
  }
    uint64_t v4 = 0LL;
  v55 = *(char **)(a1 + 40);
  int v56 = *(_DWORD *)(a1 + 48);
  unint64_t v57 = *(unsigned int *)(a1 + 52);
  int v58 = v7 % v57;
  int v59 = v57 - v58;
  BOOL v60 = v58 + a2 >= v57;
  int v61 = v58 + a2 - v57;
  if (v61 != 0 && v60) {
    int v62 = v59;
  }
  else {
    int v62 = a2;
  }
  if (!v60) {
    int v61 = 0;
  }
  size_t v63 = (v62 * v56);
  size_t v64 = (v61 * v56);
  if ((_DWORD)v63) {
    memcpy(v5, &v55[v56 * v58], v63);
  }
  if ((_DWORD)v64) {
    memcpy(&v5[v63], v55, v64);
  }
  return v4;
}

void *AUARealtimeWriteMixBlock(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  v8[0] = 0LL;
  v8[1] = v8;
  v8[2] = 0x5010000000LL;
  v8[3] = &unk_1000DD1FD;
  v8[4] = a1;
  int v9 = a2;
  int v10 = 0;
  int v11 = a3;
  int v12 = a4;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = a5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100004370;
  v7[3] = &unk_1000FD840;
  v7[4] = v8;
  unsigned int v5 = objc_retainBlock(v7);
  _Block_object_dispose(v8, 8);
  return v5;
}

uint64_t sub_100004370(uint64_t a1, int a2, uint64_t a3, char *__src)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  int v6 = *(_DWORD *)(v5 + 40);
  unint64_t v7 = *(char **)(v5 + 72);
  unint64_t v8 = *(unsigned int *)(v5 + 48);
  unsigned int v9 = *(_DWORD *)(v5 + 52);
  int v10 = &v7[(v8 * v6)];
  int v11 = (unint64_t)*(double *)(a3 + 144) % v8;
  BOOL v12 = v11 + a2 >= v8;
  int v13 = v11 + a2 - v8;
  else {
    int v14 = v8 - v11;
  }
  if (!v12) {
    int v13 = 0;
  }
  unsigned int v15 = v14 * v6;
  size_t v16 = (v13 * v6);
  if (v14 * v6)
  {
    uint64_t v17 = (v6 * v11);
    memcpy(&v7[v17], __src, (v14 * v6));
    if (v17 < v9)
    {
      else {
        size_t v18 = v9 - v17;
      }
      memcpy(&v10[v17], __src, v18);
    }
  }

  if ((_DWORD)v16)
  {
    uint64_t v19 = &__src[v15];
    memcpy(v7, v19, v16);
    else {
      size_t v20 = v16;
    }
    memcpy(v10, v19, v20);
  }

  return 0LL;
}

id sub_1000044FC(uint64_t a1, uint64_t a2)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)&OBJC_CLASS___AUAPluginTrampoline;
  return objc_msgSendSuper2(&v3, "halInitializeWithPluginHost:", a2);
}

BOOL machServiceExists(char *service_name)
{
  mach_port_t sp = 0;
  return bootstrap_look_up(bootstrap_port, service_name, &sp) == 0;
}

id sub_1000045A4(void *a1, uint64_t a2)
{
  id v18 = 0LL;
  id v2 = [a1 ioDataWithCapacity:a2 error:&v18];
  id v3 = v18;
  if (v2)
  {
    id v4 = v18;
  }

  else
  {
    id v5 = v18;
    uint64_t v6 = _convertNSErrorToError(_:)(v3);

    ((void (*)(void))swift_willThrow)();
    uint64_t v21 = v6;
    swift_errorRetain(v6);
    uint64_t v7 = sub_100008E00(&qword_100113400);
    uint64_t v8 = sub_10000AF08(0LL, (unint64_t *)&qword_100113408, &OBJC_CLASS___NSError_ptr);
    if (swift_dynamicCast(&v20, &v21, v7, v8, 0LL))
    {
      swift_errorRelease(v6);
      unsigned int v9 = v20;
      uint64_t v10 = sub_100008E00(&qword_100113410);
      uint64_t v11 = swift_allocObject(v10, 64LL, 7LL);
      *(_OWORD *)(v11 + 16) = xmmword_1000D3D30;
      id v18 = 0LL;
      unint64_t v19 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease(v19);
      id v18 = (id)0xD00000000000001BLL;
      unint64_t v19 = 0x80000001000CC900LL;
      [v9 code];
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      id v14 = v18;
      unint64_t v15 = v19;
      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 32) = v14;
      *(void *)(v11 + 40) = v15;
      print(_:separator:terminator:)(v11, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      uint64_t v16 = swift_bridgeObjectRelease(v11);
      swift_willThrow(v16);
    }

    swift_errorRelease(v21);
  }

  return v2;
}

unint64_t sub_1000047A0(unint64_t result, unint64_t a2)
{
  if (a2 > 8)
  {
    unint64_t v2 = sub_10000AE14();
    uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
    *(_BYTE *)uint64_t v4 = 96;
    *(void *)(v4 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v4 + 16) = 0xE000000000000000LL;
    *(void *)(v4 + 24) = 0xD00000000000003FLL;
    *(void *)(v4 + 32) = 0x80000001000CCA80LL;
    *(void *)(v4 + 40) = 0xD00000000000001FLL;
    *(void *)(v4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v4 + 56) = 30LL;
    return swift_willThrow(v3);
  }

  if (result >> 61)
  {
    __break(1u);
  }

  else if (a2)
  {
    return 8 * result / a2;
  }

  __break(1u);
  return result;
}

uint64_t sub_10000485C()
{
  return swift_deallocClassInstance(v0, 57LL, 7LL);
}

void sub_100004888()
{
}

void sub_1000048D0()
{
}

void sub_100004918()
{
}

void sub_100004960()
{
}

void sub_1000049A8()
{
}

uint64_t sub_1000049F0()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_100004A00(char *a1, char *a2, void *a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  *(void *)(v3 + 152) = 0LL;
  swift_retain(v3);
  sub_100029834( 0xD00000000000001CLL,  0x80000001000CC990LL,  0xD000000000000021LL,  (void *)0x80000001000CC9B0LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  204LL);
  *(void *)(v3 + 176) = a1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR___AUAStream_audioDevice]);
  if (!Strong) {
    goto LABEL_24;
  }
  uint64_t v11 = (void *)Strong;
  *(void *)(v6 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = Strong;
  uint64_t v12 = *(void *)&a2[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v12)
  {
    unint64_t v24 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v25 = 74;
    *(void *)(v25 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v25 + 16) = 0xE000000000000000LL;
    *(void *)(v25 + 24) = 0xD000000000000021LL;
    *(void *)(v25 + 32) = 0x80000001000CC9B0LL;
    *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v25 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v25 + 56) = 209LL;
    uint64_t v26 = a1;
    swift_willThrow(v26);

    goto LABEL_17;
  }

  int v13 = a1;
  swift_retain(v12);
  unint64_t v14 = [v11 timestampPeriod];
  unint64_t v15 = *(void **)(v12 + 104);
  *(void *)(v6 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v15[14];
  *(void *)(v6 + 112) = v15[13];
  *(void *)(v6 + 104) = v15[12];
  *(void *)(v6 + 64) = v14;
  unsigned int v16 = [a2 channelsPerFrame];
  unint64_t v17 = *(void *)(v12 + 40);
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    if (is_mul_ok(v16, v17))
    {
      *(void *)(v6 + 96) = v16 * v17;
      *(void *)(v6 + 72) = 0LL;
      *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(void *)(v6 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v6 + 136) = 0LL;
      *(void *)(v6 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(_BYTE *)(v6 + 144) = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v13) + 0x210LL))() & 1;
      if (qword_100112938 == -1)
      {
LABEL_6:
        int v41 = a2;
        id v18 = *(void **)(qword_1001172A8 + 16);
        if (v18)
        {
          id v19 = v18;
          NSString v20 = String._bridgeToObjectiveC()();
          uint64_t v21 = a3;
          unsigned int v22 = [v19 BOOLForKey:v20];

          BOOL v23 = v22 == 0;
          a3 = v21;
          uint64_t v5 = v4;
          if (v23) {
            LODWORD(v1_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
          }
          else {
            LODWORD(v1_Block_object_dispose((const void *)(v30 - 136), 8) = 127;
          }
        }

        *(_DWORD *)(v6 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = (_DWORD)v18;
        _StringGuts.grow(_:)(31LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        int v27 = *(_DWORD *)(v6 + 160);
        uint64_t v28 = sub_100008E00(&qword_100113420);
        uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
        *(_OWORD *)(v29 + 16) = xmmword_1000D3D30;
        *(void *)(v29 + 56) = &type metadata for Int32;
        *(void *)(v29 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v29 + 32) = v27;
        v30._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v29);
        object = v30._object;
        String.append(_:)(v30);
        swift_bridgeObjectRelease(object);
        sub_100029834( 0xD00000000000001DLL,  0x80000001000CC9E0LL,  0xD000000000000021LL,  (void *)0x80000001000CC9B0LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  223LL);
        swift_bridgeObjectRelease(0x80000001000CC9E0LL);
        unint64_t v32 = *(void *)(v6 + 96);
        if (is_mul_ok(v14, v32))
        {
          if (((v14 * v32) & 0x8000000000000000LL) == 0)
          {
            id v33 = [objc_allocWithZone(NSMutableData) initWithLength:v14 * v32];
            if (v33)
            {
              *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v33;
              *(void *)(v6 + 56) = [v33 mutableBytes];
              id v34 = [objc_allocWithZone(NSMutableData) initWithLength:2816];
              if (v34)
              {
                *(void *)(v6 + 16) = v34;
                id v35 = [v34 mutableBytes];
                *(void *)(v6 + 24) = v35;
                *(void *)(v6 + 32) = 32LL;
                unsigned int v36 = sub_100009224( a3,  *(void *)(*(void *)(v12 + 104) + 112LL),  *(void *)(*(void *)(v12 + 104) + 96LL),  *(void *)(*(void *)(v12 + 104) + 104LL),  (uint64_t)v35,  32LL);
                if (!v5)
                {
                  int v39 = v36;
                  swift_release(v12);

                  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v39;
                  swift_release(v6);
                  return v6;
                }

                swift_release(v12);

                a3 = *(void **)(v6 + 48);
LABEL_17:

                int v37 = *(void **)(v6 + 176);
                swift_release(v6);

                uint64_t v38 = type metadata accessor for AUAInputTransferManager();
                swift_deallocPartialClassInstance(v6, v38, 184LL, 7LL);
                return v6;
              }

              goto LABEL_26;
            }

LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }

    else
    {
      __break(1u);
    }

    swift_once(&qword_100112938, sub_1000B99F4);
    goto LABEL_6;
  }

  swift_bridgeObjectRelease(v2);
  return _swiftEmptyArrayStorage;
}

  sub_1000516F0(&v62, 12LL);
LABEL_28:
  if ((v52 & 0xFF00000000LL) != 0)
  {
    if ((v52 & 0xFF000000000000LL) != 0) {
      unsigned int v36 = BYTE6(v52);
    }
    else {
      unsigned int v36 = -65536;
    }
    int v37 = (uint64_t)v66;
    swift_bridgeObjectRetain(a4);
    uint64_t v38 = sub_100051240(v37);
    uint64_t result = swift_bridgeObjectRelease(v37);
    if (!v15[2])
    {
      uint64_t result = swift_bridgeObjectRelease(v15);
      unint64_t v15 = 0LL;
    }

    unsigned int v40 = BYTE3(v52);
    if (!v38[2])
    {
      uint64_t result = swift_release(v38);
      uint64_t v38 = 0LL;
    }

    int v41 = v51;
    _DWORD *v51 = v36;
    *((_BYTE *)v41 + 2) = BYTE2(v36);
    int v42 = v50;
    unsigned int v43 = v49;
    *((void *)v41 + 1) = v40;
    *((void *)v41 + 2) = v43;
    v41[12] = v42;
    *((void *)v41 + 4) = v38;
    *((void *)v41 + 5) = a4;
    *((void *)v41 + 6) = v15;
  }

  else
  {
    size_t v44 = v66;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v44);
    unsigned int v45 = sub_10000AE14();
    v46 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
    *(_BYTE *)unsigned int v47 = 15;
    *(void *)(v47 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v47 + 16) = 0xE000000000000000LL;
    *(void *)(v47 + 24) = 0x2928797469746E65LL;
    *(void *)(v47 + 32) = 0xE800000000000000LL;
    *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFBB0LL;
    *(void *)(v47 + 56) = 1247LL;
    return swift_willThrow(v46);
  }

  return result;
}

        __break(1u);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_25;
  }

        int v53 = sub_10000AE14();
        v54 = swift_allocError(&type metadata for AUAError, v53, 0LL, 0LL);
        *(_BYTE *)v55 = 80;
        *(void *)(v55 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v55 + 16) = 0xE000000000000000LL;
        *(void *)(v55 + 24) = 0xD00000000000001FLL;
        *(void *)(v55 + 32) = 0x80000001000D19C0LL;
        *(void *)(v55 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
        *(void *)(v55 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
        *(void *)(v55 + 56) = 258LL;
        swift_willThrow(v54);
        return v7;
      }

    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unsigned int v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    id v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unsigned int v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    BOOL v23 = __clz(__rbit64(v21));
    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    unsigned int v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 2 * v15;
    id v19 = *(_WORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_WORD *)(*(void *)(v4 + 56) + v1_Block_object_dispose((const void *)(v30 - 136), 8) = v19;
  }

  unsigned int v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    unsigned int v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    id v18 = v17[1];
    NSString v20 = 32 * v15;
    sub_100017294(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_10000AE58(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    unsigned __int8 v1 = v25;
    goto LABEL_28;
  }

  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unsigned int v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    NSString v20 = __clz(__rbit64(v18));
    uint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    unsigned int v16 = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = v16;
  }

  id v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  id v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    unsigned int v9 = v19;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }

LABEL_27:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

  if (qword_1001128E0 != -1) {
LABEL_35:
  }
    swift_once(&qword_1001128E0, sub_10000B9B8);
  uint64_t v26 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v26, (uint64_t)qword_1001171B8);
  int v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v27(v10, v2 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v4);
  uint64_t v28 = v44;
  swift_bridgeObjectRetain(v44);
  Swift::String v30 = (os_log_s *)OSSignposter.logHandle.getter(v29);
  __int128 v31 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    unint64_t v32 = v41;
    v27(v41, (uint64_t)v10, v4);
    id v33 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    id v34 = a1;
    id v35 = v33;
    *id v33 = 134218240;
    int v42 = (void *)v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v33 + 1, v33 + 3);
    *((_WORD *)v35 + 6) = 2048;
    int v42 = (void *)v28[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, (char *)v35 + 14, (char *)v35 + 22);
    unsigned int v36 = swift_bridgeObjectRelease(v28);
    int v37 = OSSignpostID.rawValue.getter(v36);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  v31,  v37,  "AUASampleManager_getSampleCounts",  "requested %ld, returned %ld",  (uint8_t *)v35,  0x16u);
    swift_slowDealloc(v35, -1LL, -1LL);

    uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v10, v4);
    v38(v32, v4);
  }

  else
  {
    swift_bridgeObjectRelease(v28);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  swift_beginAccess(&v44, &v42, 0LL, 0LL);
}

  swift_bridgeObjectRelease_n(v13, 2LL);
  id v19 = *(void *)&v1[OBJC_IVAR___AUAAudioDevice_streamingInterfaces];
  if ((unint64_t)v19 >> 62)
  {
LABEL_54:
    if (v19 < 0) {
      int v39 = v19;
    }
    else {
      int v39 = v19 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v19);
    NSString v20 = _CocoaArrayWrapper.endIndex.getter(v39);
    if (v20) {
      goto LABEL_29;
    }
  }

  else
  {
    NSString v20 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)&v1[OBJC_IVAR___AUAAudioDevice_streamingInterfaces]);
    if (v20)
    {
LABEL_29:
      int v42 = 1LL;
      unsigned int v43 = v20;
      uint64_t v21 = 4LL;
      size_t v44 = v19 & 0xC000000000000001LL;
      unsigned int v40 = v19;
      int v41 = 1LL;
      do
      {
        uint64_t v25 = v21 - 4;
        if (v44)
        {
          uint64_t v26 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v21 - 4, v19);
          int v27 = v21 - 3;
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_51;
          }
        }

        else
        {
          uint64_t v26 = *(void **)(v19 + 8 * v21);
          swift_retain(v26);
          int v27 = v21 - 3;
          if (__OFADD__(v25, 1LL))
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
        }

        uint64_t v28 = v19;
        id v19 = sub_10008DA3C(v26, v1);
        if ([(id)v19 direction] == 1768845428)
        {
          if ((v41 & 0x8000000000000000LL) != 0) {
            goto LABEL_63;
          }
          if (HIDWORD(v41)) {
            goto LABEL_64;
          }
          [(id)v19 setStartingChannel:v41];
          uint64_t v29 = *(void *)(v19 + OBJC_IVAR___AUAStream_interface);
          swift_retain(v29);
          active = ActiveStreamingInterface.channelCount()();
          if (v31)
          {

            swift_release(v29);
            id v19 = v28;
            unint64_t v32 = v43;
LABEL_30:
            v46 = 0LL;
            unsigned int v47 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(25LL);
            v22._countAndFlagsBits = 0xD000000000000017LL;
            v22._object = (void *)0x80000001000CD840LL;
            String.append(_:)(v22);
            unsigned int v45 = v31;
            BOOL v23 = sub_100008E00(&qword_100113400);
            _print_unlocked<A, B>(_:_:)( &v45,  &v46,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
            unint64_t v24 = v47;
            sub_100029840( v46,  v47,  0x7453657461657263LL,  (void *)0xEF2928736D616572LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  553LL);
            swift_bridgeObjectRelease(v24);
            swift_release(v26);
            swift_errorRelease(v31);
            goto LABEL_31;
          }

          id v35 = active;
          swift_release(v29);
          if (__OFADD__(v41, v35)) {
            goto LABEL_52;
          }
          v41 += v35;
          unsigned int v36 = (id)v19;
          [v1 addInputStream:v36];

          swift_release(v26);
          id v19 = v28;
          unint64_t v32 = v43;
        }

        else
        {
          if ((v42 & 0x8000000000000000LL) != 0) {
            goto LABEL_63;
          }
          if (HIDWORD(v42))
          {
LABEL_64:
            _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
            goto LABEL_65;
          }

          [(id)v19 setStartingChannel:v42];
          id v33 = *(void *)(v19 + OBJC_IVAR___AUAStream_interface);
          swift_retain(v33);
          id v34 = ActiveStreamingInterface.channelCount()();
          if (v31)
          {

            swift_release(v33);
            unint64_t v32 = v43;
            id v19 = v40;
            goto LABEL_30;
          }

          int v37 = v34;
          swift_release(v33);
          if (__OFADD__(v42, v37)) {
            goto LABEL_53;
          }
          v42 += v37;
          uint64_t v38 = (id)v19;
          [v1 addOutputStream:v38];

          swift_release(v26);
          unint64_t v32 = v43;
          id v19 = v40;
        }

          __break(1u);
        }
      }

      __break(1u);
      goto LABEL_27;
    }

    int v27 = sub_10000AE14();
    uint64_t v28 = swift_allocError(&type metadata for AUAError, v27, 0LL, 0LL);
    *(_BYTE *)uint64_t v29 = 7;
    *(void *)(v29 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v29 + 16) = 0xE000000000000000LL;
    *(void *)(v29 + 24) = 0xD00000000000002ALL;
    *(void *)(v29 + 32) = 0x80000001000CEAF0LL;
    *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v29 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
    *(void *)(v29 + 56) = 69LL;
    swift_willThrow(v28);
  }

  unsigned int v66 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v33);
  __chkstk_darwin(v66);
  v29((char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL), v36, v16);
  if (v66 < 65)
  {
    uint64_t v76 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v33);
    v31((char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL), v16);
    if (v76 != 64) {
      goto LABEL_39;
    }
    uint64_t v67 = dispatch thunk of static BinaryInteger.isSigned.getter(v16, v33);
    if ((v67 & 1) != 0) {
      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v67 = ((uint64_t (*)(char *, uint64_t))v31)( (char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v16);
  }

  v98 = v82;
  v88 = v82;
  __chkstk_darwin(v67);
  v68 = (char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v29(v68, v36, v16);
  *(void *)&v93[0] = 0x7FFFFFFFFFFFFFFFLL;
  v69 = dispatch thunk of static BinaryInteger.isSigned.getter(v16, v33);
  int v70 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v33);
  if ((v69 & 1) == 0)
  {
    if (v70 > 63)
    {
      v92[0] = 0x7FFFFFFFFFFFFFFFLL;
      __chkstk_darwin(v70);
      uint64_t v77 = (char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v78 = ((uint64_t (*)(char *, char *, uint64_t))v87[4])(v77, v77, v16);
      __chkstk_darwin(v78);
      v79 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v92, &type metadata for Int, v79, v16, v33);
      size_t v63 = dispatch thunk of static Comparable.< infix(_:_:)(v77, v77, v16, *(void *)(*(void *)(v33 + 32) + 8LL));
      v31(v77, v16);
      v31(v77, v16);
      goto LABEL_38;
    }

    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unsigned int v16 = 24 * v15;
    unint64_t v17 = *(void *)(v2 + 48) + v16;
    id v18 = *(void *)(v17 + 16);
    id v19 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)id v19 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = v18;
  }

  unsigned int v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  id v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unsigned int v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(void *)(v4 + 48) + v15) = *(_BYTE *)(*(void *)(v2 + 48) + v15);
  }

  id v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unsigned int v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    unsigned int v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }

    uint64_t v38 = sub_10000AE14();
    int v37 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
    *(_BYTE *)int v39 = 101;
    *(void *)(v39 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    *(void *)(v39 + 24) = 0x5365726170657270LL;
    *(void *)(v39 + 32) = 0xEF29286D61657274LL;
    *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
    *(void *)(v39 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
    *(void *)(v39 + 56) = 621LL;
    goto LABEL_17;
  }

              __break(1u);
              goto LABEL_28;
            }

      int v41 = 0x6E776F6E6B6E55LL;
      BOOL v60 = 0LL;
      int v61 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(44LL);
      int v42 = swift_unknownObjectWeakLoadStrong(v14);
      if (v42
        && (unsigned int v43 = v42,
            size_t v44 = *(void *)(a2 + 24),
            unsigned int v45 = swift_getObjectType(v42),
            v46 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v45, v44),
            swift_unknownObjectRelease(v43, v47),
            v46))
      {
        int v41 = *(void *)&v46[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
        v48 = *(void **)&v46[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
        swift_bridgeObjectRetain();
      }

      else
      {
        v48 = (void *)0xE700000000000000LL;
      }

      v49._countAndFlagsBits = v41;
      v49._object = v48;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v48);
      v50._countAndFlagsBits = 0x20726F727245203ALL;
      v50._object = (void *)0xE800000000000000LL;
      String.append(_:)(v50);
      size_t v63 = v33;
      v51 = sub_100008E00(&qword_100113400);
      _print_unlocked<A, B>(_:_:)( &v63,  &v60,  v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v52._object = (void *)0x80000001000D2430LL;
      v52._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v52);
      size_t v63 = v25;
      v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(object);
      v55 = v61;
      sub_100029840( v60,  v61,  0xD000000000000026LL,  (void *)0x80000001000CE0F0LL,  0xD000000000000021LL,  0x80000001000D20D0LL,  164LL);
      swift_errorRelease(v33);
      swift_bridgeObjectRelease(v55);
      uint64_t result = 0LL;
      goto LABEL_32;
    }
  }

  else
  {
    if (v24 != 6)
    {
LABEL_18:
      uint64_t result = 0LL;
      id v34 = a8;
LABEL_33:
      *id v34 = result;
      return result;
    }

    uint64_t v25 = a5;
    if (a3 == 1886679669)
    {
      uint64_t v26 = (void *)*a4;
      int v27 = swift_isUniquelyReferenced_nonNull_native(*a4);
      *a4 = v26;
      if ((v27 & 1) == 0)
      {
        uint64_t v26 = sub_10005085C(0LL, v26[2] + 1LL, 1, v26);
        *a4 = v26;
      }

      uint64_t v29 = v26[2];
      uint64_t v28 = v26[3];
      if (v29 >= v28 >> 1) {
        uint64_t v26 = sub_10005085C((void *)(v28 > 1), v29 + 1, 1, v26);
      }
      v26[2] = v29 + 1;
      v26[v29 + 4] = v25;
      *a4 = v26;
    }

    if ((v25 & 0x8000000000000000LL) == 0)
    {
      Swift::String v30 = objc_allocWithZone((Class)type metadata accessor for AUAMuteControl());
      swift_retain(a2);
      __int128 v31 = a6;
      uint64_t result = sub_100095058(a2, v25, v23 & 0xFFFFFF, a3, a6);
      id v33 = v57;
      if (!v57) {
        goto LABEL_32;
      }
      goto LABEL_27;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

  if (!v17) {
    goto LABEL_29;
  }

  return v17;
}

void sub_100004F20()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t sub_100004F54()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_100004FDC()
{
  return swift_deallocClassInstance(v0, 184LL, 7LL);
}

uint64_t sub_100004FFC()
{
  return 32LL;
}

uint64_t sub_100005004(uint64_t a1)
{
  return sub_100007F3C(a1, 27LL, 0xD000000000000019LL, 0x80000001000CCE30LL, 249LL);
}

uint64_t sub_100005028()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v64 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v13 = type metadata accessor for OSSignposter(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  int v70 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  id v19 = (char *)&v64 - v18;
  unint64_t v20 = *(void *)(v2 + 120);
  if ((v20 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v17 = *(void *)(v2 + 40);
  if ((v17 & 0xC000000000000001LL) != 0)
  {
LABEL_31:
    uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v17);
    goto LABEL_5;
  }

  if (v20 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v1 = *(void *)(v17 + 8 * v20 + 32);
  swift_retain(v1);
LABEL_5:
  uint64_t v21 = *(void *)(v1 + 16);
  if ((*(_BYTE *)(v21 + 48) & 1) != 0 || (*(_BYTE *)(v21 + 81) & 1) == 0 && *(void *)(v2 + 136) > 0xFuLL)
  {
    swift_release(v1);
    return 0LL;
  }

  v68 = v10;
  uint64_t v69 = v14;
  int v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v67 = v7;
  if (v22 == 1)
  {
    uint64_t v23 = *(void *)(v21 + 40);
    uint64_t v72 = 0LL;
    uint64_t v73 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    swift_bridgeObjectRelease(v73);
    uint64_t v72 = 0xD000000000000021LL;
    uint64_t v73 = 0x80000001000CCDB0LL;
    uint64_t v66 = v23;
    uint64_t v71 = v23;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    uint64_t v26 = v73;
    sub_100029834( v72,  v73,  0xD000000000000012LL,  (void *)0x80000001000CCDE0LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  274LL);
    swift_bridgeObjectRelease(v26);
    if (qword_100112910 != -1) {
      swift_once(&qword_100112910, sub_100082CB8);
    }
    uint64_t v27 = sub_100008EC4(v13, (uint64_t)qword_100117220);
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v19, v27, v13);
    uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v29 = v28(v12, *(void *)(v2 + 176) + OBJC_IVAR___AUAStream_signpostID, v3);
    Swift::String v30 = (os_log_s *)OSSignposter.logHandle.getter(v29);
    LODWORD(v65) = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v28(v68, (uint64_t)v12, v3);
      __int128 v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)__int128 v31 = 134217984;
      uint64_t v72 = v66;
      uint64_t v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v31 + 4, v31 + 12);
      os_signpost_id_t v33 = OSSignpostID.rawValue.getter(v32);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  (os_signpost_type_t)v65,  v33,  "AUAInputTransferManager_inputResync",  "startingSampleNumber %llu",  v31,  0xCu);
      swift_slowDealloc(v31, -1LL, -1LL);

      id v34 = *(void (**)(char *, uint64_t))(v4 + 8);
      v34(v12, v3);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v13);
      v34(v68, v3);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v13);
    }

    uint64_t v7 = v67;
  }

  uint64_t v35 = *(void *)(v1 + 16);
  uint64_t v36 = *(void *)(v2 + 72);
  *(_DWORD *)(v35 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_BYTE *)(v35 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
  *(void *)(v35 + 56) = 0LL;
  *(_DWORD *)(v35 + 6_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_DWORD *)(v35 + 72) = 0;
  *(void *)(v35 + 32) = v36;
  *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = -1LL;
  *(_DWORD *)(v35 + 76) = 0x7FFFFFFF;
  *(_WORD *)(v35 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
  memset( [*(id *)(v1 + 24) mutableBytes], *(_DWORD *)(v2 + 160), (size_t)objc_msgSend(*(id *)(v1 + 24), "length"));
  uint64_t v37 = *(void *)(v1 + 16);
  uint64_t v38 = *(unsigned int *)(v37 + 24);
  id v19 = v70;
  if (!(_DWORD)v38)
  {
LABEL_22:
    uint64_t v44 = *(void *)(v2 + 72);
    BOOL v45 = __CFADD__(v44, 8LL);
    uint64_t v46 = v44 + 8;
    if (!v45)
    {
      *(void *)(v2 + 72) = v46;
      uint64_t v47 = *(void *)(v2 + 120);
      BOOL v45 = __CFADD__(v47, 1LL);
      char v48 = v47 + 1;
      if (!v45)
      {
        *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v48 & 0x1F;
        uint64_t v49 = *(void *)(v2 + 136);
        BOOL v45 = __CFADD__(v49, 1LL);
        uint64_t v50 = v49 + 1;
        if (!v45)
        {
          *(void *)(v2 + 136) = v50;
          if (qword_100112910 == -1) {
            goto LABEL_26;
          }
          goto LABEL_36;
        }

LABEL_35:
        __break(1u);
LABEL_36:
        swift_once(&qword_100112910, sub_100082CB8);
LABEL_26:
        uint64_t v51 = sub_100008EC4(v13, (uint64_t)qword_100117220);
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v19, v51, v13);
        int v52 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
        v52(v7, *(void *)(v2 + 176) + OBJC_IVAR___AUAStream_signpostID, v3);
        swift_retain_n(v2, 4LL);
        uint64_t v53 = swift_retain_n(v1, 2LL);
        v54 = (os_log_s *)OSSignposter.logHandle.getter(v53);
        LODWORD(v66) = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v52(v68, (uint64_t)v7, v3);
          uint64_t v55 = swift_slowAlloc(42LL, -1LL);
          *(_DWORD *)uint64_t v55 = 134218752;
          uint64_t v72 = *(void *)(v2 + 136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v55 + 4, v55 + 12);
          *(_WORD *)(v55 + 12) = 2048;
          uint64_t v65 = v4;
          uint64_t v56 = *(void *)(v2 + 80);
          swift_release(v2);
          uint64_t v72 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v55 + 14, v55 + 22);
          swift_release(v2);
          *(_WORD *)(v55 + 22) = 2048;
          uint64_t v57 = *(void *)(v2 + 72);
          swift_release(v2);
          uint64_t v72 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v55 + 24, v55 + 32);
          swift_release(v2);
          *(_WORD *)(v55 + 32) = 2048;
          uint64_t v58 = **(unsigned int **)(v1 + 16);
          swift_release(v1);
          uint64_t v72 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v55 + 34, v55 + 42);
          uint64_t v59 = swift_release(v1);
          BOOL v60 = v68;
          os_signpost_id_t v61 = OSSignpostID.rawValue.getter(v59);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v54,  (os_signpost_type_t)v66,  v61,  "AUAInputTransferManager_nextBlockToQueue",  "blocksQueued %lu, nextSampleNumber %llu, nextFrameToQueue %llu, transferID %llu",  (uint8_t *)v55,  0x2Au);
          swift_slowDealloc(v55, -1LL, -1LL);

          int v62 = *(void (**)(char *, uint64_t))(v65 + 8);
          v62(v67, v3);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v13);
          v62(v60, v3);
        }

        else
        {

          swift_release_n(v2, 4LL);
          swift_release_n(v1, 2LL);
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v19, v13);
        }

        return v1;
      }

    __break(1u);
LABEL_36:
    swift_once(&qword_100112948, sub_1000CA978);
LABEL_5:
    if ((_DWORD)qword_1001172D0 == HIDWORD(qword_1001172D0)) {
      goto LABEL_9;
    }
    if (is_mul_ok(p_name, qword_1001172D0))
    {
      if (HIDWORD(qword_1001172D0))
      {
        p_name = p_name * qword_1001172D0 / HIDWORD(qword_1001172D0);
LABEL_9:
        if (p_name < 0x6052340)
        {
        }

        else
        {
          uint64_t v15 = String._bridgeToObjectiveC()();
          uint64_t v16 = (void *)swift_allocObject(&unk_100108458, 40LL, 7LL);
          v16[2] = v45;
          v16[3] = p_name / 0xF4240;
          v16[4] = a1;
          uint64_t v50 = sub_1000B9904;
          uint64_t v51 = v16;
          aBlock = _NSConcreteStackBlock;
          uint64_t v47 = 1107296256LL;
          char v48 = sub_1000B3284;
          uint64_t v49 = &unk_100108470;
          uint64_t v17 = _Block_copy(&aBlock);
          uint64_t v18 = v51;
          id v19 = v45;
          swift_release(v18);
          AnalyticsSendEventLazy(v15, v17);

          _Block_release(v17);
        }

        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  uint64_t v23 = 1LL;
  p_name = (unint64_t)&StreamingInterfaceUtil.name;
  while (1)
  {
    Swift::String v24 = v11;
    uint64_t v25 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v26);
    uint64_t v53 = v25;
    swift_errorRetain(v25);
    uint64_t v27 = sub_100008E00(&qword_100113400);
    uint64_t v28 = sub_10000AF08(0LL, (unint64_t *)&qword_100113408, &OBJC_CLASS___NSError_ptr);
    swift_errorRelease(v25);
    uint64_t v29 = v52;
    if ([v52 code] == (id)-536870163)
    {
      Swift::String v30 = *(void *)&v45[v44];
      if (!v30) {
        goto LABEL_31;
      }
      __int128 v31 = *(void *)(v30 + 16);
      if (!v31) {
        goto LABEL_31;
      }
      if (*(_BYTE *)(v30 + 32) != 30)
      {
        if (v31 == 1) {
          goto LABEL_31;
        }
        if (*(_BYTE *)(v30 + 33) != 30) {
          break;
        }
      }
    }

LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    __break(1u);
LABEL_35:
    if (v5 < 0) {
      uint64_t v37 = v5;
    }
    else {
      uint64_t v37 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v37);
  }

LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  unint64_t v39 = *(void *)(v2 + 88);
  unint64_t v40 = HIDWORD(v39);
  if (!HIDWORD(v39))
  {
    LODWORD(v41) = 0;
    uint64_t v42 = 1LL;
    while (1)
    {
      unint64_t v43 = *(void *)(v37 + 16) + v40;
      *(_DWORD *)unint64_t v43 = 0;
      *(_DWORD *)(v43 + 4) = v39;
      *(_DWORD *)(v43 + _Block_object_dispose((const void *)(v30 - 136), 8) = v41;
      *(void *)(v43 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(void *)(v43 + 12) = 0LL;
      if (v38 == v42) {
        goto LABEL_22;
      }
      unint64_t v41 = v42++ * (unint64_t)v39;
      v40 += 28LL;
      if ((v41 & 0xFFFFFFFF00000000LL) != 0)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

        __break(1u);
LABEL_34:
        if (v6 >= 0) {
          __int128 v31 = v9;
        }
        else {
          __int128 v31 = v6;
        }
        swift_bridgeObjectRetain(v6);
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v31);
        swift_bridgeObjectRelease(v6);
        if (v21) {
          goto LABEL_14;
        }
        goto LABEL_38;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_33;
  }

                return;
              }

              goto LABEL_40;
            }
          }

          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }

      v68 += 3;
      if (!--v65)
      {
        swift_bridgeObjectRelease(v121);
        BOOL v60 = v105;
        __int128 v31 = v107;
        uint64_t v26 = v108;
        int v22 = (uint64_t)v103;
        goto LABEL_45;
      }
    }

    uint64_t v71 = *(v68 - 1);
LABEL_38:
    if (*(void *)(v71 + 136) == 257LL)
    {
      v115 = *((_OWORD *)v68 - 1);
      swift_retain(v115);
      swift_retain(*((void *)&v115 + 1));
      swift_bridgeObjectRetain(v70);
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0) {
        uint64_t v66 = sub_10004F1C4(0LL, v66[2] + 1LL, 1, v66);
      }
      uint64_t v73 = v66[2];
      uint64_t v72 = v66[3];
      v74 = v115;
      if (v73 >= v72 >> 1)
      {
        uint64_t v75 = sub_10004F1C4((void *)(v72 > 1), v73 + 1, 1, v66);
        v74 = v115;
        uint64_t v66 = v75;
      }

      v66[2] = v73 + 1;
      uint64_t v69 = &v66[3 * v73];
      *((_OWORD *)v69 + 2) = v74;
      v69[6] = v70;
    }

    goto LABEL_33;
  }

  uint64_t v26 = v56;
  __int128 v31 = v53;
LABEL_45:
  swift_bridgeObjectRelease(v121);
  uint64_t v10 = v66[2];
  swift_bridgeObjectRelease(v66);
  if (!v10)
  {
LABEL_57:
    swift_unknownObjectRelease(v31, v76);
    swift_release(v106);

    return v10;
  }

  *((void *)&v118 + 1) = v114;
  *(void *)&v119 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&v117 = v22;
  uint64_t v77 = v104;
  v78 = *(uint64_t (**)(uint64_t, void, void, __int128 *, uint64_t, uint64_t))(v104 + 144);
  uint64_t v32 = (v110 | (v111 << 16)) & 0xFFFFFF;
  swift_retain(v22);
  v79 = v78(v32, 0LL, 0LL, &v117, v102, v77);
  if (!v60)
  {
    v81 = v79;
    uint64_t v27 = v80;
    sub_100017A40(&v117);
    ADCControlRequestParameterBlock.getCur()(v27, v81 & 0x1FF, (uint64_t)&v117);
LABEL_50:

    v87 = sub_100008E00(&qword_100113EB8);
    if ((swift_dynamicCast(v116, &v117, v87, &type metadata for UInt8, 6LL) & 1) != 0) {
      *(_BYTE *)(v22 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v116[0];
    }
    v88 = _swiftEmptyArrayStorage;
    *(void *)&v117 = _swiftEmptyArrayStorage;
    v89 = v100;
    v90 = *(void *)(v100 + 16);
    if (v90)
    {
      swift_bridgeObjectRetain(v100);
      v91 = 0LL;
      v92 = v104;
      do
      {
        v93 = v91 + 1;
        sub_10001D87C(v91, *(void *)(v89 + 8 * v91 + 32), v31, v92, &v117, v22);
        v91 = v93;
      }

      while (v90 != v93);
      swift_bridgeObjectRelease(v89);
      v88 = (void *)v117;
    }

    v94 = LockDelay.units.getter(v32);
    v95 = *(unsigned __int8 *)(v22 + 88);
    objc_allocWithZone((Class)type metadata accessor for AUAStreamSelectorControl());
    swift_retain(v22);
    swift_bridgeObjectRetain(v88);
    sub_10001E3B0(v94 & 1, v22, v95, (uint64_t)v88, v26, 1685287523LL, v101);
    v97 = v96;
    v98 = sub_100008E00(&qword_100113ED0);
    v99 = swift_allocObject(v98, 40LL, 7LL);
    *(_OWORD *)(v99 + 16) = xmmword_1000D5F90;
    *(void *)(v99 + 32) = v97;
    *(void *)&v116[0] = v99;
    specialized Array._endMutation()(v99);
    uint64_t v10 = *(void *)&v116[0];
    swift_bridgeObjectRelease(v88);
    goto LABEL_57;
  }

  sub_100017A40(&v117);
  *(void *)&v117 = 0LL;
  *((void *)&v117 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(61LL);
  v82._countAndFlagsBits = 0x20726F727245LL;
  v82._object = (void *)0xE600000000000000LL;
  String.append(_:)(v82);
  *(void *)&v116[0] = v60;
  v83 = sub_100008E00(&qword_100113400);
  _print_unlocked<A, B>(_:_:)( v116,  &v117,  v83,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v84._countAndFlagsBits = 0xD000000000000035LL;
  v84._object = (void *)0x80000001000CE120LL;
  String.append(_:)(v84);
  v85 = *((void *)&v117 + 1);
  sub_100029840( v117,  *((uint64_t *)&v117 + 1),  0xD000000000000026LL,  (void *)0x80000001000CE0F0LL,  0xD000000000000022LL,  0x80000001000CE090LL,  147LL);
  swift_bridgeObjectRelease(v85);
  swift_errorRelease(v60);
  swift_unknownObjectRelease(v31, v86);
  swift_release(v106);

  return 0LL;
}

            __break(1u);
            sub_100017A40(&v64);
            uint64_t result = (void *)swift_release(v67);
            __break(1u);
            return result;
          }

          uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v24, 0x636E657571657266LL, 0xE900000000000079LL, 0LL);
          swift_bridgeObjectRelease(v24);
          if ((v0 & 1) != 0)
          {
            uint64_t v25 = v56;
            goto LABEL_19;
          }
        }
      }

      else
      {
        sub_1000178B0((uint64_t)&v64, &qword_100113CD0);
      }

      uint64_t v8 = v59 + 3;
      uint64_t v6 = v60 - 1;
      uint64_t v7 = v56;
      if ((void)v60 == 1LL)
      {
        swift_bridgeObjectRelease(v56);
        goto LABEL_16;
      }
    }

    __break(1u);
    goto LABEL_33;
  }

              __break(1u);
              return;
            }
          }

          __break(1u);
          goto LABEL_33;
        }

                return;
              }

              goto LABEL_40;
            }
          }

          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }

    swift_unknownObjectRelease(v17, v25);
    os_signpost_id_t v33 = *v1;
    *uint64_t v1 = (uint64_t)v26;
    swift_bridgeObjectRelease(v33);
    swift_beginAccess(v2, v44, 33LL, 0LL);
    id v34 = swift_retain(v5);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
    uint64_t v36 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v35 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v36 >= v35 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1LL);
    }
    uint64_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v5);
    specialized Array._endMutation()(v37);
    swift_endAccess(v44);
    swift_release(v5);
    swift_release(v8);
  }

  if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v5 = *(void *)(v3 + 32);
    swift_retain(v5);
    goto LABEL_7;
  }

  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
}

    uint64_t v11 = (v25 - 1) & v25;
    int v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    __int128 v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    os_signpost_id_t v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      swift_bridgeObjectRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    uint64_t v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          uint64_t v18 = 0LL;
        }
        v27 |= v29;
        Swift::String v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    unint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v32;
    *(void *)(*(void *)(v8 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  Swift::String v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *Swift::String v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

uint64_t sub_1000057D8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v38 = a2;
  uint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v42[0] = 0LL;
  v42[1] = 0LL;
  char v43 = 1;
  BOOL v41 = 0;
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v12 = sub_100008EC4(v8, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3[22] + OBJC_IVAR___AUAStream_signpostID, v4);
  swift_retain(v3);
  uint64_t v13 = swift_slowAlloc(32LL, -1LL);
  uint64_t v14 = swift_slowAlloc(32LL, -1LL);
  uint64_t v35 = v14;
  *(_DWORD *)uint64_t v13 = 134218498;
  uint64_t v39 = v3[17];
  uint64_t v40 = v14;
  uint64_t v36 = v5;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 4, v13 + 12);
  *(_WORD *)(v13 + 12) = 2048;
  uint64_t v39 = v3[16];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 14, v13 + 22);
  swift_release(v3);
  *(_WORD *)(v13 + 22) = 2080;
  uint64_t v15 = sub_100008E00(&qword_100113420);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1000D3D30;
  *(void *)(v16 + 56) = &type metadata for Int32;
  *(void *)(v16 + 64) = &protocol witness table for Int32;
  int v17 = v38;
  *(_DWORD *)(v16 + 32) = v38;
  uint64_t v18 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v16);
  uint64_t v34 = v8;
  id v19 = v7;
  unint64_t v21 = v20;
  uint64_t v39 = sub_1000164BC(v18, v20, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 24, v13 + 32);
  uint64_t v22 = swift_bridgeObjectRelease(v21);
  uint64_t v23 = (os_log_s *)OSSignposter.logHandle.getter(v22);
  uint64_t v24 = static os_signpost_type_t.begin.getter();
  LOBYTE(v21) = v24;
  os_signpost_id_t v25 = OSSignpostID.rawValue.getter(v24);
  uint64_t v31 = v4;
  uint64_t v32 = v9;
  os_signpost_id_t v33 = v11;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  (os_signpost_type_t)v21,  v25,  "AUAInputTransferManager_completeBlock",  "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s",  (uint8_t *)v13,  0x20u);
  unint64_t v26 = sub_100005B60(v3, v37, v17, &v41, v42);
  uint64_t v27 = static os_signpost_type_t.end.getter(v26);
  LOBYTE(v21) = v27;
  os_signpost_id_t v28 = OSSignpostID.rawValue.getter(v27);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  (os_signpost_type_t)v21,  v28,  "AUAInputTransferManager_completeBlock",  "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s",  (uint8_t *)v13,  0x20u);

  uint64_t v29 = v35;
  swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1LL, -1LL);
  swift_slowDealloc(v13, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v31);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
  return v42[0];
}

unint64_t sub_100005B60(void *a1, uint64_t a2, int a3, BOOL *a4, void *a5)
{
  unint64_t result = a1[16];
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = a5;
  uint64_t v6 = a4;
  int v7 = a3;
  uint64_t v8 = a2;
  a2 = a1[5];
  if ((a2 & 0xC000000000000001LL) != 0)
  {
LABEL_14:
    unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
    unint64_t v11 = result;
    goto LABEL_5;
  }

  if (result >= *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v11 = *(void *)(a2 + 8 * result + 32);
  unint64_t result = swift_retain(v11);
LABEL_5:
  uint64_t v12 = *(void *)(v11 + 16);
  if (*(void *)(v12 + 16) != v8) {
    return swift_release(v11);
  }
  uint64_t v13 = a1[17];
  BOOL v14 = v13 != 0;
  uint64_t v15 = v13 - 1;
  if (!v14) {
    goto LABEL_16;
  }
  a1[17] = v15;
  if (v7 != -536870165) {
    sub_100005C74(v12, (uint64_t)a1, v6, v5);
  }
  *(_BYTE *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  uint64_t v16 = a1[16];
  unint64_t result = swift_release(v11);
  if (v16 != -1)
  {
    a1[16] = ((_BYTE)v16 + 1) & 0x1F;
    return result;
  }

LABEL_17:
  __break(1u);
  return result;
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 2;
  uint64_t v8 = v6 - 2;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 3;
  uint64_t v8 = v6 - 3;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 0x6D;
  uint64_t v8 = v6 - 109;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 5;
  uint64_t v8 = v6 - 5;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

    ;
  }

  while (v122 + a1);
  swift_bridgeObjectRelease(v105);
  if (v132)
  {
    v134 = v132;
LABEL_122:
    v80 = v160;
    swift_bridgeObjectRetain(a2);
    v81 = swift_bridgeObjectRetain(v80);
    a1 = (unint64_t)sub_100051240(v81);
    swift_bridgeObjectRelease(v80);
    if (!*(void *)(a1 + 16))
    {
      swift_release(a1);
      a1 = 0LL;
    }

    if (a2[2])
    {
      uint64_t v4 = (uint64_t)a2;
    }

    else
    {
      swift_bridgeObjectRelease(a2);
      uint64_t v4 = 0LL;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(ObjectType) & 1) != 0)
    {
LABEL_128:
      v83 = *(void *)(ObjectType + 16);
      v82 = *(void *)(ObjectType + 24);
      v84 = v83 + 1;
      if (v83 >= v82 >> 1) {
        ObjectType = (uint64_t)sub_10004F3F4((void *)(v82 > 1), v83 + 1, 1, (void *)ObjectType);
      }
      *(void *)(ObjectType + 16) = v84;
      v133 = ObjectType + 16;
      v85 = ObjectType + 80 * v83;
      v86 = v127;
      *(void *)(v85 + 32) = v134;
      *(void *)(v85 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v86;
      *(void *)(v85 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v128;
      *(_WORD *)(v85 + 56) = 256;
      *(_BYTE *)(v85 + 64) = v115 & 1;
      *(void *)(v85 + 72) = v126;
      *(_WORD *)(v85 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
      *(void *)(v85 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
      *(void *)(v85 + 96) = 0LL;
      *(void *)(v85 + 104) = a1;
      goto LABEL_131;
    }

  uint64_t v6 = *a1;
  int v7 = v6 >= 6;
  uint64_t v8 = v6 - 6;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 9;
  uint64_t v8 = v6 - 9;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 7;
  uint64_t v8 = v6 - 7;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 0x10;
  uint64_t v8 = v6 - 16;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

    unint64_t v20 = v146;
LABEL_18:
    uint64_t v22 = v148;
    unint64_t v21 = v150;
  }

  while (v140 + v148);
  swift_bridgeObjectRelease(v121);
  if (v150)
  {
    LOBYTE(v132) = v19;
    unint64_t v26 = v150;
    uint64_t v44 = v20;
LABEL_111:
    v88 = v155;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v88);
    char v43 = sub_100051240(v89);
    swift_bridgeObjectRelease(v88);
    if (!v43[2])
    {
      swift_release(v43);
      char v43 = 0LL;
    }

    LOBYTE(v24) = v133;
    if (*(void *)(v5 + 16))
    {
      uint64_t v39 = v5;
    }

    else
    {
      swift_bridgeObjectRelease(v5);
      uint64_t v39 = 0LL;
    }

    BOOL v41 = (void *)v26;
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
LABEL_153:
    }
      uint64_t v4 = sub_10004F3F4(0LL, v4[2] + 1LL, 1, v4);
    v91 = v4[2];
    v90 = v4[3];
    v151 = v91 + 1;
    if (v91 >= v90 >> 1) {
      uint64_t v4 = sub_10004F3F4((void *)(v90 > 1), v151, 1, v4);
    }
    v4[2] = v151;
    v149 = v4 + 2;
    v92 = &v4[10 * v91];
    v92[4] = v41;
    v92[5] = v44;
    v92[6] = v141;
    *((_BYTE *)v92 + 56) = (_BYTE)v24;
    *((_BYTE *)v92 + 57) = v137 & 1;
    *((_BYTE *)v92 + 64) = v130 & 1;
    v92[9] = v18;
    *((_BYTE *)v92 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v132;
    *((_BYTE *)v92 + 81) = v138 & 1;
    v92[11] = v39;
    v92[12] = v142;
    v92[13] = v43;
    v93 = v131;
    goto LABEL_120;
  }

  swift_bridgeObjectRelease(v142);
  v149 = v4 + 2;
  v93 = v131;
  v151 = v4[2];
  if (!v151)
  {
LABEL_134:
    sub_1000516F0(v152, 81LL);
    goto LABEL_135;
  }

  uint64_t v6 = *a1;
  int v7 = v6 >= 0x1F;
  uint64_t v8 = v6 - 31;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  int v7 = v6 >= 0x23;
  uint64_t v8 = v6 - 35;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 0x41;
  uint64_t v8 = v6 - 65;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  int v7 = v6 >= 0x23;
  uint64_t v8 = v6 - 35;
  if (!v7) {
    uint64_t v8 = -1;
  }
  return (v8 + 1);
}

void sub_100005C74(uint64_t a1, uint64_t a2, BOOL *a3, void *a4)
{
  v150 = a4;
  v155 = a3;
  uint64_t v156 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v156 - 8);
  uint64_t v7 = __chkstk_darwin(v156);
  unint64_t v152 = (unint64_t)&v143[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (void (**)(unint64_t, uint64_t))&v143[-v10];
  uint64_t v12 = __chkstk_darwin(v9);
  v154 = &v143[-v13];
  __chkstk_darwin(v12);
  uint64_t v15 = &v143[-v14];
  v157 = (_BYTE *)type metadata accessor for OSSignposter(0LL);
  uint64_t v16 = (void (**)(unint64_t, uint64_t))*((void *)v157 - 1);
  uint64_t v17 = __chkstk_darwin(v157);
  unint64_t v19 = (unint64_t)&v143[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = &v143[-v21];
  __chkstk_darwin(v20);
  uint64_t v24 = a1;
  unint64_t v25 = (unint64_t)&v143[-v23];
  uint64_t v26 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v26)
  {
    unint64_t v63 = *(void *)(a1 + 32);
    unint64_t v151 = a1 + 32;
    uint64_t v50 = a2 + 168;
    if (v63 >= *(void *)(*(void *)(a2 + 168) + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }

  unsigned int v27 = 0;
  uint64_t v28 = *(void *)(a1 + 16);
  char v29 = 1;
  int v30 = 1 - v26;
  char v31 = 1;
LABEL_3:
  while (2)
  {
    uint64_t v32 = 0LL;
    unsigned int v33 = v27;
    else {
      uint64_t v34 = v27;
    }
    uint64_t v35 = v27 - v34;
    uint64_t v36 = v27 - v26;
    uint64_t v37 = (int *)(v28 + 28LL * v27);
    while (1)
    {
      if (v35 == v32)
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }

      int v38 = *v37;
      unsigned int v39 = v37[3];
      if (*v37 != -536870169 && v38 != 0 && v38 != -536870165)
      {
        unsigned int v27 = v33 - v32 + 1;
        if (v39) {
          goto LABEL_29;
        }
        int v47 = v30 + v33;
        if ((v29 & 1) != 0)
        {
          if (v47 == (_DWORD)v32) {
            goto LABEL_93;
          }
          char v29 = 0;
          char v31 = 0;
          unsigned int v27 = v33 - v32 + 1;
        }

        else
        {
          if (v47 == (_DWORD)v32) {
            goto LABEL_93;
          }
          char v31 = 0;
        }

        goto LABEL_3;
      }

      unint64_t v42 = *(void *)(a2 + 96);
      if (HIDWORD(v42))
      {
LABEL_107:
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
        __break(1u);
        return;
      }

      if (!(_DWORD)v42) {
        goto LABEL_100;
      }
      else {
        BOOL v43 = v37[1] >= v39;
      }
      if (!v43)
      {
        unsigned int v27 = v33 - v32 + 1;
LABEL_29:
        char v31 = 0;
        if (v27 == (_DWORD)v26) {
          goto LABEL_93;
        }
        goto LABEL_3;
      }

      if (v38 == -536870168)
      {
        uint64_t v44 = *(void *)(a2 + 152);
        BOOL v43 = __CFADD__(v44, 1LL);
        unint64_t v45 = v44 + 1;
        if (v43) {
          goto LABEL_101;
        }
        *(void *)(a2 + 152) = v45;
        if (v45 >= 0x65)
        {
          unsigned int v27 = v33 - v32 + 1;
          int v46 = v30 + v33;
          *(void *)(a2 + 152) = 0LL;
          if (v39)
          {
            if (v46 == (_DWORD)v32) {
              goto LABEL_93;
            }
            char v31 = 0;
          }

          else
          {
            if (v46 == (_DWORD)v32) {
              goto LABEL_93;
            }
            char v29 = 0;
            char v31 = 0;
          }

          goto LABEL_3;
        }
      }

      if (v39 == 0 && (v29 & 1) != 0) {
        break;
      }
      --v32;
      v37 += 7;
      if (v36 == v32)
      {
        if ((v31 & 1) != 0)
        {
          unint64_t v48 = *(void *)(a1 + 32);
          unint64_t v151 = a1 + 32;
          uint64_t v50 = a2 + 168;
          uint64_t v49 = *(void *)(a2 + 168);
          if (v48 >= *(void *)(v49 + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame))
          {
            if ((v29 & 1) == 0) {
              goto LABEL_47;
            }
LABEL_53:
            uint64_t v22 = v157;
            goto LABEL_54;
          }

LABEL_52:
          uint64_t v64 = a1;
          unint64_t v11 = v16;
          uint64_t v50 = v6;
          uint64_t v22 = v157;
          *(void *)&__int128 aBlock = 0LL;
          *((void *)&aBlock + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(58LL);
          v65._countAndFlagsBits = 0xD000000000000038LL;
          v65._object = (void *)0x80000001000CCD40LL;
          String.append(_:)(v65);
          uint64_t v163 = *(void *)v151;
          v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
          object = v66._object;
          String.append(_:)(v66);
          swift_bridgeObjectRelease(object);
          uint64_t v68 = *((void *)&aBlock + 1);
          uint64_t v70 = *((void *)&aBlock + 1);
          uint64_t v69 = aBlock;
          uint64_t v71 = 387LL;
LABEL_72:
          sub_100029834( v69,  v70,  0xD00000000000002BLL,  (void *)0x80000001000CCC40LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  v71);
          swift_bridgeObjectRelease(v68);
          goto LABEL_73;
        }

        goto LABEL_93;
      }
    }

    if (v30 + v33 != (_DWORD)v32)
    {
      char v29 = 0;
      unsigned int v27 = v33 - v32 + 1;
      continue;
    }

    break;
  }

  if ((v31 & 1) == 0)
  {
LABEL_93:
    unint64_t v19 = (unint64_t)&v143[-v23];
    unint64_t v25 = (unint64_t)v15;
    *(void *)&__int128 aBlock = 0LL;
    *((void *)&aBlock + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(75LL);
    v126._countAndFlagsBits = 0xD000000000000049LL;
    v126._object = (void *)0x80000001000CCBF0LL;
    String.append(_:)(v126);
    uint64_t v163 = *(void *)(a2 + 152);
    v127._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    v128 = v127._object;
    String.append(_:)(v127);
    swift_bridgeObjectRelease(v128);
    uint64_t v129 = *((void *)&aBlock + 1);
    unint64_t v152 = (unint64_t)"nList error, overrunCount";
    unint64_t v151 = (unint64_t)"rmat:usbInterface:)";
    v155 = (BOOL *)0xD00000000000001FLL;
    sub_100029834( aBlock,  *((uint64_t *)&aBlock + 1),  0xD00000000000002BLL,  (void *)0x80000001000CCC40LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  379LL);
    swift_bridgeObjectRelease(v129);
    if (qword_100112910 == -1)
    {
LABEL_94:
      uint64_t v130 = (uint64_t)v157;
      uint64_t v131 = sub_100008EC4((uint64_t)v157, (uint64_t)qword_100117220);
      ((void (*)(unint64_t, uint64_t, uint64_t))v16[2])(v19, v131, v130);
      uint64_t v132 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
      v133 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v149 = v6;
      uint64_t v134 = v156;
      v133(v25, v132, v156);
      uint64_t v135 = swift_retain(a2);
      v136 = (os_log_s *)OSSignposter.logHandle.getter(v135);
      LODWORD(v15_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v153 = v16;
        v137 = v154;
        v133((unint64_t)v154, v25, v134);
        v138 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)v138 = 134217984;
        *(void *)&__int128 aBlock = *(void *)(a2 + 152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v138 + 4, v138 + 12);
        uint64_t v139 = swift_release(a2);
        os_signpost_id_t v140 = OSSignpostID.rawValue.getter(v139);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v136,  (os_signpost_type_t)v150,  v140,  "AUAInputTransferManager_completeBlock",  "transactionList error, overrunCount%lu",  v138,  0xCu);
        swift_slowDealloc(v138, -1LL, -1LL);

        v141 = *(void (**)(unint64_t, uint64_t))(v149 + 8);
        v141(v25, v134);
        v153[1](v19, v130);
        v141((unint64_t)v137, v134);
      }

      else
      {
        swift_release(a2);

        (*(void (**)(unint64_t, uint64_t))(v149 + 8))(v25, v134);
        v16[1](v19, v130);
      }

      id v142 = *(id *)(a2 + 168);
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000002BLL,  v152 | 0x8000000000000000LL,  (uint64_t)v155,  v151 | 0x8000000000000000LL,  381LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);

      return;
    }

LABEL_103:
    swift_once(&qword_100112910, sub_100082CB8);
    goto LABEL_94;
  }

  unint64_t v48 = *(void *)(a1 + 32);
  unint64_t v151 = a1 + 32;
  uint64_t v50 = a2 + 168;
  uint64_t v49 = *(void *)(a2 + 168);
  if (v48 < *(void *)(v49 + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame)) {
    goto LABEL_52;
  }
LABEL_47:
  if (v48 < *(void *)(v49 + OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame)) {
    goto LABEL_53;
  }
  unint64_t v147 = (unint64_t)"nList error, overrunCount";
  uint64_t v148 = a1;
  unint64_t v146 = (unint64_t)"rmat:usbInterface:)";
  uint64_t v149 = 0xD00000000000001FLL;
  sub_100029834( 0xD00000000000004BLL,  0x80000001000CCC70LL,  0xD00000000000002BLL,  (void *)0x80000001000CCC40LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  395LL);
  if (qword_100112910 != -1) {
    goto LABEL_105;
  }
  while (1)
  {
    uint64_t v51 = (uint64_t)v157;
    uint64_t v52 = sub_100008EC4((uint64_t)v157, (uint64_t)qword_100117220);
    ((void (*)(_BYTE *, uint64_t, uint64_t))v16[2])(v22, v52, v51);
    uint64_t v53 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
    v153 = v16;
    v54 = *(uint64_t (**)(void (**)(unint64_t, uint64_t), uint64_t, uint64_t))(v6 + 16);
    uint64_t v55 = v156;
    uint64_t v56 = v54(v11, v53, v156);
    uint64_t v57 = (os_log_s *)OSSignposter.logHandle.getter(v56);
    int v144 = static os_signpost_type_t.event.getter();
    v145 = v57;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v54((void (**)(unint64_t, uint64_t))v154, (uint64_t)v11, v55);
      uint64_t v58 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v58 = 0;
      os_signpost_id_t v59 = OSSignpostID.rawValue.getter(v58);
      BOOL v60 = v145;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v145,  (os_signpost_type_t)v144,  v59,  "AUAInputTransferManager_completeBlock",  "received unexpected 0 length transfer",  v58,  2u);
      swift_slowDealloc(v58, -1LL, -1LL);

      os_signpost_id_t v61 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v61(v11, v55);
      int v62 = v22;
      uint64_t v22 = v157;
      v153[1]((unint64_t)v62, (uint64_t)v157);
      v61(v154, v55);
    }

    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v55);
      v111 = v22;
      uint64_t v22 = v157;
      v153[1]((unint64_t)v111, (uint64_t)v157);
    }

    v112 = (void *)(*(void *)v50 + OBJC_IVAR___AUAAudioDevice_function);
    uint64_t v113 = *v112;
    if (*v112)
    {
      uint64_t v114 = v112[1];
      uint64_t ObjectType = swift_getObjectType(*v112);
      v116 = *(uint64_t (**)(uint64_t, uint64_t))(v114 + 16);
      swift_unknownObjectRetain(v113);
      v117 = (void *)v116(ObjectType, v114);
      swift_unknownObjectRelease(v113, v118);
      if (v117)
      {
        NSString v119 = String._bridgeToObjectiveC()();
        uint64_t v120 = swift_allocObject(&unk_1001029B8, 24LL, 7LL);
        *(void *)(v120 + 16) = v117;
        v161 = sub_10000AEE8;
        uint64_t v162 = v120;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        v159 = sub_1000B3284;
        v160 = &unk_1001029D0;
        v121 = _Block_copy(&aBlock);
        uint64_t v122 = v162;
        id v123 = v117;
        uint64_t v124 = v122;
        uint64_t v22 = v157;
        swift_release(v124);
        AnalyticsSendEventLazy(v119, v121);
        _Block_release(v121);
      }
    }

    id v125 = *(id *)v50;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000002BLL,  v147 | 0x8000000000000000LL,  v149,  v146 | 0x8000000000000000LL,  408LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);

    uint64_t v16 = v153;
    uint64_t v24 = v148;
LABEL_54:
    if (*(_BYTE *)(a2 + 144) == 1)
    {
      unint64_t v146 = v19;
      unint64_t v147 = v50;
      v153 = v16;
      uint64_t v149 = v6;
      BOOL *v155 = *(void *)(v24 + 32) < *(void *)(*(void *)v50 + OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame);
      int64_t v72 = *(unsigned int *)(v24 + 24);
      uint64_t v148 = v24;
      uint64_t v73 = *(_DWORD **)(v24 + 16);
      uint64_t v16 = (void (**)(unint64_t, uint64_t))sub_10004F1A4(0LL, v72, 0, _swiftEmptyArrayStorage);
      if ((_DWORD)v72)
      {
        uint64_t v6 = 3758097127LL;
        v74 = v73;
        do
        {
          int v76 = *v74;
          v74 += 7;
          int v75 = v76;
          if (v76) {
            BOOL v77 = v75 == -536870169;
          }
          else {
            BOOL v77 = 1;
          }
          if (v77)
          {
            unint64_t v25 = *(void *)(a2 + 96);
            if (!v25) {
              goto LABEL_102;
            }
            unint64_t v19 = v73[3];
            if (v25 <= v19)
            {
              unint64_t v79 = (unint64_t)v16[2];
              unint64_t v78 = (unint64_t)v16[3];
              if (v79 >= v78 >> 1) {
                uint64_t v16 = (void (**)(unint64_t, uint64_t))sub_10004F1A4( (void *)(v78 > 1),  v79 + 1,  1,  v16);
              }
              v16[2] = (void (*)(unint64_t, uint64_t))(v79 + 1);
              v16[v79 + 4] = (void (*)(unint64_t, uint64_t))(v19 / v25);
            }
          }

          uint64_t v73 = v74;
          --v72;
        }

        while (v72);
      }

      uint64_t v80 = *(void *)(*(void *)v147 + OBJC_IVAR___AUAAudioDevice_sampleManager);
      uint64_t v6 = v149;
      uint64_t v22 = v157;
      if (!v80)
      {
        __break(1u);
        goto LABEL_107;
      }

      uint64_t v81 = *(void *)(a2 + 104);
      uint64_t v82 = *(void *)(a2 + 112);
      swift_retain(*(void *)(*(void *)v147 + OBJC_IVAR___AUAAudioDevice_sampleManager));
      sub_10000CDC0((uint64_t)v16, v81, v82);
      swift_release(v80);
      swift_bridgeObjectRelease(v16);
      uint64_t v16 = v153;
      unint64_t v19 = v146;
      uint64_t v24 = v148;
    }

    if (*v155)
    {
      unint64_t v11 = v16;
      uint64_t v50 = v6;
      *(void *)&__int128 aBlock = 0LL;
      *((void *)&aBlock + 1) = 0xE000000000000000LL;
      uint64_t v64 = v24;
      _StringGuts.grow(_:)(45LL);
      swift_bridgeObjectRelease(*((void *)&aBlock + 1));
      *(void *)&__int128 aBlock = 0xD00000000000002BLL;
      *((void *)&aBlock + 1) = 0x80000001000CCCC0LL;
      uint64_t v163 = *(void *)v151;
      v83._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      v84 = v83._object;
      String.append(_:)(v83);
      swift_bridgeObjectRelease(v84);
      uint64_t v68 = *((void *)&aBlock + 1);
      uint64_t v70 = *((void *)&aBlock + 1);
      uint64_t v69 = aBlock;
      uint64_t v71 = 420LL;
      goto LABEL_72;
    }

    unint64_t v102 = *(void *)(a2 + 64);
    if (HIDWORD(v102)) {
      goto LABEL_107;
    }
    unint64_t v103 = *(void *)(a2 + 104);
    if (HIDWORD(v103)) {
      goto LABEL_107;
    }
    unint64_t v104 = *(void *)(a2 + 96);
    if (HIDWORD(v104)) {
      goto LABEL_107;
    }
    uint64_t v50 = v6;
    unint64_t v11 = v16;
    uint64_t v64 = v24;
    unsigned int v105 = AUARecordBlockCompletion(v24, v102, *(void *)(a2 + 80), v103, v104);
    uint64_t v106 = *(void *)(a2 + 80);
    BOOL v43 = __CFADD__(v106, v105);
    uint64_t v107 = v106 + v105;
    if (!v43) {
      break;
    }
    __break(1u);
LABEL_105:
    swift_once(&qword_100112910, sub_100082CB8);
  }

  *(void *)(a2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v107;
  uint64_t v108 = *(void *)(v24 + 56);
  if (v108)
  {
    uint64_t v109 = *(unsigned int *)(v24 + 64);
    v110 = v150;
    void *v150 = v108;
    v110[1] = v109;
    *((_BYTE *)v110 + 16) = 0;
  }

              __break(1u);
LABEL_104:
              if (v49 < 0) {
                v92 = v49;
              }
              else {
                v92 = v49 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain_n(v49, 2LL);
              uint64_t v50 = _CocoaArrayWrapper.endIndex.getter(v92);
              swift_bridgeObjectRelease(v49);
              goto LABEL_29;
            }
          }
        }
      }

      break;
    }

LABEL_73:
  int v85 = *(_DWORD *)(v64 + 76);
  if (v85 < 0)
  {
    *(void *)&__int128 aBlock = 0LL;
    *((void *)&aBlock + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease(*((void *)&aBlock + 1));
    strcpy((char *)&aBlock, "USB underflow ");
    HIBYTE(aBlock) = -18;
    LODWORD(v163) = v85;
    v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    v87 = v86._object;
    String.append(_:)(v86);
    swift_bridgeObjectRelease(v87);
    uint64_t v88 = *((void *)&aBlock + 1);
    sub_100029834( aBlock,  *((uint64_t *)&aBlock + 1),  0xD00000000000002BLL,  (void *)0x80000001000CCC40LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  440LL);
    swift_bridgeObjectRelease(v88);
    if (qword_100112910 != -1) {
      swift_once(&qword_100112910, sub_100082CB8);
    }
    uint64_t v89 = sub_100008EC4((uint64_t)v22, (uint64_t)qword_100117220);
    v153 = v11;
    ((void (*)(unint64_t, uint64_t, _BYTE *))v11[2])(v19, v89, v22);
    uint64_t v90 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
    uint64_t v91 = v50;
    v92 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v50 + 16);
    unint64_t v93 = v152;
    uint64_t v94 = v156;
    uint64_t v95 = v92(v152, v90, v156);
    v96 = (os_log_s *)OSSignposter.logHandle.getter(v95);
    LODWORD(v155) = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v97 = v154;
      v92((unint64_t)v154, v93, v94);
      v98 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v98 = 67109120;
      LODWORD(aBlock) = v85;
      uint64_t v99 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v98 + 4, v98 + 8);
      os_signpost_id_t v100 = OSSignpostID.rawValue.getter(v99);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v96,  (os_signpost_type_t)v155,  v100,  "AUAInputTransferManager_completeBlock",  "USB underflow %d",  v98,  8u);
      swift_slowDealloc(v98, -1LL, -1LL);

      v101 = *(void (**)(unint64_t, uint64_t))(v91 + 8);
      v101(v93, v94);
      v153[1](v19, (uint64_t)v22);
      v101((unint64_t)v97, v94);
    }

    else
    {

      (*(void (**)(unint64_t, uint64_t))(v91 + 8))(v93, v94);
      v153[1](v19, (uint64_t)v22);
    }
  }

unint64_t sub_100006C04(uint64_t a1)
{
  uint64_t v2 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v2, v10);
  *(_OWORD *)(inited + 16) = xmmword_1000D3D40;
  *(void *)(inited + 32) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE300000000000000LL;
  sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
  *(NSNumber *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = NSNumber.init(integerLiteral:)(*(unsigned __int16 *)(v4 + 8));
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  *(NSNumber *)(inited + 72) = NSNumber.init(integerLiteral:)(*(unsigned __int16 *)(v4 + 10));
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8);
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSString);
  swift_bridgeObjectRetain(v5);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v8 = [v6 initWithString:v7];

  *(void *)(inited + 96) = v8;
  return sub_100006E90(inited);
}

unint64_t sub_100006D48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v18 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v18);
    return (unint64_t)v4;
  }

  sub_100008E00(&qword_100113478);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AF40(v6, (uint64_t)&v19, &qword_100113480);
    uint64_t v7 = v19;
    uint64_t v8 = v20;
    unint64_t result = sub_100016AFC(v19, v20);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v11 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v11 = v7;
    v11[1] = v8;
    uint64_t v12 = v4[7] + 40 * result;
    __int128 v13 = v21;
    __int128 v14 = v22;
    *(void *)(v12 + 32) = v23;
    *(_OWORD *)uint64_t v12 = v13;
    *(_OWORD *)(v12 + 16) = v14;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_12;
    }
    v4[2] = v17;
    v6 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v18 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100006E90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00(&qword_1001133F8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_100016AFC(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    __int128 v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100006FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00((uint64_t *)&unk_100113460);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    unint64_t result = sub_100016B60((uint64_t)v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v11) = v8;
    *(void *)(v4[7] + v11) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000070B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00(&qword_100113428);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AF40(v7, (uint64_t)&v16, &qword_100113430);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100016AFC(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10000AE58(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000071E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00(&qword_100113458);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100016AFC(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    *BOOL v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100007304(uint64_t a1)
{
  return sub_10000731C(a1, &qword_100113450);
}

unint64_t sub_100007310(uint64_t a1)
{
  return sub_10000731C(a1, &qword_100113448);
}

unint64_t sub_10000731C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_100016AFC(v8, v9);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v5[6] + 16 * result);
    uint64_t *v13 = v8;
    v13[1] = v9;
    *(void *)(v5[7] + 8 * result) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100007430(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100008E00(&qword_100113438);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AF40(v7, (uint64_t)v16, &qword_100113440);
    unint64_t result = sub_100016B90((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_10000AE58(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100007570(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100008E00(&qword_100113488);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000AF40(v7, (uint64_t)&v17, &qword_100113490);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_100016AFC(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    __int128 v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_10000AF84(&v19, v4[7] + 40 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    v4[2] = v15;
    v7 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t (*sub_1000076B0(uint64_t a1))()
{
  uint64_t v2 = OSSignpostID.rawValue.getter(a1);
  unint64_t v3 = v1[12];
  if (!HIDWORD(v3))
  {
    unint64_t v4 = v1[8];
    if (!HIDWORD(v4))
    {
      unint64_t v5 = v1[13];
      if (!HIDWORD(v5))
      {
        uint64_t v6 = v1[3];
        if (v6)
        {
          uint64_t v7 = AUARealtimeReadInputBlock(v2, v3, 32, v4, v5, v6, v1[7]);
          *(void *)(swift_allocObject(&unk_100102990, 24LL, 7LL) + 16) = v7;
          return sub_10000B9A0;
        }

        __break(1u);
      }
    }
  }

  unint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000077A0(void *a1, char *a2, void *a3)
{
  uint64_t v4 = v3;
  swift_retain(v4);
  sub_100029834( 0xD00000000000001DLL,  0x80000001000CCAC0LL,  0xD000000000000021LL,  (void *)0x80000001000CC9B0LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  594LL);
  uint64_t v7 = type metadata accessor for AUAOutputStream(0LL);
  uint64_t v8 = swift_dynamicCastClass(a1, v7);
  if (!v8)
  {
    unint64_t v32 = sub_10000AE14();
    unsigned int v33 = a2;
    uint64_t v34 = swift_allocError(&type metadata for AUAError, v32, 0LL, 0LL);
    *(_BYTE *)uint64_t v35 = 1;
    *(void *)(v35 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v35 + 16) = 0xE000000000000000LL;
    *(void *)(v35 + 24) = 0xD000000000000021LL;
    *(void *)(v35 + 32) = 0x80000001000CC9B0LL;
    *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v35 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v35 + 56) = 595LL;
    swift_willThrow(v34);
    swift_release(v4);

    uint64_t v36 = a3;
LABEL_23:

    uint64_t v56 = type metadata accessor for AUAOutputTransferManager();
    swift_deallocPartialClassInstance(v4, v56, 168LL, 7LL);
    return v4;
  }

  *(void *)(v4 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8 + OBJC_IVAR___AUAStream_audioDevice);
  if (!Strong)
  {
    unint64_t v37 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v38 = 1;
    *(void *)(v38 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v38 + 16) = 0xE000000000000000LL;
    *(void *)(v38 + 24) = 0xD000000000000021LL;
    *(void *)(v38 + 32) = 0x80000001000CC9B0LL;
    *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v38 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v38 + 56) = 597LL;
    id v39 = a1;
    swift_willThrow(v39);

    uint64_t v40 = a3;
LABEL_22:

    uint64_t v36 = *(void **)(v4 + 160);
    swift_release(v4);
    goto LABEL_23;
  }

  uint64_t v10 = (void *)Strong;
  *(void *)(v4 + 152) = Strong;
  uint64_t v11 = *(void *)&a2[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v11)
  {
    unint64_t v41 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
    *(_BYTE *)uint64_t v42 = 74;
    *(void *)(v42 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v42 + 16) = 0xE000000000000000LL;
    *(void *)(v42 + 24) = 0xD000000000000021LL;
    *(void *)(v42 + 32) = 0x80000001000CC9B0LL;
    *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v42 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v42 + 56) = 600LL;
    id v43 = a1;
    id v44 = v10;
    swift_willThrow(v44);

    char v31 = a3;
    goto LABEL_21;
  }

  id v12 = a1;
  id v13 = v10;
  swift_retain(v11);
  unint64_t v14 = [v13 timestampPeriod];
  uint64_t v15 = *(void **)(v11 + 104);
  *(void *)(v4 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v15[14];
  *(void *)(v4 + 112) = v15[13];
  *(void *)(v4 + 104) = v15[12];
  *(void *)(v4 + 64) = v14;
  unsigned int v16 = [a2 channelsPerFrame];
  unint64_t v17 = *(void *)(v11 + 40);
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    if (is_mul_ok(v16, v17))
    {
      *(void *)(v4 + 96) = v16 * v17;
      *(void *)(v4 + 72) = 0LL;
      *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(void *)(v4 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v4 + 136) = 0LL;
      *(void *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      if (qword_100112938 == -1) {
        goto LABEL_7;
      }
    }

    else
    {
      __break(1u);
    }

    swift_once(&qword_100112938, sub_1000B99F4);
LABEL_7:
    unint64_t v59 = v14;
    BOOL v60 = a2;
    uint64_t v18 = *(void **)(qword_1001172A8 + 16);
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = v11;
      id v21 = v13;
      id v22 = v12;
      NSString v23 = String._bridgeToObjectiveC()();
      unsigned int v24 = [v19 BOOLForKey:v23];

      id v12 = v22;
      id v13 = v21;
      uint64_t v11 = v20;
      if (v24) {
        LODWORD(v1_Block_object_dispose((const void *)(v30 - 136), 8) = 63;
      }
      else {
        LODWORD(v1_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
      }
    }

    *(_DWORD *)(v4 + 144) = (_DWORD)v18;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    int v25 = *(_DWORD *)(v4 + 144);
    uint64_t v26 = sub_100008E00(&qword_100113420);
    uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
    *(_OWORD *)(v27 + 16) = xmmword_1000D3D30;
    *(void *)(v27 + 56) = &type metadata for Int32;
    *(void *)(v27 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v27 + 32) = v25;
    v28._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v27);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    sub_100029834( 0xD00000000000001ELL,  0x80000001000CCAE0LL,  0xD000000000000021LL,  (void *)0x80000001000CC9B0LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  615LL);
    swift_bridgeObjectRelease(0x80000001000CCAE0LL);
    unint64_t v30 = sub_1000047A0(*(void *)(*(void *)(v11 + 104) + 96LL), *(void *)(*(void *)(v11 + 104) + 104LL));
    if (v61)
    {

      swift_release(v11);
      char v31 = a3;
LABEL_21:

      uint64_t v40 = *(void **)(v4 + 152);
      goto LABEL_22;
    }

    unint64_t v45 = *(void *)(v4 + 96);
    if (is_mul_ok(v59, v45))
    {
      int v46 = v12;
      unint64_t v47 = v59 * v45;
      uint64_t v48 = *(void *)(v4 + 88);
      size_t v49 = v47 + v48;
      if (!__CFADD__(v47, v48))
      {
        if ((v49 & 0x8000000000000000LL) == 0)
        {
          unint64_t v50 = v30;
          id v51 = sub_1000045A4(a3, v47 + v48);
          *(void *)(v4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v51;
          id v52 = [v51 mutableBytes];
          *(void *)(v4 + 56) = v52;
          memset(v52, *(_DWORD *)(v4 + 144), v49);
          id v53 = [objc_allocWithZone(NSMutableData) initWithLength:704];
          if (v53)
          {
            *(void *)(v4 + 16) = v53;
            id v54 = [v53 mutableBytes];
            *(void *)(v4 + 24) = v54;
            *(void *)(v4 + 32) = 8LL;
            id v55 = *(id *)(v4 + 48);
            uint64_t v58 = sub_100009540(v55, v50, (uint64_t)v54, 8LL);

            swift_release(v11);
            *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v58;
            swift_release(v4);
            return v4;
          }

          goto LABEL_30;
        }

LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_29;
  }

    uint64_t v48 = sub_10000AE14();
    uint64_t v42 = swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
    uint64_t v18 = v42;
    *(_BYTE *)id v43 = 12;
    *(void *)(v43 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v43 + 16) = 0xE000000000000000LL;
    *(void *)(v43 + 24) = 0x72657473756C63LL;
    *(void *)(v43 + 32) = 0xE700000000000000LL;
    *(void *)(v43 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v43 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    id v44 = 86LL;
    goto LABEL_30;
  }

  uint64_t v8 = 1LL;
LABEL_4:
  uint64_t v9 = swift_getObjectType(v5);
  uint64_t v10 = v8 - 1;
  if (__OFSUB__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_65;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  if (v10 < *(void *)(v7 + 16))
  {
    sub_10002C5BC(*(void *)(v7 + 8 * v10 + 32), v9, ObjectType, (uint64_t)&v102);
    if (*((void *)&v103 + 1))
    {
      sub_10000AF84(&v102, (uint64_t)&v105);
      sub_100017910((uint64_t)&v105, (uint64_t)v101);
      uint64_t v11 = sub_100008E00(&qword_100113B28);
      id v12 = sub_100008E00(&qword_100113B30);
      if (swift_dynamicCast(v99, v101, v11, v12, 6LL))
      {
        sub_10000AF84(v99, (uint64_t)&v102);
        id v13 = *((void *)&v103 + 1);
        unint64_t v14 = v104;
        sub_1000178EC(&v102, *((uint64_t *)&v103 + 1));
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
        swift_unknownObjectRelease(v5, v16);
        sub_100017A40(&v105);
        sub_100017A40(&v102);
        return v15;
      }

      os_signpost_id_t v100 = 0LL;
      memset(v99, 0, sizeof(v99));
      sub_1000178B0((uint64_t)v99, &qword_100113B38);
      unint64_t v45 = sub_10000AE14();
      uint64_t v18 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
      *(_BYTE *)int v46 = 1;
      *(void *)(v46 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v46 + 16) = 0xE000000000000000LL;
      *(void *)(v46 + 24) = 0x72657473756C63LL;
      *(void *)(v46 + 32) = 0xE700000000000000LL;
      *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
      *(void *)(v46 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
      *(void *)(v46 + 56) = 93LL;
      swift_willThrow(v18);
      swift_unknownObjectRelease(v5, v47);
      sub_100017A40(&v105);
LABEL_31:
      *(void *)&unsigned int v105 = 0LL;
      *((void *)&v105 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(47LL);
      v50._countAndFlagsBits = 0xD00000000000002DLL;
      v50._object = (void *)0x80000001000CE0C0LL;
      String.append(_:)(v50);
      *(void *)&unint64_t v102 = v18;
      id v51 = sub_100008E00(&qword_100113400);
      _print_unlocked<A, B>(_:_:)( &v102,  &v105,  v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      id v52 = *((void *)&v105 + 1);
      sub_100029840( v105,  *((uint64_t *)&v105 + 1),  0x72657473756C63LL,  (void *)0xE700000000000000LL,  0xD000000000000022LL,  0x80000001000CE090LL,  97LL);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(v18);
      return 0LL;
    }

    sub_1000178B0((uint64_t)&v102, &qword_100113E98);
    unint64_t v41 = sub_10000AE14();
    uint64_t v42 = swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
    uint64_t v18 = v42;
    *(_BYTE *)id v43 = 1;
    *(void *)(v43 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v43 + 16) = 0xE000000000000000LL;
    *(void *)(v43 + 24) = 0x72657473756C63LL;
    *(void *)(v43 + 32) = 0xE700000000000000LL;
    *(void *)(v43 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v43 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    id v44 = 92LL;
LABEL_30:
    *(void *)(v43 + 56) = v44;
    swift_willThrow(v42);
    swift_unknownObjectRelease(v5, v49);
    goto LABEL_31;
  }

    v57 += 3LL;
    uint64_t v56 = v128 - 1;
    if (v128 == 1)
    {
      swift_bridgeObjectRelease(v106);
      uint64_t v82 = v125;
      swift_bridgeObjectRelease(v125);
      uint64_t v3 = v105;
      uint64_t ObjectType = v104;
      goto LABEL_45;
    }
  }

  int64_t v72 = v125;
  swift_bridgeObjectRelease(v125);
  uint64_t v71 = v72;
LABEL_41:
  uint64_t v73 = v123 | (v124 << 16);
  swift_bridgeObjectRelease(v71);
  swift_bridgeObjectRelease(v68);
  v74 = swift_getObjectType(v115);
  int v75 = IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v114 + 16));
  int v76 = v73 & 0xFFFFFF;
  uint64_t ObjectType = v104;
  BOOL v77 = v103;
  sub_10002F4D4(v76, v75, v104, v74, v111);
  LODWORD(v4) = v107;
  uint64_t v3 = v105;
  unint64_t v78 = v120;
  unint64_t v103 = v77;
  uint64_t v7 = v98;
  if (!v77)
  {
    uint64_t v8 = v106;
    unint64_t v30 = v97;
    unint64_t v17 = (unint64_t)v102;
    uint64_t v34 = v114;
    uint64_t v18 = (const char *)v96;
    goto LABEL_11;
  }

  swift_bridgeObjectRelease(v106);
  swift_unknownObjectRelease(v115, v92);
  swift_release(v78);
  swift_release(v114);
  NSString v23 = ObjectType;
  id v22 = "AUASDCore/ActiveEndpoint.swift";
  uint64_t v20 = v103;
LABEL_46:
  *(void *)&uint64_t v132 = 0LL;
  *((void *)&v132 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(42LL);
  swift_bridgeObjectRelease(*((void *)&v132 + 1));
  *(void *)&uint64_t v132 = 0xD000000000000028LL;
  *((void *)&v132 + 1) = 0x80000001000D3AC0LL;
  *(void *)&uint64_t v129 = v23;
  v87._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  uint64_t v88 = v87._object;
  String.append(_:)(v87);
  swift_bridgeObjectRelease(v88);
  uint64_t v89 = *((void *)&v132 + 1);
  sub_100029840( v132,  *((uint64_t *)&v132 + 1),  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001ELL,  (unint64_t)(v22 - 32) | 0x8000000000000000LL,  250LL);
  swift_bridgeObjectRelease(v89);
  swift_errorRelease(v20);
LABEL_47:
  uint64_t result = mach_absolute_time();
  *(void *)&v3[OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp] = result;
  uint64_t v91 = (char *)&v3[OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate];
  *(void *)uint64_t v91 = ObjectType;
  v91[8] = v4 & 1;
  return result;
}

LABEL_31:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

        ++v21;
      }

      while (v27 != v32);
    }
  }

  swift_bridgeObjectRelease(v19);
}

  uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v35);
  __chkstk_darwin(v68);
  v31((char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL), v38, v18);
  if (v68 < 65)
  {
    unint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v35);
    v33((char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL), v18);
    if (v78 != 64) {
      goto LABEL_43;
    }
    uint64_t v69 = dispatch thunk of static BinaryInteger.isSigned.getter(v18, v35);
    if ((v69 & 1) != 0) {
      goto LABEL_43;
    }
  }

  else
  {
    uint64_t v69 = ((uint64_t (*)(char *, uint64_t))v33)( (char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v18);
  }

  v101 = v84;
  uint64_t v90 = v84;
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v31(v70, v38, v18);
  *(void *)&v95[0] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v71 = dispatch thunk of static BinaryInteger.isSigned.getter(v18, v35);
  int64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v35);
  if ((v71 & 1) == 0)
  {
    if (v72 >= 64)
    {
      v94[0] = 0x7FFFFFFFFFFFFFFFLL;
      __chkstk_darwin(v72);
      unint64_t v79 = (char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v80 = ((uint64_t (*)(char *, char *, uint64_t))v89[4])(v79, v79, v18);
      __chkstk_darwin(v80);
      uint64_t v81 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v94, &type metadata for Int, v81, v18, v35);
      Swift::String v65 = dispatch thunk of static Comparable.< infix(_:_:)(v79, v79, v18, *(void *)(*(void *)(v35 + 32) + 8LL));
      v33(v79, v18);
      v33(v79, v18);
      goto LABEL_42;
    }

                    __break(1u);
LABEL_32:
                    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
                    __break(1u);
                    return;
                  }

                  goto LABEL_29;
                }

    swift_unknownObjectRelease(v20, v27);
    uint64_t v35 = *v7;
    *uint64_t v7 = v11;
    swift_bridgeObjectRelease(v35);
    v28[8] = 0LL;
    uint64_t v36 = v28[4];
    unint64_t v37 = v123;
    if (v36 < 0) {
      goto LABEL_84;
    }
    if (v36)
    {
      uint64_t v38 = v28[7];
      id v39 = dword_1000D8768[*((char *)v28 + 24)];
      *(_DWORD *)uint64_t v38 = -536870911;
      *(_DWORD *)(v38 + 4) = v39;
      *(void *)(v38 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v38 + 16) = 0LL;
      *(_DWORD *)(v38 + 24) = 0;
      uint64_t v40 = v36 - 1;
      if (v40)
      {
        unint64_t v41 = 0LL;
        uint64_t v42 = (void *)(v38 + 40);
        do
        {
          *((_DWORD *)v42 - 3) = -536870911;
          *((_DWORD *)v42 - 2) = v39;
          if (v41 == 4294967288LL) {
            goto LABEL_91;
          }
          v41 += 8LL;
          *((_DWORD *)v42 - 1) = v41;
          *uint64_t v42 = 0LL;
          v42[1] = 0LL;
          uint64_t v42 = (void *)((char *)v42 + 28);
        }

        while (--v40);
      }
    }

    id v43 = *(unsigned int *)(a1 + 48);
    if (!(_DWORD)v43) {
      goto LABEL_85;
    }
    id v44 = *(void *)(a1 + 40);
    if (v44 % v43)
    {
      uint64_t v132 = 0LL;
      v133 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(64LL);
      v45._countAndFlagsBits = 0xD00000000000002DLL;
      v45._object = v112;
      String.append(_:)(v45);
      uint64_t v135 = (void *)v44;
      v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      object = v46._object;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(object);
      v48._countAndFlagsBits = 0x7254726550534D20LL;
      v48._object = (void *)0xEF20726566736E61LL;
      String.append(_:)(v48);
      LODWORD(v135) = v43;
      v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      unint64_t v50 = v49._object;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v50);
      id v51 = v133;
      sub_100029834( v132,  v133,  0xD000000000000028LL,  (void *)(v128 | 0x8000000000000000LL),  0xD000000000000016LL,  v127 | 0x8000000000000000LL,  1177LL);
      swift_bridgeObjectRelease(v51);
    }

    id v52 = *(void *)(*(void *)(a1 + 16) + 120LL);
    if (v52)
    {
      id v53 = v129[7];
      id v54 = v129[4];
      uint64_t v11 = v129[5];
      swift_retain(v52);
      swift_retain(a1);
      sub_1000C761C(v11, v53, v54, v44, 0, (uint64_t)sub_10008EF48, a1);
      if (!v2)
      {
        swift_release(a1);
        swift_release(v52);
        v87 = v129;
        goto LABEL_52;
      }

      swift_release(a1);
      swift_release(v52);
      id v55 = v2;
    }

    else
    {
      uint64_t v56 = sub_10000AE14();
      id v55 = swift_allocError(&type metadata for AUAError, v56, 0LL, 0LL);
      *(_BYTE *)uint64_t v57 = 1;
      *(void *)(v57 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v57 + 16) = 0xE000000000000000LL;
      uint64_t v58 = v107;
      *(void *)(v57 + 24) = 0xD000000000000028LL;
      *(void *)(v57 + 32) = v58;
      unint64_t v59 = v106;
      *(void *)(v57 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
      *(void *)(v57 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v59;
      *(void *)(v57 + 56) = 1179LL;
      swift_willThrow(v55);
    }

    id v125 = 0LL;
    BOOL v60 = v114;
    uint64_t v132 = v55;
    uint64_t v61 = sub_100008E00(&qword_100113400);
    int v62 = sub_10000AF08(0LL, (unint64_t *)&qword_100113408, &OBJC_CLASS___NSError_ptr);
    swift_dynamicCast(&v135, &v132, v61, v62, 0LL);
    unint64_t v63 = v135;
    v121 = sub_100008E00(&qword_100113420);
    uint64_t v64 = swift_allocObject(v121, 72LL, 7LL);
    *(_OWORD *)(v64 + 16) = v122;
    Swift::String v65 = [v63 code];
    *(void *)(v64 + 56) = &type metadata for Int;
    *(void *)(v64 + 64) = &protocol witness table for Int;
    *(void *)(v64 + 32) = v65;
    Swift::String v66 = String.init(format:_:)(0xD000000000000028LL, v115, v64);
    uint64_t v68 = v67;
    uint64_t v124 = 0xD000000000000016LL;
    sub_100029840( v66,  v67,  0xD000000000000028LL,  (void *)(v128 | 0x8000000000000000LL),  0xD000000000000016LL,  v127 | 0x8000000000000000LL,  1188LL);
    swift_bridgeObjectRelease(v68);
    if (qword_100112910 != -1) {
      swift_once(&qword_100112910, sub_100082CB8);
    }
    uint64_t v69 = type metadata accessor for OSSignposter(0LL);
    sub_100008EC4(v69, (uint64_t)qword_100117220);
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t))(v126 + 16);
    v70(v60, v117, v37);
    uint64_t v71 = v63;
    int64_t v72 = (os_log_s *)OSSignposter.logHandle.getter(v71);
    uint64_t v11 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v70(v118, (uint64_t)v60, v37);
      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v74 = swift_slowAlloc(32LL, -1LL);
      uint64_t v113 = v11;
      int v75 = v74;
      uint64_t v131 = v74;
      *(_DWORD *)uint64_t v73 = v109;
      int v76 = [v71 code];
      BOOL v77 = swift_allocObject(v121, 72LL, 7LL);
      *(_OWORD *)(v77 + 16) = v122;
      *(void *)(v77 + 56) = &type metadata for Int;
      *(void *)(v77 + 64) = &protocol witness table for Int;
      *(void *)(v77 + 32) = v76;
      unint64_t v78 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v77);
      uint64_t v80 = v79;
      uint64_t v130 = sub_1000164BC(v78, v79, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v110, v73 + 4, v73 + 12);

      uint64_t v81 = v123;
      uint64_t v82 = swift_bridgeObjectRelease(v80);
      Swift::String v83 = v118;
      v84 = OSSignpostID.rawValue.getter(v82);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v72,  (os_signpost_type_t)v113,  v84,  "AUAOutputExplicit_enqueueAvailableFeedbackTransferBlocks_error",  "error %s",  v73,  0xCu);
      swift_arrayDestroy(v75, 1LL, v108);
      swift_slowDealloc(v75, -1LL, -1LL);
      int v85 = v73;
      a1 = v111;
      swift_slowDealloc(v85, -1LL, -1LL);

      uint64_t v11 = *(void *)(v126 + 8);
      ((void (*)(char *, uint64_t))v11)(v60, v81);
      ((void (*)(char *, uint64_t))v11)(v83, v81);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v126 + 8))(v60, v37);
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v116);
    uint64_t v2 = v125;
    v87 = v129;
    if (!Strong) {
      goto LABEL_90;
    }
    uint64_t v88 = (void *)Strong;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000028LL,  v128 | 0x8000000000000000LL,  v124,  v127 | 0x8000000000000000LL,  1190LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);

    swift_errorRelease(v132);
LABEL_52:
    uint64_t v89 = v87[4];
    uint64_t v90 = v120;
    if ((v89 & 0x8000000000000000LL) != 0) {
      goto LABEL_93;
    }
    if (!is_mul_ok(v43, v89)) {
      goto LABEL_86;
    }
    uint64_t v91 = v43 * v89;
    v92 = *(void *)(a1 + 40);
    unint64_t v93 = __CFADD__(v92, v91);
    uint64_t v94 = v92 + v91;
    if (v93) {
      goto LABEL_87;
    }
    *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v94;
    swift_beginAccess(v90, &v132, 33LL, 0LL);
    uint64_t v95 = swift_retain(v87);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v95);
    v97 = *(void *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    v96 = *(void *)((*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v97 >= v96 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1LL);
    }
    v98 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v97, v87);
    specialized Array._endMutation()(v98);
    swift_endAccess(&v132);
    uint64_t result = swift_release(v87);
  }

  __break(1u);
  return result;
}

  unint64_t v37 = String._bridgeToObjectiveC()();
  uint64_t v38 = (void *)swift_allocObject(&unk_100108408, 48LL, 7LL);
  v38[2] = v45;
  v38[3] = v23;
  v38[4] = v29;
  v38[5] = a1;
  unint64_t v50 = sub_1000B98BC;
  id v51 = v38;
  __int128 aBlock = _NSConcreteStackBlock;
  unint64_t v47 = 1107296256LL;
  uint64_t v48 = sub_1000B3284;
  size_t v49 = &unk_100108420;
  id v39 = _Block_copy(&aBlock);
  uint64_t v40 = v51;
  unint64_t v41 = v45;
  uint64_t v42 = v29;
  swift_release(v40);
  AnalyticsSendEventLazy(v37, v39);
  _Block_release(v39);

  id v43 = v42;
  swift_willThrow(v43);

LABEL_32:
  swift_errorRelease(v53);
}

  swift_bridgeObjectRelease_n(v1, 2LL);
  return v5;
}

void sub_100007E38()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
}

uint64_t sub_100007E6C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_100007EF0()
{
  return swift_deallocClassInstance(v0, 168LL, 7LL);
}

uint64_t sub_100007F10()
{
  return 8LL;
}

uint64_t sub_100007F18(uint64_t a1)
{
  return sub_100007F3C(a1, 28LL, 0xD00000000000001ALL, 0x80000001000CCB60LL, 646LL);
}

uint64_t sub_100007F3C(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  sub_100029834( a3,  v13,  0xD000000000000017LL,  (void *)0x80000001000CCB80LL,  0xD00000000000001FLL,  0x80000001000CC970LL,  a5);
  uint64_t result = swift_bridgeObjectRelease(v13);
  *(void *)(v5 + 72) = a1;
  return result;
}

void sub_100008020()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (unint64_t)&v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  Swift::String v10 = &v70[-v9];
  uint64_t v11 = type metadata accessor for OSSignposter(0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = 0LL;
  if (v3[17] > 7uLL) {
    return;
  }
  unint64_t v16 = v3[15];
  if ((v16 & 0x8000000000000000LL) != 0) {
    goto LABEL_72;
  }
  unint64_t v73 = v8;
  v74 = v10;
  unint64_t v77 = v4;
  uint64_t v78 = v5;
  uint64_t v15 = v3[5];
  unint64_t v8 = v15 & 0xC000000000000001LL;
  unint64_t v75 = v14;
  int v76 = (os_unfair_lock_s *)v13;
  int64_t v72 = &v70[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if ((v15 & 0xC000000000000001LL) != 0) {
    goto LABEL_73;
  }
  if (v16 >= *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }

  for (uint64_t i = swift_retain(*(void *)(v15 + 8 * v16 + 32)); ; uint64_t i = specialized _ArrayBuffer._getElementSlowPath(_:)( v16,  v15))
  {
    uint64_t v18 = *(void *)(i + 16);
    swift_release(i);
    uint64_t v19 = *(void *)(v3[19] + OBJC_IVAR___AUAAudioDevice_sampleManager);
    if (!v19) {
      goto LABEL_84;
    }
    if (*(_BYTE *)(v19 + 112) == 1)
    {
      unint64_t v2 = (unint64_t)v70;
      unint64_t v20 = *(unsigned int *)(v18 + 24);
      id v21 = *(os_unfair_lock_s **)(v19 + 104);
      uint64_t v1 = v21 + 4;
      swift_retain(v19);
      swift_retain(v21);
      os_unfair_lock_lock(v21 + 4);
      id v22 = 0LL;
      sub_10000AEAC(&v79);
      unint64_t v23 = v79;
      os_unfair_lock_unlock(v21 + 4);
      swift_release(v19);
      swift_release(v21);
      if (v23 < v20) {
        return;
      }
    }

    else
    {
      id v22 = 0LL;
    }

    unint64_t v24 = v3[15];
    if ((v24 & 0x8000000000000000LL) != 0) {
      goto LABEL_75;
    }
    if (v8)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v15);
    }

    else
    {
      if (v24 >= *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        os_unfair_lock_unlock(v1);
        __break(1u);
        return;
      }

      uint64_t v15 = *(void *)(v15 + 8 * v24 + 32);
      swift_retain(v15);
    }

    int v25 = *(_BYTE **)(v15 + 16);
    *((void *)v25 + 4) = v3[9];
    *((void *)v25 + 5) = v3[10];
    *((_DWORD *)v25 + 7) = 0;
    *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
    *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(_BYTE *)(v15 + 56) = 1;
    uint64_t v1 = *(os_unfair_lock_s **)(v3[19] + OBJC_IVAR___AUAAudioDevice_sampleManager);
    if (!v1) {
      goto LABEL_85;
    }
    uint64_t v26 = *((void *)v25 + 2);
    unint64_t v8 = *((void *)v25 + 5);
    unint64_t v27 = *((unsigned int *)v25 + 6);
    swift_retain(v1);
    sub_10000C2EC(v27);
    uint64_t v29 = v28;
    unint64_t v16 = swift_release(v1);
    unint64_t v30 = v3[8];
    if (!v30) {
      goto LABEL_76;
    }
    unint64_t v31 = v3[13];
    if (!v31) {
      goto LABEL_77;
    }
    if (v31 > v27)
    {
      swift_bridgeObjectRelease(v29);
      LODWORD(v1) = 0;
      goto LABEL_21;
    }

    uint64_t v1 = 0LL;
    unint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
    unint64_t v57 = v8 % v30;
    unint64_t v58 = v31 - 1;
    unint64_t v59 = v27 / v31;
LABEL_29:
    if (v56 == v59)
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }

    if (v55 >= *(void *)(v29 + 16)) {
      goto LABEL_67;
    }
    unint64_t v60 = *(void *)(v29 + 32 + 8 * v55);
    unint64_t v61 = v3[12];
    unint64_t v16 = (v60 * (unsigned __int128)v61) >> 64;
    if (!is_mul_ok(v60, v61)) {
      goto LABEL_68;
    }
    unint64_t v62 = v8 % v30;
    unint64_t v16 = (v8 % v30 * (unsigned __int128)v61) >> 64;
    if (!is_mul_ok(v8 % v30, v61)) {
      goto LABEL_69;
    }
    *(_DWORD *)(v26 + 28 * v55) = 0;
    if ((v60 * v61) >> 32) {
      goto LABEL_55;
    }
    unint64_t v27 = v62 * v61;
    *(_DWORD *)(v26 + 28 * v55 + 4) = v60 * v61;
    if ((v62 * v61) >> 32) {
      goto LABEL_55;
    }
    uint64_t v63 = 0LL;
    unint64_t v16 = v56 + 1;
    unint64_t v64 = v55 + 5;
    Swift::String v65 = (_DWORD *)(v26 + 32 + 28 * v55);
    unint64_t v66 = v58;
    while (1)
    {
      *(v65 - 6) = v27;
      *(void *)(v65 - 3) = 0LL;
      *(void *)(v65 - 5) = 0LL;
      unint64_t v2 = *(unsigned __int8 *)(v15 + 56);
      if ((_DWORD)v2 == 1)
      {
        BOOL v33 = __CFADD__(v62, v60);
        unint64_t v67 = v62 + v60;
        if (v33) {
          goto LABEL_63;
        }
        if (v67 >= v30)
        {
          uint64_t v68 = v3[9];
          BOOL v33 = __CFADD__(v68, v56);
          uint64_t v69 = v68 + v56;
          if (v33) {
            goto LABEL_64;
          }
          if (v30 < v57) {
            goto LABEL_65;
          }
          *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v69;
          *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v30 - v57;
          *(_BYTE *)(v15 + 56) = 0;
        }
      }

      BOOL v33 = __CFADD__(v8, v60);
      v8 += v60;
      if (v33)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }

      BOOL v33 = __CFADD__(v63, v60);
      v63 += v60;
      if (v33) {
        goto LABEL_59;
      }
      unint64_t v55 = v64 - 4;
      if (!v66) {
        break;
      }
      if (v55 >= *(void *)(v29 + 16)) {
        goto LABEL_60;
      }
      unint64_t v60 = *(void *)(v29 + 8 * v64);
      if (!is_mul_ok(v60, v61)) {
        goto LABEL_61;
      }
      unint64_t v62 = v8 % v30;
      unint64_t v2 = (v8 % v30 * (unsigned __int128)v61) >> 64;
      if (!is_mul_ok(v8 % v30, v61)) {
        goto LABEL_62;
      }
      unint64_t v2 = v60 * v61;
      *(v65 - 1) = 0;
      unint64_t v27 = (v60 * v61) >> 32;
      if (!v27)
      {
        unint64_t v27 = v62 * v61;
        *Swift::String v65 = v2;
        v65 += 7;
        ++v64;
        --v66;
        unint64_t v2 = (v62 * v61) >> 32;
        if (!v2) {
          continue;
        }
      }

      goto LABEL_55;
    }

    BOOL v33 = __CFADD__(v57, v63);
    v57 += v63;
    if (v33) {
      goto LABEL_70;
    }
    BOOL v33 = __CFADD__(v1, v63);
    uint64_t v1 = (os_unfair_lock_s *)((char *)v1 + v63);
    if (!v33) {
      break;
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    ;
  }

  ++v56;
  if (v16 != v59) {
    goto LABEL_29;
  }
  swift_bridgeObjectRelease(v29);
  if ((unint64_t)v1 >> 32)
  {
LABEL_55:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    goto LABEL_56;
  }

LABEL_21:
  *((_DWORD *)v25 + 7) = (_DWORD)v1;
  uint64_t v32 = v3[9];
  BOOL v33 = __CFADD__(v32, 8LL);
  uint64_t v34 = v32 + 8;
  unint64_t v8 = v77;
  if (v33) {
    goto LABEL_78;
  }
  v3[9] = v34;
  uint64_t v35 = v3[15];
  BOOL v33 = __CFADD__(v35, 1LL);
  char v36 = v35 + 1;
  if (v33) {
    goto LABEL_79;
  }
  v3[15] = v36 & 7;
  uint64_t v37 = *(void *)(v15 + 16);
  uint64_t v38 = *(unsigned int *)(v37 + 28);
  uint64_t v39 = v3[10];
  BOOL v33 = __CFADD__(v39, v38);
  uint64_t v40 = v39 + v38;
  if (v33) {
    goto LABEL_80;
  }
  v3[10] = v40;
  uint64_t v41 = v3[17];
  BOOL v33 = __CFADD__(v41, 1LL);
  uint64_t v42 = v41 + 1;
  if (!v33)
  {
    v3[17] = v42;
    *(_BYTE *)(v37 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    if (qword_100112910 != -1) {
      goto LABEL_82;
    }
    goto LABEL_26;
  }

    unint64_t v16 = 0;
    unint64_t v14 = 0LL;
LABEL_22:
    swift_bridgeObjectRelease_n(v4, 2LL);

    LOBYTE(v1) = v16;
  }

  else
  {
    __break(1u);
  }

  return (char)v1;
}

    int v25 = sub_10000AE14();
    uint64_t v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
    *(_BYTE *)unint64_t v27 = 37;
    *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v27 + 16) = 0xE000000000000000LL;
    *(void *)(v27 + 24) = 0xD000000000000012LL;
    *(void *)(v27 + 32) = 0x80000001000D2680LL;
    *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF340LL;
    *(void *)(v27 + 56) = 1266LL;
    swift_willThrow(v26);
    return v3;
  }

  if (v6 != 259)
  {
    if (v6 == 0xFFFF)
    {
      uint64_t result = sub_10006FA0C(1LL, v4, v3);
      if (*(void *)(result + 16))
      {
        uint64_t v13 = v11;
        unint64_t v14 = v12;
        uint64_t v3 = *(unsigned int *)(result + 32);
        swift_bridgeObjectRelease(result);
        *(void *)a1 = v13;
        *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v14;
        return v3;
      }

      goto LABEL_24;
    }

    goto LABEL_21;
  }

  uint64_t result = sub_10006FA5C(1LL, v4, v3);
  if (*(void *)(result + 16))
  {
    id v21 = v19;
    id v22 = v20;
    unint64_t v23 = *(unsigned int *)(result + 32);
    unint64_t v24 = *(unsigned __int16 *)(result + 36);
    swift_bridgeObjectRelease(result);
    *(void *)a1 = v21;
    *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v22;
    return v23 | (v24 << 32);
  }

LABEL_81:
  __break(1u);
LABEL_82:
  swift_once(&qword_100112910, sub_100082CB8);
LABEL_26:
  uint64_t v1 = v76;
  uint64_t v43 = sub_100008EC4((uint64_t)v76, (uint64_t)qword_100117220);
  unint64_t v27 = v75;
  int v25 = v72;
  (*(void (**)(_BYTE *, uint64_t, os_unfair_lock_s *))(v75 + 16))(v72, v43, v1);
  id v44 = *(void (**)(_BYTE *, uint64_t, unint64_t))(v78 + 16);
  unint64_t v2 = (unint64_t)v74;
  v44(v74, v3[20] + OBJC_IVAR___AUAStream_signpostID, v8);
  swift_retain_n(v3, 4LL);
  uint64_t v45 = swift_retain_n(v15, 2LL);
  id v22 = (os_log_s *)OSSignposter.logHandle.getter(v45);
  int v71 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v44((_BYTE *)v73, v2, v8);
    uint64_t v46 = swift_slowAlloc(42LL, -1LL);
    *(_DWORD *)uint64_t v46 = 134218752;
    unint64_t v79 = v3[17];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2048;
    unint64_t v47 = v3[10];
    swift_release(v3);
    unint64_t v79 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 14, v46 + 22);
    swift_release(v3);
    *(_WORD *)(v46 + 22) = 2048;
    unint64_t v48 = v3[9];
    swift_release(v3);
    unint64_t v79 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 24, v46 + 32);
    swift_release(v3);
    *(_WORD *)(v46 + 32) = 2048;
    unint64_t v49 = **(unsigned int **)(v15 + 16);
    swift_release(v15);
    unint64_t v79 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v46 + 34, v46 + 42);
    uint64_t v50 = swift_release(v15);
    unint64_t v51 = v73;
    os_signpost_id_t v52 = OSSignpostID.rawValue.getter(v50);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  (os_signpost_type_t)v71,  v52,  "AUAOutputTransferManager_nextBlockToQueue",  "blocksQueued %lu, nextSampleNumber %llu, nextFrameToQueue %llu, transferID %llu",  (uint8_t *)v46,  0x2Au);
    swift_slowDealloc(v46, -1LL, -1LL);

    unint64_t v53 = v77;
    id v54 = *(void (**)(unint64_t, unint64_t))(v78 + 8);
    v54(v2, v77);
    (*(void (**)(_BYTE *, os_unfair_lock_s *))(v75 + 8))(v25, v76);
    v54(v51, v53);
  }

  else
  {
LABEL_56:

    swift_release_n(v3, 4LL);
    swift_release_n(v15, 2LL);
    (*(void (**)(unint64_t, unint64_t))(v78 + 8))(v2, v8);
    (*(void (**)(_BYTE *, os_unfair_lock_s *))(v27 + 8))(v25, v1);
  }

  if (v13)
  {
LABEL_82:
    uint64_t v88 = v13;
    [v88 sampleRate];
    if (v89 != v17) {
      [v88 setSampleRate:v17];
    }
  }

  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v90 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v90, (uint64_t)qword_100117220);
  uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v92 = v120;
  v91(v120, &v1[OBJC_IVAR___AUAStream_signpostID], v4);
  unint64_t v93 = (uint64_t)v130;
  uint64_t v94 = v130;
  uint64_t v95 = (os_log_s *)OSSignposter.logHandle.getter(v94);
  LODWORD(v119) = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v91((char *)v121, v92, v4);
    uint64_t v118 = v4;
    v96 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v97 = swift_slowAlloc(32LL, -1LL);
    Swift::String v126 = v93;
    Swift::String v127 = v97;
    *(_DWORD *)v96 = 136315138;
    v98 = v94;
    uint64_t v99 = sub_100008E00(&qword_100115A78);
    os_signpost_id_t v100 = String.init<A>(describing:)(&v126, v99);
    unint64_t v102 = v101;
    Swift::String v126 = sub_1000164BC(v100, v101, &v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v96 + 4, v96 + 12);

    unint64_t v103 = swift_bridgeObjectRelease(v102);
    unint64_t v104 = v121;
    unsigned int v105 = OSSignpostID.rawValue.getter(v103);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v95,  (os_signpost_type_t)v119,  v105,  "AUAStream_publishFormats",  "format %s",  v96,  0xCu);
    swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1LL, -1LL);
    swift_slowDealloc(v96, -1LL, -1LL);

    uint64_t v106 = *(void (**)(char *, uint64_t))(v123 + 8);
    uint64_t v107 = v118;
    v106(v92, v118);
    v106((char *)v104, v107);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v92, v4);
  }

  uint64_t v108 = v122;
  if (v124)
  {
    if (a1 < 0) {
      v110 = a1;
    }
    else {
      v110 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    v111 = sub_10000AF08(0LL, &qword_1001156A0, &OBJC_CLASS___ASDStreamFormat_ptr);
    swift_bridgeObjectRetain(a1);
    v112 = _bridgeCocoaArray<A>(_:)(v110, v111);
    swift_bridgeObjectRelease(a1);
    a1 = v112;
  }

  else
  {
    uint64_t v109 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v109);
    sub_10000AF08(0LL, &qword_1001156A0, &OBJC_CLASS___ASDStreamFormat_ptr);
  }

  sub_10000AF08(0LL, &qword_1001156A0, &OBJC_CLASS___ASDStreamFormat_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [v108 setPhysicalFormats:isa];

  swift_beginAccess(&v130, &v127, 0LL, 0LL);
  uint64_t v114 = v130;
  [v108 setPhysicalFormat:v130];
}

    a1 = (unint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, _swiftEmptyArrayStorage);
    id v22 = a1;
    if (!v23)
    {
LABEL_48:
      unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL;
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }

uint64_t sub_1000087CC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v43[0] = 0LL;
  v43[1] = 0LL;
  char v44 = 1;
  unint64_t v15 = v3[16];
  if ((v15 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v12 = v3[5];
  if ((v12 & 0xC000000000000001LL) != 0)
  {
LABEL_8:
    uint64_t v39 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
    goto LABEL_5;
  }

  if (v15 >= *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v39 = *(char **)(v12 + 8 * v15 + 32);
  swift_retain(v39);
LABEL_5:
  uint64_t v40 = a1;
  if (qword_100112910 != -1) {
LABEL_10:
  }
    swift_once(&qword_100112910, sub_100082CB8);
  uint64_t v16 = sub_100008EC4(v10, (uint64_t)qword_100117220);
  uint64_t v37 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3[20] + OBJC_IVAR___AUAStream_signpostID, v6);
  swift_retain(v3);
  uint64_t v17 = swift_slowAlloc(32LL, -1LL);
  uint64_t v18 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v17 = 134218498;
  uint64_t v41 = v3[17];
  uint64_t v42 = v18;
  uint64_t v38 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 4, v17 + 12);
  *(_WORD *)(v17 + 12) = 2048;
  uint64_t v41 = v3[16];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 14, v17 + 22);
  swift_release(v3);
  *(_WORD *)(v17 + 22) = 2080;
  uint64_t v35 = v14;
  uint64_t v19 = sub_100008E00(&qword_100113420);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1000D3D30;
  *(void *)(v20 + 56) = &type metadata for Int32;
  *(void *)(v20 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v20 + 32) = a2;
  uint64_t v21 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v20);
  uint64_t v36 = v6;
  unint64_t v23 = v22;
  uint64_t v41 = sub_1000164BC(v21, v22, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 24, v17 + 32);
  uint64_t v24 = swift_bridgeObjectRelease(v23);
  int v25 = (os_log_s *)OSSignposter.logHandle.getter(v24);
  uint64_t v26 = static os_signpost_type_t.begin.getter();
  LOBYTE(v23) = v26;
  os_signpost_id_t v27 = OSSignpostID.rawValue.getter(v26);
  uint64_t v34 = v10;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  (os_signpost_type_t)v23,  v27,  "AUAOutputTransferManager_completeBlock",  "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s",  (uint8_t *)v17,  0x20u);
  uint64_t v28 = v39;
  uint64_t v29 = sub_100008B90(v39, v40, (uint64_t)v3, a2, (uint64_t)v43);
  uint64_t v30 = static os_signpost_type_t.end.getter(v29);
  os_signpost_type_t v31 = v30;
  os_signpost_id_t v32 = OSSignpostID.rawValue.getter(v30);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  v31,  v32,  "AUAOutputTransferManager_completeBlock",  "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s",  (uint8_t *)v17,  0x20u);

  swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v18, -1LL, -1LL);
  swift_slowDealloc(v17, -1LL, -1LL);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v36);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v34);
  return v43[0];
}

char *sub_100008B90(char *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *((void *)result + 2);
  if (*(void *)(v5 + 16) == a2)
  {
    uint64_t v7 = *(void *)(a3 + 136);
    BOOL v8 = v7 != 0;
    uint64_t v9 = v7 - 1;
    if (!v8)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }

    uint64_t v10 = result;
    *(void *)(a3 + 136) = v9;
    if (a4 != -536870165)
    {
      char v11 = result[56];
      *(_OWORD *)a5 = *(_OWORD *)(result + 40);
      *(_BYTE *)(a5 + 16) = v11;
      uint64_t v12 = *(unsigned int *)(v5 + 24);
      uint64_t v13 = *(void *)(v5 + 16);
      int v14 = *(_DWORD *)(a3 + 144);
      uint64_t result = (char *)[*((id *)result + 3) mutableBytes];
      if ((_DWORD)v12)
      {
        unint64_t v15 = result;
        uint64_t v16 = (unsigned int *)(v13 + 8);
        do
        {
          uint64_t result = (char *)memset(&v15[*v16], v14, *(v16 - 1));
          v16 += 7;
          --v12;
        }

        while (v12);
      }

      uint64_t v17 = *(void *)(a3 + 160);
      uint64_t v18 = *(void *)(v17 + OBJC_IVAR___AUAOutputStream_explicitFeedback);
      if (v18)
      {
        swift_retain(*(void *)(v17 + OBJC_IVAR___AUAOutputStream_explicitFeedback));
        sub_10008BB24();
        uint64_t result = (char *)swift_release(v18);
      }
    }

    *((void *)v10 + 5) = 0LL;
    *((void *)v10 + 6) = 0LL;
    v10[56] = 1;
    *(_BYTE *)(v5 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    uint64_t v19 = *(void *)(a3 + 128);
    BOOL v8 = __CFADD__(v19, 1LL);
    char v20 = v19 + 1;
    if (v8) {
      goto LABEL_13;
    }
    *(void *)(a3 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v20 & 7;
  }

  return result;
}

uint64_t (*sub_100008CB0(uint64_t a1))()
{
  uint64_t v2 = OSSignpostID.rawValue.getter(a1);
  unint64_t v3 = v1[12];
  if (HIDWORD(v3) || (unint64_t v4 = v1[8], HIDWORD(v4)) || (v5 = v1[11], HIDWORD(v5)))
  {
    char v8 = 2;
    uint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v8,  3455LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v6 = AUARealtimeWriteMixBlock(v2, v3, v4, v5, v1[7]);
    *(void *)(swift_allocObject(&unk_100102968, 24LL, 7LL) + 16) = v6;
    return sub_10000AE8C;
  }

  return result;
}

uint64_t variable initialization expression of USBDevice.activeConfig()
{
  return 0LL;
}

uint64_t variable initialization expression of LockDelay.units()
{
  return 0LL;
}

uint64_t variable initialization expression of AUAAudioDevice.configChangedHandlers()
{
  uint64_t v0 = sub_100008E00(&qword_100112950);
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  uint64_t v2 = sub_100008E00(&qword_100112958);
  uint64_t v3 = swift_allocObject(v2, 20LL, 7LL);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v1 + 16) = v3;
  *(void *)(v1 + 24) = _swiftEmptyArrayStorage;
  return v1;
}

uint64_t sub_100008E00(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t variable initialization expression of AUADSPAudioDevice._transportType()
{
  return 1970496032LL;
}

uint64_t variable initialization expression of ActiveStreamingInterface.function()
{
  return 0LL;
}

uint64_t variable initialization expression of ActiveClockSelector.curSelection()
{
  return 1LL;
}

uint64_t variable initialization expression of ActiveClockSource.signpostID()
{
  if (qword_1001128E8 != -1) {
    swift_once(&qword_1001128E8, sub_10001F4C0);
  }
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  uint64_t v1 = sub_100008EC4(v0, (uint64_t)qword_1001171E0);
  uint64_t v2 = OSSignposter.logHandle.getter(v1);
  return OSSignpostID.init(log:)(v2);
}

uint64_t sub_100008EC4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t variable initialization expression of ActiveClockSource.cachedSamplingRate()
{
  return 0LL;
}

uint64_t variable initialization expression of Endpoint.bRefresh()
{
  return 256LL;
}

double variable initialization expression of ControlInterface.interruptEP@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(a1 + 56) = 1LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

void *variable initialization expression of USBDevice.hrlDescriptorData()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of AUAStream.controlScope()
{
  return 1735159650LL;
}

unint64_t variable initialization expression of ActiveFeatureUnit.volumeOverrides()
{
  return sub_100009934((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of USBDevice.hrlConfig()
{
  return 0LL;
}

void sub_100008F44(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_100008F4C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_100008F60@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100008F74@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100008F88(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_100008FB8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100008FE4@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_100009008(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10000901C(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_100009030(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_100009044@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100009058(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000906C(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100009080(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100009094()
{
  return *v0 == 0;
}

uint64_t sub_1000090A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_1000090BC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL static AUAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_1000090E4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

unsigned __int8 *sub_1000090F8@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100009108(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_100009114@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_100009124()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009168()
{
}

Swift::Int sub_100009190(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000091D0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4 = sub_1000098FC(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void sub_10000920C(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_100009218@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_100009224( void *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 9)
  {
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 96;
    *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v9 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000003FLL;
    *(void *)(v9 + 32) = 0x80000001000CCA80LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CC970LL;
    *(void *)(v9 + 56) = 30LL;
    return (void *)swift_willThrow(v8);
  }

  if (a3 >> 61)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (!a4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (a6 < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t result = _swiftEmptyArrayStorage;
  if (!a6) {
    return result;
  }
  unint64_t v15 = 8 * a3 / a4;
  specialized ContiguousArray.reserveCapacity(_:)(a6);
  if (!is_mul_ok(v15, a2)) {
    goto LABEL_24;
  }
  if (((v15 * a2) & 0x8000000000000000LL) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  id v16 = sub_1000045A4(a1, v15 * a2);
  if (v6) {
    return (void *)swift_release(_swiftEmptyArrayStorage);
  }
  if (!is_mul_ok(v15, 0x1CuLL)) {
    goto LABEL_26;
  }
  uint64_t v33 = v15 * a2;
  uint64_t v36 = 28 * v15;
  if (((28 * v15) & 0x8000000000000000LL) == 0)
  {
    id v17 = v16;
    int v18 = 0;
    uint64_t v19 = &_mh_execute_header;
    unint64_t v34 = HIDWORD(v15);
    int v35 = v15;
    uint64_t v20 = 1LL;
    os_signpost_id_t v32 = a1;
    while (1)
    {
      uint64_t v21 = v20;
      id v22 = [objc_allocWithZone(NSMutableData) initWithLength:v36];
      if (!v22) {
        goto LABEL_28;
      }
      if (!v19) {
        goto LABEL_29;
      }
      unint64_t v23 = v22;
      id v24 = v17;
      id v25 = [v24 mutableBytes];
      id v26 = v23;
      id v27 = [v26 mutableBytes];
      if (v34) {
        goto LABEL_29;
      }
      *(_DWORD *)a5 = v18;
      *(void *)(a5 + _Block_object_dispose((const void *)(v30 - 136), 8) = v25;
      *(void *)(a5 + 16) = v27;
      *(_DWORD *)(a5 + 24) = v35;
      *(_DWORD *)(a5 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
      *(_OWORD *)(a5 + 32) = xmmword_1000D3D50;
      *(_BYTE *)(a5 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
      *(void *)(a5 + 56) = 0LL;
      *(void *)(a5 + 64) = 0LL;
      *(void *)(a5 + 72) = 0x7FFFFFFF00000000LL;
      *(_WORD *)(a5 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
      uint64_t v28 = type metadata accessor for AUATransferManagerTransferBlock();
      uint64_t v29 = swift_allocObject(v28, 57LL, 7LL);
      *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(void *)(v29 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(_BYTE *)(v29 + 56) = 1;
      *(void *)(v29 + 16) = a5;
      *(void *)(v29 + 24) = v24;
      *(void *)(v29 + 32) = v26;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v29);
      uint64_t v30 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      uint64_t v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v29);
      specialized ContiguousArray._endMutation()(v31);
      if (v21 == a6) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v20 = v21 + 1;
      id v17 = sub_1000045A4(v32, v33);
      a5 += 88LL;
      uint64_t v19 = (const mach_header_64 *)((char *)v19 - 1);
      int v18 = v21;
    }
  }

void *sub_100009540(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t result = _swiftEmptyArrayStorage;
  if (!a4) {
    return result;
  }
  specialized ContiguousArray.reserveCapacity(_:)(a4);
  if (!is_mul_ok(a2, 0x1CuLL)) {
    goto LABEL_15;
  }
  if (((28 * a2) & 0x8000000000000000LL) != 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    return result;
  }

  id v8 = [objc_allocWithZone(NSMutableData) initWithLength:28 * a2];
  if (v8)
  {
    id v9 = v8;
    int v10 = 0;
    char v11 = &_mh_execute_header;
    uint64_t v12 = 1LL;
    while (v11)
    {
      uint64_t v13 = v12;
      id v14 = a1;
      id v15 = [v14 mutableBytes];
      id v16 = v9;
      id v17 = [v16 mutableBytes];
      if (HIDWORD(a2)) {
        break;
      }
      *(_DWORD *)a3 = v10;
      *(void *)(a3 + _Block_object_dispose((const void *)(v30 - 136), 8) = v15;
      *(void *)(a3 + 16) = v17;
      *(void *)(a3 + 24) = a2;
      *(_OWORD *)(a3 + 32) = xmmword_1000D3D50;
      *(_BYTE *)(a3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
      *(void *)(a3 + 56) = 0LL;
      *(void *)(a3 + 64) = 0LL;
      *(void *)(a3 + 72) = 0x7FFFFFFF00000000LL;
      *(_WORD *)(a3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
      uint64_t v18 = type metadata accessor for AUATransferManagerTransferBlock();
      uint64_t v19 = swift_allocObject(v18, 57LL, 7LL);
      *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(_BYTE *)(v19 + 56) = 1;
      *(void *)(v19 + 16) = a3;
      *(void *)(v19 + 24) = v14;
      *(void *)(v19 + 32) = v16;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      uint64_t v20 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
      uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
      specialized ContiguousArray._endMutation()(v21);
      if (v13 == a4) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v12 = v13 + 1;
      id v9 = [objc_allocWithZone(NSMutableData) initWithLength:28 * a2];
      a3 += 88LL;
      char v11 = (const mach_header_64 *)((char *)v11 - 1);
      int v10 = v13;
      if (!v9) {
        goto LABEL_11;
      }
    }

    goto LABEL_17;
  }

LABEL_11:
  __break(1u);
  return _swiftEmptyArrayStorage;
}

    v22 += 3LL;
    uint64_t v21 = v23 - 1;
    uint64_t v20 = v76;
    if (!v21)
    {
      swift_bridgeObjectRelease(v76);
      id v9 = v69;
      uint64_t v19 = v70;
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease(v76);
LABEL_31:
  swift_bridgeObjectRelease(v42);
  id v22 = (uint64_t)v68;
  uint64_t result = (char *)[v68 inputStreams];
  os_signpost_id_t v32 = 0xD00000000000001ALL;
  id v27 = v70;
  if (!result) {
    goto LABEL_46;
  }
  unint64_t v49 = result;
  uint64_t v50 = sub_10001F430();
  unint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

  uint64_t result = (char *)[(id)v22 outputStreams];
  if (result)
  {
    os_signpost_id_t v52 = result;
    unint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v50);

    *(void *)&uint64_t v81 = v51;
    sub_1000929D8(v53);
    id v54 = v81;
    uint64_t v36 = (char *)v67;
    uint64_t v31 = (uint64_t)sub_10001EAE0(v54, (uint64_t)v36);
    swift_bridgeObjectRelease(v54);

    if (!((unint64_t)v31 >> 62))
    {
      unint64_t v55 = *(void *)((v31 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_35;
    }

  v23[0] = 0LL;
  v23[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(v23[1]);
  strcpy((char *)v23, "Unknown Clock ");
  HIBYTE(v23[1]) = -18;
  int v10 = __OFADD__(a1++, 1LL);
  if (v10)
  {
    __break(1u);
    goto LABEL_20;
  }

  id v22 = a1;
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(0LL);
  swift_bridgeObjectRelease(object);
  id v9 = v23[1];
LABEL_13:
  if ((a1 & 0x8000000000000000LL) != 0)
  {
LABEL_21:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_23:
    __break(1u);
    return result;
  }

  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_23;
  }

  id v14 = (void *)objc_opt_self(&OBJC_CLASS___ASDSelectorValue);
  id v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  id v16 = [v14 withValue:a1 andName:v15];

  if (!v16)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
  uint64_t v19 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v18 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v19 >= v18 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
  }
  uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v16);
  specialized Array._endMutation()(v20);
  return swift_release(v8);
}

      char v11 = 16711680;
      goto LABEL_12;
    }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    *(void *)(v16[6] + 8 * v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a2;
    *(_BYTE *)(v16[7] + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a1 & 1;
    uint64_t v18 = v16[2];
    uint64_t v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      _OWORD v16[2] = v20;
      return result;
    }

    goto LABEL_14;
  }

  sub_100096958(result, a3 & 1);
  uint64_t result = sub_100016BC0(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    int v10 = result;
    id v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

        __break(1u);
        JUMPOUT(0x10006952CLL);
      }
    }

    __break(1u);
    goto LABEL_11;
  }

  sub_10000AF84(v18, (uint64_t)&v20);
  int v5 = v21;
  uint64_t v6 = v22;
  sub_1000178EC(&v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v17,  sub_100075FC0,  0LL,  &type metadata for Data._Representation,  v5,  v6);

  v18[0] = v17;
  sub_100017A40(&v20);
  return *(void *)&v18[0];
}

        sub_100029834( 0xD000000000000015LL,  0x80000001000D05A0LL,  0x45746C7561666564LL,  (void *)0xEF292865646F4D55LL,  0xD000000000000020LL,  0x80000001000D0550LL,  112LL);
        uint64_t v0 = 0;

        return v0 & 1;
      }

      id v8 = sub_10000AE14();
      int v5 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
      *(_BYTE *)uint64_t v6 = 53;
      *(void *)(v6 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v6 + 16) = 0xE000000000000000LL;
      *(void *)(v6 + 24) = 0x45746C7561666564LL;
      *(void *)(v6 + 32) = 0xEF292865646F4D55LL;
      *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
      *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0550LL;
      unint64_t v7 = 104LL;
    }

    else
    {
      int v4 = sub_10000AE14();
      int v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
      *(_BYTE *)uint64_t v6 = 1;
      *(void *)(v6 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v6 + 16) = 0xE000000000000000LL;
      *(void *)(v6 + 24) = 0x45746C7561666564LL;
      *(void *)(v6 + 32) = 0xEF292865646F4D55LL;
      *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
      *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0550LL;
      unint64_t v7 = 103LL;
    }

    *(void *)(v6 + 56) = v7;
    swift_willThrow(v5);
  }

  return v0 & 1;
}

        v9 += 16;
        --v7;
      }

      while (v7);
      swift_bridgeObjectRetain(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        int v10 = sub_1000502D0(0LL, v10[2] + 1LL, 1, v10);
      }
      uint64_t v28 = v10[2];
      id v27 = v10[3];
      if (v28 >= v27 >> 1) {
        int v10 = sub_1000502D0((void *)(v27 > 1), v28 + 1, 1, v10);
      }
      v10[2] = v28 + 1;
      v10[v28 + 4] = v8;
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v8);
      uint64_t v29 = v10[2];
      if (v29 < 3)
      {
        int v5 = v10;
        goto LABEL_4;
      }

      uint64_t v30 = 0LL;
      uint64_t v31 = _swiftEmptyArrayStorage;
      os_signpost_id_t v32 = _swiftEmptyArrayStorage;
      while (2)
      {
        uint64_t v33 = v10[v30 + 4];
        if (!*(void *)(v33 + 16))
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          JUMPOUT(0x10009D6D8LL);
        }

        unint64_t v34 = *(_BYTE *)(v33 + 41);
        switch(v34)
        {
          case 2:
          case 3:
          case 4:
          case 5:
            swift_bridgeObjectRetain(v10[v30 + 4]);
            swift_bridgeObjectRelease(v32);
            os_signpost_id_t v32 = (void *)v33;
            goto LABEL_35;
          case 6:
          case 7:
          case 8:
          case 9:
            int v35 = *(void *)(v33 + 32);
            uint64_t v36 = *(_BYTE *)(v33 + 40);
            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
              uint64_t v31 = sub_1000502E4(0LL, v31[2] + 1LL, 1, v31);
            }
            uint64_t v38 = v31[2];
            uint64_t v37 = v31[3];
            if (v38 >= v37 >> 1) {
              uint64_t v31 = sub_1000502E4((void *)(v37 > 1), v38 + 1, 1, v31);
            }
            v31[2] = v38 + 1;
            uint64_t v39 = &v31[3 * v38];
            v39[4] = v35;
            *((_BYTE *)v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v36;
            *((_BYTE *)v39 + 41) = v34;
            v39[6] = _swiftEmptyArrayStorage;
            goto LABEL_35;
          case 12:
          case 13:
          case 14:
          case 15:
            uint64_t v40 = v31[2];
            swift_bridgeObjectRetain(v10[v30 + 4]);
            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) != 0)
            {
              if (!v40) {
                goto LABEL_66;
              }
            }

            else
            {
              uint64_t v31 = sub_10009D058(v31);
              if (!v40) {
                goto LABEL_66;
              }
            }

            if (v40 > v31[2]) {
              goto LABEL_65;
            }
            uint64_t v41 = &v31[3 * v40 - 3];
            char v44 = (void *)v41[6];
            uint64_t v42 = v41 + 6;
            uint64_t v43 = v44;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
            *uint64_t v42 = v44;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v43 = sub_1000502D0(0LL, v43[2] + 1LL, 1, v43);
              *uint64_t v42 = v43;
            }

            unint64_t v47 = v43[2];
            uint64_t v46 = v43[3];
            if (v47 >= v46 >> 1)
            {
              uint64_t v43 = sub_1000502D0((void *)(v46 > 1), v47 + 1, 1, v43);
              *uint64_t v42 = v43;
            }

            void v43[2] = v47 + 1;
            v43[v47 + 4] = v33;
LABEL_35:
            if (v29 != ++v30) {
              continue;
            }
            swift_bridgeObjectRelease(v10);
            if (v32[2] && v31[2])
            {
              swift_bridgeObjectRetain(v32);
              swift_bridgeObjectRetain(v31);
              if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) != 0) {
                unint64_t v48 = v53;
              }
              else {
                unint64_t v48 = sub_1000501C4(0LL, v53[2] + 1LL, 1, v53);
              }
              uint64_t v50 = v48[2];
              unint64_t v49 = v48[3];
              if (v50 >= v49 >> 1) {
                unint64_t v48 = sub_1000501C4((void *)(v49 > 1), v50 + 1, 1, v48);
              }
              v48[2] = v50 + 1;
              unint64_t v53 = v48;
              unint64_t v51 = &v48[2 * v50];
              v51[4] = v32;
              v51[5] = v31;
            }

            swift_bridgeObjectRelease(v32);
            int v5 = v31;
            break;
          default:
            goto LABEL_35;
        }

        break;
      }

    swift_release(v34);
    if (v17 == v30) {
      goto LABEL_58;
    }
  }

  uint64_t v114 = v34;
  unint64_t v102 = (char *)v17;
  uint64_t v38 = qword_100112940;
  id v125 = v36;
  swift_bridgeObjectRetain();
  if (v38 != -1) {
    swift_once(&qword_100112940, sub_1000C7494);
  }
  uint64_t v39 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v39, (uint64_t)qword_1001172B0);
  uint64_t v40 = v117;
  uint64_t v41 = *(uint64_t (**)(unint64_t, const char *, uint64_t))(v117 + 16);
  uint64_t v42 = v118;
  uint64_t v43 = v41(v7, v110, v118);
  char v44 = (os_log_s *)OSSignposter.logHandle.getter(v43);
  uint64_t v45 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v46 = v116;
    v41(v116, (const char *)v7, v42);
    unint64_t v47 = v10;
    unint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v48 = v99.n128_u32[0];
    *(void *)&uint64_t v132 = ObjectType;
    unint64_t v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v100, v48 + 4, v48 + 12);
    uint64_t v50 = OSSignpostID.rawValue.getter(v49);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v44,  v45,  v50,  "EndpointClock_setCurSampleRate",  "samplingRate %lu",  v48,  0xCu);
    unint64_t v51 = v48;
    int v10 = v47;
    swift_slowDealloc(v51, -1LL, -1LL);

    os_signpost_id_t v52 = *(void (**)(unint64_t, uint64_t))(v40 + 8);
    v52(v7, v42);
    v52(v46, v42);
  }

  else
  {

    (*(void (**)(unint64_t, uint64_t))(v40 + 8))(v7, v42);
  }

  *(void *)&uint64_t v132 = 0LL;
  *((void *)&v132 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease(*((void *)&v132 + 1));
  *(void *)&uint64_t v132 = 0xD000000000000022LL;
  *((void *)&v132 + 1) = v109;
  *(void *)&uint64_t v129 = ObjectType;
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v53._object;
  String.append(_:)(v53);
  swift_bridgeObjectRelease(object);
  unint64_t v55 = *((void *)&v132 + 1);
  sub_100029834( v132,  *((uint64_t *)&v132 + 1),  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001ELL,  v108,  241LL);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = *(void *)(v125 + 16);
  if (!v56)
  {
    uint64_t v82 = v125;
    swift_bridgeObjectRelease(v106);
LABEL_45:
    int v4 = v120;
    swift_bridgeObjectRelease(v82);
    Swift::String v83 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v83, 0LL, 0LL);
    *(_BYTE *)v84 = 13;
    *(void *)(v84 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v84 + 16) = 0xE000000000000000LL;
    *(void *)(v84 + 24) = 0x6C706D6153727563LL;
    *(void *)(v84 + 32) = 0xEF65746152676E69LL;
    int v85 = (unint64_t)v101 | 0x8000000000000000LL;
    *(void *)(v84 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v84 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v85;
    *(void *)(v84 + 56) = 243LL;
    swift_willThrow(v20);
    swift_release(v114);
    swift_release(v4);
    swift_unknownObjectRelease(v115, v86);
    unint64_t v23 = ObjectType;
    LOBYTE(v4) = v107;
    id v22 = "AUASDCore/ActiveEndpoint.swift";
    goto LABEL_46;
  }

  swift_bridgeObjectRetain();
  unint64_t v57 = 32LL;
  while (1)
  {
    v128 = v56;
    unint64_t v58 = *(unsigned __int8 *)(v125 + v57 + 2);
    unint64_t v59 = *(unsigned __int16 *)(v125 + v57);
    *((void *)&v133 + 1) = &type metadata for USBDescriptorControl;
    uint64_t v124 = v58;
    BYTE2(v132) = v58;
    id v123 = v59;
    LOWORD(v132) = v59;
    unint64_t v60 = Mirror.init(reflecting:)(&v132);
    id v17 = (unint64_t)v10;
    uint64_t v6 = (void *)Mirror.children.getter(v60);
    int v4 = v6[2];
    int v10 = (char *)v6[3];
    int v3 = (const char *)v6[4];
    unint64_t v61 = v6[5];
    uint64_t ObjectType = swift_getObjectType(v4);
    swift_unknownObjectRetain(v4);
    swift_unknownObjectRetain(v3);
    unint64_t v62 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v10);
    uint64_t v63 = swift_getObjectType(v3);
    uint64_t v18 = v3;
    if (v62 != dispatch thunk of _AnyIndexBox._typeID.getter(v63, v61))
    {
      __break(1u);
      goto LABEL_51;
    }

    unint64_t v64 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v3, v61, ObjectType, v10);
    swift_unknownObjectRelease(v3, v65);
    if ((v64 & 1) != 0)
    {
      swift_unknownObjectRelease(v4, v66);
      v133 = 0u;
      uint64_t v134 = 0u;
      uint64_t v132 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v4, v10);
      uint64_t v132 = v129;
      v133 = v130;
      uint64_t v134 = v131;
      swift_unknownObjectRelease(v4, v67);
    }

    swift_release(v6);
    int v10 = (char *)v17;
    (*(void (**)(unint64_t, uint64_t))(v126 + 8))(v17, v127);
    if (!*((void *)&v134 + 1))
    {
      sub_100058DF4((uint64_t)&v132);
      goto LABEL_29;
    }

    uint64_t v68 = *((void *)&v132 + 1);
    uint64_t v69 = v132;
    sub_100017A40(v122);
    if (!v68) {
      goto LABEL_29;
    }
    if (v69 == 0xD000000000000013LL && v68 == v119) {
      break;
    }
    uint64_t v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v68, 0xD000000000000013LL, v121 | 0x8000000000000000LL, 0LL);
    swift_bridgeObjectRelease(v68);
    if ((v70 & 1) != 0)
    {
      int v71 = v125;
      uint64_t v68 = v125;
      goto LABEL_41;
    }

uint64_t sub_100009788(id a1, id a2, void *a3)
{
  if ([a1 direction] == 1768845428)
  {
    uint64_t v7 = type metadata accessor for AUAInputTransferManager();
    uint64_t v8 = swift_allocObject(v7, 184LL, 7LL);
    a1 = a1;
    a2 = a2;
    id v9 = a3;
    a3 = (void *)v8;
    sub_100004A00((char *)a1, (char *)a2, v9);
    if (!v3) {
      return v8;
    }
    swift_unexpectedError(v3, "AUASDCore/TransferManager.swift", 31LL, 1LL, 84LL);
    __break(1u);
  }

  uint64_t v10 = type metadata accessor for AUAOutputTransferManager();
  uint64_t v8 = swift_allocObject(v10, 168LL, 7LL);
  sub_1000077A0(a1, (char *)a2, a3);
  if (!v3) {
    return v8;
  }
  uint64_t result = swift_unexpectedError(v3, "AUASDCore/TransferManager.swift", 31LL, 1LL, 88LL);
  __break(1u);
  return result;
}

uint64_t sub_1000098FC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

unint64_t sub_100009934(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100008E00(&qword_100113498);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (_WORD *)(a1 + 40); ; i += 8)
    {
      uint64_t v5 = *((void *)i - 1);
      __int16 v6 = *i;
      unint64_t result = sub_100016BC0(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_WORD *)(v3[7] + 2 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1LL);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t type metadata accessor for AUATransferManagerTransferBlock()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore31AUATransferManagerTransferBlock);
}

uint64_t type metadata accessor for AUATransferManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore18AUATransferManager);
}

uint64_t type metadata accessor for AUAInputTransferManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore23AUAInputTransferManager);
}

uint64_t type metadata accessor for AUAOutputTransferManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore24AUAOutputTransferManager);
}

uint64_t sub_100009A88(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

void type metadata accessor for IOUSBBOSDescriptor(uint64_t a1)
{
}

__n128 sub_100009AB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void type metadata accessor for IOUSBDeviceDescriptor(uint64_t a1)
{
}

uint64_t sub_100009ADC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for IOUSBConfigurationDescriptor(uint64_t a1)
{
}

__n128 sub_100009B04(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100009B18(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009B38(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2_Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  return result;
}

void type metadata accessor for IOUSBHostIsochronousTransaction(uint64_t a1)
{
}

uint64_t sub_100009B7C(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ASEndpointDescriptor(uint64_t a1)
{
}

uint64_t sub_100009BA4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ValidFrequencyRangeDescriptor(uint64_t a1)
{
}

__n128 sub_100009BCC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 15) = *(void *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100009BE0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 23)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009C00(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 22) = 0;
    *(_WORD *)(result + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 23) = v3;
  return result;
}

void type metadata accessor for ADC3ASInterfaceDescriptor(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for ADC3ClusterDescriptorSegment(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for ADC2ASEndpointDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2DecoderDescriptor(uint64_t a1)
{
}

uint64_t sub_100009C7C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009C9C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  return result;
}

void type metadata accessor for ADC2EncoderDescriptor(uint64_t a1)
{
}

uint64_t sub_100009CDC(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC2FormatTypeIDescriptor(uint64_t a1)
{
}

__n128 sub_100009D04(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for ADC2AudioStreamingInterfaceDescriptor(uint64_t a1)
{
}

_DWORD *sub_100009D24(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

void type metadata accessor for ADC1ASEndpointDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatSpecificHeaderDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ConnectorsDescriptor(uint64_t a1)
{
}

uint64_t sub_100009D74(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009D94(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v3;
  return result;
}

void type metadata accessor for ADC3ACInterfaceHeader(uint64_t a1)
{
}

void type metadata accessor for ADC2AudioControlInterfaceHeaderDescriptor(uint64_t a1)
{
}

void type metadata accessor for AudioInterfaceProtocol(uint64_t a1)
{
}

uint64_t sub_100009DFC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009E1C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

void type metadata accessor for ADC1ASStdEndpointExt(uint64_t a1)
{
}

void type metadata accessor for IOUSBInterfaceAssociationDescriptor(uint64_t a1)
{
}

void type metadata accessor for AudioFunctionProtocol(uint64_t a1)
{
}

void type metadata accessor for IOUSBInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor(uint64_t a1)
{
}

void type metadata accessor for IOUSBSuperSpeedEndpointCompanionDescriptor(uint64_t a1)
{
}

uint64_t sub_100009EC0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100009EE0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 7) = v3;
  return result;
}

void type metadata accessor for IOUSBEndpointDescriptor(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for AUAZTSWrap(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AUAZTSWrap(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AUAZTSWrap(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AUAZTSWrap()
{
  return &type metadata for AUAZTSWrap;
}

__n128 initializeWithTake for MixerUnit(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_100009FAC(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000A000(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4_Block_object_dispose((const void *)(v30 - 136), 8) = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for AUATransferManagerRTTransferBlock(uint64_t a1)
{
}

void type metadata accessor for ChannelRelationship(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelAmbisonicSegment(uint64_t a1)
{
}

_DWORD *sub_10000A0A8(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_10000A0B4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A0D4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for ADC4ClusterEndBlockSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioStreamingSelfDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor(uint64_t a1)
{
}

__n128 sub_10000A14C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for ADC4ConnectorEntityDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment(uint64_t a1)
{
}

uint64_t sub_10000A1EC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionEN50322_2Segment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader(uint64_t a1)
{
}

void *sub_10000A23C(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

void type metadata accessor for ADC4TerminalCompanionDescriptorHeader(uint64_t a1)
{
}

__n128 sub_10000A264(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000A278(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A298(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 34) = v3;
  return result;
}

void type metadata accessor for ADC4PowerDomainEntityDescriptor(uint64_t a1)
{
}

__n128 sub_10000A2DC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClockSelectorDescriptor(uint64_t a1)
{
}

uint64_t sub_10000A318(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A338(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 22) = v3;
  return result;
}

void type metadata accessor for ADC4ClockSourceDescriptor(uint64_t a1)
{
}

__n128 sub_10000A37C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000A390(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A3B0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 36) = v3;
  return result;
}

void type metadata accessor for ADC4ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4EffectUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000A41C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A43C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 14) = v3;
  return result;
}

void type metadata accessor for ADC4FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4SelectorUnitDescriptor(uint64_t a1)
{
}

__n128 sub_10000A494(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000A4A8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A4C8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v3;
  return result;
}

void type metadata accessor for ADC4MixerUnitDescriptor(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ClockRateRange(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ClockRateRange(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ADC4OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4InputTerminalDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC4InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioControlSelfDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for tIOUSBHostConnectionSpeed(uint64_t a1)
{
}

void type metadata accessor for ADC1ASFormatTypeDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatTypeIIIDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatTypeIDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ASInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1SelectorUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1MixerUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ACInterfaceHeaderDescriptor(uint64_t a1)
{
}

uint64_t sub_10000A6F8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A718(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

void type metadata accessor for ADC3ClusterClusterDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3PowerDomainDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3SRConverterUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000A780(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A7A0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    *(_WORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 11) = v3;
  return result;
}

void type metadata accessor for ADC3ClockMultiplierDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSourceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3EffectUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3SelectorUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3SelectorUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitDescriptor(uint64_t a1)
{
}

__n128 sub_10000A8D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000A8E8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000A908(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 1_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 19) = v3;
  return result;
}

void type metadata accessor for ADC3OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelInformationSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterDescriptorSegmentHeader(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC4ExtendedDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for USBDescriptorControl(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ClusterEndSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelInformationSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterDescriptorSegmentHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3HighCapabilityDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADCClassSpecificDescriptorHeader(uint64_t a1)
{
}

_WORD *initializeBufferWithCopyOfBuffer for ErrataKey(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for IOUSBDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for tIOUSBDescriptorType(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockMultiplierDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSourceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ProcessingUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2EffectUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2SRConverterUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2SelectorUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2SelectorUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000ABAC(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 4;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0LL;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }

  return 0LL;
}

uint64_t sub_10000AC1C(_WORD *a1, int a2, int a3)
{
  else {
    int v3 = 4;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (!a2) {
    return ((uint64_t (*)(void))((char *)sub_10000AC94 + 4 * byte_1000D3D95[v4]))();
  }
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10000AC74 + 4 * byte_1000D3D90[v4]))();
}

uint64_t sub_10000AC74(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000AC94(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_10000AC9C(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000ACA4(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10000ACAC(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10000ACB4(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

void type metadata accessor for ADC2MixerUnitDescriptorPart3(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2OutputTerminalDescriptor(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for ADC4ClusterDescriptorSegment(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000AD24(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000AD44(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 17) = v3;
  return result;
}

void type metadata accessor for ADC2InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointUsageType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointSynchronizationType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointDirection(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_10000ADE8()
{
  return sub_10000B6D4( &qword_1001133F0,  (uint64_t (*)(uint64_t))type metadata accessor for AudioInterfaceProtocol,  (uint64_t)&unk_1000D550C);
}

unint64_t sub_10000AE14()
{
  unint64_t result = qword_100113418;
  if (!qword_100113418)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AUAError, &type metadata for AUAError);
    atomic_store(result, (unint64_t *)&qword_100113418);
  }

  return result;
}

_OWORD *sub_10000AE58(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000AE68()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10000AE8C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10000AEAC@<X0>(void *a1@<X8>)
{
  return sub_10000C294(v1, a1);
}

uint64_t sub_10000AEC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_10000AEE8()
{
  return sub_100006C04(*(void *)(v0 + 16));
}

uint64_t sub_10000AEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000AF00(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10000AF08(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10000AF40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008E00(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000AF84(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10000AF9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100008E00(&qword_1001134A8);
    __int128 v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (uint64_t i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_100016BC0(v5);
      if ((v8 & 1) != 0) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1LL);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

unint64_t sub_10000B070(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100008E00(&qword_1001134A0);
  __int128 v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t result = sub_100016BF0(v4 | (v5 << 8));
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }

  uint64_t v9 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v10 = (_BYTE *)(v3[6] + 2 * result);
    *BOOL v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    id v14 = v9 + 16;
    int v4 = *v9;
    int v5 = v9[1];
    uint64_t v15 = *((void *)v9 + 1);
    swift_bridgeObjectRetain(v6);
    unint64_t result = sub_100016BF0(v4 | (v5 << 8));
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for AudioClassRange32bit(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AudioClassRange32bit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for Layout3SubRange(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for AudioClassRange16bit(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AudioClassRange16bit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 6) = v3;
  return result;
}

void type metadata accessor for Layout2SubRange(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for AudioClassRange8bit(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  return 0LL;
}

uint64_t storeEnumTagSinglePayload for AudioClassRange8bit(uint64_t result, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)unint64_t result = a2 - 1;
    *(_BYTE *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(_BYTE *)(result + 3) = 0;
    }
  }

  return result;
}

void type metadata accessor for Layout1SubRange(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorControl(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSourceControl(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC3OutputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC3InputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSourceControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC2OutputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC2InputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitControl(uint64_t a1)
{
}

__n128 sub_10000B420(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20_Block_object_dispose((const void *)(v30 - 136), 8) = v11;
  *(__n128 *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t sub_10000B45C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 224)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B47C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 216) = 0LL;
    *(_OWORD *)(result + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 224) = v3;
  return result;
}

void type metadata accessor for AudioServerPlugInIOCycleInfo(uint64_t a1)
{
}

__n128 sub_10000B4F4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000B508(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for C46L06HVCICommandResponse(uint64_t a1)
{
}

__n128 initializeWithTake for StreamingInterface(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000B56C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_10000B5B4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AudioServerPlugInHostInterface(uint64_t a1)
{
}

uint64_t sub_10000B610(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000B630(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  return result;
}

void type metadata accessor for IOUSBDeviceRequest(uint64_t a1)
{
}

void type metadata accessor for ADC2ClusterControlCURPB(uint64_t a1)
{
}

void type metadata accessor for IOUSBHostIsochronousTransactionOptions(uint64_t a1)
{
}

void type metadata accessor for ADC4PowerDomainEntryExitTime(uint64_t a1)
{
}

uint64_t sub_10000B6A8()
{
  return sub_10000B6D4( &qword_100113568,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBHostIsochronousTransactionOptions,  (uint64_t)&unk_1000D5980);
}

uint64_t sub_10000B6D4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10000B714()
{
  return sub_10000B6D4( &qword_100113570,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBHostIsochronousTransactionOptions,  (uint64_t)&unk_1000D5950);
}

uint64_t sub_10000B740()
{
  return sub_10000B6D4( &qword_100113578,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBHostIsochronousTransactionOptions,  (uint64_t)&unk_1000D59A8);
}

uint64_t sub_10000B76C()
{
  return sub_10000B6D4( &qword_100113580,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBHostIsochronousTransactionOptions,  (uint64_t)&unk_1000D59E0);
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AudioClassRange32bit(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

void type metadata accessor for AudioObjectPropertyAddress(uint64_t a1)
{
}

void type metadata accessor for AudioServerPlugInIOCycleInfo.__Unnamed_union___Anonymous_field5(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Endpoint(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for ClockSource(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000B82C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

void type metadata accessor for AudioTimeStamp(uint64_t a1)
{
}

void type metadata accessor for AudioTimeStampFlags(uint64_t a1)
{
}

__n128 sub_10000B874(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for SMPTETime(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeFlags(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeType(uint64_t a1)
{
}

void sub_10000B8C4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10000B9B8()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100017A94(v0, qword_1001171B8);
  sub_100008EC4(v0, (uint64_t)qword_1001171B8);
  return OSSignposter.init(subsystem:category:)( 0xD000000000000013LL,  0x80000001000CC390LL,  0x6165727453415541LL,  0xE90000000000006DLL);
}

uint64_t sub_10000BA30()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10000BA5C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v13 = sub_100008EC4(v9, (uint64_t)qword_1001171B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v33 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( v8,  v3 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID,  v5);
  swift_retain_n(a2, 4LL);
  swift_retain_n(v3, 2LL);
  uint64_t v14 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v14 = 134218496;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v3 + 16);
  uint64_t v34 = v5;
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  if (Strong)
  {
    char v16 = Strong;
    [Strong samplingRate];
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v35 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 4, v14 + 12);
  swift_release_n(v3, 2LL);
  *(_WORD *)(v14 + 12) = 2048;
  uint64_t v19 = *(void *)(a2 + 96);
  swift_release(a2);
  uint64_t v35 = v19;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 14, v14 + 22);
  swift_release(a2);
  *(_WORD *)(v14 + 22) = 2048;
  uint64_t v20 = *(void *)(a2 + 104);
  swift_release(a2);
  uint64_t v35 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 24, v14 + 32);
  uint64_t v21 = swift_release(a2);
  id v22 = (os_log_s *)OSSignposter.logHandle.getter(v21);
  uint64_t v23 = static os_signpost_type_t.begin.getter();
  LOBYTE(v19) = v23;
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter(v23);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  (os_signpost_type_t)v19,  v24,  "AUASampleManager_prepareSampleManager",  "samplingRate %f, transfersPerMS %lu, MSPerTransfer %lu",  (uint8_t *)v14,  0x20u);
  sub_10000BD60(v3, (os_unfair_lock_s *)a2, v30);
  uint64_t v26 = static os_signpost_type_t.end.getter(v25);
  LOBYTE(v19) = v26;
  os_signpost_id_t v27 = OSSignpostID.rawValue.getter(v26);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  (os_signpost_type_t)v19,  v27,  "AUASampleManager_prepareSampleManager",  "samplingRate %f, transfersPerMS %lu, MSPerTransfer %lu",  (uint8_t *)v14,  0x20u);

  swift_slowDealloc(v14, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v12, v32);
}

void sub_10000BD60(uint64_t a1, os_unfair_lock_s *a2, void *a3)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (!Strong) {
    goto LABEL_6;
  }
  __int128 v8 = Strong;
  [Strong samplingRate];
  double v10 = v9;

  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  if (v10 <= -1.0)
  {
    __break(1u);
    goto LABEL_34;
  }

  if (v10 >= 1.84467441e19)
  {
    __break(1u);
LABEL_6:
    double v10 = 0.0;
  }

  unint64_t v11 = (unint64_t)v10;
  unint64_t v12 = *(void *)&a2[26]._os_unfair_lock_opaque;
  if (!is_mul_ok((unint64_t)v10, v12))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  unint64_t v13 = *(void *)&a2[24]._os_unfair_lock_opaque;
  if (!is_mul_ok(v13, 0x3E8uLL))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  unint64_t v14 = 1000 * v13;
  if (!(1000 * v13))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  unint64_t v15 = v11 * v12;
  unint64_t v16 = v11 * v12 / v14;
  *(void *)(a1 + 32) = v16;
  if (!is_mul_ok(v16, v14))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  unint64_t v17 = v16 * v14;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    goto LABEL_38;
  }
  if (HIWORD(v19))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (!v13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  unint64_t v20 = (v19 << 16) / v13;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v20;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = 8 * v13;
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v16;
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v20;
  uint64_t v21 = *(const IOUSBEndpointDescriptor **)&a2[4]._os_unfair_lock_opaque;
  int v22 = IOUSBGetEndpointSynchronizationType(v21);
  if (!v22)
  {
    else {
      int v22 = 3;
    }
  }

  *(_BYTE *)(a1 + 112) = v22 == 1;
  swift_beginAccess(a1 + 96, v34, 1LL, 0LL);
  uint64_t v23 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v23);
  swift_unknownObjectWeakAssign(a1 + 24, a3);
  os_signpost_id_t v24 = [a3 physicalFormat];
  if (!v24) {
    goto LABEL_28;
  }
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for AUAStreamFormat();
  uint64_t v27 = swift_dynamicCastClass(v25, v26);
  if (!v27) {
    goto LABEL_27;
  }
  uint64_t v28 = *(void *)(v27 + OBJC_IVAR___AUAStreamFormat_altSetting);
  swift_retain(v28);

  if (!v28) {
    goto LABEL_28;
  }
  uint64_t v25 = *(void **)(v28 + 112);
  swift_retain(v25);
  swift_release(v28);
  if (!v25) {
    goto LABEL_28;
  }
  a2 = (os_unfair_lock_s *)v25[13];
  swift_release(v25);
  unint64_t v29 = *(void *)(a1 + 56);
  if (!v29)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  unint64_t v30 = (unint64_t)a2 / v29;
  unint64_t v31 = *(void *)(a1 + 64);
  if (!is_mul_ok(v30, v31))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  unint64_t v32 = v30 * v31;
  if ((v32 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_27:

LABEL_28:
    unint64_t v32 = 0LL;
  }

  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v32;
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    uint64_t v33 = *(os_unfair_lock_s **)(a1 + 104);
    a2 = v33 + 4;
    swift_retain(v33);
    os_unfair_lock_lock(v33 + 4);
    sub_10000C01C((void *)a1);
    if (v3)
    {
LABEL_44:
      os_unfair_lock_unlock(a2);
      __break(1u);
      return;
    }

    os_unfair_lock_unlock(v33 + 4);
    swift_release(v33);
  }

void sub_10000C01C(void *a1)
{
  unint64_t v2 = a1[9];
  if (v2 >> 61)
  {
LABEL_30:
    __break(1u);
    return;
  }

  unint64_t v4 = 8 * v2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 2);
  uint64_t v32 = v1;
  if (!Strong) {
    goto LABEL_7;
  }
  uint64_t v6 = (void *)Strong;
  uint64_t v7 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
  uint64_t v8 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
  swift_unknownObjectRetain(v7);

  if (!v7
    || (uint64_t ObjectType = swift_getObjectType(v7),
        double v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8),
        swift_unknownObjectRelease(v7, v11),
        !v10))
  {
LABEL_7:
    if (v4) {
      goto LABEL_8;
    }
    return;
  }

  uint64_t v12 = *(void *)&v10[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v12)
  {
    BOOL v13 = sub_10001645C(29LL, v12);

    v4 >>= v13;
    goto LABEL_7;
  }

  if (v4)
  {
LABEL_8:
    unint64_t v14 = a1 + 12;
    while (1)
    {
      uint64_t v15 = a1[5];
      uint64_t v16 = a1[6];
      BOOL v17 = __CFADD__(v16, v15);
      unint64_t v18 = v16 + v15;
      if (v17) {
        break;
      }
      a1[6] = v18;
      uint64_t v19 = a1[4];
      if (v18 < 0x3E80001)
      {
        swift_beginAccess(a1 + 12, v31, 33LL, 0LL);
        uint64_t v27 = (void *)*v14;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
        *unint64_t v14 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v27 = sub_10004F1A4(0LL, v27[2] + 1LL, 1, v27);
          *unint64_t v14 = v27;
        }

        unint64_t v30 = v27[2];
        unint64_t v29 = v27[3];
        if (v30 >= v29 >> 1)
        {
          uint64_t v27 = sub_10004F1A4((void *)(v29 > 1), v30 + 1, 1, v27);
          *unint64_t v14 = v27;
        }

        v27[2] = v30 + 1;
        v27[v30 + 4] = v19;
        swift_endAccess(v31);
        if (!--v4) {
          return;
        }
      }

      else
      {
        BOOL v17 = __CFADD__(v19, 1LL);
        uint64_t v20 = v19 + 1;
        if (v17) {
          goto LABEL_28;
        }
        swift_beginAccess(a1 + 12, v31, 33LL, 0LL);
        uint64_t v21 = (void *)*v14;
        char v22 = swift_isUniquelyReferenced_nonNull_native(*v14);
        *unint64_t v14 = v21;
        if ((v22 & 1) == 0)
        {
          uint64_t v21 = sub_10004F1A4(0LL, v21[2] + 1LL, 1, v21);
          *unint64_t v14 = v21;
        }

        unint64_t v24 = v21[2];
        unint64_t v23 = v21[3];
        if (v24 >= v23 >> 1)
        {
          uint64_t v21 = sub_10004F1A4((void *)(v23 > 1), v24 + 1, 1, v21);
          *unint64_t v14 = v21;
        }

        v21[2] = v24 + 1;
        v21[v24 + 4] = v20;
        swift_endAccess(v31);
        unint64_t v25 = a1[6];
        BOOL v17 = v25 >= 0x3E80000;
        unint64_t v26 = v25 - 65536000;
        if (!v17) {
          goto LABEL_29;
        }
        a1[6] = v26;
        if (!--v4) {
          return;
        }
      }
    }

    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

uint64_t sub_10000C294@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_beginAccess(a1 + 96, v5, 0LL, 0LL);
  *a2 = *(void *)(*(void *)(a1 + 96) + 16LL);
  return result;
}

void sub_10000C2EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  double v10 = (char *)&v39 - v9;
  uint64_t v11 = _swiftEmptyArrayStorage;
  char v44 = _swiftEmptyArrayStorage;
  if (*(_BYTE *)(v2 + 112) == 1)
  {
    uint64_t v12 = *(os_unfair_lock_s **)(v2 + 104);
    __chkstk_darwin(v8);
    *(&v39 - 2) = v2;
    *(&v39 - 1) = a1;
    swift_retain(v12);
    os_unfair_lock_lock(v12 + 4);
    sub_1000179B8((unint64_t *)&v42);
    uint64_t v11 = v42;
    os_unfair_lock_unlock(v12 + 4);
    swift_release(v12);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    char v44 = v11;
  }

  if (!v11[2])
  {
    if (*(_BYTE *)(v2 + 112) == 1) {
      sub_100029834( 0xD000000000000031LL,  0x80000001000CD910LL,  0xD000000000000021LL,  (void *)0x80000001000CD950LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  181LL);
    }
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(v11);
    if (!(_DWORD)isUniquelyReferenced_nonNull_native || a1 > v11[3] >> 1)
    {
      if (v11[2] <= a1) {
        int64_t v14 = a1;
      }
      else {
        int64_t v14 = v11[2];
      }
      uint64_t v11 = sub_10004F1A4(isUniquelyReferenced_nonNull_native, v14, 0, v11);
    }

    char v44 = v11;
    if (a1 < 0)
    {
      __break(1u);
      os_unfair_lock_unlock((os_unfair_lock_t)a1);
      __break(1u);
      return;
    }

    if (a1)
    {
      uint64_t v15 = a1;
      a1 = 65536000LL;
      uint64_t v39 = v15;
      unint64_t v40 = v5;
      while (1)
      {
        uint64_t v17 = *(void *)(v2 + 40);
        uint64_t v18 = *(void *)(v2 + 48);
        BOOL v19 = __CFADD__(v18, v17);
        unint64_t v20 = v18 + v17;
        if (v19) {
          break;
        }
        *(void *)(v2 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v20;
        uint64_t v21 = *(void *)(v2 + 32);
        if (v20 < 0x3E80001)
        {
          unint64_t v5 = v11[2];
          unint64_t v16 = v11[3];
          if (v5 >= v16 >> 1) {
            uint64_t v11 = sub_10004F1A4((void *)(v16 > 1), v5 + 1, 1, v11);
          }
          v11[2] = v5 + 1;
          v11[v5 + 4] = v21;
          if (!--v15)
          {
LABEL_26:
            char v44 = v11;
            a1 = v39;
            unint64_t v5 = v40;
            goto LABEL_27;
          }
        }

        else
        {
          BOOL v19 = __CFADD__(v21, 1LL);
          uint64_t v22 = v21 + 1;
          if (v19) {
            goto LABEL_33;
          }
          unint64_t v5 = v11[2];
          unint64_t v23 = v11[3];
          if (v5 >= v23 >> 1) {
            uint64_t v11 = sub_10004F1A4((void *)(v23 > 1), v5 + 1, 1, v11);
          }
          v11[2] = v5 + 1;
          v11[v5 + 4] = v22;
          unint64_t v24 = *(void *)(v2 + 48);
          BOOL v19 = v24 >= 0x3E80000;
          unint64_t v25 = v24 - 65536000;
          if (!v19) {
            goto LABEL_34;
          }
          *(void *)(v2 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v25;
          if (!--v15) {
            goto LABEL_26;
          }
        }
      }

      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

uint64_t sub_10000C768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v4 = a1;
  unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
  BOOL v19 = _swiftEmptyArrayStorage;
  uint64_t v7 = (uint64_t *)(a1 + 96);
  uint64_t result = swift_beginAccess(a1 + 96, v18, 1LL, 0LL);
  uint64_t v9 = *(void *)(v4 + 96);
  if (*(void *)(v9 + 16) >= a2)
  {
    if (a2 < 0)
    {
      __break(1u);
    }

    else
    {
      swift_bridgeObjectRetain(*(void *)(v4 + 96));
      sub_100097CE0(v10, v9 + 32, 0LL, (2 * a2) | 1);
      swift_bridgeObjectRelease(v9);
      uint64_t v4 = *v7;
      unint64_t v6 = *(void *)(*v7 + 16);
      if (v6 >= a2)
      {
        uint64_t v11 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
        swift_bridgeObjectRetain(v4);
        uint64_t v13 = swift_unknownObjectRetain_n(v12, 2LL);
        int64_t v14 = (void *)swift_dynamicCastClass(v13, v11);
        if (!v14)
        {
          swift_bridgeObjectRelease(v4);
          int64_t v14 = _swiftEmptyArrayStorage;
        }

        uint64_t v15 = (void *)v14[2];
        swift_release(v14);
        if (v15 == (void *)(v6 - a2))
        {
          unint64_t v16 = (char *)swift_dynamicCastClass(v4, v11);
          if (!v16)
          {
            swift_bridgeObjectRelease(v4);
            unint64_t v16 = (char *)_swiftEmptyArrayStorage;
          }

          goto LABEL_9;
        }

LABEL_13:
        swift_bridgeObjectRelease(v4);
        unint64_t v16 = sub_100050F00(v4, v4 + 32, a2, (2 * v6) | 1);
LABEL_9:
        swift_bridgeObjectRelease(v4);
        uint64_t v17 = *v7;
        *uint64_t v7 = (uint64_t)v16;
        uint64_t result = swift_bridgeObjectRelease(v17);
        unint64_t v6 = (unint64_t)v19;
        goto LABEL_10;
      }
    }

    __break(1u);
    goto LABEL_13;
  }

    uint64_t result = sub_100016744(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }

  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v76 = 0LL;
    v74 = 0u;
    unint64_t v75 = 0u;
    goto LABEL_24;
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[9];
  if ((v9 & 0xC000000000000001LL) != 0) {
    goto LABEL_36;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v32 = *(void *)(v9 + 32);
    swift_unknownObjectRetain(*v6);
    swift_retain(v32);
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }

          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }

        __break(1u);
LABEL_14:
        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_13;
  }

  return result;
}

  unint64_t v25 = v14 & 0x1F | (a2 << 7) | 0x20;
  uint64_t v26 = v13 | (a4 << 8);
  uint64_t v27 = a7 | (unsigned __int16)(v10 << 8);
  sub_1000B7288( ((unint64_t)v27 << 32) | (v24 << 48) | ((unint64_t)v26 << 16) | ((unint64_t)a1 << 8) | v25,  (uint64_t)a8,  a9);
  if (v9)
  {
    unint64_t v61 = v25;
    unint64_t v62 = v27;
    uint64_t v28 = (void *)_convertErrorToNSError(_:)(v9);
    uint64_t v29 = [v28 code];

    unint64_t v30 = [v63 boxName];
    if (v30)
    {
      os_signpost_type_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      unint64_t v34 = v33;
    }

    else
    {
      unint64_t v34 = (void *)0xEE00656369766544LL;
      uint64_t v32 = 0x206E776F6E6B6E55LL;
    }

    if (v29 == (id)-536850432LL)
    {
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v35._countAndFlagsBits = v32;
      v35._object = v34;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v34);
      v36._countAndFlagsBits = 0x64656C6C61745320LL;
      v36._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v36);
      os_signpost_id_t v37 = sub_100008E00(&qword_100113420);
      uint64_t v38 = swift_allocObject(v37, 232LL, 7LL);
      *(_OWORD *)(v38 + 16) = xmmword_1000D6F10;
      *(void *)(v38 + 56) = &type metadata for UInt8;
      *(void *)(v38 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v38 + 32) = v61;
      *(void *)(v38 + 96) = &type metadata for UInt8;
      *(void *)(v38 + 104) = &protocol witness table for UInt8;
      *(_BYTE *)(v38 + 72) = a1;
      *(void *)(v38 + 136) = &type metadata for UInt16;
      *(void *)(v38 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v38 + 112) = v26;
      *(void *)(v38 + 176) = &type metadata for UInt16;
      *(void *)(v38 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v38 + 152) = v62;
      *(void *)(v38 + 216) = &type metadata for UInt16;
      *(void *)(v38 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v38 + 192) = v24;
      v39._countAndFlagsBits = String.init(format:_:)(0xD00000000000001ALL, 0x80000001000D2AA0LL, v38);
      object = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(object);
      uint64_t v41 = 0xD000000000000012LL;
      uint64_t v42 = 0x80000001000D2BE0LL;
      uint64_t v43 = 0x80000001000D2BE0LL;
      char v44 = 535LL;
    }

    else
    {
      _StringGuts.grow(_:)(45LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v45 = sub_100008E00(&qword_100113420);
      uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
      *(_OWORD *)(v46 + 16) = xmmword_1000D3D30;
      *(void *)(v46 + 56) = &type metadata for Int;
      *(void *)(v46 + 64) = &protocol witness table for Int;
      *(void *)(v46 + 32) = v29;
      v47._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v46);
      unint64_t v48 = a1;
      unint64_t v49 = v47._object;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(v49);
      v50._countAndFlagsBits = 0xD000000000000020LL;
      v50._object = (void *)0x80000001000D2A70LL;
      String.append(_:)(v50);
      v51._countAndFlagsBits = v32;
      v51._object = v34;
      String.append(_:)(v51);
      swift_bridgeObjectRelease(v34);
      v52._countAndFlagsBits = 58LL;
      v52._object = (void *)0xE100000000000000LL;
      String.append(_:)(v52);
      unint64_t v53 = swift_allocObject(v45, 232LL, 7LL);
      *(_OWORD *)(v53 + 16) = xmmword_1000D6F10;
      *(void *)(v53 + 56) = &type metadata for UInt8;
      *(void *)(v53 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v53 + 32) = v61;
      *(void *)(v53 + 96) = &type metadata for UInt8;
      *(void *)(v53 + 104) = &protocol witness table for UInt8;
      *(_BYTE *)(v53 + 72) = v48;
      *(void *)(v53 + 136) = &type metadata for UInt16;
      *(void *)(v53 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v53 + 112) = v26;
      *(void *)(v53 + 176) = &type metadata for UInt16;
      *(void *)(v53 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v53 + 152) = v62;
      *(void *)(v53 + 216) = &type metadata for UInt16;
      *(void *)(v53 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v53 + 192) = v24;
      v54._countAndFlagsBits = String.init(format:_:)(0xD00000000000001ALL, 0x80000001000D2AA0LL, v53);
      unint64_t v55 = v54._object;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v55);
      uint64_t v41 = 0x20726F727245LL;
      uint64_t v42 = 0xE600000000000000LL;
      uint64_t v43 = 0xE600000000000000LL;
      char v44 = 537LL;
    }

    sub_100029840( v41,  v43,  0xD000000000000082LL,  (void *)0x80000001000D2B50LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  v44);
    uint64_t v56 = swift_bridgeObjectRelease(v42);
    swift_willThrow(v56);
  }

    if (__OFADD__(v5++, 1LL))
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
  }

  if (v5 != 26) {
    goto LABEL_13;
  }
  unint64_t v16 = 0;
  uint64_t v17 = a2 - (v7 - 1);
  uint64_t v41 = OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject;
  uint64_t v7 = v7;
  while (2)
  {
    if (!a4)
    {
      uint64_t v42 = 0x206C656E6E616843LL;
      uint64_t v43 = 0xE800000000000000LL;
      v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      object = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(object);
      uint64_t v22 = v42;
      unint64_t v24 = v43;
      goto LABEL_30;
    }

    uint64_t v18 = *(void **)(a1 + v41);
    if (!v18)
    {
LABEL_29:
      uint64_t v22 = 0LL;
      unint64_t v24 = 0LL;
      goto LABEL_30;
    }

    uint64_t v42 = 0LL;
    BOOL v19 = [v18 stringWithIndex:(a4 + v16) languageID:1033 error:&v42];
    unint64_t v20 = (id)v42;
    if (v19)
    {
      uint64_t v21 = v19;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      unint64_t v24 = v23;
      unint64_t v25 = v20;

LABEL_30:
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        unint64_t v6 = sub_10004FD74(0LL, v6[2] + 1LL, 1, v6);
      }
      uint64_t v35 = v6[2];
      unint64_t v34 = v6[3];
      if (v35 >= v34 >> 1) {
        unint64_t v6 = sub_10004FD74((void *)(v34 > 1), v35 + 1, 1, v6);
      }
      v6[2] = v35 + 1;
      uint64_t v36 = &v6[4 * v35];
      v36[4] = v7;
      v36[5] = v22;
      v36[6] = v24;
      *((_DWORD *)v36 + 14) = 0;
      if ((_BYTE)v7 == 0xFF) {
        goto LABEL_39;
      }
      ++v16;
      ++v7;
      if (v16 == v17) {
        return 0LL;
      }
      continue;
    }

    break;
  }

  uint64_t v28 = (id)v42;
  uint64_t v29 = _convertNSErrorToError(_:)(v20);

  swift_willThrow(v30);
  os_signpost_type_t v31 = (void *)_convertErrorToNSError(_:)(v29);
  uint64_t v32 = [v31 code];

  if (v32 == (id)-536870206LL || v32 == (id)-536850432LL)
  {
    swift_errorRelease(v29);
    goto LABEL_29;
  }

  swift_willThrow(v33);
  return swift_bridgeObjectRelease(v6);
}

  uint64_t v68 = v5 + 32;
  uint64_t v69 = v5 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v11 = 1LL;
  uint64_t v70 = v6;
  int v71 = v5;
  while (1)
  {
    int v76 = v11;
    if ((v4 & 0xC000000000000001LL) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v4);
    }

    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_96;
      }
      uint64_t v12 = *(void *)(v4 + 32);
      swift_retain(v12);
    }

    swift_bridgeObjectRelease(v4);
    uint64_t v13 = *(void *)(v12 + 104);
    swift_retain(v13);
    swift_release(v12);
    uint64_t v1 = IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v13 + 16));
    swift_release(v13);
    unint64_t v75 = v3;
    int64_t v14 = *(void *)(v3 + 72);
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0) {
        unint64_t v23 = *(void *)(v3 + 72);
      }
      else {
        unint64_t v23 = v14 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*(void *)(v3 + 72), 2LL);
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v14);
      if (!v15)
      {
LABEL_44:
        swift_bridgeObjectRelease(v14);
        goto LABEL_45;
      }
    }

    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (!v15) {
        goto LABEL_44;
      }
    }

    unint64_t v73 = v1;
    uint64_t v1 = 0LL;
    unint64_t v5 = v14 & 0xC000000000000001LL;
    unint64_t v16 = 1;
LABEL_20:
    v74 = v16;
    uint64_t v17 = v1;
    do
    {
      if (v5)
      {
        uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
        uint64_t v1 = v17 + 1;
        if (__OFADD__(v17, 1LL)) {
          goto LABEL_94;
        }
      }

      else
      {
        if (v17 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_95;
        }
        uint64_t v3 = *(void *)(v14 + 8 * v17 + 32);
        swift_retain(v3);
        uint64_t v1 = v17 + 1;
        if (__OFADD__(v17, 1LL))
        {
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          if (v5 < 0) {
            char v44 = v5;
          }
          else {
            char v44 = v5 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain_n(v5, 2LL);
          unint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v44);
          swift_bridgeObjectRelease(v5);
          if (!v6) {
            goto LABEL_104;
          }
          goto LABEL_3;
        }
      }

      uint64_t v18 = active;
      BOOL v19 = *(void *)(v3 + 104);
      uint64_t v4 = *(void *)(v19 + 16);
      swift_retain(v19);
      unint64_t v20 = IOUSBGetEndpointSynchronizationType((const IOUSBEndpointDescriptor *)v4);
      if (v20)
      {
        uint64_t v21 = v20;
        swift_release(v19);
        swift_release(v3);
      }

      else
      {
        uint64_t v22 = IOUSBGetEndpointDirection((const IOUSBEndpointDescriptor *)v4);
        swift_release(v19);
        swift_release(v3);
        if (v22 == 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = 3;
        }
      }

      active = v18;
      if (v21 != v18)
      {
        unint64_t v16 = 0;
        if (v1 != v15) {
          goto LABEL_20;
        }
        swift_bridgeObjectRelease(v14);
        unint64_t v6 = v70;
        unint64_t v5 = v71;
        uint64_t v1 = v73;
LABEL_38:
        sub_100029834( 0xD00000000000002ALL,  0x80000001000D36F0LL,  0xD000000000000026LL,  (void *)0x80000001000D3720LL,  0xD000000000000028LL,  0x80000001000D2560LL,  492LL);
        goto LABEL_45;
      }

      ++v17;
    }

    while (v1 != v15);
    swift_bridgeObjectRelease(v14);
    unint64_t v6 = v70;
    unint64_t v5 = v71;
    uint64_t v1 = v73;
    if ((v74 & 1) == 0) {
      goto LABEL_38;
    }
LABEL_45:
    switch((char)active)
    {
      case 0:
        sub_100029834( 0xD000000000000039LL,  0x80000001000D3770LL,  0xD000000000000026LL,  (void *)0x80000001000D3720LL,  0xD000000000000028LL,  0x80000001000D2560LL,  497LL);
        goto LABEL_47;
      case 1:
        uint64_t v26 = swift_retain(v75);
        if ((_DWORD)v1 == 1)
        {
          uint64_t v1 = (uint64_t)&v80;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          unint64_t v25 = v80;
        }

        else
        {
          uint64_t v1 = (uint64_t)&v79;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
          unint64_t v25 = v79;
        }

        goto LABEL_57;
      case 2:
        uint64_t v27 = swift_retain(v75);
        if ((_DWORD)v1 == 1)
        {
          uint64_t v1 = (uint64_t)&v78;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          unint64_t v25 = v78;
        }

        else
        {
          uint64_t v1 = (uint64_t)&v77;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v27);
          unint64_t v25 = v77;
        }

        goto LABEL_57;
      case 3:
LABEL_47:
        unint64_t v24 = swift_retain(v75);
        if ((_DWORD)v1 == 1)
        {
          uint64_t v1 = (uint64_t)&v82;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
          unint64_t v25 = v82;
        }

        else
        {
          uint64_t v1 = (uint64_t)&v81;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v24);
          unint64_t v25 = v81;
        }

LABEL_10:
  *a3 = v6;
  return result;
}

    v17 += 3LL;
    uint64_t v15 = v70 - 1;
    unint64_t v16 = v67;
    if (v70 == 1)
    {
      swift_bridgeObjectRelease(v67);
      a1 = v63;
      goto LABEL_26;
    }
  }

  swift_bridgeObjectRelease(v67);
LABEL_29:
  swift_bridgeObjectRelease(v34);
  os_signpost_id_t v37 = v62;
  uint64_t v38 = v62 + 12;
  swift_beginAccess(v62 + 12, v71, 0LL, 0LL);
  uint64_t v39 = swift_unknownObjectWeakLoadStrong(v37 + 12);
  if (!v39)
  {
LABEL_31:
    uint64_t v46 = (_OWORD *)v63;
    *(void *)(v63 + 32) = 0LL;
    void *v46 = 0u;
    v46[1] = 0u;
    return;
  }

  unint64_t v40 = v39;
  uint64_t v41 = v65 | (v66 << 16);
  uint64_t v42 = v37[13];
  uint64_t v43 = swift_getObjectType(v39);
  *((void *)&v76 + 1) = type metadata accessor for ActiveSelectorUnit();
  *(void *)&unint64_t v77 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&unint64_t v75 = v37;
  char v44 = v37;
  uint64_t v45 = *(uint64_t (**)(void, void, uint64_t, __int128 *, uint64_t, uint64_t))(v42 + 144);
  swift_retain(v44);
  LOWORD(v43) = v45(v41 & 0xFFFFFF, 0LL, 1LL, &v75, v43, v42);
  uint64_t v28 = v47;
  swift_unknownObjectRelease(v40, v47);
  sub_100017A40(&v75);
  ADCControlRequestParameterBlock.getCur()(v28, v43 & 0x1FF, (uint64_t)&v75);
  unint64_t v48 = sub_100008E00(&qword_100113EB8);
  unint64_t v49 = swift_dynamicCast(&v72, &v75, v48, &type metadata for Int, 6LL);
  if ((v49 & 1) == 0)
  {

    goto LABEL_31;
  }

  uint64_t v50 = v72 - 1;
  unint64_t v51 = swift_unknownObjectWeakLoadStrong(v38);
  if (!v51)
  {

    *(void *)&unint64_t v77 = 0LL;
    unint64_t v75 = 0u;
    int v76 = 0u;
    goto LABEL_43;
  }

  os_signpost_id_t v52 = v61;
  if (v50 < *(void *)(v61 + 16))
  {
    unint64_t v53 = v51;
    id v54 = v62[13];
    unint64_t v55 = swift_getObjectType(v51);
    sub_10002C5BC(*(void *)(v52 + 8 * v50 + 32), v55, v54, (uint64_t)&v75);
    swift_unknownObjectRelease(v53, v56);

    if (*((void *)&v76 + 1))
    {
      unint64_t v57 = sub_100008E00(&qword_100113B28);
      unint64_t v58 = sub_100008E00(&qword_100113EC0);
      unint64_t v59 = swift_dynamicCast(&v72, &v75, v57, v58, 6LL);
      a1 = v63;
      if ((v59 & 1) != 0)
      {
LABEL_23:
        sub_10001BD9C((uint64_t)&v72, (uint64_t)&v75);
        goto LABEL_24;
      }

      __chkstk_darwin(v26);
      unint64_t v40 = &v130[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      uint64_t v41 = sub_100028BF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v145, &type metadata for UInt, v41, v5, v12);
      uint64_t v42 = dispatch thunk of static Comparable.< infix(_:_:)(v40, v24, v5, *(void *)(*((void *)v12 + 4) + 8LL));
      uint64_t v35 = (uint64_t (*)(_BYTE *, uint64_t))*((void *)v7 + 1);
      v35(v40, v5);
      uint64_t v10 = v138;
      if ((v42 & 1) != 0) {
        goto LABEL_40;
      }
LABEL_14:
      v35(v24, v5);
      goto LABEL_15;
    }

    if (v26 >= 65) {
      goto LABEL_10;
    }
    dispatch thunk of BinaryInteger._lowWord.getter(v5, v12);
    uint64_t v10 = v138;
    (*((void (**)(_BYTE *, uint64_t))v7 + 1))(v24, v5);
  }

    uint64_t v32 = v6[1];
    int v76 = v32;
    unint64_t v77 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      int v71 = v6;
      unint64_t v34 = a1;
      uint64_t v35 = (_OWORD *)(v32 + 32);
      sub_10004AB54(&v76);
      uint64_t v36 = v34;
      swift_retain(a2);
      sub_10004AB54(&v76);
      do
      {
        v81[0] = *v35;
        uint64_t v38 = v35[1];
        uint64_t v39 = v35[2];
        unint64_t v40 = v35[4];
        v81[3] = v35[3];
        v81[4] = v40;
        v81[1] = v38;
        v81[2] = v39;
        sub_1000561DC(v81);
        uint64_t v13 = v26;
        uint64_t v41 = a2;
        sub_100055DC8(v36, a2, v26, a3);
        if (v5)
        {

          sub_100056220(v81);
          sub_100045FD8(&v76);
          unint64_t v20 = (unint64_t *)v77;

          swift_release(a2);
          swift_bridgeObjectRelease(v20);
          sub_100045FD8(&v76);
          goto LABEL_32;
        }

        uint64_t v43 = v42;

        char v44 = sub_100056220(v81);
        if (v43)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
          uint64_t v46 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t v45 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v46 >= v45 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1LL);
          }
          os_signpost_id_t v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v46, v43);
          specialized Array._endMutation()(v37);
        }

        v35 += 5;
        --v33;
        a2 = v41;
      }

      while (v33);
      sub_100045FD8(&v76);
      unint64_t v48 = (void *)v77;
      a1 = v34;
      unint64_t v6 = v71;
    }

    else
    {
      unint64_t v47 = a1;
      swift_retain(a2);
      sub_10004AB54(&v76);
      unint64_t v48 = _swiftEmptyArrayStorage;
    }

    swift_release(a2);
    sub_100045FD8(&v76);
    unint64_t v49 = *(unsigned __int8 *)(*v6 + 8LL);
    if (!*(_BYTE *)(*v6 + 8LL)
      || (uint64_t v50 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) != 0 && sub_10001645C(10LL, v50))
    {
      v74 = (uint64_t)v48;
      unint64_t v51 = a1;
      unint64_t v20 = 0LL;
      os_signpost_id_t v52 = 0LL;
    }

    else
    {
      unint64_t v51 = a1;
      unint64_t v20 = *(unint64_t **)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
      if (v20)
      {
        unint64_t v53 = sub_1000B36EC(v49);
        if (v5)
        {

          swift_bridgeObjectRelease(v48);
          uint64_t v13 = (dispatch_queue_s *)v26;
          goto LABEL_32;
        }

        unint64_t v20 = (unint64_t *)v53;
        os_signpost_id_t v52 = v54;
        v74 = (uint64_t)v48;
      }

      else
      {
        v74 = (uint64_t)v48;
        os_signpost_id_t v52 = 0LL;
      }
    }

    sub_10004AFEC((uint64_t)(v6 + 3), (uint64_t)&v80, &qword_1001148F0);
    sub_10004AFEC((uint64_t)(v6 + 4), (uint64_t)&v79, &qword_100114938);
    active = type metadata accessor for ActiveStreamingInterface();
    uint64_t v56 = swift_allocObject(active, 128LL, 7LL);
    unint64_t v57 = (uint64_t)v6;
    unint64_t v58 = v72;
    uint64_t v13 = v51;
    sub_10004AB54(&v76);
    unint64_t v59 = v26;
    sub_10004AB54(&v80);
    sub_10004AB54(&v79);
    unint64_t v60 = (uint64_t)v20;
    unint64_t v20 = (unint64_t *)v56;
    unint64_t v61 = sub_1000C4F04(v57, v74, (uint64_t)v13, (uint64_t)v26, v60, v52, (uint64_t)v58);
    if (v5)
    {

      goto LABEL_32;
    }

    unint64_t v20 = (unint64_t *)v61;

    uint64_t v63 = v20[9];
    if ((unint64_t)v63 >> 62)
    {
      if (v63 < 0) {
        uint64_t v70 = v20[9];
      }
      else {
        uint64_t v70 = v63 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v20[9]);
      unint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v70);
      Swift::String v65 = v59;
      if (v64) {
        goto LABEL_36;
      }
    }

    else
    {
      unint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v20[9]);
      Swift::String v65 = v59;
      if (v64)
      {
LABEL_36:
        if (v64 < 1) {
          __break(1u);
        }
        unint64_t v66 = 0LL;
        do
        {
          if ((v63 & 0xC000000000000001LL) != 0)
          {
            unint64_t v67 = specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v63);
          }

          else
          {
            unint64_t v67 = *(void *)(v63 + 8 * v66 + 32);
            swift_retain(v67);
          }

          ++v66;
          swift_beginAccess(v67 + 144, &v77, 1LL, 0LL);
          swift_weakAssign(v67 + 144, v20);
          swift_release(v67);
          Swift::String v65 = v59;
        }

        while (v64 != v66);
      }
    }

    swift_bridgeObjectRelease(v63);
    return v20;
  }

  uint64_t v15 = sub_100008E00(&qword_100113410);
  unint64_t v16 = swift_allocObject(v15, 64LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1000D3D30;
  unint64_t v77 = 0LL;
  uint64_t v78 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  v17._countAndFlagsBits = 0x20726F727265LL;
  v17._object = (void *)0xE600000000000000LL;
  String.append(_:)(v17);
  unint64_t v75 = v5;
  uint64_t v18 = sub_100008E00(&qword_100113400);
  _print_unlocked<A, B>(_:_:)( &v75,  &v77,  v18,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v19._object = (void *)0x80000001000CF9D0LL;
  unint64_t v20 = &v77;
  v19._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v19);
  uint64_t v21 = v77;
  uint64_t v22 = v78;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 32) = v21;
  *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v22;
  print(_:separator:terminator:)(v16, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v16);
  swift_errorRelease(v5);
  unint64_t v23 = sub_10000AE14();
  unint64_t v24 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
  *(_BYTE *)unint64_t v25 = 5;
  *(void *)(v25 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v25 + 16) = 0xE000000000000000LL;
  *(void *)(v25 + 24) = 0xD00000000000004ALL;
  *(void *)(v25 + 32) = 0x80000001000CF9F0LL;
  *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
  *(void *)(v25 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
  *(void *)(v25 + 56) = 158LL;
  swift_willThrow(v24);
LABEL_32:

  return v20;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}
}

  uint64_t v21 = *(void *)(a2 + 104);
  uint64_t v22 = OBJC_IVAR___AUAStream_streamingEndpoint;
  unint64_t v23 = *(void *)&a4[OBJC_IVAR___AUAStream_streamingEndpoint];
  *(void *)&a4[OBJC_IVAR___AUAStream_streamingEndpoint] = v21;
  swift_retain(v21);
  swift_release(v23);
  unint64_t v24 = *(void *)&a4[v22];
  if (!v24)
  {
    __break(1u);
    goto LABEL_27;
  }

  swift_retain(v24);
  sub_1000C7D44(a1, 0);
  swift_release(v24);
  if (!v5)
  {
    unint64_t v25 = sub_100009788(a4, a3, a1);
    uint64_t v26 = OBJC_IVAR___AUAStream_transferManager;
    uint64_t v27 = *(void *)&a4[OBJC_IVAR___AUAStream_transferManager];
    *(void *)&a4[OBJC_IVAR___AUAStream_transferManager] = v25;
    swift_release(v27);
    if (*(void *)&a4[v26])
    {
      uint64_t v28 = [a4 direction];
      uint64_t v29 = *(void *)&a4[v26];
      if (v28 != 1768845428)
      {
        if (v29)
        {
          unint64_t v40 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 120LL);
          uint64_t v41 = swift_retain(v29);
          uint64_t v42 = v40(v41);
          char v44 = v43;
          swift_release(v29);
          unint64_t v49 = v42;
          uint64_t v50 = v44;
          uint64_t v45 = _NSConcreteStackBlock;
          uint64_t v46 = 1107296256LL;
          unint64_t v47 = sub_100086D28;
          unint64_t v48 = &unk_100106540;
          uint64_t v35 = _Block_copy(&v45);
          swift_release(v50);
          [a4 setWriteMixBlock:v35];
          goto LABEL_22;
        }

        goto LABEL_28;
      }

      if (v29)
      {
        unint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v29 + 120LL);
        os_signpost_type_t v31 = swift_retain(v29);
        uint64_t v32 = v30(v31);
        unint64_t v34 = v33;
        swift_release(v29);
        unint64_t v49 = v32;
        uint64_t v50 = v34;
        uint64_t v45 = _NSConcreteStackBlock;
        uint64_t v46 = 1107296256LL;
        unint64_t v47 = sub_100086D28;
        unint64_t v48 = &unk_100106568;
        uint64_t v35 = _Block_copy(&v45);
        swift_release(v50);
        [a4 setReadInputBlock:v35];
LABEL_22:
        _Block_release(v35);
        return;
      }

        __break(1u);
LABEL_11:
        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_10000C8F0(uint64_t a1, uint64_t a2)
{
  return swift_endAccess(v5);
}

uint64_t sub_10000C954(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(result + 16);
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 == (v2 * v3) >> 63)
  {
    uint64_t v4 = result;
    unint64_t v5 = sub_10004F1A4(0LL, (v2 * v3) & ~((v2 * v3) >> 63), 0, _swiftEmptyArrayStorage);
    uint64_t v11 = v5;
    if (v3)
    {
      swift_bridgeObjectRetain(v4);
      for (uint64_t i = 0LL; i != v3; ++i)
      {
        uint64_t v7 = v4 + 16 * i;
        __int128 v10 = *(_OWORD *)(v7 + 32);
        sub_10000CA60((uint64_t *)&v10, (char *)v1, (uint64_t *)&v11);
      }

      swift_bridgeObjectRelease(v4);
      uint64_t v8 = (uint64_t)v11;
    }

    else
    {
      uint64_t v8 = (uint64_t)v5;
    }

    uint64_t v9 = *(os_unfair_lock_s **)(v1 + 104);
    swift_bridgeObjectRetain(v8);
    swift_retain(v9);
    os_unfair_lock_lock(v9 + 4);
    sub_10000C8F0(v1, v8);
    os_unfair_lock_unlock(v9 + 4);
    swift_release(v9);
    swift_bridgeObjectRelease(v8);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000CA60(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v34 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t)&v32[-v10];
  uint64_t v12 = a1[1];
  uint64_t v40 = *a1;
  uint64_t v39 = v12;
  if (v40 | v12)
  {
    *((void *)a2 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v40;
    *((void *)a2 + 11) = v12;
  }

  else
  {
    uint64_t v13 = *((void *)a2 + 11);
    uint64_t v40 = *((void *)a2 + 10);
    uint64_t v39 = v13;
  }

  if (qword_1001128E0 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for OSSignposter(0LL);
    sub_100008EC4(v14, (uint64_t)qword_1001171B8);
    uint64_t v15 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16);
    uint64_t v16 = v15(v11, &a2[OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID], v6);
    uint64_t v17 = v40;
    uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v16);
    int v33 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v15((uint64_t)v34, (char *)v11, v6);
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v19 = 134218240;
      uint64_t v37 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2048;
      swift_beginAccess(&v39, v35, 0LL, 0LL);
      uint64_t v37 = v39;
      uint64_t v20 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v19 + 14, v19 + 22);
      uint64_t v21 = v34;
      os_signpost_id_t v22 = OSSignpostID.rawValue.getter(v20);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  (os_signpost_type_t)v33,  v22,  "AUASampleManager_addExplicitFeedbackSamples",  "whole %lu, fraction %lu",  (uint8_t *)v19,  0x16u);
      swift_slowDealloc(v19, -1LL, -1LL);

      unint64_t v23 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v23(v11, v6);
      uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v23)(v21, v6);
    }

    else
    {

      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
    }

    uint64_t v6 = *((void *)a2 + 15);
    if (v6 < 0) {
      break;
    }
    if (!v6) {
      return result;
    }
    swift_beginAccess(&v40, &v37, 0LL, 0LL);
    swift_beginAccess(&v39, v36, 0LL, 0LL);
    uint64_t v7 = 65536001LL;
    uint64_t v11 = -65536000LL;
    while (1)
    {
      uint64_t v25 = *((void *)a2 + 6);
      unint64_t v26 = v25 + v39;
      if (__CFADD__(v25, v39)) {
        break;
      }
      uint64_t v27 = v40;
      *((void *)a2 + 6) = v26;
      if (v26 >= 0x3E80001)
      {
        if (__CFADD__(v27++, 1LL)) {
          goto LABEL_22;
        }
        *((void *)a2 + 6) = v26 - 65536000;
      }

      uint64_t v29 = (void *)*a3;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a3);
      *a3 = (uint64_t)v29;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004F1A4(0LL, v29[2] + 1LL, 1, v29);
        uint64_t v29 = (void *)result;
        *a3 = result;
      }

      unint64_t v31 = v29[2];
      unint64_t v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004F1A4((void *)(v30 > 1), v31 + 1, 1, v29);
        uint64_t v29 = (void *)result;
      }

      v29[2] = v31 + 1;
      v29[v31 + 4] = v27;
      *a3 = (uint64_t)v29;
      if (!--v6) {
        return result;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }

  __break(1u);
  return result;
}

uint64_t sub_10000CDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v27 = a3;
  uint64_t v7 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v24 - v12;
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v14 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v14, (uint64_t)qword_1001171B8);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v15(v13, (char *)v3 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v7);
  swift_bridgeObjectRetain(a1);
  uint64_t v17 = (os_log_s *)OSSignposter.logHandle.getter(v16);
  int v26 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v15(v11, v13, v7);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v18 = 134218496;
    uint64_t v28 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(a1);
    uint64_t v25 = v8;
    *(_WORD *)(v18 + 12) = 2048;
    uint64_t v28 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2048;
    uint64_t v28 = v27;
    uint64_t v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 24, v18 + 32);
    os_signpost_id_t v20 = OSSignpostID.rawValue.getter(v19);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  (os_signpost_type_t)v26,  v20,  "AUASampleManager_addImplicitFeedbackSamples",  "num %ld, transfersPerMS %lu, MSPerTransfer %lu",  (uint8_t *)v18,  0x20u);
    swift_slowDealloc(v18, -1LL, -1LL);

    uint64_t v21 = *(void (**)(char *, uint64_t))(v25 + 8);
    v21(v13, v7);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v11, v7);
  }

  else
  {

    swift_bridgeObjectRelease(a1);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  }

  if (v4[8] == a2 && v4[7] == v27)
  {
    unint64_t v23 = (os_unfair_lock_s *)v4[13];
    swift_retain(v23);
    os_unfair_lock_lock(v23 + 4);
    sub_10000C8F0((uint64_t)v4, a1);
    os_unfair_lock_unlock(v23 + 4);
    return swift_release(v23);
  }

  return result;
}

uint64_t sub_10000D070()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10000D0E0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 stop];

  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

uint64_t AUAAudioDevice.function.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function));
}

uint64_t AUAAudioDevice.streamingInterfaces.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___AUAAudioDevice_streamingInterfaces));
}

uint64_t AUAAudioDevice.functionProtocol.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___AUAAudioDevice_function;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType(v2);
    unsigned __int8 v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
  }

  else
  {
    unsigned __int8 v5 = 0;
  }

  return v5 | ((v2 == 0) << 8);
}

void sub_10000D1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v155 = a5;
  uint64_t v151 = a4;
  uint64_t v153 = a3;
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v149 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v148 = (char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_lockDelayMS] = 0LL;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0LL;
  *(_DWORD *)&v5[OBJC_IVAR___AUAAudioDevice_clientDescriptionKind] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = 0LL;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = 0LL;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = 0LL;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_curZTSSeed] = 0LL;
  v139._object = (void *)OBJC_IVAR___AUAAudioDevice_sampleManager;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_sampleManager] = 0LL;
  uint64_t v142 = OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = 0LL;
  v143 = (char *)OBJC_IVAR___AUAAudioDevice_timeStampStream;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_timeStampStream] = 0LL;
  uint64_t v15 = OBJC_IVAR___AUAAudioDevice_configChangedHandlers;
  uint64_t v16 = sub_100008E00(&qword_100112950);
  uint64_t v17 = swift_allocObject(v16, 32LL, 7LL);
  uint64_t v18 = sub_100008E00(&qword_100112958);
  uint64_t v19 = swift_allocObject(v18, 20LL, 7LL);
  *(_DWORD *)(v19 + 16) = 0;
  *(void *)(v17 + 16) = v19;
  *(void *)(v17 + 24) = _swiftEmptyArrayStorage;
  unint64_t v147 = (void *)v15;
  *(void *)((char *)v6 + v15) = v17;
  *(void *)((char *)v6 + OBJC_IVAR___AUAAudioDevice_lastZTSMach) = 0LL;
  *(void *)((char *)v6 + OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS) = 0LL;
  uint64_t v20 = qword_1001128E0;
  uint64_t v21 = v6;
  if (v20 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v150 = v9;
  uint64_t v140 = sub_100008EC4(v9, (uint64_t)qword_1001171B8);
  uint64_t v22 = OSSignposter.logHandle.getter(v140);
  OSSignpostID.init(log:)(v22);
  unint64_t v23 = &v21[OBJC_IVAR___AUAAudioDevice_signpostID];
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  unint64_t v152 = v14;
  v24(&v21[OBJC_IVAR___AUAAudioDevice_signpostID], v14, v11);
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  if (!v26)
  {
    swift_bridgeObjectRelease(v155);
    unint64_t v48 = sub_10000AE14();
    uint64_t v49 = swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
    *(_BYTE *)uint64_t v50 = 7;
    *(void *)(v50 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v50 + 16) = 0xE000000000000000LL;
    *(void *)(v50 + 24) = 0xD000000000000029LL;
    *(void *)(v50 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD490LL;
    *(void *)(v50 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v50 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
    *(void *)(v50 + 56) = 313LL;
    swift_willThrow(v49);
    swift_unknownObjectRelease(a1, v51);
    swift_unknownObjectRelease(v153, v52);
    swift_release(*(void *)((char *)v6 + (unint64_t)v139._object));
    swift_release(*(void *)((char *)v6 + v142));

    swift_release(*(void *)((char *)v147 + (void)v6));
    (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v11);

    uint64_t v53 = type metadata accessor for AUAAudioDevice(0LL);
    swift_deallocPartialClassInstance( v21,  v53,  *(unsigned int *)((swift_isaMask & *(void *)v21) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v21) + 0x34LL));
    return;
  }

  uint64_t v27 = (char *)v26;
  uint64_t v28 = v11;
  uint64_t v146 = v12;
  unint64_t v147 = v21;
  uint64_t v145 = a1;
  uint64_t v29 = v155;
  if ((unint64_t)v155 >> 62)
  {
    if (v155 < 0) {
      uint64_t v134 = v155;
    }
    else {
      uint64_t v134 = v155 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v155);
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v134);
    swift_bridgeObjectRelease(v29);
  }

  else
  {
    uint64_t v30 = *(void *)((v155 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  unint64_t v31 = v152;
  uint64_t v32 = (void **)_swiftEmptyArrayStorage;
  v154 = v27;
  uint64_t v144 = v28;
  uint64_t v141 = a2;
  if (v30)
  {
    __int128 aBlock = (void **)_swiftEmptyArrayStorage;
    sub_100070508(0, v30 & ~(v30 >> 63), 0);
    if (v30 < 0)
    {
      __break(1u);
      goto LABEL_53;
    }

    uint64_t v33 = 0LL;
    uint64_t v32 = aBlock;
    unint64_t v34 = v29 & 0xC000000000000001LL;
    do
    {
      if (v34)
      {
        uint64_t v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v29);
      }

      else
      {
        uint64_t v35 = *(void *)(v29 + 8 * v33 + 32);
        swift_retain(v35);
      }

      char v163 = *(_BYTE *)(*(void *)(v35 + 32) + 2LL);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      uint64_t v38 = v37;
      swift_release(v35);
      __int128 aBlock = v32;
      unint64_t v40 = (unint64_t)v32[2];
      unint64_t v39 = (unint64_t)v32[3];
      if (v40 >= v39 >> 1)
      {
        sub_100070508(v39 > 1, v40 + 1, 1);
        uint64_t v32 = aBlock;
      }

      ++v33;
      v32[2] = (void *)(v40 + 1);
      uint64_t v41 = &v32[2 * v40];
      v41[4] = (void *)v36;
      v41[5] = v38;
      uint64_t v29 = v155;
    }

    while (v30 != v33);
    unint64_t v31 = v152;
    a2 = v141;
    uint64_t v27 = v154;
  }

  __int128 aBlock = v32;
  uint64_t v42 = sub_100008E00(&qword_100113B08);
  unint64_t v43 = sub_100017564();
  v139._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v42, v43);
  v139._object = v44;
  swift_bridgeObjectRelease(v32);
  id v45 = [v27 serialNumber];
  if (v45)
  {
    uint64_t v46 = v45;
    v138._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v138._object = v47;
  }

  else
  {
    uint64_t v54 = sub_100008E00(&qword_100113420);
    uint64_t v55 = swift_allocObject(v54, 72LL, 7LL);
    *(_OWORD *)(v55 + 16) = xmmword_1000D3D30;
    id v56 = USBDevice.locationID.getter();
    *(void *)(v55 + 56) = &type metadata for UInt;
    *(void *)(v55 + 64) = &protocol witness table for UInt;
    if ((v57 & 1) != 0) {
      id v58 = 0LL;
    }
    else {
      id v58 = v56;
    }
    *(void *)(v55 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v58;
    v138._countAndFlagsBits = String.init(format:_:)(30757LL, 0xE200000000000000LL, v55);
    v138._object = v59;
  }

  uint64_t v60 = v145;
  id v61 = [v27 manufacturerName];
  if (v61)
  {
    unint64_t v62 = v61;
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    v143 = v64;
  }

  else
  {
    v143 = (char *)0x80000001000CD4C0LL;
    uint64_t v63 = 0xD000000000000014LL;
  }

  id v65 = [v27 boxName];
  if (v65)
  {
    unint64_t v66 = v65;
    uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    uint64_t v137 = v67;
  }

  else
  {
    uint64_t v137 = 0xEF656D614E786F62LL;
    uint64_t v136 = 0x206E776F6E6B6E55LL;
  }

  uint64_t v68 = v147;
  uint64_t v69 = *(void *)&v27[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v69 && sub_10001645C(18LL, v69)) {
    uint64_t v70 = 10000LL;
  }
  else {
    uint64_t v70 = 667000LL;
  }
  *(void *)((char *)v68 + OBJC_IVAR___AUAAudioDevice_formatChangeIOStartDelay_us) = v70;
  int v71 = (void *)((char *)v68 + OBJC_IVAR___AUAAudioDevice_function);
  *int v71 = v60;
  v71[1] = a2;
  int64_t v72 = (void *)((char *)v68 + OBJC_IVAR___AUAAudioDevice_clock);
  uint64_t v73 = v153;
  uint64_t v74 = v151;
  *int64_t v72 = v153;
  v72[1] = v74;
  uint64_t v75 = swift_getObjectType(v73);
  int v76 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 40);
  swift_unknownObjectRetain(v60);
  swift_unknownObjectRetain(v73);
  uint64_t v142 = v76(v75, v74);
  if (v142)
  {
    uint64_t v135 = v63;
    uint64_t v77 = *(void *)(v142 + 16);
    if (v77)
    {
      uint64_t v78 = (uint64_t *)(v142 + 48);
      id v79 = v154;
      do
      {
        unint64_t v80 = *(v78 - 2);
        unint64_t v81 = *(v78 - 1);
        uint64_t v82 = *v78;
        if (v80 < v81 && v82 != 0)
        {
          NSString v84 = String._bridgeToObjectiveC()();
          int v85 = (void *)swift_allocObject(&unk_1001035D8, 48LL, 7LL);
          v85[2] = v79;
          v85[3] = v80;
          v85[4] = v81;
          v85[5] = v82;
          v160 = sub_100017618;
          v161 = v85;
          __int128 aBlock = _NSConcreteStackBlock;
          unint64_t v157 = 1107296256LL;
          v158 = sub_1000B3284;
          v159 = &unk_1001035F0;
          Swift::String v86 = _Block_copy(&aBlock);
          v87 = v161;
          id v88 = v79;
          swift_release(v87);
          AnalyticsSendEventLazy(v84, v86);
          _Block_release(v86);
        }

        v78 += 3;
        --v77;
      }

      while (v77);
    }

    swift_bridgeObjectRelease(v142);
    unint64_t v31 = v152;
    uint64_t v29 = v155;
    uint64_t v63 = v135;
  }

  id v89 = objc_msgSend(v154, "serialNumber", v135);
  if (v89)
  {
    uint64_t v90 = v89;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    unint64_t v93 = v92;
  }

  else
  {
    uint64_t v91 = 0LL;
    unint64_t v93 = 0xE000000000000000LL;
  }

  uint64_t v94 = v146;
  uint64_t v95 = (char *)v147;
  v96 = (void *)((char *)v147 + OBJC_IVAR___AUAAudioDevice_serialNumber);
  uint64_t *v96 = v91;
  v96[1] = v93;
  v97 = v154;
  v98 = *(void **)&v154[OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater];
  *(void *)&v95[OBJC_IVAR___AUAAudioDevice_timeCorrelater] = v98;
  id v99 = objc_allocWithZone((Class)&OBJC_CLASS___AUALocklessTimestamp);
  id v100 = v98;
  id v101 = [v99 init];
  *(void *)&v95[OBJC_IVAR___AUAAudioDevice_timestamp] = v101;
  *(void *)&v95[OBJC_IVAR___AUAAudioDevice_streamingInterfaces] = v29;

  __int128 aBlock = 0LL;
  unint64_t v157 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease(v157);
  __int128 aBlock = (void **)0xD000000000000014LL;
  unint64_t v157 = 0x80000001000CD4E0LL;
  v102._countAndFlagsBits = v63;
  v102._object = v143;
  String.append(_:)(v102);
  v103._countAndFlagsBits = 58LL;
  v103._object = (void *)0xE100000000000000LL;
  String.append(_:)(v103);
  uint64_t v104 = *(void *)&v97[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
  unsigned int v105 = *(void **)&v97[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
  swift_bridgeObjectRetain(v105);
  v106._countAndFlagsBits = v104;
  v106._object = v105;
  String.append(_:)(v106);
  swift_bridgeObjectRelease(v105);
  v107._countAndFlagsBits = 58LL;
  v107._object = (void *)0xE100000000000000LL;
  String.append(_:)(v107);
  object = v138._object;
  String.append(_:)(v138);
  swift_bridgeObjectRelease(object);
  v109._countAndFlagsBits = 58LL;
  v109._object = (void *)0xE100000000000000LL;
  String.append(_:)(v109);
  v110 = v139._object;
  String.append(_:)(v139);
  swift_bridgeObjectRelease(v110);
  unint64_t v111 = v157;
  NSString v112 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v111);
  uint64_t v113 = v97;
  id v114 = [v97 plugin];
  v115 = (objc_class *)type metadata accessor for AUAAudioDevice(0LL);
  v162.receiver = v95;
  v162.super_class = v115;
  id v116 = objc_msgSendSuper2(&v162, "initWithDeviceUID:withPlugin:", v112, v114);

  if (v116)
  {
    uint64_t v117 = v63;
    (*(void (**)(void))(v149 + 16))();
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))( v31,  (uint64_t)v116 + OBJC_IVAR___AUAAudioDevice_signpostID,  v144);
    id v118 = v116;
    uint64_t v155 = (uint64_t)v118;
    NSString v119 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)NSString v119 = 0;
    uint64_t v120 = (os_log_s *)OSSignposter.logHandle.getter(v119);
    v121 = v31;
    os_signpost_type_t v122 = static os_signpost_type_t.begin.getter();
    os_signpost_id_t v123 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v120, v122, v123, "AUAAudioDevice_init", "", v119, 2u);
    uint64_t v124 = v153;
    id v125 = v113;
    uint64_t v126 = v145;
    uint64_t v127 = v137;
    v128 = v143;
    sub_10000DF98(v125, v118, v145, v141, v136, v137, v117, (uint64_t)v143, v153, v151);
    LOBYTE(v117) = static os_signpost_type_t.end.getter(v129);
    os_signpost_id_t v130 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v120,  (os_signpost_type_t)v117,  v130,  "AUAAudioDevice_init",  "",  v119,  2u);

    uint64_t v131 = (void *)v155;
    swift_slowDealloc(v119, -1LL, -1LL);
    swift_unknownObjectRelease(v126, v132);
    swift_unknownObjectRelease(v124, v133);
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease(v128);

    (*(void (**)(char *, uint64_t))(v146 + 8))(v121, v144);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v148, v150);
    return;
  }

LABEL_53:
  __break(1u);
}

    int64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
    uint64_t v3 = (char *)v82;
    __chkstk_darwin(v72);
    ((void (*)(char *, char *, unint64_t))v5)( (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7,  v8);
    if (v72 >= 65)
    {
      uint64_t v73 = ((uint64_t (*)(char *, unint64_t))v4)( (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
      goto LABEL_55;
    }

    uint64_t v77 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
    v4((char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
    if (v77 == 64)
    {
      uint64_t v73 = dispatch thunk of static BinaryInteger.isSigned.getter(v8, v1);
      if ((v73 & 1) == 0)
      {
LABEL_55:
        id v89 = (char *)v82;
        v87 = v82;
        __chkstk_darwin(v73);
        ((void (*)(char *, char *, unint64_t))v5)( (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7,  v8);
        v93[0] = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v74 = dispatch thunk of static BinaryInteger.isSigned.getter(v8, v1);
        uint64_t v75 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
        if ((v74 & 1) != 0)
        {
          if (v75 > 64)
          {
            unsigned __int8 v5 = (void (*)(char *))v82;
            __chkstk_darwin(v75);
            int v76 = sub_10001CDF8();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v93, &type metadata for Int, v76, v8, v1);
            uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)( (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8,  *(void *)(*(void *)(v1 + 32) + 8LL));
            v4((char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            v4((char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
            goto LABEL_64;
          }
        }

        else if (v75 > 63)
        {
          unsigned __int8 v5 = (void (*)(char *))v82;
          v92[0] = 0x7FFFFFFFFFFFFFFFLL;
          __chkstk_darwin(v75);
          uint64_t v78 = (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          id v79 = ((uint64_t (*)(char *, char *, unint64_t))v86[4])(v78, v78, v8);
          __chkstk_darwin(v79);
          uint64_t v2 = v78;
          unint64_t v80 = sub_10001CDF8();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v92, &type metadata for Int, v80, v8, v1);
          uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)(v78, v78, v8, *(void *)(*(void *)(v1 + 32) + 8LL));
          v4(v78, v8);
          v4(v78, v8);
LABEL_64:
          if ((v0 & 1) != 0) {
            goto LABEL_70;
          }
          goto LABEL_65;
        }

        dispatch thunk of BinaryInteger._lowWord.getter(v8, v1);
        v4((char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
LABEL_65:
        uint64_t v3 = v89;
      }
    }

    uint64_t v0 = (int64_t)v7;
    unint64_t v81 = dispatch thunk of BinaryInteger._lowWord.getter(v8, v1);
    v4(v7, v8);

    uint64_t v8 = v81 - 1;
    if (!__OFSUB__(v81, 1LL))
    {
      sub_100017A40(&v95);
      uint64_t v0 = v83;
      continue;
    }

    break;
  }

  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  uint64_t result = ((uint64_t (*)(int64_t, unint64_t))v4)(v0, v8);
  __break(1u);
  return result;
}

    if (v2 < 0) {
      unint64_t v31 = v2;
    }
    else {
      unint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    uint64_t v18 = (void *)swift_bridgeObjectRelease(v2);
    uint64_t v24 = v32 + v6;
    if (!__OFADD__(v32, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t v33 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v33,  1046LL,  0);
  __break(1u);
  return result;
}

void *sub_10000DDD4(uint64_t a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  uint64_t v8 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v8, v12);
  *(_OWORD *)(inited + 16) = xmmword_1000D5BC0;
  *(void *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE300000000000000LL;
  sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v10 = *(unsigned __int16 **)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
  *(NSNumber *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = NSNumber.init(integerLiteral:)(v10[4]);
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  *(NSNumber *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = NSNumber.init(integerLiteral:)(v10[5]);
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x6E6F6973726556LL;
  *(void *)(inited + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0xE700000000000000LL;
  *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(v10[6]);
  *(void *)(inited + 104) = 0x4E746375646F7270LL;
  *(void *)(inited + 11swift_unknownObjectWeakDestroy(v0 + 2) = 0xEB00000000656D61LL;
  uint64_t result = String._bridgeToObjectiveC()();
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = result;
  *(void *)(inited + 12_Block_object_dispose((const void *)(v30 - 136), 8) = 0x6E694D65676E6172LL;
  *(void *)(inited + 136) = 0xE800000000000000LL;
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t result = NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 144) = result;
  *(void *)(inited + 15swift_unknownObjectWeakDestroy(v0 + 2) = 0x78614D65676E6172LL;
  *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE800000000000000LL;
  if (a3 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  uint64_t result = NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 16_Block_object_dispose((const void *)(v30 - 136), 8) = result;
  *(void *)(inited + 176) = 0x73655265676E6172LL;
  *(void *)(inited + 184) = 0xEF6E6F6974756C6FLL;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    *(NSNumber *)(inited + 19swift_unknownObjectWeakDestroy(v0 + 2) = NSNumber.init(integerLiteral:)(a4);
    return (void *)sub_100006E90(inited);
  }

LABEL_7:
  __break(1u);
  return result;
}

    uint64_t v9 = *(void *)(v4 + 8 * v7);
    swift_retain(v9);
    uint64_t v10 = __OFADD__(v8, 1LL);
    uint64_t v11 = v8 + 1;
    if (v10) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }

    swift_bridgeObjectRelease(v4);
    uint64_t v4 = v59;
    uint64_t v9 = v60;
    uint64_t v11 = v61;
    uint64_t v12 = v57;
    if (v61 == v58) {
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
}

  uint64_t v6 = *(_BYTE *)(v2 + 24);
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  uint64_t v7 = *(void *)(v2 + 40);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32) & 1);
  Hasher._combine(_:)(v7);
  if ((*(_BYTE *)(v2 + 49) & 1) != 0)
  {
    uint64_t v8 = 0;
  }

  else
  {
    uint64_t v8 = *(_BYTE *)(v2 + 48);
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v8);
  uint64_t v9 = *(void *)(v2 + 56);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    uint64_t v10 = *(void *)(v9 + 16);
    Hasher._combine(_:)(v10);
    if (v10)
    {
      uint64_t v11 = (unsigned __int16 *)(v9 + 32);
      do
      {
        uint64_t v12 = *((unsigned __int8 *)v11 + 2);
        uint64_t v13 = *v11;
        uint64_t v11 = (unsigned __int16 *)((char *)v11 + 3);
        USBDescriptorControl.hash(into:)(a1, v13 | (v12 << 16));
        --v10;
      }

      while (v10);
    }

    uint64_t v14 = *(void *)(v2 + 64);
    if (v14)
    {
LABEL_16:
      Hasher._combine(_:)(1u);
      uint64_t v15 = *(void *)(v14 + 16);
      Hasher._combine(_:)(v15);
      if (v15)
      {
        uint64_t v16 = (Swift::UInt *)(v14 + 48);
        do
        {
          uint64_t v17 = *(v16 - 2);
          uint64_t v18 = *(v16 - 1);
          uint64_t v19 = *v16;
          v16 += 3;
          Hasher._combine(_:)(v17);
          Hasher._combine(_:)(v18);
          Hasher._combine(_:)(v19);
          --v15;
        }

        while (v15);
      }

      uint64_t v20 = *(void *)(v2 + 72);
      if (v20) {
        goto LABEL_20;
      }
LABEL_26:
      Hasher._combine(_:)(0);
      return;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = *(void *)(v2 + 64);
    if (v14) {
      goto LABEL_16;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v20 = *(void *)(v2 + 72);
  if (!v20) {
    goto LABEL_26;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  uint64_t v21 = *(void *)(v20 + 16);
  Hasher._combine(_:)(v21);
  if (v21)
  {
    uint64_t v22 = (unsigned __int8 *)(v20 + 32);
    do
    {
      unint64_t v23 = *v22++;
      Hasher._combine(_:)(v23);
      --v21;
    }

    while (v21);
  }

            sub_10004B044((uint64_t)&v349, (uint64_t)&v365, &qword_100113EB0);
            goto LABEL_8;
          }

  if (v5 < 0)
  {
LABEL_19:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_20;
  }

  uint64_t v13 = v10 + 32;
  uint64_t v14 = (char *)(a2 + 8 * a3);
  if (v14 >= &v10[v8 + 32] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, 8 * v5);
    return v10;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

  if (v5 < 0)
  {
LABEL_19:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_20;
  }

  uint64_t v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    type metadata accessor for AUAFeedbackTransferBlock();
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  uint64_t v14 = _swiftEmptyArrayStorage;
LABEL_8:
  active = type metadata accessor for ActiveFeatureUnit();
  uint64_t v16 = swift_allocObject(active, 120LL, 7LL);
  *(void *)(v16 + 24) = 0LL;
  swift_unknownObjectWeakInit(v16 + 16, 0LL);
  uint64_t result = sub_100009934((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v16 + 11swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(void *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_BYTE *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
  *(void *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v7;
  *(_BYTE *)(v16 + 5_Block_object_dispose((const void *)(v30 - 136), 8) = BYTE2(v8);
  *(_WORD *)(v16 + 56) = v8;
  *(void *)(v16 + 64) = v9;
  *(_BYTE *)(v16 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(_BYTE *)(v16 + 7swift_unknownObjectWeakDestroy(v0 + 3) = v18;
  *(void *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v20;
  *(void *)(v16 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v21;
  *(void *)(v16 + 96) = v19;
  if (!v14[2])
  {
    uint64_t result = swift_bridgeObjectRelease(v14);
    uint64_t v14 = 0LL;
  }

  *(void *)(v16 + 104) = v14;
  a2[3] = active;
  a2[4] = (uint64_t)&protocol witness table for ActiveFeatureUnit;
  *a2 = v16;
  return result;
}

void sub_10000DF98( char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v13 && sub_10001645C(27LL, v13)) {
    usleep(0x30D40u);
  }
  uint64_t v167 = v13;
  uint64_t v14 = type metadata accessor for AUASampleManager(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = a2;
  uint64_t v16 = sub_100017720((uint64_t)v15);

  uint64_t v17 = *(void *)&v15[OBJC_IVAR___AUAAudioDevice_sampleManager];
  *(void *)&v15[OBJC_IVAR___AUAAudioDevice_sampleManager] = v16;
  swift_release(v17);
  AUAAudioDevice.createStreams()();
  id v18 = [v15 inputStreams];
  if (!v18) {
    goto LABEL_159;
  }
  uint64_t v19 = v18;
  uint64_t v20 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

  if ((unint64_t)v21 >> 62)
  {
    if (v21 < 0) {
      uint64_t v56 = v21;
    }
    else {
      uint64_t v56 = v21 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v21);
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease(v21);
  }

  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t ObjectType = &unk_100113000;
  if (!v22)
  {
LABEL_11:
    swift_bridgeObjectRelease(v21);
    id v24 = [v15 outputStreams];
    if (!v24)
    {
LABEL_169:
      __break(1u);
      return;
    }

    uint64_t v25 = v24;
    uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v20);

    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0) {
        uint64_t v165 = v21;
      }
      else {
        uint64_t v165 = v21 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v21);
      uint64_t v166 = _CocoaArrayWrapper.endIndex.getter(v165);
      swift_bridgeObjectRelease(v21);
      if (v166) {
        goto LABEL_14;
      }
    }

    else if (*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_14:
      if ((v21 & 0xC000000000000001LL) != 0) {
        goto LABEL_64;
      }
      if (*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_16;
      }
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    swift_bridgeObjectRelease(v21);
    sub_100029840( 0xD00000000000002ALL,  0x80000001000CD570LL,  0xD000000000000029LL,  (void *)0x80000001000CD490LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  382LL);
    goto LABEL_18;
  }

  if ((v21 & 0xC000000000000001LL) != 0) {
    goto LABEL_64;
  }
  if (!*(void *)((v21 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    goto LABEL_11;
  }

LABEL_16:
  for (id i = *(id *)(v21 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v21))
  {
    id v27 = i;
    swift_bridgeObjectRelease(v21);
    uint64_t v28 = ObjectType[336];
    uint64_t v29 = *(void **)&v15[v28];
    *(void *)&v15[v28] = v27;

LABEL_18:
    uint64_t v30 = *(void **)&v15[ObjectType[336]];
    if (v30)
    {
      uint64_t v31 = type metadata accessor for AUAStream(0LL);
      if (swift_dynamicCastClass(v30, v31))
      {
        id v32 = v30;
        if ((sub_100083220() & 0xFE) == 2) {
          uint64_t v33 = AUAAudioDevice.usbControllerClockDomain()();
        }
        else {
          uint64_t v33 = 0LL;
        }
        objc_msgSend(v15, "setClockDomain:", v33, v167);
      }
    }

    id v175 = v15;
    uint64_t ObjectType = (void *)swift_getObjectType(a3);
    uint64_t v34 = (*(uint64_t (**)(void *, uint64_t))(a4 + 32))(ObjectType, a4);
    uint64_t v35 = v34;
    if ((unint64_t)v34 >> 62)
    {
      if (v34 >= 0) {
        v34 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v34);
    }

    else
    {
      uint64_t v36 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v173 = a4;
    swift_bridgeObjectRelease(v35);
    id v37 = [v15 outputStreams];
    if (!v37) {
      goto LABEL_160;
    }
    uint64_t v38 = v37;
    uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v20);

    if ((unint64_t)v39 >> 62)
    {
      if (v39 < 0) {
        uint64_t v57 = v39;
      }
      else {
        uint64_t v57 = v39 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v39);
      a3 = _CocoaArrayWrapper.endIndex.getter(v57);
      swift_bridgeObjectRelease(v39);
    }

    else
    {
      a3 = *(void *)((v39 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v39);
    id v40 = [v15 inputStreams];
    if (!v40) {
      goto LABEL_161;
    }
    uint64_t v41 = v40;
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v20);

    if ((unint64_t)a4 >> 62)
    {
      uint64_t v58 = a4 < 0 ? a4 : a4 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(a4);
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v58);
      swift_bridgeObjectRelease(a4);
    }

    else
    {
      uint64_t v21 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(a4);
    uint64_t v42 = a3 + v21;
    if (!__OFADD__(a3, v21)) {
      break;
    }
    __break(1u);
LABEL_64:
    ;
  }

  v174 = ObjectType;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  if (v36 == v42)
  {
    id v45 = v175;
    if (v42 >= 2)
    {
      uint64_t v46 = (*(uint64_t (**)(void *))(v173 + 24))(v174);
      uint64_t v43 = *(void *)(v46 + 176);
      uint64_t v44 = *(void *)(v46 + 184);
      swift_bridgeObjectRetain(v44);
      swift_release(v46);
    }
  }

  else
  {
    id v45 = v175;
  }

  v182[0] = v43;
  v182[1] = v44;
  id v47 = [v45 outputStreams];
  if (!v47) {
    goto LABEL_167;
  }
  unint64_t v48 = v47;
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v20);

  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0) {
      uint64_t v59 = v49;
    }
    else {
      uint64_t v59 = v49 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v49);
    uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v59);
    swift_bridgeObjectRelease(v49);
    if (v60) {
      goto LABEL_41;
    }
    goto LABEL_69;
  }

  if (!*(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_69:
    swift_bridgeObjectRelease(v49);
LABEL_70:
    uint64_t v53 = 0LL;
    uint64_t v55 = 0LL;
    goto LABEL_71;
  }

  uint64_t v26 = sub_10000AE14();
  id v27 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
  *(_BYTE *)uint64_t v28 = 13;
  *(void *)(v28 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v28 + 16) = 0xE000000000000000LL;
  *(void *)(v28 + 24) = 0xD00000000000001ELL;
  *(void *)(v28 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEA70LL;
  *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
  *(void *)(v28 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
  *(void *)(v28 + 56) = 67LL;
  swift_willThrow(v27);
  return (void *)v0;
}

                  return;
                }

                goto LABEL_30;
              }
            }

            __break(1u);
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }

      uint64_t v10 = v2 < 0 ? v2 : v2 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain();
      unsigned __int8 v5 = _CocoaArrayWrapper.endIndex.getter(v10);
      swift_bridgeObjectRelease(v2);
LABEL_20:
      if (!v5) {
        goto LABEL_57;
      }
      sub_10009B0B8(0LL, 1LL);
      if ((unint64_t)_swiftEmptyArrayStorage >> 62)
      {
        else {
          uint64_t v15 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
        }
        swift_bridgeObjectRetain();
        uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v15);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        if (v16)
        {
LABEL_23:
          swift_bridgeObjectRetain();
          uint64_t v11 = sub_1000C53B8(v4, (unint64_t)_swiftEmptyArrayStorage);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          uint64_t v12 = swift_retain(v4);
          if ((v11 & 1) != 0) {
            goto LABEL_24;
          }
          goto LABEL_32;
        }
      }

      else if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_23;
      }

      uint64_t v17 = sub_1000C4FEC(v4, *v1);
      uint64_t v12 = swift_retain(v4);
      if ((v17 & 1) != 0)
      {
LABEL_24:
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        uint64_t v14 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        uint64_t v13 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        goto LABEL_34;
      }

LABEL_41:
  if ((v49 & 0xC000000000000001LL) != 0)
  {
    id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v49);
  }

  else
  {
    if (!*(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_157;
    }

    id v50 = *(id *)(v49 + 32);
  }

  uint64_t v51 = v50;
  swift_bridgeObjectRelease(v49);
  id v52 = [v51 streamName];

  if (v52)
  {
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;
  }

  else
  {
    uint64_t v53 = 0LL;
    uint64_t v55 = 0LL;
  }

  id v45 = v175;
LABEL_71:
  v182[2] = v53;
  v182[3] = v55;
  id v61 = [v45 inputStreams];
  if (!v61) {
    goto LABEL_168;
  }
  unint64_t v62 = v61;
  uint64_t v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v20);

  if (!((unint64_t)v63 >> 62))
  {
    if (*(void *)((v63 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_75;
    }
LABEL_84:
    swift_bridgeObjectRelease(v63);
    goto LABEL_85;
  }

  if (v63 < 0) {
    uint64_t v70 = v63;
  }
  else {
    uint64_t v70 = v63 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v63);
  uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v70);
  swift_bridgeObjectRelease(v63);
  if (!v71) {
    goto LABEL_84;
  }
LABEL_75:
  if ((v63 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)((v63 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      id v64 = *(id *)(v63 + 32);
      goto LABEL_78;
    }

                uint64_t v67 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v32);
                id v66 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                if ((v67 & 1) == 0)
                {
                  if (v66 < 64) {
                    goto LABEL_47;
                  }
                  ((void (*)(char *, uint64_t))v1)(v29, ObjectType);
                  goto LABEL_51;
                }

                if (v66 <= 64) {
                  goto LABEL_49;
                }
                goto LABEL_43;
              }

              id v40 = _stringCompareWithSmolCheck(_:_:expecting:)( v39,  v38,  0x726F7463656C6573LL,  0xE800000000000000LL,  0LL);
              swift_bridgeObjectRelease(v38);
              if ((v40 & 1) != 0)
              {
                uint64_t v38 = v95;
                goto LABEL_34;
              }
            }
          }

          else
          {
            sub_1000178B0((uint64_t)&v105, &qword_100113CD0);
          }

          v23 += 3LL;
          uint64_t v21 = (char **)((char *)v98 - 1);
          uint64_t v22 = v95;
          if (v98 == (char **)1)
          {
            swift_bridgeObjectRelease(v95);
            unsigned __int8 v5 = v90;
            goto LABEL_29;
          }
        }

        __break(1u);
        goto LABEL_41;
      }
    }

    if (v31 < 0) {
      id v64 = v31;
    }
    else {
      id v64 = v31 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v31);
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_bridgeObjectRelease(v31);
LABEL_35:
    swift_bridgeObjectRelease(v31);
    if (v55 < 1
      || (uint64_t v56 = &v36[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection],
          swift_beginAccess(&v36[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection], &v81, 0LL, 0LL),
          *(_DWORD *)v56 == (_DWORD)v66))
    {
    }

    else
    {
      uint64_t v58 = v72 | (v73 << 16);
      uint64_t v59 = v66;
      uint64_t v60 = swift_allocObject(&unk_100103A40, 64LL, 7LL);
      id v61 = v65;
      *(void *)(v60 + 16) = v27;
      *(void *)(v60 + 24) = v61;
      *(_BYTE *)(v60 + 34) = BYTE2(v58);
      *(_WORD *)(v60 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v58;
      *(void *)(v60 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v36;
      *(_DWORD *)(v60 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v59;
      *(void *)(v60 + 56) = v22;
      swift_unknownObjectRetain(v27);
      unint64_t v62 = v36;
      uint64_t v63 = v69;
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000001ALL,  0x80000001000CE2B0LL,  v32 + 8,  0x80000001000CE090LL,  245LL,  (uint64_t)sub_10001F4A0,  v60);
      swift_release(v60);
    }

    swift_unknownObjectRelease(v27, v57);
    return 0LL;
  }

    AUAAudioDevice.addGlobalControls()();
    unint64_t v48 = v58;
    if (v58 || (AUAAudioDevice.addStreamControls()(), (unint64_t v48 = v59) != 0))
    {

LABEL_44:
      uint64_t v4 = 0LL;
      uint64_t v108 = 0LL;
      Swift::String v109 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(24LL);
      v60._countAndFlagsBits = 0x20726F727265LL;
      v60._object = (void *)0xE600000000000000LL;
      String.append(_:)(v60);
      v112[0] = v48;
      id v61 = sub_100008E00(&qword_100113400);
      _print_unlocked<A, B>(_:_:)( v112,  &v108,  v61,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      v62._countAndFlagsBits = 0xD000000000000010LL;
      v62._object = (void *)0x80000001000CEC40LL;
      String.append(_:)(v62);
      uint64_t v63 = v109;
      sub_100029840( v108,  v109,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  392LL);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v41);
      swift_unknownObjectRelease(v104, v64);
      swift_errorRelease(v48);
      goto LABEL_45;
    }

    sub_10002E550(v49, v102, v105);
    uint64_t v4 = 0LL;
    if (!v65)
    {
      uint64_t v68 = *(void *)&v101[v100];
      if (v68 && sub_10001645C(28LL, v68))
      {
        uint64_t v108 = 0LL;
        Swift::String v109 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(31LL);
        swift_bridgeObjectRelease(v109);
        uint64_t v108 = 0xD00000000000001DLL;
        Swift::String v109 = 0x80000001000CEC80LL;
        uint64_t v69 = [v101 boxName];
        if (v69)
        {
          uint64_t v70 = v69;
          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
          uint64_t v73 = v72;
        }

        else
        {
          uint64_t v73 = (void *)0xEE00656369766564LL;
          uint64_t v71 = 0x206E776F6E6B6E55LL;
        }

        v86._countAndFlagsBits = v71;
        v86._object = v73;
        String.append(_:)(v86);
        swift_bridgeObjectRelease(v73);
        unint64_t v87 = v109;
        sub_100029834( v108,  v109,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  380LL);
        swift_bridgeObjectRelease(v87);
      }

      else
      {
        [v101 addAudioDevice:v49];
      }

      uint64_t v30 = v105;
      AUAAudioDevice.publishStreamFormats()();
      uint64_t v4 = v88;
      if (v88)
      {
        uint64_t v108 = 0LL;
        Swift::String v109 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(25LL);
        v89._countAndFlagsBits = 0x20726F727265LL;
        v89._object = (void *)0xE600000000000000LL;
        String.append(_:)(v89);
        v112[0] = v88;
        uint64_t v90 = sub_100008E00(&qword_100113400);
        _print_unlocked<A, B>(_:_:)( v112,  &v108,  v90,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v91._countAndFlagsBits = 0xD000000000000011LL;
        v91._object = (void *)0x80000001000CEC60LL;
        String.append(_:)(v91);
        unint64_t v92 = v109;
        sub_100029840( v108,  v109,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  385LL);
        swift_bridgeObjectRelease(v92);
        unint64_t v93 = v49;
        [v101 removeAudioDevice:v93];

        swift_bridgeObjectRelease(v41);
        swift_unknownObjectRelease(v104, v94);
        swift_errorRelease(v88);
        uint64_t v4 = 0LL;
      }

      else
      {

        swift_bridgeObjectRelease(v41);
        swift_unknownObjectRelease(v104, v95);
      }

      goto LABEL_46;
    }

    id v66 = v65;
    [v101 addAudioDevice:v66];

    swift_bridgeObjectRelease(v41);
    swift_unknownObjectRelease(v104, v67);
LABEL_45:
    uint64_t v30 = v105;
LABEL_46:
    v40 += 3;
    if (!--v39)
    {

      uint64_t v96 = v99;
      goto LABEL_72;
    }
  }

  uint64_t v108 = 0LL;
  Swift::String v109 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(v109);
  uint64_t v108 = 0xD000000000000020LL;
  Swift::String v109 = 0x80000001000CECA0LL;
  uint64_t v51 = [v101 modelName];
  if (v51)
  {
    id v52 = v51;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v55 = v54;

    v56._countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v55);
    uint64_t v57 = v109;
    sub_100029834( v108,  v109,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  370LL);
    swift_bridgeObjectRelease(v57);
    [v49 setWantsDisplayRouting:1];
    goto LABEL_41;
  }

  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
}

    dispatch thunk of BinaryInteger._lowWord.getter(v18, v35);
    v33((char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL), v18);
LABEL_43:
    unint64_t v82 = dispatch thunk of BinaryInteger._lowWord.getter(v18, v35);
    v33(v38, v18);
    uint64_t v2 = v82 / 1000000;
    sub_100017A40(v97);
    return v2;
  }

  if (v72 <= 64) {
    goto LABEL_41;
  }
  __chkstk_darwin(v72);
  uint64_t v73 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v74 = v33;
  uint64_t v75 = (char *)v84 - v73;
  unint64_t v76 = sub_10001CDF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v95, &type metadata for Int, v76, v18, v35);
  id v65 = dispatch thunk of static Comparable.< infix(_:_:)(v75, v70, v18, *(void *)(*(void *)(v35 + 32) + 8LL));
  unint64_t v77 = v75;
  uint64_t v33 = v74;
  v74(v77, v18);
  v74(v70, v18);
LABEL_42:
  if ((v65 & 1) == 0) {
    goto LABEL_43;
  }
  __break(1u);
LABEL_46:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v33)(v65, v18);
  __break(1u);
  return result;
}

LABEL_157:
    __break(1u);
    goto LABEL_158;
  }

  id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v63);
LABEL_78:
  id v65 = v64;
  swift_bridgeObjectRelease(v63);
  id v66 = [v65 streamName];

  if (v66)
  {
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    uint64_t v69 = v68;

    goto LABEL_86;
  }

LABEL_85:
  uint64_t v67 = 0LL;
  uint64_t v69 = 0LL;
LABEL_86:
  uint64_t v183 = v67;
  uint64_t v184 = v69;
  uint64_t v72 = (*(uint64_t (**)(void *))(v173 + 24))(v174);
  uint64_t v74 = *(void *)(v72 + 176);
  uint64_t v73 = *(void *)(v72 + 184);
  swift_bridgeObjectRetain(v73);
  swift_release(v72);
  uint64_t v185 = v74;
  uint64_t v186 = v73;
  uint64_t v187 = a5;
  uint64_t v188 = a6;
  uint64_t v189 = 0LL;
  uint64_t v190 = 0LL;
  if (v44)
  {
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(a6);
    uint64_t v75 = sub_10004F2E8(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v77 = v75[2];
    unint64_t v76 = v75[3];
    if (v77 >= v76 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v76 > 1), v77 + 1, 1, v75);
    }
    v75[2] = v77 + 1;
    uint64_t v78 = &v75[2 * v77];
    v78[4] = v43;
    v78[5] = v44;
  }

  else
  {
    swift_bridgeObjectRetain(a6);
    uint64_t v75 = _swiftEmptyArrayStorage;
  }

  if (v55)
  {
    swift_bridgeObjectRetain(v55);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
      uint64_t v75 = sub_10004F2E8(0LL, v75[2] + 1LL, 1, v75);
    }
    unint64_t v80 = v75[2];
    unint64_t v79 = v75[3];
    if (v80 >= v79 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v79 > 1), v80 + 1, 1, v75);
    }
    v75[2] = v80 + 1;
    unint64_t v81 = &v75[2 * v80];
    v81[4] = v53;
    v81[5] = v55;
    uint64_t v67 = v183;
    uint64_t v69 = v184;
  }

  if (v69)
  {
    swift_bridgeObjectRetain(v69);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
      uint64_t v75 = sub_10004F2E8(0LL, v75[2] + 1LL, 1, v75);
    }
    unint64_t v83 = v75[2];
    unint64_t v82 = v75[3];
    if (v83 >= v82 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v82 > 1), v83 + 1, 1, v75);
    }
    v75[2] = v83 + 1;
    NSString v84 = &v75[2 * v83];
    v84[4] = v67;
    v84[5] = v69;
  }

  uint64_t v85 = v186;
  if (v186)
  {
    uint64_t v86 = v185;
    swift_bridgeObjectRetain(v186);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
      uint64_t v75 = sub_10004F2E8(0LL, v75[2] + 1LL, 1, v75);
    }
    unint64_t v88 = v75[2];
    unint64_t v87 = v75[3];
    if (v88 >= v87 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v87 > 1), v88 + 1, 1, v75);
    }
    v75[2] = v88 + 1;
    id v89 = &v75[2 * v88];
    v89[4] = v86;
    v89[5] = v85;
  }

  uint64_t v90 = v188;
  if (v188)
  {
    uint64_t v91 = v187;
    swift_bridgeObjectRetain(v188);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
      uint64_t v75 = sub_10004F2E8(0LL, v75[2] + 1LL, 1, v75);
    }
    unint64_t v93 = v75[2];
    unint64_t v92 = v75[3];
    if (v93 >= v92 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v92 > 1), v93 + 1, 1, v75);
    }
    v75[2] = v93 + 1;
    uint64_t v94 = &v75[2 * v93];
    v94[4] = v91;
    v94[5] = v90;
  }

  uint64_t v95 = v190;
  if (v190)
  {
    uint64_t v96 = v189;
    swift_bridgeObjectRetain(v190);
    if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
      uint64_t v75 = sub_10004F2E8(0LL, v75[2] + 1LL, 1, v75);
    }
    unint64_t v98 = v75[2];
    unint64_t v97 = v75[3];
    if (v98 >= v97 >> 1) {
      uint64_t v75 = sub_10004F2E8((void *)(v97 > 1), v98 + 1, 1, v75);
    }
    v75[2] = v98 + 1;
    id v99 = &v75[2 * v98];
    v99[4] = v96;
    v99[5] = v95;
  }

  uint64_t v100 = sub_100008E00(&qword_100113B18);
  swift_arrayDestroy(v182, 6LL, v100);
  if (v75[2])
  {
    unint64_t v101 = v75[5];
    swift_bridgeObjectRetain(v101);
  }

  else
  {
    unint64_t v101 = 0x80000001000CD550LL;
  }

  swift_bridgeObjectRelease(v75);
  if (qword_100112938 != -1) {
    swift_once(&qword_100112938, sub_1000B99F4);
  }
  Swift::String v102 = *(void **)(qword_1001172A8 + 16);
  if (v102
    && (id v103 = v102,
        NSString v104 = String._bridgeToObjectiveC()(),
        unsigned __int8 v105 = [v103 BOOLForKey:v104],
        v103,
        v104,
        (v105 & 1) != 0))
  {
    unint64_t v106 = 0xE100000000000000LL;
    uint64_t v107 = 46LL;
  }

  else
  {
    uint64_t v107 = 0LL;
    unint64_t v106 = 0xE000000000000000LL;
  }

  uint64_t v108 = swift_getObjectType(v175);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v108);
  id v110 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v110 localizedStringForKey:v111 value:0 table:0];

  uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v115 = v114;
  swift_bridgeObjectRelease(v101);

  v180 = (void *)v107;
  unint64_t v181 = v106;
  swift_bridgeObjectRetain(v106);
  v116._countAndFlagsBits = v113;
  v116._object = v115;
  String.append(_:)(v116);
  unint64_t v117 = v106;
  id v118 = v175;
  swift_bridgeObjectRelease(v117);
  swift_bridgeObjectRelease(v115);
  NSString v119 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v181);
  [v175 setDeviceName:v119];

  id v120 = [a1 modelName];
  if (!v120)
  {
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }

  v121 = v120;
  [v175 setModelName:v120];
  [v175 setModelUID:v121];

  NSString v122 = String._bridgeToObjectiveC()();
  [v175 setManufacturerName:v122];

  objc_msgSend(v175, "setCanBeDefaultInputDevice:", objc_msgSend(v175, "hasInput"));
  objc_msgSend(v175, "setCanBeDefaultOutputDevice:", objc_msgSend(v175, "hasOutput"));
  [v175 setCanBeDefaultSystemDevice:1];
  [v175 setCanChangeDeviceName:0];
  uint64_t v171 = swift_getObjectType(a9);
  uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 48))(v171, a10);
  uint64_t v124 = v123;
  uint64_t v125 = *(void *)(v123 + 16);
  if (v125)
  {
    v180 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v125);
    uint64_t v126 = 0LL;
    do
    {
      uint64_t v127 = v126 + 1;
      id v128 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:*(void *)(v124 + 8 * v126 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v128);
      uint64_t v129 = v180[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v129);
      uint64_t v130 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v129, v128);
      specialized ContiguousArray._endMutation()(v130);
      uint64_t v126 = v127;
    }

    while (v125 != v127);
    uint64_t v131 = v180;
    swift_bridgeObjectRelease(v124);
    id v118 = v175;
  }

  else
  {
    swift_bridgeObjectRelease(v123);
    uint64_t v131 = _swiftEmptyArrayStorage;
  }

  sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v131);
  [v118 setSamplingRates:isa];

  unint64_t v133 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 16))(v171, a10);
  double v134 = 0.0;
  if ((v135 & 1) == 0)
  {
    double v134 = (double)v133;
    if (v168)
    {
      if (v133 == 44100 && sub_10001645C(1LL, v168)) {
        double v134 = 48000.0;
      }
    }
  }

  AUAAudioDevice.setSamplingRate(_:)(v134);
  [v118 setTransportType:1970496032];
  id v136 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithUnsignedChar:",  (*(unsigned __int8 (**)(void *, uint64_t))(v173 + 40))(v174, v173));
  uint64_t v137 = (objc_class *)type metadata accessor for AUACustomNumberProperty();
  Swift::String v138 = (char *)objc_allocWithZone(v137);
  *(void *)&v138[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v136;
  id v139 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
  id v140 = v136;
  id v141 = [v139 initWithSelector:1967211587 scope:1735159650 element:0];
  v179.receiver = v138;
  v179.super_class = v137;
  id v142 = objc_msgSendSuper2(&v179, "initWithAddress:propertyDataType:qualifierDataType:", v141, 1886155636, 0);

  if (!v142)
  {
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }

  id v143 = v142;
  [v143 setSettable:0];

  [v175 addCustomProperty:v143];
  id v144 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithUnsignedChar:",  (*(unsigned __int8 (**)(void *, uint64_t))(v173 + 48))(v174, v173));
  uint64_t v145 = (char *)objc_allocWithZone(v137);
  *(void *)&v145[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v144;
  id v146 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
  id v147 = v144;
  id v148 = [v146 initWithSelector:1967212099 scope:1735159650 element:0];
  v178.receiver = v145;
  v178.super_class = v137;
  id v149 = objc_msgSendSuper2(&v178, "initWithAddress:propertyDataType:qualifierDataType:", v148, 1886155636, 0);

  if (!v149) {
    goto LABEL_164;
  }
  id v150 = v149;
  [v150 setSettable:0];

  [v175 addCustomProperty:v150];
  id v151 = USBDevice.locationID.getter();
  if ((v152 & 1) != 0) {
    id v153 = 0LL;
  }
  else {
    id v153 = v151;
  }
  id v154 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:v153];
  uint64_t v155 = (char *)objc_allocWithZone(v137);
  *(void *)&v155[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v154;
  id v156 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
  id v157 = v154;
  id v158 = [v156 initWithSelector:1818446148 scope:1735159650 element:0];
  v177.receiver = v155;
  v177.super_class = v137;
  id v159 = objc_msgSendSuper2(&v177, "initWithAddress:propertyDataType:qualifierDataType:", v158, 1886155636, 0);

  if (!v159) {
    goto LABEL_165;
  }
  id v160 = v159;
  [v160 setSettable:0];

  [v175 addCustomProperty:v160];
  v161 = (objc_class *)type metadata accessor for AUABooleanProperty();
  objc_super v162 = objc_allocWithZone(v161);
  v162[OBJC_IVAR____TtC9AUASDCore18AUABooleanProperty_isSet] = 1;
  id v163 = [objc_allocWithZone(ASDPropertyAddress) initWithSelector:1967215440 scope:1735159650 element:0];
  v176.receiver = v162;
  v176.super_class = v161;
  id v164 = objc_msgSendSuper2(&v176, "initWithAddress:propertyDataType:qualifierDataType:", v163, 1886155636, 0);

  if (!v164) {
    goto LABEL_166;
  }
  [v164 setSettable:0];
  [v175 addCustomProperty:v164];
}

uint64_t AUAAudioDevice.clockForOutline.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___AUAAudioDevice_clock));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.publishStreamFormats()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  unint64_t v161 = sub_100006FA8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_streamingInterfaces);
  unint64_t v149 = (unint64_t)v4 >> 62;
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(v4, 2LL);
  char active = 0;
  if (v5)
  {
    while (1)
    {
      uint64_t v7 = 4LL;
      uint64_t v8 = 0LL;
      if ((v4 & 0xC000000000000001LL) == 0) {
        break;
      }
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
        BOOL v10 = __OFADD__(v8, 1LL);
        uint64_t v11 = v8 + 1;
        if (v10) {
          break;
        }
LABEL_8:
        if ((active & 1) != 0)
        {
          swift_release(v9);
          char active = 1;
          if (v11 == v5) {
            goto LABEL_19;
          }
        }

        else
        {
          char active = ActiveStreamingInterface.hasValidAlternateSettingsControl.getter();
          swift_release(v9);
          if (v11 == v5) {
            goto LABEL_19;
          }
        }

        uint64_t v8 = ++v7 - 4;
        if ((v4 & 0xC000000000000001LL) == 0) {
          goto LABEL_7;
        }
      }

LABEL_19:
  swift_bridgeObjectRelease_n(v4, 2LL);
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR___AUAAudioDevice_clock);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR___AUAAudioDevice_clock + 8);
  uint64_t ObjectType = swift_getObjectType(v14);
  uint64_t v150 = v13;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(ObjectType, v13) & 1) == 0
    && *(void *)(v3 + OBJC_IVAR___AUAAudioDevice_function)
    && (uint64_t v15 = *(void *)(v3 + OBJC_IVAR___AUAAudioDevice_function + 8),
        uint64_t v16 = swift_getObjectType(*(void *)(v3 + OBJC_IVAR___AUAAudioDevice_function)),
        (uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15)) != 0))
  {
    id v18 = (void *)v17;
    uint64_t v19 = *(void *)(v17 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v19) {
      BOOL v20 = sub_10001645C(0LL, v19);
    }
    else {
      BOOL v20 = 0;
    }
  }

  else
  {
    BOOL v20 = 0;
  }

  char v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 56))(ObjectType, v150);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 40))(ObjectType, v150);
  uint64_t v156 = v4;
  if (v22)
  {
    uint64_t v155 = v22;
    id v144 = *(uint64_t (**)(uint64_t, uint64_t))(v150 + 16);
    uint64_t v23 = v22;
    uint64_t v137 = v144(ObjectType, v150);
    char v136 = v24;
    uint64_t v140 = *(void *)(v23 + 16);
    if (v140)
    {
      unint64_t v25 = 0LL;
      char v135 = v21 ^ 1 | v20;
      uint64_t v26 = v4 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v139 = v4 & 0xFFFFFFFFFFFFFF8LL;
      if (v4 < 0) {
        uint64_t v26 = v4;
      }
      uint64_t v138 = v26;
      unint64_t v153 = v4 & 0xC000000000000001LL;
      char v152 = active;
      uint64_t v142 = v14;
      while (1)
      {
        if (v25 >= *(void *)(v23 + 16)) {
          goto LABEL_166;
        }
        unint64_t v141 = v25;
        id v27 = (unint64_t *)(v155 + 32 + 24 * v25);
        unint64_t v28 = *v27;
        unint64_t v29 = v27[1];
        unint64_t v30 = v27[2];
        unint64_t v159 = v29;
        uint64_t v158 = v30;
        if (v29 == v28) {
          break;
        }
        if (v28 >= v29) {
          goto LABEL_156;
        }
        if (v30 < 2)
        {
          if (v30 != 1)
          {
LABEL_156:
            swift_bridgeObjectRelease(v23);
            unint64_t v131 = sub_10000AE14();
            uint64_t v132 = swift_allocError(&type metadata for AUAError, v131, 0LL, 0LL);
            *(_BYTE *)uint64_t v133 = 1;
            *(void *)(v133 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v133 + 16) = 0xE000000000000000LL;
            *(void *)(v133 + 24) = 0xD000000000000016LL;
            *(void *)(v133 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD860LL;
            *(void *)(v133 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
            *(void *)(v133 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
            *(void *)(v133 + 56) = 487LL;
            swift_willThrow(v132);
            unint64_t v122 = v161;
LABEL_149:
            swift_bridgeObjectRelease(v122);
            return;
          }

          uint64_t v46 = sub_100008E00(&qword_100113B40);
          id v32 = (void *)swift_allocObject(v46, 40LL, 7LL);
          *((_OWORD *)v32 + 1) = xmmword_1000D3D30;
          uint64_t v33 = v144(ObjectType, v150);
          if ((v47 & 1) != 0) {
            goto LABEL_168;
          }
          uint64_t v23 = v155;
          goto LABEL_56;
        }

        if ((v30 & 0x8000000000000000LL) != 0) {
          goto LABEL_167;
        }
        unint64_t v34 = v28;
        char v35 = 0;
        unint64_t v36 = 0LL;
        char v37 = 0;
        unint64_t v38 = v34;
        id v32 = _swiftEmptyArrayStorage;
        BOOL v39 = v34 == v29;
        if (v34 < v29)
        {
          do
          {
            unint64_t v41 = v38 + v158;
            if (__CFADD__(v38, v158))
            {
              char v37 = 0;
              unint64_t v36 = 0x8000000000000000LL;
              unint64_t v41 = -1LL;
              if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0) {
                goto LABEL_47;
              }
            }

            else
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
              unint64_t v36 = 0LL;
              char v37 = 1;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                goto LABEL_47;
              }
            }

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  uint64_t v16 = (char *)swift_unknownObjectWeakLoadStrong(v2);
  if (v16)
  {
    uint64_t v17 = v16;
    id v18 = *(void *)&v16[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v18)
    {
      uint64_t v19 = sub_10001645C(5LL, v18);

      if (v19)
      {
LABEL_31:
        uint64_t v83 = 1;
        if (v1 < 0) {
          goto LABEL_131;
        }
        goto LABEL_37;
      }
    }

    else
    {
    }
  }

  if (qword_100112938 != -1) {
    swift_once(&qword_100112938, sub_1000B99F4);
  }
  BOOL v20 = *(void **)(qword_1001172A8 + 16);
  if (!v20)
  {
LABEL_34:
    uint64_t v83 = 0;
    if (v1 < 0) {
      goto LABEL_131;
    }
    goto LABEL_37;
  }

  char v21 = v20;
  uint64_t v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = [v21 stringForKey:v22];

  if (!v23)
  {

    goto LABEL_34;
  }

  char v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  if (v24 == 0x656C7069746C756DLL && v26 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    goto LABEL_31;
  }

  uint64_t v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, 0x656C7069746C756DLL, 0xE800000000000000LL, 0LL);
  swift_bridgeObjectRelease(v26);
  if (v1 < 0) {
    goto LABEL_131;
  }
LABEL_37:
  if ((v1 & 0x4000000000000000LL) == 0)
  {
    if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) < 1)
    {
LABEL_125:
      swift_bridgeObjectRelease(v1);
      return _swiftEmptyArrayStorage;
    }

    goto LABEL_39;
  }

    if (!v3) {
      return 1LL;
    }
    if (*i != *v4) {
      return 0LL;
    }
    v4 += 4;
    --v3;
  }

  if (!v7)
  {
    if (v9 != v6) {
      return 0LL;
    }
    goto LABEL_19;
  }

  swift_bridgeObjectRelease(0LL);
LABEL_25:
  swift_bridgeObjectRelease(v7);
  return 0LL;
}

LABEL_49:
            unint64_t v44 = v32[2];
            unint64_t v43 = v32[3];
            id v45 = v32;
            if (v44 >= v43 >> 1) {
              id v45 = sub_10004F1A4((void *)(v43 > 1), v44 + 1, 1, v32);
            }
            v45[2] = v44 + 1;
            id v32 = v45;
            v45[v44 + 4] = v38;
            unint64_t v38 = v41;
            unint64_t v29 = v159;
            BOOL v39 = v41 == v159;
          }

          while (v41 < v159);
        }

        char v40 = !v39;
        if (((v40 | v35) & 1) == 0 && v37 & 1 | (v36 != 0x8000000000000000LL))
        {
          char v35 = 1;
          unint64_t v41 = v38;
          if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) != 0)
          {
            unint64_t v41 = v38;
            goto LABEL_49;
          }

  unint64_t v106 = (void (*)(unint64_t, uint64_t))v14;
  int64_t v110 = v98;
  __chkstk_darwin(v84);
  uint64_t v85 = &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v112)(v85, v59, ObjectType);
  uint64_t v118 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v86 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v13);
  uint64_t v87 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v13);
  if ((v86 & 1) == 0)
  {
    if (v87 > 63)
    {
      unint64_t v113 = 0x7FFFFFFFFFFFFFFFLL;
      __chkstk_darwin(v87);
      id v93 = &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
      uint64_t v94 = (*((uint64_t (**)(_BYTE *, _BYTE *, uint64_t))v105 + 4))(v93, v93, ObjectType);
      __chkstk_darwin(v94);
      char v95 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v113, &type metadata for Int, v95, ObjectType, v13);
      uint64_t v80 = dispatch thunk of static Comparable.< infix(_:_:)( v93,  v93,  ObjectType,  *(void *)(*((void *)v13 + 4) + 8LL));
      unint64_t v96 = v106;
      v106((unint64_t)v93, ObjectType);
      uint64_t v97 = v93;
      uint64_t v14 = (uint64_t)v96;
      v96((unint64_t)v97, ObjectType);
      if ((v80 & 1) == 0) {
        goto LABEL_59;
      }
      goto LABEL_60;
    }

LABEL_47:
          id v32 = sub_10004F1A4(0LL, v32[2] + 1LL, 1, v32);
          goto LABEL_49;
        }

        char active = v152;
        uint64_t v14 = v142;
        unint64_t v28 = v34;
        uint64_t v23 = v155;
        uint64_t v4 = v156;
LABEL_58:
        uint64_t v143 = v32[2];
        if (v143)
        {
          unint64_t v48 = 0LL;
          uint64_t v145 = v32;
          id v146 = v32 + 4;
          while (1)
          {
            if (v48 >= v32[2]) {
              goto LABEL_165;
            }
            unint64_t v147 = v48;
            unint64_t v154 = v146[v48];
            if ((active & 1) == 0) {
              break;
            }
            uint64_t v49 = swift_getObjectType(v14);
            uint64_t v50 = v144(v49, v150);
            uint64_t v23 = v155;
            if ((v51 & 1) == 0 && v50 == v154) {
              break;
            }
            if ((v135 & 1) == 0)
            {
              (*(void (**)(unint64_t, void, uint64_t))(v150 + 24))(v154, 0LL, v49);
              uint64_t v23 = v155;
              if (v149) {
                goto LABEL_69;
              }
LABEL_65:
              uint64_t v52 = *(void *)(v139 + 16);
              swift_bridgeObjectRetain(v4);
              if (v52) {
                goto LABEL_70;
              }
LABEL_94:
              swift_bridgeObjectRelease(v4);
              uint64_t v14 = v142;
            }

            unint64_t v48 = v147 + 1;
            id v32 = v145;
            if (v147 + 1 == v143) {
              goto LABEL_96;
            }
          }

          if (!v149) {
            goto LABEL_65;
          }
LABEL_69:
          swift_bridgeObjectRetain_n(v4, 2LL);
          uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v138);
          swift_bridgeObjectRelease(v4);
          if (v52)
          {
LABEL_70:
            uint64_t v53 = 4LL;
            uint64_t v151 = v52;
            while (1)
            {
              uint64_t v55 = v53 - 4;
              if (v153)
              {
                uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v53 - 4, v4);
                uint64_t v57 = v53 - 3;
                if (__OFADD__(v55, 1LL)) {
                  goto LABEL_157;
                }
              }

              else
              {
                uint64_t v56 = *(void *)(v4 + 8 * v53);
                swift_retain(v56);
                uint64_t v57 = v53 - 3;
                if (__OFADD__(v55, 1LL))
                {
LABEL_157:
                  __break(1u);
LABEL_158:
                  __break(1u);
LABEL_159:
                  __break(1u);
                  goto LABEL_160;
                }
              }

              uint64_t v58 = v2;
              ActiveStreamingInterface.auaStream.getter();
              if (!v59)
              {
                swift_bridgeObjectRelease(v155);
                swift_bridgeObjectRelease(v145);
                swift_bridgeObjectRelease(v4);
                unint64_t v124 = sub_10000AE14();
                uint64_t v125 = swift_allocError(&type metadata for AUAError, v124, 0LL, 0LL);
                *(_BYTE *)uint64_t v126 = 1;
                *(void *)(v126 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                *(void *)(v126 + 16) = 0xE000000000000000LL;
                *(void *)(v126 + 24) = 0xD000000000000016LL;
                *(void *)(v126 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD860LL;
                *(void *)(v126 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
                *(void *)(v126 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
                *(void *)(v126 + 56) = 500LL;
                swift_willThrow(v125);
                swift_bridgeObjectRelease(v161);
                uint64_t v127 = v56;
LABEL_153:
                swift_release(v127);
                return;
              }

              uint64_t v60 = v59;
              unint64_t v61 = v28;
              unint64_t v62 = ActiveStreamingInterface.streamFormats(forSamplingRate:inClockRateRange:nonStreamingTerminal:)( v154,  v28,  v29,  v158,  &v59[OBJC_IVAR___AUAStream_otherTerminal]);
              if (v58)
              {
                swift_bridgeObjectRelease(v161);
                swift_bridgeObjectRelease(v155);
                swift_bridgeObjectRelease(v145);
                swift_bridgeObjectRelease(v156);

                swift_release(v56);
                return;
              }

              uint64_t v63 = (uint64_t)v62;
              uint64_t v157 = v56;
              if (*(void *)(v161 + 16))
              {
                id v64 = v60;
                unint64_t v65 = sub_100016B60((uint64_t)v64);
                id v66 = _swiftEmptyArrayStorage;
                if ((v67 & 1) != 0)
                {
                  id v66 = *(void **)(*(void *)(v161 + 56) + 8 * v65);
                  swift_bridgeObjectRetain(v66);
                }
              }

              else
              {
                id v66 = _swiftEmptyArrayStorage;
              }

              sub_1000929E4(v63);
              id v68 = v60;
              uint64_t v69 = swift_isUniquelyReferenced_nonNull_native(v161);
              unint64_t v71 = sub_100016B60((uint64_t)v68);
              uint64_t v72 = *(void *)(v161 + 16);
              BOOL v73 = (v70 & 1) == 0;
              uint64_t v74 = v72 + v73;
              if (__OFADD__(v72, v73)) {
                goto LABEL_158;
              }
              char v75 = v70;
              if (*(void *)(v161 + 24) >= v74)
              {
                if ((v69 & 1) == 0) {
                  sub_100096BF4();
                }
              }

              else
              {
                sub_1000960EC(v74, v69);
                unint64_t v76 = sub_100016B60((uint64_t)v68);
                if ((v75 & 1) != (v77 & 1)) {
                  goto LABEL_169;
                }
                unint64_t v71 = v76;
              }

              if ((v75 & 1) != 0)
              {
                uint64_t v54 = *(void *)(v161 + 56);
                swift_bridgeObjectRelease(*(void *)(v54 + 8 * v71));
                *(void *)(v54 + 8 * v71) = v66;
              }

              else
              {
                *(void *)(v161 + 8 * (v71 >> 6) + 64) |= 1LL << v71;
                uint64_t v78 = 8 * v71;
                *(void *)(*(void *)(v161 + 48) + v7_Block_object_dispose((const void *)(v30 - 136), 8) = v68;
                *(void *)(*(void *)(v161 + 56) + v7_Block_object_dispose((const void *)(v30 - 136), 8) = v66;
                uint64_t v79 = *(void *)(v161 + 16);
                BOOL v10 = __OFADD__(v79, 1LL);
                uint64_t v80 = v79 + 1;
                if (v10) {
                  goto LABEL_162;
                }
                *(void *)(v161 + 16) = v80;
                id v81 = v68;
              }

              swift_release(v157);

              swift_bridgeObjectRelease(0x8000000000000000LL);
              ++v53;
              BOOL v39 = v57 == v151;
              uint64_t v2 = 0LL;
              unint64_t v29 = v159;
              uint64_t v23 = v155;
              char active = v152;
              unint64_t v28 = v61;
              uint64_t v4 = v156;
              if (v39) {
                goto LABEL_94;
              }
            }
          }

          goto LABEL_94;
        }

  __break(1u);
  return result;
}

  if ((_DWORD)a1 != -536870165)
  {
    unint64_t v76 = swift_allocObject(&unk_100106438, 24LL, 7LL);
    swift_unknownObjectWeakInit(v76 + 16, a3);
    sub_10008EC40(a3, v76);
    swift_release(v76);
  }

  uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v13);
  uint64_t v111 = v98;
  __chkstk_darwin(v83);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v112)( &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v59,  ObjectType);
  if (v83 >= 65)
  {
    uint64_t v84 = ((uint64_t (*)(_BYTE *, uint64_t))v14)( &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  ObjectType);
    goto LABEL_49;
  }

  uint64_t v92 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v13);
  ((void (*)(_BYTE *, uint64_t))v14)(&v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)], ObjectType);
  if (v92 != 64 || (uint64_t v84 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v13), (v84 & 1) != 0))
  {
LABEL_59:
    uint64_t v0 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v13);
    ((void (*)(_BYTE *, uint64_t))v14)(v59, ObjectType);

    sub_100017A40(&v115);
    return v0;
  }

LABEL_96:
        swift_bridgeObjectRelease(v32);
        unint64_t v25 = v141 + 1;
        if (v141 + 1 == v140) {
          goto LABEL_97;
        }
      }

      uint64_t v31 = sub_100008E00(&qword_100113B40);
      id v32 = (void *)swift_allocObject(v31, 40LL, 7LL);
      *((_OWORD *)v32 + 1) = xmmword_1000D3D30;
      uint64_t v33 = v28;
LABEL_56:
      v32[4] = v33;
      goto LABEL_58;
    }

LABEL_97:
    swift_bridgeObjectRelease(v23);
    if ((active & 1) != 0)
    {
      uint64_t v82 = swift_getObjectType(v14);
      (*(void (**)(uint64_t, void, uint64_t))(v150 + 24))(v137, v136 & 1, v82);
    }

    goto LABEL_125;
  }

  if (v149)
  {
    if (v4 < 0) {
      uint64_t v84 = v4;
    }
    else {
      uint64_t v84 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v4, 2LL);
    uint64_t v83 = _CocoaArrayWrapper.endIndex.getter(v84);
    swift_bridgeObjectRelease(v4);
    if (!v83) {
      goto LABEL_124;
    }
LABEL_106:
    unint64_t v160 = v4 & 0xC000000000000001LL;
    uint64_t v85 = 4LL;
    while (1)
    {
      uint64_t v87 = v85 - 4;
      if (v160)
      {
        uint64_t v88 = specialized _ArrayBuffer._getElementSlowPath(_:)(v85 - 4, v4);
        BOOL v10 = __OFADD__(v87, 1LL);
        uint64_t v89 = v85 - 3;
        if (v10) {
          goto LABEL_159;
        }
      }

      else
      {
        uint64_t v88 = *(void *)(v4 + 8 * v85);
        swift_retain(v88);
        BOOL v10 = __OFADD__(v87, 1LL);
        uint64_t v89 = v85 - 3;
        if (v10) {
          goto LABEL_159;
        }
      }

      ActiveStreamingInterface.auaStream.getter();
      if (!v90)
      {
        swift_bridgeObjectRelease(v4);
        unint64_t v128 = sub_10000AE14();
        uint64_t v129 = swift_allocError(&type metadata for AUAError, v128, 0LL, 0LL);
        *(_BYTE *)uint64_t v130 = 1;
        *(void *)(v130 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v130 + 16) = 0xE000000000000000LL;
        *(void *)(v130 + 24) = 0xD000000000000016LL;
        *(void *)(v130 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD860LL;
        *(void *)(v130 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
        *(void *)(v130 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
        *(void *)(v130 + 56) = 516LL;
        swift_willThrow(v129);
        swift_bridgeObjectRelease(v161);
        uint64_t v127 = v88;
        goto LABEL_153;
      }

      uint64_t v91 = v89;
      uint64_t v92 = v88;
      id v93 = v90;
      uint64_t v94 = swift_isUniquelyReferenced_nonNull_native(v161);
      unint64_t v96 = sub_100016B60((uint64_t)v93);
      uint64_t v97 = *(void *)(v161 + 16);
      BOOL v98 = (v95 & 1) == 0;
      uint64_t v99 = v97 + v98;
      if (__OFADD__(v97, v98)) {
        break;
      }
      char v100 = v95;
      if (*(void *)(v161 + 24) >= v99)
      {
        if ((v94 & 1) == 0) {
          sub_100096BF4();
        }
      }

      else
      {
        sub_1000960EC(v99, v94);
        unint64_t v101 = sub_100016B60((uint64_t)v93);
        if ((v100 & 1) != (v102 & 1)) {
          goto LABEL_169;
        }
        unint64_t v96 = v101;
      }

      if ((v100 & 1) != 0)
      {
        uint64_t v86 = *(void *)(v161 + 56);
        swift_bridgeObjectRelease(*(void *)(v86 + 8 * v96));
        *(void *)(v86 + 8 * v96) = _swiftEmptyArrayStorage;
      }

      else
      {
        *(void *)(v161 + 8 * (v96 >> 6) + 64) |= 1LL << v96;
        *(void *)(*(void *)(v161 + 48) + 8 * v96) = v93;
        *(void *)(*(void *)(v161 + 56) + 8 * v96) = _swiftEmptyArrayStorage;
        uint64_t v103 = *(void *)(v161 + 16);
        BOOL v10 = __OFADD__(v103, 1LL);
        uint64_t v104 = v103 + 1;
        if (v10) {
          goto LABEL_163;
        }
        *(void *)(v161 + 16) = v104;
        id v105 = v93;
      }

      swift_release(v92);

      swift_bridgeObjectRelease(0x8000000000000000LL);
      ++v85;
      BOOL v39 = v91 == v83;
      uint64_t v2 = v1;
      uint64_t v4 = v156;
      if (v39) {
        goto LABEL_124;
      }
    }

LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }

  uint64_t v83 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v4);
  if (v83) {
    goto LABEL_106;
  }
LABEL_124:
  swift_bridgeObjectRelease(v4);
LABEL_125:
  unint64_t v106 = v161 + 64;
  uint64_t v107 = 1LL << *(_BYTE *)(v161 + 32);
  uint64_t v108 = -1LL;
  if (v107 < 64) {
    uint64_t v108 = ~(-1LL << v107);
  }
  unint64_t v109 = v108 & *(void *)(v161 + 64);
  int64_t v110 = (unint64_t)(v107 + 63) >> 6;
  uint64_t v111 = swift_bridgeObjectRetain(v161);
  int64_t v112 = 0LL;
  if (!v109) {
    goto LABEL_129;
  }
LABEL_128:
  unint64_t v113 = __clz(__rbit64(v109));
  v109 &= v109 - 1;
  for (unint64_t i = v113 | (v112 << 6); ; unint64_t i = __clz(__rbit64(v115)) + (v112 << 6))
  {
    uint64_t v117 = 8 * i;
    uint64_t v118 = v111;
    uint64_t v119 = *(void *)(*(void *)(v111 + 56) + v117);
    id v120 = *(id *)(*(void *)(v111 + 48) + v117);
    uint64_t v121 = swift_bridgeObjectRetain(v119);
    sub_1000835CC(v121);
    if (v2)
    {
      swift_bridgeObjectRelease(v119);

      swift_release(v118);
      unint64_t v122 = v118;
      goto LABEL_149;
    }

    swift_bridgeObjectRelease(v119);
    uint64_t v111 = v118;
    if (v109) {
      goto LABEL_128;
    }
LABEL_129:
    BOOL v10 = __OFADD__(v112++, 1LL);
    if (v10) {
      goto LABEL_161;
    }
    if (v112 >= v110)
    {
LABEL_148:
      uint64_t v123 = v111;
      swift_release(v111);
      unint64_t v122 = v123;
      goto LABEL_149;
    }

    unint64_t v115 = *(void *)(v106 + 8 * v112);
    if (!v115) {
      break;
    }
LABEL_139:
    unint64_t v109 = (v115 - 1) & v115;
  }

  int64_t v116 = v112 + 1;
  if (v112 + 1 >= v110) {
    goto LABEL_148;
  }
  unint64_t v115 = *(void *)(v106 + 8 * v116);
  if (v115) {
    goto LABEL_138;
  }
  int64_t v116 = v112 + 2;
  if (v112 + 2 >= v110) {
    goto LABEL_148;
  }
  unint64_t v115 = *(void *)(v106 + 8 * v116);
  if (v115) {
    goto LABEL_138;
  }
  int64_t v116 = v112 + 3;
  if (v112 + 3 >= v110) {
    goto LABEL_148;
  }
  unint64_t v115 = *(void *)(v106 + 8 * v116);
  if (v115)
  {
LABEL_138:
    int64_t v112 = v116;
    goto LABEL_139;
  }

  while (1)
  {
    int64_t v112 = v116 + 1;
    if (__OFADD__(v116, 1LL)) {
      break;
    }
    if (v112 >= v110) {
      goto LABEL_148;
    }
    unint64_t v115 = *(void *)(v106 + 8 * v112);
    ++v116;
    if (v115) {
      goto LABEL_139;
    }
  }

LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  uint64_t v134 = type metadata accessor for AUAStream(0LL);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v134);
  __break(1u);
}

    uint64_t ObjectType = (uint64_t)sub_10004F3F4(0LL, *(void *)(ObjectType + 16) + 1LL, 1, (void *)ObjectType);
    goto LABEL_128;
  }

  uint64_t v84 = *(void *)(ObjectType + 16);
  uint64_t v133 = ObjectType + 16;
  if (!v84)
  {
LABEL_145:
    sub_1000516F0(&v139, 81LL);
    goto LABEL_146;
  }

Swift::Void __swiftcall AUAAudioDevice.createStreams()()
{
  uint64_t v1 = v0;
  id v2 = [v0 inputStreams];
  if (!v2) {
    goto LABEL_61;
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v10);
    if (!v6) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v5);
    if (!v6) {
      goto LABEL_14;
    }
  }

  if (v6 < 1)
  {
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  for (uint64_t i = 0LL; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001LL) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    }
    else {
      id v8 = *(id *)(v5 + 8 * i + 32);
    }
    uint64_t v9 = v8;
    [v1 removeInputStream:v8];
  }

Swift::Void __swiftcall AUAAudioDevice.clockChanged()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_clock + 8);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v0 + OBJC_IVAR___AUAAudioDevice_clock));
  double v4 = (double)(unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
  if ((v5 & 1) != 0) {
    double v4 = 0.0;
  }
  AUAAudioDevice.setSamplingRate(_:)(v4);
  AUAAudioDevice.publishStreamFormats()();
  if (v6)
  {
    uint64_t v7 = (void *)0xEE00656369766564LL;
    uint64_t v8 = 0x206E776F6E6B6E55LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(57LL);
    v9._countAndFlagsBits = 0xD00000000000001ALL;
    v9._object = (void *)0x80000001000CD800LL;
    String.append(_:)(v9);
    uint64_t v10 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function);
    if (v10)
    {
      uint64_t v11 = *(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function + 8);
      uint64_t v12 = swift_getObjectType(v10);
      uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
      if (v13)
      {
        uint64_t v14 = v13;
        id v15 = [v13 boxName];

        if (v15)
        {
          uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
          uint64_t v7 = v16;
        }
      }
    }

    v17._countAndFlagsBits = v8;
    v17._object = v7;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v7);
    v18._object = (void *)0x80000001000CD820LL;
    v18._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v18);
    uint64_t v21 = v6;
    uint64_t v19 = sub_100008E00(&qword_100113400);
    _print_unlocked<A, B>(_:_:)( &v21,  &v22,  v19,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v20 = v23;
    sub_100029840( v22,  v23,  0x6168436B636F6C63LL,  (void *)0xEE0029286465676ELL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  568LL);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(v6);
  }

Swift::Void __swiftcall AUAAudioDevice.updateSafetyOffsets()()
{
  uint64_t v2 = v0;
  uint64_t v3 = &v0[OBJC_IVAR___AUAAudioDevice_function];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function];
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = *((void *)v3 + 1);
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
  uint64_t v1 = (char *)*(id *)(v7 + 152);
  swift_release(v7);
  id v8 = *(id *)&v1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService];
  Swift::String v9 = sub_1000B815C(v8);
  uint64_t v11 = v10;

  if (v9 == (void *)0x49434872657355LL && v11 == 0xE700000000000000LL)
  {

    swift_bridgeObjectRelease(0xE700000000000000LL);
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, 0x49434872657355LL, 0xE700000000000000LL, 0LL);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) == 0)
    {
      if (os_variant_has_internal_content("com.apple.usbaudiod"))
      {
        if (qword_100112938 == -1) {
          goto LABEL_12;
        }
        goto LABEL_46;
      }

      goto LABEL_19;
    }
  }

  LODWORD(v14) = 10;
  for (double i = 10.0; ; double i = (double)v35)
  {
    while (1)
    {
      [v2 samplingRate];
      double v21 = v20 / (double)v14;
      if ((~*(void *)&v21 & 0x7FF0000000000000LL) == 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }

      if (v21 <= -1.0) {
        goto LABEL_39;
      }
      if (v21 >= 4294967300.0) {
        goto LABEL_40;
      }
      [v2 setInputSafetyOffset:v21 + 2];
      [v2 samplingRate];
      double v23 = v22 / i;
      if ((~*(void *)&v23 & 0x7FF0000000000000LL) == 0) {
        goto LABEL_42;
      }
      if (v23 <= -1.0) {
        goto LABEL_43;
      }
      if (v23 >= 4294967300.0) {
        goto LABEL_44;
      }
      if (v23 < 0xFFFFFFFE)
      {
        [v2 setOutputSafetyOffset:v23 + 2];
        _StringGuts.grow(_:)(43LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        [v2 inputSafetyOffset];
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
        object = v24._object;
        String.append(_:)(v24);
        swift_bridgeObjectRelease(object);
        v26._object = (void *)0x80000001000CD700LL;
        v26._countAndFlagsBits = 0xD000000000000015LL;
        String.append(_:)(v26);
        [v2 outputSafetyOffset];
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
        uint64_t v28 = v27._object;
        String.append(_:)(v27);
        swift_bridgeObjectRelease(v28);
        sub_100029834( 0xD000000000000012LL,  0x80000001000CD6E0LL,  0xD000000000000015LL,  (void *)0x80000001000CD720LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  628LL);
        swift_bridgeObjectRelease(0x80000001000CD6E0LL);
        return;
      }

LABEL_45:
      __break(1u);
LABEL_46:
      swift_once(&qword_100112938, sub_1000B99F4);
LABEL_12:
      uint64_t v16 = qword_1001172A8;
      if ((sub_1000B9A84(0) & 1) != 0 && (sub_1000B9A84(1) & 1) != 0) {
        break;
      }
LABEL_19:

LABEL_20:
      LODWORD(v14) = 666;
LABEL_21:
      double i = 1000.0;
    }

    Swift::String v17 = *(void **)(v16 + 16);
    if (!v17) {
      goto LABEL_31;
    }
    id v18 = v17;
    NSString v19 = String._bridgeToObjectiveC()();
    unint64_t v14 = (unint64_t)[v18 integerForKey:v19];

    if ((v14 & 0x8000000000000000LL) != 0) {
      goto LABEL_47;
    }
    if (HIDWORD(v14)) {
      break;
    }
    if ((v14 - 8001) <= 0xFFFFE1B8)
    {
LABEL_31:
      _StringGuts.grow(_:)(68LL);
      v29._countAndFlagsBits = 0xD000000000000026LL;
      v29._object = (void *)0x80000001000CD7B0LL;
      String.append(_:)(v29);
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      unint64_t v14 = (unint64_t)v30._object;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v14);
      v31._countAndFlagsBits = 0xD00000000000001CLL;
      v31._object = (void *)0x80000001000CD770LL;
      String.append(_:)(v31);
      sub_100029834( 0LL,  0xE000000000000000LL,  0xD000000000000015LL,  (void *)0x80000001000CD720LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  608LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      LODWORD(v14) = 666;
    }

    uint64_t v32 = *(void **)(qword_1001172A8 + 16);
    if (!v32)
    {
LABEL_37:
      _StringGuts.grow(_:)(69LL);
      v36._countAndFlagsBits = 0xD000000000000027LL;
      v36._object = (void *)0x80000001000CD740LL;
      String.append(_:)(v36);
      v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      id v38 = v37._object;
      String.append(_:)(v37);
      swift_bridgeObjectRelease(v38);
      v39._countAndFlagsBits = 0xD00000000000001CLL;
      v39._object = (void *)0x80000001000CD770LL;
      String.append(_:)(v39);
      sub_100029834( 0LL,  0xE000000000000000LL,  0xD000000000000015LL,  (void *)0x80000001000CD720LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  618LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);

      goto LABEL_21;
    }

    id v33 = v32;
    NSString v34 = String._bridgeToObjectiveC()();
    unint64_t v35 = (unint64_t)[v33 integerForKey:v34];

    if ((v35 & 0x8000000000000000LL) != 0)
    {
LABEL_47:
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_49;
    }

    if (HIDWORD(v35)) {
      break;
    }
  }

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_49:
  __break(1u);
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_47:
  __break(1u);
  return result;
}

  if (v19)
  {
    if (a1 < 0) {
      unint64_t v115 = a1;
    }
    else {
      unint64_t v115 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v115);
    if (v5) {
      goto LABEL_47;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v5)
    {
LABEL_47:
      if ((a1 & 0xC000000000000001LL) != 0)
      {
        unint64_t v44 = 0LL;
        while (1)
        {
          uint64_t v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(v44, a1);
          uint64_t v47 = v44 + 1;
          if (__OFADD__(v44, 1LL)) {
            break;
          }
          char v13 = (char *)v45;
          if (*(void *)(v45 + OBJC_IVAR___AUAStreamFormat_rateRange) <= v2
            && *(void *)(v45 + OBJC_IVAR___AUAStreamFormat_rateRange + 8) >= v2)
          {
            swift_bridgeObjectRelease(a1);
LABEL_55:
            NSString v19 = v124;
            goto LABEL_64;
          }

          swift_unknownObjectRelease(v45, v46);
          ++v44;
          if (v47 == v5)
          {
            swift_bridgeObjectRelease(a1);
            char v13 = 0LL;
            goto LABEL_55;
          }
        }

        __break(1u);
      }

      else
      {
        unint64_t v48 = 0LL;
        while (1)
        {
          uint64_t v49 = v48 + 1;
          if (__OFADD__(v48, 1LL)) {
            break;
          }
          uint64_t v50 = *(char **)(a1 + 8 * v48 + 32);
          if (*(void *)&v50[OBJC_IVAR___AUAStreamFormat_rateRange] <= v2
            && *(void *)&v50[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= v2)
          {
            char v13 = v50;
            swift_bridgeObjectRelease(a1);
            goto LABEL_64;
          }

          ++v48;
          if (v49 == v5) {
            goto LABEL_63;
          }
        }
      }

      __break(1u);
      goto LABEL_77;
    }
  }

        __break(1u);
        goto LABEL_46;
      }
    }

    __break(1u);
    goto LABEL_45;
  }

Swift::Void __swiftcall AUAAudioDevice.setSamplingRate(_:)(Swift::Double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignposter(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v8 = sub_100008EC4(v4, (uint64_t)qword_1001171B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v18 = v5;
  Swift::String v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)Swift::String v9 = 134217984;
  Swift::Double v19 = a1;
  uint64_t v10 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 4, v9 + 12);
  uint64_t v11 = (os_log_s *)OSSignposter.logHandle.getter(v10);
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  v12,  v13,  "AUAAudioDevice_setSamplingRate",  "newRate: %f",  v9,  0xCu);
  id v14 = sub_100011028(v2, a1);
  os_signpost_type_t v15 = static os_signpost_type_t.end.getter(v14);
  os_signpost_id_t v16 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  v15,  v16,  "AUAAudioDevice_setSamplingRate",  "newRate: %f",  v9,  0xCu);

  swift_slowDealloc(v9, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v4);
}

id sub_100011028(char *a1, double a2)
{
  uint64_t v3 = a1;
  if (!*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]
    || (uint64_t v4 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_function + 8],
        uint64_t v5 = swift_getObjectType(*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4)))
  {
    uint64_t v6 = *(void *)&v3[OBJC_IVAR___AUAAudioDevice_clock];
    uint64_t v7 = *(void *)&v3[OBJC_IVAR___AUAAudioDevice_clock + 8];
    uint64_t ObjectType = swift_getObjectType(v6);
    uint64_t v9 = *(void *)&a2;
    if ((~*(void *)&a2 & 0x7FF0000000000000LL) != 0)
    {
      if (a2 > -1.0)
      {
        uint64_t v9 = 0x43F0000000000000LL;
        if (a2 < 1.84467441e19)
        {
          uint64_t v10 = ObjectType;
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v7 + 24))( (unint64_t)a2,  0LL,  ObjectType,  v7);
          unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v10, v7);
          if ((v12 & 1) != 0) {
            a2 = 0.0;
          }
          else {
            a2 = (double)v11;
          }
          goto LABEL_9;
        }

LABEL_9:
  [v3 setSamplingRate:a2];
  id v13 = [v3 inputStreams];
  if (!v13)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  id v14 = v13;
  uint64_t v15 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  id v17 = [v3 outputStreams];
  if (!v17)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  uint64_t v18 = v17;
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v15);

  sub_1000929D8(v19);
  unint64_t v20 = v16;
  uint64_t v6 = (uint64_t)sub_100029DAC(v16);
  swift_bridgeObjectRelease(v20);
  if (!v6)
  {
    sub_100029840( 0xD00000000000001FLL,  0x80000001000CD6A0LL,  0xD000000000000013LL,  (void *)0x80000001000CD6C0LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  669LL);
LABEL_39:
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    goto LABEL_40;
  }

  uint64_t v9 = v6 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (!v21)
  {
LABEL_38:
    swift_bridgeObjectRelease(v6);
    goto LABEL_39;
  }

  sub_1000178B0((uint64_t)&v30, &qword_100113B38);
  double v33 = 0x726F7463656C6553LL;
  double v34 = 0xEA00000000002320LL;
  uint64_t v18 = __OFADD__(a1++, 1LL);
  if (v18)
  {
    __break(1u);
    goto LABEL_18;
  }

  *(void *)&uint64_t v30 = a1;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  id v17 = v34;
LABEL_11:
  if ((a1 & 0x8000000000000000LL) != 0)
  {
LABEL_19:
    id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_21:
    __break(1u);
    return result;
  }

  if (HIDWORD(a1))
  {
    id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_21;
  }

  uint64_t v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  uint64_t v22 =  [(id)objc_opt_self(ASDSelectorValue) withValue:a1 andName:v21 selected:a1 == *(unsigned __int8 *)(a6 + 88)];

  if (!v22)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  uint64_t v25 = *(void *)((*a5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v24 = *(void *)((*a5 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v25 >= v24 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1LL);
  }
  Swift::String v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
  return specialized Array._endMutation()(v26);
}

    sub_1000516F0(&v25, 14LL);
    goto LABEL_10;
  }

  sub_1000516F0(&v25, 12LL);
  if (v10 == 1)
  {
    LOWORD(v1swift_unknownObjectWeakDestroy(v0 + 3) = 1;
    goto LABEL_9;
  }

  if ((_BYTE)v10)
  {
    LOWORD(v1swift_unknownObjectWeakDestroy(v0 + 3) = 1;
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  char v12 = v28;
LABEL_16:
  swift_bridgeObjectRelease(v12);
  uint64_t v22 = sub_10000AE14();
  uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
  *(_BYTE *)uint64_t v24 = 15;
  *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v24 + 16) = 0xE000000000000000LL;
  *(void *)(v24 + 24) = 0x2928797469746E65LL;
  *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
  *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
  *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFBB0LL;
  *(void *)(v24 + 56) = 376LL;
  return swift_willThrow(v23);
}

  __break(1u);
}

void AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = (char *)v7;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v47 = a3;
  uint64_t v48 = a5;
  uint64_t v46 = (char *)a1;
  uint64_t v11 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)&v43 - v16;
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v18 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v18, (uint64_t)qword_1001171B8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19(v17, v7 + OBJC_IVAR___AUAAudioDevice_signpostID, v11);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v21 = (os_log_s *)OSSignposter.logHandle.getter(v20);
  int v45 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v19(v15, (uint64_t)v17, v11);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = (void **)swift_slowAlloc(64LL, -1LL);
    unint64_t v44 = v15;
    uint64_t v24 = v23;
    __int128 aBlock = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    swift_bridgeObjectRetain(a2);
    uint64_t v51 = sub_1000164BC((uint64_t)v46, a2, (uint64_t *)&aBlock);
    uint64_t v46 = (char *)v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v22 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v51 = sub_1000164BC(v47, a4, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a4, 3LL);
    *(_WORD *)(v22 + 2swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
    uint64_t v51 = v48;
    uint64_t v8 = v46;
    uint64_t v25 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v22 + 24, v22 + 32);
    Swift::String v26 = v44;
    os_signpost_id_t v27 = OSSignpostID.rawValue.getter(v25);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  (os_signpost_type_t)v45,  v27,  "AUAAudioDevice_requestConfigurationChange",  "%s, %s - %ld",  (uint8_t *)v22,  0x20u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
    v28(v17, v11);
    uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v26, v11);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);

    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }

  uint64_t v30 = *(void *)&v8[OBJC_IVAR___AUAAudioDevice_configChangedHandlers];
  uint64_t v31 = v49;
  if (v49)
  {
    uint64_t v29 = swift_allocObject(&unk_1001034D0, 32LL, 7LL);
    uint64_t v32 = v29;
    uint64_t v33 = v50;
    *(void *)(v29 + 16) = v31;
    *(void *)(v29 + 24) = v33;
    double v34 = sub_100017218;
  }

  else
  {
    double v34 = 0LL;
    uint64_t v32 = 0LL;
  }

  __int128 aBlock = (void **)v34;
  uint64_t v54 = v32;
  uint64_t v35 = *(os_unfair_lock_s **)(v30 + 16);
  __chkstk_darwin(v29);
  *(&v43 - swift_unknownObjectWeakDestroy(v0 + 2) = v30;
  *(&v43 - 1) = (uint64_t)&aBlock;
  sub_10001718C(v31, v36);
  swift_retain(v35);
  os_unfair_lock_lock(v35 + 4);
  sub_100017174((BOOL *)&v51);
  char v37 = v51;
  os_unfair_lock_unlock(v35 + 4);
  swift_release(v35);
  sub_100017978((uint64_t)v34, v32);
  if ((v37 & 1) != 0)
  {
    uint64_t v38 = swift_allocObject(&unk_100103480, 24LL, 7LL);
    *(void *)(v38 + 16) = v8;
    uint64_t v57 = sub_1000171C0;
    uint64_t v58 = v38;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v54 = 1107296256LL;
    uint64_t v55 = sub_100011D20;
    uint64_t v56 = &unk_100103498;
    unint64_t v39 = _Block_copy(&aBlock);
    uint64_t v40 = v58;
    unint64_t v41 = v8;
    swift_release(v40);
    unint64_t v42 = (objc_class *)type metadata accessor for AUAAudioDevice(0LL);
    v52.receiver = v41;
    v52.super_class = v42;
    objc_msgSendSuper2(&v52, "requestConfigurationChange:", v39);
    _Block_release(v39);
  }

uint64_t sub_100011A2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSSignposter(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v10 = sub_100008EC4(v6, (uint64_t)qword_1001171B8);
  uint64_t v29 = v7;
  uint64_t v30 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v31 = v3;
  uint64_t v32 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR___AUAAudioDevice_signpostID, v2);
  uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v11 = 0;
  uint64_t v28 = v9;
  uint64_t v12 = (os_log_s *)OSSignposter.logHandle.getter(v11);
  uint64_t v13 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v14 = v13;
  os_signpost_id_t v15 = OSSignpostID.rawValue.getter(v13);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  v14,  v15,  "AUAAudioDevice_dispatchConfigurationChange",  "",  v11,  2u);
  uint64_t v16 = *(void *)(a1 + OBJC_IVAR___AUAAudioDevice_configChangedHandlers);
  id v17 = *(os_unfair_lock_s **)(v16 + 16);
  uint64_t v18 = v17 + 4;
  swift_retain(v17);
  os_unfair_lock_lock(v17 + 4);
  sub_100017A64(&v33);
  while (1)
  {
    uint64_t v20 = v33;
    uint64_t v19 = v34;
    os_unfair_lock_unlock(v18);
    uint64_t v21 = swift_release(v17);
    if (!v20) {
      break;
    }
    v20(v21);
    sub_100017978((uint64_t)v20, v19);
    uint64_t v22 = *(os_unfair_lock_s **)(v16 + 16);
    swift_retain(v22);
    os_unfair_lock_lock(v22 + 4);
    sub_100017A7C(&v33);
    uint64_t v23 = v34;
    os_unfair_lock_unlock(v22 + 4);
    swift_release(v23);
    swift_release(v22);
    id v17 = *(os_unfair_lock_s **)(v16 + 16);
    uint64_t v18 = v17 + 4;
    swift_retain(v17);
    os_unfair_lock_lock(v17 + 4);
    sub_100017A64(&v33);
  }

  uint64_t v24 = static os_signpost_type_t.end.getter(v21);
  os_signpost_type_t v25 = v24;
  os_signpost_id_t v26 = OSSignpostID.rawValue.getter(v24);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  v25,  v26,  "AUAAudioDevice_dispatchConfigurationChange",  "",  v11,  2u);

  swift_slowDealloc(v11, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v30);
}

uint64_t sub_100011D20(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void AUAAudioDevice.requestConfigurationChange(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t AUAAudioDevice.getLockDelay(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = v1 + OBJC_IVAR___AUAAudioDevice_function;
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function);
  if (!v12) {
    return 0LL;
  }
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t ObjectType = swift_getObjectType(v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
  if (result)
  {
    uint64_t v16 = (void *)result;
    uint64_t v17 = *(void *)(result + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v17)
    {
      if (sub_10001645C(19LL, v17))
      {

        return 100LL;
      }

      if (sub_10001645C(24LL, v17))
      {

        return 200LL;
      }
    }

    if ((unint64_t)a1 >> 62)
    {
      if (a1 < 0) {
        uint64_t v37 = a1;
      }
      else {
        uint64_t v37 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v37);
      if (v18) {
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v18)
      {
LABEL_11:
        uint64_t v38 = v8;
        uint64_t v39 = v5;
        uint64_t v40 = v4;
        if (v18 < 1)
        {
          __break(1u);
          goto LABEL_36;
        }

        uint64_t v19 = 0LL;
        unint64_t v20 = 0LL;
        do
        {
          if ((a1 & 0xC000000000000001LL) != 0) {
            id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a1);
          }
          else {
            id v21 = *(id *)(a1 + 8 * v19 + 32);
          }
          uint64_t v22 = v21;
          sub_1000833D4();
          unint64_t v24 = v23;

          if (v24 > v20) {
            unint64_t v20 = v24;
          }
          ++v19;
        }

        while (v18 != v19);
        swift_bridgeObjectRelease(a1);
        unint64_t v44 = v20;
        if (v20 > 0x190)
        {
          if (qword_1001128E0 == -1)
          {
LABEL_21:
            uint64_t v25 = type metadata accessor for OSSignposter(0LL);
            sub_100008EC4(v25, (uint64_t)qword_1001171B8);
            uint64_t v27 = v39;
            uint64_t v26 = v40;
            uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16);
            uint64_t v29 = v28(v10, v2 + OBJC_IVAR___AUAAudioDevice_signpostID, v40);
            uint64_t v30 = (os_log_s *)OSSignposter.logHandle.getter(v29);
            os_signpost_type_t v31 = static os_signpost_type_t.event.getter();
            if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
            {
              uint64_t v32 = v38;
              v28(v38, (uint64_t)v10, v26);
              uint64_t v33 = swift_slowAlloc(22LL, -1LL);
              *(_DWORD *)uint64_t v33 = 134218240;
              swift_beginAccess(&v44, v41, 0LL, 0LL);
              uint64_t v42 = v44;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v33 + 4, v33 + 12);
              *(_WORD *)(v33 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
              uint64_t v42 = 400LL;
              uint64_t v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v33 + 14, v33 + 22);
              os_signpost_id_t v35 = OSSignpostID.rawValue.getter(v34);
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  v31,  v35,  "AUAAudioDevice_getLockDelay",  "lockDelayMS %lu is too large. Using %lu",  (uint8_t *)v33,  0x16u);
              swift_slowDealloc(v33, -1LL, -1LL);

              uint64_t v36 = *(void (**)(char *, uint64_t))(v27 + 8);
              v36(v10, v26);
              v36(v32, v26);
            }

            else
            {

              (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v26);
            }

            swift_beginAccess(&v44, &v42, 1LL, 0LL);
            unint64_t v20 = 400LL;
            goto LABEL_31;
          }

LABEL_36:
          swift_once(&qword_1001128E0, sub_10000B9B8);
          goto LABEL_21;
        }

    dispatch thunk of BinaryInteger._lowWord.getter(v16, v33);
    v31((char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL), v16);
LABEL_39:
    uint64_t v80 = dispatch thunk of BinaryInteger._lowWord.getter(v16, v33);
    v31(v36, v16);
    uint64_t v2 = v80 / 1000000;
    sub_100017A40(v95);
    return v2;
  }

  if (v70 <= 64) {
    goto LABEL_36;
  }
  __chkstk_darwin(v70);
  unint64_t v71 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v72 = v31;
  BOOL v73 = (char *)v82 - v71;
  uint64_t v74 = sub_10001CDF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v93, &type metadata for Int, v74, v16, v33);
  uint64_t v63 = dispatch thunk of static Comparable.< infix(_:_:)(v73, v68, v16, *(void *)(*(void *)(v33 + 32) + 8LL));
  char v75 = v73;
  os_signpost_type_t v31 = v72;
  v72(v75, v16);
  v72(v68, v16);
LABEL_38:
  if ((v63 & 1) == 0) {
    goto LABEL_39;
  }
  __break(1u);
LABEL_42:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v31)(v63, v16);
  __break(1u);
  return result;
}

  int64_t v110 = v122;
  return swift_release(v110);
}

LABEL_30:
LABEL_31:
        if (v20 <= 0x18) {
          return 24LL;
        }
        else {
          return v20;
        }
      }
    }

    swift_bridgeObjectRelease(a1);
    unint64_t v20 = 0LL;
    goto LABEL_30;
  }

  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_30;
  }

  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 176))(v102, v105);
  uint64_t v39 = *(void *)(v38 + 16);
  if (!v39)
  {

    unint64_t v96 = v38;
LABEL_72:
    swift_bridgeObjectRelease(v96);
    return;
  }

  char v100 = OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList;
  uint64_t v99 = v38;
  uint64_t v40 = (uint64_t *)(v38 + 48);
  uint64_t v103 = (objc_class *)type metadata accessor for AUAAudioDevice(0LL);
  while (1)
  {
    uint64_t v42 = *(v40 - 1);
    unint64_t v41 = *v40;
    uint64_t v43 = *(v40 - 2);
    objc_allocWithZone(v103);
    swift_unknownObjectRetain_n(v43, 2LL);
    swift_bridgeObjectRetain_n(v41, 2LL);
    unint64_t v44 = swift_unknownObjectRetain(v5);
    uint64_t v104 = v43;
    int v45 = v4;
    sub_10000D1C0(v44, v30, v43, v42, v41);
    uint64_t v47 = (uint64_t (**)(void, void))v30;
    uint64_t v48 = v45;
    if (v45) {
      goto LABEL_44;
    }
    uint64_t v49 = v46;
    if ((v47[14](v102, v47) & 1) != 0)
    {
      sub_10007A7A8(v5, v47, (uint64_t)v112);
      if (!v112[0] && v112[1] == 1LL)
      {
        sub_1000178B0((uint64_t)v112, &qword_100113CC0);
        goto LABEL_37;
      }

      sub_100030A88((uint64_t)v112, (uint64_t)&v108);
      sub_100030AC4((uint64_t)&v108, (uint64_t)v112);
      sub_100030AC4((uint64_t)v112, (uint64_t)&v110);
      (*(void (**)(uint64_t *, uint64_t))(v105 + 96))(&v110, v102);
      if (v113 == 1)
      {
        int64_t v110 = 0x4B4C4E554D454D48LL;
        sub_10007B9C4((uint64_t)&v110, (uint64_t)&v111, (uint64_t)v112, &v106);
      }

      uint64_t v74 = sub_10007A958();
      char v75 = (id)MobileGestalt_get_current_device();
      if (!v75) {
        goto LABEL_76;
      }
      unint64_t v76 = v75;
      deviceClassNumber = MobileGestalt_get_deviceClassNumber();

      if ((v74 & 1) != 0)
      {
        if (deviceClassNumber == 1)
        {
          sub_100029834( 0xD000000000000030LL,  0x80000001000CED30LL,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  353LL);
          goto LABEL_63;
        }

        sub_100029834( 0xD000000000000035LL,  0x80000001000CECF0LL,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  348LL);
        sub_10007AC3C(0);
      }

      if (deviceClassNumber == 9)
      {
LABEL_64:
        uint64_t v78 = sub_10007B25C();
        sub_100054E18(v78);
        uint64_t v80 = v79;
        BOOL v98 = (objc_class *)type metadata accessor for AUACustomDictionaryProperty();
        id v81 = (char *)objc_allocWithZone(v98);
        *(void *)&v81[OBJC_IVAR____TtC9AUASDCore27AUACustomDictionaryProperty_dictionary] = v80;
        uint64_t v97 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
        uint64_t v82 = v80;
        uint64_t v83 = [v97 initWithSelector:1751474532 scope:1735159650 element:0];
        v107.receiver = v81;
        v107.super_class = v98;
        uint64_t v84 = objc_msgSendSuper2(&v107, "initWithAddress:propertyDataType:qualifierDataType:", v83, 1886155636, 0);

        if (!v84) {
          goto LABEL_77;
        }
        uint64_t v85 = v84;
        [v85 setSettable:0];

        [v49 addCustomProperty:v85];
        sub_100030B00((uint64_t)v112);
        sub_100030B00((uint64_t)&v108);
        goto LABEL_37;
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

            uint64_t result = swift_bridgeObjectRelease(v15);
            *a5 = _swiftEmptyArrayStorage;
            return result;
          case 1:
            os_signpost_id_t v15 = sub_10006D454(a3, v12, v13, (uint64_t)sub_100079F2C);
            os_signpost_type_t v31 = *(void *)(v15 + 16);
            if (v31)
            {
              uint64_t v42 = a5;
              uint64_t v46 = _swiftEmptyArrayStorage;
              sub_100070A4C(0, v31, 0);
              uint64_t v17 = _swiftEmptyArrayStorage;
              unint64_t v41 = v15;
              uint64_t v32 = (__int16 *)(v15 + 36);
              do
              {
                uint64_t v33 = *(v32 - 2);
                uint64_t v34 = *(v32 - 1);
                os_signpost_id_t v35 = *v32;
                uint64_t v46 = v17;
                uint64_t v37 = v17[2];
                uint64_t v36 = v17[3];
                if (v37 >= v36 >> 1)
                {
                  sub_100070A4C(v36 > 1, v37 + 1, 1);
                  uint64_t v17 = v46;
                }

                v32 += 3;
                unint64_t v44 = &type metadata for AudioClassRange16bit;
                int v45 = &off_100105C60;
                LOWORD(v4swift_unknownObjectWeakDestroy(v0 + 3) = v33;
                WORD1(v4swift_unknownObjectWeakDestroy(v0 + 3) = v34;
                WORD2(v4swift_unknownObjectWeakDestroy(v0 + 3) = v35;
                v17[2] = v37 + 1;
                sub_10000AF84(&v43, (uint64_t)&v17[5 * v37 + 4]);
                --v31;
              }

              while (v31);
              goto LABEL_29;
            }

            goto LABEL_30;
          case 0:
            os_signpost_id_t v15 = sub_10006DEF4(a3, v12, v13, (uint64_t)sub_100079E34);
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              uint64_t v42 = a5;
              uint64_t v46 = _swiftEmptyArrayStorage;
              sub_100070A4C(0, v16, 0);
              uint64_t v17 = _swiftEmptyArrayStorage;
              unint64_t v41 = v15;
              uint64_t v18 = (char *)(v15 + 34);
              do
              {
                uint64_t v19 = *(v18 - 2);
                unint64_t v20 = *(v18 - 1);
                id v21 = *v18;
                uint64_t v46 = v17;
                unint64_t v23 = v17[2];
                uint64_t v22 = v17[3];
                if (v23 >= v22 >> 1)
                {
                  sub_100070A4C(v22 > 1, v23 + 1, 1);
                  uint64_t v17 = v46;
                }

                v18 += 3;
                unint64_t v44 = &type metadata for AudioClassRange8bit;
                int v45 = &off_100105C28;
                LOBYTE(v4swift_unknownObjectWeakDestroy(v0 + 3) = v19;
                BYTE1(v4swift_unknownObjectWeakDestroy(v0 + 3) = v20;
                BYTE2(v4swift_unknownObjectWeakDestroy(v0 + 3) = v21;
                v17[2] = v23 + 1;
                sub_10000AF84(&v43, (uint64_t)&v17[5 * v23 + 4]);
                --v16;
              }

              while (v16);
LABEL_29:
              uint64_t result = swift_bridgeObjectRelease(v41);
              *uint64_t v42 = v17;
              return result;
            }

            goto LABEL_30;
        }

        unint64_t v24 = 499LL;
      }

      else
      {
        unint64_t v24 = 478LL;
      }

      uint64_t v38 = sub_10000AE14();
      uint64_t v39 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
      *(_BYTE *)uint64_t v40 = 30;
      *(void *)(v40 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v40 + 16) = 0xE000000000000000LL;
      *(void *)(v40 + 24) = 0x65676E6152746567LL;
      *(void *)(v40 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA00000000002928LL;
      *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v40 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
      *(void *)(v40 + 56) = v24;
      return swift_willThrow(v39);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

          *(void *)(v58 + 56) = v59;
          swift_willThrow(v57);
          swift_release(v16);
          return v7;
        }

  __break(1u);
  return result;
}

Swift::Int32 __swiftcall AUAAudioDevice.performStartIO()()
{
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100029834( 0x536D726F66726570LL,  0xEE004F4974726174LL,  0xD000000000000010LL,  (void *)0x80000001000CCEF0LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  761LL);
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v5 = sub_100008EC4(v1, (uint64_t)qword_1001171B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  id v6 = v0;
  uint64_t v21 = v2;
  id v7 = v6;
  uint64_t v8 = swift_slowAlloc(18LL, -1LL);
  *(_DWORD *)uint64_t v8 = 134218240;
  [v7 samplingRate];
  uint64_t v22 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v8 + 4, v8 + 12);
  *(_WORD *)(v8 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 1024;
  LODWORD(v2swift_unknownObjectWeakDestroy(v0 + 2) = [v7 timestampPeriod];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v8 + 14, v8 + 18);

  uint64_t v11 = (os_log_s *)OSSignposter.logHandle.getter(v10);
  uint64_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v13 = v12;
  os_signpost_id_t v14 = OSSignpostID.rawValue.getter(v12);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  v13,  v14,  "AUAAudioDevice_performStartIO",  "samplingRate %f, timestampPeriod %u",  (uint8_t *)v8,  0x12u);
  uint64_t v15 = sub_100012490((char *)v7, &v22);
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  LOBYTE(v7) = v16;
  os_signpost_id_t v17 = OSSignpostID.rawValue.getter(v16);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  (os_signpost_type_t)v7,  v17,  "AUAAudioDevice_performStartIO",  "samplingRate %f, timestampPeriod %u",  (uint8_t *)v8,  0x12u);

  Swift::Int32 v18 = v22;
  swift_slowDealloc(v8, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v1);
  return v18;
}

uint64_t sub_100012490@<X0>(char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v127 = a2;
  unint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v117 - v9;
  uint64_t v11 = OBJC_IVAR___AUAAudioDevice_curZTSSeed;
  uint64_t v12 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_curZTSSeed];
  if (v12 == -1)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v126 = v2;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_curZTSSeed] = v12 + 1;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lastZTSMach] = 0LL;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS] = 0LL;
  os_signpost_type_t v13 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_timestamp];
  objc_msgSend(v13, "reset:");
  os_signpost_id_t v14 = AudioDeviceRealtimeGetZeroTimestampBlock(v13);
  uint64_t v15 = swift_allocObject(&unk_100103678, 24LL, 7LL);
  *(void *)(v15 + 16) = v14;
  uint64_t v134 = sub_100017A0C;
  uint64_t v135 = v15;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v131 = 1107296256LL;
  uint64_t v132 = sub_100013268;
  uint64_t v133 = &unk_100103690;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_release(v135);
  [a1 setGetZeroTimestampBlock:v16];
  _Block_release(v16);
  os_signpost_id_t v17 = AudioDeviceCreateGenericWillDoBlock((char)[a1 hasInput]);
  uint64_t v18 = swift_allocObject(&unk_1001036C8, 24LL, 7LL);
  *(void *)(v18 + 16) = v17;
  uint64_t v134 = sub_100017A28;
  uint64_t v135 = v18;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v131 = 1107296256LL;
  uint64_t v132 = sub_1000132D4;
  uint64_t v133 = &unk_1001036E0;
  uint64_t v19 = _Block_copy(&aBlock);
  swift_release(v135);
  [a1 setWillDoReadInputBlock:v19];
  _Block_release(v19);
  uint64_t v20 = AudioDeviceCreateGenericWillDoBlock((char)[a1 hasOutput]);
  uint64_t v21 = swift_allocObject(&unk_100103718, 24LL, 7LL);
  *(void *)(v21 + 16) = v20;
  uint64_t v134 = sub_100017B00;
  uint64_t v135 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v131 = 1107296256LL;
  uint64_t v132 = sub_1000132D4;
  uint64_t v133 = &unk_100103730;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_release(v135);
  [a1 setWillDoWriteMixBlock:v22];
  _Block_release(v22);
  uint64_t result = (uint64_t)[a1 inputStreams];
  if (result)
  {
    unint64_t v24 = (void *)result;
    uint64_t v124 = v8;
    uint64_t v125 = v10;
    uint64_t v25 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v26 = (void **)static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

    uint64_t result = (uint64_t)[a1 outputStreams];
    if (result)
    {
      uint64_t v27 = (void *)result;
      uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, v25);

      __int128 aBlock = v26;
      sub_1000929D8(v28);
      uint64_t v29 = aBlock;
      uint64_t v8 = (uint64_t)sub_100029DAC((unint64_t)aBlock);
      swift_bridgeObjectRelease(v29);
      if (!v8)
      {
        unint64_t v39 = sub_10000AE14();
        uint64_t v40 = swift_allocError(&type metadata for AUAError, v39, 0LL, 0LL);
        *(_BYTE *)uint64_t v41 = 1;
        *(void *)(v41 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v41 + 16) = 0xE000000000000000LL;
        *(void *)(v41 + 24) = 0xD000000000000010LL;
        *(void *)(v41 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CCEF0LL;
        *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
        *(void *)(v41 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
        *(void *)(v41 + 56) = 780LL;
        swift_willThrow(v40);
        goto LABEL_20;
      }

      uint64_t v30 = AUAAudioDevice.getLockDelay(_:)(v8);
      uint64_t v122 = OBJC_IVAR___AUAAudioDevice_lockDelayMS;
      *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lockDelayMS] = v30;
      uint64_t v11 = v8 & 0xFFFFFFFFFFFFFF8LL;
      if (!((unint64_t)v8 >> 62))
      {
        uint64_t v31 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v8);
        unint64_t v120 = v4;
        uint64_t v121 = v5;
        if (v31)
        {
LABEL_7:
          if (v31 < 1)
          {
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }

          if ((v8 & 0xC000000000000001LL) != 0)
          {
            for (uint64_t i = 0LL; i != v31; ++i)
            {
              uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
              swift_unknownObjectRelease(v33, v34);
            }
          }

          swift_bridgeObjectRelease(v8);
          uint64_t v123 = &a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS];
          *(void *)&a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0LL;
          swift_bridgeObjectRetain(v8);
          uint64_t v35 = 0LL;
          unint64_t v4 = 0LL;
          do
          {
            if ((v8 & 0xC000000000000001LL) != 0) {
              uint64_t v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v8);
            }
            else {
              uint64_t v36 = *(id *)(v8 + 8 * v35 + 32);
            }
            uint64_t v37 = v36;
            unint64_t v38 = (*(uint64_t (**)(void))((swift_isaMask & *v36) + 0x208LL))();

            if (v38 > v4) {
              unint64_t v4 = v38;
            }
            ++v35;
          }

          while (v31 != v35);
          swift_bridgeObjectRelease(v8);
          goto LABEL_27;
        }

LABEL_26:
        swift_bridgeObjectRelease(v8);
        unint64_t v4 = 0LL;
        uint64_t v123 = &a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS];
        *(void *)&a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0LL;
LABEL_27:
        unint64_t v44 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_clock];
        int v45 = *(void (***)(void, void))&a1[OBJC_IVAR___AUAAudioDevice_clock + 8];
        uint64_t ObjectType = swift_getObjectType(v44);
        uint64_t v47 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_formatChangeIOStartDelay_us];
        uint64_t v48 = v126;
        ((void (*)(uint64_t, uint64_t, void (**)(void, void)))v45[9])(v47, ObjectType, v45);
        uint64_t v40 = (uint64_t)v48;
        if (v48)
        {
          swift_bridgeObjectRelease(v8);
          uint64_t v42 = v127;
          goto LABEL_29;
        }

        uint64_t v117 = v47;
        uint64_t v118 = ObjectType;
        id v119 = v44;
        uint64_t v126 = v45;
        if (v31)
        {
          uint64_t v52 = 4LL;
          while (1)
          {
            uint64_t v53 = (v8 & 0xC000000000000001LL) != 0
                ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v52 - 4, v8)
                : *(id *)(v8 + 8 * v52);
            uint64_t v54 = v53;
            uint64_t v55 = v52 - 3;
            if (__OFADD__(v52 - 4, 1LL)) {
              break;
            }
            (*(void (**)(void))((swift_isaMask & *v53) + 0x258LL))();

            ++v52;
            if (v55 == v31) {
              goto LABEL_38;
            }
          }

          __break(1u);
          goto LABEL_56;
        }

  uint64_t v36 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease(v5);
  return (uint64_t)v36;
}

        uint64_t v10 = (v17 - 1) & v17;
        uint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }

      uint64_t v19 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = v19[2];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v12 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      os_signpost_type_t v13 = (Swift::UInt *)(*(void *)(v6 + 48) + 24 * v12);
      void *v13 = v20;
      v13[1] = v21;
      v13[2] = v22;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  char *v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        os_signpost_id_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        os_signpost_id_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  char *v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30, *(void *)(v6 + 40));
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        os_signpost_id_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        os_signpost_id_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  uint64_t result = swift_release(v3);
  char *v2 = v6;
  return result;
}

    uint64_t v10 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_27:
    uint64_t v19 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    Hasher.init(_seed:)(v32, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    Hasher._combine(_:)(v21);
    Hasher._combine(_:)(v22);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v25);
      }

      while (v29 == -1);
      uint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    os_signpost_type_t v13 = (Swift::UInt *)(*(void *)(v6 + 48) + 24 * v12);
    void *v13 = v20;
    v13[1] = v21;
    v13[2] = v22;
    ++*(void *)(v6 + 16);
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    goto LABEL_38;
  }

  os_signpost_id_t v17 = *(void *)(v30 + 8 * v18);
  if (v17)
  {
    uint64_t v7 = v18;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v7 >= v31) {
      goto LABEL_36;
    }
    os_signpost_id_t v17 = *(void *)(v30 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      os_signpost_id_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      os_signpost_id_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    uint64_t v20 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29, *(void *)(v6 + 40));
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      os_signpost_id_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      os_signpost_id_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(_BYTE *)(*(void *)(v6 + 48) + v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    uint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

            __break(1u);
            goto LABEL_27;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
        goto LABEL_26;
      }
    }

    uint64_t v30 = sub_10000AE14();
    uint64_t v31 = swift_allocError(&type metadata for AUAError, v30, 0LL, 0LL);
    *(_BYTE *)uint64_t v32 = 1;
    *(void *)(v32 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v32 + 16) = 0xE000000000000000LL;
    *(void *)(v32 + 24) = 0x5365726170657270LL;
    *(void *)(v32 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEF29286D61657274LL;
    *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
    *(void *)(v32 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
    *(void *)(v32 + 56) = 742LL;
    swift_willThrow(v31);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  if (v1 < 0) {
    os_signpost_type_t v13 = v1;
  }
  else {
    os_signpost_type_t v13 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v2) {
    goto LABEL_30;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    uint64_t v5 = 0LL;
    uint64_t v6 = 1LL;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 128);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 16);
        swift_unknownObjectRelease(v3, v4);
        if (v8 > v5) {
          uint64_t v5 = v8;
        }
      }

      else
      {
        swift_unknownObjectRelease(v3, v4);
        if (v5 <= 0) {
          uint64_t v5 = 0LL;
        }
      }

      if (v2 == v6) {
        break;
      }
      uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v1);
      if (__OFADD__(v6++, 1LL))
      {
        __break(1u);
        goto LABEL_15;
      }
    }
  }

  else
  {
LABEL_15:
    uint64_t v10 = 0LL;
    uint64_t v5 = 0LL;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v1 + 32 + 8 * v10) + 128LL);
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12 > v5) {
          uint64_t v5 = v12;
        }
      }

      else if (v5 < 1)
      {
        uint64_t v5 = 0LL;
      }

      if (v2 - 1 == v10) {
        break;
      }
      if (__OFADD__(++v10, 1LL))
      {
        __break(1u);
        goto LABEL_26;
      }
    }
  }

LABEL_38:
        swift_bridgeObjectRelease(v8);
        uint64_t v56 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_timeCorrelater];
        uint64_t v57 = type metadata accessor for USBFrameTimeCorrelaterSession();
        uint64_t v8 = swift_allocObject(v57, 25LL, 7LL);
        *(void *)(v8 + 16) = v56;
        unsigned __int8 v58 = [v56 start];
        *(_BYTE *)(v8 + 24) = v58;
        if ((v58 & 1) != 0)
        {
          uint64_t v59 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession];
          *(void *)&a1[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = v8;
          swift_retain(v8);
          swift_release(v59);
          v126[10](v117, v118);
          if (!*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]
            || (uint64_t v62 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_function + 8],
                uint64_t v63 = swift_getObjectType(*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]),
                uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 24))(v63, v62),
                unint64_t v65 = *(void **)(v64 + 200),
                id v66 = v65,
                swift_release(v64),
                !v65))
          {
            swift_release(v8);
            uint64_t result = 3758097111LL;
            uint64_t v42 = v127;
            goto LABEL_30;
          }

          char v67 = (char *)[v66 frameNumberWithTime:0];
          id v68 = v67 + 5;
          if ((unint64_t)v67 < 0xFFFFFFFFFFFFFFFBLL)
          {
            uint64_t v69 = v123;
            unint64_t v70 = *(void *)&a1[v122];
            BOOL v71 = __CFADD__(v68, v70);
            uint64_t v72 = &v68[v70];
            if (!v71)
            {
              BOOL v71 = __CFADD__(v72, v4);
              BOOL v73 = &v72[v4];
              if (!v71)
              {
                unint64_t v74 = (unint64_t)v73 & ~v4;
                uint64_t v75 = OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame;
                *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = v74;
                BOOL v71 = v74 >= v70;
                unint64_t v76 = v74 - v70;
                if (v71)
                {
                  uint64_t v126 = (void (**)(void, void))v67;
                  id v119 = v66;
                  uint64_t v77 = OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame;
                  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = v76;
                  BOOL v71 = __CFADD__(v74, *(void *)v69);
                  unint64_t v78 = v74 + *(void *)v69;
                  uint64_t v123 = v69;
                  if (!v71)
                  {
                    uint64_t v79 = OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame;
                    *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = v78;
                    __int128 aBlock = 0LL;
                    uint64_t v131 = 0xE000000000000000LL;
                    _StringGuts.grow(_:)(157LL);
                    v80._countAndFlagsBits = 0xD00000000000001ALL;
                    v80._object = (void *)0x80000001000CD9F0LL;
                    String.append(_:)(v80);
                    uint64_t v129 = *(void ***)&a1[v77];
                    v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
                    object = v81._object;
                    String.append(_:)(v81);
                    swift_bridgeObjectRelease(object);
                    v83._object = (void *)0x80000001000CDA10LL;
                    v83._countAndFlagsBits = 0xD00000000000001BLL;
                    String.append(_:)(v83);
                    uint64_t v129 = *(void ***)&a1[v75];
                    v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
                    uint64_t v85 = v84._object;
                    String.append(_:)(v84);
                    swift_bridgeObjectRelease(v85);
                    v86._countAndFlagsBits = 0xD000000000000017LL;
                    v86._object = (void *)0x80000001000CDA30LL;
                    String.append(_:)(v86);
                    uint64_t v118 = v79;
                    uint64_t v129 = *(void ***)&a1[v79];
                    v87._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
                    uint64_t v88 = v87._object;
                    String.append(_:)(v87);
                    swift_bridgeObjectRelease(v88);
                    v89._countAndFlagsBits = 0x617246727563202CLL;
                    v89._object = (void *)0xEB0000000020656DLL;
                    String.append(_:)(v89);
                    uint64_t v129 = (void **)v126;
                    v90._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
                    uint64_t v91 = v90._object;
                    String.append(_:)(v90);
                    swift_bridgeObjectRelease(v91);
                    v92._countAndFlagsBits = 0x65446B636F6C202CLL;
                    v92._object = (void *)0xEE0020534D79616CLL;
                    String.append(_:)(v92);
                    uint64_t v129 = *(void ***)&a1[v122];
                    v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                    uint64_t v94 = v93._object;
                    String.append(_:)(v93);
                    swift_bridgeObjectRelease(v94);
                    v95._countAndFlagsBits = 0xD000000000000012LL;
                    v95._object = (void *)0x80000001000CDA50LL;
                    String.append(_:)(v95);
                    uint64_t v129 = *(void ***)v123;
                    v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                    uint64_t v97 = v96._object;
                    String.append(_:)(v96);
                    swift_bridgeObjectRelease(v97);
                    v98._countAndFlagsBits = 0xD000000000000018LL;
                    v98._object = (void *)0x80000001000CDA70LL;
                    String.append(_:)(v98);
                    uint64_t v129 = (void **)v4;
                    v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
                    char v100 = v99._object;
                    String.append(_:)(v99);
                    swift_bridgeObjectRelease(v100);
                    uint64_t v101 = v131;
                    sub_100029834( (uint64_t)aBlock,  v131,  0xD000000000000010LL,  (void *)0x80000001000CCEF0LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  807LL);
                    swift_bridgeObjectRelease(v101);
                    if (qword_1001128E0 == -1)
                    {
LABEL_50:
                      uint64_t v102 = type metadata accessor for OSSignposter(0LL);
                      sub_100008EC4(v102, (uint64_t)qword_1001171B8);
                      unint64_t v103 = v120;
                      uint64_t v104 = *(void (**)(void))(v121 + 16);
                      id v105 = v125;
                      v104();
                      unint64_t v106 = a1;
                      uint64_t v107 = (void (**)(void, void))OSSignposter.logHandle.getter(v106);
                      LODWORD(v117) = static os_signpost_type_t.event.getter();
                      uint64_t v126 = v107;
                      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
                      {
                        ((void (*)(uint64_t, char *, unint64_t))v104)(v124, v105, v103);
                        uint64_t v108 = swift_slowAlloc(42LL, -1LL);
                        *(_DWORD *)uint64_t v108 = 134218752;
                        __int128 aBlock = *(void ***)&a1[v122];
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131, v108 + 4, v108 + 12);
                        *(_WORD *)(v108 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
                        __int128 aBlock = *(void ***)v123;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131, v108 + 14, v108 + 22);

                        *(_WORD *)(v108 + 2swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
                        unint64_t v109 = *(void ***)&a1[v118];

                        __int128 aBlock = v109;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131, v108 + 24, v108 + 32);

                        *(_WORD *)(v108 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
                        __int128 aBlock = (void **)v4;
                        uint64_t v110 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v131, v108 + 34, v108 + 42);
                        uint64_t v111 = v124;
                        os_signpost_id_t v112 = OSSignpostID.rawValue.getter(v110);
                        id v113 = v126;
                        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v126,  (os_signpost_type_t)v117,  v112,  "AUAAudioDevice_performStartIO",  "lockDelayMS %lu, feedbackDelayMS %lu, startingUSBDataFrame %llu, startingFrameAlignment %llu",  (uint8_t *)v108,  0x2Au);
                        swift_slowDealloc(v108, -1LL, -1LL);
                        swift_release(v8);

                        unint64_t v114 = v120;
                        unint64_t v115 = *(void (**)(char *, unint64_t))(v121 + 8);
                        v115(v125, v120);
                        v115((char *)v111, v114);
                      }

                      else
                      {
                        swift_release(v8);

                        (*(void (**)(char *, unint64_t))(v121 + 8))(v105, v103);
                      }

                      uint64_t v42 = v127;
                      int64_t v116 = (objc_class *)type metadata accessor for AUAAudioDevice(0LL);
                      v128.receiver = v106;
                      v128.super_class = v116;
                      uint64_t result = (uint64_t)objc_msgSendSuper2(&v128, "performStartIO");
                      goto LABEL_30;
                    }

  uint64_t v137 = (uint64_t)_swiftEmptyArrayStorage;
  char v136 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v34 = [v4 inputStreams];
  if (!v34)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  uint64_t v35 = v34;
  uint64_t v36 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
  uint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, v36);

  unint64_t v38 = [v4 outputStreams];
  if (!v38)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
    return;
  }

  unint64_t v39 = v38;
  uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v36);

  v135[0] = v37;
  sub_1000929D8(v40);
  uint64_t v41 = v37;
  if (v37 >> 62)
  {
LABEL_95:
    if (v41 < 0) {
      uint64_t v101 = v41;
    }
    else {
      uint64_t v101 = v41 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v41);
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v101);
    if (v42) {
      goto LABEL_42;
    }
    goto LABEL_99;
  }

  uint64_t v42 = *(void *)((v37 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v135[0]);
  if (!v42)
  {
LABEL_99:
    swift_bridgeObjectRelease_n(v41, 2LL);
    uint64_t v102 = v137;
    if ((unint64_t)v137 >> 62)
    {
      if (v137 < 0) {
        unint64_t v109 = v137;
      }
      else {
        unint64_t v109 = v137 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v137, 2LL);
      uint64_t v104 = v126;
      uint64_t v110 = v126;
      unint64_t v103 = _CocoaArrayWrapper.endIndex.getter(v109);
      if (!v103) {
        goto LABEL_111;
      }
    }

    else
    {
      unint64_t v103 = *(void *)((v137 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(v137, 2LL);
      uint64_t v104 = v126;
      id v105 = v126;
      if (!v103) {
        goto LABEL_111;
      }
    }

    if (v103 >= 1)
    {
      for (k = 0LL; k != v103; ++k)
      {
        if ((v102 & 0xC000000000000001LL) != 0) {
          uint64_t v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(k, v102);
        }
        else {
          uint64_t v107 = *(id *)(v102 + 8 * k + 32);
        }
        uint64_t v108 = v107;
        [v104 addControl:v107];
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        swift_bridgeObjectRelease_n(v7, 2LL);
LABEL_39:
        a3 = v47;
        LOBYTE(v5) = v50;
        uint64_t v25 = v51;
        goto LABEL_40;
      }
    }

    else
    {
LABEL_46:
      __break(1u);
    }

    __break(1u);
    goto LABEL_48;
  }

  return result;
}

    sub_1000CA790((void **)&v26, (const void **)&v25, &v24);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_62:
                    swift_once(&qword_1001128E0, sub_10000B9B8);
                    goto LABEL_50;
                  }

    swift_bridgeObjectRelease(v1);
    uint64_t v69 = sub_10000AE14();
    os_signpost_id_t v14 = swift_allocError(&type metadata for AUAError, v69, 0LL, 0LL);
    uint64_t v16 = v14;
    *(_BYTE *)uint64_t v15 = 1;
    *(void *)(v15 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v15 + 16) = 0xE000000000000000LL;
    *(void *)(v15 + 24) = 0xD000000000000016LL;
    *(void *)(v15 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
    *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    os_signpost_id_t v17 = 558LL;
    goto LABEL_63;
  }

  uint64_t v12 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if ((unint64_t)v12 > 2)
  {
LABEL_6:
    os_signpost_type_t v13 = sub_10000AE14();
    os_signpost_id_t v14 = swift_allocError(&type metadata for AUAError, v13, 0LL, 0LL);
    uint64_t v16 = v14;
    *(_BYTE *)uint64_t v15 = 1;
    *(void *)(v15 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v15 + 16) = 0xE000000000000000LL;
    *(void *)(v15 + 24) = 0xD000000000000016LL;
    *(void *)(v15 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
    *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    os_signpost_id_t v17 = 556LL;
LABEL_63:
    *(void *)(v15 + 56) = v17;
    swift_willThrow(v14);
    goto LABEL_64;
  }

  *(void *)&Swift::String v90 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(rawValue);
  if (!v12) {
    goto LABEL_55;
  }
LABEL_9:
  Swift::String v86 = v4;
  Swift::String v87 = v5;
  Swift::String v84 = v11;
  if (v12 < 1) {
    goto LABEL_67;
  }
  for (uint64_t i = 0LL; i != v12; ++i)
  {
    if ((rawValue & 0xC000000000000001LL) != 0) {
      uint64_t v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, rawValue);
    }
    else {
      uint64_t v19 = *(id *)(rawValue + 8 * i + 32);
    }
    uint64_t v20 = v19;
    uint64_t v21 = [v19 selected];
    if ((v21 & 1) != 0)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      uint64_t v23 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v22 = *(void *)((v90 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v23 >= v22 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1LL);
      }
      unint64_t v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
      specialized Array._endMutation()(v24);
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease(rawValue);
  uint64_t v1 = v90;
  uint64_t v11 = v84;
  unint64_t v4 = v86;
  uint64_t v5 = v87;
LABEL_21:
  if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) != 1LL) {
    goto LABEL_62;
  }
LABEL_22:
  if ((v1 & 0xC000000000000001LL) != 0) {
    goto LABEL_68;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return;
  }

  for (uint64_t j = *(id *)(v1 + 32); ; uint64_t j = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1))
  {
    uint64_t v26 = j;
    swift_bridgeObjectRelease(v1);
    uint64_t v27 = [v26 value];
    uint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector);
    if (*(void *)(*(void *)(v28 + 56) + 16LL) < (unint64_t)v27)
    {
      uint64_t v29 = sub_10000AE14();
      uint64_t v30 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
      uint64_t v16 = v30;
      *(_BYTE *)uint64_t v31 = 62;
      *(void *)(v31 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v31 + 16) = 0xE000000000000000LL;
      *(void *)(v31 + 24) = 0xD000000000000016LL;
      *(void *)(v31 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
      *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
      *(void *)(v31 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
      uint64_t v32 = 561LL;
LABEL_45:
      *(void *)(v31 + 56) = v32;
      swift_willThrow(v30);

      goto LABEL_64;
    }

    uint64_t v33 = *(void *)(v11 + OBJC_IVAR___AUAAudioDevice_function);
    if (!v33)
    {
      uint64_t v52 = sub_10000AE14();
      uint64_t v30 = swift_allocError(&type metadata for AUAError, v52, 0LL, 0LL);
      uint64_t v16 = v30;
      *(_BYTE *)uint64_t v31 = 61;
      *(void *)(v31 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v31 + 16) = 0xE000000000000000LL;
      *(void *)(v31 + 24) = 0xD000000000000016LL;
      *(void *)(v31 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
      *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
      *(void *)(v31 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
      uint64_t v32 = 562LL;
      goto LABEL_45;
    }

    uint64_t v34 = *(void *)(v28 + 64);
    uint64_t v79 = v26;
    if (!v34) {
      break;
    }
    uint64_t v35 = *(void *)(v34 + 16);
    if (!v35) {
      break;
    }
    unint64_t v76 = v27;
    Swift::String v84 = v11;
    uint64_t v77 = (void *)v2;
    uint64_t v75 = *(void *)(v11 + OBJC_IVAR___AUAAudioDevice_function + 8);
    Swift::String v80 = &v91;
    unint64_t v78 = v33;
    swift_unknownObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    uint64_t v11 = 32LL;
    Swift::String v86 = v4;
    Swift::String v87 = v5;
    Swift::String v83 = v34;
    while (1)
    {
      uint64_t v85 = v35;
      uint64_t v36 = *(unsigned __int8 *)(v34 + v11 + 2);
      uint64_t v37 = *(unsigned __int16 *)(v34 + v11);
      *((void *)&v91 + 1) = &type metadata for USBDescriptorControl;
      Swift::String v81 = v37;
      uint64_t v82 = v36;
      BYTE2(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v36;
      LOWORD(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v37;
      unint64_t v38 = Mirror.init(reflecting:)(&v90);
      unint64_t v39 = (void *)Mirror.children.getter(v38);
      uint64_t v40 = v39[2];
      uint64_t v41 = v39[3];
      unint64_t v4 = v39[4];
      uint64_t v5 = v39[5];
      uint64_t ObjectType = swift_getObjectType(v40);
      swift_unknownObjectRetain(v40);
      swift_unknownObjectRetain(v4);
      uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v41);
      uint64_t v43 = swift_getObjectType(v4);
      uint64_t v1 = v4;
      if (v2 != dispatch thunk of _AnyIndexBox._typeID.getter(v43, v5)) {
        break;
      }
      unint64_t v44 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v4, v5, ObjectType, v41);
      swift_unknownObjectRelease(v4, v45);
      if ((v44 & 1) != 0)
      {
        swift_unknownObjectRelease(v40, v46);
        uint64_t v91 = 0u;
        Swift::String v92 = 0u;
        Swift::String v90 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v40, v41);
        Swift::String v90 = v89[0];
        uint64_t v91 = v89[1];
        Swift::String v92 = v89[2];
        swift_unknownObjectRelease(v40, v47);
      }

      uint64_t v48 = v86;
      swift_release(v39);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v7, v48);
      uint64_t v34 = v83;
      if (*((void *)&v92 + 1))
      {
        Swift::String v49 = *((void *)&v90 + 1);
        uint64_t v50 = v90;
        sub_100017A40(v80);
        if (v49)
        {
          if (v50 == 0x726F7463656C6573LL && v49 == 0xE800000000000000LL)
          {
            swift_bridgeObjectRelease(v34);
            goto LABEL_49;
          }

          uint64_t v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v49, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
          swift_bridgeObjectRelease(v49);
          if ((v51 & 1) != 0)
          {
            Swift::String v49 = v34;
LABEL_49:
            uint64_t v56 = v81 | (v82 << 16);
            swift_bridgeObjectRelease(v49);
            uint64_t v57 = swift_allocObject(&unk_100103AD0, 64LL, 7LL);
            unsigned __int8 v58 = v78;
            uint64_t v59 = v75;
            *(void *)(v57 + 16) = v78;
            *(void *)(v57 + 24) = v59;
            *(_BYTE *)(v57 + 34) = BYTE2(v56);
            *(_WORD *)(v57 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v56;
            unint64_t v60 = v77;
            *(void *)(v57 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v77;
            *(_DWORD *)(v57 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v76;
            *(void *)(v57 + 56) = v84;
            swift_unknownObjectRetain(v58);
            uint64_t v61 = v60;
            uint64_t v62 = v88;
            AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000016LL,  0x80000001000CE660LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  566LL,  (uint64_t)sub_1000287FC,  v57);

            swift_unknownObjectRelease(v58, v63);
            swift_release(v57);
            return;
          }
        }
      }

      else
      {
        sub_1000178B0((uint64_t)&v90, &qword_100113CD0);
      }

      v11 += 3LL;
      uint64_t v35 = v85 - 1;
      if (v85 == 1)
      {
        swift_bridgeObjectRelease(v34);
        uint64_t v33 = v78;
        goto LABEL_47;
      }
    }

    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    ;
  }

  swift_unknownObjectRetain(v33);
LABEL_47:
  uint64_t v53 = sub_10000AE14();
  uint64_t v16 = swift_allocError(&type metadata for AUAError, v53, 0LL, 0LL);
  *(_BYTE *)uint64_t v54 = 12;
  *(void *)(v54 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v54 + 16) = 0xE000000000000000LL;
  *(void *)(v54 + 24) = 0xD000000000000016LL;
  *(void *)(v54 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
  *(void *)(v54 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
  *(void *)(v54 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
  *(void *)(v54 + 56) = 564LL;
  swift_willThrow(v16);

  swift_unknownObjectRelease(v33, v55);
LABEL_64:
  unint64_t v70 = sub_100008E00(&qword_100113410);
  BOOL v71 = swift_allocObject(v70, 64LL, 7LL);
  *(_OWORD *)(v71 + 16) = xmmword_1000D3D30;
  *(void *)&Swift::String v90 = 0LL;
  *((void *)&v90 + 1) = 0xE000000000000000LL;
  *(void *)&v89[0] = v16;
  uint64_t v72 = sub_100008E00(&qword_100113400);
  _print_unlocked<A, B>(_:_:)( v89,  &v90,  v72,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  BOOL v73 = v90;
  *(void *)(v71 + 56) = &type metadata for String;
  *(_OWORD *)(v71 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v73;
  print(_:separator:terminator:)(v71, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
  swift_bridgeObjectRelease(v71);
  swift_errorRelease(v16);
}

LABEL_61:
                  __break(1u);
                  goto LABEL_62;
                }

LABEL_60:
                __break(1u);
                goto LABEL_61;
              }

LABEL_59:
              __break(1u);
              goto LABEL_60;
            }

            __break(1u);
            goto LABEL_60;
          }

LABEL_58:
            __break(1u);
            goto LABEL_59;
          }

          __break(1u);
          goto LABEL_59;
        }

LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

        unint64_t v60 = sub_10000AE14();
        uint64_t v40 = swift_allocError(&type metadata for AUAError, v60, 0LL, 0LL);
        *(_BYTE *)uint64_t v61 = 102;
        *(void *)(v61 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v61 + 16) = 0xE000000000000000LL;
        *(void *)(v61 + 24) = 0xD000000000000010LL;
        *(void *)(v61 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CCEF0LL;
        *(void *)(v61 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
        *(void *)(v61 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
        *(void *)(v61 + 56) = 795LL;
        swift_willThrow(v40);
        swift_release(v8);
LABEL_20:
        uint64_t v42 = v127;
LABEL_29:
        __int128 aBlock = 0LL;
        uint64_t v131 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(23LL);
        v49._countAndFlagsBits = 0xD000000000000015LL;
        v49._object = (void *)0x80000001000CD9D0LL;
        String.append(_:)(v49);
        uint64_t v129 = (void **)v40;
        uint64_t v50 = sub_100008E00(&qword_100113400);
        _print_unlocked<A, B>(_:_:)( &v129,  &aBlock,  v50,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        uint64_t v51 = v131;
        sub_100029840( (uint64_t)aBlock,  v131,  0xD000000000000010LL,  (void *)0x80000001000CCEF0LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  811LL);
        swift_errorRelease(v40);
        swift_bridgeObjectRelease(v51);
        uint64_t result = 1852990585LL;
LABEL_30:
        *uint64_t v42 = result;
        return result;
      }

        __break(1u);
        goto LABEL_58;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_57;
  }

    dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v13);
    os_signpost_id_t v14 = (uint64_t)v106;
    v106((unint64_t)&v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)], ObjectType);
    goto LABEL_59;
  }

  if (v87 <= 64) {
    goto LABEL_57;
  }
  __chkstk_darwin(v87);
  uint64_t v88 = &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Swift::String v89 = sub_10001CDF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v118, &type metadata for Int, v89, ObjectType, v13);
  Swift::String v80 = dispatch thunk of static Comparable.< infix(_:_:)(v88, v85, ObjectType, *(void *)(*((void *)v13 + 4) + 8LL));
  Swift::String v90 = v88;
  uint64_t v91 = v106;
  v106((unint64_t)v90, ObjectType);
  v91((unint64_t)v85, ObjectType);
  os_signpost_id_t v14 = (uint64_t)v91;
  if ((v80 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v14)(v80, ObjectType);
  __break(1u);
  return result;
}

        uint64_t v28 = v25 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v30 = *(void *)(v28 + 16);
        uint64_t v29 = *(void *)(v28 + 24);
        if (v30 >= v29 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1LL);
        }
        uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v75);
        specialized Array._endMutation()(v31);
        break;
      default:
        sub_100029834( 0xD00000000000001CLL,  0x80000001000D3750LL,  0xD000000000000026LL,  (void *)0x80000001000D3720LL,  0xD000000000000028LL,  0x80000001000D2560LL,  532LL);
        break;
    }

    swift_release(v75);
    if (v76 == v6) {
      break;
    }
    if (v72)
    {
      uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v76, v5);
      uint64_t v11 = v76 + 1;
      if (__OFADD__(v76, 1LL)) {
        goto LABEL_97;
      }
    }

    else
    {
      if (v76 >= *(void *)(v69 + 16)) {
        goto LABEL_99;
      }
      uint64_t v3 = *(void *)(v68 + 8 * v76);
      swift_retain(v3);
      uint64_t v11 = v76 + 1;
      if (__OFADD__(v76, 1LL)) {
        goto LABEL_97;
      }
    }

    uint64_t v1 = *(void *)(v3 + 72);
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0) {
        uint64_t v37 = *(void *)(v3 + 72);
      }
      else {
        uint64_t v37 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*(void *)(v3 + 72), 2LL);
      unint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v37);
      swift_bridgeObjectRelease(v1);
      if (!v38) {
        goto LABEL_132;
      }
    }

    else
    {
      uint64_t v32 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (!v32) {
        goto LABEL_132;
      }
    }

    if ((v1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    }

    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_98;
      }
      uint64_t v33 = *(void *)(v1 + 32);
      swift_retain(v33);
    }

    swift_bridgeObjectRelease(v1);
    uint64_t v34 = *(void *)(v33 + 104);
    swift_retain(v34);
    swift_release(v33);
    uint64_t v35 = *(const IOUSBEndpointDescriptor **)(v34 + 16);
    uint64_t v36 = IOUSBGetEndpointSynchronizationType(v35);
    if ((_DWORD)v36)
    {
      Swift::Int active = v36;
      swift_release(v34);
    }

    else
    {
      uint64_t v1 = IOUSBGetEndpointDirection(v35);
      swift_release(v34);
      if ((_DWORD)v1 == 1) {
        Swift::Int active = 1LL;
      }
      else {
        Swift::Int active = 3LL;
      }
    }

    unint64_t v4 = *(void *)(v3 + 72);
    if ((unint64_t)v4 >> 62)
    {
      if (v4 < 0) {
        unint64_t v39 = *(void *)(v3 + 72);
      }
      else {
        unint64_t v39 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*(void *)(v3 + 72), 2LL);
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v4);
      if (!v10) {
        goto LABEL_139;
      }
    }

    else
    {
      uint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (!v10) {
        goto LABEL_139;
      }
    }
  }

  swift_bridgeObjectRelease_n(v5, 2LL);
  uint64_t v10 = v80;
  if (!(v80 >> 62)) {
    goto LABEL_92;
  }
LABEL_105:
  if (v10 < 0) {
    int v45 = v10;
  }
  else {
    int v45 = v10 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v45);
  swift_bridgeObjectRelease(v10);
  if (v46 < 1) {
    goto LABEL_109;
  }
LABEL_93:
  sub_100092BB4(v10);
  sub_100092BB4(v79);
  sub_100092BB4(v82);
  uint64_t v40 = v78;
  swift_bridgeObjectRetain();
  sub_100092BB4(v41);
  sub_100092BB4(v81);
  uint64_t v42 = v77;
  swift_bridgeObjectRetain();
LABEL_118:
  sub_100092BB4(v43);
LABEL_119:
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v42);
  *a1 = (int64_t)_swiftEmptyArrayStorage;
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100013268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  swift_retain(v9);
  uint64_t v11 = v10(a2, a3, a4, a5);
  swift_release(v9);
  return v11;
}

uint64_t sub_1000132D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  uint64_t v9 = v8(a2, a3, a4);
  swift_release(v7);
  return v9;
}

Swift::Int32 __swiftcall AUAAudioDevice.performStopIO()()
{
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100029834( 0x536D726F66726570LL,  0xED00004F49706F74LL,  0x536D726F66726570LL,  (void *)0xEF29284F49706F74LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  821LL);
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v5 = sub_100008EC4(v1, (uint64_t)qword_1001171B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  uint64_t v6 = v0;
  uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v7 = 134217984;
  uint64_t v22 = *(void *)&v6[OBJC_IVAR___AUAAudioDevice_curZTSSeed];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v7 + 4, v7 + 12);

  uint64_t v9 = (os_log_s *)OSSignposter.logHandle.getter(v8);
  uint64_t v10 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v11 = v10;
  os_signpost_id_t v12 = OSSignpostID.rawValue.getter(v10);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  v11,  v12,  "AUAAudioDevice_performStopIO",  "curZTSeed %llu",  v7,  0xCu);
  os_signpost_type_t v13 = (objc_class *)type metadata accessor for AUAAudioDevice(0LL);
  v21.receiver = v6;
  v21.super_class = v13;
  Swift::Int32 v14 = objc_msgSendSuper2(&v21, "performStopIO");
  uint64_t v15 = *(void *)&v6[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession];
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = 0LL;
  uint64_t v16 = swift_release(v15);
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = 0LL;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = 0LL;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = 0LL;
  uint64_t v17 = static os_signpost_type_t.end.getter(v16);
  LOBYTE(v6) = v17;
  os_signpost_id_t v18 = OSSignpostID.rawValue.getter(v17);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  (os_signpost_type_t)v6,  v18,  "AUAAudioDevice_performStopIO",  "curZTSeed %llu",  v7,  0xCu);

  swift_slowDealloc(v7, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v14;
}

Swift::Bool __swiftcall AUAAudioDevice.changeSamplingRate(_:)(Swift::Double a1)
{
  uint64_t v3 = swift_allocObject(&unk_1001034F8, 32LL, 7LL);
  *(void *)(v3 + 16) = v1;
  *(Swift::Double *)(v3 + 24) = a1;
  id v4 = v1;
  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000016LL,  0x80000001000CCF50LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  848LL,  (uint64_t)sub_100017238,  v3);
  swift_release(v3);
  return 1;
}

id AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)( os_log_s *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v54 - v14;
  id result = (id)__chkstk_darwin(v13);
  uint64_t v19 = (char *)&v54 - v18;
  uint64_t v20 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_timeStampStream);
  if (v20) {
    BOOL v21 = v20 == a3;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21 || *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_curZTSSeed) != a2) {
    return result;
  }
  uint64_t v61 = v17;
  id result = [*(id *)(v5 + OBJC_IVAR___AUAAudioDevice_timestamp) write:a1 hostTime:a4];
  uint64_t v22 = OBJC_IVAR___AUAAudioDevice_lastZTSMach;
  unint64_t v23 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_lastZTSMach);
  unint64_t v24 = (unint64_t)a1 - v23;
  if ((unint64_t)a1 < v23)
  {
    __break(1u);
  }

  else if (qword_100112948 == -1)
  {
    goto LABEL_9;
  }

  id result = (id)swift_once(&qword_100112948, sub_1000CA978);
LABEL_9:
  if ((_DWORD)qword_1001172D0 == HIDWORD(qword_1001172D0)) {
    goto LABEL_13;
  }
  if (!is_mul_ok(v24, qword_1001172D0))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (!HIDWORD(qword_1001172D0))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  unint64_t v24 = v24 * qword_1001172D0 / HIDWORD(qword_1001172D0);
LABEL_13:
  if ((v24 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v25 = OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS;
    uint64_t v26 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS);
    BOOL v27 = __OFSUB__(v24, v26);
    uint64_t v28 = (os_log_s *)(v24 - v26);
    if (!v27)
    {
      unint64_t v60 = v28;
      *(void *)(v5 + v2swift_unknownObjectWeakDestroy(v0 + 2) = a1;
      *(void *)(v5 + v25) = v24;
      if (qword_1001128E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_35:
  swift_once(&qword_1001128E0, sub_10000B9B8);
LABEL_16:
  uint64_t v29 = type metadata accessor for OSSignposter(0LL);
  uint64_t v30 = sub_100008EC4(v29, (uint64_t)qword_1001171B8);
  uint64_t v31 = *(uint64_t (**)(char *))(v11 + 16);
  uint64_t v57 = v5 + OBJC_IVAR___AUAAudioDevice_signpostID;
  uint64_t v32 = v31(v19);
  uint64_t v58 = v30;
  uint64_t v33 = (void *)OSSignposter.logHandle.getter(v32);
  os_signpost_type_t v34 = static os_signpost_type_t.event.getter();
  char v35 = OS_os_log.signpostsEnabled.getter();
  uint64_t v59 = v31;
  if ((v35 & 1) == 0)
  {

    unint64_t v39 = *(void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v40 = v19;
    goto LABEL_22;
  }

  ((void (*)(char *, char *, uint64_t))v31)(v15, v19, v10);
  uint64_t v36 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v36 = 134218496;
  uint64_t v62 = a1;
  id result = (id)UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v36 + 4, v36 + 12);
  *(_WORD *)(v36 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
  if ((~*(void *)&a4 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_38;
  }
  if (a4 <= -1.0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (a4 >= 1.84467441e19)
  {
LABEL_40:
    __break(1u);
    return result;
  }

  uint64_t v62 = (os_log_s *)a4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v36 + 14, v36 + 22);
  *(_WORD *)(v36 + 2swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
  uint64_t v62 = v60;
  uint64_t v37 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v36 + 24, v36 + 32);
  os_signpost_id_t v38 = OSSignpostID.rawValue.getter(v37);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)v33,  v34,  v38,  "AUAAudioDevice_updateTimeStamp",  "hostTime %llu, sampleTime %llu, jitter ns %lld",  (uint8_t *)v36,  0x20u);
  swift_slowDealloc(v36, -1LL, -1LL);

  unint64_t v39 = *(void (**)(char *, uint64_t))(v11 + 8);
  v39(v19, v10);
  uint64_t v40 = v15;
LABEL_22:
  v39(v40, v10);
  id result = [*(id *)(v5 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) getStatistics];
  uint64_t v41 = v64;
  if (v64)
  {
    uint64_t v42 = v62;
    uint64_t v43 = (os_log_s *)v65;
    unint64_t v44 = (os_log_s *)v66;
    if (v66 > 0x4E20 || v65 > 0x186A0 || v67 || v68)
    {
      uint64_t v54 = (os_log_s *)v63[1];
      int v55 = v67;
      int v56 = v68;
      uint64_t v45 = v61;
      uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))v59;
      uint64_t v47 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v59)(v61, v57, v10);
      uint64_t v48 = (os_log_s *)OSSignposter.logHandle.getter(v47);
      LODWORD(v5_Block_object_dispose((const void *)(v30 - 136), 8) = static os_signpost_type_t.event.getter();
      unint64_t v60 = v48;
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v46(v15, v45, v10);
        uint64_t v49 = swift_slowAlloc(64LL, -1LL);
        *(_DWORD *)uint64_t v49 = 134219520;
        uint64_t v62 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49 + 4, v49 + 12);
        *(_WORD *)(v49 + 1swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
        uint64_t v62 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49 + 14, v49 + 22);
        *(_WORD *)(v49 + 2swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
        uint64_t v62 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49 + 24, v49 + 32);
        *(_WORD *)(v49 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
        uint64_t v62 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49 + 34, v49 + 42);
        *(_WORD *)(v49 + 4swift_unknownObjectWeakDestroy(v0 + 2) = 2048;
        uint64_t v62 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49 + 44, v49 + 52);
        *(_WORD *)(v49 + 5swift_unknownObjectWeakDestroy(v0 + 2) = 1024;
        LODWORD(v6swift_unknownObjectWeakDestroy(v0 + 2) = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 4, v49 + 54, v49 + 58);
        *(_WORD *)(v49 + 5_Block_object_dispose((const void *)(v30 - 136), 8) = 1024;
        LODWORD(v6swift_unknownObjectWeakDestroy(v0 + 2) = v56;
        uint64_t v50 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 4, v49 + 60, v49 + 64);
        os_signpost_id_t v51 = OSSignpostID.rawValue.getter(v50);
        uint64_t v52 = v60;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v60,  (os_signpost_type_t)v58,  v51,  "AUAAudioDevice_timeCorrelater",  "machPerFrame %f, wakeOffsetNS %llu, wakeErrorNSMax %llu, measurementDurationNSMax %llu, preemptedTimeNSMax %ll u, failedMeasurementCount %u, missedWakeDeadlineCount %u",  (uint8_t *)v49,  0x40u);
        swift_slowDealloc(v49, -1LL, -1LL);

        uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
        v53(v45, v10);
        return (id)((uint64_t (*)(char *, uint64_t))v53)(v15, v10);
      }

      else
      {

        return (id)((uint64_t (*)(uint64_t, uint64_t))v39)(v45, v10);
      }
    }
  }

  return result;
}

Swift::Bool __swiftcall AUAAudioDevice.hasImplicitFeedbackStream()()
{
  id v1 = [v0 inputStreams];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v4);
    for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17))
    {
      uint64_t v6 = 4LL;
      uint64_t v7 = 0LL;
      if ((v4 & 0xC000000000000001LL) != 0)
      {
LABEL_5:
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
        goto LABEL_7;
      }

      while (1)
      {
        id v8 = *(id *)(v4 + 8 * v6);
LABEL_7:
        uint64_t v9 = v8;
        uint64_t v10 = v7 + 1;
        if (__OFADD__(v7, 1LL)) {
          break;
        }
        uint64_t v11 = type metadata accessor for AUAStream(0LL);
        uint64_t v12 = (void *)swift_dynamicCastClass(v9, v11);
        if (v12)
        {
          uint64_t v13 = *(uint64_t (**)(void))((swift_isaMask & *v12) + 0x210LL);
          id v14 = v9;
          char v15 = v13();

          if ((v15 & 1) != 0)
          {
            char v16 = 1;
            goto LABEL_22;
          }

          if (v10 == v5) {
            goto LABEL_21;
          }
        }

        else
        {

          if (v10 == v5) {
            goto LABEL_21;
          }
        }

        uint64_t v7 = ++v6 - 4;
        if ((v4 & 0xC000000000000001LL) != 0) {
          goto LABEL_5;
        }
      }

      __break(1u);
LABEL_17:
      if (v4 < 0) {
        uint64_t v17 = v4;
      }
      else {
        uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v4);
    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.addGlobalControls()()
{
  uint64_t v2 = v0;
  uint64_t v3 = &v0[OBJC_IVAR___AUAAudioDevice_function];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function];
  if (!v4)
  {
    unint64_t v32 = sub_10000AE14();
    uint64_t v33 = swift_allocError(&type metadata for AUAError, v32, 0LL, 0LL);
    *(_BYTE *)uint64_t v34 = 61;
    *(void *)(v34 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v34 + 16) = 0xE000000000000000LL;
    *(void *)(v34 + 24) = 0xD000000000000013LL;
    *(void *)(v34 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD600LL;
    *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v34 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
    *(void *)(v34 + 56) = 908LL;
    swift_willThrow(v33);
    return;
  }

  uint64_t v5 = v1;
  uint64_t v6 = *((void *)v3 + 1);
  uint64_t ObjectType = swift_getObjectType(v4);
  id v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  swift_unknownObjectRetain(v4);
  uint64_t v9 = v8(ObjectType, v6);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);
  if (!v10)
  {
    unint64_t v35 = sub_10000AE14();
    uint64_t v36 = swift_allocError(&type metadata for AUAError, v35, 0LL, 0LL);
    *(_BYTE *)uint64_t v37 = 7;
    *(void *)(v37 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v37 + 16) = 0xE000000000000000LL;
    *(void *)(v37 + 24) = 0xD000000000000013LL;
    *(void *)(v37 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD600LL;
    *(void *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v37 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
    *(void *)(v37 + 56) = 910LL;
    swift_willThrow(v36);
    swift_unknownObjectRelease(v4, v38);
    swift_release(v9);
    return;
  }

  uint64_t v12 = (void *)v10;
  uint64_t v46 = v5;
  uint64_t v13 = *(void *)(v9 + 168);
  uint64_t v42 = *(void *)(v13 + 16);
  if (!v42)
  {
    swift_unknownObjectRelease(v4, v11);
    swift_release(v9);

    return;
  }

  uint64_t v39 = v9;
  uint64_t v40 = v4;
  swift_bridgeObjectRetain(v13);
  unint64_t v14 = 0LL;
  uint64_t v41 = v12;
  while (v14 < *(void *)(v13 + 16))
  {
    sub_100017910(v13 + 32 + 40 * v14, (uint64_t)v43);
    uint64_t v17 = v44;
    uint64_t v16 = v45;
    sub_1000178EC(v43, v44);
    id v18 = [v12 plugin];
    if (!v18) {
      goto LABEL_31;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v46;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, id, uint64_t, uint64_t))(v16 + 72))(1735159650LL, v18, v17, v16);
    uint64_t v46 = v20;
    if (v20)
    {
      swift_unknownObjectRelease(v40, v22);
      swift_release(v39);

      swift_bridgeObjectRelease(v13);
      sub_100017A40(v43);
      return;
    }

    uint64_t v23 = v21;
    uint64_t v24 = v22;

    swift_bridgeObjectRelease(v24);
    if (v23)
    {
      if ((unint64_t)v23 >> 62)
      {
        if (v23 >= 0) {
          uint64_t v30 = v23 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v30 = v23;
        }
        id v31 = v2;
        swift_bridgeObjectRetain(v23);
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v30);
        if (v25)
        {
LABEL_13:
          if (v25 < 1) {
            goto LABEL_30;
          }
          for (uint64_t i = 0LL; i != v25; ++i)
          {
            if ((v23 & 0xC000000000000001LL) != 0) {
              id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
            }
            else {
              id v28 = *(id *)(v23 + 8 * i + 32);
            }
            uint64_t v29 = v28;
            objc_msgSend(v2, "addControl:", v28, v39, v40);
          }
        }
      }

      else
      {
        uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        id v26 = v2;
        swift_bridgeObjectRetain(v23);
        if (v25) {
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease_n(v23, 2LL);
      uint64_t v12 = v41;
    }

    ++v14;
    sub_100017A40(v43);
    if (v14 == v42)
    {
      swift_unknownObjectRelease(v40, v15);
      swift_release(v39);

      swift_bridgeObjectRelease(v13);
      return;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.addStreamControls()()
{
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function];
  if (!v2)
  {
    unint64_t v20 = sub_10000AE14();
    uint64_t v21 = swift_allocError(&type metadata for AUAError, v20, 0LL, 0LL);
    *(_BYTE *)uint64_t v22 = 61;
    *(void *)(v22 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v22 + 16) = 0xE000000000000000LL;
    *(void *)(v22 + 24) = 0xD000000000000013LL;
    *(void *)(v22 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD5C0LL;
    *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v22 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
    *(void *)(v22 + 56) = 926LL;
    swift_willThrow(v21);
    return;
  }

  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t ObjectType = swift_getObjectType(*(void *)&v0[OBJC_IVAR___AUAAudioDevice_function]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  swift_unknownObjectRetain(v2);
  uint64_t v8 = v7(ObjectType, v5);
  uint64_t v130 = v5;
  id v131 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
  if (!v131)
  {
    unint64_t v23 = sub_10000AE14();
    uint64_t v24 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v25 = 7;
    *(void *)(v25 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v25 + 16) = 0xE000000000000000LL;
    *(void *)(v25 + 24) = 0xD000000000000013LL;
    *(void *)(v25 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CD5C0LL;
    *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v25 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CCED0LL;
    *(void *)(v25 + 56) = 928LL;
    swift_willThrow(v24);
    swift_unknownObjectRelease(v2, v26);
    swift_release(v8);
    return;
  }

  uint64_t v129 = v8;
  id v9 = [v0 controls];
  id v126 = v0;
  uint64_t v127 = v2;
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = sub_10000AF08(0LL, &qword_100113B20, &OBJC_CLASS___ASDControl_ptr);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    v135[0] = _swiftEmptyArrayStorage;
    if ((unint64_t)v12 >> 62)
    {
      if (v12 < 0) {
        uint64_t v28 = v12;
      }
      else {
        uint64_t v28 = v12 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v12);
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v28);
      if (v13) {
        goto LABEL_6;
      }
    }

    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v12);
      if (v13)
      {
LABEL_6:
        if (v13 < 1)
        {
          __break(1u);
          goto LABEL_126;
        }

        for (uint64_t i = 0LL; i != v13; ++i)
        {
          if ((v12 & 0xC000000000000001LL) != 0) {
            id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v12);
          }
          else {
            id v15 = *(id *)(v12 + 8 * i + 32);
          }
          uint64_t v16 = v15;
          if ([v15 controlScope] == 1735159650)
          {
          }

          else
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v18 = *(void *)((v135[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v17 = *(void *)((v135[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v18 >= v17 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1LL);
            }
            uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
            specialized Array._endMutation()(v19);
          }
        }

        swift_bridgeObjectRelease(v12);
        uint64_t v27 = v135[0];
        uint64_t v4 = v126;
LABEL_25:
        swift_bridgeObjectRelease(v12);
        if ((unint64_t)v27 >> 62)
        {
          if (v27 < 0) {
            uint64_t v33 = v27;
          }
          else {
            uint64_t v33 = v27 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(v27);
          uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v33);
          swift_bridgeObjectRelease(v27);
          if (v29)
          {
LABEL_27:
            if (v29 >= 1)
            {
              for (uint64_t j = 0LL; j != v29; ++j)
              {
                if ((v27 & 0xC000000000000001LL) != 0) {
                  id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v27);
                }
                else {
                  id v31 = *(id *)(v27 + 8 * j + 32);
                }
                unint64_t v32 = v31;
                [v4 removeControl:v31];
              }

              goto LABEL_37;
            }

LABEL_126:
            __break(1u);
            goto LABEL_127;
          }
        }

        else
        {
          uint64_t v29 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          if (v29) {
            goto LABEL_27;
          }
        }

LABEL_37:
        swift_bridgeObjectRelease(v27);
        goto LABEL_38;
      }
    }

    swift_bridgeObjectRelease(v12);
    uint64_t v27 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_25;
  }

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_37;
  }

    uint64_t v50 = *(void *)&v101[v100];
    if (v50)
    {
      if (sub_10001645C(26LL, v50)) {
        break;
      }
    }

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_37;
  }

  if (v7 < 0) {
    uint64_t v27 = v7;
  }
  else {
    uint64_t v27 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  id v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  char *v3 = v7;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  uint64_t v12 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v7);
  unint64_t v14 = *v3;
  char *v3 = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  id v15 = v11 + 32;
  uint64_t v16 = (char *)(v11 + 32 + 8 * v4);
  Swift::Int active = type metadata accessor for ActiveStreamingInterface();
  unint64_t v18 = (void *)swift_arrayDestroy(v16, v5, active);
  if (!v6) {
    return specialized Array._endMutation()(v18);
  }
  uint64_t v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    unint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v21 = v20 - v2;
    if (!__OFSUB__(v20, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v19 < 0) {
    uint64_t v29 = *v3;
  }
  else {
    uint64_t v29 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  unint64_t v18 = (void *)swift_bridgeObjectRelease(v19);
  uint64_t v21 = v30 - v2;
  if (__OFSUB__(v30, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    uint64_t v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21]) {
      unint64_t v18 = memmove(v16, v22, 8 * v21);
    }
    uint64_t v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      unint64_t v23 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v24;
        return specialized Array._endMutation()(v18);
      }

      goto LABEL_58;
    }

LABEL_111:
      swift_bridgeObjectRelease_n(v102, 2LL);
      uint64_t v111 = v136;
      if ((unint64_t)v136 >> 62)
      {
        if (v136 < 0) {
          uint64_t v118 = v136;
        }
        else {
          uint64_t v118 = v136 & 0xFFFFFFFFFFFFFF8LL;
        }
        id v119 = v104;
        swift_bridgeObjectRetain_n(v111, 2LL);
        id v120 = v119;
        uint64_t v112 = _CocoaArrayWrapper.endIndex.getter(v118);
        if (v112)
        {
LABEL_113:
          if (v112 >= 1)
          {
            for (uint64_t m = 0LL; m != v112; ++m)
            {
              if ((v111 & 0xC000000000000001LL) != 0) {
                id v116 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(m, v111);
              }
              else {
                id v116 = *(id *)(v111 + 8 * m + 32);
              }
              uint64_t v117 = v116;
              [v104 addCustomProperty:v116];
            }

            goto LABEL_123;
          }

          goto LABEL_128;
        }
      }

      else
      {
        uint64_t v112 = *(void *)((v136 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        id v113 = v104;
        swift_bridgeObjectRetain_n(v111, 2LL);
        id v114 = v113;
        if (v112) {
          goto LABEL_113;
        }
      }

LABEL_123:
      swift_bridgeObjectRelease_n(v111, 3LL);
      swift_unknownObjectRelease(v127, v121);

      swift_release(v129);
      uint64_t v100 = v102;
      goto LABEL_124;
    }

LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

LABEL_42:
  uint64_t v43 = 0LL;
  unint64_t v44 = v41 & 0xC000000000000001LL;
  uint64_t v123 = v41 + 32;
  uint64_t v128 = v41;
  unint64_t v124 = v41 & 0xC000000000000001LL;
  uint64_t v125 = v42;
  while (1)
  {
    while (1)
    {
      if (v44) {
        uint64_t v47 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v41);
      }
      else {
        uint64_t v47 = (char *)*(id *)(v123 + 8 * v43);
      }
      uint64_t v46 = v47;
      if (__OFADD__(v43++, 1LL))
      {
LABEL_94:
        __break(1u);
        goto LABEL_95;
      }

      uint64_t v49 = type metadata accessor for AUAStream(0LL);
      uint64_t v50 = swift_dynamicCastClass(v46, v49);
      if (v50) {
        break;
      }
LABEL_45:

      if (v43 == v42) {
        goto LABEL_99;
      }
    }

    os_signpost_id_t v51 = (char *)v50;
    uint64_t v52 = *(void *)(v129 + 168);
    uint64_t v53 = *(void *)(v52 + 16);
    if (v53) {
      break;
    }
    int v56 = v46;
LABEL_57:
    if (qword_100112938 != -1) {
      swift_once(&qword_100112938, sub_1000B99F4);
    }
    uint64_t v57 = *(void **)(qword_1001172A8 + 16);
    if (v57)
    {
      id v58 = v57;
      NSString v59 = String._bridgeToObjectiveC()();
      unsigned __int8 v60 = [v58 BOOLForKey:v59];

      if ((v60 & 1) != 0) {
        goto LABEL_43;
      }
    }

    uint64_t v61 = *(void *)&v51[OBJC_IVAR___AUAStream_interface];
    swift_beginAccess(v61 + 80, v134, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v61 + 80);
    if (!Strong)
    {
LABEL_43:
      uint64_t v45 = v46;
LABEL_44:

      uint64_t v46 = v45;
      uint64_t v41 = v128;
      unint64_t v44 = v124;
      uint64_t v42 = v125;
      goto LABEL_45;
    }

    uint64_t v45 = (char *)Strong;
    uint64_t v63 = OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor;
    uint64_t v41 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
    if (qword_100112918 != -1) {
      swift_once(&qword_100112918, sub_10008311C);
    }
    unint64_t v64 = *(void *)(qword_100117238 + 16);
    if (!v64) {
      goto LABEL_91;
    }
    char v65 = 0;
    uint64_t v66 = 0LL;
    unint64_t v67 = 0LL;
    uint64_t v68 = *(void *)&v45[v63];
LABEL_66:
    uint64_t v69 = v67 <= v64 ? *(void *)(qword_100117238 + 16) : v67;
    uint64_t v70 = -v69;
    BOOL v71 = (unsigned int *)(qword_100117238 + 80 + 56 * v67++);
    do
    {
      if (v70 + v67 == 1)
      {
        __break(1u);
        goto LABEL_94;
      }

      if (*((void *)v71 - 6) == *(unsigned __int16 *)(v68 + 8)
        && *((void *)v71 - 5) == *(unsigned __int16 *)(v68 + 10))
      {
        uint64_t v72 = *((void *)v71 - 2);
        if ((v72 & 0x8000000000000000LL) == 0
          && v72 == *(void *)&v45[OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum])
        {
          uint64_t v73 = *(unsigned __int16 *)(v41 + 12);
          if (*((void *)v71 - 4) <= v73
            && *((void *)v71 - 3) >= v73
            && *((void *)v71 - 1) == *(unsigned __int8 *)(*(void *)(v61 + 32) + 2LL))
          {
            uint64_t v66 = *v71;
            char v65 = 1;
            if (v67 != v64) {
              goto LABEL_66;
            }
            uint64_t v74 = *v71;

            goto LABEL_82;
          }
        }
      }

      ++v67;
      v71 += 14;
    }

    while (v67 - v64 != 1);
    uint64_t v74 = v66;
    char v75 = v65;

    if ((v75 & 1) == 0) {
      goto LABEL_43;
    }
LABEL_82:
    [v51 setIsTapStream:1];
    unint64_t v76 = v46;
    id v77 = [v126 plugin];
    unint64_t v78 = (objc_class *)type metadata accessor for AUATapControl();
    uint64_t v79 = (char *)objc_allocWithZone(v78);
    *(void *)&v79[OBJC_IVAR____TtC9AUASDCore13AUATapControl_stream] = v51;
    v133.receiver = v79;
    v133.super_class = v78;
    uint64_t v46 = v76;
    id v80 = objc_msgSendSuper2( &v133,  "initWithValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:",  0,  1,  0,  v74,  v77,  1702259059);
    if (!v80) {
      goto LABEL_131;
    }
    Swift::String v81 = v80;

    uint64_t v45 = v81;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v83 = *(void *)((v137 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v82 = *(void *)((v137 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v83 >= v82 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1LL);
    }
    uint64_t v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v45);
    specialized Array._endMutation()(v84);
    id v85 = [v131 serialNumber];
    if (!v85)
    {
LABEL_91:

      goto LABEL_44;
    }

    Swift::String v86 = v85;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
    uint64_t v88 = v87;

    NSString v89 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v88);
    uint64_t v122 = (objc_class *)type metadata accessor for AUACustomStringProperty();
    Swift::String v90 = (char *)objc_allocWithZone(v122);
    *(void *)&v90[OBJC_IVAR____TtC9AUASDCore23AUACustomStringProperty_string] = v89;
    id v91 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
    id v92 = v89;
    id v93 = [v91 initWithSelector:2020898165 scope:1735159650 element:0];
    v132.receiver = v90;
    v132.super_class = v122;
    id v94 = objc_msgSendSuper2(&v132, "initWithAddress:propertyDataType:qualifierDataType:", v93, 1886155636, 0);

    if (!v94) {
      goto LABEL_132;
    }
    id v95 = v94;
    [v95 setSettable:0];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v97 = *(void *)((v136 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v96 = *(void *)((v136 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v97 >= v96 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1LL);
    }
    uint64_t v98 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v97, v95);
    specialized Array._endMutation()(v98);

    unint64_t v44 = v124;
    uint64_t v42 = v125;
    uint64_t v41 = v128;
    if (v43 == v125) {
      goto LABEL_99;
    }
  }

  uint64_t v54 = v52 + 32;
  swift_bridgeObjectRetain_n(*(void *)(v129 + 168), 2LL);
  int v55 = v46;
  while (1)
  {
    sub_100017910(v54, (uint64_t)v135);
    sub_100014F04((uint64_t)v135, v51, v131, (uint64_t)&v137, (uint64_t)&v136, v2, v130);
    if (v3) {
      break;
    }
    sub_100017A40(v135);
    v54 += 40LL;
    if (!--v53)
    {
      swift_bridgeObjectRelease_n(v52, 2LL);
      goto LABEL_57;
    }
  }

  sub_100017A40(v135);

  swift_release(v129);
  swift_bridgeObjectRelease_n(v128, 2LL);

  swift_bridgeObjectRelease_n(v52, 2LL);
  swift_unknownObjectRelease(v2, v99);
  swift_bridgeObjectRelease(v136);
  uint64_t v100 = v137;
LABEL_124:
  swift_bridgeObjectRelease(v100);
}

void *sub_100014F04(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_100008E00(&qword_100113B28);
  uint64_t v13 = sub_100008E00(&qword_100113B30);
  if ((swift_dynamicCast(v60, v62, v12, v13, 6LL) & 1) == 0)
  {
    uint64_t v61 = 0LL;
    memset(v60, 0, sizeof(v60));
    return (void *)sub_1000178B0((uint64_t)v60, &qword_100113B38);
  }

  uint64_t v68 = a6;
  uint64_t v14 = a7;
  id v59 = a3;
  sub_10000AF84(v60, (uint64_t)v65);
  uint64_t v57 = &a2[OBJC_IVAR___AUAStream_path];
  uint64_t v15 = *(void *)&a2[OBJC_IVAR___AUAStream_path + 16];
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    unint64_t v17 = (void *)(v15 + 32);
    swift_bridgeObjectRetain(v15);
    while (1)
    {
      uint64_t v19 = v66;
      uint64_t v18 = v67;
      sub_1000178EC(v65, v66);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(v18 + 8) + 48LL))(v19);
      uint64_t v22 = v17[3];
      uint64_t v21 = v17[4];
      sub_1000178EC(v17, v22);
      v17 += 5;
      if (!--v16)
      {
        swift_bridgeObjectRelease(v15);
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v15);
    uint64_t v29 = v66;
    uint64_t v30 = v67;
    sub_1000178EC(v65, v66);
    id v31 = &a2[OBJC_IVAR___AUAStream_controlScope];
    swift_beginAccess(&a2[OBJC_IVAR___AUAStream_controlScope], v60, 0LL, 0LL);
    uint64_t v32 = *(unsigned int *)v31;
    id result = [v59 plugin];
    if (!result)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

    uint64_t v33 = result;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v30 + 8) + 72LL))(v32, result, v29);
    uint64_t v36 = v35;

    uint64_t v23 = v14;
    uint64_t v24 = v68;
    if (v7) {
      return (void *)sub_100017A40(v65);
    }
    if (v34) {
      sub_1000929F0(v34);
    }
    if (v36) {
      sub_1000929FC(v36);
    }
  }

  else
  {
LABEL_7:
    uint64_t v23 = v14;
    uint64_t v24 = v68;
  }

  uint64_t ObjectType = swift_getObjectType(v24);
  char v26 = sub_10002A0F0((uint64_t)v65, ObjectType, v23);
  if (v7 || (v26 & 1) != 0) {
    return (void *)sub_100017A40(v65);
  }
  id result = sub_10002A1BC(*((void *)v57 + 1), ObjectType, v23);
  uint64_t v58 = result[2];
  if (!v58)
  {
LABEL_35:
    swift_bridgeObjectRelease(result);
    return (void *)sub_100017A40(v65);
  }

  unint64_t v28 = 0LL;
  int v55 = result;
  int v56 = result + 4;
  while (1)
  {
    if (v28 >= result[2])
    {
      __break(1u);
      goto LABEL_37;
    }

    unint64_t v37 = &v56[3 * v28];
    uint64_t v38 = v37[2];
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39) {
      break;
    }
LABEL_19:
    if (++v28 == v58) {
      goto LABEL_35;
    }
  }

  uint64_t v40 = *v37;
  uint64_t v41 = v37[1];
  uint64_t v42 = v38 + 32;
  swift_bridgeObjectRetain_n(v37[2], 2LL);
  uint64_t v68 = v40;
  swift_retain(v40);
  swift_retain(v41);
  while (1)
  {
    sub_100017910(v42, (uint64_t)v62);
    uint64_t v44 = v66;
    uint64_t v43 = v67;
    sub_1000178EC(v65, v66);
    uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)(v43 + 8) + 48LL))(v44);
    uint64_t v47 = v63;
    uint64_t v46 = v64;
    sub_1000178EC(v62, v63);
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)(v46 + 8) + 48LL))(v47);
    sub_100017A40(v62);
    if (v45 == v48) {
      break;
    }
    v42 += 40LL;
    if (!--v39)
    {
      swift_release(v41);
      swift_release(v68);
      swift_bridgeObjectRelease_n(v38, 2LL);
LABEL_18:
      id result = v55;
      goto LABEL_19;
    }
  }

  swift_bridgeObjectRelease(v38);
  uint64_t v50 = v66;
  uint64_t v49 = v67;
  sub_1000178EC(v65, v66);
  id result = [v59 plugin];
  if (result)
  {
    os_signpost_id_t v51 = result;
    uint64_t v52 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v49 + 8) + 72LL))( 1886679669LL,  result,  v50);
    uint64_t v54 = v53;

    if (v52) {
      sub_1000929F0(v52);
    }
    if (v54) {
      sub_1000929FC(v54);
    }
    swift_bridgeObjectRelease(v38);
    swift_release(v41);
    swift_release(v68);
    goto LABEL_18;
  }

Swift::Bool __swiftcall AUAAudioDevice.changeClientDescription(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function);
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v3 = v1;
  rawValue = a1.value._rawValue;
  uint64_t v5 = *(uint64_t (***)(void, void))(v1 + OBJC_IVAR___AUAAudioDevice_function + 8);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function));
  uint64_t v7 = v5[2](ObjectType, v5);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (!v9) {
      goto LABEL_14;
    }
    LOBYTE(v7) = sub_10001645C(21LL, v9);
    if ((v7 & 1) == 0) {
      goto LABEL_14;
    }
    if (rawValue)
    {
      v22[0] = 1684957547LL;
      v22[1] = 0xE400000000000000LL;
      AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
      if (rawValue[2] && (unint64_t v10 = sub_100016B90((uint64_t)&v23), (v11 & 1) != 0))
      {
        sub_100017294(rawValue[7] + 32 * v10, (uint64_t)&v25);
      }

      else
      {
        __int128 v25 = 0u;
        __int128 v26 = 0u;
      }

      sub_100017260((uint64_t)&v23);
      if (!*((void *)&v26 + 1))
      {

        sub_1000178B0((uint64_t)&v25, (uint64_t *)&unk_100115170);
        goto LABEL_15;
      }

      if ((swift_dynamicCast(v22, &v25, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6LL) & 1) == 0
        || (v22[0] & 0xFFFEFFFF) != 0
        || (uint64_t v12 = OBJC_IVAR___AUAAudioDevice_clientDescriptionKind,
            LODWORD(v22[0]) == *(_DWORD *)(v1 + OBJC_IVAR___AUAAudioDevice_clientDescriptionKind)))
      {
LABEL_14:

LABEL_15:
        LOBYTE(v7) = 0;
        return v7;
      }

      LODWORD(v25) = v22[0];
      id v13 = objc_allocWithZone(&OBJC_CLASS___NSMutableData);
      swift_unknownObjectRetain(v2);
      id v14 = [v13 initWithBytes:&v25 length:4];
      uint64_t v23 = 0LL;
      uint64_t v24 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      swift_bridgeObjectRelease(v24);
      uint64_t v23 = 0xD000000000000021LL;
      uint64_t v24 = 0x80000001000CCF70LL;
      int v15 = v25;
      LODWORD(v22[0]) = v25;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      object = v16._object;
      String.append(_:)(v16);
      swift_bridgeObjectRelease(object);
      uint64_t v18 = v24;
      sub_100029834( v23,  v24,  0xD00000000000001BLL,  (void *)0x80000001000CCFA0LL,  0xD00000000000001BLL,  0x80000001000CCED0LL,  1075LL);
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = swift_getObjectType(v2);
      sub_10002A24C(0x4344u, v14, v19, v5);

      swift_unknownObjectRelease(v2, v20);
      *(_DWORD *)(v3 + v1swift_unknownObjectWeakDestroy(v0 + 2) = v15;
      LOBYTE(v7) = 1;
    }

    else
    {
      __break(1u);
    }
  }

  return v7;
}

Swift::UInt32 __swiftcall AUAAudioDevice.usbControllerClockDomain()()
{
  uint64_t v1 = v0 + OBJC_IVAR___AUAAudioDevice_function;
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function);
  if (!v2) {
    return v2;
  }
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = (uint64_t (*)(uint64_t, void *))v3[2];
  uint64_t v6 = v5(ObjectType, v3);
  if (!v6)
  {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = 0;
    return v2;
  }

  uint64_t v7 = (void *)v6;
  id v8 = *(id *)(v6 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);

  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 searchForPropertyWithKey:v9 inPlane:v10 withOptions:3];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v27, v11);
    swift_unknownObjectRelease(v11, v12);
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
  }

  sub_100017868((uint64_t)&v27, (uint64_t)v29);
  if (v30)
  {
    if ((swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0)
    {
      int v13 = v26[0];
      goto LABEL_12;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)v29, (uint64_t *)&unk_100115170);
  }

  int v13 = 0;
LABEL_12:
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v8 searchForPropertyWithKey:v14 inPlane:v15 withOptions:3];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v27, v16);
    swift_unknownObjectRelease(v16, v17);
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
  }

  sub_100017868((uint64_t)&v27, (uint64_t)v29);
  if (!v30) {
    goto LABEL_22;
  }
  if (swift_dynamicCast(v26, v29, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) || v13)
  {
    while (1)
    {
      uint64_t v18 = swift_getObjectType(v2);
      uint64_t v19 = v5(v18, v3);
      if (!v19) {
        break;
      }
      uint64_t v3 = (void *)v19;
      unint64_t v2 = (unint64_t)USBDevice.locationID.getter();
      char v21 = v20;

      if ((v21 & 1) != 0) {
        goto LABEL_31;
      }
      if (!HIDWORD(v2)) {
        goto LABEL_32;
      }
      LOBYTE(v25) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v25,  3455LL,  0);
      __break(1u);
LABEL_22:
      sub_1000178B0((uint64_t)v29, (uint64_t *)&unk_100115170);
      if (!v13) {
        goto LABEL_23;
      }
    }

LABEL_31:
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = 0;
LABEL_32:
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = v2 & 0xFF000000 | 0x425355;
  }

  else
  {
LABEL_23:
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = 7567731;
    if (sub_10009B520() == 2)
    {
      int v22 = sub_10009B53C();

      if (v22 == 2) {
        int v23 = 7567731;
      }
      else {
        int v23 = 1228034925;
      }
      if (v22 == 1) {
        LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = 1835100526;
      }
      else {
        LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = v23;
      }
    }

    else
    {
    }
  }

  return v2;
}

id AUAAudioDevice.__allocating_init(deviceUID:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  id v8 = [objc_allocWithZone(v4) initWithDeviceUID:v7 withPlugin:a3];

  return v8;
}

void AUAAudioDevice.init(deviceUID:with:)()
{
}

id AUAAudioDevice.__deallocating_deinit()
{
  return sub_10001642C(0LL, (uint64_t (*)(void))type metadata accessor for AUAAudioDevice);
}

char *sub_100015C88(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  *(_DWORD *)&v6[OBJC_IVAR___AUADSPAudioDevice__transportType] = 1970496032;
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v69.receiver = v6;
  v69.super_class = (Class)type metadata accessor for AUADSPAudioDevice();
  int v13 = (char *)objc_msgSendSuper2( &v69,  "initWithDeviceUID:underlyingDevice:deviceDSPDatabase:plugin:",  v12,  a3,  a4,  a5);

  *(_DWORD *)&v13[OBJC_IVAR___AUADSPAudioDevice__transportType] = a6;
  NSString v14 = (void *)0xE000000000000000LL;
  NSString v15 = v13;
  id v16 = [v15 deviceName];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    NSString v14 = v19;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  v20._countAndFlagsBits = v18;
  v20._object = v14;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v14);
  v21._countAndFlagsBits = 1347634208LL;
  v21._object = (void *)0xE400000000000000LL;
  String.append(_:)(v21);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000LL);
  [v15 setDeviceName:v22];

  id v23 = [a3 inputStreams];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);
  }

  else
  {
    uint64_t v26 = (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t v66 = a4;
  id v68 = a3;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0) {
      uint64_t v63 = v26;
    }
    else {
      uint64_t v63 = v26 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v26);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v27 < 1)
  {
    swift_bridgeObjectRelease(v26);
  }

  else
  {
    id v28 = objc_allocWithZone(&OBJC_CLASS___ASDDSPStream);
    sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v29 = v15;
    swift_bridgeObjectRetain(v26);
    uint64_t v30 = a5;
    id v31 = a5;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    id v33 = [v28 initWithOwningDevice:v29 underlyingStreams:isa direction:1768845428 plugin:v31];

    [v33 setKeepGraphInitialized:1];
    [v33 setTerminalType:1835623282];
    [v33 setStartingChannel:1];
    unint64_t v34 = v26 & 0xC000000000000001LL;
    if ((v26 & 0xC000000000000001LL) != 0)
    {
      id v64 = v33;
      id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    }

    else
    {
      if (!*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        __break(1u);
        goto LABEL_41;
      }

      uint64_t v35 = *(void **)(v26 + 32);
      id v36 = v33;
      id v37 = v35;
    }

    uint64_t v38 = v37;
    id v39 = objc_msgSend(v37, "physicalFormats", a4);

    [v33 setPhysicalFormats:v39];
    if (v34) {
      id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    }
    else {
      id v40 = *(id *)(v26 + 32);
    }
    uint64_t v41 = v40;
    a3 = v68;
    swift_bridgeObjectRelease(v26);
    id v42 = [v41 physicalFormat];

    [v33 setPhysicalFormat:v42];
    [v29 addInputStream:v33];
  }

  id v43 = objc_msgSend(a3, "outputStreams", v66);
  if (v43)
  {
    uint64_t v44 = v43;
    uint64_t v45 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v45);
  }

  else
  {
    uint64_t v26 = (uint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_20:
LABEL_31:
      swift_bridgeObjectRelease(v26);
      int v55 = v66;
      id v59 = v68;
LABEL_34:
      uint64_t v62 = v15;
      [v62 updateDeviceDSPConfiguration];

      return v62;
    }
  }

  if (v26 < 0) {
    uint64_t v57 = v26;
  }
  else {
    uint64_t v57 = v26 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v26);
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease(v26);
  if (v58 < 1) {
    goto LABEL_31;
  }
LABEL_21:
  id v46 = objc_allocWithZone(&OBJC_CLASS___ASDDSPStream);
  sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
  uint64_t v29 = v15;
  uint64_t v30 = a5;
  id v47 = a5;
  swift_bridgeObjectRetain(v26);
  Class v48 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  id v33 = [v46 initWithOwningDevice:v29 underlyingStreams:v48 direction:1869968496 plugin:v47];

  [v33 setKeepGraphInitialized:1];
  id result = (char *)[v33 setTerminalType:1936747378];
  unint64_t v34 = v26 & 0xC000000000000001LL;
  if ((v26 & 0xC000000000000001LL) != 0)
  {
LABEL_41:
    id v65 = v33;
    id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    goto LABEL_24;
  }

  if (*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v50 = *(void **)(v26 + 32);
    id v51 = v33;
    id v52 = v50;
LABEL_24:
    uint64_t v53 = v52;
    id v54 = objc_msgSend(v52, "physicalFormats", v66);

    [v33 setPhysicalFormats:v54];
    int v55 = v67;
    a5 = v30;
    if (v34) {
      id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    }
    else {
      id v56 = *(id *)(v26 + 32);
    }
    unsigned __int8 v60 = v56;
    id v59 = v68;
    swift_bridgeObjectRelease(v26);
    id v61 = [v60 physicalFormat];

    [v33 setPhysicalFormat:v61];
    [v29 addOutputStream:v33];

    goto LABEL_34;
  }

  __break(1u);
  return result;
}

uint64_t AUADSPAudioDevice.transportType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___AUADSPAudioDevice__transportType);
}

id AUADSPAudioDevice.__allocating_init(deviceUID:underlyingDevice:deviceDSPDatabase:plugin:)( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v10 = objc_allocWithZone(v5);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = [v10 initWithDeviceUID:v11 underlyingDevice:a3 deviceDSPDatabase:a4 plugin:a5];

  return v12;
}

void AUADSPAudioDevice.init(deviceUID:underlyingDevice:deviceDSPDatabase:plugin:)()
{
}

id AUADSPAudioDevice.__deallocating_deinit(uint64_t a1)
{
  return sub_10001642C(a1, type metadata accessor for AUADSPAudioDevice);
}

id sub_10001642C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

BOOL sub_10001645C(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  int v3 = result;
  if (*(_BYTE *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    id result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000164BC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10001658C(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100017294((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100017294((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100017A40(v12);
  return v7;
}

uint64_t sub_10001658C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

      *(void *)&uint64_t v74 = 0LL;
      uint64_t v72 = 0u;
      uint64_t v73 = 0u;
      goto LABEL_23;
    }

    uint64_t v9 = v53 + 3;
    uint64_t v7 = v61 - 1;
    uint64_t v8 = v50;
    if (v61 == 1)
    {
      swift_bridgeObjectRelease(v50);
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease(v50);
LABEL_21:
  swift_bridgeObjectRelease(v27);
  unint64_t v34 = v46;
  swift_beginAccess(v46 + 96, v54, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v34 + 96);
  if (Strong)
  {
    id v36 = Strong;
    id v37 = v48 | (v49 << 16);
    uint64_t v38 = *(void *)(v34 + 104);
    id v39 = swift_getObjectType(Strong);
    *((void *)&v56 + 1) = type metadata accessor for ActiveSelectorUnit();
    *(void *)&uint64_t v57 = &protocol witness table for ActiveSelectorUnit;
    *(void *)&int v55 = v34;
    swift_retain(v34);
    id v40 = v45;
    ActiveFunction.getRawCur(forControl:onEntity:onChannel:)( v37 & 0xFFFFFF,  (uint64_t)&v55,  0LL,  v39,  v38,  (uint64_t)&v58);
    swift_unknownObjectRelease(v36, v41);
    uint64_t result = sub_100017A40(&v55);
    if (v40) {
      return result;
    }
    id v42 = sub_100008E00(&qword_100113EB8);
    if ((swift_dynamicCast(&v55, &v58, v42, &type metadata for UInt8, 6LL) & 1) != 0) {
      return v55;
    }
  }

  else
  {
    *(void *)&unsigned __int8 v60 = 0LL;
    uint64_t v58 = 0u;
    id v59 = 0u;
    sub_1000178B0((uint64_t)&v58, &qword_100114040);
  }

  id v43 = sub_10000AE14();
  id v31 = swift_allocError(&type metadata for AUAError, v43, 0LL, 0LL);
  *(_BYTE *)uint64_t v32 = 1;
  *(void *)(v32 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v32 + 16) = 0xE000000000000000LL;
  *(void *)(v32 + 24) = 0x2928727543746567LL;
  *(void *)(v32 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
  *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
  *(void *)(v32 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
  id v33 = 191LL;
LABEL_18:
  *(void *)(v32 + 56) = v33;
  return swift_willThrow(v31);
}

    v9 += 3LL;
    uint64_t v7 = v48 - 1;
    uint64_t v8 = v38;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease(v38);
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease(v38);
LABEL_20:
  swift_bridgeObjectRelease(v26);
  uint64_t v32 = v36;
  uint64_t result = sub_10001DB6C();
  if (!v32)
  {
    id v33 = result;
    unint64_t v34 = (_DWORD *)(v35[0] + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection);
    uint64_t result = swift_beginAccess( v35[0] + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection,  &v45,  1LL,  0LL);
    *unint64_t v34 = v33;
  }

  return result;
}

      sub_100017A40(&v21);
      v7 += 40LL;
      if (!--v5) {
        goto LABEL_12;
      }
    }

    uint64_t v25 = 0LL;
    id v23 = 0u;
    uint64_t v24 = 0u;
LABEL_4:
    sub_1000178B0((uint64_t)&v23, &qword_100114528);
    goto LABEL_5;
  }

  swift_bridgeObjectRetain(*(void *)(v3 + 168));
LABEL_12:
  uint64_t v25 = 0LL;
  id v23 = 0u;
  uint64_t v24 = 0u;
LABEL_13:
  swift_bridgeObjectRelease(v4);
  sub_100032E2C((uint64_t)&v23, (uint64_t)&v21);
  if (v22)
  {
    NSString v15 = sub_100008E00(&qword_100113B28);
    id v16 = sub_100008E00(&qword_100114530);
    uint64_t result = swift_dynamicCast(a2, &v21, v15, v16, 6LL);
    if ((result & 1) != 0) {
      return result;
    }
  }

  else
  {
    uint64_t result = sub_1000178B0((uint64_t)&v21, &qword_100113E98);
  }

  *(void *)(a2 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

    v7 += 10LL;
  }

  while (v7 != 60);
  swift_bridgeObjectRelease(inited);
  id v36 = v49 | (v48 << 32);
  id v37 = sub_100008E00(&qword_1001150A8);
  uint64_t v38 = swift_allocObject(v37, 44LL, 7LL);
  *(_OWORD *)(v38 + 16) = xmmword_1000D3D30;
  *(void *)(v38 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v36;
  *(_BYTE *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v50;
  *(_BYTE *)(v38 + 41) = 1;
  id v39 = *(void *)(v56 + 24);
  id v40 = v68;
  uint64_t v41 = *(_WORD *)(v56 + 32);
  id v42 = sub_100051240((uint64_t)v68);
  swift_bridgeObjectRelease(v40);
  if (v51) {
    id v43 = v51;
  }
  else {
    id v43 = 16711680;
  }
  uint64_t result = sub_1000AF324( v55,  v52,  v54,  v53,  0,  (uint64_t)v10,  v43,  v38,  (uint64_t)&v70,  0LL,  0xF000000000000000LL,  v39,  v41,  (uint64_t)v42);
  uint64_t v44 = v75;
  uint64_t v45 = v57;
  *(_OWORD *)(v57 + 64) = v74;
  *(_OWORD *)(v45 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v44;
  *(void *)(v45 + 96) = v76;
  id v46 = v71;
  *(_OWORD *)uint64_t v45 = v70;
  *(_OWORD *)(v45 + 16) = v46;
  id v47 = v73;
  *(_OWORD *)(v45 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v72;
  *(_OWORD *)(v45 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v47;
  return result;
}

    v10 += 10LL;
  }

  while (v10 != 50);
  swift_bridgeObjectRelease(inited);
  uint64_t v38 = HIBYTE(HIDWORD(v51));
  id v39 = HIBYTE(v52);
  id v40 = BYTE3(v52);
  uint64_t v41 = BYTE4(v51);
  id v42 = WORD2(v52);
  id v43 = v73;
  uint64_t v44 = BYTE6(v52);
  uint64_t v45 = sub_100051240((uint64_t)v73);
  swift_bridgeObjectRelease(v43);
  if (v38) {
    id v46 = v38;
  }
  else {
    id v46 = 16711680;
  }
  uint64_t result = sub_1000AF4A4(v40, v41, v39, v42, v44, 0, v46, (uint64_t)v62, (uint64_t)&v67, v54, v53, (uint64_t)v45);
  id v47 = v70;
  Class v48 = v55;
  v55[2] = v69;
  v48[3] = v47;
  uint64_t v49 = v72;
  v48[4] = v71;
  v48[5] = v49;
  uint64_t v50 = v68;
  os_log_s *v48 = v67;
  v48[1] = v50;
  return result;
}

    v4 += 8LL;
  }

  while (v4 != 24);
  swift_bridgeObjectRelease(inited);
  uint64_t v17 = *(unsigned __int8 *)(v1 + 10);
  uint64_t v18 = *(unsigned __int8 *)(v1 + 5) | ((unint64_t)*(unsigned int *)(v1 + 6) << 32);
  uint64_t v19 = *(unsigned __int8 *)(v31 + 3);
  Swift::String v20 = *(void *)(v31 + 32);
  Swift::String v21 = *(void *)(v31 + 40);
  uint64_t v29 = *(void *)(v31 + 16);
  NSString v22 = (uint64_t)v36;
  id v23 = *(_WORD *)(v31 + 24);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  uint64_t v24 = sub_100051240(v22);
  swift_bridgeObjectRelease(v22);
  if (v30) {
    uint64_t v25 = v30;
  }
  else {
    uint64_t v25 = 16711680;
  }
  sub_1000AF59C(v19, v18, v17 | 0x100, v20, v21, (uint64_t)v6, v25, v29, (uint64_t)v34, v23, (uint64_t)v24);
  uint64_t v26 = v34[3];
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v34[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v26;
  *(_OWORD *)(a1 + 64) = v34[4];
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v35;
  uint64_t result = *(double *)v34;
  id v28 = v34[1];
  *(_OWORD *)a1 = v34[0];
  *(_OWORD *)(a1 + 16) = v28;
  return result;
}

    v6 += 8LL;
  }

  while (v6 != 32);
  swift_bridgeObjectRelease(inited);
  uint64_t v35 = *(unsigned __int8 *)(v47 + 3);
  id v36 = *(void *)(v47 + 32);
  id v37 = *(void *)(v47 + 16);
  uint64_t v38 = (uint64_t)v58;
  id v39 = *(_WORD *)(v47 + 24);
  sub_10004AAF8(v47);
  id v40 = sub_100051240(v38);
  swift_bridgeObjectRelease(v38);
  if (v66) {
    uint64_t v41 = v66;
  }
  else {
    uint64_t v41 = 16711680;
  }
  uint64_t result = sub_1000AF8DC(v35, 0LL, v36, 0LL, 0LL, 0, (uint64_t)v7, v41, (uint64_t)&v60, v37, v39, (uint64_t)v40);
  id v42 = v63;
  id v43 = v64;
  uint64_t v44 = v61;
  uint64_t v45 = v48;
  v48[2] = v62;
  v45[3] = v42;
  id v46 = v65;
  v45[4] = v43;
  v45[5] = v46;
  *uint64_t v45 = v60;
  v45[1] = v44;
  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = &v3[v8 + 4];
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

  NSString v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v9 = (char *)v3 + 3 * v8 + 32;
  memcpy(v9, (const void *)(a1 + 32), 3 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    *uint64_t v1 = v3;
    return result;
  }

  NSString v11 = v3[2];
  uint64_t v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  uint64_t v8 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v9 = (void *)(v4 + v8 + 32);
  memcpy(v9, (const void *)(a1 + 32), v3);
  if (!v3)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease(a1);
    void *v2 = v4;
    return result;
  }

  NSString v11 = *(void *)(v4 + 16);
  uint64_t v12 = __OFADD__(v11, v3);
  uint64_t v13 = v11 + v3;
  if (!v12)
  {
    *(void *)(v4 + 16) = v13;
    goto LABEL_16;
  }

    *(_WORD *)(v27[7] + 2 * v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
LABEL_6:
    NSString v11 = v32;
    uint64_t v13 = *v32;
    *uint64_t v32 = v27;
    swift_bridgeObjectRelease(v13);
    swift_endAccess(v35);
    int v3 = v33;
LABEL_7:
    v12 += 24;
    if (!--v9)
    {

      swift_bridgeObjectRelease(v31);
      return;
    }
  }

  sub_1000963C0(v23, isUniquelyReferenced_nonNull_native);
  uint64_t v25 = sub_100016BC0(v3);
  if ((v24 & 1) != (v26 & 1)) {
    goto LABEL_33;
  }
  Swift::String v20 = v25;
  uint64_t v27 = v37;
  if ((v24 & 1) != 0) {
    goto LABEL_5;
  }
LABEL_23:
  v27[(v20 >> 6) + 8] |= 1LL << v20;
  *(void *)(v27[6] + 8 * v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v3;
  *(_WORD *)(v27[7] + 2 * v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
  id v28 = v27[2];
  uint64_t v29 = __OFADD__(v28, 1LL);
  uint64_t v30 = v28 + 1;
  if (!v29)
  {
    v27[2] = v30;
    goto LABEL_6;
  }

  __break(1u);
LABEL_33:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
  __break(1u);
}

    v10 += 3LL;
    uint64_t v9 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease_n(v8, 2LL);
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v8);
LABEL_18:
  swift_bridgeObjectRelease(v8);
  uint64_t result = swift_bridgeObjectRelease(v27);
  uint64_t v30 = a1 * 256.0;
  id v31 = v41;
  if ((~COERCE_INT(a1 * 256.0) & 0x7F800000) == 0) {
    goto LABEL_27;
  }
  if (v30 > -32769.0)
  {
    if (v30 >= 32768.0) {
      goto LABEL_29;
    }
    swift_beginAccess(v41 + 16, v49, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v31 + 16);
    if (Strong)
    {
      unint64_t v34 = Strong;
      uint64_t v35 = v43 | (v44 << 16);
      id v36 = *(void *)(v31 + 24);
      id v37 = swift_getObjectType(Strong);
      *((void *)&v51 + 1) = type metadata accessor for ActiveFeatureUnit();
      *(void *)&id v52 = &protocol witness table for ActiveFeatureUnit;
      *(void *)&uint64_t v50 = v31;
      swift_retain(v31);
      sub_10002C7D0(v35 & 0xFFFFFF, v40, 0, &v50, (unsigned __int16)(int)v30, v37, v36);
      swift_unknownObjectRelease(v34, v38);
      sub_100017A40(&v50);
    }

    *(float *)&id v33 = a1;
    [v39 setDecibelValue:v33];
    return 1LL;
  }

    v7 += 3LL;
    uint64_t v5 = v45 - 1;
    uint64_t v6 = v42;
    if (v45 == 1)
    {
      swift_bridgeObjectRelease(v42);
      id v28 = 0;
      return v28 & 1;
    }
  }

  swift_bridgeObjectRelease(v42);
LABEL_19:
  swift_bridgeObjectRelease(v25);
  uint64_t v29 = v38;
  swift_beginAccess(v38 + 16, &v49, 0LL, 0LL);
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    id v31 = *(void *)(v29 + 24);
    uint64_t v32 = swift_getObjectType(v30);
    id v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 16);
    swift_unknownObjectRetain(v30);
    unint64_t v34 = (char *)v33(v32, v31);
    swift_unknownObjectRelease(v30, v35);
    if (v34)
    {
      id v36 = *(void *)&v34[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v36)
      {
        id v37 = sub_10001645C(7LL, v36);

        id v28 = !v37;
        return v28 & 1;
      }
    }
  }

  id v28 = 1;
  return v28 & 1;
}

    uint64_t v9 = (uint64_t)(v111 + 3);
    uint64_t v7 = v112 - 1;
    uint64_t v8 = (uint64_t)v108;
    if (v112 == (char *)1)
    {
      swift_bridgeObjectRelease(v108);
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease(v108);
LABEL_21:
  swift_bridgeObjectRelease(v25);
  id v31 = v102;
  swift_beginAccess(v102 + 16, v114, 0LL, 0LL);
  uint64_t v0 = *((void *)v31 + 2);
  if (!v0)
  {
    uint64_t v41 = sub_10000AE14();
    uint64_t v27 = swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
    *(_BYTE *)id v28 = 61;
    *(void *)(v28 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v28 + 16) = 0xE000000000000000LL;
    *(void *)(v28 + 24) = 0xD00000000000001BLL;
    *(void *)(v28 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D3910LL;
    *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000028LL;
    *(void *)(v28 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D2560LL;
    uint64_t v29 = 123LL;
    goto LABEL_18;
  }

  uint64_t v32 = v106 | ((_DWORD)v107 << 16);
  id v33 = *((void *)v31 + 3);
  unint64_t v34 = swift_getObjectType(*((void *)v31 + 2));
  uint64_t v35 = *(uint64_t (**)(void, _BYTE *, uint64_t, uint64_t))(v33 + 152);
  swift_unknownObjectRetain(v0);
  id v36 = v101;
  id v37 = v35(v32 & 0xFFFFFF, v31, v34, v33);
  id v39 = v38;
  swift_unknownObjectRelease(v0, v38);
  if (v36) {
    return v0;
  }
  id v40 = v39;
  ADCControlRequestParameterBlock.getCur()(v40, v37 & 0x1FF, (uint64_t)&v115);
  id v107 = v40;

  id v42 = *((void *)&v116 + 1);
  id v43 = v117;
  uint64_t v44 = sub_1000178EC(&v115, *((uint64_t *)&v116 + 1));
  uint64_t v109 = v98;
  uint64_t v45 = *(__int128 **)(v42 - 8);
  id v46 = (_BYTE *)*((void *)v45 + 8);
  __chkstk_darwin(v44);
  id v47 = (unint64_t)(v46 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  Class v48 = (char *)*((void *)v45 + 2);
  ((void (*)(_BYTE *))v48)(&v98[-v47]);
  uint64_t v49 = *(void *)(v43 + 8);
  uint64_t v50 = dispatch thunk of static BinaryInteger.isSigned.getter(v42, v49);
  id v51 = v50;
  uint64_t v108 = v98;
  id v110 = v46;
  uint64_t ObjectType = v42;
  __chkstk_darwin(v50);
  id v52 = &v98[-v47];
  uint64_t v111 = &v98[-v47];
  uint64_t v112 = v48;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v48)(&v98[-v47], &v98[-v47], ObjectType);
  id v105 = v45;
  if ((v51 & 1) == 0)
  {
    int v14 = *((void *)v45 + 1);
    ((void (*)(_BYTE *, uint64_t))v14)(v52, ObjectType);
    goto LABEL_31;
  }

  uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v49);
  int v14 = *((void *)v45 + 1);
  id v54 = ((uint64_t (*)(_BYTE *, uint64_t))v14)(v52, ObjectType);
  if (v53 <= 64)
  {
LABEL_31:
    uint64_t v13 = (_BYTE *)v49;
    uint64_t v18 = v110;
    id v59 = v111;
    goto LABEL_47;
  }

  uint64_t v18 = v110;
  __chkstk_darwin(v54);
  id v16 = &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v112)(v16, v111, ObjectType);
  uint64_t v118 = 0x8000000000000000LL;
  int v55 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v49);
  uint64_t v13 = (_BYTE *)v49;
  uint64_t v104 = (unint64_t)v98;
  if ((v55 & 1) == 0) {
    goto LABEL_33;
  }
  id v56 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v49);
  if (v56 < 64)
  {
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v49);
    ((void (*)(_BYTE *, uint64_t))v14)( &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  ObjectType);
    uint64_t v58 = v57 < v118;
    id v59 = v111;
    goto LABEL_43;
  }

  unint64_t v106 = (void (*)(unint64_t, uint64_t))v98;
  __chkstk_darwin(v56);
  uint64_t v67 = sub_10001CDF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v118, &type metadata for Int, v67, ObjectType, v49);
  id v68 = dispatch thunk of static Comparable.< infix(_:_:)( &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  ObjectType,  *(void *)(*(void *)(v49 + 32) + 8LL));
  ((void (*)(_BYTE *, uint64_t))v14)(&v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)], ObjectType);
  ((void (*)(_BYTE *, uint64_t))v14)(&v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)], ObjectType);
  uint64_t v66 = (uint64_t *)v106;
  id v59 = v111;
  if ((v68 & 1) != 0)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    ((void (*)(void, uint64_t))v14)(*(v66 - 32), ObjectType);
  }

uint64_t sub_100016744(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000167D8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1000169B0(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000169B0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000167D8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_10001694C(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_10001694C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100008E00(&qword_100113B48);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1000169B0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100113B48);
    NSString v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + swift_unknownObjectWeakDestroy(v0 + 2) = v8;
    *((void *)v11 + swift_unknownObjectWeakDestroy(v0 + 3) = 2 * v12 - 64;
  }

  else
  {
    NSString v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

unint64_t sub_100016AFC(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100016C70(a1, a2, v5);
}

unint64_t sub_100016B60(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100016D50(a1, v4);
}

unint64_t sub_100016B90(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100016E58(a1, v4);
}

unint64_t sub_100016BC0(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100016F1C(a1, v3);
}

unint64_t sub_100016BF0(unsigned int a1)
{
  __int16 v2 = a1;
  unsigned int v3 = a1 >> 8;
  Hasher.init(_seed:)(v6, *(void *)(v1 + 40));
  Hasher._combine(_:)(word_1000D5D94[(char)v2]);
  Hasher._combine(_:)(word_1000D5DDA[(char)v3]);
  Swift::Int v4 = Hasher._finalize()();
  return sub_100016FB8(v2, v4);
}

unint64_t sub_100016C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100016D50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    type metadata accessor for AUAStream(0LL);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_100016E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000179D0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100017260((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_100016F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100016FB8(__int16 a1, uint64_t a2)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    char v6 = HIBYTE(a1);
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    int v9 = word_1000D5D94[(char)a1];
    do
    {
      if (word_1000D5D94[*(char *)(v8 + 2 * result)] == v9
        && word_1000D5DDA[*(char *)(v8 + 2 * result + 1)] == word_1000D5DDA[v6])
      {
        break;
      }

      unint64_t result = (result + 1) & v7;
    }

    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0);
  }

  return result;
}

uint64_t sub_100017068@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = result;
    uint64_t v6 = a2[1];
    uint64_t v7 = (uint64_t *)(result + 24);
    swift_beginAccess(result + 24, v14, 33LL, 0LL);
    uint64_t v8 = *(void **)(v4 + 24);
    swift_retain(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *(void *)(v4 + 24) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_10004F1B0(0LL, v8[2] + 1LL, 1, v8);
      *uint64_t v7 = (uint64_t)v8;
    }

    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_10004F1B0((void *)(v10 > 1), v11 + 1, 1, v8);
      *uint64_t v7 = (uint64_t)v8;
    }

    v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    v12[4] = v3;
    void v12[5] = v6;
    uint64_t v13 = *v7;
    unint64_t result = swift_endAccess(v14);
    *a3 = *(void *)(v13 + 16) == 1LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100017174@<X0>(BOOL *a1@<X8>)
{
  return sub_100017068(*(void *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

uint64_t sub_10001718C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10001719C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000171C0()
{
  return sub_100011A2C(*(void *)(v0 + 16));
}

uint64_t sub_1000171C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000171D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for AUAAudioDevice(uint64_t a1)
{
  return sub_10001736C(a1, (uint64_t *)&unk_100113AC8, (uint64_t)&nominal type descriptor for AUAAudioDevice);
}

uint64_t sub_1000171F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100017218()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100017238()
{
}

uint64_t sub_100017260(uint64_t a1)
{
  return a1;
}

uint64_t sub_100017294(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for AUADSPAudioDevice()
{
  return objc_opt_self(&OBJC_CLASS___AUADSPAudioDevice);
}

uint64_t sub_1000172F4(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 2LL, v2, a1 + 88);
}

uint64_t type metadata accessor for ThreadSafeFifo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100017AD4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ThreadSafeFifo);
}

uint64_t sub_100017350()
{
  return type metadata accessor for AUASampleManager(0LL);
}

uint64_t type metadata accessor for AUASampleManager(uint64_t a1)
{
  return sub_10001736C(a1, qword_100113730, (uint64_t)&nominal type descriptor for AUASampleManager);
}

uint64_t sub_10001736C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_1000173A0(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = &unk_1000D5CD0;
  v4[13] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[14] = *(void *)(result - 8) + 64LL;
    return swift_updateClassMetadata2(a1, 256LL, 15LL, v4, a1 + 80);
  }

  return result;
}

uint64_t type metadata accessor for USBFrameTimeCorrelaterSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore29USBFrameTimeCorrelaterSession);
}

uint64_t sub_100017478()
{
  return type metadata accessor for AUAAudioDevice(0LL);
}

uint64_t sub_100017480(uint64_t a1)
{
  v4[0] = &unk_1000D5D30;
  v4[1] = &unk_1000D5D48;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[11] = &unk_1000D5D48;
  v4[14] = &unk_1000D5D60;
  void v4[15] = &unk_1000D5D60;
  v4[12] = &unk_1000D5D60;
  v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[17] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[18] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[19] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[20] = *(void *)(result - 8) + 64LL;
    return swift_updateClassMetadata2(a1, 256LL, 21LL, v4, a1 + 80);
  }

  return result;
}

unint64_t sub_100017564()
{
  unint64_t result = qword_100113B10;
  if (!qword_100113B10)
  {
    uint64_t v1 = sub_1000175B0(&qword_100113B08);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100113B10);
  }

  return result;
}

uint64_t sub_1000175B0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000175F4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void *sub_100017618()
{
  return sub_10000DDD4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100017624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_beginAccess(a1 + 24, v8, 33LL, 0LL);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5[2])
  {
    uint64_t v7 = v5[4];
    uint64_t v6 = v5[5];
    swift_retain(v6);
    sub_10009B3B0(0LL, 1LL);
    uint64_t result = swift_endAccess(v8);
    *a2 = v7;
    a2[1] = v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000176B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4[2])
  {
    uint64_t v5 = v4[4];
    uint64_t result = swift_retain(v4[5]);
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t result = 0LL;
  }

  *a2 = v5;
  a2[1] = result;
  return result;
}

uint64_t sub_100017720(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unknownObjectWeakInit(v1 + 16, 0LL);
  swift_unknownObjectWeakInit(v1 + 24, 0LL);
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
  *(_OWORD *)(v1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
  *(_OWORD *)(v1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
  *(void *)(v1 + 96) = _swiftEmptyArrayStorage;
  uint64_t v7 = sub_100008E00(&qword_100112958);
  uint64_t v8 = swift_allocObject(v7, 20LL, 7LL);
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v1 + 104) = v8;
  *(_BYTE *)(v1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = 0;
  *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
  if (qword_1001128E0 != -1) {
    swift_once(&qword_1001128E0, sub_10000B9B8);
  }
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v10 = sub_100008EC4(v9, (uint64_t)qword_1001171B8);
  uint64_t v11 = OSSignposter.logHandle.getter(v10);
  OSSignpostID.init(log:)(v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v1 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID,  v6,  v3);
  swift_unknownObjectWeakAssign(v1 + 16, a1);
  return v1;
}

uint64_t sub_100017868(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00((uint64_t *)&unk_100115170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000178B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008E00(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

void *sub_1000178EC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_100017910(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100017954()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100017978(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_100017988()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000179AC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1000179B8@<X0>(unint64_t *a1@<X8>)
{
  return sub_10000C768(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000179D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100017A0C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_100017A28()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_100017A40(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100017A64@<X0>(void *a1@<X8>)
{
  return sub_1000176B0(v1, a1);
}

uint64_t sub_100017A7C@<X0>(void *a1@<X8>)
{
  return sub_100017624(v1, a1);
}

uint64_t *sub_100017A94(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100017AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

unint64_t sub_100017B38(uint64_t a1)
{
  if ((a1 & 1) != 0) {
    return 0LL;
  }
  unsigned __int8 v1 = BYTE1(a1) - 1;
  if ((a1 & 2) != 0) {
    return (unsigned __int16)(BYTE4(a1) | (v1 << 8)) | ((unint64_t)BYTE3(a1) << 16);
  }
  if ((a1 & 0xFF0000000000LL) != 0) {
    return BYTE5(a1);
  }
  return (unsigned __int16)(BYTE4(a1) | (v1 << 8)) | ((unint64_t)BYTE3(a1) << 16);
}

void sub_100017BD0(unsigned int a1, uint64_t a2)
{
  uint64_t v60 = 0LL;
  int v6 = a1 & 0xFFFFFF;
  uint64_t v7 = USBDescriptorControl.pbLayout()();
  unsigned int v8 = v7;
  __int16 v9 = sub_10007A234(v7, 4LL);
  if (!v3)
  {
    __int16 v11 = v9;
    id v12 = v10;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
    if (!Strong)
    {
      unint64_t v26 = sub_10000AE14();
      uint64_t v27 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
      *(_BYTE *)uint64_t v28 = 7;
      *(void *)(v28 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v28 + 16) = 0xE000000000000000LL;
      *(void *)(v28 + 24) = 0xD000000000000031LL;
      *(void *)(v28 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
      *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v28 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
      *(void *)(v28 + 56) = 65LL;
      swift_willThrow(v27);
      goto LABEL_11;
    }

    BOOL v14 = (void *)Strong;
    uint64_t v15 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v15 && sub_10001645C(7LL, v15))
    {
      unint64_t v16 = sub_10000AE14();
      uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
      *(_BYTE *)uint64_t v18 = 108;
      *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v18 + 16) = 0xE000000000000000LL;
      *(void *)(v18 + 24) = 0xD000000000000031LL;
      *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
      *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
      *(void *)(v18 + 56) = 68LL;
      swift_willThrow(v17);

LABEL_11:
      return;
    }

    unsigned int v57 = v6;
    id v59 = v14;
    unsigned int v58 = v8;
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = 1LL;
    unsigned int v21 = a1 >> 8;
    while (1)
    {
      uint64_t v24 = v12;
      unsigned __int8 v25 = *(_BYTE *)(v19 + 2);
      id v12 = v12;
      sub_1000B6284(1u, 1, 1, v21, 0LL, 0LL, v25, v24, (uint64_t)&v60);

      if (v20 == 4) {
        break;
      }
      if (__OFADD__(v20++, 1LL))
      {
        __break(1u);
        goto LABEL_27;
      }
    }

    uint64_t v56 = v60;
    id v29 = v12;
    uint64_t v30 = NSData.startIndex.getter(v29);
    uint64_t v31 = NSData.endIndex.getter();
    uint64_t v32 = NSData.startIndex.getter(v31);
    uint64_t v33 = NSData.endIndex.getter();
    if (v30 < v32 || v33 < v30)
    {
      __break(1u);
    }

    else
    {
      uint64_t v34 = NSData.startIndex.getter(v33);
      uint64_t v35 = NSData.endIndex.getter();

      if (v31 >= v34 && v35 >= v31)
      {
        if (!__OFSUB__(v31, v30))
        {
          if (v31 - v30 < v56)
          {
            unint64_t v36 = sub_10000AE14();
            uint64_t v37 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
            *(_BYTE *)uint64_t v38 = 28;
            *(void *)(v38 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v38 + 16) = 0xE000000000000000LL;
            *(void *)(v38 + 24) = 0xD000000000000031LL;
            *(void *)(v38 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
            *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
            *(void *)(v38 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
            *(void *)(v38 + 56) = 106LL;
            swift_willThrow(v37);

            return;
          }

          if ((v11 & 0x100) != 0) {
            __int16 v39 = 256;
          }
          else {
            __int16 v39 = 0;
          }
          id v40 = v29;
          unsigned __int8 v41 = sub_1000676D4(v39 & 0xFF00u | v11, v40);

          if (v41 < 5u) {
            goto LABEL_33;
          }
          sub_10007A234(v58, v41);
          id v43 = v42;

          __int16 v44 = sub_10007BFBC(v57);
          unsigned __int8 v45 = *(_BYTE *)(v19 + 2);
          id v12 = v43;
          sub_1000B6284(1u, 1, 1, v44, 0LL, 0LL, v45, v43, (uint64_t)&v60);
LABEL_27:
          uint64_t v46 = v60;
          uint64_t v47 = NSData.startIndex.getter(v22);
          uint64_t v48 = NSData.endIndex.getter();
          uint64_t v49 = NSData.startIndex.getter(v48);
          uint64_t v50 = NSData.endIndex.getter();
          if (v47 < v49 || v50 < v47)
          {
            __break(1u);
          }

          else
          {
            uint64_t v51 = NSData.startIndex.getter(v50);
            uint64_t v52 = NSData.endIndex.getter();

            if (v48 >= v51 && v52 >= v48)
            {
              if (!__OFSUB__(v48, v47))
              {
                if (v46 != v48 - v47)
                {
                  unint64_t v53 = sub_10000AE14();
                  uint64_t v54 = swift_allocError(&type metadata for AUAError, v53, 0LL, 0LL);
                  *(_BYTE *)uint64_t v55 = 28;
                  *(void *)(v55 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v55 + 16) = 0xE000000000000000LL;
                  *(void *)(v55 + 24) = 0xD000000000000031LL;
                  *(void *)(v55 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
                  *(void *)(v55 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
                  *(void *)(v55 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
                  *(void *)(v55 + 56) = 120LL;
                  swift_willThrow(v54);

                  goto LABEL_11;
                }

void sub_100018278(int a1, uint64_t a2)
{
  uint64_t v28 = 0LL;
  unsigned int v5 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v6 = USBDescriptorControl.pbLayout()();
  sub_100079084(v6);
  if (v3) {
    return;
  }
  unsigned int v8 = v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
  if (!Strong)
  {
    unint64_t v14 = sub_10000AE14();
    uint64_t v15 = swift_allocError(&type metadata for AUAError, v14, 0LL, 0LL);
    *(_BYTE *)uint64_t v16 = 7;
    *(void *)(v16 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v16 + 16) = 0xE000000000000000LL;
    *(void *)(v16 + 24) = 0xD000000000000032LL;
    *(void *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE10LL;
    *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    *(void *)(v16 + 56) = 131LL;
    swift_willThrow(v15);

    return;
  }

  uint64_t v10 = (void *)Strong;
  __int16 v11 = sub_10007BFBC(v5);
  unsigned __int8 v12 = *(_BYTE *)(*(void *)(a2 + 32) + 2LL);
  id v13 = v8;
  sub_1000B6284(1u, 1, 1, v11, 0LL, 0LL, v12, v8, (uint64_t)&v28);

  uint64_t v27 = v28;
  id v17 = v13;
  uint64_t v18 = NSData.startIndex.getter(v17);
  uint64_t v19 = NSData.endIndex.getter();
  uint64_t v20 = NSData.startIndex.getter(v19);
  uint64_t v21 = NSData.endIndex.getter();
  if (v18 < v20 || v21 < v18)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  uint64_t v22 = NSData.startIndex.getter(v21);
  uint64_t v23 = NSData.endIndex.getter();

  if (v19 < v22 || v23 < v19) {
    goto LABEL_15;
  }
  if (__OFSUB__(v19, v18)) {
    goto LABEL_16;
  }
  if (v19 - v18 < v27)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v25 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v26 = 28;
    *(void *)(v26 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v26 + 16) = 0xE000000000000000LL;
    *(void *)(v26 + 24) = 0xD000000000000032LL;
    *(void *)(v26 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE10LL;
    *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v26 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    *(void *)(v26 + 56) = 141LL;
    swift_willThrow(v25);
  }
}

uint64_t sub_100018528(unsigned int a1, uint64_t a2)
{
  int v3 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v3 == 51)
  {
    sub_100017BD0(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }

  else
  {
    if (v3 != 52)
    {
      unint64_t v6 = sub_10000AE14();
      uint64_t v7 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
      *(_BYTE *)uint64_t v8 = 28;
      *(void *)(v8 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v8 + 16) = 0xE000000000000000LL;
      *(void *)(v8 + 24) = 0xD000000000000021LL;
      *(void *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDDE0LL;
      *(void *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
      *(void *)(v8 + 56) = 157LL;
      swift_willThrow(v7);
      return v5;
    }

    sub_100018278(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }

  return v5;
}

uint64_t sub_100018608()
{
  __int128 v1 = *(_OWORD *)(v0 + 160);
  v7[8] = *(_OWORD *)(v0 + 144);
  void v7[9] = v1;
  uint64_t v8 = *(void *)(v0 + 176);
  __int128 v2 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  void v7[5] = v2;
  __int128 v3 = *(_OWORD *)(v0 + 128);
  v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v3;
  __int128 v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  __int128 v5 = *(_OWORD *)(v0 + 64);
  v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v5;
  sub_100019D7C(v7);
  swift_unknownObjectWeakDestroy(v0 + 184);
  swift_release(*(void *)(v0 + 192));
  swift_bridgeObjectRelease(*(void *)(v0 + 200));
  swift_bridgeObjectRelease(*(void *)(v0 + 208));

  sub_1000178B0(v0 + 224, &qword_100113CC0);
  return swift_deallocClassInstance(v0, 241LL, 7LL);
}

uint64_t type metadata accessor for ADC2Function()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore12ADC2Function);
}

uint64_t sub_1000186C0@<X0>(uint64_t a1@<X8>)
{
  return sub_100019D04(v1 + 16, a1);
}

uint64_t sub_1000186CC()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 184);
}

uint64_t sub_1000186D4()
{
  return swift_retain(*(void *)(v0 + 192));
}

uint64_t sub_1000186DC()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 200));
}

uint64_t sub_1000186E4()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 208));
}

void *sub_1000186EC()
{
  uint64_t v1 = *(void **)(v0 + 216);
  id v2 = v1;
  return v1;
}

void sub_10001872C(uint64_t a1)
{
  __int128 v3 = *(void **)(v1 + 216);
  *(void *)(v1 + 216) = a1;
}

void *sub_100018770(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_1000187B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 224;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100019CBC(v3, a1);
}

uint64_t sub_1000187F8(uint64_t a1)
{
  uint64_t v3 = v1 + 224;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100019C74(a1, v3);
  return swift_endAccess(v5);
}

void *sub_100018848(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_100018884()
{
  return 3LL;
}

unint64_t sub_10001888C(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_100019B90(a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_1000188B4(int a1, uint64_t a2)
{
  return sub_100018528(a1 & 0xFFFFFF, a2) & 0x1FF;
}

uint64_t sub_1000188E0(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else if (a1 == 2)
  {
    return 1LL;
  }

  else
  {
    return 2 * (a1 != 1);
  }

  return result;
}

uint64_t sub_100018960(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else if (a1 == 2)
  {
    return 1LL;
  }

  else
  {
    return 16 * (a1 != 1);
  }

  return result;
}

uint64_t sub_1000189E0(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else
  {
    else {
      unsigned int v1 = 3;
    }
    else {
      return v1;
    }
  }

  return result;
}

void sub_100018A60(void *a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  unint64_t v6 = v3;
  uint64_t v135 = a3;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t ObjectType = (uint64_t *)((char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v132 = a1[2];
  if (!v132)
  {
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
    goto LABEL_161;
  }

  uint64_t v13 = a1[4];
  unsigned int v14 = *((unsigned __int16 *)a1 + 20);
  sub_10007BFC4(v13, *((_WORD *)a1 + 20));
  if (v3) {
    return;
  }
  unsigned int v129 = v14;
  id v131 = (void *)v13;
  if (v15[2] != a2)
  {
    unint64_t v17 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 75;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 216LL;
    goto LABEL_149;
  }

  if (!v15[3])
  {
    unint64_t v21 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v21, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 74;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 217LL;
    goto LABEL_149;
  }

  if (v15[5] != 1)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 72;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 218LL;
    goto LABEL_149;
  }

  if (v15[6] != 2)
  {
    unint64_t v23 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 73;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 219LL;
    goto LABEL_149;
  }

  if (v15[7] != 32)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 76;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 220LL;
    goto LABEL_149;
  }

  uint64_t v122 = ObjectType;
  uint64_t v115 = v10;
  uint64_t v116 = v9;
  uint64_t v102 = v15;
  uint64_t v104 = v15[4];
  uint64_t v158 = &_swiftEmptySetSingleton;
  unint64_t v159 = &_swiftEmptySetSingleton;
  uint64_t v112 = &v140;
  swift_bridgeObjectRetain(a1);
  id v126 = 0LL;
  uint64_t v127 = 0LL;
  int v114 = 0;
  uint64_t wMaxPacketSize_high = 0LL;
  uint64_t wMaxPacketSize_low = 0LL;
  unint64_t v106 = 0LL;
  uint64_t bmAttributes = 0LL;
  uint64_t v128 = 0LL;
  objc_super v133 = 0LL;
  int v110 = 0;
  unint64_t v5 = 0LL;
  uint64_t v123 = -(uint64_t)v132;
  id v105 = a1;
  id v113 = (char *)a1 + 41;
  int v119 = 65280;
  __int128 v103 = xmmword_1000D3D40;
  uint64_t ObjectType = _swiftEmptyArrayStorage;
  unint64_t v161 = _swiftEmptyArrayStorage;
  uint64_t v111 = _swiftEmptyArrayStorage;
  uint64_t v121 = 0LL;
  uint64_t v16 = v135;
  a1 = v131;
  uint64_t v4 = v129;
  while (2)
  {
    uint64_t v10 = (uint64_t)v16;
    int v120 = v114 & 1;
    unint64_t v25 = v132;
    uint64_t v26 = v133;
    if (v5 > v132) {
      unint64_t v25 = v5;
    }
    uint64_t v124 = -(uint64_t)v25;
    uint64_t v27 = &v113[16 * v5++];
    while (1)
    {
      objc_super v133 = v26;
      if (v124 + v5 == 1) {
        goto LABEL_157;
      }
      int v28 = *v27;
      __int16 v29 = *(v27 - 1) | (unsigned __int16)((_WORD)v28 << 8);
      uint64_t v134 = *(const IOUSBEndpointDescriptor **)(v27 - 9);
      if ((_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v134, v29) & 1) != 0)
      {
        uint64_t v16 = (_OWORD *)v10;
        goto LABEL_15;
      }

      if (v28 != 17) {
        break;
      }
      uint64_t v130 = (void *)v5;
      uint64_t v30 = v6;
      if (v133)
      {
        unint64_t v6 = v159;
        a1 = (void *)v159[2];
        if (a1)
        {
          uint64_t v125 = ObjectType;
          uint64_t v31 = sub_100008E00(&qword_100113CC8);
          uint64_t v32 = (void *)swift_allocObject(v31, a1 + 4, 7LL);
          size_t v33 = j__malloc_size(v32);
          v32[2] = a1;
          v32[3] = 2 * v33 - 64;
          uint64_t v34 = sub_100053440(&v139, (_BYTE *)v32 + 32, (uint64_t)a1, (uint64_t)v6);
          unint64_t v5 = *((void *)&v139 + 1);
          uint64_t v4 = v139;
          LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v140;
          uint64_t ObjectType = (void *)*((void *)&v140 + 1);
          uint64_t v117 = v141;
          uint64_t v118 = v34;
          swift_bridgeObjectRetain_n(v6, 2LL);
          sub_100019E94(v4);
          if (v118 != a1) {
            goto LABEL_160;
          }
          swift_bridgeObjectRelease(v6);
          uint64_t v30 = v121;
          uint64_t v10 = (uint64_t)v135;
          uint64_t ObjectType = v125;
          uint64_t v4 = v129;
          if (!v32[2])
          {
LABEL_27:
            swift_release(v32);
            uint64_t v32 = 0LL;
          }
        }

        else
        {
          uint64_t v32 = _swiftEmptyArrayStorage;
          if (!_swiftEmptyArrayStorage[2]) {
            goto LABEL_27;
          }
        }

        if (!v161[2])
        {
          swift_bridgeObjectRelease(v161);
          unint64_t v161 = 0LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(ObjectType) & 1) == 0) {
          uint64_t ObjectType = sub_10004F3F4(0LL, ObjectType[2] + 1LL, 1, ObjectType);
        }
        unint64_t v36 = ObjectType[2];
        unint64_t v35 = ObjectType[3];
        if (v36 >= v35 >> 1) {
          uint64_t ObjectType = sub_10004F3F4((void *)(v35 > 1), v36 + 1, 1, ObjectType);
        }
        ObjectType[2] = v36 + 1;
        uint64_t v37 = &ObjectType[10 * v36];
        uint64_t v38 = v127;
        v37[4] = v133;
        v37[5] = v38;
        v37[6] = v128;
        *((_WORD *)v37 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 256;
        *((_BYTE *)v37 + 64) = v120;
        v37[9] = v126;
        *((_WORD *)v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
        v37[11] = v161;
        v37[12] = 0LL;
        v37[13] = v32;
        a1 = v131;
        goto LABEL_36;
      }

      swift_bridgeObjectRelease(v161);
LABEL_36:
      uint64_t v26 = v134;
      BOOL v39 = IOUSBGetEndpointDirection(v134) == 1 && v26->wMaxPacketSize < 9u;
      if (IOUSBGetEndpointType(v26) != 1)
      {
        sub_1000516F0(&v139, 54LL);
        uint64_t v26 = v134;
      }

      if (!v39 && !IOUSBGetEndpointSynchronizationType(v26))
      {
        sub_1000516F0(&v139, 85LL);
        uint64_t v26 = v134;
      }

      id v126 = 0LL;
      uint64_t v127 = 0LL;
      uint64_t v128 = 0LL;
      v27 += 16;
      unint64_t v161 = _swiftEmptyArrayStorage;
      unint64_t v6 = v30;
      unint64_t v5 = (unint64_t)v130 + 1;
      if ((void *)((char *)v130 + v123 + 1) == (void *)1)
      {
        swift_bridgeObjectRelease(v105);
        uint64_t v4 = 0LL;
        uint64_t v127 = 0LL;
        uint64_t v128 = 0LL;
        id v80 = _swiftEmptyArrayStorage;
        goto LABEL_120;
      }
    }

    if (v28 <= 65)
    {
      uint64_t v16 = (_OWORD *)v10;
      if (v28 == 19)
      {
        uint64_t v127 = v134;
        goto LABEL_15;
      }

      if (v28 == 20)
      {
        uint64_t v128 = v134;
        goto LABEL_15;
      }

      goto LABEL_114;
    }

    uint64_t v16 = (_OWORD *)v10;
    if (v28 != 70)
    {
      if (v28 == 67)
      {
        uint64_t wMaxPacketSize_low = LOBYTE(v134->wMaxPacketSize);
        uint64_t wMaxPacketSize_high = HIBYTE(v134->wMaxPacketSize);
        goto LABEL_15;
      }

      if (v28 == 66)
      {
        uint64_t v130 = (void *)v5;
        id v40 = v6;
        unsigned __int8 v41 = v134;
        char wMaxPacketSize = v134->wMaxPacketSize;
        if ((wMaxPacketSize & 1) != 0)
        {
          if ((v134->wMaxPacketSize & 2) != 0) {
            int v43 = -3145471;
          }
          else {
            int v43 = -3145472;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0) {
            uint64_t v111 = sub_10004F514(0LL, v111[2] + 1LL, 1, v111);
          }
          unint64_t v45 = v111[2];
          unint64_t v44 = v111[3];
          if (v45 >= v44 >> 1) {
            uint64_t v111 = sub_10004F514((void *)(v44 > 1), v45 + 1, 1, v111);
          }
          uint64_t v46 = v111;
          v111[2] = v45 + 1;
          uint64_t v47 = (char *)v46 + 3 * v45;
          v47[34] = BYTE2(v43);
          *((_WORD *)v47 + 16) = v43;
          if ((wMaxPacketSize & 2) != 0) {
            sub_1000516F0(&v139, 10LL);
          }
          a1 = v131;
          uint64_t v16 = (_OWORD *)v10;
          unsigned __int8 v41 = v134;
        }

        char v48 = v41->wMaxPacketSize;
        if ((v48 & 4) != 0)
        {
          if ((v41->wMaxPacketSize & 8) != 0) {
            int v49 = -3669311;
          }
          else {
            int v49 = -3669312;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0) {
            uint64_t v111 = sub_10004F514(0LL, v111[2] + 1LL, 1, v111);
          }
          unint64_t v51 = v111[2];
          unint64_t v50 = v111[3];
          if (v51 >= v50 >> 1) {
            uint64_t v111 = sub_10004F514((void *)(v50 > 1), v51 + 1, 1, v111);
          }
          uint64_t v52 = v111;
          v111[2] = v51 + 1;
          unint64_t v53 = (char *)v52 + 3 * v51;
          v53[34] = BYTE2(v49);
          *((_WORD *)v53 + 16) = v49;
          if ((v48 & 8) != 0) {
            sub_1000516F0(&v139, 10LL);
          }
          a1 = v131;
          uint64_t v16 = (_OWORD *)v10;
          unsigned __int8 v41 = v134;
        }

        unint64_t v6 = v40;
        if ((HIBYTE(v41->wMaxPacketSize) | 2) == 3)
        {
          int v54 = *(_DWORD *)&v41->bInterval;
          int v55 = v110;
          if ((v54 & 0x10) != 0) {
            int v55 = 3;
          }
          if ((v54 & 8) != 0) {
            int v55 = 4;
          }
          if ((v54 & 4) != 0) {
            int v55 = 2;
          }
          if ((v54 & 3) != 0) {
            int v56 = 1;
          }
          else {
            int v56 = v55;
          }
          int v110 = v56;
          int bDescriptorType = v41[2].bDescriptorType;
          unint64_t v106 = v41[1].bmAttributes | ((unint64_t)*(unsigned int *)&v41[1].wMaxPacketSize << 32);
          int v119 = bDescriptorType | 0x100;
        }

        unint64_t v5 = (unint64_t)v130;
        uint64_t bmAttributes = v41->bmAttributes;
        goto LABEL_15;
      }

LABEL_114:
      sub_1000516F0(&v139, 33LL);
      goto LABEL_15;
    }

    uint64_t v130 = (void *)v5;
    unint64_t v5 = 0LL;
    __int128 v143 = v103;
    v144[0] = 513;
    v144[1] = 321;
    char v145 = -64;
    __int16 v146 = 320;
    char v147 = -64;
    __int16 v148 = 2052;
    __int16 v149 = 577;
    char v150 = 22;
    __int16 v151 = 576;
    char v152 = 22;
    __int16 v153 = 8208;
    __int16 v154 = 769;
    char v155 = 16;
    __int16 v156 = 768;
    char v157 = 16;
    int v58 = v119;
    id v59 = v134;
    uint64_t v125 = ObjectType;
    while (2)
    {
      uint64_t v60 = &v142[v5];
      if ((v59->wMaxPacketSize & *((_BYTE *)v144 + v5)) != 0)
      {
        int v61 = *((unsigned __int16 *)v60 + 17) | (v60[36] << 16);
        int v62 = (v60[33] & v59->wMaxPacketSize);
        if ((v60[33] & v59->wMaxPacketSize) != 0) {
          int v63 = *((unsigned __int16 *)v60 + 17) | (v60[36] << 16);
        }
        else {
          int v63 = *(unsigned __int16 *)(v60 + 37) | (v60[39] << 16);
        }
        id v64 = v161;
        if ((swift_isUniquelyReferenced_nonNull_native(v161) & 1) == 0) {
          id v64 = sub_10004F514(0LL, v64[2] + 1LL, 1, v64);
        }
        unint64_t v66 = v64[2];
        unint64_t v65 = v64[3];
        if (v66 >= v65 >> 1) {
          id v64 = sub_10004F514((void *)(v65 > 1), v66 + 1, 1, v64);
        }
        v64[2] = v66 + 1;
        unint64_t v161 = v64;
        uint64_t v67 = (char *)v64 + 3 * v66;
        v67[34] = BYTE2(v63);
        *((_WORD *)v67 + 16) = v63;
        if (!v62)
        {
          uint64_t v16 = v135;
          int v58 = v119;
          uint64_t ObjectType = v125;
          a1 = v131;
          uint64_t v4 = v129;
          goto LABEL_89;
        }

        *((void *)&v140 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v139) = v61;
        BYTE2(v139) = BYTE2(v61);
        uint64_t v68 = Mirror.init(reflecting:)(&v139);
        unint64_t v6 = (void *)Mirror.children.getter(v68);
        a1 = (void *)v6[2];
        uint64_t v4 = v6[3];
        uint64_t v69 = v6[4];
        uint64_t v10 = v6[5];
        uint64_t ObjectType = (void *)swift_getObjectType(a1);
        swift_unknownObjectRetain(a1);
        swift_unknownObjectRetain(v69);
        uint64_t v124 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v4);
        uint64_t v70 = swift_getObjectType(v69);
        uint64_t v71 = dispatch thunk of _AnyIndexBox._typeID.getter(v70, v10);
        if (v124 != v71) {
          goto LABEL_159;
        }
        char v72 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v69, v10, ObjectType, v4);
        swift_unknownObjectRelease(v69, v73);
        if ((v72 & 1) != 0)
        {
          swift_unknownObjectRelease(a1, v74);
          __int128 v140 = 0u;
          __int128 v141 = 0u;
          __int128 v139 = 0u;
        }

        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter(a1, v4);
          __int128 v139 = v136;
          __int128 v140 = v137;
          __int128 v141 = v138;
          swift_unknownObjectRelease(a1, v75);
        }

        uint64_t v16 = v135;
        int v58 = v119;
        uint64_t ObjectType = v125;
        uint64_t v4 = v129;
        swift_release(v6);
        (*(void (**)(void *, uint64_t))(v115 + 8))(v122, v116);
        a1 = v131;
        if (!*((void *)&v141 + 1))
        {
          sub_1000178B0((uint64_t)&v139, &qword_100113CD0);
          goto LABEL_111;
        }

        uint64_t v76 = *((void *)&v139 + 1);
        uint64_t v77 = v139;
        sub_100017A40(v112);
        if (!v76) {
          goto LABEL_111;
        }
        if (v77 == 0x68637469507065LL && v76 == 0xE700000000000000LL)
        {
          swift_bridgeObjectRelease(0xE700000000000000LL);
          goto LABEL_89;
        }

        char v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v76, 0x68637469507065LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v76);
        if ((v78 & 1) == 0) {
LABEL_111:
        }
          sub_1000516F0(&v139, 10LL);
LABEL_89:
        id v59 = v134;
      }

      v5 += 8LL;
      if (v5 != 24) {
        continue;
      }
      break;
    }

    int v79 = HIBYTE(v59->wMaxPacketSize);
    int v119 = v58;
    if (v79 == 2)
    {
      id v126 = (const IOUSBEndpointDescriptor *)*(unsigned __int16 *)&v59->bInterval;
      int v114 = 1;
      unint64_t v6 = v121;
      unint64_t v5 = (unint64_t)v130;
    }

    else
    {
      unint64_t v6 = v121;
      unint64_t v5 = (unint64_t)v130;
      if (v79 == 1)
      {
        int v114 = 0;
        id v126 = (const IOUSBEndpointDescriptor *)*(unsigned __int16 *)&v59->bInterval;
      }
    }

LABEL_15:
    if (v123 + v5) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease(v105);
  if (v133)
  {
    uint64_t v134 = v133;
    id v80 = v161;
    uint64_t v4 = (uint64_t)v126;
LABEL_120:
    Swift::String v81 = v159;
    unint64_t v161 = v80;
    swift_bridgeObjectRetain(v80);
    uint64_t v82 = swift_bridgeObjectRetain(v81);
    a1 = sub_100051240(v82);
    swift_bridgeObjectRelease(v81);
    if (!a1[2])
    {
      swift_release(a1);
      a1 = 0LL;
    }

    LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v119;
    unint64_t v5 = (unint64_t)v6;
    if (v161[2])
    {
      unint64_t v6 = v161;
    }

    else
    {
      swift_bridgeObjectRelease(v161);
      unint64_t v6 = 0LL;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(ObjectType) & 1) != 0)
    {
LABEL_126:
      unint64_t v84 = ObjectType[2];
      unint64_t v83 = ObjectType[3];
      unint64_t v85 = v84 + 1;
      if (v84 >= v83 >> 1) {
        uint64_t ObjectType = sub_10004F3F4((void *)(v83 > 1), v84 + 1, 1, ObjectType);
      }
      ObjectType[2] = v85;
      objc_super v133 = (const IOUSBEndpointDescriptor *)(ObjectType + 2);
      Swift::String v86 = &ObjectType[10 * v84];
      uint64_t v87 = v127;
      v86[4] = v134;
      v86[5] = v87;
      v86[6] = v128;
      *((_WORD *)v86 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 256;
      *((_BYTE *)v86 + 64) = v114 & 1;
      v86[9] = v4;
      *((_WORD *)v86 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
      v86[11] = v6;
      v86[12] = 0LL;
      v86[13] = a1;
      unint64_t v6 = (void *)v5;
      goto LABEL_129;
    }

  __int128 v139 = (void (*)(_BYTE *))dispatch thunk of BinaryInteger._lowWord.getter(v5, v12);
  (*((void (**)(_BYTE *, uint64_t))v7 + 1))(v10, v5);
  int v43 = v141[3];
  unint64_t v44 = v141[4];
  sub_1000178EC(v141, v43);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v44 + 24))(v145, v43, v44);
  uint64_t v46 = v146;
  unint64_t v45 = v147;
  uint64_t v47 = sub_1000178EC(v145, v146);
  __int128 v137 = v130;
  char v48 = *(void *)(v46 - 8);
  int v49 = *(void *)(v48 + 64);
  __chkstk_darwin(v47);
  unint64_t v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v51 = &v130[-v50];
  __int128 v138 = *(void (**)(void))(v48 + 16);
  v138(&v130[-v50]);
  uint64_t v52 = *(_BYTE **)(v45 + 8);
  unint64_t v53 = dispatch thunk of static BinaryInteger.isSigned.getter(v46, v52);
  __int128 v136 = &v130[-v50];
  if ((v53 & 1) != 0)
  {
    int v54 = *(void *)(*((void *)v52 + 3) + 16LL);
    int v55 = swift_getAssociatedTypeWitness(0LL, v54);
    uint64_t v135 = v130;
    __chkstk_darwin(v55);
    unsigned int v57 = &v130[-v56];
    int v58 = swift_getAssociatedConformanceWitness( v54,  v46,  v55,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    id v59 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v55,  v58);
    uint64_t v134 = v130;
    __chkstk_darwin(v59);
    uint64_t v60 = v54;
    unint64_t v51 = v136;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v57, v46, v60);
    int v61 = dispatch thunk of static Comparable.>= infix(_:_:)( v51,  &v130[-v50],  v46,  *(void *)(*((void *)v52 + 4) + 8LL));
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(&v130[-v50], v46);
    if ((v61 & 1) == 0) {
      goto LABEL_46;
    }
  }

  int v62 = dispatch thunk of BinaryInteger.bitWidth.getter(v46, v52);
  if (v62 < 64) {
    goto LABEL_30;
  }
  __chkstk_darwin(v62);
  int v63 = &v130[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v138)(v63, v51, v46);
  v142[0] = -1LL;
  id v64 = dispatch thunk of static BinaryInteger.isSigned.getter(v46, v52);
  unint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter(v46, v52);
  if ((v64 & 1) != 0)
  {
    if (v65 <= 64)
    {
      uint64_t v135 = v130;
      uint64_t v134 = *(_BYTE **)(*((void *)v52 + 3) + 16LL);
      unint64_t v66 = v134;
      uint64_t v67 = swift_getAssociatedTypeWitness(0LL, v134);
      objc_super v133 = v130;
      __chkstk_darwin(v67);
      uint64_t v69 = &v130[-v68];
      uint64_t v70 = swift_getAssociatedConformanceWitness( v66,  v46,  v67,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v71 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v67,  v70);
      unint64_t v132 = v130;
      __chkstk_darwin(v71);
      char v72 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v69, v46, v134);
      uint64_t v134 = v52;
      id v131 = dispatch thunk of static Comparable.> infix(_:_:)( &v130[-v72],  &v130[-v72],  v46,  *(void *)(*((void *)v52 + 4) + 8LL));
      uint64_t v73 = *(uint64_t (**)(_BYTE *, uint64_t))(v48 + 8);
      uint64_t v74 = v73(&v130[-v72], v46);
      uint64_t v75 = v142[0];
      __chkstk_darwin(v74);
      uint64_t v76 = &v130[-v72];
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v138)(&v130[-v72], &v130[-v72], v46);
      if ((v131 & 1) != 0)
      {
        uint64_t v77 = v75;
        uint64_t v52 = v134;
        char v78 = dispatch thunk of BinaryInteger._lowWord.getter(v46, v134);
        v73(v76, v46);
        if (v77 < v78) {
          goto LABEL_40;
        }
      }

      else
      {
        v73(&v130[-v72], v46);
        uint64_t v52 = v134;
      }

      goto LABEL_28;
    }

      ++v8;
      v11 += 16;
      if (v8 - v5 == 1)
      {
        swift_bridgeObjectRelease(v3);
        uint64_t v4 = v47;
        if (v47) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        uint64_t v27 = v48;
        size_t v33 = v48 + 2;
        uint64_t v32 = v48[2];
        if (!v32) {
          goto LABEL_66;
        }
        goto LABEL_52;
      }
    }
  }

  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_bridgeObjectRelease(v3);
  int v49 = 0LL;
  unint64_t v50 = 0LL;
LABEL_42:
  uint64_t v27 = v48;
  int v28 = sub_100051240((uint64_t)&_swiftEmptySetSingleton);
  uint64_t v3 = v28;
  __int16 v29 = _swiftEmptyArrayStorage;
  if (!v28[2])
  {
    swift_release(v28);
    uint64_t v3 = 0LL;
  }

  if (!_swiftEmptyArrayStorage[2])
  {
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    __int16 v29 = 0LL;
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0) {
    uint64_t v27 = sub_10004F3F4(0LL, v48[2] + 1LL, 1, v48);
  }
  uint64_t v31 = v27[2];
  uint64_t v30 = v27[3];
  uint64_t v32 = v31 + 1;
  if (v31 >= v30 >> 1) {
    uint64_t v27 = sub_10004F3F4((void *)(v30 > 1), v31 + 1, 1, v27);
  }
  v27[2] = v32;
  size_t v33 = v27 + 2;
  uint64_t v34 = &v27[10 * v31];
  v34[4] = v4;
  v34[5] = v49;
  v34[6] = v50;
  *((_WORD *)v34 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 256;
  *((_BYTE *)v34 + 64) = 0;
  v34[9] = 0LL;
  *((_WORD *)v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
  v34[11] = v29;
  v34[12] = 0LL;
  v34[13] = v3;
LABEL_52:
  uint64_t v4 = v27 + 13;
  char v48 = v27;
  swift_bridgeObjectRetain(v27);
  unint64_t v35 = 0;
  unint64_t v36 = 1LL;
  while (v35)
  {
    if (v32 == v36) {
      goto LABEL_64;
    }
LABEL_58:
    unint64_t v35 = 1;
LABEL_55:
    v4 += 10;
    if (__OFADD__(v36++, 1LL)) {
      goto LABEL_74;
    }
  }

  id v40 = (const IOUSBEndpointDescriptor *)*(v4 - 9);
  unsigned __int8 v41 = *(v4 - 2);
  id v42 = *(v4 - 1);
  uint64_t v3 = (void *)*v4;
  swift_bridgeObjectRetain(*v4);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v42);
  if (!IOUSBGetEndpointUsageType(v40) && v40->wMaxPacketSize >= 9u)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
    if (v32 == v36)
    {
LABEL_64:
      uint64_t v27 = v48;
      swift_bridgeObjectRelease(v48);
      goto LABEL_67;
    }

    goto LABEL_58;
  }

  int v43 = IOUSBGetEndpointUsageType(v40);
  if (v43)
  {
    uint64_t v38 = v43;
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
  }

  else
  {
    char wMaxPacketSize = v40->wMaxPacketSize;
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v41);
    uint64_t v38 = wMaxPacketSize < 9;
  }

  unint64_t v35 = v38 == 2;
  if (v32 != v36) {
    goto LABEL_55;
  }
  uint64_t v27 = v48;
  swift_bridgeObjectRelease(v48);
  if (v38 != 2) {
LABEL_66:
  }
    sub_1000516F0(&v54, 81LL);
LABEL_67:
  if (*v33 != v46) {
    sub_1000516F0(&v53, 82LL);
  }
  unint64_t v44 = v56;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v44);
  unint64_t v45 = sub_10000AE14();
  uint64_t v20 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
  *(_BYTE *)unint64_t v21 = 1;
  *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v21 + 16) = 0xE000000000000000LL;
  *(void *)(v21 + 24) = 0xD000000000000030LL;
  *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
  *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
  *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
  unint64_t v22 = 372LL;
LABEL_70:
  *(void *)(v21 + 56) = v22;
  swift_willThrow(v20);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
  __break(1u);
  return result;
}

  if (a1 < 0) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v9);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  unint64_t v5 = 4LL;
  while (1)
  {
    if ((a1 & 0xC000000000000001LL) != 0) {
      uint64_t result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
    }
    else {
      uint64_t result = *(id *)(a1 + 8 * v5);
    }
    uint64_t v7 = result;
    uint64_t v8 = v5 - 3;
    if (__OFADD__(v5 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_15;
    }

    if (!a2) {
      break;
    }
    if ([a2 isCompatible:result])
    {
      swift_bridgeObjectRelease(a1);
      return v7;
    }

    ++v5;
    if (v8 == v4) {
      goto LABEL_11;
    }
  }

  __break(1u);
  return result;
}

    if (__OFADD__(v6++, 1LL))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
  }

  if (v6 != 11) {
    goto LABEL_15;
  }
  uint64_t v18 = (a2 - (v8 - 1)) - 1;
  if ((v18 & 0xFFFFFF00) != 0) {
LABEL_48:
  }
    __break(1u);
  uint64_t v19 = 0;
  uint64_t v20 = v8;
  unint64_t v45 = OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject;
  while (2)
  {
    if (!v4)
    {
      uint64_t v46 = 0x206C656E6E616843LL;
      uint64_t v47 = 0xE800000000000000LL;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      object = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(object);
      unint64_t v25 = v46;
      uint64_t v27 = v47;
      goto LABEL_32;
    }

    unint64_t v21 = *(void **)(a1 + v45);
    if (!v21)
    {
LABEL_31:
      unint64_t v25 = 0LL;
      uint64_t v27 = 0LL;
LABEL_32:
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = sub_10004FD74(0LL, v7[2] + 1LL, 1, v7);
      }
      uint64_t v38 = v7[2];
      uint64_t v37 = v7[3];
      if (v38 >= v37 >> 1) {
        uint64_t v7 = sub_10004FD74((void *)(v37 > 1), v38 + 1, 1, v7);
      }
      v7[2] = v38 + 1;
      BOOL v39 = &v7[4 * v38];
      v39[4] = v20;
      v39[5] = v25;
      v39[6] = v27;
      *((_DWORD *)v39 + 14) = 0;
      if ((_BYTE)v20 == 0xFF) {
        goto LABEL_42;
      }
      id v40 = v19;
      ++v19;
      ++v20;
      if (((v40 + 1) & 0x100) != 0) {
        goto LABEL_43;
      }
      continue;
    }

    break;
  }

  uint64_t v46 = 0LL;
  unint64_t v22 = [v21 stringWithIndex:(v4 + v19) languageID:1033 error:&v46];
  unint64_t v23 = (id)v46;
  if (v22)
  {
    unint64_t v24 = v22;
    unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v27 = v26;
    int v28 = v23;

    goto LABEL_32;
  }

  uint64_t v31 = (id)v46;
  uint64_t v32 = _convertNSErrorToError(_:)(v23);

  swift_willThrow(v33);
  uint64_t v34 = (void *)_convertErrorToNSError(_:)(v32);
  unint64_t v35 = [v34 code];

  if (v35 == (id)-536870206LL || v35 == (id)-536850432LL)
  {
    swift_errorRelease(v32);
    goto LABEL_31;
  }

  swift_willThrow(v36);
  return swift_bridgeObjectRelease(v7);
}

LABEL_161:
    uint64_t ObjectType = sub_10004F3F4(0LL, ObjectType[2] + 1LL, 1, ObjectType);
    goto LABEL_126;
  }

  unint64_t v85 = ObjectType[2];
  objc_super v133 = (const IOUSBEndpointDescriptor *)(ObjectType + 2);
  LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v119;
  if (!v85)
  {
LABEL_144:
    sub_1000516F0(&v139, 81LL);
    goto LABEL_145;
  }

LABEL_129:
  int v119 = v10;
  uint64_t v88 = ObjectType;
  ObjectType += 13;
  uint64_t v125 = v88;
  swift_bridgeObjectRetain(v88);
  BOOL v89 = 0;
  uint64_t v10 = 1LL;
  while (2)
  {
    if (v89)
    {
LABEL_131:
      if (v85 == v10)
      {
        uint64_t ObjectType = v125;
        swift_bridgeObjectRelease(v125);
        uint64_t v16 = v135;
        LOWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v119;
        goto LABEL_145;
      }

      BOOL v89 = 1;
      goto LABEL_133;
    }

    unint64_t v5 = (unint64_t)v6;
    uint64_t v4 = *(ObjectType - 9);
    uint64_t v91 = *(ObjectType - 2);
    a1 = (void *)*(ObjectType - 1);
    uint64_t v92 = *ObjectType;
    swift_bridgeObjectRetain(*ObjectType);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(a1);
    if (!IOUSBGetEndpointUsageType((const IOUSBEndpointDescriptor *)v4) && *(unsigned __int16 *)(v4 + 4) >= 9u)
    {
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v91);
      unint64_t v6 = (void *)v5;
      goto LABEL_131;
    }

    id v93 = (void *)IOUSBGetEndpointUsageType((const IOUSBEndpointDescriptor *)v4);
    if ((_DWORD)v93)
    {
      unint64_t v5 = (unint64_t)v93;
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v91);
    }

    else
    {
      uint64_t v4 = *(unsigned __int16 *)(v4 + 4);
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v91);
      unint64_t v5 = v4 < 9;
    }

    BOOL v89 = (_DWORD)v5 == 2;
    if (v85 != v10)
    {
      unint64_t v6 = v121;
LABEL_133:
      ObjectType += 10;
      if (__OFADD__(v10++, 1LL)) {
        goto LABEL_158;
      }
      continue;
    }

    break;
  }

  uint64_t ObjectType = v125;
  swift_bridgeObjectRelease(v125);
  uint64_t v16 = v135;
  LOWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v119;
  if ((_DWORD)v5 != 2) {
    goto LABEL_144;
  }
LABEL_145:
  if (*(void *)&v133->bLength != v104) {
    sub_1000516F0(&v139, 82LL);
  }
  if (BYTE1(v10) == 255)
  {
    swift_bridgeObjectRelease(v111);
    swift_bridgeObjectRelease(v158);
    id v94 = v159;
    swift_bridgeObjectRelease(ObjectType);
    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v94);
    unint64_t v95 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v95, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 1;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000030LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    uint64_t v20 = 394LL;
LABEL_149:
    *(void *)(v19 + 56) = v20;
    swift_willThrow(v18);
  }

  else
  {
    unint64_t v96 = v159;
    swift_bridgeObjectRelease(v161);
    swift_bridgeObjectRelease(v96);
    unint64_t v97 = v158;
    uint64_t v98 = sub_100051240((uint64_t)v158);
    swift_bridgeObjectRelease(v97);
    sub_100056EC8( (uint64_t)v102,  v110,  bmAttributes,  wMaxPacketSize_low,  wMaxPacketSize_high,  v106,  v10,  (uint64_t)ObjectType,  (uint64_t)v160,  (uint64_t)v111,  (uint64_t)v98);
    __int128 v99 = v160[3];
    _OWORD v16[2] = v160[2];
    v16[3] = v99;
    v16[4] = v160[4];
    __int128 v100 = v160[1];
    *uint64_t v16 = v160[0];
    v16[1] = v100;
  }

uint64_t sub_100019B08(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
  }

  else if ((a1 & 0xF8) != 0)
  {
    return 7LL;
  }

  else
  {
    return (0x605040302010007uLL >> (8 * a1));
  }

  return result;
}

unint64_t sub_100019B90(uint64_t a1)
{
  if (a1 == 6 && (swift_beginAccess(v1 + 216, v8, 0LL, 0LL), (uint64_t v2 = *(void **)(v1 + 216)) != 0LL))
  {
    uint64_t v3 = (unsigned __int16 *)[v2 bytes];
    return sub_100017B38(*v3 | ((unint64_t)*(unsigned int *)(v3 + 1) << 16));
  }

  else
  {
    unint64_t v5 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 2;
    *(void *)(v7 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v7 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD000000000000029LL;
    *(void *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDD90LL;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CDDC0LL;
    *(void *)(v7 + 56) = 413LL;
    return swift_willThrow(v6);
  }

uint64_t sub_100019C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019D04(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100019D40()
{
  unint64_t result = qword_100113408;
  if (!qword_100113408)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100113408);
  }

  return result;
}

void *sub_100019D7C(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v14 = a1[6];
  uint64_t v15 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v12 = a1[12];
  uint64_t v13 = a1[7];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[14];
  uint64_t v17 = a1[16];
  uint64_t v18 = a1[15];
  uint64_t v16 = a1[17];
  uint64_t v10 = a1[20];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100019E58(v15, v14, v13, v4, v5, v6, v7, v12, v8, v9);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_100019E58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a8 != 1)
  {
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    return swift_bridgeObjectRelease(a10);
  }

  return result;
}

uint64_t sub_100019E94(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

Swift::Int *kDeviceCapabilityTypeConfigurationSummary.unsafeMutableAddressor()
{
  return &kDeviceCapabilityTypeConfigurationSummary;
}

Swift::Int *kDeviceCapabilityTypeAudioHigherRevisionLevelFunction.unsafeMutableAddressor()
{
  return &kDeviceCapabilityTypeAudioHigherRevisionLevelFunction;
}

uint64_t ActiveConfiguration.activeFunctions.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 32));
}

void sub_100019EC0()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n(*(void *)(v0 + 32), 2LL);
    for (unint64_t i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      uint64_t v6 = *(i - 1);
      uint64_t v7 = *i;
      uint64_t ObjectType = swift_getObjectType(v6);
      swift_unknownObjectRetain(v6);
      sub_10002B5E4(ObjectType, v7);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease(v6, v9);
      if (!--v4)
      {
        swift_bridgeObjectRelease_n(v3, 2LL);
        return;
      }
    }

    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_unknownObjectRelease(v6, v10);
  }

void sub_100019F74()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t ObjectType = swift_getObjectType(v4);
      swift_unknownObjectRetain(v4);
      sub_10002C358(ObjectType, v5);
      swift_unknownObjectRelease(v4, v7);
      v3 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

uint64_t ActiveConfiguration.configNum.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 5LL);
}

uint64_t ActiveConfiguration.deinit()
{
  return v0;
}

uint64_t ActiveConfiguration.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ActiveConfiguration()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore19ActiveConfiguration);
}

uint64_t sub_10001A080@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  *(void *)&__int128 v20 = *a1;
  *((void *)&v20 + 1) = v6;
  sub_100017294((uint64_t)(a1 + 2), (uint64_t)&v21);
  if (v6)
  {
    swift_bridgeObjectRetain(v6);
    sub_100017A40(&v21);
    if (*(void *)(a2 + 16) && (unint64_t v9 = sub_100016AFC(v7, v6), (v10 & 1) != 0))
    {
      sub_1000179D0(*(void *)(a2 + 56) + 40 * v9, (uint64_t)&v20);
    }

    else
    {
      uint64_t v22 = 0LL;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
    }

    uint64_t result = swift_bridgeObjectRelease(v6);
    if (*((void *)&v21 + 1))
    {
      __int128 v23 = v20;
      __int128 v24 = v21;
      uint64_t v12 = v22;
LABEL_12:
      uint64_t v25 = v12;
      __int128 v13 = v24;
      *(_OWORD *)a3 = v23;
      *(_OWORD *)(a3 + 16) = v13;
      *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v12;
      return result;
    }

    sub_10001A2DC((uint64_t)&v20);
  }

  else
  {
    sub_100017A40(&v21);
  }

  __int128 v20 = *(_OWORD *)a1;
  sub_100017294(v8, (uint64_t)&v21);
  uint64_t result = swift_dynamicCast(&v17, &v21, (char *)&type metadata for Any + 8, &type metadata for AnyHashable, 6LL);
  if ((result & 1) != 0)
  {
    __int128 v23 = v17;
    __int128 v24 = v18;
    uint64_t v12 = v19;
    goto LABEL_12;
  }

  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  sub_10001A2DC((uint64_t)&v17);
  uint64_t v14 = *a1;
  uint64_t v15 = (void *)a1[1];
  *(void *)&__int128 v20 = *a1;
  *((void *)&v20 + 1) = v15;
  sub_100017294(v8, (uint64_t)&v21);
  if (v15)
  {
    swift_bridgeObjectRetain(v15);
    sub_100017A40(&v21);
    *(void *)&__int128 v20 = 0LL;
    *((void *)&v20 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease(*((void *)&v20 + 1));
    *(void *)&__int128 v20 = 0xD000000000000029LL;
    *((void *)&v20 + 1) = 0x80000001000CDF90LL;
    v16._countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v20,  *((void *)&v20 + 1),  "AUASDCore/SynthesizedHashable.swift",  35LL,  2LL,  46LL,  0);
  }

  else
  {
    sub_100017A40(&v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000026LL,  0x80000001000CDF60LL,  "AUASDCore/SynthesizedHashable.swift",  35LL,  2LL,  49LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10001A2DC(uint64_t a1)
{
  uint64_t v2 = sub_100008E00(&qword_100113D98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t ActiveFeatureUnit.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t ActiveFeatureUnit.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign(v2 + 16, a1);
  return swift_unknownObjectRelease(a1, v5);
}

uint64_t (*ActiveOutputTerminal.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 16, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10001A42C;
}

uint64_t ActiveMixerUnit.staticMixerUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001A43C(v1 + 32, a1);
}

uint64_t sub_10001A43C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveStreamingAltInterface.cluster.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain(*(void *)(v0 + 128));
  return v1;
}

uint64_t ActiveMixerUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001A54C((uint64_t (*)(void))sub_10001A4C0, a1);
}

unint64_t sub_10001A4C0()
{
  unint64_t result = qword_100113DA0;
  if (!qword_100113DA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MixerUnit, &type metadata for MixerUnit);
    atomic_store(result, (unint64_t *)&qword_100113DA0);
  }

  return result;
}

uint64_t sub_10001A504()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t ActiveMixerUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001A54C((uint64_t (*)(void))sub_10001A64C, a1);
}

uint64_t sub_10001A54C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  char v5 = *(_BYTE *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  char v7 = *(_BYTE *)(v2 + 58);
  uint64_t v8 = *(void *)(v2 + 64);
  __int16 v17 = *(_WORD *)(v2 + 72);
  __int16 v18 = *(_WORD *)(v2 + 56);
  uint64_t v16 = *(void *)(v2 + 76);
  __int16 v15 = *(_WORD *)(v2 + 84);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v10 = *(void *)(v2 + 96);
  uint64_t v12 = *(void *)(v2 + 104);
  uint64_t v11 = *(void *)(v2 + 112);
  a2[3] = (uint64_t)&type metadata for MixerUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100103868, 104LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = v5;
  *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_BYTE *)(v13 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v18;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(_WORD *)(v13 + 56) = v17;
  *(void *)(v13 + 6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v16;
  *(_WORD *)(v13 + 6_Block_object_dispose((const void *)(v30 - 136), 8) = v15;
  *(void *)(v13 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v10;
  *(void *)(v13 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v12;
  *(void *)(v13 + 96) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRetain(v12);
}

unint64_t sub_10001A64C()
{
  unint64_t result = qword_100113DA8;
  if (!qword_100113DA8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MixerUnit, &type metadata for MixerUnit);
    atomic_store(result, (unint64_t *)&qword_100113DA8);
  }

  return result;
}

uint64_t ActiveMixerUnit.latencyControlSelector.getter()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType(result);
    int v5 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
    swift_unknownObjectRelease(v2, v6);
    if (v5 == 32) {
      return 5LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

unint64_t ActiveMixerUnit.pathName.getter()
{
  unint64_t v1 = sub_10001A804();
  uint64_t v3 = v2;
  swift_release(v0);
  if (!v3)
  {
    uint64_t v4 = *(void *)(v0 + 88);
    swift_retain(v0);
    swift_bridgeObjectRetain(v4);
    uint64_t v6 = sub_10001AE40(v5, v0);
    swift_bridgeObjectRelease(v4);
    swift_release(v0);
    if (v6[2])
    {
      uint64_t v7 = sub_100008E00(&qword_100113B08);
      unint64_t v8 = sub_100017564();
      unint64_t v1 = BidirectionalCollection<>.joined(separator:)(2106912LL, 0xE300000000000000LL, v7, v8);
      swift_bridgeObjectRelease(v6);
    }

    else
    {
      swift_bridgeObjectRelease(v6);
      return 0xD000000000000012LL;
    }
  }

  return v1;
}

unint64_t sub_10001A804()
{
  unint64_t v1 = 0LL;
  unsigned __int8 v2 = *(_BYTE *)(v0 + 58);
  if (v2 != 255)
  {
    unsigned __int16 v3 = *(_WORD *)(v0 + 56);
    swift_beginAccess(v0 + 16, v10, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
    unint64_t v1 = Strong;
    if (Strong)
    {
      uint64_t v5 = *(void *)(v0 + 24);
      uint64_t ObjectType = swift_getObjectType(Strong);
      uint64_t v7 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
      swift_unknownObjectRelease(v1, v8);
      if (v7)
      {
        if (*(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
        {
          unint64_t v1 = sub_1000B36EC(v3 | (v2 << 16) & 0x1FFFFu);

          return v1;
        }
      }

      return 0LL;
    }
  }

  return v1;
}

void *ActiveMixerUnit.deinit()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v0[16]);
  return v0;
}

uint64_t sub_10001AA14(uint64_t a1)
{
  return a1;
}

uint64_t ActiveMixerUnit.__deallocating_deinit()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocClassInstance(v0, 137LL, 7LL);
}

uint64_t sub_10001AA98@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001AB10((uint64_t (*)(void))sub_10001A64C, a1);
}

uint64_t sub_10001AAA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 128LL));
  return v1;
}

unint64_t sub_10001AAE4()
{
  return ActiveMixerUnit.pathName.getter();
}

uint64_t sub_10001AB04@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001AB10((uint64_t (*)(void))sub_10001A4C0, a1);
}

uint64_t sub_10001AB10@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 32LL);
  char v6 = *(_BYTE *)(*(void *)v2 + 40LL);
  uint64_t v7 = *(void *)(*(void *)v2 + 48LL);
  char v8 = *(_BYTE *)(*(void *)v2 + 58LL);
  uint64_t v9 = *(void *)(*(void *)v2 + 64LL);
  __int16 v18 = *(_WORD *)(*(void *)v2 + 72LL);
  __int16 v19 = *(_WORD *)(*(void *)v2 + 56LL);
  uint64_t v17 = *(void *)(*(void *)v2 + 76LL);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 84LL);
  uint64_t v10 = *(void *)(*(void *)v2 + 88LL);
  uint64_t v11 = v4[12];
  uint64_t v12 = v4[13];
  uint64_t v13 = v4[14];
  a2[3] = (uint64_t)&type metadata for MixerUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100103868, 104LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v19;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_WORD *)(v14 + 56) = v18;
  *(void *)(v14 + 6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v17;
  *(_WORD *)(v14 + 6_Block_object_dispose((const void *)(v30 - 136), 8) = v16;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v11;
  *(void *)(v14 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v12;
  *(void *)(v14 + 96) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return swift_bridgeObjectRetain(v12);
}

uint64_t sub_10001AC14()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 16);
}

uint64_t sub_10001AC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 16;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 24) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

uint64_t (*sub_10001ACC0(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 16, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001A42C;
}

void sub_10001AD30(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 24) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 16, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10001ADA0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 16;
  swift_beginAccess(v2, v8, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType(result);
    LODWORD(v5) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
    if ((_DWORD)v5 == 32) {
      return 5LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ActiveMixerUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore15ActiveMixerUnit);
}

void *sub_10001AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = a2;
  uint64_t v5 = a2 + 16;
  swift_bridgeObjectRetain(a1);
  swift_beginAccess(v5, v34, 0LL, 0LL);
  uint64_t v6 = 0LL;
  uint64_t v7 = _swiftEmptyArrayStorage;
  uint64_t v35 = v3;
  do
  {
    uint64_t v8 = *(void *)(a1 + 8 * v6 + 32);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
    if (!Strong)
    {
      uint64_t v27 = 0LL;
      __int128 v25 = 0u;
      __int128 v26 = 0u;
LABEL_4:
      sub_1000178B0((uint64_t)&v25, &qword_100113E98);
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      uint64_t v30 = 0LL;
LABEL_5:
      sub_1000178B0((uint64_t)&v28, &qword_100113B38);
      goto LABEL_6;
    }

    uint64_t v10 = Strong;
    uint64_t v11 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    sub_10002C5BC(v8, ObjectType, v11, (uint64_t)&v25);
    swift_unknownObjectRelease(v10, v13);
    if (!*((void *)&v26 + 1)) {
      goto LABEL_4;
    }
    uint64_t v14 = sub_100008E00(&qword_100113B28);
    uint64_t v15 = sub_100008E00(&qword_100113B30);
    if ((swift_dynamicCast(&v28, &v25, v14, v15, 6LL) & 1) == 0)
    {
      uint64_t v30 = 0LL;
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      goto LABEL_5;
    }

    if (!*((void *)&v29 + 1)) {
      goto LABEL_5;
    }
    sub_10000AF84(&v28, (uint64_t)v31);
    uint64_t v16 = v32;
    uint64_t v17 = v33;
    sub_1000178EC(v31, v32);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
    uint64_t v20 = v19;
    sub_100017A40(v31);
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
      uint64_t v7 = sub_10004F2E8(0LL, v7[2] + 1LL, 1, v7);
    }
    unint64_t v22 = v7[2];
    unint64_t v21 = v7[3];
    if (v22 >= v21 >> 1) {
      uint64_t v7 = sub_10004F2E8((void *)(v21 > 1), v22 + 1, 1, v7);
    }
    v7[2] = v22 + 1;
    __int128 v23 = &v7[2 * v22];
    v23[4] = v18;
    v23[5] = v20;
    uint64_t v3 = v35;
LABEL_6:
    ++v6;
  }

  while (v2 != v6);
  swift_bridgeObjectRelease(a1);
  return v7;
}

void *sub_10001B068(void (*a1)(__int128 *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v24 = a3;
  uint64_t v8 = (uint64_t *)(a3 + 48);
  uint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v11 = *(v8 - 2);
    uint64_t v12 = *(v8 - 1);
    uint64_t v13 = *v8;
    v23[0] = v11;
    v23[1] = v12;
    v23[2] = v13;
    swift_retain(v11);
    swift_retain(v12);
    swift_bridgeObjectRetain(v13);
    a1(&v21, v23);
    if (v4)
    {
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v13);
      swift_release(v12);
      swift_release(v11);
      return v9;
    }

    swift_bridgeObjectRelease(v13);
    swift_release(v12);
    swift_release(v11);
    if ((void)v21)
    {
      __int128 v20 = v21;
      uint64_t v14 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        uint64_t v9 = sub_10004F1C4(0LL, v9[2] + 1LL, 1, v9);
      }
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      __int128 v17 = v20;
      if (v16 >= v15 >> 1)
      {
        uint64_t v18 = sub_10004F1C4((void *)(v15 > 1), v16 + 1, 1, v9);
        __int128 v17 = v20;
        uint64_t v9 = v18;
      }

      v9[2] = v16 + 1;
      uint64_t v10 = &v9[3 * v16];
      *((_OWORD *)v10 + swift_unknownObjectWeakDestroy(v0 + 2) = v17;
      v10[6] = v14;
    }

    v8 += 3;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease(v24);
  return v9;
}

void *sub_10001B214(void (*a1)(__int128 *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4LL; ; ++i)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      uint64_t v10 = v9;
      uint64_t v11 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v20 = v9;
      a1(&v17, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(a3);

        return v7;
      }

      if (v18)
      {
        sub_10000AF84(&v17, (uint64_t)v19);
        sub_10000AF84(v19, (uint64_t)&v17);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          uint64_t v7 = sub_10004F874(0LL, v7[2] + 1LL, 1, v7);
        }
        unint64_t v13 = v7[2];
        unint64_t v12 = v7[3];
        if (v13 >= v12 >> 1) {
          uint64_t v7 = sub_10004F874((void *)(v12 > 1), v13 + 1, 1, v7);
        }
        v7[2] = v13 + 1;
        sub_10000AF84(&v17, (uint64_t)&v7[5 * v13 + 4]);
      }

      else
      {
        sub_1000178B0((uint64_t)&v17, &qword_100114048);
      }

      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return v7;
      }
    }

    __break(1u);
LABEL_20:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

  swift_bridgeObjectRelease(a3);
  return _swiftEmptyArrayStorage;
}

uint64_t ActiveSelectorUnit.staticSelectorUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001B410(v1 + 16, a1);
}

uint64_t sub_10001B410(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveClockSelector.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 96);
}

uint64_t ActiveClockSelector.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 104) = a2;
  swift_unknownObjectWeakAssign(v2 + 96, a1);
  return swift_unknownObjectRelease(a1, v5);
}

uint64_t (*ActiveClockSelector.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 96, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10001B55C;
}

uint64_t ActiveSelectorUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001B5F0((uint64_t (*)(void))sub_10001B56C, a1);
}

unint64_t sub_10001B56C()
{
  unint64_t result = qword_100113EA0;
  if (!qword_100113EA0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SelectorUnit, &type metadata for SelectorUnit);
    atomic_store(result, (unint64_t *)&qword_100113EA0);
  }

  return result;
}

uint64_t sub_10001B5B0()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t ActiveSelectorUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001B5F0((uint64_t (*)(void))sub_10001B6C4, a1);
}

uint64_t sub_10001B5F0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  __int16 v15 = *(_WORD *)(v2 + 40);
  char v7 = *(_BYTE *)(v2 + 42);
  uint64_t v8 = *(void *)(v2 + 48);
  __int16 v9 = *(_WORD *)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  uint64_t v12 = *(void *)(v2 + 80);
  a2[3] = (uint64_t)&type metadata for SelectorUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100103958, 88LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = v5;
  *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_BYTE *)(v13 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v15;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(_WORD *)(v13 + 56) = v9;
  *(void *)(v13 + 64) = v10;
  *(void *)(v13 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRetain(v11);
}

unint64_t sub_10001B6C4()
{
  unint64_t result = qword_100113EA8;
  if (!qword_100113EA8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SelectorUnit, &type metadata for SelectorUnit);
    atomic_store(result, (unint64_t *)&qword_100113EA8);
  }

  return result;
}

uint64_t MixerUnit.mixerControls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 64));
}

uint64_t MixerUnit.controls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 72));
}

void ActiveSelectorUnit.source.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v68 = *(void *)(v3 - 8);
  uint64_t v69 = v3;
  __chkstk_darwin(v3);
  char v5 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = v1[8];
  if (*(void *)(v6 + 16) == 1LL)
  {
    swift_beginAccess(v1 + 12, v71, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 12);
    if (Strong)
    {
      uint64_t v8 = Strong;
      uint64_t v9 = v1[13];
      uint64_t ObjectType = swift_getObjectType(Strong);
      sub_10002C5BC(*(void *)(v6 + 32), ObjectType, v9, (uint64_t)&v75);
      swift_unknownObjectRelease(v8, v11);
      if (*((void *)&v76 + 1))
      {
        uint64_t v12 = sub_100008E00(&qword_100113B28);
        uint64_t v13 = sub_100008E00(&qword_100113EC0);
        if ((swift_dynamicCast(&v72, &v75, v12, v13, 6LL) & 1) != 0) {
          goto LABEL_23;
        }
        goto LABEL_5;
      }
    }

    else
    {
      *(void *)&__int128 v77 = 0LL;
      __int128 v75 = 0u;
      __int128 v76 = 0u;
    }

    sub_1000178B0((uint64_t)&v75, &qword_100113E98);
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    *(void *)&__int128 v74 = 0LL;
    goto LABEL_23;
  }

  uint64_t v14 = v1[9];
  if (!v14 || (uint64_t v15 = *(void *)(v14 + 16)) == 0)
  {
LABEL_26:
    *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }

  uint64_t v61 = v1[8];
  int v62 = v1;
  uint64_t v63 = a1;
  id v64 = &v76;
  swift_bridgeObjectRetain(v14);
  uint64_t v17 = 32LL;
  uint64_t v67 = v16;
  while (1)
  {
    uint64_t v70 = v15;
    int v18 = *(unsigned __int8 *)(v16 + v17 + 2);
    int v19 = *(unsigned __int16 *)(v16 + v17);
    *((void *)&v76 + 1) = &type metadata for USBDescriptorControl;
    int v66 = v18;
    BYTE2(v75) = v18;
    int v65 = v19;
    LOWORD(v75) = v19;
    uint64_t v20 = Mirror.init(reflecting:)(&v75);
    __int128 v21 = v5;
    uint64_t v22 = (void *)Mirror.children.getter(v20);
    uint64_t v24 = v22[2];
    uint64_t v23 = v22[3];
    uint64_t v25 = v22[4];
    uint64_t v26 = v22[5];
    uint64_t v27 = swift_getObjectType(v24);
    swift_unknownObjectRetain(v24);
    swift_unknownObjectRetain(v25);
    __int128 v28 = (void *)dispatch thunk of _AnyIndexBox._typeID.getter(v27, v23);
    uint64_t v29 = swift_getObjectType(v25);
    if (v28 != (void *)dispatch thunk of _AnyIndexBox._typeID.getter(v29, v26))
    {
      __break(1u);
LABEL_41:

      *(void *)&__int128 v77 = 0LL;
      __int128 v75 = 0u;
      __int128 v76 = 0u;
      a1 = v63;
LABEL_24:
      sub_10001BD9C((uint64_t)&v75, a1);
      return;
    }

    char v30 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v25, v26, v27, v23);
    swift_unknownObjectRelease(v25, v31);
    if ((v30 & 1) != 0)
    {
      swift_unknownObjectRelease(v24, v32);
      __int128 v76 = 0u;
      __int128 v77 = 0u;
      __int128 v75 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v24, v23);
      __int128 v75 = v72;
      __int128 v76 = v73;
      __int128 v77 = v74;
      swift_unknownObjectRelease(v24, v33);
    }

    char v5 = v21;
    swift_release(v22);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v21, v69);
    if (!*((void *)&v77 + 1))
    {
      sub_1000178B0((uint64_t)&v75, &qword_100113CD0);
      goto LABEL_10;
    }

    uint64_t v34 = *((void *)&v75 + 1);
    uint64_t v35 = v75;
    sub_100017A40(v64);
    if (!v34) {
      goto LABEL_10;
    }
    if (v35 == 0x726F7463656C6573LL && v34 == 0xE800000000000000LL) {
      break;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v34, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v34);
    if ((v36 & 1) != 0)
    {
      uint64_t v34 = v67;
      goto LABEL_29;
    }

LABEL_43:
    sub_1000178B0((uint64_t)&v75, &qword_100113E98);
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    *(void *)&__int128 v74 = 0LL;
    a1 = v63;
    goto LABEL_23;
  }

  __break(1u);
}

                  unint64_t v95 = &v87;
                  __chkstk_darwin(v66);
                  uint64_t v68 = sub_10001CDF8();
                  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( &v102,  &type metadata for Int,  v68,  ObjectType,  v32);
                  uint64_t v69 = dispatch thunk of static Comparable.< infix(_:_:)( v29,  (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType,  *(void *)(*(void *)(v32 + 32) + 8LL));
                  ((void (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                  ((void (*)(char *, uint64_t))v1)(v29, ObjectType);
                  if ((v69 & 1) != 0) {
                    goto LABEL_48;
                  }
                  goto LABEL_51;
                }

    uint64_t v88 = v221 + 3;
    uint64_t v87 = v222 - 1;
    if (v222 == (char *)1)
    {
      swift_bridgeObjectRelease_n(v86, 2LL);
      uint64_t v117 = _swiftEmptyArrayStorage;
      uint64_t ObjectType = v228;
      goto LABEL_90;
    }
  }

  swift_bridgeObjectRelease(v220);
LABEL_59:
  LODWORD(v97) = v217 | ((_DWORD)v218 << 16);
  swift_bridgeObjectRelease(v86);
  swift_bridgeObjectRelease(v110);
  uint64_t v102 = sub_10004F514(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  id v93 = v102[2];
  __int128 v103 = v102[3];
  __int128 v100 = (__int128 **)(v93 + 1);
  uint64_t ObjectType = v228;
  id v94 = v211;
  if (v93 < v103 >> 1) {
    goto LABEL_60;
  }
LABEL_153:
  uint64_t v102 = sub_10004F514((void *)(v103 > 1), (int64_t)v100, 1, v102);
LABEL_60:
  uint64_t v118 = v214;
  v102[2] = v100;
  v205 = v102;
  int v119 = (char *)v102 + 3 * v93;
  v119[34] = BYTE2(v97);
  *((_WORD *)v119 + 16) = (_WORD)v97;
  __int128 v100 = (__int128 **)(v118 + 11);
  unint64_t v97 = (const char **)(v118 + 13);
  v217 = &v234;
  swift_bridgeObjectRetain_n(v118, 2LL);
  int v120 = v214;
  uint64_t v121 = 1LL;
  v215 = (__int128 *)(v216 | 0x8000000000000000LL);
  __int128 v103 = (unint64_t)v204;
  uint64_t v122 = 1;
  uint64_t v123 = v212;
  while (2)
  {
    id v126 = *(__int128 **)v103;
    if (*(void *)v103)
    {
      uint64_t v127 = *((void *)v126 + 2);
      if (v127)
      {
        v209 = v122;
        v210 = v121;
        uint64_t v128 = *v100;
        v207 = *v97;
        swift_bridgeObjectRetain(v207);
        swift_bridgeObjectRetain_n(v126, 2LL);
        v208 = v128;
        swift_bridgeObjectRetain(v128);
        unsigned int v129 = 32LL;
        v218 = (unint64_t)v126;
        while (1)
        {
          v227 = v127;
          v222 = (char *)v129;
          uint64_t v130 = (unsigned __int16 *)((char *)v126 + v129);
          id v131 = *((unsigned __int8 *)v130 + 2);
          unint64_t v132 = *v130;
          *((void *)&v234 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v221) = v131;
          BYTE2(v23swift_unknownObjectWeakDestroy(v0 + 3) = v131;
          LODWORD(v22_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v132;
          LOWORD(v23swift_unknownObjectWeakDestroy(v0 + 3) = v132;
          objc_super v133 = Mirror.init(reflecting:)(&v233);
          id v94 = (void *)Mirror.children.getter(v133);
          uint64_t v135 = v94[2];
          uint64_t v134 = v94[3];
          __int128 v136 = (__int128 **)v94[4];
          unint64_t v97 = (const char **)v94[5];
          uint64_t ObjectType = (unsigned __int8 **)swift_getObjectType(v135);
          swift_unknownObjectRetain(v135);
          swift_unknownObjectRetain(v136);
          id v93 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v134);
          __int128 v137 = swift_getObjectType(v136);
          __int128 v100 = v136;
          if (v93 != dispatch thunk of _AnyIndexBox._typeID.getter(v137, v97)) {
            break;
          }
          __int128 v138 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v136, v97, ObjectType, v134);
          swift_unknownObjectRelease(v136, v139);
          if ((v138 & 1) != 0)
          {
            swift_unknownObjectRelease(v135, v140);
            v234 = 0u;
            v235 = 0u;
            v233 = 0u;
          }

          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter(v135, v134);
            v233 = v230;
            v234 = v231;
            v235 = v232;
            swift_unknownObjectRelease(v135, v141);
          }

          uint64_t ObjectType = v228;
          uint64_t v142 = v226;
          id v126 = (__int128 *)v218;
          swift_release(v94);
          ((void (*)(char *, uint64_t))v219)(v225, v142);
          if (*((void *)&v235 + 1))
          {
            __int128 v143 = (__int128 *)*((void *)&v233 + 1);
            id v144 = v233;
            sub_100017A40(v217);
            if (v143)
            {
              id v93 = v220 | ((_DWORD)v221 << 16);
              if (v144 == 0xD000000000000016LL && v143 == v215)
              {
                swift_bridgeObjectRelease(v207);
                swift_bridgeObjectRelease(v208);
                swift_bridgeObjectRelease(v126);
                goto LABEL_82;
              }

              char v145 = _stringCompareWithSmolCheck(_:_:expecting:)( v144,  v143,  0xD000000000000016LL,  v216 | 0x8000000000000000LL,  0LL);
              swift_bridgeObjectRelease(v143);
              if ((v145 & 1) != 0)
              {
                swift_bridgeObjectRelease(v207);
                swift_bridgeObjectRelease(v208);
                __int128 v143 = v126;
LABEL_82:
                swift_bridgeObjectRelease(v126);
                swift_bridgeObjectRelease(v143);
                int v120 = v214;
                id v94 = v211;
                uint64_t v123 = v212;
                uint64_t v121 = v210;
                LOBYTE(v12swift_unknownObjectWeakDestroy(v0 + 2) = v209;
                goto LABEL_83;
              }
            }
          }

          else
          {
            sub_100058DF4((uint64_t)&v233);
          }

          unsigned int v129 = (uint64_t)(v222 + 3);
          uint64_t v127 = v227 - 1;
          if (v227 == 1)
          {
            swift_bridgeObjectRelease(v207);
            swift_bridgeObjectRelease(v208);
            __int128 v143 = v126;
            id v93 = 15728894LL;
            goto LABEL_82;
          }
        }

        __break(1u);
LABEL_148:
        __break(1u);
        goto LABEL_149;
      }
    }

    id v93 = 15728894LL;
LABEL_83:
    if (!v122)
    {
      if (v121 == v123)
      {
        swift_bridgeObjectRelease_n(v120, 2LL);
        goto LABEL_88;
      }

      uint64_t v122 = 0;
      goto LABEL_63;
    }

    if (v121 != v123)
    {
      uint64_t v122 = (~(_DWORD)v93 & 0xF000FE) != 0;
LABEL_63:
      uint64_t v124 = &v94[10 * v121];
      __int128 v100 = (__int128 **)(v124 + 7);
      __int128 v103 = (unint64_t)(v124 + 8);
      unint64_t v97 = (const char **)(v124 + 9);
      uint64_t v125 = __OFADD__(v121++, 1LL);
      if (v125) {
        goto LABEL_150;
      }
      continue;
    }

    break;
  }

  swift_bridgeObjectRelease_n(v120, 2LL);
  if ((~(_DWORD)v93 & 0xF000FE) != 0) {
    goto LABEL_89;
  }
LABEL_88:
  sub_1000516F0(&v233, 84LL);
LABEL_89:
  uint64_t v117 = v205;
LABEL_90:
  unint64_t v85 = v204;
LABEL_91:
  __int16 v146 = *v85;
  if (!*v85) {
    goto LABEL_142;
  }
  v205 = v117;
  char v147 = *(void *)(v146 + 16);
  if (!v147) {
    goto LABEL_141;
  }
  v217 = &v234;
  swift_bridgeObjectRetain_n(v146, 2LL);
  __int16 v148 = 32LL;
  v219 = (unint64_t)"Descriptors:audioProtocol:)";
  v216 = 0x80000001000CFB10LL;
  v221 = v146;
  while (2)
  {
    v227 = v147;
    v225 = (char *)v148;
    __int16 v149 = (unsigned __int16 *)(v146 + v148);
    char v150 = *(unsigned __int8 *)(v146 + v148 + 2);
    __int16 v151 = *v149;
    *((void *)&v234 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v22_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v150;
    BYTE2(v23swift_unknownObjectWeakDestroy(v0 + 3) = v150;
    LODWORD(v21_Block_object_dispose((const void *)(v30 - 136), 8) = v151;
    LOWORD(v23swift_unknownObjectWeakDestroy(v0 + 3) = v151;
    char v152 = Mirror.init(reflecting:)(&v233);
    id v94 = (void *)Mirror.children.getter(v152);
    __int16 v154 = v94[2];
    __int16 v153 = v94[3];
    char v155 = (__int128 **)v94[4];
    unint64_t v97 = (const char **)v94[5];
    uint64_t ObjectType = (unsigned __int8 **)swift_getObjectType(v154);
    swift_unknownObjectRetain(v154);
    swift_unknownObjectRetain(v155);
    id v93 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v153);
    __int16 v156 = swift_getObjectType(v155);
    __int128 v100 = v155;
    if (v93 != dispatch thunk of _AnyIndexBox._typeID.getter(v156, v97)) {
      goto LABEL_151;
    }
    char v157 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v155, v97, ObjectType, v153);
    swift_unknownObjectRelease(v155, v158);
    if ((v157 & 1) != 0)
    {
      swift_unknownObjectRelease(v154, v159);
      v234 = 0u;
      v235 = 0u;
      v233 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v154, v153);
      v233 = v230;
      v234 = v231;
      v235 = v232;
      swift_unknownObjectRelease(v154, v160);
    }

    uint64_t ObjectType = v228;
    unint64_t v161 = v226;
    objc_super v162 = v224;
    swift_release(v94);
    v222 = *(char **)(v162 + 8);
    ((void (*)(char *, uint64_t))v222)(v223, v161);
    if (!*((void *)&v235 + 1))
    {
      sub_100058DF4((uint64_t)&v233);
      __int16 v146 = v221;
      goto LABEL_95;
    }

    id v163 = (const char *)*((void *)&v233 + 1);
    id v164 = v233;
    sub_100017A40(v217);
    __int16 v146 = v221;
    if (!v163)
    {
LABEL_95:
      __int16 v148 = (uint64_t)(v225 + 3);
      char v147 = v227 - 1;
      if (v227 == 1)
      {
        swift_bridgeObjectRelease_n(v146, 2LL);
        goto LABEL_141;
      }

      continue;
    }

    break;
  }

  if (v164 != 0xD000000000000016LL || v163 != (const char *)v216)
  {
    uint64_t v165 = _stringCompareWithSmolCheck(_:_:expecting:)( v164,  v163,  0xD000000000000016LL,  v219 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRelease(v163);
    if ((v165 & 1) != 0)
    {
      id v163 = (const char *)v146;
      goto LABEL_108;
    }

    goto LABEL_95;
  }

  swift_bridgeObjectRelease(v221);
LABEL_108:
  uint64_t v166 = v218 | ((_DWORD)v220 << 16);
  swift_bridgeObjectRelease(v146);
  swift_bridgeObjectRelease(v163);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v205);
  id v94 = v211;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    v205 = sub_10004F514(0LL, v205[2] + 1LL, 1, v205);
  }
  uint64_t v168 = v214;
  v169 = v205;
  uint64_t v171 = v205[2];
  v170 = v205[3];
  if (v171 >= v170 >> 1)
  {
    v203 = sub_10004F514((void *)(v170 > 1), v171 + 1, 1, v205);
    uint64_t v168 = v214;
    v169 = v203;
  }

  v169[2] = v171 + 1;
  v205 = v169;
  v172 = (char *)v169 + 3 * v171;
  v172[34] = BYTE2(v166);
  *((_WORD *)v172 + 16) = v166;
  __int128 v100 = (__int128 **)(v168 + 11);
  unint64_t v97 = (const char **)(v168 + 13);
  v220 = &v234;
  swift_bridgeObjectRetain_n(v168, 2LL);
  uint64_t v173 = v214;
  v174 = 1LL;
  v218 = v219 | 0x8000000000000000LL;
  id v175 = 1;
  objc_super v176 = v212;
  objc_super v177 = v204;
  while (2)
  {
    objc_super v178 = *v177;
    if (*v177)
    {
      objc_super v179 = *(void *)(v178 + 16);
      if (v179)
      {
        LODWORD(v21_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v175;
        v180 = *v100;
        unint64_t v181 = *v97;
        v215 = (__int128 *)v174;
        v216 = (unint64_t)v181;
        swift_bridgeObjectRetain(v181);
        swift_bridgeObjectRetain_n(v178, 2LL);
        v217 = v180;
        swift_bridgeObjectRetain(v180);
        v182 = 32LL;
        v221 = v178;
        while (1)
        {
          v227 = v179;
          v225 = (char *)v182;
          uint64_t v183 = (unsigned __int16 *)(v178 + v182);
          uint64_t v184 = *((unsigned __int8 *)v183 + 2);
          uint64_t v185 = *v183;
          *((void *)&v234 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v224) = v184;
          BYTE2(v23swift_unknownObjectWeakDestroy(v0 + 3) = v184;
          LODWORD(v22swift_unknownObjectWeakDestroy(v0 + 3) = v185;
          LOWORD(v23swift_unknownObjectWeakDestroy(v0 + 3) = v185;
          uint64_t v186 = Mirror.init(reflecting:)(&v233);
          id v94 = (void *)Mirror.children.getter(v186);
          uint64_t v188 = v94[2];
          uint64_t v187 = v94[3];
          uint64_t v189 = (__int128 **)v94[4];
          unint64_t v97 = (const char **)v94[5];
          id v93 = swift_getObjectType(v188);
          swift_unknownObjectRetain(v188);
          swift_unknownObjectRetain(v189);
          uint64_t ObjectType = (unsigned __int8 **)dispatch thunk of _AnyIndexBox._typeID.getter(v93, v187);
          uint64_t v190 = swift_getObjectType(v189);
          __int128 v100 = v189;
          v191 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v189, v97, v93, v187);
          swift_unknownObjectRelease(v189, v192);
          if ((v191 & 1) != 0)
          {
            swift_unknownObjectRelease(v188, v193);
            v234 = 0u;
            v235 = 0u;
            v233 = 0u;
          }

          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter(v188, v187);
            v233 = v230;
            v234 = v231;
            v235 = v232;
            swift_unknownObjectRelease(v188, v194);
          }

          uint64_t ObjectType = v228;
          v195 = v229;
          v196 = v226;
          objc_super v178 = v221;
          swift_release(v94);
          ((void (*)(char *, uint64_t))v222)(v195, v196);
          if (*((void *)&v235 + 1))
          {
            v197 = *((void *)&v233 + 1);
            v198 = v233;
            sub_100017A40(v220);
            if (v197)
            {
              id v93 = v223 | ((_DWORD)v224 << 16);
              if (v198 == 0xD000000000000016LL && v197 == v218)
              {
                swift_bridgeObjectRelease(v216);
                swift_bridgeObjectRelease(v217);
                swift_bridgeObjectRelease(v178);
                goto LABEL_134;
              }

              v199 = _stringCompareWithSmolCheck(_:_:expecting:)( v198,  v197,  0xD000000000000016LL,  v219 | 0x8000000000000000LL,  0LL);
              swift_bridgeObjectRelease(v197);
              if ((v199 & 1) != 0)
              {
                swift_bridgeObjectRelease(v216);
                swift_bridgeObjectRelease(v217);
                v197 = v178;
LABEL_134:
                swift_bridgeObjectRelease(v178);
                swift_bridgeObjectRelease(v197);
                uint64_t v173 = v214;
                v174 = (uint64_t)v215;
                id v94 = v211;
                objc_super v176 = v212;
                LOBYTE(v175) = v210;
                goto LABEL_135;
              }
            }
          }

          else
          {
            sub_100058DF4((uint64_t)&v233);
          }

          v182 = (uint64_t)(v225 + 3);
          objc_super v179 = v227 - 1;
          if (v227 == 1)
          {
            swift_bridgeObjectRelease(v216);
            swift_bridgeObjectRelease(v217);
            v197 = v178;
            id v93 = 15728894LL;
            goto LABEL_134;
          }
        }
      }
    }

    id v93 = 15728894LL;
LABEL_135:
    if (!v175)
    {
      if (v174 == v176)
      {
        swift_bridgeObjectRelease_n(v173, 2LL);
        goto LABEL_140;
      }

      id v175 = 0;
      goto LABEL_115;
    }

    if (v174 != v176)
    {
      id v175 = (~(_DWORD)v93 & 0xF000FE) != 0;
LABEL_115:
      __int128 v103 = (unint64_t)&v94[10 * v174];
      __int128 v100 = (__int128 **)(v103 + 56);
      objc_super v177 = (uint64_t *)(v103 + 64);
      unint64_t v97 = (const char **)(v103 + 72);
      uint64_t v125 = __OFADD__(v174++, 1LL);
      if (v125) {
        goto LABEL_152;
      }
      continue;
    }

    break;
  }

  swift_bridgeObjectRelease_n(v173, 2LL);
  if ((~(_DWORD)v93 & 0xF000FE) != 0) {
    goto LABEL_141;
  }
LABEL_140:
  sub_1000516F0(&v233, 84LL);
LABEL_141:
  uint64_t v117 = v205;
LABEL_142:
  v200 = v239;
  uint64_t v115 = sub_100051240((uint64_t)v239);
  swift_bridgeObjectRelease(v200);
  uint64_t v116 = v117;
  if (!v117[2])
  {
    swift_bridgeObjectRelease(v117);
    uint64_t v116 = 0LL;
  }

  id v113 = v213;
  int v114 = (unsigned __int8 *)v214;
  if (!v115[2])
  {
    v201 = v115;
    v202 = v116;
    swift_release(v201);
    uint64_t v116 = v202;
    id v113 = v213;
    int v114 = (unsigned __int8 *)v214;
    uint64_t v115 = 0LL;
  }

      int v66 = &v120;
      if (v58) {
        goto LABEL_45;
      }
      goto LABEL_47;
    }

    uint64_t v0 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v17, v18, ObjectType, v16);
    swift_unknownObjectRelease(v17, v22);
    if ((v0 & 1) != 0)
    {
      swift_unknownObjectRelease(v15, v23);
      uint64_t v116 = 0u;
      uint64_t v117 = 0u;
      uint64_t v115 = 0u;
    }

    else
    {
      uint64_t v0 = v14;
      dispatch thunk of _AnyCollectionBox.subscript.getter(v15, v16);
      uint64_t v115 = v114[0];
      uint64_t v116 = v114[1];
      uint64_t v117 = v114[2];
      swift_unknownObjectRelease(v15, v24);
    }

    char v5 = v13;
    swift_release(v14);
    (*((void (**)(_BYTE *, _BYTE *))v109 + 1))(v13, v110);
    if (!*((void *)&v117 + 1))
    {
      sub_1000178B0((uint64_t)&v115, &qword_100113CD0);
      goto LABEL_5;
    }

    uint64_t v25 = (_BYTE *)*((void *)&v115 + 1);
    uint64_t v0 = v115;
    sub_100017A40(v105);
    if (!v25) {
      goto LABEL_5;
    }
    if (v0 == 0xD000000000000016LL && v25 == (_BYTE *)v103) {
      break;
    }
    uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v25, 0xD000000000000016LL, v104 | 0x8000000000000000LL, 0LL);
    swift_bridgeObjectRelease(v25);
    if ((v0 & 1) != 0)
    {
      uint64_t v25 = v108;
      goto LABEL_21;
    }

  swift_bridgeObjectRelease(a2);
  if (v18)
  {

    *(void *)(v6 + 104) = v18;
    *(void *)(v6 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v17;
    return;
  }

  uint64_t v13 = v6 + 144;
  a6 = v37;
LABEL_51:
  uint64_t v31 = sub_10000AE14();
  uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
  *(_BYTE *)uint64_t v33 = 81;
  *(void *)(v33 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v33 + 16) = 0xE000000000000000LL;
  *(void *)(v33 + 24) = 0xD000000000000042LL;
  *(void *)(v33 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D3930LL;
  *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000028LL;
  *(void *)(v33 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D2560LL;
  *(void *)(v33 + 56) = 346LL;
  swift_willThrow(v32);

  swift_release(v17);
  uint64_t v34 = *(void *)(v6 + 80);
  uint64_t v35 = *(void *)(v6 + 88);
  swift_bridgeObjectRelease(*(void *)(v6 + 72));
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(*(void *)(v6 + 96));
  swift_bridgeObjectRelease(*(void *)(v6 + 128));
  swift_weakDestroy(v13);
  Swift::Int active = type metadata accessor for ActiveStreamingAltInterface();
  swift_deallocPartialClassInstance(v6, active, 152LL, 7LL);
}

uint64_t type metadata accessor for ActiveSelectorUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore18ActiveSelectorUnit);
}

uint64_t sub_10001BD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t ActiveSelectorUnit.latencyControlSelector.getter()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 96);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t ObjectType = swift_getObjectType(result);
    BOOL v5 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3) == 32;
    swift_unknownObjectRelease(v2, v6);
    return (2 * v5);
  }

  return result;
}

uint64_t ActiveSelectorUnit.cluster.getter()
{
  unint64_t v97 = (char **)type metadata accessor for Mirror(0LL);
  unint64_t v96 = (char **)*(v97 - 1);
  __chkstk_darwin(v97);
  uint64_t v3 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v0 + 96, v108, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 96);
  if (!Strong)
  {
    unint64_t v17 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 1;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0x72657473756C63LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE700000000000000LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v19 + 56) = 77LL;
    swift_willThrow(v18);
    goto LABEL_31;
  }

  uint64_t v5 = Strong;
  uint64_t ObjectType = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 64);
  if (*(void *)(v7 + 16) != 1LL)
  {
    uint64_t v91 = (char **)v0;
    uint64_t v20 = *(void *)(v0 + 72);
    if (v20)
    {
      __int128 v21 = *(char ***)(v20 + 16);
      if (v21)
      {
        uint64_t v88 = v7;
        uint64_t v89 = ObjectType;
        uint64_t v90 = v5;
        uint64_t v92 = (char *)&v106;
        swift_bridgeObjectRetain(v20);
        uint64_t v23 = 32LL;
        unint64_t v95 = v22;
        while (1)
        {
          uint64_t v98 = v21;
          int v24 = *((unsigned __int8 *)v22 + v23 + 2);
          int v25 = *(unsigned __int16 *)((char *)v22 + v23);
          *((void *)&v106 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v94) = v24;
          BYTE2(v105) = v24;
          LODWORD(v9swift_unknownObjectWeakDestroy(v0 + 3) = v25;
          LOWORD(v105) = v25;
          uint64_t v26 = Mirror.init(reflecting:)(&v105);
          uint64_t v27 = v3;
          uint64_t v1 = Mirror.children.getter(v26);
          __int128 v28 = *(void (**)(char *))(v1 + 16);
          uint64_t v29 = *(char **)(v1 + 24);
          uint64_t v30 = *(void *)(v1 + 32);
          uint64_t v31 = *(void *)(v1 + 40);
          uint64_t ObjectType = swift_getObjectType(v28);
          swift_unknownObjectRetain(v28);
          swift_unknownObjectRetain(v30);
          uint64_t v32 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v29);
          uint64_t v33 = swift_getObjectType(v30);
          if (v32 != dispatch thunk of _AnyIndexBox._typeID.getter(v33, v31)) {
            break;
          }
          char v34 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v30, v31, ObjectType, v29);
          swift_unknownObjectRelease(v30, v35);
          if ((v34 & 1) != 0)
          {
            swift_unknownObjectRelease(v28, v36);
            __int128 v106 = 0u;
            __int128 v107 = 0u;
            __int128 v105 = 0u;
          }

          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter(v28, v29);
            __int128 v105 = v102;
            __int128 v106 = v103;
            __int128 v107 = v104;
            swift_unknownObjectRelease(v28, v37);
          }

          uint64_t v3 = v27;
          swift_release(v1);
          ((void (*)(char *, char **))v96[1])(v27, v97);
          if (*((void *)&v107 + 1))
          {
            uint64_t v38 = (char **)*((void *)&v105 + 1);
            uint64_t v39 = v105;
            sub_100017A40(v92);
            if (v38)
            {
              if (v39 == 0x726F7463656C6573LL && v38 == (char **)0xE800000000000000LL)
              {
                swift_bridgeObjectRelease(v95);
LABEL_34:
                unsigned int v54 = v93 | ((_DWORD)v94 << 16);
                swift_bridgeObjectRelease(v38);
                uint64_t v55 = swift_getObjectType(v90);
                *((void *)&v106 + 1) = type metadata accessor for ActiveSelectorUnit();
                *(void *)&__int128 v107 = &protocol witness table for ActiveSelectorUnit;
                *(void *)&__int128 v105 = v91;
                uint64_t v56 = v89;
                uint64_t v57 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v89 + 144);
                swift_retain(v91);
                LOWORD(v54) = v57(v54 & 0xFFFFFF, 0LL, 0LL, &v105, v55, v56);
                uint64_t v27 = v58;
                sub_100017A40(&v105);
                ADCControlRequestParameterBlock.getCur()(v27, v54 & 0x1FF, (uint64_t)&v105);
                uint64_t ObjectType = *((void *)&v106 + 1);
                uint64_t v59 = v107;
                uint64_t v60 = sub_1000178EC(&v105, *((uint64_t *)&v106 + 1));
                uint64_t v98 = &v87;
                uint64_t v61 = *(void **)(ObjectType - 8);
                uint64_t v31 = v61[8];
                __chkstk_darwin(v60);
                unint64_t v62 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0LL;
                uint64_t v23 = (uint64_t)&v87 - v62;
                __int128 v28 = (void (*)(char *))v61[2];
                v28((char *)&v87 - v62);
                uint64_t v32 = *(void *)(v59 + 8);
                uint64_t v63 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v32);
                LOBYTE(v59) = v63;
                unint64_t v97 = &v87;
                __chkstk_darwin(v63);
                ((void (*)(char *, char *, uint64_t))v28)((char *)&v87 - v62, (char *)&v87 - v62, ObjectType);
                id v94 = v61;
                if ((v59 & 1) == 0)
                {
                  uint64_t v1 = v61[1];
                  ((void (*)(char *, uint64_t))v1)((char *)&v87 - v62, ObjectType);
                  goto LABEL_51;
                }

                uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                uint64_t v1 = v61[1];
                uint64_t v65 = ((uint64_t (*)(char *, uint64_t))v1)((char *)&v87 - v62, ObjectType);
                if (v64 <= 64) {
                  goto LABEL_51;
                }
                unint64_t v96 = &v87;
                __chkstk_darwin(v65);
                uint64_t v29 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                ((void (*)(char *, uint64_t, uint64_t))v28)(v29, v23, ObjectType);
                *(void *)&__int128 v102 = 0x8000000000000000LL;
                if ((dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v32) & 1) != 0)
                {
                  uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                  if (v66 < 64)
                  {
LABEL_47:
                    uint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v32);
                    ((void (*)(char *, uint64_t))v1)(v29, ObjectType);
                    if (v70 < (uint64_t)v102)
                    {
LABEL_48:
                      do
                      {
                        __break(1u);
LABEL_49:
                        unint64_t v95 = *(char ***)(*(void *)(v32 + 24) + 16LL);
                        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v95);
                        id v93 = &v87;
                        __chkstk_darwin(AssociatedTypeWitness);
                        uint64_t v87 = (char *)&v87 - v72;
                        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v95,  ObjectType,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        uint64_t v74 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
                        uint64_t v91 = &v87;
                        __chkstk_darwin(v74);
                        uint64_t v92 = (char *)((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                        int64_t v75 = (char *)&v87 - v92;
                        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v87, ObjectType, v95);
                        LODWORD(v95) = dispatch thunk of static Comparable.< infix(_:_:)( v29,  v75,  ObjectType,  *(void *)(*(void *)(v32 + 32) + 8LL));
                        uint64_t v76 = ((uint64_t (*)(int64_t, uint64_t))v1)(v75, ObjectType);
                        id v93 = &v87;
                        __chkstk_darwin(v76);
                        int64_t v0 = (char *)&v87 - v92;
                        ((void (*)(int64_t, char *, uint64_t))v94[4])( (char *)&v87 - v92,  v29,  ObjectType);
                        uint64_t v29 = (char *)v102;
                        uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v32);
                        ((void (*)(int64_t, uint64_t))v1)(v0, ObjectType);
                      }

                      while (v77 < (uint64_t)v29);
                    }

LABEL_51:
                    uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                    __chkstk_darwin(v78);
                    ((void (*)(char *, uint64_t, uint64_t))v28)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23,  ObjectType);
                    if (v78 >= 65)
                    {
                      uint64_t v79 = ((uint64_t (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                      goto LABEL_53;
                    }

                    uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                    ((void (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                    if (v83 == 64)
                    {
                      uint64_t v79 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v32);
                      if ((v79 & 1) == 0)
                      {
LABEL_53:
                        unint64_t v96 = &v87;
                        unint64_t v95 = &v87;
                        __chkstk_darwin(v79);
                        ((void (*)(char *, uint64_t, uint64_t))v28)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23,  ObjectType);
                        *(void *)&__int128 v102 = 0x7FFFFFFFFFFFFFFFLL;
                        char v80 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v32);
                        uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v32);
                        if ((v80 & 1) != 0)
                        {
                          if (v81 > 64)
                          {
                            __chkstk_darwin(v81);
                            unint64_t v82 = sub_10001CDF8();
                            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( &v102,  &type metadata for Int,  v82,  ObjectType,  v32);
                            int64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType,  *(void *)(*(void *)(v32 + 32) + 8LL));
                            ((void (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                            ((void (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                            if ((v0 & 1) != 0) {
                              goto LABEL_67;
                            }
                            goto LABEL_63;
                          }
                        }

                        else if (v81 > 63)
                        {
                          id v93 = &v87;
                          v101[0] = 0x7FFFFFFFFFFFFFFFLL;
                          __chkstk_darwin(v81);
                          unint64_t v84 = (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                          uint64_t v85 = ((uint64_t (*)(char *, char *, uint64_t))v94[4])(v84, v84, ObjectType);
                          __chkstk_darwin(v85);
                          unint64_t v86 = sub_10001CDF8();
                          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( v101,  &type metadata for Int,  v86,  ObjectType,  v32);
                          int64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)( v84,  v84,  ObjectType,  *(void *)(*(void *)(v32 + 32) + 8LL));
                          ((void (*)(char *, uint64_t))v1)(v84, ObjectType);
                          ((void (*)(char *, uint64_t))v1)(v84, ObjectType);
                          if ((v0 & 1) != 0) {
                            goto LABEL_67;
                          }
                          goto LABEL_63;
                        }

                        dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v32);
                        ((void (*)(char *, uint64_t))v1)( (char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL),  ObjectType);
                      }
                    }

          uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
          __break(1u);
          return result;
        }

LABEL_63:
                    int64_t v0 = v23;
                    uint64_t v8 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v32);
                    ((void (*)(uint64_t, uint64_t))v1)(v23, ObjectType);

                    sub_100017A40(&v105);
                    uint64_t v5 = v90;
                    uint64_t ObjectType = v89;
                    uint64_t v7 = v88;
                    goto LABEL_4;
                  }

      sub_100029834( 0xD000000000000017LL,  0x80000001000CECD0LL,  0x6E75467472617473LL,  (void *)0xEF29286E6F697463LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  359LL);
      sub_10007AE64();
      goto LABEL_64;
    }

  swift_bridgeObjectRelease(a1);
  uint64_t v13 = 0LL;
LABEL_64:
  uint64_t v130 = v13;
  uint64_t v5 = v123;
LABEL_65:
  if (!v19)
  {
    if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_67;
    }
    goto LABEL_81;
  }

LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  uint64_t result = ((uint64_t (*)(int64_t, uint64_t))v1)(v0, ObjectType);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  if ((v47 & 1) == 0)
  {
    uint64_t v58 = (void *)swift_unknownObjectWeakLoadStrong(v39);
    if (!v58)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    uint64_t v59 = v58;
    uint64_t v60 = [v58 timestampPeriod];

    uint64_t v61 = (double)v60;
    unint64_t v62 = OBJC_IVAR___AUAStream_sampleTime;
    *(double *)&a3[OBJC_IVAR___AUAStream_sampleTime] = *(double *)&a3[OBJC_IVAR___AUAStream_sampleTime] + v61;
    uint64_t v63 = swift_unknownObjectWeakLoadStrong(v39);
    if (!v63)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    uint64_t v64 = (void *)v63;
    uint64_t v65 = (char *)[*(id *)(v63 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) timeforUSBFrame:v43];

    if (is_mul_ok(v45, 0x3B9ACA00uLL))
    {
      uint64_t v66 = [a3 physicalFormat];
      if (!v66)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }

      char v67 = v66;
      [v66 sampleRate];
      char v69 = v68;

      uint64_t v70 = (double)(1000000000 * v45) / v69;
      if ((~*(void *)&v70 & 0x7FF0000000000000LL) != 0)
      {
        if (v70 > -1.0)
        {
          if (v70 < 1.84467441e19)
          {
            uint64_t v71 = (unint64_t)v70;
            if ((_DWORD)qword_1001172D0 != HIDWORD(qword_1001172D0))
            {
              if (!is_mul_ok(v71, HIDWORD(qword_1001172D0)))
              {
LABEL_60:
                __break(1u);
                goto LABEL_61;
              }

              if (!(_DWORD)qword_1001172D0)
              {
LABEL_61:
                __break(1u);
                goto LABEL_62;
              }

              uint64_t v71 = v71 * HIDWORD(qword_1001172D0) / qword_1001172D0;
            }

            uint64_t v72 = __CFADD__(v65, v71);
            __int128 v73 = (os_log_s *)&v65[v71];
            if (!v72)
            {
              uint64_t v74 = swift_unknownObjectWeakLoadStrong(v39);
              if (!v74)
              {
LABEL_71:
                __break(1u);
                return;
              }

              int64_t v75 = (void *)v74;
              AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)( v73,  *(void *)&a3[OBJC_IVAR___AUAStream_timeStampSeed],  (uint64_t)a3,  *(double *)&a3[v62]);

              goto LABEL_47;
            }

unint64_t sub_10001CDF8()
{
  unint64_t result = qword_100113EC8;
  if (!qword_100113EC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100113EC8);
  }

  return result;
}

uint64_t ActiveSelectorUnit.audioControlsAndProperties(scope:for:)(unsigned int a1, void *a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v121 = (void *)type metadata accessor for Mirror(0LL);
  uint64_t v114 = *(v121 - 1);
  __chkstk_darwin(v121);
  uint64_t v9 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (uint64_t)(v2 + 12);
  swift_beginAccess(v2 + 12, v120, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 12);
  if (!Strong)
  {
    unint64_t v42 = sub_10000AE14();
    uint64_t v43 = swift_allocError(&type metadata for AUAError, v42, 0LL, 0LL);
    *(_BYTE *)uint64_t v44 = 1;
    *(void *)(v44 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v44 + 16) = 0xE000000000000000LL;
    *(void *)(v44 + 24) = 0xD000000000000026LL;
    *(void *)(v44 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE0F0LL;
    *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v44 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v44 + 56) = 117LL;
    swift_willThrow(v43);
    return v10;
  }

  uint64_t v13 = Strong;
  uint64_t v14 = v5[8];
  if (*(void *)(v14 + 16) < 2uLL || (uint64_t v15 = (void *)v5[9]) == 0LL)
  {
    swift_unknownObjectRelease(Strong, v12);
    return 0LL;
  }

  uint64_t v112 = v9;
  id v113 = v15;
  uint64_t v16 = v5[13];
  uint64_t ObjectType = swift_getObjectType(Strong);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 24);
  __n128 v19 = swift_bridgeObjectRetain(v113);
  uint64_t v20 = v18(ObjectType, v16, v19);
  __int128 v21 = v113;
  uint64_t v10 = v20;
  if (!v113[2])
  {
LABEL_22:
    swift_bridgeObjectRelease(v21);
    unint64_t v45 = sub_10000AE14();
    uint64_t v46 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
    *(_BYTE *)uint64_t v47 = 12;
    *(void *)(v47 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v47 + 16) = 0xE000000000000000LL;
    *(void *)(v47 + 24) = 0xD000000000000026LL;
    *(void *)(v47 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE0F0LL;
    *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v47 + 56) = 121LL;
    swift_willThrow(v46);
    swift_unknownObjectRelease(v13, v48);
    uint64_t v49 = v10;
LABEL_23:
    swift_release(v49);
    return v10;
  }

  *(void *)&__int128 v115 = v113[2];
  uint64_t v102 = ObjectType;
  uint64_t v104 = v16;
  uint64_t v100 = v14;
  id v101 = a2;
  __int128 v103 = v5;
  unsigned int v108 = a1;
  uint64_t v106 = v20;
  uint64_t v107 = v13;
  uint64_t v105 = v4;
  uint64_t v109 = &v118;
  swift_bridgeObjectRetain(v113);
  uint64_t v22 = 32LL;
  while (1)
  {
    int v23 = *((unsigned __int8 *)v21 + v22 + 2);
    int v24 = *(unsigned __int16 *)((char *)v21 + v22);
    *((void *)&v118 + 1) = &type metadata for USBDescriptorControl;
    int v110 = v24;
    int v111 = v23;
    BYTE2(v117) = v23;
    LOWORD(v117) = v24;
    uint64_t v25 = Mirror.init(reflecting:)(&v117);
    uint64_t v26 = Mirror.children.getter(v25);
    uint64_t v27 = *(void **)(v26 + 16);
    uint64_t v28 = *(void *)(v26 + 24);
    uint64_t v30 = *(void *)(v26 + 32);
    uint64_t v29 = *(void *)(v26 + 40);
    uint64_t v31 = swift_getObjectType(v27);
    swift_unknownObjectRetain(v27);
    swift_unknownObjectRetain(v30);
    uint64_t v32 = dispatch thunk of _AnyIndexBox._typeID.getter(v31, v28);
    uint64_t v33 = swift_getObjectType(v30);
    if (v32 != dispatch thunk of _AnyIndexBox._typeID.getter(v33, v29))
    {
      __break(1u);
      goto LABEL_50;
    }

    char v34 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v30, v29, v31, v28);
    swift_unknownObjectRelease(v30, v35);
    if ((v34 & 1) != 0)
    {
      swift_unknownObjectRelease(v27, v36);
      __int128 v118 = 0u;
      __int128 v119 = 0u;
      __int128 v117 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v27, v28);
      __int128 v117 = v116[0];
      __int128 v118 = v116[1];
      __int128 v119 = v116[2];
      swift_unknownObjectRelease(v27, v37);
    }

    swift_release(v26);
    (*(void (**)(char *, void *))(v114 + 8))(v112, v121);
    if (*((void *)&v119 + 1)) {
      break;
    }
    sub_1000178B0((uint64_t)&v117, &qword_100113CD0);
LABEL_7:
    v22 += 3LL;
    *(void *)&__int128 v115 = v115 - 1;
    __int128 v21 = v113;
    if (!(void)v115)
    {
      swift_bridgeObjectRelease(v113);
      __int128 v21 = v113;
      uint64_t v13 = v107;
      uint64_t v10 = v106;
      goto LABEL_22;
    }
  }

  uint64_t v38 = (void *)*((void *)&v117 + 1);
  uint64_t v39 = v117;
  sub_100017A40(v109);
  if (!v38) {
    goto LABEL_7;
  }
  if (v39 != 0x726F7463656C6573LL || v38 != (void *)0xE800000000000000LL)
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v38, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v38);
    if ((v40 & 1) != 0)
    {
      unint64_t v41 = v113;
      uint64_t v38 = v113;
      goto LABEL_26;
    }

    goto LABEL_7;
  }

  uint64_t v51 = v113;
  swift_bridgeObjectRelease(v113);
  unint64_t v41 = v51;
LABEL_26:
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v38);
  uint64_t v52 = v104;
  uint64_t v53 = v107;
  uint64_t v54 = v102;
  uint64_t v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 16))(v102, v104);
  uint64_t v10 = v105;
  uint64_t v56 = v108;
  uint64_t v22 = (uint64_t)v103;
  if (!v55)
  {
    unint64_t v61 = sub_10000AE14();
    uint64_t v62 = swift_allocError(&type metadata for AUAError, v61, 0LL, 0LL);
    *(_BYTE *)uint64_t v63 = 51;
    *(void *)(v63 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v63 + 16) = 0xE000000000000000LL;
    *(void *)(v63 + 24) = 0xD000000000000026LL;
    *(void *)(v63 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE0F0LL;
    *(void *)(v63 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v63 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v63 + 56) = 122LL;
    swift_willThrow(v62);
    swift_unknownObjectRelease(v53, v64);
    uint64_t v49 = v106;
    goto LABEL_23;
  }

  uint64_t v57 = (void *)v55;
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  *((void *)&v118 + 1) = active;
  *(void *)&__int128 v119 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&__int128 v117 = v22;
  swift_retain(v22);
  uint64_t v121 = sub_10002C6EC((uint64_t)&v117, v54, v52);
  uint64_t v60 = v10;
  if (v10)
  {
    swift_unknownObjectRelease(v53, v59);
    swift_release(v106);

    sub_100017A40(&v117);
    return v10;
  }

  id v113 = v57;
  uint64_t v114 = active;
  sub_100017A40(&v117);
  uint64_t v65 = v121[2];
  uint64_t v66 = _swiftEmptyArrayStorage;
  if (v65)
  {
    uint64_t v105 = 0LL;
    swift_bridgeObjectRetain(v121);
    unint64_t v68 = (void *)(v67 + 48);
    while (1)
    {
      uint64_t v70 = *v68;
      if (v108 == 1869968496) {
        break;
      }
      if (v108 == 1768845428)
      {
        uint64_t v71 = *(v68 - 2);
        goto LABEL_38;
      }

uint64_t sub_10001D87C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType(a3);
  sub_10002C5BC(a2, ObjectType, a4, (uint64_t)v28);
  if (!v29)
  {
LABEL_7:
    sub_1000178B0((uint64_t)v28, &qword_100113E98);
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v32 = 0LL;
    goto LABEL_9;
  }

  uint64_t v12 = sub_100008E00(&qword_100113B28);
  uint64_t v13 = sub_100008E00(&qword_100113B30);
  if ((swift_dynamicCast(&v30, v28, v12, v13, 6LL) & 1) == 0)
  {
    uint64_t v32 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    goto LABEL_9;
  }

  if (*((void *)&v31 + 1))
  {
    sub_10000AF84(&v30, (uint64_t)&v33);
    uint64_t v14 = v35;
    uint64_t v15 = v36;
    sub_1000178EC(&v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v15 + 56))(v14, v15);
    unint64_t v17 = v16;
    sub_100017A40(&v33);
    BOOL v18 = __OFADD__(a1++, 1LL);
    if (!v18) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_7;
  }

uint64_t type metadata accessor for AUAStreamSelectorControl()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore24AUAStreamSelectorControl);
}

uint64_t sub_10001DB6C()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v0 + 72);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 16)) == 0)
  {
LABEL_17:
    unint64_t v30 = sub_10000AE14();
    uint64_t v31 = swift_allocError(&type metadata for AUAError, v30, 0LL, 0LL);
    *(_BYTE *)uint64_t v32 = 12;
    *(void *)(v32 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v32 + 16) = 0xE000000000000000LL;
    *(void *)(v32 + 24) = 0x2928727543746567LL;
    *(void *)(v32 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
    *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v32 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    uint64_t v33 = 184LL;
    goto LABEL_18;
  }

  uint64_t v46 = v0;
  uint64_t v45 = v2;
  uint64_t v47 = &v59;
  swift_bridgeObjectRetain(v6);
  uint64_t v9 = 32LL;
  uint64_t v50 = v8;
  while (1)
  {
    uint64_t v61 = v7;
    uint64_t v53 = v9;
    uint64_t v10 = (unsigned __int16 *)(v8 + v9);
    int v11 = *((unsigned __int8 *)v10 + 2);
    LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *v10;
    *((void *)&v59 + 1) = &type metadata for USBDescriptorControl;
    int v48 = (int)v10;
    int v49 = v11;
    BYTE2(v5_Block_object_dispose((const void *)(v30 - 136), 8) = v11;
    LOWORD(v5_Block_object_dispose((const void *)(v30 - 136), 8) = (_WORD)v10;
    uint64_t v12 = Mirror.init(reflecting:)(&v58);
    uint64_t v13 = v5;
    uint64_t v14 = (void *)Mirror.children.getter(v12);
    uint64_t v15 = v14[2];
    uint64_t v16 = v14[3];
    uint64_t v17 = v14[4];
    uint64_t v18 = v14[5];
    uint64_t ObjectType = swift_getObjectType(v15);
    swift_unknownObjectRetain(v15);
    swift_unknownObjectRetain(v17);
    uint64_t v20 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v16);
    uint64_t v21 = swift_getObjectType(v17);
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v21, v18);
    if (v20 != result)
    {
      __break(1u);
      return result;
    }

    char v23 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v17, v18, ObjectType, v16);
    swift_unknownObjectRelease(v17, v24);
    if ((v23 & 1) != 0)
    {
      swift_unknownObjectRelease(v15, v25);
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v58 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v15, v16);
      __int128 v58 = v55;
      __int128 v59 = v56;
      __int128 v60 = v57;
      swift_unknownObjectRelease(v15, v26);
    }

    uint64_t v5 = v13;
    swift_release(v14);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v52);
    if (!*((void *)&v60 + 1))
    {
      sub_1000178B0((uint64_t)&v58, &qword_100113CD0);
      goto LABEL_5;
    }

    uint64_t v27 = *((void *)&v58 + 1);
    uint64_t v28 = v58;
    sub_100017A40(v47);
    if (!v27) {
      goto LABEL_5;
    }
    if (v28 == 0x726F7463656C6573LL && v27 == 0xE800000000000000LL) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) != 0)
    {
      uint64_t v27 = v50;
      goto LABEL_21;
    }

void *ActiveSelectorUnit.deinit()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  sub_10001AA14((uint64_t)(v0 + 12));
  return v0;
}

uint64_t ActiveSelectorUnit.__deallocating_deinit()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  sub_10001AA14((uint64_t)(v0 + 12));
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t sub_10001E074@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001E0AC((uint64_t (*)(void))sub_10001B6C4, a1);
}

uint64_t sub_10001E080()
{
  return ActiveSelectorUnit.cluster.getter();
}

uint64_t sub_10001E0A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001E0AC((uint64_t (*)(void))sub_10001B56C, a1);
}

uint64_t sub_10001E0AC@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(_BYTE *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v16 = *(_WORD *)(*v2 + 40);
  char v8 = *(_BYTE *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v10 = *(_WORD *)(*v2 + 56);
  uint64_t v11 = *(void *)(*v2 + 64);
  uint64_t v12 = *(void *)(v4 + 72);
  uint64_t v13 = *(void *)(v4 + 80);
  a2[3] = (uint64_t)&type metadata for SelectorUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100103958, 88LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v16;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  return swift_bridgeObjectRetain(v12);
}

uint64_t sub_10001E184()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 96, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 96);
}

uint64_t sub_10001E1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 96;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 104) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

uint64_t (*sub_10001E230(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 96, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 96);
  uint64_t v6 = *(void *)(v4 + 104);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001B55C;
}

void sub_10001E2A0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 104) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 96, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10001E310()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 96;
  swift_beginAccess(v2, v8, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 104);
    uint64_t ObjectType = swift_getObjectType(result);
    LODWORD(v5) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5) == 32;
    swift_unknownObjectRelease(v4, v7);
    return (2 * v5);
  }

  return result;
}

uint64_t sub_10001E390(unsigned int a1, void *a2)
{
  return ActiveSelectorUnit.audioControlsAndProperties(scope:for:)(a1, a2);
}

void sub_10001E3B0(char a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit] = a2;
  *(_DWORD *)&v7[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection] = a3;
  v26.receiver = v7;
  v26.super_class = (Class)type metadata accessor for AUAStreamSelectorControl();
  swift_retain(a2);
  uint64_t v14 = (char *)objc_msgSendSuper2( &v26,  "initWithIsSettable:forElement:inScope:withPlugin:andObjectClassID:",  a1 & 1,  0,  a5,  a7,  a6);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = v14;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0) {
      uint64_t v21 = a4;
    }
    else {
      uint64_t v21 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    id v22 = v14;
    swift_bridgeObjectRetain(a4);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v21);
    if (v16) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease_n(a4, 2LL);
    char v23 = &v15[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection];
    swift_beginAccess(&v15[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection], v25, 32LL, 0LL);
    uint64_t v24 = v15;
    [v24 setSelectedValues:v23 withCount:1];
    swift_endAccess(v25);

    swift_release(a2);
    return;
  }

  uint64_t v16 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v17 = v14;
  swift_bridgeObjectRetain(a4);
  if (!v16) {
    goto LABEL_14;
  }
LABEL_4:
  if (v16 >= 1)
  {
    for (uint64_t i = 0LL; i != v16; ++i)
    {
      if ((a4 & 0xC000000000000001LL) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a4);
      }
      else {
        id v19 = *(id *)(a4 + 8 * i + 32);
      }
      uint64_t v20 = v19;
      [v15 addValue:v19];
    }

    goto LABEL_14;
  }

  __break(1u);
LABEL_16:
  __break(1u);
}

void sub_10001E570(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = *(void *)(a4 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit);
  v13[3] = type metadata accessor for ActiveSelectorUnit();
  v13[4] = &protocol witness table for ActiveSelectorUnit;
  v13[0] = v10;
  swift_retain(v10);
  sub_10002C7D0(a3 & 0xFFFFFF, 0LL, 0, v13, a5, ObjectType, a2);
  sub_100017A40(v13);
  uint64_t v11 = (unsigned int *)(a4 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection);
  swift_beginAccess(a4 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection, v13, 1LL, 0LL);
  *uint64_t v11 = a5;
  AUAAudioDevice.publishStreamFormats()();
  if (v12)
  {
    sub_100029840( 0xD00000000000001ALL,  0x80000001000CE2F0LL,  0xD00000000000001ALL,  (void *)0x80000001000CE2B0LL,  0xD000000000000022LL,  0x80000001000CE090LL,  254LL);
    swift_errorRelease(v12);
  }

uint64_t sub_10001E6F8()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v40 = *(void *)(v3 - 8);
  uint64_t v41 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit) + 72LL);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 16)) == 0)
  {
LABEL_17:
    unint64_t v29 = sub_10000AE14();
    uint64_t v30 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
    *(_BYTE *)uint64_t v31 = 12;
    *(void *)(v31 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v31 + 16) = 0xE000000000000000LL;
    *(void *)(v31 + 24) = 0xD000000000000015LL;
    *(void *)(v31 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE220LL;
    *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v31 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v31 + 56) = 268LL;
    return swift_willThrow(v30);
  }

  v35[1] = *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit);
  uint64_t v36 = v2;
  v35[0] = v0;
  int v37 = &v46;
  swift_bridgeObjectRetain(v6);
  uint64_t v9 = 32LL;
  uint64_t v38 = v8;
  uint64_t v39 = v5;
  while (1)
  {
    uint64_t v48 = v7;
    __int16 v10 = *(_WORD *)(v8 + v9);
    char v11 = *(_BYTE *)(v8 + v9 + 2);
    *((void *)&v46 + 1) = &type metadata for USBDescriptorControl;
    BYTE2(v45) = v11;
    LOWORD(v45) = v10;
    uint64_t v12 = Mirror.init(reflecting:)(&v45);
    uint64_t v13 = (void *)Mirror.children.getter(v12);
    uint64_t v14 = v13[2];
    uint64_t v15 = v13[3];
    uint64_t v16 = v13[4];
    uint64_t v17 = v13[5];
    uint64_t ObjectType = swift_getObjectType(v14);
    swift_unknownObjectRetain(v14);
    swift_unknownObjectRetain(v16);
    uint64_t v19 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v15);
    uint64_t v20 = swift_getObjectType(v16);
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v20, v17);
    if (v19 != result)
    {
      __break(1u);
      return result;
    }

    char v22 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v16, v17, ObjectType, v15);
    swift_unknownObjectRelease(v16, v23);
    if ((v22 & 1) != 0)
    {
      swift_unknownObjectRelease(v14, v24);
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v45 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v14, v15);
      __int128 v45 = v42;
      __int128 v46 = v43;
      __int128 v47 = v44;
      swift_unknownObjectRelease(v14, v25);
    }

    swift_release(v13);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
    if (!*((void *)&v47 + 1))
    {
      sub_1000178B0((uint64_t)&v45, &qword_100113CD0);
      goto LABEL_5;
    }

    uint64_t v26 = *((void *)&v45 + 1);
    uint64_t v27 = v45;
    sub_100017A40(v37);
    if (!v26) {
      goto LABEL_5;
    }
    if (v27 == 0x726F7463656C6573LL && v26 == 0xE800000000000000LL) {
      break;
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v26);
    if ((v28 & 1) != 0)
    {
      uint64_t v26 = v38;
      goto LABEL_20;
    }

id sub_10001EA68()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAStreamSelectorControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10001EAA8()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit) + 32LL);
}

uint64_t sub_10001EAC0()
{
  return sub_10001E6F8();
}

void *sub_10001EAE0(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v23))
  {
    uint64_t v4 = 0LL;
    unint64_t v5 = v2 & 0xC000000000000001LL;
    uint64_t v28 = v2;
    uint64_t v29 = OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit;
    uint64_t v25 = v2 + 32;
    unint64_t v26 = v2 & 0xC000000000000001LL;
    uint64_t v27 = v3;
    while (1)
    {
      id v6 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2) : *(id *)(v25 + 8 * v4);
      uint64_t v7 = v6;
      if (__OFADD__(v4++, 1LL)) {
        break;
      }
      uint64_t v9 = type metadata accessor for AUAStream(0LL);
      uint64_t v10 = swift_dynamicCastClass(v7, v9);
      if (v10
        && (uint64_t v11 = v10, v12 = *(void *)(v10 + OBJC_IVAR___AUAStream_path + 16), (v13 = *(void *)(v12 + 16)) != 0))
      {
        uint64_t v14 = (void *)(v12 + 32);
        uint64_t v15 = *(void *)(*(void *)(a2 + v29) + 32LL);
        id v16 = v7;
        swift_bridgeObjectRetain(v12);
        while (1)
        {
          uint64_t v18 = v14[3];
          uint64_t v17 = v14[4];
          sub_1000178EC(v14, v18);
          v14 += 5;
          if (!--v13)
          {

            swift_bridgeObjectRelease(v12);
            uint64_t v3 = v27;
            uint64_t v2 = v28;
            goto LABEL_18;
          }
        }

        uint64_t v19 = swift_bridgeObjectRelease(v12);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        unint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v20 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        uint64_t v3 = v27;
        uint64_t v2 = v28;
        if (v21 >= v20 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
        }
        uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v11);
        specialized Array._endMutation()(v22);
LABEL_18:
        unint64_t v5 = v26;
        if (v4 == v3) {
          goto LABEL_25;
        }
      }

      else
      {

        if (v4 == v3) {
          goto LABEL_25;
        }
      }
    }

    __break(1u);
LABEL_21:
    if (v2 < 0) {
      uint64_t v23 = v2;
    }
    else {
      uint64_t v23 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
  }

char *sub_10001ED18(unsigned int *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [v2 owner];
  if (!v8) {
    return 0LL;
  }
  id v9 = v8;
  uint64_t v10 = type metadata accessor for AUAAudioDevice(0LL);
  uint64_t result = (char *)swift_dynamicCastClass(v9, v10);
  if (!result)
  {
LABEL_28:

    return 0LL;
  }

  if (!a1)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  unint64_t v12 = *a1;
  uint64_t v13 = *(void *)&v2[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit];
  if (*(void *)(*(void *)(v13 + 64) + 16LL) < v12)
  {
    unint64_t v14 = sub_10000AE14();
    uint64_t v15 = swift_allocError(&type metadata for AUAError, v14, 0LL, 0LL);
    uint64_t v17 = v15;
    *(_BYTE *)uint64_t v16 = 63;
    *(void *)(v16 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v16 + 16) = 0xE000000000000000LL;
    *(void *)(v16 + 24) = 0xD00000000000001ALL;
    *(void *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE2B0LL;
    *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    uint64_t v18 = 230LL;
LABEL_24:
    *(void *)(v16 + 56) = v18;
    swift_willThrow(v15);
LABEL_27:
    sub_100029840( 0xD00000000000001CLL,  0x80000001000CE2D0LL,  0xD00000000000001ALL,  (void *)0x80000001000CE2B0LL,  0xD000000000000022LL,  0x80000001000CE090LL,  259LL);
    swift_errorRelease(v17);
    goto LABEL_28;
  }

  uint64_t v19 = *(char **)&result[OBJC_IVAR___AUAAudioDevice_function];
  if (!v19)
  {
    unint64_t v45 = sub_10000AE14();
    uint64_t v15 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
    uint64_t v17 = v15;
    *(_BYTE *)uint64_t v16 = 61;
    *(void *)(v16 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v16 + 16) = 0xE000000000000000LL;
    *(void *)(v16 + 24) = 0xD00000000000001ALL;
    *(void *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE2B0LL;
    *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    uint64_t v18 = 231LL;
    goto LABEL_24;
  }

  uint64_t v20 = *(void *)(v13 + 72);
  if (!v20 || (uint64_t v21 = *(void *)(v20 + 16)) == 0)
  {
    swift_unknownObjectRetain(*(void *)&result[OBJC_IVAR___AUAAudioDevice_function]);
LABEL_26:
    unint64_t v46 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
    *(_BYTE *)uint64_t v47 = 12;
    *(void *)(v47 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v47 + 16) = 0xE000000000000000LL;
    *(void *)(v47 + 24) = 0xD00000000000001ALL;
    *(void *)(v47 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE2B0LL;
    *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE090LL;
    *(void *)(v47 + 56) = 232LL;
    swift_willThrow(v17);
    swift_unknownObjectRelease(v19, v48);
    goto LABEL_27;
  }

  id v67 = v2;
  unint64_t v66 = v12;
  id v68 = result;
  id v69 = v9;
  uint64_t v65 = *(void *)&result[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t v70 = v19;
  uint64_t v71 = &v82;
  swift_unknownObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  uint64_t v22 = 32LL;
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  uint64_t v76 = v20;
  while (1)
  {
    uint64_t v77 = v21;
    int v24 = *(unsigned __int8 *)(v20 + v22 + 2);
    int v25 = *(unsigned __int16 *)(v20 + v22);
    *((void *)&v82 + 1) = &type metadata for USBDescriptorControl;
    int v72 = v25;
    int v73 = v24;
    BYTE2(v81) = v24;
    LOWORD(v81) = v25;
    uint64_t v26 = Mirror.init(reflecting:)(&v81);
    uint64_t v27 = v7;
    uint64_t v28 = (void *)Mirror.children.getter(v26);
    uint64_t v29 = v28[2];
    uint64_t v30 = v28[3];
    unint64_t v32 = v28[4];
    uint64_t v31 = v28[5];
    uint64_t ObjectType = swift_getObjectType(v29);
    swift_unknownObjectRetain(v29);
    swift_unknownObjectRetain(v32);
    uint64_t v34 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v30);
    uint64_t v35 = swift_getObjectType(v32);
    uint64_t v36 = (char *)v32;
    if (v34 != dispatch thunk of _AnyIndexBox._typeID.getter(v35, v31))
    {
      __break(1u);
      goto LABEL_41;
    }

    char v37 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v32, v31, ObjectType, v30);
    swift_unknownObjectRelease(v32, v38);
    if ((v37 & 1) != 0)
    {
      swift_unknownObjectRelease(v29, v39);
      __int128 v82 = 0u;
      __int128 v83 = 0u;
      __int128 v81 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v29, v30);
      __int128 v81 = v78;
      __int128 v82 = v79;
      __int128 v83 = v80;
      swift_unknownObjectRelease(v29, v40);
    }

    uint64_t v41 = v74;
    swift_release(v28);
    uint64_t v7 = v27;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v27, v41);
    if (!*((void *)&v83 + 1))
    {
      sub_1000178B0((uint64_t)&v81, &qword_100113CD0);
      uint64_t v23 = v77;
      goto LABEL_11;
    }

    uint64_t v42 = *((void *)&v81 + 1);
    uint64_t v43 = v81;
    sub_100017A40(v71);
    uint64_t v23 = v77;
    if (!v42) {
      goto LABEL_11;
    }
    if (v43 == 0x726F7463656C6573LL && v42 == 0xE800000000000000LL) {
      break;
    }
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v42, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v42);
    if ((v44 & 1) != 0)
    {
      uint64_t v42 = v76;
      goto LABEL_31;
    }

unint64_t sub_10001F430()
{
  unint64_t result = qword_100113B00;
  if (!qword_100113B00)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASDStream);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100113B00);
  }

  return result;
}

uint64_t sub_10001F46C(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 64LL, 7LL);
}

void sub_10001F4A0()
{
}

uint64_t sub_10001F4C0()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100017A94(v0, qword_1001171E0);
  sub_100008EC4(v0, (uint64_t)qword_1001171E0);
  return OSSignposter.init(subsystem:category:)( 0xD000000000000013LL,  0x80000001000CC390LL,  0x7669746341415541LL,  0xEE006B636F6C4365LL);
}

Swift::Int32 *pipeStall.unsafeMutableAddressor()
{
  return &pipeStall;
}

BOOL static LockDelay.LockDelayUnits.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LockDelay.LockDelayUnits.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int LockDelay.LockDelayUnits.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_10001F5C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10001F5DC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001F620()
{
}

Swift::Int sub_10001F648(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t ActiveClockSource.rateRanges.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t ActiveClockSource.rateRanges.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*ActiveClockSource.rateRanges.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSource.isSettable.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ActiveClockSource.isSettable.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 25, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 25) = a1;
  return result;
}

uint64_t (*ActiveClockSource.isSettable.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t ActiveClockSource.staticClockSource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001F7F0(v1 + 32, a1);
}

uint64_t sub_10001F7F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveClockSource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain(*(void *)(v0 + 104));
  return v1;
}

uint64_t ActiveClockSource.controls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t ActiveClockSource.isValid.getter()
{
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t ActiveClockSource.isValid.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 120, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a1;
  return result;
}

uint64_t (*ActiveClockSource.isValid.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSource.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 128);
}

uint64_t ActiveClockSource.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign(v2 + 128, a1);
  return swift_unknownObjectRelease(a1, v5);
}

uint64_t (*ActiveClockSource.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 128, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 128);
  uint64_t v5 = *(void *)(v1 + 136);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10001FA18;
}

uint64_t ActiveClockSource.staticClockEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001FAA4((uint64_t (*)(void))sub_10001FA28, a1);
}

unint64_t sub_10001FA28()
{
  unint64_t result = qword_100114050;
  if (!qword_100114050)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSource, &type metadata for ClockSource);
    atomic_store(result, (unint64_t *)&qword_100114050);
  }

  return result;
}

uint64_t sub_10001FA6C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t ActiveClockSource.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001FAA4((uint64_t (*)(void))sub_10001FB68, a1);
}

uint64_t sub_10001FAA4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  __int16 v15 = *(_WORD *)(v2 + 32);
  char v4 = *(_BYTE *)(v2 + 34);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v7 = *(_WORD *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(_BYTE *)(v2 + 80);
  char v11 = *(_BYTE *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  a2[3] = (uint64_t)&type metadata for ClockSource;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100103A80, 80LL, 7LL);
  *a2 = v13;
  *(_BYTE *)(v13 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_WORD *)(v13 + 16) = v15;
  *(void *)(v13 + 24) = v5;
  *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(void *)(v13 + 56) = v9;
  *(_BYTE *)(v13 + 64) = v10;
  *(_BYTE *)(v13 + 65) = v11;
  *(void *)(v13 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  swift_bridgeObjectRetain(v9);
  return swift_bridgeObjectRetain(v8);
}

unint64_t sub_10001FB68()
{
  unint64_t result = qword_100114058;
  if (!qword_100114058)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSource, &type metadata for ClockSource);
    atomic_store(result, (unint64_t *)&qword_100114058);
  }

  return result;
}

uint64_t ActiveStreamingAltInterface.subFrameSize.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ActiveClockSource.isInternal.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ActiveClockSource.isSynchronizedToSOF.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t ActiveOutputTerminal.terminalID.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_10001FBCC(void *a1, uint64_t a2, char *a3, uint64_t ObjectType)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v51 = a2;
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v57 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 16) = 0LL;
  *(_BYTE *)(v4 + 24) = 0;
  *(_BYTE *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
  uint64_t v14 = v4 + 128;
  *(void *)(v4 + 136) = 0LL;
  swift_unknownObjectWeakInit(v4 + 128, 0LL);
  uint64_t v15 = v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  if (qword_1001128E8 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v16 = type metadata accessor for OSSignposter(0LL);
    uint64_t v17 = sub_100008EC4(v16, (uint64_t)qword_1001171E0);
    uint64_t v18 = OSSignposter.logHandle.getter(v17);
    OSSignpostID.init(log:)(v18);
    *(void *)(v7 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp) = 0LL;
    uint64_t v19 = v7 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
    *(void *)uint64_t v19 = 0LL;
    *(_BYTE *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    uint64_t v20 = *(void *)(ObjectType + 16);
    if (!v20) {
      break;
    }
    uint64_t v48 = a3;
    int v49 = a1;
    uint64_t v46 = v14;
    uint64_t v47 = v15;
    v45[1] = v6;
    uint64_t v50 = v7;
    uint64_t v52 = &v63;
    swift_bridgeObjectRetain();
    uint64_t v21 = 32LL;
    uint64_t v55 = ObjectType;
    while (1)
    {
      uint64_t v65 = v20;
      uint64_t v58 = v21;
      uint64_t v22 = (unsigned __int16 *)(ObjectType + v21);
      int v23 = *((unsigned __int8 *)v22 + 2);
      int v24 = *v22;
      *((void *)&v63 + 1) = &type metadata for USBDescriptorControl;
      int v53 = v24;
      int v54 = v23;
      BYTE2(v6swift_unknownObjectWeakDestroy(v0 + 2) = v23;
      LOWORD(v6swift_unknownObjectWeakDestroy(v0 + 2) = v24;
      uint64_t v25 = Mirror.init(reflecting:)(&v62);
      a3 = v13;
      a1 = (void *)Mirror.children.getter(v25);
      uint64_t v6 = a1[2];
      uint64_t v14 = a1[3];
      uint64_t v7 = a1[4];
      uint64_t v15 = a1[5];
      uint64_t ObjectType = swift_getObjectType(v6);
      swift_unknownObjectRetain(v6);
      swift_unknownObjectRetain(v7);
      uint64_t v13 = (char *)dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v14);
      uint64_t v26 = swift_getObjectType(v7);
      char v27 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v7, v15, ObjectType, v14);
      swift_unknownObjectRelease(v7, v28);
      if ((v27 & 1) != 0)
      {
        swift_unknownObjectRelease(v6, v29);
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        __int128 v62 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v6, v14);
        __int128 v62 = v59;
        __int128 v63 = v60;
        __int128 v64 = v61;
        swift_unknownObjectRelease(v6, v30);
      }

      uint64_t ObjectType = v55;
      uint64_t v13 = a3;
      swift_release(a1);
      (*(void (**)(char *, uint64_t))(v56 + 8))(a3, v57);
      if (*((void *)&v64 + 1))
      {
        uint64_t v31 = *((void *)&v62 + 1);
        uint64_t v32 = v62;
        sub_100017A40(v52);
        if (v31)
        {
          if (v32 == 0x636E657571657266LL && v31 == 0xE900000000000079LL)
          {
            swift_bridgeObjectRelease(ObjectType);
            goto LABEL_20;
          }

          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 0x636E657571657266LL, 0xE900000000000079LL, 0LL);
          swift_bridgeObjectRelease(v31);
          if ((v33 & 1) != 0)
          {
            uint64_t v31 = ObjectType;
LABEL_20:
            char v39 = v53;
            swift_bridgeObjectRelease(v31);
            char v40 = LockDelay.units.getter(v39);
            uint64_t v7 = v50;
            *(_BYTE *)(v50 + 25) = v40 & 1;
            uint64_t v41 = v49;
            __int128 v42 = v49[1];
            *(_OWORD *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *v49;
            *(_OWORD *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v42;
            __int128 v43 = v41[3];
            *(_OWORD *)(v7 + 64) = v41[2];
            *(_OWORD *)(v7 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v43;
            *(void *)(v7 + 96) = v51;
            *(void *)(v7 + 104) = v48;
            *(void *)(v7 + 11swift_unknownObjectWeakDestroy(v0 + 2) = ObjectType;
            return v7;
          }
        }
      }

      else
      {
        sub_1000178B0((uint64_t)&v62, &qword_100113CD0);
      }

      uint64_t v21 = v58 + 3;
      uint64_t v20 = v65 - 1;
      if (v65 == 1)
      {
        swift_bridgeObjectRelease_n(ObjectType, 2LL);
        swift_bridgeObjectRelease(v48);
        sub_100028B0C((uint64_t)v49);
        uint64_t v7 = v50;
        uint64_t v15 = v47;
        uint64_t v14 = v46;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_23:
    swift_once(&qword_1001128E8, sub_10001F4C0);
  }

  swift_bridgeObjectRelease(ObjectType);
  swift_bridgeObjectRelease(a3);
  sub_100028B0C((uint64_t)a1);
LABEL_18:
  unint64_t v34 = sub_10000AE14();
  uint64_t v35 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
  *(_BYTE *)uint64_t v36 = 13;
  *(void *)(v36 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v36 + 16) = 0xE000000000000000LL;
  *(void *)(v36 + 24) = 0xD000000000000026LL;
  *(void *)(v36 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE870LL;
  *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
  *(void *)(v36 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
  *(void *)(v36 + 56) = 55LL;
  swift_willThrow(v35);
  swift_bridgeObjectRelease(*(void *)(v7 + 16));
  sub_10001AA14(v14);
  uint64_t v37 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(v15, v37);
  uint64_t active = type metadata accessor for ActiveClockSource(0LL);
  swift_deallocPartialClassInstance( v7,  active,  *(unsigned int *)(*(void *)v7 + 48LL),  *(unsigned __int16 *)(*(void *)v7 + 52LL));
  return v7;
}

void *sub_10002009C()
{
  uint64_t v2 = v1;
  uint64_t v58 = type metadata accessor for Mirror(0LL);
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v52 = v0;
    uint64_t v51 = v2;
    int v53 = &v65;
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = 32LL;
    unint64_t v56 = v7;
    while (1)
    {
      uint64_t v59 = v8;
      *(void *)&__int128 v60 = v6;
      uint64_t v9 = (unsigned __int16 *)(v7 + v8);
      int v10 = *((unsigned __int8 *)v9 + 2);
      LODWORD(v9) = *v9;
      *((void *)&v65 + 1) = &type metadata for USBDescriptorControl;
      int v55 = v10;
      BYTE2(v64) = v10;
      int v54 = (int)v9;
      LOWORD(v64) = (_WORD)v9;
      uint64_t v11 = Mirror.init(reflecting:)(&v64);
      uint64_t v12 = v4;
      uint64_t v13 = (void *)Mirror.children.getter(v11);
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3];
      uint64_t v17 = v13[4];
      uint64_t v16 = v13[5];
      uint64_t ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      swift_unknownObjectRetain(v17);
      uint64_t v19 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v15);
      uint64_t v20 = swift_getObjectType(v17);
      if (v19 != dispatch thunk of _AnyIndexBox._typeID.getter(v20, v16)) {
        break;
      }
      uint64_t v0 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v17, v16, ObjectType, v15);
      swift_unknownObjectRelease(v17, v21);
      if ((v0 & 1) != 0)
      {
        swift_unknownObjectRelease(v14, v22);
        __int128 v65 = 0u;
        __int128 v66 = 0u;
        __int128 v64 = 0u;
      }

      else
      {
        uint64_t v0 = (uint64_t)v13;
        dispatch thunk of _AnyCollectionBox.subscript.getter(v14, v15);
        __int128 v64 = v63[0];
        __int128 v65 = v63[1];
        __int128 v66 = v63[2];
        swift_unknownObjectRelease(v14, v23);
      }

      uint64_t v4 = v12;
      swift_release(v13);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
      if (*((void *)&v66 + 1))
      {
        uint64_t v24 = *((void *)&v64 + 1);
        uint64_t v0 = v64;
        sub_100017A40(v53);
        if (v24)
        {
          if (v0 == 0x636E657571657266LL && v24 == 0xE900000000000079LL)
          {
            swift_bridgeObjectRelease(v56);
            unint64_t v25 = 0xE900000000000079LL;
LABEL_19:
            swift_bridgeObjectRelease(v25);
            uint64_t v30 = v52;
            swift_beginAccess(v52 + 128, v63, 0LL, 0LL);
            uint64_t Strong = swift_unknownObjectWeakLoadStrong(v30 + 128);
            if (Strong)
            {
              uint64_t v0 = Strong;
              int v32 = v54 | (v55 << 16);
              uint64_t v33 = *(void *)(v30 + 136);
              uint64_t v34 = swift_getObjectType(Strong);
              *((void *)&v65 + 1) = type metadata accessor for ActiveClockSource(0LL);
              *(void *)&__int128 v66 = &protocol witness table for ActiveClockSource;
              *(void *)&__int128 v64 = v30;
              uint64_t v35 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v33 + 160);
              swift_retain(v30);
              uint64_t v36 = v51;
              __int16 v37 = v35(v32 & 0xFFFFFF, 0LL, 0LL, &v64, v34, v33);
              char v39 = v38;
              swift_unknownObjectRelease(v0, v38);
              sub_100017A40(&v64);
              if (!v36)
              {
                if (USBDescriptorControl.pbLayout()() == AUASDCore_tADCControlRequestParameterBlockLayout_Layout3PB)
                {
                  uint64_t v40 = sub_100067DD0(v37 & 0x1FF, v39);
                  uint64_t v41 = v40;
                  int64_t v42 = *(void *)(v40 + 16);
                  if (v42)
                  {
                    id v67 = _swiftEmptyArrayStorage;
                    sub_100070548(0, v42, 0);
                    uint64_t v59 = v41;
                    uint64_t v43 = v41 + 32;
                    do
                    {
                      sub_100017910(v43, (uint64_t)&v64);
                      sub_100020678(&v64, &v61);
                      sub_100017A40(&v64);
                      __int128 v60 = v61;
                      uint64_t v44 = v62;
                      uint64_t v0 = (uint64_t)v67;
                      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
                      {
                        sub_100070548(0, *(void *)(v0 + 16) + 1LL, 1);
                        uint64_t v0 = (uint64_t)v67;
                      }

                      unint64_t v46 = *(void *)(v0 + 16);
                      unint64_t v45 = *(void *)(v0 + 24);
                      if (v46 >= v45 >> 1)
                      {
                        sub_100070548(v45 > 1, v46 + 1, 1);
                        uint64_t v0 = (uint64_t)v67;
                      }

                      *(void *)(v0 + 16) = v46 + 1;
                      uint64_t v47 = v0 + 24 * v46;
                      *(_OWORD *)(v47 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v60;
                      *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v44;
                      v43 += 40LL;
                      --v42;
                    }

                    while (v42);
                    swift_bridgeObjectRelease(v59);
                  }

                  else
                  {
                    swift_bridgeObjectRelease(v40);

                    return _swiftEmptyArrayStorage;
                  }
                }

                else
                {
                  unint64_t v48 = sub_10000AE14();
                  uint64_t v49 = swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
                  *(_BYTE *)uint64_t v50 = 30;
                  *(void *)(v50 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v50 + 16) = 0xE000000000000000LL;
                  *(void *)(v50 + 24) = 0xD00000000000001ELL;
                  *(void *)(v50 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEA70LL;
                  *(void *)(v50 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
                  *(void *)(v50 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
                  *(void *)(v50 + 56) = 71LL;
                  swift_willThrow(v49);
                }
              }

              return (void *)v0;
            }

uint64_t sub_100020678@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __int128 v140 = a2;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  __int128 v141 = a1;
  sub_1000178EC(a1, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 8))(v148, v2, v3);
  uint64_t v5 = v149;
  uint64_t v4 = v150;
  uint64_t v6 = sub_1000178EC(v148, v149);
  unint64_t v7 = *(_BYTE **)(v5 - 8);
  uint64_t v8 = *((void *)v7 + 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  int v10 = &v130[-v9];
  uint64_t v11 = (void (*)(_BYTE *))*((void *)v7 + 2);
  v11(&v130[-v9]);
  uint64_t v12 = *(_BYTE **)(v4 + 8);
  char v13 = dispatch thunk of static BinaryInteger.isSigned.getter(v5, v12);
  __int128 v138 = (void (*)(void))&v130[-v9];
  if ((v13 & 1) != 0)
  {
    uint64_t v14 = *(void *)(*((void *)v12 + 3) + 16LL);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v14);
    __int128 v139 = v11;
    uint64_t v16 = AssociatedTypeWitness;
    __int128 v137 = v130;
    __chkstk_darwin(AssociatedTypeWitness);
    uint64_t v18 = &v130[-v17];
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v14,  v5,  v16,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v20 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v16,  AssociatedConformanceWitness);
    __int128 v136 = v130;
    __chkstk_darwin(v20);
    uint64_t v21 = v18;
    int v10 = v138;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v21, v5, v14);
    char v22 = dispatch thunk of static Comparable.>= infix(_:_:)( v10,  &v130[-v9],  v5,  *(void *)(*((void *)v12 + 4) + 8LL));
    uint64_t v11 = v139;
    (*((void (**)(_BYTE *, uint64_t))v7 + 1))(&v130[-v9], v5);
    if ((v22 & 1) == 0) {
      goto LABEL_46;
    }
  }

  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter(v5, v12);
  if (v23 >= 64)
  {
    __chkstk_darwin(v23);
    uint64_t v24 = &v130[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v11)(v24, v10, v5);
    v145[0] = -1LL;
    char v25 = dispatch thunk of static BinaryInteger.isSigned.getter(v5, v12);
    uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter(v5, v12);
    if ((v25 & 1) != 0)
    {
      if (v26 <= 64)
      {
        __int128 v136 = v130;
        __int128 v137 = *(_BYTE **)(*((void *)v12 + 3) + 16LL);
        uint64_t v27 = v137;
        uint64_t v28 = swift_getAssociatedTypeWitness(0LL, v137);
        uint64_t v134 = v130;
        __chkstk_darwin(v28);
        __int128 v139 = v11;
        uint64_t v30 = &v130[-v29];
        uint64_t v31 = swift_getAssociatedConformanceWitness( v27,  v5,  v28,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v32 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v28,  v31);
        objc_super v133 = v130;
        __chkstk_darwin(v32);
        unint64_t v33 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v30, v5, v137);
        uint64_t v135 = v12;
        char v34 = dispatch thunk of static Comparable.> infix(_:_:)( &v130[-v33],  &v130[-v33],  v5,  *(void *)(*((void *)v12 + 4) + 8LL));
        __int128 v137 = v7;
        uint64_t v35 = (uint64_t (*)(_BYTE *, uint64_t))*((void *)v7 + 1);
        uint64_t v36 = v35(&v130[-v33], v5);
        unint64_t v37 = v145[0];
        __chkstk_darwin(v36);
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v139)(&v130[-v33], &v130[-v33], v5);
        if ((v34 & 1) != 0)
        {
          uint64_t v12 = v135;
          unint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter(v5, v135);
          v35(&v130[-v33], v5);
          BOOL v39 = v37 >= v38;
          unint64_t v7 = v137;
          int v10 = v138;
          if (!v39) {
            goto LABEL_40;
          }
        }

        else
        {
          v35(&v130[-v33], v5);
          unint64_t v7 = v137;
          int v10 = v138;
          uint64_t v12 = v135;
        }

        goto LABEL_14;
      }

LABEL_24:
    __chkstk_darwin(v65);
    __int128 v79 = &v130[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    unint64_t v80 = sub_100028BF8();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v142, &type metadata for UInt, v80, v46, v52);
    char v81 = dispatch thunk of static Comparable.< infix(_:_:)(v79, v63, v46, *(void *)(*((void *)v52 + 4) + 8LL));
    int v73 = *(uint64_t (**)(_BYTE *, uint64_t))(v48 + 8);
    v73(v79, v46);
    if ((v81 & 1) != 0) {
      goto LABEL_40;
    }
LABEL_28:
    v73(v63, v46);
    goto LABEL_29;
  }

  if (v65 >= 65) {
    goto LABEL_24;
  }
  dispatch thunk of BinaryInteger._lowWord.getter(v46, v52);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v63, v46);
LABEL_29:
  uint64_t v51 = v136;
LABEL_30:
  uint64_t v82 = dispatch thunk of BinaryInteger._lowWord.getter(v46, v52);
  __int128 v83 = v51;
  Swift::String v84 = (void (*)(void))v82;
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v83, v46);
  uint64_t v85 = v141[3];
  uint64_t v86 = v141[4];
  sub_1000178EC(v141, v85);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v86 + 40))(v142, v85, v86);
  uint64_t v88 = v143;
  uint64_t v87 = v144;
  uint64_t v89 = sub_1000178EC(v142, v143);
  __int128 v141 = v130;
  uint64_t v90 = *(void *)(v88 - 8);
  uint64_t v91 = *(void *)(v90 + 64);
  __chkstk_darwin(v89);
  unint64_t v92 = (v91 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v93 = &v130[-v92];
  char v94 = *(void (**)(_BYTE *))(v90 + 16);
  v94(&v130[-v92]);
  int v95 = *(_BYTE **)(v87 + 8);
  char v96 = dispatch thunk of static BinaryInteger.isSigned.getter(v88, v95);
  __int128 v137 = &v130[-v92];
  __int128 v138 = v84;
  __int128 v136 = v94;
  if ((v96 & 1) != 0)
  {
    uint64_t v97 = *(void *)(*((void *)v95 + 3) + 16LL);
    uint64_t v98 = swift_getAssociatedTypeWitness(0LL, v97);
    uint64_t v135 = v130;
    __chkstk_darwin(v98);
    uint64_t v100 = &v130[-v99];
    uint64_t v101 = swift_getAssociatedConformanceWitness( v97,  v88,  v98,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v102 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v98,  v101);
    uint64_t v134 = v130;
    __chkstk_darwin(v102);
    __int128 v103 = v100;
    uint64_t v104 = v97;
    unint64_t v93 = v137;
    Swift::String v84 = v138;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v103, v88, v104);
    char v105 = dispatch thunk of static Comparable.>= infix(_:_:)( v93,  &v130[-v92],  v88,  *(void *)(*((void *)v95 + 4) + 8LL));
    char v94 = (void (*)(_BYTE *))v136;
    (*(void (**)(_BYTE *, uint64_t))(v90 + 8))(&v130[-v92], v88);
    if ((v105 & 1) == 0)
    {
LABEL_46:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      goto LABEL_47;
    }
  }

  uint64_t v106 = dispatch thunk of BinaryInteger.bitWidth.getter(v88, v95);
  if (v106 < 64)
  {
LABEL_45:
    uint64_t v128 = dispatch thunk of BinaryInteger._lowWord.getter(v88, v95);
    (*(void (**)(_BYTE *, uint64_t))(v90 + 8))(v93, v88);
    sub_100017A40(v142);
    sub_100017A40(v145);
    uint64_t result = sub_100017A40(v148);
    unsigned int v129 = v140;
    *__int128 v140 = v139;
    v129[1] = v84;
    v129[2] = v128;
    return result;
  }

  __chkstk_darwin(v106);
  uint64_t v107 = v93;
  unsigned int v108 = &v130[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v94)(v108, v107, v88);
  uint64_t v151 = -1LL;
  char v109 = dispatch thunk of static BinaryInteger.isSigned.getter(v88, v95);
  uint64_t v110 = dispatch thunk of BinaryInteger.bitWidth.getter(v88, v95);
  if ((v109 & 1) != 0)
  {
    if (v110 <= 64)
    {
      uint64_t v135 = v130;
      uint64_t v134 = *(_BYTE **)(*((void *)v95 + 3) + 16LL);
      int v111 = v134;
      uint64_t v112 = swift_getAssociatedTypeWitness(0LL, v134);
      objc_super v133 = v130;
      __chkstk_darwin(v112);
      uint64_t v114 = &v130[-v113];
      uint64_t v115 = swift_getAssociatedConformanceWitness( v111,  v88,  v112,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v116 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v112,  v115);
      unint64_t v132 = v130;
      __chkstk_darwin(v116);
      unint64_t v117 = (v91 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v114, v88, v134);
      uint64_t v134 = v95;
      int v131 = dispatch thunk of static Comparable.> infix(_:_:)( &v130[-v117],  &v130[-v117],  v88,  *(void *)(*((void *)v95 + 4) + 8LL));
      __int128 v118 = *(uint64_t (**)(_BYTE *, uint64_t))(v90 + 8);
      uint64_t v119 = v118(&v130[-v117], v88);
      uint64_t v120 = v151;
      __chkstk_darwin(v119);
      uint64_t v121 = &v130[-v117];
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v136)(&v130[-v117], &v130[-v117], v88);
      if ((v131 & 1) != 0)
      {
        unint64_t v122 = v120;
        int v95 = v134;
        unint64_t v123 = dispatch thunk of BinaryInteger._lowWord.getter(v88, v134);
        v118(v121, v88);
        if (v122 < v123) {
          goto LABEL_40;
        }
      }

      else
      {
        v118(&v130[-v117], v88);
        int v95 = v134;
      }

      goto LABEL_43;
    }
  }

  else if (v110 < 65)
  {
    dispatch thunk of BinaryInteger._lowWord.getter(v88, v95);
    (*(void (**)(_BYTE *, uint64_t))(v90 + 8))(v108, v88);
LABEL_44:
    unint64_t v93 = v137;
    Swift::String v84 = v138;
    goto LABEL_45;
  }

  __chkstk_darwin(v110);
  uint64_t v124 = &v130[-((v91 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v125 = sub_100028BF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v151, &type metadata for UInt, v125, v88, v95);
  char v126 = dispatch thunk of static Comparable.< infix(_:_:)(v124, v108, v88, *(void *)(*((void *)v95 + 4) + 8LL));
  __int128 v118 = *(uint64_t (**)(_BYTE *, uint64_t))(v90 + 8);
  v118(v124, v88);
  if ((v126 & 1) == 0)
  {
LABEL_43:
    v118(v108, v88);
    goto LABEL_44;
  }

      sub_1000178B0((uint64_t)&v74, &qword_100114528);
      goto LABEL_25;
    }

    int v10 = *(void *)(v9 + 32);
    swift_unknownObjectRetain(a1[2]);
    swift_retain(v10);
  }

  uint64_t v11 = swift_getObjectType(v7);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 168))(&v74, v10, v11, v8);
  swift_release(v10);
  swift_unknownObjectRelease(v7, v12);
  if (!*((void *)&v75 + 1)) {
    goto LABEL_12;
  }
  char v13 = sub_100008E00(&qword_100114530);
  uint64_t v14 = type metadata accessor for ActiveOutputTerminal();
  uint64_t result = swift_dynamicCast(v72, &v74, v13, v14, 6LL);
  if ((result & 1) != 0)
  {
    uint64_t v16 = v72[0];
    unint64_t v7 = *v6;
    if (*v6)
    {
      uint64_t v17 = a1[3];
      uint64_t v18 = swift_getObjectType(v7);
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 56);
      swift_unknownObjectRetain(v7);
      uint64_t v20 = v19(v18, v17);
      swift_unknownObjectRelease(v7, v21);
      swift_retain(v16);
      char v22 = v3;
      uint64_t v23 = sub_10008D06C(v20, v16);
      unint64_t v7 = v22;
      swift_bridgeObjectRelease(v20);
      swift_release(v16);
      if (v23[2])
      {
        uint64_t v24 = v23[4];
        char v25 = v23[5];
        uint64_t v26 = v23[6];
        swift_retain(v24);
        swift_retain(v25);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease(v23);
        uint64_t v28 = a1[2];
        uint64_t v27 = a1[3];
        swift_unknownObjectRetain(v28);
        swift_retain(v25);
        uint64_t v29 = sub_10008D1A4(v24, v25, v26, v28, v27);
        if (v7)
        {
          swift_release(v16);
          swift_bridgeObjectRelease(v26);
          swift_release(v24);
          swift_release_n(v25, 2LL);
          swift_unknownObjectRelease(v28, v31);
        }

        else
        {
          __int128 v63 = v29;
          swift_unknownObjectRelease(v28, v30);
          objc_allocWithZone((Class)type metadata accessor for AUAInputStream(0LL));
          char v64 = a2;
          uint64_t v65 = swift_retain(a1);
          unint64_t v7 = sub_10008D7B0(v65, v24, v25, v26, v16, v25, v63, v64);
          swift_release(a1);
          swift_bridgeObjectRelease(v26);
          swift_release(v25);
          swift_release(v24);
        }

        return v7;
      }

      swift_bridgeObjectRelease(v23);
      char v61 = sub_10000AE14();
      uint64_t v57 = swift_allocError(&type metadata for AUAError, v61, 0LL, 0LL);
      *(_BYTE *)uint64_t v58 = 93;
      *(void *)(v58 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v58 + 16) = 0xE000000000000000LL;
      *(void *)(v58 + 24) = 0xD00000000000001FLL;
      *(void *)(v58 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D19C0LL;
      *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
      *(void *)(v58 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
      uint64_t v59 = 229LL;
    }

    else
    {
      uint64_t v56 = sub_10000AE14();
      uint64_t v57 = swift_allocError(&type metadata for AUAError, v56, 0LL, 0LL);
      *(_BYTE *)uint64_t v58 = 93;
      *(void *)(v58 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v58 + 16) = 0xE000000000000000LL;
      *(void *)(v58 + 24) = 0xD00000000000001FLL;
      *(void *)(v58 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D19C0LL;
      *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
      *(void *)(v58 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
      uint64_t v59 = 239LL;
    }

    goto LABEL_30;
  }

        char v13 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      char v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = *(_WORD *)(*(void *)(v5 + 56) + 2 * v18);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v22);
      uint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      char v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v8 + 48) + 8 * v16) = v22;
      *(_WORD *)(*(void *)(v8 + 56) + 2 * v16) = v23;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  void *v3 = v8;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      char v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      char v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_10000AE58(v25, v38);
      }

      else
      {
        sub_100017294((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_10000AE58(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

        char v13 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }

      char v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      uint64_t v23 = *(_BYTE *)(*(void *)(v5 + 56) + v18);
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v22);
      uint64_t v24 = -1LL << *(_BYTE *)(v8 + 32);
      char v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v15 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(void *)(v8 + 56) + v16) = v23;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_41:
  void *v3 = v8;
  return result;
}

    unint64_t v7 = (v12 - 1) & v12;
    int v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    uint64_t v14 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    Hasher.init(_seed:)(v29, *(void *)(a2 + 40));
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v17);
    uint64_t result = Hasher._finalize()();
    uint64_t v18 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v19 = result & ~v18;
    if (((*(void *)(v8 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
      return 0LL;
    }
    uint64_t v20 = ~v18;
    while (1)
    {
      uint64_t v21 = (uint64_t *)(*(void *)(a2 + 48) + 24 * v19);
      char v22 = *v21;
      uint64_t v23 = v21[1];
      uint64_t v24 = v21[2];
      char v25 = v22 == v15 && v23 == v16;
      if (v25 && v24 == v17) {
        break;
      }
      uint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v8 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0) {
        return 0LL;
      }
    }
  }

  char v13 = v11 + 4;
  if (v13 >= v28) {
    return 1LL;
  }
  uint64_t v12 = *(void *)(v27 + 8 * v13);
  if (v12)
  {
    uint64_t v4 = v13;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v28) {
      return 1LL;
    }
    uint64_t v12 = *(void *)(v27 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }

LABEL_40:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_47:
  __break(1u);
  return result;
}

                __break(1u);
                return result;
              }

              uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)( v30,  v29,  0x726F7463656C6573LL,  0xE800000000000000LL,  0LL);
              swift_bridgeObjectRelease(v29);
              if ((v31 & 1) != 0)
              {
                uint64_t v29 = v8;
                goto LABEL_24;
              }
            }
          }

          else
          {
            sub_1000178B0((uint64_t)&v90, &qword_100113CD0);
          }

          uint64_t v12 = v85 + 3;
          uint64_t v11 = v86 - 1;
          if (v86 == 1)
          {
            swift_bridgeObjectRelease(v8);
            int v10 = v78;
            goto LABEL_21;
          }
        }

        __break(1u);
        goto LABEL_40;
      }
    }
  }

  return 0LL;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100021700()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = &v121[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  unint64_t v9 = &v121[-v8];
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v135 = *(_BYTE **)(v10 - 8);
  __int128 v136 = (_BYTE *)v10;
  __chkstk_darwin(v10);
  uint64_t v12 = &v121[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
LABEL_16:
    unint64_t v37 = sub_10000AE14();
    uint64_t v38 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v39 = 13;
    *(void *)(v39 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    *(void *)(v39 + 24) = 0xD000000000000013LL;
    *(void *)(v39 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE9D0LL;
    *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v39 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v39 + 56) = 85LL;
LABEL_17:
    swift_willThrow(v38);
    return (uint64_t)v12;
  }

  unsigned int v129 = v2;
  uint64_t v130 = v0;
  unint64_t v125 = v9;
  char v126 = v7;
  uint64_t v127 = v4;
  uint64_t v128 = v3;
  int v131 = &v141;
  swift_bridgeObjectRetain(v13);
  uint64_t v16 = 32LL;
  uint64_t v134 = v15;
  while (1)
  {
    __int128 v137 = (char *)v16;
    uint64_t v138 = v14;
    uint64_t v17 = (unsigned __int16 *)(v15 + v16);
    int v18 = *((unsigned __int8 *)v17 + 2);
    LODWORD(v17) = *v17;
    *((void *)&v141 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v13swift_unknownObjectWeakDestroy(v0 + 3) = v18;
    BYTE2(v14_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v18;
    LODWORD(v13swift_unknownObjectWeakDestroy(v0 + 2) = (_DWORD)v17;
    LOWORD(v14_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = (_WORD)v17;
    uint64_t v19 = Mirror.init(reflecting:)(&v140);
    uint64_t v20 = v12;
    uint64_t v21 = Mirror.children.getter(v19);
    uint64_t v23 = *(__int128 **)(v21 + 16);
    uint64_t v22 = *(void *)(v21 + 24);
    uint64_t v24 = *(void *)(v21 + 32);
    uint64_t v25 = *(void *)(v21 + 40);
    uint64_t ObjectType = swift_getObjectType(v23);
    swift_unknownObjectRetain(v23);
    swift_unknownObjectRetain(v24);
    uint64_t v27 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v22);
    uint64_t v28 = swift_getObjectType(v24);
    if (v27 != dispatch thunk of _AnyIndexBox._typeID.getter(v28, v25))
    {
      __break(1u);
LABEL_37:
      int v131 = v23;
      uint64_t v92 = *(void *)(*(void *)(v27 + 24) + 16LL);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v92);
      unsigned int v129 = v121;
      __chkstk_darwin(AssociatedTypeWitness);
      uint64_t v134 = v21;
      int v95 = &v121[-v94];
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v92,  ObjectType,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      uint64_t v97 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
      uint64_t v124 = v121;
      uint64_t v98 = v138;
      __chkstk_darwin(v97);
      unint64_t v99 = (v98 + 15) & 0xFFFFFFFFFFFFFFF0LL;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v95, ObjectType, v92);
      uint64_t v100 = v133;
      int v122 = dispatch thunk of static Comparable.> infix(_:_:)( v133,  &v121[-v99],  ObjectType,  *(void *)(*(void *)(v27 + 32) + 8LL));
      uint64_t v123 = v27;
      uint64_t v82 = v134;
      __int128 v83 = *(uint64_t (**)(_BYTE *, uint64_t))(v134 + 8);
      uint64_t v101 = v83(&v121[-v99], ObjectType);
      unsigned int v129 = (_BYTE *)v143;
      __chkstk_darwin(v101);
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v135)(&v121[-v99], v100, ObjectType);
      if ((v122 & 1) != 0)
      {
        uint64_t v79 = v123;
        unint64_t v102 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v123);
        v83(&v121[-v99], ObjectType);
        BOOL v103 = (unint64_t)v129 >= v102;
        uint64_t v23 = v131;
        uint64_t v85 = v133;
        if (!v103) {
          goto LABEL_39;
        }
      }

      else
      {
        uint64_t v79 = v123;
        v83(&v121[-v99], ObjectType);
        uint64_t v23 = v131;
        uint64_t v85 = v133;
      }

      goto LABEL_42;
    }

    char v29 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v24, v25, ObjectType, v22);
    swift_unknownObjectRelease(v24, v30);
    if ((v29 & 1) != 0)
    {
      swift_unknownObjectRelease(v23, v31);
      __int128 v141 = 0u;
      __int128 v142 = 0u;
      __int128 v140 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v23, v22);
      __int128 v140 = v139[0];
      __int128 v141 = v139[1];
      __int128 v142 = v139[2];
      swift_unknownObjectRelease(v23, v32);
    }

    uint64_t v12 = v20;
    swift_release(v21);
    (*((void (**)(_BYTE *, _BYTE *))v135 + 1))(v20, v136);
    if (!*((void *)&v142 + 1))
    {
      sub_1000178B0((uint64_t)&v140, &qword_100113CD0);
      goto LABEL_4;
    }

    uint64_t v33 = *((void *)&v140 + 1);
    uint64_t v34 = v140;
    sub_100017A40(v131);
    if (!v33) {
      goto LABEL_4;
    }
    if (v34 == 0x636E657571657266LL && v33 == 0xE900000000000079LL) {
      break;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v33, 0x636E657571657266LL, 0xE900000000000079LL, 0LL);
    swift_bridgeObjectRelease(v33);
    if ((v35 & 1) != 0)
    {
      unint64_t v36 = v134;
      goto LABEL_20;
    }

LABEL_4:
    uint64_t v16 = (uint64_t)(v137 + 3);
    uint64_t v14 = v138 - 1;
    uint64_t v15 = v134;
    if (v138 == 1)
    {
      swift_bridgeObjectRelease(v134);
      goto LABEL_16;
    }
  }

  swift_bridgeObjectRelease(v134);
  unint64_t v36 = 0xE900000000000079LL;
LABEL_20:
  swift_bridgeObjectRelease(v36);
  uint64_t v41 = v130;
  swift_beginAccess(v130 + 128, v139, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v41 + 128);
  uint64_t v12 = v129;
  if (!Strong)
  {
    __break(1u);
LABEL_51:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    goto LABEL_52;
  }

  uint64_t v43 = Strong;
  unsigned int v44 = v132 | ((_DWORD)v133 << 16);
  uint64_t v45 = *(void *)(v41 + 136);
  uint64_t v46 = swift_getObjectType(Strong);
  *((void *)&v141 + 1) = type metadata accessor for ActiveClockSource(0LL);
  *(void *)&__int128 v142 = &protocol witness table for ActiveClockSource;
  *(void *)&__int128 v140 = v41;
  uint64_t v47 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v45 + 144);
  swift_retain(v41);
  __int16 v48 = v47(v44 & 0xFFFFFF, 0LL, 0LL, &v140, v46, v45);
  if (v12)
  {
    swift_unknownObjectRelease(v43, v49);
    sub_100017A40(&v140);
    *(void *)&__int128 v140 = 0LL;
    *((void *)&v140 + 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    v50._countAndFlagsBits = 0xD00000000000001DLL;
    v50._object = (void *)0x80000001000CE9F0LL;
    String.append(_:)(v50);
    uint64_t v143 = (uint64_t)v12;
    uint64_t v51 = sub_100008E00(&qword_100113400);
    _print_unlocked<A, B>(_:_:)( &v143,  &v140,  v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v52 = *((void *)&v140 + 1);
    sub_100029840( v140,  *((uint64_t *)&v140 + 1),  0xD000000000000013LL,  (void *)0x80000001000CE9D0LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  94LL);
    swift_bridgeObjectRelease(v52);
    char v53 = (void *)_convertErrorToNSError(_:)(v12);
    id v54 = [v53 code];

    if (v54 != (id)-536850432LL) {
      goto LABEL_17;
    }
    swift_errorRelease(v12);
    return 0LL;
  }

  __int16 v55 = v48;
  uint64_t v56 = v49;
  swift_unknownObjectRelease(v43, v49);
  sub_100017A40(&v140);
  uint64_t v57 = v56;
  ADCControlRequestParameterBlock.getCur()(v57, v55 & 0x1FF, (uint64_t)&v140);
  __int128 v137 = v57;

  uint64_t ObjectType = *((void *)&v141 + 1);
  uint64_t v58 = v142;
  uint64_t v59 = sub_1000178EC(&v140, *((uint64_t *)&v141 + 1));
  uint64_t v60 = v121;
  uint64_t v21 = *(void *)(ObjectType - 8);
  __chkstk_darwin(v59);
  uint64_t v138 = v61;
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v23 = (__int128 *)&v121[-v62];
  uint64_t v135 = *(_BYTE **)(v21 + 16);
  ((void (*)(_BYTE *))v135)(&v121[-v62]);
  uint64_t v27 = *(void *)(v58 + 8);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v27) & 1) != 0)
  {
    uint64_t v63 = *(void *)(*(void *)(v27 + 24) + 16LL);
    uint64_t v64 = swift_getAssociatedTypeWitness(0LL, v63);
    __int128 v136 = v121;
    uint64_t v65 = v64;
    objc_super v133 = v121;
    __chkstk_darwin(v64);
    uint64_t v134 = v21;
    uint64_t v67 = &v121[-v66];
    uint64_t v68 = swift_getAssociatedConformanceWitness( v63,  ObjectType,  v65,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v69 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  v65,  v68);
    unint64_t v132 = v121;
    __chkstk_darwin(v69);
    uint64_t v70 = v67;
    uint64_t v21 = v134;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v70, ObjectType, v63);
    LOBYTE(v6swift_unknownObjectWeakDestroy(v0 + 3) = dispatch thunk of static Comparable.>= infix(_:_:)( &v121[-v62],  &v121[-v62],  ObjectType,  *(void *)(*(void *)(v27 + 32) + 8LL));
    uint64_t v60 = v136;
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(&v121[-v62], ObjectType);
    if ((v63 & 1) == 0) {
      goto LABEL_51;
    }
  }

  uint64_t v71 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v27);
  if (v71 < 64) {
    goto LABEL_44;
  }
  unint64_t v132 = v121;
  __chkstk_darwin(v71);
  int v73 = &v121[-((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ((void (*)(_BYTE *, __int128 *, uint64_t))v135)(v73, v23, ObjectType);
  uint64_t v143 = -1LL;
  char v74 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v27);
  objc_super v133 = v73;
  uint64_t v75 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v27);
  if ((v74 & 1) == 0)
  {
    if (v75 < 65)
    {
      uint64_t v104 = v133;
      uint64_t v79 = v27;
      dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v27);
      uint64_t v82 = v21;
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v104, ObjectType);
      goto LABEL_43;
    }

    int v131 = v23;
    __int128 v136 = v60;
    __chkstk_darwin(v75);
    uint64_t v87 = &v121[-((v86 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
    unint64_t v88 = sub_100028BF8();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v143, &type metadata for UInt, v88, ObjectType, v27);
    uint64_t v79 = v27;
    uint64_t v89 = v133;
    char v90 = dispatch thunk of static Comparable.< infix(_:_:)( v87,  v133,  ObjectType,  *(void *)(*(void *)(v27 + 32) + 8LL));
    uint64_t v82 = v21;
    __int128 v83 = *(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8);
    uint64_t v91 = v87;
    uint64_t v85 = v89;
    v83(v91, ObjectType);
    uint64_t v23 = v131;
    if ((v90 & 1) == 0) {
      goto LABEL_42;
    }
LABEL_39:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_52:
    __break(1u);
    return result;
  }

  __int128 v136 = v60;
  if (v75 <= 64) {
    goto LABEL_37;
  }
  uint64_t v135 = v121;
  __chkstk_darwin(v75);
  unint64_t v77 = &v121[-((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v78 = sub_100028BF8();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v143, &type metadata for UInt, v78, ObjectType, v27);
  uint64_t v79 = v27;
  unint64_t v80 = v133;
  char v81 = dispatch thunk of static Comparable.< infix(_:_:)( v77,  v133,  ObjectType,  *(void *)(*(void *)(v27 + 32) + 8LL));
  uint64_t v82 = v21;
  __int128 v83 = *(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8);
  Swift::String v84 = v77;
  uint64_t v85 = v80;
  v83(v84, ObjectType);
  if ((v81 & 1) != 0) {
    goto LABEL_39;
  }
LABEL_42:
  v83(v85, ObjectType);
LABEL_43:
  uint64_t v21 = v82;
  uint64_t v27 = v79;
LABEL_44:
  uint64_t v12 = (_BYTE *)dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v27);
  (*(void (**)(__int128 *, uint64_t))(v21 + 8))(v23, ObjectType);
  sub_100017A40(&v140);
  if (qword_1001128E8 != -1) {
    swift_once(&qword_1001128E8, sub_10001F4C0);
  }
  uint64_t v105 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v105, (uint64_t)qword_1001171E0);
  uint64_t v106 = v127;
  uint64_t v107 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v127 + 16);
  unsigned int v108 = v125;
  uint64_t v109 = v128;
  uint64_t v110 = v107(v125, v130 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v128);
  int v111 = (os_log_s *)OSSignposter.logHandle.getter(v110);
  LODWORD(v13_Block_object_dispose((const void *)(v30 - 136), 8) = static os_signpost_type_t.event.getter();
  char v112 = OS_os_log.signpostsEnabled.getter();
  uint64_t v113 = v126;
  if ((v112 & 1) != 0)
  {
    v107(v126, (uint64_t)v108, v109);
    uint64_t v114 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v114 = 134217984;
    *(void *)&__int128 v140 = v12;
    uint64_t v115 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, (char *)&v140 + 8, v114 + 4, v114 + 12);
    os_signpost_id_t v116 = OSSignpostID.rawValue.getter(v115);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v111,  (os_signpost_type_t)v138,  v116,  "ActiveClockSource_getSamplingRate",  "samplingRate %lu",  v114,  0xCu);
    swift_slowDealloc(v114, -1LL, -1LL);

    unint64_t v117 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
    v117(v108, v109);
    v117(v113, v109);
  }

  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v106 + 8))(v108, v109);
  }

  *(void *)&__int128 v140 = 0LL;
  *((void *)&v140 + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(37LL);
  swift_bridgeObjectRelease(*((void *)&v140 + 1));
  *(void *)&__int128 v140 = 0xD000000000000023LL;
  *((void *)&v140 + 1) = 0x80000001000CEA10LL;
  uint64_t v143 = (uint64_t)v12;
  v118._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v118._object;
  String.append(_:)(v118);
  swift_bridgeObjectRelease(object);
  uint64_t v120 = *((void *)&v140 + 1);
  sub_100029834( v140,  *((uint64_t *)&v140 + 1),  0xD000000000000013LL,  (void *)0x80000001000CE9D0LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  107LL);
  swift_bridgeObjectRelease(v120);

  return (uint64_t)v12;
}

      sub_1000178B0((uint64_t)&v31, &qword_100113E98);
LABEL_5:
      v10 += 40LL;
      if (!--v6)
      {
        swift_bridgeObjectRelease(a1);
        return v11;
      }
    }
  }

  return _swiftEmptyArrayStorage;
}

    uint64_t v11 = 1;
    uint64_t v12 = 1LL;
  }

  while ((v15 & 1) == 0);
  swift_bridgeObjectRelease(v72);
  uint64_t v38 = v14[2];
  if (v38)
  {
    uint64_t v75 = &v85;
    swift_bridgeObjectRetain(v14);
    uint64_t v39 = 32LL;
    uint64_t v79 = v14;
    while (1)
    {
      unint64_t v80 = v38;
      uint64_t v40 = *(_WORD *)((char *)v14 + v39);
      uint64_t v41 = *((_BYTE *)v14 + v39 + 2);
      *((void *)&v85 + 1) = &type metadata for USBDescriptorControl;
      BYTE2(v84) = v41;
      LOWORD(v84) = v40;
      char v42 = Mirror.init(reflecting:)(&v84);
      uint64_t v43 = (void *)Mirror.children.getter(v42);
      unsigned int v44 = v43[2];
      uint64_t v45 = v43[3];
      uint64_t v14 = (void *)v43[4];
      uint64_t v46 = v43[5];
      uint64_t v47 = swift_getObjectType(v44);
      swift_unknownObjectRetain(v44);
      swift_unknownObjectRetain(v14);
      __int16 v48 = dispatch thunk of _AnyIndexBox._typeID.getter(v47, v45);
      uint64_t v49 = swift_getObjectType(v14);
      if (v48 != dispatch thunk of _AnyIndexBox._typeID.getter(v49, v46)) {
        goto LABEL_54;
      }
      Swift::String v50 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v14, v46, v47, v45);
      swift_unknownObjectRelease(v14, v51);
      if ((v50 & 1) != 0)
      {
        swift_unknownObjectRelease(v44, v52);
        uint64_t v85 = 0u;
        uint64_t v86 = 0u;
        Swift::String v84 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v44, v45);
        Swift::String v84 = v81;
        uint64_t v85 = v82;
        uint64_t v86 = v83;
        swift_unknownObjectRelease(v44, v53);
      }

      uint64_t v14 = v79;
      swift_release(v43);
      (*(void (**)(_BYTE *, uint64_t))(v77 + 8))(v76, v78);
      if (*((void *)&v86 + 1))
      {
        id v54 = v84;
        sub_100017A40(v75);
        if (*((void *)&v54 + 1))
        {
          if (v54 == __PAIR128__(0xE900000000000079LL, 0x636E657571657266LL))
          {
            swift_bridgeObjectRelease(v14);
            swift_bridgeObjectRelease(0xE900000000000079LL);
            goto LABEL_46;
          }

          __int16 v55 = _stringCompareWithSmolCheck(_:_:expecting:)( v54,  *((void *)&v54 + 1),  0x636E657571657266LL,  0xE900000000000079LL,  0LL);
          swift_bridgeObjectRelease(*((void *)&v54 + 1));
          if ((v55 & 1) != 0)
          {
            swift_bridgeObjectRelease(v14);
            goto LABEL_46;
          }
        }
      }

      else
      {
        sub_100058DF4((uint64_t)&v84);
      }

      v39 += 3LL;
      uint64_t v38 = v80 - 1;
      if (v80 == 1)
      {
        swift_bridgeObjectRelease(v14);
        break;
      }
    }
  }

  sub_1000516F0(&v84, 13LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) != 0) {
    goto LABEL_43;
  }
LABEL_55:
  uint64_t v14 = sub_10004F514(0LL, v14[2] + 1LL, 1, v14);
LABEL_43:
  uint64_t v57 = v14[2];
  uint64_t v56 = v14[3];
  if (v57 >= v56 >> 1) {
    uint64_t v14 = sub_10004F514((void *)(v56 > 1), v57 + 1, 1, v14);
  }
  v14[2] = v57 + 1;
  uint64_t v58 = (char *)v14 + 3 * v57;
  v58[34] = v67;
  *((_WORD *)v58 + 16) = 384;
LABEL_46:
  uint64_t v59 = v88;
  uint64_t v60 = sub_100051240((uint64_t)v88);
  uint64_t result = swift_bridgeObjectRelease(v59);
  if (v14[2])
  {
    if (v60[2]) {
      goto LABEL_48;
    }
LABEL_52:
    uint64_t result = swift_release(v60);
    uint64_t v60 = 0LL;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v14);
    uint64_t v14 = 0LL;
    if (!v60[2]) {
      goto LABEL_52;
    }
  }

      uint64_t v16 = (char *)swift_unknownObjectWeakLoadStrong(v136);
      uint64_t v11 = v140;
      if (!v16) {
        goto LABEL_36;
      }
    }

LABEL_21:
    uint64_t v61 = sub_10000AE14();
    uint64_t v57 = swift_allocError(&type metadata for AUAError, v61, 0LL, 0LL);
    *(_BYTE *)unint64_t v62 = 1;
    *(void *)(v62 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v62 + 16) = 0xE000000000000000LL;
    uint64_t v63 = v128;
    *(void *)(v62 + 24) = 0xD00000000000001FLL;
    *(void *)(v62 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v63;
    uint64_t v64 = v127;
    *(void *)(v62 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
    *(void *)(v62 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v64;
    *(void *)(v62 + 56) = 373LL;
    swift_willThrow(v57);
LABEL_22:
    __int128 v137 = 0LL;
    goto LABEL_23;
  }

    v4 += 16;
    --v1;
  }

  while (v1);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRetain(v2);
  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
    uint64_t v5 = sub_1000502D0(0LL, v5[2] + 1LL, 1, v5);
  }
  uint64_t v22 = v5[2];
  uint64_t v21 = v5[3];
  if (v22 >= v21 >> 1) {
    uint64_t v5 = sub_1000502D0((void *)(v21 > 1), v22 + 1, 1, v5);
  }
  v5[2] = v22 + 1;
  v5[v22 + 4] = v2;
  swift_bridgeObjectRelease(v2);
  return v5;
}

      swift_bridgeObjectRelease(v5);
      uint64_t v2 = v55;
      uint64_t v1 = v56;
      uint64_t v3 = v57;
      uint64_t v4 = v54;
LABEL_5:
      if (++v3 == v2)
      {
        swift_bridgeObjectRelease(v1);
        return v53;
      }
    }
  }

  swift_bridgeObjectRelease(v1);
  return _swiftEmptyArrayStorage;
}

      swift_unknownObjectRelease(v15, v8);
      a3 = v39;
      uint64_t v5 = v40;
      a2 = v38;
      uint64_t v6 = v41;
LABEL_5:

LABEL_6:
      if (v7 == v6) {
        goto LABEL_39;
      }
    }

    uint64_t v31 = 6LL;
    while (1)
    {
      uint64_t v32 = v31 - 3;
      if (__OFADD__(v31 - 4, 1LL)) {
        break;
      }
      if (v25[v31] == v24) {
        goto LABEL_20;
      }
      ++v31;
      if (v32 == v26) {
        goto LABEL_4;
      }
    }

uint64_t sub_100022550()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v52 = *(void *)(v3 - 8);
  uint64_t v53 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v46 = v0;
    uint64_t v47 = v2;
    __int16 v48 = &v57;
    swift_bridgeObjectRetain(v6);
    uint64_t v9 = 32LL;
    unint64_t v50 = v8;
    uint64_t v51 = v5;
    while (1)
    {
      uint64_t v54 = v7;
      int v10 = *(unsigned __int8 *)(v8 + v9 + 2);
      int v11 = *(unsigned __int16 *)(v8 + v9);
      *((void *)&v57 + 1) = &type metadata for USBDescriptorControl;
      int v59 = v10;
      BYTE2(v56) = v10;
      int v49 = v11;
      LOWORD(v56) = v11;
      uint64_t v12 = Mirror.init(reflecting:)(&v56);
      uint64_t v13 = (void *)Mirror.children.getter(v12);
      uint64_t v14 = v13[2];
      uint64_t v15 = v13[3];
      uint64_t v17 = v13[4];
      uint64_t v16 = v13[5];
      uint64_t ObjectType = swift_getObjectType(v14);
      swift_unknownObjectRetain(v14);
      swift_unknownObjectRetain(v17);
      uint64_t v19 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v15);
      uint64_t v20 = swift_getObjectType(v17);
      uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v20, v16);
      if (v19 != result) {
        break;
      }
      char v22 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v17, v16, ObjectType, v15);
      swift_unknownObjectRelease(v17, v23);
      if ((v22 & 1) != 0)
      {
        swift_unknownObjectRelease(v14, v24);
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        __int128 v56 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v14, v15);
        __int128 v56 = v55[0];
        __int128 v57 = v55[1];
        __int128 v58 = v55[2];
        swift_unknownObjectRelease(v14, v25);
      }

      swift_release(v13);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
      if (*((void *)&v58 + 1))
      {
        uint64_t v26 = *((void *)&v56 + 1);
        uint64_t v27 = v56;
        sub_100017A40(v48);
        if (v26)
        {
          if (v27 == 0x79746964696C6176LL && v26 == 0xE800000000000000LL)
          {
            swift_bridgeObjectRelease(v50);
            unint64_t v29 = 0xE800000000000000LL;
LABEL_18:
            swift_bridgeObjectRelease(v29);
            uint64_t v31 = v46;
            swift_beginAccess(v46 + 128, v55, 0LL, 0LL);
            uint64_t result = swift_unknownObjectWeakLoadStrong(v31 + 128);
            uint64_t v32 = v47;
            if (result)
            {
              uint64_t v33 = result;
              int v34 = v49 | (v59 << 16);
              uint64_t v35 = *(void *)(v31 + 136);
              uint64_t v36 = swift_getObjectType(result);
              *((void *)&v57 + 1) = type metadata accessor for ActiveClockSource(0LL);
              *(void *)&__int128 v58 = &protocol witness table for ActiveClockSource;
              *(void *)&__int128 v56 = v31;
              unint64_t v37 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v35 + 144);
              swift_retain(v31);
              __int16 v38 = v37(v34 & 0xFFFFFF, 0LL, 0LL, &v56, v36, v35);
              uint64_t v40 = v39;
              swift_unknownObjectRelease(v33, v39);
              if (v32)
              {
                sub_100017A40(&v56);
              }

              else
              {
                sub_100017A40(&v56);
                ADCControlRequestParameterBlock.getCur()(v40, v38 & 0x1FF, (uint64_t)&v56);
                uint64_t v41 = sub_100008E00(&qword_100113EB8);
                if (swift_dynamicCast(&v60, &v56, v41, &type metadata for UInt8, 6LL))
                {

                  return v60 != 0;
                }

                else
                {
                  unint64_t v42 = sub_10000AE14();
                  uint64_t v43 = swift_allocError(&type metadata for AUAError, v42, 0LL, 0LL);
                  *(_BYTE *)uint64_t v44 = 1;
                  *(void *)(v44 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v44 + 16) = 0xE000000000000000LL;
                  *(void *)(v44 + 24) = 0xD000000000000014LL;
                  *(void *)(v44 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE850LL;
                  *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
                  *(void *)(v44 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
                  *(void *)(v44 + 56) = 122LL;
                  swift_willThrow(v43);
                }
              }

              return v30;
            }

LABEL_28:
            __break(1u);
            return result;
          }

          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, 0x79746964696C6176LL, 0xE800000000000000LL, 0LL);
          swift_bridgeObjectRelease(v26);
          if ((v28 & 1) != 0)
          {
            unint64_t v29 = v50;
            goto LABEL_18;
          }
        }
      }

      else
      {
        sub_1000178B0((uint64_t)&v56, &qword_100113CD0);
      }

      v9 += 3LL;
      uint64_t v7 = v54 - 1;
      unint64_t v8 = v50;
      if (v54 == 1)
      {
        swift_bridgeObjectRelease(v50);
        return 1;
      }
    }

    __break(1u);
    goto LABEL_28;
  }

  return 1;
}

                __break(1u);
LABEL_29:
                __break(1u);
LABEL_30:
                __break(1u);
                goto LABEL_31;
              }

  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v20 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v20,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10002298C()
{
  return sub_100021700();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.refresh()()
{
  uint64_t v2 = v0;
  uint64_t v58 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v52 = *(void *)(v58 - 8);
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v49 - v6;
  uint64_t v8 = sub_10002298C();
  char v10 = v9;
  if ((v9 & 1) == 0)
  {
    uint64_t v19 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
    *(void *)uint64_t v19 = 0LL;
    *(_BYTE *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    swift_beginAccess(v0 + 16, v57, 1LL, 0LL);
    uint64_t v20 = *(void *)(v0 + 16);
    *(void *)(v0 + 16) = 0LL;
LABEL_14:
    swift_bridgeObjectRelease(v20);
LABEL_15:
    swift_beginAccess(v2 + 120, &v55, 1LL, 0LL);
    *(_BYTE *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v10 & 1;
    if (qword_1001128E8 == -1) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }

  unint64_t v11 = v8;
  uint64_t v12 = sub_10002009C();
  if (v1) {
    return;
  }
  uint64_t v13 = v12;
  uint64_t v14 = v12[2];
  if (!v14)
  {
LABEL_25:
    uint64_t v51 = v5;
    unint64_t v37 = sub_1000230CC(0LL, v12);
    uint64_t v38 = v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
    *(void *)uint64_t v38 = v37;
    *(_BYTE *)(v38 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    if (v37)
    {
      swift_beginAccess(v2 + 16, v57, 1LL, 0LL);
      uint64_t v39 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = v13;
      swift_bridgeObjectRelease(v39);
      uint64_t v55 = 0LL;
      uint64_t v56 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(75LL);
      v40._countAndFlagsBits = 0xD000000000000021LL;
      v40._object = (void *)0x80000001000CE330LL;
      String.append(_:)(v40);
      char v41 = *(_BYTE *)(v38 + 8);
      unint64_t v53 = *(void *)v38;
      v54[0] = v41;
      uint64_t v42 = sub_100008E00(&qword_100114070);
      v43._countAndFlagsBits = String.init<A>(describing:)(&v53, v42);
      object = v43._object;
      String.append(_:)(v43);
      swift_bridgeObjectRelease(object);
      v45._countAndFlagsBits = 0xD000000000000026LL;
      v45._object = (void *)0x80000001000CE360LL;
      String.append(_:)(v45);
      unint64_t v53 = v11;
      v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
      uint64_t v47 = v46._object;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v47);
      uint64_t v48 = v56;
      sub_100029834( v55,  v56,  0x2868736572666572LL,  (void *)0xE900000000000029LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  172LL);
      swift_bridgeObjectRelease(v48);
    }

    else
    {
      swift_bridgeObjectRelease(v13);
      sub_100029840( 0xD00000000000002CLL,  0x80000001000CE3B0LL,  0x2868736572666572LL,  (void *)0xE900000000000029LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  176LL);
    }

    uint64_t v5 = v51;
    goto LABEL_15;
  }

  BOOL v15 = 0;
  uint64_t v16 = v12 + 5;
  uint64_t v17 = 1LL;
  do
  {
    if (v15)
    {
      if (v14 == v17) {
        goto LABEL_24;
      }
      BOOL v15 = 1;
    }

    else if (v11 >= *(v16 - 1))
    {
      BOOL v15 = *v16 >= v11;
      if (v14 == v17)
      {
        if (*v16 < v11) {
          goto LABEL_25;
        }
LABEL_24:
        uint64_t v36 = v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
        *(void *)uint64_t v36 = v11;
        *(_BYTE *)(v36 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
        swift_beginAccess(v2 + 16, v57, 1LL, 0LL);
        uint64_t v20 = *(void *)(v2 + 16);
        *(void *)(v2 + 16) = v13;
        goto LABEL_14;
      }
    }

    else
    {
      if (v14 == v17) {
        goto LABEL_25;
      }
      BOOL v15 = 0;
    }

    v16 += 3;
  }

  while (!__OFADD__(v17++, 1LL));
  __break(1u);
LABEL_30:
  swift_once(&qword_1001128E8, sub_10001F4C0);
LABEL_16:
  uint64_t v21 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v21, (uint64_t)qword_1001171E0);
  char v22 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v22(v7, v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v58);
  uint64_t v23 = swift_retain_n(v2, 2LL);
  uint64_t v24 = (os_log_s *)OSSignposter.logHandle.getter(v23);
  os_signpost_type_t v25 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v26 = v5;
    uint64_t v27 = v5;
    uint64_t v28 = v58;
    v22(v27, (uint64_t)v7, v58);
    uint64_t v29 = swift_slowAlloc(18LL, -1LL);
    *(_DWORD *)uint64_t v29 = 67109376;
    LODWORD(v5swift_unknownObjectWeakDestroy(v0 + 3) = *(unsigned __int8 *)(v2 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 4, v29 + 4, v29 + 8);
    *(_WORD *)(v29 + _Block_object_dispose((const void *)(v30 - 136), 8) = 2048;
    unint64_t v50 = v7;
    uint64_t v51 = v1;
    unint64_t v30 = *(void *)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
    int v31 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
    swift_release(v2);
    if (v31) {
      unint64_t v32 = 0LL;
    }
    else {
      unint64_t v32 = v30;
    }
    unint64_t v53 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v29 + 10, v29 + 18);
    uint64_t v33 = swift_release(v2);
    os_signpost_id_t v34 = OSSignpostID.rawValue.getter(v33);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  v25,  v34,  "ActiveClockSource_refresh",  "isValid %{BOOL}d, samplingRate %lu",  (uint8_t *)v29,  0x12u);
    swift_slowDealloc(v29, -1LL, -1LL);

    uint64_t v35 = *(void (**)(char *, uint64_t))(v52 + 8);
    v35(v50, v28);
    v35(v26, v28);
  }

  else
  {
    swift_release_n(v2, 2LL);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v58);
  }

unint64_t sub_1000230CC(unint64_t result, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2) {
    return 0LL;
  }
  BOOL v3 = 0;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = 1LL;
  uint64_t v6 = a2 + 5;
  while (1)
  {
    if (v3)
    {
      if (v2 == v5) {
        return result;
      }
      BOOL v3 = 1;
      goto LABEL_4;
    }

    if (*(v6 - 1) <= result) {
      break;
    }
    if (v2 == v5) {
      goto LABEL_12;
    }
    BOOL v3 = 0;
LABEL_4:
    v6 += 3;
    BOOL v7 = __OFADD__(v5++, 1LL);
    if (v7)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
  }

  BOOL v3 = *v6 >= result;
  if (v2 != v5) {
    goto LABEL_4;
  }
  if (*v6 >= result) {
    return result;
  }
LABEL_12:
  BOOL v8 = 0;
  uint64_t v9 = 1LL;
  uint64_t result = 48000LL;
  char v10 = a2 + 5;
  while (2)
  {
    if (v8)
    {
      if (v2 == v9) {
        return result;
      }
      BOOL v8 = 1;
      goto LABEL_14;
    }

    if (*(v10 - 1) >= 0xBB81uLL)
    {
      if (v2 == v9) {
        goto LABEL_23;
      }
      BOOL v8 = 0;
      goto LABEL_14;
    }

    unint64_t v11 = *v10 >> 7;
    BOOL v8 = v11 > 0x176;
    if (v2 != v9)
    {
LABEL_14:
      v10 += 3;
      BOOL v7 = __OFADD__(v9++, 1LL);
      if (v7) {
        goto LABEL_39;
      }
      continue;
    }

    break;
  }

  if (v11 > 0x176) {
    return 48000LL;
  }
LABEL_23:
  BOOL v12 = 0;
  uint64_t v13 = 1LL;
  uint64_t result = 44100LL;
  while (2)
  {
    if (v12)
    {
      if (v2 == v13) {
        return result;
      }
      BOOL v12 = 1;
      goto LABEL_25;
    }

    if (*(v4 - 1) >= 0xAC45uLL)
    {
      if (v2 == v13) {
        goto LABEL_34;
      }
      BOOL v12 = 0;
      goto LABEL_25;
    }

    BOOL v12 = *v4 > 0xAC43uLL;
    if (v2 != v13)
    {
LABEL_25:
      v4 += 3;
      BOOL v7 = __OFADD__(v13++, 1LL);
      if (v7) {
        goto LABEL_40;
      }
      continue;
    }

    break;
  }

  if (*v4 > 0xAC43uLL) {
    return 44100LL;
  }
LABEL_34:
  uint64_t result = a2[4];
  if (result != a2[5])
  {
    sub_100029840( 0xD000000000000029LL,  0x80000001000CE8A0LL,  0xD000000000000022LL,  (void *)0x80000001000CE8D0LL,  0xD000000000000015LL,  0x80000001000CE900LL,  118LL);
    return 0LL;
  }

  return result;
}

void ActiveClockSource.start(on:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign(v2 + 128, a1);
  ActiveClockSource.refresh()();
}

void ActiveClockSource.curSamplingRate.setter(unint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (unint64_t)&v83 - v10;
  uint64_t v12 = type metadata accessor for Mirror(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  BOOL v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    sub_100029840( 0xD00000000000002ALL,  0x80000001000CE3E0LL,  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  203LL);
    return;
  }

  uint64_t v16 = &v2[OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate];
  if ((v2[OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8] & 1) != 0
    || *(void *)v16 != a1
    || (v2[24] & 1) == 0)
  {
    if (!a1)
    {
      *(void *)uint64_t v16 = 0LL;
      v16[8] = 1;
      return;
    }

    swift_beginAccess(v2 + 25, v104, 0LL, 0LL);
    if ((v2[25] & 1) == 0)
    {
      uint64_t v23 = 0xD00000000000002CLL;
      uint64_t v24 = 0x80000001000CE410LL;
      uint64_t v25 = 220LL;
      goto LABEL_40;
    }

    swift_beginAccess(v2 + 16, v103, 0LL, 0LL);
    uint64_t v17 = *((void *)v2 + 2);
    if (!v17)
    {
      uint64_t v23 = 0xD00000000000002ALL;
      uint64_t v24 = 0x80000001000CE440LL;
      uint64_t v25 = 225LL;
      goto LABEL_40;
    }

    uint64_t v18 = *(void *)(v17 + 16);
    if (!v18)
    {
LABEL_37:
      *(void *)&__int128 v100 = 0LL;
      *((void *)&v100 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(53LL);
      v46._countAndFlagsBits = 0xD00000000000001CLL;
      v46._object = (void *)0x80000001000CE590LL;
      String.append(_:)(v46);
      *(void *)&v99[0] = a1;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
      object = v47._object;
      String.append(_:)(v47);
      swift_bridgeObjectRelease(object);
      v49._countAndFlagsBits = 0xD000000000000017LL;
      v49._object = (void *)0x80000001000CE5B0LL;
      String.append(_:)(v49);
      uint64_t v50 = *((void *)&v100 + 1);
      sub_100029840( v100,  *((uint64_t *)&v100 + 1),  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  230LL);
      swift_bridgeObjectRelease(v50);
      return;
    }

    BOOL v19 = 0;
    uint64_t v20 = (unint64_t *)(v17 + 40);
    uint64_t v21 = 1LL;
    while (1)
    {
      if (v19)
      {
        if (v18 == v21) {
          goto LABEL_23;
        }
        BOOL v19 = 1;
      }

      else if (*(v20 - 1) <= a1)
      {
        BOOL v19 = *v20 >= a1;
        if (v18 == v21)
        {
          if (*v20 < a1) {
            goto LABEL_37;
          }
LABEL_23:
          unint64_t v26 = *((void *)v2 + 14);
          if (*(void *)(v26 + 16))
          {
            uint64_t v97 = *(void *)(v26 + 16);
            unint64_t v86 = v11;
            uint64_t v85 = v9;
            uint64_t v87 = v6;
            uint64_t v88 = v5;
            Swift::String v84 = (unint64_t *)v16;
            uint64_t v89 = v2;
            unint64_t v90 = a1;
            uint64_t v91 = &v101;
            unint64_t v96 = v26;
            swift_bridgeObjectRetain(v26);
            unint64_t v11 = 32LL;
            uint64_t v95 = v12;
            uint64_t v94 = v13;
            while (1)
            {
              int v27 = *(unsigned __int8 *)(v96 + v11 + 2);
              int v28 = *(unsigned __int16 *)(v96 + v11);
              *((void *)&v101 + 1) = &type metadata for USBDescriptorControl;
              int v93 = v27;
              BYTE2(v10_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v27;
              int v92 = v28;
              LOWORD(v10_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v28;
              uint64_t v29 = Mirror.init(reflecting:)(&v100);
              unint64_t v30 = v15;
              int v31 = (void *)Mirror.children.getter(v29);
              BOOL v15 = (char *)v31[2];
              uint64_t v32 = v31[3];
              uint64_t v33 = v31[4];
              uint64_t v34 = v31[5];
              uint64_t ObjectType = swift_getObjectType(v15);
              swift_unknownObjectRetain(v15);
              swift_unknownObjectRetain(v33);
              uint64_t v36 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v32);
              uint64_t v37 = swift_getObjectType(v33);
              if (v36 != dispatch thunk of _AnyIndexBox._typeID.getter(v37, v34)) {
                goto LABEL_53;
              }
              char v38 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v33, v34, ObjectType, v32);
              swift_unknownObjectRelease(v33, v39);
              if ((v38 & 1) != 0)
              {
                swift_unknownObjectRelease(v15, v40);
                __int128 v101 = 0u;
                __int128 v102 = 0u;
                __int128 v100 = 0u;
              }

              else
              {
                dispatch thunk of _AnyCollectionBox.subscript.getter(v15, v32);
                __int128 v100 = v99[0];
                __int128 v101 = v99[1];
                __int128 v102 = v99[2];
                swift_unknownObjectRelease(v15, v41);
              }

              swift_release(v31);
              BOOL v15 = v30;
              (*(void (**)(char *, uint64_t))(v94 + 8))(v30, v95);
              if (*((void *)&v102 + 1))
              {
                uint64_t v42 = *((void *)&v100 + 1);
                uint64_t v43 = v100;
                sub_100017A40(v91);
                if (v42)
                {
                  if (v43 == 0x636E657571657266LL && v42 == 0xE900000000000079LL)
                  {
                    swift_bridgeObjectRelease(v96);
                    unint64_t v45 = 0xE900000000000079LL;
LABEL_43:
                    swift_bridgeObjectRelease(v45);
                    unint64_t v11 = v90;
                    BOOL v15 = v89;
                    if (qword_1001128E8 != -1) {
                      goto LABEL_54;
                    }
                    goto LABEL_44;
                  }

                  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)( v43,  v42,  0x636E657571657266LL,  0xE900000000000079LL,  0LL);
                  swift_bridgeObjectRelease(v42);
                  if ((v44 & 1) != 0)
                  {
                    unint64_t v45 = v96;
                    goto LABEL_43;
                  }
                }
              }

              else
              {
                sub_1000178B0((uint64_t)&v100, &qword_100113CD0);
              }

              v11 += 3LL;
              if (!--v97)
              {
                swift_bridgeObjectRelease(v96);
                break;
              }
            }
          }

          uint64_t v23 = 0xD000000000000038LL;
          uint64_t v24 = 0x80000001000CE470LL;
          uint64_t v25 = 235LL;
LABEL_40:
          sub_100029840( v23,  v24,  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  v25);
          return;
        }
      }

      else
      {
        if (v18 == v21) {
          goto LABEL_37;
        }
        BOOL v19 = 0;
      }

      v20 += 3;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_once(&qword_1001128E8, sub_10001F4C0);
LABEL_44:
        uint64_t v51 = type metadata accessor for OSSignposter(0LL);
        sub_100008EC4(v51, (uint64_t)qword_1001171E0);
        uint64_t v52 = v87;
        unint64_t v53 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v87 + 16);
        unint64_t v54 = v86;
        uint64_t v55 = v88;
        uint64_t v56 = v53(v86, &v15[OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID], v88);
        __int128 v57 = (os_log_s *)OSSignposter.logHandle.getter(v56);
        os_signpost_type_t v58 = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          int v59 = v85;
          v53((unint64_t)v85, (char *)v54, v55);
          char v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)char v60 = 134217984;
          *(void *)&__int128 v100 = v11;
          uint64_t v61 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, v60 + 4, v60 + 12);
          os_signpost_id_t v62 = OSSignpostID.rawValue.getter(v61);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v57,  v58,  v62,  "ActiveClockSource_setCurSampleRate",  "samplingRate %lu",  v60,  0xCu);
          swift_slowDealloc(v60, -1LL, -1LL);

          uint64_t v63 = *(void (**)(unint64_t, uint64_t))(v52 + 8);
          v63(v54, v55);
          v63((unint64_t)v59, v55);
        }

        else
        {

          (*(void (**)(unint64_t, uint64_t))(v52 + 8))(v54, v55);
        }

        *((void *)&v100 + 1) = 0xE000000000000000LL;
        _StringGuts.grow(_:)(40LL);
        swift_bridgeObjectRelease(*((void *)&v100 + 1));
        *(void *)&__int128 v100 = 0xD000000000000026LL;
        *((void *)&v100 + 1) = 0x80000001000CE4B0LL;
        *(void *)&v99[0] = v11;
        v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
        uint64_t v65 = v64._object;
        String.append(_:)(v64);
        swift_bridgeObjectRelease(v65);
        uint64_t v66 = *((void *)&v100 + 1);
        sub_100029834( v100,  *((uint64_t *)&v100 + 1),  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  240LL);
        swift_bridgeObjectRelease(v66);
        v15[24] = 1;
        swift_beginAccess(v15 + 128, v99, 0LL, 0LL);
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15 + 128);
        if (Strong)
        {
          uint64_t v68 = Strong;
          int v69 = v92 | (v93 << 16);
          uint64_t v70 = *((void *)v15 + 17);
          uint64_t v71 = swift_getObjectType(Strong);
          *((void *)&v101 + 1) = type metadata accessor for ActiveClockSource(0LL);
          *(void *)&__int128 v102 = &protocol witness table for ActiveClockSource;
          *(void *)&__int128 v100 = v15;
          swift_retain(v15);
          sub_10002C7D0(v69 & 0xFFFFFF, 0LL, 0, &v100, v11, v71, v70);
          swift_unknownObjectRelease(v68, v72);
          sub_100017A40(&v100);
          int v73 = v84;
          unint64_t *v84 = v11;
          *((_BYTE *)v73 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0;
          uint64_t v74 = sub_100021700();
          uint64_t v75 = v74;
          if ((v73[1] & 1) != 0 || v74 != *v73)
          {
            *(void *)&__int128 v100 = 0LL;
            *((void *)&v100 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(66LL);
            v76._countAndFlagsBits = 0xD000000000000038LL;
            v76._object = (void *)0x80000001000CE520LL;
            String.append(_:)(v76);
            v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
            unint64_t v78 = v77._object;
            String.append(_:)(v77);
            swift_bridgeObjectRelease(v78);
            v79._countAndFlagsBits = 0x206461657220LL;
            v79._object = (void *)0xE600000000000000LL;
            String.append(_:)(v79);
            uint64_t v98 = v75;
            v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
            char v81 = v80._object;
            String.append(_:)(v80);
            swift_bridgeObjectRelease(v81);
            uint64_t v82 = *((void *)&v100 + 1);
            sub_100029840( v100,  *((uint64_t *)&v100 + 1),  0x6C706D6153727563LL,  (void *)0xEF65746152676E69LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  252LL);
            swift_bridgeObjectRelease(v82);
          }

          *(void *)&v15[OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp] = mach_absolute_time();
        }

        else
        {
          __break(1u);
        }

        return;
      }
    }
  }

uint64_t ActiveClockSource.curSamplingRate.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
}

void (*ActiveClockSource.curSamplingRate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v2;
  return sub_100023FA0;
}

void sub_100023FA0(uint64_t a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.processTargetedInterrupt(attribute:controlSelector:channelNumber:)( AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.prepareClockForIO(_:)( Swift::UInt64 a1)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - v9;
  uint64_t v11 = mach_absolute_time();
  unint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp);
  unint64_t v13 = v11 - v12;
  if (v11 < v12)
  {
    __break(1u);
  }

  else if (qword_100112948 == -1)
  {
    goto LABEL_3;
  }

  swift_once(&qword_100112948, sub_1000CA978);
LABEL_3:
  if ((_DWORD)qword_1001172D0 != HIDWORD(qword_1001172D0))
  {
    if (!is_mul_ok(v13, qword_1001172D0))
    {
      __break(1u);
      goto LABEL_18;
    }

    if (!HIDWORD(qword_1001172D0))
    {
      __break(1u);
      goto LABEL_20;
    }

    unint64_t v13 = v13 * qword_1001172D0 / HIDWORD(qword_1001172D0);
  }

  BOOL v14 = a1 > v13 / 0x3E8;
  a1 -= v13 / 0x3E8;
  if (!v14) {
    return;
  }
  if (HIDWORD(a1))
  {
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    return;
  }

  v29[1] = v2;
  if (qword_1001128E8 != -1) {
LABEL_18:
  }
    swift_once(&qword_1001128E8, sub_10001F4C0);
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v15, (uint64_t)qword_1001171E0);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v17 = v16(v10, v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v4);
  uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
  os_signpost_type_t v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v16(v8, (uint64_t)v10, v4);
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    LODWORD(v3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a1;
    uint64_t v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v20 + 4, v20 + 8);
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter(v21);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  v19,  v22,  "ActiveClockSource_prepareClock",  "delay %u us",  v20,  8u);
    swift_slowDealloc(v20, -1LL, -1LL);

    uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v10, v4);
    v23(v8, v4);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  uint64_t v30 = 0LL;
  uint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(53LL);
  v24._countAndFlagsBits = 0x676E6979616C6544LL;
  v24._object = (void *)0xE900000000000020LL;
  String.append(_:)(v24);
  int v32 = a1;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 0xD00000000000002ALL;
  v27._object = (void *)0x80000001000CE5D0LL;
  String.append(_:)(v27);
  uint64_t v28 = v31;
  sub_100029834( v30,  v31,  0xD000000000000015LL,  (void *)0x80000001000CE600LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  320LL);
  swift_bridgeObjectRelease(v28);
  usleep(a1);
}

Swift::Void __swiftcall ActiveClockSource.invalidateSamplingRate()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + _Block_object_dispose((const void *)(v30 - 136), 8) = 1;
}

void *ActiveClockSource.deinit()
{
  uint64_t v1 = v0[9];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  sub_10001AA14((uint64_t)(v0 + 16));
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return v0;
}

uint64_t ActiveClockSource.__deallocating_deinit()
{
  uint64_t v1 = v0[9];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  sub_10001AA14((uint64_t)(v0 + 16));
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

double sub_1000244A8@<D0>(uint64_t *a1@<X8>)
{
  __int16 v14 = *(_WORD *)(v1 + 32);
  char v3 = *(_BYTE *)(v1 + 34);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  __int16 v6 = *(_WORD *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  char v9 = *(_BYTE *)(v1 + 80);
  char v10 = *(_BYTE *)(v1 + 81);
  uint64_t v11 = *(void *)(v1 + 88);
  a1[3] = (uint64_t)&type metadata for ClockSource;
  a1[4] = sub_10001FA28();
  uint64_t v12 = swift_allocObject(&unk_100103A80, 80LL, 7LL);
  *a1 = v12;
  *(_BYTE *)(v12 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  *(_WORD *)(v12 + 16) = v14;
  *(void *)(v12 + 24) = v4;
  *(void *)(v12 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v5;
  *(_WORD *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v6;
  *(void *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v7;
  *(void *)(v12 + 56) = v8;
  *(_BYTE *)(v12 + 64) = v9;
  *(_BYTE *)(v12 + 65) = v10;
  *(void *)(v12 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  swift_bridgeObjectRetain(v8);
  *(void *)&double result = swift_bridgeObjectRetain(v7).n128_u64[0];
  return result;
}

void sub_10002456C()
{
}

double sub_100024580@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  __int16 v15 = *(_WORD *)(*v1 + 32);
  char v4 = *(_BYTE *)(*v1 + 34);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 48);
  __int16 v7 = *(_WORD *)(*v1 + 56);
  uint64_t v8 = *(void *)(*v1 + 64);
  uint64_t v9 = *(void *)(v3 + 72);
  char v10 = *(_BYTE *)(v3 + 80);
  char v11 = *(_BYTE *)(v3 + 81);
  uint64_t v12 = *(void *)(v3 + 88);
  a1[3] = (uint64_t)&type metadata for ClockSource;
  a1[4] = sub_10001FB68();
  uint64_t v13 = swift_allocObject(&unk_100103A80, 80LL, 7LL);
  *a1 = v13;
  *(_BYTE *)(v13 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_WORD *)(v13 + 16) = v15;
  *(void *)(v13 + 24) = v5;
  *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(void *)(v13 + 56) = v9;
  *(_BYTE *)(v13 + 64) = v10;
  *(_BYTE *)(v13 + 65) = v11;
  *(void *)(v13 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  swift_bridgeObjectRetain(v9);
  *(void *)&double result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t sub_100024648()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 128, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 128);
}

uint64_t sub_100024690(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 128;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 136) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

uint64_t (*sub_1000246F4(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 128, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 128);
  uint64_t v6 = *(void *)(v4 + 136);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001FA18;
}

void sub_100024764(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 136) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 128, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_1000247D4()
{
  return *(void *)(*(void *)v0 + 40LL);
}

uint64_t sub_1000247E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 104LL));
  return v1;
}

void sub_100024810(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess(v5 + 128, v6, 1LL, 0LL);
  *(void *)(v5 + 136) = a2;
  swift_unknownObjectWeakAssign(v5 + 128, a1);
  ActiveClockSource.refresh()();
}

void sub_100024880(unsigned __int8 a1, uint64_t a2)
{
}

void sub_1000248A0(unint64_t a1, char a2)
{
}

void sub_1000248A8(Swift::UInt64 a1)
{
}

uint64_t ActiveClockSelector.staticClockSelector.getter@<X0>(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 16);
  __int16 v3 = *(_WORD *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(v1 + 18);
  *(_WORD *)a1 = v2;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 24);
  *(_WORD *)(a1 + 24) = v3;
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v4;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v6);
}

uint64_t ActiveClockSelector.curSelection.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t ActiveClockSelector.curSelection.setter(char a1)
{
  uint64_t result = swift_beginAccess(v1 + 72, v4, 1LL, 0LL);
  *(_BYTE *)(v1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a1;
  return result;
}

uint64_t (*ActiveClockSelector.curSelection.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSelector.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain(*(void *)(v0 + 88));
  return v1;
}

uint64_t ActiveClockSelector.staticClockEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100024A08((uint64_t (*)(void))sub_1000286EC, a1);
}

uint64_t ActiveClockSelector.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100024A08((uint64_t (*)(void))sub_100028764, a1);
}

uint64_t sub_100024A08@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  __int16 v4 = *(_WORD *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 18);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  __int16 v8 = *(_WORD *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  uint64_t v11 = *(void *)(v2 + 64);
  a2[3] = (uint64_t)&type metadata for ClockSelector;
  a2[4] = a1();
  uint64_t v12 = swift_allocObject(&unk_100103AA8, 72LL, 7LL);
  *a2 = v12;
  *(_BYTE *)(v12 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v5;
  *(_WORD *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
  *(void *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(void *)(v12 + 56) = v10;
  *(void *)(v12 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  return swift_bridgeObjectRetain(v10);
}

uint64_t MixerUnit.inputSources.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 56));
}

void *ActiveClockSelector.selectorControl.getter()
{
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

void ActiveClockSelector.selectorControl.setter(uint64_t a1)
{
  __int16 v3 = *(void **)(v1 + 112);
  *(void *)(v1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = a1;
}

uint64_t (*ActiveClockSelector.selectorControl.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void ActiveClockSelector.start(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v2 + 12, v64, 1LL, 0LL);
  v2[13] = a2;
  swift_unknownObjectWeakAssign(v2 + 12, a1);
  if (*(void *)(v2[7] + 16LL) < 2uLL) {
    return;
  }
  uint64_t v10 = v2[8];
  if (!v10) {
    return;
  }
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_18:
    unint64_t v34 = sub_10000AE14();
    uint64_t v35 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
    *(_BYTE *)uint64_t v36 = 12;
    *(void *)(v36 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v36 + 16) = 0xE000000000000000LL;
    *(void *)(v36 + 24) = 0x6E6F287472617473LL;
    *(void *)(v36 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA0000000000293ALL;
    *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v36 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v36 + 56) = 361LL;
    swift_willThrow(v35);
    return;
  }

  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v51 = v2;
  uint64_t v52 = v4;
  unint64_t v53 = &v62;
  swift_bridgeObjectRetain(v10);
  uint64_t v13 = 32LL;
  uint64_t v56 = v12;
  while (1)
  {
    uint64_t v65 = v11;
    uint64_t v59 = v13;
    __int16 v14 = (unsigned __int16 *)(v12 + v13);
    int v15 = *((unsigned __int8 *)v14 + 2);
    int v16 = *v14;
    *((void *)&v62 + 1) = &type metadata for USBDescriptorControl;
    int v54 = v16;
    int v55 = v15;
    BYTE2(v61) = v15;
    LOWORD(v61) = v16;
    uint64_t v17 = Mirror.init(reflecting:)(&v61);
    uint64_t v18 = v9;
    os_signpost_type_t v19 = (void *)Mirror.children.getter(v17);
    uint64_t v20 = v19[2];
    uint64_t v21 = v19[3];
    uint64_t v23 = v19[4];
    uint64_t v22 = v19[5];
    uint64_t ObjectType = swift_getObjectType(v20);
    swift_unknownObjectRetain(v20);
    swift_unknownObjectRetain(v23);
    uint64_t v25 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v21);
    uint64_t v26 = swift_getObjectType(v23);
    if (v25 != dispatch thunk of _AnyIndexBox._typeID.getter(v26, v22))
    {
      __break(1u);
      return;
    }

    char v27 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v23, v22, ObjectType, v21);
    swift_unknownObjectRelease(v23, v28);
    if ((v27 & 1) != 0)
    {
      swift_unknownObjectRelease(v20, v29);
      __int128 v62 = 0u;
      __int128 v63 = 0u;
      __int128 v61 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v20, v21);
      __int128 v61 = v60[0];
      __int128 v62 = v60[1];
      __int128 v63 = v60[2];
      swift_unknownObjectRelease(v20, v30);
    }

    uint64_t v9 = v18;
    swift_release(v19);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v58);
    if (!*((void *)&v63 + 1))
    {
      sub_1000178B0((uint64_t)&v61, &qword_100113CD0);
      goto LABEL_6;
    }

    uint64_t v31 = *((void *)&v61 + 1);
    uint64_t v32 = v61;
    sub_100017A40(v53);
    if (!v31) {
      goto LABEL_6;
    }
    if (v32 == 0x726F7463656C6573LL && v31 == 0xE800000000000000LL) {
      break;
    }
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v31, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v31);
    if ((v33 & 1) != 0)
    {
      uint64_t v31 = v56;
      goto LABEL_21;
    }

LABEL_6:
    uint64_t v13 = v59 + 3;
    uint64_t v11 = v65 - 1;
    uint64_t v12 = v56;
    if (v65 == 1)
    {
      swift_bridgeObjectRelease(v56);
      goto LABEL_18;
    }
  }

  swift_bridgeObjectRelease(v56);
LABEL_21:
  int v37 = v54 | (v55 << 16);
  swift_bridgeObjectRelease(v31);
  uint64_t v38 = swift_getObjectType(v49);
  *((void *)&v62 + 1) = type metadata accessor for ActiveClockSelector();
  *(void *)&__int128 v63 = &protocol witness table for ActiveClockSelector;
  uint64_t v39 = v51;
  *(void *)&__int128 v61 = v51;
  uint64_t v40 = v50;
  uint64_t v41 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v50 + 144);
  swift_retain(v51);
  uint64_t v42 = v52;
  __int16 v43 = v41(v37 & 0xFFFFFF, 0LL, 0LL, &v61, v38, v40);
  if (v42)
  {
    sub_100017A40(&v61);
  }

  else
  {
    __int16 v45 = v43;
    Swift::String v46 = v44;
    sub_100017A40(&v61);
    ADCControlRequestParameterBlock.getCur()(v46, v45 & 0x1FF, (uint64_t)&v61);

    uint64_t v47 = sub_100008E00(&qword_100113EB8);
    if ((swift_dynamicCast(v60, &v61, v47, &type metadata for UInt8, 6LL) & 1) != 0)
    {
      char v48 = v60[0];
      swift_beginAccess(v39 + 9, &v61, 1LL, 0LL);
      *((_BYTE *)v39 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v48;
    }
  }

          sub_1000178B0((uint64_t)&v41, &qword_100114048);
LABEL_7:
          if (v10 == ++v11) {
            goto LABEL_32;
          }
        }
      }

      __break(1u);
      goto LABEL_34;
    }
  }

  uint64_t v13 = _swiftEmptyArrayStorage;
LABEL_32:
  swift_bridgeObjectRelease_n(v9, 2LL);
  *uint64_t v32 = v13;
}

          sub_1000178B0((uint64_t)&v362, &qword_100114940);
          v349 = 0u;
          v350 = 0u;
          *(void *)&v351[0] = 0LL;
          goto LABEL_7;
        }

    v21 += 3LL;
    uint64_t v20 = v110 - 1;
    os_signpost_type_t v19 = v104;
    if (v110 == 1)
    {
      swift_unknownObjectRelease(v97, v22);
      swift_bridgeObjectRelease(v19);
      uint64_t v7 = v96;
      goto LABEL_22;
    }
  }

  swift_bridgeObjectRelease(v104);
LABEL_90:
  char v81 = v102 | (v103 << 16);
  swift_bridgeObjectRelease(v39);
  uint64_t v50 = v97;
  uint64_t v82 = swift_getObjectType(v97);
  uint64_t v83 = v95[3];
  Swift::String v84 = v95[4];
  uint64_t v85 = sub_1000178EC(v95, v83);
  *((void *)&v117 + 1) = v83;
  *(void *)&Swift::String v118 = *(void *)(v84 + 8);
  unint64_t v86 = sub_100028B40(&v116);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v83 - 8) + 16LL))(v86, v85, v83);
  uint64_t v87 = v96;
  uint64_t v88 = (*(uint64_t (**)(void, void, void, __int128 *, uint64_t))(v94 + 144))( v81 & 0xFFFFFF,  0LL,  0LL,  &v116,  v82);
  __int16 v43 = v87;
  if (!v87)
  {
    unint64_t v90 = v88;
    uint64_t v57 = v89;
    sub_100017A40(&v116);
    int v54 = sub_100069D48(v90 & 0x1FF, v57);
    uint64_t v7 = 0LL;
    goto LABEL_94;
  }

  swift_unknownObjectRelease(v50, v89);
  sub_100017A40(&v116);
LABEL_18:
  uint64_t v7 = 0LL;
  sub_100029840( 0xD000000000000024LL,  0x80000001000D36C0LL,  0xD000000000000045LL,  (void *)0x80000001000D3670LL,  0xD000000000000028LL,  0x80000001000D2560LL,  190LL);
  swift_errorRelease(v43);
LABEL_22:
  while (2)
  {
    if ((ActiveStreamingInterface.hasValidAlternateSettingsControl.getter() & 1) != 0)
    {
      uint64_t active = ActiveStreamingInterface.getValidAlternateSettings()();
      uint64_t v7 = v46;
      if (v46) {
        return (void *)swift_bridgeObjectRelease(v112);
      }
      char v48 = active;
    }

    else
    {
      char v48 = 255LL;
    }

    uint64_t v49 = *(void *)(v8 + 72);
    uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v8 + 72));
LABEL_29:
    unsigned int v108 = v49;
    unint64_t v96 = v7;
    if (!v50)
    {
LABEL_87:
      swift_bridgeObjectRelease(v108);
      return v112;
    }

    __int128 v102 = v48;
    uint64_t v51 = 0LL;
    uint64_t v110 = v108 & 0xC000000000000001LL;
    uint64_t v105 = v108 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v104 = v108 + 32;
    uint64_t v109 = v50;
    while (2)
    {
      if (v110)
      {
        uint64_t v52 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v108);
        unint64_t v53 = __OFADD__(v51++, 1LL);
        if (v53) {
          goto LABEL_96;
        }
      }

      else
      {
        if (v51 >= *(void *)(v105 + 16))
        {
          __break(1u);
          goto LABEL_103;
        }

        uint64_t v52 = *(void **)(v104 + 8 * v51);
        swift_retain(v52);
        unint64_t v53 = __OFADD__(v51++, 1LL);
        if (v53)
        {
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          JUMPOUT(0x1000C4358LL);
        }
      }

      uint64_t v49 = v52[13];
      swift_retain(v49);
      char v48 = v8;
      int v54 = ActiveStreamingInterface.hasValidAlternateSettingsControl.getter();
      if ((v54 & 1) != 0)
      {
        uint64_t v56 = *(unsigned __int8 *)(v52[2] + 3LL);
        if (v56 >= 0x40 || ((v102 >> v56) & 1) == 0) {
          goto LABEL_31;
        }
      }

      uint64_t v57 = (void *)*v106;
      if (!*v106)
      {
LABEL_51:
        Swift::String v64 = *(void *)(v49 + 80);
        if (!v64) {
          goto LABEL_66;
        }
        goto LABEL_55;
      }

      uint64_t v7 = *(void *)(v8 + 24);
      uint64_t v58 = swift_getObjectType(*v106);
      uint64_t v59 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
      swift_unknownObjectRetain(v57);
      char v48 = v59(v58, v7);
      int v54 = swift_unknownObjectRelease(v57, v60);
      if (!v48)
      {
        uint64_t v50 = v109;
        goto LABEL_51;
      }

      __int128 v61 = *(void *)(v48 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
      uint64_t v50 = v109;
      if (v61)
      {
        __int128 v62 = *(void *)(v61 + 16);
        if (v62)
        {
          if (*(_BYTE *)(v61 + 32) == 2)
          {
LABEL_46:
            uint64_t v57 = (void *)IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v49 + 16));

            if ((_DWORD)v57) {
              goto LABEL_51;
            }
            __int128 v63 = v52[16];
            if (!v63 || *(void *)(v63 + 16) != 1LL) {
              goto LABEL_51;
            }
LABEL_31:
            swift_release(v52);
            swift_release(v49);
            if (v51 == v50) {
              goto LABEL_87;
            }
            continue;
          }

          if (v62 != 1)
          {
            if (*(_BYTE *)(v61 + 33) == 2) {
              goto LABEL_46;
            }
            if (v62 != 2)
            {
              Swift::String v76 = 34LL;
              while (1)
              {
                Swift::String v77 = v76 - 31;
                if (__OFADD__(v76 - 32, 1LL)) {
                  break;
                }
                if (*(_BYTE *)(v61 + v76) == 2) {
                  goto LABEL_46;
                }
                ++v76;
                if (v77 == v62) {
                  goto LABEL_54;
                }
              }

id ActiveClockSelector.audioControlsAndProperties(scope:for:)(int a1)
{
  return sub_1000278F0(a1);
}

uint64_t sub_100025008(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!v23[3])
  {
LABEL_9:
    sub_1000178B0((uint64_t)v23, &qword_100113E98);
    goto LABEL_10;
  }

  uint64_t v6 = sub_100008E00(&qword_100113B28);
  uint64_t active = type metadata accessor for ActiveClockSource(0LL);
  if ((swift_dynamicCast(&v22, v23, v6, active, 6LL) & 1) == 0)
  {
LABEL_10:
    unint64_t v8 = 0LL;
    goto LABEL_11;
  }

  unint64_t v8 = v22;
  uint64_t v9 = *(void *)(v22 + 104);
  if (v9)
  {
    BOOL v10 = __OFADD__(a1++, 1LL);
    char v11 = v10;
    swift_bridgeObjectRetain(*(void *)(v22 + 104));
    if ((v11 & 1) == 0) {
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_9;
  }

uint64_t sub_10002528C()
{
  unint64_t v90 = (void *)type metadata accessor for Mirror(0LL);
  uint64_t v89 = (char *)*(v90 - 1);
  __chkstk_darwin(v90);
  uint64_t v7 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = 0LL;
  uint64_t v88 = *(void *)(v0 + 56);
  if (*(void *)(v88 + 16) == 1LL) {
    goto LABEL_4;
  }
  swift_beginAccess(v0 + 112, v101, 0LL, 0LL);
  uint64_t v9 = *(void *)(v0 + 112);
  if (v9)
  {
    BOOL v10 = (unsigned int *)(v9 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection);
    swift_beginAccess(v9 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection, v94, 0LL, 0LL);
    unint64_t v8 = *v10 - 1LL;
    goto LABEL_4;
  }

  uint64_t v24 = *(void *)(v0 + 64);
  if (!v24) {
    goto LABEL_28;
  }
  uint64_t v25 = *(void **)(v24 + 16);
  if (!v25) {
    goto LABEL_28;
  }
  int64_t v83 = v0;
  Swift::String v84 = (char *)&v96;
  swift_bridgeObjectRetain(v24);
  uint64_t v12 = 32LL;
  uint64_t v87 = v26;
  while (1)
  {
    uint64_t v91 = v25;
    int v27 = *((unsigned __int8 *)v26 + v12 + 2);
    int v28 = *(unsigned __int16 *)((char *)v26 + v12);
    *((void *)&v96 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v86) = v27;
    BYTE2(v95) = v27;
    LODWORD(v85) = v28;
    LOWORD(v95) = v28;
    uint64_t v29 = Mirror.init(reflecting:)(&v95);
    unint64_t v8 = (unint64_t)v7;
    uint64_t v3 = (char *)Mirror.children.getter(v29);
    uint64_t v4 = (void (*)(char *, unint64_t))*((void *)v3 + 2);
    char v5 = (void (*)(char *))*((void *)v3 + 3);
    id v2 = (char *)*((void *)v3 + 4);
    uint64_t v1 = *((void *)v3 + 5);
    uint64_t ObjectType = swift_getObjectType(v4);
    swift_unknownObjectRetain(v4);
    swift_unknownObjectRetain(v2);
    uint64_t v7 = (char *)dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v5);
    uint64_t v31 = swift_getObjectType(v2);
    if (v7 != (char *)dispatch thunk of _AnyIndexBox._typeID.getter(v31, v1))
    {
      __break(1u);
      goto LABEL_41;
    }

    char v32 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v2, v1, ObjectType, v5);
    swift_unknownObjectRelease(v2, v33);
    if ((v32 & 1) != 0)
    {
      swift_unknownObjectRelease(v4, v34);
      __int128 v96 = 0u;
      __int128 v97 = 0u;
      __int128 v95 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v4, v5);
      __int128 v95 = v94[0];
      __int128 v96 = v94[1];
      __int128 v97 = v94[2];
      swift_unknownObjectRelease(v4, v35);
    }

    uint64_t v7 = (char *)v8;
    swift_release(v3);
    (*((void (**)(unint64_t, void *))v89 + 1))(v8, v90);
    if (*((void *)&v97 + 1)) {
      break;
    }
    sub_1000178B0((uint64_t)&v95, &qword_100113CD0);
LABEL_16:
    v12 += 3LL;
    uint64_t v25 = (void *)((char *)v91 - 1);
    uint64_t v26 = v87;
    if (v91 == (void *)1)
    {
      swift_bridgeObjectRelease(v87);
LABEL_28:
      unint64_t v39 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v39, 0LL, 0LL);
      uint64_t v22 = v20;
      *(_BYTE *)uint64_t v21 = 12;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      strcpy((char *)(v21 + 24), "selectedClock");
      *(_WORD *)(v21 + 3_Block_object_dispose((const void *)(v30 - 136), 8) = -4864;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
      uint64_t v23 = 428LL;
LABEL_29:
      *(void *)(v21 + 56) = v23;
      swift_willThrow(v20);
      uint64_t v40 = sub_100008E00(&qword_100113410);
      uint64_t v41 = swift_allocObject(v40, 64LL, 7LL);
      *(_OWORD *)(v41 + 16) = xmmword_1000D3D30;
      swift_getErrorValue(v22, v100, &v98);
      uint64_t v42 = v98;
      uint64_t v43 = v99;
      *(void *)(v41 + 56) = v99;
      char v44 = sub_100028B40((void *)(v41 + 32));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16LL))(v44, v42, v43);
      print(_:separator:terminator:)(v41, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      swift_bridgeObjectRelease(v41);
      swift_errorRelease(v22);
      return 0LL;
    }
  }

  uint64_t v36 = (void *)*((void *)&v95 + 1);
  uint64_t v37 = v95;
  sub_100017A40(v84);
  if (!v36) {
    goto LABEL_16;
  }
  if (v37 != 0x726F7463656C6573LL || v36 != (void *)0xE800000000000000LL)
  {
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v36, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
    swift_bridgeObjectRelease(v36);
    if ((v38 & 1) != 0)
    {
      uint64_t v36 = v87;
      goto LABEL_31;
    }

    goto LABEL_16;
  }

  swift_bridgeObjectRelease(v87);
LABEL_31:
  swift_bridgeObjectRelease(v36);
  int64_t v0 = v83;
  swift_beginAccess(v83 + 96, v94, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 96);
  if (Strong)
  {
    uint64_t v46 = Strong;
    unsigned int v47 = v85 | ((_DWORD)v86 << 16);
    uint64_t v48 = *(void *)(v0 + 104);
    uint64_t v49 = swift_getObjectType(Strong);
    *((void *)&v96 + 1) = type metadata accessor for ActiveClockSelector();
    *(void *)&__int128 v97 = &protocol witness table for ActiveClockSelector;
    *(void *)&__int128 v95 = v0;
    uint64_t v50 = *(uint64_t (**)(void, void, void, __int128 *, uint64_t, uint64_t))(v48 + 144);
    swift_retain(v0);
    LOWORD(v5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v50(v47 & 0xFFFFFF, 0LL, 0LL, &v95, v49, v48);
    uint64_t v12 = v51;
    swift_unknownObjectRelease(v46, v51);
    sub_100017A40(&v95);
    ADCControlRequestParameterBlock.getCur()((id)v12, (unsigned __int16)v50 & 0x1FF, (uint64_t)&v95);
    unint64_t v8 = *((void *)&v96 + 1);
    uint64_t v52 = v97;
    unint64_t v53 = sub_1000178EC(&v95, *((uint64_t *)&v96 + 1));
    uint64_t v91 = v82;
    int v54 = *(void **)(v8 - 8);
    id v2 = (char *)v54[8];
    __chkstk_darwin(v53);
    unint64_t v55 = (unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v7 = (char *)v82 - v55;
    char v5 = (void (*)(char *))v54[2];
    v5((char *)v82 - v55);
    uint64_t v1 = *(void *)(v52 + 8);
    uint64_t v56 = dispatch thunk of static BinaryInteger.isSigned.getter(v8, v1);
    char v57 = v56;
    unint64_t v90 = v82;
    __chkstk_darwin(v56);
    ((void (*)(char *, char *, unint64_t))v5)((char *)v82 - v55, (char *)v82 - v55, v8);
    unint64_t v86 = v54;
    if ((v57 & 1) == 0)
    {
      uint64_t v4 = (void (*)(char *, unint64_t))v54[1];
      v4((char *)v82 - v55, v8);
      goto LABEL_53;
    }

    uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
    uint64_t v4 = (void (*)(char *, unint64_t))v54[1];
    uint64_t v59 = ((uint64_t (*)(char *, unint64_t))v4)((char *)v82 - v55, v8);
    if (v58 <= 64) {
      goto LABEL_53;
    }
    uint64_t v89 = (char *)v82;
    __chkstk_darwin(v59);
    uint64_t v3 = (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    ((void (*)(char *, char *, unint64_t))v5)(v3, v7, v8);
    v93[0] = 0x8000000000000000LL;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(v8, v1) & 1) != 0)
    {
      uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
      if (v60 < 64) {
        goto LABEL_49;
      }
      goto LABEL_45;
    }

    goto LABEL_43;
  }

  unint64_t v8 = 0LL;
LABEL_4:
  while (2)
  {
    swift_beginAccess(v0 + 96, v93, 0LL, 0LL);
    uint64_t v11 = swift_unknownObjectWeakLoadStrong(v0 + 96);
    if (!v11) {
      goto LABEL_69;
    }
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v0 + 104);
    uint64_t v14 = swift_getObjectType(v11);
    if ((v8 & 0x8000000000000000LL) != 0)
    {
LABEL_41:
      __break(1u);
    }

    else if (v8 < *(void *)(v88 + 16))
    {
      sub_10002C5BC(*(void *)(v88 + 8 * v8 + 32), v14, v13, (uint64_t)&v95);
      swift_unknownObjectRelease(v12, v15);
      if (*((void *)&v96 + 1))
      {
        uint64_t v16 = sub_100008E00(&qword_100113B28);
        uint64_t v17 = sub_100008E00(&qword_1001144E8);
        if ((swift_dynamicCast(v92, &v95, v16, v17, 6LL) & 1) != 0) {
          return v92[0];
        }
      }

      else
      {
        sub_1000178B0((uint64_t)&v95, &qword_100113E98);
      }

      unint64_t v19 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
      uint64_t v22 = v20;
      *(_BYTE *)uint64_t v21 = 53;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      strcpy((char *)(v21 + 24), "selectedClock");
      *(_WORD *)(v21 + 3_Block_object_dispose((const void *)(v30 - 136), 8) = -4864;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
      uint64_t v23 = 442LL;
      goto LABEL_29;
    }

    __break(1u);
LABEL_43:
    char v61 = dispatch thunk of static BinaryInteger.isSigned.getter(v8, v1);
    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter(v8, v1);
    if ((v61 & 1) != 0)
    {
      if (v60 <= 64) {
        goto LABEL_51;
      }
LABEL_45:
      uint64_t v87 = v82;
      __chkstk_darwin(v60);
      unint64_t v62 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v93, &type metadata for Int, v62, v8, v1);
      char v63 = dispatch thunk of static Comparable.< infix(_:_:)( v3,  (char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8,  *(void *)(*(void *)(v1 + 32) + 8LL));
      v4((char *)v82 - ((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
      v4(v3, v8);
      if ((v63 & 1) != 0) {
        goto LABEL_50;
      }
    }

    else if (v60 < 64)
    {
LABEL_49:
      uint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter(v8, v1);
      v4(v3, v8);
      if (v64 < v93[0])
      {
        do
        {
LABEL_50:
          __break(1u);
LABEL_51:
          uint64_t v87 = *(void **)(*(void *)(v1 + 24) + 16LL);
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v87);
          uint64_t v85 = v82;
          __chkstk_darwin(AssociatedTypeWitness);
          v82[0] = (char *)v82 - v66;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v87,  v8,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          uint64_t v68 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
          v82[1] = v82;
          __chkstk_darwin(v68);
          Swift::String v84 = (char *)((unint64_t)(v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          int64_t v69 = (char *)v82 - v84;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v82[0], v8, v87);
          LODWORD(v87) = dispatch thunk of static Comparable.< infix(_:_:)( v3,  v69,  v8,  *(void *)(*(void *)(v1 + 32) + 8LL));
          uint64_t v70 = ((uint64_t (*)(int64_t, unint64_t))v4)(v69, v8);
          uint64_t v85 = v82;
          __chkstk_darwin(v70);
          int64_t v0 = (char *)v82 - v84;
          ((void (*)(int64_t, char *, unint64_t))v86[4])((char *)v82 - v84, v3, v8);
          uint64_t v3 = (char *)v93[0];
          uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter(v8, v1);
          v4((char *)v0, v8);
        }

        while (v71 < (uint64_t)v3);
      }
    }

    else
    {
      v4(v3, v8);
    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.refresh()()
{
  uint64_t v0 = sub_10002528C();
  if (v0)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(v0);
    (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
    swift_unknownObjectRelease(v2, v5);
  }

  else
  {
    unint64_t v6 = sub_10000AE14();
    uint64_t v7 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
    *(_BYTE *)uint64_t v8 = 78;
    *(void *)(v8 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v8 + 16) = 0xE000000000000000LL;
    *(void *)(v8 + 24) = 0x2868736572666572LL;
    *(void *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE900000000000029LL;
    *(void *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v8 + 56) = 453LL;
    swift_willThrow(v7);
  }

Swift::Void __swiftcall ActiveClockSelector.invalidateSamplingRate()()
{
  uint64_t v0 = sub_10002528C();
  if (v0)
  {
    uint64_t v2 = v0;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(v0);
    (*(void (**)(uint64_t))(*(void *)(v3 + 16) + 88LL))(ObjectType);
    swift_unknownObjectRelease(v2, v5);
  }

uint64_t ActiveClockSelector.rateRanges.getter()
{
  uint64_t result = sub_10002528C();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(result);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 40LL))(ObjectType);
    swift_unknownObjectRelease(v2, v6);
    return v5;
  }

  return result;
}

uint64_t ActiveClockSelector.isValid.getter()
{
  uint64_t result = sub_10002528C();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(result);
    LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 8LL))(ObjectType);
    swift_unknownObjectRelease(v2, v5);
    return v3 & 1;
  }

  return result;
}

uint64_t ActiveClockSelector.isInternal.getter()
{
  uint64_t result = sub_10002528C();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(result);
    LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 64LL))(ObjectType);
    swift_unknownObjectRelease(v2, v5);
    return v3 & 1;
  }

  return result;
}

uint64_t ActiveClockSelector.curSamplingRate.getter()
{
  uint64_t v0 = sub_10002528C();
  if (!v0) {
    return 0LL;
  }
  uint64_t v2 = v0;
  uint64_t v3 = v1;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 16LL))(ObjectType);
  swift_unknownObjectRelease(v2, v6);
  return v5;
}

uint64_t ActiveClockSelector.curSamplingRate.setter(uint64_t a1, char a2)
{
  uint64_t result = sub_10002528C();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = v5;
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 + 16) + 24LL))(a1, a2 & 1, ObjectType);
    return swift_unknownObjectRelease(v6, v9);
  }

  return result;
}

uint64_t (*ActiveClockSelector.curSamplingRate.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = sub_10002528C();
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 16) + 16LL))(ObjectType);
    char v10 = v9;
    swift_unknownObjectRelease(v5, v9);
    char v11 = v10 & 1;
  }

  else
  {
    uint64_t v8 = 0LL;
    char v11 = 1;
  }

  *(void *)a1 = v8;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v11;
  return sub_100026400;
}

uint64_t sub_100026400(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((unsigned __int8 *)a1 + 8);
  uint64_t result = sub_10002528C();
  uint64_t v4 = result;
  uint64_t v6 = v5;
  if (result)
  {
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 16) + 24LL))(v1, v2, ObjectType);
    return swift_unknownObjectRelease(v4, v8);
  }

  return result;
}

uint64_t ActiveClockSelector.isSettable.getter()
{
  uint64_t result = sub_10002528C();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType(result);
    LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 16) + 56LL))(ObjectType);
    swift_unknownObjectRelease(v2, v5);
    return v3 & 1;
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.prepareClockForIO(_:)( Swift::UInt64 a1)
{
  uint64_t v2 = sub_10002528C();
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    uint64_t ObjectType = swift_getObjectType(v2);
    (*(void (**)(Swift::UInt64, uint64_t))(*(void *)(v5 + 16) + 72LL))(a1, ObjectType);
    swift_unknownObjectRelease(v4, v7);
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 78;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD000000000000015LL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE600LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v10 + 56) = 508LL;
    swift_willThrow(v9);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.finalizeClockForIO(_:)( Swift::UInt64 a1)
{
  uint64_t v2 = sub_10002528C();
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = v3;
    uint64_t ObjectType = swift_getObjectType(v2);
    (*(void (**)(Swift::UInt64, uint64_t))(*(void *)(v5 + 16) + 80LL))(a1, ObjectType);
    swift_unknownObjectRelease(v4, v7);
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 78;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD000000000000016LL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE640LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v10 + 56) = 513LL;
    swift_willThrow(v9);
  }

uint64_t ActiveClockSelector.deinit()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  sub_10001AA14(v0 + 96);

  return v0;
}

uint64_t ActiveClockSelector.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  sub_10001AA14(v0 + 96);

  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

double sub_100026738@<D0>(uint64_t *a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 16);
  char v4 = *(_BYTE *)(v1 + 18);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  __int16 v7 = *(_WORD *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  a1[3] = (uint64_t)&type metadata for ClockSelector;
  a1[4] = sub_1000286EC();
  uint64_t v11 = swift_allocObject(&unk_100103AA8, 72LL, 7LL);
  *a1 = v11;
  *(_BYTE *)(v11 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_WORD *)(v11 + 16) = v3;
  *(void *)(v11 + 24) = v5;
  *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_WORD *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(void *)(v11 + 56) = v9;
  *(void *)(v11 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v8);
  *(void *)&double result = swift_bridgeObjectRetain(v9).n128_u64[0];
  return result;
}

void sub_1000267E4()
{
}

double sub_1000267F8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  __int16 v4 = *(_WORD *)(*v1 + 16);
  char v5 = *(_BYTE *)(*v1 + 18);
  uint64_t v6 = *(void *)(*v1 + 24);
  uint64_t v7 = *(void *)(*v1 + 32);
  __int16 v8 = *(_WORD *)(*v1 + 40);
  uint64_t v9 = *(void *)(*v1 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  uint64_t v11 = *(void *)(v3 + 64);
  a1[3] = (uint64_t)&type metadata for ClockSelector;
  a1[4] = sub_100028764();
  uint64_t v12 = swift_allocObject(&unk_100103AA8, 72LL, 7LL);
  *a1 = v12;
  *(_BYTE *)(v12 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v5;
  *(_WORD *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
  *(void *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(void *)(v12 + 56) = v10;
  *(void *)(v12 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  *(void *)&double result = swift_bridgeObjectRetain(v10).n128_u64[0];
  return result;
}

uint64_t sub_1000268A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 88LL));
  return v1;
}

void sub_1000268D8(uint64_t a1, uint64_t a2)
{
}

id sub_1000268F8(int a1)
{
  return sub_1000278F0(a1);
}

void sub_100026918(Swift::UInt64 a1)
{
}

void sub_10002692C(Swift::UInt64 a1)
{
}

void sub_100026940(char a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector] = a2;
  *(_DWORD *)&v5[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection] = a3;
  v22.receiver = v5;
  v22.super_class = (Class)type metadata accessor for AUAClockSelectorControl();
  swift_retain(a2);
  uint64_t v10 = (char *)objc_msgSendSuper2( &v22,  "initWithIsSettable:forElement:inScope:withPlugin:andObjectClassID:",  a1 & 1,  0,  1735159650,  a5,  1668047723);
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v11 = v10;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0) {
      uint64_t v17 = a4;
    }
    else {
      uint64_t v17 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    unint64_t v18 = v10;
    swift_bridgeObjectRetain(a4);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v17);
    if (v12) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease_n(a4, 2LL);
    unint64_t v19 = &v11[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection];
    swift_beginAccess(&v11[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection], v21, 32LL, 0LL);
    uint64_t v20 = v11;
    [v20 setSelectedValues:v19 withCount:1];
    swift_endAccess(v21);

    swift_release(a2);
    return;
  }

  uint64_t v12 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v13 = v10;
  swift_bridgeObjectRetain(a4);
  if (!v12) {
    goto LABEL_14;
  }
LABEL_4:
  if (v12 >= 1)
  {
    for (uint64_t i = 0LL; i != v12; ++i)
    {
      if ((a4 & 0xC000000000000001LL) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a4);
      }
      else {
        id v15 = *(id *)(a4 + 8 * i + 32);
      }
      uint64_t v16 = v15;
      [v11 addValue:v15];
    }

    goto LABEL_14;
  }

  __break(1u);
LABEL_16:
  __break(1u);
}

id AUAClockSelectorControl.changeValues(_:withCount:)(uint64_t a1, uint64_t a2)
{
  return [v2 setSelectedValues:a1 withCount:a2];
}

Swift::Void __swiftcall AUAClockSelectorControl.selectionDidChange(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v2 = v1;
  uint64_t rawValue = (uint64_t)a1.value._rawValue;
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [(id)v1 owner];
  if (!v8) {
    return;
  }
  id v88 = v8;
  uint64_t v9 = type metadata accessor for AUAAudioDevice(0LL);
  uint64_t v10 = swift_dynamicCastClass(v88, v9);
  if (!v10 || !rawValue)
  {

    return;
  }

  uint64_t v11 = v10;
  if ((unint64_t)rawValue >> 62)
  {
    if (rawValue >= 0) {
      uint64_t v1 = rawValue & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v1 = rawValue;
    }
    swift_bridgeObjectRetain(rawValue);
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter(v1);
    swift_bridgeObjectRelease(rawValue);
    if (v64 > 2) {
      goto LABEL_6;
    }
    *(void *)&__int128 v90 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(rawValue);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v1);
    if (v12) {
      goto LABEL_9;
    }
LABEL_55:
    swift_bridgeObjectRelease(rawValue);
    uint64_t v1 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_56:
    if (v1 < 0) {
      uint64_t v65 = v1;
    }
    else {
      uint64_t v65 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter(v65);
    swift_bridgeObjectRelease(v1);
    if (v66 == 1)
    {
      swift_bridgeObjectRetain(v1);
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v1);
      if (!v67)
      {
        swift_bridgeObjectRelease(v1);
        unint64_t v68 = sub_10000AE14();
        uint64_t v14 = swift_allocError(&type metadata for AUAError, v68, 0LL, 0LL);
        uint64_t v16 = v14;
        *(_BYTE *)uint64_t v15 = 1;
        *(void *)(v15 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v15 + 16) = 0xE000000000000000LL;
        *(void *)(v15 + 24) = 0xD000000000000016LL;
        *(void *)(v15 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE660LL;
        *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
        *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
        uint64_t v17 = 559LL;
        goto LABEL_63;
      }

      goto LABEL_22;
    }

void sub_100027514(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v10 = *(void *)(a4 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector);
  v13[3] = type metadata accessor for ActiveClockSelector();
  v13[4] = &protocol witness table for ActiveClockSelector;
  v13[0] = v10;
  swift_retain(v10);
  sub_10002C7D0(a3 & 0xFFFFFF, 0LL, 0, v13, a5, ObjectType, a2);
  sub_100017A40(v13);
  uint64_t v11 = (unsigned int *)(a4 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection);
  swift_beginAccess(a4 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection, v13, 1LL, 0LL);
  *uint64_t v11 = a5;
  ActiveClockSelector.refresh()();
  if (v12)
  {
    sub_100029840( 0xD00000000000001ALL,  0x80000001000CE2F0LL,  0xD000000000000016LL,  (void *)0x80000001000CE660LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  576LL);
    swift_errorRelease(v12);
  }

  else
  {
    AUAAudioDevice.clockChanged()();
  }

id AUAClockSelectorControl.__allocating_init(isSettable:forElement:inScope:with:andObjectClassID:)( char a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = [objc_allocWithZone(v5) initWithIsSettable:a1 & 1 forElement:a2 inScope:a3 withPlugin:a4 andObjectClassID:a5];

  return v7;
}

void AUAClockSelectorControl.init(isSettable:forElement:inScope:with:andObjectClassID:)()
{
}

id AUAClockSelectorControl.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAClockSelectorControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActiveClockSource(uint64_t a1)
{
  uint64_t result = qword_1001140C8;
  if (!qword_1001140C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActiveClockSource);
  }
  return result;
}

uint64_t sub_100027818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR___AUAAudioDevice_clock);
  uint64_t active = type metadata accessor for ActiveClockSource(0LL);
  uint64_t v5 = swift_dynamicCastClass(v3, active);
  if (v5)
  {
    return *(void *)(v5 + 40) == *(void *)(a1 + 40);
  }

  else
  {
    uint64_t v8 = type metadata accessor for ActiveClockSelector();
    uint64_t result = swift_dynamicCastClass(v3, v8);
    if (!result) {
      return result;
    }
    swift_unknownObjectRetain(v3);
    uint64_t v9 = sub_10002528C();
    if (!v9)
    {
      swift_unknownObjectRelease(v3, v10);
      return 0LL;
    }

    uint64_t v11 = v9;
    uint64_t v12 = v10;
    uint64_t ObjectType = swift_getObjectType(v9);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v12 + 8) + 48LL))(ObjectType);
    swift_unknownObjectRelease(v11, v15);
    uint64_t v16 = *(void *)(a1 + 40);
    swift_unknownObjectRelease(v3, v17);
    return v14 == v16;
  }

id sub_1000278F0(int a1)
{
  uint64_t v4 = v2;
  uint64_t v84 = type metadata accessor for Mirror(0LL);
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  id v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1 == 1735159650)
  {
    uint64_t v8 = *(void *)(v1 + 64);
    if (v8)
    {
      swift_beginAccess(v1 + 96, v93, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 96);
      if (Strong)
      {
        uint64_t v10 = Strong;
        uint64_t v11 = *(void *)(v8 + 16);
        if (!v11)
        {
LABEL_21:
          unint64_t v32 = sub_10000AE14();
          uint64_t v33 = swift_allocError(&type metadata for AUAError, v32, 0LL, 0LL);
          *(_BYTE *)uint64_t v34 = 12;
          *(void *)(v34 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v34 + 16) = 0xE000000000000000LL;
          *(void *)(v34 + 24) = 0xD000000000000026LL;
          *(void *)(v34 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE0F0LL;
          *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
          *(void *)(v34 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
          *(void *)(v34 + 56) = 380LL;
          swift_willThrow(v33);
          uint64_t v36 = v10;
LABEL_22:
          swift_unknownObjectRelease(v36, v35);
          return (id)ObjectType;
        }

        uint64_t v78 = Strong;
        uint64_t v75 = v4;
        uint64_t v76 = v1;
        uint64_t v77 = *(void *)(v1 + 104);
        id v79 = &v91;
        swift_bridgeObjectRetain(v8);
        uint64_t v12 = 32LL;
        uint64_t v82 = v8;
        while (1)
        {
          uint64_t v85 = v12;
          uint64_t v86 = v11;
          unint64_t v13 = (unsigned __int16 *)(v8 + v12);
          int v14 = *((unsigned __int8 *)v13 + 2);
          LODWORD(v1swift_unknownObjectWeakDestroy(v0 + 3) = *v13;
          *((void *)&v91 + 1) = &type metadata for USBDescriptorControl;
          int v81 = v14;
          BYTE2(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v14;
          int v80 = (int)v13;
          LOWORD(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = (_WORD)v13;
          uint64_t v15 = Mirror.init(reflecting:)(&v90);
          uint64_t v16 = v7;
          uint64_t v17 = (void *)Mirror.children.getter(v15);
          uint64_t v19 = v17[2];
          uint64_t v18 = v17[3];
          uint64_t v20 = v17[4];
          uint64_t v21 = v17[5];
          uint64_t ObjectType = swift_getObjectType(v19);
          swift_unknownObjectRetain(v19);
          swift_unknownObjectRetain(v20);
          uint64_t v22 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v18);
          uint64_t v23 = swift_getObjectType(v20);
          id result = (id)dispatch thunk of _AnyIndexBox._typeID.getter(v23, v21);
          if ((id)v22 != result) {
            break;
          }
          char v25 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v20, v21, ObjectType, v18);
          swift_unknownObjectRelease(v20, v26);
          if ((v25 & 1) != 0)
          {
            swift_unknownObjectRelease(v19, v27);
            __int128 v91 = 0u;
            __int128 v92 = 0u;
            __int128 v90 = 0u;
          }

          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter(v19, v18);
            __int128 v90 = v89[0];
            __int128 v91 = v89[1];
            __int128 v92 = v89[2];
            swift_unknownObjectRelease(v19, v28);
          }

          id v7 = v16;
          uint64_t v8 = v82;
          swift_release(v17);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v16, v84);
          if (*((void *)&v92 + 1))
          {
            uint64_t v29 = *((void *)&v90 + 1);
            uint64_t v30 = v90;
            sub_100017A40(v79);
            if (v29)
            {
              if (v30 == 0x726F7463656C6573LL && v29 == 0xE800000000000000LL)
              {
                swift_bridgeObjectRelease(v8);
LABEL_24:
                swift_bridgeObjectRelease(v29);
                uint64_t v37 = v78;
                uint64_t v38 = swift_getObjectType(v78);
                uint64_t v39 = v77;
                uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 16))(v38, v77);
                if (!v40)
                {
                  unint64_t v48 = sub_10000AE14();
                  uint64_t v49 = swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
                  *(_BYTE *)uint64_t v50 = 51;
                  *(void *)(v50 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v50 + 16) = 0xE000000000000000LL;
                  *(void *)(v50 + 24) = 0xD000000000000026LL;
                  *(void *)(v50 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE0F0LL;
                  *(void *)(v50 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
                  *(void *)(v50 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
                  *(void *)(v50 + 56) = 381LL;
                  swift_willThrow(v49);
                  uint64_t v36 = v37;
                  goto LABEL_22;
                }

                uint64_t v41 = (void *)v40;
                int v42 = v80 | (v81 << 16);
                uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 24))(v38, v39);
                *((void *)&v91 + 1) = type metadata accessor for ActiveClockSelector();
                *(void *)&__int128 v92 = &protocol witness table for ActiveClockSelector;
                *(void *)&__int128 v90 = v76;
                char v44 = *(uint64_t (**)(uint64_t, void, void, __int128 *, uint64_t, uint64_t))(v39 + 144);
                uint64_t ObjectType = v42 & 0xFFFFFF;
                swift_retain(v76);
                uint64_t v45 = v75;
                __int16 v46 = v44(ObjectType, 0LL, 0LL, &v90, v38, v39);
                if (v45)
                {
                  swift_unknownObjectRelease(v37, v47);

                  swift_release(v43);
                  sub_100017A40(&v90);
                  return (id)ObjectType;
                }

                __int16 v51 = v46;
                unint64_t v52 = v47;
                sub_100017A40(&v90);
                ADCControlRequestParameterBlock.getCur()(v52, v51 & 0x1FF, (uint64_t)&v90);
                uint64_t v53 = sub_100008E00(&qword_100113EB8);
                if ((swift_dynamicCast(v89, &v90, v53, &type metadata for UInt8, 6LL) & 1) != 0)
                {
                  char v54 = v89[0];
                  uint64_t v55 = v76;
                  swift_beginAccess(v76 + 72, v87, 1LL, 0LL);
                  *(_BYTE *)(v55 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v54;
                }

                else
                {
                  uint64_t v55 = v76;
                }

                int v56 = _swiftEmptyArrayStorage;
                uint64_t v94 = _swiftEmptyArrayStorage;
                uint64_t v57 = *(void *)(v55 + 56);
                uint64_t v58 = *(void *)(v57 + 16);
                if (v58)
                {
                  swift_bridgeObjectRetain(v57);
                  unint64_t v59 = 0LL;
                  do
                  {
                    unint64_t v60 = v59 + 1;
                    sub_100025008(v59, *(void *)(v57 + 8 * v59 + 32), v43, &v94);
                    unint64_t v59 = v60;
                  }

                  while (v58 != v60);
                  swift_bridgeObjectRelease(v57);
                  int v56 = v94;
                }

                char v61 = LockDelay.units.getter(ObjectType);
                uint64_t v62 = v76;
                swift_beginAccess(v76 + 72, &v90, 0LL, 0LL);
                int v63 = *(unsigned __int8 *)(v62 + 72);
                id result = objc_msgSend(v41, "plugin", swift_bridgeObjectRetain(v56).n128_f64[0]);
                if (result)
                {
                  uint64_t v64 = result;
                  objc_allocWithZone((Class)type metadata accessor for AUAClockSelectorControl());
                  swift_retain(v62);
                  sub_100026940(v61 & 1, v62, v63, (uint64_t)v56, v64);
                  uint64_t v66 = v65;
                  swift_beginAccess(v62 + 112, v89, 1LL, 0LL);
                  uint64_t v67 = *(void **)(v62 + 112);
                  *(void *)(v62 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v66;

                  unint64_t v68 = *(void **)(v62 + 112);
                  if (v68)
                  {
                    uint64_t v69 = sub_100008E00(&qword_100113ED0);
                    uint64_t v70 = swift_allocObject(v69, 40LL, 7LL);
                    *(_OWORD *)(v70 + 16) = xmmword_1000D5F90;
                    *(void *)(v70 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v68;
                    uint64_t v88 = v70;
                    specialized Array._endMutation()(v70);
                    uint64_t ObjectType = v88;
                    id v71 = v68;
                    swift_bridgeObjectRelease(v56);
                    swift_unknownObjectRelease(v78, v72);

                    swift_release(v43);
                  }

                  else
                  {
                    swift_bridgeObjectRelease(v56);
                    swift_unknownObjectRelease(v78, v73);

                    swift_release(v43);
                    return 0LL;
                  }

                  return (id)ObjectType;
                }

void sub_10002803C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2;
  int v6 = a1;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  int v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  if (v6)
  {
    unint64_t v17 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 2;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000042LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE920LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    uint64_t v20 = 274LL;
LABEL_3:
    *(void *)(v19 + 56) = v20;
    swift_willThrow(v18);
    return;
  }

  uint64_t v72 = (char *)&v66 - v15;
  uint64_t v73 = v10;
  uint64_t v74 = v16;
  uint64_t v75 = v8;
  swift_beginAccess(v4 + 128, v79, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 128);
  if (!Strong)
  {
    unint64_t v29 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 61;
    *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v19 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000042LL;
    *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE920LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    uint64_t v20 = 275LL;
    goto LABEL_3;
  }

  uint64_t v22 = Strong;
  uint64_t v70 = v11;
  uint64_t v23 = *(void *)(v4 + 136);
  uint64_t ObjectType = swift_getObjectType(Strong);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);
  if (!v25)
  {
    unint64_t v30 = sub_10000AE14();
    uint64_t v31 = swift_allocError(&type metadata for AUAError, v30, 0LL, 0LL);
    *(_BYTE *)uint64_t v32 = 7;
    *(void *)(v32 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v32 + 16) = 0xE000000000000000LL;
    *(void *)(v32 + 24) = 0xD000000000000042LL;
    *(void *)(v32 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE920LL;
    *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001BLL;
    *(void *)(v32 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE390LL;
    *(void *)(v32 + 56) = 276LL;
    swift_willThrow(v31);
    swift_unknownObjectRelease(v22, v33);
    return;
  }

  dispatch_semaphore_t v26 = (dispatch_semaphore_t)v25;
  uint64_t v71 = v22;
  uint64_t v27 = (dispatch_semaphore_s *)sub_1000B5928(v4, (uint64_t)&protocol witness table for ActiveClockSource);
  if (v3)
  {
    swift_unknownObjectRelease(v71, v28);
LABEL_8:

    return;
  }

  uint64_t v69 = v26;
  uint64_t v34 = v71;
  if (!v27)
  {
    uint64_t v40 = v71;
LABEL_16:
    swift_unknownObjectRelease(v40, v28);
    dispatch_semaphore_t v26 = v69;
    goto LABEL_8;
  }

  unint64_t v68 = v27;
  if ((sub_100027818(v4, (uint64_t)v27) & 1) == 0)
  {
    swift_unknownObjectRelease(v34, v35);

    dispatch_semaphore_t v26 = v68;
    goto LABEL_8;
  }

  swift_beginAccess(v4 + 120, v78, 0LL, 0LL);
  LODWORD(v67) = *(unsigned __int8 *)(v4 + 120);
  uint64_t v36 = v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
  uint64_t v66 = *(void *)(v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
  char v37 = *(_BYTE *)(v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
  ActiveClockSource.refresh()();
  if (!v39)
  {
    if ((_DWORD)v67 == *(unsigned __int8 *)(v4 + 120))
    {
      char v41 = *(_BYTE *)(v36 + 8);
      if ((v37 & 1) != 0)
      {
        if ((*(_BYTE *)(v36 + 8) & 1) != 0)
        {
LABEL_21:

          uint64_t v40 = v71;
          goto LABEL_16;
        }
      }

      else
      {
        if (v66 != *(void *)v36) {
          char v41 = 1;
        }
        if ((v41 & 1) == 0) {
          goto LABEL_21;
        }
      }
    }

    uint64_t v76 = 0LL;
    uint64_t v77 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(54LL);
    v42._countAndFlagsBits = 0xD000000000000018LL;
    v42._object = (void *)0x80000001000CE970LL;
    String.append(_:)(v42);
    uint64_t v80 = a2;
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    object = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(object);
    v45._countAndFlagsBits = 0x696C61567369203ALL;
    v45._object = (void *)0xEA00000000002064LL;
    String.append(_:)(v45);
    if (*(_BYTE *)(v4 + 120)) {
      uint64_t v46 = 1702195828LL;
    }
    else {
      uint64_t v46 = 0x65736C6166LL;
    }
    if (*(_BYTE *)(v4 + 120)) {
      unint64_t v47 = 0xE400000000000000LL;
    }
    else {
      unint64_t v47 = 0xE500000000000000LL;
    }
    unint64_t v48 = v47;
    String.append(_:)(*(Swift::String *)&v46);
    swift_bridgeObjectRelease(v47);
    v49._countAndFlagsBits = 0x6E696C706D617320LL;
    v49._object = (void *)0xEE00206574615267LL;
    String.append(_:)(v49);
    uint64_t v50 = *(void *)v36;
    if (*(_BYTE *)(v36 + 8)) {
      uint64_t v50 = 0LL;
    }
    uint64_t v80 = v50;
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    unint64_t v52 = v51._object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(v52);
    uint64_t v53 = v77;
    uint64_t v67 = 0xD000000000000042LL;
    sub_100029834( v76,  v77,  0xD000000000000042LL,  (void *)0x80000001000CE920LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  289LL);
    swift_bridgeObjectRelease(v53);
    dispatch_semaphore_t v54 = dispatch_semaphore_create(0LL);
    uint64_t v55 = (void *)swift_allocObject(&unk_100103D68, 40LL, 7LL);
    int v56 = v68;
    v55[2] = v4;
    _OWORD v55[3] = v56;
    v55[4] = v54;
    swift_retain(v4);
    uint64_t v57 = v56;
    dispatch_semaphore_t v26 = v54;
    unint64_t v68 = (dispatch_semaphore_s *)0x80000001000CE920LL;
    uint64_t v66 = 0x80000001000CE390LL;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( v67,  0x80000001000CE920LL,  0xD00000000000001BLL,  0x80000001000CE390LL,  294LL,  (uint64_t)sub_100028BB0,  (uint64_t)v55);
    uint64_t v58 = swift_release(v55);
    static DispatchTime.now()(v58);
    unint64_t v59 = v73;
    *uint64_t v73 = 500LL;
    uint64_t v60 = v75;
    (*(void (**)(void *, void, uint64_t))(v75 + 104))( v59,  enum case for DispatchTimeInterval.milliseconds(_:),  v7);
    char v61 = v72;
    + infix(_:_:)(v14, v59);
    (*(void (**)(void *, uint64_t))(v60 + 8))(v59, v7);
    uint64_t v62 = *(void (**)(char *, uint64_t))(v74 + 8);
    uint64_t v63 = v70;
    v62(v14, v70);
    uint64_t v64 = OS_dispatch_semaphore.wait(timeout:)(v61) & 1;
    v62(v61, v63);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v64, 1LL) & 1) != 0) {
      sub_100029834(0xD000000000000034LL, 0x80000001000CE990LL, v67, v68, 0xD00000000000001BLL, v66, 306LL);
    }
    swift_unknownObjectRelease(v71, v65);

    goto LABEL_8;
  }

  swift_unknownObjectRelease(v71, v38);
}

unint64_t sub_1000286EC()
{
  unint64_t result = qword_100114080;
  if (!qword_100114080)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSelector, &type metadata for ClockSelector);
    atomic_store(result, (unint64_t *)&qword_100114080);
  }

  return result;
}

uint64_t sub_100028730()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

unint64_t sub_100028764()
{
  unint64_t result = qword_100114088;
  if (!qword_100114088)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSelector, &type metadata for ClockSelector);
    atomic_store(result, (unint64_t *)&qword_100114088);
  }

  return result;
}

uint64_t type metadata accessor for ActiveClockSelector()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore19ActiveClockSelector);
}

uint64_t sub_1000287C8(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 64LL, 7LL);
}

void sub_1000287FC()
{
}

uint64_t type metadata accessor for AUAClockSelectorControl()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore23AUAClockSelectorControl);
}

unint64_t sub_100028840()
{
  unint64_t result = qword_100114098;
  if (!qword_100114098)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAClockSourceControlSelector,  &type metadata for AUAClockSourceControlSelector);
    atomic_store(result, (unint64_t *)&qword_100114098);
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for StreamingInterfaceDataFormat(_BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LockDelay.LockDelayUnits(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for AUAClockSourceControlSelector( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10002896C + 4 * byte_1000D6055[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000289A0 + 4 * byte_1000D6050[v4]))();
}

uint64_t sub_1000289A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000289A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000289B0LL);
  }
  return result;
}

uint64_t sub_1000289BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000289C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000289C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000289D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000289DC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1000289E4(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AUAClockSourceControlSelector()
{
  return &type metadata for AUAClockSourceControlSelector;
}

uint64_t sub_100028A00()
{
  return type metadata accessor for ActiveClockSource(0LL);
}

uint64_t sub_100028A08(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_1000D61E0;
  v4[2] = &unk_1000D61E0;
  v4[3] = &unk_1000D61F8;
  void v4[4] = &unk_1000D6210;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[6] = &unk_1000D61E0;
  v4[7] = &unk_1000D6228;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[8] = *(void *)(result - 8) + 64LL;
    void v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = &unk_1000D6240;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100028AD0()
{
  unint64_t result = qword_1001144E0;
  if (!qword_1001144E0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASDSelectorValue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001144E0);
  }

  return result;
}

uint64_t sub_100028B0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

void *sub_100028B40(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_100028B7C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

Swift::Int sub_100028BB0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp) = mach_absolute_time();
  AUAAudioDevice.clockChanged()();
  return OS_dispatch_semaphore.signal()();
}

unint64_t sub_100028BF8()
{
  unint64_t result = qword_1001144F0;
  if (!qword_1001144F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1001144F0);
  }

  return result;
}

void __swiftcall AUAError.init(_:message:function:file:line:)( AUASDCore::AUAError *__return_ptr retstr, AUASDCore::AUAErrorCode _, Swift::String message, Swift::String function, Swift::String file, Swift::Int line)
{
  retstr->error = _;
  retstr->message = message;
  retstr->function = function;
  retstr->file = file;
  retstr->line = line;
}

AUASDCore::AUAExceptionLevel_optional __swiftcall AUAExceptionLevel.init(rawValue:)(Swift::UInt rawValue)
{
  if (rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (AUASDCore::AUAExceptionLevel_optional)rawValue;
}

uint64_t AUAExceptionLevel.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_100028C70@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = v2;
  return result;
}

void sub_100028C88(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static tADCControlRequestParameterBlockLayout.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void tADCControlRequestParameterBlockLayout.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int tADCControlRequestParameterBlockLayout.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t AUAError.error.getter()
{
  return *v0;
}

uint64_t AUAError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t AUAError.function.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t AUAError.file.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t AUAError.line.getter()
{
  return *(void *)(v0 + 56);
}

Swift::Void __swiftcall AUAError.Log()()
{
  uint64_t v1 = v0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0xE000000000000000LL;
  char v7 = *v0;
  _print_unlocked<A, B>(_:_:)( &v7,  &v8,  &type metadata for AUAErrorCode,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 8250LL;
  v2._object = (void *)0xE200000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = *((void *)v0 + 1);
  uint64_t v4 = (void *)*((void *)v0 + 2);
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v9;
  sub_100029840( v8,  v9,  *((void *)v1 + 3),  *((void **)v1 + 4),  *((void *)v1 + 5),  *((void *)v1 + 6),  *((void *)v1 + 7));
  swift_bridgeObjectRelease(v6);
}

BOOL static AUAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  return *a1 == a2;
}

void AUAError.hash(into:)(uint64_t a1)
{
  Swift::String v2 = v1;
  Hasher._combine(_:)(*(unsigned __int8 *)v2);
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease(v9);
  Hasher._combine(_:)(v2[7]);
}

Swift::Int AUAError.hashValue.getter()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v9, 0LL);
  Hasher._combine(_:)(*v0);
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = v1[2];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v9, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v1[7]);
  return Hasher._finalize()();
}

Swift::Int sub_100028FDC()
{
  Swift::UInt v1 = *(unsigned __int8 *)v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  Swift::UInt v8 = v0[7];
  Hasher.init(_seed:)(v10, 0LL);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v10, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v10, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_1000290BC(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  Swift::UInt v9 = v1[7];
  Hasher._combine(_:)(*(unsigned __int8 *)v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_10002917C(uint64_t a1)
{
  Swift::UInt v2 = *(unsigned __int8 *)v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  Swift::UInt v9 = v1[7];
  Hasher.init(_seed:)(v11, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v11, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v11, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v8);
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

unint64_t sub_10002925C()
{
  unint64_t result = qword_1001144F8;
  if (!qword_1001144F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAExceptionLevel,  &type metadata for AUAExceptionLevel);
    atomic_store(result, (unint64_t *)&qword_1001144F8);
  }

  return result;
}

unint64_t sub_1000292A4()
{
  unint64_t result = qword_100114500;
  if (!qword_100114500)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AUAErrorCode, &type metadata for AUAErrorCode);
    atomic_store(result, (unint64_t *)&qword_100114500);
  }

  return result;
}

unint64_t sub_1000292EC()
{
  unint64_t result = qword_100114508;
  if (!qword_100114508)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AUAError, &type metadata for AUAError);
    atomic_store(result, (unint64_t *)&qword_100114508);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AUAFeedbackTransferBlock.FeedbackPacketSize( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for AUAExceptionLevel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10002940C + 4 * byte_1000D62C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100029440 + 4 * asc_1000D62C0[v4]))();
}

uint64_t sub_100029440(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100029450LL);
  }
  return result;
}

uint64_t sub_10002945C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100029464LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100029468(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100029470(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAExceptionLevel()
{
  return &type metadata for AUAExceptionLevel;
}

uint64_t getEnumTagSinglePayload for AUAErrorCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0x94) {
    goto LABEL_17;
  }
  if (a2 + 108 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 108) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 108;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 108;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 108;
    }
  }

uint64_t storeEnumTagSinglePayload for AUAErrorCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 108 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 108) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0x94) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x93) {
    return ((uint64_t (*)(void))((char *)&loc_100029568 + 4 * byte_1000D62CF[v4]))();
  }
  *a1 = a2 + 108;
  return ((uint64_t (*)(void))((char *)sub_10002959C + 4 * byte_1000D62CA[v4]))();
}

uint64_t sub_10002959C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000295A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000295ACLL);
  }
  return result;
}

uint64_t sub_1000295B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000295C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 108;
  return result;
}

uint64_t sub_1000295C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000295CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000295D8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AUAErrorCode()
{
  return &type metadata for AUAErrorCode;
}

uint64_t destroy for AUAError(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for AUAError(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AUAError(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AUAError(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AUAError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AUAError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AUAError()
{
  return &type metadata for AUAError;
}

void sub_100029834(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100029840(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_10002984C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100017A94(v0, qword_1001171F8);
  sub_100008EC4(v0, (uint64_t)qword_1001171F8);
  return Logger.init(subsystem:category:)(0xD000000000000013LL, 0x80000001000CC390LL, 0LL, 0xE000000000000000LL);
}

uint64_t sub_1000298B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  v27[0] = 47LL;
  v27[1] = 0xE100000000000000LL;
  unint64_t v12 = sub_100029C3C();
  uint64_t v13 = StringProtocol.components<A>(separatedBy:)(v27, &type metadata for String, &type metadata for String, v12, v12);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 + 16);
  if (v15)
  {
    uint64_t v16 = v13 + 16 * v15;
    uint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void **)(v16 + 24);
    swift_bridgeObjectRetain(v17);
  }

  else
  {
    uint64_t v18 = 0LL;
    unint64_t v17 = (void *)0xE000000000000000LL;
  }

  swift_bridgeObjectRelease(v14);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain(a2);
  v19._countAndFlagsBits = 2128928LL;
  v19._object = (void *)0xE300000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a3;
  v20._object = a4;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 2128928LL;
  v21._object = (void *)0xE300000000000000LL;
  String.append(_:)(v21);
  v22._countAndFlagsBits = v18;
  v22._object = v17;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v17);
  v23._countAndFlagsBits = 58LL;
  v23._object = (void *)0xE100000000000000LL;
  String.append(_:)(v23);
  v27[0] = a7;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  return v28;
}

void sub_100029A04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_100029A10( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  if (qword_1001128F0 != -1) {
    swift_once(&qword_1001128F0, sub_10002984C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100008EC4(v16, (uint64_t)qword_1001171F8);
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a4, 2LL);
  uint64_t v17 = swift_bridgeObjectRetain_n(a6, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = a8();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = a7;
    Swift::String v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v25;
    *(_DWORD *)Swift::String v21 = 136446210;
    uint64_t v22 = sub_1000298B4(a1, a2, a3, a4, a5, a6, v20);
    unint64_t v24 = v23;
    uint64_t v26 = sub_1000164BC(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s", v21, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

unint64_t sub_100029C3C()
{
  unint64_t result = qword_100114510;
  if (!qword_100114510)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100114510);
  }

  return result;
}

void *sub_100029C80( void (*a1)(uint64_t *__return_ptr, int *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_1000705A4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v9 = (_WORD *)(a3 + 36);
    while (1)
    {
      __int16 v10 = *v9;
      int v18 = *((_DWORD *)v9 - 1);
      __int16 v19 = v10;
      a1(&v20, &v18, &v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v11 = v20;
      int v12 = v21;
      uint64_t v22 = v6;
      unint64_t v14 = v6[2];
      unint64_t v13 = v6[3];
      if (v14 >= v13 >> 1)
      {
        sub_1000705A4(v13 > 1, v14 + 1, 1);
        uint64_t v6 = v22;
      }

      v9 += 3;
      v6[2] = v14 + 1;
      uint64_t v15 = (char *)v6 + 12 * v14;
      *((void *)v15 + 4) = v11;
      *((_DWORD *)v15 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
      if (!--v5) {
        return v6;
      }
    }

    swift_release(v6);
  }

  return v6;
}

void *sub_100029DAC(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)(*(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v5 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v6 = v4;
        uint64_t v7 = type metadata accessor for AUAStream(0LL);
        uint64_t v8 = swift_dynamicCastClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6, v9);
          goto LABEL_15;
        }

        uint64_t v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        uint64_t v11 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
        if (v5 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = v1 + 32;
      while (1)
      {
        uint64_t v15 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        uint64_t v16 = *(void **)(v14 + 8 * v13);
        uint64_t v17 = type metadata accessor for AUAStream(0LL);
        uint64_t v18 = swift_dynamicCastClass(v16, v17);
        if (!v18)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0LL;
        }

        uint64_t v1 = v18;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        uint64_t v19 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        uint64_t v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v1);
        specialized ContiguousArray._endMutation()(v20);
        ++v13;
        if (v15 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }

    __break(1u);
LABEL_18:
    if (v1 < 0) {
      uint64_t v22 = v1;
    }
    else {
      uint64_t v22 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v23);
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100029F88(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  sub_1000705C8(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 40LL)
    {
      sub_100017910(i, (uint64_t)v15);
      uint64_t v5 = sub_100008E00(&qword_100114558);
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000705C8(0, v3[2] + 1LL, 1);
        uint64_t v3 = v16;
      }

      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000705C8(v8 > 1, v9 + 1, 1);
        uint64_t v3 = v16;
      }

      v3[2] = v9 + 1;
      uint64_t v10 = (char *)v3 + 6 * v9;
      *((_DWORD *)v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = v7;
      *((_WORD *)v10 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = (v7 | (unint64_t)(v6 << 32)) >> 32;
      if (!--v2) {
        return v3;
      }
    }

    unsigned __int16 v13 = 0;
    unsigned int v12 = 0;
    char v14 = 1;
    swift_release(v3);
    return 0LL;
  }

  return v3;
}

uint64_t sub_10002A0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  v11[2] = a1;
  uint64_t v6 = sub_10001B068((void (*)(__int128 *__return_ptr, void *))sub_100030B7C, (uint64_t)v11, v5);
  swift_bridgeObjectRelease(v5);
  if (!v3)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      if (*(void *)(v6[5] + 136LL) == 257LL)
      {
        LOBYTE(a1) = 1;
      }

      else
      {
        unint64_t v8 = v6 + 8;
        do
        {
          LOBYTE(a1) = --v7 != 0;
          if (!v7) {
            break;
          }
          uint64_t v9 = *v8;
          v8 += 3;
        }

        while (*(void *)(v9 + 136) != 257LL);
      }
    }

    else
    {
      LOBYTE(a1) = 0;
    }

    swift_bridgeObjectRelease(v6);
  }

  return a1 & 1;
}

void *sub_10002A1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 136) == 257LL) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  swift_retain(a1);
  uint64_t v6 = sub_100030718(v5, a1);
  swift_bridgeObjectRelease(v5);
  swift_release(a1);
  return v6;
}

void sub_10002A24C(unsigned __int16 a1, void *a2, uint64_t a3, uint64_t (**a4)(void, void))
{
  uint64_t v28 = 0LL;
  uint64_t v9 = a4[2](a3, a4);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    unsigned __int8 v11 = a4[16](a3, a4);
    uint64_t v12 = a4[3](a3, a4);
    unsigned __int8 v13 = *(_BYTE *)(*(void *)(v12 + 32) + 2LL);
    swift_release(v12);
    sub_1000B6820(v11, 0, 1, a1, 0LL, v13, a2, (uint64_t)&v28);
    if (v4)
    {
LABEL_10:

      return;
    }

    uint64_t v14 = v28;
    id v15 = a2;
    uint64_t v16 = NSData.startIndex.getter(v15);
    uint64_t v17 = NSData.endIndex.getter();
    uint64_t v18 = NSData.startIndex.getter(v17);
    uint64_t v19 = NSData.endIndex.getter();
    if (v16 < v18 || v19 < v16)
    {
      __break(1u);
    }

    else
    {
      uint64_t v20 = NSData.startIndex.getter(v19);
      uint64_t v21 = NSData.endIndex.getter();

      if (v17 >= v20 && v21 >= v17)
      {
        if (!__OFSUB__(v17, v16))
        {
          if (v14 != v17 - v16)
          {
            unint64_t v22 = sub_10000AE14();
            uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
            *(_BYTE *)uint64_t v24 = 28;
            *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v24 + 16) = 0xE000000000000000LL;
            *(void *)(v24 + 24) = 0xD00000000000001FLL;
            *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF90LL;
            *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
            *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
            *(void *)(v24 + 56) = 811LL;
            swift_willThrow(v23);
          }

          goto LABEL_10;
        }

uint64_t ActiveFunction.functionCategory.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v3 = *(unsigned __int8 *)(v2 + 208);
  swift_release(v2);
  return v3;
}

uint64_t sub_10002A4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void))(a2 + 16))();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v4)
    {
      BOOL v5 = sub_10001645C(16LL, v4);

      if (v5) {
        return 1LL;
      }
    }

    else
    {
    }
  }

  return 0LL;
}

uint64_t sub_10002A540(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100030400(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, void))sub_10002A55C);
}

void sub_10002A55C(int a1, unint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = 0LL;
  unsigned int v12 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v13 = USBDescriptorControl.pbLayout()();
  sub_100079084(v13);
  if (v6) {
    return;
  }
  char v44 = v14;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 8))(v49, a5, a6);
  sub_100019D7C(v49);
  if (v50)
  {
    if (v50 != 48 && v50 != 32)
    {
      unint64_t v29 = sub_10000AE14();
      uint64_t v26 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
      *(_BYTE *)uint64_t v27 = 24;
      *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v27 + 16) = 0xE000000000000000LL;
      *(void *)(v27 + 24) = 0xD000000000000028LL;
      *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB40LL;
      *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
      uint64_t v28 = 521LL;
      goto LABEL_13;
    }

    char v15 = 1;
  }

  else
  {
    char v15 = -127;
  }

  unsigned __int8 v43 = v15;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if (!v16)
  {
    unint64_t v25 = sub_10000AE14();
    uint64_t v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
    *(_BYTE *)uint64_t v27 = 7;
    *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v27 + 16) = 0xE000000000000000LL;
    *(void *)(v27 + 24) = 0xD000000000000028LL;
    *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB40LL;
    *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v28 = 523LL;
LABEL_13:
    *(void *)(v27 + 56) = v28;
    swift_willThrow(v26);

    return;
  }

  Swift::String v42 = (void *)v16;
  __int16 v41 = sub_10007BFBC(v12);
  if ((a3 & 1) != 0) {
    a2 = 0LL;
  }
  uint64_t v18 = a4[3];
  uint64_t v17 = a4[4];
  sub_1000178EC(a4, v18);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v46, v18, v17);
  uint64_t v19 = v47;
  uint64_t v20 = v48;
  sub_1000178EC(v46, v47);
  unint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  unsigned __int8 v23 = *(_BYTE *)(*(void *)(v22 + 32) + 2LL);
  swift_release(v22);
  id v24 = v44;
  sub_1000B6284(v43, 1, 1, v41, a2, v21, v23, v44, (uint64_t)&v45);

  sub_100017A40(v46);
  uint64_t v30 = v45;
  id v31 = v24;
  uint64_t v32 = NSData.startIndex.getter(v31);
  uint64_t v33 = NSData.endIndex.getter();
  uint64_t v34 = NSData.startIndex.getter(v33);
  uint64_t v35 = NSData.endIndex.getter();
  if (v32 < v34 || v35 < v32)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }

  uint64_t v36 = NSData.startIndex.getter(v35);
  uint64_t v37 = NSData.endIndex.getter();

  if (v33 < v36 || v37 < v33) {
    goto LABEL_24;
  }
  if (__OFSUB__(v33, v32)) {
    goto LABEL_25;
  }
  if (v30 != v33 - v32)
  {
    unint64_t v38 = sub_10000AE14();
    uint64_t v39 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
    *(_BYTE *)uint64_t v40 = 28;
    *(void *)(v40 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v40 + 16) = 0xE000000000000000LL;
    *(void *)(v40 + 24) = 0xD000000000000028LL;
    *(void *)(v40 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB40LL;
    *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v40 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v40 + 56) = 533LL;
    swift_willThrow(v39);
  }
}

uint64_t sub_10002A960(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100030400(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, void))sub_10002A97C);
}

void sub_10002A97C(int a1, unint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  void (*v66)(void *__return_ptr, void, void);
  uint64_t v67;
  unsigned int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  void *v72;
  id v73;
  void (*v74)(void *__return_ptr, void, void);
  uint64_t v75;
  void v76[3];
  uint64_t v77;
  uint64_t v78;
  void v79[10];
  unsigned __int8 v80;
  _OWORD v81[7];
  uint64_t v82;
  _OWORD v83[7];
  uint64_t v84;
  _OWORD v85[7];
  uint64_t v86;
  _OWORD v87[7];
  uint64_t v88;
  uint64_t v75 = 0LL;
  uint64_t v74 = *(void (**)(void *__return_ptr, void, void))(a6 + 8);
  v74(v79, a5, a6);
  sub_100019D7C(v79);
  if ((v80 | 0x10) != 0x30)
  {
    unint64_t v28 = sub_10000AE14();
    uint64_t v29 = swift_allocError(&type metadata for AUAError, v28, 0LL, 0LL);
    *(_BYTE *)uint64_t v30 = 24;
    *(void *)(v30 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v30 + 16) = 0xE000000000000000LL;
    *(void *)(v30 + 24) = 0xD00000000000002ALL;
    *(void *)(v30 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
    *(void *)(v30 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v30 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v30 + 56) = 548LL;
    swift_willThrow(v29);
    return;
  }

  unsigned int v13 = a1 & 0xFFFFFF;
  uint64_t v14 = USBDescriptorControl.pbLayout()();
  unsigned int v15 = v14;
  __int16 v16 = sub_100079BB8(v14, 1LL);
  if (!v6)
  {
    unint64_t v68 = v15;
    uint64_t v69 = v16;
    uint64_t v18 = *(uint64_t (**)(void, void))(a6 + 16);
    uint64_t v73 = v17;
    uint64_t v19 = v18(a5, a6);
    if (!v19)
    {
      id v31 = v73;

      unint64_t v32 = sub_10000AE14();
      uint64_t v33 = swift_allocError(&type metadata for AUAError, v32, 0LL, 0LL);
      *(_BYTE *)uint64_t v34 = 7;
      *(void *)(v34 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v34 + 16) = 0xE000000000000000LL;
      *(void *)(v34 + 24) = 0xD00000000000002ALL;
      *(void *)(v34 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
      *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v34 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
      *(void *)(v34 + 56) = 551LL;
      swift_willThrow(v33);
LABEL_17:

      return;
    }

    uint64_t v20 = (void *)v19;
    uint64_t v71 = sub_10007BFBC(v13);
    if ((a3 & 1) != 0) {
      unint64_t v21 = 0LL;
    }
    else {
      unint64_t v21 = a2;
    }
    uint64_t v70 = v21;
    uint64_t v22 = a4[3];
    uint64_t v23 = a4[4];
    sub_1000178EC(a4, v22);
    uint64_t v66 = *(void (**)(void *__return_ptr, void, void))(v23 + 8);
    uint64_t v67 = v22;
    v66(v76, v22, v23);
    uint64_t v24 = v77;
    uint64_t v25 = v78;
    sub_1000178EC(v76, v77);
    unint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
    v74(v81, a5, a6);
    v87[4] = v81[4];
    v87[5] = v81[5];
    v87[6] = v81[6];
    uint64_t v88 = v82;
    v87[0] = v81[0];
    v87[1] = v81[1];
    v87[2] = v81[2];
    v87[3] = v81[3];
    sub_100030860(v87);
    sub_100019D7C(v81);
    unsigned __int8 v27 = *(_BYTE *)(*(void *)&v87[0] + 2LL);
    sub_100030944(v87);
    sub_1000B6284(2u, 1, 1, v71, v70, v26, v27, v73, (uint64_t)&v75);
    uint64_t v64 = v23;
    uint64_t v72 = v20;

    uint64_t v35 = sub_100017A40(v76);
    uint64_t v65 = v75;
    uint64_t v36 = NSData.startIndex.getter(v35);
    uint64_t v37 = NSData.endIndex.getter();
    uint64_t v38 = NSData.startIndex.getter(v37);
    uint64_t v39 = NSData.endIndex.getter();
    if (v36 < v38 || v39 < v36)
    {
      __break(1u);
    }

    else
    {
      uint64_t v40 = NSData.startIndex.getter(v39);
      uint64_t v41 = NSData.endIndex.getter();

      if (v37 >= v40 && v41 >= v37)
      {
        if (!__OFSUB__(v37, v36))
        {
          if (v65 != v37 - v36)
          {
            id v31 = v73;

            unint64_t v42 = sub_10000AE14();
            uint64_t v43 = swift_allocError(&type metadata for AUAError, v42, 0LL, 0LL);
            *(_BYTE *)uint64_t v44 = 28;
            *(void *)(v44 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v44 + 16) = 0xE000000000000000LL;
            *(void *)(v44 + 24) = 0xD00000000000002ALL;
            *(void *)(v44 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
            *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
            *(void *)(v44 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
            *(void *)(v44 + 56) = 562LL;
            swift_willThrow(v43);

            goto LABEL_17;
          }

          uint64_t v45 = sub_100068138(v69 & 0x1FF, v73);

          if (v45 == 1)
          {
LABEL_20:

            return;
          }

          sub_100079BB8(v68, v45);
          uint64_t v47 = v46;

          id v48 = v47;
          v66(v76, v67, v64);
          uint64_t v49 = v77;
          uint64_t v50 = v78;
          sub_1000178EC(v76, v77);
          unint64_t v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 16))(v49, v50);
          v74(v83, a5, a6);
          v85[4] = v83[4];
          v85[5] = v83[5];
          v85[6] = v83[6];
          uint64_t v86 = v84;
          v85[0] = v83[0];
          v85[1] = v83[1];
          v85[2] = v83[2];
          v85[3] = v83[3];
          sub_100030860(v85);
          sub_100019D7C(v83);
          LOBYTE(v47) = *(_BYTE *)(*(void *)&v85[0] + 2LL);
          sub_100030944(v85);
          sub_1000B6284(2u, 1, 1, v71, v70, v51, v47, v48, (uint64_t)&v75);

          uint64_t v52 = sub_100017A40(v76);
          uint64_t v53 = v48;
          uint64_t v54 = v75;
          uint64_t v55 = NSData.startIndex.getter(v52);
          uint64_t v56 = NSData.endIndex.getter();
          uint64_t v57 = NSData.startIndex.getter(v56);
          uint64_t v58 = NSData.endIndex.getter();
          if (v55 < v57 || v58 < v55)
          {
            __break(1u);
          }

          else
          {
            uint64_t v59 = NSData.startIndex.getter(v58);
            uint64_t v60 = NSData.endIndex.getter();

            if (v56 >= v59 && v60 >= v56)
            {
              if (!__OFSUB__(v56, v55))
              {
                if (v54 != v56 - v55)
                {
                  unint64_t v61 = sub_10000AE14();
                  uint64_t v62 = swift_allocError(&type metadata for AUAError, v61, 0LL, 0LL);
                  *(_BYTE *)uint64_t v63 = 28;
                  *(void *)(v63 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v63 + 16) = 0xE000000000000000LL;
                  *(void *)(v63 + 24) = 0xD00000000000002ALL;
                  *(void *)(v63 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
                  *(void *)(v63 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
                  *(void *)(v63 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
                  *(void *)(v63 + 56) = 575LL;
                  swift_willThrow(v62);

                  return;
                }

                goto LABEL_20;
              }

double sub_10002B0D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!v9)
  {
    sub_1000178B0((uint64_t)v8, &qword_100113E98);
    goto LABEL_5;
  }

  uint64_t v5 = sub_100008E00(&qword_100113B28);
  uint64_t v6 = sub_100008E00(&qword_100114530);
  if ((swift_dynamicCast(a4, v8, v5, v6, 6LL) & 1) == 0)
  {
LABEL_5:
    *(void *)(a4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10002B168(uint64_t a1, uint64_t a2)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49[5];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v58;
  void *v59;
  __int128 v60;
  uint64_t v61;
  void v62[3];
  uint64_t v63;
  uint64_t v64;
  void v65[3];
  uint64_t v66;
  uint64_t v67;
  void v68[3];
  uint64_t v69;
  uint64_t v70;
  uint64_t v55 = (void *)a1;
  uint64_t v57 = (void *)a2;
  uint64_t result = (uint64_t)sub_10002EA68(a1, a2);
  uint64_t v3 = result;
  uint64_t v54 = *(void *)(result + 16);
  if (v54)
  {
    unint64_t v4 = 0LL;
    uint64_t v53 = result + 32;
    uint64_t v5 = _swiftEmptyArrayStorage;
    unint64_t v51 = result;
    do
    {
      if (v4 >= *(void *)(v3 + 16))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        return result;
      }

      sub_100017910(v53 + 40 * v4, (uint64_t)v68);
      uint64_t v6 = v69;
      uint64_t v7 = v70;
      sub_1000178EC(v68, v69);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
      *(void *)&uint64_t v60 = result;
      if (!result) {
        goto LABEL_29;
      }
      uint64_t v9 = v8;
      uint64_t v10 = v5[2];
      if (v10)
      {
        uint64_t v58 = v4;
        uint64_t ObjectType = swift_getObjectType(v60);
        uint64_t v52 = v9;
        uint64_t v12 = *(void *)(v9 + 8);
        unsigned int v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v12 + 8);
        swift_bridgeObjectRetain(v5);
        uint64_t v59 = v5;
        uint64_t v14 = v5 + 5;
        do
        {
          __int16 v16 = *(v14 - 1);
          unsigned int v15 = *v14;
          uint64_t v17 = swift_getObjectType(v16);
          v62[0] = v16;
          uint64_t v18 = *(void *)(v15 + 8);
          uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 8);
          swift_unknownObjectRetain(v16);
          v19(v65, v17, v18);
          uint64_t v20 = v66;
          unint64_t v21 = v67;
          sub_1000178EC(v65, v66);
          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
          unint64_t v61 = v60;
          v13(v62, ObjectType, v12);
          uint64_t v24 = v63;
          uint64_t v23 = v64;
          sub_1000178EC(v62, v63);
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v24, v23);
          sub_100017A40(v62);
          sub_100017A40(v65);
          swift_unknownObjectRelease(v16, v26);
          if (v22 == v25)
          {
            swift_unknownObjectRelease(v60, v27);
            uint64_t v5 = v59;
            swift_bridgeObjectRelease(v59);
            uint64_t v3 = v51;
            unint64_t v4 = v58;
            goto LABEL_4;
          }

          v14 += 2;
          --v10;
        }

        while (v10);
        uint64_t v5 = v59;
        swift_bridgeObjectRelease(v59);
        uint64_t v3 = v51;
        unint64_t v4 = v58;
        uint64_t v9 = v52;
      }

      swift_unknownObjectRetain(v60);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
        uint64_t v5 = sub_10004F748(0LL, v5[2] + 1LL, 1, v5);
      }
      uint64_t v30 = v5[2];
      uint64_t v29 = v5[3];
      if (v30 >= v29 >> 1) {
        uint64_t v5 = sub_10004F748((void *)(v29 > 1), v30 + 1, 1, v5);
      }
      v5[2] = v30 + 1;
      id v31 = &v5[2 * v30];
      unint64_t v32 = v60;
      v31[4] = v60;
      v31[5] = v9;
      swift_unknownObjectRelease(v32, v28);
LABEL_4:
      ++v4;
      uint64_t result = sub_100017A40(v68);
    }

    while (v4 != v54);
    swift_bridgeObjectRelease(v3);
    uint64_t v33 = v5[2];
    if (!v33) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }

  swift_bridgeObjectRelease(result);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v33 = _swiftEmptyArrayStorage[2];
  if (v33)
  {
LABEL_18:
    uint64_t v59 = (void *)v57[4];
    uint64_t v34 = v5;
    swift_bridgeObjectRetain(v5);
    uint64_t v35 = 0LL;
    uint64_t v36 = _swiftEmptyArrayStorage;
    uint64_t v37 = v55;
    do
    {
      uint64_t v60 = *(_OWORD *)&v34[2 * v35 + 4];
      uint64_t v38 = v60;
      swift_unknownObjectRetain(v60);
      uint64_t v39 = v56;
      uint64_t v40 = v57;
      uint64_t v41 = ((uint64_t (*)(void *, void *))v59)(v37, v57);
      __chkstk_darwin(v41);
      v49[2] = v37;
      v49[3] = v40;
      v49[4] = v39;
      uint64_t v50 = v60;
      uint64_t v43 = sub_10002EDEC((uint64_t (*)(uint64_t *))sub_10003042C, v49, v42);
      swift_unknownObjectRetain(v38);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0) {
        uint64_t v36 = sub_10004F624(0LL, v36[2] + 1LL, 1, v36);
      }
      uint64_t v46 = v36[2];
      uint64_t v45 = v36[3];
      if (v46 >= v45 >> 1) {
        uint64_t v36 = sub_10004F624((void *)(v45 > 1), v46 + 1, 1, v36);
      }
      ++v35;
      uint64_t v47 = *(void *)(*((void *)&v60 + 1) + 16LL);
      v36[2] = v46 + 1;
      id v48 = &v36[3 * v46];
      v48[4] = v38;
      v48[5] = v47;
      v48[6] = v43;
      swift_unknownObjectRelease(v38, v44);
    }

    while (v33 != v35);
    uint64_t v5 = v34;
    swift_bridgeObjectRelease(v34);
    goto LABEL_27;
  }

uint64_t sub_10002B5D4()
{
  return 5LL;
}

uint64_t sub_10002B5DC()
{
  return 2LL;
}

void sub_10002B5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = a2;
  uint64_t v8 = (*(uint64_t (**)(void))(a2 + 16))();
  if (!v8)
  {
    unint64_t v20 = sub_10000AE14();
    uint64_t v21 = swift_allocError(&type metadata for AUAError, v20, 0LL, 0LL);
    *(_BYTE *)uint64_t v22 = 1;
    *(void *)(v22 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v22 + 16) = 0xE000000000000000LL;
    *(void *)(v22 + 24) = 0x6E75467472617473LL;
    *(void *)(v22 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEF29286E6F697463LL;
    *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v22 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v22 + 56) = 297LL;
    swift_willThrow(v21);
    return;
  }

  uint64_t v9 = (char *)v8;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  uint64_t v11 = v10(a1, v6);
  swift_beginAccess(v11 + 16, v117, 1LL, 0LL);
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v6;
  swift_unknownObjectRetain(v5);
  swift_release(v11);
  swift_unknownObjectRelease(v12, v13);
  uint64_t v102 = a1;
  uint64_t v14 = v10(a1, v6);
  uint64_t v15 = *(void *)(v14 + 168);
  swift_bridgeObjectRetain(v15);
  swift_release(v14);
  uint64_t v16 = *(void *)(v15 + 16);
  __int128 v101 = v9;
  uint64_t v105 = v6;
  if (v16)
  {
    uint64_t v17 = v15 + 32;
    do
    {
      sub_100017910(v17, (uint64_t)v114);
      uint64_t v18 = v115;
      uint64_t v19 = v116;
      sub_100030A60((uint64_t)v114, v115);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 64))(v5, v105, v18, v19);
      if (v4)
      {

        swift_bridgeObjectRelease(v15);
        sub_100017A40(v114);
        return;
      }

      sub_100017A40(v114);
      v17 += 40LL;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease(v15);
    uint64_t v6 = v105;
  }

  else
  {
    swift_bridgeObjectRelease(v15);
  }

  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v102, v6);
  uint64_t v24 = v23;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 >= 0) {
      v23 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v23);
    if (!v25) {
      goto LABEL_21;
    }
  }

  else
  {
    uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v25) {
      goto LABEL_21;
    }
  }

  if (v25 < 1)
  {
    __break(1u);
    goto LABEL_74;
  }

  uint64_t v26 = 0LL;
  do
  {
    if ((v24 & 0xC000000000000001LL) != 0)
    {
      uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24);
    }

    else
    {
      uint64_t v27 = *(void *)(v24 + 8 * v26 + 32);
      swift_retain(v27);
    }

    ++v26;
    swift_beginAccess(v27 + 16, v114, 1LL, 0LL);
    uint64_t v28 = *(void *)(v27 + 16);
    *(void *)(v27 + 16) = v5;
    *(void *)(v27 + 24) = v105;
    swift_unknownObjectRetain(v5);
    swift_release(v27);
    swift_unknownObjectRelease(v28, v29);
  }

  while (v25 != v26);
LABEL_21:
  swift_bridgeObjectRelease(v24);
  uint64_t v30 = v105;
  uint64_t v31 = v10(v102, v105);
  uint64_t v32 = *(void *)(v31 + 160);
  swift_retain(v32);
  swift_release(v31);
  if (v32)
  {
    uint64_t v33 = v10(v102, v105);
    uint64_t v34 = *(void **)(v33 + 200);
    id v35 = v34;
    swift_release(v33);
    if (!v34)
    {
LABEL_29:
      swift_release(v32);
      goto LABEL_30;
    }

    sub_1000C7D44(v35, 1);
    if (v4)
    {

      swift_release(v32);
      return;
    }

    if (!*(void *)(v32 + 120))
    {
LABEL_28:

      goto LABEL_29;
    }

    uint64_t v36 = *(void *)(v32 + 112);
    if ((v36 & 0x8000000000000000LL) == 0)
    {
      id v37 = sub_1000045A4(v35, v36);
      (*(void (**)(id, uint64_t, uint64_t))(v105 + 72))(v37, v102, v105);
      sub_10002CEA0(v102, v105);
      goto LABEL_28;
    }

LABEL_74:
    __break(1u);
  }

uint64_t sub_10002C358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(a2 + 16))();
  if (v4)
  {
    uint64_t v5 = v4;
    [v4 removeAllAudioDevices];
  }

  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v7 = v6(a1, a2);
  uint64_t v8 = *(void *)(v7 + 160);
  swift_retain(v8);
  swift_release(v7);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 120);
    if (v9)
    {
      swift_retain(*(void *)(v8 + 120));
      sub_1000C7514();
      swift_release(v9);
      uint64_t v10 = *(void *)(v8 + 120);
      *(void *)(v8 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
      swift_release(v8);
      uint64_t v11 = v10;
    }

    else
    {
      uint64_t v11 = v8;
    }

    swift_release(v11);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v13 = result;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0) {
      result &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
    uint64_t v14 = result;
    if (!result) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v14) {
      goto LABEL_19;
    }
  }

  if (v14 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v15 = 0LL;
  do
  {
    if ((v13 & 0xC000000000000001LL) != 0)
    {
      uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
    }

    else
    {
      uint64_t v16 = *(void *)(v13 + 8 * v15 + 32);
      swift_retain(v16);
    }

    ++v15;
    swift_beginAccess(v16 + 16, v31, 1LL, 0LL);
    uint64_t v17 = *(void *)(v16 + 16);
    *(void *)(v16 + 16) = 0LL;
    *(void *)(v16 + 24) = 0LL;
    swift_release(v16);
    swift_unknownObjectRelease(v17, v18);
  }

  while (v14 != v15);
LABEL_19:
  swift_bridgeObjectRelease(v13);
  uint64_t v19 = v6(a1, a2);
  uint64_t v20 = *(void *)(v19 + 168);
  swift_bridgeObjectRetain(v20);
  swift_release(v19);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = v20 + 32;
    do
    {
      sub_100017910(v22, (uint64_t)v28);
      uint64_t v23 = v29;
      uint64_t v24 = v30;
      sub_100030A60((uint64_t)v28, v29);
      (*(void (**)(void, void, uint64_t, uint64_t))(v24 + 24))(0LL, 0LL, v23, v24);
      sub_100017A40(v28);
      v22 += 40LL;
      --v21;
    }

    while (v21);
  }

  swift_bridgeObjectRelease(v20);
  uint64_t v25 = v6(a1, a2);
  swift_beginAccess(v25 + 16, v28, 1LL, 0LL);
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v25 + 16) = 0LL;
  *(void *)(v25 + 24) = 0LL;
  swift_release(v25);
  return swift_unknownObjectRelease(v26, v27);
}

uint64_t sub_10002C5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v7 = *(void *)(v6 + 168);
  swift_bridgeObjectRetain(v7);
  swift_release(v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_100017910(v9, (uint64_t)&v19);
      uint64_t v10 = v20;
      uint64_t v11 = v21;
      sub_1000178EC(&v19, v20);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v16, v10, v11);
      uint64_t v12 = v17;
      uint64_t v13 = v18;
      sub_1000178EC(v16, v17);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
      sub_100017A40(v16);
      if (v14 == a1) {
        break;
      }
      sub_100017A40(&v19);
      v9 += 40LL;
      if (!--v8)
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_6;
      }
    }

    swift_bridgeObjectRelease(v7);
    sub_10000AF84(&v19, a4);
  }

  else
  {
LABEL_6:
    *(void *)(a4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return swift_bridgeObjectRelease(v7);
}

void *sub_10002C6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  v7[2] = a1;
  uint64_t v5 = sub_10001B068((void (*)(__int128 *__return_ptr, void *))sub_100030B7C, (uint64_t)v7, v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

void ActiveFunction.getRawCur(forControl:onEntity:onChannel:)( int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(a5 + 144))(a1 & 0xFFFFFF, a3, 0LL, a2, a4);
  if (!v6)
  {
    uint64_t v10 = v9;
    ADCControlRequestParameterBlock.getCur()(v9, v8 & 0x1FF, a6);
  }

void sub_10002C7D0( int a1, unint64_t a2, char a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v49)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *v50;
  uint64_t v51;
  void v52[3];
  uint64_t v53;
  uint64_t v54;
  void v55[18];
  unsigned __int8 v56;
  _OWORD v57[7];
  uint64_t v58;
  _OWORD v59[7];
  uint64_t v60;
  id v51 = 0LL;
  unsigned int v14 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v15 = USBDescriptorControl.pbLayout()();
  char v16 = sub_100079084(v15);
  if (v7) {
    return;
  }
  uint64_t v18 = v17;
  char v19 = v16;
  unint64_t v20 = a5;
  uint64_t v21 = v18;
  sub_1000681F8(v20, v19, v18);
  uint64_t v50 = v21;
  uint64_t v49 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a7 + 8);
  v49(v55, a6, a7);
  sub_100019D7C(v55);
  if (v56 > 0x30u || ((1LL << v56) & 0x1000100000001LL) == 0)
  {
    unint64_t v35 = sub_10000AE14();
    uint64_t v32 = swift_allocError(&type metadata for AUAError, v35, 0LL, 0LL);
    *(_BYTE *)uint64_t v33 = 24;
    *(void *)(v33 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v33 + 16) = 0xE000000000000000LL;
    *(void *)(v33 + 24) = 0xD00000000000002ELL;
    *(void *)(v33 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF60LL;
    *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v33 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v34 = 594LL;
    goto LABEL_11;
  }

  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  if (!v22)
  {
    unint64_t v31 = sub_10000AE14();
    uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
    *(_BYTE *)uint64_t v33 = 7;
    *(void *)(v33 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v33 + 16) = 0xE000000000000000LL;
    *(void *)(v33 + 24) = 0xD00000000000002ELL;
    *(void *)(v33 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF60LL;
    *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v33 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v34 = 596LL;
LABEL_11:
    *(void *)(v33 + 56) = v34;
    swift_willThrow(v32);

    return;
  }

  uint64_t v48 = (void *)v22;
  __int16 v47 = sub_10007BFBC(v14);
  if ((a3 & 1) != 0) {
    unint64_t v23 = 0LL;
  }
  else {
    unint64_t v23 = a2;
  }
  uint64_t v24 = a4[3];
  uint64_t v25 = a4[4];
  sub_1000178EC(a4, v24);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v52, v24, v25);
  uint64_t v26 = v53;
  uint64_t v27 = v54;
  sub_1000178EC(v52, v53);
  unint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v26, v27);
  v49(v57, a6, a7);
  v59[4] = v57[4];
  v59[5] = v57[5];
  v59[6] = v57[6];
  Swift::String v60 = v58;
  v59[0] = v57[0];
  v59[1] = v57[1];
  v59[2] = v57[2];
  v59[3] = v57[3];
  sub_100030860(v59);
  sub_100019D7C(v57);
  unsigned __int8 v29 = *(_BYTE *)(*(void *)&v59[0] + 2LL);
  sub_100030944(v59);
  id v30 = v50;
  sub_1000B6284(1u, 0, 1, v47, v23, v28, v29, v50, (uint64_t)&v51);

  sub_100017A40(v52);
  uint64_t v36 = v51;
  id v37 = v30;
  uint64_t v38 = NSData.startIndex.getter(v37);
  uint64_t v39 = NSData.endIndex.getter();
  uint64_t v40 = NSData.startIndex.getter(v39);
  uint64_t v41 = NSData.endIndex.getter();
  if (v38 < v40 || v41 < v38)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
  }

  uint64_t v42 = NSData.startIndex.getter(v41);
  uint64_t v43 = NSData.endIndex.getter();

  if (v39 < v42 || v43 < v39) {
    goto LABEL_22;
  }
  if (__OFSUB__(v39, v38)) {
    goto LABEL_23;
  }
  if (v36 != v39 - v38)
  {
    unint64_t v44 = sub_10000AE14();
    uint64_t v45 = swift_allocError(&type metadata for AUAError, v44, 0LL, 0LL);
    *(_BYTE *)uint64_t v46 = 28;
    *(void *)(v46 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v46 + 16) = 0xE000000000000000LL;
    *(void *)(v46 + 24) = 0xD00000000000002ELL;
    *(void *)(v46 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF60LL;
    *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v46 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v46 + 56) = 606LL;
    swift_willThrow(v45);
  }
}

Swift::Int __swiftcall StringIndex.index()()
{
  if ((v0 & 0x10000) != 0) {
    int v1 = 0xFFFF;
  }
  else {
    int v1 = 255;
  }
  return v1 & v0;
}

void StringIndex.hash(into:)(uint64_t a1, int a2)
{
  __int16 v2 = a2;
  if ((a2 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

BOOL static StringIndex.__derived_enum_equals(_:_:)(int a1, unsigned int a2)
{
  BOOL v2 = a1 == a2;
  if ((a2 & 0x10000) != 0) {
    BOOL v2 = 0;
  }
  if ((a1 & 0x10000) != 0) {
    return ((unsigned __int16)a1 == (unsigned __int16)a2) & HIWORD(a2);
  }
  else {
    return v2;
  }
}

Swift::Int StringIndex.hashValue.getter(unsigned int a1)
{
  if ((a1 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(a1);
  }

  return Hasher._finalize()();
}

Swift::Int sub_10002CD34()
{
  __int16 v1 = *v0;
  char v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)(v4, 0LL);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

  return Hasher._finalize()();
}

void sub_10002CDA8()
{
  __int16 v1 = *v0;
  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v1);
  }

Swift::Int sub_10002CDF8(uint64_t a1)
{
  __int16 v2 = *v1;
  char v3 = *((_BYTE *)v1 + 2);
  Hasher.init(_seed:)(v5, a1);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }

  else
  {
    Hasher._combine(_:)(0LL);
    Hasher._combine(_:)(v2);
  }

  return Hasher._finalize()();
}

uint64_t sub_10002CE68(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  if (*a1 == v2) {
    unsigned int v3 = *((unsigned __int8 *)a2 + 2);
  }
  else {
    unsigned int v3 = 0;
  }
  BOOL v4 = *a1 == v2;
  if ((a2[1] & 1) != 0) {
    BOOL v4 = 0;
  }
  if ((a1[1] & 1) != 0) {
    return v3;
  }
  else {
    return v4;
  }
}

void sub_10002CEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v6 = *(void *)(v5 + 160);
  swift_retain(v6);
  swift_release(v5);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 120);
      id v11 = (id)v7;
      if (!v8)
      {
        swift_release(v6);

        return;
      }

      uint64_t v9 = (void *)swift_allocObject(&unk_1001041B0, 40LL, 7LL);
      v9[2] = a1;
      v9[3] = a2;
      v9[4] = v2;
      swift_retain(v8);
      swift_unknownObjectRetain(v2);
      sub_1000C77DC((uint64_t)v11, (uint64_t)sub_100030B58, (uint64_t)v9);
      swift_release(v9);
      swift_release(v6);

      uint64_t v10 = v8;
    }

    else
    {
      uint64_t v10 = v6;
    }

    swift_release(v10);
  }

uint64_t sub_10002D050(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)result != -536870165)
  {
    if ((_DWORD)result != -536870163)
    {
      unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136))(result, a2, a3, a4);
      uint64_t v19 = v7;
      unsigned __int8 v20 = v9;
      if (v9 > 1u || (v7 & 0xFFFFFFFFFFFE0000LL) != 0x1FFFFFFFE0000LL)
      {
        uint64_t v22 = v6;
        if (v9 >> 6)
        {
          if (v9 >> 6 == 1)
          {
            unint64_t v23 = v6 >> 8;
            if ((v22 & 0x1000000) != 0) {
              uint64_t v24 = 0LL;
            }
            else {
              uint64_t v24 = BYTE2(v22);
            }
            sub_10002D50C(v23, v24, (v22 & 0x1000000) >> 24, v22, a3, a4);
            return sub_10002CEA0(a3, a4);
          }

          char v31 = BYTE2(v6);
          uint64_t v47 = 0LL;
          uint64_t v48 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(54LL);
          v32._countAndFlagsBits = 0xD000000000000021LL;
          v32._object = (void *)0x80000001000CEE10LL;
          String.append(_:)(v32);
          LOBYTE(v45) = v22;
          v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
          object = v33._object;
          String.append(_:)(v33);
          swift_bridgeObjectRelease(object);
          v35._countAndFlagsBits = 0xD000000000000011LL;
          v35._object = (void *)0x80000001000CEE40LL;
          String.append(_:)(v35);
          if ((v22 & 0x1000000) != 0) {
            char v36 = 0;
          }
          else {
            char v36 = v31;
          }
          LOBYTE(v45) = v36;
          v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
          uint64_t v38 = v37._object;
          String.append(_:)(v37);
          swift_bridgeObjectRelease(v38);
          sub_100029840( v47,  v48,  0xD00000000000002ALL,  (void *)0x80000001000CEDE0LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  149LL);
          swift_bridgeObjectRelease(v48);
          unint64_t v39 = sub_10000AE14();
          uint64_t v40 = swift_allocError(&type metadata for AUAError, v39, 0LL, 0LL);
          *(_BYTE *)uint64_t v41 = 2;
          *(void *)(v41 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v41 + 16) = 0xE000000000000000LL;
          *(void *)(v41 + 24) = 0xD00000000000002ALL;
          *(void *)(v41 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEDE0LL;
          *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
          *(void *)(v41 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
          uint64_t v42 = 150LL;
        }

        else
        {
          uint64_t v25 = v8;
          uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
          ActiveControlInterface.entity(at:)(v22, (uint64_t)&v45);
          swift_release(v26);
          if (v46)
          {
            uint64_t v27 = v20 & 1;
            sub_10000AF84(&v45, (uint64_t)&v47);
            uint64_t v28 = v49;
            uint64_t v29 = v50;
            sub_1000178EC(&v47, v49);
            if ((v19 & 0x10000) != 0) {
              uint64_t v30 = 0LL;
            }
            else {
              uint64_t v30 = BYTE1(v19);
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 80))( v19,  v30,  (v19 & 0x10000uLL) >> 16,  v25,  v27,  v28,  v29);
            sub_100017A40(&v47);
            return sub_10002CEA0(a3, a4);
          }

          sub_1000178B0((uint64_t)&v45, &qword_100113E98);
          unint64_t v43 = sub_10000AE14();
          uint64_t v40 = swift_allocError(&type metadata for AUAError, v43, 0LL, 0LL);
          *(_BYTE *)uint64_t v41 = 104;
          *(void *)(v41 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v41 + 16) = 0xE000000000000000LL;
          *(void *)(v41 + 24) = 0xD00000000000002ALL;
          *(void *)(v41 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEDE0LL;
          *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
          *(void *)(v41 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
          uint64_t v42 = 139LL;
        }

        *(void *)(v41 + 56) = v42;
        uint64_t v44 = v40;
        swift_willThrow(v40);
        uint64_t v10 = (void *)0xEE00656369766564LL;
        uint64_t v11 = 0x206E776F6E6B6E55LL;
        uint64_t v47 = 0LL;
        uint64_t v48 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(29LL);
        uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
        if (v12)
        {
          uint64_t v13 = v12;
          id v14 = [v12 boxName];

          if (v14)
          {
            uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            uint64_t v10 = v15;
          }
        }

        v16._countAndFlagsBits = v11;
        v16._object = v10;
        String.append(_:)(v16);
        swift_bridgeObjectRelease(v10);
        v17._countAndFlagsBits = 0xD00000000000001BLL;
        v17._object = (void *)0x80000001000CEDC0LL;
        String.append(_:)(v17);
        uint64_t v18 = v48;
        sub_100029840( v47,  v48,  0xD00000000000002ALL,  (void *)0x80000001000CEDE0LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  155LL);
        swift_bridgeObjectRelease(v18);
        swift_errorRelease(v44);
      }
    }

    return sub_10002CEA0(a3, a4);
  }

  return result;
}

uint64_t sub_10002D50C(char a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  int v9 = a4;
  sub_100029834( 0xD000000000000022LL,  0x80000001000CEE60LL,  0xD00000000000003ELL,  (void *)0x80000001000CEE90LL,  0xD00000000000001ELL,  0x80000001000CEB20LL,  827LL);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 24);
  uint64_t v11 = v10(a5, a6);
  int v12 = *(unsigned __int8 *)(*(void *)(v11 + 32) + 2LL);
  swift_release(v11);
  if (v12 == v9)
  {
    uint64_t v13 = v10(a5, a6);
    sub_100081EEC(a1);
    uint64_t v14 = v13;
    return swift_release(v14);
  }

  unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
  uint64_t v16 = v15;
  if (v15 >> 62) {
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v15);
  if (v17)
  {
LABEL_5:
    if ((v16 & 0xC000000000000001LL) != 0)
    {
      uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v16);
    }

    else
    {
      uint64_t v18 = *(void *)(v16 + 32);
      swift_retain(v18);
    }

    if (*(unsigned __int8 *)(*(void *)(v18 + 32) + 2LL) != v9)
    {
      swift_release(v18);
      if (v17 == 1) {
        goto LABEL_17;
      }
      uint64_t v19 = 5LL;
      while (1)
      {
        uint64_t v20 = v19 - 4;
        if ((v16 & 0xC000000000000001LL) != 0)
        {
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v16);
          BOOL v21 = __OFADD__(v20, 1LL);
          uint64_t v22 = v19 - 3;
          if (v21) {
            goto LABEL_20;
          }
        }

        else
        {
          uint64_t v18 = *(void *)(v16 + 8 * v19);
          swift_retain(v18);
          BOOL v21 = __OFADD__(v20, 1LL);
          uint64_t v22 = v19 - 3;
          if (v21)
          {
LABEL_20:
            __break(1u);
LABEL_21:
            if (v16 < 0) {
              uint64_t v27 = v16;
            }
            else {
              uint64_t v27 = v16 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v16);
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v27);
            if (!v17) {
              goto LABEL_17;
            }
            goto LABEL_5;
          }
        }

        swift_release(v18);
        ++v19;
        if (v22 == v17) {
          goto LABEL_17;
        }
      }
    }

    swift_bridgeObjectRelease_n(v16, 2LL);
    sub_1000C67B4(a2, a3 & 1);
    uint64_t v14 = v18;
    return swift_release(v14);
  }

  else
  {
LABEL_17:
    swift_bridgeObjectRelease_n(v16, 2LL);
    unint64_t v23 = sub_10000AE14();
    uint64_t v24 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v25 = 2;
    *(void *)(v25 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v25 + 16) = 0xE000000000000000LL;
    *(void *)(v25 + 24) = 0xD00000000000003ELL;
    *(void *)(v25 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEE90LL;
    *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v25 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v25 + 56) = 838LL;
    return swift_willThrow(v24);
  }

void sub_10002D7BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!v5)
  {
    uint64_t v6 = sub_100008E00(&qword_100113EB8);
    if (!swift_dynamicCast(&v11, v10, v6, &type metadata for UInt16, 6LL))
    {
      unint64_t v7 = sub_10000AE14();
      uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
      *(_BYTE *)uint64_t v9 = 1;
      *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v9 + 16) = 0xE000000000000000LL;
      *(void *)(v9 + 24) = 0xD00000000000002BLL;
      *(void *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEC10LL;
      *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
      *(void *)(v9 + 56) = 218LL;
      swift_willThrow(v8);
    }
  }

uint64_t ActiveFunction.getRawRange(forControl:onEntity:onChannel:)( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v7 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(a5 + 160))(a1 & 0xFFFFFF, a3, 0LL, a2, a4);
  if (!v5)
  {
    uint64_t v9 = v8;
    uint64_t v6 = sub_100067DD0(v7 & 0x1FF, v8);
  }

  return v6;
}

unint64_t sub_10002D940()
{
  unint64_t result = qword_100114518;
  if (!qword_100114518)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StringIndex, &type metadata for StringIndex);
    atomic_store(result, (unint64_t *)&qword_100114518);
  }

  return result;
}

unint64_t sub_10002D988()
{
  unint64_t result = qword_100114520;
  if (!qword_100114520)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAInterruptAttribute,  &type metadata for AUAInterruptAttribute);
    atomic_store(result, (unint64_t *)&qword_100114520);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StringIndex(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for StringIndex(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1) {
    int v5 = -1;
  }
  else {
    int v5 = v4 ^ 0xFF;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StringIndex(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + swift_unknownObjectWeakDestroy(v0 + 3) = v4;
      }
      else {
        *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + swift_unknownObjectWeakDestroy(v0 + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 2) = -(char)a2;
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

uint64_t sub_10002DAE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_10002DAE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StringIndex()
{
  return &type metadata for StringIndex;
}

uint64_t destroy for ActiveFunctionDataPath(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s9AUASDCore22ActiveFunctionDataPathVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ActiveFunctionDataPath(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for ClockRateRange(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for ActiveFunctionDataPath(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveFunctionDataPath(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveFunctionDataPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ActiveFunctionDataPath()
{
  return &type metadata for ActiveFunctionDataPath;
}

uint64_t getEnumTagSinglePayload for AUAInterruptAttribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for AUAInterruptAttribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10002DDCC + 4 * byte_1000D6505[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10002DE00 + 4 * byte_1000D6500[v4]))();
}

uint64_t sub_10002DE00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DE08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002DE10LL);
  }
  return result;
}

uint64_t sub_10002DE1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002DE24LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_10002DE28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DE30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAInterruptAttribute()
{
  return &type metadata for AUAInterruptAttribute;
}

void *sub_10002DE4C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = a1 & 0xFFFFFF;
  uint64_t v11 = ActiveFunction.getRawRange(forControl:onEntity:onChannel:)(a1 & 0xFFFFFF, a2, a3, a4, a5);
  if (!v6)
  {
    uint64_t v13 = v11;
    uint64_t v14 = sub_100029F88(v11);
    swift_bridgeObjectRelease(v13);
    if (v14)
    {
      uint64_t v5 = sub_10002DF68((uint64_t)v14, v10, a2, a4, a5);
      swift_bridgeObjectRelease(v14);
    }

    else
    {
      unint64_t v15 = sub_10000AE14();
      uint64_t v16 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
      *(_BYTE *)uint64_t v17 = 53;
      *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v17 + 16) = 0xE000000000000000LL;
      *(void *)(v17 + 24) = 0xD00000000000002DLL;
      *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBA0LL;
      *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
      *(void *)(v17 + 56) = 256LL;
      swift_willThrow(v16);
    }
  }

  return v5;
}

void *sub_10002DF68(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[2] = a4;
  v10[3] = a5;
  __int16 v11 = a2;
  char v12 = BYTE2(a2);
  uint64_t v13 = a3;
  BOOL v7 = sub_100029C80((void (*)(uint64_t *__return_ptr, int *, uint64_t *))sub_1000309EC, (uint64_t)v10, a1);
  if (!v5)
  {
    int v8 = v7;
    uint64_t v6 = sub_10002E408((uint64_t)v7);
    swift_bridgeObjectRelease(v8);
  }

  return v6;
}

uint64_t sub_10002DFE4@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X6>, float *a3@<X8>)
{
  __int16 v5 = *a1;
  __int16 v6 = a1[1];
  __int16 v7 = a1[2];
  uint64_t v28 = &type metadata for UInt16;
  unint64_t v8 = sub_100030A1C();
  unint64_t v29 = v8;
  v27[0] = v5;
  uint64_t v9 = sub_100008E00(&qword_100114550);
  if ((swift_dynamicCast(&v30, v27, v9, &type metadata for UInt16, 6LL) & 1) == 0)
  {
    unint64_t v20 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v20, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 1;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 274LL;
    goto LABEL_11;
  }

  unsigned __int16 v10 = v30;
  uint64_t v28 = &type metadata for UInt16;
  unint64_t v29 = v8;
  v27[0] = v6;
  if ((swift_dynamicCast(&v30, v27, v9, &type metadata for UInt16, 6LL) & 1) == 0)
  {
    unint64_t v21 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v21, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 1;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 275LL;
    goto LABEL_11;
  }

  int v11 = v30;
  uint64_t v28 = &type metadata for UInt16;
  unint64_t v29 = v8;
  v27[0] = v7;
  uint64_t result = swift_dynamicCast(&v30, v27, v9, &type metadata for UInt16, 6LL);
  if ((result & 1) == 0)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 1;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 276LL;
    goto LABEL_11;
  }

  int v13 = (__int16)v10;
  float v14 = (float)v13 * 0.0039062;
  if (v14 == -INFINITY)
  {
    unint64_t v15 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 107;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 281LL;
LABEL_11:
    *(void *)(v17 + 56) = v19;
    uint64_t result = swift_willThrow(v16);
    *a2 = v18;
    return result;
  }

  float v23 = (float)(__int16)v11 * 0.0039062;
  if (v11 == 0x8000) {
    float v23 = -INFINITY;
  }
  if (v23 < v14)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 107;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 285LL;
    goto LABEL_11;
  }

  float v25 = (float)(__int16)v30 * 0.0039062;
  if (v30 == 0x8000) {
    float v25 = -INFINITY;
  }
  if (v25 < 0.0)
  {
    unint64_t v26 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
    uint64_t v18 = v16;
    *(_BYTE *)uint64_t v17 = 107;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000035LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEBD0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v19 = 289LL;
    goto LABEL_11;
  }

  *a3 = v14;
  a3[1] = v23;
  a3[2] = v25;
  return result;
}

void *sub_10002E408(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  int v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_100070580(0, v1, 0);
    int v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (_DWORD *)(a1 + 40);
    do
    {
      int v5 = *v4;
      uint64_t v14 = *((void *)v4 - 1);
      int v15 = v5;
      uint64_t v6 = sub_100008E00(&qword_100114538);
      uint64_t v7 = sub_100008E00(&qword_100114540);
      swift_dynamicCast(&v16, &v14, v6, v7, 7LL);
      uint64_t v8 = v16;
      int v9 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100070580(0, v2[2] + 1LL, 1);
        int v2 = v18;
      }

      unint64_t v11 = v2[2];
      unint64_t v10 = v2[3];
      if (v11 >= v10 >> 1)
      {
        sub_100070580(v10 > 1, v11 + 1, 1);
        int v2 = v18;
      }

      void v2[2] = v11 + 1;
      char v12 = (char *)v2 + 12 * v11;
      *((void *)v12 + 4) = v8;
      *((_DWORD *)v12 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v9;
      v4 += 3;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_10002E550(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v7 = v6(a2, a3);
  uint64_t v8 = (char *)*(id *)(v7 + 152);
  swift_release(v7);
  int v9 = *(__int16 *)(*(void *)&v8[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] + 8LL);

  if (v9 == -1)
  {
    uint64_t v10 = v6(a2, a3);
    unint64_t v11 = (char *)*(id *)(v10 + 152);
    swift_release(v10);
    LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(__int16 *)(*(void *)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] + 10LL);

    if ((_DWORD)v10 == -1)
    {
      id v53 = a1;
      id v12 = [(id)objc_opt_self(NSBundle) mainBundle];
      id v13 = [v12 resourcePath];

      if (v13)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v46 = v14;

        uint64_t v15 = sub_100008E00(&qword_100114560);
        uint64_t inited = swift_initStackObject(v15, v52);
        *(_OWORD *)(inited + 16) = xmmword_1000D3D30;
        uint64_t v50 = 0x505344415541LL;
        unint64_t v51 = 0xE600000000000000LL;
        AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
        uint64_t v17 = sub_100008E00(&qword_100114568);
        uint64_t v18 = swift_initStackObject(v17, v49);
        *(_OWORD *)(v18 + 16) = xmmword_1000D6650;
        *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xD000000000000013LL;
        *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x80000001000CEEF0LL;
        *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = _swiftEmptyArrayStorage;
        *(void *)(v18 + 56) = 0xD00000000000001ALL;
        *(void *)(v18 + 64) = 0x80000001000CEF10LL;
        *(void *)(v18 + 7swift_unknownObjectWeakDestroy(v0 + 2) = _swiftEmptyArrayStorage;
        *(void *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x7475706E49LL;
        *(void *)(v18 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0xE500000000000000LL;
        uint64_t v19 = sub_100008E00(&qword_100114570);
        uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
        *(_OWORD *)(v20 + 16) = xmmword_1000D3D30;
        uint64_t v21 = sub_100008E00(&qword_100114578);
        uint64_t v22 = swift_initStackObject(v21, v48);
        *(_OWORD *)(v22 + 16) = xmmword_1000D3D30;
        *(void *)(v22 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x6572617764726148LL;
        *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE800000000000000LL;
        uint64_t v23 = sub_100008E00(&qword_100114580);
        uint64_t v24 = swift_allocObject(v23, 48LL, 7LL);
        *(_OWORD *)(v24 + 16) = xmmword_1000D6660;
        *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = sub_1000071E4((uint64_t)&off_1000FDB18);
        *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_1000071E4((uint64_t)&off_1000FDB78);
        *(void *)(v22 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v24;
        *(void *)(v20 + 3swift_unknownObjectWeakDestroy(v0 + 2) = sub_100007304(v22);
        *(void *)(v18 + 96) = v20;
        *(void *)(v18 + 104) = 0x74757074754FLL;
        *(void *)(v18 + 11swift_unknownObjectWeakDestroy(v0 + 2) = 0xE600000000000000LL;
        uint64_t v25 = swift_allocObject(v19, 40LL, 7LL);
        *(_OWORD *)(v25 + 16) = xmmword_1000D3D30;
        uint64_t v26 = swift_initStackObject(v21, v47);
        *(_OWORD *)(v26 + 16) = xmmword_1000D3D30;
        *(void *)(v26 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x6572617764726148LL;
        *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE800000000000000LL;
        uint64_t v27 = swift_allocObject(v23, 48LL, 7LL);
        *(_OWORD *)(v27 + 16) = xmmword_1000D6660;
        *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = sub_1000071E4((uint64_t)&off_1000FDBD8);
        *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_1000071E4((uint64_t)&off_1000FDC38);
        *(void *)(v26 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v27;
        *(void *)(v25 + 3swift_unknownObjectWeakDestroy(v0 + 2) = sub_100007304(v26);
        *(void *)(v18 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v25;
        unint64_t v28 = sub_100007310(v18);
        *(void *)(inited + 96) = sub_100008E00(&qword_100114588);
        *(void *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = v28;
        unint64_t v29 = sub_100007430(inited);
        uint64_t v50 = 0LL;
        unint64_t v51 = 0xE000000000000000LL;
        id v30 = v53;
        id v31 = [v53 deviceUID];
        if (v31)
        {
          Swift::String v32 = v31;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          Swift::String v35 = v34;

          v36._countAndFlagsBits = v33;
          v36._object = v35;
          String.append(_:)(v36);
          swift_bridgeObjectRelease(v35);
          v37._countAndFlagsBits = 1347634208LL;
          v37._object = (void *)0xE400000000000000LL;
          String.append(_:)(v37);
          uint64_t v38 = v50;
          uint64_t v39 = v51;
          id v40 = objc_allocWithZone(&OBJC_CLASS___ASDAudioDeviceDSPDatabase);
          swift_bridgeObjectRetain(v39);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v29);
          NSString v42 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v46);
          NSString v43 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v39);
          id v44 = [v40 initWithDictionary:isa resourcePath:v42 deviceUID:v43];

          id v45 = [v30 plugin];
          objc_allocWithZone((Class)type metadata accessor for AUADSPAudioDevice());
          sub_100015C88(v38, v39, v30, v44, v45, 1667463012);
          return;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
    }
  }

void *sub_10002EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v3 = *(void *)(v2 + 168);
  swift_bridgeObjectRetain(v3);
  swift_release(v2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain(v3);
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      sub_100017910(v5, (uint64_t)v14);
      uint64_t v7 = sub_100008E00(&qword_100113B28);
      uint64_t v8 = sub_100008E00(&qword_100114530);
      if (swift_dynamicCast(v12, v14, v7, v8, 6LL))
      {
        sub_10000AF84(v12, (uint64_t)v15);
        sub_100017910((uint64_t)v15, (uint64_t)v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
          uint64_t v6 = sub_10004F888(0LL, v6[2] + 1LL, 1, v6);
        }
        unint64_t v10 = v6[2];
        unint64_t v9 = v6[3];
        if (v10 >= v9 >> 1) {
          uint64_t v6 = sub_10004F888((void *)(v9 > 1), v10 + 1, 1, v6);
        }
        v6[2] = v10 + 1;
        sub_10000AF84(v14, (uint64_t)&v6[5 * v10 + 4]);
        sub_100017A40(v15);
      }

      else
      {
        uint64_t v13 = 0LL;
        memset(v12, 0, sizeof(v12));
        sub_1000178B0((uint64_t)v12, &qword_100114528);
      }

      v5 += 40LL;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease(v3);
    return _swiftEmptyArrayStorage;
  }

  return v6;
}

void sub_10002EC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(*(void *)a1 + 72LL);
  if (!((unint64_t)v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(*(void *)a1 + 72LL));
    if (v11) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease(v10);
    __break(1u);
    goto LABEL_15;
  }

  if (v10 < 0) {
    uint64_t v18 = *(void *)(*(void *)a1 + 72LL);
  }
  else {
    uint64_t v18 = v10 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(*(void *)a1 + 72LL));
  if (!_CocoaArrayWrapper.endIndex.getter(v18)) {
    goto LABEL_14;
  }
LABEL_3:
  if ((v10 & 0xC000000000000001LL) != 0)
  {
LABEL_15:
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v10);
    goto LABEL_6;
  }

  if (!*(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
    return;
  }

  uint64_t v12 = *(void *)(v10 + 32);
  swift_retain(v12);
LABEL_6:
  swift_bridgeObjectRelease(v10);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(a6 + 168))(v22, v12, a5, a6);
  swift_release(v12);
  sub_1000305F0((uint64_t)v22, (uint64_t)v19);
  uint64_t v13 = v20;
  if (v20)
  {
    uint64_t v14 = v21;
    sub_1000178EC(v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    sub_100017A40(v19);
  }

  else
  {
    sub_1000178B0((uint64_t)v19, &qword_100114528);
  }

  uint64_t ObjectType = swift_getObjectType(a3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v19, ObjectType, a4);
  uint64_t v17 = v20;
  uint64_t v16 = v21;
  sub_1000178EC(v19, v20);
  (*(void (**)(uint64_t))(*(void *)(v16 + 8) + 16LL))(v17);
  sub_1000178B0((uint64_t)v22, &qword_100114528);
  sub_100017A40(v19);
}

void **sub_10002EDEC(uint64_t (*a1)(uint64_t *), void **a2, unint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v25 = (void **)&_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  for (uint64_t i = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v19))
  {
    unint64_t v9 = 0LL;
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v23 = v5 & 0xC000000000000001LL;
    uint64_t v21 = v5;
    while (1)
    {
      if (v23)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v5);
        unint64_t v11 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_14:
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease(v5);
          swift_release(v10);
          swift_release(v25);
          return v3;
        }

        goto LABEL_9;
      }

      if (v9 >= *(void *)(v22 + 16)) {
        break;
      }
      uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
      swift_retain(v10);
      unint64_t v11 = v9 + 1;
      if (__OFADD__(v9, 1LL)) {
        goto LABEL_14;
      }
LABEL_9:
      uint64_t v24 = v10;
      uint64_t v3 = a2;
      char v12 = a1(&v24);
      if (v4) {
        goto LABEL_15;
      }
      if ((v12 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v13 = i;
        uint64_t v14 = a1;
        uint64_t v15 = a2;
        uint64_t v16 = v25[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
        uint64_t v17 = v16;
        a2 = v15;
        a1 = v14;
        uint64_t i = v13;
        uint64_t v5 = v21;
        uint64_t v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v10);
        uint64_t v3 = (void **)&v25;
        specialized ContiguousArray._endMutation()(v18);
      }

      else
      {
        swift_release(v10);
      }

      ++v9;
      if (v11 == i)
      {
        uint64_t v3 = v25;
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_18:
    if (v5 < 0) {
      uint64_t v19 = v5;
    }
    else {
      uint64_t v19 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  uint64_t v3 = (void **)&_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v5);
  return v3;
}

void sub_10002EFA0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if (!v5
    || (v6 = v5, id v7 = [v5 audioDevices], v6, !v7))
  {
    unint64_t v13 = sub_10000AE14();
    uint64_t v14 = swift_allocError(&type metadata for AUAError, v13, 0LL, 0LL);
    *(_BYTE *)uint64_t v15 = 51;
    *(void *)(v15 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v15 + 16) = 0xE000000000000000LL;
    *(void *)(v15 + 24) = 0xD000000000000020LL;
    *(void *)(v15 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF30LL;
    *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v15 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v15 + 56) = 493LL;
    swift_willThrow(v14);
    return;
  }

  uint64_t v8 = sub_10000AF08(0LL, &qword_100114590, &OBJC_CLASS___ASDAudioDevice_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  if ((unint64_t)v9 >> 62)
  {
LABEL_39:
    if (v9 < 0) {
      uint64_t v54 = v9;
    }
    else {
      uint64_t v54 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(v9);
    if (v10) {
      goto LABEL_5;
    }
LABEL_43:
    swift_bridgeObjectRelease(v9);
    return;
  }

  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v10) {
    goto LABEL_43;
  }
LABEL_5:
  unint64_t v11 = 0LL;
  unint64_t v12 = v9 & 0xC000000000000001LL;
  uint64_t v55 = v9 + 32;
  uint64_t v56 = v9 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v59 = v4;
  uint64_t v60 = v9;
  unint64_t v57 = v9 & 0xC000000000000001LL;
  uint64_t v58 = v10;
  while (1)
  {
    if (v12)
    {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
      goto LABEL_12;
    }

    if (v11 >= *(void *)(v56 + 16)) {
      break;
    }
    id v16 = *(id *)(v55 + 8 * v11);
LABEL_12:
    uint64_t v17 = v16;
    BOOL v18 = __OFADD__(v11, 1LL);
    unint64_t v19 = v11 + 1;
    if (v18) {
      goto LABEL_38;
    }
    id v20 = [v16 inputStreams];
    if (!v20) {
      goto LABEL_45;
    }
    uint64_t v21 = v20;
    uint64_t v22 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    id v24 = [v17 outputStreams];
    if (!v24) {
      goto LABEL_46;
    }
    uint64_t v25 = v24;
    unint64_t v61 = v19;
    uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v22);

    sub_1000929D8(v26);
    uint64_t v4 = v23;
    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0) {
        uint64_t v49 = v68;
      }
      else {
        uint64_t v49 = v23 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease(v23);
      if (v27)
      {
LABEL_17:
        unint64_t v66 = v23 & 0xC000000000000001LL;
        uint64_t v28 = 4LL;
        uint64_t v63 = v17;
        uint64_t v64 = v23;
        uint64_t v62 = v27;
        while (1)
        {
          id v29 = v66
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28 - 4, v4)
              : *(id *)(v4 + 8 * v28);
          id v30 = v29;
          uint64_t v9 = v28 - 3;
          if (__OFADD__(v28 - 4, 1LL)) {
            break;
          }
          uint64_t v31 = type metadata accessor for AUAStream(0LL);
          uint64_t v32 = swift_dynamicCastClass(v30, v31);
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = type metadata accessor for AUAAudioDevice(0LL);
            if (!swift_dynamicCastClass(v17, v34))
            {
              id v50 = v30;
              swift_bridgeObjectRelease(v60);
              swift_bridgeObjectRelease(v4);
              unint64_t v51 = sub_10000AE14();
              uint64_t v52 = swift_allocError(&type metadata for AUAError, v51, 0LL, 0LL);
              *(_BYTE *)uint64_t v53 = 1;
              *(void *)(v53 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
              *(void *)(v53 + 16) = 0xE000000000000000LL;
              *(void *)(v53 + 24) = 0xD000000000000020LL;
              *(void *)(v53 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEF30LL;
              *(void *)(v53 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
              *(void *)(v53 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
              *(void *)(v53 + 56) = 500LL;
              swift_willThrow(v52);

              return;
            }

            uint64_t v35 = *(void *)(v33 + OBJC_IVAR___AUAStream_streamingTerminal + 24);
            uint64_t v36 = *(void *)(v33 + OBJC_IVAR___AUAStream_streamingTerminal + 32);
            sub_1000178EC((void *)(v33 + OBJC_IVAR___AUAStream_streamingTerminal), v35);
            Swift::String v37 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 48);
            id v38 = v30;
            id v67 = v17;
            uint64_t v39 = v37(v35, v36);
            uint64_t v40 = a1[3];
            uint64_t v41 = a1[4];
            sub_1000178EC(a1, v40);
            NSString v42 = *(uint64_t (**)(uint64_t, uint64_t))(v41 + 48);
            if (v39 == v42(v40, v41))
            {
              swift_bridgeObjectRelease(v60);
              swift_bridgeObjectRelease(v64);

              return;
            }

            NSString v43 = (void *)(v33 + OBJC_IVAR___AUAStream_otherTerminal);
            uint64_t v44 = *(void *)(v33 + OBJC_IVAR___AUAStream_otherTerminal + 24);
            uint64_t v45 = v43[4];
            sub_1000178EC(v43, v44);
            uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 48))(v44, v45);
            uint64_t v47 = v42(v40, v41);

            BOOL v48 = v46 == v47;
            uint64_t v17 = v63;
            uint64_t v4 = v64;
            uint64_t v27 = v62;
            uint64_t v9 = v28 - 3;
            if (v48)
            {
              swift_bridgeObjectRelease(v60);
              swift_bridgeObjectRelease(v64);
              return;
            }
          }

          else
          {
          }

          ++v28;
          if (v9 == v27) {
            goto LABEL_7;
          }
        }

        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }

    else
    {
      uint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v27) {
        goto LABEL_17;
      }
    }

void sub_10002F4D4(int a1, unsigned __int8 a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = 0LL;
  unsigned int v10 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v11 = USBDescriptorControl.pbLayout()();
  char v12 = sub_100079084(v11);
  if (v5) {
    return;
  }
  uint64_t v14 = v13;
  sub_1000681F8(a3, v12, v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v36, a4, a5);
  sub_100019D7C(v36);
  if (v37 > 0x30u || ((1LL << v37) & 0x1000100000001LL) == 0)
  {
    unint64_t v23 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 24;
    *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v21 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD000000000000028LL;
    *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB70LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v22 = 642LL;
    goto LABEL_8;
  }

  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (!v15)
  {
    unint64_t v19 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 7;
    *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v21 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD000000000000028LL;
    *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB70LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    uint64_t v22 = 644LL;
LABEL_8:
    *(void *)(v21 + 56) = v22;
    swift_willThrow(v20);

    return;
  }

  id v16 = (void *)v15;
  __int16 v17 = sub_10007BFBC(v10);
  id v18 = v14;
  sub_1000B6284(1u, 0, 2, v17, 0LL, 0LL, a2, v14, (uint64_t)&v35);

  uint64_t v24 = v35;
  id v25 = v18;
  uint64_t v26 = NSData.startIndex.getter(v25);
  uint64_t v27 = NSData.endIndex.getter();
  uint64_t v28 = NSData.startIndex.getter(v27);
  uint64_t v29 = NSData.endIndex.getter();
  if (v26 < v28 || v29 < v26)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }

  uint64_t v30 = NSData.startIndex.getter(v29);
  uint64_t v31 = NSData.endIndex.getter();

  if (v27 < v30 || v31 < v27) {
    goto LABEL_19;
  }
  if (__OFSUB__(v27, v26)) {
    goto LABEL_20;
  }
  if (v24 != v27 - v26)
  {
    unint64_t v32 = sub_10000AE14();
    uint64_t v33 = swift_allocError(&type metadata for AUAError, v32, 0LL, 0LL);
    *(_BYTE *)uint64_t v34 = 28;
    *(void *)(v34 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v34 + 16) = 0xE000000000000000LL;
    *(void *)(v34 + 24) = 0xD000000000000028LL;
    *(void *)(v34 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB70LL;
    *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v34 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v34 + 56) = 654LL;
    swift_willThrow(v33);
  }
}

uint64_t *sub_10002F83C@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[2];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result[1];
    uint64_t v15 = *result;
    uint64_t v8 = (void *)(v4 + 32);
    swift_bridgeObjectRetain(v4);
    while (1)
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_1000178EC(v8, v10);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 48LL))(v10);
      uint64_t v12 = a2[3];
      uint64_t v13 = a2[4];
      sub_1000178EC(a2, v12);
      v8 += 5;
      if (!--v5)
      {
        uint64_t result = (uint64_t *)swift_bridgeObjectRelease(v4);
        uint64_t v14 = 0LL;
        uint64_t v7 = 0LL;
        uint64_t v4 = 0LL;
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRetain(v4);
    uint64_t v14 = v15;
    swift_retain(v15);
    uint64_t result = (uint64_t *)swift_retain(v7);
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v4 = 0LL;
  }

LABEL_8:
  *a3 = v14;
  a3[1] = v7;
  a3[2] = v4;
  return result;
}

  *(_DWORD *)a1 = v7;
  return result;
}

  uint64_t v173 = v24;
  id v175 = v22;
  if (v19 < 0x201) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = [a1 capabilityDescriptors];
  }
  uint64_t v44 = v184;
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor] = v28;
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] = v18;
  uint64_t v46 = v204;
  uint64_t v45 = v205;
  uint64_t v47 = (unint64_t *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
  *uint64_t v47 = v204;
  v47[1] = v45;
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject] = a1;
  *(_DWORD *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed] = v203;
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService] = v184;
  BOOL v48 = a1;
  uint64_t v185 = v45;
  swift_bridgeObjectRetain(v45);
  uint64_t v49 = v44;
  id v50 = (unint64_t)[v48 deviceAddress];
  if ((v50 & 0x8000000000000000LL) != 0) {
    goto LABEL_108;
  }
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceAddress] = v50;
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum] = v27[5];
  unint64_t v51 = [objc_allocWithZone((Class)USBFrameTimeCorrelater) initWithIOUSBHostObject:v48];
  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater] = v51;
  v202 = _swiftEmptyArrayStorage;
  if (qword_100112930 != -1) {
    swift_once(&qword_100112930, sub_1000AB040);
  }
  uint64_t v52 = qword_1001172A0;
  uint64_t v53 = sub_1000ABDB0(v179);
  uint64_t v54 = sub_1000AC0A8(v20);
  uint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t v56 = v186;
  if (*(void *)(v52 + 16))
  {
    unint64_t v57 = v54 == 65 ? 0 : v54;
    uint64_t v58 = v53 == 35 ? 0 : v53;
    uint64_t v59 = sub_100016BF0(v58 | (v57 << 8));
    if ((v60 & 1) != 0)
    {
      unint64_t v61 = *(void *)(v52 + 56);
      uint64_t v62 = *(void *)(v61 + 8 * v59);
      uint64_t v63 = *(void *)(v62 + 16);
      if (v63)
      {
        uint64_t v64 = v48;
        swift_bridgeObjectRetain(*(void *)(v61 + 8 * v59));
        uint64_t v65 = (void *)(v62 + 40);
        do
        {
          if (v21 >= *((unsigned __int16 *)v65 - 4) && *((unsigned __int16 *)v65 - 3) >= v21)
          {
            swift_bridgeObjectRetain(*v65);
            sub_1000931A0(v67);
          }

          v65 += 2;
          --v63;
        }

        while (v63);
        swift_bridgeObjectRelease(v62);
        BOOL v48 = v64;
        uint64_t v55 = v202;
      }

      uint64_t v56 = v186;
    }
  }

  uint64_t v70 = (void *)v55[2];
  if (v70)
  {
    swift_bridgeObjectRetain(v55);
    uint64_t v70 = v55;
  }

  *(void *)&v188[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList] = v70;

  uint64_t v71 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v56);
  v201.receiver = v188;
  v201.super_class = (Class)type metadata accessor for USBDevice();
  uint64_t v72 = objc_msgSendSuper2(&v201, "initWithBoxUID:withPlugin:", v71, v183);

  if (!v72)
  {
    __break(1u);
LABEL_108:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
    goto LABEL_109;
  }

  v198 = v55;
  v215 = v49;
  if (v208) {
    uint64_t v73 = v208;
  }
  else {
    uint64_t v73 = 0x80000001000CD4C0LL;
  }
  swift_bridgeObjectRetain(v208);
  char v74 = v72;
  id v75 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v73);
  [v74 setManufacturerName:v75];

  sub_10004AFEC((uint64_t)&v209, (uint64_t)v212, &qword_100113B18);
  sub_10004AFEC((uint64_t)v212, (uint64_t)v213, &qword_100113B18);
  uint64_t v76 = v214;
  uint64_t v77 = v48;
  if (v214)
  {
    unsigned int v78 = v74;
    sub_1000B998C((uint64_t)v212);
    uint64_t v76 = String._bridgeToObjectiveC()();
    sub_1000B99B4((uint64_t)v212);
  }

  else
  {
    id v79 = v74;
  }

  [v74 setSerialNumber:v76];

  uint64_t v80 = sub_100008E00(&qword_100113420);
  int v81 = swift_allocObject(v80, 72LL, 7LL);
  *(_OWORD *)(v81 + 16) = xmmword_1000D3D30;
  id v82 = *((void *)&v203 + 1);
  *(void *)(v81 + 56) = &type metadata for Int;
  *(void *)(v81 + 64) = &protocol witness table for Int;
  *(void *)(v81 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v82;
  id v83 = v74;
  String.init(format:_:)(2016686117LL, 0xE400000000000000LL, v81);
  id v85 = v84;
  Swift::String v86 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v85);
  [v83 setFirmwareVersion:v86];

  uint64_t v87 = swift_allocObject(v80, 112LL, 7LL);
  *(_OWORD *)(v87 + 16) = xmmword_1000D6660;
  *(void *)(v87 + 56) = &type metadata for Int;
  *(void *)(v87 + 64) = &protocol witness table for Int;
  uint64_t v88 = v206;
  *(void *)(v87 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v207;
  *(void *)(v87 + 96) = &type metadata for Int;
  *(void *)(v87 + 104) = &protocol witness table for Int;
  *(void *)(v87 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v88;
  Swift::String v89 = String.init(format:_:)(0x3430253A78343025LL, 0xE900000000000078LL, v87);
  Swift::String v91 = v90;
  uint64_t v92 = (char *)v83;
  id v93 = String._bridgeToObjectiveC()();
  [v92 setModelUID:v93];

  uint64_t v94 = v77;
  uint64_t v95 = sub_1000B7F14(v175 << 8, v94);
  uint64_t v171 = v89;

  uint64_t v96 = v183;
  id v97 = v215;
  uint64_t v98 = v198;
  uint64_t v189 = v95[2];
  if (!v189)
  {
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v95);
    sub_1000B9944(&v203);
    swift_bridgeObjectRelease(v198);

    unsigned int v129 = sub_10000AE14();
    uint64_t v130 = swift_allocError(&type metadata for AUAError, v129, 0LL, 0LL);
    *(_BYTE *)int v131 = 66;
    *(void *)(v131 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v131 + 16) = 0xE000000000000000LL;
    *(void *)(v131 + 24) = 0xD000000000000051LL;
    *(void *)(v131 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D2E70LL;
    *(void *)(v131 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000019LL;
    *(void *)(v131 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D29B0LL;
    unint64_t v132 = 345LL;
LABEL_70:
    *(void *)(v131 + 56) = v132;
    swift_willThrow(v130);

    return;
  }

  objc_super v176 = v91;
  uint64_t v99 = v95 + 4;
  v172 = v95;
  swift_bridgeObjectRetain(v95);
  uint64_t v100 = 0LL;
  v193 = _swiftEmptyArrayStorage;
  objc_super v178 = v94;
  v180 = v95 + 4;
  __int128 v101 = &qword_100116000;
  do
  {
    v195 = v100;
    uint64_t v190 = (const IOUSBConfigurationDescriptor *)v99[v100];
    uint64_t v102 = sub_10008FC80(v190);
    BOOL v103 = sub_100090450((uint64_t)v102);
    uint64_t v104 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0((uint64_t)v102);
    uint64_t v105 = v102;
    uint64_t v106 = v104;
    swift_bridgeObjectRelease(v105);
    objc_super v107 = v106[2];
    if (v107)
    {
      v200 = _swiftEmptyArrayStorage;
      uint64_t v108 = v106;
      sub_1000709C4(0, v107, 0);
      uint64_t v109 = _swiftEmptyArrayStorage;
      uint64_t v187 = v108;
      uint64_t v110 = v108 + 5;
      do
      {
        uint64_t v111 = *(v110 - 1);
        char v112 = *v110;
        swift_bridgeObjectRetain_n(v111, 2LL);
        swift_bridgeObjectRetain_n(v112, 2LL);
        swift_bridgeObjectRetain(v103);
        sub_1000600F0(v111, v112, v103, (uint64_t)v210);
        swift_bridgeObjectRelease(v112);
        swift_bridgeObjectRelease(v111);
        v200 = v109;
        uint64_t v114 = v109[2];
        char v113 = v109[3];
        if (v114 >= v113 >> 1)
        {
          sub_1000709C4(v113 > 1, v114 + 1, 1);
          uint64_t v109 = v200;
        }

        v109[2] = v114 + 1;
        uint64_t v115 = &v109[21 * v114];
        uint64_t v116 = v210[0];
        unint64_t v117 = v210[2];
        *((_OWORD *)v115 + swift_unknownObjectWeakDestroy(v0 + 3) = v210[1];
        *((_OWORD *)v115 + 4) = v117;
        *((_OWORD *)v115 + swift_unknownObjectWeakDestroy(v0 + 2) = v116;
        Swift::String v118 = v210[3];
        uint64_t v119 = v210[4];
        uint64_t v120 = v210[6];
        *((_OWORD *)v115 + 7) = v210[5];
        *((_OWORD *)v115 + _Block_object_dispose((const void *)(v30 - 136), 8) = v120;
        *((_OWORD *)v115 + 5) = v118;
        *((_OWORD *)v115 + 6) = v119;
        uint64_t v121 = v210[7];
        int v122 = v210[8];
        uint64_t v123 = v210[9];
        v115[24] = v211;
        *((_OWORD *)v115 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v122;
        *((_OWORD *)v115 + 11) = v123;
        *((_OWORD *)v115 + 9) = v121;
        v110 += 2;
        --v107;
      }

      while (v107);
      swift_bridgeObjectRelease(v187);
      swift_bridgeObjectRelease(v103);
      uint64_t v124 = v193;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v193);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v124 = sub_10005041C(0LL, v193[2] + 1LL, 1, v193);
      }
      id v97 = v215;
      uint64_t v99 = v180;
      uint64_t v127 = v124[2];
      char v126 = v124[3];
      v193 = v124;
      uint64_t v98 = v198;
      __int128 v101 = &qword_100116000;
      if (v127 >= v126 >> 1)
      {
        uint64_t v99 = v180;
        v193 = sub_10005041C((void *)(v126 > 1), v127 + 1, 1, v124);
      }

      v193[2] = v127 + 1;
      uint64_t v128 = &v193[2 * v127];
      v128[4] = v190;
      v128[5] = v109;
      uint64_t v94 = v178;
    }

    else
    {
      swift_bridgeObjectRelease(v103);
      swift_bridgeObjectRelease(v106);
      id v97 = v215;
      uint64_t v99 = v180;
    }

    uint64_t v100 = v195 + 1;
    uint64_t v96 = v183;
  }

  while (v195 + 1 != v189);
  swift_bridgeObjectRelease_n(v172, 2LL);
  if (!v193[2])
  {
    swift_bridgeObjectRelease(v176);
    sub_1000B9944(&v203);
    swift_bridgeObjectRelease(v98);

    swift_bridgeObjectRelease(v193);
    __int128 v139 = sub_10000AE14();
    uint64_t v130 = swift_allocError(&type metadata for AUAError, v139, 0LL, 0LL);
    *(_BYTE *)int v131 = 67;
    *(void *)(v131 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v131 + 16) = 0xE000000000000000LL;
    *(void *)(v131 + 24) = 0xD000000000000051LL;
    *(void *)(v131 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D2E70LL;
    *(void *)(v131 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000019LL;
    *(void *)(v131 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D29B0LL;
    unint64_t v132 = 352LL;
    goto LABEL_70;
  }

  objc_super v133 = &v92[v101[198]];
  swift_beginAccess(v133, &v200, 1LL, 0LL);
  uint64_t v134 = *(void *)v133;
  *(void *)objc_super v133 = v193;
  swift_bridgeObjectRetain(v193);
  swift_bridgeObjectRelease(v134);
  uint64_t v135 = v193[2];
  if (!v135)
  {
LABEL_76:
    swift_bridgeObjectRelease(v176);
    swift_bridgeObjectRelease(v193);

    sub_1000B9944(&v203);
    swift_bridgeObjectRelease(v198);
    return;
  }

  __int128 v136 = OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum;
  __int128 v137 = v193 + 5;
  while (1)
  {
    uint64_t v138 = *(v137 - 1);
    v137 += 2;
    if (!--v135) {
      goto LABEL_76;
    }
  }

  __int128 v140 = *v137;
  swift_bridgeObjectRetain(*v137);
  swift_bridgeObjectRelease(v193);
  v196 = v140;
  if (*(void *)(v140 + 16))
  {
    __int128 v141 = *(unsigned __int8 *)(*(void *)(v140 + 32) + 8LL);
    if (!v141 || (v182 & 1) != 0)
    {
      if ((_DWORD)v177)
      {
        char v145 = v185;
        swift_bridgeObjectRetain(v185);
        sub_1000B9944(&v203);
        uint64_t v146 = v182;
        goto LABEL_95;
      }

      sub_1000B9944(&v203);
      uint64_t v147 = *(void *)(v196 + 16);
      if (v147 <= 1) {
        uint64_t v46 = 0xD000000000000018LL;
      }
      else {
        uint64_t v46 = 0xD000000000000027LL;
      }
      if (v147 <= 1) {
        char v145 = 0x80000001000D2E30LL;
      }
      else {
        char v145 = 0x80000001000D2F00LL;
      }
      goto LABEL_94;
    }

    sub_1000B9944(&v203);
    __int128 v142 = sub_1000B36EC(v141);
    if (v143)
    {
      uint64_t v146 = v182;
      uint64_t v46 = v142;
      char v145 = v143;
      goto LABEL_95;
    }

    uint64_t v46 = 0xD000000000000015LL;
    uint64_t v144 = "Unknown Audio Control";
  }

  else
  {
    sub_1000B9944(&v203);
    uint64_t v46 = 0xD000000000000018LL;
    uint64_t v144 = "Unknown USB Audio Device";
  }

  char v145 = (unint64_t)(v144 - 32) | 0x8000000000000000LL;
LABEL_94:
  uint64_t v146 = v182;
LABEL_95:
  __int16 v148 = v92;
  uint64_t v149 = String._bridgeToObjectiveC()();
  [v148 setBoxName:v149];

  v199[0] = v46;
  v199[1] = v145;
  uint64_t v150 = v148;
  v151._countAndFlagsBits = 58LL;
  v151._object = (void *)0xE100000000000000LL;
  String.append(_:)(v151);
  v152._countAndFlagsBits = v171;
  v152._object = v176;
  String.append(_:)(v152);
  swift_bridgeObjectRelease(v176);
  __int16 v153 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v145);
  [v150 setModelName:v153];

  if ((v146 & 1) != 0 || (sub_10008FC14(v174 | (unsigned __int16)((v173 == 0LL) << 8), v138, v196) & 1) == 0)
  {

    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v198);

    char v157 = v215;
LABEL_100:

    return;
  }

  if (*(void *)&v92[v136] != *(unsigned __int8 *)(v138 + 5))
  {
    uint64_t v158 = sub_10000AE14();
    unint64_t v159 = swift_allocError(&type metadata for AUAError, v158, 0LL, 0LL);
    *(_BYTE *)unint64_t v160 = 52;
    *(void *)(v160 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v160 + 16) = 0xE000000000000000LL;
    *(void *)(v160 + 24) = 0xD000000000000023LL;
    *(void *)(v160 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D2ED0LL;
    *(void *)(v160 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001DLL;
    *(void *)(v160 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D1AD0LL;
    *(void *)(v160 + 56) = 176LL;
    swift_willThrow(v159);

    swift_bridgeObjectRelease(v196);
    unint64_t v161 = v202;

    swift_bridgeObjectRelease(v161);
    return;
  }

  __int16 v154 = v150;
  swift_bridgeObjectRetain(v196);
  __int16 v156 = v155;
  objc_super v162 = sub_1000B898C(v155, v154, v181 & 1);
  swift_bridgeObjectRelease(v156);

  uint64_t active = type metadata accessor for ActiveConfiguration();
  id v164 = (void *)swift_allocObject(active, 40LL, 7LL);
  v164[2] = v138;
  v164[3] = v156;
  v164[4] = v162;
  uint64_t v165 = &v154[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig];
  swift_beginAccess(&v154[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig], v199, 1LL, 0LL);
  uint64_t v166 = *(void *)v165;
  *(void *)uint64_t v165 = v164;
  swift_release(v166);
  if (!*(void *)v165)
  {

    swift_bridgeObjectRelease(v198);
    uint64_t v168 = sub_10000AE14();
    v169 = swift_allocError(&type metadata for AUAError, v168, 0LL, 0LL);
    *(_BYTE *)v170 = 68;
    *(void *)(v170 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v170 + 16) = 0xE000000000000000LL;
    *(void *)(v170 + 24) = 0xD000000000000051LL;
    *(void *)(v170 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D2E70LL;
    *(void *)(v170 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000019LL;
    *(void *)(v170 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D29B0LL;
    *(void *)(v170 + 56) = 391LL;
    swift_willThrow(v169);

    return;
  }

  sub_1000B5BAC();
  uint64_t v167 = *(void *)v165;
  if (*(void *)v165)
  {
    swift_retain(*(void *)v165);
    swift_bridgeObjectRelease(v198);
    sub_100019EC0();

    swift_release(v167);
    char v157 = v183;
    goto LABEL_100;
  }

void sub_10002F960( unsigned __int16 a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (**a4)(void, void)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v40 = 0LL;
  uint64_t v11 = a4[2](a2, a4);
  if (!v11)
  {
    unint64_t v19 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 51;
    *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v21 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD00000000000001DLL;
    *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEED0LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v21 + 56) = 781LL;
    swift_willThrow(v20);
    return;
  }

  uint64_t v12 = (void *)v11;
  uint64_t v39 = *(void *)(a3 - 8);
  id v13 = [objc_allocWithZone(NSMutableData) initWithLength:*(void *)(v39 + 64)];
  if (!v13)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 1;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD00000000000001DLL;
    *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEED0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v24 + 56) = 783LL;
    swift_willThrow(v23);

    return;
  }

  uint64_t v14 = v13;
  uint64_t v38 = a5;
  unsigned __int8 v15 = a4[15](a2, a4);
  uint64_t v16 = a4[3](a2, a4);
  unsigned __int8 v17 = *(_BYTE *)(*(void *)(v16 + 32) + 2LL);
  swift_release(v16);
  id v18 = v14;
  sub_1000B6820(v15, 1, 1, a1, 0LL, v17, v14, (uint64_t)&v40);
  if (v5)
  {

    return;
  }

  uint64_t v25 = v40;
  id v26 = v18;
  uint64_t v27 = NSData.startIndex.getter(v26);
  uint64_t v28 = NSData.endIndex.getter();
  uint64_t v29 = NSData.startIndex.getter(v28);
  uint64_t v30 = NSData.endIndex.getter();
  if (v27 < v29 || v30 < v27)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  uint64_t v32 = NSData.startIndex.getter(v30);
  uint64_t v33 = NSData.endIndex.getter();

  if (v28 < v32 || v33 < v28) {
    goto LABEL_18;
  }
  if (__OFSUB__(v28, v27)) {
    goto LABEL_19;
  }
  if (v25 == v28 - v27)
  {
    id v34 = v26;
    (*(void (**)(uint64_t, id, uint64_t))(v39 + 16))(v38, [v34 bytes], a3);

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v38, 0LL, 1LL, a3);
  }

  else
  {
    unint64_t v35 = sub_10000AE14();
    uint64_t v36 = swift_allocError(&type metadata for AUAError, v35, 0LL, 0LL);
    *(_BYTE *)uint64_t v37 = 28;
    *(void *)(v37 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v37 + 16) = 0xE000000000000000LL;
    *(void *)(v37 + 24) = 0xD00000000000001DLL;
    *(void *)(v37 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEED0LL;
    *(void *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v37 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEB20LL;
    *(void *)(v37 + 56) = 793LL;
    swift_willThrow(v36);
  }

void *sub_10002FCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = v9;
  id v11 = [v9 audioDevices];

  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = sub_10000AF08(0LL, &qword_100114590, &OBJC_CLASS___ASDAudioDevice_ptr);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  uint64_t v14 = sub_100030168(v13, a1, a2, a3);
  swift_bridgeObjectRelease(v13);
  return v14;
}

void sub_10002FDCC(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v47 = a2;
  id v6 = [*a1 controls];
  if (!v6)
  {
LABEL_34:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = sub_10000AF08(0LL, &qword_100113B20, &OBJC_CLASS___ASDControl_ptr);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  uint64_t v32 = a5;
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0) {
      uint64_t v31 = v9;
    }
    else {
      uint64_t v31 = v9 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v31);
    if (v10) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_4:
      if (v10 >= 1)
      {
        uint64_t v11 = 0LL;
        unint64_t v12 = v9 & 0xC000000000000001LL;
        unint64_t v13 = _swiftEmptyArrayStorage;
        uint64_t v35 = v9;
        while (1)
        {
          if (v12) {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
          }
          else {
            id v14 = *(id *)(v9 + 8 * v11 + 32);
          }
          v36[0] = v14;
          id v15 = v14;
          uint64_t v16 = sub_100008E00(&qword_100114598);
          if (!swift_dynamicCast(&v38, v36, v8, v16, 6LL))
          {
            uint64_t v40 = 0LL;
            __int128 v38 = 0u;
            __int128 v39 = 0u;
            sub_1000178B0((uint64_t)&v38, &qword_100114048);
            goto LABEL_21;
          }

          uint64_t v17 = v10;
          unint64_t v18 = v12;
          uint64_t v19 = v8;
          sub_10000AF84(&v38, (uint64_t)&v44);
          uint64_t v21 = v45;
          uint64_t v20 = v46;
          sub_1000178EC(&v44, v45);
          uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v20);
          sub_100017910((uint64_t)&v44, (uint64_t)&v38);
          if (v22 == v47)
          {
            uint64_t v23 = *((void *)&v39 + 1);
            uint64_t v24 = v40;
            sub_1000178EC(&v38, *((uint64_t *)&v39 + 1));
            uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
            sub_100017A40(&v38);
            sub_100017910((uint64_t)&v44, (uint64_t)v36);
            if (v25 == a3)
            {
              uint64_t v26 = v37;
              uint64_t v27 = sub_1000178EC(v36, v37);
              uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
              sub_100017A40(v36);
              uint64_t v8 = v19;
              if (DynamicType == a4)
              {
                sub_100017910((uint64_t)&v44, (uint64_t)&v41);
                sub_100017A40(&v44);

                unint64_t v12 = v18;
                uint64_t v10 = v17;
                uint64_t v9 = v35;
                if (*((void *)&v42 + 1)) {
                  goto LABEL_22;
                }
                goto LABEL_6;
              }

              goto LABEL_20;
            }
          }

          else
          {
            sub_100017A40(&v38);
            sub_100017910((uint64_t)&v44, (uint64_t)v36);
          }

          sub_100017A40(v36);
          uint64_t v8 = v19;
LABEL_20:
          sub_100017A40(&v44);
          unint64_t v12 = v18;
          uint64_t v10 = v17;
          uint64_t v9 = v35;
LABEL_21:
          __int128 v41 = 0u;
          __int128 v42 = 0u;
          uint64_t v43 = 0LL;

          if (*((void *)&v42 + 1))
          {
LABEL_22:
            sub_10000AF84(&v41, (uint64_t)&v44);
            sub_10000AF84(&v44, (uint64_t)&v41);
            if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
              unint64_t v13 = sub_10004F874(0LL, v13[2] + 1LL, 1, v13);
            }
            unint64_t v30 = v13[2];
            unint64_t v29 = v13[3];
            if (v30 >= v29 >> 1) {
              unint64_t v13 = sub_10004F874((void *)(v29 > 1), v30 + 1, 1, v13);
            }
            v13[2] = v30 + 1;
            sub_10000AF84(&v41, (uint64_t)&v13[5 * v30 + 4]);
            goto LABEL_7;
          }

void *sub_100030168(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_36;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    unint64_t v26 = v6 & 0xC000000000000001LL;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = 4LL;
    uint64_t v25 = v6;
    while (1)
    {
      id v10 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6) : *(id *)(v6 + 8 * v9);
      uint64_t v6 = (uint64_t)v10;
      uint64_t v11 = v9 - 3;
      if (__OFADD__(v9 - 4, 1LL)) {
        break;
      }
      id v31 = v10;
      sub_10002FDCC(&v31, a2, a3, a4, &v30);
      if (v5)
      {
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v25);

        return v8;
      }

      uint64_t v12 = v30;
      uint64_t v6 = *(void *)(v30 + 16);
      int64_t v13 = v8[2];
      int64_t v14 = v13 + v6;
      if (__OFADD__(v13, v6)) {
        goto LABEL_32;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v14 <= v8[3] >> 1)
      {
        if (*(void *)(v12 + 16)) {
          goto LABEL_20;
        }
      }

      else
      {
        if (v13 <= v14) {
          int64_t v16 = v13 + v6;
        }
        else {
          int64_t v16 = v13;
        }
        uint64_t v8 = sub_10004F874((void *)isUniquelyReferenced_nonNull_native, v16, 1, v8);
        if (*(void *)(v12 + 16))
        {
LABEL_20:
          uint64_t v17 = v8[2];
          if ((v8[3] >> 1) - v17 < v6) {
            goto LABEL_34;
          }
          unint64_t v18 = (unint64_t)&v8[5 * v17 + 4];
          if (v12 + 32 < v18 + 40 * v6 && v18 < v12 + 32 + 40 * v6)
          {
            uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
            __break(1u);
            return result;
          }

          sub_100008E00(&qword_100114598);
          swift_arrayInitWithCopy(v18);
          if (v6)
          {
            uint64_t v20 = v8[2];
            BOOL v21 = __OFADD__(v20, v6);
            uint64_t v22 = v20 + v6;
            if (v21) {
              goto LABEL_35;
            }
            v8[2] = v22;
          }

          goto LABEL_5;
        }
      }

      if (v6) {
        goto LABEL_33;
      }
LABEL_5:
      swift_bridgeObjectRelease(v12);
      ++v9;
      uint64_t v6 = v25;
      if (v11 == v7)
      {
        swift_bridgeObjectRelease(v25);
        return v8;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v6 < 0) {
      uint64_t v23 = v6;
    }
    else {
      uint64_t v23 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v23);
  }

  swift_bridgeObjectRelease(v6);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000303F0()
{
  return 7LL;
}

uint64_t sub_1000303F8()
{
  return 16LL;
}

uint64_t sub_100030400( int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, void))
{
  return a7(a1 & 0xFFFFFF, a2, a3 & 1) & 0x1FF;
}

uint64_t sub_10003042C(uint64_t a1)
{
  return v2 & 1;
}

void (*sub_100030450(uint64_t **a1, unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_10003057C(v6, a2, a3);
  return sub_1000304A4;
}

void (*sub_1000304A8(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100030638(v6, a2, a3);
  return sub_1000304A4;
}

void (*sub_1000304FC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000306A4(v6, a2, a3);
  return sub_1000304A4;
}

void sub_100030550(void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t *sub_10003057C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
LABEL_5:
    uint64_t *v3 = v4;
    return (uint64_t *)sub_1000305E8;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000305E8(void *a1)
{
  return swift_release(*a1);
}

uint64_t sub_1000305F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100114528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_100030638(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100030B94;
  }

  __break(1u);
  return result;
}

void (*sub_1000306A4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100030710;
  }

  __break(1u);
  return result;
}

void sub_100030710(id *a1)
{
}

void *sub_100030718(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = *(void *)(a2 + 72);
  uint64_t v5 = (void *)(swift_bridgeObjectRetain(a1) + 48);
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    __int128 v8 = *((_OWORD *)v5 - 1);
    uint64_t v9 = *(v5 - 1);
    if (*(void *)(v9 + 72) == v4 && *(void *)(v8 + 136) != 257LL)
    {
      __int128 v16 = *((_OWORD *)v5 - 1);
      uint64_t v10 = *v5;
      swift_retain(v8);
      swift_retain(v9);
      swift_bridgeObjectRetain(v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_10004F1C4(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v12 = v6[2];
      unint64_t v11 = v6[3];
      __int128 v13 = v16;
      if (v12 >= v11 >> 1)
      {
        int64_t v14 = sub_10004F1C4((void *)(v11 > 1), v12 + 1, 1, v6);
        __int128 v13 = v16;
        uint64_t v6 = v14;
      }

      v6[2] = v12 + 1;
      uint64_t v7 = &v6[3 * v12];
      *((_OWORD *)v7 + swift_unknownObjectWeakDestroy(v0 + 2) = v13;
      v7[6] = v10;
    }

    v5 += 3;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(a1);
  return v6;
}

void *sub_100030860(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[5];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[13];
  uint64_t v12 = a1[12];
  uint64_t v10 = a1[14];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100030908(v14, v13, v4, v5, v6, v7, v8, v12, v9, v10);
  return a1;
}

uint64_t sub_100030908( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a8 != 1)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a9);
  }

  return result;
}

void *sub_100030944(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[7];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[5];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[13];
  uint64_t v12 = a1[12];
  uint64_t v10 = a1[14];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100019E58(v14, v13, v4, v5, v6, v7, v8, v12, v9, v10);
  return a1;
}

uint64_t sub_1000309EC@<X0>(__int16 *a1@<X0>, uint64_t *a2@<X1>, float *a3@<X8>)
{
  return sub_10002DFE4(a1, a2, a3);
}

unint64_t sub_100030A1C()
{
  unint64_t result = qword_100114548;
  if (!qword_100114548)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_100114548);
  }

  return result;
}

uint64_t sub_100030A60(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_100030A88(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100030AC4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100030B00(uint64_t a1)
{
  return a1;
}

uint64_t sub_100030B34(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 40LL, 7LL);
}

uint64_t sub_100030B58(uint64_t a1, uint64_t a2)
{
  return sub_10002D050(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t *sub_100030B7C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10002F83C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_100030B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 192);
  uint64_t v4 = *(void *)(v3 + 168);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = v4 + 32;
    swift_bridgeObjectRetain(*(void *)(v3 + 168));
    while (1)
    {
      sub_100017910(v7, (uint64_t)&v21);
      sub_100017910((uint64_t)&v21, (uint64_t)v18);
      uint64_t v8 = sub_100008E00(&qword_100113B28);
      uint64_t v9 = sub_100008E00(&qword_100114530);
      if ((swift_dynamicCast(&v23, v18, v8, v9, 6LL) & 1) == 0) {
        break;
      }
      if (!*((void *)&v24 + 1)) {
        goto LABEL_4;
      }
      uint64_t result = sub_10000AF40((uint64_t)&v23, (uint64_t)v18, &qword_100114528);
      uint64_t v11 = v19;
      if (!v19)
      {
        __break(1u);
        return result;
      }

      uint64_t v12 = v20;
      sub_1000178EC(v18, v19);
      unsigned __int8 v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
      int v14 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 2LL);
      sub_100017A40(v18);
      sub_1000178B0((uint64_t)&v23, &qword_100114528);
      if (v14 == v13)
      {
        sub_10000AF84(&v21, (uint64_t)&v23);
        goto LABEL_13;
      }

uint64_t sub_100030D98(uint64_t result, _WORD *a2)
{
  *(_WORD *)uint64_t result = 521;
  if (*a2)
  {
    *(_WORD *)(result + swift_unknownObjectWeakDestroy(v0 + 2) = *a2 - 1;
    *(_BYTE *)(result + 4) = 3;
    *(_DWORD *)(result + 5) = 0;
  }

  else
  {
    char v2 = 2;
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v2,  3451LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for ADC4Function()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore12ADC4Function);
}

uint64_t sub_100030E3C()
{
  return 64LL;
}

uint64_t sub_100030E44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 224;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_10000AF40(v3, a1, &qword_100113CC0);
}

uint64_t sub_100030E94()
{
  unint64_t v0 = sub_10000AE14();
  uint64_t v1 = swift_allocError(&type metadata for AUAError, v0, 0LL, 0LL);
  *(_BYTE *)uint64_t v2 = 2;
  *(void *)(v2 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v2 + 16) = 0xE000000000000000LL;
  *(void *)(v2 + 24) = 0xD000000000000029LL;
  *(void *)(v2 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDD90LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
  *(void *)(v2 + 56) = 386LL;
  return swift_willThrow(v1);
}

uint64_t sub_100030F24(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100030FEC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t))sub_100031CA4);
}

uint64_t sub_100030F40()
{
  unint64_t v0 = sub_10000AE14();
  uint64_t v1 = swift_allocError(&type metadata for AUAError, v0, 0LL, 0LL);
  *(_BYTE *)uint64_t v2 = 1;
  *(void *)(v2 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v2 + 16) = 0xE000000000000000LL;
  *(void *)(v2 + 24) = 0xD000000000000021LL;
  *(void *)(v2 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDDE0LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
  *(void *)(v2 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
  *(void *)(v2 + 56) = 119LL;
  return swift_willThrow(v1);
}

uint64_t sub_100030FD0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100030FEC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t))sub_100032590);
}

uint64_t sub_100030FEC( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t))
{
  return a7(a1 & 0xFFFFFF, a4) & 0x1FF;
}

void sub_10003101C(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v3 = (void *)a1;
    sub_10007BFC4(*(void *)(a1 + 32), *(_WORD *)(a1 + 40));
    if (v2) {
      return;
    }
    if (v7[2] != a2)
    {
      unint64_t v19 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 75;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD000000000000030LL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v22 = 285LL;
      goto LABEL_70;
    }

    if (!v7[3])
    {
      unint64_t v23 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 74;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD000000000000030LL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v22 = 286LL;
      goto LABEL_70;
    }

    if (v7[5] != 1)
    {
      unint64_t v24 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 72;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD000000000000030LL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v22 = 287LL;
      goto LABEL_70;
    }

    if (v7[6] != 2)
    {
      unint64_t v25 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 73;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD000000000000030LL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v22 = 288LL;
      goto LABEL_70;
    }

    if (v7[7] != 64)
    {
      unint64_t v26 = sub_10000AE14();
      uint64_t v20 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 76;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD000000000000030LL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v22 = 289LL;
      goto LABEL_70;
    }

    uint64_t v46 = v7[4];
    uint64_t v56 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v3);
    uint64_t v4 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v9 = (char *)v3 + 41;
    BOOL v48 = _swiftEmptyArrayStorage;
LABEL_9:
    uint64_t v49 = 0LL;
    id v50 = 0LL;
    uint64_t v47 = v4;
    if (v8 <= v5) {
      unint64_t v10 = v5;
    }
    else {
      unint64_t v10 = v8;
    }
    uint64_t v51 = -(uint64_t)v10;
    uint64_t v11 = &v9[16 * v8++];
    while (1)
    {
      if (v51 + v8 == 1) {
        goto LABEL_73;
      }
      int v12 = *v11;
      int v13 = *(v11 - 1);
      uint64_t v4 = (void *)(v13 | (v12 << 8));
      uint64_t v52 = *(_BYTE **)(v11 - 9);
      if ((_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0( (uint64_t)v52,  (unsigned __int16)v13 | (unsigned __int16)((_WORD)v12 << 8)) & 1) == 0)
      {
        if (v12 <= 19)
        {
          if (v12 == 19)
          {
            uint64_t v49 = v52;
            goto LABEL_15;
          }

          if (v12 == 17)
          {
            if (v47)
            {
              uint64_t v15 = _swiftEmptyArrayStorage;
              if (!_swiftEmptyArrayStorage[2])
              {
                swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
                uint64_t v15 = 0LL;
              }

              if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0) {
                BOOL v48 = sub_10004F3F4(0LL, v48[2] + 1LL, 1, v48);
              }
              unint64_t v17 = v48[2];
              unint64_t v16 = v48[3];
              if (v17 >= v16 >> 1) {
                BOOL v48 = sub_10004F3F4((void *)(v16 > 1), v17 + 1, 1, v48);
              }
              v48[2] = v17 + 1;
              unint64_t v18 = &v48[10 * v17];
              v18[4] = v47;
              v18[5] = v49;
              v18[6] = v50;
              *((_WORD *)v18 + 2_Block_object_dispose((const void *)(v30 - 136), 8) = 256;
              *((_BYTE *)v18 + 64) = 0;
              v18[9] = 0LL;
              *((_WORD *)v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
              v18[12] = 0LL;
              v18[13] = 0LL;
              v18[11] = v15;
            }

            else
            {
              swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
            }

            uint64_t v4 = v52;
            uint64_t v9 = (char *)v3 + 41;
            if (v8 != v5) {
              goto LABEL_9;
            }
            goto LABEL_75;
          }
        }

        else
        {
          if (v12 == 20)
          {
            id v50 = v52;
            goto LABEL_15;
          }

          if (v12 == 76)
          {
            sub_1000BEC00(v52, (__int16)v4);
            swift_bridgeObjectRelease(v14);
            goto LABEL_15;
          }
        }

        sub_1000516F0(&v55, 33LL);
      }

void sub_100031828( uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  uint64_t v19 = 0LL;
  id v15 = [objc_allocWithZone(NSMutableData) initWithLength:12];
  if (!v15) {
    __break(1u);
  }
  unint64_t v16 = v15;
  id v17 = v15;
  unint64_t v18 = [v17 mutableBytes];
  *unint64_t v18 = a3;
  v18[1] = a4;
  v18[2] = a5;
  void v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  sub_1000B6284(2u, 0, 1, 0, 0LL, 0LL, *(_BYTE *)(*(void *)a2 + 2LL), v16, (uint64_t)&v19);
}

void sub_10003194C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0LL;
  sub_100031828(a2, a3, a1, 0, 6, 0, 0, 0);
  if (!v3)
  {
    id v7 = [objc_allocWithZone(NSMutableData) initWithLength:10];
    uint64_t v8 = *(void *)a3;
    sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, *(_BYTE *)(*(void *)a3 + 2LL), v7, (uint64_t)&v20);
    if (v20 == 10)
    {
      if (!v7)
      {
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }

      id v7 = v7;
      uint64_t v9 = (unsigned __int16 *)[v7 mutableBytes];
      if (v9[3] == a1)
      {
        unint64_t v10 = v9;
        uint64_t v19 = v7;
        id v7 = [objc_allocWithZone(NSMutableData) initWithLength:*v9];
        sub_100031828(a2, a3, a1, 0, 6, 0, 0, 0);
        sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, *(_BYTE *)(v8 + 2), v7, (uint64_t)&v20);
        if (v20 == *v10)
        {
          if (v7)
          {

            return;
          }

          goto LABEL_15;
        }

        unint64_t v16 = sub_10000AE14();
        uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
        *(_BYTE *)uint64_t v18 = 28;
        *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v18 + 16) = 0xE000000000000000LL;
        *(void *)(v18 + 24) = 0xD00000000000002FLL;
        *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF040LL;
        *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
        *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
        *(void *)(v18 + 56) = 216LL;
        swift_willThrow(v17);

        goto LABEL_12;
      }

      unint64_t v15 = sub_10000AE14();
      uint64_t v12 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
      *(_BYTE *)uint64_t v13 = 28;
      *(void *)(v13 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v13 + 16) = 0xE000000000000000LL;
      *(void *)(v13 + 24) = 0xD00000000000002FLL;
      *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF040LL;
      *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v14 = 203LL;
    }

    else
    {
      unint64_t v11 = sub_10000AE14();
      uint64_t v12 = swift_allocError(&type metadata for AUAError, v11, 0LL, 0LL);
      *(_BYTE *)uint64_t v13 = 28;
      *(void *)(v13 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v13 + 16) = 0xE000000000000000LL;
      *(void *)(v13 + 24) = 0xD00000000000002FLL;
      *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF040LL;
      *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
      uint64_t v14 = 199LL;
    }

    *(void *)(v13 + 56) = v14;
    swift_willThrow(v12);
LABEL_12:
  }

void sub_100031CA4(int a1, void *a2)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  unsigned __int8 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void v59[3];
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[7];
  uint64_t v63;
  uint64_t v58 = 0LL;
  unsigned int v5 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v6 = USBDescriptorControl.pbLayout()();
  sub_100079084(v6);
  if (v3) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
  if (!Strong)
  {
    unint64_t v25 = sub_10000AE14();
    unint64_t v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
    *(_BYTE *)uint64_t v27 = 7;
    *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v27 + 16) = 0xE000000000000000LL;
    *(void *)(v27 + 24) = 0xD000000000000028LL;
    *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB40LL;
    *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
    *(void *)(v27 + 56) = 45LL;
    swift_willThrow(v26);

    return;
  }

  unint64_t v57 = (void *)Strong;
  uint64_t v10 = *(void *)(v2 + 192);
  __int128 v12 = *(_OWORD *)(v10 + 32);
  __int128 v11 = *(_OWORD *)(v10 + 48);
  __int128 v13 = *(_OWORD *)(v10 + 80);
  v62[2] = *(_OWORD *)(v10 + 64);
  void v62[3] = v13;
  __int128 v15 = *(_OWORD *)(v10 + 96);
  __int128 v14 = *(_OWORD *)(v10 + 112);
  uint64_t v63 = *(void *)(v10 + 144);
  __int128 v16 = *(_OWORD *)(v10 + 128);
  v62[5] = v14;
  v62[6] = v16;
  v62[4] = v15;
  v62[0] = v12;
  v62[1] = v11;
  uint64_t v18 = a2[3];
  uint64_t v17 = a2[4];
  sub_1000178EC(a2, v18);
  uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  sub_100030860(v62);
  v19(v59, v18, v17);
  uint64_t v20 = v60;
  uint64_t v21 = v61;
  sub_1000178EC(v59, v60);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  if (v22 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    return;
  }

  unint64_t v23 = v22;
  sub_100017A40(v59);
  unint64_t v24 = sub_10007BFBC(v5);
  sub_100031828((uint64_t)v57, (uint64_t)v62, v23, v24, 1, 0, 0, 0);
  sub_100030944(v62);
  uint64_t v28 = *(void *)(v10 + 32);
  unint64_t v29 = *(void *)(v10 + 40);
  unint64_t v31 = *(void *)(v10 + 56);
  unint64_t v30 = *(void *)(v10 + 64);
  char v55 = *(void *)(v10 + 80);
  uint64_t v56 = *(void *)(v10 + 72);
  char v54 = *(void *)(v10 + 88);
  unint64_t v32 = *(void *)(v10 + 112);
  uint64_t v49 = *(void *)(v10 + 104);
  id v50 = *(void *)(v10 + 96);
  uint64_t v33 = *(void *)(v10 + 120);
  id v34 = *(void *)(v10 + 128);
  uint64_t v36 = *(void *)(v10 + 136);
  BOOL v35 = *(void *)(v10 + 144);
  uint64_t v51 = *(_BYTE *)(v28 + 2);
  uint64_t v52 = v30;
  swift_bridgeObjectRetain(v30);
  char v53 = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v31);
  sub_100030908(v56, v55, v54, v50, v49, v32, v33, v34, v36, v35);
  uint64_t v37 = v8;
  sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, v51, v8, (uint64_t)&v58);
  swift_bridgeObjectRelease(v52);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(v53);

  sub_100019E58(v56, v55, v54, v50, v49, v32, v33, v34, v36, v35);
  int v38 = v58;
  __int128 v39 = v37;
  uint64_t v40 = NSData.startIndex.getter(v39);
  uint64_t v41 = NSData.endIndex.getter();
  uint64_t v42 = NSData.startIndex.getter(v41);
  int v43 = NSData.endIndex.getter();
  if (v40 < v42 || v43 < v40)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  __int128 v44 = NSData.startIndex.getter(v43);
  unint64_t v45 = NSData.endIndex.getter();

  if (v41 < v44 || v45 < v41) {
    goto LABEL_16;
  }
  if (__OFSUB__(v41, v40)) {
    goto LABEL_17;
  }
  if (v38 != v41 - v40)
  {
    uint64_t v46 = sub_10000AE14();
    uint64_t v47 = swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
    *(_BYTE *)BOOL v48 = 28;
    *(void *)(v48 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v48 + 16) = 0xE000000000000000LL;
    *(void *)(v48 + 24) = 0xD000000000000028LL;
    *(void *)(v48 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEB40LL;
    *(void *)(v48 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v48 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
    *(void *)(v48 + 56) = 59LL;
    swift_willThrow(v47);
  }
}

uint64_t sub_100032178(unint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0LL;
  id v9 = [objc_allocWithZone(NSMutableData) initWithLength:1];
  if (a1 >= 0x10000) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  sub_100031828(a3, a4, a1, a2, 4, 0, 0, 0);
  if (v4)
  {
LABEL_7:

    return a3;
  }

  sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, *(_BYTE *)(*(void *)a4 + 2LL), v10, (uint64_t)&v20);
  if (v20 != 1)
  {
    unint64_t v15 = sub_10000AE14();
    uint64_t v16 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
    *(_BYTE *)uint64_t v17 = 28;
    *(void *)(v17 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v17 + 16) = 0xE000000000000000LL;
    *(void *)(v17 + 24) = 0xD000000000000049LL;
    *(void *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEFF0LL;
    *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
    *(void *)(v17 + 56) = 275LL;
    swift_willThrow(v16);
    goto LABEL_7;
  }

  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v14 = v13;

    a3 = Data.subscript.getter(0LL, v12, v14);
    sub_100032E74(v12, v14);

    return a3;
  }

  __break(1u);
LABEL_10:
  LOBYTE(v19) = 2;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v19,  3455LL,  0);
  __break(1u);
  return result;
}

void sub_1000323A0(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (!v3)
  {
    id v6 = v5;
    id v7 = (unsigned __int16 *)[v6 bytes];
    if (v7[3] == a1)
    {
      uint64_t v8 = v7;
      if (v7[2] == 255)
      {
        uint64_t v9 = sub_100076390((_BYTE *)v7 + 10, *v7 - 10LL);
        unint64_t v11 = v10;
        id v12 = [objc_allocWithZone(NSMutableData) initWithLength:9];
        if (v12)
        {
          id v13 = v12;
          id v14 = v12;
          sub_100030D98((uint64_t)[v14 mutableBytes], v8);
          id v15 = v14;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          [v15 appendData:isa];

          id v17 = v15;
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);

          sub_100032E74(v9, v11);
        }

        else
        {
          __break(1u);
        }

        return;
      }

      unint64_t v22 = sub_10000AE14();
      uint64_t v19 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
      *(_BYTE *)uint64_t v20 = 33;
      uint64_t v21 = 233LL;
    }

    else
    {
      unint64_t v18 = sub_10000AE14();
      uint64_t v19 = swift_allocError(&type metadata for AUAError, v18, 0LL, 0LL);
      *(_BYTE *)uint64_t v20 = 28;
      uint64_t v21 = 230LL;
    }

    *(void *)(v20 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v20 + 16) = 0xE000000000000000LL;
    *(void *)(v20 + 24) = 0xD00000000000002CLL;
    *(void *)(v20 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF070LL;
    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v20 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
    *(void *)(v20 + 56) = v21;
    swift_willThrow(v19);
  }

void sub_100032590(int a1, void *a2)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  __int16 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  void (*v91)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void v103[3];
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[7];
  uint64_t v107;
  _OWORD v108[7];
  uint64_t v109;
  uint64_t v102 = 0LL;
  unsigned int v5 = a1 & 0xFFFFFF;
  uint64_t v6 = USBDescriptorControl.pbLayout()();
  __int16 v7 = sub_100079BB8(v6, 1LL);
  if (!v3)
  {
    __int16 v9 = v7;
    unint64_t v10 = v8;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
    if (Strong)
    {
      uint64_t v94 = v9;
      __int128 v101 = Strong;
      uint64_t v12 = *(void *)(v2 + 192);
      __int128 v14 = *(_OWORD *)(v12 + 32);
      __int128 v13 = *(_OWORD *)(v12 + 48);
      __int128 v15 = *(_OWORD *)(v12 + 80);
      v108[2] = *(_OWORD *)(v12 + 64);
      v108[3] = v15;
      __int128 v17 = *(_OWORD *)(v12 + 96);
      __int128 v16 = *(_OWORD *)(v12 + 112);
      uint64_t v109 = *(void *)(v12 + 144);
      __int128 v18 = *(_OWORD *)(v12 + 128);
      v108[5] = v16;
      v108[6] = v18;
      v108[4] = v17;
      v108[0] = v14;
      v108[1] = v13;
      uint64_t v20 = a2[3];
      uint64_t v19 = a2[4];
      sub_1000178EC(a2, v20);
      uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 8);
      uint64_t v99 = v10;
      sub_100030860(v108);
      Swift::String v91 = v21;
      uint64_t v92 = v19;
      id v93 = v20;
      v21(v103, v20, v19);
      unint64_t v22 = v104;
      unint64_t v23 = v105;
      sub_1000178EC(v103, v104);
      unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
      if (v24 >> 16)
      {
LABEL_31:
        LOBYTE(v7_Block_object_dispose((const void *)(v30 - 136), 8) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  v78,  3455LL,  0);
        __break(1u);
        return;
      }

      unint64_t v25 = v24;
      sub_100017A40(v103);
      unint64_t v26 = sub_10007BFBC(v5);
      sub_100031828(v101, (uint64_t)v108, v25, v26, 3, 0, 0, 0);
      id v79 = v26;
      sub_100030944(v108);
      unint64_t v30 = *(void *)(v12 + 40);
      unint64_t v31 = *(void *)(v12 + 56);
      uint64_t v96 = *(void *)(v12 + 80);
      id v97 = *(void *)(v12 + 72);
      uint64_t v80 = *(void *)(v12 + 96);
      int v81 = *(void *)(v12 + 88);
      unint64_t v32 = *(void *)(v12 + 112);
      uint64_t v95 = *(void *)(v12 + 104);
      uint64_t v33 = *(void *)(v12 + 120);
      id v34 = *(void *)(v12 + 128);
      uint64_t v36 = *(void *)(v12 + 136);
      BOOL v35 = *(void *)(v12 + 144);
      id v82 = *(_BYTE *)(*(void *)(v12 + 32) + 2LL);
      id v83 = *(void *)(v12 + 64);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v31);
      uint64_t v88 = v32;
      sub_100030908(v97, v96, v81, v80, v95, v32, v33, v34, v36, v35);
      uint64_t v37 = v99;
      sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, v82, v99, (uint64_t)&v102);
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v30);
      int v38 = sub_100019E58(v97, v96, v81, v80, v95, v88, v33, v34, v36, v35);
      uint64_t v98 = v102;
      __int128 v39 = NSData.startIndex.getter(v38);
      uint64_t v40 = NSData.endIndex.getter();
      uint64_t v41 = NSData.startIndex.getter(v40);
      uint64_t v42 = NSData.endIndex.getter();
      if (v39 < v41 || v42 < v39)
      {
        __break(1u);
      }

      else
      {
        int v43 = NSData.startIndex.getter(v42);
        __int128 v44 = NSData.endIndex.getter();

        if (v40 >= v43 && v44 >= v40)
        {
          unint64_t v45 = (void *)v101;
          if (!__OFSUB__(v40, v39))
          {
            if (v98 != v40 - v39)
            {

              uint64_t v46 = sub_10000AE14();
              uint64_t v47 = swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
              *(_BYTE *)BOOL v48 = 28;
              *(void *)(v48 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
              *(void *)(v48 + 16) = 0xE000000000000000LL;
              *(void *)(v48 + 24) = 0xD00000000000002ALL;
              *(void *)(v48 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
              *(void *)(v48 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
              *(void *)(v48 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
              uint64_t v49 = 82LL;
LABEL_14:
              *(void *)(v48 + 56) = v49;
              swift_willThrow(v47);

              return;
            }

            id v50 = sub_100068138(v94 & 0x1FF, v99);

            if (v50 == 1) {
              goto LABEL_16;
            }
            sub_100079BB8(v6, v50);
            uint64_t v52 = v51;

            char v53 = *(_OWORD *)(v12 + 112);
            v106[4] = *(_OWORD *)(v12 + 96);
            v106[5] = v53;
            v106[6] = *(_OWORD *)(v12 + 128);
            objc_super v107 = *(void *)(v12 + 144);
            char v54 = *(_OWORD *)(v12 + 48);
            v106[0] = *(_OWORD *)(v12 + 32);
            v106[1] = v54;
            char v55 = *(_OWORD *)(v12 + 80);
            v106[2] = *(_OWORD *)(v12 + 64);
            v106[3] = v55;
            uint64_t v37 = v52;
            sub_100030860(v106);
            v91(v103, v93, v92);
            uint64_t v56 = v104;
            unint64_t v57 = v105;
            sub_1000178EC(v103, v104);
            uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 16))(v56, v57);
            if (v58 >> 16) {
              goto LABEL_31;
            }
            uint64_t v59 = v58;
            sub_100017A40(v103);
            sub_100031828(v101, (uint64_t)v106, v59, v79, 3, 0, 0, 0);
            sub_100030944(v106);
            uint64_t v60 = *(void *)(v12 + 32);
            unint64_t v61 = *(void *)(v12 + 40);
            uint64_t v63 = *(void *)(v12 + 56);
            uint64_t v62 = *(void *)(v12 + 64);
            uint64_t v64 = *(void *)(v12 + 80);
            uint64_t v100 = *(void *)(v12 + 72);
            Swift::String v86 = *(void *)(v12 + 96);
            uint64_t v87 = *(void *)(v12 + 88);
            uint64_t v65 = *(void *)(v12 + 120);
            id v84 = *(void *)(v12 + 112);
            id v85 = *(void *)(v12 + 104);
            unint64_t v66 = *(void *)(v12 + 128);
            id v67 = *(void *)(v12 + 136);
            uint64_t v68 = *(void *)(v12 + 144);
            Swift::String v89 = *(_BYTE *)(v60 + 2);
            uint64_t v90 = v62;
            swift_bridgeObjectRetain(v62);
            swift_bridgeObjectRetain(v61);
            swift_bridgeObjectRetain(v63);
            sub_100030908(v100, v64, v87, v86, v85, v84, v65, v66, v67, v68);
            sub_1000B6284(2u, 1, 1, 0, 0LL, 0LL, v89, v37, (uint64_t)&v102);
            swift_bridgeObjectRelease(v90);
            swift_bridgeObjectRelease(v63);
            swift_bridgeObjectRelease(v61);
            id v69 = sub_100019E58(v100, v64, v87, v86, v85, v84, v65, v66, v67, v68);
            uint64_t v70 = v102;
            uint64_t v71 = NSData.startIndex.getter(v69);
            uint64_t v72 = NSData.endIndex.getter();
            uint64_t v73 = NSData.startIndex.getter(v72);
            char v74 = NSData.endIndex.getter();
            if (v71 < v73 || v74 < v71)
            {
              __break(1u);
            }

            else
            {
              id v75 = NSData.startIndex.getter(v74);
              uint64_t v76 = NSData.endIndex.getter();

              if (v72 >= v75 && v76 >= v72)
              {
                unint64_t v45 = (void *)v101;
                if (!__OFSUB__(v72, v71))
                {
                  if (v70 != v72 - v71)
                  {
                    uint64_t v77 = sub_10000AE14();
                    uint64_t v47 = swift_allocError(&type metadata for AUAError, v77, 0LL, 0LL);
                    *(_BYTE *)BOOL v48 = 28;
                    *(void *)(v48 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                    *(void *)(v48 + 16) = 0xE000000000000000LL;
                    *(void *)(v48 + 24) = 0xD00000000000002ALL;
                    *(void *)(v48 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CEAF0LL;
                    *(void *)(v48 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
                    *(void *)(v48 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CEFD0LL;
                    uint64_t v49 = 98LL;
                    goto LABEL_14;
                  }

uint64_t sub_100032E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032E74(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

id sub_100032EB8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  *(void *)&v5[OBJC_IVAR___AUAStreamFormat_altSetting] = a2;
  uint64_t v8 = (unint64_t *)&v5[OBJC_IVAR___AUAStreamFormat_rateRange];
  *uint64_t v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  if (a4 == a3)
  {
    v12.receiver = v5;
    v12.super_class = (Class)type metadata accessor for AUAStreamFormat();
    unsigned int v5 = "initWithAudioStreamBasicDescription:";
    swift_retain(a2);
    id result = objc_msgSendSuper2(&v12, "initWithAudioStreamBasicDescription:", a1);
    if (result)
    {
LABEL_5:
      id v11 = result;
      swift_release(a2);
      return v11;
    }

    __break(1u);
  }

  *(void *)a1 = 0LL;
  uint64_t v14 = 0LL;
  __int128 v15 = *(_OWORD *)(a1 + 8);
  __int128 v16 = *(_OWORD *)(a1 + 24);
  double v17 = (double)a3;
  double v18 = (double)a4;
  unint64_t v10 = (objc_class *)type metadata accessor for AUAStreamFormat();
  v13.receiver = v5;
  v13.super_class = v10;
  swift_retain(a2);
  id result = objc_msgSendSuper2(&v13, "initWithAudioStreamRangedDescription:", &v14);
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

BOOL sub_1000330D0(uint64_t a1)
{
  uint64_t v3 = v29;
  if (v29)
  {
    uint64_t v4 = sub_1000178EC(v28, v29);
    uint64_t v5 = *(void *)(v3 - 8);
    __chkstk_darwin(v4);
    __int16 v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)(v7, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    sub_100017A40(v28);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  __int16 v9 = (objc_class *)type metadata accessor for AUAStreamFormat();
  v27.receiver = v1;
  v27.super_class = v9;
  objc_msgSendSuper2(&v27, "isEqual:", v8);
  swift_unknownObjectRelease(v8, v10);
  sub_10003359C(a1, (uint64_t)v28);
  uint64_t v11 = v29;
  if (v29)
  {
    objc_super v12 = sub_1000178EC(v28, v29);
    uint64_t v13 = *(void *)(v11 - 8);
    __chkstk_darwin(v12);
    __int128 v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v13 + 16))(v15);
    uint64_t v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v11);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
    sub_100017A40(v28);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  v26.receiver = v1;
  v26.super_class = v9;
  unsigned int v17 = objc_msgSendSuper2(&v26, "isEqual:", v16);
  swift_unknownObjectRelease(v16, v18);
  if (v17)
  {
    sub_10003359C(a1, (uint64_t)v28);
    if (v29)
    {
      if ((swift_dynamicCast(&v25, v28, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
      {
        uint64_t v19 = *(void *)&v25[OBJC_IVAR___AUAStreamFormat_altSetting];
        if (v19)
        {
          uint64_t v20 = *(void *)&v1[OBJC_IVAR___AUAStreamFormat_altSetting];
          if (v20)
          {
            int v21 = *(unsigned __int8 *)(*(void *)(v19 + 16) + 3LL);
            int v22 = *(unsigned __int8 *)(*(void *)(v20 + 16) + 3LL);

            return v21 == v22;
          }
        }
      }
    }

    else
    {
      sub_10003355C((uint64_t)v28);
    }
  }

  return 0LL;
}

BOOL sub_100033388(uint64_t a1)
{
  uint64_t v3 = (objc_class *)type metadata accessor for AUAStreamFormat();
  v6.receiver = v1;
  v6.super_class = v3;
  else {
    BOOL v4 = 1;
  }
  return !v4 && swift_dynamicCastClass(a1, v3) != 0;
}

id sub_1000334FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAStreamFormat();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AUAStreamFormat()
{
  return objc_opt_self(&OBJC_CLASS___AUAStreamFormat);
}

uint64_t sub_10003355C(uint64_t a1)
{
  uint64_t v2 = sub_100008E00((uint64_t *)&unk_100115170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10003359C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00((uint64_t *)&unk_100115170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t Endpoint.synchronizationType.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = IOUSBGetEndpointSynchronizationType(*v0);
  if (!(_DWORD)result)
  {
    else {
      return 3LL;
    }
  }

  return result;
}

uint64_t Endpoint.usageType.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = IOUSBGetEndpointUsageType(*v0);
  if (!(_DWORD)result) {
    return v1->wMaxPacketSize < 9u;
  }
  return result;
}

void sub_10003365C()
{
}

Swift::Int sub_100033684()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000336C8(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t LockDelay.units.getter(char a1)
{
  return a1 & 1;
}

uint64_t LockDelay.units.setter(uint64_t result)
{
  *Swift::UInt32 v1 = result & 1;
  return result;
}

uint64_t (*LockDelay.units.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t LockDelay.value.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t LockDelay.value.setter(uint64_t result)
{
  *(void *)(v1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t (*LockDelay.value.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void LockDelay.hash(into:)(uint64_t a1, char a2, Swift::UInt a3)
{
}

uint64_t static LockDelay.__derived_struct_equals(_:_:)(char a1, uint64_t a2, int a3, uint64_t a4)
{
  return (((a1 & 1) == 0) ^ a3) & (a2 == a4);
}

Swift::Int LockDelay.hashValue.getter(char a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000337EC()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100033848()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100033884(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Swift::UInt v3 = *((void *)v1 + 1);
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_1000338DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t Endpoint.epDesc.getter()
{
  return *(void *)v0;
}

uint64_t Endpoint.ssEpDesc.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t MixerUnit.entityID.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Endpoint.address.getter()
{
  return IOUSBGetEndpointAddress(*v0);
}

uint64_t Endpoint.direction.getter()
{
  return IOUSBGetEndpointDirection(*v0);
}

uint64_t Endpoint.transferType.getter()
{
  return IOUSBGetEndpointType(*v0);
}

uint64_t Endpoint.bRefresh.getter()
{
  return *(unsigned __int8 *)(v0 + 24) | (*(unsigned __int8 *)(v0 + 25) << 8);
}

uint64_t Endpoint.bRefresh.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 24) = result;
  *(_BYTE *)(v1 + 25) = BYTE1(result) & 1;
  return result;
}

uint64_t (*Endpoint.bRefresh.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t Endpoint.lockDelay.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t Endpoint.feedbackAddress.getter()
{
  return *(unsigned __int8 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 49) << 8);
}

uint64_t Endpoint.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 72));
  *(void *)(v1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a1;
  return result;
}

uint64_t (*Endpoint.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void Endpoint.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(void *)v2);
  Swift::UInt v4 = *(void *)(v2 + 8);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    Swift::UInt v5 = *(void *)(v2 + 16);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v2 + 25) & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  Hasher._combine(_:)(0);
  Swift::UInt v5 = *(void *)(v2 + 16);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5);
  if ((*(_BYTE *)(v2 + 25) & 1) != 0)
  {
LABEL_4:
    Swift::UInt8 v6 = 0;
    goto LABEL_8;
  }

Swift::Int Endpoint.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100033C10(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100033C48(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s9AUASDCore8EndpointV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v9) & 1;
}

uint64_t _s9AUASDCore8EndpointV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v5)
  {
    if (v6) {
      BOOL v7 = v5 == v6;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      return 0LL;
    }
  }

  else if (v6)
  {
    return 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (!v8)
  {
    if (v9) {
      return 0LL;
    }
    goto LABEL_17;
  }

  uint64_t result = 0LL;
  if (v9 && v8 == v9)
  {
LABEL_17:
    char v10 = *(_BYTE *)(a2 + 25);
    if ((*(_BYTE *)(a1 + 25) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 25)) {
        return 0LL;
      }
    }

    else
    {
      if ((v10 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t result = 0LL;
    if (((*(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0
      || *(void *)(a1 + 40) != *(void *)(a2 + 40))
    {
      return result;
    }

    char v11 = *(_BYTE *)(a2 + 49);
    if ((*(_BYTE *)(a1 + 49) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 49)) {
        return 0LL;
      }
    }

    else
    {
      if ((v11 & 1) != 0) {
        return 0LL;
      }
    }

    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a2 + 56);
    if (v12)
    {
      if (!v13 || (sub_1000A5580(v12, v13) & 1) == 0) {
        return 0LL;
      }
    }

    else if (v13)
    {
      return 0LL;
    }

    uint64_t v14 = *(int64x2_t **)(a1 + 64);
    Swift::UInt v15 = *(int64x2_t **)(a2 + 64);
    if (v14)
    {
      if (!v15 || !sub_1000A563C(v14, v15)) {
        return 0LL;
      }
    }

    else if (v15)
    {
      return 0LL;
    }

    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a2 + 72);
    if (v16)
    {
      if (v17 && sub_1000A56D8(v16, v17)) {
        return 1LL;
      }
    }

    else if (!v17)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100033DF4()
{
  return sub_10000B6D4( &qword_100114738,  (uint64_t (*)(uint64_t))type metadata accessor for tIOUSBEndpointDirection,  (uint64_t)&unk_1000D565C);
}

uint64_t sub_100033E20()
{
  return sub_10000B6D4( &qword_100114740,  (uint64_t (*)(uint64_t))type metadata accessor for tIOUSBEndpointType,  (uint64_t)&unk_1000D5634);
}

uint64_t sub_100033E4C()
{
  return sub_10000B6D4( &qword_100114748,  (uint64_t (*)(uint64_t))type metadata accessor for tIOUSBEndpointSynchronizationType,  (uint64_t)&unk_1000D560C);
}

uint64_t sub_100033E78()
{
  return sub_10000B6D4( &qword_100114750,  (uint64_t (*)(uint64_t))type metadata accessor for tIOUSBEndpointUsageType,  (uint64_t)&unk_1000D55E4);
}

unint64_t sub_100033EA8()
{
  unint64_t result = qword_100114758;
  if (!qword_100114758)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for LockDelay.LockDelayUnits,  &type metadata for LockDelay.LockDelayUnits);
    atomic_store(result, (unint64_t *)&qword_100114758);
  }

  return result;
}

unint64_t sub_100033EF0()
{
  unint64_t result = qword_100114760;
  if (!qword_100114760)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LockDelay, &type metadata for LockDelay);
    atomic_store(result, (unint64_t *)&qword_100114760);
  }

  return result;
}

unint64_t sub_100033F38()
{
  unint64_t result = qword_100114768;
  if (!qword_100114768)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Endpoint, &type metadata for Endpoint);
    atomic_store(result, (unint64_t *)&qword_100114768);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LockDelay(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LockDelay(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LockDelay()
{
  return &type metadata for LockDelay;
}

uint64_t storeEnumTagSinglePayload for LockDelay.LockDelayUnits(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10003405C + 4 * byte_1000D66DD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100034090 + 4 * asc_1000D66D8[v4]))();
}

uint64_t sub_100034090(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100034098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000340A0LL);
  }
  return result;
}

uint64_t sub_1000340AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000340B4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000340B8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000340C0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LockDelay.LockDelayUnits()
{
  return &type metadata for LockDelay.LockDelayUnits;
}

uint64_t destroy for Endpoint(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for Endpoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for Endpoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for Endpoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v3;
  return result;
}

uint64_t assignWithTake for Endpoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Endpoint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Endpoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Endpoint()
{
  return &type metadata for Endpoint;
}

unint64_t sub_10003439C(uint64_t a1)
{
  if ((a1 & 1) != 0) {
    return 0LL;
  }
  else {
    uint64_t v1 = qword_1000D69C8[(char)(BYTE1(a1) - 1)];
  }
  unint64_t v3 = BYTE4(a1) | (unint64_t)(v1 << 8) | ((unint64_t)BYTE3(a1) << 16);
  if ((a1 & 0xFF0000000000LL) != 0) {
    unint64_t v3 = BYTE5(a1);
  }
  if ((a1 & 2) != 0) {
    return BYTE4(a1) | (unint64_t)(v1 << 8) | ((unint64_t)BYTE3(a1) << 16);
  }
  else {
    return v3;
  }
}

uint64_t sub_10003444C()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 184);
  if (!result)
  {
LABEL_12:
    int v6 = *(unsigned __int8 *)(*(void *)(v0 + 192) + 208LL);
    return v6 == 4 || v6 == 15;
  }

  uint64_t v2 = *(void *)(result + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
  if (*(_BYTE *)(v2 + 32) == 16)
  {
LABEL_5:

    return 1LL;
  }

  if (v3 == 1)
  {
LABEL_11:

    goto LABEL_12;
  }

  uint64_t v4 = 33LL;
  while (1)
  {
    uint64_t v5 = v4 - 31;
    if (__OFADD__(v4 - 32, 1LL)) {
      break;
    }
    if (*(_BYTE *)(v2 + v4) == 16) {
      goto LABEL_5;
    }
    ++v4;
    if (v5 == v3) {
      goto LABEL_11;
    }
  }

  __break(1u);
  return result;
}

void sub_1000344E8(unsigned int a1, uint64_t a2)
{
  uint64_t v60 = 0LL;
  int v6 = a1 & 0xFFFFFF;
  uint64_t v7 = USBDescriptorControl.pbLayout()();
  unsigned int v8 = v7;
  __int16 v9 = sub_10007A234(v7, 4LL);
  if (!v3)
  {
    __int16 v11 = v9;
    id v12 = v10;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
    if (!Strong)
    {
      unint64_t v26 = sub_10000AE14();
      uint64_t v27 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
      *(_BYTE *)uint64_t v28 = 7;
      *(void *)(v28 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v28 + 16) = 0xE000000000000000LL;
      *(void *)(v28 + 24) = 0xD000000000000031LL;
      *(void *)(v28 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
      *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v28 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
      *(void *)(v28 + 56) = 77LL;
      swift_willThrow(v27);
      goto LABEL_11;
    }

    uint64_t v14 = (void *)Strong;
    uint64_t v15 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v15 && sub_10001645C(7LL, v15))
    {
      unint64_t v16 = sub_10000AE14();
      uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
      *(_BYTE *)uint64_t v18 = 108;
      *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v18 + 16) = 0xE000000000000000LL;
      *(void *)(v18 + 24) = 0xD000000000000031LL;
      *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
      *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
      *(void *)(v18 + 56) = 80LL;
      swift_willThrow(v17);

LABEL_11:
      return;
    }

    unsigned int v57 = v6;
    uint64_t v59 = v14;
    unsigned int v58 = v8;
    uint64_t v19 = *(void *)(a2 + 32);
    uint64_t v20 = 1LL;
    unsigned int v21 = a1 >> 8;
    while (1)
    {
      uint64_t v24 = v12;
      unsigned __int8 v25 = *(_BYTE *)(v19 + 2);
      id v12 = v12;
      sub_1000B6284(1u, 1, 1, v21, 0LL, 0LL, v25, v24, (uint64_t)&v60);

      if (v20 == 4) {
        break;
      }
      if (__OFADD__(v20++, 1LL))
      {
        __break(1u);
        goto LABEL_27;
      }
    }

    uint64_t v56 = v60;
    id v29 = v12;
    uint64_t v30 = NSData.startIndex.getter(v29);
    uint64_t v31 = NSData.endIndex.getter();
    uint64_t v32 = NSData.startIndex.getter(v31);
    uint64_t v33 = NSData.endIndex.getter();
    if (v30 < v32 || v33 < v30)
    {
      __break(1u);
    }

    else
    {
      uint64_t v34 = NSData.startIndex.getter(v33);
      uint64_t v35 = NSData.endIndex.getter();

      if (v31 >= v34 && v35 >= v31)
      {
        if (!__OFSUB__(v31, v30))
        {
          if (v31 - v30 < v56)
          {
            unint64_t v36 = sub_10000AE14();
            uint64_t v37 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
            *(_BYTE *)uint64_t v38 = 28;
            *(void *)(v38 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v38 + 16) = 0xE000000000000000LL;
            *(void *)(v38 + 24) = 0xD000000000000031LL;
            *(void *)(v38 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
            *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
            *(void *)(v38 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
            *(void *)(v38 + 56) = 118LL;
            swift_willThrow(v37);

            return;
          }

          if ((v11 & 0x100) != 0) {
            __int16 v39 = 256;
          }
          else {
            __int16 v39 = 0;
          }
          id v40 = v29;
          unsigned __int8 v41 = sub_1000676D4(v39 & 0xFF00u | v11, v40);

          if (v41 < 5u) {
            goto LABEL_33;
          }
          sub_10007A234(v58, v41);
          int v43 = v42;

          __int16 v44 = sub_10007BFBC(v57);
          unsigned __int8 v45 = *(_BYTE *)(v19 + 2);
          id v12 = v43;
          sub_1000B6284(1u, 1, 1, v44, 0LL, 0LL, v45, v43, (uint64_t)&v60);
LABEL_27:
          uint64_t v46 = v60;
          uint64_t v47 = NSData.startIndex.getter(v22);
          uint64_t v48 = NSData.endIndex.getter();
          uint64_t v49 = NSData.startIndex.getter(v48);
          uint64_t v50 = NSData.endIndex.getter();
          if (v47 < v49 || v50 < v47)
          {
            __break(1u);
          }

          else
          {
            uint64_t v51 = NSData.startIndex.getter(v50);
            uint64_t v52 = NSData.endIndex.getter();

            if (v48 >= v51 && v52 >= v48)
            {
              if (!__OFSUB__(v48, v47))
              {
                if (v46 != v48 - v47)
                {
                  unint64_t v53 = sub_10000AE14();
                  uint64_t v54 = swift_allocError(&type metadata for AUAError, v53, 0LL, 0LL);
                  *(_BYTE *)uint64_t v55 = 28;
                  *(void *)(v55 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                  *(void *)(v55 + 16) = 0xE000000000000000LL;
                  *(void *)(v55 + 24) = 0xD000000000000031LL;
                  *(void *)(v55 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE50LL;
                  *(void *)(v55 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
                  *(void *)(v55 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
                  *(void *)(v55 + 56) = 132LL;
                  swift_willThrow(v54);

                  goto LABEL_11;
                }

void sub_100034B90(int a1, uint64_t a2)
{
  uint64_t v28 = 0LL;
  unsigned int v5 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v6 = USBDescriptorControl.pbLayout()();
  sub_100079084(v6);
  if (v3) {
    return;
  }
  unsigned int v8 = v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 184);
  if (!Strong)
  {
    unint64_t v14 = sub_10000AE14();
    uint64_t v15 = swift_allocError(&type metadata for AUAError, v14, 0LL, 0LL);
    *(_BYTE *)uint64_t v16 = 7;
    *(void *)(v16 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v16 + 16) = 0xE000000000000000LL;
    *(void *)(v16 + 24) = 0xD000000000000032LL;
    *(void *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE10LL;
    *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v16 + 56) = 143LL;
    swift_willThrow(v15);

    return;
  }

  char v10 = (void *)Strong;
  __int16 v11 = sub_10007BFBC(v5);
  unsigned __int8 v12 = *(_BYTE *)(*(void *)(a2 + 32) + 2LL);
  id v13 = v8;
  sub_1000B6284(1u, 1, 1, v11, 0LL, 0LL, v12, v8, (uint64_t)&v28);

  uint64_t v27 = v28;
  id v17 = v13;
  uint64_t v18 = NSData.startIndex.getter(v17);
  uint64_t v19 = NSData.endIndex.getter();
  uint64_t v20 = NSData.startIndex.getter(v19);
  uint64_t v21 = NSData.endIndex.getter();
  if (v18 < v20 || v21 < v18)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  uint64_t v22 = NSData.startIndex.getter(v21);
  uint64_t v23 = NSData.endIndex.getter();

  if (v19 < v22 || v23 < v19) {
    goto LABEL_15;
  }
  if (__OFSUB__(v19, v18)) {
    goto LABEL_16;
  }
  if (v19 - v18 < v27)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v25 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v26 = 28;
    *(void *)(v26 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v26 + 16) = 0xE000000000000000LL;
    *(void *)(v26 + 24) = 0xD000000000000032LL;
    *(void *)(v26 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE10LL;
    *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v26 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v26 + 56) = 153LL;
    swift_willThrow(v25);
  }
}

uint64_t sub_100034E40(unsigned int a1, uint64_t a2)
{
  int v3 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v3 == 51)
  {
    sub_1000344E8(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }

  else
  {
    if (v3 != 52)
    {
      unint64_t v6 = sub_10000AE14();
      uint64_t v7 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
      *(_BYTE *)uint64_t v8 = 28;
      *(void *)(v8 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v8 + 16) = 0xE000000000000000LL;
      *(void *)(v8 + 24) = 0xD000000000000021LL;
      *(void *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDDE0LL;
      *(void *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
      *(void *)(v8 + 56) = 169LL;
      swift_willThrow(v7);
      return v5;
    }

    sub_100034B90(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }

  return v5;
}

uint64_t type metadata accessor for ADC3Function()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore12ADC3Function);
}

uint64_t sub_100034F40()
{
  return 48LL;
}

unint64_t sub_100034F4C(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_1000366F4(a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_100034F74(int a1, uint64_t a2)
{
  return sub_100034E40(a1 & 0xFFFFFF, a2) & 0x1FF;
}

uint64_t sub_100034F9C(unsigned __int8 a1)
{
  if (a1 <= 5u) {
    return (0x30502010005uLL >> (8 * a1));
  }
  else {
    return 5LL;
  }
}

void sub_100034FC8(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t ObjectType = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16))
  {
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }

  uint64_t v133 = *(void *)(a1 + 16);
  uint64_t v135 = a3;
  uint64_t v12 = *(void *)(a1 + 32);
  unsigned int v13 = *(unsigned __int16 *)(a1 + 40);
  sub_10007BFC4(v12, *(_WORD *)(a1 + 40));
  if (v3) {
    return;
  }
  unsigned int v131 = v13;
  uint64_t v130 = v12;
  if (v14[2] != a2)
  {
    unint64_t v16 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 75;
    *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v18 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000030LL;
    *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    uint64_t v19 = 238LL;
LABEL_14:
    *(void *)(v18 + 56) = v19;
    swift_willThrow(v17);
    return;
  }

  if (!v14[3])
  {
    unint64_t v20 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v20, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 74;
    *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v18 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000030LL;
    *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    uint64_t v19 = 239LL;
    goto LABEL_14;
  }

  if (v14[5] != 1)
  {
    unint64_t v21 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v21, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 72;
    *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v18 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000030LL;
    *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    uint64_t v19 = 240LL;
    goto LABEL_14;
  }

  if (v14[6] != 2)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 73;
    *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v18 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000030LL;
    *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    uint64_t v19 = 241LL;
    goto LABEL_14;
  }

  if (v14[7] != 48)
  {
    unint64_t v23 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 76;
    *(void *)(v18 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v18 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000030LL;
    *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDE90LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    uint64_t v19 = 242LL;
    goto LABEL_14;
  }

  uint64_t v120 = ObjectType;
  uint64_t v116 = v9;
  uint64_t v117 = v8;
  BOOL v103 = v14;
  uint64_t v104 = 0LL;
  uint64_t v102 = v14[4];
  unint64_t v159 = &_swiftEmptySetSingleton;
  unint64_t v160 = &_swiftEmptySetSingleton;
  char v113 = &v140;
  swift_bridgeObjectRetain(a1);
  uint64_t v126 = 0LL;
  uint64_t v127 = 0LL;
  int v115 = 0;
  uint64_t v109 = 0LL;
  uint64_t v110 = 0LL;
  uint64_t v107 = 0LL;
  uint64_t v108 = 0LL;
  uint64_t v128 = 0LL;
  uint64_t v132 = 0LL;
  int v111 = 0;
  uint64_t v122 = -v133;
  unint64_t v105 = a1;
  unint64_t v15 = a1 + 41;
  a1 = 0LL;
  unint64_t v114 = v15;
  int v106 = 65280;
  __int128 v101 = xmmword_1000D3D40;
  uint64_t ObjectType = (uint64_t)_swiftEmptyArrayStorage;
  a2 = _swiftEmptyArrayStorage;
  char v112 = _swiftEmptyArrayStorage;
  a3 = v135;
  uint64_t v4 = v131;
  do
  {
    int v121 = v115 & 1;
    unint64_t v24 = v133;
    if (a1 > v133) {
      unint64_t v24 = a1;
    }
    uint64_t v123 = -(uint64_t)v24;
    uint64_t v25 = (unsigned __int8 *)(v114 + 16 * a1++);
    while (1)
    {
      if (v123 + a1 == 1) {
        goto LABEL_160;
      }
      int v26 = *v25;
      __int16 v27 = *(v25 - 1) | (unsigned __int16)((_WORD)v26 << 8);
      uint64_t v134 = *(void *)(v25 - 9);
      if ((_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v134, v27) & 1) != 0) {
        goto LABEL_17;
      }
      if (v26 != 17) {
        break;
      }
      if (v132)
      {
        unint64_t v129 = a1;
        uint64_t v4 = (uint64_t)v160;
        a1 = v160[2];
        if (a1)
        {
          uint64_t v124 = ObjectType;
          unint64_t v125 = a2;
          uint64_t v28 = sub_100008E00(&qword_100113CC8);
          id v29 = (void *)swift_allocObject(v28, a1 + 32, 7LL);
          size_t v30 = j__malloc_size(v29);
          void v29[2] = a1;
          v29[3] = 2 * v30 - 64;
          uint64_t v31 = sub_100053440(&v139, (_BYTE *)v29 + 32, a1, v4);
          a3 = v139;
          a2 = (void *)*((void *)&v140 + 1);
          uint64_t ObjectType = v140;
          uint64_t v118 = v141;
          uint64_t v119 = v31;
          swift_bridgeObjectRetain_n(v4, 2LL);
          sub_100019E94(a3);
          if (v119 != (void *)a1) {
            goto LABEL_163;
          }
          swift_bridgeObjectRelease(v4);
          a3 = v135;
          uint64_t ObjectType = v124;
          a2 = v125;
          if (!v29[2])
          {
LABEL_30:
            swift_release(v29);
            id v29 = 0LL;
          }
        }

        else
        {
          id v29 = _swiftEmptyArrayStorage;
          if (!_swiftEmptyArrayStorage[2]) {
            goto LABEL_30;
          }
        }

        if (!a2[2])
        {
          swift_bridgeObjectRelease(a2);
          a2 = 0LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(ObjectType) & 1) == 0) {
          uint64_t ObjectType = (uint64_t)sub_10004F3F4(0LL, *(void *)(ObjectType + 16) + 1LL, 1, (void *)ObjectType);
        }
        unint64_t v33 = *(void *)(ObjectType + 16);
        unint64_t v32 = *(void *)(ObjectType + 24);
        if (v33 >= v32 >> 1) {
          uint64_t ObjectType = (uint64_t)sub_10004F3F4((void *)(v32 > 1), v33 + 1, 1, (void *)ObjectType);
        }
        *(void *)(ObjectType + 16) = v33 + 1;
        uint64_t v34 = ObjectType + 80 * v33;
        uint64_t v35 = v127;
        *(void *)(v34 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v132;
        *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v35;
        a1 = v129;
        *(void *)(v34 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v128;
        *(_WORD *)(v34 + 56) = 256;
        *(_BYTE *)(v34 + 64) = v121;
        *(void *)(v34 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v126;
        *(_WORD *)(v34 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 256;
        *(void *)(v34 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = a2;
        *(void *)(v34 + 96) = 0LL;
        *(void *)(v34 + 104) = v29;
        uint64_t v4 = v131;
        goto LABEL_22;
      }

      swift_bridgeObjectRelease(a2);
LABEL_22:
      uint64_t v126 = 0LL;
      uint64_t v127 = 0LL;
      uint64_t v128 = 0LL;
      ++a1;
      v25 += 16;
      uint64_t v132 = v134;
      a2 = _swiftEmptyArrayStorage;
      if (v122 + a1 == 1)
      {
        swift_bridgeObjectRelease(v105);
        uint64_t v126 = 0LL;
        uint64_t v127 = 0LL;
        uint64_t v128 = 0LL;
        goto LABEL_122;
      }
    }

    if (v26 <= 19)
    {
      if (v26 == 14) {
        continue;
      }
      if (v26 == 19)
      {
        uint64_t v127 = v134;
        continue;
      }

      goto LABEL_76;
    }

    if (v26 == 20)
    {
      uint64_t v128 = v134;
      continue;
    }

    if (v26 != 73)
    {
      if (v26 == 71)
      {
        uint64_t v36 = v134;
        int v37 = *(_DWORD *)(v134 + 4);
        unint64_t v129 = a1;
        if ((v37 & 1) != 0)
        {
          if ((v37 & 2) != 0) {
            int v62 = -3145471;
          }
          else {
            int v62 = -3145472;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            char v112 = sub_10004F514(0LL, v112[2] + 1LL, 1, v112);
          }
          unint64_t v64 = v112[2];
          unint64_t v63 = v112[3];
          if (v64 >= v63 >> 1) {
            char v112 = sub_10004F514((void *)(v63 > 1), v64 + 1, 1, v112);
          }
          uint64_t v65 = v112;
          void v112[2] = v64 + 1;
          unint64_t v66 = (char *)v65 + 3 * v64;
          v66[34] = BYTE2(v62);
          *((_WORD *)v66 + 16) = v62;
          if ((v37 & 2) != 0) {
            sub_1000516F0(&v139, 10LL);
          }
          a1 = v129;
          uint64_t v36 = v134;
          int v38 = *(_DWORD *)(v134 + 4);
          if ((v38 & 4) != 0) {
            goto LABEL_90;
          }
LABEL_46:
          int v39 = *(_DWORD *)(v36 + 4);
          if ((v39 & 0x10) != 0)
          {
LABEL_100:
            if ((v39 & 0x20) != 0) {
              int v72 = -3013823;
            }
            else {
              int v72 = -3013824;
            }
            if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
              char v112 = sub_10004F514(0LL, v112[2] + 1LL, 1, v112);
            }
            unint64_t v74 = v112[2];
            unint64_t v73 = v112[3];
            if (v74 >= v73 >> 1) {
              char v112 = sub_10004F514((void *)(v73 > 1), v74 + 1, 1, v112);
            }
            id v75 = v112;
            void v112[2] = v74 + 1;
            uint64_t v76 = (char *)v75 + 3 * v74;
            v76[34] = BYTE2(v72);
            *((_WORD *)v76 + 16) = v72;
            if ((v39 & 0x20) != 0) {
              sub_1000516F0(&v139, 10LL);
            }
            a1 = v129;
            uint64_t v36 = v134;
          }
        }

        else
        {
          int v38 = *(_DWORD *)(v134 + 4);
          if ((v38 & 4) == 0) {
            goto LABEL_46;
          }
LABEL_90:
          if ((v38 & 8) != 0) {
            int v67 = -3669311;
          }
          else {
            int v67 = -3669312;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0) {
            char v112 = sub_10004F514(0LL, v112[2] + 1LL, 1, v112);
          }
          unint64_t v69 = v112[2];
          unint64_t v68 = v112[3];
          if (v69 >= v68 >> 1) {
            char v112 = sub_10004F514((void *)(v68 > 1), v69 + 1, 1, v112);
          }
          uint64_t v70 = v112;
          void v112[2] = v69 + 1;
          uint64_t v71 = (char *)v70 + 3 * v69;
          v71[34] = BYTE2(v67);
          *((_WORD *)v71 + 16) = v67;
          if ((v38 & 8) != 0) {
            sub_1000516F0(&v139, 10LL);
          }
          a1 = v129;
          uint64_t v36 = v134;
          int v39 = *(_DWORD *)(v134 + 4);
          if ((v39 & 0x10) != 0) {
            goto LABEL_100;
          }
        }

        uint64_t v77 = *(void *)(v36 + 10);
        int v78 = v111;
        if ((v77 & 0x10) != 0) {
          int v78 = 3;
        }
        if ((v77 & 8) != 0) {
          int v78 = 4;
        }
        if ((v77 & 4) != 0) {
          int v78 = 2;
        }
        if ((v77 & 3) != 0) {
          int v79 = 1;
        }
        else {
          int v79 = v78;
        }
        int v111 = v79;
        uint64_t v107 = *(unsigned __int16 *)(v36 + 8);
        uint64_t v109 = *(unsigned __int8 *)(v36 + 3);
        uint64_t v110 = *(unsigned __int8 *)(v36 + 19);
        uint64_t v108 = *(unsigned __int8 *)(v36 + 18);
        int v106 = 512;
        uint64_t v4 = v131;
        continue;
      }

LABEL_76:
      sub_1000516F0(&v139, 33LL);
      continue;
    }

    a3 = 0LL;
    __int128 v143 = v101;
    uint64_t v144 = 0x200000001LL;
    __int16 v145 = 321;
    char v146 = -64;
    __int16 v147 = 320;
    char v148 = -64;
    uint64_t v149 = 0x800000004LL;
    __int16 v150 = 577;
    char v151 = 22;
    __int16 v152 = 576;
    char v153 = 22;
    uint64_t v154 = 0x2000000010LL;
    __int16 v155 = 769;
    char v156 = 16;
    __int16 v157 = 768;
    char v158 = 16;
    uint64_t v40 = v134;
    uint64_t v124 = ObjectType;
    unint64_t v129 = a1;
    while (2)
    {
      unsigned __int8 v41 = &v142[a3];
      int v42 = *(_DWORD *)(v40 + 3);
      if ((v42 & *(_DWORD *)((_BYTE *)&v144 + a3)) != 0)
      {
        int v43 = *((unsigned __int16 *)v41 + 20) | (v41[42] << 16);
        int v44 = *((_DWORD *)v41 + 9) & v42;
        if (v44) {
          int v45 = *((unsigned __int16 *)v41 + 20) | (v41[42] << 16);
        }
        else {
          int v45 = *(unsigned __int16 *)(v41 + 43) | (v41[45] << 16);
        }
        if ((swift_isUniquelyReferenced_nonNull_native(a2) & 1) == 0) {
          a2 = sub_10004F514(0LL, a2[2] + 1LL, 1, a2);
        }
        unint64_t v47 = a2[2];
        unint64_t v46 = a2[3];
        if (v47 >= v46 >> 1) {
          a2 = sub_10004F514((void *)(v46 > 1), v47 + 1, 1, a2);
        }
        a2[2] = v47 + 1;
        uint64_t v48 = (char *)a2 + 3 * v47;
        v48[34] = BYTE2(v45);
        *((_WORD *)v48 + 16) = v45;
        if (!v44)
        {
          uint64_t ObjectType = v124;
          a1 = v129;
          goto LABEL_53;
        }

        unint64_t v125 = a2;
        *((void *)&v140 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v139) = v43;
        BYTE2(v139) = BYTE2(v43);
        uint64_t v49 = Mirror.init(reflecting:)(&v139);
        uint64_t v4 = Mirror.children.getter(v49);
        a1 = *(void *)(v4 + 16);
        uint64_t v50 = *(void *)(v4 + 24);
        uint64_t v51 = *(void *)(v4 + 32);
        a2 = *(void **)(v4 + 40);
        uint64_t ObjectType = swift_getObjectType(a1);
        swift_unknownObjectRetain(a1);
        swift_unknownObjectRetain(v51);
        uint64_t v123 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v50);
        uint64_t v52 = swift_getObjectType(v51);
        uint64_t v53 = dispatch thunk of _AnyIndexBox._typeID.getter(v52, a2);
        if (v123 != v53) {
          goto LABEL_162;
        }
        char v54 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v51, a2, ObjectType, v50);
        swift_unknownObjectRelease(v51, v55);
        if ((v54 & 1) != 0)
        {
          swift_unknownObjectRelease(a1, v56);
          __int128 v140 = 0u;
          __int128 v141 = 0u;
          __int128 v139 = 0u;
        }

        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter(a1, v50);
          __int128 v139 = v136;
          __int128 v140 = v137;
          __int128 v141 = v138;
          swift_unknownObjectRelease(a1, v57);
        }

        uint64_t ObjectType = v124;
        a2 = v125;
        swift_release(v4);
        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v120, v117);
        a1 = v129;
        if (!*((void *)&v141 + 1))
        {
          sub_1000178B0((uint64_t)&v139, &qword_100113CD0);
          goto LABEL_75;
        }

        uint64_t v58 = *((void *)&v139 + 1);
        uint64_t v59 = v139;
        sub_100017A40(v113);
        if (!v58) {
          goto LABEL_75;
        }
        if (v59 == 0x68637469507065LL && v58 == 0xE700000000000000LL)
        {
          swift_bridgeObjectRelease(0xE700000000000000LL);
          goto LABEL_53;
        }

        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, v58, 0x68637469507065LL, 0xE700000000000000LL, 0LL);
        swift_bridgeObjectRelease(v58);
        if ((v60 & 1) == 0) {
LABEL_75:
        }
          sub_1000516F0(&v139, 10LL);
LABEL_53:
        uint64_t v4 = v131;
        uint64_t v40 = v134;
      }

      a3 += 16LL;
      if (a3 != 48) {
        continue;
      }
      break;
    }

    int v61 = *(unsigned __int8 *)(v40 + 7);
    if (v61 == 2)
    {
      uint64_t v126 = *(unsigned __int16 *)(v40 + 8);
      int v115 = 1;
      a3 = v135;
    }

    else
    {
      a3 = v135;
      if (v61 == 1)
      {
        int v115 = 0;
        uint64_t v126 = *(unsigned __int16 *)(v40 + 8);
      }
    }

LABEL_131:
  uint64_t v124 = ObjectType;
  unint64_t v125 = a2;
  a2 = (void *)(ObjectType + 104);
  swift_bridgeObjectRetain(ObjectType);
  BOOL v87 = 0;
  uint64_t ObjectType = 1LL;
  while (2)
  {
    if (v87)
    {
      if (v84 == ObjectType) {
        goto LABEL_143;
      }
      goto LABEL_137;
    }

    uint64_t v90 = (const IOUSBEndpointDescriptor *)*(a2 - 9);
    uint64_t v4 = *(a2 - 2);
    a1 = *(a2 - 1);
    uint64_t v91 = *a2;
    swift_bridgeObjectRetain(*a2);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(a1);
    if (!IOUSBGetEndpointUsageType(v90) && v90->wMaxPacketSize >= 9u)
    {
      swift_bridgeObjectRelease(v91);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v4);
      a3 = v135;
      if (v84 == ObjectType)
      {
LABEL_143:
        uint64_t ObjectType = v124;
        swift_bridgeObjectRelease(v124);
        a2 = v125;
        goto LABEL_146;
      }

  if (v1 < 0) {
    uint64_t v80 = v1;
  }
  else {
    uint64_t v80 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v80);
  swift_bridgeObjectRelease(v1);
  if (v81 < 1) {
    goto LABEL_125;
  }
LABEL_39:
  __int16 v27 = _swiftEmptyArrayStorage;
  unint64_t v82 = v7;
  while (1)
  {
    if ((v7 & 1) != 0)
    {
      id v93 = v1;
      uint64_t v94 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_63;
    }

    if ((v83 & 1) == 0)
    {
      uint64_t v1 = (uint64_t)sub_1000C5784((unint64_t *)&v94);
      id v93 = v1;
      goto LABEL_63;
    }

    uint64_t v28 = v7;
    id v29 = sub_100008E00(&qword_100113ED0);
    unint64_t result = (void *)swift_allocObject(v29, 40LL, 7LL);
    uint64_t v31 = result;
    *((_OWORD *)result + 1) = xmmword_1000D5F90;
    unint64_t v32 = (unint64_t)v1 >> 62;
    if (v1 < 0) {
      uint64_t v35 = v1;
    }
    else {
      uint64_t v35 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter(v35);
    unint64_t result = (void *)swift_bridgeObjectRelease(v1);
    if (!v36) {
      goto LABEL_140;
    }
    swift_bridgeObjectRetain();
    int v37 = _CocoaArrayWrapper.endIndex.getter(v35);
    unint64_t result = (void *)swift_bridgeObjectRelease(v1);
    if (!v37) {
      goto LABEL_137;
    }
LABEL_45:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      unint64_t result = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
      unint64_t v33 = result;
      if (v32) {
        goto LABEL_57;
      }
    }

    else
    {
      if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_138;
      }
      unint64_t v33 = *(void **)(v1 + 32);
      unint64_t result = (void *)swift_retain(v33);
      if (v32)
      {
LABEL_57:
        if (v1 < 0) {
          int v38 = v1;
        }
        else {
          int v38 = v1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v38);
        unint64_t result = (void *)swift_bridgeObjectRelease(v1);
        goto LABEL_61;
      }
    }

    uint64_t v34 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_61:
    if (!v34) {
      goto LABEL_139;
    }
    int v39 = sub_10009B0B8(0LL, 1LL);
    v31[4] = v33;
    v89[0] = v31;
    specialized Array._endMutation()(v39);
    uint64_t v1 = v89[0];
    id v93 = v89[0];
    uint64_t v7 = v28;
LABEL_63:
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0) {
        unint64_t v68 = v1;
      }
      else {
        unint64_t v68 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      unint64_t v69 = _CocoaArrayWrapper.endIndex.getter(v68);
      swift_bridgeObjectRelease(v1);
      if (v69 < 1) {
        goto LABEL_112;
      }
    }

    else if (*(uint64_t *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10) < 1)
    {
      goto LABEL_112;
    }

    while (2)
    {
      if ((v7 & 1) != 0) {
        id v93 = (unint64_t)_swiftEmptyArrayStorage;
      }
      else {
        uint64_t v1 = (uint64_t)sub_1000C5CCC((int64_t *)&v93);
      }
      if ((unint64_t)v1 >> 62)
      {
        if (v1 < 0) {
          uint64_t v65 = v1;
        }
        else {
          uint64_t v65 = v1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v65);
        swift_bridgeObjectRelease(v1);
        if (!v7)
        {
LABEL_124:
          swift_bridgeObjectRelease(v1);
          swift_bridgeObjectRelease(v93);
          uint64_t v1 = v94;
          swift_bridgeObjectRelease(v27);
          goto LABEL_125;
        }
      }

      else
      {
        uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v7) {
          goto LABEL_124;
        }
      }

      int v92 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_100070564(0, v7 & ~(v7 >> 63), 0);
      if (v7 < 0)
      {
LABEL_130:
        __break(1u);
        goto LABEL_131;
      }

      unint64_t v84 = v27;
      uint64_t v40 = 0LL;
      do
      {
        if (v7 == v40)
        {
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }

        if ((v1 & 0xC000000000000001LL) != 0)
        {
          unsigned __int8 v41 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v1);
        }

        else
        {
          unsigned __int8 v41 = *(void **)(v1 + 8 * v40 + 32);
          swift_retain(v41);
        }

        int v42 = v41[15];
        int v43 = v42;
        int v44 = &protocol witness table for EndpointClock;
        if (!v42)
        {
          swift_beginAccess(v41 + 2, v85, 0LL, 0LL);
          int v45 = v41[2];
          if (!v45)
          {
            int v88 = 0LL;
            uint64_t v86 = 0u;
            BOOL v87 = 0u;
LABEL_121:
            sub_1000178B0((uint64_t)&v86, &qword_100114528);
            int v72 = sub_10000AE14();
            unint64_t v73 = swift_allocError(&type metadata for AUAError, v72, 0LL, 0LL);
            id v75 = v73;
            *(_BYTE *)unint64_t v74 = 77;
            uint64_t v76 = 86LL;
LABEL_123:
            *(void *)(v74 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v74 + 16) = 0xE000000000000000LL;
            *(void *)(v74 + 24) = 0x29286B636F6C63LL;
            *(void *)(v74 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE700000000000000LL;
            *(void *)(v74 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000028LL;
            *(void *)(v74 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D2560LL;
            *(void *)(v74 + 56) = v76;
            swift_willThrow(v73);
            swift_release(v41);
            int v78 = v92;
            swift_bridgeObjectRelease_n(v1, 2LL);
            swift_release(v78);
            swift_bridgeObjectRelease(v93);
            int v79 = v94;
            swift_bridgeObjectRelease(v84);
            swift_bridgeObjectRelease(v79);
            swift_errorRelease(v75);
            return _swiftEmptyArrayStorage;
          }

          unint64_t v46 = v41[3];
          unint64_t v47 = v41[9];
          if ((v47 & 0xC000000000000001LL) != 0)
          {
            swift_unknownObjectRetain(v41[2]);
            uint64_t v48 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v47);
          }

          else
          {
            if (!*(void *)((v47 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_129;
            }
            uint64_t v48 = *(void *)(v47 + 32);
            swift_unknownObjectRetain(v41[2]);
            swift_retain(v48);
          }

          uint64_t ObjectType = swift_getObjectType(v45);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v46 + 168))( &v86,  v48,  ObjectType,  v46);
          swift_release(v48);
          swift_unknownObjectRelease(v45, v50);
          if (!*((void *)&v87 + 1)) {
            goto LABEL_121;
          }
          sub_10000AF84(&v86, (uint64_t)v89);
          uint64_t v51 = v90;
          uint64_t v52 = v91;
          sub_1000178EC(v89, v90);
          uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 32))(v51, v52);
          if (!v53)
          {
            sub_100017A40(v89);
            uint64_t v77 = sub_10000AE14();
            unint64_t v73 = swift_allocError(&type metadata for AUAError, v77, 0LL, 0LL);
            id v75 = v73;
            *(_BYTE *)unint64_t v74 = 78;
            uint64_t v76 = 88LL;
            goto LABEL_123;
          }

          int v43 = v53;
          int v44 = *(_UNKNOWN ***)(v54 + 16);
          sub_100017A40(v89);
        }

        swift_retain(v42);
        swift_release(v41);
        uint64_t v55 = v92;
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
        {
          sub_100070564(0, v55[2] + 1LL, 1);
          uint64_t v55 = v92;
        }

        uint64_t v57 = v55[2];
        uint64_t v56 = v55[3];
        if (v57 >= v56 >> 1)
        {
          sub_100070564(v56 > 1, v57 + 1, 1);
          uint64_t v55 = v92;
        }

        ++v40;
        v55[2] = v57 + 1;
        uint64_t v58 = &v55[2 * v57];
        v58[4] = v43;
        v58[5] = v44;
      }

      while (v7 != v40);
      swift_bridgeObjectRelease(v1);
      uint64_t v59 = type metadata accessor for MultiClock();
      char v60 = swift_allocObject(v59, 24LL, 7LL);
      *(void *)(v60 + 16) = v55;
      __int16 v27 = v84;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v84);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        __int16 v27 = sub_10004F624(0LL, v84[2] + 1LL, 1, v84);
      }
      uint64_t v7 = v82;
      unint64_t v63 = v27[2];
      int v62 = v27[3];
      if (v63 >= v62 >> 1) {
        __int16 v27 = sub_10004F624((void *)(v62 > 1), v63 + 1, 1, v27);
      }
      void v27[2] = v63 + 1;
      unint64_t v64 = &v27[3 * v63];
      v64[4] = v60;
      v64[5] = &protocol witness table for MultiClock;
      v64[6] = v1;
      uint64_t v1 = v93;
      if (v93 >> 62)
      {
        if ((v93 & 0x8000000000000000LL) != 0LL) {
          unint64_t v66 = v93;
        }
        else {
          unint64_t v66 = v93 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        int v67 = _CocoaArrayWrapper.endIndex.getter(v66);
        swift_bridgeObjectRelease(v1);
        if (v67 > 0) {
          continue;
        }
      }

      else if (*(uint64_t *)((v93 & 0xFFFFFFFFFFFFF8LL) + 0x10) > 0)
      {
        continue;
      }

      break;
    }

LABEL_137:
      BOOL v87 = 1;
LABEL_134:
      a2 += 10;
      if (__OFADD__(ObjectType++, 1LL)) {
        goto LABEL_161;
      }
      continue;
    }

    break;
  }

  int v92 = IOUSBGetEndpointUsageType(v90);
  if (v92)
  {
    int v88 = v92;
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    unsigned int wMaxPacketSize = v90->wMaxPacketSize;
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v4);
    int v88 = wMaxPacketSize < 9;
  }

  a3 = v135;
  BOOL v87 = v88 == 2;
  if (v84 != ObjectType) {
    goto LABEL_134;
  }
  uint64_t ObjectType = v124;
  swift_bridgeObjectRelease(v124);
  a2 = v125;
  if (v88 != 2) {
    goto LABEL_145;
  }
LABEL_146:
  if (*(void *)v133 != v102) {
    sub_1000516F0(&v139, 82LL);
  }
  uint64_t v94 = v160;
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v94);
  uint64_t v95 = v159;
  uint64_t v96 = sub_100051240((uint64_t)v159);
  swift_bridgeObjectRelease(v95);
  if (BYTE1(v106) == 255) {
    uint64_t v97 = 0LL;
  }
  else {
    uint64_t v97 = v107;
  }
  if (BYTE1(v106) == 255) {
    __int16 v98 = 512;
  }
  else {
    __int16 v98 = v106;
  }
  sub_100056EC8((uint64_t)v103, v111, v109, v108, v110, v97, v98, ObjectType, (uint64_t)v161, (uint64_t)v112, (uint64_t)v96);
  __int128 v99 = v161[3];
  *(_OWORD *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v161[2];
  *(_OWORD *)(a3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v99;
  *(_OWORD *)(a3 + 64) = v161[4];
  __int128 v100 = v161[1];
  *(_OWORD *)a3 = v161[0];
  *(_OWORD *)(a3 + 16) = v100;
}

uint64_t sub_100035FA0(unsigned __int16 a1, uint64_t a2, id a3)
{
  uint64_t v57 = 0LL;
  id v6 = [objc_allocWithZone(NSMutableData) initWithLength:6];
  if (!v6)
  {
    unint64_t v27 = sub_10000AE14();
    uint64_t v28 = swift_allocError(&type metadata for AUAError, v27, 0LL, 0LL);
    *(_BYTE *)uint64_t v29 = 1;
    *(void *)(v29 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v29 + 16) = 0xE000000000000000LL;
    *(void *)(v29 + 24) = 0xD000000000000043LL;
    *(void *)(v29 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF2B0LL;
    *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v29 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v29 + 56) = 187LL;
    swift_willThrow(v28);
    return (uint64_t)a3;
  }

  uint64_t v7 = (uint64_t)v6;
  id v8 = v6;
  uint64_t v9 = NSData.startIndex.getter(v8);
  uint64_t v10 = NSData.endIndex.getter();
  uint64_t v11 = NSData.startIndex.getter(v10);
  uint64_t v12 = NSData.endIndex.getter();
  if (v9 < v11 || v12 < v9)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v14 = NSData.startIndex.getter(v12);
  uint64_t v15 = NSData.endIndex.getter();

  if (v10 < v14 || v15 < v10) {
    goto LABEL_36;
  }
  unint64_t v17 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if ((v17 & 0x8000000000000000LL) != 0) {
    goto LABEL_45;
  }
  if (v17 >= 0x10000)
  {
LABEL_46:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_47;
  }

  unint64_t v18 = (unint64_t)a3 << 32;
  sub_1000B7288(v18 | (v17 << 48) | ((unint64_t)a1 << 16) | 0x6A1, v7, (uint64_t)&v57);
  if (v3)
  {
    uint64_t v19 = (void *)_convertErrorToNSError(_:)(v3);
    id v20 = [v19 code];

    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v21 = sub_100008E00(&qword_100113420);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + 16) = xmmword_1000D3D30;
    *(void *)(v22 + 56) = &type metadata for Int;
    *(void *)(v22 + 64) = &protocol witness table for Int;
    *(void *)(v22 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v20;
    v23._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v22);
    object = v23._object;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(object);
    v25._countAndFlagsBits = 0xD000000000000015LL;
    v25._object = (void *)0x80000001000CF300LL;
    String.append(_:)(v25);
    sub_100029840( 0x20726F727245LL,  0xE600000000000000LL,  0xD000000000000043LL,  (void *)0x80000001000CF2B0LL,  0xD00000000000001CLL,  0x80000001000CF290LL,  204LL);
    uint64_t v26 = swift_bridgeObjectRelease(0xE600000000000000LL);
    swift_willThrow(v26);

    return (uint64_t)a3;
  }

  uint64_t v30 = v57;
  id v31 = v8;
  uint64_t v32 = NSData.startIndex.getter(v31);
  a3 = (id)NSData.endIndex.getter();
  uint64_t v33 = NSData.startIndex.getter(a3);
  uint64_t v34 = NSData.endIndex.getter();
  if (v32 < v33 || v34 < v32) {
    goto LABEL_38;
  }
  uint64_t v35 = NSData.startIndex.getter(v34);
  uint64_t v36 = NSData.endIndex.getter();

  if (__OFSUB__(a3, v32))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }

  if ((uint64_t)a3 - v32 < v30)
  {
    unint64_t v37 = sub_10000AE14();
    uint64_t v38 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v39 = 28;
    *(void *)(v39 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    *(void *)(v39 + 24) = 0xD000000000000043LL;
    *(void *)(v39 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF2B0LL;
    *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v39 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v39 + 56) = 208LL;
    swift_willThrow(v38);

    return (uint64_t)a3;
  }

  id v40 = v31;
  unsigned __int8 v41 = (unsigned __int16 *)[v40 mutableBytes];
  uint64_t v42 = *v41;
  if ((uint64_t)[v40 length] >= v42)
  {
    unint64_t v52 = sub_10000AE14();
    uint64_t v53 = swift_allocError(&type metadata for AUAError, v52, 0LL, 0LL);
    *(_BYTE *)uint64_t v54 = 33;
    *(void *)(v54 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v54 + 16) = 0xE000000000000000LL;
    *(void *)(v54 + 24) = 0xD000000000000043LL;
    *(void *)(v54 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF2B0LL;
    *(void *)(v54 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v54 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v54 + 56) = 231LL;
    swift_willThrow(v53);

    return (uint64_t)a3;
  }

  uint64_t v56 = v40;
  id v43 = [objc_allocWithZone(NSMutableData) initWithLength:*v41];
  if (!v43)
  {
    __break(1u);
    goto LABEL_45;
  }

  uint64_t v44 = (uint64_t)v43;
  a3 = v43;
  uint64_t v45 = NSData.startIndex.getter(a3);
  uint64_t v46 = NSData.endIndex.getter();
  uint64_t v47 = NSData.startIndex.getter(v46);
  uint64_t v48 = NSData.endIndex.getter();
  if (v45 < v47 || v48 < v45) {
    goto LABEL_41;
  }
  uint64_t v49 = NSData.startIndex.getter(v48);
  uint64_t v50 = NSData.endIndex.getter();

  if (v46 < v49 || v50 < v46) {
    goto LABEL_42;
  }
  unint64_t v51 = v46 - v45;
  if (__OFSUB__(v46, v45)) {
    goto LABEL_43;
  }
  if ((v51 & 0x8000000000000000LL) == 0)
  {
    if (v51 < 0x10000)
    {
      sub_1000B7288(v18 | (v51 << 48) | ((unint64_t)a1 << 16) | 0x6A1, v44, (uint64_t)&v57);

      return (uint64_t)a3;
    }

    goto LABEL_46;
  }

unint64_t sub_1000366F4(uint64_t a1)
{
  if (a1 == 6 && (swift_beginAccess(v1 + 216, v8, 0LL, 0LL), (uint64_t v2 = *(void **)(v1 + 216)) != 0LL))
  {
    uint64_t v3 = (unsigned __int16 *)[v2 bytes];
    return sub_10003439C(*v3 | ((unint64_t)*(unsigned int *)(v3 + 1) << 16));
  }

  else
  {
    unint64_t v5 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 2;
    *(void *)(v7 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v7 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD000000000000029LL;
    *(void *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CDD90LL;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF290LL;
    *(void *)(v7 + 56) = 454LL;
    return swift_willThrow(v6);
  }

uint64_t sub_1000367D8(unint64_t a1, unint64_t a2)
{
  int v2 = a2;
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIWORD(a1);
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(0LL);
  uint64_t v12 = v11;
  uint64_t v28 = v11;
  int v25 = v3;
  __int16 v26 = v4;
  __int16 v27 = v5;
  uint64_t v13 = Mirror.init(reflecting:)(&v25);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_10004A2E0(v14, v10);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v10, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v12;
  int v25 = v2;
  __int16 v26 = v23;
  __int16 v27 = v24;
  uint64_t v18 = Mirror.init(reflecting:)(&v25);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  id v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v9) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v9 & 1;
}

uint64_t sub_100036984(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100036BFC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_100036990(unsigned int a1, unsigned int a2)
{
  return sub_100038484( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_10003699C(unint64_t a1, unint64_t a2)
{
  return sub_100039C78( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_1000369A8(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_1000369B4(unsigned int a1, unsigned int a2)
{
  return sub_100038484( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_1000369C0( unint64_t a1, unint64_t a2, __int16 a3, unint64_t a4, unint64_t a5, __int16 a6)
{
  __int16 v6 = a4;
  __int16 v7 = a2;
  __int16 v8 = a1;
  *(_WORD *)&v36[6] = HIWORD(a2);
  *(_WORD *)&v36[8] = a3;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  int v28 = *(_DWORD *)&v36[6];
  *(void *)uint64_t v36 = a5;
  *(_WORD *)&v36[8] = a6;
  uint64_t v29 = (void *)(a2 >> 16);
  unint64_t v30 = a4 >> 16;
  unint64_t v31 = HIDWORD(a4);
  unint64_t v32 = HIWORD(a4);
  unint64_t v33 = a5;
  unint64_t v35 = a5 >> 16;
  int v34 = *(_DWORD *)&v36[6];
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v39 = v16;
  *(_WORD *)uint64_t v36 = v8;
  *(_WORD *)&v36[2] = v9;
  *(_WORD *)&v36[4] = v10;
  *(_WORD *)&v36[6] = v27;
  *(_WORD *)&v36[8] = v7;
  int v37 = (int)v29;
  int v38 = v28;
  uint64_t v18 = Mirror.init(reflecting:)(v36);
  uint64_t v19 = Mirror.children.getter(v18);
  id v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v21 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v39 = v17;
  *(_WORD *)uint64_t v36 = v6;
  *(_WORD *)&v36[2] = v30;
  *(_WORD *)&v36[4] = v31;
  *(_WORD *)&v36[6] = v32;
  *(_WORD *)&v36[8] = v33;
  int v37 = v35;
  int v38 = v34;
  uint64_t v22 = Mirror.init(reflecting:)(v36);
  uint64_t v23 = Mirror.children.getter(v22);
  v20(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_10004A2E0(v23, v21);
  swift_release(v23);
  swift_bridgeObjectRelease_n(v21, 2LL);
  int v25 = v29;
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 3) = sub_10003F388((uint64_t)v29, (uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  return v23 & 1;
}

uint64_t sub_100036BF0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100036BFC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_100036BFC( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  int v7 = a2;
  __int16 v8 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = HIDWORD(a1);
  int v28 = (void *)HIDWORD(a2);
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v31 = a4;
  unint64_t v32 = HIDWORD(a4);
  uint64_t v27 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0LL);
  uint64_t v38 = v15;
  __int16 v33 = v8;
  __int16 v34 = v9;
  int v35 = v10;
  int v36 = v7;
  int v37 = (int)v28;
  uint64_t v16 = Mirror.init(reflecting:)(&v33);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v19 = v27;
  v18(v13, v27);
  swift_bridgeObjectRetain();
  int v28 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = v15;
  __int16 v33 = v6;
  __int16 v34 = v29;
  int v35 = v30;
  int v36 = v31;
  int v37 = v32;
  uint64_t v21 = Mirror.init(reflecting:)(&v33);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v13, v19);
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  unint64_t v24 = v28;
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v28, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  return v22 & 1;
}

uint64_t sub_100036DDC(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_100036DE8(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_100036DF4(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v29 = a4;
  __int16 v4 = a3;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = HIDWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(0LL);
  uint64_t v15 = v14;
  uint64_t v34 = v14;
  __int16 v30 = v6;
  __int16 v31 = v7;
  int v32 = v8;
  int v33 = a2;
  uint64_t v16 = Mirror.init(reflecting:)(&v30);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = v15;
  __int16 v30 = v4;
  __int16 v31 = v27;
  int v32 = v28;
  int v33 = v29;
  uint64_t v20 = Mirror.init(reflecting:)(&v30);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  uint64_t v23 = v26;
  LOBYTE(v21) = sub_10003F388((uint64_t)v26, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_100036FB0( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v42 = a6;
  __int16 v6 = a5;
  __int16 v7 = a4;
  __int16 v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v11 = a1 >> 16;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = HIWORD(a1);
  unint64_t v31 = a2 >> 16;
  unint64_t v32 = HIDWORD(a2);
  unint64_t v33 = HIWORD(a2);
  int v35 = (void *)(a3 >> 16);
  unint64_t v36 = a4 >> 16;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = a5 >> 16;
  unint64_t v40 = HIDWORD(a5);
  unint64_t v41 = HIWORD(a5);
  unint64_t v43 = a6 >> 16;
  uint64_t v34 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v54 = v16;
  __int16 v44 = v10;
  __int16 v45 = v11;
  __int16 v46 = v29;
  __int16 v47 = v30;
  __int16 v48 = v9;
  __int16 v49 = v31;
  __int16 v50 = v32;
  __int16 v51 = v33;
  __int16 v52 = v8;
  int v53 = (int)v35;
  uint64_t v18 = Mirror.init(reflecting:)(&v44);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v34;
  v20(v14, v34);
  swift_bridgeObjectRetain();
  int v35 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v22 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = v17;
  __int16 v44 = v7;
  __int16 v45 = v36;
  __int16 v46 = v37;
  __int16 v47 = v38;
  __int16 v48 = v6;
  __int16 v49 = v39;
  __int16 v50 = v40;
  __int16 v51 = v41;
  __int16 v52 = v42;
  int v53 = v43;
  uint64_t v23 = Mirror.init(reflecting:)(&v44);
  uint64_t v24 = Mirror.children.getter(v23);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10004A2E0(v24, v22);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2LL);
  uint64_t v26 = v35;
  LOBYTE(v24) = sub_10003F388((uint64_t)v35, (uint64_t)v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  return v24 & 1;
}

uint64_t sub_100037220(unint64_t a1, unint64_t a2)
{
  return sub_100037250( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_10003722C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003BDCC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_100037238(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003BDCC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelInformationSegment);
}

uint64_t sub_100037244(unint64_t a1, unint64_t a2)
{
  return sub_100037250( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelDescriptionSegment);
}

uint64_t sub_100037250(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v29 = v13;
  __int16 v26 = v5;
  __int16 v27 = v6;
  __int16 v28 = v7;
  uint64_t v14 = Mirror.init(reflecting:)(&v26);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = v13;
  __int16 v26 = v4;
  __int16 v27 = v24;
  __int16 v28 = v25;
  uint64_t v19 = Mirror.init(reflecting:)(&v26);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_100037400(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v23 = a1 >> 40;
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = a2 >> 24;
  unint64_t v26 = HIDWORD(a2);
  unint64_t v27 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelInformationSegment(0LL);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  __int16 v28 = v3;
  char v29 = v4;
  char v30 = v5;
  char v31 = v6;
  char v32 = v23;
  uint64_t v14 = Mirror.init(reflecting:)(&v28);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  __int16 v28 = v2;
  char v29 = v24;
  char v30 = v25;
  char v31 = v26;
  char v32 = v27;
  uint64_t v19 = Mirror.init(reflecting:)(&v28);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_1000375E0(unint64_t a1, unint64_t a2)
{
  return sub_10003D940( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_1000375EC(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v23 = a1 >> 40;
  unint64_t v24 = HIWORD(a1);
  unint64_t v25 = a2 >> 16;
  unint64_t v26 = a2 >> 24;
  unint64_t v27 = HIDWORD(a2);
  unint64_t v28 = a2 >> 40;
  unint64_t v29 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(0LL);
  uint64_t v13 = v12;
  uint64_t v36 = v12;
  __int16 v30 = v3;
  char v31 = v4;
  char v32 = v5;
  char v33 = v6;
  char v34 = v23;
  char v35 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v30);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = v13;
  __int16 v30 = v2;
  char v31 = v25;
  char v32 = v26;
  char v33 = v27;
  char v34 = v28;
  char v35 = v29;
  uint64_t v19 = Mirror.init(reflecting:)(&v30);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_1000377E8(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_1000377F4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003CD2C( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_100037800(unsigned int a1, unsigned int a2)
{
  return sub_10003D798( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_10003780C(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  v32[7] = HIBYTE(a1);
  v32[8] = a2;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  unsigned int v25 = a2 >> 8;
  int v26 = *(unsigned __int16 *)&v32[7];
  *(void *)char v32 = a3;
  *(_WORD *)&v32[8] = a4;
  unint64_t v27 = a3 >> 8;
  unint64_t v28 = a3 >> 40;
  unint64_t v31 = HIWORD(a3);
  unsigned int v29 = a4 >> 8;
  int v30 = *(unsigned __int16 *)&v32[7];
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ProcessingUnitDescriptorPart2(0LL);
  uint64_t v15 = v14;
  uint64_t v33 = v14;
  v32[0] = v5;
  *(_DWORD *)&v32[1] = v6;
  v32[5] = v7;
  v32[6] = v8;
  *(_WORD *)&v32[7] = v26;
  v32[9] = v25;
  uint64_t v16 = Mirror.init(reflecting:)(v32);
  uint64_t v17 = Mirror.children.getter(v16);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v19 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v15;
  v32[0] = v4;
  *(_DWORD *)&v32[1] = v27;
  v32[5] = v28;
  v32[6] = v31;
  *(_WORD *)&v32[7] = v30;
  v32[9] = v29;
  uint64_t v21 = Mirror.init(reflecting:)(v32);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v12, v9);
  swift_bridgeObjectRetain(v20);
  unint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v19, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  return v22 & 1;
}

uint64_t sub_100037A18(unint64_t a1, unint64_t a2)
{
  return sub_1000382AC( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_100037A24(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIWORD(a1);
  unsigned int v22 = HIWORD(a2);
  unsigned int v23 = a2 >> 8;
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADCClassSpecificDescriptorHeader(0LL);
  uint64_t v12 = v11;
  uint64_t v27 = v11;
  char v24 = v3;
  char v25 = v4;
  char v26 = v5;
  uint64_t v13 = Mirror.init(reflecting:)(&v24);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v10);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v10, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = v12;
  char v24 = v2;
  char v25 = v23;
  char v26 = v22;
  uint64_t v18 = Mirror.init(reflecting:)(&v24);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v9) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v9 & 1;
}

uint64_t sub_100037BD0(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptorPart2);
}

unint64_t sub_100037BDC( unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, unint64_t a5, unint64_t a6, unint64_t a7, unsigned int a8)
{
  unsigned int v51 = a8;
  __int16 v8 = a7;
  __int16 v9 = a5;
  __int16 v10 = a4;
  __int16 v11 = a3;
  __int16 v12 = a2;
  __int16 v13 = a1;
  unint64_t v33 = a1 >> 16;
  unint64_t v34 = HIDWORD(a1);
  unint64_t v35 = HIWORD(a1);
  unint64_t v36 = a2 >> 16;
  unint64_t v37 = HIWORD(a2);
  unint64_t v38 = a3 >> 16;
  unint64_t v39 = HIDWORD(a3);
  unint64_t v41 = HIWORD(a3);
  unsigned int v42 = HIWORD(a4);
  unint64_t v43 = a5 >> 16;
  unint64_t v44 = HIDWORD(a5);
  unint64_t v45 = a6;
  unint64_t v46 = HIWORD(a5);
  unint64_t v47 = a6 >> 16;
  unint64_t v48 = HIWORD(a6);
  unint64_t v49 = a7 >> 16;
  unint64_t v50 = HIDWORD(a7);
  unint64_t v52 = HIWORD(a7);
  unsigned int v53 = HIWORD(a8);
  uint64_t v40 = type metadata accessor for Mirror(0LL);
  uint64_t v14 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingSelfDescriptor(0LL);
  uint64_t v19 = v18;
  uint64_t v55 = v18;
  uint64_t v20 = swift_allocObject(&unk_100104698, 44LL, 7LL);
  v54[0] = v20;
  *(_WORD *)(v20 + 16) = v13;
  *(_WORD *)(v20 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v33;
  *(_WORD *)(v20 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
  *(_WORD *)(v20 + 2swift_unknownObjectWeakDestroy(v0 + 2) = v35;
  *(_WORD *)(v20 + 24) = v12;
  *(_DWORD *)(v20 + 26) = v36;
  *(_WORD *)(v20 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v37;
  *(_WORD *)(v20 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  *(_WORD *)(v20 + 34) = v38;
  *(_WORD *)(v20 + 36) = v39;
  *(_WORD *)(v20 + 3_Block_object_dispose((const void *)(v30 - 136), 8) = v41;
  *(_WORD *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v10;
  *(_WORD *)(v20 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v42;
  uint64_t v21 = Mirror.init(reflecting:)(v54);
  uint64_t v22 = Mirror.children.getter(v21);
  unsigned int v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v24 = v40;
  v23(v16, v40);
  swift_bridgeObjectRetain();
  char v25 = sub_10004A2E0(v22, v17);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v17, 2LL);
  unint64_t v26 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v55 = v19;
  uint64_t v27 = swift_allocObject(&unk_100104698, 44LL, 7LL);
  v54[0] = v27;
  *(_WORD *)(v27 + 16) = v9;
  *(_WORD *)(v27 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v43;
  *(_WORD *)(v27 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v44;
  *(_WORD *)(v27 + 2swift_unknownObjectWeakDestroy(v0 + 2) = v46;
  *(_WORD *)(v27 + 24) = v45;
  *(_DWORD *)(v27 + 26) = v47;
  *(_WORD *)(v27 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v48;
  *(_WORD *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v27 + 34) = v49;
  *(_WORD *)(v27 + 36) = v50;
  *(_WORD *)(v27 + 3_Block_object_dispose((const void *)(v30 - 136), 8) = v52;
  *(_WORD *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v51;
  *(_WORD *)(v27 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v53;
  uint64_t v28 = Mirror.init(reflecting:)(v54);
  uint64_t v29 = Mirror.children.getter(v28);
  v23(v16, v24);
  swift_bridgeObjectRetain();
  int v30 = sub_10004A2E0(v29, v26);
  swift_release(v29);
  swift_bridgeObjectRelease_n(v26, 2LL);
  LOBYTE(v26) = sub_10003F388((uint64_t)v25, (uint64_t)v30);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v25);
  return v26 & 1;
}

uint64_t sub_100037EFC(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = HIWORD(a1);
  unint64_t v23 = a2 >> 16;
  unint64_t v24 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __int16 v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ExtensionUnitDescriptorPart2(0LL);
  uint64_t v12 = v11;
  uint64_t v28 = v11;
  __int16 v25 = v3;
  int v26 = v4;
  __int16 v27 = v5;
  uint64_t v13 = Mirror.init(reflecting:)(&v25);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v10);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v10, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v12;
  __int16 v25 = v2;
  int v26 = v23;
  __int16 v27 = v24;
  uint64_t v18 = Mirror.init(reflecting:)(&v25);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v9) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v9 & 1;
}

uint64_t sub_1000380A8(unint64_t a1, unint64_t a2)
{
  return sub_100039C78( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_1000380B4(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 40;
  unint64_t v6 = HIWORD(a1);
  unint64_t v23 = HIBYTE(a1);
  unint64_t v24 = a2 >> 8;
  unint64_t v25 = a2 >> 40;
  unint64_t v26 = HIWORD(a2);
  unint64_t v27 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ExtensionUnitDescriptorPart2(0LL);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  char v28 = v3;
  int v29 = v4;
  char v30 = v5;
  char v31 = v6;
  char v32 = v23;
  uint64_t v14 = Mirror.init(reflecting:)(&v28);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain(v11);
  unint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  char v28 = v2;
  int v29 = v24;
  char v30 = v25;
  char v31 = v26;
  char v32 = v27;
  uint64_t v19 = Mirror.init(reflecting:)(&v28);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_100038294(unsigned int a1, unsigned int a2)
{
  return sub_10003D5F0( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_1000382A0(unint64_t a1, unint64_t a2)
{
  return sub_1000382AC( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000382AC(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 24;
  unint64_t v24 = HIDWORD(a1);
  unint64_t v25 = a2 >> 8;
  unint64_t v26 = a2 >> 24;
  unint64_t v27 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v32 = v13;
  char v28 = v5;
  __int16 v29 = v6;
  char v30 = v7;
  char v31 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v28);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = v13;
  char v28 = v4;
  __int16 v29 = v25;
  char v30 = v26;
  char v31 = v27;
  uint64_t v19 = Mirror.init(reflecting:)(&v28);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_100038478(unsigned int a1, unsigned int a2)
{
  return sub_100038484( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
}

uint64_t sub_100038484(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v7 = HIWORD(a1);
  unsigned int v26 = HIWORD(a2);
  unsigned int v27 = a2 >> 8;
  unsigned int v24 = HIBYTE(a1);
  unsigned int v25 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v32 = v13;
  char v28 = v5;
  char v29 = v6;
  char v30 = v7;
  char v31 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v28);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = v13;
  char v28 = v4;
  char v29 = v27;
  char v30 = v26;
  char v31 = v25;
  uint64_t v19 = Mirror.init(reflecting:)(&v28);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_100038650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4PowerDomainEntityDescriptor(0LL);
  uint64_t v10 = v9;
  uint64_t v26 = v9;
  uint64_t v11 = swift_allocObject(&unk_1001046C0, 50LL, 7LL);
  v25[0] = v11;
  __int128 v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  *(_WORD *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a1 + 32);
  uint64_t v13 = Mirror.init(reflecting:)(v25);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v8);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = v10;
  uint64_t v18 = swift_allocObject(&unk_1001046C0, 50LL, 7LL);
  v25[0] = v18;
  __int128 v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v19;
  *(_WORD *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 32);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v15(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v17);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v16, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v16);
  return v7 & 1;
}

uint64_t sub_100038818(unint64_t a1, unint64_t a2)
{
  return sub_100039C78( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_100038824(unsigned int a1, unsigned int a2)
{
  return sub_10003D5F0( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_100038830(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v23 = a1 >> 40;
  unint64_t v24 = HIBYTE(a1);
  unint64_t v25 = a2 >> 8;
  unint64_t v26 = a2 >> 16;
  unint64_t v27 = a2 >> 24;
  unint64_t v28 = a2 >> 40;
  unint64_t v29 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ACInterfaceHeaderDescriptor(0LL);
  uint64_t v13 = v12;
  uint64_t v36 = v12;
  char v30 = v3;
  char v31 = v4;
  char v32 = v5;
  __int16 v33 = v6;
  __int16 v34 = v23;
  char v35 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v30);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = v13;
  char v30 = v2;
  char v31 = v25;
  char v32 = v26;
  __int16 v33 = v27;
  __int16 v34 = v28;
  char v35 = v29;
  uint64_t v19 = Mirror.init(reflecting:)(&v30);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_100038A2C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a3;
  __int16 v5 = a2;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = (void *)(a2 >> 16);
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = HIDWORD(a3);
  unint64_t v29 = HIWORD(a3);
  unint64_t v30 = a4;
  unint64_t v31 = a4 >> 16;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioControlSelfDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v38 = v14;
  __int16 v32 = v6;
  __int16 v33 = v7;
  __int16 v34 = v8;
  __int16 v35 = v25;
  __int16 v36 = v5;
  int v37 = (int)v26;
  uint64_t v16 = Mirror.init(reflecting:)(&v32);
  uint64_t v17 = Mirror.children.getter(v16);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = v15;
  __int16 v32 = v4;
  __int16 v33 = v27;
  __int16 v34 = v28;
  __int16 v35 = v29;
  __int16 v36 = v30;
  int v37 = v31;
  uint64_t v20 = Mirror.init(reflecting:)(&v32);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  unint64_t v23 = v26;
  LOBYTE(v21) = sub_10003F388((uint64_t)v26, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_100038C28( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v10 = a1 >> 16;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v29 = HIWORD(a1);
  unint64_t v30 = a2 >> 16;
  unint64_t v31 = HIDWORD(a2);
  unint64_t v32 = a3 >> 16;
  unint64_t v33 = HIDWORD(a3);
  unint64_t v35 = a4 >> 16;
  unint64_t v36 = HIDWORD(a4);
  unint64_t v37 = a5;
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = a5 >> 16;
  unint64_t v40 = a6;
  unint64_t v41 = HIDWORD(a5);
  unint64_t v42 = a6 >> 16;
  unint64_t v43 = HIDWORD(a6);
  uint64_t v34 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ConnectorEntityDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v54 = v16;
  __int16 v44 = v9;
  __int16 v45 = v10;
  __int16 v46 = v11;
  __int16 v47 = v29;
  __int16 v48 = v8;
  __int16 v49 = v30;
  int v50 = v31;
  __int16 v51 = v7;
  __int16 v52 = v32;
  int v53 = v33;
  uint64_t v18 = Mirror.init(reflecting:)(&v44);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v34;
  v20(v14, v34);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v23 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = v17;
  __int16 v44 = v6;
  __int16 v45 = v35;
  __int16 v46 = v36;
  __int16 v47 = v38;
  __int16 v48 = v37;
  __int16 v49 = v39;
  int v50 = v41;
  __int16 v51 = v40;
  __int16 v52 = v42;
  int v53 = v43;
  uint64_t v24 = Mirror.init(reflecting:)(&v44);
  uint64_t v25 = Mirror.children.getter(v24);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_10004A2E0(v25, v23);
  swift_release(v25);
  swift_bridgeObjectRelease_n(v23, 2LL);
  LOBYTE(v25) = sub_10003F388((uint64_t)v22, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  return v25 & 1;
}

uint64_t sub_100038E8C(unint64_t a1, char a2, unint64_t a3, char a4)
{
  char v4 = a3;
  char v5 = a1;
  v36[7] = HIBYTE(a1);
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  v36[8] = a2;
  unint64_t v8 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = a1 >> 40;
  int v27 = *(unsigned __int16 *)&v36[7];
  *(void *)unint64_t v36 = a3;
  v36[8] = a4;
  unint64_t v28 = HIWORD(a1);
  unint64_t v29 = a3 >> 8;
  unint64_t v30 = a3 >> 16;
  unint64_t v31 = a3 >> 24;
  unint64_t v34 = a3 >> 40;
  int v35 = *(unsigned __int16 *)&v36[7];
  unint64_t v32 = HIDWORD(a3);
  unint64_t v33 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3SRConverterUnitDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v37 = v14;
  v36[0] = v5;
  v36[1] = v6;
  v36[2] = v7;
  void v36[3] = v8;
  v36[4] = v25;
  v36[5] = v26;
  v36[6] = v28;
  *(_WORD *)&v36[7] = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v36);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v37 = v15;
  v36[0] = v4;
  v36[1] = v29;
  v36[2] = v30;
  void v36[3] = v31;
  v36[4] = v32;
  v36[5] = v34;
  v36[6] = v33;
  *(_WORD *)&v36[7] = v35;
  uint64_t v21 = Mirror.init(reflecting:)(v36);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v19, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  return v22 & 1;
}

uint64_t sub_1000390D4(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  *(_DWORD *)&v34[4] = HIDWORD(a1);
  v34[8] = a2;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unsigned int v25 = a2 >> 8;
  int v26 = *(_DWORD *)&v34[5];
  *(void *)unint64_t v34 = a3;
  *(_DWORD *)&v34[8] = a4;
  unint64_t v27 = HIDWORD(a1);
  unint64_t v28 = a3 >> 8;
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a3 >> 24;
  unint64_t v33 = HIDWORD(a3);
  unsigned int v31 = a4 >> 8;
  int v32 = *(_DWORD *)&v34[5];
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockMultiplierDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v35 = v14;
  v34[0] = v5;
  v34[1] = v6;
  v34[2] = v7;
  v34[3] = v8;
  v34[4] = v27;
  *(_DWORD *)&v34[5] = v26;
  *(_WORD *)&v34[9] = v25;
  uint64_t v16 = Mirror.init(reflecting:)(v34);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v35 = v15;
  v34[0] = v4;
  v34[1] = v28;
  v34[2] = v29;
  v34[3] = v30;
  v34[4] = v33;
  *(_DWORD *)&v34[5] = v32;
  *(_WORD *)&v34[9] = v31;
  uint64_t v21 = Mirror.init(reflecting:)(v34);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v19, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  return v22 & 1;
}

uint64_t sub_1000392FC(unint64_t a1, unint64_t a2)
{
  return sub_10003C6EC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_100039308(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = a1 >> 40;
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = a2 >> 8;
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = a2 >> 24;
  unint64_t v29 = HIDWORD(a2);
  unint64_t v30 = a2 >> 40;
  unint64_t v31 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ClockMultiplierDescriptor(0LL);
  uint64_t v13 = v12;
  uint64_t v39 = v12;
  char v32 = v3;
  char v33 = v4;
  char v34 = v5;
  char v35 = v6;
  char v36 = v23;
  char v37 = v24;
  char v38 = v25;
  uint64_t v14 = Mirror.init(reflecting:)(&v32);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain(v11);
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v39 = v13;
  char v32 = v2;
  char v33 = v26;
  char v34 = v27;
  char v35 = v28;
  char v36 = v29;
  char v37 = v30;
  char v38 = v31;
  uint64_t v19 = Mirror.init(reflecting:)(&v32);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_100039520( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return sub_10003A800( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void))type metadata accessor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_10003952C( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  __int16 v6 = a5;
  __int16 v7 = a4;
  int v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v11 = a1 >> 16;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = HIWORD(a1);
  unint64_t v31 = a2 >> 16;
  unint64_t v32 = HIDWORD(a2);
  unint64_t v33 = HIWORD(a2);
  unint64_t v34 = HIDWORD(a3);
  char v36 = (void *)HIWORD(a3);
  unint64_t v37 = a4 >> 16;
  unint64_t v38 = HIDWORD(a4);
  unint64_t v39 = HIWORD(a4);
  unint64_t v40 = a5 >> 16;
  unint64_t v41 = HIDWORD(a5);
  unint64_t v42 = a6;
  unint64_t v43 = HIWORD(a5);
  unint64_t v44 = HIDWORD(a6);
  unint64_t v45 = HIWORD(a6);
  uint64_t v35 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4OutputTerminalDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v57 = v16;
  __int16 v46 = v10;
  __int16 v47 = v11;
  __int16 v48 = v29;
  __int16 v49 = v30;
  __int16 v50 = v9;
  __int16 v51 = v31;
  __int16 v52 = v32;
  __int16 v53 = v33;
  int v54 = v8;
  __int16 v55 = v34;
  __int16 v56 = (__int16)v36;
  uint64_t v18 = Mirror.init(reflecting:)(&v46);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v35;
  v20(v14, v35);
  swift_bridgeObjectRetain();
  char v36 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v22 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v57 = v17;
  __int16 v46 = v7;
  __int16 v47 = v37;
  __int16 v48 = v38;
  __int16 v49 = v39;
  __int16 v50 = v6;
  __int16 v51 = v40;
  __int16 v52 = v41;
  __int16 v53 = v43;
  int v54 = v42;
  __int16 v55 = v44;
  __int16 v56 = v45;
  uint64_t v23 = Mirror.init(reflecting:)(&v46);
  uint64_t v24 = Mirror.children.getter(v23);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_10004A2E0(v24, v22);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2LL);
  unint64_t v26 = v36;
  LOBYTE(v24) = sub_10003F388((uint64_t)v36, (uint64_t)v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  return v24 & 1;
}

uint64_t sub_1000397BC(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v29 = a4;
  __int16 v4 = a3;
  LODWORD(v25) = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIWORD(a1);
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = HIDWORD(a3);
  unint64_t v28 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ExtendedDescriptorHeader(0LL);
  uint64_t v15 = v14;
  uint64_t v35 = v14;
  __int16 v30 = v5;
  __int16 v31 = v6;
  __int16 v32 = v7;
  __int16 v33 = v8;
  __int16 v34 = (__int16)v25;
  uint64_t v16 = Mirror.init(reflecting:)(&v30);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v35 = v15;
  __int16 v30 = v4;
  __int16 v31 = v26;
  __int16 v32 = v27;
  __int16 v33 = v28;
  __int16 v34 = v29;
  uint64_t v20 = Mirror.init(reflecting:)(&v30);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  uint64_t v23 = v25;
  LOBYTE(v21) = sub_10003F388((uint64_t)v25, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_10003999C(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_1000399A8( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  char v6 = a5;
  char v7 = a4;
  char v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v28 = a1 >> 16;
  unint64_t v29 = a1 >> 24;
  unint64_t v30 = HIDWORD(a1);
  unint64_t v31 = HIWORD(a1);
  unint64_t v32 = HIBYTE(a1);
  v47[7] = HIBYTE(a2);
  v47[8] = a3;
  unint64_t v33 = a2 >> 8;
  unsigned int v34 = a3 >> 8;
  int v35 = *(unsigned __int16 *)&v47[7];
  *(void *)__int16 v47 = a5;
  *(_DWORD *)&v47[8] = a6;
  char v36 = (void *)(a2 >> 40);
  unint64_t v37 = a4 >> 8;
  unint64_t v38 = a4 >> 16;
  unint64_t v39 = a4 >> 24;
  unint64_t v40 = HIDWORD(a4);
  unint64_t v41 = HIWORD(a4);
  unint64_t v42 = HIBYTE(a4);
  unint64_t v43 = a5 >> 8;
  unint64_t v46 = a5 >> 40;
  unsigned int v44 = a6 >> 8;
  int v45 = *(unsigned __int16 *)&v47[7];
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3OutputTerminalDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v51 = v16;
  v47[0] = v9;
  v47[1] = v10;
  v47[2] = v28;
  v47[3] = v29;
  *(_WORD *)&v47[4] = v30;
  v47[6] = v31;
  v47[7] = v32;
  v47[8] = v8;
  *(_DWORD *)&v47[9] = v33;
  __int16 v48 = (__int16)v36;
  __int16 v49 = v35;
  __int16 v50 = v34;
  uint64_t v18 = Mirror.init(reflecting:)(v47);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  swift_bridgeObjectRetain();
  char v36 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v21 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v51 = v17;
  v47[0] = v7;
  v47[1] = v37;
  v47[2] = v38;
  v47[3] = v39;
  *(_WORD *)&v47[4] = v40;
  v47[6] = v41;
  v47[7] = v42;
  v47[8] = v6;
  *(_DWORD *)&v47[9] = v43;
  __int16 v48 = v46;
  __int16 v49 = v45;
  __int16 v50 = v44;
  uint64_t v22 = Mirror.init(reflecting:)(v47);
  uint64_t v23 = Mirror.children.getter(v22);
  v20(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_10004A2E0(v23, v21);
  swift_release(v23);
  swift_bridgeObjectRelease_n(v21, 2LL);
  unint64_t v25 = v36;
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 3) = sub_10003F388((uint64_t)v36, (uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  return v23 & 1;
}

uint64_t sub_100039C6C(unint64_t a1, unint64_t a2)
{
  return sub_100039C78(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_100039C78(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  int v4 = a2;
  int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v22 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0LL);
  uint64_t v25 = v12;
  int v23 = v5;
  __int16 v24 = v6;
  uint64_t v13 = Mirror.init(reflecting:)(&v23);
  uint64_t v14 = Mirror.children.getter(v13);
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v11);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  int v23 = v4;
  __int16 v24 = v22;
  uint64_t v18 = Mirror.init(reflecting:)(&v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v10 & 1;
}

uint64_t sub_100039E14(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v23 = a2 >> 16;
  unint64_t v24 = a2 >> 24;
  unint64_t v25 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3HighCapabilityDescriptor(0LL);
  uint64_t v13 = v12;
  uint64_t v30 = v12;
  __int16 v26 = v3;
  char v27 = v4;
  char v28 = v5;
  __int16 v29 = v6;
  uint64_t v14 = Mirror.init(reflecting:)(&v26);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = v13;
  __int16 v26 = v2;
  char v27 = v23;
  char v28 = v24;
  __int16 v29 = v25;
  uint64_t v19 = Mirror.init(reflecting:)(&v26);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_100039FD8(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_100039FE4(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a2;
  char v6 = a1;
  unint64_t v7 = a1 >> 8;
  unint64_t v8 = a1 >> 16;
  unint64_t v25 = a1 >> 24;
  unint64_t v26 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  unint64_t v28 = HIBYTE(a1);
  unsigned int v29 = HIBYTE(a2);
  LODWORD(v3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a2 >> 8;
  unint64_t v31 = a3 >> 8;
  unint64_t v32 = a3 >> 16;
  unint64_t v33 = a3 >> 24;
  unint64_t v34 = HIDWORD(a3);
  unint64_t v36 = HIWORD(a3);
  unint64_t v37 = HIBYTE(a3);
  unsigned int v35 = a4;
  unsigned int v38 = HIBYTE(a4);
  unsigned int v39 = a4 >> 8;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2OutputTerminalDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v50 = v14;
  char v40 = v6;
  char v41 = v7;
  char v42 = v8;
  char v43 = v25;
  __int16 v44 = v26;
  char v45 = v27;
  char v46 = v28;
  char v47 = v5;
  __int16 v48 = (__int16)v30;
  char v49 = v29;
  uint64_t v16 = Mirror.init(reflecting:)(&v40);
  uint64_t v17 = Mirror.children.getter(v16);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v30 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v50 = v15;
  char v40 = v4;
  char v41 = v31;
  char v42 = v32;
  char v43 = v33;
  __int16 v44 = v34;
  char v45 = v36;
  char v46 = v37;
  char v47 = v35;
  __int16 v48 = v39;
  char v49 = v38;
  uint64_t v20 = Mirror.init(reflecting:)(&v40);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain(v19);
  unint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  unint64_t v23 = v30;
  LOBYTE(v21) = sub_10003F388((uint64_t)v30, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_10003A250(unsigned int a1, unsigned int a2)
{
  return sub_10003D5F0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_10003A25C(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 40;
  unint64_t v23 = a2 >> 8;
  unint64_t v24 = a2 >> 40;
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2MixerUnitDescriptorPart2(0LL);
  uint64_t v12 = v11;
  uint64_t v28 = v11;
  char v25 = v3;
  int v26 = v4;
  char v27 = v5;
  uint64_t v13 = Mirror.init(reflecting:)(&v25);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  swift_bridgeObjectRetain(v10);
  uint64_t v16 = sub_10004A2E0(v14, v10);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v10, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v12;
  char v25 = v2;
  int v26 = v23;
  char v27 = v24;
  uint64_t v18 = Mirror.init(reflecting:)(&v25);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v9, v6);
  swift_bridgeObjectRetain(v17);
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v9) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v9 & 1;
}

uint64_t sub_10003A408(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_10003A414(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v35 = a4;
  char v4 = a3;
  LODWORD(v2_Block_object_dispose((const void *)(v30 - 136), 8) = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = HIBYTE(a1);
  unint64_t v29 = a3 >> 8;
  unint64_t v30 = a3 >> 16;
  unint64_t v31 = a3 >> 24;
  unint64_t v32 = HIDWORD(a3);
  unint64_t v33 = HIWORD(a3);
  unint64_t v34 = HIBYTE(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1OutputTerminalDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v44 = v14;
  char v36 = v5;
  char v37 = v6;
  char v38 = v7;
  char v39 = v8;
  __int16 v40 = v25;
  char v41 = v26;
  char v42 = v27;
  char v43 = (char)v28;
  uint64_t v16 = Mirror.init(reflecting:)(&v36);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = v15;
  char v36 = v4;
  char v37 = v29;
  char v38 = v30;
  char v39 = v31;
  __int16 v40 = v32;
  char v41 = v33;
  char v42 = v34;
  char v43 = v35;
  uint64_t v20 = Mirror.init(reflecting:)(&v36);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  unint64_t v23 = v28;
  LOBYTE(v21) = sub_10003F388((uint64_t)v28, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_10003A648(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIBYTE(a1);
  unsigned int v22 = HIBYTE(a2);
  unsigned int v23 = a2 >> 8;
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1MixerUnitDescriptorPart2(0LL);
  uint64_t v12 = v11;
  uint64_t v27 = v11;
  char v24 = v3;
  __int16 v25 = v4;
  char v26 = v5;
  uint64_t v13 = Mirror.init(reflecting:)(&v24);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v10);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v10, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = v12;
  char v24 = v2;
  __int16 v25 = v23;
  char v26 = v22;
  uint64_t v18 = Mirror.init(reflecting:)(&v24);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v9) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v9 & 1;
}

uint64_t sub_10003A7F4( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return sub_10003A800( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptor);
}

uint64_t sub_10003A800( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  __int16 v8 = a5;
  __int16 v9 = a4;
  __int16 v10 = a2;
  __int16 v11 = a1;
  unint64_t v12 = a1 >> 16;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = HIWORD(a1);
  *(_WORD *)&v44[6] = HIWORD(a2);
  *(_WORD *)&v44[8] = a3;
  int v33 = *(_DWORD *)&v44[6];
  unint64_t v34 = HIDWORD(a2);
  int v35 = (void *)(a3 >> 16);
  *(void *)uint64_t v44 = a5;
  *(void *)&v44[8] = a6;
  unint64_t v31 = a2 >> 16;
  unint64_t v32 = HIDWORD(a3);
  unint64_t v36 = a4 >> 16;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = a5 >> 16;
  int v40 = *(_DWORD *)&v44[6];
  unint64_t v41 = HIDWORD(a5);
  unint64_t v42 = a6 >> 16;
  unint64_t v43 = HIDWORD(a6);
  uint64_t v13 = type metadata accessor for Mirror(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a7(0LL);
  uint64_t v47 = v18;
  *(_WORD *)uint64_t v44 = v11;
  *(_WORD *)&v44[2] = v12;
  *(_WORD *)&v44[4] = v29;
  *(_WORD *)&v44[6] = v30;
  *(_WORD *)&v44[8] = v10;
  *(_WORD *)&v44[10] = v31;
  *(_WORD *)&v44[12] = v34;
  *(_DWORD *)&v44[14] = v33;
  __int16 v45 = (__int16)v35;
  __int16 v46 = v32;
  uint64_t v19 = Mirror.init(reflecting:)(v44);
  uint64_t v20 = Mirror.children.getter(v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v16, v13);
  swift_bridgeObjectRetain();
  int v35 = sub_10004A2E0(v20, v17);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v17, 2LL);
  unint64_t v22 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v47 = v18;
  *(_WORD *)uint64_t v44 = v9;
  *(_WORD *)&v44[2] = v36;
  *(_WORD *)&v44[4] = v37;
  *(_WORD *)&v44[6] = v38;
  *(_WORD *)&v44[8] = v8;
  *(_WORD *)&v44[10] = v39;
  *(_WORD *)&v44[12] = v41;
  *(_DWORD *)&v44[14] = v40;
  __int16 v45 = v42;
  __int16 v46 = v43;
  uint64_t v23 = Mirror.init(reflecting:)(v44);
  uint64_t v24 = Mirror.children.getter(v23);
  v21(v16, v13);
  swift_bridgeObjectRetain();
  __int16 v25 = sub_10004A2E0(v24, v22);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2LL);
  char v26 = v35;
  LOBYTE(v24) = sub_10003F388((uint64_t)v35, (uint64_t)v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  return v24 & 1;
}

unint64_t sub_10003AA80(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100008E00(&qword_100114918);
  uint64_t inited = swift_initStackObject(v31, v36);
  __int128 v29 = xmmword_1000D3D30;
  *(_OWORD *)(inited + 16) = xmmword_1000D3D30;
  *(void *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xD000000000000011LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x80000001000CF320LL;
  unint64_t v28 = 0x80000001000CF320LL;
  v34[0] = sub_100049734(*(void *)(a1 + 12), *(void *)(a1 + 20), (uint64_t)sub_100049940, 0LL);
  uint64_t v8 = sub_100008E00(&qword_100114920);
  unint64_t v9 = sub_10004A4B4();
  AnyHashable.init<A>(_:)(v34, v8, v9);
  unint64_t v10 = sub_100006D48(inited);
  type metadata accessor for ADC4ExtensionUnitDescriptor(0LL);
  uint64_t v12 = v11;
  uint64_t v35 = v11;
  uint64_t v13 = swift_allocObject(&unk_1001046E8, 52LL, 7LL);
  v34[0] = v13;
  __int128 v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v14;
  *(_DWORD *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_DWORD *)(a1 + 32);
  uint64_t v15 = Mirror.init(reflecting:)(v34);
  uint64_t v16 = Mirror.children.getter(v15);
  unint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v6, v32);
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_10004A2E0(v16, v10);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v18 = swift_initStackObject(v31, v33);
  *(_OWORD *)(v18 + 16) = v29;
  *(void *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xD000000000000011LL;
  *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v28;
  v34[0] = sub_100049734(*(void *)(a2 + 12), *(void *)(a2 + 20), (uint64_t)sub_100049940, 0LL);
  AnyHashable.init<A>(_:)(v34, v8, v9);
  unint64_t v19 = sub_100006D48(v18);
  uint64_t v35 = v12;
  uint64_t v20 = swift_allocObject(&unk_1001046E8, 52LL, 7LL);
  v34[0] = v20;
  __int128 v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v20 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v21;
  *(_DWORD *)(v20 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_DWORD *)(a2 + 32);
  uint64_t v22 = Mirror.init(reflecting:)(v34);
  uint64_t v23 = Mirror.children.getter(v22);
  v17(v6, v32);
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_10004A2E0(v23, v19);
  swift_release(v23);
  swift_bridgeObjectRelease_n(v19, 2LL);
  __int16 v25 = v30;
  LOBYTE(v19) = sub_10003F388((uint64_t)v30, (uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  return v19 & 1;
}

uint64_t sub_10003AD8C(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  unsigned int v29 = a4;
  __int16 v4 = a3;
  __int16 v5 = a2;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  LODWORD(v26) = HIWORD(a2);
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = HIDWORD(a3);
  unint64_t v30 = HIWORD(a3);
  unsigned int v31 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClusterDescriptorHeader(0LL);
  uint64_t v15 = v14;
  uint64_t v38 = v14;
  __int16 v32 = v6;
  __int16 v33 = v7;
  __int16 v34 = v8;
  __int16 v35 = v25;
  __int16 v36 = v5;
  __int16 v37 = (__int16)v26;
  uint64_t v16 = Mirror.init(reflecting:)(&v32);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  char v26 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = v15;
  __int16 v32 = v4;
  __int16 v33 = v27;
  __int16 v34 = v28;
  __int16 v35 = v30;
  __int16 v36 = v29;
  __int16 v37 = v31;
  uint64_t v20 = Mirror.init(reflecting:)(&v32);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  uint64_t v23 = v26;
  LOBYTE(v21) = sub_10003F388((uint64_t)v26, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

unint64_t sub_10003AF90( unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  return sub_10003B9C0( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void))type metadata accessor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_10003AF9C( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v45 = a6;
  char v6 = a4;
  __int16 v7 = a3;
  int v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v11 = a1 >> 16;
  unint64_t v29 = a1 >> 24;
  unint64_t v30 = HIDWORD(a1);
  unint64_t v31 = HIWORD(a1);
  unint64_t v32 = HIBYTE(a1);
  unint64_t v33 = HIDWORD(a2);
  unint64_t v35 = HIWORD(a2);
  unsigned int v36 = HIWORD(a3);
  unint64_t v37 = a4 >> 8;
  unint64_t v38 = a4 >> 16;
  unint64_t v39 = a4 >> 24;
  unint64_t v40 = HIDWORD(a4);
  unint64_t v41 = HIWORD(a4);
  unint64_t v42 = a5;
  unint64_t v43 = HIBYTE(a4);
  unint64_t v44 = HIDWORD(a5);
  unint64_t v46 = HIWORD(a5);
  unsigned int v47 = HIWORD(a6);
  uint64_t v34 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3InputTerminalDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v60 = v16;
  char v48 = v9;
  char v49 = v10;
  char v50 = v11;
  char v51 = v29;
  __int16 v52 = v30;
  char v53 = v31;
  char v54 = v32;
  int v55 = v8;
  __int16 v56 = v33;
  __int16 v57 = v35;
  __int16 v58 = v7;
  __int16 v59 = v36;
  uint64_t v18 = Mirror.init(reflecting:)(&v48);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v34;
  v20(v14, v34);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v23 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v60 = v17;
  char v48 = v6;
  char v49 = v37;
  char v50 = v38;
  char v51 = v39;
  __int16 v52 = v40;
  char v53 = v41;
  char v54 = v43;
  int v55 = v42;
  __int16 v56 = v44;
  __int16 v57 = v46;
  __int16 v58 = v45;
  __int16 v59 = v47;
  uint64_t v24 = Mirror.init(reflecting:)(&v48);
  uint64_t v25 = Mirror.children.getter(v24);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  char v26 = sub_10004A2E0(v25, v23);
  swift_release(v25);
  swift_bridgeObjectRelease_n(v23, 2LL);
  LOBYTE(v25) = sub_10003F388((uint64_t)v22, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  return v25 & 1;
}

uint64_t sub_10003B25C(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_10003B268(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v23 = HIWORD(a1);
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = a2 >> 24;
  unint64_t v26 = HIDWORD(a2);
  unint64_t v27 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterDescriptorHeader(0LL);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  __int16 v28 = v3;
  char v29 = v4;
  char v30 = v5;
  __int16 v31 = v6;
  char v32 = v23;
  uint64_t v14 = Mirror.init(reflecting:)(&v28);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  __int16 v28 = v2;
  char v29 = v24;
  char v30 = v25;
  __int16 v31 = v26;
  char v32 = v27;
  uint64_t v19 = Mirror.init(reflecting:)(&v28);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_10003B448(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_10003B454( unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  int v47 = a6;
  char v6 = a5;
  char v7 = a4;
  LODWORD(v37) = a3;
  char v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v11 = a1 >> 16;
  unint64_t v29 = a1 >> 24;
  unint64_t v30 = HIDWORD(a1);
  unint64_t v31 = HIWORD(a1);
  unint64_t v32 = HIBYTE(a1);
  unint64_t v33 = a2 >> 8;
  unint64_t v34 = a2 >> 40;
  unint64_t v36 = HIWORD(a2);
  unint64_t v38 = a4 >> 8;
  unint64_t v39 = a4 >> 16;
  unint64_t v40 = a4 >> 24;
  unint64_t v41 = HIDWORD(a4);
  unint64_t v42 = HIWORD(a4);
  unint64_t v43 = HIBYTE(a4);
  unint64_t v44 = a5 >> 8;
  unint64_t v45 = a5 >> 40;
  unint64_t v46 = HIWORD(a5);
  uint64_t v35 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2InputTerminalDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v60 = v16;
  char v48 = v9;
  char v49 = v10;
  char v50 = v11;
  char v51 = v29;
  __int16 v52 = v30;
  char v53 = v31;
  char v54 = v32;
  char v55 = v8;
  int v56 = v33;
  char v57 = v34;
  __int16 v58 = v36;
  char v59 = (char)v37;
  uint64_t v18 = Mirror.init(reflecting:)(&v48);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v35;
  v20(v14, v35);
  swift_bridgeObjectRetain(v15);
  unint64_t v37 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v22 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v60 = v17;
  char v48 = v7;
  char v49 = v38;
  char v50 = v39;
  char v51 = v40;
  __int16 v52 = v41;
  char v53 = v42;
  char v54 = v43;
  char v55 = v6;
  int v56 = v44;
  char v57 = v45;
  __int16 v58 = v46;
  char v59 = v47;
  uint64_t v23 = Mirror.init(reflecting:)(&v48);
  uint64_t v24 = Mirror.children.getter(v23);
  v20(v14, v21);
  swift_bridgeObjectRetain(v22);
  unint64_t v25 = sub_10004A2E0(v24, v22);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2LL);
  unint64_t v26 = v37;
  LOBYTE(v24) = sub_10003F388((uint64_t)v37, (uint64_t)v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  return v24 & 1;
}

uint64_t sub_10003B718(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_10003B724(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_10003B730(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  __int16 v5 = a2;
  char v6 = a1;
  unint64_t v7 = a1 >> 8;
  unint64_t v8 = a1 >> 16;
  unint64_t v25 = a1 >> 24;
  unint64_t v26 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  unint64_t v28 = HIBYTE(a1);
  unsigned int v29 = HIBYTE(a2);
  LODWORD(v3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = HIWORD(a2);
  unint64_t v31 = a3 >> 8;
  unint64_t v32 = a3 >> 16;
  unint64_t v33 = a3 >> 24;
  unint64_t v34 = HIDWORD(a3);
  unint64_t v36 = HIWORD(a3);
  unint64_t v37 = HIBYTE(a3);
  unsigned int v35 = a4;
  unsigned int v38 = HIBYTE(a4);
  unsigned int v39 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1InputTerminalDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v50 = v14;
  char v40 = v6;
  char v41 = v7;
  char v42 = v8;
  char v43 = v25;
  __int16 v44 = v26;
  char v45 = v27;
  char v46 = v28;
  __int16 v47 = v5;
  char v48 = (char)v30;
  char v49 = v29;
  uint64_t v16 = Mirror.init(reflecting:)(&v40);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v50 = v15;
  char v40 = v4;
  char v41 = v31;
  char v42 = v32;
  char v43 = v33;
  __int16 v44 = v34;
  char v45 = v36;
  char v46 = v37;
  __int16 v47 = v35;
  char v48 = v39;
  char v49 = v38;
  uint64_t v20 = Mirror.init(reflecting:)(&v40);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  uint64_t v23 = v30;
  LOBYTE(v21) = sub_10003F388((uint64_t)v30, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_10003B99C(unint64_t a1, unint64_t a2)
{
  return sub_10003C6EC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_10003B9A8(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptor);
}

unint64_t sub_10003B9B4( unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  return sub_10003B9C0( a1,  a2,  a3,  a4,  a5,  a6,  (uint64_t (*)(void))type metadata accessor for ADC4SelectorUnitDescriptor);
}

unint64_t sub_10003B9C0( unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6, uint64_t (*a7)(void))
{
  int v40 = a6;
  __int16 v8 = a4;
  int v33 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v11 = a1 >> 16;
  unint64_t v12 = HIDWORD(a1);
  unint64_t v29 = HIWORD(a1);
  unint64_t v30 = a2 >> 16;
  unint64_t v31 = HIDWORD(a2);
  unint64_t v34 = a4 >> 16;
  unint64_t v35 = HIDWORD(a4);
  unint64_t v36 = a5;
  unint64_t v37 = HIWORD(a4);
  unint64_t v38 = a5 >> 16;
  unint64_t v39 = HIDWORD(a5);
  uint64_t v32 = type metadata accessor for Mirror(0LL);
  uint64_t v13 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = a7(0LL);
  uint64_t v49 = v17;
  __int16 v41 = v10;
  __int16 v42 = v11;
  __int16 v43 = v12;
  __int16 v44 = v29;
  __int16 v45 = v9;
  __int16 v46 = v30;
  int v47 = v31;
  __int16 v48 = v33;
  uint64_t v18 = Mirror.init(reflecting:)(&v41);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v21 = v32;
  v20(v15, v32);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10004A2E0(v19, v16);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v16, 2LL);
  unint64_t v23 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v49 = v17;
  __int16 v41 = v8;
  __int16 v42 = v34;
  __int16 v43 = v35;
  __int16 v44 = v37;
  __int16 v45 = v36;
  __int16 v46 = v38;
  int v47 = v39;
  __int16 v48 = v40;
  uint64_t v24 = Mirror.init(reflecting:)(&v41);
  uint64_t v25 = Mirror.children.getter(v24);
  v20(v15, v21);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_10004A2E0(v25, v23);
  swift_release(v25);
  swift_bridgeObjectRelease_n(v23, 2LL);
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 3) = sub_10003F388((uint64_t)v22, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  return v23 & 1;
}

uint64_t sub_10003BBF4(unsigned int a1, unsigned int a2)
{
  return sub_10003BC00(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_10003BC00(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unsigned int v6 = HIWORD(a1);
  HIDWORD(v2swift_unknownObjectWeakDestroy(v0 + 2) = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  __int16 v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0LL);
  uint64_t v25 = v12;
  __int16 v23 = v5;
  __int16 v24 = v6;
  uint64_t v13 = Mirror.init(reflecting:)(&v23);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_10004A2E0(v14, v11);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  __int16 v23 = v4;
  __int16 v24 = WORD2(v22);
  uint64_t v18 = Mirror.init(reflecting:)(&v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v10 & 1;
}

uint64_t sub_10003BD9C(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_10003BDA8(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_10003BDB4(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_10003BDC0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003BDCC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_10003BDCC( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  __int16 v7 = a2;
  __int16 v8 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  unint64_t v28 = a2 >> 16;
  unint64_t v30 = (void *)HIDWORD(a2);
  unint64_t v31 = a3 >> 16;
  unint64_t v32 = HIDWORD(a3);
  unint64_t v33 = a4;
  unint64_t v34 = HIWORD(a3);
  unint64_t v35 = a4 >> 16;
  unint64_t v36 = HIDWORD(a4);
  uint64_t v29 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0LL);
  uint64_t v44 = v15;
  __int16 v37 = v8;
  __int16 v38 = v9;
  __int16 v39 = v10;
  __int16 v40 = v27;
  __int16 v41 = v7;
  __int16 v42 = v28;
  __int16 v43 = (__int16)v30;
  uint64_t v16 = Mirror.init(reflecting:)(&v37);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v19 = v29;
  v18(v13, v29);
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = v15;
  __int16 v37 = v6;
  __int16 v38 = v31;
  __int16 v39 = v32;
  __int16 v40 = v34;
  __int16 v41 = v33;
  __int16 v42 = v35;
  __int16 v43 = v36;
  uint64_t v21 = Mirror.init(reflecting:)(&v37);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v13, v19);
  swift_bridgeObjectRetain();
  __int16 v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  __int16 v24 = v30;
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v30, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  return v22 & 1;
}

uint64_t sub_10003BFEC( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v42 = a6;
  __int16 v6 = a5;
  __int16 v7 = a4;
  int v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v11 = a1 >> 16;
  unint64_t v29 = HIDWORD(a1);
  unint64_t v30 = HIWORD(a1);
  unint64_t v31 = a2 >> 16;
  unint64_t v32 = HIDWORD(a2);
  unint64_t v33 = HIWORD(a2);
  unint64_t v35 = (void *)HIDWORD(a3);
  unint64_t v36 = a4 >> 16;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = a5 >> 16;
  unint64_t v40 = HIDWORD(a5);
  unint64_t v41 = HIWORD(a5);
  unint64_t v43 = HIDWORD(a6);
  uint64_t v34 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClockSourceDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v54 = v16;
  __int16 v44 = v10;
  __int16 v45 = v11;
  __int16 v46 = v29;
  __int16 v47 = v30;
  __int16 v48 = v9;
  __int16 v49 = v31;
  __int16 v50 = v32;
  __int16 v51 = v33;
  int v52 = v8;
  __int16 v53 = (__int16)v35;
  uint64_t v18 = Mirror.init(reflecting:)(&v44);
  uint64_t v19 = Mirror.children.getter(v18);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v34;
  v20(v14, v34);
  swift_bridgeObjectRetain();
  unint64_t v35 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v22 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v54 = v17;
  __int16 v44 = v7;
  __int16 v45 = v36;
  __int16 v46 = v37;
  __int16 v47 = v38;
  __int16 v48 = v6;
  __int16 v49 = v39;
  __int16 v50 = v40;
  __int16 v51 = v41;
  int v52 = v42;
  __int16 v53 = v43;
  uint64_t v23 = Mirror.init(reflecting:)(&v44);
  uint64_t v24 = Mirror.children.getter(v23);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10004A2E0(v24, v22);
  swift_release(v24);
  swift_bridgeObjectRelease_n(v22, 2LL);
  uint64_t v26 = v35;
  LOBYTE(v24) = sub_10003F388((uint64_t)v35, (uint64_t)v25);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v26);
  return v24 & 1;
}

uint64_t sub_10003C25C(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v33 = a4;
  char v4 = a3;
  LODWORD(v27) = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v28 = a3 >> 8;
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a3 >> 24;
  unint64_t v31 = HIDWORD(a3);
  unint64_t v32 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3PowerDomainDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v41 = v14;
  char v34 = v5;
  char v35 = v6;
  char v36 = v7;
  char v37 = v8;
  __int16 v38 = v25;
  __int16 v39 = v26;
  char v40 = (char)v27;
  uint64_t v16 = Mirror.init(reflecting:)(&v34);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v27 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v19 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v41 = v15;
  char v34 = v4;
  char v35 = v28;
  char v36 = v29;
  char v37 = v30;
  __int16 v38 = v31;
  __int16 v39 = v32;
  char v40 = v33;
  uint64_t v20 = Mirror.init(reflecting:)(&v34);
  uint64_t v21 = Mirror.children.getter(v20);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10004A2E0(v21, v19);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v19, 2LL);
  uint64_t v23 = v27;
  LOBYTE(v21) = sub_10003F388((uint64_t)v27, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v23);
  return v21 & 1;
}

uint64_t sub_10003C474(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_10003C480(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  *(_DWORD *)&v36[4] = HIDWORD(a1);
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  v36[8] = a2;
  unint64_t v8 = a1 >> 24;
  unsigned int v26 = a2 >> 8;
  int v27 = *(_DWORD *)&v36[5];
  HIDWORD(v25) = HIWORD(a2);
  *(void *)char v36 = a3;
  *(_DWORD *)&v36[8] = a4;
  unint64_t v28 = HIDWORD(a1);
  unint64_t v29 = a3 >> 8;
  unint64_t v30 = a3 >> 16;
  unint64_t v31 = a3 >> 24;
  unint64_t v35 = HIDWORD(a3);
  unsigned int v33 = a4 >> 8;
  int v34 = *(_DWORD *)&v36[5];
  unsigned int v32 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockSourceDescriptor(0LL);
  uint64_t v15 = v14;
  uint64_t v37 = v14;
  v36[0] = v5;
  v36[1] = v6;
  v36[2] = v7;
  void v36[3] = v8;
  v36[4] = v28;
  *(_DWORD *)&v36[5] = v27;
  v36[9] = v26;
  *(_WORD *)&_BYTE v36[10] = WORD2(v25);
  uint64_t v16 = Mirror.init(reflecting:)(v36);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_10004A2E0(v17, v13);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v13, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v37 = v15;
  v36[0] = v4;
  v36[1] = v29;
  v36[2] = v30;
  void v36[3] = v31;
  v36[4] = v35;
  *(_DWORD *)&v36[5] = v34;
  v36[9] = v33;
  *(_WORD *)&_BYTE v36[10] = v32;
  uint64_t v21 = Mirror.init(reflecting:)(v36);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v19, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v19);
  return v22 & 1;
}

uint64_t sub_10003C6C8(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_10003C6D4(unint64_t a1, unint64_t a2)
{
  return sub_10003C6EC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSourceDescriptor);
}

uint64_t sub_10003C6E0(unint64_t a1, unint64_t a2)
{
  return sub_10003C6EC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_10003C6EC(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v24 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = a1 >> 40;
  unint64_t v27 = HIWORD(a1);
  unint64_t v28 = HIBYTE(a1);
  unint64_t v29 = a2 >> 8;
  unint64_t v30 = a2 >> 16;
  unint64_t v31 = a2 >> 24;
  unint64_t v32 = HIDWORD(a2);
  unint64_t v33 = a2 >> 40;
  unint64_t v34 = HIWORD(a2);
  unint64_t v35 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v44 = v13;
  char v36 = v5;
  char v37 = v6;
  char v38 = v7;
  char v39 = v24;
  char v40 = v25;
  char v41 = v26;
  char v42 = v27;
  char v43 = v28;
  uint64_t v14 = Mirror.init(reflecting:)(&v36);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = v13;
  char v36 = v4;
  char v37 = v29;
  char v38 = v30;
  char v39 = v31;
  char v40 = v32;
  char v41 = v33;
  char v42 = v34;
  char v43 = v35;
  uint64_t v19 = Mirror.init(reflecting:)(&v36);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_10003C928(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = a1 >> 40;
  unint64_t v25 = a2 >> 8;
  unint64_t v26 = a2 >> 16;
  unint64_t v27 = a2 >> 24;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1FeatureUnitDescriptor(0LL);
  uint64_t v13 = v12;
  uint64_t v36 = v12;
  char v30 = v3;
  char v31 = v4;
  char v32 = v5;
  char v33 = v6;
  char v34 = v23;
  char v35 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v30);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = v13;
  char v30 = v2;
  char v31 = v25;
  char v32 = v26;
  char v33 = v27;
  char v34 = v28;
  char v35 = v29;
  uint64_t v19 = Mirror.init(reflecting:)(&v30);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_10003CB24(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = a1 >> 40;
  unint64_t v25 = a2 >> 8;
  unint64_t v26 = a2 >> 16;
  unint64_t v27 = a2 >> 24;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ASInterfaceDescriptor(0LL);
  uint64_t v13 = v12;
  uint64_t v36 = v12;
  char v30 = v3;
  char v31 = v4;
  char v32 = v5;
  char v33 = v6;
  char v34 = v23;
  __int16 v35 = v24;
  uint64_t v14 = Mirror.init(reflecting:)(&v30);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v15, v11);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = v13;
  char v30 = v2;
  char v31 = v25;
  char v32 = v26;
  char v33 = v27;
  char v34 = v28;
  __int16 v35 = v29;
  uint64_t v19 = Mirror.init(reflecting:)(&v30);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v10 & 1;
}

uint64_t sub_10003CD20(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003CD2C( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4EffectUnitDescriptor);
}

uint64_t sub_10003CD2C( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v10 = a1 >> 16;
  unint64_t v27 = HIDWORD(a1);
  unint64_t v28 = HIWORD(a1);
  unint64_t v29 = a2 >> 16;
  unint64_t v30 = HIDWORD(a2);
  char v32 = (void *)HIWORD(a2);
  unint64_t v33 = a3 >> 16;
  unint64_t v34 = HIDWORD(a3);
  unint64_t v35 = HIWORD(a3);
  unint64_t v36 = a4 >> 16;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  uint64_t v31 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0LL);
  uint64_t v47 = v15;
  __int16 v39 = v9;
  __int16 v40 = v10;
  __int16 v41 = v27;
  __int16 v42 = v28;
  __int16 v43 = v8;
  __int16 v44 = v29;
  __int16 v45 = v30;
  __int16 v46 = (__int16)v32;
  uint64_t v16 = Mirror.init(reflecting:)(&v39);
  uint64_t v17 = Mirror.children.getter(v16);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v19 = v31;
  v18(v13, v31);
  swift_bridgeObjectRetain();
  char v32 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v47 = v15;
  __int16 v39 = v7;
  __int16 v40 = v33;
  __int16 v41 = v34;
  __int16 v42 = v35;
  __int16 v43 = v6;
  __int16 v44 = v36;
  __int16 v45 = v37;
  __int16 v46 = v38;
  uint64_t v21 = Mirror.init(reflecting:)(&v39);
  uint64_t v22 = Mirror.children.getter(v21);
  v18(v13, v19);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_10004A2E0(v22, v20);
  swift_release(v22);
  swift_bridgeObjectRelease_n(v20, 2LL);
  unint64_t v24 = v32;
  LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 2) = sub_10003F388((uint64_t)v32, (uint64_t)v23);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v24);
  return v22 & 1;
}

uint64_t sub_10003CF6C(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3EffectUnitDescriptor);
}

uint64_t sub_10003CF78(unint64_t a1, unint64_t a2)
{
  return sub_10003CF84(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2EffectUnitDescriptor);
}

uint64_t sub_10003CF84(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v24 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = a2 >> 8;
  unint64_t v28 = a2 >> 16;
  unint64_t v29 = a2 >> 24;
  unint64_t v30 = HIDWORD(a2);
  unint64_t v31 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v38 = v13;
  char v32 = v5;
  char v33 = v6;
  char v34 = v7;
  char v35 = v24;
  __int16 v36 = v25;
  char v37 = v26;
  uint64_t v14 = Mirror.init(reflecting:)(&v32);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = v13;
  char v32 = v4;
  char v33 = v27;
  char v34 = v28;
  char v35 = v29;
  __int16 v36 = v30;
  char v37 = v31;
  uint64_t v19 = Mirror.init(reflecting:)(&v32);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_10003D188( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v38 = a6;
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v10 = a1 >> 16;
  unint64_t v11 = HIDWORD(a1);
  unint64_t v28 = HIWORD(a1);
  unint64_t v29 = a2 >> 16;
  unint64_t v30 = HIDWORD(a2);
  unsigned int v31 = HIWORD(a3);
  unint64_t v33 = a4 >> 16;
  unint64_t v34 = HIDWORD(a4);
  unint64_t v35 = a5;
  unint64_t v36 = HIWORD(a4);
  unint64_t v37 = a5 >> 16;
  unint64_t v39 = HIDWORD(a5);
  unsigned int v40 = HIWORD(a6);
  uint64_t v32 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4MixerUnitDescriptor(0LL);
  uint64_t v17 = v16;
  uint64_t v50 = v16;
  __int16 v41 = v9;
  __int16 v42 = v10;
  __int16 v43 = v11;
  __int16 v44 = v28;
  __int16 v45 = v8;
  __int16 v46 = v29;
  int v47 = v30;
  __int16 v48 = v7;
  __int16 v49 = v31;
  uint64_t v18 = Mirror.init(reflecting:)(&v41);
  uint64_t v19 = Mirror.children.getter(v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v21 = v32;
  v20(v14, v32);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  unint64_t v23 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v50 = v17;
  __int16 v41 = v6;
  __int16 v42 = v33;
  __int16 v43 = v34;
  __int16 v44 = v36;
  __int16 v45 = v35;
  __int16 v46 = v37;
  int v47 = v39;
  __int16 v48 = v38;
  __int16 v49 = v40;
  uint64_t v24 = Mirror.init(reflecting:)(&v41);
  uint64_t v25 = Mirror.children.getter(v24);
  v20(v14, v21);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_10004A2E0(v25, v23);
  swift_release(v25);
  swift_bridgeObjectRelease_n(v23, 2LL);
  LOBYTE(v25) = sub_10003F388((uint64_t)v22, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v22);
  return v25 & 1;
}

uint64_t sub_10003D3D8(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptor);
}

uint64_t sub_10003D3E4(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptor);
}

uint64_t sub_10003D3F0(unint64_t a1, unint64_t a2)
{
  return sub_10003D3FC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1MixerUnitDescriptor);
}

uint64_t sub_10003D3FC(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v24 = a1 >> 24;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = a2 >> 8;
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = a2 >> 24;
  unint64_t v29 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v35 = v13;
  char v30 = v5;
  char v31 = v6;
  char v32 = v7;
  char v33 = v24;
  char v34 = v25;
  uint64_t v14 = Mirror.init(reflecting:)(&v30);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain(v12);
  uint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v35 = v13;
  char v30 = v4;
  char v31 = v26;
  char v32 = v27;
  char v33 = v28;
  char v34 = v29;
  uint64_t v19 = Mirror.init(reflecting:)(&v30);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain(v18);
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_10003D5E4(unsigned int a1, unsigned int a2)
{
  return sub_10003D5F0(a1, a2, (uint64_t (*)(void))type metadata accessor for IOUSBDescriptorHeader);
}

uint64_t sub_10003D5F0(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  HIDWORD(v2swift_unknownObjectWeakDestroy(v0 + 2) = a2 >> 8;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0LL);
  uint64_t v25 = v12;
  char v23 = v5;
  char v24 = v6;
  uint64_t v13 = Mirror.init(reflecting:)(&v23);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain(v11);
  uint64_t v16 = sub_10004A2E0(v14, v11);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  char v23 = v4;
  char v24 = BYTE4(v22);
  uint64_t v18 = Mirror.init(reflecting:)(&v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v10, v7);
  swift_bridgeObjectRetain(v17);
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v10 & 1;
}

uint64_t sub_10003D78C(unsigned int a1, unsigned int a2)
{
  return sub_10003D798(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterEndSegment);
}

uint64_t sub_10003D798(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unsigned int v6 = HIWORD(a1);
  HIDWORD(v2swift_unknownObjectWeakDestroy(v0 + 2) = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0LL);
  uint64_t v25 = v12;
  __int16 v23 = v5;
  char v24 = v6;
  uint64_t v13 = Mirror.init(reflecting:)(&v23);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v14, v11);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v11, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  __int16 v23 = v4;
  char v24 = BYTE4(v22);
  uint64_t v18 = Mirror.init(reflecting:)(&v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v17);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = sub_10003F388((uint64_t)v16, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v16);
  return v10 & 1;
}

uint64_t sub_10003D934(unint64_t a1, unint64_t a2)
{
  return sub_10003D940( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterClusterDescriptionSegment);
}

uint64_t sub_10003D940(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = a2 >> 24;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0LL);
  uint64_t v29 = v13;
  __int16 v26 = v5;
  char v27 = v6;
  __int16 v28 = v7;
  uint64_t v14 = Mirror.init(reflecting:)(&v26);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v18 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = v13;
  __int16 v26 = v4;
  char v27 = v24;
  __int16 v28 = v25;
  uint64_t v19 = Mirror.init(reflecting:)(&v26);
  uint64_t v20 = Mirror.children.getter(v19);
  v16(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_10004A2E0(v20, v18);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v18, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v17, (uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v17);
  return v11 & 1;
}

uint64_t sub_10003DAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for MixerUnit;
  uint64_t v9 = swift_allocObject(&unk_100104878, 104LL, 7LL);
  v25[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a1 + 64);
  *(void *)(v9 + 96) = *(void *)(a1 + 80);
  __int128 v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  sub_10004ADC4((void *)a1);
  uint64_t v12 = Mirror.init(reflecting:)(v25);
  uint64_t v13 = Mirror.children.getter(v12);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10004A2E0(v13, v8);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for MixerUnit;
  uint64_t v17 = swift_allocObject(&unk_100104878, 104LL, 7LL);
  v25[0] = v17;
  __int128 v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 64);
  *(void *)(v17 + 96) = *(void *)(a2 + 80);
  __int128 v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v19;
  sub_10004ADC4((void *)a2);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v16);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v16, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  return v7 & 1;
}

uint64_t sub_10003DCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for SampleRateConverter;
  uint64_t v9 = swift_allocObject(&unk_1001047B0, 88LL, 7LL);
  v25[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(void *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a1 + 64);
  __int128 v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  sub_10004AC18(a1);
  uint64_t v12 = Mirror.init(reflecting:)(v25);
  uint64_t v13 = Mirror.children.getter(v12);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10004A2E0(v13, v8);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for SampleRateConverter;
  uint64_t v17 = swift_allocObject(&unk_1001047B0, 88LL, 7LL);
  v25[0] = v17;
  __int128 v18 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v17 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 64) = v18;
  *(void *)(v17 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 64);
  __int128 v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v19;
  sub_10004AC18(a2);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v16);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v16, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  return v7 & 1;
}

uint64_t sub_10003DED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v28 = &type metadata for ControlInterface;
  uint64_t v9 = swift_allocObject(&unk_100104918, 136LL, 7LL);
  v27[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(_OWORD *)(v9 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a1 + 96);
  *(void *)(v9 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a1 + 112);
  __int128 v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  sub_100030860((void *)a1);
  uint64_t v13 = Mirror.init(reflecting:)(v27);
  uint64_t v14 = Mirror.children.getter(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  swift_bridgeObjectRetain(v8);
  unint64_t v16 = sub_10004A2E0(v14, v8);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v28 = &type metadata for ControlInterface;
  uint64_t v18 = swift_allocObject(&unk_100104918, 136LL, 7LL);
  v27[0] = v18;
  __int128 v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v18 + 96) = v19;
  *(_OWORD *)(v18 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 96);
  *(void *)(v18 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 112);
  __int128 v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v20;
  __int128 v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v18 + 64) = v21;
  sub_100030860((void *)a2);
  uint64_t v22 = Mirror.init(reflecting:)(v27);
  uint64_t v23 = Mirror.children.getter(v22);
  v15(v7, v4);
  swift_bridgeObjectRetain(v17);
  unint64_t v24 = sub_10004A2E0(v23, v17);
  swift_release(v23);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v16, (uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v16);
  return v7 & 1;
}

uint64_t sub_10003E0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v24 = &type metadata for ClockMultiplier;
  uint64_t v9 = swift_allocObject(&unk_100104710, 68LL, 7LL);
  v23[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(a1 + 48);
  sub_10004AAF8(a1);
  uint64_t v11 = Mirror.init(reflecting:)(v23);
  uint64_t v12 = Mirror.children.getter(v11);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v12, v8);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v24 = &type metadata for ClockMultiplier;
  uint64_t v16 = swift_allocObject(&unk_100104710, 68LL, 7LL);
  v23[0] = v16;
  __int128 v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v17;
  *(_OWORD *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v16 + 64) = *(_DWORD *)(a2 + 48);
  sub_10004AAF8(a2);
  uint64_t v18 = Mirror.init(reflecting:)(v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  __int128 v20 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v14);
  return v7 & 1;
}

uint64_t sub_10003E2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for ProcessingUnit;
  uint64_t v9 = (_OWORD *)swift_allocObject(&unk_1001047D8, 96LL, 7LL);
  v25[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  v9[3] = *(_OWORD *)(a1 + 32);
  v9[4] = v10;
  _OWORD v9[5] = *(_OWORD *)(a1 + 64);
  __int128 v11 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  v9[2] = v11;
  sub_10004AC7C((void *)a1);
  uint64_t v12 = Mirror.init(reflecting:)(v25);
  uint64_t v13 = Mirror.children.getter(v12);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10004A2E0(v13, v8);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v26 = &type metadata for ProcessingUnit;
  __int128 v17 = (_OWORD *)swift_allocObject(&unk_1001047D8, 96LL, 7LL);
  v25[0] = v17;
  __int128 v18 = *(_OWORD *)(a2 + 48);
  v17[3] = *(_OWORD *)(a2 + 32);
  v17[4] = v18;
  v17[5] = *(_OWORD *)(a2 + 64);
  __int128 v19 = *(_OWORD *)(a2 + 16);
  v17[1] = *(_OWORD *)a2;
  v17[2] = v19;
  sub_10004AC7C((void *)a2);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v21, v16);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v16, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  return v7 & 1;
}

uint64_t sub_10003E4BC(_OWORD *a1, _OWORD *a2)
{
  return sub_10003E6F0( a1,  a2,  (uint64_t)&type metadata for OutputTerminal,  (uint64_t)&unk_1001048C8,  (void (*)(_OWORD *))sub_10004AEB8);
}

uint64_t sub_10003E4D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v28 = &type metadata for InputTerminal;
  uint64_t v9 = swift_allocObject(&unk_1001048F0, 120LL, 7LL);
  v27[0] = v9;
  __int128 v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(void *)(v9 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a1 + 96);
  __int128 v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  sub_10004AF38(a1);
  uint64_t v13 = Mirror.init(reflecting:)(v27);
  uint64_t v14 = Mirror.children.getter(v13);
  unint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_10004A2E0(v14, v8);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v17 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  __int16 v28 = &type metadata for InputTerminal;
  uint64_t v18 = swift_allocObject(&unk_1001048F0, 120LL, 7LL);
  v27[0] = v18;
  __int128 v19 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v18 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v18 + 96) = v19;
  *(void *)(v18 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 96);
  __int128 v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v18 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v20;
  __int128 v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v18 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v18 + 64) = v21;
  sub_10004AF38(a2);
  uint64_t v22 = Mirror.init(reflecting:)(v27);
  uint64_t v23 = Mirror.children.getter(v22);
  v15(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_10004A2E0(v23, v17);
  swift_release(v23);
  swift_bridgeObjectRelease_n(v17, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v16, (uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v16);
  return v7 & 1;
}

uint64_t sub_10003E6D4(_OWORD *a1, _OWORD *a2)
{
  return sub_10003E6F0( a1,  a2,  (uint64_t)&type metadata for ExtensionUnit,  (uint64_t)&unk_100104828,  (void (*)(_OWORD *))sub_10004AD34);
}

uint64_t sub_10003E6F0(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_OWORD *))
{
  char v32 = a5;
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = a3;
  unint64_t v15 = (_OWORD *)swift_allocObject(a4, 112LL, 7LL);
  v33[0] = v15;
  __int128 v16 = a1[3];
  v15[3] = a1[2];
  v15[4] = v16;
  __int128 v17 = a1[5];
  void v15[5] = a1[4];
  v15[6] = v17;
  __int128 v18 = a1[1];
  v15[1] = *a1;
  v15[2] = v18;
  a5(a1);
  uint64_t v19 = Mirror.init(reflecting:)(v33);
  uint64_t v20 = Mirror.children.getter(v19);
  __int128 v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_10004A2E0(v20, v14);
  swift_release(v20);
  swift_bridgeObjectRelease_n(v14, 2LL);
  unint64_t v23 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = a3;
  unint64_t v24 = (_OWORD *)swift_allocObject(a4, 112LL, 7LL);
  v33[0] = v24;
  __int128 v25 = a2[3];
  v24[3] = a2[2];
  v24[4] = v25;
  __int128 v26 = a2[5];
  v24[5] = a2[4];
  v24[6] = v26;
  __int128 v27 = a2[1];
  v24[1] = *a2;
  v24[2] = v27;
  v32(a2);
  uint64_t v28 = Mirror.init(reflecting:)(v33);
  uint64_t v29 = Mirror.children.getter(v28);
  v21(v13, v10);
  swift_bridgeObjectRetain();
  char v30 = sub_10004A2E0(v29, v23);
  swift_release(v29);
  swift_bridgeObjectRelease_n(v23, 2LL);
  LOBYTE(v1swift_unknownObjectWeakDestroy(v0 + 3) = sub_10003F388((uint64_t)v22, (uint64_t)v30);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v22);
  return v13 & 1;
}

uint64_t sub_10003E8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v24 = &type metadata for ClockSelector;
  uint64_t v9 = swift_allocObject(&unk_100104738, 72LL, 7LL);
  v23[0] = v9;
  sub_10004AFEC(a1 + 32, (uint64_t)&v30, &qword_1001148F0);
  uint64_t v29 = *(void *)(a1 + 40);
  sub_10004AFEC(a1 + 48, (uint64_t)&v28, &qword_100114938);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(_OWORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(void *)(v9 + 64) = *(void *)(a1 + 48);
  sub_10004AB54(&v30);
  sub_10004AB54(&v29);
  sub_10004AB54(&v28);
  uint64_t v11 = Mirror.init(reflecting:)(v23);
  uint64_t v12 = Mirror.children.getter(v11);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_10004A2E0(v12, v8);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v24 = &type metadata for ClockSelector;
  uint64_t v16 = swift_allocObject(&unk_100104738, 72LL, 7LL);
  v23[0] = v16;
  sub_10004AFEC(a2 + 32, (uint64_t)&v27, &qword_1001148F0);
  uint64_t v26 = *(void *)(a2 + 40);
  sub_10004AFEC(a2 + 48, (uint64_t)&v25, &qword_100114938);
  __int128 v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v17;
  *(_OWORD *)(v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(void *)(v16 + 64) = *(void *)(a2 + 48);
  sub_10004AB54(&v27);
  sub_10004AB54(&v26);
  sub_10004AB54(&v25);
  uint64_t v18 = Mirror.init(reflecting:)(v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v14);
  return v7 & 1;
}

uint64_t sub_10003EB4C(uint64_t a1, uint64_t a2)
{
  return sub_10003EB60(a1, a2, (uint64_t)&type metadata for SelectorUnit, (uint64_t)&unk_100104850);
}

uint64_t sub_10003EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = a3;
  uint64_t v13 = swift_allocObject(a4, 88LL, 7LL);
  v29[0] = v13;
  __int128 v14 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v13 + 64) = v14;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a1 + 64);
  __int128 v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v15;
  sub_10004AE48((void *)a1);
  uint64_t v16 = Mirror.init(reflecting:)(v29);
  uint64_t v17 = Mirror.children.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_10004A2E0(v17, v12);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v12, 2LL);
  unint64_t v20 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = a3;
  uint64_t v21 = swift_allocObject(v28, 88LL, 7LL);
  v29[0] = v21;
  __int128 v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v21 + 64) = v22;
  *(void *)(v21 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 64);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v23;
  sub_10004AE48((void *)a2);
  uint64_t v24 = Mirror.init(reflecting:)(v29);
  uint64_t v25 = Mirror.children.getter(v24);
  v18(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_10004A2E0(v25, v20);
  swift_release(v25);
  swift_bridgeObjectRelease_n(v20, 2LL);
  LOBYTE(v11) = sub_10003F388((uint64_t)v19, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v19);
  return v11 & 1;
}

uint64_t sub_10003ED40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for PowerDomain;
  uint64_t v9 = (_OWORD *)swift_allocObject(&unk_100104788, 64LL, 7LL);
  v23[0] = v9;
  sub_10004AFEC(a1 + 32, (uint64_t)&v28, &qword_1001148F0);
  uint64_t v27 = *(void *)(a1 + 40);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  v9[2] = v10;
  v9[3] = *(_OWORD *)(a1 + 32);
  sub_10004AB54(&v28);
  sub_10004AB54(&v27);
  uint64_t v11 = Mirror.init(reflecting:)(v23);
  uint64_t v12 = Mirror.children.getter(v11);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  __int128 v14 = sub_10004A2E0(v12, v8);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for PowerDomain;
  uint64_t v16 = (_OWORD *)swift_allocObject(&unk_100104788, 64LL, 7LL);
  v23[0] = v16;
  sub_10004AFEC(a2 + 32, (uint64_t)&v26, &qword_1001148F0);
  uint64_t v25 = *(void *)(a2 + 40);
  __int128 v17 = *(_OWORD *)(a2 + 16);
  v16[1] = *(_OWORD *)a2;
  _OWORD v16[2] = v17;
  void v16[3] = *(_OWORD *)(a2 + 32);
  sub_10004AB54(&v26);
  sub_10004AB54(&v25);
  uint64_t v18 = Mirror.init(reflecting:)(v23);
  uint64_t v19 = Mirror.children.getter(v18);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v14);
  return v7 & 1;
}

uint64_t sub_10003EF6C(uint64_t a1, uint64_t a2)
{
  return sub_10003EB60(a1, a2, (uint64_t)&type metadata for FeatureUnit, (uint64_t)&unk_1001048A0);
}

uint64_t sub_10003EF80(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for ClockSource;
  uint64_t v9 = (_OWORD *)swift_allocObject(&unk_100104760, 80LL, 7LL);
  v25[0] = v9;
  __int128 v10 = a1[1];
  v9[1] = *a1;
  v9[2] = v10;
  __int128 v11 = a1[3];
  v9[3] = a1[2];
  v9[4] = v11;
  sub_10004AB84((uint64_t)a1);
  uint64_t v12 = Mirror.init(reflecting:)(v25);
  uint64_t v13 = Mirror.children.getter(v12);
  __int128 v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10004A2E0(v13, v8);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for ClockSource;
  __int128 v17 = (_OWORD *)swift_allocObject(&unk_100104760, 80LL, 7LL);
  v25[0] = v17;
  __int128 v18 = a2[1];
  v17[1] = *a2;
  v17[2] = v18;
  __int128 v19 = a2[3];
  v17[3] = a2[2];
  v17[4] = v19;
  sub_10004AB84((uint64_t)a2);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  __int128 v22 = sub_10004A2E0(v21, v16);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v16, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  return v7 & 1;
}

uint64_t sub_10003F15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for EffectUnit;
  uint64_t v9 = (_OWORD *)swift_allocObject(&unk_100104800, 80LL, 7LL);
  v25[0] = v9;
  uint64_t v30 = *(void *)(a1 + 48);
  sub_10004AFEC(a1 + 56, (uint64_t)&v29, &qword_1001148F0);
  __int128 v10 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  v9[2] = v10;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  v9[3] = *(_OWORD *)(a1 + 32);
  v9[4] = v11;
  sub_10004AB54(&v30);
  sub_10004AB54(&v29);
  uint64_t v12 = Mirror.init(reflecting:)(v25);
  uint64_t v13 = Mirror.children.getter(v12);
  __int128 v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_10004A2E0(v13, v8);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v8, 2LL);
  unint64_t v16 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for EffectUnit;
  __int128 v17 = (_OWORD *)swift_allocObject(&unk_100104800, 80LL, 7LL);
  v25[0] = v17;
  uint64_t v28 = *(void *)(a2 + 48);
  sub_10004AFEC(a2 + 56, (uint64_t)&v27, &qword_1001148F0);
  __int128 v18 = *(_OWORD *)(a2 + 16);
  v17[1] = *(_OWORD *)a2;
  v17[2] = v18;
  __int128 v19 = *(_OWORD *)(a2 + 48);
  v17[3] = *(_OWORD *)(a2 + 32);
  v17[4] = v19;
  sub_10004AB54(&v28);
  sub_10004AB54(&v27);
  uint64_t v20 = Mirror.init(reflecting:)(v25);
  uint64_t v21 = Mirror.children.getter(v20);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  __int128 v22 = sub_10004A2E0(v21, v16);
  swift_release(v21);
  swift_bridgeObjectRelease_n(v16, 2LL);
  LOBYTE(v7) = sub_10003F388((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v15);
  return v7 & 1;
}

uint64_t sub_10003F388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (v4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = 32LL;
    while (1)
    {
      uint64_t result = sub_1000179D0(a1 + v6, (uint64_t)&v10);
      unint64_t v8 = *(void *)(a2 + 16);
      if (v5 == v8)
      {
        sub_100017260((uint64_t)&v10);
        goto LABEL_9;
      }

      if (v5 >= v8) {
        break;
      }
      __int128 v13 = v10;
      __int128 v14 = v11;
      *(void *)&v15[0] = *(void *)&v12[0];
      sub_1000179D0(a2 + v6, (uint64_t)v15 + 8);
      v12[0] = v15[0];
      v12[1] = v15[1];
      __int128 v12[2] = v15[2];
      __int128 v10 = v13;
      __int128 v11 = v14;
      char v9 = static AnyHashable.== infix(_:_:)(&v10, (char *)v12 + 8);
      sub_1000178B0((uint64_t)&v10, &qword_100114908);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(a1);
        return 0LL;
      }

      ++v5;
      v6 += 40LL;
      if (v4 == v5) {
        goto LABEL_9;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10003F4D0(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = HIDWORD(a2);
  unint64_t v5 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(0LL);
  uint64_t v21 = v11;
  int v18 = v2;
  __int16 v19 = v4;
  __int16 v20 = v5;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  __int128 v14 = sub_10004A2E0(v13, v10);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_10003F628(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10003F804( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_10003F634(uint64_t a1, unsigned int a2)
{
  return sub_100040AB8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_10003F640(uint64_t a1, unint64_t a2)
{
  return sub_100041C54( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_10003F64C(uint64_t a1, unsigned int a2)
{
  return sub_10004337C( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_10003F658(uint64_t a1, unsigned int a2)
{
  return sub_100040AB8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_10003F664(uint64_t a1, unint64_t a2, unint64_t a3, __int16 a4)
{
  __int16 v4 = a3;
  __int16 v5 = a2;
  *(_WORD *)&v24[8] = a4;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v9 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  *(void *)uint64_t v24 = a3;
  HIDWORD(v2swift_unknownObjectWeakDestroy(v0 + 2) = *(_DWORD *)&v24[6];
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(0LL);
  uint64_t v27 = v15;
  *(_WORD *)uint64_t v24 = v5;
  *(_WORD *)&v24[2] = v7;
  *(_WORD *)&v24[4] = v8;
  *(_WORD *)&v24[6] = v9;
  *(_WORD *)&v24[8] = v4;
  int v25 = v23;
  int v26 = HIDWORD(v22);
  uint64_t v16 = Mirror.init(reflecting:)(v24);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  int v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v24);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v24);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_10003F7F8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10003F804( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_10003F804( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  int v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v22 = HIDWORD(a3);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = a4(0LL);
  v23[0] = v6;
  v23[1] = v8;
  int v24 = v9;
  int v25 = v5;
  int v26 = v22;
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v14);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_10003F97C(uint64_t a1, unsigned int a2)
{
  return sub_10004337C( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_10003F988(uint64_t a1, unsigned int a2)
{
  return sub_10004337C( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_10003F994(uint64_t a1, unint64_t a2, int a3)
{
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(0LL);
  uint64_t v23 = v13;
  v20[0] = v4;
  v20[1] = v6;
  int v21 = v7;
  int v22 = a3;
  uint64_t v14 = Mirror.init(reflecting:)(v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_10003FAF8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = a3 >> 16;
  unint64_t v25 = HIDWORD(a3);
  unint64_t v26 = HIWORD(a3);
  unint64_t v27 = a4 >> 16;
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(0LL);
  uint64_t v30 = v15;
  v28[0] = v6;
  v28[1] = v8;
  v28[2] = v9;
  void v28[3] = v23;
  v28[4] = v5;
  v28[5] = v24;
  v28[6] = v25;
  v28[7] = v26;
  v28[8] = v4;
  int v29 = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v28);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v28);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v28);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_10003FCB0(uint64_t a1, unint64_t a2)
{
  return sub_10003FCE0( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_10003FCBC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100043500( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_10003FCC8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100043500( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelInformationSegment);
}

uint64_t sub_10003FCD4(uint64_t a1, unint64_t a2)
{
  return sub_10003FCE0( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelDescriptionSegment);
}

uint64_t sub_10003FCE0(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = a3(0LL);
  v19[0] = v4;
  v19[1] = v6;
  __int128 v19[2] = v7;
  uint64_t v13 = Mirror.init(reflecting:)(v19);
  uint64_t v14 = Mirror.children.getter(v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10004A2E0(v14, v12);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease(v15);
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v17, (uint64_t)v19);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v19);
    v17 += 40LL;
    --v16;
  }

  while (v16);
  return swift_bridgeObjectRelease_n(v15, 2LL);
}

uint64_t sub_10003FE44(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = a2 >> 40;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelInformationSegment(0LL);
  uint64_t v25 = v13;
  __int16 v20 = v2;
  char v21 = v4;
  char v22 = v5;
  char v23 = v6;
  char v24 = v7;
  uint64_t v14 = Mirror.init(reflecting:)(&v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)&v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_10003FFB4(uint64_t a1, unint64_t a2)
{
  return sub_1000449B8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_10003FFC0(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = a2 >> 40;
  unint64_t v21 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(0LL);
  uint64_t v28 = v13;
  __int16 v22 = v2;
  char v23 = v4;
  char v24 = v5;
  char v25 = v6;
  char v26 = v7;
  char v27 = v21;
  uint64_t v14 = Mirror.init(reflecting:)(&v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)&v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100040140(uint64_t a1, unsigned int a2)
{
  return sub_10004337C( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_10004014C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004405C( a1,  a2,  a3,  (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_100040158(uint64_t a1, unsigned int a2)
{
  return sub_100044858( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_100040164(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(_WORD *)&v23[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 40;
  unint64_t v22 = HIWORD(a2);
  *(void *)char v23 = a2;
  __int16 v7 = *(_WORD *)&v23[7];
  unsigned int v8 = a3 >> 8;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ProcessingUnitDescriptorPart2(0LL);
  uint64_t v24 = v14;
  v23[0] = v3;
  *(_DWORD *)&v23[1] = v5;
  void v23[5] = v6;
  v23[6] = v22;
  *(_WORD *)&v23[7] = v7;
  v23[9] = v8;
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain(v17);
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000402E8(uint64_t a1, unint64_t a2)
{
  return sub_100040940( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_1000402F4(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v4 = a2 >> 8;
  unsigned int v5 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADCClassSpecificDescriptorHeader(0LL);
  uint64_t v19 = v11;
  v18[0] = v2;
  v18[1] = v4;
  v18[2] = v5;
  uint64_t v12 = Mirror.init(reflecting:)(v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v10);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_10004044C(uint64_t a1, unsigned int a2)
{
  return sub_10004337C( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptorPart2);
}

uint64_t sub_100040458( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  __int16 v5 = a5;
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  unint64_t v10 = a2 >> 16;
  unint64_t v24 = HIDWORD(a2);
  unint64_t v25 = HIWORD(a2);
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = HIWORD(a3);
  unint64_t v28 = a4 >> 16;
  unint64_t v29 = HIDWORD(a4);
  unint64_t v30 = HIWORD(a4);
  unsigned int v31 = HIWORD(a5);
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingSelfDescriptor(0LL);
  v32[3] = v16;
  uint64_t v17 = swift_allocObject(&unk_100104698, 44LL, 7LL);
  v32[0] = v17;
  *(_WORD *)(v17 + 16) = v8;
  *(_WORD *)(v17 + 1_Block_object_dispose((const void *)(v30 - 136), 8) = v10;
  *(_WORD *)(v17 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v24;
  *(_WORD *)(v17 + 2swift_unknownObjectWeakDestroy(v0 + 2) = v25;
  *(_WORD *)(v17 + 24) = v7;
  *(_DWORD *)(v17 + 26) = v26;
  *(_WORD *)(v17 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v27;
  *(_WORD *)(v17 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_WORD *)(v17 + 34) = v28;
  *(_WORD *)(v17 + 36) = v29;
  *(_WORD *)(v17 + 3_Block_object_dispose((const void *)(v30 - 136), 8) = v30;
  *(_WORD *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  *(_WORD *)(v17 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v31;
  uint64_t v18 = Mirror.init(reflecting:)(v32);
  uint64_t v19 = Mirror.children.getter(v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_10004A2E0(v19, v15);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v21 = v20[2];
  if (!v21) {
    return swift_bridgeObjectRelease(v20);
  }
  uint64_t v22 = (uint64_t)(v20 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v22, (uint64_t)v32);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v32);
    v22 += 40LL;
    --v21;
  }

  while (v21);
  return swift_bridgeObjectRelease_n(v20, 2LL);
}

uint64_t sub_100040654(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ExtensionUnitDescriptorPart2(0LL);
  uint64_t v21 = v11;
  __int16 v18 = v2;
  int v19 = v4;
  __int16 v20 = v5;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v10);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_1000407AC(uint64_t a1, unint64_t a2)
{
  return sub_100041C54( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_1000407B8(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 40;
  unint64_t v6 = HIWORD(a2);
  unint64_t v7 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ExtensionUnitDescriptorPart2(0LL);
  uint64_t v25 = v13;
  char v20 = v2;
  int v21 = v4;
  char v22 = v5;
  char v23 = v6;
  char v24 = v7;
  uint64_t v14 = Mirror.init(reflecting:)(&v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain(v12);
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1000179D0(v18, (uint64_t)&v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100040928(uint64_t a1, unsigned int a2)
{
  return sub_1000446F8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_100040934(uint64_t a1, unint64_t a2)
{
  return sub_100040940( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_100040940(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = &v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = a3(0LL);
  char v20 = v4;
  __int16 v21 = v6;
  char v22 = v7;
  char v23 = v8;
  uint64_t v14 = Mirror.init(reflecting:)(&v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v13);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)&v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100040AAC(uint64_t a1, unsigned int a2)
{
  return sub_100040AB8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
}

uint64_t sub_100040AB8(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unsigned int v6 = a2 >> 8;
  unsigned int v7 = HIWORD(a2);
  unsigned int v8 = HIBYTE(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = a3(0LL);
  v20[0] = v4;
  v20[1] = v6;
  _WORD v20[2] = v7;
  v20[3] = v8;
  uint64_t v14 = Mirror.init(reflecting:)(v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v13);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100040C24(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4PowerDomainEntityDescriptor(0LL);
  v17[3] = v8;
  uint64_t v9 = swift_allocObject(&unk_1001046C0, 50LL, 7LL);
  v17[0] = v9;
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(_WORD *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(v1 + 32);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t sub_100040D84(uint64_t a1, unint64_t a2)
{
  return sub_100041C54( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_100040D90(uint64_t a1, unsigned int a2)
{
  return sub_1000446F8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_100040D9C(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = a2 >> 40;
  unint64_t v21 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ACInterfaceHeaderDescriptor(0LL);
  uint64_t v26 = v13;
  v22[0] = v2;
  v22[1] = v4;
  void v22[2] = v5;
  __int16 v23 = v6;
  __int16 v24 = v7;
  char v25 = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100040F1C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unint64_t v22 = a3 >> 16;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioControlSelfDescriptor(0LL);
  uint64_t v25 = v14;
  v23[0] = v4;
  v23[1] = v6;
  _WORD v23[2] = v7;
  void v23[3] = v8;
  v23[4] = v3;
  int v24 = v22;
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_10004109C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = a3 >> 16;
  unint64_t v25 = HIDWORD(a3);
  unint64_t v26 = a4 >> 16;
  unint64_t v27 = HIDWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ConnectorEntityDescriptor(0LL);
  uint64_t v33 = v15;
  v28[0] = v6;
  v28[1] = v8;
  v28[2] = v9;
  void v28[3] = v23;
  v28[4] = v5;
  v28[5] = v24;
  int v29 = v25;
  __int16 v30 = v4;
  __int16 v31 = v26;
  int v32 = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v28);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v28);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v28);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100041254(uint64_t a1, unint64_t a2, char a3)
{
  char v3 = a2;
  v25[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v22 = a2 >> 40;
  unint64_t v24 = HIWORD(a2);
  *(void *)unint64_t v25 = a2;
  int v23 = *(unsigned __int16 *)&v25[7];
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3SRConverterUnitDescriptor(0LL);
  uint64_t v26 = v14;
  v25[0] = v3;
  v25[1] = v5;
  v25[2] = v6;
  void v25[3] = v7;
  v25[4] = v8;
  v25[5] = v22;
  v25[6] = v24;
  *(_WORD *)&v25[7] = v23;
  uint64_t v15 = Mirror.init(reflecting:)(v25);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v25);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v25);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000413F8(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(_DWORD *)&v23[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  *(void *)int v23 = a2;
  int v8 = *(_DWORD *)&v23[5];
  HIDWORD(v21) = a3 >> 8;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockMultiplierDescriptor(0LL);
  uint64_t v24 = v14;
  v23[0] = v3;
  v23[1] = v5;
  _WORD v23[2] = v6;
  void v23[3] = v7;
  v23[4] = v22;
  *(_DWORD *)&_WORD v23[5] = v8;
  *(_WORD *)&v23[9] = WORD2(v21);
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_10004158C(uint64_t a1, unint64_t a2)
{
  return sub_100043BAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_100041598(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v20 = a2 >> 40;
  unint64_t v21 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ClockMultiplierDescriptor(0LL);
  uint64_t v23 = v13;
  v22[0] = v2;
  v22[1] = v4;
  void v22[2] = v5;
  _BYTE v22[3] = v6;
  v22[4] = v7;
  void v22[5] = v20;
  v22[6] = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain(v12);
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100041724(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100042540( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_100041730(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  int v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  unint64_t v24 = HIDWORD(a3);
  unint64_t v25 = HIWORD(a3);
  unint64_t v26 = HIDWORD(a4);
  unint64_t v27 = HIWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4OutputTerminalDescriptor(0LL);
  uint64_t v32 = v15;
  v28[0] = v6;
  v28[1] = v8;
  v28[2] = v9;
  void v28[3] = v22;
  v28[4] = v5;
  v28[5] = v23;
  _WORD v28[6] = v24;
  v28[7] = v25;
  int v29 = v4;
  __int16 v30 = v26;
  __int16 v31 = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v28);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v28);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v28);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_1000418F4(uint64_t a1, unint64_t a2, __int16 a3)
{
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ExtendedDescriptorHeader(0LL);
  uint64_t v22 = v14;
  v21[0] = v4;
  v21[1] = v6;
  v21[2] = v7;
  v21[3] = v8;
  v21[4] = a3;
  uint64_t v15 = Mirror.init(reflecting:)(v21);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v21);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v21);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100041A64(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_100041A70(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a2;
  unint64_t v7 = a2 >> 8;
  *(_DWORD *)&v29[8] = a4;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = HIBYTE(a2);
  unint64_t v25 = a3 >> 8;
  unint64_t v28 = a3 >> 40;
  *(void *)int v29 = a3;
  unsigned int v26 = a4 >> 8;
  int v27 = *(unsigned __int16 *)&v29[7];
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3OutputTerminalDescriptor(0LL);
  uint64_t v33 = v15;
  v29[0] = v5;
  v29[1] = v7;
  void v29[2] = v8;
  void v29[3] = v9;
  *(_WORD *)&v29[4] = v22;
  v29[6] = v23;
  v29[7] = v24;
  v29[8] = v4;
  *(_DWORD *)&v29[9] = v25;
  __int16 v30 = v28;
  __int16 v31 = v27;
  __int16 v32 = v26;
  uint64_t v16 = Mirror.init(reflecting:)(v29);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v29);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v29);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100041C48(uint64_t a1, unint64_t a2)
{
  return sub_100041C54(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_100041C54(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = a3(0LL);
  int v18 = v4;
  __int16 v19 = v6;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_10004A2E0(v13, v11);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_100041DA8(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3HighCapabilityDescriptor(0LL);
  uint64_t v23 = v12;
  __int16 v19 = v2;
  char v20 = v4;
  char v21 = v5;
  __int16 v22 = v6;
  uint64_t v13 = Mirror.init(reflecting:)(&v19);
  uint64_t v14 = Mirror.children.getter(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10004A2E0(v14, v11);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease(v15);
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v17, (uint64_t)&v19);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v19);
    v17 += 40LL;
    --v16;
  }

  while (v16);
  return swift_bridgeObjectRelease_n(v15, 2LL);
}

uint64_t sub_100041F10(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_100041F1C(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a3;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v21 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = HIBYTE(a2);
  unsigned int v24 = HIBYTE(a3);
  unsigned int v25 = a3 >> 8;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2OutputTerminalDescriptor(0LL);
  uint64_t v33 = v14;
  v26[0] = v4;
  v26[1] = v6;
  v26[2] = v7;
  v26[3] = v8;
  __int16 v27 = v21;
  char v28 = v22;
  char v29 = v23;
  char v30 = v3;
  __int16 v31 = v25;
  char v32 = v24;
  uint64_t v15 = Mirror.init(reflecting:)(v26);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain(v17);
  do
  {
    sub_1000179D0(v19, (uint64_t)v26);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v26);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000420D4(uint64_t a1, unsigned int a2)
{
  return sub_1000446F8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_1000420E0(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 40;
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2MixerUnitDescriptorPart2(0LL);
  uint64_t v21 = v11;
  char v18 = v2;
  int v19 = v4;
  char v20 = v5;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain(v10);
  uint64_t v14 = sub_10004A2E0(v13, v10);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain(v14);
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_100042238(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_100042244(uint64_t a1, unint64_t a2, int a3)
{
  int v24 = a3;
  char v3 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = HIBYTE(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1OutputTerminalDescriptor(0LL);
  uint64_t v30 = v14;
  v25[0] = v3;
  v25[1] = v5;
  v25[2] = v6;
  void v25[3] = v7;
  __int16 v26 = v8;
  char v27 = v22;
  char v28 = v23;
  char v29 = v24;
  uint64_t v15 = Mirror.init(reflecting:)(v25);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v25);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v25);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000423DC(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v4 = a2 >> 8;
  unsigned int v5 = HIBYTE(a2);
  uint64_t v6 = type metadata accessor for Mirror(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1MixerUnitDescriptorPart2(0LL);
  uint64_t v21 = v11;
  char v18 = v2;
  __int16 v19 = v4;
  char v20 = v5;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v10);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v10, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_100042534(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100042540( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptor);
}

uint64_t sub_100042540( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  __int16 v7 = a2;
  *(void *)char v28 = a3;
  *(void *)&_WORD v28[8] = a4;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  int v24 = *(_DWORD *)&v28[6];
  unint64_t v25 = HIDWORD(a3);
  unint64_t v26 = a4 >> 16;
  unint64_t v27 = HIDWORD(a4);
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = a5(0LL);
  *(_WORD *)char v28 = v7;
  *(_WORD *)&v28[2] = v9;
  *(_WORD *)&v28[4] = v10;
  *(_WORD *)&_WORD v28[6] = v22;
  *(_WORD *)&_WORD v28[8] = v6;
  *(_WORD *)&v28[10] = v23;
  *(_WORD *)&v28[12] = v25;
  *(_DWORD *)&v28[14] = v24;
  __int16 v29 = v26;
  __int16 v30 = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v28);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRetain();
  char v18 = sub_10004A2E0(v17, v15);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v28);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v28);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100042708(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100008E00(&qword_100114918);
  uint64_t inited = swift_initStackObject(v7, v23);
  *(_OWORD *)(inited + 16) = xmmword_1000D3D30;
  *(void *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xD000000000000011LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x80000001000CF320LL;
  v22[0] = sub_100049734(*(void *)(v1 + 12), *(void *)(v1 + 20), (uint64_t)sub_100049940, 0LL);
  uint64_t v9 = sub_100008E00(&qword_100114920);
  unint64_t v10 = sub_10004A4B4();
  AnyHashable.init<A>(_:)(v22, v9, v10);
  unint64_t v11 = sub_100006D48(inited);
  type metadata accessor for ADC4ExtensionUnitDescriptor(0LL);
  _BYTE v22[3] = v12;
  uint64_t v13 = swift_allocObject(&unk_1001046E8, 52LL, 7LL);
  v22[0] = v13;
  __int128 v14 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v14;
  *(_DWORD *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_DWORD *)(v1 + 32);
  uint64_t v15 = Mirror.init(reflecting:)(v22);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v11);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100042920(uint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unsigned int v22 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClusterDescriptorHeader(0LL);
  uint64_t v24 = v14;
  v23[0] = v4;
  v23[1] = v6;
  _WORD v23[2] = v7;
  void v23[3] = v8;
  v23[4] = v3;
  _WORD v23[5] = v22;
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100042AA0(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  return sub_1000431CC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_100042AAC(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  int v5 = a3;
  char v6 = a2;
  unint64_t v8 = a2 >> 8;
  unint64_t v9 = a2 >> 16;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  unint64_t v25 = HIWORD(a2);
  unint64_t v26 = HIBYTE(a2);
  unint64_t v27 = HIDWORD(a3);
  unint64_t v28 = HIWORD(a3);
  unsigned int v29 = HIWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3InputTerminalDescriptor(0LL);
  uint64_t v39 = v15;
  v30[0] = v6;
  v30[1] = v8;
  v30[2] = v9;
  v30[3] = v23;
  __int16 v31 = v24;
  char v32 = v25;
  char v33 = v26;
  int v34 = v5;
  __int16 v35 = v27;
  __int16 v36 = v28;
  __int16 v37 = v4;
  __int16 v38 = v29;
  uint64_t v16 = Mirror.init(reflecting:)(v30);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v30);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v30);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100042C80(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_100042C8C(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterDescriptorHeader(0LL);
  uint64_t v25 = v13;
  __int16 v20 = v2;
  char v21 = v4;
  char v22 = v5;
  __int16 v23 = v6;
  char v24 = v7;
  uint64_t v14 = Mirror.init(reflecting:)(&v20);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)&v20);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v20);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100042DFC(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_100042E08(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  int v29 = a4;
  char v4 = a3;
  char v5 = a2;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = HIWORD(a2);
  unint64_t v25 = HIBYTE(a2);
  unint64_t v26 = a3 >> 8;
  unint64_t v27 = a3 >> 40;
  unint64_t v28 = HIWORD(a3);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2InputTerminalDescriptor(0LL);
  uint64_t v39 = v15;
  v30[0] = v5;
  v30[1] = v7;
  v30[2] = v8;
  v30[3] = v9;
  __int16 v31 = v23;
  char v32 = v24;
  char v33 = v25;
  char v34 = v4;
  int v35 = v26;
  char v36 = v27;
  __int16 v37 = v28;
  char v38 = v29;
  uint64_t v16 = Mirror.init(reflecting:)(v30);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain(v14);
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain(v18);
  do
  {
    sub_1000179D0(v20, (uint64_t)v30);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v30);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100042FD8(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_100042FE4(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_100042FF0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v21 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = HIBYTE(a2);
  unsigned int v24 = HIBYTE(a3);
  unsigned int v25 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1InputTerminalDescriptor(0LL);
  uint64_t v33 = v14;
  v26[0] = v4;
  v26[1] = v6;
  v26[2] = v7;
  v26[3] = v8;
  __int16 v27 = v21;
  char v28 = v22;
  char v29 = v23;
  __int16 v30 = v3;
  char v31 = v25;
  char v32 = v24;
  uint64_t v15 = Mirror.init(reflecting:)(v26);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v26);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v26);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000431A8(uint64_t a1, unint64_t a2)
{
  return sub_100043BAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_1000431B4(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptor);
}

uint64_t sub_1000431C0(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  return sub_1000431CC( a1,  a2,  a3,  a4,  (uint64_t (*)(void))type metadata accessor for ADC4SelectorUnitDescriptor);
}

uint64_t sub_1000431CC( uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t (*a5)(void))
{
  int v25 = a4;
  __int16 v6 = a3;
  __int16 v7 = a2;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  unint64_t v24 = HIDWORD(a3);
  uint64_t v11 = type metadata accessor for Mirror(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = a5(0LL);
  v26[0] = v7;
  v26[1] = v9;
  v26[2] = v10;
  v26[3] = v22;
  _BYTE v26[4] = v6;
  v26[5] = v23;
  int v27 = v24;
  __int16 v28 = v25;
  uint64_t v16 = Mirror.init(reflecting:)(v26);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v15);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v15, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v26);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v26);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100043370(uint64_t a1, unsigned int a2)
{
  return sub_10004337C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_10004337C(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unsigned int v6 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v19 = a3(0LL);
  v18[0] = v4;
  v18[1] = v6;
  uint64_t v12 = Mirror.init(reflecting:)(v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v11);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_1000434D0(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_1000434DC(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_1000434E8(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_1000434F4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100043500(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_100043500( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  unint64_t v24 = HIDWORD(a3);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = a4(0LL);
  v25[0] = v6;
  v25[1] = v8;
  v25[2] = v9;
  void v25[3] = v22;
  _BYTE v25[4] = v5;
  v25[5] = v23;
  v25[6] = v24;
  uint64_t v15 = Mirror.init(reflecting:)(v25);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v14);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v25);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v25);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100043698(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  int v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = a3 >> 16;
  unint64_t v25 = HIDWORD(a3);
  unint64_t v26 = HIWORD(a3);
  unint64_t v27 = HIDWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClockSourceDescriptor(0LL);
  uint64_t v31 = v15;
  v28[0] = v6;
  v28[1] = v8;
  v28[2] = v9;
  void v28[3] = v23;
  v28[4] = v5;
  v28[5] = v24;
  _WORD v28[6] = v25;
  v28[7] = v26;
  int v29 = v4;
  __int16 v30 = v27;
  uint64_t v16 = Mirror.init(reflecting:)(v28);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v28);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v28);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_100043850(uint64_t a1, unint64_t a2, int a3)
{
  int v22 = a3;
  char v3 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3PowerDomainDescriptor(0LL);
  uint64_t v27 = v14;
  v23[0] = v3;
  v23[1] = v5;
  _WORD v23[2] = v6;
  void v23[3] = v7;
  __int16 v24 = v8;
  __int16 v25 = v21;
  char v26 = v22;
  uint64_t v15 = Mirror.init(reflecting:)(v23);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v23);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v23);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000439DC(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_1000439E8(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(_DWORD *)&v24[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  *(void *)__int16 v24 = a2;
  int v8 = *(_DWORD *)&v24[5];
  unsigned int v21 = HIWORD(a3);
  unsigned int v22 = a3 >> 8;
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockSourceDescriptor(0LL);
  uint64_t v25 = v14;
  v24[0] = v3;
  v24[1] = v5;
  v24[2] = v6;
  v24[3] = v7;
  v24[4] = v23;
  *(_DWORD *)&v24[5] = v8;
  v24[9] = v22;
  *(_WORD *)&_BYTE v24[10] = v21;
  uint64_t v15 = Mirror.init(reflecting:)(v24);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v13);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v24);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v24);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100043B88(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_100043B94(uint64_t a1, unint64_t a2)
{
  return sub_100043BAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSourceDescriptor);
}

uint64_t sub_100043BA0(uint64_t a1, unint64_t a2)
{
  return sub_100043BAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_100043BAC(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v20 = HIDWORD(a2);
  unint64_t v21 = a2 >> 40;
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = HIBYTE(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = a3(0LL);
  v24[0] = v4;
  v24[1] = v6;
  v24[2] = v7;
  v24[3] = v8;
  v24[4] = v20;
  v24[5] = v21;
  v24[6] = v22;
  v24[7] = v23;
  uint64_t v14 = Mirror.init(reflecting:)(v24);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v16 = sub_10004A2E0(v15, v13);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1000179D0(v18, (uint64_t)v24);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v24);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100043D50(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v21 = a2 >> 40;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1FeatureUnitDescriptor(0LL);
  uint64_t v23 = v13;
  v22[0] = v2;
  v22[1] = v4;
  void v22[2] = v5;
  _BYTE v22[3] = v6;
  v22[4] = v7;
  void v22[5] = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100043ED0(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v21 = a2 >> 40;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ASInterfaceDescriptor(0LL);
  uint64_t v24 = v13;
  v22[0] = v2;
  v22[1] = v4;
  void v22[2] = v5;
  _BYTE v22[3] = v6;
  v22[4] = v7;
  __int16 v23 = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10004A2E0(v15, v12);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_100044050(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004405C(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4EffectUnitDescriptor);
}

uint64_t sub_10004405C( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  unint64_t v22 = a3 >> 16;
  unint64_t v23 = HIDWORD(a3);
  unint64_t v24 = HIWORD(a3);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = a4(0LL);
  v25[0] = v6;
  v25[1] = v8;
  v25[2] = v9;
  void v25[3] = v21;
  _BYTE v25[4] = v5;
  v25[5] = v22;
  v25[6] = v23;
  v25[7] = v24;
  uint64_t v15 = Mirror.init(reflecting:)(v25);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_10004A2E0(v16, v14);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v25);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v25);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_100044200(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3EffectUnitDescriptor);
}

uint64_t sub_10004420C(uint64_t a1, unint64_t a2)
{
  return sub_100044218(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2EffectUnitDescriptor);
}

uint64_t sub_100044218(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v20 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = a3(0LL);
  v22[0] = v4;
  v22[1] = v6;
  void v22[2] = v7;
  _BYTE v22[3] = v8;
  __int16 v23 = v20;
  char v24 = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v16 = sub_10004A2E0(v15, v13);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_1000443A0(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = a3 >> 16;
  unint64_t v24 = HIDWORD(a3);
  unsigned int v25 = HIWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4MixerUnitDescriptor(0LL);
  uint64_t v30 = v15;
  v26[0] = v6;
  v26[1] = v8;
  v26[2] = v9;
  v26[3] = v22;
  _BYTE v26[4] = v5;
  v26[5] = v23;
  int v27 = v24;
  __int16 v28 = v4;
  __int16 v29 = v25;
  uint64_t v16 = Mirror.init(reflecting:)(v26);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_10004A2E0(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v20, (uint64_t)v26);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v26);
    v20 += 40LL;
    --v19;
  }

  while (v19);
  return swift_bridgeObjectRelease_n(v18, 2LL);
}

uint64_t sub_10004454C(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptor);
}

uint64_t sub_100044558(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptor);
}

uint64_t sub_100044564(uint64_t a1, unint64_t a2)
{
  return sub_100044570(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1MixerUnitDescriptor);
}

uint64_t sub_100044570(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v21 = HIDWORD(a2);
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = a3(0LL);
  v22[0] = v4;
  v22[1] = v6;
  void v22[2] = v7;
  _BYTE v22[3] = v8;
  _BYTE v22[4] = v21;
  uint64_t v14 = Mirror.init(reflecting:)(v22);
  uint64_t v15 = Mirror.children.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain(v13);
  uint64_t v16 = sub_10004A2E0(v15, v13);
  swift_release(v15);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease(v16);
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain(v16);
  do
  {
    sub_1000179D0(v18, (uint64_t)v22);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v22);
    v18 += 40LL;
    --v17;
  }

  while (v17);
  return swift_bridgeObjectRelease_n(v16, 2LL);
}

uint64_t sub_1000446EC(uint64_t a1, unsigned int a2)
{
  return sub_1000446F8(a1, a2, (uint64_t (*)(void))type metadata accessor for IOUSBDescriptorHeader);
}

uint64_t sub_1000446F8(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unsigned int v6 = a2 >> 8;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v19 = a3(0LL);
  v18[0] = v4;
  v18[1] = v6;
  uint64_t v12 = Mirror.init(reflecting:)(v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain(v11);
  uint64_t v14 = sub_10004A2E0(v13, v11);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain(v14);
  do
  {
    sub_1000179D0(v16, (uint64_t)v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_10004484C(uint64_t a1, unsigned int a2)
{
  return sub_100044858(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterEndSegment);
}

uint64_t sub_100044858(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unsigned int v6 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = a3(0LL);
  __int16 v18 = v4;
  char v19 = v6;
  uint64_t v12 = Mirror.init(reflecting:)(&v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v11);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_1000449AC(uint64_t a1, unint64_t a2)
{
  return sub_1000449B8( a1,  a2,  (uint64_t (*)(void))type metadata accessor for ADC3ClusterClusterDescriptionSegment);
}

uint64_t sub_1000449B8(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  uint64_t v8 = type metadata accessor for Mirror(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = a3(0LL);
  __int16 v19 = v4;
  char v20 = v6;
  __int16 v21 = v7;
  uint64_t v13 = Mirror.init(reflecting:)(&v19);
  uint64_t v14 = Mirror.children.getter(v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10004A2E0(v14, v12);
  swift_release(v14);
  swift_bridgeObjectRelease_n(v12, 2LL);
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease(v15);
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v17, (uint64_t)&v19);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)&v19);
    v17 += 40LL;
    --v16;
  }

  while (v16);
  return swift_bridgeObjectRelease_n(v15, 2LL);
}

uint64_t sub_100044B1C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for MixerUnit;
  uint64_t v8 = swift_allocObject(&unk_100104878, 104LL, 7LL);
  v17[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(v1 + 64);
  *(void *)(v8 + 96) = *(void *)(v1 + 80);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  sub_10004ADC4((void *)v1);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t sub_100044C94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for SampleRateConverter;
  uint64_t v8 = swift_allocObject(&unk_1001047B0, 88LL, 7LL);
  v17[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(void *)(v8 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(v1 + 64);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  sub_10004AC18(v1);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t sub_100044E04(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  void v18[3] = &type metadata for ControlInterface;
  uint64_t v8 = swift_allocObject(&unk_100104918, 136LL, 7LL);
  v18[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v8 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v8 + 96) = v9;
  *(_OWORD *)(v8 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(v1 + 96);
  *(void *)(v8 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(v1 + 112);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  __int128 v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v11;
  sub_100030860((void *)v1);
  uint64_t v12 = Mirror.init(reflecting:)(v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain(v7);
  uint64_t v14 = sub_10004A2E0(v13, v7);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain(v14);
  do
  {
    sub_1000179D0(v16, (uint64_t)v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_100044F84(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  void v16[3] = &type metadata for ClockMultiplier;
  uint64_t v8 = swift_allocObject(&unk_100104710, 68LL, 7LL);
  v16[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(_DWORD *)(v8 + 64) = *(_DWORD *)(v1 + 48);
  sub_10004AAF8(v1);
  uint64_t v10 = Mirror.init(reflecting:)(v16);
  uint64_t v11 = Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_10004A2E0(v11, v7);
  swift_release(v11);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease(v12);
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v14, (uint64_t)v16);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v16);
    v14 += 40LL;
    --v13;
  }

  while (v13);
  return swift_bridgeObjectRelease_n(v12, 2LL);
}

uint64_t sub_1000450F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for ProcessingUnit;
  uint64_t v8 = (_OWORD *)swift_allocObject(&unk_1001047D8, 96LL, 7LL);
  v17[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 48);
  v8[3] = *(_OWORD *)(v1 + 32);
  v8[4] = v9;
  _OWORD v8[5] = *(_OWORD *)(v1 + 64);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  v8[1] = *(_OWORD *)v1;
  v8[2] = v10;
  sub_10004AC7C((void *)v1);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t sub_100045264(uint64_t a1)
{
  return sub_100045414( a1,  (uint64_t)&type metadata for OutputTerminal,  (uint64_t)&unk_1001048C8,  (void (*)(_OWORD *))sub_10004AEB8);
}

uint64_t sub_100045280(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  void v18[3] = &type metadata for InputTerminal;
  uint64_t v8 = swift_allocObject(&unk_1001048F0, 120LL, 7LL);
  v18[0] = v8;
  __int128 v9 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v8 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v8 + 96) = v9;
  *(void *)(v8 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(v1 + 96);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  __int128 v11 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v11;
  sub_10004AF38(v1);
  uint64_t v12 = Mirror.init(reflecting:)(v18);
  uint64_t v13 = Mirror.children.getter(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_10004A2E0(v13, v7);
  swift_release(v13);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease(v14);
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v16, (uint64_t)v18);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v18);
    v16 += 40LL;
    --v15;
  }

  while (v15);
  return swift_bridgeObjectRelease_n(v14, 2LL);
}

uint64_t sub_1000453F8(uint64_t a1)
{
  return sub_100045414( a1,  (uint64_t)&type metadata for ExtensionUnit,  (uint64_t)&unk_100104828,  (void (*)(_OWORD *))sub_10004AD34);
}

uint64_t sub_100045414(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *))
{
  uint64_t v9 = type metadata accessor for Mirror(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v24[3] = a2;
  uint64_t v14 = (_OWORD *)swift_allocObject(a3, 112LL, 7LL);
  v24[0] = v14;
  __int128 v15 = v4[3];
  v14[3] = v4[2];
  v14[4] = v15;
  __int128 v16 = v4[5];
  v14[5] = v4[4];
  v14[6] = v16;
  __int128 v17 = v4[1];
  v14[1] = *v4;
  __int128 v14[2] = v17;
  a4(v4);
  uint64_t v18 = Mirror.init(reflecting:)(v24);
  uint64_t v19 = Mirror.children.getter(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  char v20 = sub_10004A2E0(v19, v13);
  swift_release(v19);
  swift_bridgeObjectRelease_n(v13, 2LL);
  uint64_t v21 = v20[2];
  if (!v21) {
    return swift_bridgeObjectRelease(v20);
  }
  uint64_t v22 = (uint64_t)(v20 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v22, (uint64_t)v24);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v24);
    v22 += 40LL;
    --v21;
  }

  while (v21);
  return swift_bridgeObjectRelease_n(v20, 2LL);
}

uint64_t sub_100045594(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for ClockSelector;
  uint64_t v8 = swift_allocObject(&unk_100104738, 72LL, 7LL);
  v17[0] = v8;
  sub_10004AFEC(v1 + 32, (uint64_t)&v20, &qword_1001148F0);
  uint64_t v19 = *(void *)(v1 + 40);
  sub_10004AFEC(v1 + 48, (uint64_t)&v18, &qword_100114938);
  __int128 v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  *(_OWORD *)(v8 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v1 + 32);
  *(void *)(v8 + 64) = *(void *)(v1 + 48);
  sub_10004AB54(&v20);
  sub_10004AB54(&v19);
  sub_10004AB54(&v18);
  uint64_t v10 = Mirror.init(reflecting:)(v17);
  uint64_t v11 = Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_10004A2E0(v11, v7);
  swift_release(v11);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease(v12);
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v14, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v14 += 40LL;
    --v13;
  }

  while (v13);
  return swift_bridgeObjectRelease_n(v12, 2LL);
}

uint64_t sub_100045750(uint64_t a1)
{
  return sub_100045764(a1, (uint64_t)&type metadata for SelectorUnit, (uint64_t)&unk_100104850);
}

uint64_t sub_100045764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v21[3] = a2;
  uint64_t v12 = swift_allocObject(a3, 88LL, 7LL);
  v21[0] = v12;
  __int128 v13 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v12 + 64) = v13;
  *(void *)(v12 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(v3 + 64);
  __int128 v14 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)v3;
  *(_OWORD *)(v12 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v14;
  sub_10004AE48((void *)v3);
  uint64_t v15 = Mirror.init(reflecting:)(v21);
  uint64_t v16 = Mirror.children.getter(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  __int128 v17 = sub_10004A2E0(v16, v11);
  swift_release(v16);
  swift_bridgeObjectRelease_n(v11, 2LL);
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease(v17);
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v19, (uint64_t)v21);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v21);
    v19 += 40LL;
    --v18;
  }

  while (v18);
  return swift_bridgeObjectRelease_n(v17, 2LL);
}

uint64_t sub_1000458D8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  void v16[3] = &type metadata for PowerDomain;
  uint64_t v8 = (_OWORD *)swift_allocObject(&unk_100104788, 64LL, 7LL);
  v16[0] = v8;
  sub_10004AFEC(v1 + 32, (uint64_t)&v18, &qword_1001148F0);
  uint64_t v17 = *(void *)(v1 + 40);
  __int128 v9 = *(_OWORD *)(v1 + 16);
  v8[1] = *(_OWORD *)v1;
  v8[2] = v9;
  v8[3] = *(_OWORD *)(v1 + 32);
  sub_10004AB54(&v18);
  sub_10004AB54(&v17);
  uint64_t v10 = Mirror.init(reflecting:)(v16);
  uint64_t v11 = Mirror.children.getter(v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_10004A2E0(v11, v7);
  swift_release(v11);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease(v12);
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v14, (uint64_t)v16);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v16);
    v14 += 40LL;
    --v13;
  }

  while (v13);
  return swift_bridgeObjectRelease_n(v12, 2LL);
}

uint64_t sub_100045A70(uint64_t a1)
{
  return sub_100045764(a1, (uint64_t)&type metadata for FeatureUnit, (uint64_t)&unk_1001048A0);
}

uint64_t sub_100045A84(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for ClockSource;
  uint64_t v8 = (_OWORD *)swift_allocObject(&unk_100104760, 80LL, 7LL);
  v17[0] = v8;
  __int128 v9 = v1[1];
  v8[1] = *v1;
  v8[2] = v9;
  __int128 v10 = v1[3];
  v8[3] = v1[2];
  v8[4] = v10;
  sub_10004AB84((uint64_t)v1);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t sub_100045BEC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = &type metadata for EffectUnit;
  uint64_t v8 = (_OWORD *)swift_allocObject(&unk_100104800, 80LL, 7LL);
  v17[0] = v8;
  uint64_t v19 = *(void *)(v1 + 48);
  sub_10004AFEC(v1 + 56, (uint64_t)&v18, &qword_1001148F0);
  __int128 v9 = *(_OWORD *)(v1 + 16);
  v8[1] = *(_OWORD *)v1;
  v8[2] = v9;
  __int128 v10 = *(_OWORD *)(v1 + 48);
  v8[3] = *(_OWORD *)(v1 + 32);
  v8[4] = v10;
  sub_10004AB54(&v19);
  sub_10004AB54(&v18);
  uint64_t v11 = Mirror.init(reflecting:)(v17);
  uint64_t v12 = Mirror.children.getter(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_10004A2E0(v12, v7);
  swift_release(v12);
  swift_bridgeObjectRelease_n(v7, 2LL);
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease(v13);
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_1000179D0(v15, (uint64_t)v17);
    AnyHashable.hash(into:)(a1);
    sub_100017260((uint64_t)v17);
    v15 += 40LL;
    --v14;
  }

  while (v14);
  return swift_bridgeObjectRelease_n(v13, 2LL);
}

uint64_t StreamingAltInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 2LL);
}

uint64_t StreamingInterface.altSettings.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

uint64_t StreamingInterface.otherStreamHasImplicit.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ControlInterface.hasLatencyControl.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t StreamingInterface.exceptionList.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 24));
}

uint64_t ControlInterface.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 32));
  *(void *)(v1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = a1;
  return result;
}

uint64_t (*ControlInterface.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t ControlInterface.interruptEP.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10000AF40(v1 + 40, a1, &qword_1001148E8);
}

uint64_t ControlInterface.interruptEP.setter(uint64_t a1)
{
  return sub_10004B044(a1, v1 + 40, &qword_1001148E8);
}

uint64_t (*ControlInterface.interruptEP.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t StreamingInterface.interfaceProtocol.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 7LL);
}

uint64_t ControlInterface.highestExceptionLevel.getter()
{
  if (v21 && (uint64_t v1 = *(void *)(v21 + 16)) != 0)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (unsigned __int8 *)(v21 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!(_DWORD)v2) {
          uint64_t v2 = 1LL;
        }
      }

      else if (v2 < 2)
      {
        if (v4 == 14) {
          uint64_t v2 = 1LL;
        }
        else {
          uint64_t v2 = 2LL;
        }
      }

      --v1;
    }

    while (v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v19 = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain(v6);
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      __int128 v10 = (void *)(v8 + 40 * i);
      uint64_t v11 = v10[3];
      uint64_t v12 = v10[4];
      sub_1000178EC(v10, v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = (unsigned __int8 *)(v13 + 32);
          do
          {
            int v17 = *v15++;
            int v16 = v17;
            if (v17 == 14 || v16 == 60 || v16 == 59)
            {
              if (!(_DWORD)v2) {
                uint64_t v2 = 1LL;
              }
            }

            else if (v2 < 2)
            {
              if (v16 == 14) {
                uint64_t v2 = 1LL;
              }
              else {
                uint64_t v2 = 2LL;
              }
            }

            --v14;
          }

          while (v14);
        }

        swift_bridgeObjectRelease(v13);
      }
    }

    sub_100045FD8(&v19);
  }

  return v2;
}

void *sub_100045FD8(void *a1)
{
  return a1;
}

void *sub_100046000(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 8) + 16LL))
  {
    unint64_t v4 = sub_10000AE14();
    uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
    *(_BYTE *)uint64_t v6 = 26;
    *(void *)(v6 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v6 + 16) = 0xE000000000000000LL;
    *(void *)(v6 + 24) = 0xD00000000000001DLL;
    *(void *)(v6 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF3A0LL;
    *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
    *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
    uint64_t v7 = 172LL;
LABEL_3:
    *(void *)(v6 + 56) = v7;
    swift_willThrow(v5);
    return v3;
  }

  uint64_t v9 = v1;
  uint64_t v10 = *(void *)(v1 + 24);
  if (!v10)
  {
    unint64_t v26 = sub_10000AE14();
    uint64_t v5 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
    *(_BYTE *)uint64_t v6 = 26;
    *(void *)(v6 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v6 + 16) = 0xE000000000000000LL;
    *(void *)(v6 + 24) = 0xD00000000000001DLL;
    *(void *)(v6 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF3A0LL;
    *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
    *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
    uint64_t v7 = 173LL;
    goto LABEL_3;
  }

  uint64_t v11 = v2;
  uint64_t v32 = *(void *)(v10 + 16);
  if (!v32) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = (void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData);
  swift_bridgeObjectRetain(v10);
  uint64_t v14 = 0LL;
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v27 = v10;
  while (1)
  {
    sub_10003194C(*(_WORD *)(v10 + 2 * v14 + 32), a1, v9);
    if (v11)
    {
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v10);
      return v3;
    }

    int v16 = v15;
    swift_beginAccess(v13, v30, 33LL, 0LL);
    id v17 = v16;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v19 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v18 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v19 >= v18 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
    }
    uint64_t v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
    specialized Array._endMutation()(v20);
    swift_endAccess(v30);
    id v21 = v17;
    uint64_t v22 = (_BYTE *)sub_100080ED4((uint64_t)[v21 bytes]);
    sub_10007C17C(v22, v23, (uint64_t)v30);
    uint64_t v11 = 0LL;
    if (v31) {
      break;
    }

    sub_1000178B0((uint64_t)v30, &qword_100114940);
LABEL_9:
    if (v32 == ++v14)
    {
      swift_bridgeObjectRelease(v10);
      return v3;
    }
  }

  uint64_t result = (void *)sub_10000AF40((uint64_t)v30, (uint64_t)&v28, &qword_100114940);
  if (v29)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
      uint64_t v3 = sub_10004F9C8(0LL, v3[2] + 1LL, 1, v3);
    }
    unint64_t v25 = v3[2];
    unint64_t v24 = v3[3];
    if (v25 >= v24 >> 1) {
      uint64_t v3 = sub_10004F9C8((void *)(v24 > 1), v25 + 1, 1, v3);
    }
    v3[2] = v25 + 1;
    sub_10000AF84(&v28, (uint64_t)&v3[5 * v25 + 4]);

    sub_1000178B0((uint64_t)v30, &qword_100114940);
    uint64_t v10 = v27;
    goto LABEL_9;
  }

  __break(1u);
  return result;
}

void *sub_100046364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v14 = v5;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain(v5);
    while (1)
    {
      sub_100017910(v7, (uint64_t)&v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_1000178EC(&v11, v12);
      sub_100017A40(&v11);
      v7 += 40LL;
      if (!--v6) {
        goto LABEL_7;
      }
    }

    sub_10000AF84(&v11, a2);
  }

  else
  {
    swift_bridgeObjectRetain(v5);
LABEL_7:
    *(void *)(a2 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return sub_100045FD8(&v14);
}

uint64_t sub_100046434(uint64_t a1)
{
  if (!v16)
  {
    sub_1000178B0((uint64_t)v15, &qword_100114940);
LABEL_5:
    sub_100046364(a1, (uint64_t)v15);
    if (v16)
    {
      uint64_t v5 = sub_100008E00(&qword_100114948);
      if ((swift_dynamicCast(v10, v15, v5, &type metadata for ClockSelector, 6LL) & 1) == 0) {
        return 0LL;
      }
      uint64_t v6 = v12;
      uint64_t v7 = v13;
      uint64_t v8 = v14;
      if (*(void *)(v13 + 16) != 1LL)
      {
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v8);
        return 0LL;
      }

      sub_100046364(*(void *)(v13 + 32), (uint64_t)v15);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
      if (v16)
      {
        if ((swift_dynamicCast(v10, v15, v5, &type metadata for ClockSource, 6LL) & 1) != 0) {
          goto LABEL_3;
        }
        return 0LL;
      }
    }

    sub_1000178B0((uint64_t)v15, &qword_100114940);
    return 0LL;
  }

  uint64_t v2 = sub_100008E00(&qword_100114948);
  if ((swift_dynamicCast(v10, v15, v2, &type metadata for ClockSource, 6LL) & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v3 = v11;
  uint64_t v4 = v13;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v4);
  return v3;
}

void *sub_1000465B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v327 = *(void *)(a3 + 8);
  uint64_t v328 = v6;
  int v326 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  int v8 = *(unsigned __int8 *)(a3 + 34);
  int v9 = *(unsigned __int16 *)(a3 + 32);
  uint64_t v324 = *(void *)(a3 + 40);
  uint64_t v325 = v7;
  char v10 = *(_BYTE *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v322 = *(void *)(a3 + 64);
  uint64_t v323 = v11;
  uint64_t v321 = *(void *)(a3 + 72);
  LODWORD(v11) = *(unsigned __int8 *)(a3 + 80);
  int v319 = *(unsigned __int8 *)(a3 + 81);
  int v320 = v11;
  uint64_t v343 = a3;
  uint64_t v318 = *(void *)(a3 + 88);
  uint64_t v12 = type metadata accessor for Mirror(0LL);
  uint64_t v330 = *(void *)(v12 - 8);
  uint64_t v331 = v12;
  __chkstk_darwin(v12);
  v329 = (char *)&v304 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100017910(a1, (uint64_t)&v365);
  v348 = a2;
  v346 = v3;
  uint64_t v14 = *((void *)v3 + 4);
  swift_bridgeObjectRetain(a2);
  if (v14)
  {
    uint64_t v15 = swift_bridgeObjectRetain(v14);
    uint64_t v16 = (void *)sub_10004A270(v15);
    swift_bridgeObjectRelease(v14);
  }

  else
  {
    uint64_t v16 = &_swiftEmptySetSingleton;
  }

  v347 = v16;
  sub_10000AF40((uint64_t)&v365, (uint64_t)&v349, &qword_100113EB0);
  if (!*((void *)&v350 + 1))
  {
    v339 = _swiftEmptyArrayStorage;
LABEL_240:
    sub_1000178B0((uint64_t)&v349, &qword_100113EB0);
    swift_bridgeObjectRelease(a2);
    if (v16[2])
    {
      v285 = sub_100051240((uint64_t)v16);
      swift_bridgeObjectRelease(v16);
      v286 = v346;
      swift_bridgeObjectRelease(*((void *)v346 + 4));
      *((void *)v286 + 4) = v285;
LABEL_256:
      sub_1000178B0((uint64_t)&v365, &qword_100113EB0);
      return v339;
    }

    v287 = v16;
LABEL_251:
    swift_bridgeObjectRelease(v287);
    goto LABEL_256;
  }

  int v316 = v9 | (v8 << 16);
  __int128 v332 = xmmword_1000D3D30;
  unint64_t v337 = (unint64_t)"with a circular reference";
  v308 = (void *)0x80000001000CF420LL;
  uint64_t v309 = 0x80000001000CF3F0LL;
  unint64_t v338 = (unint64_t)"createADC4entities(onDevice:)";
  uint64_t v307 = 0x80000001000CF3C0LL;
  v311 = (void *)0x80000001000CF4B0LL;
  v334 = (void *)0x80000001000CF500LL;
  int v315 = v10 & 1;
  uint64_t v305 = 0x80000001000CF550LL;
  uint64_t v306 = 0x80000001000CF580LL;
  uint64_t v314 = 0x80000001000CF5E0LL;
  unint64_t v317 = (unint64_t)"reamEntities:from:)";
  v310 = (void *)0x80000001000CF460LL;
  v339 = _swiftEmptyArrayStorage;
  while (1)
  {
    sub_1000178B0((uint64_t)&v349, &qword_100113EB0);
    sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
    if (*((void *)&v363 + 1))
    {
      uint64_t v17 = sub_100008E00(&qword_100113EC0);
      if ((swift_dynamicCast(&v349, &v362, v17, &type metadata for OutputTerminal, 6LL) & 1) != 0)
      {
        v333 = (void *)v17;
        __int128 v335 = v349;
        LODWORD(v34swift_unknownObjectWeakDestroy(v0 + 2) = v350;
        *(void *)&__int128 v341 = *((void *)&v350 + 1);
        LODWORD(v344) = LOWORD(v351[0]);
        char v18 = BYTE2(v351[0]);
        uint64_t v19 = *((void *)&v351[0] + 1);
        int v20 = LOBYTE(v351[1]);
        uint64_t v21 = *((void *)&v351[1] + 1);
        *(void *)&__int128 v340 = *((void *)&v352[0] + 1);
        uint64_t v22 = *(void *)&v352[0];
        LODWORD(v336) = LOWORD(v352[1]);
        uint64_t v23 = *((void *)&v352[1] + 1);
        unint64_t v24 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
        *((void *)&v350 + 1) = &type metadata for OutputTerminal;
        uint64_t v25 = swift_allocObject(&unk_1001048C8, 112LL, 7LL);
        *(void *)&__int128 v349 = v25;
        uint64_t v26 = *((void *)&v335 + 1);
        *(void *)(v25 + 16) = v335;
        *(void *)(v25 + 24) = v26;
        *(_BYTE *)(v25 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v342;
        *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v341;
        *(_BYTE *)(v25 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v18;
        *(_WORD *)(v25 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v344;
        *(void *)(v25 + 56) = v19;
        LODWORD(v344) = v20;
        *(_BYTE *)(v25 + 64) = v20;
        *(void *)(v25 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v21;
        *(void *)(v25 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v22;
        *(void *)(v25 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v340;
        *(_WORD *)(v25 + 96) = v336;
        *(void *)(v25 + 104) = v23;
        *(void *)&__int128 v341 = v23;
        swift_bridgeObjectRetain(v23);
        *(void *)&__int128 v342 = v22;
        swift_bridgeObjectRetain(v22);
        uint64_t v27 = v329;
        uint64_t v28 = Mirror.init(reflecting:)(&v349);
        uint64_t v29 = Mirror.children.getter(v28);
        uint64_t v30 = v331;
        uint64_t v31 = *(void (**)(char *, uint64_t))(v330 + 8);
        v31(v27, v331);
        swift_bridgeObjectRetain(v24);
        uint64_t v32 = v345;
        uint64_t v33 = sub_10004A2E0(v29, v24);
        swift_release(v29);
        swift_bridgeObjectRelease_n(v24, 2LL);
        unint64_t v34 = sub_100006D48((uint64_t)_swiftEmptyArrayStorage);
        *((void *)&v350 + 1) = &type metadata for OutputTerminal;
        int v35 = (_OWORD *)swift_allocObject(&unk_1001048C8, 112LL, 7LL);
        *(void *)&__int128 v349 = v35;
        char v36 = (_OWORD *)v343;
        __int128 v37 = *(_OWORD *)(v343 + 48);
        v35[3] = *(_OWORD *)(v343 + 32);
        v35[4] = v37;
        __int128 v38 = v36[5];
        v35[5] = v36[4];
        v35[6] = v38;
        __int128 v39 = v36[1];
        v35[1] = *v36;
        void v35[2] = v39;
        sub_10004AEB8((uint64_t)v36);
        uint64_t v40 = Mirror.init(reflecting:)(&v349);
        uint64_t v41 = Mirror.children.getter(v40);
        v31(v27, v30);
        swift_bridgeObjectRetain(v34);
        __int16 v42 = sub_10004A2E0(v41, v34);
        swift_release(v41);
        swift_bridgeObjectRelease_n(v34, 2LL);
        LOBYTE(v41) = sub_10003F388((uint64_t)v33, (uint64_t)v42);
        uint64_t v345 = v32;
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v33);
        if ((v41 & 1) == 0) {
          sub_100029840( 0xD000000000000017LL,  v314,  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  226LL);
        }
        if ((v344 & 1) != 0) {
          goto LABEL_277;
        }
        uint64_t v43 = *((void *)v346 + 1);
        uint64_t v44 = *(void *)(v43 + 16);
        if (v44)
        {
          uint64_t v45 = v43 + 32;
          swift_bridgeObjectRetain(*((void *)v346 + 1));
          while (1)
          {
            sub_100017910(v45, (uint64_t)&v349);
            uint64_t v46 = *((void *)&v350 + 1);
            uint64_t v47 = *(void *)&v351[0];
            sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
            sub_100017A40(&v349);
            v45 += 40LL;
            if (!--v44) {
              goto LABEL_119;
            }
          }

          sub_10000AF84(&v349, (uint64_t)&v362);
        }

        else
        {
          swift_bridgeObjectRetain(*((void *)v346 + 1));
LABEL_119:
          uint64_t v364 = 0LL;
          __int128 v362 = 0u;
          __int128 v363 = 0u;
        }

        swift_bridgeObjectRelease(v341);
        swift_bridgeObjectRelease(v342);
        swift_bridgeObjectRelease(v43);
        uint64_t v171 = v333;
        if (*((void *)&v363 + 1))
        {
          uint64_t v172 = sub_100008E00(&qword_100114948);
          if ((swift_dynamicCast(&v349, &v362, v172, v171, 6LL) & 1) == 0) {
            goto LABEL_228;
          }
          goto LABEL_7;
        }

        goto LABEL_6;
      }
    }

    else
    {
      sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
    }

    sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
    if (!*((void *)&v363 + 1)) {
      break;
    }
    uint64_t v48 = sub_100008E00(&qword_100113EC0);
    if ((swift_dynamicCast(&v349, &v362, v48, &type metadata for InputTerminal, 6LL) & 1) == 0) {
      goto LABEL_28;
    }
    __int128 v49 = v349;
    char v50 = v350;
    uint64_t v51 = *((void *)&v350 + 1);
    int v52 = BYTE2(v351[0]);
    int v53 = LOWORD(v351[0]);
    __int128 v54 = *(_OWORD *)((char *)v351 + 8);
    char v55 = BYTE8(v351[1]);
    char v56 = BYTE9(v351[1]);
    uint64_t v57 = *(void *)&v352[0];
    __int128 v58 = *(_OWORD *)((char *)v352 + 8);
    __int128 v59 = *(_OWORD *)((char *)&v352[1] + 8);
    uint64_t v60 = *(void *)(v343 + 24);
    if (*((void *)&v350 + 1) != v60)
    {
      __int128 v344 = v349;
      __int128 v341 = *(_OWORD *)((char *)v352 + 8);
      __int128 v342 = *(_OWORD *)((char *)v351 + 8);
      __int128 v61 = v346[5];
      __int128 v372 = v346[4];
      __int128 v373 = v61;
      __int128 v374 = v346[6];
      uint64_t v375 = *((void *)v346 + 14);
      __int128 v62 = v346[1];
      __int128 v368 = *v346;
      __int128 v369 = v62;
      __int128 v63 = v346[3];
      __int128 v370 = v346[2];
      __int128 v371 = v63;
      uint64_t v64 = *(void *)&v352[0];
      __int128 v340 = *(_OWORD *)((char *)&v352[1] + 8);
      char v65 = v350;
      char v66 = BYTE8(v351[1]);
      LODWORD(v336) = BYTE9(v351[1]);
      uint64_t v67 = sub_100046434(*((uint64_t *)&v350 + 1));
      char v56 = v336;
      char v55 = v66;
      char v50 = v65;
      __int128 v59 = v340;
      __int128 v58 = v341;
      __int128 v54 = v342;
      __int128 v49 = v344;
      uint64_t v57 = v64;
      if ((v68 & 1) == 0)
      {
        uint64_t v69 = v67;
        uint64_t v70 = v60;
        uint64_t v71 = v69;
        uint64_t v72 = sub_100046434(v70);
        char v56 = v336;
        char v55 = v66;
        char v50 = v65;
        __int128 v59 = v340;
        __int128 v58 = v341;
        __int128 v54 = v342;
        __int128 v49 = v344;
        uint64_t v57 = v64;
        if ((v73 & 1) == 0)
        {
          if (v71 == v72)
          {
            sub_100029834( 0xD000000000000051LL,  v306,  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  240LL);
            uint64_t v74 = 59LL;
          }

          else
          {
            sub_100029840( 0xD000000000000029LL,  v305,  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  245LL);
            uint64_t v74 = 60LL;
          }

          sub_1000516F0(&v349, v74);
          uint64_t v57 = v64;
          __int128 v49 = v344;
          __int128 v58 = v341;
          __int128 v54 = v342;
          __int128 v59 = v340;
          char v50 = v65;
          char v55 = v66;
          char v56 = v336;
        }
      }
    }

    v269 = v348;
    *(void *)&__int128 v349 = v328;
    *((void *)&v349 + 1) = v327;
    LOBYTE(v35_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v326;
    *((void *)&v350 + 1) = v325;
    LOWORD(v351[0]) = v316;
    BYTE2(v351[0]) = BYTE2(v316);
    *((void *)&v351[0] + 1) = v324;
    LOBYTE(v351[1]) = v315;
    *((void *)&v351[1] + 1) = v323;
    *(void *)&v352[0] = v322;
    *((void *)&v352[0] + 1) = v321;
    LOBYTE(v352[1]) = v320;
    BYTE1(v352[1]) = v319;
    *((void *)&v352[1] + 1) = v318;
    v352[2] = v49;
    LOBYTE(v35swift_unknownObjectWeakDestroy(v0 + 3) = v50;
    *((void *)&v353 + 1) = v51;
    LOWORD(v354[0]) = v53;
    BYTE2(v354[0]) = (v53 | (v52 << 16)) >> 16;
    *(_OWORD *)((char *)v354 + _Block_object_dispose((const void *)(v30 - 136), 8) = v54;
    BYTE8(v354[1]) = v55;
    BYTE9(v354[1]) = v56;
    *(_OWORD *)((char *)v355 + _Block_object_dispose((const void *)(v30 - 136), 8) = v58;
    *(_OWORD *)((char *)&v355[1] + _Block_object_dispose((const void *)(v30 - 136), 8) = v59;
    *(void *)&v355[0] = v57;
    *((void *)&v355[2] + 1) = v348;
    sub_10004AEB8(v343);
    swift_bridgeObjectRetain(v269);
    sub_10004B110(&v349);
    if ((swift_isUniquelyReferenced_nonNull_native(v339) & 1) == 0) {
      v339 = sub_10004F9F0(0LL, v339[2] + 1LL, 1, v339);
    }
    unint64_t v271 = v339[2];
    unint64_t v270 = v339[3];
    if (v271 >= v270 >> 1) {
      v339 = sub_10004F9F0((void *)(v270 > 1), v271 + 1, 1, v339);
    }
    v272 = v339;
    v339[2] = v271 + 1;
    v273 = &v272[26 * v271];
    v273[2] = v349;
    __int128 v274 = v350;
    __int128 v275 = v351[0];
    __int128 v276 = v352[0];
    v273[5] = v351[1];
    v273[6] = v276;
    v273[3] = v274;
    v273[4] = v275;
    __int128 v277 = v352[1];
    __int128 v278 = v352[2];
    __int128 v279 = v354[0];
    v273[9] = v353;
    v273[10] = v279;
    v273[7] = v277;
    v273[8] = v278;
    __int128 v280 = v354[1];
    __int128 v281 = v355[0];
    __int128 v282 = v355[2];
    v273[13] = v355[1];
    v273[14] = v282;
    v273[11] = v280;
    v273[12] = v281;
    sub_10004B194(&v349);
LABEL_222:
    sub_1000178B0((uint64_t)&v365, &qword_100113EB0);
    __int128 v365 = 0u;
    __int128 v366 = 0u;
    uint64_t v367 = 0LL;
LABEL_8:
    sub_10000AF40((uint64_t)&v365, (uint64_t)&v349, &qword_100113EB0);
    if (!*((void *)&v350 + 1))
    {
      uint64_t v16 = v347;
      a2 = v348;
      goto LABEL_240;
    }
  }

  sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
LABEL_28:
  sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
  if (*((void *)&v363 + 1))
  {
    *(void *)&__int128 v335 = sub_100008E00(&qword_100113EC0);
    if ((swift_dynamicCast(&v349, &v362, v335, &type metadata for MixerUnit, 6LL) & 1) != 0)
    {
      *(void *)&__int128 v342 = v349;
      LODWORD(v31swift_unknownObjectWeakDestroy(v0 + 2) = BYTE8(v349);
      *(void *)&__int128 v341 = v350;
      LODWORD(v344) = WORD4(v350);
      char v75 = BYTE10(v350);
      uint64_t v336 = *(void *)&v351[0];
      DWORD2(v335) = WORD4(v351[0]);
      v333 = *(void **)((char *)v351 + 12);
      int v313 = WORD2(v351[1]);
      uint64_t v76 = *((void *)&v351[1] + 1);
      __int128 v78 = v352[0];
      uint64_t v77 = *(void *)&v352[1];
      int v79 = v348;
      uint64_t v80 = sub_100008E00(&qword_100114968);
      uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
      *(_OWORD *)(v81 + 16) = v332;
      *(void *)(v81 + 56) = &type metadata for MixerUnit;
      *(void *)(v81 + 64) = sub_10001A64C();
      uint64_t v82 = swift_allocObject(&unk_100104878, 104LL, 7LL);
      *(void *)(v81 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v82;
      *(void *)(v82 + 16) = v342;
      *(_BYTE *)(v82 + 24) = v312;
      *(void *)(v82 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v341;
      *(_BYTE *)(v82 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v75;
      *(_WORD *)(v82 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v344;
      *(void *)(v82 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v336;
      *(_WORD *)(v82 + 56) = WORD4(v335);
      *(void *)(v82 + 6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v333;
      *(_WORD *)(v82 + 6_Block_object_dispose((const void *)(v30 - 136), 8) = v313;
      *(void *)(v82 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v76;
      *(_OWORD *)(v82 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v78;
      *(void *)(v82 + 96) = v77;
      *(void *)&__int128 v349 = v79;
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(*((void *)&v78 + 1));
      sub_100092D7C(v81);
      uint64_t v83 = v349;
      swift_bridgeObjectRelease(v77);
      swift_bridgeObjectRelease(*((void *)&v78 + 1));
      swift_bridgeObjectRelease(v78);
      uint64_t v84 = v76;
      uint64_t v336 = *(void *)(v76 + 16);
      if (v336)
      {
        unint64_t v85 = 0LL;
        uint64_t v86 = *(void *)(v83 + 16);
        *(void *)&__int128 v341 = v76 + 32;
        v333 = (void *)(v83 + 32);
        *(void *)&__int128 v342 = v339;
        *(void *)&__int128 v344 = v83;
        *((void *)&v335 + 1) = v86;
        *(void *)&__int128 v340 = v76;
        while (1)
        {
          if (v85 >= *(void *)(v84 + 16)) {
            goto LABEL_258;
          }
          uint64_t v87 = *(void *)(v341 + 8 * v85);
          if (!v86) {
            goto LABEL_41;
          }
          swift_bridgeObjectRetain(v83);
          uint64_t v88 = (uint64_t)v333;
          uint64_t v89 = v86;
          do
          {
            sub_100017910(v88, (uint64_t)&v349);
            uint64_t v91 = *((void *)&v350 + 1);
            uint64_t v90 = *(void *)&v351[0];
            sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
            uint64_t v92 = (*(uint64_t (**)(uint64_t))(*(void *)(v90 + 8) + 16LL))(v91);
            sub_100017A40(&v349);
            if (v92 == v87)
            {
              uint64_t v83 = v344;
              swift_bridgeObjectRelease(v344);
              *(void *)&__int128 v349 = 0LL;
              *((void *)&v349 + 1) = 0xE000000000000000LL;
              _StringGuts.grow(_:)(66LL);
              v98._countAndFlagsBits = 0xD000000000000040LL;
              v98._object = (void *)(v317 | 0x8000000000000000LL);
              String.append(_:)(v98);
              *(void *)&__int128 v362 = v87;
              v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
              object = v99._object;
              String.append(_:)(v99);
              swift_bridgeObjectRelease(object);
              uint64_t v101 = *((void *)&v349 + 1);
              sub_100029840( v349,  *((uint64_t *)&v349 + 1),  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  265LL);
              swift_bridgeObjectRelease(v101);
              sub_1000516F0(&v349, 95LL);
              goto LABEL_34;
            }

            v88 += 40LL;
            --v89;
          }

          while (v89);
          swift_bridgeObjectRelease(v344);
LABEL_41:
          uint64_t v93 = *((void *)v346 + 1);
          uint64_t v94 = *(void *)(v93 + 16);
          if (v94)
          {
            uint64_t v95 = v93 + 32;
            swift_bridgeObjectRetain(*((void *)v346 + 1));
            while (1)
            {
              sub_100017910(v95, (uint64_t)&v356);
              uint64_t v96 = v357;
              uint64_t v97 = v358;
              sub_1000178EC(&v356, v357);
              sub_100017A40(&v356);
              v95 += 40LL;
              if (!--v94) {
                goto LABEL_48;
              }
            }

            sub_10000AF84(&v356, (uint64_t)&v359);
          }

          else
          {
            swift_bridgeObjectRetain(*((void *)v346 + 1));
LABEL_48:
            uint64_t v361 = 0LL;
            __int128 v359 = 0u;
            __int128 v360 = 0u;
          }

          swift_bridgeObjectRelease(v93);
          uint64_t v102 = v344;
          BOOL v103 = (void *)v342;
          if (!*((void *)&v360 + 1))
          {
            sub_1000178B0((uint64_t)&v359, &qword_100114940);
            __int128 v362 = 0u;
            __int128 v363 = 0u;
            uint64_t v364 = 0LL;
            goto LABEL_245;
          }

          uint64_t v104 = sub_100008E00(&qword_100114948);
          if ((swift_dynamicCast(&v362, &v359, v104, v335, 6LL) & 1) == 0) {
            break;
          }
          if (!*((void *)&v363 + 1)) {
            goto LABEL_245;
          }
          sub_10000AF84(&v362, (uint64_t)&v349);
          uint64_t v105 = v345;
          uint64_t v106 = sub_1000465B0(&v349, v102, v343);
          uint64_t v345 = v105;
          if (v105) {
            goto LABEL_238;
          }
          uint64_t v107 = v106;
          uint64_t v108 = *(void *)(v106 + 16);
          int64_t v109 = v103[2];
          int64_t v110 = v109 + v108;
          if (__OFADD__(v109, v108)) {
            goto LABEL_259;
          }
          uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(v103);
          if (!(_DWORD)isUniquelyReferenced_nonNull_native || v110 > v103[3] >> 1)
          {
            if (v109 <= v110) {
              int64_t v112 = v109 + v108;
            }
            else {
              int64_t v112 = v109;
            }
            *(void *)&__int128 v342 = sub_10004F9F0(isUniquelyReferenced_nonNull_native, v112, 1, v103);
          }

          uint64_t v83 = v344;
          if (!*(void *)(v107 + 16))
          {
            if (!v108) {
              goto LABEL_33;
            }
            goto LABEL_260;
          }

          uint64_t v113 = *(void *)(v342 + 16);
          if ((*(void *)(v342 + 24) >> 1) - v113 < v108) {
            goto LABEL_262;
          }
          unint64_t v114 = v342 + 208 * v113 + 32;
          if (v107 + 32 < v114 + 208 * v108 && v114 < v107 + 32 + 208 * v108) {
            goto LABEL_281;
          }
          swift_arrayInitWithCopy(v114);
          if (!v108) {
            goto LABEL_33;
          }
          uint64_t v115 = *(void *)(v342 + 16);
          BOOL v116 = __OFADD__(v115, v108);
          uint64_t v117 = v115 + v108;
          if (v116) {
            goto LABEL_268;
          }
          *(void *)(v342 + 16) = v117;
LABEL_33:
          swift_bridgeObjectRelease(v107);
          sub_100017A40(&v349);
LABEL_34:
          ++v85;
          uint64_t v86 = *((void *)&v335 + 1);
          uint64_t v84 = v340;
          if (v85 == v336) {
            goto LABEL_211;
          }
        }

        uint64_t v364 = 0LL;
        __int128 v362 = 0u;
        __int128 v363 = 0u;
LABEL_245:
        swift_bridgeObjectRelease(v340);
        swift_bridgeObjectRelease(v102);
        v288 = v347;
        swift_bridgeObjectRelease(v103);
        swift_bridgeObjectRelease(v288);
        swift_bridgeObjectRelease(v348);
        sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
        unint64_t v289 = sub_10000AE14();
        uint64_t v290 = swift_allocError(&type metadata for AUAError, v289, 0LL, 0LL);
        *(_BYTE *)uint64_t v291 = 45;
        *(void *)(v291 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v291 + 16) = 0xE000000000000000LL;
        unint64_t v292 = v337 | 0x8000000000000000LL;
        *(void *)(v291 + 24) = 0xD000000000000033LL;
        *(void *)(v291 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v292;
        unint64_t v293 = v338 | 0x8000000000000000LL;
        *(void *)(v291 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
        *(void *)(v291 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v293;
        uint64_t v294 = 276LL;
LABEL_255:
        *(void *)(v291 + 56) = v294;
        swift_willThrow(v290);
        goto LABEL_256;
      }

      goto LABEL_165;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
  }

  sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
  if (!*((void *)&v363 + 1))
  {
    sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
LABEL_114:
    sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
    if (*((void *)&v363 + 1))
    {
      *(void *)&__int128 v335 = sub_100008E00(&qword_100113EC0);
      if ((swift_dynamicCast(&v349, &v362, v335, &type metadata for SelectorUnit, 6LL) & 1) != 0)
      {
        unint64_t v161 = v348;
        *(void *)&__int128 v342 = v349;
        DWORD2(v335) = BYTE8(v349);
        uint64_t v162 = v350;
        LODWORD(v344) = WORD4(v350);
        char v163 = BYTE10(v350);
        *(void *)&__int128 v341 = *(void *)&v351[0];
        LODWORD(v336) = WORD4(v351[0]);
        __int128 v164 = v351[1];
        uint64_t v165 = *(void *)&v352[0];
        uint64_t v166 = sub_100008E00(&qword_100114968);
        uint64_t v167 = swift_allocObject(v166, 72LL, 7LL);
        *(_OWORD *)(v167 + 16) = v332;
        *(void *)(v167 + 56) = &type metadata for SelectorUnit;
        *(void *)(v167 + 64) = sub_10001B6C4();
        uint64_t v168 = swift_allocObject(&unk_100104850, 88LL, 7LL);
        *(void *)(v167 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v168;
        *(void *)(v168 + 16) = v342;
        *(_BYTE *)(v168 + 24) = BYTE8(v335);
        *(void *)(v168 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v162;
        *(_BYTE *)(v168 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v163;
        *(_WORD *)(v168 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v344;
        *(void *)(v168 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v341;
        *(_WORD *)(v168 + 56) = v336;
        *(_OWORD *)(v168 + 64) = v164;
        *(void *)(v168 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v165;
        *(void *)&__int128 v349 = v161;
        swift_bridgeObjectRetain(v165);
        swift_bridgeObjectRetain(v161);
        swift_bridgeObjectRetain(v164);
        swift_bridgeObjectRetain(*((void *)&v164 + 1));
        sub_100092D7C(v167);
        uint64_t v83 = v349;
        swift_bridgeObjectRelease(v165);
        swift_bridgeObjectRelease(*((void *)&v164 + 1));
        uint64_t v84 = v164;
        uint64_t v336 = *(void *)(v164 + 16);
        if (v336)
        {
          unint64_t v169 = 0LL;
          uint64_t v170 = *(void *)(v83 + 16);
          *(void *)&__int128 v341 = v164 + 32;
          v333 = (void *)(v83 + 32);
          *(void *)&__int128 v342 = v339;
          *(void *)&__int128 v344 = v83;
          *((void *)&v335 + 1) = v170;
          *(void *)&__int128 v340 = v164;
          while (1)
          {
            if (v169 >= *(void *)(v84 + 16)) {
              goto LABEL_261;
            }
            uint64_t v173 = *(void *)(v341 + 8 * v169);
            if (!v170) {
              goto LABEL_133;
            }
            swift_bridgeObjectRetain(v83);
            uint64_t v174 = (uint64_t)v333;
            uint64_t v175 = v170;
            do
            {
              sub_100017910(v174, (uint64_t)&v349);
              uint64_t v177 = *((void *)&v350 + 1);
              uint64_t v176 = *(void *)&v351[0];
              sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
              uint64_t v178 = (*(uint64_t (**)(uint64_t))(*(void *)(v176 + 8) + 16LL))(v177);
              sub_100017A40(&v349);
              if (v178 == v173)
              {
                uint64_t v83 = v344;
                swift_bridgeObjectRelease(v344);
                *(void *)&__int128 v349 = 0LL;
                *((void *)&v349 + 1) = 0xE000000000000000LL;
                _StringGuts.grow(_:)(69LL);
                v184._countAndFlagsBits = 0xD000000000000043LL;
                v184._object = v311;
                String.append(_:)(v184);
                *(void *)&__int128 v362 = v173;
                v185._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                uint64_t v186 = v185._object;
                String.append(_:)(v185);
                swift_bridgeObjectRelease(v186);
                uint64_t v187 = *((void *)&v349 + 1);
                sub_100029840( v349,  *((uint64_t *)&v349 + 1),  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  314LL);
                swift_bridgeObjectRelease(v187);
                sub_1000516F0(&v349, 95LL);
                goto LABEL_126;
              }

              v174 += 40LL;
              --v175;
            }

            while (v175);
            swift_bridgeObjectRelease(v344);
LABEL_133:
            uint64_t v179 = *((void *)v346 + 1);
            uint64_t v180 = *(void *)(v179 + 16);
            if (v180)
            {
              uint64_t v181 = v179 + 32;
              swift_bridgeObjectRetain(*((void *)v346 + 1));
              while (1)
              {
                sub_100017910(v181, (uint64_t)&v356);
                uint64_t v182 = v357;
                uint64_t v183 = v358;
                sub_1000178EC(&v356, v357);
                sub_100017A40(&v356);
                v181 += 40LL;
                if (!--v180) {
                  goto LABEL_140;
                }
              }

              sub_10000AF84(&v356, (uint64_t)&v359);
            }

            else
            {
              swift_bridgeObjectRetain(*((void *)v346 + 1));
LABEL_140:
              uint64_t v361 = 0LL;
              __int128 v359 = 0u;
              __int128 v360 = 0u;
            }

            swift_bridgeObjectRelease(v179);
            uint64_t v102 = v344;
            BOOL v103 = (void *)v342;
            if (!*((void *)&v360 + 1))
            {
              sub_1000178B0((uint64_t)&v359, &qword_100114940);
              __int128 v362 = 0u;
              __int128 v363 = 0u;
              uint64_t v364 = 0LL;
              goto LABEL_248;
            }

            uint64_t v188 = sub_100008E00(&qword_100114948);
            if ((swift_dynamicCast(&v362, &v359, v188, v335, 6LL) & 1) == 0) {
              break;
            }
            if (!*((void *)&v363 + 1)) {
              goto LABEL_248;
            }
            sub_10000AF84(&v362, (uint64_t)&v349);
            uint64_t v189 = v345;
            uint64_t v190 = sub_1000465B0(&v349, v102, v343);
            uint64_t v345 = v189;
            if (v189) {
              goto LABEL_238;
            }
            uint64_t v191 = v190;
            uint64_t v192 = *(void *)(v190 + 16);
            int64_t v193 = v103[2];
            int64_t v194 = v193 + v192;
            if (__OFADD__(v193, v192)) {
              goto LABEL_264;
            }
            v195 = (void *)swift_isUniquelyReferenced_nonNull_native(v103);
            if (!(_DWORD)v195 || v194 > v103[3] >> 1)
            {
              if (v193 <= v194) {
                int64_t v196 = v193 + v192;
              }
              else {
                int64_t v196 = v193;
              }
              *(void *)&__int128 v342 = sub_10004F9F0(v195, v196, 1, v103);
            }

            uint64_t v83 = v344;
            if (!*(void *)(v191 + 16))
            {
              if (!v192) {
                goto LABEL_125;
              }
              goto LABEL_265;
            }

            uint64_t v197 = *(void *)(v342 + 16);
            if ((*(void *)(v342 + 24) >> 1) - v197 < v192) {
              goto LABEL_271;
            }
            unint64_t v198 = v342 + 208 * v197 + 32;
            if (v191 + 32 < v198 + 208 * v192 && v198 < v191 + 32 + 208 * v192) {
              goto LABEL_281;
            }
            swift_arrayInitWithCopy(v198);
            if (v192)
            {
              uint64_t v199 = *(void *)(v342 + 16);
              BOOL v116 = __OFADD__(v199, v192);
              uint64_t v200 = v199 + v192;
              if (!v116)
              {
                *(void *)(v342 + 16) = v200;
                goto LABEL_125;
              }

LABEL_274:
              __break(1u);
              goto LABEL_275;
            }

LABEL_125:
            swift_bridgeObjectRelease(v191);
            sub_100017A40(&v349);
LABEL_126:
            ++v169;
            uint64_t v170 = *((void *)&v335 + 1);
            uint64_t v84 = v340;
            if (v169 == v336) {
              goto LABEL_211;
            }
          }

          uint64_t v364 = 0LL;
          __int128 v362 = 0u;
          __int128 v363 = 0u;
LABEL_248:
          swift_bridgeObjectRelease(v340);
          swift_bridgeObjectRelease(v102);
          v295 = v347;
          swift_bridgeObjectRelease(v103);
          swift_bridgeObjectRelease(v295);
          swift_bridgeObjectRelease(v348);
          sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
          unint64_t v296 = sub_10000AE14();
          uint64_t v290 = swift_allocError(&type metadata for AUAError, v296, 0LL, 0LL);
          *(_BYTE *)uint64_t v291 = 45;
          *(void *)(v291 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v291 + 16) = 0xE000000000000000LL;
          unint64_t v297 = v337 | 0x8000000000000000LL;
          *(void *)(v291 + 24) = 0xD000000000000033LL;
          *(void *)(v291 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v297;
          unint64_t v298 = v338 | 0x8000000000000000LL;
          *(void *)(v291 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
          *(void *)(v291 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v298;
          uint64_t v294 = 326LL;
          goto LABEL_255;
        }

LABEL_165:
        swift_bridgeObjectRelease(v83);
        swift_bridgeObjectRelease(v84);
        goto LABEL_222;
      }
    }

    else
    {
      sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
    }

    sub_10000AF40((uint64_t)&v365, (uint64_t)&v362, &qword_100113EB0);
    if (*((void *)&v363 + 1))
    {
      *(void *)&__int128 v335 = sub_100008E00(&qword_100113EC0);
      if ((swift_dynamicCast(&v349, &v362, v335, &type metadata for ProcessingUnit, 6LL) & 1) != 0)
      {
        v201 = v348;
        *(void *)&__int128 v342 = v349;
        LODWORD(v341) = BYTE8(v349);
        v333 = (void *)v350;
        LODWORD(v344) = WORD4(v350);
        char v202 = BYTE10(v350);
        uint64_t v336 = *(void *)&v351[0];
        DWORD2(v335) = WORD4(v351[0]);
        __int128 v203 = v351[1];
        __int128 v204 = v352[0];
        uint64_t v205 = sub_100008E00(&qword_100114968);
        uint64_t v206 = swift_allocObject(v205, 72LL, 7LL);
        *(_OWORD *)(v206 + 16) = v332;
        *(void *)(v206 + 56) = &type metadata for ProcessingUnit;
        *(void *)(v206 + 64) = sub_10004B088();
        uint64_t v207 = swift_allocObject(&unk_1001047D8, 96LL, 7LL);
        *(void *)(v206 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v207;
        *(void *)(v207 + 16) = v342;
        *(_BYTE *)(v207 + 24) = v341;
        *(void *)(v207 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v333;
        *(_BYTE *)(v207 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v202;
        *(_WORD *)(v207 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v344;
        *(void *)(v207 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v336;
        *(_WORD *)(v207 + 56) = WORD4(v335);
        *(_OWORD *)(v207 + 64) = v203;
        *(_OWORD *)(v207 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v204;
        *(void *)&__int128 v349 = v201;
        swift_bridgeObjectRetain(v204);
        swift_bridgeObjectRetain(*((void *)&v204 + 1));
        swift_bridgeObjectRetain(v201);
        swift_bridgeObjectRetain(v203);
        swift_bridgeObjectRetain(*((void *)&v203 + 1));
        sub_100092D7C(v206);
        uint64_t v83 = v349;
        swift_bridgeObjectRelease(*((void *)&v204 + 1));
        swift_bridgeObjectRelease(v204);
        swift_bridgeObjectRelease(v203);
        uint64_t v84 = *((void *)&v203 + 1);
        uint64_t v336 = *(void *)(*((void *)&v203 + 1) + 16LL);
        if (v336)
        {
          unint64_t v208 = 0LL;
          uint64_t v209 = *(void *)(v83 + 16);
          *(void *)&__int128 v341 = *((void *)&v203 + 1) + 32LL;
          v333 = (void *)(v83 + 32);
          *(void *)&__int128 v342 = v339;
          *(void *)&__int128 v344 = v83;
          *((void *)&v335 + 1) = v209;
          *(void *)&__int128 v340 = *((void *)&v203 + 1);
          while (1)
          {
            if (v208 >= *(void *)(v84 + 16)) {
              goto LABEL_263;
            }
            uint64_t v210 = *(void *)(v341 + 8 * v208);
            if (!v209) {
              goto LABEL_175;
            }
            swift_bridgeObjectRetain(v83);
            uint64_t v211 = (uint64_t)v333;
            uint64_t v212 = v209;
            do
            {
              sub_100017910(v211, (uint64_t)&v349);
              uint64_t v214 = *((void *)&v350 + 1);
              uint64_t v213 = *(void *)&v351[0];
              sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
              uint64_t v215 = (*(uint64_t (**)(uint64_t))(*(void *)(v213 + 8) + 16LL))(v214);
              sub_100017A40(&v349);
              if (v215 == v210)
              {
                uint64_t v83 = v344;
                swift_bridgeObjectRelease(v344);
                *(void *)&__int128 v349 = 0LL;
                *((void *)&v349 + 1) = 0xE000000000000000LL;
                _StringGuts.grow(_:)(66LL);
                v221._countAndFlagsBits = 0xD000000000000040LL;
                v221._object = v310;
                String.append(_:)(v221);
                *(void *)&__int128 v362 = v210;
                v222._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                v223 = v222._object;
                String.append(_:)(v222);
                swift_bridgeObjectRelease(v223);
                uint64_t v224 = *((void *)&v349 + 1);
                sub_100029840( v349,  *((uint64_t *)&v349 + 1),  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  339LL);
                swift_bridgeObjectRelease(v224);
                sub_1000516F0(&v349, 95LL);
                goto LABEL_168;
              }

              v211 += 40LL;
              --v212;
            }

            while (v212);
            swift_bridgeObjectRelease(v344);
LABEL_175:
            uint64_t v216 = *((void *)v346 + 1);
            uint64_t v217 = *(void *)(v216 + 16);
            if (v217)
            {
              uint64_t v218 = v216 + 32;
              swift_bridgeObjectRetain(*((void *)v346 + 1));
              while (1)
              {
                sub_100017910(v218, (uint64_t)&v356);
                uint64_t v219 = v357;
                uint64_t v220 = v358;
                sub_1000178EC(&v356, v357);
                sub_100017A40(&v356);
                v218 += 40LL;
                if (!--v217) {
                  goto LABEL_182;
                }
              }

              sub_10000AF84(&v356, (uint64_t)&v359);
            }

            else
            {
              swift_bridgeObjectRetain(*((void *)v346 + 1));
LABEL_182:
              uint64_t v361 = 0LL;
              __int128 v359 = 0u;
              __int128 v360 = 0u;
            }

            swift_bridgeObjectRelease(v216);
            uint64_t v102 = v344;
            BOOL v103 = (void *)v342;
            if (!*((void *)&v360 + 1))
            {
              sub_1000178B0((uint64_t)&v359, &qword_100114940);
              __int128 v362 = 0u;
              __int128 v363 = 0u;
              uint64_t v364 = 0LL;
              goto LABEL_254;
            }

            uint64_t v225 = sub_100008E00(&qword_100114948);
            if ((swift_dynamicCast(&v362, &v359, v225, v335, 6LL) & 1) == 0) {
              break;
            }
            if (!*((void *)&v363 + 1)) {
              goto LABEL_254;
            }
            sub_10000AF84(&v362, (uint64_t)&v349);
            uint64_t v226 = v345;
            uint64_t v227 = sub_1000465B0(&v349, v102, v343);
            uint64_t v345 = v226;
            if (v226)
            {
LABEL_238:
              swift_bridgeObjectRelease(v102);
              sub_100017A40(&v349);
              swift_bridgeObjectRelease(v340);
              v283 = v347;
              v284 = v103;
              goto LABEL_250;
            }

            uint64_t v228 = v227;
            uint64_t v229 = *(void *)(v227 + 16);
            int64_t v230 = v103[2];
            int64_t v231 = v230 + v229;
            if (__OFADD__(v230, v229)) {
              goto LABEL_269;
            }
            v232 = (void *)swift_isUniquelyReferenced_nonNull_native(v103);
            if (!(_DWORD)v232 || v231 > v103[3] >> 1)
            {
              if (v230 <= v231) {
                int64_t v233 = v230 + v229;
              }
              else {
                int64_t v233 = v230;
              }
              *(void *)&__int128 v342 = sub_10004F9F0(v232, v233, 1, v103);
            }

            uint64_t v83 = v344;
            if (!*(void *)(v228 + 16))
            {
              if (!v229) {
                goto LABEL_167;
              }
              goto LABEL_270;
            }

            uint64_t v234 = *(void *)(v342 + 16);
            if ((*(void *)(v342 + 24) >> 1) - v234 < v229) {
              goto LABEL_273;
            }
            unint64_t v235 = v342 + 208 * v234 + 32;
            if (v228 + 32 < v235 + 208 * v229 && v235 < v228 + 32 + 208 * v229) {
              goto LABEL_281;
            }
            swift_arrayInitWithCopy(v235);
            if (v229)
            {
              uint64_t v236 = *(void *)(v342 + 16);
              BOOL v116 = __OFADD__(v236, v229);
              uint64_t v237 = v236 + v229;
              if (v116) {
                goto LABEL_276;
              }
              *(void *)(v342 + 16) = v237;
            }

LABEL_167:
            swift_bridgeObjectRelease(v228);
            sub_100017A40(&v349);
LABEL_168:
            ++v208;
            uint64_t v209 = *((void *)&v335 + 1);
            uint64_t v84 = v340;
            if (v208 == v336)
            {
LABEL_211:
              swift_bridgeObjectRelease(v83);
              swift_bridgeObjectRelease(v84);
              v339 = (void *)v342;
              goto LABEL_222;
            }
          }

          uint64_t v364 = 0LL;
          __int128 v362 = 0u;
          __int128 v363 = 0u;
LABEL_254:
          swift_bridgeObjectRelease(v340);
          swift_bridgeObjectRelease(v102);
          v299 = v347;
          swift_bridgeObjectRelease(v103);
          swift_bridgeObjectRelease(v299);
          swift_bridgeObjectRelease(v348);
          sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
          unint64_t v300 = sub_10000AE14();
          uint64_t v290 = swift_allocError(&type metadata for AUAError, v300, 0LL, 0LL);
          *(_BYTE *)uint64_t v291 = 45;
          *(void *)(v291 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v291 + 16) = 0xE000000000000000LL;
          unint64_t v301 = v337 | 0x8000000000000000LL;
          *(void *)(v291 + 24) = 0xD000000000000033LL;
          *(void *)(v291 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v301;
          unint64_t v302 = v338 | 0x8000000000000000LL;
          *(void *)(v291 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
          *(void *)(v291 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v302;
          uint64_t v294 = 350LL;
          goto LABEL_255;
        }

        goto LABEL_165;
      }
    }

    else
    {
      sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
    }

    uint64_t v238 = v348[2];
    if (v238)
    {
      uint64_t v239 = (uint64_t)(v348 + 4);
      *(void *)&__int128 v344 = v348;
      swift_bridgeObjectRetain(v348);
      do
      {
        sub_100017910(v239, (uint64_t)&v349);
        uint64_t v241 = *((void *)&v350 + 1);
        uint64_t v240 = *(void *)&v351[0];
        sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
        uint64_t v242 = (*(uint64_t (**)(uint64_t))(*(void *)(v240 + 8) + 16LL))(v241);
        uint64_t v243 = *((void *)&v366 + 1);
        if (*((void *)&v366 + 1))
        {
          uint64_t v244 = v242;
          uint64_t v245 = v367;
          v246 = sub_1000178EC(&v365, *((uint64_t *)&v366 + 1));
          uint64_t v247 = *(void *)(v243 - 8);
          __chkstk_darwin(v246);
          v249 = (char *)&v304 - ((v248 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          (*(void (**)(char *))(v247 + 16))(v249);
          uint64_t v250 = (*(uint64_t (**)(uint64_t))(*(void *)(v245 + 8) + 16LL))(v243);
          (*(void (**)(char *, uint64_t))(v247 + 8))(v249, v243);
          sub_100017A40(&v349);
          if (v244 == v250)
          {
            swift_bridgeObjectRelease(v344);
            sub_100029840(0xD000000000000029LL, v309, 0xD000000000000033LL, v308, 0xD000000000000020LL, v307, 359LL);
            sub_1000516F0(&v349, 95LL);
            goto LABEL_8;
          }
        }

        else
        {
          sub_100017A40(&v349);
        }

        v239 += 40LL;
        --v238;
      }

      while (v238);
      swift_bridgeObjectRelease(v344);
    }

    uint64_t v251 = sub_100008E00(&qword_100114968);
    uint64_t v252 = swift_allocObject(v251, 72LL, 7LL);
    *(_OWORD *)(v252 + 16) = v332;
    sub_10000AF40((uint64_t)&v365, (uint64_t)&v349, &qword_100113EB0);
    if (*((void *)&v350 + 1))
    {
      sub_10000AF84(&v349, v252 + 32);
      sub_100092D7C(v252);
      uint64_t v253 = *((void *)&v366 + 1);
      if (*((void *)&v366 + 1))
      {
        uint64_t v254 = *((void *)v346 + 1);
        uint64_t v255 = v367;
        v256 = sub_1000178EC(&v365, *((uint64_t *)&v366 + 1));
        uint64_t v257 = *(void *)(v253 - 8);
        __chkstk_darwin(v256);
        v259 = (char *)&v304 - ((v258 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v257 + 16))(v259);
        uint64_t v260 = (*(uint64_t (**)(uint64_t, uint64_t))(v255 + 16))(v253, v255);
        char v262 = v261;
        (*(void (**)(char *, uint64_t))(v257 + 8))(v259, v253);
        if ((v262 & 1) == 0)
        {
          uint64_t v263 = *(void *)(v254 + 16);
          if (v263)
          {
            uint64_t v264 = v254 + 32;
            swift_bridgeObjectRetain(v254);
            while (1)
            {
              sub_100017910(v264, (uint64_t)&v349);
              uint64_t v265 = *((void *)&v350 + 1);
              uint64_t v266 = *(void *)&v351[0];
              sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
              sub_100017A40(&v349);
              v264 += 40LL;
              if (!--v263) {
                goto LABEL_224;
              }
            }

            sub_10000AF84(&v349, (uint64_t)&v362);
          }

          else
          {
            swift_bridgeObjectRetain(v254);
LABEL_224:
            uint64_t v364 = 0LL;
            __int128 v362 = 0u;
            __int128 v363 = 0u;
          }

          swift_bridgeObjectRelease(v254);
          if (*((void *)&v363 + 1))
          {
            uint64_t v267 = sub_100008E00(&qword_100114948);
            uint64_t v268 = sub_100008E00(&qword_100113EC0);
            if ((swift_dynamicCast(&v349, &v362, v267, v268, 6LL) & 1) == 0)
            {
LABEL_228:
              *(void *)&v351[0] = 0LL;
              __int128 v349 = 0u;
              __int128 v350 = 0u;
            }

LABEL_280:
        __break(1u);
        goto LABEL_281;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_280;
  }

  *(void *)&__int128 v335 = sub_100008E00(&qword_100113EC0);
  if ((swift_dynamicCast(&v349, &v362, v335, &type metadata for ExtensionUnit, 6LL) & 1) == 0) {
    goto LABEL_114;
  }
  *(void *)&__int128 v342 = v349;
  LODWORD(v341) = BYTE8(v349);
  *(void *)&__int128 v340 = v350;
  LODWORD(v344) = WORD4(v350);
  int v313 = BYTE10(v350);
  *((void *)&v335 + 1) = *(void *)&v351[0];
  LODWORD(v33swift_unknownObjectWeakDestroy(v0 + 3) = WORD4(v351[0]);
  uint64_t v312 = *((void *)&v351[1] + 1);
  uint64_t v118 = *(void *)&v351[1];
  uint64_t v119 = *(void *)&v352[0];
  char v120 = BYTE8(v352[0]);
  __int128 v121 = v352[1];
  uint64_t v122 = v348;
  uint64_t v123 = sub_100008E00(&qword_100114968);
  uint64_t v124 = swift_allocObject(v123, 72LL, 7LL);
  *(_OWORD *)(v124 + 16) = v332;
  *(void *)(v124 + 56) = &type metadata for ExtensionUnit;
  *(void *)(v124 + 64) = sub_10004B0CC();
  uint64_t v125 = swift_allocObject(&unk_100104828, 112LL, 7LL);
  *(void *)(v124 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v125;
  *(void *)(v125 + 16) = v342;
  *(_BYTE *)(v125 + 24) = v341;
  *(void *)(v125 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v340;
  *(_BYTE *)(v125 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v313;
  *(_WORD *)(v125 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v344;
  *(void *)(v125 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *((void *)&v335 + 1);
  *(_WORD *)(v125 + 56) = (_WORD)v333;
  uint64_t v126 = v312;
  *(void *)(v125 + 64) = v118;
  *(void *)(v125 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v126;
  *(void *)(v125 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v119;
  *(_BYTE *)(v125 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v120;
  *(_OWORD *)(v125 + 96) = v121;
  *(void *)&__int128 v349 = v122;
  swift_bridgeObjectRetain(*((void *)&v121 + 1));
  swift_bridgeObjectRetain(v122);
  swift_bridgeObjectRetain(v118);
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRetain(v121);
  uint64_t v127 = v124;
  uint64_t v128 = v118;
  sub_100092D7C(v127);
  uint64_t v129 = v349;
  swift_bridgeObjectRelease(*((void *)&v121 + 1));
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(v119);
  *(void *)&__int128 v341 = *(void *)(v118 + 16);
  if (!(void)v341)
  {
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(v118);
    goto LABEL_222;
  }

  unint64_t v130 = 0LL;
  uint64_t v131 = *(void *)(v129 + 16);
  *(void *)&__int128 v340 = v128 + 32;
  *(void *)&__int128 v344 = v129;
  *((void *)&v335 + 1) = v129 + 32;
  v333 = v339;
  *(void *)&__int128 v342 = v131;
  uint64_t v336 = v128;
LABEL_76:
  if (v130 >= *(void *)(v128 + 16))
  {
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
    goto LABEL_274;
  }

  uint64_t v132 = *(void *)(v340 + 8 * v130);
  if (!v131) {
    goto LABEL_82;
  }
  swift_bridgeObjectRetain(v344);
  uint64_t v133 = *((void *)&v335 + 1);
  uint64_t v134 = v131;
  do
  {
    sub_100017910(v133, (uint64_t)&v349);
    uint64_t v136 = *((void *)&v350 + 1);
    uint64_t v135 = *(void *)&v351[0];
    sub_1000178EC(&v349, *((uint64_t *)&v350 + 1));
    uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)(v135 + 8) + 16LL))(v136);
    sub_100017A40(&v349);
    if (v137 == v132)
    {
      swift_bridgeObjectRelease(v344);
      *(void *)&__int128 v349 = 0LL;
      *((void *)&v349 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(71LL);
      v143._countAndFlagsBits = 0xD000000000000045LL;
      v143._object = v334;
      String.append(_:)(v143);
      *(void *)&__int128 v362 = v132;
      v144._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
      __int16 v145 = v144._object;
      String.append(_:)(v144);
      swift_bridgeObjectRelease(v145);
      uint64_t v146 = *((void *)&v349 + 1);
      sub_100029840( v349,  *((uint64_t *)&v349 + 1),  0xD000000000000033LL,  (void *)(v337 | 0x8000000000000000LL),  0xD000000000000020LL,  v338 | 0x8000000000000000LL,  289LL);
      swift_bridgeObjectRelease(v146);
      sub_1000516F0(&v349, 95LL);
LABEL_112:
      uint64_t v131 = v342;
LABEL_75:
      if (++v130 == (void)v341)
      {
        swift_bridgeObjectRelease(v344);
        swift_bridgeObjectRelease(v128);
        v339 = v333;
        goto LABEL_222;
      }

      goto LABEL_76;
    }

    v133 += 40LL;
    --v134;
  }

  while (v134);
  swift_bridgeObjectRelease(v344);
LABEL_82:
  uint64_t v138 = *((void *)v346 + 1);
  uint64_t v139 = *(void *)(v138 + 16);
  if (v139)
  {
    uint64_t v140 = v138 + 32;
    swift_bridgeObjectRetain(*((void *)v346 + 1));
    while (1)
    {
      sub_100017910(v140, (uint64_t)&v356);
      uint64_t v141 = v357;
      uint64_t v142 = v358;
      sub_1000178EC(&v356, v357);
      sub_100017A40(&v356);
      v140 += 40LL;
      if (!--v139) {
        goto LABEL_89;
      }
    }

    sub_10000AF84(&v356, (uint64_t)&v359);
  }

  else
  {
    swift_bridgeObjectRetain(*((void *)v346 + 1));
LABEL_89:
    uint64_t v361 = 0LL;
    __int128 v359 = 0u;
    __int128 v360 = 0u;
  }

  swift_bridgeObjectRelease(v138);
  uint64_t v128 = v336;
  uint64_t v131 = v342;
  if (!*((void *)&v360 + 1))
  {
    sub_1000178B0((uint64_t)&v359, &qword_100114940);
    __int128 v362 = 0u;
    __int128 v363 = 0u;
    uint64_t v364 = 0LL;
LABEL_74:
    sub_1000178B0((uint64_t)&v362, &qword_100113EB0);
    goto LABEL_75;
  }

  uint64_t v147 = sub_100008E00(&qword_100114948);
  if ((swift_dynamicCast(&v362, &v359, v147, v335, 6LL) & 1) == 0)
  {
    uint64_t v364 = 0LL;
    __int128 v362 = 0u;
    __int128 v363 = 0u;
    goto LABEL_74;
  }

  if (!*((void *)&v363 + 1)) {
    goto LABEL_74;
  }
  sub_10000AF84(&v362, (uint64_t)&v349);
  uint64_t v148 = v345;
  uint64_t v149 = sub_1000465B0(&v349, v344, v343);
  uint64_t v345 = v148;
  if (v148)
  {
    swift_bridgeObjectRelease(v344);
    sub_100017A40(&v349);
    swift_bridgeObjectRelease(v128);
    v283 = v347;
    v284 = v333;
LABEL_250:
    swift_bridgeObjectRelease(v284);
    swift_bridgeObjectRelease(v283);
    v287 = v348;
    goto LABEL_251;
  }

  uint64_t v150 = v149;
  uint64_t v151 = *(void *)(v149 + 16);
  __int16 v152 = v333;
  int64_t v153 = v333[2];
  int64_t v154 = v153 + v151;
  if (__OFADD__(v153, v151)) {
    goto LABEL_266;
  }
  __int16 v155 = (void *)swift_isUniquelyReferenced_nonNull_native(v333);
  if (!(_DWORD)v155 || v154 > v152[3] >> 1)
  {
    if (v153 <= v154) {
      int64_t v156 = v153 + v151;
    }
    else {
      int64_t v156 = v153;
    }
    v333 = sub_10004F9F0(v155, v156, 1, v152);
  }

  if (!*(void *)(v150 + 16))
  {
    if (v151) {
      goto LABEL_267;
    }
LABEL_111:
    swift_bridgeObjectRelease(v150);
    sub_100017A40(&v349);
    goto LABEL_112;
  }

  uint64_t v157 = v333[2];
  if ((v333[3] >> 1) - v157 < v151) {
    goto LABEL_272;
  }
  unint64_t v158 = (unint64_t)&v333[26 * v157 + 4];
  if (v150 + 32 >= v158 + 208 * v151 || v158 >= v150 + 32 + 208 * v151)
  {
    swift_arrayInitWithCopy(v158);
    if (!v151) {
      goto LABEL_111;
    }
    uint64_t v159 = v333[2];
    BOOL v116 = __OFADD__(v159, v151);
    uint64_t v160 = v159 + v151;
    if (!v116)
    {
      v333[2] = v160;
      goto LABEL_111;
    }

LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
  }

LABEL_281:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100048C48@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  v60[0] = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain_n(v4, 2LL);
    uint64_t v7 = _swiftEmptyArrayStorage;
    int v33 = a1;
    while (1)
    {
      sub_100017910(v6, (uint64_t)v59);
      sub_100017910((uint64_t)v59, (uint64_t)v58);
      uint64_t v8 = sub_100008E00(&qword_100114948);
      if (swift_dynamicCast(&v45, v58, v8, &type metadata for InputTerminal, 6LL))
      {
        uint64_t v9 = v53;
        uint64_t v10 = v54;
        unint64_t v12 = v55;
        uint64_t v11 = v56;
        uint64_t v13 = v57;
        if (((((void)v45 != 257LL) ^ a1) & 1) != 0)
        {
          __int128 v43 = v45;
          uint64_t v35 = v47;
          int v34 = v49;
          int v14 = v48;
          __int128 v41 = v50;
          char v39 = v51;
          char v36 = v46;
          char v37 = v52;
          sub_100017A40(v59);
          if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
            uint64_t v7 = sub_10004FB18(0LL, v7[2] + 1LL, 1, v7);
          }
          unint64_t v16 = v7[2];
          unint64_t v15 = v7[3];
          uint64_t v17 = v7;
          __int128 v18 = v43;
          if (v16 >= v15 >> 1)
          {
            int v20 = sub_10004FB18((void *)(v15 > 1), v16 + 1, 1, v7);
            __int128 v18 = v43;
            uint64_t v17 = v20;
          }

          v17[2] = v16 + 1;
          uint64_t v7 = v17;
          uint64_t v19 = &v17[13 * v16];
          *((_OWORD *)v19 + swift_unknownObjectWeakDestroy(v0 + 2) = v18;
          a1 = v33;
          *((_BYTE *)v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v36;
          v19[7] = v35;
          *((_BYTE *)v19 + 66) = (v14 | (v34 << 16)) >> 16;
          *((_WORD *)v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v14;
          *(_OWORD *)(v19 + 9) = v41;
          *((_BYTE *)v19 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v39;
          *((_BYTE *)v19 + 89) = v37;
          _WORD v19[12] = v9;
          v19[13] = v10;
          v19[14] = v12;
          v19[15] = v11;
          v19[16] = v13;
          goto LABEL_5;
        }

        swift_bridgeObjectRelease(v53);
        sub_10004B030(v10, v12);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v13);
      }

      sub_100017A40(v59);
LABEL_5:
      v6 += 40LL;
      if (!--v5)
      {
        sub_100045FD8(v60);
        sub_100045FD8(v60);
        goto LABEL_15;
      }
    }
  }

  uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
  if (v7[2] == 1LL)
  {
    uint64_t v44 = v7[4];
    uint64_t v40 = *((unsigned __int8 *)v7 + 48);
    uint64_t v42 = v7[5];
    uint64_t v38 = v7[7];
    unint64_t v21 = *((unsigned __int16 *)v7 + 32) | ((unint64_t)*((unsigned __int8 *)v7 + 66) << 16);
    uint64_t v22 = v7[9];
    uint64_t v23 = v7[10];
    unint64_t v24 = v7;
    uint64_t v25 = v7[12];
    uint64_t v26 = v7[13];
    unint64_t v27 = v24[14];
    uint64_t v28 = v24[15];
    uint64_t v29 = v24[16];
    uint64_t v30 = *((unsigned __int16 *)v24 + 44);
    swift_bridgeObjectRetain(v25);
    sub_10004AF94(v26, v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v28);
  }

  else
  {
    uint64_t v44 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v42 = 0LL;
    uint64_t v38 = 0LL;
    unint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v25 = 0LL;
    unint64_t v24 = v7;
    uint64_t v26 = 0LL;
    unint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease(v24);
  *a2 = v44;
  a2[1] = v42;
  a2[2] = v40;
  a2[3] = v38;
  a2[4] = v21;
  a2[5] = v22;
  a2[6] = v23;
  a2[7] = v30;
  a2[8] = v25;
  a2[9] = v26;
  a2[10] = v27;
  a2[11] = v28;
  a2[12] = v29;
  return result;
}

Swift::Int ControlInterface.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100048FB4()
{
  __int128 v1 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v1;
  __int128 v12 = v0[6];
  uint64_t v13 = *((void *)v0 + 14);
  __int128 v2 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v2;
  __int128 v3 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100044E04((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ControlInterface(uint64_t a1)
{
  return sub_100044E04(a1);
}

Swift::Int sub_100049070(uint64_t a1)
{
  __int128 v2 = v1[5];
  __int128 v11 = v1[4];
  __int128 v12 = v2;
  __int128 v13 = v1[6];
  uint64_t v14 = *((void *)v1 + 14);
  __int128 v3 = v1[1];
  __int128 v7 = *v1;
  __int128 v8 = v3;
  __int128 v4 = v1[3];
  __int128 v9 = v1[2];
  __int128 v10 = v4;
  Hasher.init(_seed:)(v6, a1);
  sub_100044E04((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ControlInterface( uint64_t a1, __int128 *a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  void v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 112);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v12[2] = *(_OWORD *)(a1 + 32);
  _OWORD v12[3] = v4;
  __int128 v5 = *a2;
  __int128 v6 = a2[1];
  __int128 v7 = a2[3];
  __int128 v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  __int128 v8 = a2[4];
  __int128 v9 = a2[5];
  __int128 v10 = a2[6];
  uint64_t v15 = *((void *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return sub_10003DED8((uint64_t)v12, (uint64_t)v14) & 1;
}

unint64_t sub_100049158(uint64_t a1)
{
  unint64_t result = sub_10004917C();
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

unint64_t sub_10004917C()
{
  unint64_t result = qword_1001148F8;
  if (!qword_1001148F8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ControlInterface,  &type metadata for ControlInterface);
    atomic_store(result, (unint64_t *)&qword_1001148F8);
  }

  return result;
}

unint64_t sub_1000491C4()
{
  unint64_t result = qword_100114900;
  if (!qword_100114900)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ControlInterface,  &type metadata for ControlInterface);
    atomic_store(result, (unint64_t *)&qword_100114900);
  }

  return result;
}

uint64_t destroy for ControlInterface(void *a1)
{
  uint64_t result = a1[12];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[13]);
    return swift_bridgeObjectRelease(a1[14]);
  }

  return result;
}

uint64_t initializeWithCopy for ControlInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7 == 1)
  {
    __int128 v8 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    __int128 v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
  }

  else
  {
    *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
    uint64_t v11 = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = v11;
    *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
  }

  return a1;
}

uint64_t assignWithCopy for ControlInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = (_OWORD *)(a1 + 40);
  uint64_t v11 = (_OWORD *)(a2 + 40);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a2 + 96);
  if (v12 == 1)
  {
    if (v13 == 1)
    {
      *uint64_t v10 = *v11;
      __int128 v14 = *(_OWORD *)(a2 + 56);
      __int128 v15 = *(_OWORD *)(a2 + 72);
      __int128 v16 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v16;
      *(_OWORD *)(a1 + 56) = v14;
      *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v15;
    }

    else
    {
      *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
      *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
      uint64_t v20 = *(void *)(a2 + 96);
      *(void *)(a1 + 96) = v20;
      uint64_t v21 = *(void *)(a2 + 104);
      *(void *)(a1 + 104) = v21;
      uint64_t v22 = *(void *)(a2 + 112);
      *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
    }
  }

  else if (v13 == 1)
  {
    sub_100049518((void *)(a1 + 40));
    *uint64_t v10 = *v11;
    __int128 v17 = *(_OWORD *)(a2 + 104);
    __int128 v19 = *(_OWORD *)(a2 + 56);
    __int128 v18 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 56) = v19;
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v18;
  }

  else
  {
    *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_BYTE *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 72);
    *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
    uint64_t v23 = *(void *)(a2 + 96);
    *(void *)(a1 + 96) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v12);
    uint64_t v24 = *(void *)(a1 + 104);
    uint64_t v25 = *(void *)(a2 + 104);
    *(void *)(a1 + 104) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v24);
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a2 + 112);
    *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v26);
  }

  return a1;
}

void *sub_100049518(void *a1)
{
  return a1;
}

__n128 initializeWithTake for ControlInterface(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = a2[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ControlInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 96);
  if (v7 != 1)
  {
    uint64_t v8 = *(void *)(a2 + 96);
    if (v8 != 1)
    {
      *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 48);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_BYTE *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 72);
      *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 80);
      *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = v8;
      swift_bridgeObjectRelease(v7);
      uint64_t v11 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease(v11);
      uint64_t v12 = *(void *)(a1 + 112);
      *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease(v12);
      return a1;
    }

    sub_100049518((void *)(a1 + 40));
  }

  __int128 v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ControlInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ControlInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ControlInterface()
{
  return &type metadata for ControlInterface;
}

uint64_t sub_100049734(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v28 = a3;
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v11 = HIWORD(a1);
  unint64_t v20 = HIBYTE(a1);
  unint64_t v21 = a2 >> 8;
  unint64_t v22 = a2 >> 16;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  unint64_t v25 = a2 >> 40;
  unint64_t v26 = HIWORD(a2);
  unint64_t v27 = HIBYTE(a2);
  uint64_t v48 = type metadata accessor for Mirror(0LL);
  uint64_t v31 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_100008E00(&qword_100114930);
  LOBYTE(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v5;
  BYTE1(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v6;
  BYTE2(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v7;
  BYTE3(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  BYTE4(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  BYTE5(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v10;
  BYTE6(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v11;
  HIBYTE(v3_Block_object_dispose((const void *)(v30 - 136), 8) = v20;
  char v39 = v4;
  char v40 = v21;
  char v41 = v22;
  char v42 = v23;
  char v43 = v24;
  char v44 = v25;
  char v45 = v26;
  char v46 = v27;
  uint64_t v14 = Mirror.init(reflecting:)(&v38);
  uint64_t v15 = Mirror.children.getter(v14);
  uint64_t v16 = v30;
  uint64_t v36 = v28;
  uint64_t v37 = v29;
  int v33 = sub_10004A520;
  int v34 = &v35;
  uint64_t v17 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_10004A578, v32, &type metadata for UInt8);
  if (v16)
  {
    uint64_t v38 = v16;
    uint64_t v18 = sub_100008E00(&qword_100113400);
    swift_willThrowTypedImpl(&v38, v18, &protocol self-conformance witness table for Error);
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v48);
  swift_release(v15);
  return v17;
}

uint64_t sub_100049940@<X0>(uint64_t a1@<X2>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004AA00(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_10004996C@<X0>( uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = a2(&v10, a1, &v9);
  if (v3)
  {
    uint64_t v6 = v9;
    uint64_t v7 = sub_100008E00(&qword_100113400);
    uint64_t result = (void *)swift_allocError(v7, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v8 = v6;
  }

  else
  {
    *a3 = v10;
  }

  return result;
}

void sub_1000499E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x10004A184LL);
  }

  sub_10007BFC4(*(void *)(a1 + 32), *(_WORD *)(a1 + 40));
  if (v2) {
    return;
  }
  if (v6[1] != 4)
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 55;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD000000000000024LL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
    uint64_t v12 = 77LL;
    goto LABEL_39;
  }

  if (v6[5] != 1)
  {
    unint64_t v13 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v13, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 56;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD000000000000024LL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
    uint64_t v12 = 79LL;
    goto LABEL_39;
  }

  if (v6[6] != 1)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 57;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD000000000000024LL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
    uint64_t v12 = 81LL;
    goto LABEL_39;
  }

  char v42 = v6;
  uint64_t v43 = a2;
  int v41 = v6[7];
  uint64_t v56 = &_swiftEmptySetSingleton;
  unint64_t v55 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain(a1);
  uint64_t v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v51 = 0LL;
  unsigned __int8 v45 = 0;
  unsigned __int8 v46 = 0;
  uint64_t v49 = 0LL;
  unint64_t v8 = (unsigned __int8 *)(a1 + 41);
  __int128 v50 = _swiftEmptyArrayStorage;
  uint64_t v44 = 0x100000001LL;
  while (2)
  {
    uint64_t v14 = v7;
    uint64_t v15 = *(void *)(v8 - 9);
    int v16 = *v8;
    __int16 v17 = *(v8 - 1) | (unsigned __int16)((_WORD)v16 << 8);
    if ((_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v15, v17) & 1) != 0) {
      goto LABEL_10;
    }
    int v18 = v16 - 17;
    uint64_t v7 = v15;
    switch(v18)
    {
      case 0:
        if (IOUSBGetEndpointType((const IOUSBEndpointDescriptor *)v15) != 3)
        {
          sub_1000516F0(v54, 54LL);
          goto LABEL_10;
        }

        if (*(_BYTE *)v15 != 7 && v41 != 0) {
          sub_1000516F0(v54, 31LL);
        }
        goto LABEL_22;
      case 1:
        if (IOUSBGetEndpointType((const IOUSBEndpointDescriptor *)v15) != 3)
        {
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease(v51);
          swift_bridgeObjectRelease(v55);
          char v35 = v56;
          swift_bridgeObjectRelease(v50);
          swift_bridgeObjectRelease(v35);
          unint64_t v36 = sub_10000AE14();
          uint64_t v10 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
          *(_BYTE *)uint64_t v11 = 54;
          *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
          *(void *)(v11 + 16) = 0xE000000000000000LL;
          *(void *)(v11 + 24) = 0xD000000000000024LL;
          *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
          *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
          *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
          uint64_t v12 = 113LL;
          goto LABEL_39;
        }

        uint64_t v44 = 0LL;
        unsigned __int8 v45 = *(_BYTE *)(v15 + 7);
        unsigned __int8 v46 = *(_BYTE *)(v15 + 8);
LABEL_22:
        uint64_t v7 = v14;
        uint64_t v48 = v15;
        goto LABEL_11;
      case 2:
        goto LABEL_11;
      case 3:
        uint64_t v47 = v15;
        goto LABEL_10;
      case 7:
        if (*(_WORD *)(v15 + 3) == 256) {
          goto LABEL_10;
        }
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v55);
        uint64_t v37 = v56;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v37);
        unint64_t v38 = sub_10000AE14();
        uint64_t v10 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
        *(_BYTE *)uint64_t v11 = 58;
        *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v11 + 16) = 0xE000000000000000LL;
        *(void *)(v11 + 24) = 0xD000000000000024LL;
        *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
        *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
        *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
        uint64_t v12 = 97LL;
        goto LABEL_39;
      case 15:
        if (*(_WORD *)(v15 + 3) == 512)
        {
          LOBYTE(v49) = *(_BYTE *)(v15 + 8) | v49;
          char v22 = *(_BYTE *)(v15 + 5);
LABEL_34:
          BYTE4(v49) = v22;
LABEL_10:
          uint64_t v7 = v14;
LABEL_11:
          v8 += 16;
          if (!--v3)
          {
            swift_bridgeObjectRelease(a1);
            unint64_t v25 = v56;
            if (v48)
            {
              unint64_t v26 = sub_100051240((uint64_t)v56);
              swift_bridgeObjectRelease(v25);
              if (!v26[2])
              {
                swift_release(v26);
                unint64_t v26 = 0LL;
              }

              uint64_t v27 = v47;
              uint64_t v28 = 0LL;
              if ((v44 & 0x100000000LL) != 0) {
                uint64_t v29 = 256LL;
              }
              else {
                uint64_t v29 = 0LL;
              }
              unint64_t v30 = v29 & 0xFFFFFFFFFFFFFF00LL | v45;
              if ((v44 & 1) != 0) {
                uint64_t v31 = 256LL;
              }
              else {
                uint64_t v31 = 0LL;
              }
              unint64_t v32 = v31 & 0xFFFFFFFFFFFFFF00LL | v46;
            }

            else
            {
              swift_bridgeObjectRelease(v56);
              uint64_t v7 = 0LL;
              uint64_t v27 = 0LL;
              unint64_t v30 = 0LL;
              unint64_t v32 = 0LL;
              unint64_t v26 = 0LL;
              uint64_t v28 = 1LL;
            }

            int v33 = v55;
            int v34 = sub_100051240((uint64_t)v55);
            swift_bridgeObjectRelease(v33);
            if (!v34[2])
            {
              swift_release(v34);
              int v34 = 0LL;
            }

            *(void *)uint64_t v43 = v42;
            *(void *)(v43 + _Block_object_dispose((const void *)(v30 - 136), 8) = v50;
            *(_BYTE *)(v43 + 16) = BYTE4(v49);
            *(_BYTE *)(v43 + 17) = v49 & 1;
            *(void *)(v43 + 24) = v51;
            *(void *)(v43 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v34;
            *(void *)(v43 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v48;
            *(void *)(v43 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v7;
            *(void *)(v43 + 56) = v27;
            *(void *)(v43 + 64) = v30;
            *(void *)(v43 + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
            *(void *)(v43 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
            *(void *)(v43 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v32;
            *(void *)(v43 + 96) = v28;
            *(void *)(v43 + 104) = 0LL;
            *(void *)(v43 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v26;
            return;
          }

          continue;
        }

        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v55);
        char v39 = v56;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v39);
        unint64_t v40 = sub_10000AE14();
        uint64_t v10 = swift_allocError(&type metadata for AUAError, v40, 0LL, 0LL);
        *(_BYTE *)uint64_t v11 = 58;
        *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v11 + 16) = 0xE000000000000000LL;
        *(void *)(v11 + 24) = 0xD000000000000024LL;
        *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF600LL;
        *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000020LL;
        *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF3C0LL;
        uint64_t v12 = 99LL;
LABEL_39:
        *(void *)(v11 + 56) = v12;
        swift_willThrow(v10);
        return;
      case 28:
        char v22 = *(_BYTE *)(v15 + 3);
        goto LABEL_34;
      case 58:
        swift_bridgeObjectRelease(v51);
        sub_1000BD684((_BYTE *)v15, v17);
        uint64_t v51 = v23;
        goto LABEL_10;
      default:
        sub_10007C17C((_BYTE *)v15, v17, (uint64_t)&v52);
        if (v53)
        {
          sub_10000AF84(&v52, (uint64_t)v54);
          sub_100017910((uint64_t)v54, (uint64_t)&v52);
          if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0) {
            __int128 v50 = sub_10004F9C8(0LL, v50[2] + 1LL, 1, v50);
          }
          unint64_t v21 = v50[2];
          unint64_t v20 = v50[3];
          if (v21 >= v20 >> 1) {
            __int128 v50 = sub_10004F9C8((void *)(v20 > 1), v21 + 1, 1, v50);
          }
          v50[2] = v21 + 1;
          sub_10000AF84(&v52, (uint64_t)&v50[5 * v21 + 4]);
          sub_100017A40(v54);
        }

        else
        {
          sub_1000178B0((uint64_t)&v52, &qword_100114940);
          sub_100029840( 0xD000000000000030LL,  0x80000001000CF630LL,  0xD000000000000024LL,  (void *)0x80000001000CF600LL,  0xD000000000000020LL,  0x80000001000CF3C0LL,  143LL);
          sub_1000516F0(v54, 33LL);
        }

        goto LABEL_10;
    }
  }

uint64_t sub_10004A270(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10004B21C();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for AUAErrorCode, v3);
  uint64_t v8 = result;
  if (v2)
  {
    char v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v6 = *v5++;
      sub_1000516F0(&v7, v6);
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

void *sub_10004A2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v6 = swift_release(a1);
  dispatch thunk of _AnyIteratorBoxBase.next()(v20, v6);
  if (*((void *)&v21 + 1))
  {
    char v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      v19[0] = v20[0];
      v19[1] = v20[1];
      __int128 v19[2] = v21;
      sub_10001A080((uint64_t *)v19, a2, (uint64_t)&v16);
      if (v2) {
        break;
      }
      sub_1000178B0((uint64_t)v19, &qword_100114910);
      if (*((void *)&v17 + 1))
      {
        __int128 v13 = v16;
        __int128 v14 = v17;
        uint64_t v15 = v18;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10004F084(0LL, v7[2] + 1LL, 1, v7);
          char v7 = (void *)isUniquelyReferenced_nonNull_native;
        }

        unint64_t v10 = v7[2];
        unint64_t v9 = v7[3];
        if (v10 >= v9 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10004F084((void *)(v9 > 1), v10 + 1, 1, v7);
          char v7 = (void *)isUniquelyReferenced_nonNull_native;
        }

        v7[2] = v10 + 1;
        uint64_t v11 = &v7[5 * v10];
        v11[8] = v15;
        *((_OWORD *)v11 + swift_unknownObjectWeakDestroy(v0 + 2) = v13;
        *((_OWORD *)v11 + swift_unknownObjectWeakDestroy(v0 + 3) = v14;
      }

      else
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_1000178B0((uint64_t)&v16, &qword_100113D98);
      }

      dispatch thunk of _AnyIteratorBoxBase.next()(v20, isUniquelyReferenced_nonNull_native);
      if (!*((void *)&v21 + 1)) {
        goto LABEL_14;
      }
    }

    sub_1000178B0((uint64_t)v19, &qword_100114910);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    char v7 = _swiftEmptyArrayStorage;
  }

uint64_t sub_10004A494()
{
  return swift_deallocObject(v0, 44LL, 7LL);
}

uint64_t sub_10004A4A4()
{
  return swift_deallocObject(v0, 50LL, 7LL);
}

unint64_t sub_10004A4B4()
{
  unint64_t result = qword_100114928;
  if (!qword_100114928)
  {
    uint64_t v1 = sub_1000175B0(&qword_100114920);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100114928);
  }

  return result;
}

uint64_t sub_10004A510()
{
  return swift_deallocObject(v0, 52LL, 7LL);
}

void *sub_10004A520@<X0>(void *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, void, void *))(v3 + 16))( &v8,  *a1,  a1[1],  a1 + 2);
  if (v4) {
    *a2 = v4;
  }
  else {
    *a3 = v8;
  }
  return result;
}

void *sub_10004A578@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_10004996C(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 16), a2);
}

void *sub_10004A590(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v10 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _swiftEmptyArrayStorage;
    unsigned int v35 = a4 & 1;
    while (1)
    {
      sub_100017910(v10, (uint64_t)v27);
      uint64_t v12 = sub_100008E00(&qword_100114948);
      uint64_t v13 = sub_100008E00(&qword_100113EC0);
      if (swift_dynamicCast(&v24, v27, v12, v13, 6LL))
      {
        sub_10000AF84(&v24, (uint64_t)v28);
        uint64_t v14 = v29;
        uint64_t v15 = v30;
        sub_1000178EC(v28, v29);
        uint64_t v16 = v5;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, void, uint64_t, uint64_t))(v15 + 24))( &v31,  a2,  a3,  v35,  v14,  v15);
      }

      else
      {
        uint64_t v26 = 0LL;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        sub_1000178B0((uint64_t)&v24, &qword_100113EB0);
        sub_100017910(v10, (uint64_t)v27);
        uint64_t v17 = sub_100008E00(&qword_100114958);
        if ((swift_dynamicCast(&v24, v27, v12, v17, 6LL) & 1) == 0)
        {
          uint64_t v26 = 0LL;
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          sub_1000178B0((uint64_t)&v24, &qword_100114960);
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          uint64_t v33 = 0LL;
          goto LABEL_4;
        }

        sub_10000AF84(&v24, (uint64_t)v28);
        uint64_t v18 = v29;
        uint64_t v19 = v30;
        sub_1000178EC(v28, v29);
        uint64_t v16 = v5;
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16))( &v31,  a2,  a3,  v18,  v19);
      }

      uint64_t v5 = v16;
      if (v16)
      {
        sub_100017A40(v28);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(a1);
        return v11;
      }

      sub_100017A40(v28);
      if (*((void *)&v32 + 1))
      {
        sub_10000AF84(&v31, (uint64_t)v34);
        sub_10000AF84(v34, (uint64_t)&v31);
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
          uint64_t v11 = sub_10004FC40(0LL, v11[2] + 1LL, 1, v11);
        }
        unint64_t v21 = v11[2];
        unint64_t v20 = v11[3];
        if (v21 >= v20 >> 1) {
          uint64_t v11 = sub_10004FC40((void *)(v20 > 1), v21 + 1, 1, v11);
        }
        v11[2] = v21 + 1;
        sub_10000AF84(&v31, (uint64_t)&v11[5 * v21 + 4]);
        goto LABEL_5;
      }

void sub_10004A844(char *a1, char a2)
{
  uint64_t v4 = v2;
  sub_10004AFEC(v2 + 24, (uint64_t)v18, &qword_100114950);
  sub_10004AFEC((uint64_t)v18, (uint64_t)&v19, &qword_100114950);
  if (v19)
  {
    char v7 = sub_100046000((uint64_t)a1);
    if (v3) {
      return;
    }
    uint64_t v8 = (uint64_t)v7;
  }

  else
  {
    uint64_t v8 = *(void *)(v2 + 8);
    swift_bridgeObjectRetain(*(void *)(v4 + 8));
  }

  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v9 && sub_10001645C(22LL, v9)) {
    char v10 = 0;
  }
  else {
    char v10 = *(_BYTE *)(v4 + 17);
  }
  uint64_t v11 = a1;
  sub_100030860((void *)v4);
  uint64_t v12 = sub_10004A590(v8, (uint64_t)v11, v4, v10);
  sub_100030944((void *)v4);
  swift_bridgeObjectRelease(v8);

  if (!v3)
  {
    if (*(_BYTE *)(*(void *)v4 + 8LL))
    {
      unint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
      if (v13)
      {
        unint64_t v13 = sub_1000B36EC(*(unsigned __int8 *)(*(void *)v4 + 8LL));
        uint64_t v15 = v14;
LABEL_15:
        uint64_t active = type metadata accessor for ActiveControlInterface();
        swift_allocObject(active, 209LL, 7LL);
        uint64_t v17 = v11;
        sub_100030860((void *)v4);
        sub_1000816C4(v4, v17, a2 & 1, (uint64_t)v12, v13, v15);
        return;
      }
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    uint64_t v15 = 0LL;
    goto LABEL_15;
  }

uint64_t sub_10004AA00(uint64_t a1)
{
  unint64_t v2 = sub_10000AE14();
  uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
  *(_BYTE *)uint64_t v4 = 4;
  *(void *)(v4 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v4 + 16) = 0xE000000000000000LL;
  *(void *)(v4 + 24) = 0xD000000000000014LL;
  *(void *)(v4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF360LL;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
  *(void *)(v4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CF380LL;
  *(void *)(v4 + 56) = 58LL;
  return swift_willThrow(v3);
}

uint64_t sub_10004AAD4()
{
  return swift_deallocObject(v0, 68LL, 7LL);
}

uint64_t sub_10004AAF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004AB20()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

void *sub_10004AB54(void *a1)
{
  return a1;
}

uint64_t sub_10004AB7C()
{
  return sub_10004ABBC(80LL);
}

uint64_t sub_10004AB84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRetain(*(void *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10004ABB4()
{
  return sub_10004ABBC(64LL);
}

uint64_t sub_10004ABBC(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_10004ABF4()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_10004AC18(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004AC40()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

void *sub_10004AC7C(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[9];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10004ACCC()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10004ACF8()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

void *sub_10004AD34(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10004AD88()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

void *sub_10004ADC4(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_10004AE14()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

void *sub_10004AE48(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_10004AE8C()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10004AEB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain(*(void *)(a1 + 88));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_10004AEEC()
{
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_100032E74(v0[11], v1);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_10004AF38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRetain();
  sub_10004AF94(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10004AF94(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10004AFA8(result, a2);
  }
  return result;
}

uint64_t sub_10004AFA8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10004AFEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008E00(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004B030(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100032E74(result, a2);
  }
  return result;
}

uint64_t sub_10004B044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008E00(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004B088()
{
  unint64_t result = qword_100114970;
  if (!qword_100114970)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProcessingUnit,  &type metadata for ProcessingUnit);
    atomic_store(result, (unint64_t *)&qword_100114970);
  }

  return result;
}

unint64_t sub_10004B0CC()
{
  unint64_t result = qword_100114978;
  if (!qword_100114978)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExtensionUnit, &type metadata for ExtensionUnit);
    atomic_store(result, (unint64_t *)&qword_100114978);
  }

  return result;
}

void *sub_10004B110(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[20];
  uint64_t v4 = a1[21];
  unint64_t v5 = a1[22];
  uint64_t v6 = a1[23];
  uint64_t v7 = a1[24];
  uint64_t v8 = a1[25];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  sub_10004AF94(v4, v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_10004B194(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[21];
  unint64_t v5 = a1[22];
  uint64_t v6 = a1[23];
  uint64_t v7 = a1[24];
  uint64_t v8 = a1[25];
  swift_bridgeObjectRelease(a1[20]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10004B030(v4, v5);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

unint64_t sub_10004B21C()
{
  unint64_t result = qword_100114980;
  if (!qword_100114980)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AUAErrorCode, &type metadata for AUAErrorCode);
    atomic_store(result, (unint64_t *)&qword_100114980);
  }

  return result;
}

uint64_t sub_10004B260()
{
  uint64_t v1 = v0[14];
  if (v1 != 1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[15]);
    swift_bridgeObjectRelease(v0[16]);
  }

  return swift_deallocObject(v0, 136LL, 7LL);
}

unint64_t ActiveEntity.name.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 8))(&v17);
  uint64_t v4 = v18;
  uint64_t v5 = v19;
  sub_1000178EC(&v17, v18);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  if (BYTE2(v6) != 255)
  {
    int v8 = v6;
    sub_100017A40(&v17);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    uint64_t v11 = v9;
    if (v9)
    {
      uint64_t v12 = v10;
      uint64_t ObjectType = swift_getObjectType(v9);
      uint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
      swift_unknownObjectRelease(v11, v15);
      if (!v14) {
        return 0LL;
      }
      if (*(void *)&v14[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
      {
        unint64_t v7 = sub_1000B36EC(v8 & 0x1FFFF);

        return v7;
      }
    }

    return 0LL;
  }

  sub_100017A40(&v17);
  return 0LL;
}

double ActiveDataEntity.source.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16LL))();
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v22, a1, a2);
    uint64_t v10 = *((void *)&v23 + 1);
    uint64_t v11 = v24;
    sub_1000178EC(&v22, *((uint64_t *)&v23 + 1));
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    if ((v13 & 1) != 0) {
      uint64_t v14 = 0LL;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t ObjectType = swift_getObjectType(v8);
    sub_100017A40(&v22);
    sub_10002C5BC(v14, ObjectType, v9, (uint64_t)&v22);
    swift_unknownObjectRelease(v8, v16);
  }

  else
  {
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
  }

  sub_100032E2C((uint64_t)&v22, (uint64_t)v20);
  if (!v21)
  {
    sub_1000178B0((uint64_t)v20, &qword_100113E98);
    goto LABEL_11;
  }

  uint64_t v17 = sub_100008E00(&qword_100113B28);
  uint64_t v18 = sub_100008E00(&qword_100113B30);
  if ((swift_dynamicCast(a3, v20, v17, v18, 6LL) & 1) == 0)
  {
LABEL_11:
    *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

uint64_t ActiveDataEntity.nameStringIndex.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_1000178EC(v5, v6);
  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 32LL))(v2);
  sub_100017A40(v5);
  return v2 & 0xFFFFFF;
}

uint64_t sub_10004B654(uint64_t a1, uint64_t a2)
{
  return ActiveDataEntity.sourceID.getter(a1, a2);
}

uint64_t ActiveDataEntity.sourceID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1000178EC(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_100017A40(v6);
  return v4;
}

uint64_t sub_10004B6DC(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveMixerUnit);
}

uint64_t ActiveDataEntity.entityID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1000178EC(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 16LL))(v2);
  sub_100017A40(v6);
  return v4;
}

uint64_t sub_10004B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ActiveEntity.start(on:)(a1, a2, a3, a4);
}

uint64_t ActiveEntity.start(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  uint64_t v8 = swift_unknownObjectRetain(a1);
  return v7(v8, a2, a3, a4);
}

void sub_10004B7AC( AUASDCore::AUAInterruptAttribute_optional a1, Swift::UInt_optional a2, Swift::UInt_optional a3)
{
  a2.is_nil &= 1u;
  a3.is_nil &= 1u;
  ActiveEntity.processInterrupt(attribute:controlSelector:channelNumber:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveEntity.processInterrupt(attribute:controlSelector:channelNumber:)( AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector, Swift::UInt_optional channelNumber)
{
  if (attribute.value == AUASDCore_AUAInterruptAttribute_unknownDefault
    || controlSelector.is_nil
    || channelNumber.is_nil
    || controlSelector.value == 0)
  {
    sub_10004BEF4(v3, v4);
  }

  else
  {
    (*(void (**)(void))(v4 + 88))();
  }

void sub_10004B820(AUASDCore::AUAInterruptAttribute a1, Swift::UInt a2, Swift::UInt a3)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveEntity.processTargetedInterrupt(attribute:controlSelector:channelNumber:)( AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v10 = (void *)0xEE00656369766564LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0xE000000000000000LL;
  uint64_t v11 = 0x206E776F6E6B6E55LL;
  _StringGuts.grow(_:)(91LL);
  v12._object = (void *)0x80000001000CF670LL;
  v12._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v12);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v6, v5);
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    uint64_t ObjectType = swift_getObjectType(v13);
    uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(ObjectType, v16);
    swift_unknownObjectRelease(v15, v19);
    if (v18)
    {
      id v20 = [v18 boxName];

      if (v20)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v10 = v21;
      }
    }
  }

  v22._countAndFlagsBits = v11;
  v22._object = v10;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v10);
  v23._countAndFlagsBits = 0xD000000000000019LL;
  v23._object = (void *)0x80000001000CF690LL;
  String.append(_:)(v23);
  LOBYTE(v36) = attribute;
  _print_unlocked<A, B>(_:_:)( &v36,  &v34,  &type metadata for AUAInterruptAttribute,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v24._countAndFlagsBits = 0xD000000000000010LL;
  v24._object = (void *)0x80000001000CF6B0LL;
  String.append(_:)(v24);
  Swift::UInt v36 = controlSelector;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 0x6C656E6E61686320LL;
  v27._object = (void *)0xEE007265626D754ELL;
  String.append(_:)(v27);
  Swift::UInt v36 = channelNumber;
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  uint64_t v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = v35;
  sub_100029840( v34,  v35,  0xD000000000000042LL,  (void *)0x80000001000CE920LL,  0xD00000000000001CLL,  0x80000001000CE050LL,  115LL);
  swift_bridgeObjectRelease(v30);
  unint64_t v31 = sub_10000AE14();
  uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
  *(_BYTE *)uint64_t v33 = 2;
  *(void *)(v33 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v33 + 16) = 0xE000000000000000LL;
  *(void *)(v33 + 24) = 0xD000000000000042LL;
  *(void *)(v33 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CE920LL;
  *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
  *(void *)(v33 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE050LL;
  *(void *)(v33 + 56) = 116LL;
  swift_willThrow(v32);
}

uint64_t ActiveDataEntity.pathName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 56LL))();
  if (v5) {
    return v4;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v10, a1, a2);
  if (v11)
  {
    sub_10000AF84(&v10, (uint64_t)v12);
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    sub_1000178EC(v12, v13);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
    sub_100017A40(v12);
  }

  else
  {
    sub_1000178B0((uint64_t)&v10, &qword_100113B38);
    return 0x206E776F6E6B6E55LL;
  }

  return v6;
}

uint64_t sub_10004BBF4(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveSelectorUnit);
}

uint64_t ActiveEntity.entityID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 8))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1000178EC(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_100017A40(v6);
  return v4;
}

void *sub_10004BC6C(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    unint64_t v27 = v5 & 0xC000000000000001LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4LL;
    uint64_t v26 = v5;
    while (1)
    {
      id v10 = v27 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v5) : *(id *)(v5 + 8 * v8);
      uint64_t v11 = v10;
      uint64_t v5 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v30 = v10;
      a1(&v29, &v30);
      if (v4)
      {
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v26);

        return v7;
      }

      uint64_t v12 = v29;
      uint64_t v13 = *(void *)(v29 + 16);
      int64_t v14 = v7[2];
      int64_t v15 = v14 + v13;
      if (__OFADD__(v14, v13)) {
        goto LABEL_32;
      }
      uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(v7);
      if ((_DWORD)isUniquelyReferenced_nonNull_native && v15 <= v7[3] >> 1)
      {
        if (*(void *)(v12 + 16)) {
          goto LABEL_20;
        }
      }

      else
      {
        if (v14 <= v15) {
          int64_t v17 = v14 + v13;
        }
        else {
          int64_t v17 = v14;
        }
        uint64_t v7 = sub_10004F874(isUniquelyReferenced_nonNull_native, v17, 1, v7);
        if (*(void *)(v12 + 16))
        {
LABEL_20:
          uint64_t v18 = v7[2];
          if ((v7[3] >> 1) - v18 < v13) {
            goto LABEL_34;
          }
          unint64_t v19 = (unint64_t)&v7[5 * v18 + 4];
          if (v12 + 32 < v19 + 40 * v13 && v19 < v12 + 32 + 40 * v13)
          {
            double result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
            __break(1u);
            return result;
          }

          sub_100008E00(&qword_100114598);
          swift_arrayInitWithCopy(v19);
          if (v13)
          {
            uint64_t v21 = v7[2];
            BOOL v22 = __OFADD__(v21, v13);
            uint64_t v23 = v21 + v13;
            if (v22) {
              goto LABEL_35;
            }
            v7[2] = v23;
          }

          goto LABEL_5;
        }
      }

      if (v13) {
        goto LABEL_33;
      }
LABEL_5:
      swift_bridgeObjectRelease(v12);
      ++v8;
      BOOL v9 = v5 == v6;
      uint64_t v5 = v26;
      if (v9)
      {
        swift_bridgeObjectRelease(v26);
        return v7;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v5 < 0) {
      uint64_t v24 = v5;
    }
    else {
      uint64_t v24 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v24);
  }

  swift_bridgeObjectRelease(v5);
  return _swiftEmptyArrayStorage;
}

void sub_10004BEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)0xEE00656369766564LL;
  uint64_t v8 = 0x206E776F6E6B6E55LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v63 = v2;
  uint64_t v10 = v9(a1, a2);
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    uint64_t ObjectType = swift_getObjectType(v10);
    int64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);
    swift_unknownObjectRelease(v12, v16);
    if (v15)
    {
      id v17 = [v15 boxName];

      if (v17)
      {
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v7 = v18;
      }
    }
  }

  v19._countAndFlagsBits = v8;
  v19._object = v7;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v7);
  v20._countAndFlagsBits = 0xD00000000000001FLL;
  v20._object = (void *)0x80000001000CF880LL;
  String.append(_:)(v20);
  uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  sub_100029834( v64,  v65,  0xD00000000000001BLL,  (void *)0x80000001000CF8A0LL,  0xD00000000000001CLL,  0x80000001000CE050LL,  124LL);
  swift_bridgeObjectRelease(v65);
  uint64_t v23 = v9(a1, a2);
  if (v23)
  {
    uint64_t v25 = v23;
    uint64_t v26 = v24;
    uint64_t v27 = swift_getObjectType(v23);
    Swift::String v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v27, v26);
    swift_unknownObjectRelease(v25, v29);
    if (v28)
    {
      id v30 = [v28 audioDevices];

      if (v30)
      {
        uint64_t v31 = sub_10000AF08(0LL, &qword_100114590, &OBJC_CLASS___ASDAudioDevice_ptr);
        unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

        __chkstk_darwin(v33);
        v55[2] = a1;
        _OWORD v55[3] = a2;
        v55[4] = v63;
        uint64_t v34 = sub_10004BC6C((void (*)(uint64_t *__return_ptr, id *))sub_10004E89C, (uint64_t)v55, v32);
        swift_bridgeObjectRelease(v32);
        uint64_t v35 = v34[2];
        if (v35)
        {
          Swift::UInt v36 = v34;
          uint64_t v37 = (uint64_t)(v34 + 4);
          uint64_t v56 = v36;
          __n128 v38 = swift_bridgeObjectRetain(v36);
          p_ivar_base_size = &AUACustomNumberProperty.ivar_base_size;
          v38.n128_u64[0] = 136446210LL;
          __n128 v62 = v38;
          uint64_t v60 = 0x80000001000CF8C0LL;
          uint64_t v61 = 0xD00000000000001ALL;
          __int128 v59 = (void *)0x80000001000CF8A0LL;
          uint64_t v57 = (char *)&type metadata for Any + 8;
          uint64_t v58 = 0x80000001000CE050LL;
          do
          {
            sub_100017910(v37, (uint64_t)&v64);
            uint64_t v40 = v66;
            uint64_t v41 = v67;
            sub_1000178EC(&v64, v66);
            uint64_t v42 = v4;
            (*(void (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
            if (v4)
            {
              if (*((void *)p_ivar_base_size + 286) != -1LL) {
                swift_once(&qword_1001128F0, sub_10002984C);
              }
              uint64_t v4 = 0LL;
              uint64_t v43 = type metadata accessor for Logger(0LL);
              uint64_t v44 = sub_100008EC4(v43, (uint64_t)qword_1001171F8);
              unsigned __int8 v45 = (os_log_s *)Logger.logObject.getter(v44);
              os_log_type_t v46 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v45, v46))
              {
                uint64_t v47 = swift_slowAlloc(12LL, -1LL);
                uint64_t v63 = 0LL;
                uint64_t v48 = p_ivar_base_size;
                uint64_t v49 = v47;
                uint64_t v50 = swift_slowAlloc(32LL, -1LL);
                uint64_t v68 = v50;
                *(_DWORD *)uint64_t v49 = v62.n128_u32[0];
                uint64_t v51 = sub_1000298B4(v61, v60, 0xD00000000000001BLL, v59, 0xD00000000000001CLL, v58, 144LL);
                unint64_t v53 = v52;
                *(void *)(v49 + 4) = sub_1000164BC(v51, v52, &v68);
                swift_bridgeObjectRelease(v53);
                _os_log_impl((void *)&_mh_execute_header, v45, v46, "%{public}s", (uint8_t *)v49, 0xCu);
                swift_arrayDestroy(v50, 1LL, v57);
                swift_slowDealloc(v50, -1LL, -1LL);
                uint64_t v54 = v49;
                p_ivar_base_size = v48;
                uint64_t v4 = v63;
                swift_slowDealloc(v54, -1LL, -1LL);
              }

              swift_errorRelease(v42);
            }

            else
            {
              uint64_t v4 = 0LL;
            }

            sub_100017A40(&v64);
            v37 += 40LL;
            --v35;
          }

          while (v35);
          swift_bridgeObjectRelease_n(v56, 2LL);
        }

        else
        {
          swift_bridgeObjectRelease(v34);
        }
      }
    }
  }

id sub_10004C3C0@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id result = [*a1 controls];
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = sub_10000AF08(0LL, &qword_100113B20, &OBJC_CLASS___ASDControl_ptr);
    uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

    __chkstk_darwin(v13);
    v15[2] = a3;
    v15[3] = a4;
    _OWORD v15[4] = a2;
    int64_t v14 = sub_10001B214((void (*)(__int128 *__return_ptr, id *))sub_10004E8B8, (uint64_t)v15, v12);
    id result = (id)swift_bridgeObjectRelease(v12);
    *a5 = v14;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10004C4A8@<X0>(id *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  id v16 = *a1;
  uint64_t v7 = sub_10000AF08(0LL, &qword_100113B20, &OBJC_CLASS___ASDControl_ptr);
  id v8 = v16;
  uint64_t v9 = sub_100008E00(&qword_100114598);
  if ((swift_dynamicCast(v14, &v16, v7, v9, 6LL) & 1) != 0)
  {
    sub_10000AF84(v14, (uint64_t)v17);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    sub_1000178EC(v17, v18);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    if (v12 == (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3))
    {
      sub_100017910((uint64_t)v17, a4);
    }

    else
    {
      *(void *)(a4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }

    return sub_100017A40(v17);
  }

  else
  {
    uint64_t v15 = 0LL;
    memset(v14, 0, sizeof(v14));
    uint64_t result = sub_1000178B0((uint64_t)v14, &qword_100114048);
    *(void *)(a4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return result;
}

uint64_t sub_10004C5E8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v6 = (*(uint64_t (**)(void))(a2 + 40))();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v7)
  {
    uint64_t v94 = 0LL;
    memset(v93, 0, sizeof(v93));
    sub_1000178B0((uint64_t)v93, &qword_100114040);
    unint64_t v41 = sub_10000AE14();
    uint64_t v42 = swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
    *(_BYTE *)uint64_t v43 = 1;
    *(void *)(v43 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v43 + 16) = 0xE000000000000000LL;
    *(void *)(v43 + 24) = 0xD000000000000010LL;
    *(void *)(v43 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CF860LL;
    *(void *)(v43 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v43 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CE050LL;
    *(void *)(v43 + 56) = 159LL;
    swift_willThrow(v42);
    return v2;
  }

  uint64_t v9 = v7;
  uint64_t v10 = v8;
  int v11 = (v6 << 8) | 0xC20080;
  uint64_t ObjectType = swift_getObjectType(v7);
  v92[3] = a1;
  v92[4] = a2;
  uint64_t v13 = sub_100028B40(v92);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v13, v2, a1);
  uint64_t v2 = v9;
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(v11, (uint64_t)v92, 0LL, ObjectType, v10, (uint64_t)v93);
  swift_unknownObjectRelease(v9, v14);
  sub_100017A40(v92);
  if (v3) {
    return v2;
  }
  uint64_t v89 = 0LL;
  sub_10000AF84(v93, (uint64_t)v95);
  uint64_t v16 = v96;
  uint64_t v15 = v97;
  id v17 = sub_1000178EC(v95, v96);
  uint64_t v91 = v82;
  uint64_t v18 = *(void **)(v16 - 8);
  uint64_t v19 = (void *)v18[8];
  __chkstk_darwin(v17);
  unint64_t v20 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  Swift::String v21 = (void (*)(char *))v18[2];
  v21((char *)v82 - v20);
  uint64_t v22 = *(void *)(v15 + 8);
  uint64_t v23 = dispatch thunk of static BinaryInteger.isSigned.getter(v16, v22);
  char v24 = v23;
  uint64_t v90 = v82;
  Swift::String v98 = v19;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)v82 - v20;
  uint64_t v26 = (char *)v82 - v20;
  uint64_t v27 = (char *)v82 - v20;
  Swift::String v28 = (char *)v82 - v20;
  uint64_t v29 = (void (*)(char *, char *, uint64_t))v21;
  ((void (*)(char *, char *, uint64_t))v21)(v26, v28, v16);
  uint64_t v87 = v18;
  if ((v24 & 1) == 0)
  {
    uint64_t v31 = (void (*)(char *, uint64_t))v18[1];
    v31(v25, v16);
    uint64_t v33 = v22;
    goto LABEL_12;
  }

  uint64_t v30 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v22);
  uint64_t v31 = (void (*)(char *, uint64_t))v18[1];
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v31)(v25, v16);
  uint64_t v33 = v22;
  if (v30 <= 64)
  {
LABEL_12:
    Swift::UInt v36 = v27;
    uint64_t v40 = v98;
    goto LABEL_27;
  }

  __chkstk_darwin(v32);
  uint64_t v35 = (char *)v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt v36 = v27;
  v29(v35, v27, v16);
  *(void *)&v93[0] = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v16, v33) & 1) != 0)
  {
    uint64_t v37 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v33);
    if (v37 >= 64)
    {
      uint64_t v86 = v82;
      uint64_t v40 = v98;
      __chkstk_darwin(v37);
      uint64_t v88 = v82;
      unint64_t v49 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v93, &type metadata for Int, v49, v16, v33);
      char v50 = dispatch thunk of static Comparable.< infix(_:_:)( v35,  (char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v16,  *(void *)(*(void *)(v33 + 32) + 8LL));
      v31((char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL), v16);
      v31(v35, v16);
      char v39 = v86;
      if ((v50 & 1) == 0) {
        goto LABEL_27;
      }
    }

    else
    {
      uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter(v16, v33);
      v31(v35, v16);
      char v39 = *(uint64_t **)&v93[0];
      uint64_t v40 = v98;
    }

    goto LABEL_25;
  }

  uint64_t v88 = v82;
  char v44 = dispatch thunk of static BinaryInteger.isSigned.getter(v16, v33);
  uint64_t v86 = (uint64_t *)v35;
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter(v16, v33);
  if ((v44 & 1) != 0)
  {
    uint64_t v40 = v98;
    if (v45 > 64)
    {
      unint64_t v85 = v82;
      __chkstk_darwin(v45);
      unint64_t v46 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v93, &type metadata for Int, v46, v16, v33);
      uint64_t v47 = v86;
      char v48 = dispatch thunk of static Comparable.< infix(_:_:)( v86,  (char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v16,  *(void *)(*(void *)(v33 + 32) + 8LL));
      v31((char *)v82 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL), v16);
      v31((char *)v47, v16);
      char v39 = v85;
      if ((v48 & 1) == 0) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }

    uint64_t v84 = *(void *)(*(void *)(v33 + 24) + 16LL);
    uint64_t v54 = v84;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v84);
    unint64_t v85 = v82;
    __chkstk_darwin(AssociatedTypeWitness);
    uint64_t v57 = (char *)v82 - v56;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v54,  v16,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v59 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    v82[1] = v82;
    __chkstk_darwin(v59);
    unint64_t v83 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v60 = (char *)v82 - v83;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v57, v16, v84);
    uint64_t v61 = v86;
    LODWORD(v84) = dispatch thunk of static Comparable.< infix(_:_:)( v86,  v60,  v16,  *(void *)(*(void *)(v33 + 32) + 8LL));
    uint64_t v62 = ((uint64_t (*)(char *, uint64_t))v31)(v60, v16);
    unint64_t v85 = v82;
    __chkstk_darwin(v62);
    uint64_t v63 = (uint64_t)v82 - v83;
    ((void (*)(char *, uint64_t *, uint64_t))v87[4])((char *)v82 - v83, v61, v16);
    if ((v84 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v64 = *(void *)&v93[0];
    uint64_t v65 = dispatch thunk of BinaryInteger._lowWord.getter(v16, v33);
    v31((char *)v63, v16);
    char v39 = v85;
    BOOL v53 = v65 < v64;
  }

  else
  {
    uint64_t v40 = v98;
    char v39 = &v99;
    if (v45 >= 64)
    {
LABEL_26:
      v31((char *)*(v39 - 32), v16);
      goto LABEL_27;
    }

    uint64_t v51 = v86;
    uint64_t v52 = dispatch thunk of BinaryInteger._lowWord.getter(v16, v33);
    v31((char *)v51, v16);
    char v39 = *(uint64_t **)&v93[0];
    BOOL v53 = v52 < *(void *)&v93[0];
  }

  if (v53)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

uint64_t ActiveDataEntity.cluster.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 24))(v11);
  sub_10004E4A8((uint64_t)v11, (uint64_t)&v6);
  if (v7)
  {
    sub_10000AF84(&v6, (uint64_t)v8);
    uint64_t v2 = v9;
    uint64_t v3 = v10;
    sub_1000178EC(v8, v9);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
    sub_1000178B0((uint64_t)v11, &qword_100113B38);
    sub_100017A40(v8);
  }

  else
  {
    sub_1000178B0((uint64_t)v11, &qword_100113B38);
    sub_1000178B0((uint64_t)&v6, &qword_100113B38);
    return 0LL;
  }

  return v4;
}

uint64_t ActiveExtensionUnit.staticExtensionUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004E4F0(v1 + 16, a1);
}

uint64_t ActiveExtensionUnit.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 112);
}

uint64_t ActiveExtensionUnit.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a2;
  swift_unknownObjectWeakAssign(v2 + 112, a1);
  return swift_unknownObjectRelease(a1, v5);
}

uint64_t (*ActiveExtensionUnit.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 112, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 112);
  uint64_t v5 = *(void *)(v1 + 120);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10004D208;
}

uint64_t ActiveExtensionUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D224((uint64_t (*)(void))sub_10004E52C, a1);
}

uint64_t ActiveExtensionUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D224((uint64_t (*)(void))sub_10004B0CC, a1);
}

uint64_t sub_10004D224@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  char v7 = *(_BYTE *)(v2 + 42);
  uint64_t v8 = *(void *)(v2 + 48);
  __int16 v17 = *(_WORD *)(v2 + 56);
  __int16 v18 = *(_WORD *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 64);
  uint64_t v16 = *(void *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  char v15 = *(_BYTE *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 96);
  uint64_t v11 = *(void *)(v2 + 104);
  a2[3] = (uint64_t)&type metadata for ExtensionUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100104980, 112LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(_BYTE *)(v13 + 24) = v5;
  *(void *)(v13 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_BYTE *)(v13 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v18;
  *(void *)(v13 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(_WORD *)(v13 + 56) = v17;
  *(void *)(v13 + 64) = v9;
  *(void *)(v13 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v16;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v10;
  *(_BYTE *)(v13 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v15;
  *(void *)(v13 + 96) = v12;
  *(void *)(v13 + 104) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRetain(v12);
}

uint64_t ActiveExtensionUnit.latencyControlSelector.getter()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 112);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t ObjectType = swift_getObjectType(result);
    int v5 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
    swift_unknownObjectRelease(v2, v6);
    if (v5 == 32) {
      return 5LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void *ActiveExtensionUnit.deinit()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10001AA14((uint64_t)(v0 + 14));
  return v0;
}

uint64_t ActiveExtensionUnit.__deallocating_deinit()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_10001AA14((uint64_t)(v0 + 14));
  return swift_deallocClassInstance(v0, 128LL, 7LL);
}

uint64_t sub_10004D454@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D46C((uint64_t (*)(void))sub_10004B0CC, a1);
}

uint64_t sub_10004D460@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D46C((uint64_t (*)(void))sub_10004E52C, a1);
}

uint64_t sub_10004D46C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(_BYTE *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  char v8 = *(_BYTE *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v18 = *(_WORD *)(*v2 + 56);
  __int16 v19 = *(_WORD *)(*v2 + 40);
  uint64_t v10 = *(void *)(*v2 + 64);
  uint64_t v17 = *(void *)(v4 + 72);
  uint64_t v11 = *(void *)(v4 + 80);
  char v16 = *(_BYTE *)(v4 + 88);
  uint64_t v12 = *(void *)(v4 + 96);
  uint64_t v13 = *(void *)(v4 + 104);
  a2[3] = (uint64_t)&type metadata for ExtensionUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100104980, 112LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v19;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_WORD *)(v14 + 56) = v18;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v17;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v11;
  *(_BYTE *)(v14 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v16;
  *(void *)(v14 + 96) = v12;
  *(void *)(v14 + 104) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return swift_bridgeObjectRetain(v12);
}

uint64_t sub_10004D570()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 112, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 112);
}

uint64_t sub_10004D5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 112;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

uint64_t (*sub_10004D61C(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 112, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 112);
  uint64_t v6 = *(void *)(v4 + 120);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10004D208;
}

void sub_10004D68C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 112, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10004D6FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 112;
  swift_beginAccess(v2, v8, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 120);
    uint64_t ObjectType = swift_getObjectType(result);
    LODWORD(v5) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
    if ((_DWORD)v5 == 32) {
      return 5LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10004D77C(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveExtensionUnit);
}

uint64_t sub_10004D788()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  sub_10001AA14((uint64_t)(v0 + 12));
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t sub_10004D7E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D7F8((uint64_t (*)(void))sub_10004B088, a1);
}

uint64_t sub_10004D7EC@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004D7F8((uint64_t (*)(void))sub_10004E6BC, a1);
}

uint64_t sub_10004D7F8@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 16LL);
  char v6 = *(_BYTE *)(*(void *)v2 + 24LL);
  uint64_t v7 = *(void *)(*(void *)v2 + 32LL);
  char v8 = *(_BYTE *)(*(void *)v2 + 42LL);
  uint64_t v9 = *(void *)(*(void *)v2 + 48LL);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 56LL);
  __int16 v17 = *(_WORD *)(*(void *)v2 + 40LL);
  uint64_t v10 = *(void *)(*(void *)v2 + 64LL);
  uint64_t v11 = v4[9];
  uint64_t v12 = v4[10];
  uint64_t v13 = v4[11];
  a2[3] = (uint64_t)&type metadata for ProcessingUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100104CB0, 96LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v17;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_WORD *)(v14 + 56) = v16;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
  *(void *)(v14 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v13;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRetain(v11);
}

void (*sub_10004D8DC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 96, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 96);
  uint64_t v6 = *(void *)(v4 + 104);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001E2A0;
}

uint64_t sub_10004D94C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 96;
  swift_beginAccess(v2, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)(v1 + 104);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
  }

  return 0LL;
}

uint64_t sub_10004D9C0(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100104C00);
}

uint64_t sub_10004D9CC()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t sub_10004D9F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DA10((uint64_t (*)(void))sub_10004E73C, a1);
}

uint64_t sub_10004DA04@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DA10((uint64_t (*)(void))sub_10004E7A4, a1);
}

uint64_t sub_10004DA10@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(_BYTE *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v16 = *(_WORD *)(*v2 + 40);
  char v8 = *(_BYTE *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v10 = *(_WORD *)(*v2 + 56);
  uint64_t v11 = *(void *)(*v2 + 64);
  uint64_t v12 = *(void *)(v4 + 72);
  uint64_t v13 = *(void *)(v4 + 80);
  a2[3] = (uint64_t)&type metadata for SampleRateConverter;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100104CD8, 88LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v16;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v13;
  return swift_bridgeObjectRetain(v11);
}

uint64_t sub_10004DAD8()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 88, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 88);
}

uint64_t sub_10004DB20(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 88;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 96) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

void (*sub_10004DB84(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 88, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 88);
  uint64_t v6 = *(void *)(v4 + 96);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10004DBF4;
}

void sub_10004DBF4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 96) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 88, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10004DC64()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 88;
  swift_beginAccess(v2, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)(v1 + 96);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
  }

  return 0LL;
}

uint64_t sub_10004DCD8(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100104BC0);
}

uint64_t sub_10004DCE4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(v1);
  sub_10001AA14(v0 + 80);
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t sub_10004DD20@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DD3C((uint64_t (*)(void))sub_10004E7E8, a1);
}

uint64_t sub_10004DD30@<X0>(uint64_t *a1@<X8>)
{
  return sub_10004DD3C((uint64_t (*)(void))sub_10004E858, a1);
}

uint64_t sub_10004DD3C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(_BYTE *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v8 = *(_WORD *)(*v2 + 40);
  char v9 = *(_BYTE *)(*v2 + 42);
  uint64_t v10 = *(void *)(*v2 + 48);
  __int16 v11 = *(_WORD *)(*v2 + 56);
  uint64_t v12 = *(void *)(*v2 + 64);
  uint64_t v13 = *(void *)(v4 + 72);
  a2[3] = (uint64_t)&type metadata for EffectUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100104D00, 80LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_BYTE *)(v14 + 4swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
  *(void *)(v14 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v10;
  *(_WORD *)(v14 + 56) = v11;
  *(void *)(v14 + 64) = v12;
  *(void *)(v14 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v13;
  swift_bridgeObjectRetain(v13);
  return swift_bridgeObjectRetain(v12);
}

uint64_t sub_10004DDF4()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 80, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 80);
}

uint64_t sub_10004DE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 80;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

void (*sub_10004DEA0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 80, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 88);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10004DF10;
}

void sub_10004DF10(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 80, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10004DF80()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 80;
  swift_beginAccess(v2, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)(v1 + 88);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
  }

  return 0LL;
}

uint64_t sub_10004DFF4(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100104B20);
}

uint64_t ActivePowerDomain.staticPowerDomain.getter@<X0>(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 24);
  char v3 = *(_BYTE *)(v1 + 26);
  uint64_t v4 = *(void *)(v1 + 32);
  __int16 v5 = *(_WORD *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 16);
  *(_BYTE *)(a1 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v3;
  *(_WORD *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = v5;
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v7);
}

uint64_t ActivePowerDomain.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 64);
}

uint64_t ActivePowerDomain.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a2;
  swift_unknownObjectWeakAssign(v2 + 64, a1);
  return swift_unknownObjectRelease(a1, v5);
}

uint64_t (*ActivePowerDomain.function.modify(void *a1))()
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 64, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10004E160;
}

double ActivePowerDomain.staticEntity.getter@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  __int16 v4 = *(_WORD *)(v1 + 24);
  char v5 = *(_BYTE *)(v1 + 26);
  uint64_t v6 = *(void *)(v1 + 32);
  __int16 v7 = *(_WORD *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  a1[3] = (uint64_t)&type metadata for PowerDomain;
  a1[4] = sub_10004E5AC();
  uint64_t v10 = swift_allocObject(&unk_1001049A8, 64LL, 7LL);
  *a1 = v10;
  *(void *)(v10 + 16) = v3;
  *(_BYTE *)(v10 + 26) = v5;
  *(_WORD *)(v10 + 24) = v4;
  *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  *(_WORD *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(void *)(v10 + 56) = v8;
  swift_bridgeObjectRetain(v9);
  *(void *)&double result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t ActivePowerDomain.deinit()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  sub_10001AA14(v0 + 64);
  return v0;
}

uint64_t ActivePowerDomain.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(v1);
  sub_10001AA14(v0 + 64);
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

double sub_10004E270@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  __int16 v5 = *(_WORD *)(*v1 + 24);
  char v6 = *(_BYTE *)(*v1 + 26);
  uint64_t v7 = *(void *)(*v1 + 32);
  __int16 v8 = *(_WORD *)(*v1 + 40);
  uint64_t v9 = *(void *)(*v1 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  a1[3] = (uint64_t)&type metadata for PowerDomain;
  a1[4] = sub_10004E5AC();
  uint64_t v11 = swift_allocObject(&unk_1001049A8, 64LL, 7LL);
  *a1 = v11;
  *(void *)(v11 + 16) = v4;
  *(_BYTE *)(v11 + 26) = v6;
  *(_WORD *)(v11 + 24) = v5;
  *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v7;
  *(_WORD *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
  *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(void *)(v11 + 56) = v10;
  swift_bridgeObjectRetain(v9);
  *(void *)&double result = swift_bridgeObjectRetain(v10).n128_u64[0];
  return result;
}

uint64_t sub_10004E310()
{
  uint64_t v1 = *v0;
  swift_beginAccess(v1 + 64, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1 + 64);
}

uint64_t sub_10004E358(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2 + 64;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *(void *)(v5 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  return swift_unknownObjectRelease(a1, v7);
}

uint64_t (*sub_10004E3BC(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = v4;
  swift_beginAccess(v4 + 64, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4 + 64);
  uint64_t v6 = *(void *)(v4 + 72);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10004E160;
}

void sub_10004E42C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 40LL);
  *(void *)(v5 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(*(void *)a1 + 32LL);
  swift_unknownObjectWeakAssign(v5 + 64, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v6);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v7);
  }

  free(v3);
}

uint64_t sub_10004E49C(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_10004E4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113B38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004E4F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10004E52C()
{
  unint64_t result = qword_100114988;
  if (!qword_100114988)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExtensionUnit, &type metadata for ExtensionUnit);
    atomic_store(result, (unint64_t *)&qword_100114988);
  }

  return result;
}

uint64_t sub_10004E570()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

unint64_t sub_10004E5AC()
{
  unint64_t result = qword_100114990;
  if (!qword_100114990)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PowerDomain, &type metadata for PowerDomain);
    atomic_store(result, (unint64_t *)&qword_100114990);
  }

  return result;
}

uint64_t sub_10004E5F0()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for ActiveExtensionUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore19ActiveExtensionUnit);
}

uint64_t type metadata accessor for ActiveProcessingUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore20ActiveProcessingUnit);
}

uint64_t type metadata accessor for ActiveSampleRateConverter()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore25ActiveSampleRateConverter);
}

uint64_t type metadata accessor for ActiveEffectUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore16ActiveEffectUnit);
}

uint64_t type metadata accessor for ActivePowerDomain()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore17ActivePowerDomain);
}

unint64_t sub_10004E6BC()
{
  unint64_t result = qword_100114DC8;
  if (!qword_100114DC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProcessingUnit,  &type metadata for ProcessingUnit);
    atomic_store(result, (unint64_t *)&qword_100114DC8);
  }

  return result;
}

uint64_t sub_10004E700()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

unint64_t sub_10004E73C()
{
  unint64_t result = qword_100114DD0;
  if (!qword_100114DD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SampleRateConverter,  &type metadata for SampleRateConverter);
    atomic_store(result, (unint64_t *)&qword_100114DD0);
  }

  return result;
}

uint64_t sub_10004E780()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

unint64_t sub_10004E7A4()
{
  unint64_t result = qword_100114DD8;
  if (!qword_100114DD8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SampleRateConverter,  &type metadata for SampleRateConverter);
    atomic_store(result, (unint64_t *)&qword_100114DD8);
  }

  return result;
}

unint64_t sub_10004E7E8()
{
  unint64_t result = qword_100114DE0;
  if (!qword_100114DE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EffectUnit, &type metadata for EffectUnit);
    atomic_store(result, (unint64_t *)&qword_100114DE0);
  }

  return result;
}

uint64_t sub_10004E82C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

unint64_t sub_10004E858()
{
  unint64_t result = qword_100114DE8;
  if (!qword_100114DE8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EffectUnit, &type metadata for EffectUnit);
    atomic_store(result, (unint64_t *)&qword_100114DE8);
  }

  return result;
}

id sub_10004E89C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_10004C3C0(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_10004E8B8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004C4A8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_10004E8DC( AUASDCore::AUAInterruptAttribute_optional a1, Swift::UInt_optional a2, Swift::UInt_optional a3)
{
}

BOOL ClockRateRange.isMultiRate.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  return a1 < a2 && a3 > 1;
}

BOOL ClockRateRange.isContinuousRate.getter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  return a1 < a2 && a3 == 1;
}

BOOL ClockRateRange.isSingleRate.getter(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t ClockRateRange.samplingRate.getter(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    return 0LL;
  }
  return result;
}

void *ClockRateRange.multiRangeSamplingRates.getter( void *result, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = _swiftEmptyArrayStorage;
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v6 = (unint64_t)result;
    char v7 = 0;
    unint64_t v8 = 0LL;
    char v9 = 0;
    BOOL v10 = result == (void *)a2;
    while (1)
    {
      unint64_t v11 = v6 + a3;
      if (__CFADD__(v6, a3))
      {
        char v9 = 0;
        unint64_t v8 = 0x8000000000000000LL;
        unint64_t v11 = -1LL;
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      unint64_t v8 = 0LL;
      char v9 = 1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_21:
      }
        uint64_t v3 = sub_100050868(0LL, v3[2] + 1LL, 1, v3, &qword_100113B40);
      while (1)
      {
LABEL_17:
        unint64_t v15 = v3[2];
        unint64_t v14 = v3[3];
        if (v15 >= v14 >> 1) {
          uint64_t v3 = sub_100050868((void *)(v14 > 1), v15 + 1, 1, v3, &qword_100113B40);
        }
        v3[2] = v15 + 1;
        v3[v15 + 4] = v6;
        unint64_t v6 = v11;
        BOOL v10 = v11 == a2;
        if (v11 < a2) {
          break;
        }
LABEL_9:
        char v12 = !v10;
        char v7 = 1;
        unint64_t v11 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
          goto LABEL_21;
        }
        unint64_t v11 = v6;
      }
    }
  }

  __break(1u);
  return result;
}

Swift::Bool __swiftcall ClockRateRange.supportsRate(_:)(Swift::UInt a1)
{
  return a1 >= v1 && v2 >= a1;
}

uint64_t Clock.samplingRates.getter(uint64_t a1, uint64_t a2)
{
  Swift::UInt v2 = &_swiftEmptySetSingleton;
  char v39 = &_swiftEmptySetSingleton;
  uint64_t result = (*(uint64_t (**)(void))(a2 + 40))();
  if (!result) {
    goto LABEL_32;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease(result);
    goto LABEL_32;
  }

  unint64_t v6 = 0LL;
  uint64_t v7 = result + 32;
  uint64_t v36 = *(void *)(result + 16);
  uint64_t v37 = result + 32;
  while (1)
  {
    if (v6 >= *(void *)(v4 + 16)) {
      goto LABEL_34;
    }
    unint64_t v8 = (uint64_t *)(v7 + 24 * v6);
    char v9 = (void *)*v8;
    unint64_t v10 = v8[1];
    if (v10 != *v8) {
      break;
    }
    uint64_t result = sub_1000515F8(&v38, *v8);
LABEL_5:
    if (++v6 == v5)
    {
      swift_bridgeObjectRelease(v4);
      Swift::UInt v2 = v39;
LABEL_32:
      uint64_t v35 = sub_10005115C((uint64_t)v2);
      swift_bridgeObjectRelease(v2);
      return (uint64_t)v35;
    }
  }

  unint64_t v11 = v8[2];
  if (qword_1001128F0 != -1) {
    swift_once(&qword_1001128F0, sub_10002984C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100008EC4(v13, (uint64_t)qword_1001171F8);
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v19 = sub_1000298B4( 0xD000000000000018LL,  0x80000001000CF8E0LL,  0x676E696C706D6173LL,  (void *)0xED00007365746152LL,  0xD000000000000015LL,  0x80000001000CE900LL,  140LL);
    uint64_t v20 = v4;
    unint64_t v22 = v21;
    *(void *)(v17 + 4) = sub_1000164BC(v19, v21, &v38);
    unint64_t v23 = v22;
    uint64_t v4 = v20;
    uint64_t v5 = v36;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s", (uint8_t *)v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t result = (uint64_t)ClockRateRange.multiRangeSamplingRates.getter(v9, v10, v11);
  uint64_t v24 = result;
  uint64_t v25 = *(void *)(result + 16);
  if (!v25)
  {
LABEL_29:
    uint64_t result = swift_bridgeObjectRelease(v24);
    uint64_t v7 = v37;
    goto LABEL_5;
  }

  unint64_t v26 = 0LL;
  uint64_t v27 = result + 32;
  uint64_t v28 = (uint64_t)v39;
  while (v26 < *(void *)(v24 + 16))
  {
    uint64_t v30 = *(void *)(v27 + 8 * v26);
    uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v28 + 40), v30);
    uint64_t v31 = -1LL << *(_BYTE *)(v28 + 32);
    unint64_t v32 = result & ~v31;
    if (((*(void *)(v28 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v32) & 1) != 0)
    {
      uint64_t v33 = *(void *)(v28 + 48);
      if (*(void *)(v33 + 8 * v32) == v30) {
        goto LABEL_20;
      }
      uint64_t v34 = ~v31;
      while (1)
      {
        unint64_t v32 = (v32 + 1) & v34;
        if (((*(void *)(v28 + 56 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v32) & 1) == 0) {
          break;
        }
        if (*(void *)(v33 + 8 * v32) == v30) {
          goto LABEL_20;
        }
      }
    }

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
    uint64_t v38 = v28;
    sub_1000521C8(v30, v32, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = v38;
    uint64_t result = swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_20:
    if (++v26 == v25)
    {
      char v39 = (void *)v28;
      goto LABEL_29;
    }
  }

  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

BOOL Clock.isEndpointClock.getter()
{
  uint64_t v1 = type metadata accessor for EndpointClock(0LL);
  if (swift_dynamicCastClass(v0, v1)) {
    return 1LL;
  }
  uint64_t v3 = type metadata accessor for MultiClock();
  return swift_dynamicCastClass(v0, v3) != 0;
}

uint64_t ClockRateRange.resolution.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void ClockRateRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
}

BOOL static ClockRateRange.__derived_struct_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

Swift::Int ClockRateRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10004EF44()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10004EFAC()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10004EFF0(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Swift::UInt v3 = v1[1];
  Swift::UInt v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_10004F054(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void *sub_10004F084(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E38);
      unint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053B60(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F1A4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050868(a1, a2, a3, a4, &qword_100113B40);
}

void *sub_10004F1B0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F75C(a1, a2, a3, a4, &qword_100114F50, &qword_100114F58);
}

void *sub_10004F1C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F48);
      unint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000541D8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F2E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E30);
      unint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000542CC(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F3F4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F38);
      unint64_t v11 = (void *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v8 + 4]) {
          memmove(v13, a4 + 4, 80 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053890(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F514(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E78);
      unint64_t v11 = (void *)swift_allocObject(v10, 3 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 3);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000535D4(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F624(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114DF8);
      unint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000549DC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004F748(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F75C(a1, a2, a3, a4, &qword_100114E08, &qword_1001144E8);
}

void *sub_10004F75C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100008E00(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 16 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 17;
      }
      __int128 v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4]) {
          memmove(v17, a4 + 4, 16 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100054BD8(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_10004F874(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F89C(a1, a2, a3, a4, &qword_100114E90, &qword_100114598);
}

void *sub_10004F888(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F89C(a1, a2, a3, a4, &qword_100114E10, &qword_100114530);
}

void *sub_10004F89C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100008E00(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
      size_t v15 = j__malloc_size(v14);
      __int128 v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      uint64_t v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4]) {
          memmove(v16, a4 + 4, 40 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000548D4(0LL, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_10004F9C8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F89C(a1, a2, a3, a4, &qword_100114EC0, &qword_100114948);
}

void *sub_10004F9DC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F89C(a1, a2, a3, a4, &qword_100114968, &qword_100113EC0);
}

void *sub_10004F9F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F28);
      uint64_t v11 = (void *)swift_allocObject(v10, 208 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 208);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[26 * v8 + 4]) {
          memmove(v13, a4 + 4, 208 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053C54(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004FB18(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F30);
      uint64_t v11 = (void *)swift_allocObject(v10, 104 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[13 * v8 + 4]) {
          memmove(v13, a4 + 4, 104 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053D44(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004FC40(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F89C(a1, a2, a3, a4, &qword_100114ED8, &qword_100113B28);
}

void *sub_10004FC54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E80);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000543BC(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004FD74(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E40);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4]) {
          memmove(v14, a4 + 4, 32 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100053E34(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004FE80(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050534(a1, a2, a3, a4, &qword_100113CC8);
}

void *sub_10004FE8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F18);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100053A78(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10004FF98(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114F20);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053984(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000500B8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114EE0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10005400C(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000501C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114EF8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000546C0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000502D0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050A90(a1, a2, a3, a4, &qword_100114F08, &qword_100114F10);
}

void *sub_1000502E4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114EE8);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000545B4(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050408(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10004F75C(a1, a2, a3, a4, &qword_100114EB0, &qword_100114EB8);
}

void *sub_10005041C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114EA8);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100054AE8(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050528(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050534(a1, a2, a3, a4, &qword_100114EA0);
}

void *sub_100050534(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100008E00(a5);
      int64_t v12 = (void *)swift_allocObject(v11, v10 + 32, 7LL);
      size_t v13 = j__malloc_size(v12);
      __int128 v12[2] = v9;
      void v12[3] = 2 * v13 - 64;
      uint64_t v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      int64_t v12 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000540F4(0LL, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

void *sub_100050628(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E88);
      uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      size_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4]) {
          memmove(v13, a4 + 4, 56 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      size_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000547C8(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050750(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E28);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10005400C(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10005085C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050868(a1, a2, a3, a4, &qword_100114E98);
}

void *sub_100050868(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100008E00(a5);
      int64_t v12 = (void *)swift_allocObject(v11, 8 * v10 + 32, 7LL);
      int64_t v13 = j__malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      __int128 v12[2] = v9;
      void v12[3] = 2 * (v14 >> 3);
      size_t v15 = v12 + 4;
      if ((v6 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v12 = _swiftEmptyArrayStorage;
      size_t v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4]) {
          memmove(v15, a4 + 4, 8 * v9);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100053A78(0LL, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

void *sub_100050970(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E58);
      uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100053A78(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050A7C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050A90(a1, a2, a3, a4, &qword_100114E48, &qword_100114E50);
}

void *sub_100050A90(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100008E00(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      __int128 v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4]) {
          memmove(v17, a4 + 4, 8 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000544B0(0LL, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_100050BA8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114EC8);
      uint64_t v11 = (void *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000536BC(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050CB4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E20);
      uint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4]) {
          memmove(v13, a4 + 4, 24 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1000537A4(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050DD8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100008E00(&qword_100114E70);
      uint64_t v11 = (void *)swift_allocObject(v10, 17 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 17);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100053F24(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_100050EEC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100050A90(a1, a2, a3, a4, &qword_100114E60, &qword_100114E68);
}

char *sub_100050F00(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_18;
  }
  if (!v5) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v8 = 8 * v5;
  if (v5 <= 0)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    if (v4 != a3) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = sub_100008E00(&qword_100113B40);
  uint64_t v10 = (char *)swift_allocObject(v9, v8 + 32, 7LL);
  int64_t v11 = j__malloc_size(v10);
  uint64_t v12 = v11 - 32;
  if (v11 < 32) {
    uint64_t v12 = v11 - 25;
  }
  *((void *)v10 + swift_unknownObjectWeakDestroy(v0 + 2) = v5;
  *((void *)v10 + swift_unknownObjectWeakDestroy(v0 + 3) = 2 * (v12 >> 3);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

void *sub_100051068(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100008E00(&qword_100114E20);
  unint64_t v4 = (void *)swift_allocObject(v3, 24 * v1 + 32, 7LL);
  size_t v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  unint64_t v6 = sub_100053104(&v9, (uint64_t)(v4 + 4), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100019E94(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10005115C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100008E00(&qword_100113B40);
  unint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  uint64_t v7 = sub_1000532AC(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100019E94(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_100051240(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100008E00(&qword_100113CC8);
  uint64_t v4 = swift_allocObject(v3, v1 + 32, 7LL);
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = 2 * v5 - 64;
  uint64_t v6 = sub_100053440(&v9, (_BYTE *)(v4 + 32), v1, a1);
  uint64_t v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100019E94(v7);
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

void *sub_100051314(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_18;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = 8 * v5;
  if (v5 <= 0)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    if (v4 != a3) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  uint64_t v9 = sub_100008E00(&qword_100113ED0);
  uint64_t v10 = (void *)swift_allocObject(v9, v8 + 32, 7LL);
  int64_t v11 = j__malloc_size(v10);
  uint64_t v12 = v11 - 32;
  if (v11 < 32) {
    uint64_t v12 = v11 - 25;
  }
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

uint64_t sub_100051494(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)(v24, *(void *)(*v4 + 40LL));
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    while (1)
    {
      uint64_t v14 = (uint64_t *)(*(void *)(v9 + 48) + 24 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = v14[2];
      BOOL v18 = v15 == a2 && v16 == a3;
      if (v18 && v17 == a4) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }

    uint64_t result = 0LL;
    unint64_t v23 = (Swift::UInt *)(*(void *)(*v4 + 48LL) + 24 * v12);
    a2 = *v23;
    a3 = v23[1];
    a4 = v23[2];
  }

  else
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v24[0] = *v4;
    *unint64_t v4 = 0x8000000000000000LL;
    sub_100052040(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = *v4;
    *unint64_t v4 = v24[0];
    swift_bridgeObjectRelease(v21);
    uint64_t result = 1LL;
  }

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  return result;
}

uint64_t sub_1000515F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1000521C8(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    void *v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000516F0(_BYTE *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    void *v2 = 0x8000000000000000LL;
    sub_100052340(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v2;
    void *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }

  uint64_t result = 0LL;
  LOBYTE(aswift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(*(void *)(*v2 + 48LL) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_10005180C(uint64_t a1)
{
  Swift::UInt v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114E18);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v31 = v2;
    int64_t v7 = 0LL;
    uint64_t v33 = (void *)(v3 + 56);
    uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v32 = (unint64_t)(v8 + 63) >> 6;
    Swift::Int v11 = result + 56;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }

      else
      {
        int64_t v16 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v32) {
          goto LABEL_36;
        }
        unint64_t v17 = v33[v16];
        ++v7;
        if (!v17)
        {
          int64_t v7 = v16 + 1;
          if (v16 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v17 = v33[v7];
          if (!v17)
          {
            int64_t v7 = v16 + 2;
            if (v16 + 2 >= v32) {
              goto LABEL_36;
            }
            unint64_t v17 = v33[v7];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v32)
              {
LABEL_36:
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v30;
                }
                Swift::UInt v2 = v31;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v33[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v7 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v32) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v33[v7];
                  ++v18;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v18;
            }
          }
        }

uint64_t sub_100051B18(uint64_t a1)
{
  Swift::UInt v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114F40);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    uint64_t v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                Swift::UInt v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

Swift::Int sub_100051D98(uint64_t a1)
{
  Swift::UInt v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114ED0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                Swift::UInt v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_100052040(uint64_t result, Swift::UInt a2, Swift::UInt a3, unint64_t a4, char a5)
{
  Swift::UInt v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v12 = v10 + 1;
  if ((a5 & 1) != 0)
  {
    sub_10005180C(v12);
  }

  else
  {
    if (v11 > v10)
    {
      Swift::Int result = (uint64_t)sub_10005248C();
      goto LABEL_18;
    }

    sub_100052958(v12);
  }

  uint64_t v13 = *v5;
  Hasher.init(_seed:)(v27, *(void *)(*v5 + 40));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int result = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v13 + 32);
  a4 = result & ~v14;
  if (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0)
  {
    uint64_t v15 = ~v14;
    do
    {
      unint64_t v16 = (uint64_t *)(*(void *)(v13 + 48) + 24 * a4);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      uint64_t v19 = v16[2];
      BOOL v20 = v17 == v9 && v18 == a2;
      if (v20 && v19 == a3) {
        goto LABEL_21;
      }
      a4 = (a4 + 1) & v15;
    }

    while (((*(void *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0);
  }

LABEL_18:
  uint64_t v22 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  unint64_t v23 = (Swift::UInt *)(*(void *)(v22 + 48) + 24 * a4);
  *unint64_t v23 = v9;
  v23[1] = a2;
  _WORD v23[2] = a3;
  uint64_t v24 = *(void *)(v22 + 16);
  BOOL v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }

  __break(1u);
LABEL_21:
  Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ClockRateRange);
  __break(1u);
  return result;
}

        uint64_t v22 = 1;
LABEL_20:
        *(_BYTE *)(v4 + 24) = v22;
        return (id)v4;
      }

      uint64_t v19 = sub_10000AE14();
      BOOL v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
      *(_BYTE *)uint64_t v21 = 97;
      *(void *)(v21 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v21 + 16) = 0xE000000000000000LL;
      *(void *)(v21 + 24) = 0xD00000000000001DLL;
      *(void *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D1250LL;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000016LL;
      *(void *)(v21 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D0AD0LL;
      *(void *)(v21 + 56) = 902LL;
      swift_willThrow(v20);

      Swift::UInt v9 = *(void **)(v4 + 48);
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

        __break(1u);
LABEL_19:
        __break(1u);
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_18;
  }

  return result;
}

uint64_t sub_1000521C8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100051B18(v8);
  }

  else
  {
    if (v7 > v6)
    {
      Swift::Int result = (uint64_t)sub_100052634();
      goto LABEL_14;
    }

    sub_100052C2C(v8);
  }

  uint64_t v9 = *v3;
  Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

unint64_t sub_1000522EC()
{
  unint64_t result = qword_100114DF0;
  if (!qword_100114DF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClockRateRange,  &type metadata for ClockRateRange);
    atomic_store(result, (unint64_t *)&qword_100114DF0);
  }

  return result;
}

ValueMetadata *type metadata accessor for ClockRateRange()
{
  return &type metadata for ClockRateRange;
}

uint64_t sub_100052340(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100051D98(v8);
  }

  else
  {
    if (v7 > v6)
    {
      unint64_t result = (uint64_t)sub_1000527C8();
      goto LABEL_14;
    }

    sub_100052E8C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v17, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(unsigned __int8 *)(v11 + a2) == (_DWORD)v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AUAErrorCode);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
      }
    }
  }

void *sub_10005248C()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_100114E18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_100052634()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_100114F40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1000527C8()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_100114ED0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

Swift::Int sub_100052958(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114E18);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    Swift::Int *v2 = v6;
    return result;
  }

  int64_t v7 = 0LL;
  Swift::Int v30 = v3 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(v3 + 32);
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v31) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_100052C2C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114F40);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  BOOL v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_100052E8C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100008E00(&qword_100114ED0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    Swift::Int *v2 = v6;
    return result;
  }

  BOOL v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

void *sub_100053104(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *Swift::Int result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 24 * v12;
    uint64_t v14 = *(void *)(v13 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v13;
    *(void *)(a2 + 16) = v14;
    a2 += 24LL;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }

  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }

  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }

void *sub_1000532AC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *Swift::Int result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

void *sub_100053440(void *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *Swift::Int result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

char *sub_1000535D4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v5 = (char *)(a4 + 3 * a1 + 32);
  size_t v6 = 3 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1000536BC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000537A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
  size_t v6 = 24 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100053890(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 80 * a1 + 32;
  unint64_t v6 = a3 + 80 * v4;
  if (v5 >= v6 || v5 + 80 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100053984(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100053A78(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100053B60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 40 * a1 + 32;
  unint64_t v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100053C54(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 208 * a1 + 32;
  unint64_t v6 = a3 + 208 * v4;
  if (v5 >= v6 || v5 + 208 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100053D44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 104 * a1 + 32;
  unint64_t v6 = a3 + 104 * v4;
  if (v5 >= v6 || v5 + 104 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100053E34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100053F24(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = (char *)(a4 + 17 * a1 + 32);
  size_t v6 = 17 * v4;
  unint64_t v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_10005400C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1000540F4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000541D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000542CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000543BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 24 * a1 + 32;
  unint64_t v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000544B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 8 * a1 + 32;
    unint64_t v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_100008E00(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000545B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100008E00(&qword_100114EF0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000546C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100008E00(&qword_100114F00);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000547C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 56 * a1 + 32;
  unint64_t v7 = a3 + 56 * v4;
  if (v6 >= v7 || v6 + 56 * v4 <= a3)
  {
    sub_100008E00(&qword_100113490);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000548D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100008E00(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000549DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 24 * a1 + 32;
  unint64_t v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_100008E00(&qword_100114E00);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100054AE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100054BD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 16 * a1 + 32;
    unint64_t v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_100008E00(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100054CDC(int a1, int a2, int a3, char a4, char a5)
{
  BOOL v6 = a1 == 4 && a2 == 4 && a3 == 4;
  int v7 = v6;
  if (v6)
  {
    if (a4 == 3)
    {
      if ((a5 & 1) != 0) {
        return 1LL;
      }
    }

    else if (!a4 && (a5 & 1) == 0)
    {
      return 0LL;
    }
  }

  if (a1 == 2 && a2 == 2 && a3 == 2 && a4 == 3 && (a5 & 1) != 0) {
    return 2LL;
  }
  if (v7)
  {
    if (a4 == 4)
    {
      if ((a5 & 1) != 0) {
        return 4LL;
      }
    }

    else if (a4 == 2 && (a5 & 1) != 0)
    {
      return 3LL;
    }
  }

  else if (a1 == 1)
  {
    if (a2 == 1 && a3 == 1)
    {
      if (a4 == 2)
      {
        if ((a5 & 1) != 0) {
          return 9LL;
        }
      }

      else if (a4 == 3 && (a5 & 1) != 0)
      {
        return 8LL;
      }
    }
  }

  else if (a1 == 3 && a2 == 3 && a3 == 3)
  {
    if (a4 == 3)
    {
      if ((a5 & 1) != 0) {
        return 6LL;
      }
    }

    else if (a4 == 2)
    {
      if ((a5 & 1) != 0) {
        return 7LL;
      }
    }

    else if (!a4 && (a5 & 1) == 0)
    {
      return 5LL;
    }
  }

  return 10LL;
}

void sub_100054E18(unsigned int a1)
{
  unint64_t v2 = sub_1000070B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v3 = sub_100008E00(&qword_100113ED0);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1000D6D30;
  *(void *)(v4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = [objc_allocWithZone(NSNumber) initWithUnsignedInt:a1 & 7];
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11,  2,  0,  0xE000000000000000,  "AUASDCore/TransferManager.swift",  31,  2,  100, 0) = [objc_allocWithZone(NSNumber) initWithUnsignedInt:(a1 >> 3) & 7];
  *(void *)(v4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = [objc_allocWithZone(NSNumber) initWithUnsignedInt:(a1 >> 6) & 7];
  unsigned int v5 = (a1 >> 9) & 7;
  *(void *)(v4 + 56) = [objc_allocWithZone(NSNumber) initWithUnsignedChar:v5];
  sub_10005535C();
  v6.super.super.Class isa = NSNumber.init(BOOLeanLiteral:)((a1 & 0x1000) != 0).super.super.isa;
  *(NSNumber *)(v4 + 64) = v6;
  specialized Array._endMutation()(v6.super.super.isa);
  unint64_t v16 = (void *)sub_100008E00(&qword_100114F60);
  *(void *)&__int128 v15 = v4;
  sub_10000AE58(&v15, v14);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  unint64_t v17 = v2;
  sub_100066014(v14, 0xD000000000000013LL, 0x80000001000CF940LL, isUniquelyReferenced_nonNull_native);
  unint64_t v8 = v17;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  unint64_t v16 = &type metadata for Bool;
  LOBYTE(v15) = (a1 & 5) == 1;
  sub_10000AE58(&v15, v14);
  char v9 = swift_isUniquelyReferenced_nonNull_native(v8);
  unint64_t v17 = v8;
  sub_100066014(v14, 0x736920646E756F73LL, 0xEF676E6974616C6FLL, v9);
  unint64_t v10 = v17;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  BOOL v11 = (a1 & 7) - 1 < 2 && ((a1 >> 9) & 7) == 0;
  unint64_t v16 = &type metadata for Bool;
  LOBYTE(v15) = v11;
  sub_10000AE58(&v15, v14);
  char v12 = swift_isUniquelyReferenced_nonNull_native(v10);
  unint64_t v17 = v10;
  sub_100066014(v14, 0x6170206472696874LL, 0xEB00000000797472LL, v12);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  int64_t v13 = (char *)sub_1000550A0
      + 4 * byte_1000D6D40[sub_100054CDC(a1 & 7, (a1 >> 3) & 7, (a1 >> 6) & 7, v5, (a1 & 0x1000) != 0)];
  __asm { BR              X11 }

Class sub_1000550A0()
{
  Swift::UInt v20 = &type metadata for UInt32;
  LODWORD(v19) = 2;
  sub_10000AE58(&v19, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v0;
  sub_100066014(v18, 0x6563656970726165LL, 0xEF6E676973656420LL, isUniquelyReferenced_nonNull_native);
  uint64_t v6 = *(void *)(v4 - 72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  if (v1)
  {
    Swift::UInt v20 = &type metadata for UInt32;
    LODWORD(v19) = 2;
    sub_10000AE58(&v19, v18);
    char v7 = swift_isUniquelyReferenced_nonNull_native(v6);
    *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v6;
    sub_100066014(v18, 0x697365642063696DLL, 0xEA00000000006E67LL, v7);
    uint64_t v6 = *(void *)(v4 - 72);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  Swift::UInt v20 = v2;
  LOBYTE(v19) = 1;
  sub_10000AE58(&v19, v18);
  char v8 = swift_isUniquelyReferenced_nonNull_native(v6);
  *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  sub_100066014(v18, 0x6F68706F7263696DLL, 0xEA0000000000656ELL, v8);
  uint64_t v9 = *(void *)(v4 - 72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  Swift::UInt v20 = v2;
  LOBYTE(v19) = 1;
  sub_10000AE58(&v19, v18);
  char v10 = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  sub_100066014(v18, 0x6E6F74747562LL, 0xE600000000000000LL, v10);
  uint64_t v11 = *(void *)(v4 - 72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  Swift::UInt v20 = v2;
  LOBYTE(v19) = 1;
  sub_10000AE58(&v19, v18);
  char v12 = swift_isUniquelyReferenced_nonNull_native(v11);
  *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v11;
  sub_100066014(v18, 0xD000000000000010LL, 0x80000001000CF960LL, v12);
  uint64_t v13 = *(void *)(v4 - 72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  Swift::UInt v20 = v2;
  LOBYTE(v19) = 0;
  sub_10000AE58(&v19, v18);
  char v14 = swift_isUniquelyReferenced_nonNull_native(v13);
  *(void *)(v4 - 7swift_unknownObjectWeakDestroy(v0 + 2) = v13;
  sub_100066014(v18, v3 + 6, 0x80000001000CF980LL, v14);
  uint64_t v15 = *(void *)(v4 - 72);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  return isa;
}

unint64_t sub_10005535C()
{
  unint64_t result = qword_100113470;
  if (!qword_100113470)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100113470);
  }

  return result;
}

uint64_t Cluster.hasException.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*Cluster.hasException.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

_BYTE *(*StreamingInterface.canUseImplicit.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(v1 + 16);
  return sub_1000553CC;
}

_BYTE *sub_1000553CC(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 16LL) = result[8];
  return result;
}

uint64_t StreamingInterface.highestExceptionLevel.getter()
{
  if (v27 && (uint64_t v1 = *(void *)(v27 + 16)) != 0)
  {
    uint64_t result = 0LL;
    uint64_t v3 = (unsigned __int8 *)(v27 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!(_BYTE)result) {
          uint64_t result = 1LL;
        }
      }

      else if (result < 2u)
      {
        if (v4 == 14) {
          uint64_t result = 1LL;
        }
        else {
          uint64_t result = 2LL;
        }
      }

      --v1;
    }

    while (v1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = v6 + 32;
    do
    {
      uint64_t v10 = v9 + 80 * v8;
      uint64_t v11 = *(void *)(v10 + 72);
      if (v11 && (uint64_t v12 = *(void *)(v11 + 16)) != 0)
      {
        unsigned __int8 v13 = 0;
        char v14 = (unsigned __int8 *)(v11 + 32);
        do
        {
          int v16 = *v14++;
          int v15 = v16;
          if (v16 == 60 || v15 == 59 || v15 == 14)
          {
            if (!v13) {
              unsigned __int8 v13 = 1;
            }
          }

          else if (v13 < 2u)
          {
            unsigned __int8 v13 = 2;
          }

          --v12;
        }

        while (v12);
      }

      else
      {
        unsigned __int8 v13 = 0;
      }

      uint64_t v17 = *(void *)(v10 + 56);
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = v17 + 32;
        do
        {
          uint64_t v21 = *(void *)(v20 + 80 * v19 + 72);
          if (v21)
          {
            uint64_t v22 = *(void *)(v21 + 16);
            if (v22)
            {
              unint64_t v23 = (unsigned __int8 *)(v21 + 32);
              do
              {
                int v25 = *v23++;
                int v24 = v25;
                if (v25 == 60 || v24 == 59 || v24 == 14)
                {
                  if (!v13) {
                    unsigned __int8 v13 = 1;
                  }
                }

                else if (v13 < 2u)
                {
                  unsigned __int8 v13 = 2;
                }

                --v22;
              }

              while (v22);
            }
          }

          ++v19;
        }

        while (v19 != v18);
      }

      ++v8;
      else {
        uint64_t result = result;
      }
    }

    while (v8 != v7);
  }

  return result;
}

uint64_t StreamingAltInterface.highestExceptionLevel.getter()
{
  if (v16 && (uint64_t v1 = *(void *)(v16 + 16)) != 0)
  {
    uint64_t result = 0LL;
    uint64_t v3 = (unsigned __int8 *)(v16 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!(_DWORD)result) {
          uint64_t result = 1LL;
        }
      }

      else if (result < 2)
      {
        if (v4 == 14) {
          uint64_t result = 1LL;
        }
        else {
          uint64_t result = 2LL;
        }
      }

      --v1;
    }

    while (v1);
  }

  else
  {
    uint64_t result = 0LL;
  }

  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = v6 + 32;
    do
    {
      uint64_t v10 = *(void *)(v9 + 80 * v8 + 72);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)(v10 + 32);
          do
          {
            int v14 = *v12++;
            int v13 = v14;
            if (v14 == 14 || v13 == 60 || v13 == 59)
            {
              if (!(_DWORD)result) {
                uint64_t result = 1LL;
              }
            }

            else if (result < 2)
            {
              if (v13 == 14) {
                uint64_t result = 1LL;
              }
              else {
                uint64_t result = 2LL;
              }
            }

            --v11;
          }

          while (v11);
        }
      }

      ++v8;
    }

    while (v8 != v7);
  }

  return result;
}

unint64_t *sub_100055708(char *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = CreateFixedPriorityDispatchQueue((uint64_t)"com.apple.usbAudio.ActiveStreamingInterface", 63LL);
  uint64_t v11 = v10;
  if ((a4 & 1) == 0)
  {
    uint64_t v72 = v10;
    uint64_t v26 = 0LL;
    goto LABEL_10;
  }

  unsigned __int8 v12 = *(_BYTE *)(*v6 + 2LL);
  int v13 = v10;
  int v14 = sub_1000B3D58(v12, v11, (uint64_t)ClusterChannelInfo.chNum.getter, 0LL);
  if (!v5)
  {
    uint64_t v26 = v14;

    uint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v27 && sub_10001645C(17LL, v27))
    {
      uint64_t v28 = a2;
      unint64_t v77 = 0LL;
      uint64_t v20 = v26;
      unsigned int v29 = [v20 setIdleTimeout:&v77 error:2000.0];
      unint64_t v30 = v77;
      if (!v29)
      {
        id v68 = (id)v77;
        _convertNSErrorToError(_:)(v30);

        swift_willThrow(v69);
        goto LABEL_32;
      }

      uint64_t v72 = v11;
      id v31 = (id)v77;

      a2 = v28;
    }

    else
    {
      uint64_t v72 = v11;
    }

void sub_100055DC8(void *a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t v6 = v4;
  uint64_t v8 = *(void *)(v4 + 56);
  if (*(void *)(v8 + 16))
  {
    id v12 = a1;
    swift_bridgeObjectRetain(v8);
    int v14 = sub_100056DC4(v13, v12, a4);
    swift_bridgeObjectRelease(v8);

    if (!v5)
    {
      uint64_t v15 = *(void *)(v6 + 40);
      __int128 v16 = *(_OWORD *)(a2 + 112);
      v41[4] = *(_OWORD *)(a2 + 96);
      v41[5] = v16;
      v41[6] = *(_OWORD *)(a2 + 128);
      uint64_t v42 = *(void *)(a2 + 144);
      __int128 v17 = *(_OWORD *)(a2 + 48);
      v41[0] = *(_OWORD *)(a2 + 32);
      v41[1] = v17;
      __int128 v18 = *(_OWORD *)(a2 + 80);
      v41[2] = *(_OWORD *)(a2 + 64);
      v41[3] = v18;
      sub_1000BF5D0((uint64_t)v12, (uint64_t)v41, v15, *(_WORD *)(v6 + 48));
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      char v38 = v37;
      uint64_t active = type metadata accessor for ActiveStreamingAltInterface();
      swift_allocObject(active, 152LL, 7LL);
      sub_1000561DC((void *)v6);
      id v40 = a3;
      sub_1000C4894((_OWORD *)v6, (uint64_t)v14, v34, v36, v38, a3);
    }
  }

  else
  {
    _StringGuts.grow(_:)(54LL);
    v19._countAndFlagsBits = 0x203A656369766544LL;
    v19._object = (void *)0xE800000000000000LL;
    String.append(_:)(v19);
    id v20 = [a1 boxName];
    if (v20)
    {
      unint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v24 = v23;
    }

    else
    {
      uint64_t v24 = (void *)0xEE00656369766564LL;
      uint64_t v22 = 0x206E776F6E6B6E55LL;
    }

    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26._countAndFlagsBits = 0x61667265746E6920LL;
    v26._object = (void *)0xEB00000000206563LL;
    String.append(_:)(v26);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    object = v27._object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(object);
    v29._countAndFlagsBits = 0x74746553746C6120LL;
    v29._object = (void *)0xEC00000020676E69LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    id v31 = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v31);
    v32._object = (void *)0x80000001000CFA70LL;
    v32._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v32);
    sub_100029840( 0LL,  0xE000000000000000LL,  0xD000000000000043LL,  (void *)0x80000001000CFA90LL,  0xD000000000000022LL,  0x80000001000CFA40LL,  332LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
  }

uint64_t (*StreamingInterface.direction.getter())(void *)
{
  return sub_100056270((uint64_t (*)(void *))StreamingAltInterface.direction.getter);
}

uint64_t StreamingAltInterface.direction.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (void *)(v3 + 104);
  while (1)
  {
    uint64_t v5 = (const IOUSBEndpointDescriptor *)*(v4 - 9);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    uint64_t v8 = *(v4 - 2);
    swift_bridgeObjectRetain(*v4);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v6);
    v4 += 10;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    if (!--v2)
    {
      sub_100045FD8(&v11);
      return 0LL;
    }
  }

  sub_100045FD8(&v11);
  uint64_t v9 = IOUSBGetEndpointDirection(v5);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v8);
  return v9;
}

void *sub_1000561DC(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_100056220(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t (*StreamingInterface.synchronizationType.getter())(void *)
{
  return sub_100056270((uint64_t (*)(void *))StreamingAltInterface.synchronizationType.getter);
}

uint64_t (*sub_100056270(uint64_t (*result)(void *)))(void *)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = result;
    __int128 v4 = *(_OWORD *)(v2 + 48);
    __int128 v5 = *(_OWORD *)(v2 + 80);
    __int128 v6 = *(_OWORD *)(v2 + 96);
    v9[2] = *(_OWORD *)(v2 + 64);
    v9[3] = v5;
    v9[4] = v6;
    v9[0] = *(_OWORD *)(v2 + 32);
    v9[1] = v4;
    uint64_t v7 = sub_1000561DC(v9);
    uint64_t v8 = v3(v7);
    sub_100056220(v9);
    return (uint64_t (*)(void *))v8;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t StreamingAltInterface.synchronizationType.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v12 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    __int128 v4 = (void *)(v3 + 104);
    while (1)
    {
      __int128 v5 = (const IOUSBEndpointDescriptor *)*(v4 - 9);
      uint64_t v6 = *(v4 - 1);
      uint64_t v7 = *v4;
      uint64_t v8 = *(v4 - 2);
      swift_bridgeObjectRetain(*v4);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v6);
      v4 += 10;
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
      if (!--v2)
      {
        sub_100045FD8(&v12);
        return v2;
      }
    }

    sub_100045FD8(&v12);
    uint64_t v9 = IOUSBGetEndpointSynchronizationType(v5);
    if ((_DWORD)v9)
    {
      uint64_t v2 = v9;
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
    }

    else
    {
      int v10 = IOUSBGetEndpointDirection(v5);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v8);
      if (v10 == 1) {
        return 1LL;
      }
      else {
        return 3LL;
      }
    }
  }

  return v2;
}

void StreamingInterface.feedbackType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(void *)(v1 + 16))
  {
    __int128 v2 = *(_OWORD *)(v1 + 48);
    __int128 v3 = *(_OWORD *)(v1 + 80);
    __int128 v4 = *(_OWORD *)(v1 + 96);
    v9[2] = *(_OWORD *)(v1 + 64);
    v9[3] = v3;
    v9[4] = v4;
    v9[0] = *(_OWORD *)(v1 + 32);
    v9[1] = v2;
    sub_1000561DC(v9);
    sub_1000564D0();
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    sub_100056220(v9);
    if (v8) {
      sub_100056664(v6, v8);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000564D0()
{
  if (!StreamingAltInterface.direction.getter()
    && StreamingAltInterface.synchronizationType.getter() == 1)
  {
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v14 = v1;
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      __int128 v3 = (void *)(v1 + 104);
      swift_bridgeObjectRetain(v1);
      BOOL v4 = 0;
      uint64_t v5 = 1LL;
      do
      {
        if (v4)
        {
          if (v2 == v5)
          {
            sub_100045FD8(&v14);
            return;
          }

          BOOL v4 = 1;
        }

        else
        {
          uint64_t v6 = (const IOUSBEndpointDescriptor *)*(v3 - 9);
          uint64_t v7 = *(v3 - 2);
          uint64_t v8 = *(v3 - 1);
          uint64_t v9 = *v3;
          swift_bridgeObjectRetain(*v3);
          swift_bridgeObjectRetain(v7);
          swift_bridgeObjectRetain(v8);
          int v10 = IOUSBGetEndpointUsageType(v6);
          if (v10)
          {
            BOOL v11 = v10;
            swift_bridgeObjectRelease(v9);
            swift_bridgeObjectRelease(v8);
            swift_bridgeObjectRelease(v7);
          }

          else
          {
            unsigned int wMaxPacketSize = v6->wMaxPacketSize;
            swift_bridgeObjectRelease(v9);
            swift_bridgeObjectRelease(v8);
            swift_bridgeObjectRelease(v7);
            BOOL v11 = wMaxPacketSize < 9;
          }

          BOOL v4 = v11;
          if (v2 == v5)
          {
            sub_100045FD8(&v14);
            return;
          }
        }

        v3 += 10;
      }

      while (!__OFADD__(v5++, 1LL));
      __break(1u);
    }
  }

uint64_t sub_100056664(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

void StreamingInterface.providesImplicitFeedback.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(void *)(v1 + 16))
  {
    __int128 v2 = *(_OWORD *)(v1 + 48);
    __int128 v3 = *(_OWORD *)(v1 + 80);
    __int128 v4 = *(_OWORD *)(v1 + 96);
    v5[2] = *(_OWORD *)(v1 + 64);
    void v5[3] = v3;
    v5[4] = v4;
    v5[0] = *(_OWORD *)(v1 + 32);
    v5[1] = v2;
    sub_1000561DC(v5);
    StreamingAltInterface.providesImplicitFeedback.getter();
    sub_100056220(v5);
  }

  else
  {
    __break(1u);
  }

void StreamingAltInterface.providesImplicitFeedback.getter()
{
  if (StreamingAltInterface.direction.getter() == 1)
  {
    uint64_t v1 = *(void *)(v0 + 56);
    uint64_t v14 = v1;
    uint64_t v2 = *(void *)(v1 + 16);
    if (v2)
    {
      __int128 v3 = (void *)(v1 + 104);
      swift_bridgeObjectRetain(v1);
      BOOL v4 = 0;
      uint64_t v5 = 1LL;
      do
      {
        if (v4)
        {
          BOOL v4 = 1;
          if (v2 == v5) {
            goto LABEL_11;
          }
        }

        else
        {
          uint64_t v7 = (const IOUSBEndpointDescriptor *)*(v3 - 9);
          uint64_t v8 = *(v3 - 2);
          uint64_t v9 = *(v3 - 1);
          uint64_t v10 = *v3;
          swift_bridgeObjectRetain(*v3);
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v9);
          int v11 = IOUSBGetEndpointUsageType(v7);
          if (v11)
          {
            int v12 = v11;
            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(v9);
            swift_bridgeObjectRelease(v8);
          }

          else
          {
            unsigned int wMaxPacketSize = v7->wMaxPacketSize;
            swift_bridgeObjectRelease(v10);
            swift_bridgeObjectRelease(v9);
            swift_bridgeObjectRelease(v8);
            int v12 = wMaxPacketSize < 9;
          }

          BOOL v4 = v12 == 2;
          if (v2 == v5)
          {
LABEL_11:
            sub_100045FD8(&v14);
            return;
          }
        }

        v3 += 10;
      }

      while (!__OFADD__(v5++, 1LL));
      __break(1u);
    }
  }

void StreamingInterface.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    do
    {
      v5 += 80LL;
      StreamingAltInterface.hash(into:)();
      --v4;
    }

    while (v4);
  }

  Hasher._combine(_:)(*(_BYTE *)(v1 + 16) & 1);
  uint64_t v6 = *(void *)(v1 + 24);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v7 = *(void *)(v6 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      uint64_t v8 = (unsigned __int8 *)(v6 + 32);
      do
      {
        unsigned int v9 = *v8++;
        Hasher._combine(_:)(v9);
        --v7;
      }

      while (v7);
    }

    uint64_t v10 = *(void *)(v1 + 32);
    if (v10) {
      goto LABEL_9;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(0);
  uint64_t v10 = *(void *)(v1 + 32);
  if (!v10) {
    goto LABEL_14;
  }
LABEL_9:
  Hasher._combine(_:)(1u);
  Swift::UInt v11 = *(void *)(v10 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    int v12 = (unsigned __int16 *)(v10 + 32);
    do
    {
      int v13 = *((unsigned __int8 *)v12 + 2);
      int v14 = *v12;
      int v12 = (unsigned __int16 *)((char *)v12 + 3);
      USBDescriptorControl.hash(into:)(a1, v14 | (v13 << 16));
      --v11;
    }

    while (v11);
  }

Swift::Int StreamingInterface.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100056988(uint64_t a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000569C0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s9AUASDCore18StreamingInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t StreamingAltInterface.format.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t StreamingAltInterface.subFrameSize.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ActiveStreamingAltInterface.terminalID.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t StreamingAltInterface.cluster.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t StreamingAltInterface.altSetting.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 3LL);
}

void StreamingAltInterface.hash(into:)()
{
  __asm { BR              X10 }

void sub_100056AB8()
{
  Swift::UInt8 v3 = *(_BYTE *)(v2 - 60);
  Swift::UInt16 v4 = *(_WORD *)(v2 - 58);
  Swift::UInt8 v5 = *(_BYTE *)(v2 - 56);
  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t v6 = v1[7];
  Swift::UInt v7 = *(void *)(v6 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    do
    {
      v8 += 80LL;
      Endpoint.hash(into:)(v0);
      --v7;
    }

    while (v7);
  }

  uint64_t v9 = v1[8];
  if (v9)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v10 = *(void *)(v9 + 16);
    Hasher._combine(_:)(v10);
    if (v10)
    {
      Swift::UInt v11 = (unsigned __int16 *)(v9 + 32);
      do
      {
        int v12 = *((unsigned __int8 *)v11 + 2);
        int v13 = *v11;
        Swift::UInt v11 = (unsigned __int16 *)((char *)v11 + 3);
        USBDescriptorControl.hash(into:)(v0, v13 | (v12 << 16));
        --v10;
      }

      while (v10);
    }

    uint64_t v14 = v1[9];
    if (v14) {
      goto LABEL_9;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(0);
  uint64_t v14 = v1[9];
  if (!v14) {
    goto LABEL_14;
  }
LABEL_9:
  Hasher._combine(_:)(1u);
  Swift::UInt v15 = *(void *)(v14 + 16);
  Hasher._combine(_:)(v15);
  if (v15)
  {
    __int128 v16 = (unsigned __int8 *)(v14 + 32);
    do
    {
      unsigned int v17 = *v16++;
      Hasher._combine(_:)(v17);
      --v15;
    }

    while (v15);
  }

Swift::Int StreamingAltInterface.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100056C80()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  StreamingAltInterface.hash(into:)();
  return Hasher._finalize()();
}

void sub_100056CD8()
{
}

Swift::Int sub_100056D18(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v2;
  __int128 v10 = v1[4];
  __int128 v3 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, a1);
  StreamingAltInterface.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100056D6C(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  void v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s9AUASDCore21StreamingAltInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v9) & 1;
}

void *sub_100056DC4(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    __int128 v18 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v4);
    __int128 v8 = (__int128 *)(a1 + 32);
    uint64_t active = type metadata accessor for ActiveEndpoint();
    do
    {
      __int128 v10 = v8[3];
      v17[2] = v8[2];
      void v17[3] = v10;
      v17[4] = v8[4];
      __int128 v12 = *v8;
      __int128 v11 = v8[1];
      v8 += 5;
      v17[0] = v12;
      v17[1] = v11;
      swift_allocObject(active, 136LL, 7LL);
      sub_1000561DC(v17);
      sub_1000C7B74((uint64_t)v17, (char *)a2, a3);
      uint64_t v14 = v13;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v15 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      --v4;
    }

    while (v4);
    return v18;
  }

  return result;
}

uint64_t sub_100056EC8@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = a10;
  uint64_t v19 = a11;
  if (!*(void *)(a11 + 16))
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRelease(a11);
    uint64_t v19 = 0LL;
    if (*(void *)(a10 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease(a10);
    uint64_t v18 = 0LL;
    goto LABEL_6;
  }

  swift_bridgeObjectRetain(a8);
  if (!*(void *)(a10 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain(v19);
LABEL_6:
  swift_bridgeObjectRelease(v19);
  uint64_t result = swift_bridgeObjectRelease(a8);
  *(void *)a9 = a1;
  *(_BYTE *)(a9 + _Block_object_dispose((const void *)(v30 - 136), 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = a5;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a6;
  *(_WORD *)(a9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = v18;
  *(void *)(a9 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v19;
  return result;
}

void sub_100056FBC( uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, unsigned __int8 **a5@<X8>)
{
  uint64_t v228 = a5;
  LODWORD(v226) = a4;
  uint64_t v227 = a3;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  __int128 v11 = (char *)&v204 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v204 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  unsigned int v17 = (char *)&v204 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v204 - v18;
  id v20 = v229;
  sub_10007BFC4(a1, a2);
  if (v20) {
    return;
  }
  uint64_t v224 = v8;
  uint64_t v225 = v17;
  v223 = v14;
  uint64_t v229 = v11;
  if (v21[3])
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 74;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD00000000000002BLL;
    *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFAE0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
    uint64_t v25 = 84LL;
LABEL_17:
    *(void *)(v24 + 56) = v25;
    swift_willThrow(v23);
    return;
  }

  if (v21[5] != 1)
  {
    unint64_t v44 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v44, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 72;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD00000000000002BLL;
    *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFAE0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
    uint64_t v25 = 85LL;
    goto LABEL_17;
  }

  if (v21[6] != 2)
  {
    unint64_t v45 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 73;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD00000000000002BLL;
    *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFAE0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
    uint64_t v25 = 86LL;
    goto LABEL_17;
  }

  if (v21[7] != v226)
  {
    unint64_t v46 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 76;
    *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD00000000000002BLL;
    *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFAE0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
    *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
    uint64_t v25 = 87LL;
    goto LABEL_17;
  }

  int v26 = ((v226 >> 4) | (16 * v226));
  uint64_t v27 = v7;
  uint64_t ObjectType = v228;
  Swift::String v29 = (void *)v21[2];
  uint64_t v213 = v21;
  uint64_t v226 = v27;
  switch(v26)
  {
    case 0:
      int64_t v30 = *(void *)(v227 + 16);
      id v31 = _swiftEmptyArrayStorage;
      if (!v30) {
        goto LABEL_38;
      }
      uint64_t v32 = v227;
      *(void *)&__int128 v233 = _swiftEmptyArrayStorage;
      sub_10007082C(0, v30, 0);
      id v31 = (void *)v233;
      uint64_t v33 = (void *)(v32 + 32);
      uint64_t v34 = v19;
      do
      {
        uint64_t v35 = v31;
        uint64_t v36 = *v33;
        swift_bridgeObjectRetain(*v33);
        sub_100099F24(v37, v29, v236);
        swift_bridgeObjectRelease(v36);
        id v31 = v35;
        *(void *)&__int128 v233 = v35;
        unint64_t v38 = v35[2];
        unint64_t v39 = v31[3];
        if (v38 >= v39 >> 1)
        {
          sub_10007082C(v39 > 1, v38 + 1, 1);
          id v31 = (void *)v233;
        }

        v31[2] = v38 + 1;
        id v40 = &v31[10 * v38];
        v40[2] = v236[0];
        __int128 v41 = v236[1];
        __int128 v42 = v236[2];
        __int128 v43 = v236[4];
        v40[5] = v236[3];
        v40[6] = v43;
        v40[3] = v41;
        v40[4] = v42;
        ++v33;
        --v30;
        uint64_t ObjectType = v228;
      }

      while (v30);
      break;
    case 2:
      int64_t v48 = *(void *)(v227 + 16);
      id v31 = _swiftEmptyArrayStorage;
      if (!v48) {
        goto LABEL_38;
      }
      uint64_t v49 = v227;
      *(void *)&__int128 v233 = _swiftEmptyArrayStorage;
      sub_10007082C(0, v48, 0);
      id v31 = (void *)v233;
      uint64_t v50 = (void *)(v49 + 32);
      uint64_t v34 = v19;
      do
      {
        uint64_t v51 = v31;
        uint64_t v52 = *v50;
        swift_bridgeObjectRetain(*v50);
        sub_100018A60(v53, v29, v237);
        swift_bridgeObjectRelease(v52);
        id v31 = v51;
        *(void *)&__int128 v233 = v51;
        unint64_t v54 = v51[2];
        unint64_t v55 = v31[3];
        if (v54 >= v55 >> 1)
        {
          sub_10007082C(v55 > 1, v54 + 1, 1);
          id v31 = (void *)v233;
        }

        v31[2] = v54 + 1;
        uint64_t v56 = &v31[10 * v54];
        v56[2] = v237[0];
        __int128 v57 = v237[1];
        __int128 v58 = v237[2];
        __int128 v59 = v237[4];
        v56[5] = v237[3];
        v56[6] = v59;
        v56[3] = v57;
        v56[4] = v58;
        ++v50;
        --v48;
        uint64_t ObjectType = v228;
      }

      while (v48);
      break;
    case 3:
      int64_t v60 = *(void *)(v227 + 16);
      id v31 = _swiftEmptyArrayStorage;
      if (!v60) {
        goto LABEL_38;
      }
      uint64_t v61 = v227;
      *(void *)&__int128 v233 = _swiftEmptyArrayStorage;
      sub_10007082C(0, v60, 0);
      id v31 = (void *)v233;
      uint64_t v62 = (void *)(v61 + 32);
      uint64_t v34 = v19;
      do
      {
        uint64_t v63 = v31;
        uint64_t v64 = *v62;
        swift_bridgeObjectRetain(*v62);
        sub_100034FC8(v65, v29, (uint64_t)v238);
        swift_bridgeObjectRelease(v64);
        id v31 = v63;
        *(void *)&__int128 v233 = v63;
        unint64_t v66 = v63[2];
        unint64_t v67 = v31[3];
        if (v66 >= v67 >> 1)
        {
          sub_10007082C(v67 > 1, v66 + 1, 1);
          id v31 = (void *)v233;
        }

        v31[2] = v66 + 1;
        id v68 = &v31[10 * v66];
        v68[2] = v238[0];
        __int128 v69 = v238[1];
        __int128 v70 = v238[2];
        __int128 v71 = v238[4];
        v68[5] = v238[3];
        v68[6] = v71;
        v68[3] = v69;
        v68[4] = v70;
        ++v62;
        --v60;
        uint64_t ObjectType = v228;
      }

      while (v60);
      break;
    case 4:
      int64_t v72 = *(void *)(v227 + 16);
      id v31 = _swiftEmptyArrayStorage;
      if (!v72) {
        goto LABEL_38;
      }
      uint64_t v73 = v227;
      *(void *)&__int128 v233 = _swiftEmptyArrayStorage;
      sub_10007082C(0, v72, 0);
      id v31 = (void *)v233;
      uint64_t v74 = (void *)(v73 + 32);
      uint64_t v34 = v19;
      do
      {
        uint64_t v75 = v31;
        uint64_t v76 = *v74;
        swift_bridgeObjectRetain(*v74);
        sub_10003101C(v77, v29);
        swift_bridgeObjectRelease(v76);
        id v31 = v75;
        *(void *)&__int128 v233 = v75;
        unint64_t v78 = v75[2];
        unint64_t v79 = v31[3];
        if (v78 >= v79 >> 1)
        {
          sub_10007082C(v79 > 1, v78 + 1, 1);
          id v31 = (void *)v233;
        }

        v31[2] = v78 + 1;
        uint64_t v80 = &v31[10 * v78];
        v80[2] = v238[5];
        __int128 v81 = v238[6];
        __int128 v82 = v238[7];
        __int128 v83 = v238[9];
        v80[5] = v238[8];
        v80[6] = v83;
        v80[3] = v81;
        v80[4] = v82;
        ++v74;
        --v72;
        uint64_t ObjectType = v228;
      }

      while (v72);
      break;
    default:
      unint64_t v47 = sub_10000AE14();
      uint64_t v23 = swift_allocError(&type metadata for AUAError, v47, 0LL, 0LL);
      *(_BYTE *)uint64_t v24 = 76;
      *(void *)(v24 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v24 + 16) = 0xE000000000000000LL;
      *(void *)(v24 + 24) = 0xD00000000000002BLL;
      *(void *)(v24 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFAE0LL;
      *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000022LL;
      *(void *)(v24 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFA40LL;
      uint64_t v25 = 99LL;
      goto LABEL_17;
  }

  uint64_t v19 = v34;
LABEL_38:
  uint64_t v84 = v31[2];
  if (!v84)
  {
    swift_bridgeObjectRelease(v31);
    sub_100029840( 0xD000000000000036LL,  0x80000001000CFB50LL,  0xD00000000000002BLL,  (void *)0x80000001000CFAE0LL,  0xD000000000000022LL,  0x80000001000CFA40LL,  103LL);
    uint64_t v113 = 0LL;
    unint64_t v114 = 0LL;
    uint64_t v115 = 0LL;
    BOOL v116 = 0LL;
    goto LABEL_146;
  }

  uint64_t v239 = &_swiftEmptySetSingleton;
  unint64_t v85 = v31 + 12;
  uint64_t v86 = (__int128 *)v31[12];
  uint64_t v214 = v31;
  uint64_t v206 = 0LL;
  if (!v86)
  {
    uint64_t v117 = _swiftEmptyArrayStorage;
    goto LABEL_142;
  }

  uint64_t v211 = v31 + 4;
  uint64_t v212 = v84;
  uint64_t v87 = (char *)*((void *)v86 + 2);
  __int128 v204 = v31 + 12;
  if (!v87)
  {
    uint64_t v117 = _swiftEmptyArrayStorage;
    goto LABEL_91;
  }

  uint64_t v215 = &v234;
  swift_bridgeObjectRetain_n(v86, 2LL);
  uint64_t v88 = 32LL;
  unint64_t v216 = (unint64_t)"activeAlternateSetting";
  unint64_t v210 = 0x80000001000CFB30LL;
  uint64_t v220 = v86;
  while (1)
  {
    uint64_t v221 = v88;
    Swift::String v222 = v87;
    uint64_t v89 = (unsigned __int16 *)((char *)v86 + v88);
    int v90 = *((unsigned __int8 *)v86 + v88 + 2);
    int v91 = *v89;
    *((void *)&v234 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v21_Block_object_dispose((const void *)(v30 - 136), 8) = v90;
    BYTE2(v23swift_unknownObjectWeakDestroy(v0 + 3) = v90;
    LODWORD(v217) = v91;
    LOWORD(v23swift_unknownObjectWeakDestroy(v0 + 3) = v91;
    uint64_t v92 = Mirror.init(reflecting:)(&v233);
    unint64_t v93 = (unint64_t)v19;
    uint64_t v94 = (void *)Mirror.children.getter(v92);
    uint64_t v96 = v94[2];
    uint64_t v95 = v94[3];
    Swift::String v98 = (__int128 **)v94[4];
    uint64_t v97 = (const char **)v94[5];
    uint64_t ObjectType = (unsigned __int8 **)swift_getObjectType(v96);
    swift_unknownObjectRetain(v96);
    swift_unknownObjectRetain(v98);
    uint64_t v227 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v95);
    uint64_t v99 = swift_getObjectType(v98);
    __int128 v100 = v98;
    uint64_t v101 = dispatch thunk of _AnyIndexBox._typeID.getter(v99, v97);
    unint64_t v103 = v227;
    if (v227 != v101)
    {
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }

    char v104 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v98, v97, ObjectType, v95);
    swift_unknownObjectRelease(v98, v105);
    if ((v104 & 1) != 0)
    {
      swift_unknownObjectRelease(v96, v106);
      __int128 v234 = 0u;
      __int128 v235 = 0u;
      __int128 v233 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v96, v95);
      __int128 v233 = v230;
      __int128 v234 = v231;
      __int128 v235 = v232;
      swift_unknownObjectRelease(v96, v107);
    }

    uint64_t v108 = v226;
    uint64_t v109 = v224;
    swift_release(v94);
    uint64_t v19 = (char *)v93;
    unint64_t v219 = *(void *)(v109 + 8);
    ((void (*)(unint64_t, uint64_t))v219)(v93, v108);
    if (!*((void *)&v235 + 1))
    {
      sub_100058DF4((uint64_t)&v233);
      uint64_t v86 = v220;
      goto LABEL_43;
    }

    int64_t v110 = (__int128 *)*((void *)&v233 + 1);
    uint64_t v111 = v233;
    sub_100017A40(v215);
    uint64_t v86 = v220;
    if (!v110) {
      goto LABEL_43;
    }
    char v112 = _stringCompareWithSmolCheck(_:_:expecting:)( v111,  v110,  0xD000000000000016LL,  v216 | 0x8000000000000000LL,  0LL);
    swift_bridgeObjectRelease(v110);
    if ((v112 & 1) != 0)
    {
      int64_t v110 = v86;
      goto LABEL_59;
    }

LABEL_146:
  *uint64_t ObjectType = v113;
  ObjectType[1] = v114;
  ObjectType[2] = 0LL;
  ObjectType[3] = (unsigned __int8 *)v115;
  ObjectType[4] = (unsigned __int8 *)v116;
}

BOOL _s9AUASDCore18StreamingInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || (sub_1000A5C6C(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0
    || ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
  {
    return 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5)
  {
    if (!v6 || !sub_1000A56D8(v5, v6)) {
      return 0LL;
    }
  }

  else if (v6)
  {
    return 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 32);
  if (v7) {
    return v8 && (sub_1000A5580(v7, v8) & 1) != 0;
  }
  return !v8;
}

uint64_t sub_10005854C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t _s9AUASDCore21StreamingAltInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(void *)(a1 + 16) == *(void *)(a2 + 16)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    && *(void *)(a1 + 32) == *(void *)(a2 + 32))
  {
    sub_10005854C((uint64_t *)(a1 + 40), (uint64_t)&v5);
    sub_10005854C((uint64_t *)(a2 + 40), (uint64_t)&v4);
    sub_10005854C(&v5, (uint64_t)&v6);
    __asm { BR              X10 }
  }

  return 0LL;
}

unint64_t sub_100058788()
{
  unint64_t result = qword_100114F68;
  if (!qword_100114F68)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StreamingInterfaceDataFormat,  &type metadata for StreamingInterfaceDataFormat);
    atomic_store(result, (unint64_t *)&qword_100114F68);
  }

  return result;
}

unint64_t sub_1000587D0()
{
  unint64_t result = qword_100114F70;
  if (!qword_100114F70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StreamingInterface,  &type metadata for StreamingInterface);
    atomic_store(result, (unint64_t *)&qword_100114F70);
  }

  return result;
}

unint64_t sub_100058818()
{
  unint64_t result = qword_100114F78;
  if (!qword_100114F78)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for StreamingAltInterface,  &type metadata for StreamingAltInterface);
    atomic_store(result, (unint64_t *)&qword_100114F78);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for StreamingInterfaceDataFormat(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }

uint64_t storeEnumTagSinglePayload for StreamingInterfaceDataFormat( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_100058938 + 4 * byte_1000D6D5D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10005896C + 4 * byte_1000D6D58[v4]))();
}

uint64_t sub_10005896C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100058974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005897CLL);
  }
  return result;
}

uint64_t sub_100058988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100058990LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_100058994(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005899C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StreamingInterfaceDataFormat()
{
  return &type metadata for StreamingInterfaceDataFormat;
}

uint64_t destroy for StreamingInterface(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for StreamingInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for StreamingInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for StreamingInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StreamingInterface()
{
  return &type metadata for StreamingInterface;
}

uint64_t initializeWithCopy for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v3;
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v4;
  *(_WORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingAltInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingAltInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StreamingAltInterface()
{
  return &type metadata for StreamingAltInterface;
}

uint64_t sub_100058DF4(uint64_t a1)
{
  uint64_t v2 = sub_100008E00(&qword_100113CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Int ADC2InputTerminalDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, int a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_100058E90()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0LL);
  sub_100042E08((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2InputTerminalDescriptor(uint64_t a1)
{
  return sub_100042E08(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

Swift::Int sub_100058EF4(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  int v4 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  sub_100042E08((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2InputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003B454( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int8 *)(a2 + 16));
}

Swift::Int ADC2OutputTerminalDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100058FB0()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_100041F1C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2OutputTerminalDescriptor(uint64_t a1)
{
  return sub_100041F1C(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_100059008(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_100041F1C((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2OutputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_100039FE4(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC2MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100044558);
}

Swift::Int sub_100059078(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_100044558);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptor(uint64_t a1)
{
  return sub_100044558(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_100059094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100044558);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003D3E4);
}

Swift::Int ADC2MixerUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000590F0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  uint64_t v3 = v0[5];
  Hasher.init(_seed:)(v5, 0LL);
  sub_1000420E0((uint64_t)v5, v1 | (v2 << 8) | (v3 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_1000420E0(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8) | ((unint64_t)v1[5] << 40));
}

Swift::Int sub_100059160(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(unsigned int *)(v1 + 1);
  uint64_t v4 = v1[5];
  Hasher.init(_seed:)(v6, a1);
  sub_1000420E0((uint64_t)v6, v2 | (v3 << 8) | (v4 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptorPart2( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003A25C( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8) | ((unint64_t)a1[5] << 40),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8) | ((unint64_t)a2[5] << 40));
}

Swift::Int ADC2MixerUnitDescriptorPart3.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_1000420D4);
}

Swift::Int sub_1000591EC(uint64_t a1, uint64_t a2)
{
  return sub_100059A2C(a1, a2, (void (*)(void *, uint64_t))sub_1000420D4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptorPart3(uint64_t a1)
{
  return sub_1000420D4(a1, *v1);
}

Swift::Int sub_100059200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059A88(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000420D4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptorPart3( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059AD8(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10003A250);
}

Swift::Int ADC2SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_1000434DC);
}

Swift::Int sub_100059224(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_1000434DC);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SelectorUnitDescriptor(uint64_t a1)
{
  return sub_1000434DC(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_100059240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000434DC);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SelectorUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003BDA8);
}

Swift::Int ADC2SelectorUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_100040D90);
}

Swift::Int sub_100059264(uint64_t a1, uint64_t a2)
{
  return sub_100059A2C(a1, a2, (void (*)(void *, uint64_t))sub_100040D90);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SelectorUnitDescriptorPart2(uint64_t a1)
{
  return sub_100040D90(a1, *v1);
}

Swift::Int sub_100059278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059A88(a1, a2, a3, (void (*)(void *, uint64_t))sub_100040D90);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SelectorUnitDescriptorPart2( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059AD8(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_100038824);
}

Swift::Int ADC2FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100043B88);
}

Swift::Int sub_10005929C(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_100043B88);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2FeatureUnitDescriptor(uint64_t a1)
{
  return sub_100043B88(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000592B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100043B88);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2FeatureUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003C6C8);
}

Swift::Int ADC2SRConverterUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10004158C);
}

Swift::Int sub_1000592DC(uint64_t a1, uint64_t a2)
{
  return sub_100059820(a1, a2, (void (*)(void *, uint64_t))sub_10004158C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SRConverterUnitDescriptor(uint64_t a1)
{
  return sub_10004158C(a1, *v1);
}

Swift::Int sub_1000592F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005987C(a1, a2, a3, (void (*)(void *, uint64_t))sub_10004158C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SRConverterUnitDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_1000392FC(*a1, *a2);
}

Swift::Int ADC2EffectUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_10004420C);
}

Swift::Int sub_100059314(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_10004420C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2EffectUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_10004420C);
}

Swift::Int sub_10005932C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_10004420C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2EffectUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003CF78);
}

Swift::Int ADC2ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100041F10);
}

Swift::Int sub_100059350(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100041F10);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ProcessingUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100041F10);
}

Swift::Int sub_100059368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100041F10);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ProcessingUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_100039FD8);
}

Swift::Int ADC2ProcessingUnitDescriptorPart2.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)uint64_t v10 = a1;
  *(_WORD *)&_BYTE v10[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 40;
  unint64_t v5 = HIWORD(a1);
  __int16 v6 = *(_WORD *)&v10[7];
  unsigned int v7 = a2 >> 8;
  Hasher.init(_seed:)(v10, 0LL);
  LOBYTE(v9) = v2;
  *(_DWORD *)((char *)&v9 + 1) = v3;
  BYTE5(v9) = v4;
  BYTE6(v9) = v5;
  *(_WORD *)((char *)&v9 + 7) = v6;
  BYTE9(v9) = v7;
  sub_100040164((uint64_t)v10, v9, WORD4(v9));
  return Hasher._finalize()();
}

Swift::Int sub_10005940C()
{
  char v1 = *v0;
  unsigned int v2 = *(_DWORD *)(v0 + 1);
  unsigned int v3 = *(_DWORD *)(v0 + 5);
  char v4 = v0[9];
  Hasher.init(_seed:)(v7, 0LL);
  LOBYTE(v6) = v1;
  *(void *)((char *)&v6 + 1) = __PAIR64__(v3, v2);
  BYTE9(v6) = v4;
  sub_100040164((uint64_t)v7, v6, WORD4(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ProcessingUnitDescriptorPart2( uint64_t a1)
{
  *(void *)&v3[1] = *(void *)(v1 + 1);
  void v3[9] = *(_BYTE *)(v1 + 9);
  return sub_100040164(a1, *(unint64_t *)v3, *(unsigned __int16 *)&v3[8]);
}

Swift::Int sub_1000594A8(uint64_t a1)
{
  char v2 = *v1;
  unsigned int v3 = *(_DWORD *)(v1 + 1);
  unsigned int v4 = *(_DWORD *)(v1 + 5);
  char v5 = v1[9];
  Hasher.init(_seed:)(v8, a1);
  LOBYTE(v7) = v2;
  *(void *)((char *)&v7 + 1) = __PAIR64__(v4, v3);
  BYTE9(v7) = v5;
  sub_100040164((uint64_t)v8, v7, WORD4(v7));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ProcessingUnitDescriptorPart2( uint64_t a1, char *a2)
{
  char v2 = *a2;
  unsigned int v3 = *(_DWORD *)(a2 + 1);
  unsigned int v4 = *(_DWORD *)(a2 + 5);
  char v5 = a2[9];
  *(void *)&v9[1] = *(void *)(a1 + 1);
  void v9[9] = *(_BYTE *)(a1 + 9);
  unint64_t v6 = *(void *)v9;
  unsigned int v7 = *(unsigned __int16 *)&v9[8];
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v2;
  *(void *)((char *)&v10 + 1) = __PAIR64__(v4, v3);
  BYTE9(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  return sub_10003780C(v6, v7, v10, WORD4(v10));
}

Swift::Int ADC2ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100042FD8);
}

Swift::Int sub_100059574(uint64_t a1, void (*a2)(void *, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000595BC(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100042FD8);
}

Swift::Int sub_1000595C8(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *((unsigned __int16 *)v3 + 2);
  uint64_t v6 = *((unsigned __int8 *)v3 + 6);
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v9, 0LL);
  a3(v9, v7 | (v5 << 32) | (v6 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ExtensionUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100042FD8);
}

uint64_t sub_100059630( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4( a1,  *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 6) << 48));
}

Swift::Int sub_100059648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100042FD8);
}

Swift::Int sub_100059654(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *((unsigned __int16 *)v4 + 2);
  uint64_t v7 = *((unsigned __int8 *)v4 + 6);
  uint64_t v8 = *v4;
  Hasher.init(_seed:)(v10, a1);
  a4(v10, v8 | (v6 << 32) | (v7 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ExtensionUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003B718);
}

uint64_t sub_1000596B8( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC2ExtensionUnitDescriptorPart2.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100059728()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_1000407B8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ExtensionUnitDescriptorPart2( uint64_t a1)
{
  return sub_1000407B8(a1, *v1);
}

Swift::Int sub_100059774(uint64_t a1)
{
  unint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000407B8((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ExtensionUnitDescriptorPart2( unint64_t *a1, unint64_t *a2)
{
  return sub_1000380B4(*a1, *a2);
}

Swift::Int ADC2ClockSourceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_100043B94);
}

Swift::Int sub_1000597CC(uint64_t a1, void (*a2)(void *, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_100059814(uint64_t a1, uint64_t a2)
{
  return sub_100059820(a1, a2, (void (*)(void *, uint64_t))sub_100043B94);
}

Swift::Int sub_100059820(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v7, 0LL);
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSourceDescriptor(uint64_t a1)
{
  return sub_100043B94(a1, *v1);
}

Swift::Int sub_100059870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005987C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100043B94);
}

Swift::Int sub_10005987C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v8, a1);
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSourceDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_10003C6D4(*a1, *a2);
}

Swift::Int ADC2ClockSelectorDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100042FE4);
}

Swift::Int sub_1000598D8(uint64_t a1, void (*a2)(void *, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_100059920(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_100042FE4);
}

Swift::Int sub_10005992C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v5 | (v6 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSelectorDescriptor(uint64_t a1)
{
  return sub_100042FE4(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_100059990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100042FE4);
}

Swift::Int sub_10005999C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v6 | (v7 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSelectorDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003B724);
}

uint64_t sub_1000599F8( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8));
}

Swift::Int ADC2ClockSelectorDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_100040928);
}

Swift::Int sub_100059A20(uint64_t a1, uint64_t a2)
{
  return sub_100059A2C(a1, a2, (void (*)(void *, uint64_t))sub_100040928);
}

Swift::Int sub_100059A2C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v7, 0LL);
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSelectorDescriptorPart2( uint64_t a1)
{
  return sub_100040928(a1, *v1);
}

Swift::Int sub_100059A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059A88(a1, a2, a3, (void (*)(void *, uint64_t))sub_100040928);
}

Swift::Int sub_100059A88(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v8, a1);
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSelectorDescriptorPart2( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100059AD8(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_100038294);
}

uint64_t sub_100059AD8( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*a1, *a2);
}

Swift::Int ADC2ClockMultiplierDescriptor.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100059B28()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 2);
  uint64_t v2 = *(unsigned int *)((char *)v0 + 3);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100041598((uint64_t)v5, v3 | (v1 << 16) | (v2 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockMultiplierDescriptor(uint64_t a1)
{
  return sub_100041598( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

Swift::Int sub_100059B98(uint64_t a1)
{
  uint64_t v2 = *((unsigned __int8 *)v1 + 2);
  uint64_t v3 = *(unsigned int *)((char *)v1 + 3);
  uint64_t v4 = *v1;
  Hasher.init(_seed:)(v6, a1);
  sub_100041598((uint64_t)v6, v4 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockMultiplierDescriptor( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100039308( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a1 + 3) << 24),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a2 + 3) << 24));
}

uint64_t sub_100059C18(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114F80,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2InputTerminalDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059C54()
{
  return sub_10000B6D4( &qword_100114F88,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2InputTerminalDescriptor);
}

uint64_t sub_100059C80(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114F90,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2OutputTerminalDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059CBC()
{
  return sub_10000B6D4( &qword_100114F98,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2OutputTerminalDescriptor);
}

uint64_t sub_100059CE8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FA0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059D24()
{
  return sub_10000B6D4( &qword_100114FA8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptor);
}

uint64_t sub_100059D50(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FB0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptorPart2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059D8C()
{
  return sub_10000B6D4( &qword_100114FB8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptorPart2);
}

uint64_t sub_100059DB8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FC0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptorPart3,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptorPart3);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059DF4()
{
  return sub_10000B6D4( &qword_100114FC8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2MixerUnitDescriptorPart3,  (uint64_t)&protocol conformance descriptor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_100059E20(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FD0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2SelectorUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059E5C()
{
  return sub_10000B6D4( &qword_100114FD8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_100059E88(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FE0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SelectorUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2SelectorUnitDescriptorPart2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059EC4()
{
  return sub_10000B6D4( &qword_100114FE8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SelectorUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_100059EF0(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100114FF0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2FeatureUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059F2C()
{
  return sub_10000B6D4( &qword_100114FF8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_100059F58(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115000,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SRConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2SRConverterUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059F94()
{
  return sub_10000B6D4( &qword_100115008,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2SRConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_100059FC0(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115010,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2EffectUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_100059FFC()
{
  return sub_10000B6D4( &qword_100115018,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2EffectUnitDescriptor);
}

uint64_t sub_10005A028(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115020,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ProcessingUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A064()
{
  return sub_10000B6D4( &qword_100115028,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_10005A090(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115030,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ProcessingUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ProcessingUnitDescriptorPart2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A0CC()
{
  return sub_10000B6D4( &qword_100115038,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ProcessingUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ProcessingUnitDescriptorPart2);
}

uint64_t sub_10005A0F8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115040,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ExtensionUnitDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A134()
{
  return sub_10000B6D4( &qword_100115048,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_10005A160(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115050,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ExtensionUnitDescriptorPart2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A19C()
{
  return sub_10000B6D4( &qword_100115058,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ExtensionUnitDescriptorPart2);
}

uint64_t sub_10005A1C8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115060,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockSourceDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A204()
{
  return sub_10000B6D4( &qword_100115068,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockSourceDescriptor);
}

uint64_t sub_10005A230(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115070,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockSelectorDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A26C()
{
  return sub_10000B6D4( &qword_100115078,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_10005A298(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115080,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSelectorDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ClockSelectorDescriptorPart2);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A2D4()
{
  return sub_10000B6D4( &qword_100115088,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockSelectorDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_10005A300(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100115090,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockMultiplierDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockMultiplierDescriptor);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = result;
  return result;
}

uint64_t sub_10005A33C()
{
  return sub_10000B6D4( &qword_100115098,  (uint64_t (*)(uint64_t))type metadata accessor for ADC2ClockMultiplierDescriptor,  (uint64_t)&protocol conformance descriptor for ADC2ClockMultiplierDescriptor);
}

uint64_t sub_10005A368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v2 = type metadata accessor for Mirror(0LL);
  uint64_t v61 = *(void *)(v2 - 8);
  uint64_t v62 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100008E00(&qword_1001150A0);
  uint64_t inited = swift_initStackObject(v5, &v69);
  uint64_t v7 = 0LL;
  *(_OWORD *)(inited + 16) = xmmword_1000D6F00;
  *(_DWORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 131073;
  *(_BYTE *)(inited + 3_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_WORD *)(inited + 36) = 257;
  *(_BYTE *)(inited + 41) = 0;
  *(_WORD *)(inited + 39) = 256;
  *(_DWORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 2) = 524292;
  *(_BYTE *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 6;
  *(_WORD *)(inited + 46) = 577;
  *(_BYTE *)(inited + 51) = 6;
  *(_WORD *)(inited + 49) = 576;
  *(_DWORD *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 2) = 2097168;
  *(_BYTE *)(inited + 5_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_WORD *)(inited + 56) = 897;
  *(_BYTE *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 896;
  *(_DWORD *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 2) = 8388672;
  *(_BYTE *)(inited + 6_Block_object_dispose((const void *)(v30 - 136), 8) = 6;
  *(_WORD *)(inited + 66) = 1217;
  *(_BYTE *)(inited + 71) = 6;
  *(_WORD *)(inited + 69) = 1216;
  *(_DWORD *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = 33554688;
  *(_BYTE *)(inited + 7_Block_object_dispose((const void *)(v30 - 136), 8) = 16;
  *(_WORD *)(inited + 76) = 1281;
  *(_BYTE *)(inited + 81) = 16;
  *(_WORD *)(inited + 79) = 1280;
  *(_DWORD *)(inited + 8swift_unknownObjectWeakDestroy(v0 + 2) = 134218752;
  *(_BYTE *)(inited + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 16;
  *(_WORD *)(inited + 86) = 1601;
  *(_BYTE *)(inited + 91) = 16;
  *(_WORD *)(inited + 89) = 1600;
  id v68 = &_swiftEmptySetSingleton;
  uint64_t v55 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v56 = v1;
  uint64_t v54 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v53 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v52 = *(unsigned __int8 *)(v1 + 7);
  uint64_t v49 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v48 = *(unsigned int *)(v1 + 9);
  int v8 = *(unsigned __int8 *)(v1 + 13);
  int v64 = *(unsigned __int16 *)(v1 + 14);
  int v9 = *(unsigned __int8 *)(v1 + 16);
  int v50 = v8;
  int v51 = v9;
  __int128 v58 = &v71;
  __int128 v10 = _swiftEmptyArrayStorage;
  uint64_t v59 = inited;
  int64_t v60 = v4;
  do
  {
    uint64_t v11 = inited + v7;
    int v12 = (unsigned __int16)(*(_WORD *)(inited + v7 + 34) & v64);
    if ((*(_WORD *)(inited + v7 + 32) & (unsigned __int16)v64) != 0)
    {
      uint64_t v77 = v7;
      int v13 = *(unsigned __int16 *)(v11 + 36) | (*(unsigned __int8 *)(v11 + 38) << 16);
      int v14 = *(unsigned __int16 *)(v11 + 39) | (*(unsigned __int8 *)(v11 + 41) << 16);
      if (v12) {
        int v15 = v13;
      }
      else {
        int v15 = v14;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        __int128 v10 = sub_10004F514(0LL, v10[2] + 1LL, 1, v10);
      }
      unint64_t v17 = v10[2];
      unint64_t v16 = v10[3];
      if (v17 >= v16 >> 1) {
        __int128 v10 = sub_10004F514((void *)(v16 > 1), v17 + 1, 1, v10);
      }
      v10[2] = v17 + 1;
      uint64_t v18 = (char *)v10 + 3 * v17;
      v18[34] = BYTE2(v15);
      *((_WORD *)v18 + 16) = v15;
      if (!v12) {
        goto LABEL_4;
      }
      uint64_t v63 = v10;
      *((void *)&v71 + 1) = &type metadata for USBDescriptorControl;
      LOWORD(v7_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v13;
      BYTE2(v7_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = BYTE2(v13);
      uint64_t v19 = Mirror.init(reflecting:)(&v70);
      id v20 = (void *)Mirror.children.getter(v19);
      uint64_t v21 = v20[2];
      uint64_t v22 = v20[3];
      uint64_t v23 = v20[4];
      uint64_t v24 = v20[5];
      uint64_t ObjectType = swift_getObjectType(v21);
      swift_unknownObjectRetain(v21);
      swift_unknownObjectRetain(v23);
      uint64_t v26 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v22);
      uint64_t v27 = swift_getObjectType(v23);
      uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v27, v24);
      if (v26 != result)
      {
        __break(1u);
        return result;
      }

      char v29 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v23, v24, ObjectType, v22);
      swift_unknownObjectRelease(v23, v30);
      if ((v29 & 1) != 0)
      {
        swift_unknownObjectRelease(v21, v31);
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        __int128 v70 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v21, v22);
        __int128 v70 = v65;
        __int128 v71 = v66;
        __int128 v72 = v67;
        swift_unknownObjectRelease(v21, v32);
      }

      uint64_t inited = v59;
      uint64_t v33 = v60;
      __int128 v10 = v63;
      swift_release(v20);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v62);
      if (*((void *)&v72 + 1))
      {
        __int128 v34 = v70;
        sub_100017A40(v58);
        if (*((void *)&v34 + 1))
        {
          if (v34 == __PAIR128__(0xEB00000000746365LL, 0x746F725079706F63LL))
          {
            swift_bridgeObjectRelease(0xEB00000000746365LL);
            goto LABEL_4;
          }

          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)( v34,  *((void *)&v34 + 1),  0x746F725079706F63LL,  0xEB00000000746365LL,  0LL);
          swift_bridgeObjectRelease(*((void *)&v34 + 1));
          if ((v35 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      else
      {
        sub_100058DF4((uint64_t)&v70);
      }

      sub_1000516F0(&v70, 10LL);
LABEL_4:
      uint64_t v7 = v77;
      goto LABEL_5;
    }

uint64_t sub_10005A8F8@<X0>( unint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  int v53 = a4;
  uint64_t v54 = a3;
  unint64_t v52 = a1;
  uint64_t v55 = a5;
  HIDWORD(v51) = a2;
  int v5 = (unsigned __int16)(a2 >> 8);
  uint64_t v60 = type metadata accessor for Mirror(0LL);
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008E00(&qword_1001150B0);
  uint64_t inited = swift_initStackObject(v8, v66);
  uint64_t v10 = 0LL;
  *(_OWORD *)(inited + 16) = xmmword_1000D6F10;
  *(_DWORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 131073;
  *(_BYTE *)(inited + 3_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_WORD *)(inited + 36) = 257;
  *(_BYTE *)(inited + 41) = 0;
  *(_WORD *)(inited + 39) = 256;
  *(_DWORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 2) = 524292;
  *(_BYTE *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 6;
  *(_WORD *)(inited + 46) = 577;
  *(_BYTE *)(inited + 51) = 6;
  *(_WORD *)(inited + 49) = 576;
  *(_DWORD *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 2) = 2097168;
  *(_BYTE *)(inited + 5_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
  *(_WORD *)(inited + 56) = 897;
  *(_BYTE *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 896;
  *(_DWORD *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 2) = 8388672;
  *(_BYTE *)(inited + 6_Block_object_dispose((const void *)(v30 - 136), 8) = 16;
  *(_WORD *)(inited + 66) = 1281;
  *(_BYTE *)(inited + 71) = 16;
  *(_WORD *)(inited + 69) = 1280;
  *(_DWORD *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = 33554688;
  *(_BYTE *)(inited + 7_Block_object_dispose((const void *)(v30 - 136), 8) = 16;
  *(_WORD *)(inited + 76) = 1601;
  *(_BYTE *)(inited + 81) = 16;
  *(_WORD *)(inited + 79) = 1600;
  __int128 v73 = &_swiftEmptySetSingleton;
  uint64_t v56 = &v68;
  uint64_t v62 = _swiftEmptyArrayStorage;
  int v61 = v5;
  __int128 v58 = v7;
  uint64_t v57 = inited;
  do
  {
    uint64_t v12 = inited + v10;
    int v13 = (unsigned __int16)(*(_WORD *)(inited + v10 + 34) & v5);
    if ((*(_WORD *)(inited + v10 + 32) & (unsigned __int16)v5) != 0)
    {
      int v14 = *(unsigned __int16 *)(v12 + 36) | (*(unsigned __int8 *)(v12 + 38) << 16);
      int v15 = *(unsigned __int16 *)(v12 + 39) | (*(unsigned __int8 *)(v12 + 41) << 16);
      else {
        int v16 = v15;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0) {
        uint64_t v62 = sub_10004F514(0LL, v62[2] + 1LL, 1, v62);
      }
      unint64_t v18 = v62[2];
      unint64_t v17 = v62[3];
      if (v18 >= v17 >> 1) {
        uint64_t v62 = sub_10004F514((void *)(v17 > 1), v18 + 1, 1, v62);
      }
      uint64_t v19 = v62;
      v62[2] = v18 + 1;
      id v20 = (char *)v19 + 3 * v18;
      v20[34] = BYTE2(v16);
      *((_WORD *)v20 + 16) = v16;
      if (v13)
      {
        *((void *)&v68 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v67) = v14;
        BYTE2(v67) = BYTE2(v14);
        uint64_t v21 = Mirror.init(reflecting:)(&v67);
        uint64_t v22 = (void *)Mirror.children.getter(v21);
        uint64_t v24 = v22[2];
        uint64_t v23 = v22[3];
        uint64_t v25 = v22[4];
        uint64_t v26 = v22[5];
        uint64_t ObjectType = swift_getObjectType(v24);
        swift_unknownObjectRetain(v24);
        swift_unknownObjectRetain(v25);
        uint64_t v28 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v23);
        uint64_t v29 = swift_getObjectType(v25);
        uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v29, v26);
        if (v28 != result)
        {
          __break(1u);
          return result;
        }

        char v31 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v25, v26, ObjectType, v23);
        swift_unknownObjectRelease(v25, v32);
        if ((v31 & 1) != 0)
        {
          swift_unknownObjectRelease(v24, v33);
          __int128 v68 = 0u;
          __int128 v69 = 0u;
          __int128 v67 = 0u;
        }

        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter(v24, v23);
          __int128 v67 = v63;
          __int128 v68 = v64;
          __int128 v69 = v65;
          swift_unknownObjectRelease(v24, v34);
        }

        char v35 = v58;
        uint64_t inited = v57;
        swift_release(v22);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v60);
        if (!*((void *)&v69 + 1))
        {
          sub_100058DF4((uint64_t)&v67);
          LOWORD(v5) = v61;
LABEL_3:
          uint64_t v11 = 10LL;
LABEL_4:
          sub_1000516F0(&v67, v11);
          goto LABEL_5;
        }

        __int128 v36 = v67;
        sub_100017A40(v56);
        LOWORD(v5) = v61;
        if (!*((void *)&v36 + 1)) {
          goto LABEL_3;
        }
        if (v36 == __PAIR128__(0xEB00000000746365LL, 0x746F725079706F63LL))
        {
          swift_bridgeObjectRelease(0xEB00000000746365LL);
        }

        else
        {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)( v36,  *((void *)&v36 + 1),  0x746F725079706F63LL,  0xEB00000000746365LL,  0LL);
          swift_bridgeObjectRelease(*((void *)&v36 + 1));
          if ((v37 & 1) == 0) {
            goto LABEL_3;
          }
        }
      }
    }

    else if ((*(_WORD *)(inited + v10 + 34) & (unsigned __int16)v5) != 0)
    {
      uint64_t v11 = 11LL;
      goto LABEL_4;
    }

uint64_t sub_10005AE98@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10006CB30(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease(result);
      uint64_t v12 = sub_10006C838(v11, v9, v10);
      uint64_t result = (uint64_t)sub_10006C480(1LL, v13, v14);
      if (*(void *)(result + 16))
      {
        unint64_t v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v26 = (int16x8_t)vmovl_u8(v4);
        char v19 = *(_BYTE *)(result + 32);
        int v20 = *(_DWORD *)(result + 33);
        char v21 = *(_BYTE *)(result + 37);
        uint64_t result = swift_bridgeObjectRelease(result);
        if (((v26.u16[0] - 13) & 0xFFFFFF00) == 0)
        {
          if ((((v26.i8[0] - 13) - (_DWORD)v11) & 0xFFFFFF00) == 0)
          {
            uint64_t v22 = sub_10006C838((v26.i8[0] - 13 - v11), v17, v18);
            uint64_t result = sub_10006C104(1LL, v23, v24);
            if (*(void *)(result + 16))
            {
              __int16 v25 = *(_WORD *)(result + 32);
              uint64_t result = swift_bridgeObjectRelease(result);
              *(_DWORD *)a3 = vmovn_s16(v26).u32[0];
              *(_BYTE *)(a3 + 4) = v11;
              *(void *)(a3 + _Block_object_dispose((const void *)(v30 - 136), 8) = v12;
              *(_BYTE *)(a3 + 16) = v19;
              *(_DWORD *)(a3 + 17) = v20;
              *(_BYTE *)(a3 + 21) = v21;
              *(void *)(a3 + 24) = v22;
              *(_WORD *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v25;
              return result;
            }

            goto LABEL_14;
          }

LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_12;
  }

  return result;
}

    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v4);
  }

  uint64_t v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6) {
    goto LABEL_25;
  }
  if (v6 < 0)
  {
LABEL_27:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_28;
  }

  int v15 = (char *)&v7[v14 + 4];
  uint64_t v16 = (char *)(a2 + 8 * a3);
  if (v16 >= &v15[8 * v6] || v15 >= &v16[8 * v6])
  {
    uint64_t result = memcpy(v15, v16, 8 * v6);
    if (!v6)
    {
LABEL_22:
      *uint8x8_t v4 = v7;
      return result;
    }

    uint64_t v18 = v7[2];
    char v19 = __OFADD__(v18, v6);
    int v20 = v18 + v6;
    if (!v19)
    {
      _OWORD v7[2] = v20;
      goto LABEL_22;
    }

    goto LABEL_26;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_28:
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_13;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_12;
  }

  return result;
}

        __break(1u);
        goto LABEL_13;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_12;
  }

  return result;
}

  __int16 v25 = a3 & 0x1F | (a2 << 7) | 0x20;
  int16x8_t v26 = a6 | (unsigned __int16)(v11 << 8);
  sub_1000B7288( ((unint64_t)v26 << 32) | (v24 << 48) | ((unint64_t)a4 << 16) | ((unint64_t)v14 << 8) | v25,  (uint64_t)a7,  a8);
  if (v8)
  {
    __int128 v58 = v26;
    uint64_t v27 = (void *)_convertErrorToNSError(_:)(v8);
    uint64_t v28 = [v27 code];

    uint64_t v29 = [v59 boxName];
    if (v29)
    {
      uint64_t v30 = v29;
      char v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;
    }

    else
    {
      uint64_t v33 = (void *)0xEE00656369766544LL;
      char v31 = 0x206E776F6E6B6E55LL;
    }

    if (v28 == (id)-536850432LL)
    {
      _StringGuts.grow(_:)(39LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v34._countAndFlagsBits = v31;
      v34._object = v33;
      String.append(_:)(v34);
      swift_bridgeObjectRelease(v33);
      v35._countAndFlagsBits = 0x64656C6C61745320LL;
      v35._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v35);
      __int128 v36 = sub_100008E00(&qword_100113420);
      char v37 = swift_allocObject(v36, 232LL, 7LL);
      *(_OWORD *)(v37 + 16) = xmmword_1000D6F10;
      *(void *)(v37 + 56) = &type metadata for UInt8;
      *(void *)(v37 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v37 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v25;
      *(void *)(v37 + 96) = &type metadata for UInt8;
      *(void *)(v37 + 104) = &protocol witness table for UInt8;
      *(_BYTE *)(v37 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a1;
      *(void *)(v37 + 136) = &type metadata for UInt16;
      *(void *)(v37 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 11swift_unknownObjectWeakDestroy(v0 + 2) = a4;
      *(void *)(v37 + 176) = &type metadata for UInt16;
      *(void *)(v37 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 15swift_unknownObjectWeakDestroy(v0 + 2) = v58;
      *(void *)(v37 + 216) = &type metadata for UInt16;
      *(void *)(v37 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v37 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v24;
      v38._countAndFlagsBits = String.init(format:_:)(0xD00000000000001ALL, 0x80000001000D2AA0LL, v37);
      object = v38._object;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(object);
      uint64_t v40 = 0xD000000000000019LL;
      uint64_t v41 = 0x80000001000D2B30LL;
      uint64_t v42 = 0x80000001000D2B30LL;
      int v43 = 570LL;
    }

    else
    {
      _StringGuts.grow(_:)(45LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v60 = a4;
      uint64_t v44 = sub_100008E00(&qword_100113420);
      uint64_t v45 = swift_allocObject(v44, 72LL, 7LL);
      *(_OWORD *)(v45 + 16) = xmmword_1000D3D30;
      *(void *)(v45 + 56) = &type metadata for Int;
      *(void *)(v45 + 64) = &protocol witness table for Int;
      *(void *)(v45 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v28;
      v46._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v45);
      __int128 v47 = v46._object;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v47);
      v48._countAndFlagsBits = 0xD000000000000020LL;
      v48._object = (void *)0x80000001000D2A70LL;
      String.append(_:)(v48);
      v49._countAndFlagsBits = v31;
      v49._object = v33;
      String.append(_:)(v49);
      swift_bridgeObjectRelease(v33);
      v50._countAndFlagsBits = 58LL;
      v50._object = (void *)0xE100000000000000LL;
      String.append(_:)(v50);
      uint64_t v51 = swift_allocObject(v44, 232LL, 7LL);
      *(_OWORD *)(v51 + 16) = xmmword_1000D6F10;
      *(void *)(v51 + 56) = &type metadata for UInt8;
      *(void *)(v51 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v51 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v25;
      *(void *)(v51 + 96) = &type metadata for UInt8;
      *(void *)(v51 + 104) = &protocol witness table for UInt8;
      *(_BYTE *)(v51 + 7swift_unknownObjectWeakDestroy(v0 + 2) = a1;
      *(void *)(v51 + 136) = &type metadata for UInt16;
      *(void *)(v51 + 144) = &protocol witness table for UInt16;
      *(_WORD *)(v51 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v60;
      *(void *)(v51 + 176) = &type metadata for UInt16;
      *(void *)(v51 + 184) = &protocol witness table for UInt16;
      *(_WORD *)(v51 + 15swift_unknownObjectWeakDestroy(v0 + 2) = v58;
      *(void *)(v51 + 216) = &type metadata for UInt16;
      *(void *)(v51 + 224) = &protocol witness table for UInt16;
      *(_WORD *)(v51 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v24;
      v52._countAndFlagsBits = String.init(format:_:)(0xD00000000000001ALL, 0x80000001000D2AA0LL, v51);
      int v53 = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(v53);
      uint64_t v40 = 0x20726F727245LL;
      uint64_t v41 = 0xE600000000000000LL;
      uint64_t v42 = 0xE600000000000000LL;
      int v43 = 572LL;
    }

    sub_100029840( v40,  v42,  0xD000000000000066LL,  (void *)0x80000001000D2AC0LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  v43);
    uint64_t v54 = swift_bridgeObjectRelease(v41);
    swift_willThrow(v54);
  }

    sub_1000178B0((uint64_t)&v18, &qword_100114528);
    uint64_t v12 = sub_10000AE14();
    int v13 = swift_allocError(&type metadata for AUAError, v12, 0LL, 0LL);
    *(_BYTE *)uint64_t v14 = 77;
    int v15 = 86LL;
    goto LABEL_13;
  }

  if (*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v6 = *(void *)(v5 + 32);
    swift_unknownObjectRetain(v0[2]);
    swift_retain(v6);
    goto LABEL_8;
  }

  __break(1u);
  return result;
}

double sub_10005B034@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100008E00(&qword_1001150B8);
  uint64_t inited = swift_initStackObject(v2, v33);
  uint64_t v4 = 0LL;
  *(_OWORD *)(inited + 16) = xmmword_1000D3D40;
  *(_WORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 513;
  *(_BYTE *)(inited + 36) = 6;
  *(_WORD *)(inited + 34) = 705;
  *(_BYTE *)(inited + 39) = 6;
  *(_WORD *)(inited + 37) = 704;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2052;
  *(_BYTE *)(inited + 44) = 16;
  *(_WORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 2) = 769;
  *(_BYTE *)(inited + 47) = 16;
  *(_WORD *)(inited + 45) = 768;
  *(_WORD *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 8208;
  *(_BYTE *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 2) = 16;
  *(_WORD *)(inited + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 1089;
  *(_BYTE *)(inited + 55) = 16;
  *(_WORD *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 3) = 1088;
  __int128 v36 = &_swiftEmptySetSingleton;
  unsigned __int8 v5 = *(_BYTE *)(v1 + 11);
  uint64_t v31 = v1;
  int v30 = *(unsigned __int8 *)(v1 + 12);
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v8 = inited + v4;
    int v9 = (*(_BYTE *)(inited + v4 + 33) & v5);
    if ((*(_BYTE *)(inited + v4 + 32) & v5) == 0)
    {
      if ((*(_BYTE *)(inited + v4 + 33) & v5) == 0) {
        goto LABEL_5;
      }
      uint64_t v7 = 11LL;
      goto LABEL_4;
    }

    uint64_t v10 = (unsigned __int16 *)(v8 + 37);
    uint64_t v11 = (unsigned __int16 *)(v8 + 34);
    if ((*(_BYTE *)(inited + v4 + 33) & v5) == 0) {
      uint64_t v11 = v10;
    }
    int v12 = *((unsigned __int8 *)v11 + 2);
    int v13 = *v11;
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
      uint64_t v6 = sub_10004F514(0LL, v6[2] + 1LL, 1, v6);
    }
    unint64_t v15 = v6[2];
    unint64_t v14 = v6[3];
    if (v15 >= v14 >> 1) {
      uint64_t v6 = sub_10004F514((void *)(v14 > 1), v15 + 1, 1, v6);
    }
    _BYTE v6[2] = v15 + 1;
    uint64_t v16 = (char *)v6 + 3 * v15;
    v16[34] = (v13 | (v12 << 16)) >> 16;
    *((_WORD *)v16 + 16) = v13;
    if (v9)
    {
      uint64_t v7 = 10LL;
LABEL_4:
      sub_1000516F0(v34, v7);
    }

uint64_t sub_10005B2D0@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v8 = BYTE3(a1);
  unint64_t v10 = HIDWORD(a1);
  int v11 = BYTE6(a1);
  __int128 v28 = &_swiftEmptySetSingleton;
  if (((a1 >> 40) & 1) != 0)
  {
    if (!BYTE4(a1))
    {
      int v12 = &_swiftEmptySetSingleton;
      goto LABEL_16;
    }

    int v13 = (BYTE5(a1) >> 1) & 1;
    if (BYTE4(a1) != 1)
    {
LABEL_10:
      if (v11)
      {
LABEL_12:
        uint64_t v14 = v8;
        uint64_t v15 = sub_100008E00(&qword_100114E78);
        uint64_t v16 = swift_allocObject(v15, 35LL, 7LL);
        *(_OWORD *)(v16 + 16) = xmmword_1000D3D30;
        *(_BYTE *)(v16 + 34) = 64;
        *(_WORD *)(v16 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v13 | 0x1C0;
        uint64_t v17 = (uint64_t)v28;
        swift_bridgeObjectRetain(a4);
        unint64_t v18 = sub_100051240(v17);
        swift_bridgeObjectRelease(v17);
        uint64_t result = sub_1000AF6D0(v14, a4, v16, v11, a2, a3, (uint64_t)v18, (uint64_t)v26);
        __int128 v20 = v26[3];
        *(_OWORD *)(a5 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v26[2];
        *(_OWORD *)(a5 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v20;
        *(void *)(a5 + 64) = v27;
        __int128 v21 = v26[1];
        *(_OWORD *)a5 = v26[0];
        *(_OWORD *)(a5 + 16) = v21;
        return result;
      }

uint64_t sub_10005B4E4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0LL;
  int v94 = *(_DWORD *)result;
  uint64_t v19 = 0x200000001LL;
  char v21 = 16;
  __int16 v20 = 385;
  __int16 v22 = 384;
  char v23 = 16;
  uint64_t v24 = 0x800000004LL;
  char v26 = 17;
  __int16 v25 = 705;
  __int16 v27 = 704;
  char v28 = 17;
  uint64_t v29 = 0x2000000010LL;
  char v31 = 32;
  __int16 v30 = 769;
  __int16 v32 = 768;
  char v33 = 32;
  uint64_t v34 = 0x8000000040LL;
  char v36 = 32;
  __int16 v35 = 1089;
  char v38 = 32;
  __int16 v37 = 1088;
  uint64_t v39 = 0x20000000100LL;
  char v41 = 32;
  __int16 v40 = 1409;
  char v43 = 32;
  __int16 v42 = 1408;
  uint64_t v44 = 0x80000000400LL;
  char v46 = 32;
  __int16 v45 = 1729;
  char v48 = 32;
  __int16 v47 = 1728;
  uint64_t v49 = 0x200000001000LL;
  char v51 = 48;
  __int16 v50 = 1793;
  __int16 v52 = 1792;
  char v53 = 48;
  uint64_t v54 = 0x800000004000LL;
  __int16 v55 = 2113;
  char v56 = 50;
  __int16 v57 = 2112;
  char v58 = 50;
  uint64_t v59 = 0x2000000010000LL;
  char v61 = 48;
  __int16 v60 = 2433;
  char v63 = 48;
  __int16 v62 = 2432;
  uint64_t v64 = 0x8000000040000LL;
  char v66 = 48;
  __int16 v65 = 2753;
  char v68 = 48;
  __int16 v67 = 2752;
  uint64_t v69 = 0x20000000100000LL;
  char v71 = 65;
  __int16 v70 = 2817;
  __int16 v72 = 2816;
  char v73 = 65;
  uint64_t v74 = 0x80000000400000LL;
  char v76 = 65;
  __int16 v75 = 3137;
  char v78 = 65;
  __int16 v77 = 3136;
  uint64_t v79 = 0x200000001000000LL;
  char v81 = 64;
  __int16 v80 = 3457;
  __int16 v82 = 3456;
  char v83 = 64;
  uint64_t v84 = 0x800000004000000LL;
  char v86 = 16;
  __int16 v85 = 3585;
  char v88 = 16;
  __int16 v87 = 3584;
  uint64_t v89 = 0x2000000010000000LL;
  char v91 = 16;
  __int16 v90 = 3905;
  __int16 v92 = 3904;
  char v93 = 16;
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    unsigned __int8 v5 = &v18[v2 + 1];
    int v6 = *(_DWORD *)((char *)&v19 + v2 + 4);
    int v7 = v6 & v94;
    if ((*(_DWORD *)&v18[v2 + 33] & v94) != 0)
    {
      unsigned __int8 v8 = (unsigned __int16 *)(v5 + 43);
      int v9 = (unsigned __int16 *)(v5 + 40);
      if (!v7) {
        int v9 = v8;
      }
      int v10 = *((unsigned __int8 *)v9 + 2);
      int v11 = *v9;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v3);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004F514(0LL, v3[2] + 1LL, 1, v3);
        uint64_t v3 = (void *)result;
      }

      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004F514((void *)(v12 > 1), v13 + 1, 1, v3);
        uint64_t v3 = (void *)result;
      }

      v3[2] = v13 + 1;
      uint64_t v14 = (char *)v3 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + 16) = v11;
      BOOL v16 = v6 == 0x8000000 && v7 != 0;
      if (v6 == 0x20000000 || v16)
      {
        uint64_t v4 = 10LL;
LABEL_3:
        uint64_t result = sub_1000516F0(v18, v4);
      }
    }

    else if (v7)
    {
      uint64_t v4 = 11LL;
      goto LABEL_3;
    }

    v2 += 16LL;
  }

  while (v2 != 240);
  *a2 = v3;
  return result;
}

uint64_t sub_10005B8B0@<X0>(_OWORD *a1@<X8>)
{
  char v48 = a1;
  uint64_t v53 = type metadata accessor for Mirror(0LL);
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v3 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100008E00(&qword_1001150C0);
  uint64_t inited = swift_initStackObject(v4, v59);
  uint64_t v6 = 0LL;
  *(_OWORD *)(inited + 16) = xmmword_1000D6650;
  *(_WORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 513;
  *(_BYTE *)(inited + 36) = 80;
  *(_WORD *)(inited + 34) = 257;
  *(_BYTE *)(inited + 39) = 80;
  *(_WORD *)(inited + 37) = 256;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2052;
  *(_BYTE *)(inited + 44) = 6;
  *(_WORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 2) = 705;
  *(_BYTE *)(inited + 47) = 6;
  *(_WORD *)(inited + 45) = 704;
  *(_WORD *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 8208;
  *(_BYTE *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 2) = 16;
  *(_WORD *)(inited + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 769;
  *(_BYTE *)(inited + 55) = 16;
  *(_WORD *)(inited + 5swift_unknownObjectWeakDestroy(v0 + 3) = 768;
  *(_WORD *)(inited + 56) = -32704;
  *(_BYTE *)(inited + 6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 16;
  *(_WORD *)(inited + 5_Block_object_dispose((const void *)(v30 - 136), 8) = 1089;
  *(_BYTE *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 3) = 16;
  *(_WORD *)(inited + 61) = 1088;
  char v58 = &_swiftEmptySetSingleton;
  int v67 = *(unsigned __int8 *)(v1 + 13);
  uint64_t v47 = v1;
  int v66 = *(unsigned __int8 *)(v1 + 14);
  uint64_t v49 = &v61;
  int v7 = _swiftEmptyArrayStorage;
  char v51 = v3;
  uint64_t v50 = inited;
  do
  {
    uint64_t v9 = inited + v6;
    int v10 = (*(_BYTE *)(inited + v6 + 33) & v67);
    if ((*(_BYTE *)(inited + v6 + 32) & v67) != 0)
    {
      int v11 = *(unsigned __int16 *)(v9 + 34) | (*(unsigned __int8 *)(v9 + 36) << 16);
      int v12 = *(unsigned __int16 *)(v9 + 37) | (*(unsigned __int8 *)(v9 + 39) << 16);
      else {
        int v13 = v12;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        int v7 = sub_10004F514(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1) {
        int v7 = sub_10004F514((void *)(v14 > 1), v15 + 1, 1, v7);
      }
      _OWORD v7[2] = v15 + 1;
      BOOL v16 = (char *)v7 + 3 * v15;
      v16[34] = BYTE2(v13);
      *((_WORD *)v16 + 16) = v13;
      if (v10)
      {
        uint64_t v54 = v7;
        *((void *)&v61 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v11;
        BYTE2(v6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = BYTE2(v11);
        uint64_t v17 = Mirror.init(reflecting:)(&v60);
        unint64_t v18 = (void *)Mirror.children.getter(v17);
        uint64_t v19 = v18[2];
        uint64_t v20 = v18[3];
        uint64_t v22 = v18[4];
        uint64_t v21 = v18[5];
        uint64_t ObjectType = swift_getObjectType(v19);
        swift_unknownObjectRetain(v19);
        swift_unknownObjectRetain(v22);
        uint64_t v24 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v20);
        uint64_t v25 = swift_getObjectType(v22);
        uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v25, v21);
        if (v24 != result)
        {
          __break(1u);
          return result;
        }

        char v27 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v22, v21, ObjectType, v20);
        swift_unknownObjectRelease(v22, v28);
        if ((v27 & 1) != 0)
        {
          swift_unknownObjectRelease(v19, v29);
          __int128 v61 = 0u;
          __int128 v62 = 0u;
          __int128 v60 = 0u;
        }

        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter(v19, v20);
          __int128 v60 = v55;
          __int128 v61 = v56;
          __int128 v62 = v57;
          swift_unknownObjectRelease(v19, v30);
        }

        char v31 = v51;
        uint64_t inited = v50;
        int v7 = v54;
        swift_release(v18);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v53);
        if (!*((void *)&v62 + 1))
        {
          sub_100058DF4((uint64_t)&v60);
LABEL_3:
          uint64_t v8 = 10LL;
LABEL_4:
          sub_1000516F0(&v60, v8);
          goto LABEL_5;
        }

        uint64_t v32 = *((void *)&v60 + 1);
        uint64_t v33 = v60;
        sub_100017A40(v49);
        if (!v32) {
          goto LABEL_3;
        }
        if (v33 == 0x656C62616E65LL && v32 == 0xE600000000000000LL)
        {
          swift_bridgeObjectRelease(0xE600000000000000LL);
        }

        else
        {
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, 0x656C62616E65LL, 0xE600000000000000LL, 0LL);
          swift_bridgeObjectRelease(v32);
          if ((v34 & 1) == 0) {
            goto LABEL_3;
          }
        }
      }
    }

    else if ((*(_BYTE *)(inited + v6 + 33) & v67) != 0)
    {
      uint64_t v8 = 11LL;
      goto LABEL_4;
    }

uint64_t sub_10005BDCC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _WORD *a4@<X8>)
{
  int v69 = a3;
  uint64_t v68 = a2;
  char v71 = a4;
  unint64_t v70 = a1;
  uint64_t v4 = (__int128 *)BYTE5(a1);
  uint64_t v78 = type metadata accessor for Mirror(0LL);
  uint64_t v77 = *(void *)(v78 - 8);
  uint64_t v5 = __chkstk_darwin(v78);
  char v76 = &v66[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  uint64_t v8 = (__int128 *)&v66[-v7];
  uint64_t v9 = sub_100008E00(&qword_1001150C8);
  uint64_t inited = swift_initStackObject(v9, v87);
  int v11 = 0;
  uint64_t v12 = 0LL;
  *(_OWORD *)(inited + 16) = xmmword_1000D6660;
  *(_WORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 513;
  uint64_t v13 = inited + 32;
  *(_BYTE *)(inited + 36) = 82;
  *(_WORD *)(inited + 34) = 385;
  int v67 = 82;
  *(_BYTE *)(inited + 39) = 82;
  *(_WORD *)(inited + 37) = 384;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 2052;
  *(_BYTE *)(inited + 44) = 80;
  *(_WORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 2) = 705;
  *(_BYTE *)(inited + 47) = 80;
  uint64_t v72 = inited;
  *(_WORD *)(inited + 45) = 704;
  char v88 = &_swiftEmptySetSingleton;
  char v73 = &v85;
  unint64_t v14 = _swiftEmptyArrayStorage;
  __int16 v75 = v4;
  uint64_t v74 = inited + 32;
  do
  {
    LODWORD(v15) = v11;
    uint64_t v16 = v13 + 8 * v12;
    int v17 = (*(_BYTE *)(v16 + 1) & v4);
    if ((*(_BYTE *)v16 & v4) != 0)
    {
      LODWORD(v8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v15;
      int v18 = *(unsigned __int16 *)(v16 + 2) | (*(unsigned __int8 *)(v16 + 4) << 16);
      int v19 = *(unsigned __int16 *)(v16 + 5) | (*(unsigned __int8 *)(v16 + 7) << 16);
      if (v17) {
        int v20 = v18;
      }
      else {
        int v20 = v19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
        unint64_t v14 = sub_10004F514(0LL, v14[2] + 1LL, 1, v14);
      }
      unint64_t v22 = v14[2];
      unint64_t v21 = v14[3];
      if (v22 >= v21 >> 1) {
        unint64_t v14 = sub_10004F514((void *)(v21 > 1), v22 + 1, 1, v14);
      }
      _OWORD v14[2] = v22 + 1;
      char v23 = (char *)v14 + 3 * v22;
      v23[34] = BYTE2(v20);
      *((_WORD *)v23 + 16) = v20;
      if (!v17) {
        goto LABEL_3;
      }
      uint64_t v79 = v14;
      *((void *)&v85 + 1) = &type metadata for USBDescriptorControl;
      LOWORD(v84) = v18;
      BYTE2(v84) = BYTE2(v18);
      uint64_t v24 = Mirror.init(reflecting:)(&v84);
      uint64_t v4 = v8;
      uint64_t v25 = (void *)Mirror.children.getter(v24);
      uint64_t v26 = v25[2];
      uint64_t v27 = v25[3];
      unint64_t v14 = (void *)v25[4];
      uint64_t v28 = v25[5];
      uint64_t ObjectType = swift_getObjectType(v26);
      swift_unknownObjectRetain(v26);
      swift_unknownObjectRetain(v14);
      uint64_t v30 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v27);
      uint64_t v31 = swift_getObjectType(v14);
      if (v30 != dispatch thunk of _AnyIndexBox._typeID.getter(v31, v28))
      {
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }

      char v32 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v14, v28, ObjectType, v27);
      swift_unknownObjectRelease(v14, v33);
      if ((v32 & 1) != 0)
      {
        swift_unknownObjectRelease(v26, v34);
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        __int128 v84 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v26, v27);
        __int128 v84 = v81;
        __int128 v85 = v82;
        __int128 v86 = v83;
        swift_unknownObjectRelease(v26, v35);
      }

      unint64_t v14 = v79;
      uint64_t v8 = v4;
      uint64_t v13 = v74;
      swift_release(v25);
      (*(void (**)(__int128 *, uint64_t))(v77 + 8))(v4, v78);
      LOBYTE(v4) = (_BYTE)v75;
      if (!*((void *)&v86 + 1))
      {
        sub_100058DF4((uint64_t)&v84);
LABEL_3:
        LOBYTE(v15) = v80;
        goto LABEL_4;
      }

      uint64_t v36 = *((void *)&v84 + 1);
      uint64_t v15 = v84;
      sub_100017A40(v73);
      if (!v36) {
        goto LABEL_3;
      }
      if (v15 == 0x79746964696C6176LL && v36 == 0xE800000000000000LL)
      {
        swift_bridgeObjectRelease(0xE800000000000000LL);
        LOBYTE(v15) = v80;
      }

      else
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v36, 0x79746964696C6176LL, 0xE800000000000000LL, 0LL);
        swift_bridgeObjectRelease(v36);
        LOBYTE(v15) = v80;
        if ((v37 & 1) == 0) {
          goto LABEL_4;
        }
      }

      sub_1000516F0(&v84, 10LL);
    }

    else if ((*(_BYTE *)(v16 + 1) & v4) != 0)
    {
      sub_1000516F0(&v84, 11LL);
    }

LABEL_48:
  unint64_t v62 = v70;
  unint64_t v63 = HIBYTE(v70);
  if (!HIBYTE(v70)) {
    LODWORD(v6swift_unknownObjectWeakDestroy(v0 + 3) = -65536;
  }
  __int128 v64 = v71;
  *char v71 = v63;
  *((_BYTE *)v64 + swift_unknownObjectWeakDestroy(v0 + 2) = BYTE2(v63);
  uint64_t v65 = v68;
  *((void *)v64 + 1) = BYTE3(v62);
  *((void *)v64 + swift_unknownObjectWeakDestroy(v0 + 2) = v65;
  v64[12] = v69;
  *((void *)v64 + 4) = v60;
  *((void *)v64 + 5) = v14;
  *((_BYTE *)v64 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = (v62 & 0x300000000LL) != 0;
  *((_BYTE *)v64 + 49) = (v62 & 0x400000000LL) != 0;
  *((void *)v64 + 7) = BYTE6(v62);
  return result;
}

        __break(1u);
LABEL_49:
        sub_1000705E4(v14 > 1, v8, 1);
        uint64_t v29 = v52;
LABEL_32:
        void v29[2] = v8;
        *((_WORD *)v29 + a3 + 16) = v5;
        if (v4)
        {
          __int16 v40 = a3 + 17;
          char v41 = (unsigned int *)v7 + 9;
          while (1)
          {
            __int128 v43 = *v41++;
            uint64_t v42 = v43;
            if (HIWORD(v43)) {
              break;
            }
            uint64_t v52 = v29;
            uint64_t v44 = v29[3];
            if (v40 - 16 >= v44 >> 1)
            {
              sub_1000705E4(v44 > 1, v40 - 15, 1);
              uint64_t v29 = v52;
            }

            void v29[2] = v40 - 15;
            *((_WORD *)v29 + v40++) = v42;
            if (!--v4) {
              goto LABEL_38;
            }
          }

uint64_t sub_10005C59C@<X0>( unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char *a4@<X3>, _WORD *a5@<X8>)
{
  uint64_t v6 = v5;
  int v50 = a3;
  uint64_t v49 = a2;
  uint64_t v51 = a5;
  unint64_t v8 = a1 >> 40;
  unint64_t v52 = a1;
  char v9 = BYTE5(a1);
  uint64_t v10 = type metadata accessor for Mirror(0LL);
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100008E00(&qword_1001150D0);
  uint64_t inited = swift_initStackObject(v13, v65);
  *(_OWORD *)(inited + 16) = xmmword_1000D3D30;
  *(_WORD *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 513;
  *(_BYTE *)(inited + 36) = 64;
  *(_WORD *)(inited + 34) = 449;
  *(_BYTE *)(inited + 39) = 64;
  *(_WORD *)(inited + 37) = 448;
  int v66 = &_swiftEmptySetSingleton;
  if ((v8 & 1) != 0)
  {
    if ((v9 & 2) != 0) {
      int v17 = 4194753;
    }
    else {
      int v17 = 4194752;
    }
    uint64_t v15 = sub_10004F514(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v19 = v15[2];
    unint64_t v18 = v15[3];
    int64_t v20 = v19 + 1;
    if (v19 >= v18 >> 1) {
      goto LABEL_39;
    }
    goto LABEL_10;
  }

  if ((v9 & 2) != 0) {
    sub_1000516F0(&v62, 11LL);
  }
  swift_bridgeObjectRelease(inited);
  uint64_t v15 = _swiftEmptyArrayStorage;
  for (uint64_t i = _swiftEmptyArrayStorage[2]; i; uint64_t i = v15[2])
  {
    v48[0] = a4;
    v48[1] = v6;
    uint64_t v53 = &v63;
    swift_bridgeObjectRetain(v15);
    uint64_t v22 = 32LL;
    __int128 v54 = v15;
    while (1)
    {
      uint64_t v57 = v22;
      uint64_t v58 = i;
      char v23 = (char *)v15 + v22;
      __int16 v24 = *(_WORD *)v23;
      LOBYTE(v2swift_unknownObjectWeakDestroy(v0 + 3) = v23[2];
      *((void *)&v63 + 1) = &type metadata for USBDescriptorControl;
      BYTE2(v6swift_unknownObjectWeakDestroy(v0 + 2) = (_BYTE)v23;
      LOWORD(v6swift_unknownObjectWeakDestroy(v0 + 2) = v24;
      uint64_t v25 = Mirror.init(reflecting:)(&v62);
      a4 = v12;
      uint64_t v6 = (void *)Mirror.children.getter(v25);
      int64_t v20 = v6[2];
      uint64_t v15 = (void *)v6[3];
      unint64_t v19 = v6[4];
      uint64_t inited = v6[5];
      uint64_t ObjectType = swift_getObjectType(v20);
      swift_unknownObjectRetain(v20);
      swift_unknownObjectRetain(v19);
      uint64_t v12 = (char *)dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v15);
      uint64_t v27 = swift_getObjectType(v19);
      int v17 = v19;
      char v28 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v19, inited, ObjectType, v15);
      swift_unknownObjectRelease(v19, v29);
      if ((v28 & 1) != 0)
      {
        swift_unknownObjectRelease(v20, v30);
        __int128 v63 = 0u;
        __int128 v64 = 0u;
        __int128 v62 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(v20, v15);
        __int128 v62 = v59;
        __int128 v63 = v60;
        __int128 v64 = v61;
        swift_unknownObjectRelease(v20, v31);
      }

      uint64_t v15 = v54;
      uint64_t v12 = a4;
      swift_release(v6);
      (*(void (**)(char *, uint64_t))(v55 + 8))(a4, v56);
      if (*((void *)&v64 + 1))
      {
        uint64_t v32 = *((void *)&v62 + 1);
        uint64_t v33 = v62;
        sub_100017A40(v53);
        if (v32)
        {
          if (v33 == 0x726F7463656C6573LL && v32 == 0xE800000000000000LL)
          {
            swift_bridgeObjectRelease(v15);
            unint64_t v35 = 0xE800000000000000LL;
            goto LABEL_27;
          }

          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v32, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
          swift_bridgeObjectRelease(v32);
          if ((v34 & 1) != 0)
          {
            unint64_t v35 = (unint64_t)v15;
LABEL_27:
            swift_bridgeObjectRelease(v35);
            a4 = (char *)v48[0];
            goto LABEL_28;
          }
        }
      }

      else
      {
        sub_100058DF4((uint64_t)&v62);
      }

      uint64_t v22 = v57 + 3;
      uint64_t i = v58 - 1;
      if (v58 == 1)
      {
        swift_bridgeObjectRelease(v15);
        a4 = (char *)v48[0];
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_39:
    uint64_t v15 = sub_10004F514((void *)(v18 > 1), v20, 1, v15);
LABEL_10:
    v15[2] = v20;
    unint64_t v21 = (char *)v15 + 3 * v19;
    v21[34] = BYTE2(v17);
    *((_WORD *)v21 + 16) = v17;
    swift_bridgeObjectRelease(inited);
  }

void sub_10005CACC(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005CEB0LL);
}

void sub_10005CEC4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005D250LL);
}

void sub_10005D264(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005D604LL);
}

void sub_10005D618(_BYTE *a1, __int16 a2)
{
}

void sub_10005D670(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005DB64LL);
}

void sub_10005DB78(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005E1A8LL);
}

void sub_10005E1BC(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005E534LL);
}

void sub_10005E548(_BYTE *a1, __int16 a2)
{
}

void sub_10005E5A0(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x10005EBD8LL);
}

uint64_t Function.controlInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10005EBF8(v1, a1);
}

uint64_t sub_10005EBF8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Function.controlInterface.setter(uint64_t a1)
{
  return sub_10005EC3C(a1, v1);
}

uint64_t sub_10005EC3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Function.streamingInterfaces.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 120));
}

uint64_t Function.functionDescriptors.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  return v1;
}

uint64_t Function.functionProtocol.getter()
{
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t Function.association.getter()
{
  return *(void *)(v0 + 145);
}

uint64_t Function.highestExceptionLevel.getter()
{
  uint64_t result = ControlInterface.highestExceptionLevel.getter();
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v2 + 32;
    do
    {
      uint64_t v6 = v5 + 40 * v4;
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7 && (uint64_t v8 = *(void *)(v7 + 16)) != 0)
      {
        unsigned __int8 v9 = 0;
        uint64_t v10 = (unsigned __int8 *)(v7 + 32);
        do
        {
          int v12 = *v10++;
          int v11 = v12;
          if (v12 == 60 || v11 == 59 || v11 == 14)
          {
            if (!v9) {
              unsigned __int8 v9 = 1;
            }
          }

          else if (v9 < 2u)
          {
            unsigned __int8 v9 = 2;
          }

          --v8;
        }

        while (v8);
      }

      else
      {
        unsigned __int8 v9 = 0;
      }

      uint64_t v13 = *(void *)(v6 + 8);
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = 0LL;
        uint64_t v16 = v13 + 32;
        do
        {
          uint64_t v17 = v16 + 80 * v15;
          uint64_t v18 = *(void *)(v17 + 72);
          if (v18 && (uint64_t v19 = *(void *)(v18 + 16)) != 0)
          {
            unsigned __int8 v20 = 0;
            unint64_t v21 = (unsigned __int8 *)(v18 + 32);
            do
            {
              int v23 = *v21++;
              int v22 = v23;
              if (v23 == 60 || v22 == 59 || v22 == 14)
              {
                if (!v20) {
                  unsigned __int8 v20 = 1;
                }
              }

              else if (v20 < 2u)
              {
                unsigned __int8 v20 = 2;
              }

              --v19;
            }

            while (v19);
          }

          else
          {
            unsigned __int8 v20 = 0;
          }

          uint64_t v24 = *(void *)(v17 + 56);
          uint64_t v25 = *(void *)(v24 + 16);
          if (v25)
          {
            uint64_t v26 = 0LL;
            uint64_t v27 = v24 + 32;
            do
            {
              uint64_t v28 = *(void *)(v27 + 80 * v26 + 72);
              if (v28)
              {
                uint64_t v29 = *(void *)(v28 + 16);
                if (v29)
                {
                  uint64_t v30 = (unsigned __int8 *)(v28 + 32);
                  do
                  {
                    int v32 = *v30++;
                    int v31 = v32;
                    if (v32 == 60 || v31 == 59 || v31 == 14)
                    {
                      if (!v20) {
                        unsigned __int8 v20 = 1;
                      }
                    }

                    else if (v20 < 2u)
                    {
                      unsigned __int8 v20 = 2;
                    }

                    --v29;
                  }

                  while (v29);
                }
              }

              ++v26;
            }

            while (v26 != v25);
          }

          ++v15;
        }

        while (v15 != v14);
      }

      ++v4;
      else {
        uint64_t result = result;
      }
    }

    while (v4 != v3);
  }

  return result;
}

__n128 Function.init(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (!v4)
  {
    __int128 v7 = v11[9];
    *(_OWORD *)(a4 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v11[8];
    *(_OWORD *)(a4 + 144) = v7;
    *(void *)(a4 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
    __int128 v8 = v11[5];
    *(_OWORD *)(a4 + 64) = v11[4];
    *(_OWORD *)(a4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
    __int128 v9 = v11[7];
    *(_OWORD *)(a4 + 96) = v11[6];
    *(_OWORD *)(a4 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v9;
    __int128 v10 = v11[1];
    *(_OWORD *)a4 = v11[0];
    *(_OWORD *)(a4 + 16) = v10;
    __n128 result = (__n128)v11[3];
    *(_OWORD *)(a4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v11[2];
    *(__n128 *)(a4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = result;
  }

  return result;
}

void sub_10005EF6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  sub_100062C58((uint64_t)v63);
  __int128 v9 = *(const IOUSBBOSDescriptor **)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor);
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v64 = a1;
  int v10 = v5[147];
  int v11 = v5[148];
  uint64_t v12 = OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum;
  CapabilityDescriptor = IOUSBGetNextCapabilityDescriptor(v9, 0LL);
  if (!CapabilityDescriptor) {
    goto LABEL_23;
  }
  uint64_t v14 = CapabilityDescriptor;
  uint64_t v48 = a3;
  unsigned __int16 v15 = 0;
  unsigned __int8 bDevCapabilityType = 32;
  do
  {
    if (v14->bDevCapabilityType == 18 && *(void *)(a2 + v12) == v14[1].bLength)
    {
      BOOL v17 = v14[1].bDescriptorType == v10 && v14[1].bDevCapabilityType == v11;
      BOOL v18 = v17;
      if (v18 && v14[2].bDevCapabilityType > bDevCapabilityType)
      {
        unsigned __int16 v15 = *(_WORD *)&v14[3].bLength;
        unsigned __int8 bDevCapabilityType = v14[2].bDevCapabilityType;
      }
    }

    uint64_t v14 = IOUSBGetNextCapabilityDescriptor(v9, v14);
  }

  while (v14);
  if (bDevCapabilityType == 64)
  {
    uint64_t v19 = v64;
    sub_1000B6DB0(v64);
    if (v4) {
      return;
    }
    if (v5[144] == v20) {
      sub_1000B70D8(v19, 64);
    }
    sub_1000B6DB0(v19);
    if (v21 != 64)
    {
      unint64_t v29 = sub_10000AE14();
      uint64_t v26 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
      *(_BYTE *)uint64_t v27 = 26;
      *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v27 + 16) = 0xE000000000000000LL;
      *(void *)(v27 + 24) = 0xD00000000000001CLL;
      *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFC20LL;
      *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
      *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
      uint64_t v28 = 178LL;
      goto LABEL_27;
    }

    sub_1000323A0(v15, a2, v19);
    unint64_t v24 = v23;
    if (v23 >> 60 == 15)
    {
      unint64_t v25 = sub_10000AE14();
      uint64_t v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
      *(_BYTE *)uint64_t v27 = 26;
      *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v27 + 16) = 0xE000000000000000LL;
      *(void *)(v27 + 24) = 0xD00000000000001CLL;
      *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFC20LL;
      *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
      *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
      uint64_t v28 = 184LL;
LABEL_27:
      *(void *)(v27 + 56) = v28;
      swift_willThrow(v26);
      return;
    }

    uint64_t v30 = v22;
    sub_10004AFA8(v22, v23);
    uint64_t v31 = sub_100008E00(&qword_1001150E0);
    type metadata accessor for IOUSBConfigurationDescriptor(0LL);
    Data.withUnsafeBytes<A, B>(_:)(v60, sub_10005F4B4, 0LL, v30, v24, v31, v32);
    sub_10004B030(v30, v24);
    uint64_t v33 = sub_10008FC80(*(const IOUSBConfigurationDescriptor **)&v60[0]);
    char v34 = sub_100090450((uint64_t)v33);
    unint64_t v35 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0((uint64_t)v33);
    swift_bridgeObjectRelease(v33);
    if (v35[2])
    {
      swift_bridgeObjectRetain(v34);
      uint64_t v37 = sub_1000626EC((uint64_t)v35, v34);
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease_n(v34, 2LL);
      if (v37[2] != 1LL)
      {
        swift_bridgeObjectRelease(v37);
        unint64_t v45 = sub_10000AE14();
        uint64_t v46 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
        *(_BYTE *)uint64_t v47 = 35;
        *(void *)(v47 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v47 + 16) = 0xE000000000000000LL;
        *(void *)(v47 + 24) = 0xD00000000000001CLL;
        *(void *)(v47 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFC20LL;
        *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
        *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
        *(void *)(v47 + 56) = 195LL;
        swift_willThrow(v46);
        sub_10004B030(v30, v24);
        return;
      }

      __int128 v38 = *((_OWORD *)v37 + 10);
      __int128 v56 = *((_OWORD *)v37 + 9);
      __int128 v57 = v38;
      __int128 v58 = *((_OWORD *)v37 + 11);
      uint64_t v59 = v37[24];
      __int128 v39 = *((_OWORD *)v37 + 6);
      __int128 v52 = *((_OWORD *)v37 + 5);
      __int128 v53 = v39;
      __int128 v40 = *((_OWORD *)v37 + 8);
      __int128 v54 = *((_OWORD *)v37 + 7);
      __int128 v55 = v40;
      __int128 v41 = *((_OWORD *)v37 + 3);
      __int128 v49 = *((_OWORD *)v37 + 2);
      __int128 v50 = v41;
      __int128 v51 = *((_OWORD *)v37 + 4);
      sub_100062610(&v49);
      swift_bridgeObjectRelease(v37);
      v60[8] = v57;
      v60[9] = v58;
      uint64_t v61 = v59;
      v60[4] = v53;
      v60[5] = v54;
      v60[6] = v55;
      v60[7] = v56;
      v60[0] = v49;
      v60[1] = v50;
      void v60[2] = v51;
      _OWORD v60[3] = v52;
      ClusterChannelInfo.chNum.getter(v60);
      __int16 v42 = (uint64_t *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig);
      uint64_t v43 = *(void *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig);
      unint64_t v44 = *(void *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig + 8);
      *__int16 v42 = v30;
      v42[1] = v24;
      sub_10004B030(v43, v44);
      int v36 = v60;
    }

    else
    {
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v35);
      sub_10004B030(v30, v24);
      int v36 = v63;
    }

    sub_10004AFEC((uint64_t)v36, (uint64_t)v62, &qword_1001150D8);
    a3 = v48;
  }

  else
  {
LABEL_23:
    sub_10004AFEC((uint64_t)v63, (uint64_t)v62, &qword_1001150D8);
  }

  sub_10004AFEC((uint64_t)v62, a3, &qword_1001150D8);
}

uint64_t sub_10005F4B4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10005F4BC(char *a1, char a2)
{
  __int128 v6 = v2[5];
  __int128 v97 = v2[4];
  __int128 v98 = v6;
  __int128 v99 = v2[6];
  uint64_t v100 = *((void *)v2 + 14);
  __int128 v7 = v2[1];
  __int128 v93 = *v2;
  __int128 v94 = v7;
  __int128 v8 = v2[3];
  __int128 v95 = v2[2];
  __int128 v96 = v8;
  sub_10005EF6C((uint64_t)&v93, (uint64_t)a1, (uint64_t)v91);
  if (!v3)
  {
    char v76 = a2;
    uint64_t v128 = 0LL;
    sub_10004AFEC((uint64_t)v91, (uint64_t)v90, &qword_1001150D8);
    sub_10004AFEC((uint64_t)v91, (uint64_t)v92, &qword_1001150D8);
    if (sub_1000625F8((uint64_t)v92) == 1)
    {
      uint64_t v75 = *((void *)v2 + 20);
      char v74 = *((_BYTE *)v2 + 152);
      uint64_t v77 = *((void *)v2 + 18);
      __int128 v79 = *(__int128 *)((char *)v2 + 120);
      uint64_t v72 = *((void *)&v95 + 1);
      uint64_t v73 = *((void *)v2 + 17);
      uint64_t v70 = *((void *)&v96 + 1);
      uint64_t v71 = v96;
      uint64_t v68 = *((void *)&v97 + 1);
      uint64_t v69 = v97;
      __int128 v67 = v98;
      uint64_t v65 = *((void *)&v99 + 1);
      uint64_t v66 = v99;
      uint64_t v9 = v100;
      uint64_t v10 = v95;
      uint64_t v11 = *((void *)&v94 + 1);
      char v12 = BYTE1(v94);
      char v13 = v94;
      uint64_t v14 = *((void *)&v93 + 1);
      uint64_t v15 = v93;
      sub_100062610(v2);
      uint64_t v17 = v65;
      uint64_t v16 = v66;
      uint64_t v18 = v15;
      uint64_t v20 = *((void *)&v67 + 1);
      uint64_t v19 = v67;
      uint64_t v22 = v68;
      uint64_t v21 = v69;
      uint64_t v24 = v70;
      uint64_t v23 = v71;
      uint64_t v26 = v72;
      uint64_t v25 = v73;
      char v27 = v74;
      uint64_t v28 = v77;
    }

    else
    {
      sub_10004AFEC((uint64_t)v90, (uint64_t)&v80, &qword_1001150D8);
      uint64_t v75 = v89;
      char v27 = BYTE8(v88);
      uint64_t v28 = v88;
      uint64_t v25 = *(void *)&v87[24];
      __int128 v79 = *(_OWORD *)&v87[8];
      uint64_t v14 = *((void *)&v80 + 1);
      uint64_t v18 = v80;
      char v13 = v81;
      char v12 = BYTE1(v81);
      uint64_t v11 = *((void *)&v81 + 1);
      uint64_t v26 = *((void *)&v82 + 1);
      uint64_t v10 = v82;
      uint64_t v24 = *((void *)&v83 + 1);
      uint64_t v23 = v83;
      uint64_t v22 = *((void *)&v84 + 1);
      uint64_t v21 = v84;
      uint64_t v20 = *((void *)&v85 + 1);
      uint64_t v19 = v85;
      uint64_t v17 = *((void *)&v86 + 1);
      uint64_t v16 = v86;
      uint64_t v9 = *(void *)v87;
    }

    unsigned __int8 v78 = v28;
    uint64_t v112 = v18;
    uint64_t v113 = v14;
    char v114 = v13;
    char v115 = v12;
    uint64_t v116 = v11;
    uint64_t v117 = v10;
    uint64_t v118 = v26;
    uint64_t v119 = v23;
    uint64_t v120 = v24;
    uint64_t v121 = v21;
    uint64_t v122 = v22;
    uint64_t v123 = v19;
    uint64_t v124 = v20;
    uint64_t v125 = v16;
    uint64_t v126 = v17;
    uint64_t v127 = v9;
    *(void *)&__int128 v80 = v18;
    *((void *)&v80 + 1) = v14;
    LOBYTE(v81) = v13;
    BYTE1(v81) = v12;
    *((void *)&v81 + 1) = v11;
    *(void *)&__int128 v82 = v10;
    *((void *)&v82 + 1) = v26;
    *(void *)&__int128 v83 = v23;
    *((void *)&v83 + 1) = v24;
    *(void *)&__int128 v84 = v21;
    *((void *)&v84 + 1) = v22;
    *(void *)&__int128 v85 = v19;
    *((void *)&v85 + 1) = v20;
    *(void *)&__int128 v86 = v16;
    *((void *)&v86 + 1) = v17;
    *(void *)__int16 v87 = v9;
    *(_OWORD *)&v87[8] = v79;
    *(void *)&char v87[24] = v25;
    *(void *)&__int128 v88 = v28;
    BYTE8(v8_Block_object_dispose((const void *)(v30 - 136), 8) = v27;
    uint64_t v89 = v75;
    __int128 v101 = v80;
    __int128 v102 = v81;
    __int128 v105 = v84;
    __int128 v106 = v85;
    __int128 v103 = v82;
    __int128 v104 = v83;
    uint64_t v111 = v75;
    __int128 v110 = v88;
    __int128 v109 = *(_OWORD *)&v87[16];
    __int128 v107 = v86;
    __int128 v108 = *(_OWORD *)v87;
    uint64_t v3 = v128;
    sub_10004A844(a1, v76 & 1);
    if (v3)
    {
      sub_100019D7C(&v80);
    }

    else
    {
      uint64_t v30 = v29;
      uint64_t v31 = a1;
      swift_retain(v30);
      sub_100062610(&v80);
      swift_bridgeObjectRetain(v79);
      char v34 = sub_100062868(v32, v31, v30, (uint64_t)&v101, v76 & 1);
      sub_100019D7C(&v80);
      swift_bridgeObjectRelease(v79);

      swift_release(v30);
      swift_retain(v30);
      swift_bridgeObjectRetain(v75);
      int v36 = sub_100062AB0(v35, v30);
      swift_bridgeObjectRelease(v75);
      swift_release(v30);
      switch((v78 >> 4) | (16 * v78))
      {
        case 0:
          uint64_t v37 = type metadata accessor for ADC1Function();
          uint64_t v3 = swift_allocObject(v37, 241LL, 7LL);
          uint64_t v38 = swift_unknownObjectWeakInit(v3 + 184, 0LL);
          *(void *)(v3 + 216) = 0LL;
          *(void *)(v3 + 224) = 0LL;
          *(void *)(v3 + 23swift_unknownObjectWeakDestroy(v0 + 2) = 1LL;
          *(_BYTE *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
          __int128 v39 = v110;
          *(_OWORD *)(v3 + 144) = v109;
          *(_OWORD *)(v3 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v39;
          *(void *)(v3 + 176) = v111;
          __int128 v40 = v106;
          *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v105;
          *(_OWORD *)(v3 + 96) = v40;
          __int128 v41 = v108;
          *(_OWORD *)(v3 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v107;
          *(_OWORD *)(v3 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v41;
          __int128 v42 = v102;
          *(_OWORD *)(v3 + 16) = v101;
          *(_OWORD *)(v3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v42;
          __int128 v43 = v104;
          *(_OWORD *)(v3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v103;
          *(_OWORD *)(v3 + 64) = v43;
          swift_unknownObjectWeakAssign(v38, v31);
          *(void *)(v3 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v30;
          *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
          *(void *)(v3 + 20_Block_object_dispose((const void *)(v30 - 136), 8) = v36;
          break;
        case 2:
          uint64_t v44 = type metadata accessor for ADC2Function();
          uint64_t v3 = swift_allocObject(v44, 241LL, 7LL);
          uint64_t v45 = swift_unknownObjectWeakInit(v3 + 184, 0LL);
          *(void *)(v3 + 216) = 0LL;
          *(void *)(v3 + 224) = 0LL;
          *(void *)(v3 + 23swift_unknownObjectWeakDestroy(v0 + 2) = 1LL;
          *(_BYTE *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
          __int128 v46 = v110;
          *(_OWORD *)(v3 + 144) = v109;
          *(_OWORD *)(v3 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v46;
          *(void *)(v3 + 176) = v111;
          __int128 v47 = v106;
          *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v105;
          *(_OWORD *)(v3 + 96) = v47;
          __int128 v48 = v108;
          *(_OWORD *)(v3 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v107;
          *(_OWORD *)(v3 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v48;
          __int128 v49 = v102;
          *(_OWORD *)(v3 + 16) = v101;
          *(_OWORD *)(v3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v49;
          __int128 v50 = v104;
          *(_OWORD *)(v3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v103;
          *(_OWORD *)(v3 + 64) = v50;
          swift_unknownObjectWeakAssign(v45, v31);
          *(void *)(v3 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v30;
          *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
          *(void *)(v3 + 20_Block_object_dispose((const void *)(v30 - 136), 8) = v36;
          break;
        case 3:
          uint64_t v51 = type metadata accessor for ADC3Function();
          uint64_t v3 = swift_allocObject(v51, 241LL, 7LL);
          uint64_t v52 = swift_unknownObjectWeakInit(v3 + 184, 0LL);
          *(void *)(v3 + 216) = 0LL;
          *(void *)(v3 + 224) = 0LL;
          *(void *)(v3 + 23swift_unknownObjectWeakDestroy(v0 + 2) = 1LL;
          *(_BYTE *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
          __int128 v53 = v110;
          *(_OWORD *)(v3 + 144) = v109;
          *(_OWORD *)(v3 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v53;
          *(void *)(v3 + 176) = v111;
          __int128 v54 = v106;
          *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v105;
          *(_OWORD *)(v3 + 96) = v54;
          __int128 v55 = v108;
          *(_OWORD *)(v3 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v107;
          *(_OWORD *)(v3 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v55;
          __int128 v56 = v102;
          *(_OWORD *)(v3 + 16) = v101;
          *(_OWORD *)(v3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v56;
          __int128 v57 = v104;
          *(_OWORD *)(v3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v103;
          *(_OWORD *)(v3 + 64) = v57;
          swift_unknownObjectWeakAssign(v52, v31);
          *(void *)(v3 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v30;
          *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
          *(void *)(v3 + 20_Block_object_dispose((const void *)(v30 - 136), 8) = v36;
          break;
        case 4:
          uint64_t v58 = type metadata accessor for ADC4Function();
          uint64_t v3 = swift_allocObject(v58, 241LL, 7LL);
          uint64_t v59 = swift_unknownObjectWeakInit(v3 + 184, 0LL);
          *(void *)(v3 + 216) = 0LL;
          *(void *)(v3 + 224) = 0LL;
          *(void *)(v3 + 23swift_unknownObjectWeakDestroy(v0 + 2) = 1LL;
          *(_BYTE *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
          __int128 v60 = v110;
          *(_OWORD *)(v3 + 144) = v109;
          *(_OWORD *)(v3 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v60;
          *(void *)(v3 + 176) = v111;
          __int128 v61 = v106;
          *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v105;
          *(_OWORD *)(v3 + 96) = v61;
          __int128 v62 = v108;
          *(_OWORD *)(v3 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v107;
          *(_OWORD *)(v3 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v62;
          __int128 v63 = v102;
          *(_OWORD *)(v3 + 16) = v101;
          *(_OWORD *)(v3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v63;
          __int128 v64 = v104;
          *(_OWORD *)(v3 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v103;
          *(_OWORD *)(v3 + 64) = v64;
          swift_unknownObjectWeakAssign(v59, v31);
          *(void *)(v3 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v30;
          *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
          *(void *)(v3 + 20_Block_object_dispose((const void *)(v30 - 136), 8) = v36;
          break;
        default:
          swift_bridgeObjectRelease(v36);
          swift_bridgeObjectRelease(v34);
          swift_release(v30);
          sub_100019D7C(&v80);
          uint64_t v3 = 0LL;
          break;
      }
    }
  }

  return v3;
}

uint64_t sub_10005FAC8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[25];
  uint64_t v7 = *(void *)(a2 + 168);
  uint64_t v8 = *(void *)(v7 + 16);
  __int128 v49 = a3;
  uint64_t v39 = v6;
  if (v8)
  {
    uint64_t v9 = a1[17];
    uint64_t v10 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_100017910(v10, (uint64_t)&v43);
      uint64_t v12 = v44;
      uint64_t v11 = v45;
      sub_1000178EC(&v43, v44);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 8))(v40, v12, v11);
      uint64_t v13 = v41;
      uint64_t v14 = v42;
      sub_1000178EC(v40, v41);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
      sub_100017A40(v40);
      if (v15 == v9) {
        break;
      }
      sub_100017A40(&v43);
      v10 += 40LL;
      if (!--v8) {
        goto LABEL_7;
      }
    }

    sub_10000AF84(&v43, (uint64_t)&v46);
  }

  else
  {
    swift_bridgeObjectRetain(v7);
LABEL_7:
    uint64_t v48 = 0LL;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
  }

  swift_bridgeObjectRelease(v7);
  if (!*((void *)&v47 + 1))
  {
    sub_1000178B0((uint64_t)&v46, &qword_100113E98);
    goto LABEL_17;
  }

  uint64_t v16 = sub_100008E00(&qword_100113B28);
  uint64_t active = type metadata accessor for ActiveInputTerminal();
  if ((swift_dynamicCast(&v43, &v46, v16, active, 6LL) & 1) == 0)
  {
LABEL_17:
    unint64_t v25 = sub_10000AE14();
    uint64_t v26 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
    *(_BYTE *)uint64_t v27 = 45;
    *(void *)(v27 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v27 + 16) = 0xE000000000000000LL;
    *(void *)(v27 + 24) = 0xD000000000000029LL;
    *(void *)(v27 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFBD0LL;
    *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
    *(void *)(v27 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
    *(void *)(v27 + 56) = 221LL;
    uint64_t result = swift_willThrow(v26);
LABEL_28:
    *__int128 v49 = v26;
    return result;
  }

  uint64_t v18 = *(void *)(v7 + 16);
  uint64_t v36 = v43;
  if (v18)
  {
    uint64_t v19 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_100017910(v19, (uint64_t)&v43);
      uint64_t v20 = v44;
      uint64_t v21 = v45;
      sub_1000178EC(&v43, v44);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 8))(v40, v20, v21);
      uint64_t v22 = v41;
      uint64_t v23 = v42;
      sub_1000178EC(v40, v41);
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
      sub_100017A40(v40);
      if (v24 == v5) {
        break;
      }
      sub_100017A40(&v43);
      v19 += 40LL;
      if (!--v18) {
        goto LABEL_19;
      }
    }

    sub_10000AF84(&v43, (uint64_t)&v46);
  }

  else
  {
    swift_bridgeObjectRetain(v7);
LABEL_19:
    uint64_t v48 = 0LL;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
  }

  swift_bridgeObjectRelease(v7);
  if (!*((void *)&v47 + 1))
  {
    sub_1000178B0((uint64_t)&v46, &qword_100113E98);
    goto LABEL_26;
  }

  uint64_t v29 = type metadata accessor for ActiveOutputTerminal();
  if ((swift_dynamicCast(&v43, &v46, v16, v29, 6LL) & 1) == 0)
  {
LABEL_26:
    unint64_t v34 = sub_10000AE14();
    uint64_t v26 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
    *(_BYTE *)uint64_t v35 = 45;
    *(void *)(v35 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v35 + 16) = 0xE000000000000000LL;
    *(void *)(v35 + 24) = 0xD000000000000029LL;
    *(void *)(v35 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFBD0LL;
    *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
    *(void *)(v35 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
    *(void *)(v35 + 56) = 224LL;
    swift_willThrow(v26);
    uint64_t v33 = v36;
    goto LABEL_27;
  }

  uint64_t v30 = v43;
  swift_retain(a2);
  swift_bridgeObjectRetain(v39);
  uint64_t v32 = sub_1000629AC(v31, a2);
  uint64_t v26 = v38;
  swift_bridgeObjectRelease(v39);
  if (v38)
  {
    swift_release(v30);
    swift_release(v36);
    uint64_t v33 = a2;
LABEL_27:
    uint64_t result = swift_release(v33);
    goto LABEL_28;
  }

  uint64_t result = swift_release(a2);
  *a4 = v30;
  a4[1] = v36;
  a4[2] = v32;
  return result;
}

uint64_t sub_10005FEA4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  sub_1000178EC(a1, v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 16LL))(v7);
  uint64_t v9 = *(void *)(a2 + 168);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9 + 32;
    swift_bridgeObjectRetain(v9);
    while (1)
    {
      sub_100017910(v12, (uint64_t)&v27);
      uint64_t v13 = v28;
      uint64_t v14 = v29;
      sub_1000178EC(&v27, v28);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v24, v13, v14);
      uint64_t v15 = v25;
      uint64_t v16 = v26;
      sub_1000178EC(v24, v25);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
      sub_100017A40(v24);
      if (v17 == v11) {
        break;
      }
      sub_100017A40(&v27);
      v12 += 40LL;
      if (!--v10) {
        goto LABEL_7;
      }
    }

    sub_10000AF84(&v27, (uint64_t)&v30);
  }

  else
  {
    swift_bridgeObjectRetain(v9);
LABEL_7:
    uint64_t v32 = 0LL;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
  }

  swift_bridgeObjectRelease(v9);
  if (*((void *)&v31 + 1))
  {
    uint64_t v18 = sub_100008E00(&qword_100113B28);
    uint64_t v19 = sub_100008E00(&qword_100113B30);
    if ((swift_dynamicCast(&v33, &v30, v18, v19, 6LL) & 1) != 0)
    {
      if (*((void *)&v34 + 1)) {
        return sub_10000AF84(&v33, v36);
      }
    }

    else
    {
      uint64_t v35 = 0LL;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&v30, &qword_100113E98);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    uint64_t v35 = 0LL;
  }

  sub_1000178B0((uint64_t)&v33, &qword_100113B38);
  unint64_t v21 = sub_10000AE14();
  uint64_t v22 = swift_allocError(&type metadata for AUAError, v21, 0LL, 0LL);
  *(_BYTE *)uint64_t v23 = 45;
  *(void *)(v23 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v23 + 16) = 0xE000000000000000LL;
  *(void *)(v23 + 24) = 0xD000000000000029LL;
  *(void *)(v23 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000CFBD0LL;
  *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
  *(void *)(v23 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
  *(void *)(v23 + 56) = 229LL;
  uint64_t result = swift_willThrow(v22);
  *a3 = v22;
  return result;
}

uint64_t sub_1000600F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&__int128 v257 = a1;
  *((void *)&v257 + 1) = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_157;
  }
  unsigned int v7 = (*(_BYTE *)(a1 + 41) - 2);
  if (v7 >= 4)
  {
    swift_bridgeObjectRelease(a3);
    unint64_t v10 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v10, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 23;
    *(void *)(v12 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v12 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0x5F3A5F2874696E69LL;
    *(void *)(v12 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA0000000000293ALL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
    *(void *)(v12 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
    *(void *)(v12 + 56) = 61LL;
    swift_willThrow(v11);
LABEL_7:
    swift_bridgeObjectRelease(v257);
    return swift_bridgeObjectRelease(*((void *)&v257 + 1));
  }

  char v188 = *(_BYTE *)(a1 + 41) - 2;
  LOBYTE(v25_Block_object_dispose((const void *)(v30 - 136), 8) = 0x40302000u >> (8 * v7);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  sub_1000499E0(a1, (uint64_t)v260);
  if (v4)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    uint64_t v9 = a3;
LABEL_5:
    swift_bridgeObjectRelease(v9);
    goto LABEL_7;
  }

  uint64_t v184 = a4;
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v190 = *(void *)&v260[0];
  if (v14)
  {
    uint64_t v217 = a1;
    int v221 = *(unsigned __int8 *)(*(void *)&v260[0] + 7LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v213 = a2;
    uint64_t v15 = (uint64_t *)(a2 + 48);
    uint64_t v229 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v17 = *v15;
      uint64_t v18 = *(v15 - 2);
      __int16 v19 = *((_WORD *)v15 - 4);
      swift_bridgeObjectRetain(*v15);
      sub_100056FBC(v18, v19, v17, v221, v262);
      uint64_t v20 = v262[0];
      unint64_t v21 = v262[1];
      char v22 = v263;
      uint64_t v23 = v264;
      uint64_t v24 = v265;
      swift_bridgeObjectRelease(v17);
      sub_10004AFEC((uint64_t)v262, (uint64_t)v279, &qword_1001150E8);
      if (v280)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v229) & 1) != 0) {
          uint64_t v25 = v229;
        }
        else {
          uint64_t v25 = sub_10004FF98(0LL, v229[2] + 1LL, 1, v229);
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1) {
          uint64_t v25 = sub_10004FF98((void *)(v26 > 1), v27 + 1, 1, v25);
        }
        v25[2] = v27 + 1;
        uint64_t v229 = v25;
        uint64_t v16 = &v25[5 * v27];
        v16[4] = v20;
        v16[5] = v21;
        *((_BYTE *)v16 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v22 & 1;
        v16[7] = v23;
        v16[8] = v24;
      }

      v15 += 3;
      --v14;
    }

    while (v14);
    swift_bridgeObjectRelease(v217);
    swift_bridgeObjectRelease_n(v213, 2LL);
    uint64_t v28 = v229;
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    uint64_t v28 = _swiftEmptyArrayStorage;
  }

  uint64_t v194 = v28[2];
  if (!v194) {
    goto LABEL_96;
  }
  unint64_t v218 = v28 + 4;
  uint64_t v29 = v28 + 5;
  __int128 v30 = v28 + 7;
  __int128 v31 = v28 + 8;
  __int128 v230 = v28;
  swift_bridgeObjectRetain_n(v28, 2LL);
  uint64_t v32 = v230;
  BOOL v33 = 0;
  uint64_t v34 = 1LL;
  while (1)
  {
    uint64_t v37 = (void *)*v29;
    if (!*(void *)(*v29 + 16LL)) {
      goto LABEL_154;
    }
    uint64_t v38 = v37[11];
    uint64_t v39 = *(void *)(v38 + 16);
    if (!v39) {
      goto LABEL_45;
    }
    BOOL v209 = v33;
    uint64_t v214 = v34;
    uint64_t v40 = *v30;
    uint64_t v41 = *v31;
    uint64_t v42 = v37[12];
    uint64_t v202 = v37[13];
    swift_bridgeObjectRetain(v202);
    swift_bridgeObjectRetain_n(v38, 2LL);
    uint64_t v199 = v40;
    swift_bridgeObjectRetain(v40);
    uint64_t v196 = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v37);
    uint64_t v205 = v42;
    swift_bridgeObjectRetain(v42);
    uint64_t v222 = v38;
    __int128 v43 = (void *)(v38 + 104);
    uint64_t v44 = v43;
    uint64_t v45 = v39;
    while (1)
    {
      __int128 v46 = (const IOUSBEndpointDescriptor *)*(v44 - 9);
      uint64_t v48 = *(v44 - 1);
      uint64_t v47 = *v44;
      uint64_t v49 = *(v44 - 2);
      swift_bridgeObjectRetain(*v44);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v48);
      v44 += 10;
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v49);
      if (!--v45)
      {
        swift_bridgeObjectRelease(v196);
        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v202);
        swift_bridgeObjectRelease(v205);
        uint64_t v50 = v222;
        uint64_t v51 = v222;
        goto LABEL_44;
      }
    }

    uint64_t v50 = v222;
    swift_bridgeObjectRelease(v222);
    int v52 = IOUSBGetEndpointDirection(v46);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v49);
    if (v52 == 1) {
      break;
    }
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v199);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v202);
    uint64_t v51 = v205;
LABEL_44:
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v50);
    uint64_t v32 = v230;
    uint64_t v34 = v214;
    BOOL v33 = v209;
LABEL_45:
    if (v33)
    {
      if (v34 == v194) {
        goto LABEL_55;
      }
      goto LABEL_23;
    }

    if (v34 == v194)
    {
      swift_bridgeObjectRelease(v32);
      __int128 v62 = v230;
      uint64_t v197 = v230;
LABEL_95:
      swift_bridgeObjectRelease(v62);
      uint64_t v28 = v197;
      goto LABEL_96;
    }

    BOOL v33 = 0;
LABEL_24:
    uint64_t v35 = &v218[5 * v34];
    uint64_t v29 = v35 + 1;
    __int128 v30 = v35 + 3;
    __int128 v31 = v35 + 4;
    BOOL v36 = __OFADD__(v34++, 1LL);
    if (v36) {
      goto LABEL_155;
    }
  }

  swift_bridgeObjectRetain(v222);
  BOOL v33 = 0;
  uint64_t v53 = 1LL;
  do
  {
    if (v33)
    {
      if (v39 == v53)
      {
        swift_bridgeObjectRelease(v196);
        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v202);
        swift_bridgeObjectRelease(v205);
        swift_bridgeObjectRelease_n(v222, 2LL);
        goto LABEL_50;
      }

      BOOL v33 = 1;
    }

    else
    {
      __int128 v54 = (const IOUSBEndpointDescriptor *)*(v43 - 9);
      uint64_t v55 = *(v43 - 2);
      uint64_t v56 = *(v43 - 1);
      uint64_t v57 = *v43;
      swift_bridgeObjectRetain(*v43);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v56);
      int v58 = IOUSBGetEndpointUsageType(v54);
      if (v58)
      {
        int v59 = v58;
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v55);
      }

      else
      {
        unsigned int wMaxPacketSize = v54->wMaxPacketSize;
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v55);
        int v59 = wMaxPacketSize < 9;
      }

      BOOL v33 = v59 == 2;
      if (v39 == v53)
      {
        swift_bridgeObjectRelease(v196);
        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v202);
        swift_bridgeObjectRelease(v205);
        swift_bridgeObjectRelease_n(v222, 2LL);
        if (v209)
        {
LABEL_50:
          uint64_t v34 = v214;
          uint64_t v32 = v230;
          if (v214 == v194)
          {
LABEL_55:
            __int128 v61 = v32;
            swift_bridgeObjectRelease_n(v32, 2LL);
LABEL_56:
            uint64_t v28 = v61;
            uint64_t v203 = v61[2];
            if (!v203) {
              goto LABEL_96;
            }
            swift_bridgeObjectRetain(v61);
            __int128 v62 = v230;
            unint64_t v63 = 0LL;
            uint64_t v197 = v230;
            while (2)
            {
              if (v63 >= v62[2]) {
                goto LABEL_158;
              }
              uint64_t v65 = &v218[5 * v63];
              uint64_t v66 = (void *)v65[1];
              if (!v66[2]) {
                goto LABEL_159;
              }
              uint64_t v68 = v65[3];
              uint64_t v67 = v65[4];
              uint64_t v69 = v66[11];
              uint64_t v70 = *(void *)(v69 + 16);
              uint64_t v223 = v67;
              uint64_t v215 = v68;
              if (v70)
              {
                uint64_t v71 = v66[12];
                uint64_t v206 = v66[13];
                swift_bridgeObjectRetain(v206);
                swift_bridgeObjectRetain_n(v69, 2LL);
                swift_bridgeObjectRetain(v66);
                swift_bridgeObjectRetain(v68);
                swift_bridgeObjectRetain(v67);
                uint64_t v210 = v71;
                swift_bridgeObjectRetain(v71);
                uint64_t v72 = (void *)(v69 + 104);
                while (1)
                {
                  uint64_t v73 = (const IOUSBEndpointDescriptor *)*(v72 - 9);
                  uint64_t v74 = *(v72 - 1);
                  uint64_t v75 = *v72;
                  uint64_t v76 = *(v72 - 2);
                  swift_bridgeObjectRetain(*v72);
                  swift_bridgeObjectRetain(v76);
                  swift_bridgeObjectRetain(v74);
                  v72 += 10;
                  swift_bridgeObjectRelease(v75);
                  swift_bridgeObjectRelease(v74);
                  swift_bridgeObjectRelease(v76);
                  if (!--v70)
                  {
                    swift_bridgeObjectRelease(v206);
                    swift_bridgeObjectRelease(v210);
                    swift_bridgeObjectRelease_n(v69, 2LL);
                    BOOL v77 = 1;
                    goto LABEL_73;
                  }
                }

                swift_bridgeObjectRelease(v69);
                int v78 = IOUSBGetEndpointDirection(v73);
                swift_bridgeObjectRelease(v206);
                swift_bridgeObjectRelease(v210);
                swift_bridgeObjectRelease(v69);
                swift_bridgeObjectRelease(v75);
                swift_bridgeObjectRelease(v74);
                swift_bridgeObjectRelease(v76);
                BOOL v77 = v78 == 0;
LABEL_73:
                uint64_t v67 = v223;
                uint64_t v68 = v215;
              }

              else
              {
                swift_bridgeObjectRetain(v67);
                swift_bridgeObjectRetain(v66);
                swift_bridgeObjectRetain(v68);
                BOOL v77 = 1;
              }

              __int128 v64 = (void *)v66[11];
              uint64_t v79 = v64[2];
              if (v79)
              {
                BOOL v200 = v77;
                uint64_t v80 = v66[12];
                uint64_t v207 = v66[13];
                swift_bridgeObjectRetain(v207);
                swift_bridgeObjectRetain_n(v64, 2LL);
                uint64_t v211 = v80;
                swift_bridgeObjectRetain(v80);
                __int128 v81 = v64 + 13;
                while (1)
                {
                  __int128 v82 = (const IOUSBEndpointDescriptor *)*(v81 - 9);
                  uint64_t v83 = *(v81 - 1);
                  uint64_t v84 = *v81;
                  uint64_t v85 = *(v81 - 2);
                  swift_bridgeObjectRetain(*v81);
                  swift_bridgeObjectRetain(v85);
                  swift_bridgeObjectRetain(v83);
                  v81 += 10;
                  swift_bridgeObjectRelease(v84);
                  swift_bridgeObjectRelease(v83);
                  swift_bridgeObjectRelease(v85);
                  if (!--v79)
                  {
                    swift_bridgeObjectRelease(v66);
                    swift_bridgeObjectRelease(v207);
                    swift_bridgeObjectRelease(v211);
                    swift_bridgeObjectRelease(v64);
                    uint64_t v67 = v223;
                    uint64_t v68 = v215;
                    goto LABEL_59;
                  }
                }

                swift_bridgeObjectRelease(v64);
                int v86 = IOUSBGetEndpointSynchronizationType(v82);
                if (v86)
                {
                  int v87 = v86;
                  swift_bridgeObjectRelease(v66);
                  swift_bridgeObjectRelease(v207);
                  swift_bridgeObjectRelease(v211);
                  swift_bridgeObjectRelease(v64);
                  swift_bridgeObjectRelease(v84);
                  swift_bridgeObjectRelease(v83);
                  swift_bridgeObjectRelease(v85);
                  swift_bridgeObjectRelease(v215);
                }

                else
                {
                  int v88 = IOUSBGetEndpointDirection(v82);
                  swift_bridgeObjectRelease(v66);
                  swift_bridgeObjectRelease(v207);
                  swift_bridgeObjectRelease(v211);
                  swift_bridgeObjectRelease(v64);
                  swift_bridgeObjectRelease(v84);
                  swift_bridgeObjectRelease(v83);
                  swift_bridgeObjectRelease(v85);
                  swift_bridgeObjectRelease(v215);
                  if (v88 == 1) {
                    int v87 = 1;
                  }
                  else {
                    int v87 = 3;
                  }
                }

                swift_bridgeObjectRelease(v223);
                BOOL v89 = v200;
                if (v87 != 1) {
                  BOOL v89 = 0;
                }
                if (v89)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native(v197) & 1) != 0) {
                    __int16 v90 = v197;
                  }
                  else {
                    __int16 v90 = sub_10009D044(v197);
                  }
                  BOOL v91 = v63 >= v90[2];
                  __int16 v92 = v90;
                  __int128 v62 = v230;
                  if (v91) {
                    goto LABEL_160;
                  }
                  uint64_t v197 = v92;
                  LOBYTE(v92[5 * v63 + 6]) = 1;
                  goto LABEL_61;
                }
              }

              else
              {
                __int128 v64 = v66;
LABEL_59:
                swift_bridgeObjectRelease(v64);
                swift_bridgeObjectRelease(v68);
                swift_bridgeObjectRelease(v67);
              }

              __int128 v62 = v230;
LABEL_61:
              if (++v63 == v203) {
                goto LABEL_95;
              }
              continue;
            }
          }

LABEL_23:
          BOOL v33 = 1;
          goto LABEL_24;
        }

        uint64_t v34 = v214;
        uint64_t v32 = v230;
        if (v214 != v194) {
          goto LABEL_24;
        }
        __int128 v61 = v230;
        swift_bridgeObjectRelease_n(v230, 2LL);
        if (v59 == 2) {
          goto LABEL_56;
        }
        uint64_t v28 = v230;
LABEL_96:
        __int128 v231 = v28;
        __int128 v93 = a3;
        if ((v188 & 0xF) != 0)
        {
          uint64_t v94 = a3[2];
          if (v94)
          {
            sub_100030860(v260);
            __n128 v95 = swift_bridgeObjectRetain(a3);
            uint64_t v97 = v190;
            __int128 v96 = a3;
            uint64_t v98 = 0LL;
            __int128 v99 = _swiftEmptyArrayStorage;
            do
            {
              v95.n128_u64[0] = v96[v98 + 4];
              if (*(unsigned __int8 *)(v97 + 2) == v95.n128_u8[2] && v231[2] < (unint64_t)v95.n128_u8[3])
              {
                __n128 v224 = v95;
                if ((swift_isUniquelyReferenced_nonNull_native(v99) & 1) == 0) {
                  __int128 v99 = sub_10004FE8C(0LL, v99[2] + 1LL, 1, v99);
                }
                unint64_t v101 = v99[2];
                unint64_t v100 = v99[3];
                uint64_t v97 = v190;
                __int128 v96 = a3;
                __n128 v95 = v224;
                if (v101 >= v100 >> 1)
                {
                  __int128 v102 = sub_10004FE8C((void *)(v100 > 1), v101 + 1, 1, v99);
                  __n128 v95 = v224;
                  uint64_t v97 = v190;
                  __int128 v96 = a3;
                  __int128 v99 = v102;
                }

                __int128 v99[2] = v101 + 1;
                v99[v101 + 4] = v95.n128_u64[0];
              }

              ++v98;
            }

            while (v94 != v98);
            swift_bridgeObjectRelease(v96);
            sub_100030944(v260);
            __int128 v93 = a3;
          }

          else
          {
            __int128 v99 = _swiftEmptyArrayStorage;
          }

          swift_bridgeObjectRelease(v93);
          if (v99[2] != 1LL)
          {
            swift_bridgeObjectRelease(v99);
            sub_100030944(v260);
            unint64_t v148 = sub_10000AE14();
            uint64_t v149 = swift_allocError(&type metadata for AUAError, v148, 0LL, 0LL);
            *(_BYTE *)uint64_t v150 = 34;
            *(void *)(v150 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
            *(void *)(v150 + 16) = 0xE000000000000000LL;
            *(void *)(v150 + 24) = 0x5F3A5F2874696E69LL;
            *(void *)(v150 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA0000000000293ALL;
            *(void *)(v150 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
            *(void *)(v150 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
            *(void *)(v150 + 56) = 101LL;
            swift_willThrow(v149);
            uint64_t v9 = v231;
            goto LABEL_5;
          }

          uint64_t v225 = v99[4];
          swift_bridgeObjectRelease(v99);
          uint64_t v105 = v225;
        }

        else
        {
          __int128 v103 = v28;
          swift_bridgeObjectRelease(a3);
          unint64_t v104 = v103[2];
          if (v104 >= 0xFF) {
            goto LABEL_161;
          }
          LOWORD(v105) = 2824;
          BYTE2(v105) = *(_BYTE *)(v190 + 2);
          BYTE3(v105) = v104 + 1;
          HIDWORD(v105) = 1;
        }

        __int128 v253 = v260[4];
        __int128 v254 = v260[5];
        __int128 v255 = v260[6];
        __int128 v249 = v260[0];
        __int128 v250 = v260[1];
        __int128 v106 = _swiftEmptyArrayStorage;
        __int128 v251 = v260[2];
        __int128 v252 = v260[3];
        *(void *)&__int128 v256 = v261;
        *((void *)&v256 + 1) = v231;
        *(void *)((char *)&v258 + 1) = v105;
        uint64_t v248 = _swiftEmptyArrayStorage;
        uint64_t v247 = &_swiftEmptySetSingleton;
        uint64_t v290 = *((void *)&v260[0] + 1);
        uint64_t v226 = *(void *)(*((void *)&v260[0] + 1) + 16LL);
        if (v226)
        {
          uint64_t v216 = *((void *)&v260[0] + 1);
          uint64_t v219 = *((void *)&v260[0] + 1) + 32LL;
          sub_100030860(v260);
          uint64_t v107 = v216;
          swift_bridgeObjectRetain(v231);
          sub_10004AB54(&v290);
          unint64_t v108 = 0LL;
          while (v108 < *(void *)(v107 + 16))
          {
            sub_100017910(v219 + 40 * v108, (uint64_t)&v244);
            uint64_t v109 = sub_100008E00(&qword_100114948);
            if ((swift_dynamicCast(&v232, &v244, v109, &type metadata for OutputTerminal, 6LL) & 1) != 0)
            {
              __int128 v283 = v234;
              __int128 v284 = v235;
              __int128 v285 = v236;
              __int128 v286 = v237;
              __int128 v281 = v232;
              __int128 v282 = v233;
              uint64_t v187 = *((void *)&v232 + 1);
              uint64_t v189 = v232;
              char v186 = v233;
              uint64_t v185 = *((void *)&v233 + 1);
              int v110 = BYTE2(v234);
              int v111 = (unsigned __int16)v234;
              uint64_t v212 = *((void *)&v234 + 1);
              char v208 = v235;
              uint64_t v201 = v236;
              uint64_t v204 = *((void *)&v235 + 1);
              uint64_t v198 = *((void *)&v236 + 1);
              char v195 = v237;
              char v193 = BYTE1(v237);
              uint64_t v191 = *((void *)&v237 + 1);
              *((void *)&v233 + 1) = &type metadata for OutputTerminal;
              *(void *)&__int128 v234 = sub_100062C78();
              uint64_t v112 = (_OWORD *)swift_allocObject(&unk_1001052E8, 112LL, 7LL);
              *(void *)&__int128 v232 = v112;
              __int128 v113 = v284;
              v112[3] = v283;
              v112[4] = v113;
              __int128 v114 = v286;
              v112[5] = v285;
              v112[6] = v114;
              __int128 v115 = v282;
              v112[1] = v281;
              void v112[2] = v115;
              sub_10004AEB8((uint64_t)&v281);
              uint64_t v116 = sub_1000465B0((uint64_t)&v232, v106, (uint64_t)&v281);
              sub_100017A40(&v232);
              if (v116[2])
              {
                sub_100062CE8((uint64_t)&v281);
                if (!v116[2]) {
                  goto LABEL_150;
                }
              }

              else
              {
                sub_1000516F0(&v232, 93LL);
                sub_10004AFEC((uint64_t)&v283 + 8, (uint64_t)v287, &qword_100114070);
                sub_10004AFEC((uint64_t)v287, (uint64_t)&v288, &qword_100114070);
                if (v289 == 1)
                {
                  sub_100062CE8((uint64_t)&v281);
                  sub_100029840( 0xD000000000000020LL,  0x80000001000CFC70LL,  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD000000000000018LL,  0x80000001000CFC00LL,  146LL);
                  if (!v116[2]) {
                    goto LABEL_150;
                  }
                }

                else
                {
                  uint64_t v117 = v106;
                  int v183 = v111 | (v110 << 16);
                  uint64_t v118 = v288;
                  swift_bridgeObjectRetain(v107);
                  uint64_t v119 = v219;
                  uint64_t v120 = v226;
                  while (1)
                  {
                    sub_100017910(v119, (uint64_t)&v244);
                    uint64_t v121 = v245;
                    uint64_t v122 = v246;
                    sub_1000178EC(&v244, v245);
                    sub_100017A40(&v244);
                    v119 += 40LL;
                    if (!--v120)
                    {
                      *(void *)&__int128 v234 = 0LL;
                      __int128 v232 = 0u;
                      __int128 v233 = 0u;
                      goto LABEL_130;
                    }
                  }

                  sub_10000AF84(&v244, (uint64_t)&v232);
LABEL_130:
                  sub_100045FD8(&v290);
                  __int128 v106 = v117;
                  uint64_t v107 = v216;
                  if (*((void *)&v233 + 1))
                  {
                    sub_100062CE8((uint64_t)&v281);
                    sub_1000178B0((uint64_t)&v232, &qword_100114940);
                    sub_100029840( 0xD00000000000004ALL,  0x80000001000CFD50LL,  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD000000000000018LL,  0x80000001000CFC00LL,  145LL);
                    if (!v116[2]) {
                      goto LABEL_150;
                    }
                  }

                  else
                  {
                    sub_1000178B0((uint64_t)&v232, &qword_100114940);
                    *(void *)&__int128 v232 = 0LL;
                    *((void *)&v232 + 1) = 0xE000000000000000LL;
                    _StringGuts.grow(_:)(101LL);
                    v123._countAndFlagsBits = 0xD000000000000033LL;
                    v123._object = (void *)0x80000001000CFCA0LL;
                    String.append(_:)(v123);
                    uint64_t v124 = *((void *)&v284 + 1);
                    *(void *)&__int128 v244 = *((void *)&v284 + 1);
                    v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                    object = v125._object;
                    String.append(_:)(v125);
                    swift_bridgeObjectRelease(object);
                    v127._countAndFlagsBits = 0xD000000000000030LL;
                    v127._object = (void *)0x80000001000CFCE0LL;
                    String.append(_:)(v127);
                    uint64_t v128 = *((void *)&v232 + 1);
                    sub_100029840( v232,  *((uint64_t *)&v232 + 1),  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD000000000000018LL,  0x80000001000CFC00LL,  133LL);
                    swift_bridgeObjectRelease(v128);
                    sub_100048C48((void)v281 != 257LL, v266);
                    sub_10004AFEC((uint64_t)v266, (uint64_t)v267, &qword_1001150F8);
                    if (v275)
                    {
                      uint64_t v177 = v267[1];
                      uint64_t v178 = v267[0];
                      char v176 = v268;
                      __int16 v182 = v270;
                      uint64_t v129 = v272;
                      uint64_t v174 = v273;
                      uint64_t v175 = v269;
                      char v172 = v271;
                      __int16 v173 = v274;
                      __int128 v181 = v276;
                      uint64_t v179 = v278;
                      uint64_t v180 = v277;
                      *(void *)&__int128 v232 = 0LL;
                      *((void *)&v232 + 1) = 0xE000000000000000LL;
                      uint64_t v171 = v275;
                      _StringGuts.grow(_:)(25LL);
                      swift_bridgeObjectRelease(*((void *)&v232 + 1));
                      strcpy((char *)&v232, "Connecting OT ");
                      HIBYTE(v23swift_unknownObjectWeakDestroy(v0 + 2) = -18;
                      *(void *)&__int128 v244 = v124;
                      v130._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                      int v131 = v130._object;
                      String.append(_:)(v130);
                      swift_bridgeObjectRelease(v131);
                      v132._countAndFlagsBits = 0x205449206F7420LL;
                      v132._object = (void *)0xE700000000000000LL;
                      String.append(_:)(v132);
                      *(void *)&__int128 v244 = v129;
                      v133._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
                      uint64_t v134 = v133._object;
                      String.append(_:)(v133);
                      swift_bridgeObjectRelease(v134);
                      uint64_t v135 = *((void *)&v232 + 1);
                      sub_100029840( v232,  *((uint64_t *)&v232 + 1),  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD000000000000018LL,  0x80000001000CFC00LL,  140LL);
                      swift_bridgeObjectRelease(v135);
                      *(void *)&__int128 v232 = v189;
                      *((void *)&v232 + 1) = v187;
                      LOBYTE(v23swift_unknownObjectWeakDestroy(v0 + 3) = v186;
                      *((void *)&v233 + 1) = v185;
                      BYTE2(v234) = BYTE2(v183);
                      LOWORD(v234) = v183;
                      *((void *)&v234 + 1) = v212;
                      LOBYTE(v235) = v208;
                      *((void *)&v235 + 1) = v204;
                      *(void *)&__int128 v236 = v201;
                      *((void *)&v236 + 1) = v198;
                      LOBYTE(v237) = v195;
                      BYTE1(v237) = v193;
                      *((void *)&v237 + 1) = v191;
                      *(void *)&__int128 v238 = v178;
                      *((void *)&v238 + 1) = v177;
                      LOBYTE(v239) = v176;
                      *((void *)&v239 + 1) = v175;
                      BYTE2(v24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v172;
                      LOWORD(v24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v182;
                      *((void *)&v240 + 1) = v129;
                      *(void *)&__int128 v241 = v174;
                      WORD4(v241) = v173;
                      *(void *)uint64_t v242 = v171;
                      *(_OWORD *)&v242[8] = v181;
                      *(void *)&v242[24] = v180;
                      *(void *)&__int128 v243 = v179;
                      *((void *)&v243 + 1) = v106;
                      sub_100062D78( v266,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062D1C);
                      sub_10004B110(&v232);
                      if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0) {
                        uint64_t v116 = sub_10004F9F0(0LL, v116[2] + 1LL, 1, v116);
                      }
                      unint64_t v137 = v116[2];
                      unint64_t v136 = v116[3];
                      if (v137 >= v136 >> 1) {
                        uint64_t v116 = sub_10004F9F0((void *)(v136 > 1), v137 + 1, 1, v116);
                      }
                      v116[2] = v137 + 1;
                      char v138 = &v116[26 * v137];
                      v138[2] = v232;
                      __int128 v139 = v233;
                      __int128 v140 = v234;
                      __int128 v141 = v236;
                      v138[5] = v235;
                      v138[6] = v141;
                      v138[3] = v139;
                      v138[4] = v140;
                      __int128 v142 = v237;
                      __int128 v143 = v238;
                      __int128 v144 = v240;
                      v138[9] = v239;
                      v138[10] = v144;
                      v138[7] = v142;
                      v138[8] = v143;
                      __int128 v145 = v241;
                      __int128 v146 = *(_OWORD *)v242;
                      __int128 v147 = v243;
                      v138[13] = *(_OWORD *)&v242[16];
                      v138[14] = v147;
                      v138[11] = v145;
                      v138[12] = v146;
                      sub_10004B194(&v232);
                      sub_100062D78( v266,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100062DCC);
                    }

                    else
                    {
                      sub_100062CE8((uint64_t)&v281);
                      sub_100029840( 0xD00000000000002ELL,  0x80000001000CFD20LL,  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD000000000000018LL,  0x80000001000CFC00LL,  144LL);
                    }

                    uint64_t v107 = v216;
                    if (!v116[2])
                    {
LABEL_150:
                      sub_100030944(v260);
                      swift_bridgeObjectRelease(v116);
                      sub_100045FD8(&v290);
                      swift_bridgeObjectRelease(v247);
                      swift_bridgeObjectRelease(v248);
                      unint64_t v156 = sub_10000AE14();
                      uint64_t v228 = swift_allocError(&type metadata for AUAError, v156, 0LL, 0LL);
                      *(_BYTE *)uint64_t v157 = 93;
                      *(void *)(v157 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
                      *(void *)(v157 + 16) = 0xE000000000000000LL;
                      *(void *)(v157 + 24) = 0x5F3A5F2874696E69LL;
                      *(void *)(v157 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA0000000000293ALL;
                      *(void *)(v157 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD000000000000018LL;
                      *(void *)(v157 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFC00LL;
                      *(void *)(v157 + 56) = 153LL;
                      swift_willThrow(v228);
                      swift_bridgeObjectRelease(v231);
                      uint64_t v158 = *((void *)&v250 + 1);
                      __int128 v159 = v251;
                      uint64_t v160 = *((void *)&v252 + 1);
                      __int128 v161 = v253;
                      __int128 v162 = v254;
                      uint64_t v220 = v255;
                      uint64_t v227 = v252;
                      uint64_t v163 = *((void *)&v255 + 1);
                      uint64_t v164 = v256;
                      swift_bridgeObjectRelease(*((void *)&v249 + 1));
                      swift_bridgeObjectRelease(v158);
                      swift_bridgeObjectRelease(v159);
                      sub_100019E58( *((uint64_t *)&v159 + 1),  v227,  v160,  v161,  *((uint64_t *)&v161 + 1),  v162,  *((uint64_t *)&v162 + 1),  v220,  v163,  v164);
                      uint64_t v9 = (void *)*((void *)&v256 + 1);
                      goto LABEL_5;
                    }
                  }
                }
              }

              sub_100092EF0((uint64_t)v116);
            }

            if (++v108 == v226)
            {
              sub_100045FD8(&v290);
              sub_100030944(v260);
              int v151 = v248;
              uint64_t v152 = v247;
              goto LABEL_145;
            }
          }

          goto LABEL_156;
        }

        swift_bridgeObjectRetain(v231);
        int v151 = _swiftEmptyArrayStorage;
        uint64_t v152 = &_swiftEmptySetSingleton;
LABEL_145:
        v259 = v151;
        if (v152[2])
        {
          if ((void)v251)
          {
            swift_bridgeObjectRetain(v151);
            swift_bridgeObjectRetain(v152);
            uint64_t v154 = sub_100051240(v153);
            swift_bridgeObjectRelease(v151);
            swift_bridgeObjectRelease_n(v152, 2LL);
            sub_100093194((uint64_t)v154);
            __int16 v155 = v231;
            goto LABEL_149;
          }

          char v165 = sub_100051240((uint64_t)v152);
          swift_bridgeObjectRelease(v231);
          uint64_t result = swift_bridgeObjectRelease(v152);
          *(void *)&__int128 v251 = v165;
        }

        else
        {
          swift_bridgeObjectRelease(v231);
          __int16 v155 = v152;
LABEL_149:
          uint64_t result = swift_bridgeObjectRelease(v155);
        }

        __int128 v166 = v258;
        *(_OWORD *)(v184 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v257;
        *(_OWORD *)(v184 + 144) = v166;
        *(void *)(v184 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v259;
        __int128 v167 = v254;
        *(_OWORD *)(v184 + 64) = v253;
        *(_OWORD *)(v184 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v167;
        __int128 v168 = v256;
        *(_OWORD *)(v184 + 96) = v255;
        *(_OWORD *)(v184 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v168;
        __int128 v169 = v250;
        *(_OWORD *)uint64_t v184 = v249;
        *(_OWORD *)(v184 + 16) = v169;
        __int128 v170 = v252;
        *(_OWORD *)(v184 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v251;
        *(_OWORD *)(v184 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v170;
        return result;
      }
    }

    v43 += 10;
    BOOL v36 = __OFADD__(v53++, 1LL);
  }

  while (!v36);
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v17 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v17 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for AUAStreamFormat();
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000AF08(0LL, &qword_100113B20, &OBJC_CLASS___ASDControl_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10000AF08(0LL, &qword_100115FE8, &OBJC_CLASS___ASDCustomProperty_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ActiveStreamingInterface();
    swift_arrayInitWithCopy(a1);
    return a3;
  }

  sub_1000516F0(&v53, 12LL);
LABEL_24:
  uint64_t v29 = v41;
  __int128 v30 = *(unsigned __int8 *)(v41 + 3);
  __int128 v31 = *(void *)(v29 + 32);
  uint64_t v32 = *(void *)(v29 + 16);
  BOOL v33 = *(_BYTE *)(v29 + 24);
  uint64_t v34 = *(_BYTE *)(v29 + 25);
  uint64_t v35 = (uint64_t)v57;
  sub_10004AAF8(v29);
  BOOL v36 = sub_100051240(v35);
  uint64_t result = swift_bridgeObjectRelease(v35);
  if (!v7[2])
  {
    uint64_t result = swift_bridgeObjectRelease(v7);
    unsigned int v7 = 0LL;
  }

  if (!v36[2])
  {
    uint64_t result = swift_release(v36);
    BOOL v36 = 0LL;
  }

  uint64_t v38 = v42 | 0x10000;
  if (!v42) {
    uint64_t v38 = -65536;
  }
  uint64_t v39 = v43;
  *__int128 v43 = v38;
  *((_BYTE *)v39 + swift_unknownObjectWeakDestroy(v0 + 2) = BYTE2(v38);
  *((void *)v39 + 1) = v30;
  *((void *)v39 + swift_unknownObjectWeakDestroy(v0 + 2) = v32;
  *((_BYTE *)v39 + 24) = v33;
  *((_BYTE *)v39 + 25) = v34;
  *((void *)v39 + 4) = v36;
  *((void *)v39 + 5) = v31;
  *((void *)v39 + 6) = v7;
  return result;
}

uint64_t destroy for Function(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2 != 1)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[13]);
    swift_bridgeObjectRelease(a1[14]);
  }

  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[16]);
  swift_bridgeObjectRelease(a1[17]);
  return swift_bridgeObjectRelease(a1[20]);
}

uint64_t initializeWithCopy for Function(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  if (v7 == 1)
  {
    __int128 v8 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    __int128 v9 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v9;
  }

  else
  {
    *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 104);
    uint64_t v11 = *(void *)(a2 + 112);
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v11;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
  }

  uint64_t v12 = *(void *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v12;
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v13;
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v14;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 145) = *(void *)(a2 + 145);
  uint64_t v15 = *(void *)(a2 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v15;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for Function(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = (_OWORD *)(a1 + 40);
  uint64_t v11 = (_OWORD *)(a2 + 40);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a2 + 96);
  if (v12 == 1)
  {
    if (v13 == 1)
    {
      *uint64_t v10 = *v11;
      __int128 v14 = *(_OWORD *)(a2 + 56);
      __int128 v15 = *(_OWORD *)(a2 + 72);
      __int128 v16 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v16;
      *(_OWORD *)(a1 + 56) = v14;
      *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v15;
    }

    else
    {
      *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
      *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
      uint64_t v20 = *(void *)(a2 + 96);
      *(void *)(a1 + 96) = v20;
      uint64_t v21 = *(void *)(a2 + 104);
      *(void *)(a1 + 104) = v21;
      uint64_t v22 = *(void *)(a2 + 112);
      *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v22;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
    }
  }

  else if (v13 == 1)
  {
    sub_100049518((void *)(a1 + 40));
    *uint64_t v10 = *v11;
    __int128 v17 = *(_OWORD *)(a2 + 104);
    __int128 v19 = *(_OWORD *)(a2 + 56);
    __int128 v18 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v17;
    *(_OWORD *)(a1 + 56) = v19;
    *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v18;
  }

  else
  {
    *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_BYTE *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 72);
    *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
    uint64_t v23 = *(void *)(a2 + 96);
    *(void *)(a1 + 96) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(v12);
    uint64_t v24 = *(void *)(a1 + 104);
    uint64_t v25 = *(void *)(a2 + 104);
    *(void *)(a1 + 104) = v25;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v24);
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a2 + 112);
    *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v26);
  }

  uint64_t v28 = *(void *)(a2 + 120);
  uint64_t v29 = *(void *)(a1 + 120);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  uint64_t v30 = *(void *)(a2 + 128);
  uint64_t v31 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  uint64_t v32 = *(void *)(a2 + 136);
  uint64_t v33 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 145) = *(_BYTE *)(a2 + 145);
  *(_BYTE *)(a1 + 146) = *(_BYTE *)(a2 + 146);
  *(_BYTE *)(a1 + 147) = *(_BYTE *)(a2 + 147);
  *(_BYTE *)(a1 + 14_Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 148);
  *(_BYTE *)(a1 + 149) = *(_BYTE *)(a2 + 149);
  *(_BYTE *)(a1 + 15_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_BYTE *)(a2 + 150);
  *(_BYTE *)(a1 + 151) = *(_BYTE *)(a2 + 151);
  *(_BYTE *)(a1 + 15swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 152);
  uint64_t v34 = *(void *)(a2 + 160);
  uint64_t v35 = *(void *)(a1 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  return a1;
}

__n128 initializeWithTake for Function(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = result;
  return result;
}

uint64_t assignWithTake for Function(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a1 + 96);
  if (v7 != 1)
  {
    uint64_t v8 = *(void *)(a2 + 96);
    if (v8 != 1)
    {
      *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 48);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_BYTE *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 72);
      *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 80);
      *(_WORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = v8;
      swift_bridgeObjectRelease(v7);
      uint64_t v11 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease(v11);
      uint64_t v12 = *(void *)(a1 + 112);
      *(void *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease(v12);
      goto LABEL_6;
    }

    sub_100049518((void *)(a1 + 40));
  }

  __int128 v9 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v9;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 120);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease(v15);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 15swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 152);
  uint64_t v16 = *(void *)(a1 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Function(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Function(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 15swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 16_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Function()
{
  return &type metadata for Function;
}

uint64_t destroy for FunctionDataPath(void *a1)
{
  unint64_t v2 = a1[22];
  if (v2 >> 60 != 15) {
    sub_100032E74(a1[21], v2);
  }
  swift_bridgeObjectRelease(a1[23]);
  swift_bridgeObjectRelease(a1[24]);
  return swift_bridgeObjectRelease(a1[25]);
}

uint64_t initializeWithCopy for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_WORD *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 13_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_BYTE *)(a2 + 130);
  *(_WORD *)(a1 + 15swift_unknownObjectWeakDestroy(v0 + 2) = *(_WORD *)(a2 + 152);
  uint64_t v6 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v6;
  uint64_t v7 = *(void *)(a2 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 168);
  unint64_t v9 = *(void *)(a2 + 176);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10004AFA8(*v8, v9);
    *(void *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = v10;
    *(void *)(a1 + 176) = v9;
  }

  uint64_t v11 = *(void *)(a2 + 184);
  uint64_t v12 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = v11;
  *(void *)(a1 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v12;
  uint64_t v13 = *(void *)(a2 + 200);
  *(void *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v13;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_WORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = v8;
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 120);
  __int16 v11 = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 13_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_BYTE *)(a2 + 130);
  *(_WORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v11;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v12 = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 15swift_unknownObjectWeakDestroy(v0 + 2) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *(void *)(a2 + 160);
  uint64_t v14 = *(void *)(a1 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = (uint64_t *)(a2 + 168);
  unint64_t v16 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) >> 60 != 15LL)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v18 = *v15;
      sub_10004AFA8(*v15, *(void *)(a2 + 176));
      uint64_t v19 = *(void *)(a1 + 168);
      unint64_t v20 = *(void *)(a1 + 176);
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = v18;
      *(void *)(a1 + 176) = v16;
      sub_100032E74(v19, v20);
      goto LABEL_8;
    }

    sub_100062364(a1 + 168);
    goto LABEL_6;
  }

  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)v15;
    goto LABEL_8;
  }

  uint64_t v17 = *v15;
  sub_10004AFA8(*v15, *(void *)(a2 + 176));
  *(void *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = v17;
  *(void *)(a1 + 176) = v16;
LABEL_8:
  uint64_t v21 = *(void *)(a1 + 184);
  uint64_t v22 = *(void *)(a2 + 184);
  *(void *)(a1 + 184) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v21);
  uint64_t v23 = *(void *)(a1 + 192);
  uint64_t v24 = *(void *)(a2 + 192);
  *(void *)(a1 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = *(void *)(a2 + 200);
  uint64_t v26 = *(void *)(a1 + 200);
  *(void *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_100062364(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = v7;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 19swift_unknownObjectWeakDestroy(v0 + 2) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v9;
  return result;
}

uint64_t assignWithTake for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 7swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_WORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 13_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(_BYTE *)(a2 + 130);
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  *(_WORD *)(a1 + 15swift_unknownObjectWeakDestroy(v0 + 2) = *(_WORD *)(a2 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease(v8);
  __int128 v9 = (void *)(a2 + 168);
  unint64_t v10 = *(void *)(a1 + 176);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 176);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 168);
      *(void *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = *v9;
      *(void *)(a1 + 176) = v11;
      sub_100032E74(v12, v10);
      goto LABEL_6;
    }

    sub_100062364(a1 + 168);
  }

  *(_OWORD *)(a1 + 16_Block_object_dispose((const void *)(v30 - 136), 8) = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 192);
  *(void *)(a1 + 19swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a1 + 200);
  *(void *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionDataPath(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FunctionDataPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 15swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(_OWORD *)(result + 7swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 20_Block_object_dispose((const void *)(v30 - 136), 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 20_Block_object_dispose((const void *)(v30 - 136), 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FunctionDataPath()
{
  return &type metadata for FunctionDataPath;
}

uint64_t sub_1000625F8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100062610(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v13 = a1[6];
  uint64_t v14 = a1[5];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  uint64_t v9 = a1[13];
  uint64_t v12 = a1[12];
  uint64_t v10 = a1[14];
  uint64_t v15 = a1[15];
  uint64_t v16 = a1[16];
  uint64_t v17 = a1[17];
  uint64_t v18 = a1[20];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100030908(v14, v13, v4, v5, v6, v7, v8, v12, v9, v10);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

void *sub_1000626EC(uint64_t a1, void *a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_1000709C4(0, v3, 0);
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v7 = *(i - 1);
      uint64_t v8 = *i;
      swift_bridgeObjectRetain_n(v7, 2LL);
      swift_bridgeObjectRetain_n(v8, 2LL);
      swift_bridgeObjectRetain(a2);
      sub_1000600F0(v7, v8, a2, (uint64_t)v21);
      if (v2) {
        break;
      }
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v7);
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_1000709C4(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      unint64_t v11 = &_swiftEmptyArrayStorage[21 * v10];
      __int128 v12 = v21[0];
      __int128 v13 = v21[2];
      *((_OWORD *)v11 + swift_unknownObjectWeakDestroy(v0 + 3) = v21[1];
      *((_OWORD *)v11 + 4) = v13;
      *((_OWORD *)v11 + swift_unknownObjectWeakDestroy(v0 + 2) = v12;
      __int128 v14 = v21[3];
      __int128 v15 = v21[4];
      __int128 v16 = v21[6];
      *((_OWORD *)v11 + 7) = v21[5];
      *((_OWORD *)v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = v16;
      *((_OWORD *)v11 + 5) = v14;
      *((_OWORD *)v11 + 6) = v15;
      __int128 v17 = v21[7];
      __int128 v18 = v21[8];
      __int128 v19 = v21[9];
      v11[24] = v22;
      *((_OWORD *)v11 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v18;
      *((_OWORD *)v11 + 11) = v19;
      *((_OWORD *)v11 + 9) = v17;
      if (!--v3) {
        return _swiftEmptyArrayStorage;
      }
    }

    swift_release(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100062868(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = *(void *)(a1 + 16);
  __n128 result = _swiftEmptyArrayStorage;
  if (v7)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    unsigned __int8 v20 = *(_BYTE *)(a4 + 144);
    unint64_t v11 = (void *)(a1 + 64);
    char v12 = a5 & 1;
    while (1)
    {
      uint64_t v13 = *(v11 - 3);
      uint64_t v14 = *(v11 - 1);
      uint64_t v15 = *v11;
      swift_bridgeObjectRetain(*v11);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      __int128 v16 = sub_100055708(a2, a3, v20, v12);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v14);
      uint64_t v17 = swift_bridgeObjectRelease(v13);
      if (v5) {
        break;
      }
      v11 += 5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      uint64_t v18 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
      uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
      specialized ContiguousArray._endMutation()(v19);
      if (!--v7) {
        return _swiftEmptyArrayStorage;
      }
    }

    return (void *)swift_release(_swiftEmptyArrayStorage);
  }

  return result;
}

void *sub_1000629AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    sub_1000709FC(0, v4, 0);
    uint64_t v5 = _swiftEmptyArrayStorage;
    for (uint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      sub_10005FEA4(i, a2, &v12, (uint64_t)v13);
      if (v3) {
        break;
      }
      uint64_t v3 = 0LL;
      uint64_t v14 = v5;
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_1000709FC(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v14;
      }

      _OWORD v5[2] = v10 + 1;
      sub_10000AF84(v13, (uint64_t)&v5[5 * v10 + 4]);
      if (!--v4) {
        return v5;
      }
    }

    swift_release(v5);
  }

  return v5;
}

void *sub_100062AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v45 = _swiftEmptyArrayStorage;
    sub_1000709E0(0, v4, 0);
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v8 = (_OWORD *)(a1 + 32);
    for (int64_t i = v4 - 1; ; --i)
    {
      __int128 v10 = v8[9];
      __int128 v11 = v8[11];
      __int128 v42 = v8[10];
      __int128 v43 = v11;
      __int128 v12 = v8[11];
      __int128 v44 = v8[12];
      __int128 v13 = v8[5];
      __int128 v14 = v8[7];
      __int128 v38 = v8[6];
      __int128 v39 = v14;
      __int128 v15 = v8[7];
      __int128 v16 = v8[9];
      __int128 v40 = v8[8];
      __int128 v41 = v16;
      __int128 v17 = v8[1];
      __int128 v18 = v8[3];
      __int128 v34 = v8[2];
      __int128 v35 = v18;
      __int128 v19 = v8[3];
      __int128 v20 = v8[5];
      __int128 v36 = v8[4];
      __int128 v37 = v20;
      __int128 v21 = v8[1];
      v33[0] = *v8;
      v33[1] = v21;
      v30[10] = v42;
      v30[11] = v12;
      v30[12] = v8[12];
      v30[6] = v38;
      v30[7] = v15;
      v30[8] = v40;
      uint64_t v30[9] = v10;
      v30[2] = v34;
      v30[3] = v19;
      _BYTE v30[4] = v36;
      v30[5] = v13;
      v30[0] = v33[0];
      v30[1] = v17;
      sub_10004B110(v33);
      sub_10005FAC8(v30, a2, &v29, &v31);
      if (v3) {
        break;
      }
      uint64_t v3 = 0LL;
      sub_10004B194(v33);
      __int128 v22 = v31;
      uint64_t v23 = v32;
      uint64_t v45 = v5;
      unint64_t v25 = v5[2];
      unint64_t v24 = v5[3];
      if (v25 >= v24 >> 1)
      {
        __int128 v28 = v31;
        sub_1000709E0(v24 > 1, v25 + 1, 1);
        __int128 v22 = v28;
        uint64_t v5 = v45;
      }

      _OWORD v5[2] = v25 + 1;
      uint64_t v26 = &v5[3 * v25];
      *((_OWORD *)v26 + swift_unknownObjectWeakDestroy(v0 + 2) = v22;
      _WORD v26[6] = v23;
      if (!i) {
        return v5;
      }
      v8 += 13;
    }

    sub_10004B194(v33);
    swift_release(v5);
  }

  return v5;
}

double sub_100062C58(uint64_t a1)
{
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 12_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0u;
  *(_OWORD *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

unint64_t sub_100062C78()
{
  unint64_t result = qword_1001150F0;
  if (!qword_1001150F0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OutputTerminal,  &type metadata for OutputTerminal);
    atomic_store(result, (unint64_t *)&qword_1001150F0);
  }

  return result;
}

uint64_t sub_100062CBC()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100062CE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  swift_bridgeObjectRelease(v2);
  return a1;
}

double sub_100062D1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a9)
  {
    swift_bridgeObjectRetain(a9);
    sub_10004AF94(a10, a11);
    swift_bridgeObjectRetain(a13);
    *(void *)&double result = swift_bridgeObjectRetain(a12).n128_u64[0];
  }

  return result;
}

void *sub_100062D78( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100062DCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease(a9);
    sub_10004B030(a10, a11);
    swift_bridgeObjectRelease(a12);
    return swift_bridgeObjectRelease(a13);
  }

  return result;
}

void sub_100062E28()
{
  uint64_t v0 = swift_allocObject(&unk_1001057E0, 24LL, 7LL);
  *(void *)(v0 + 16) = 0LL;
  id v1 = [objc_allocWithZone((Class)AUAPluginTrampoline) init];
  v8[4] = sub_10006754C;
  uint64_t v9 = v0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  v8[2] = sub_1000630A0;
  void v8[3] = &unk_1001057F8;
  uint64_t v2 = _Block_copy(v8);
  uint64_t v3 = v9;
  swift_retain(v0);
  swift_release(v3);
  [v1 setFnHALInitializeWithPluginHost:v2];
  _Block_release(v2);
  id v4 = objc_allocWithZone((Class)type metadata accessor for DriverPlugin());
  id v5 = sub_1000662DC(v1);

  swift_beginAccess(v0 + 16, v8, 1LL, 0LL);
  uint64_t v6 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = v5;
  id v7 = v5;
  swift_release(v0);

  qword_100115100 = (uint64_t)v7;
}

void sub_100062F5C()
{
  id v0 = [objc_allocWithZone((Class)AUAPluginTrampoline) init];
  void v4[4] = ClusterChannelInfo.chNum.getter;
  v4[5] = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256LL;
  v4[2] = sub_1000630A0;
  v4[3] = &unk_100105578;
  id v1 = _Block_copy(v4);
  [v0 setFnHALInitializeWithPluginHost:v1];
  _Block_release(v1);
  id v2 = objc_allocWithZone((Class)type metadata accessor for DriverPlugin());
  id v3 = sub_1000662DC(v0);

  qword_100115108 = (uint64_t)v3;
}

uint64_t (*variable initialization expression of DriverPlugin.cancel())()
{
  return ClusterChannelInfo.chNum.getter;
}

void sub_10006302C(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  id v7 = *(void **)(a4 + 16);
  if (v7)
  {
    id v8 = v7;
    sub_100063728(a1, a2);
  }

uint64_t sub_1000630A0(uint64_t a1, uint64_t a2, void *aBlock)
{
  id v5 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1001055B0, 24LL, 7LL);
  *(void *)(v7 + 16) = v6;
  swift_retain(v4);
  v5(a2, sub_100067294, v7);
  swift_release(v4);
  return swift_release(v7);
}

uint64_t sub_100063120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_1001151F0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100008E00(&qword_1001151F8);
  uint64_t v8 = swift_allocObject(v7, 24LL, 7LL);
  *(_DWORD *)(v8 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100105790, v10 + v6, v9 | 7);
  *(void *)(v11 + 16) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v11 + v10,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_100067518;
  uint64_t v16 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100011D20;
  aBlock[3] = &unk_1001057A8;
  __int128 v12 = _Block_copy(aBlock);
  uint64_t v13 = v16;
  swift_retain(v8);
  swift_release(v13);
  AudioServerPlugInRegisterRemote(a2, v12);
  _Block_release(v12);
  return swift_release(v8);
}

void sub_100063284(uint64_t a1)
{
  id v2 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    uint64_t v3 = sub_100008E00(&qword_1001151F0);
    CheckedContinuation.resume(returning:)(v3, v3);
    *(_BYTE *)(a1 + 16) = 1;
  }

  os_unfair_lock_unlock(v2);
}

uint64_t sub_1000632E0(void *a1)
{
  uint64_t v3 = sub_100008E00(&qword_1001151D8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1LL, 1LL, v6);
  uint64_t v8 = (void *)swift_allocObject(&unk_100105768, 48LL, 7LL);
  v8[2] = 0LL;
  uint64_t v9 = v8 + 2;
  void v8[3] = 0LL;
  v8[4] = v1;
  void v8[5] = a1;
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  id v11 = a1;
  if (v10 == 1)
  {
    sub_1000178B0((uint64_t)v5, &qword_1001151D8);
    uint64_t v12 = 7168LL;
LABEL_6:
    __int128 v20 = 0LL;
    goto LABEL_7;
  }

  unsigned __int8 v13 = TaskPriority.rawValue.getter(v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  uint64_t v12 = v13 | 0x1C00LL;
  uint64_t v14 = *v9;
  if (!*v9) {
    goto LABEL_6;
  }
  uint64_t v15 = v8[3];
  uint64_t ObjectType = swift_getObjectType(*v9);
  swift_unknownObjectRetain(v14);
  uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
  uint64_t v19 = v18;
  swift_unknownObjectRelease(v14, v18);
  if (!(v19 | v17)) {
    goto LABEL_6;
  }
  v23[0] = 0LL;
  v23[1] = 0LL;
  __int128 v20 = v23;
  _WORD v23[2] = v17;
  void v23[3] = v19;
LABEL_7:
  uint64_t v21 = swift_task_create(v12, v20, (char *)&type metadata for () + 8, &unk_1001151E8, v8);
  return swift_release(v21);
}

uint64_t sub_1000634A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  return swift_task_switch(sub_1000634BC, 0LL, 0LL);
}

id sub_1000634BC()
{
  id result = [*(id *)(v0 + 16) driverRef];
  if (result)
  {
    id v2 = result;
    uint64_t v3 = swift_task_alloc(32LL);
    *(void *)(v0 + 24) = v3;
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 3swift_unknownObjectWeakDestroy(v0 + 2) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10006356C;
    return (id)withCheckedContinuation<A>(isolation:function:_:)();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10006356C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000635C8, 0LL, 0LL);
}

uint64_t sub_1000635C8()
{
  if (machServiceExists("com.apple.audio.driver-registrar")) {
    return swift_task_switch(sub_1000676D0, 0LL, 0LL);
  }
  id v2 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v2;
  void *v2 = v0;
  v2[1] = sub_100063648;
  return static Task<>.sleep(nanoseconds:)(100000000LL);
}

uint64_t sub_100063648()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *v1;
  swift_task_dealloc(v2);
  if (v0) {
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else {
    return swift_task_switch(sub_1000676CC, 0LL, 0LL);
  }
}

uint64_t static DriverPlugin.registerActiveDriverInLoop()()
{
  if (qword_1001128F8 != -1) {
    swift_once(&qword_1001128F8, sub_100062E28);
  }
  return sub_1000632E0(*(void **)(qword_100115100 + OBJC_IVAR___AUAPlugin_plugin));
}

uint64_t sub_100063728(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  a2();
  uint64_t v4 = swift_allocObject(&unk_100105470, 24LL, 7LL);
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = swift_allocObject(&unk_100105498, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000670FC;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)&v3[OBJC_IVAR___AUAPlugin_notificationQueue];
  uint64_t v7 = (void *)swift_allocObject(&unk_1001054C0, 40LL, 7LL);
  _OWORD v7[2] = sub_1000658E0;
  v7[3] = v5;
  void v7[4] = v3;
  uint64_t v8 = swift_allocObject(&unk_1001054E8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16, v3);
  uint64_t v9 = (void *)swift_allocObject(&unk_100105510, 56LL, 7LL);
  v9[2] = sub_1000671E0;
  v9[3] = v7;
  v9[4] = v6;
  _OWORD v9[5] = sub_100067220;
  void v9[6] = v8;
  int v10 = v3;
  swift_retain(v5);
  swift_retain_n(v8, 2LL);
  swift_retain(v7);
  sub_1000666A4(v6, (uint64_t)sub_100066010, (uint64_t)v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_release(v7);
  swift_release_n(v8, 2LL);
  swift_release(v9);
  uint64_t v15 = &v10[OBJC_IVAR___AUAPlugin_cancel];
  uint64_t v16 = *(void *)&v10[OBJC_IVAR___AUAPlugin_cancel + 8];
  *(void *)uint64_t v15 = v12;
  *((void *)v15 + 1) = v14;
  swift_release(v5);
  return swift_release(v16);
}

uint64_t (*static AUAPluginUtils.usbHostInterestHandler(terminationHandler:)( uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject(&unk_100105310, 32LL, 7LL);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain(a2);
  return sub_1000658E0;
}

void sub_100063A1C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  unsigned int v11 = [a1 conformsToIOClassName:v10];

  if (!v11)
  {
    unint64_t v22 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v23 = 6;
    *(void *)(v23 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v23 + 16) = 0xE000000000000000LL;
    *(void *)(v23 + 24) = 0xD00000000000001BLL;
    *(void *)(v23 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D00A0LL;
    *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v23 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFE80LL;
    uint64_t v24 = 160LL;
LABEL_7:
    *(void *)(v23 + 56) = v24;
    swift_willThrow();
    return;
  }

  __int128 aBlock = 0LL;
  id v12 = [a1 parentEntryInServicePlaneWithError:&aBlock];
  uint64_t v13 = aBlock;
  if (!v12)
  {
    unint64_t v25 = aBlock;
    _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    return;
  }

  uint64_t v14 = v12;
  __int128 v62 = a2;
  uint64_t v15 = objc_opt_self(&OBJC_CLASS___IOKService);
  uint64_t v16 = swift_dynamicCastObjCClass(v14, v15);
  if (!v16)
  {
    uint64_t v26 = v13;

    unint64_t v27 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v27, 0LL, 0LL);
    *(_BYTE *)uint64_t v23 = 6;
    *(void *)(v23 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v23 + 16) = 0xE000000000000000LL;
    *(void *)(v23 + 24) = 0xD00000000000001BLL;
    *(void *)(v23 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D00A0LL;
    *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v23 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFE80LL;
    uint64_t v24 = 164LL;
    goto LABEL_7;
  }

  uint64_t v17 = (void *)v16;
  uint64_t v61 = a5;
  uint64_t v18 = v13;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v17 propertyForKey:v19];

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(v70, v20);
    swift_unknownObjectRelease(v20, v21);
  }

  else
  {
    memset(v70, 0, sizeof(v70));
  }

  sub_100017868((uint64_t)v70, (uint64_t)&aBlock);
  if (v67)
  {
    uint64_t v28 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v63, &aBlock, (char *)&type metadata for Any + 8, v28, 6LL) & 1) != 0)
    {
      id v29 = v63;
      id v60 = [v63 unsignedIntegerValue];

      int v30 = 0;
      goto LABEL_16;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&aBlock, (uint64_t *)&unk_100115170);
  }

  id v60 = 0LL;
  int v30 = 1;
LABEL_16:
  if (qword_100112908 != -1) {
    swift_once(&qword_100112908, sub_100065D48);
  }
  swift_beginAccess(&static AUAPluginUtils.checkedDict, &aBlock, 32LL, 0LL);
  uint64_t v31 = static AUAPluginUtils.checkedDict;
  if (!*(void *)(static AUAPluginUtils.checkedDict + 16)
    || (!v30 ? (uint64_t v32 = (uint64_t)v60) : (uint64_t v32 = 0LL), v33 = sub_100016BC0(v32), (v34 & 1) == 0))
  {
    swift_endAccess(&aBlock);
LABEL_29:
    if ((*(_BYTE *)(v61 + OBJC_IVAR___AUAPlugin_analyticsOnly) & 1) != 0)
    {
      id v45 = [v17 object];
      id v46 = objc_allocWithZone(&OBJC_CLASS___IOUSBHostDevice);
      __int128 aBlock = 0LL;
      id v39 = v62;
      id v47 = [v46 initWithIOService:v45 options:0 queue:v39 error:&aBlock interestHandler:0];
      uint64_t v48 = aBlock;
      if (v47) {
        goto LABEL_33;
      }
    }

    else
    {
      id v49 = [a1 object];
      id v50 = objc_allocWithZone(&OBJC_CLASS___IOUSBHostInterface);
      uint64_t v68 = a3;
      uint64_t v69 = a4;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v65 = 1107296256LL;
      uint64_t v66 = sub_1000B7EA8;
      uint64_t v67 = &unk_100105528;
      uint64_t v51 = _Block_copy(&aBlock);
      uint64_t v52 = v69;
      swift_retain(a4);
      id v39 = v62;
      swift_release(v52);
      __int128 aBlock = 0LL;
      id v53 = [v50 initWithIOService:v49 options:0 queue:v39 error:&aBlock interestHandler:v51];
      _Block_release(v51);
      uint64_t v48 = aBlock;
      if (v53)
      {
LABEL_33:
        __int128 v54 = v48;

        return;
      }
    }

    uint64_t v55 = v48;
    uint64_t v56 = v48;
LABEL_35:
    _convertNSErrorToError(_:)(v56);

    swift_willThrow();
    return;
  }

  char v35 = *(_BYTE *)(*(void *)(v31 + 56) + v33);
  swift_endAccess(&aBlock);
  if ((v35 & 1) != 0) {
    goto LABEL_29;
  }
  if (![v17 isServiceAuthorizedForOpenAllowInteraction:1])
  {
    unint64_t v57 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v57, 0LL, 0LL);
    *(_BYTE *)uint64_t v58 = 2;
    *(void *)(v58 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v58 + 16) = 0xE000000000000000LL;
    *(void *)(v58 + 24) = 0xD00000000000001BLL;
    *(void *)(v58 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D00A0LL;
    *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v58 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFE80LL;
    *(void *)(v58 + 56) = 180LL;
    swift_willThrow();

    return;
  }

  unsigned int v59 = [v17 object];
  id v36 = objc_allocWithZone(&OBJC_CLASS___IOUSBHostDevice);
  uint64_t v68 = a3;
  uint64_t v69 = a4;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v65 = 1107296256LL;
  uint64_t v66 = sub_1000B7EA8;
  uint64_t v67 = &unk_100105550;
  __int128 v37 = _Block_copy(&aBlock);
  uint64_t v38 = v69;
  swift_retain(a4);
  id v39 = v62;
  swift_release(v38);
  __int128 aBlock = 0LL;
  id v40 = [v36 initWithIOService:v59 options:1 queue:v39 error:&aBlock interestHandler:v37];
  _Block_release(v37);
  __int128 v41 = aBlock;
  if (!v40)
  {
    uint64_t v55 = aBlock;
    uint64_t v56 = v41;
    goto LABEL_35;
  }

  __int128 v42 = aBlock;

  if ((v30 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    swift_beginAccess(&static AUAPluginUtils.checkedDict, &aBlock, 33LL, 0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(static AUAPluginUtils.checkedDict);
    *(void *)&v70[0] = static AUAPluginUtils.checkedDict;
    static AUAPluginUtils.checkedDict = 0x8000000000000000LL;
    sub_100066144(1, (uint64_t)v60, isUniquelyReferenced_nonNull_native);
    uint64_t v44 = static AUAPluginUtils.checkedDict;
    static AUAPluginUtils.checkedDict = *(void *)&v70[0];
    swift_bridgeObjectRelease(v44);
    swift_endAccess(&aBlock);
    *(_BYTE *)(v61 + OBJC_IVAR___AUAPlugin_analyticsOnly) = 0;
  }

uint64_t *AUAPluginUtils.checkedDict.unsafeMutableAddressor()
{
  if (qword_100112908 != -1) {
    swift_once(&qword_100112908, sub_100065D48);
  }
  return &static AUAPluginUtils.checkedDict;
}

void sub_10006413C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_100064264(a1, a2);
  }

uint64_t static AUAPluginUtils.discoverAudioControlInterfaces(queue:options:interestHandler:usbObjectFactory:deviceHandler:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (void *)swift_allocObject(&unk_100105338, 56LL, 7LL);
  __int128 v13[2] = a5;
  v13[3] = a6;
  v13[4] = a1;
  void v13[5] = a7;
  v13[6] = a8;
  swift_retain(a6);
  id v14 = a1;
  swift_retain(a8);
  sub_1000666A4(v14, (uint64_t)sub_100066010, (uint64_t)v13);
  uint64_t v16 = v15;
  swift_release(v13);
  return v16;
}

void sub_100064264(void *a1, void *a2)
{
  uint64_t v3 = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a2 propertyForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(&v67, v7);
    swift_unknownObjectRelease(v7, v8);
  }

  else
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  sub_100017868((uint64_t)&v67, (uint64_t)&aBlock);
  if (v64)
  {
    uint64_t v9 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v60, &aBlock, (char *)&type metadata for Any + 8, v9, 6LL) & 1) != 0)
    {
      id v10 = v60;
      id v55 = [v60 unsignedIntegerValue];

      int v58 = 0;
      goto LABEL_9;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&aBlock, (uint64_t *)&unk_100115170);
  }

  id v55 = 0LL;
  int v58 = 1;
LABEL_9:
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [a2 propertyForKey:v11];

  if (v12)
  {
    _bridgeAnyObjectToAny(_:)(&v67, v12);
    swift_unknownObjectRelease(v12, v13);
  }

  else
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  sub_100017868((uint64_t)&v67, (uint64_t)&aBlock);
  if (v64)
  {
    uint64_t v14 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v60, &aBlock, (char *)&type metadata for Any + 8, v14, 6LL) & 1) != 0)
    {
      id v15 = v60;
      id v54 = [v60 unsignedIntegerValue];

      int v57 = 0;
      goto LABEL_17;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&aBlock, (uint64_t *)&unk_100115170);
  }

  id v54 = 0LL;
  int v57 = 1;
LABEL_17:
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [a2 propertyForKey:v16];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(&v67, v17);
    swift_unknownObjectRelease(v17, v18);
  }

  else
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  sub_100017868((uint64_t)&v67, (uint64_t)&aBlock);
  if (v64)
  {
    uint64_t v19 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v60, &aBlock, (char *)&type metadata for Any + 8, v19, 6LL) & 1) != 0)
    {
      id v20 = v60;
      id v53 = [v60 unsignedIntegerValue];

      int v56 = 0;
      goto LABEL_25;
    }
  }

  else
  {
    sub_1000178B0((uint64_t)&aBlock, (uint64_t *)&unk_100115170);
  }

  id v53 = 0LL;
  int v56 = 1;
LABEL_25:
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [a2 propertyForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)(&v67, v22);
    swift_unknownObjectRelease(v22, v23);
  }

  else
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
  }

  sub_100017868((uint64_t)&v67, (uint64_t)&aBlock);
  if (v64)
  {
    uint64_t v24 = sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    int v25 = swift_dynamicCast(&v60, &aBlock, (char *)&type metadata for Any + 8, v24, 6LL);
    id v26 = v60;
    if (!v25) {
      id v26 = 0LL;
    }
    unsigned int v59 = v26;
  }

  else
  {
    sub_1000178B0((uint64_t)&aBlock, (uint64_t *)&unk_100115170);
    unsigned int v59 = 0LL;
  }

  unint64_t v27 = sub_1000B815C(a2);
  id v29 = v28;
  __int128 aBlock = 0LL;
  uint64_t v62 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(46LL);
  swift_bridgeObjectRelease(v62);
  __int128 aBlock = (void **)0xD00000000000002CLL;
  uint64_t v62 = 0x80000001000CFEE0LL;
  v30._countAndFlagsBits = (uint64_t)v27;
  v30._object = v29;
  String.append(_:)(v30);
  uint64_t v31 = v62;
  sub_100029834( (uint64_t)aBlock,  v62,  0x6369766544646461LL,  (void *)0xEF293A5F3A5F2865LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  226LL);
  swift_bridgeObjectRelease(v31);
  NSString v32 = String._bridgeToObjectiveC()();
  uint64_t v33 = swift_allocObject(&unk_100105380, 32LL, 7LL);
  *(void *)(v33 + 16) = v27;
  *(void *)(v33 + 24) = v29;
  uint64_t v65 = sub_100066CD0;
  uint64_t v66 = (void *)v33;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v62 = 1107296256LL;
  id v63 = sub_1000B3284;
  __int128 v64 = &unk_100105398;
  char v34 = _Block_copy(&aBlock);
  swift_release(v66);
  AnalyticsSendEventLazy(v32, v34);
  _Block_release(v34);

  uint64_t v35 = OBJC_IVAR___AUAPlugin_analyticsOnly;
  id v36 = (void *)sub_1000B912C( a1,  *(_BYTE *)(v3 + OBJC_IVAR___AUAPlugin_analyticsOnly) ^ 1u,  *(_BYTE *)(v3 + OBJC_IVAR___AUAPlugin_analyticsOnly),  a2,  *(void **)(v3 + OBJC_IVAR___AUAPlugin_plugin));
  if (((v58 | v57 | v56) & 1) == 0)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    uint64_t v38 = (void *)swift_allocObject(&unk_100105420, 48LL, 7LL);
    v38[2] = v59;
    v38[3] = v55;
    v38[4] = v54;
    v38[5] = v53;
    uint64_t v65 = sub_1000670CC;
    uint64_t v66 = v38;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v62 = 1107296256LL;
    id v63 = sub_1000B3284;
    __int128 v64 = &unk_100105438;
    id v39 = _Block_copy(&aBlock);
    id v40 = v66;
    id v41 = v59;
    swift_release(v40);
    AnalyticsSendEventLazy(v37, v39);
    _Block_release(v39);
  }

  if ((*(_BYTE *)(v3 + v35) & 1) != 0)
  {

    goto LABEL_43;
  }

  __int128 v42 = (uint64_t *)(v3 + OBJC_IVAR___AUAPlugin_usbDeviceList);
  swift_beginAccess(v3 + OBJC_IVAR___AUAPlugin_usbDeviceList, &aBlock, 0LL, 0LL);
  uint64_t v43 = *v42;
  if ((unint64_t)*v42 >> 62)
  {
    if (v43 < 0) {
      uint64_t v51 = *v42;
    }
    else {
      uint64_t v51 = v43 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v42);
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v43);
    if (!v52) {
      goto LABEL_39;
    }
  }

  else if (!*(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_39:
    uint64_t v44 = os_transaction_create("usbaudiod");
    uint64_t v45 = *(void *)(v3 + OBJC_IVAR___AUAPlugin_pressuredExitHold);
    *(void *)(v3 + OBJC_IVAR___AUAPlugin_pressuredExitHold) = v44;
    swift_unknownObjectRelease(v45, v46);
  }

  swift_beginAccess(v42, &v67, 33LL, 0LL);
  id v47 = v36;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v47);
  unint64_t v49 = *(void *)((*v42 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v48 = *(void *)((*v42 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v49 >= v48 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1LL);
  }
  uint64_t v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
  specialized Array._endMutation()(v50);
  swift_endAccess(&v67);
  [v47 addDevicesToPlugin];

LABEL_43:
}

unint64_t sub_100064EC0()
{
  uint64_t v0 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_1000D3D30;
  strcpy((char *)(inited + 32), "HostController");
  *(_BYTE *)(inited + 47) = -18;
  *(void *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = String._bridgeToObjectiveC()();
  return sub_100006E90(inited);
}

unint64_t sub_100064F50(void *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  if (a1)
  {
    uint64_t v8 = (uint64_t)a1;
  }

  else
  {
    sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    uint64_t v8 = NSString.init(stringLiteral:)("Unknown", 7LL, 2LL);
  }

  uint64_t v9 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v9, &v13);
  *(_OWORD *)(inited + 16) = xmmword_1000D6650;
  *(void *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE300000000000000LL;
  unint64_t result = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  id v12 = a1;
  unint64_t result = (unint64_t)NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = result;
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  if (a3 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  unint64_t result = (unint64_t)NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x6E6F6973726556LL;
  *(void *)(inited + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0xE700000000000000LL;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(a4);
    strcpy((char *)(inited + 104), "productString");
    *(_WORD *)(inited + 11_Block_object_dispose((const void *)(v30 - 136), 8) = -4864;
    *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v8;
    return sub_100006E90(inited);
  }

uint64_t sub_1000650B8( void *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    uint64_t v14 = a1;
  }

  else
  {
    sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    uint64_t v14 = (void *)NSString.init(stringLiteral:)("Unknown", 7LL, 2LL);
  }

  uint64_t v15 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v15, v35);
  *(_OWORD *)(inited + 16) = xmmword_1000D5BC0;
  *(void *)(inited + 3swift_unknownObjectWeakDestroy(v0 + 2) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xE300000000000000LL;
  uint64_t result = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  id v18 = a1;
  uint64_t result = (uint64_t)NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 4_Block_object_dispose((const void *)(v30 - 136), 8) = result;
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  if (a3 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t result = (uint64_t)NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0x6E6F6973726556LL;
  *(void *)(inited + 8_Block_object_dispose((const void *)(v30 - 136), 8) = 0xE700000000000000LL;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
    *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(a4);
    strcpy((char *)(inited + 104), "productString");
    *(_WORD *)(inited + 11_Block_object_dispose((const void *)(v30 - 136), 8) = -4864;
    *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v14;
    *(void *)(inited + 12_Block_object_dispose((const void *)(v30 - 136), 8) = 0x65446769666E6F63LL;
    *(void *)(inited + 136) = 0xEA00000000006373LL;
    id v19 = objc_allocWithZone(&OBJC_CLASS___NSString);
    id v20 = v14;
    swift_bridgeObjectRetain(a6);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
    id v22 = [v19 initWithString:v21];

    *(void *)(inited + 144) = v22;
    *(void *)(inited + 15swift_unknownObjectWeakDestroy(v0 + 2) = 0x6544656369766564LL;
    *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xEA00000000006373LL;
    id v23 = objc_allocWithZone(&OBJC_CLASS___NSString);
    swift_bridgeObjectRetain(a8);
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8);
    id v25 = [v23 initWithString:v24];

    *(void *)(inited + 16_Block_object_dispose((const void *)(v30 - 136), 8) = v25;
    *(void *)(inited + 176) = 0x726F727265LL;
    *(void *)(inited + 184) = 0xE500000000000000LL;
    uint64_t v34 = a9;
    swift_errorRetain(a9);
    uint64_t v26 = sub_100008E00(&qword_100113400);
    String.init<A>(describing:)(&v34, v26);
    uint64_t v28 = v27;
    id v29 = objc_allocWithZone(&OBJC_CLASS___NSString);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    id v31 = [v29 initWithString:v30];

    *(void *)(inited + 19swift_unknownObjectWeakDestroy(v0 + 2) = v31;
    unint64_t v32 = sub_100006E90(inited);

    return v32;
  }

void sub_100065390(void *a1)
{
  uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v40 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = (uint64_t *)((char *)v1 + OBJC_IVAR___AUAPlugin_usbDeviceList);
  swift_beginAccess((char *)v1 + OBJC_IVAR___AUAPlugin_usbDeviceList, v39, 1LL, 0LL);
  uint64_t v4 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_34:
    if (v4 < 0) {
      uint64_t v29 = v4;
    }
    else {
      uint64_t v29 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v29);
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*v3);
  }

  if (!v5)
  {
    swift_bridgeObjectRelease(v4);
    uint64_t v26 = *v3;
    uint64_t *v3 = v2;
    swift_bridgeObjectRelease(v26);
LABEL_27:
    sub_100029840( 0xD00000000000001ALL,  0x80000001000CFE40LL,  0xD000000000000010LL,  (void *)0x80000001000CFE60LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  352LL);
    goto LABEL_28;
  }

  uint64_t v35 = v3;
  id v36 = v1;
  uint64_t v2 = 0LL;
  unint64_t v6 = 0LL;
LABEL_5:
  unint64_t v7 = v6;
  do
  {
    if ((v4 & 0xC000000000000001LL) != 0)
    {
      uint64_t v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
    }

    else
    {
      if (v7 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_33;
      }
      uint64_t v8 = (char *)*(id *)(v4 + 8 * v7 + 32);
    }

    uint64_t v9 = v8;
    unint64_t v6 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    uint64_t v3 = *(uint64_t **)&v8[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
    if (v3)
    {
      sub_10000AF08(0LL, &qword_100115168, &OBJC_CLASS___IOUSBHostObject_ptr);
      id v10 = a1;
      uint64_t v3 = v3;
      char v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) != 0)
      {
        sub_100029834( 0xD000000000000012LL,  0x80000001000CFEA0LL,  0xD000000000000010LL,  (void *)0x80000001000CFE60LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  338LL);
        [v9 removeDevicesFromPlugin];
        uint64_t v1 = (unint64_t *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig];
        swift_beginAccess(&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig], v38, 1LL, 0LL);
        uint64_t v3 = (uint64_t *)*v1;
        if (*v1)
        {
          uint64_t v16 = v3[4];
          uint64_t v17 = *(void *)(v16 + 16);
          if (v17)
          {
            uint64_t v34 = v1;
            swift_bridgeObjectRetain(v16);
            uint64_t v33 = v3;
            swift_retain(v3);
            uint64_t v32 = v16;
            id v18 = (uint64_t *)(v16 + 40);
            do
            {
              uint64_t v19 = *(v18 - 1);
              uint64_t v20 = *v18;
              uint64_t ObjectType = swift_getObjectType(v19);
              swift_unknownObjectRetain(v19);
              sub_10002C358(ObjectType, v20);
              swift_unknownObjectRelease(v19, v22);
              v18 += 2;
              --v17;
            }

            while (v17);
            swift_release(v33);
            swift_bridgeObjectRelease(v32);
            uint64_t v1 = v34;
            uint64_t v3 = (uint64_t *)*v34;
          }
        }

        *uint64_t v1 = 0LL;

        swift_release(v3);
        uint64_t v2 = 1LL;
        if (v6 == v5)
        {
          swift_bridgeObjectRelease(v4);
          uint64_t v3 = v35;
          uint64_t v23 = *v35;
          *uint64_t v35 = v40;
          swift_bridgeObjectRelease(v23);
          uint64_t v1 = v36;
          goto LABEL_28;
        }

        goto LABEL_5;
      }
    }

    id v12 = v9;
    uint64_t v1 = &v40;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    unint64_t v14 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v13 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v14 >= v13 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
    }
    uint64_t v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
    specialized Array._endMutation()(v15);

    ++v7;
  }

  while (v6 != v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v3 = v35;
  uint64_t v24 = *v35;
  *uint64_t v35 = v40;
  swift_bridgeObjectRelease(v24);
  uint64_t v1 = v36;
  if ((v2 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v27 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    if (*(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      return;
    }
    goto LABEL_30;
  }

  if (v27 < 0) {
    uint64_t v30 = *v3;
  }
  else {
    uint64_t v30 = v27 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v27);
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  swift_bridgeObjectRelease(v27);
  if (!v31)
  {
LABEL_30:
    uint64_t v28 = *(unint64_t *)((char *)v1 + OBJC_IVAR___AUAPlugin_pressuredExitHold);
    *(unint64_t *)((char *)v1 + OBJC_IVAR___AUAPlugin_pressuredExitHold) = 0LL;
    swift_unknownObjectRelease(v28, v25);
  }

id DriverPlugin.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void DriverPlugin.init()()
{
}

id DriverPlugin.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DriverPlugin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000658BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000658E4(void *a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v6 = objc_autoreleasePoolPush();
  uint64_t v7 = objc_opt_self(&OBJC_CLASS___IOKService);
  uint64_t v8 = swift_dynamicCastObjCClass(a1, v7);
  if (v8)
  {
    uint64_t v9 = v8;
    swift_beginAccess(a2 + 16, v11, 0LL, 0LL);
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      id v10 = a1;
      a3(v9);
    }
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100065984(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_1000659D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (void *)swift_allocObject(&unk_100105718, 40LL, 7LL);
  _OWORD v14[2] = a2;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_1000673B8;
  uint64_t v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100011D20;
  aBlock[3] = &unk_100105730;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain(a2);
  swift_retain(a3);
  uint64_t v16 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_10000B6D4( &qword_1001151C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100008E00(&qword_1001151C8);
  uint64_t v19 = sub_1000672FC(&qword_1001151D0, &qword_1001151C8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v26);
}

void sub_100065BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + 16;
  uint64_t v7 = a3 + 16;
  swift_beginAccess(a1 + 16, v12, 1LL, 0LL);
  *(_BYTE *)(a1 + 16) = 1;
  swift_beginAccess(v6, v11, 1LL, 0LL);
  uint64_t v8 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = 0LL;

  swift_beginAccess(v7, v10, 1LL, 0LL);
  uint64_t v9 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = 0LL;
}

char *AUAPluginUtils.checked.unsafeMutableAddressor()
{
  return &static AUAPluginUtils.checked;
}

uint64_t static AUAPluginUtils.checked.getter()
{
  return static AUAPluginUtils.checked;
}

uint64_t static AUAPluginUtils.checked.setter(char a1)
{
  uint64_t result = swift_beginAccess(&static AUAPluginUtils.checked, v3, 1LL, 0LL);
  static AUAPluginUtils.checked = a1;
  return result;
}

uint64_t (*static AUAPluginUtils.checked.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

unint64_t sub_100065D48()
{
  unint64_t result = sub_10000AF9C((uint64_t)_swiftEmptyArrayStorage);
  static AUAPluginUtils.checkedDict = result;
  return result;
}

double static AUAPluginUtils.checkedDict.getter()
{
  if (qword_100112908 != -1) {
    swift_once(&qword_100112908, sub_100065D48);
  }
  swift_beginAccess(&static AUAPluginUtils.checkedDict, v1, 0LL, 0LL);
  *(void *)&double result = swift_bridgeObjectRetain(static AUAPluginUtils.checkedDict).n128_u64[0];
  return result;
}

uint64_t static AUAPluginUtils.checkedDict.setter(uint64_t a1)
{
  if (qword_100112908 != -1) {
    swift_once(&qword_100112908, sub_100065D48);
  }
  swift_beginAccess(&static AUAPluginUtils.checkedDict, v4, 1LL, 0LL);
  uint64_t v2 = static AUAPluginUtils.checkedDict;
  static AUAPluginUtils.checkedDict = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static AUAPluginUtils.checkedDict.modify(uint64_t a1))(void)
{
  if (qword_100112908 != -1) {
    swift_once(&qword_100112908, sub_100065D48);
  }
  swift_beginAccess(&static AUAPluginUtils.checkedDict, a1, 33LL, 0LL);
  return j__swift_endAccess;
}

void sub_100065EB8( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v6 = (void *)a2(a1, a4);
  id v8 = v7;
  a5();
}

_OWORD *sub_100066014(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100016AFC(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_100017A40(v19);
        return sub_10000AE58(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100096F2C();
      goto LABEL_7;
    }

    sub_10009665C(v15, a4 & 1);
    unint64_t v21 = sub_100016AFC(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100066274(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100066144(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100016BC0(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100097110();
LABEL_7:
    char v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v16[7] + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = a1 & 1;
      return result;
    }

_OWORD *sub_100066274(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000AE58(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_1000662DC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v7);
  BOOL v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v10);
  BOOL v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v2[OBJC_IVAR___AUAPlugin_usbDeviceList] = _swiftEmptyArrayStorage;
  *(void *)&v2[OBJC_IVAR___AUAPlugin_pressuredExitHold] = 0LL;
  uint64_t v13 = &v2[OBJC_IVAR___AUAPlugin_cancel];
  void *v13 = ClusterChannelInfo.chNum.getter;
  v13[1] = 0LL;
  uint64_t v30 = OBJC_IVAR___AUAPlugin_analyticsOnly;
  v2[OBJC_IVAR___AUAPlugin_analyticsOnly] = 0;
  uint64_t v37 = 0LL;
  *(void *)&v2[OBJC_IVAR___AUAPlugin_plugin] = a1;
  sub_10000AF08(0LL, (unint64_t *)&qword_1001151A0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  char v14 = v2;
  static DispatchQoS.unspecified.getter(a1);
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_10000B6D4( &qword_1001151A8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_100008E00(&qword_1001151B0);
  uint64_t v17 = sub_1000672FC((unint64_t *)&qword_1001151B8, &qword_1001151B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v16, v17, v7, v15);
  (*(void (**)(char *, void, uint64_t))(v31 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v32);
  *(void *)&v14[OBJC_IVAR___AUAPlugin_notificationQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000031LL,  0x80000001000D01A0LL,  v12,  v9,  v6,  0LL);
  NSString v18 = String._bridgeToObjectiveC()();
  int v19 = AUAGetBootArg(v18, (uint64_t)&v37);

  uint64_t v35 = 0LL;
  uint64_t v36 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(46LL);
  swift_bridgeObjectRelease(v36);
  uint64_t v35 = (void *)0xD000000000000022LL;
  uint64_t v36 = 0x80000001000D0200LL;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x203A65756C617620LL;
  v23._object = (void *)0xE800000000000000LL;
  String.append(_:)(v23);
  uint64_t v24 = v37;
  uint64_t v34 = v37;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  uint64_t v27 = v36;
  sub_100029834( (uint64_t)v35,  v36,  0x756C702874696E69LL,  (void *)0xED0000293A6E6967LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  129LL);
  swift_bridgeObjectRelease(v27);
  if (!v19 || !v24) {
    v2[v30] = 1;
  }

  uint64_t v28 = (objc_class *)type metadata accessor for DriverPlugin();
  v33.receiver = v14;
  v33.super_class = v28;
  return objc_msgSendSuper2(&v33, "init");
}

void sub_1000666A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  BOOL v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [objc_allocWithZone(IOKNotificationPort) initOnDispatchQueue:a1];
  if (v13)
  {
    char v14 = v13;
    uint64_t v53 = v10;
    uint64_t v54 = v7;
    id v55 = a1;
    uint64_t v56 = v3;
    uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___IOUSBHostInterface);
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v17 = UInt8._bridgeToObjectiveC()().super.super.isa;
    id v18 = [v15 createMatchingDictionaryWithVendorID:0 productID:0 bcdDevice:0 interfaceNumber:0 configurationValue:0 interfaceClass:isa i nterfaceSubclass:v17 interfaceProtocol:0 speed:0 productIDArray:0];

    id v19 = v15;
    __int128 aBlock = 0LL;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v18,  &aBlock,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v20 = aBlock;
    if (aBlock)
    {
      uint64_t v51 = v6;
      unint64_t v21 = v14;
      uint64_t v22 = swift_allocObject(&unk_1001055D8, 17LL, 7LL);
      *(_BYTE *)(v22 + 16) = 0;
      id v52 = (id)objc_opt_self(&OBJC_CLASS___IOKService);
      static String._unconditionallyBridgeFromObjectiveC(_:)(IOKMatchedNotification);
      uint64_t v24 = v23;
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
      Class v26 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v20);
      uint64_t v27 = (void *)swift_allocObject(&unk_100105600, 40LL, 7LL);
      uint64_t v28 = v58;
      void v27[2] = v22;
      void v27[3] = v28;
      v27[4] = a3;
      __int128 v64 = sub_1000672E0;
      uint64_t v65 = v27;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v61 = 1107296256LL;
      uint64_t v62 = sub_100065984;
      id v63 = &unk_100105618;
      uint64_t v29 = _Block_copy(&aBlock);
      uint64_t v30 = v65;
      uint64_t v58 = v22;
      uint64_t v31 = v22;
      char v14 = v21;
      swift_retain(v31);
      swift_retain(a3);
      swift_release(v30);
      __int128 aBlock = 0LL;
      id v32 =  [v52 addNotificationOfType:v25 forMatching:v26 usingNotificationPort:v21 error:&aBlock withEnumerationBlock:v29];
      _Block_release(v29);

      objc_super v33 = aBlock;
      if (v32)
      {
        uint64_t v34 = swift_allocObject(&unk_100105650, 24LL, 7LL);
        *(void *)(v34 + 16) = v32;
        __int128 v64 = sub_1000672EC;
        uint64_t v65 = (void *)v34;
        __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v61 = 1107296256LL;
        uint64_t v62 = sub_100011D20;
        id v63 = &unk_100105668;
        uint64_t v35 = _Block_copy(&aBlock);
        static DispatchQoS.unspecified.getter(v32);
        unsigned int v59 = _swiftEmptyArrayStorage;
        uint64_t v36 = sub_10000B6D4( &qword_1001151C0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v37 = sub_100008E00(&qword_1001151C8);
        uint64_t v38 = sub_1000672FC(&qword_1001151D0, &qword_1001151C8);
        uint64_t v39 = v51;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v37, v38, v51, v36);
        unint64_t v40 = v55;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v35);
        _Block_release(v35);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v9, v39);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v53);
        swift_release(v65);
        uint64_t v41 = swift_allocObject(&unk_1001056A0, 24LL, 7LL);
        *(void *)(v41 + 16) = v14;
        uint64_t v42 = swift_allocObject(&unk_1001056C8, 24LL, 7LL);
        *(void *)(v42 + 16) = v32;
        uint64_t v43 = (void *)swift_allocObject(&unk_1001056F0, 48LL, 7LL);
        uint64_t v44 = v58;
        void v43[2] = v40;
        void v43[3] = v44;
        v43[4] = v42;
        v43[5] = v41;
        id v45 = v40;
        return;
      }

      uint64_t v50 = v33;
      _convertNSErrorToError(_:)(v33);

      swift_willThrow();
      swift_release(v58);
    }

    else
    {
      unint64_t v48 = sub_10000AE14();
      swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
      *(_BYTE *)uint64_t v49 = 1;
      *(void *)(v49 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v49 + 16) = 0xE000000000000000LL;
      *(void *)(v49 + 24) = 0xD00000000000003CLL;
      *(void *)(v49 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D0270LL;
      *(void *)(v49 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
      *(void *)(v49 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFE80LL;
      *(void *)(v49 + 56) = 392LL;
      swift_willThrow();
    }
  }

  else
  {
    unint64_t v46 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
    *(_BYTE *)uint64_t v47 = 0;
    *(void *)(v47 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v47 + 16) = 0xE000000000000000LL;
    *(void *)(v47 + 24) = 0xD00000000000003CLL;
    *(void *)(v47 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D0270LL;
    *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001CLL;
    *(void *)(v47 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000CFE80LL;
    *(void *)(v47 + 56) = 380LL;
    swift_willThrow();
  }

uint64_t type metadata accessor for DriverPlugin()
{
  return objc_opt_self(&OBJC_CLASS___AUAPlugin);
}

ValueMetadata *type metadata accessor for AUAPluginUtils()
{
  return &type metadata for AUAPluginUtils;
}

uint64_t sub_100066CAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100066CD0()
{
  return sub_100064EC0();
}

uint64_t sub_100066CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100066CE8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100066CF0()
{
  __int16 v0 = sub_1000B2F58();
  byte_100117210 = (v0 & 0x101) == 257;
  if ((v0 & 0x101) == 0x101)
  {
    if (qword_1001128F8 != -1) {
      swift_once(&qword_1001128F8, sub_100062E28);
    }
    uint64_t v1 = &qword_100115100;
    int v2 = 1;
  }

  else
  {
    if (qword_100112900 != -1) {
      swift_once(&qword_100112900, sub_100062F5C);
    }
    int v2 = 0;
    uint64_t v1 = &qword_100115108;
  }

  id v3 = *(id *)(*v1 + OBJC_IVAR___AUAPlugin_plugin);
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  if (v2) {
    uint64_t v4 = 1702195828LL;
  }
  else {
    uint64_t v4 = 0x65736C6166LL;
  }
  if (v2) {
    unint64_t v5 = 0xE400000000000000LL;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  sub_100029834( 0xD000000000000016LL,  0x80000001000D0230LL,  0xD000000000000014LL,  (void *)0x80000001000D0250LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  110LL);
  swift_bridgeObjectRelease(0x80000001000D0230LL);
  return v3;
}

id sub_100066E98()
{
  __int16 v0 = sub_1000B2F58();
  byte_100117210 = (v0 & 0x101) == 1;
  if ((v0 & 0x101) == 1)
  {
    if (qword_1001128F8 != -1) {
      swift_once(&qword_1001128F8, sub_100062E28);
    }
    uint64_t v1 = &qword_100115100;
    int v2 = 1;
  }

  else
  {
    if (qword_100112900 != -1) {
      swift_once(&qword_100112900, sub_100062F5C);
    }
    int v2 = 0;
    uint64_t v1 = &qword_100115108;
  }

  id v3 = *(id *)(*v1 + OBJC_IVAR___AUAPlugin_plugin);
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  if (v2) {
    uint64_t v4 = 1702195828LL;
  }
  else {
    uint64_t v4 = 0x65736C6166LL;
  }
  if (v2) {
    unint64_t v5 = 0xE400000000000000LL;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  sub_100029834( 0xD000000000000016LL,  0x80000001000D00F0LL,  0xD000000000000017LL,  (void *)0x80000001000D0110LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  119LL);
  swift_bridgeObjectRelease(0x80000001000D00F0LL);
  return v3;
}

uint64_t sub_100067038()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_errorRelease(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_100067074()
{
  return sub_1000650B8( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80));
}

uint64_t sub_1000670A8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_1000670CC()
{
  return sub_100064F50(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000670D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000670FC(void *a1)
{
}

uint64_t sub_10006711C(uint64_t result, int a2)
{
  if (a2 == -536870896)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
    sub_100029834( 0xD00000000000001ALL,  0x80000001000D0350LL,  0xD00000000000002BLL,  (void *)0x80000001000D0370LL,  0xD00000000000001CLL,  0x80000001000CFE80LL,  370LL);
    return v4(v3);
  }

  return result;
}

uint64_t sub_1000671B4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000671E0(void *a1, void *a2)
{
}

uint64_t sub_1000671FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100067220(void *a1, void *a2)
{
}

uint64_t sub_10006722C()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100067260(uint64_t a1)
{
}

uint64_t sub_100067270()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100067294()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1000672A4()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_1000672B4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000672E0(void *a1)
{
}

id sub_1000672EC()
{
  return [*(id *)(v0 + 16) primeNotification];
}

uint64_t sub_1000672FC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000175B0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10006733C()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100067378()
{
  return sub_1000659D4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100067384()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000673B8()
{
}

uint64_t sub_1000673C4(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 48LL, 7LL);
}

uint64_t sub_1000673F0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001151E4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100067450;
  v3[2] = v2;
  return swift_task_switch(sub_1000634BC, 0LL, 0LL);
}

uint64_t sub_100067450()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100067498(uint64_t a1)
{
  return sub_100063120(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000674A0()
{
  uint64_t v1 = sub_100008E00(&qword_1001151F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100067518()
{
}

void sub_10006754C(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

uint64_t storeEnumTagSinglePayload for DriverPlugin.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000675A0 + 4 * byte_1000D79CD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000675D4 + 4 * asc_1000D79C8[v4]))();
}

uint64_t sub_1000675D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000675DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000675E4LL);
  }
  return result;
}

uint64_t sub_1000675F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000675F8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000675FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067604(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverPlugin.State()
{
  return &type metadata for DriverPlugin.State;
}

unint64_t sub_100067624()
{
  unint64_t result = qword_100115200;
  if (!qword_100115200)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D7A48, &type metadata for DriverPlugin.State);
    atomic_store(result, (unint64_t *)&qword_100115200);
  }

  return result;
}

uint64_t sub_1000676D4(__int16 a1, id a2)
{
  if ((a1 & 0x100) != 0)
  {
    uint64_t v3 = 462LL;
  }

  else
  {
    uint64_t v3 = 463LL;
  }

  unint64_t v4 = sub_10000AE14();
  uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
  *(_BYTE *)uint64_t v6 = 30;
  *(void *)(v6 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v6 + 24) = 0xD000000000000010LL;
  *(void *)(v6 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D0510LL;
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
  *(void *)(v6 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
  *(void *)(v6 + 56) = v3;
  return swift_willThrow(v5);
}

uint64_t ADCControlRequestParameterBlock.getCur()@<X0>(id a1@<X1>, __int16 a2@<W0>, uint64_t a3@<X8>)
{
  if ((a2 & 0x100) == 0)
  {
    switch((char)a2)
    {
      case 0:
        unint64_t v4 = [a1 bytes];
        uint64_t v16 = &type metadata for UInt8;
        unint64_t v17 = sub_1000698C8();
        LOBYTE(v15) = *v4;
        return sub_10000AF84(&v15, a3);
      case 1:
        uint64_t v10 = [a1 bytes];
        uint64_t v16 = &type metadata for UInt16;
        unint64_t v17 = sub_100069884();
        LOWORD(v15) = *v10;
        return sub_10000AF84(&v15, a3);
      case 2:
        uint64_t v11 = [a1 bytes];
        uint64_t v16 = &type metadata for UInt32;
        unint64_t v17 = sub_100069840();
        LODWORD(v15) = *v11;
        return sub_10000AF84(&v15, a3);
      case 3:
        sub_100069158(a1);
        __asm { BR              X10 }

        return result;
      case 8:
        sub_100069158(a1);
        __asm { BR              X10 }

        return result;
      default:
        unint64_t v13 = sub_10000AE14();
        uint64_t v6 = swift_allocError(&type metadata for AUAError, v13, 0LL, 0LL);
        *(_BYTE *)uint64_t v7 = 30;
        *(void *)(v7 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v7 + 24) = 0x2928727543746567LL;
        *(void *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
        *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
        *(void *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
        uint64_t v8 = 441LL;
        goto LABEL_5;
    }
  }

  unint64_t v5 = sub_10000AE14();
  uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
  *(_BYTE *)uint64_t v7 = 30;
  *(void *)(v7 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v7 + 24) = 0x2928727543746567LL;
  *(void *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
  *(void *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
  uint64_t v8 = 390LL;
LABEL_5:
  *(void *)(v7 + 56) = v8;
  return swift_willThrow(v6);
}

uint64_t sub_100067DD0(__int16 a1, void *a2)
{
  if ((a1 & 0x100) != 0)
  {
    uint64_t result = sub_100068138(a1 | 0x100u, a2);
    if (!v2)
    {
      sub_100069158(a2);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v3 = sub_10000AE14();
    uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
    *(_BYTE *)uint64_t v5 = 30;
    *(void *)(v5 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v5 + 24) = 0x65676E6152746567LL;
    *(void *)(v5 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA00000000002928LL;
    *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
    *(void *)(v5 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
    *(void *)(v5 + 56) = 470LL;
    return swift_willThrow(v4);
  }

  return result;
}

uint64_t sub_100068138(__int16 a1, id a2)
{
  if ((a1 & 0x100) != 0) {
    return *(unsigned __int16 *)[a2 bytes];
  }
  unint64_t v2 = sub_10000AE14();
  uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
  *(_BYTE *)uint64_t v4 = 30;
  *(void *)(v4 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v4 + 24) = 0x526275536D754E77LL;
  *(void *)(v4 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEF29287365676E61LL;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
  *(void *)(v4 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
  *(void *)(v4 + 56) = 380LL;
  return swift_willThrow(v3);
}

_BYTE *sub_1000681F8(unint64_t a1, char a2, id a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = [a3 bytes];
      if (a1 >= 0x100) {
        goto LABEL_11;
      }
      *uint64_t result = a1;
      break;
    case 1:
      uint64_t result = [a3 bytes];
      if (a1 >= 0x10000) {
        goto LABEL_11;
      }
      *(_WORD *)uint64_t result = a1;
      break;
    case 2:
      uint64_t result = [a3 bytes];
      if (HIDWORD(a1))
      {
LABEL_11:
        uint64_t result = (_BYTE *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
        __break(1u);
      }

      else
      {
        *(_DWORD *)uint64_t result = a1;
      }

      break;
    case 3:
      uint64_t result = [a3 bytes];
      *(_WORD *)uint64_t result = a1;
      result[2] = BYTE2(a1);
      break;
    default:
      unint64_t v5 = sub_10000AE14();
      uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
      *(_BYTE *)uint64_t v7 = 30;
      *(void *)(v7 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v7 + 24) = 0x5F28727543746573LL;
      *(void *)(v7 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xEA0000000000293ALL;
      *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v7 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
      *(void *)(v7 + 56) = 535LL;
      uint64_t result = (_BYTE *)swift_willThrow(v6);
      break;
  }

  return result;
}

unint64_t sub_1000683A4@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_10007A764();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_BYTE *)a1 = v3;
  return result;
}

unint64_t sub_1000683DC@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_10007A720();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(_BYTE *)a1 = v3;
  }
  return result;
}

unint64_t sub_10006841C@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(_BYTE *)(v1 + 1);
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_10007A764();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_BYTE *)a1 = v3;
  return result;
}

unint64_t sub_100068454@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(char *)(v1 + 1);
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_10007A720();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(_BYTE *)a1 = v3;
  }
  return result;
}

unint64_t sub_100068494@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(_BYTE *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_10007A764();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_BYTE *)a1 = v3;
  return result;
}

unint64_t sub_1000684CC@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(char *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_10007A720();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(_BYTE *)a1 = v3;
  }
  return result;
}

Swift::Int sub_10006850C()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100068578()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_1000685C0(uint64_t a1)
{
  Swift::UInt8 v2 = *v1;
  Swift::UInt8 v3 = v1[1];
  Swift::UInt8 v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_100068628(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_100068660@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_100030A1C();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100068698@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_10007A6DC();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_1000686D0@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_100030A1C();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100068708@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_10007A6DC();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100068740@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 4);
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_100030A1C();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100068778@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 4);
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_10007A6DC();
  *(void *)(a1 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
  *(_WORD *)a1 = v3;
  return result;
}

Swift::Int sub_1000687B0()
{
  Swift::UInt16 v1 = *v0;
  Swift::UInt16 v2 = v0[1];
  Swift::UInt16 v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10006881C()
{
  Swift::UInt16 v1 = v0[1];
  Swift::UInt16 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100068864(uint64_t a1)
{
  Swift::UInt16 v2 = *v1;
  Swift::UInt16 v3 = v1[1];
  Swift::UInt16 v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_1000688CC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_100068904@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_10007A698();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    char v5 = 2;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v5,  3451LL,  0);
    __break(1u);
  }

  else
  {
    *a1 = v3;
  }

  return result;
}

unint64_t sub_100068990@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for Int;
  unint64_t result = sub_10007A654();
  a1[4] = result;
  *a1 = v3;
  return result;
}

unint64_t sub_1000689C8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned int *)(v1 + 4);
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_10007A698();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    char v5 = 2;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v5,  3451LL,  0);
    __break(1u);
  }

  else
  {
    *a1 = v3;
  }

  return result;
}

unint64_t sub_100068A54@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(int *)(v1 + 4);
  a1[3] = &type metadata for Int;
  unint64_t result = sub_10007A654();
  a1[4] = result;
  *a1 = v3;
  return result;
}

unint64_t sub_100068A8C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_10007A698();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    char v5 = 2;
    unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v5,  3451LL,  0);
    __break(1u);
  }

  else
  {
    *a1 = v3;
  }

  return result;
}

unint64_t sub_100068B18@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(int *)(v1 + 8);
  a1[3] = &type metadata for Int;
  unint64_t result = sub_10007A654();
  a1[4] = result;
  *a1 = v3;
  return result;
}

Swift::Int sub_100068B50()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100068BB8()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100068BFC(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Swift::UInt32 v3 = v1[1];
  Swift::UInt32 v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL sub_100068C60(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t ADCControlRequestParameterBlock.init(blockLayout:data:)(char a1, uint64_t a2, unint64_t a3)
{
  switch(a1)
  {
    case 0:
      __asm { BR              X10 }

      return result;
    case 1:
      __asm { BR              X10 }

      return result;
    case 2:
      __asm { BR              X10 }

      return result;
    case 3:
      __asm { BR              X10 }

      return result;
    case 6:
      __asm { BR              X10 }

      return result;
    default:
      uint64_t v13 = 0LL;
      uint64_t v14 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      v6._countAndFlagsBits = 0xD000000000000012LL;
      v6._object = (void *)0x80000001000D0410LL;
      String.append(_:)(v6);
      char v12 = a1;
      _print_unlocked<A, B>(_:_:)( &v12,  &v13,  &type metadata for tADCControlRequestParameterBlockLayout,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v7 = v14;
      sub_100029840( v13,  v14,  0xD000000000000017LL,  (void *)0x80000001000D0430LL,  0xD00000000000001ELL,  0x80000001000D03F0LL,  262LL);
      swift_bridgeObjectRelease(v7);
      unint64_t v8 = sub_10000AE14();
      uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
      *(_BYTE *)uint64_t v10 = 27;
      *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v10 + 24) = 0xD000000000000017LL;
      *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D0430LL;
      *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
      *(void *)(v10 + 56) = 263LL;
      swift_willThrow(v9);
      return sub_100032E74(a2, a3);
  }

uint64_t sub_100069158(void *a1)
{
  *(void *)&__int128 v17 = a1;
  unint64_t v2 = sub_10007A3F0();
  id v3 = a1;
  uint64_t v4 = sub_100008E00(&qword_1001154B8);
  if (!swift_dynamicCast(v18, &v17, v2, v4, 6LL))
  {
    uint64_t v19 = 0LL;
    memset(v18, 0, sizeof(v18));
    uint64_t v7 = sub_10007A42C((uint64_t)v18);
    uint64_t v8 = NSData.startIndex.getter(v7);
    uint64_t v9 = NSData.endIndex.getter();
    uint64_t v10 = NSData.startIndex.getter(v9);
    uint64_t v11 = NSData.endIndex.getter();
    if (v8 < v10 || v11 < v8)
    {
      __break(1u);
    }

    else
    {
      uint64_t v12 = NSData.startIndex.getter(v11);
      uint64_t v13 = NSData.endIndex.getter();
      if (v9 >= v12 && v13 >= v9)
      {
        if (!__OFSUB__(v9, v8))
        {
          *(void *)&v18[0] = sub_1000792F4(v9 - v8);
          *((void *)&v18[0] + 1) = v14;
          __chkstk_darwin(*(void *)&v18[0]);
          sub_100075CD4();
          __asm { BR              X12 }
        }

uint64_t sub_10006954C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006C838(3LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16) == 3LL)
    {
      int v6 = (*(unsigned __int8 *)(result + 34) << 16) | (*(unsigned __int8 *)(result + 33) << 8);
      int v7 = *(unsigned __int8 *)(result + 32);
      swift_bridgeObjectRelease(result);
      *(void *)(a3 + 24) = &type metadata for UInt32;
      uint64_t result = sub_100069840();
      *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
      *(_DWORD *)a3 = v6 | v7;
    }

    else
    {
      swift_bridgeObjectRelease(result);
      unint64_t v8 = sub_10000AE14();
      uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
      *(_BYTE *)uint64_t v10 = 30;
      *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
      *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v10 + 24) = 0x2928727543746567LL;
      *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
      *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
      *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
      *(void *)(v10 + 56) = 415LL;
      return swift_willThrow(v9);
    }
  }

  return result;
}

uint64_t sub_100069648@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006C838(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      unint64_t v8 = v6;
      uint64_t v9 = v7;
      int v10 = *(unsigned __int8 *)(result + 32);
      swift_bridgeObjectRelease(result);
      if (v10 == 4)
      {
        uint64_t v13 = sub_10006BD8C(1LL, v8, v9, (uint64_t)sub_100076E28);
        *(void *)(a3 + 24) = &type metadata for UInt32;
        uint64_t result = sub_100069840();
        *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
        if (*(void *)(v13 + 16))
        {
          int v14 = *(_DWORD *)(v13 + 32);
          uint64_t result = swift_bridgeObjectRelease(v13);
          *(_DWORD *)a3 = v14;
          return result;
        }

        goto LABEL_15;
      }

      if (v10 == 2)
      {
        uint64_t v15 = sub_10006A4E8(1LL, v8, v9);
        *(void *)(a3 + 24) = &type metadata for UInt16;
        uint64_t result = sub_100069884();
        *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
        if (*(void *)(v15 + 16))
        {
          __int16 v16 = *(_WORD *)(v15 + 32);
          uint64_t result = swift_bridgeObjectRelease(v15);
          *(_WORD *)a3 = v16;
          return result;
        }

        goto LABEL_16;
      }

      if (v10 != 1)
      {
        unint64_t v17 = sub_10000AE14();
        uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
        *(_BYTE *)uint64_t v19 = 1;
        *(void *)(v19 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
        *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v19 + 24) = 0x2928727543746567LL;
        *(void *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0xE800000000000000LL;
        *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
        *(void *)(v19 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
        *(void *)(v19 + 56) = 437LL;
        return swift_willThrow(v18);
      }

      uint64_t v11 = sub_10006C838(1LL, v8, v9);
      *(void *)(a3 + 24) = &type metadata for UInt8;
      uint64_t result = sub_1000698C8();
      *(void *)(a3 + 3swift_unknownObjectWeakDestroy(v0 + 2) = result;
      if (*(void *)(v11 + 16))
      {
        char v12 = *(_BYTE *)(v11 + 32);
        uint64_t result = swift_bridgeObjectRelease(v11);
        *(_BYTE *)a3 = v12;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  return result;
}

unint64_t sub_100069840()
{
  unint64_t result = qword_100115210;
  if (!qword_100115210)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_100115210);
  }

  return result;
}

unint64_t sub_100069884()
{
  unint64_t result = qword_100115218;
  if (!qword_100115218)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_100115218);
  }

  return result;
}

unint64_t sub_1000698C8()
{
  unint64_t result = qword_100115220;
  if (!qword_100115220)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100115220);
  }

  return result;
}

unint64_t sub_100069910()
{
  unint64_t result = qword_100115228;
  if (!qword_100115228)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for tADCControlRequestParameterBlockLayout,  &type metadata for tADCControlRequestParameterBlockLayout);
    atomic_store(result, (unint64_t *)&qword_100115228);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for tADCControlRequestParameterBlockLayout( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }

uint64_t storeEnumTagSinglePayload for tADCControlRequestParameterBlockLayout( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100069A30 + 4 * byte_1000D7A79[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100069A64 + 4 * byte_1000D7A74[v4]))();
}

uint64_t sub_100069A64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069A6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100069A74LL);
  }
  return result;
}

uint64_t sub_100069A80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100069A88LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_100069A8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069A94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for tADCControlRequestParameterBlockLayout()
{
  return &type metadata for tADCControlRequestParameterBlockLayout;
}

void destroy for ADCControlRequestParameterBlock(uint64_t a1)
{
}

uint64_t _s9AUASDCore31ADCControlRequestParameterBlockVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  int v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v3;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ADCControlRequestParameterBlock(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = v4;
  id v6 = v4;

  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ADCControlRequestParameterBlock(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose((const void *)(v30 - 136), 8) = *(void *)(a2 + 8);

  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ADCControlRequestParameterBlock(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vswift_unknownObjectWeakDestroy(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ADCControlRequestParameterBlock(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose((const void *)(v30 - 136), 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ADCControlRequestParameterBlock()
{
  return &type metadata for ADCControlRequestParameterBlock;
}

uint64_t storeEnumTagSinglePayload for tADCControlRequestParameterBlockType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100069C80 + 4 * byte_1000D7A83[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100069CB4 + 4 * byte_1000D7A7E[v4]))();
}

uint64_t sub_100069CB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069CBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100069CC4LL);
  }
  return result;
}

uint64_t sub_100069CD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100069CD8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100069CDC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069CE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for tADCControlRequestParameterBlockType()
{
  return &type metadata for tADCControlRequestParameterBlockType;
}

unint64_t sub_100069D04()
{
  unint64_t result = qword_100115230;
  if (!qword_100115230)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D7BD8, &type metadata for tADCControlRequestParameterBlockType);
    atomic_store(result, (unint64_t *)&qword_100115230);
  }

  return result;
}

uint64_t sub_100069D48(__int16 a1, void *a2)
{
  if ((a1 & 0x100) == 0)
  {
    sub_100069158(a2);
    __asm { BR              X10 }
  }

  unint64_t v3 = sub_10000AE14();
  uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
  *(_BYTE *)uint64_t v5 = 30;
  *(void *)(v5 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v5 + 24) = 0xD000000000000015LL;
  *(void *)(v5 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D0490LL;
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001ELL;
  *(void *)(v5 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D03F0LL;
  *(void *)(v5 + 56) = 448LL;
  return swift_willThrow(v4);
}

uint64_t sub_10006A0E0@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t result = sub_10006A4E8(1LL, a1, a2);
  if (!v5)
  {
    if (*(void *)(result + 16))
    {
      char v12 = v10;
      uint64_t v13 = v11;
      uint64_t v14 = *(unsigned __int16 *)(result + 32);
      swift_bridgeObjectRelease(result);
      if (v14 == a3)
      {
        switch(a4)
        {
          case 2:
            uint64_t v15 = sub_1000701E0(a3, v12, v13, (uint64_t)sub_10007A028);
            int64_t v25 = *(void *)(v15 + 16);
            if (v25)
            {
              uint64_t v42 = a5;
              unint64_t v46 = _swiftEmptyArrayStorage;
              sub_100070A4C(0, v25, 0);
              unint64_t v17 = _swiftEmptyArrayStorage;
              uint64_t v41 = v15;
              Class v26 = (_DWORD *)(v15 + 40);
              do
              {
                uint64_t v27 = *((void *)v26 - 1);
                int v28 = *v26;
                unint64_t v46 = v17;
                unint64_t v30 = v17[2];
                unint64_t v29 = v17[3];
                if (v30 >= v29 >> 1)
                {
                  sub_100070A4C(v29 > 1, v30 + 1, 1);
                  unint64_t v17 = v46;
                }

                v26 += 3;
                uint64_t v44 = &type metadata for AudioClassRange32bit;
                id v45 = &off_100105C98;
                *(void *)&__int128 v43 = v27;
                DWORD2(v4swift_unknownObjectWeakDestroy(v0 + 3) = v28;
                v17[2] = v30 + 1;
                sub_10000AF84(&v43, (uint64_t)&v17[5 * v30 + 4]);
                --v25;
              }

              while (v25);
              goto LABEL_29;
            }

uint64_t sub_10006A4E8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (a1 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    JUMPOUT(0x10006A7B0LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    uint64_t v6 = 2 * a1;
    sub_10009D06C((uint64_t)a2, a3, 2 * a1);
    if (!v3)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

_BYTE *sub_10006A7F4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006A8A4(a1, a2, a3);
}

_BYTE *sub_10006A84C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006A8A4(a1, a2, a3);
}

_BYTE *sub_10006A8A4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if ((unint64_t)(a1 - 0x2000000000000000LL) >> 62 != 3)
  {
    __break(1u);
    JUMPOUT(0x10006ABC0LL);
  }

  if (a2)
  {
    uint64_t v5 = 4 * a1;
    sub_10009D06C((uint64_t)a2, a3, 4 * a1);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 50;
    *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000001BLL;
    *(void *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v9 + 56) = 702LL;
    swift_willThrow(v8);
  }

  return a2;
}

uint64_t sub_10006AC04(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_1000701E0(a1, a2, a3, (uint64_t)sub_10007650C);
}

uint64_t sub_10006AC54(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E994(a1, a2, a3, (uint64_t)sub_100076654);
}

uint64_t sub_10006ACA4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 17 * a1;
  if ((unsigned __int128)(a1 * (__int128)17LL) >> 64 != (17 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006AF70LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006AFB4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_1000701E0(a1, a2, a3, (uint64_t)sub_100076CE0);
}

uint64_t sub_10006B004(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D034(a1, a2, a3, (uint64_t)sub_100077134);
}

uint64_t sub_10006B054(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 20 * a1;
  if ((unsigned __int128)(a1 * (__int128)20LL) >> 64 != (20 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006B324LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006B368(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 19 * a1;
  if ((unsigned __int128)(a1 * (__int128)19LL) >> 64 != (19 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006B634LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006B678(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_1000701E0(a1, a2, a3, (uint64_t)sub_1000778B4);
}

uint64_t sub_10006B6C8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 11 * a1;
  if ((unsigned __int128)(a1 * (__int128)11LL) >> 64 != (11 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006B994LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006B9D8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006F3D4(a1, a2, a3, (uint64_t)sub_100077D08);
}

uint64_t sub_10006BA28(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 18 * a1;
  if ((unsigned __int128)(a1 * (__int128)18LL) >> 64 != (18 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006BCF8LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006BD3C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006BD8C(a1, a2, a3, (uint64_t)sub_100076E28);
}

uint64_t sub_10006BD8C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a1 - 0x2000000000000000LL) >> 62 != 3)
  {
    __break(1u);
    JUMPOUT(0x10006C070LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = 4 * a1;
    sub_10009D06C((uint64_t)a2, a3, 4 * a1);
    if (!v4)
    {
      sub_100076390(a2, v7);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006C0B4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006FE10(a1, a2, a3, (uint64_t)sub_100078190);
}

uint64_t sub_10006C104(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C154(a1, a2, a3, (uint64_t)sub_100070848);
}

uint64_t sub_10006C154(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if (a1 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    JUMPOUT(0x10006C43CLL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = 2 * a1;
    sub_10009D06C((uint64_t)a2, a3, 2 * a1);
    if (!v4)
    {
      sub_100076390(a2, v7);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

_BYTE *sub_10006C480(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C4D8(a1, a2, a3);
}

_BYTE *sub_10006C4D8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4 = 6 * a1;
  if ((unsigned __int128)(a1 * (__int128)6LL) >> 64 != (6 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006C7F4LL);
  }

  if (a2)
  {
    sub_10009D06C((uint64_t)a2, a3, v4);
    if (!v3)
    {
      sub_100076390(a2, v4);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 50;
    *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000001BLL;
    *(void *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v9 + 56) = 702LL;
    swift_willThrow(v8);
  }

  return a2;
}

uint64_t sub_10006C838(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, a1);
    if (!v3)
    {
      sub_100076390(a2, v4);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 50;
    *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000001BLL;
    *(void *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v9 + 56) = 702LL;
    swift_willThrow(v8);
  }

  return v4;
}

_BYTE *sub_10006CB30(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006CB88(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C154(a1, a2, a3, (uint64_t)sub_1000708D0);
}

_BYTE *sub_10006CBD8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

_BYTE *sub_10006CC30(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4 = 5 * a1;
  if ((unsigned __int128)(a1 * (__int128)5LL) >> 64 != (5 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006CF48LL);
  }

  if (a2)
  {
    sub_10009D06C((uint64_t)a2, a3, v4);
    if (!v3)
    {
      sub_100076390(a2, v4);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 50;
    *(void *)(v9 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000001BLL;
    *(void *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v9 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v9 + 56) = 702LL;
    swift_willThrow(v8);
  }

  return a2;
}

_BYTE *sub_10006CF8C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006CFE4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D034(a1, a2, a3, (uint64_t)sub_100077010);
}

uint64_t sub_10006D034(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a1 - 0x1000000000000000LL) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x10006D318LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = 8 * a1;
    sub_10009D06C((uint64_t)a2, a3, 8 * a1);
    if (!v4)
    {
      sub_100076390(a2, v7);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006D35C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006DB2C(a1, a2, a3, (uint64_t)sub_100076EF8);
}

uint64_t sub_10006D3AC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C154(a1, a2, a3, (uint64_t)sub_10007097C);
}

_BYTE *sub_10006D3FC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006D454(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 6 * a1;
  if ((unsigned __int128)(a1 * (__int128)6LL) >> 64 != (6 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006D738LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006D77C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006DEF4(a1, a2, a3, (uint64_t)sub_1000789B4);
}

uint64_t sub_10006D7CC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 5 * a1;
  if ((unsigned __int128)(a1 * (__int128)5LL) >> 64 != (5 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006DA98LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006DADC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006DB2C(a1, a2, a3, (uint64_t)sub_100078798);
}

uint64_t sub_10006DB2C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 7 * a1;
  if ((unsigned __int128)(a1 * (__int128)7LL) >> 64 != (7 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006DE10LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006DE54(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D454(a1, a2, a3, (uint64_t)sub_100078694);
}

uint64_t sub_10006DEA4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006DEF4(a1, a2, a3, (uint64_t)sub_1000785A4);
}

uint64_t sub_10006DEF4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 3 * a1;
  if ((unsigned __int128)(a1 * (__int128)3LL) >> 64 != (3 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006E1D4LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006E218(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006DB2C(a1, a2, a3, (uint64_t)sub_10007847C);
}

_BYTE *sub_10006E268(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C4D8(a1, a2, a3);
}

_BYTE *sub_10006E2C0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

_BYTE *sub_10006E318(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C4D8(a1, a2, a3);
}

_BYTE *sub_10006E370(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

_BYTE *sub_10006E3C8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006E420(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E470(a1, a2, a3, (uint64_t)sub_100070C28);
}

uint64_t sub_10006E470(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 7 * a1;
  if ((unsigned __int128)(a1 * (__int128)7LL) >> 64 != (7 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006E760LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006E7A4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E470(a1, a2, a3, (uint64_t)sub_100070C4C);
}

uint64_t sub_10006E7F4(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D034(a1, a2, a3, (uint64_t)sub_1000777B0);
}

uint64_t sub_10006E844(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E470(a1, a2, a3, (uint64_t)sub_100070C8C);
}

_BYTE *sub_10006E894(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006C4D8(a1, a2, a3);
}

_BYTE *sub_10006E8EC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006E944(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E994(a1, a2, a3, (uint64_t)sub_100077BF0);
}

uint64_t sub_10006E994(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 9 * a1;
  if ((unsigned __int128)(a1 * (__int128)9LL) >> 64 != (9 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006EC74LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006ECB8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006BD8C(a1, a2, a3, (uint64_t)sub_100076848);
}

_BYTE *sub_10006ED08(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

_BYTE *sub_10006ED60(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006EDB8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D454(a1, a2, a3, (uint64_t)sub_10007694C);
}

_BYTE *sub_10006EE08(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006EE60(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E470(a1, a2, a3, (uint64_t)sub_100070DB8);
}

_BYTE *sub_10006EEB0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006CC30(a1, a2, a3);
}

uint64_t sub_10006EF08(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006E470(a1, a2, a3, (uint64_t)sub_100070E00);
}

uint64_t sub_10006EF58(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006EFA8(a1, a2, a3, (uint64_t)sub_100070E24);
}

uint64_t sub_10006EFA8(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)(a1 - 0x1000000000000000LL) >> 61 != 7)
  {
    __break(1u);
    JUMPOUT(0x10006F298LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = 8 * a1;
    sub_10009D06C((uint64_t)a2, a3, 8 * a1);
    if (!v4)
    {
      sub_100076390(a2, v7);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006F2DC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006EFA8(a1, a2, a3, (uint64_t)sub_100070E48);
}

_BYTE *sub_10006F32C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006A8A4(a1, a2, a3);
}

uint64_t sub_10006F384(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006F3D4(a1, a2, a3, (uint64_t)sub_100077F38);
}

uint64_t sub_10006F3D4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 22 * a1;
  if ((unsigned __int128)(a1 * (__int128)22LL) >> 64 != (22 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006F6B4LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_10006F6F8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5 = 24 * a1;
  if ((unsigned __int128)(a1 * (__int128)24LL) >> 64 != (24 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x10006F9C8LL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    sub_10009D06C((uint64_t)a2, a3, v5);
    if (!v3)
    {
      sub_100076390(a2, v5);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006FA0C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006BD8C(a1, a2, a3, (uint64_t)sub_100078F94);
}

uint64_t sub_10006FA5C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006D454(a1, a2, a3, (uint64_t)sub_100078E98);
}

uint64_t sub_10006FAAC(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if ((unint64_t)(a1 - 0x800000000000000LL) >> 60 != 15)
  {
    __break(1u);
    JUMPOUT(0x10006FD7CLL);
  }

  if (a2)
  {
    uint64_t v4 = a1;
    uint64_t v6 = 16 * a1;
    sub_10009D06C((uint64_t)a2, a3, 16 * a1);
    if (!v3)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v8 = sub_10000AE14();
    uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
    *(_BYTE *)uint64_t v10 = 50;
    *(void *)(v10 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v10 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v10 + 56) = 702LL;
    swift_willThrow(v9);
  }

  return v4;
}

uint64_t sub_10006FDC0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006FE10(a1, a2, a3, (uint64_t)sub_100078CA8);
}

uint64_t sub_10006FE10(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 14 * a1;
  if ((unsigned __int128)(a1 * (__int128)14LL) >> 64 != (14 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x1000700F4LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

_BYTE *sub_100070138(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_10006A8A4(a1, a2, a3);
}

uint64_t sub_100070190(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_1000701E0(a1, a2, a3, (uint64_t)sub_100078AA4);
}

uint64_t sub_1000701E0(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 12 * a1;
  if ((unsigned __int128)(a1 * (__int128)12LL) >> 64 != (12 * a1) >> 63)
  {
    __break(1u);
    JUMPOUT(0x1000704C4LL);
  }

  if (a2)
  {
    uint64_t v5 = a4;
    sub_10009D06C((uint64_t)a2, a3, v6);
    if (!v4)
    {
      sub_100076390(a2, v6);
      __asm { BR              X10 }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 50;
    *(void *)(v11 + _Block_object_dispose((const void *)(v30 - 136), 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 3swift_unknownObjectWeakDestroy(v0 + 2) = 0x80000001000D04B0LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/TransferManager.swift",  31LL,  2LL,  100LL, 0) = 0xD00000000000001FLL;
    *(void *)(v11 + 4_Block_object_dispose((const void *)(v30 - 136), 8) = 0x80000001000D04D0LL;
    *(void *)(v11 + 56) = 702LL;
    swift_willThrow(v10);
  }

  return v5;
}

uint64_t sub_100070508(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100070F78(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100070524(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073218(a1, a2, a3, *v3, &qword_100115238);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100070548(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000710E0(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_100070564(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071258(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100070580(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000713E0(a1, a2, a3, *v3, &qword_100115260);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000705A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000713E0(a1, a2, a3, *v3, &qword_100115268);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000705C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071554(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000705E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000716C8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070600(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071820(a1, a2, a3, *v3, &qword_100115478);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070624(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071820(a1, a2, a3, *v3, &qword_100115488);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070648(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071978(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070664(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071AF0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070680(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073A90(a1, a2, a3, *v3, &qword_100113B40);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000706A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071C54(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1000706C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071DDC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000706DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071F38(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000706F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072098(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070714(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072210(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070730(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007236C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10007074C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000724E0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070768(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007265C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070784(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000727D4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000707A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072954(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000707BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072AD4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000707D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072C4C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000707F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072DC8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070810(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100072F34(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10007082C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073098(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070848(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073630(a1, a2, a3, *v3, &qword_100115378);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10007086C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073218(a1, a2, a3, *v3, &qword_100115380);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070890(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073388(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000708AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115388);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000708D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073630(a1, a2, a3, *v3, &qword_100115390);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000708F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115398);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070918(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_1001153A0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10007093C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000734D4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070958(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_1001153B0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10007097C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073630(a1, a2, a3, *v3, &qword_1001153C0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000709A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_1001153C8);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000709C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073784(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000709E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007390C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1000709FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073BE8(a1, a2, a3, (void *)*v3, &qword_100115300, &qword_100113B30);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100070A28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073A90(a1, a2, a3, *v3, &qword_100115468);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070A4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073BE8(a1, a2, a3, (void *)*v3, &qword_1001154A0, &qword_100114558);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_100070A78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073D8C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070A94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073F04(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070AB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074078(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070ACC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000741D4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070AE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074330(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074490(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007460C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074780(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000748DC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073218(a1, a2, a3, *v3, &qword_1001153E0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070B98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_1001153E8);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070BBC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073218(a1, a2, a3, *v3, &qword_1001153F0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070BE0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_1001153F8);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070C04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115400);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070C28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_100115408);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070C4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_100115410);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070C70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074A58(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070C8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_100115420);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070CB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073218(a1, a2, a3, *v3, &qword_100115430);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070CD4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115438);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070CF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074BB4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070D14(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074D18(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070D30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115320);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070D54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115328);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070D78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074FD0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070D94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115348);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070DB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_100115350);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070DDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100074E74(a1, a2, a3, *v3, &qword_100115358);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070E00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075144(a1, a2, a3, *v3, &qword_100115360);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070E24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073A90(a1, a2, a3, *v3, &qword_1001152F0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070E48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100073A90(a1, a2, a3, *v3, &qword_100115470);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100070E6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071820(a1, a2, a3, *v3, &qword_1001152E0);
  uint64_t *v3 = (char *)result;
  return result;
}