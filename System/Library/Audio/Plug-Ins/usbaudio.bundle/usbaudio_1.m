uint64_t sub_100070E90(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;
  result = sub_1000752BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070EAC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007543C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070EC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000755B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070EE4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075710(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070F00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075884(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070F1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000759E0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070F38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100071820(a1, a2, a3, *v3, &qword_1001152C8);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070F5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100075B5C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100070F78(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100114E30);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }

  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v14 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      v18 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v14 >= v18 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v14 + 1, 1LL);
      }
LABEL_34:
      v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v4);
      specialized Array._endMutation()(v19);
      a1 = (unint64_t *)swift_release(v4);
      v2 = *v1;
      if (*v1 >> 62) {
        break;
      }
    }

    if (v2 < 0) {
      v20 = *v1;
    }
    else {
      v20 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    a1 = (unint64_t *)swift_bridgeObjectRelease(v2);
  }

  while (v21 > 0);
LABEL_41:
  v22 = _swiftEmptyArrayStorage;
LABEL_42:
LABEL_51:
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    else {
      v31 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v32 < 1) {
      goto LABEL_72;
    }
LABEL_53:
    swift_bridgeObjectRelease(v2);
    *v1 = (unint64_t)_swiftEmptyArrayStorage;
  }

  else
  {
LABEL_72:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000710E0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100114E20);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    memcpy(v13, v14, 24 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071258(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115250);
    v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100008E00(&qword_100115258);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000713E0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    int64_t v12 = (char *)swift_allocObject(v11, 12 * v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 12);
  }

  else
  {
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v12 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[12 * v9]) {
      memmove(v14, v15, 12 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v15 >= &v14[12 * v9] || v14 >= &v15[12 * v9])
  {
    memcpy(v14, v15, 12 * v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100071554(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115270);
    uint64_t v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000716C8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115240);
    uint64_t v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    int64_t v13 = v12 - 32;
    if (v12 < 32) {
      int64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8]) {
      memmove(v14, v15, 2 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071820(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    int64_t v12 = (char *)swift_allocObject(v11, 4 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 29;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * (v14 >> 2);
  }

  else
  {
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[4 * v9]) {
      memmove(v15, v16, 4 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v16 >= &v15[4 * v9] || v15 >= &v16[4 * v9])
  {
    memcpy(v15, v16, 4 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100071978(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115308);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8]) {
      memmove(v13, v14, 12 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[12 * v8] || v13 >= &v14[12 * v8])
  {
    memcpy(v13, v14, 12 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071AF0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115310);
    uint64_t v11 = (char *)swift_allocObject(v10, 9 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 9);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 9 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071C54(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115330);
    uint64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100008E00(&qword_100115338);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071DDC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100114EC8);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100071F38(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115368);
    uint64_t v11 = (char *)swift_allocObject(v10, 17 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 17);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 17 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072098(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115370);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8]) {
      memmove(v13, v14, 12 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[12 * v8] || v13 >= &v14[12 * v8])
  {
    memcpy(v13, v14, 12 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072210(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001153B8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10007236C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001153D0);
    uint64_t v11 = (char *)swift_allocObject(v10, 20 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 20);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[20 * v8]) {
      memmove(v13, v14, 20 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[20 * v8] || v13 >= &v14[20 * v8])
  {
    memcpy(v13, v14, 20 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000724E0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001153D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 19 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 19);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[19 * v8]) {
      memmove(v13, v14, 19 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[19 * v8] || v13 >= &v14[19 * v8])
  {
    memcpy(v13, v14, 19 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10007265C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115428);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8]) {
      memmove(v13, v14, 12 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[12 * v8] || v13 >= &v14[12 * v8])
  {
    memcpy(v13, v14, 12 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000727D4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115440);
    uint64_t v11 = (char *)swift_allocObject(v10, 11 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 11);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[11 * v8]) {
      memmove(v13, v14, 11 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[11 * v8] || v13 >= &v14[11 * v8])
  {
    memcpy(v13, v14, 11 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072954(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115450);
    uint64_t v11 = (char *)swift_allocObject(v10, 22 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 22);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[22 * v8]) {
      memmove(v13, v14, 22 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[22 * v8] || v13 >= &v14[22 * v8])
  {
    memcpy(v13, v14, 22 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072AD4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115458);
    uint64_t v11 = (char *)swift_allocObject(v10, 18 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 18);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[18 * v8]) {
      memmove(v13, v14, 18 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[18 * v8] || v13 >= &v14[18 * v8])
  {
    memcpy(v13, v14, 18 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072C4C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115460);
    uint64_t v11 = (char *)swift_allocObject(v10, 14 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 14);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[14 * v8]) {
      memmove(v13, v14, 14 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[14 * v8] || v13 >= &v14[14 * v8])
  {
    memcpy(v13, v14, 14 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072DC8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001150A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 12 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100072F34(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100114E40);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  size_t v16 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100073098(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115480);
    uint64_t v11 = (char *)swift_allocObject(v10, 80 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[80 * v8]) {
      memmove(v13, v14, 80 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[80 * v8] || v13 >= &v14[80 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100073218(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    size_t v12 = (char *)swift_allocObject(v11, 6 * v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 6);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v12 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[6 * v9]) {
      memmove(v14, v15, 6 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v15 >= &v14[6 * v9] || v14 >= &v15[6 * v9])
  {
    memcpy(v14, v15, 6 * v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100073388(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100113B48);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000734D4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001153A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100073630(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    int64_t v12 = (char *)swift_allocObject(v11, 2 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    int64_t v14 = v13 - 32;
    if (v13 < 32) {
      int64_t v14 = v13 - 31;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = v14 & 0xFFFFFFFFFFFFFFFELL;
  }

  else
  {
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v15 = v12 + 32;
  size_t v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[2 * v9]) {
      memmove(v15, v16, 2 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v16 >= &v15[2 * v9] || v15 >= &v16[2 * v9])
  {
    memcpy(v15, v16, 2 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100073784(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152F8);
    uint64_t v11 = (char *)swift_allocObject(v10, 168 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 168);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[168 * v8]) {
      memmove(v13, v14, 168 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[168 * v8] || v13 >= &v14[168 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10007390C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100114F48);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  int64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100073A90(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    size_t v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7LL);
    int64_t v13 = j__malloc_size(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 25;
    }
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * (v14 >> 3);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v15 = v12 + 32;
  size_t v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[8 * v9]) {
      memmove(v15, v16, 8 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v16 >= &v15[8 * v9] || v15 >= &v16[8 * v9])
  {
    memcpy(v15, v16, 8 * v9);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100073BE8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100008E00(a5);
    uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11) {
      memmove(v14 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100008E00(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }

uint64_t sub_100073D8C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001154A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8]) {
      memmove(v13, v14, 12 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[12 * v8] || v13 >= &v14[12 * v8])
  {
    memcpy(v13, v14, 12 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100073F04(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115498);
    uint64_t v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074078(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115490);
    uint64_t v11 = (char *)swift_allocObject(v10, 3 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000741D4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115290);
    uint64_t v11 = (char *)swift_allocObject(v10, 3 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074330(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115288);
    uint64_t v11 = (char *)swift_allocObject(v10, 5 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 5 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074490(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115280);
    uint64_t v11 = (char *)swift_allocObject(v10, 7 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 7);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[8 * v8 - v8]) {
      memmove(v13, v14, 7 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[7 * v8] || v13 >= &v14[7 * v8])
  {
    memcpy(v13, v14, 7 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10007460C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115278);
    uint64_t v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074780(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115298);
    uint64_t v11 = (char *)swift_allocObject(v10, 3 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000748DC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152A0);
    uint64_t v11 = (char *)swift_allocObject(v10, 7 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 7);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[8 * v8 - v8]) {
      memmove(v13, v14, 7 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[7 * v8] || v13 >= &v14[7 * v8])
  {
    memcpy(v13, v14, 7 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074A58(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115418);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074BB4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115448);
    uint64_t v11 = (char *)swift_allocObject(v10, 9 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 9);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 9 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074D18(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115318);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100074E74(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    int64_t v12 = (char *)swift_allocObject(v11, 5 * v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 5);
  }

  else
  {
    int64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  size_t v15 = a4 + 32;
  size_t v16 = 5 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_100074FD0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100115340);
    uint64_t v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100075144(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v8 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    uint64_t v11 = sub_100008E00(a5);
    size_t v12 = (char *)swift_allocObject(v11, 7 * v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 7);
  }

  else
  {
    size_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[8 * v9 - v9]) {
      memmove(v14, v15, 7 * v9);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v15 >= &v14[7 * v9] || v14 >= &v15[7 * v9])
  {
    memcpy(v14, v15, 7 * v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }

uint64_t sub_1000752BC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152E8);
    uint64_t v11 = (char *)swift_allocObject(v10, 22 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 22);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[22 * v8]) {
      memmove(v13, v14, 22 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[22 * v8] || v13 >= &v14[22 * v8])
  {
    memcpy(v13, v14, 22 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10007543C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  size_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8]) {
      memmove(v13, v14, 24 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    memcpy(v13, v14, 24 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000755B4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152C0);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100075710(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152B8);
    uint64_t v11 = (char *)swift_allocObject(v10, 6 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[6 * v8]) {
      memmove(v13, v14, 6 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[6 * v8] || v13 >= &v14[6 * v8])
  {
    memcpy(v13, v14, 6 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100075884(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152B0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1000759E0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152A8);
    uint64_t v11 = (char *)swift_allocObject(v10, 14 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 14);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[14 * v8]) {
      memmove(v13, v14, 14 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[14 * v8] || v13 >= &v14[14 * v8])
  {
    memcpy(v13, v14, 14 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_100075B5C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_1001152D0);
    uint64_t v11 = (char *)swift_allocObject(v10, 12 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[12 * v8]) {
      memmove(v13, v14, 12 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[12 * v8] || v13 >= &v14[12 * v8])
  {
    memcpy(v13, v14, 12 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

void sub_100075CD4()
{
  __asm { BR              X11 }

void *sub_100075D34@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  uint64_t v11 = BYTE5(a1);
  size_t v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  unint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  void *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_100075FC0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_1000762D0(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_100079390((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_100079408((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void *sub_100076034( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_100076098(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void sub_100076144(void *a1, _BYTE *a2, uint64_t a3)
{
  id v7 = v3;
  uint64_t v8 = NSData.startIndex.getter();

  v21 = a2;
  if (!a2 || !a3) {
    goto LABEL_5;
  }
  if (a3 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }

  char v9 = NSData.subscript.getter(v8);
  id v10 = v7;
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }

    v20 = a1;
    uint64_t v13 = 1LL;
    while (a3 != v13)
    {
      uint64_t v14 = v8 + v13;
      if (v8 + v13 == NSData.endIndex.getter())
      {
        v8 += v13;
        goto LABEL_18;
      }

      char v15 = NSData.subscript.getter(v8 + v13);
      id v16 = v10;
      uint64_t v17 = NSData.startIndex.getter();
      uint64_t v18 = NSData.endIndex.getter();

      if (v14 < v17 || v14 >= v18) {
        goto LABEL_20;
      }
      uint64_t v19 = v13 + 1;
      v21[v13] = v15;
      uint64_t v13 = v19;
      if (a3 == v19)
      {
        v8 += v19;
LABEL_18:
        a1 = v20;
        goto LABEL_5;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

uint64_t sub_1000762D0(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100076390(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_1000762D0(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

__int16 *sub_10007643C(__int16 *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = (__int16 *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_1000705E4(0, a2, 0);
    uint64_t result = (__int16 *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      __int16 v6 = *v3++;
      __int16 v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_1000705E4(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }

      *((void *)result + 2) = v4 + 1;
      result[v4++ + 16] = v5;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_10007650C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    v20 = v4;
    sub_100070648(0, a2, 0);
    __int16 v5 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      __int16 v12 = *(_WORD *)((char *)v5 + v6 + 8);
      char v13 = *((_BYTE *)v5 + v6 + 10);
      char v14 = *((_BYTE *)v5 + v6 + 11);
      v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v7 + 1;
      if (v7 >= v15 >> 1)
      {
        uint64_t v19 = v8;
        char v18 = *((_BYTE *)v5 + v6 + 11);
        sub_100070648(v15 > 1, v7 + 1, 1);
        char v14 = v18;
        uint64_t v8 = v19;
        __int16 v5 = v20;
        uint64_t result = v21;
      }

      result[2] = v16;
      uint64_t v17 = (char *)result + v8 + v6;
      *((_DWORD *)v17 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v17 + 18) = v9;
      v17[38] = v10;
      v17[39] = v11;
      *((_WORD *)v17 + 20) = v12;
      v17[42] = v13;
      v17[43] = v14;
      v6 += 12LL;
      unint64_t v7 = v16;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100076654(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v16 = v4;
    sub_100070664(0, a2, 0);
    __int16 v5 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 9 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      char v12 = *((_BYTE *)v5 + v6 + 8);
      uint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        sub_100070664(v13 > 1, v7 + 1, 1);
        __int16 v5 = v16;
        uint64_t result = v17;
      }

      result[2] = v14;
      unint64_t v15 = (char *)result + v8 + v6;
      *((_DWORD *)v15 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v15 + 18) = v9;
      v15[38] = v10;
      v15[39] = v11;
      v15[40] = v12;
      v6 += 9LL;
      unint64_t v7 = v14;
      --v3;
    }

    while (v3);
  }

  return result;
}

char *sub_100076778(char *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = (char *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070890(0, a2, 0);
    uint64_t result = (char *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      char v6 = *v3++;
      char v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_100070890(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }

      *((void *)result + 2) = v4 + 1;
      result[v4++ + 32] = v5;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100076848(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070D14(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 4 * v5;
    do
    {
      char v7 = *((_BYTE *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 1);
      char v9 = *((_BYTE *)v3 + v4 + 3);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_100070D14(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v6 + v4;
      v12[32] = v7;
      *(_WORD *)(v12 + 33) = v8;
      v12[35] = v9;
      v4 += 4LL;
      unint64_t v5 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_10007694C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070D78(0, a2, 0);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      char v8 = *((_BYTE *)v4 + v5 + 4);
      char v9 = *((_BYTE *)v4 + v5 + 5);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_100070D78(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_DWORD *)v12 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v12[36] = v8;
      v12[37] = v9;
      v5 += 6LL;
      unint64_t v6 = v11;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100076A64(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    uint64_t v17 = v4;
    a3(0, a2, 0LL);
    uint64_t v5 = v17;
    uint64_t v6 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 5 * v7;
    do
    {
      char v9 = *((_BYTE *)v5 + v6);
      __int16 v10 = *(_WORD *)((char *)v5 + v6 + 1);
      char v11 = *((_BYTE *)v5 + v6 + 3);
      char v12 = *((_BYTE *)v5 + v6 + 4);
      char v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        a3(v13 > 1, v7 + 1, 1LL);
        uint64_t v5 = v17;
        uint64_t result = v18;
      }

      result[2] = v14;
      unint64_t v15 = (char *)result + v8 + v6;
      v15[32] = v9;
      *(_WORD *)(v15 + 33) = v10;
      v15[35] = v11;
      v15[36] = v12;
      v6 += 5LL;
      unint64_t v7 = v14;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100076B84(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    v24 = v4;
    sub_1000706DC(0, a2, 0);
    uint64_t v5 = v24;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 17 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      char v12 = *((_BYTE *)v5 + v6 + 8);
      int v13 = *(_DWORD *)((char *)v5 + v6 + 9);
      char v14 = *((_BYTE *)v5 + v6 + 13);
      __int16 v15 = *(_WORD *)((char *)v5 + v6 + 14);
      char v16 = *((_BYTE *)v5 + v6 + 16);
      unint64_t v17 = result[3];
      unint64_t v18 = v7 + 1;
      v25 = result;
      if (v7 >= v17 >> 1)
      {
        uint64_t v23 = v8;
        __int16 v21 = *(_WORD *)((char *)v5 + v6 + 14);
        char v22 = *((_BYTE *)v5 + v6 + 13);
        char v20 = *((_BYTE *)v5 + v6 + 16);
        sub_1000706DC(v17 > 1, v7 + 1, 1);
        char v16 = v20;
        __int16 v15 = v21;
        char v14 = v22;
        uint64_t v8 = v23;
        uint64_t v5 = v24;
        uint64_t result = v25;
      }

      result[2] = v18;
      uint64_t v19 = (char *)result + v8 + v6;
      *((_DWORD *)v19 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v19 + 18) = v9;
      v19[38] = v10;
      v19[39] = v11;
      v19[40] = v12;
      *(_DWORD *)(v19 + 41) = v13;
      v19[45] = v14;
      *((_WORD *)v19 + 23) = v15;
      v19[48] = v16;
      v6 += 17LL;
      unint64_t v7 = v18;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100076CE0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    char v20 = v4;
    sub_1000706F8(0, a2, 0);
    uint64_t v5 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      char v12 = *((_BYTE *)v5 + v6 + 8);
      __int16 v13 = *(_WORD *)((char *)v5 + v6 + 9);
      char v14 = *((_BYTE *)v5 + v6 + 11);
      __int16 v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v7 + 1;
      if (v7 >= v15 >> 1)
      {
        uint64_t v19 = v8;
        char v18 = *((_BYTE *)v5 + v6 + 11);
        sub_1000706F8(v15 > 1, v7 + 1, 1);
        char v14 = v18;
        uint64_t v8 = v19;
        uint64_t v5 = v20;
        uint64_t result = v21;
      }

      result[2] = v16;
      unint64_t v17 = (char *)result + v8 + v6;
      *((_DWORD *)v17 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v17 + 18) = v9;
      v17[38] = v10;
      v17[39] = v11;
      v17[40] = v12;
      *(_WORD *)(v17 + 41) = v13;
      v17[43] = v14;
      v6 += 12LL;
      unint64_t v7 = v16;
      --v3;
    }

    while (v3);
  }

  return result;
}

int *sub_100076E28(int *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = (int *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_1000706C0(0, a2, 0);
    uint64_t result = (int *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      int v6 = *v3++;
      int v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_1000706C0(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }

      *((void *)result + 2) = v4 + 1;
      result[v4++ + 8] = v5;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100076EF8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070958(0, a2, 0);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      __int16 v8 = *(_WORD *)((char *)v4 + v5 + 4);
      char v9 = *((_BYTE *)v4 + v5 + 6);
      __int16 v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_100070958(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_DWORD *)v12 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v12 + 18) = v8;
      v12[38] = v9;
      v5 += 7LL;
      unint64_t v6 = v11;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077010(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v3;
    sub_10007093C(0, a2, 0);
    unint64_t v4 = v17;
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 8 * v6;
    do
    {
      char v8 = v4[v5];
      int v9 = *(_DWORD *)((char *)&v4[v5] + 1);
      char v10 = BYTE5(v4[v5]);
      char v11 = BYTE6(v4[v5]);
      char v12 = HIBYTE(v4[v5]);
      char v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        uint64_t v16 = v7;
        sub_10007093C(v13 > 1, v6 + 1, 1);
        uint64_t v7 = v16;
        unint64_t v4 = v17;
        uint64_t result = v18;
      }

      result[2] = v14;
      unint64_t v15 = (char *)result + v7 + v5 * 8;
      v15[32] = v8;
      *(_DWORD *)(v15 + 33) = v9;
      v15[37] = v10;
      v15[38] = v11;
      v15[39] = v12;
      ++v5;
      unint64_t v6 = v14;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t *sub_100077134(uint64_t *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070714(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v5 = *v3;
      uint64_t v7 = result;
      unint64_t v6 = result[3];
      if (v4 >= v6 >> 1)
      {
        sub_100070714(v6 > 1, v4 + 1, 1);
        uint64_t result = v7;
      }

      result[2] = v4 + 1;
      result[v4 + 4] = v5;
      ++v3;
      ++v4;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100077208(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v5 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 5 * v7;
    int v9 = (char *)v5 + 4;
    do
    {
      v3.i32[0] = *((_DWORD *)v9 - 1);
      char v10 = *v9;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v7 + 1;
      if (v7 >= v11 >> 1)
      {
        a3(v11 > 1, v7 + 1, 1LL);
        uint64_t result = v14;
      }

      v9 += 5;
      result[2] = v12;
      unint64_t v13 = (char *)result + v8;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v13[36] = v10;
      v8 += 5LL;
      unint64_t v7 = v12;
      --v4;
    }

    while (v4);
  }

  return result;
}

void *sub_100077304(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 2 * v6;
    uint64_t v8 = (char *)v4 + 1;
    do
    {
      char v9 = *(v8 - 1);
      char v10 = *v8;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1LL);
        uint64_t result = v14;
      }

      v8 += 2;
      result[2] = v12;
      unint64_t v13 = (char *)result + v7;
      v13[32] = v9;
      v13[33] = v10;
      v7 += 2LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_1000773F8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v4;
    sub_100070730(0, a2, 0);
    uint64_t v5 = v17;
    uint64_t v6 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 20 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      int v12 = *(_DWORD *)((char *)v5 + v6 + 8);
      uint64_t v13 = *(void *)((char *)v5 + v6 + 12);
      char v18 = result;
      unint64_t v14 = result[3];
      unint64_t v15 = v7 + 1;
      if (v7 >= v14 >> 1)
      {
        sub_100070730(v14 > 1, v7 + 1, 1);
        uint64_t v5 = v17;
        uint64_t result = v18;
      }

      result[2] = v15;
      uint64_t v16 = (char *)result + v8 + v6;
      *((_DWORD *)v16 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v16 + 18) = v9;
      v16[38] = v10;
      v16[39] = v11;
      *((_DWORD *)v16 + 10) = v12;
      *(void *)(v16 + 44) = v13;
      v6 += 20LL;
      unint64_t v7 = v15;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077530(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    v24 = v4;
    sub_10007074C(0, a2, 0);
    uint64_t v5 = v24;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 19 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      char v11 = *((_BYTE *)v5 + v6 + 7);
      char v12 = *((_BYTE *)v5 + v6 + 8);
      int v13 = *(_DWORD *)((char *)v5 + v6 + 9);
      __int16 v14 = *(_WORD *)((char *)v5 + v6 + 13);
      __int16 v15 = *(_WORD *)((char *)v5 + v6 + 15);
      __int16 v16 = *(_WORD *)((char *)v5 + v6 + 17);
      unint64_t v17 = result[3];
      unint64_t v18 = v7 + 1;
      v25 = result;
      if (v7 >= v17 >> 1)
      {
        uint64_t v23 = v8;
        __int16 v21 = *(_WORD *)((char *)v5 + v6 + 15);
        __int16 v22 = *(_WORD *)((char *)v5 + v6 + 13);
        __int16 v20 = *(_WORD *)((char *)v5 + v6 + 17);
        sub_10007074C(v17 > 1, v7 + 1, 1);
        __int16 v16 = v20;
        __int16 v15 = v21;
        __int16 v14 = v22;
        uint64_t v8 = v23;
        uint64_t v5 = v24;
        uint64_t result = v25;
      }

      result[2] = v18;
      uint64_t v19 = (char *)result + v8 + v6;
      *((_DWORD *)v19 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v19 + 18) = v9;
      v19[38] = v10;
      v19[39] = v11;
      v19[40] = v12;
      *(_DWORD *)(v19 + 41) = v13;
      *(_WORD *)(v19 + 45) = v14;
      *(_WORD *)(v19 + 47) = v15;
      *(_WORD *)(v19 + 49) = v16;
      v6 += 19LL;
      unint64_t v7 = v18;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077690(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v5 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t v6 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 7 * v7;
    do
    {
      v3.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((_BYTE *)v5 + v6 + 6);
      __int16 v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v7 + 1;
      if (v7 >= v11 >> 1)
      {
        a3(v11 > 1, v7 + 1, 1LL);
        uint64_t result = v15;
      }

      result[2] = v12;
      int v13 = (char *)result + v8 + v6;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      *((_WORD *)v13 + 18) = v9;
      v13[38] = v10;
      v6 += 7LL;
      unint64_t v7 = v12;
      --v4;
    }

    while (v4);
  }

  return result;
}

void *sub_1000777B0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070C70(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = v5;
    do
    {
      __int16 v7 = v3[v4];
      int v8 = *(_DWORD *)((char *)&v3[v4] + 2);
      __int16 v9 = HIWORD(v3[v4]);
      int v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_100070C70(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      unint64_t v12 = &result[v6 + v4];
      *((_WORD *)v12 + 16) = v7;
      *(_DWORD *)((char *)v12 + 34) = v8;
      *((_WORD *)v12 + 19) = v9;
      ++v4;
      unint64_t v5 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_1000778B4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v16 = v4;
    sub_100070768(0, a2, 0);
    unint64_t v5 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0LL;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      char v9 = *((_BYTE *)v5 + v6 + 4);
      int v10 = *(_DWORD *)((char *)v5 + v6 + 5);
      char v11 = *((_BYTE *)v5 + v6 + 9);
      __int16 v12 = *(_WORD *)((char *)v5 + v6 + 10);
      unint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        sub_100070768(v13 > 1, v7 + 1, 1);
        unint64_t v5 = v16;
        uint64_t result = v17;
      }

      result[2] = v14;
      __int16 v15 = (char *)result + v8 + v6;
      *((_DWORD *)v15 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v15[36] = v9;
      *(_DWORD *)(v15 + 37) = v10;
      v15[41] = v11;
      *((_WORD *)v15 + 21) = v12;
      v6 += 12LL;
      unint64_t v7 = v14;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_1000779DC(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    uint64_t v8 = (_WORD *)v4 + 2;
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      __int16 v10 = *v8;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1LL);
        uint64_t result = v14;
      }

      v8 += 3;
      result[2] = v12;
      unint64_t v13 = (char *)result + v7;
      *((_DWORD *)v13 + 8) = v9;
      *((_WORD *)v13 + 18) = v10;
      v7 += 6LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077AD4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070784(0, a2, 0);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 11 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      char v8 = *((_BYTE *)v4 + v5 + 4);
      int v9 = *(_DWORD *)((char *)v4 + v5 + 5);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 9);
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        sub_100070784(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }

      result[2] = v12;
      unint64_t v13 = (char *)result + v7 + v5;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v13[36] = v8;
      *(_DWORD *)(v13 + 37) = v9;
      *(_WORD *)(v13 + 41) = v10;
      v5 += 11LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077BF0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070CF8(0, a2, 0);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 9 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      __int16 v8 = *(_WORD *)((char *)v4 + v5 + 4);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 6);
      char v10 = *((_BYTE *)v4 + v5 + 8);
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        sub_100070CF8(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }

      result[2] = v12;
      unint64_t v13 = (char *)result + v7 + v5;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v13 + 18) = v8;
      *((_WORD *)v13 + 19) = v9;
      v13[40] = v10;
      v5 += 9LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100077D08(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_1000707A0(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 22 * v5;
    do
    {
      __int128 v7 = *(_OWORD *)((char *)v3 + v4);
      int v8 = *(_DWORD *)((char *)v3 + v4 + 16);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 20);
      unint64_t v14 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        __int128 v13 = *(_OWORD *)((char *)v3 + v4);
        sub_1000707A0(v10 > 1, v5 + 1, 1);
        __int128 v7 = v13;
        uint64_t result = v14;
      }

      result[2] = v11;
      unint64_t v12 = (char *)result + v6 + v4;
      *((_OWORD *)v12 + 2) = v7;
      *((_DWORD *)v12 + 12) = v8;
      *((_WORD *)v12 + 26) = v9;
      v4 += 22LL;
      unint64_t v5 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100077E18(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v16 = v3;
    sub_1000707BC(0, a2, 0);
    uint64_t v4 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v5 = 0LL;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 18 * v6;
    do
    {
      uint64_t v8 = *(void *)((char *)v4 + v5);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 8);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 10);
      int v11 = *(_DWORD *)((char *)v4 + v5 + 12);
      __int16 v12 = *(_WORD *)((char *)v4 + v5 + 16);
      unint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        sub_1000707BC(v13 > 1, v6 + 1, 1);
        uint64_t v4 = v16;
        uint64_t result = v17;
      }

      result[2] = v14;
      __int16 v15 = (char *)result + v7 + v5;
      *((void *)v15 + 4) = v8;
      *((_WORD *)v15 + 20) = v9;
      *((_WORD *)v15 + 21) = v10;
      *((_DWORD *)v15 + 11) = v11;
      *((_WORD *)v15 + 24) = v12;
      v5 += 18LL;
      unint64_t v6 = v14;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100077F38(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v20 = v3;
    sub_100070E90(0, a2, 0);
    uint64_t v4 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v5 = 0LL;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 22 * v6;
    do
    {
      uint64_t v8 = *(void *)((char *)v4 + v5);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 8);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 10);
      __int16 v11 = *(_WORD *)((char *)v4 + v5 + 12);
      int v12 = *(_DWORD *)((char *)v4 + v5 + 14);
      __int16 v13 = *(_WORD *)((char *)v4 + v5 + 18);
      __int16 v14 = *(_WORD *)((char *)v4 + v5 + 20);
      __int16 v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v6 + 1;
      if (v6 >= v15 >> 1)
      {
        uint64_t v19 = v7;
        __int16 v18 = *(_WORD *)((char *)v4 + v5 + 20);
        sub_100070E90(v15 > 1, v6 + 1, 1);
        __int16 v14 = v18;
        uint64_t v7 = v19;
        uint64_t v4 = v20;
        uint64_t result = v21;
      }

      result[2] = v16;
      unint64_t v17 = (char *)result + v7 + v5;
      *((void *)v17 + 4) = v8;
      *((_WORD *)v17 + 20) = v9;
      *((_WORD *)v17 + 21) = v10;
      *((_WORD *)v17 + 22) = v11;
      *(_DWORD *)(v17 + 46) = v12;
      *((_WORD *)v17 + 25) = v13;
      v5 += 22LL;
      unint64_t v6 = v16;
      *((_WORD *)v17 + 26) = v14;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078078(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070EAC(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 3 * v5;
    do
    {
      __int128 v7 = *(_OWORD *)&v3[v4];
      int v8 = v3[v4 + 2];
      __int16 v9 = WORD2(v3[v4 + 2]);
      __int16 v10 = HIWORD(v3[v4 + 2]);
      unint64_t v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        __int128 v14 = *(_OWORD *)&v3[v4];
        sub_100070EAC(v11 > 1, v5 + 1, 1);
        __int128 v7 = v14;
        uint64_t result = v15;
      }

      result[2] = v12;
      __int16 v13 = &result[v6 + v4];
      *((_OWORD *)v13 + 2) = v7;
      *((_DWORD *)v13 + 12) = v8;
      *((_WORD *)v13 + 26) = v9;
      *((_WORD *)v13 + 27) = v10;
      v4 += 3LL;
      unint64_t v5 = v12;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078190(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_1000707D8(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 14 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      __int16 v10 = *(_WORD *)((char *)v3 + v4 + 12);
      __int128 v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        sub_1000707D8(v11 > 1, v5 + 1, 1);
        uint64_t result = v14;
      }

      result[2] = v12;
      __int16 v13 = (char *)result + v6 + v4;
      *((void *)v13 + 4) = v7;
      *((_WORD *)v13 + 20) = v8;
      *((_WORD *)v13 + 21) = v9;
      *((_WORD *)v13 + 22) = v10;
      v4 += 14LL;
      unint64_t v5 = v12;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t *sub_1000782A4( uint64_t *result, unint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v3 = a2;
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v7 = *v4;
      __int16 v9 = result;
      unint64_t v8 = result[3];
      if (v6 >= v8 >> 1)
      {
        a3(v8 > 1, v6 + 1, 1LL);
        uint64_t result = v9;
      }

      result[2] = v6 + 1;
      result[v6 + 4] = v7;
      ++v4;
      ++v6;
      --v3;
    }

    while (v3);
  }

  return result;
}

__int32 *sub_10007838C(__int32 *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v5 = result;
  uint64_t result = (__int32 *)_swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = (__int32 *)_swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    do
    {
      v3.i32[0] = *v5;
      __int16 v9 = result;
      unint64_t v8 = *((void *)result + 3);
      if (v7 >= v8 >> 1)
      {
        a3(v8 > 1, v7 + 1, 1LL);
        uint64_t result = v9;
      }

      *((void *)result + 2) = v7 + 1;
      result[v7 + 8] = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      ++v5;
      ++v7;
      --v4;
    }

    while (v4);
  }

  return result;
}

void *sub_10007847C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v3;
    sub_100070B58(0, a2, 0);
    uint64_t v4 = v17;
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      __int16 v8 = *(_WORD *)((char *)v4 + v5);
      char v9 = *((_BYTE *)v4 + v5 + 2);
      char v10 = *((_BYTE *)v4 + v5 + 3);
      __int16 v11 = *(_WORD *)((char *)v4 + v5 + 4);
      char v12 = *((_BYTE *)v4 + v5 + 6);
      __int16 v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        uint64_t v16 = v7;
        sub_100070B58(v13 > 1, v6 + 1, 1);
        uint64_t v7 = v16;
        uint64_t v4 = v17;
        uint64_t result = v18;
      }

      result[2] = v14;
      unint64_t v15 = (char *)result + v7 + v5;
      *((_WORD *)v15 + 16) = v8;
      v15[34] = v9;
      v15[35] = v10;
      *((_WORD *)v15 + 18) = v11;
      v15[38] = v12;
      v5 += 7LL;
      unint64_t v6 = v14;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_1000785A4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070B3C(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    unint64_t v6 = (char *)v3 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v6 - 1);
      char v8 = *v6;
      char v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_100070B3C(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }

      v6 += 3;
      result[2] = v10;
      __int16 v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      v11[34] = v8;
      v5 += 3LL;
      unint64_t v4 = v10;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078694(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070B20(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 6 * v5;
    __int16 v7 = (_DWORD *)((char *)v4 + 2);
    do
    {
      __int16 v8 = *((_WORD *)v7 - 1);
      v2.i32[0] = *v7;
      char v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v5 + 1;
      if (v5 >= v9 >> 1)
      {
        sub_100070B20(v9 > 1, v5 + 1, 1);
        uint64_t result = v12;
      }

      __int16 v7 = (_DWORD *)((char *)v7 + 6);
      result[2] = v10;
      __int16 v11 = (char *)result + v6;
      *((_WORD *)v11 + 16) = v8;
      *(_DWORD *)(v11 + 34) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v6 += 6LL;
      unint64_t v5 = v10;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100078798(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070B04(0, a2, 0);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      __int16 v8 = *(_WORD *)((char *)v4 + v5);
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5 + 2);
      char v9 = *((_BYTE *)v4 + v5 + 6);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_100070B04(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_WORD *)v12 + 16) = v8;
      *(_DWORD *)(v12 + 34) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v12[38] = v9;
      v5 += 7LL;
      unint64_t v6 = v11;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_1000788B0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070AE8(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 5 * v5;
    do
    {
      __int16 v7 = *(_WORD *)((char *)v3 + v4);
      char v8 = *((_BYTE *)v3 + v4 + 2);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 3);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_100070AE8(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v6 + v4;
      *((_WORD *)v12 + 16) = v7;
      v12[34] = v8;
      *(_WORD *)(v12 + 35) = v9;
      v4 += 5LL;
      unint64_t v5 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_1000789B4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070ACC(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    uint64_t v6 = (char *)v3 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v6 - 1);
      char v8 = *v6;
      char v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_100070ACC(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }

      v6 += 3;
      result[2] = v10;
      unint64_t v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      v11[34] = v8;
      v5 += 3LL;
      unint64_t v4 = v10;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078AA4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070F5C(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 12 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_100070F5C(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }

      result[2] = v11;
      char v12 = (char *)result + v6 + v4;
      *((void *)v12 + 4) = v7;
      *((_WORD *)v12 + 20) = v8;
      *((_WORD *)v12 + 21) = v9;
      v4 += 12LL;
      unint64_t v5 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078BB4(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 4 * v6;
    __int16 v8 = (__int16 *)v4 + 1;
    do
    {
      __int16 v9 = *(v8 - 1);
      __int16 v10 = *v8;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1LL);
        uint64_t result = v14;
      }

      v8 += 2;
      result[2] = v12;
      unint64_t v13 = (char *)result + v7;
      *((_WORD *)v13 + 16) = v9;
      *((_WORD *)v13 + 17) = v10;
      v7 += 4LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

void *sub_100078CA8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070F1C(0, a2, 0);
    uint64_t v4 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 14 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      __int16 v10 = *(_WORD *)((char *)v3 + v4 + 12);
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        sub_100070F1C(v11 > 1, v5 + 1, 1);
        uint64_t result = v14;
      }

      result[2] = v12;
      unint64_t v13 = (char *)result + v6 + v4;
      *((void *)v13 + 4) = v7;
      *((_WORD *)v13 + 20) = v8;
      *((_WORD *)v13 + 21) = v9;
      *((_WORD *)v13 + 22) = v10;
      v4 += 14LL;
      unint64_t v5 = v12;
      --v2;
    }

    while (v2);
  }

  return result;
}

__int128 *sub_100078DBC(__int128 *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = (__int128 *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070F00(0, a2, 0);
    uint64_t result = (__int128 *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      __int128 v5 = *v3;
      __int16 v8 = result;
      unint64_t v6 = *((void *)result + 3);
      if (v4 >= v6 >> 1)
      {
        __int128 v7 = *v3;
        sub_100070F00(v6 > 1, v4 + 1, 1);
        __int128 v5 = v7;
        uint64_t result = v8;
      }

      *((void *)result + 2) = v4 + 1;
      result[v4 + 2] = v5;
      ++v3;
      ++v4;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078E98(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070EE4(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 6 * v4;
    unint64_t v6 = (__int16 *)v3 + 2;
    do
    {
      __int16 v7 = *(v6 - 2);
      __int16 v8 = *(v6 - 1);
      __int16 v9 = *v6;
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_100070EE4(v10 > 1, v4 + 1, 1);
        uint64_t result = v13;
      }

      v6 += 3;
      result[2] = v11;
      unint64_t v12 = (_WORD *)((char *)result + v5);
      v12[16] = v7;
      v12[17] = v8;
      v12[18] = v9;
      v5 += 6LL;
      unint64_t v4 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100078F94(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070EC8(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 4 * v4;
    unint64_t v6 = (__int16 *)v3 + 1;
    do
    {
      __int16 v7 = *(v6 - 1);
      __int16 v8 = *v6;
      unint64_t v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_100070EC8(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }

      v6 += 2;
      result[2] = v10;
      unint64_t v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      *((_WORD *)v11 + 17) = v8;
      v5 += 4LL;
      unint64_t v4 = v10;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_100079084(unsigned __int8 a1)
{
  switch(a1)
  {
    case 0u:
      id v2 = [objc_allocWithZone(NSMutableData) initWithLength:1];
      goto LABEL_8;
    case 1u:
      id v2 = [objc_allocWithZone(NSMutableData) initWithLength:2];
      goto LABEL_8;
    case 2u:
      id v2 = [objc_allocWithZone(NSMutableData) initWithLength:4];
      goto LABEL_8;
    case 3u:
      id v2 = [objc_allocWithZone(NSMutableData) initWithLength:3];
      goto LABEL_8;
    case 6u:
      id v2 = [objc_allocWithZone(NSMutableData) initWithLength:6];
LABEL_8:
      if (v2) {
        return a1;
      }
      unint64_t v10 = sub_10000AE14();
      uint64_t v6 = swift_allocError(&type metadata for AUAError, v10, 0LL, 0LL);
      *(_BYTE *)uint64_t v7 = 29;
      *(void *)(v7 + 8) = 0LL;
      *(void *)(v7 + 16) = 0xE000000000000000LL;
      *(void *)(v7 + 24) = 0xD000000000000012LL;
      *(void *)(v7 + 32) = 0x80000001000D0470LL;
      *(void *)(v7 + 40) = 0xD00000000000001ELL;
      *(void *)(v7 + 48) = 0x80000001000D03F0LL;
      uint64_t v8 = 245LL;
LABEL_11:
      *(void *)(v7 + 56) = v8;
      return swift_willThrow(v6);
    default:
      uint64_t v12 = 0LL;
      uint64_t v13 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      v3._object = (void *)0x80000001000D0410LL;
      v3._countAndFlagsBits = 0xD000000000000012LL;
      String.append(_:)(v3);
      unsigned __int8 v11 = a1;
      _print_unlocked<A, B>(_:_:)( &v11,  &v12,  &type metadata for tADCControlRequestParameterBlockLayout,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v4 = v13;
      sub_100029840( v12,  v13,  0xD000000000000012LL,  (void *)0x80000001000D0470LL,  0xD00000000000001ELL,  0x80000001000D03F0LL,  242LL);
      swift_bridgeObjectRelease(v4);
      unint64_t v5 = sub_10000AE14();
      uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
      *(_BYTE *)uint64_t v7 = 27;
      *(void *)(v7 + 8) = 0LL;
      *(void *)(v7 + 16) = 0xE000000000000000LL;
      *(void *)(v7 + 24) = 0xD000000000000012LL;
      *(void *)(v7 + 32) = 0x80000001000D0470LL;
      *(void *)(v7 + 40) = 0xD00000000000001ELL;
      *(void *)(v7 + 48) = 0x80000001000D03F0LL;
      uint64_t v8 = 243LL;
      goto LABEL_11;
  }

uint64_t sub_1000792F4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_100079390(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_100079408(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100079488(unsigned __int8 a1, void *a2)
{
  if (a1 == 2)
  {
    uint64_t v15 = swift_slowAlloc(14LL, -1LL);
    *(_WORD *)uint64_t v15 = 1;
    uint64_t v16 = a2[3];
    uint64_t v17 = a2[4];
    sub_1000178EC(a2, v16);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v17 + 16))(&v51, v16, v17);
    uint64_t v18 = sub_100008E00(&qword_100115248);
    if ((swift_dynamicCast(&v54, &v51, v18, &type metadata for Int32, 6LL) & 1) != 0)
    {
      int v53 = v54;
      uint64_t v19 = a2[3];
      uint64_t v20 = a2[4];
      sub_1000178EC(a2, v19);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v20 + 32))(&v51, v19, v20);
      if ((swift_dynamicCast(&v54, &v51, v18, &type metadata for Int32, 6LL) & 1) != 0)
      {
        int v49 = v54;
        uint64_t v21 = a2[3];
        uint64_t v22 = a2[4];
        sub_1000178EC(a2, v21);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 48))(&v51, v21, v22);
        if ((swift_dynamicCast(&v54, &v51, v18, &type metadata for Int32, 6LL) & 1) != 0)
        {
          int v23 = v54;
          *(_DWORD *)(v15 + 2) = v53;
          *(_DWORD *)(v15 + 6) = v49;
          *(_DWORD *)(v15 + 10) = v23;
          [objc_allocWithZone(NSMutableData) initWithBytesNoCopy:v15 length:14];
          goto LABEL_16;
        }

        unint64_t v46 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v46, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 359LL;
      }

      else
      {
        unint64_t v43 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v43, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 358LL;
      }
    }

    else
    {
      unint64_t v40 = sub_10000AE14();
      uint64_t v37 = swift_allocError(&type metadata for AUAError, v40, 0LL, 0LL);
      *(_BYTE *)uint64_t v38 = 1;
      uint64_t v39 = 357LL;
    }
  }

  else if (a1 == 1)
  {
    v24 = (_WORD *)swift_slowAlloc(8LL, -1LL);
    _WORD *v24 = 1;
    uint64_t v25 = a2[3];
    uint64_t v26 = a2[4];
    sub_1000178EC(a2, v25);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 16))(&v51, v25, v26);
    uint64_t v27 = sub_100008E00(&qword_100115248);
    if ((swift_dynamicCast(&v54, &v51, v27, &type metadata for Int16, 6LL) & 1) != 0)
    {
      int v53 = (unsigned __int16)v54;
      uint64_t v28 = a2[3];
      uint64_t v29 = a2[4];
      sub_1000178EC(a2, v28);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v29 + 32))(&v51, v28, v29);
      if ((swift_dynamicCast(&v54, &v51, v27, &type metadata for Int16, 6LL) & 1) != 0)
      {
        __int16 v50 = v54;
        uint64_t v30 = a2[3];
        uint64_t v31 = a2[4];
        sub_1000178EC(a2, v30);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v31 + 48))(&v51, v30, v31);
        if ((swift_dynamicCast(&v54, &v51, v27, &type metadata for Int16, 6LL) & 1) != 0)
        {
          __int16 v32 = v54;
          v24[1] = v53;
          v24[2] = v50;
          v24[3] = v32;
          [objc_allocWithZone(NSMutableData) initWithBytesNoCopy:v24 length:8];
          goto LABEL_16;
        }

        unint64_t v47 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v47, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 343LL;
      }

      else
      {
        unint64_t v44 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v44, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 342LL;
      }
    }

    else
    {
      unint64_t v41 = sub_10000AE14();
      uint64_t v37 = swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
      *(_BYTE *)uint64_t v38 = 1;
      uint64_t v39 = 341LL;
    }
  }

  else if (a1)
  {
    uint64_t v51 = 0LL;
    uint64_t v52 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    v34._countAndFlagsBits = 0xD000000000000012LL;
    v34._object = (void *)0x80000001000D0410LL;
    String.append(_:)(v34);
    LOBYTE(v54) = a1;
    _print_unlocked<A, B>(_:_:)( &v54,  &v51,  &type metadata for tADCControlRequestParameterBlockLayout,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v35 = v52;
    sub_100029840( v51,  v52,  0xD000000000000018LL,  (void *)0x80000001000D04F0LL,  0xD00000000000001ELL,  0x80000001000D03F0LL,  369LL);
    swift_bridgeObjectRelease(v35);
    unint64_t v36 = sub_10000AE14();
    uint64_t v37 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
    *(_BYTE *)uint64_t v38 = 27;
    uint64_t v39 = 370LL;
  }

  else
  {
    uint64_t v4 = swift_slowAlloc(5LL, -1LL);
    *(_WORD *)uint64_t v4 = 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = a2[4];
    sub_1000178EC(a2, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v51, v5, v6);
    uint64_t v7 = sub_100008E00(&qword_100114550);
    if ((swift_dynamicCast(&v54, &v51, v7, &type metadata for UInt8, 6LL) & 1) != 0)
    {
      int v8 = v54;
      uint64_t v9 = a2[3];
      uint64_t v10 = a2[4];
      sub_1000178EC(a2, v9);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 24))(&v51, v9, v10);
      if ((swift_dynamicCast(&v54, &v51, v7, &type metadata for UInt8, 6LL) & 1) != 0)
      {
        int v53 = v8;
        char v11 = v54;
        uint64_t v12 = a2[3];
        uint64_t v13 = a2[4];
        sub_1000178EC(a2, v12);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v51, v12, v13);
        if ((swift_dynamicCast(&v54, &v51, v7, &type metadata for UInt8, 6LL) & 1) != 0)
        {
          char v14 = v54;
          *(_BYTE *)(v4 + 2) = v53;
          *(_BYTE *)(v4 + 3) = v11;
          *(_BYTE *)(v4 + 4) = v14;
          [objc_allocWithZone(NSMutableData) initWithBytesNoCopy:v4 length:5];
LABEL_16:
          sub_100017A40(a2);
          return a1 | 0x100u;
        }

        unint64_t v48 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v48, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 327LL;
      }

      else
      {
        unint64_t v45 = sub_10000AE14();
        uint64_t v37 = swift_allocError(&type metadata for AUAError, v45, 0LL, 0LL);
        *(_BYTE *)uint64_t v38 = 1;
        uint64_t v39 = 326LL;
      }
    }

    else
    {
      unint64_t v42 = sub_10000AE14();
      uint64_t v37 = swift_allocError(&type metadata for AUAError, v42, 0LL, 0LL);
      *(_BYTE *)uint64_t v38 = 1;
      uint64_t v39 = 325LL;
    }
  }

  *(void *)(v38 + 8) = 0LL;
  *(void *)(v38 + 16) = 0xE000000000000000LL;
  *(void *)(v38 + 24) = 0xD000000000000018LL;
  *(void *)(v38 + 32) = 0x80000001000D04F0LL;
  *(void *)(v38 + 40) = 0xD00000000000001ELL;
  *(void *)(v38 + 48) = 0x80000001000D03F0LL;
  *(void *)(v38 + 56) = v39;
  swift_willThrow(v37);
  return sub_100017A40(a2);
}

uint64_t sub_100079BB8(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = result;
  if (result != 1)
  {
    if ((_BYTE)result)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      v10._countAndFlagsBits = 0xD000000000000012LL;
      v10._object = (void *)0x80000001000D0410LL;
      String.append(_:)(v10);
      unsigned __int8 v13 = v2;
      _print_unlocked<A, B>(_:_:)( &v13,  &v14,  &type metadata for tADCControlRequestParameterBlockLayout,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v11 = v15;
      sub_100029840( v14,  v15,  0xD00000000000001DLL,  (void *)0x80000001000D0450LL,  0xD00000000000001ELL,  0x80000001000D03F0LL,  304LL);
      swift_bridgeObjectRelease(v11);
      unint64_t v12 = sub_10000AE14();
      uint64_t v7 = swift_allocError(&type metadata for AUAError, v12, 0LL, 0LL);
      *(_BYTE *)uint64_t v8 = 27;
      *(void *)(v8 + 8) = 0LL;
      *(void *)(v8 + 16) = 0xE000000000000000LL;
      *(void *)(v8 + 24) = 0xD00000000000001DLL;
      *(void *)(v8 + 32) = 0x80000001000D0450LL;
      *(void *)(v8 + 40) = 0xD00000000000001ELL;
      *(void *)(v8 + 48) = 0x80000001000D03F0LL;
      uint64_t v9 = 305LL;
LABEL_19:
      *(void *)(v8 + 56) = v9;
      return swift_willThrow(v7);
    }

    if (a2 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v3 = 3 * a2;
      if ((unsigned __int128)(a2 * (__int128)3LL) >> 64 == (3 * a2) >> 63)
      {
        uint64_t v4 = v3 + 2;
        if (!__OFADD__(v3, 2LL)) {
          goto LABEL_15;
        }
        __break(1u);
LABEL_9:
        if ((a2 & 0x8000000000000000LL) == 0)
        {
          if ((unsigned __int128)(a2 * (__int128)12LL) >> 64 == (12 * a2) >> 63)
          {
            uint64_t v4 = (12 * a2) | 2;
LABEL_15:
            if ([objc_allocWithZone(NSMutableData) initWithLength:v4]) {
              return v2 | 0x100u;
            }
            unint64_t v6 = sub_10000AE14();
            uint64_t v7 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
            *(_BYTE *)uint64_t v8 = 29;
            *(void *)(v8 + 8) = 0LL;
            *(void *)(v8 + 16) = 0xE000000000000000LL;
            *(void *)(v8 + 24) = 0xD00000000000001DLL;
            *(void *)(v8 + 32) = 0x80000001000D0450LL;
            *(void *)(v8 + 40) = 0xD00000000000001ELL;
            *(void *)(v8 + 48) = 0x80000001000D03F0LL;
            uint64_t v9 = 307LL;
            goto LABEL_19;
          }

          goto LABEL_23;
        }

void *sub_100079E34(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070AB0(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    unint64_t v6 = (char *)v3 + 1;
    do
    {
      char v7 = *(v6 - 1);
      char v8 = *v6;
      char v9 = v6[1];
      unsigned __int8 v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_100070AB0(v10 > 1, v4 + 1, 1);
        uint64_t result = v13;
      }

      v6 += 3;
      result[2] = v11;
      unint64_t v12 = (char *)result + v5;
      v12[32] = v7;
      v12[33] = v8;
      v12[34] = v9;
      v5 += 3LL;
      unint64_t v4 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_100079F2C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070A94(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 6 * v4;
    unint64_t v6 = (__int16 *)v3 + 1;
    do
    {
      __int16 v7 = *(v6 - 1);
      __int16 v8 = *v6;
      __int16 v9 = v6[1];
      unsigned __int8 v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v4 + 1;
      if (v4 >= v10 >> 1)
      {
        sub_100070A94(v10 > 1, v4 + 1, 1);
        uint64_t result = v13;
      }

      v6 += 3;
      result[2] = v11;
      unint64_t v12 = (_WORD *)((char *)result + v5);
      v12[16] = v7;
      v12[17] = v8;
      v12[18] = v9;
      v5 += 6LL;
      unint64_t v4 = v11;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_10007A028(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_100070A78(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 12 * v4;
    unint64_t v6 = v3 + 1;
    do
    {
      uint64_t v7 = *((void *)v6 - 1);
      int v8 = *v6;
      unint64_t v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_100070A78(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }

      v6 += 3;
      result[2] = v10;
      unint64_t v11 = (char *)result + v5;
      *((void *)v11 + 4) = v7;
      *((_DWORD *)v11 + 10) = v8;
      v5 += 12LL;
      unint64_t v4 = v10;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *sub_10007A124(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0LL);
    uint64_t v5 = 0LL;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    do
    {
      char v8 = *((_BYTE *)v4 + v5);
      int v9 = *(_DWORD *)((char *)v4 + v5 + 1);
      char v10 = *((_BYTE *)v4 + v5 + 5);
      uint64_t v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1LL);
        uint64_t result = v15;
      }

      result[2] = v12;
      unsigned __int8 v13 = (char *)result + v7 + v5;
      v13[32] = v8;
      *(_DWORD *)(v13 + 33) = v9;
      v13[37] = v10;
      v5 += 6LL;
      unint64_t v6 = v12;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_10007A234(uint64_t result, uint64_t a2)
{
  if (result != 8)
  {
    char v2 = result;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    v3._countAndFlagsBits = 0xD000000000000012LL;
    v3._object = (void *)0x80000001000D0410LL;
    String.append(_:)(v3);
    char v10 = v2;
    _print_unlocked<A, B>(_:_:)( &v10,  &v11,  &type metadata for tADCControlRequestParameterBlockLayout,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v4 = v12;
    sub_100029840( v11,  v12,  0xD00000000000001ALL,  (void *)0x80000001000D0530LL,  0xD00000000000001ELL,  0x80000001000D03F0LL,  279LL);
    swift_bridgeObjectRelease(v4);
    unint64_t v5 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 27;
    uint64_t v8 = 280LL;
LABEL_7:
    *(void *)(v7 + 8) = 0LL;
    *(void *)(v7 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD00000000000001ALL;
    *(void *)(v7 + 32) = 0x80000001000D0530LL;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000D03F0LL;
    *(void *)(v7 + 56) = v8;
    return swift_willThrow(v6);
  }

  if (!__OFADD__(a2, 1LL))
  {
    if ([objc_allocWithZone(NSMutableData) initWithLength:a2 + 1]) {
      return 8LL;
    }
    unint64_t v9 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 29;
    uint64_t v8 = 282LL;
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

unint64_t sub_10007A3F0()
{
  unint64_t result = qword_1001154B0;
  if (!qword_1001154B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSMutableData);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001154B0);
  }

  return result;
}

uint64_t sub_10007A42C(uint64_t a1)
{
  uint64_t v2 = sub_100008E00(&qword_1001154C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10007A46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = **(void **)(v3 + 16);
  v8[2] = &v9;
  unint64_t result = sub_100076034( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10007A4C8,  (uint64_t)v8,  a1,  a2);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

void sub_10007A4C8(_BYTE *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = **(id **)(v3 + 16);
  sub_100076144(v10, a1, a2);
  uint64_t v8 = v10[1];
  *a3 = v10[0];
  a3[1] = v8;
  a3[2] = v9;
}

ValueMetadata *type metadata accessor for AudioClassRange8bit()
{
  return &type metadata for AudioClassRange8bit;
}

uint64_t initializeBufferWithCopyOfBuffer for AudioClassRange16bit(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AudioClassRange16bit()
{
  return &type metadata for AudioClassRange16bit;
}

ValueMetadata *type metadata accessor for AudioClassRange32bit()
{
  return &type metadata for AudioClassRange32bit;
}

unint64_t sub_10007A580()
{
  unint64_t result = qword_1001154C8;
  if (!qword_1001154C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D7C58, &type metadata for AudioClassRange32bit);
    atomic_store(result, (unint64_t *)&qword_1001154C8);
  }

  return result;
}

unint64_t sub_10007A5C8()
{
  unint64_t result = qword_1001154D0;
  if (!qword_1001154D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D7CC0, &type metadata for AudioClassRange16bit);
    atomic_store(result, (unint64_t *)&qword_1001154D0);
  }

  return result;
}

unint64_t sub_10007A610()
{
  unint64_t result = qword_1001154D8;
  if (!qword_1001154D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D7D28, &type metadata for AudioClassRange8bit);
    atomic_store(result, (unint64_t *)&qword_1001154D8);
  }

  return result;
}

unint64_t sub_10007A654()
{
  unint64_t result = qword_1001154E0;
  if (!qword_1001154E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1001154E0);
  }

  return result;
}

unint64_t sub_10007A698()
{
  unint64_t result = qword_1001154E8;
  if (!qword_1001154E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_1001154E8);
  }

  return result;
}

unint64_t sub_10007A6DC()
{
  unint64_t result = qword_1001154F0;
  if (!qword_1001154F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int16, &type metadata for Int16);
    atomic_store(result, (unint64_t *)&qword_1001154F0);
  }

  return result;
}

unint64_t sub_10007A720()
{
  unint64_t result = qword_1001154F8;
  if (!qword_1001154F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int8, &type metadata for Int8);
    atomic_store(result, (unint64_t *)&qword_1001154F8);
  }

  return result;
}

unint64_t sub_10007A764()
{
  unint64_t result = qword_100115500;
  if (!qword_100115500)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100115500);
  }

  return result;
}

void sub_10007A7A8(uint64_t a1@<X0>, uint64_t (**a2)(void, void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = (void *)a2[2](ObjectType, a2);
  if (v8)
  {

    sub_10002F960(0x4944u, ObjectType, (uint64_t)&type metadata for UInt64, a2, (uint64_t)&v13);
    if (!v3)
    {
      if ((v14 & 1) != 0
        || (sub_10002F960(0x554Cu, ObjectType, (uint64_t)&type metadata for UInt64, a2, (uint64_t)&v13),
            (v14 & 1) != 0))
      {
        *(_OWORD *)a3 = xmmword_1000D7DE0;
        *(_BYTE *)(a3 + 16) = 0;
      }

      else
      {
        BOOL v12 = v13 == 0x4B434F4C4D454D48LL;
        uint64_t v14 = 0LL;
        swift_unknownObjectWeakInit(&v13, 0LL);
        uint64_t v14 = a2;
        swift_unknownObjectWeakAssign(&v13, a1);
        BOOL v15 = v12;
        sub_10007BD38((uint64_t)&v13, a3, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakTakeInit);
      }
    }
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 51;
    *(void *)(v11 + 8) = 0LL;
    *(void *)(v11 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0x6F28657461657263LL;
    *(void *)(v11 + 32) = 0xEB00000000293A6ELL;
    *(void *)(v11 + 40) = 0xD000000000000020LL;
    *(void *)(v11 + 48) = 0x80000001000D0550LL;
    *(void *)(v11 + 56) = 60LL;
    swift_willThrow(v10);
  }

uint64_t sub_10007A958()
{
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  __int16 v9 = 13057;
  id v2 = [objc_allocWithZone(NSMutableData) initWithBytes:&v9 length:64];
  sub_10007B8C0(2, v2);
  if (!v1)
  {
    sub_10007B690(2, (uint64_t)&v13);
    if ((v15 & 1) != 0 || (const mach_header_64 *)(v13 & 0xFFFF00000000LL) != &_mh_execute_header) {
      goto LABEL_11;
    }
    if ((v13 & 0xFF00) == 0x3300)
    {
      if (HIWORD(v13) == 3)
      {
        if (v14 == 1LL)
        {
          sub_100029834( 0xD000000000000014LL,  0x80000001000D05C0LL,  0x45746C7561666564LL,  (void *)0xEF292865646F4D55LL,  0xD000000000000020LL,  0x80000001000D0550LL,  107LL);
          char v0 = 1;

          return v0 & 1;
        }

void sub_10007AC3C(char a1)
{
  __int128 v13 = 0u;
  __int128 v12 = 0u;
  v11[0] = 5889;
  v11[1] = a1 & 1;
  id v3 = [objc_allocWithZone(NSMutableData) initWithBytes:v11 length:64];
  sub_10007B8C0(2, v3);
  if (!v1)
  {
    sub_10007B690(2, (uint64_t)&v15);
    if ((v17 & 1) == 0 && (const mach_header_64 *)(v15 & 0xFFFF00000000LL) == &_mh_execute_header)
    {
      if ((v15 & 0xFF00) == 0x1700)
      {
        uint64_t v15 = 0x6E2065646F4D5545LL;
        uint64_t v16 = 0xEB0000000020776FLL;
        if ((a1 & 1) != 0) {
          uint64_t v4 = 1702195828LL;
        }
        else {
          uint64_t v4 = 0x65736C6166LL;
        }
        if ((a1 & 1) != 0) {
          unint64_t v5 = 0xE400000000000000LL;
        }
        else {
          unint64_t v5 = 0xE500000000000000LL;
        }
        unint64_t v6 = v5;
        String.append(_:)(*(Swift::String *)&v4);
        swift_bridgeObjectRelease(v5);
        uint64_t v7 = v16;
        sub_100029834( v15,  v16,  0xD000000000000012LL,  (void *)0x80000001000D0580LL,  0xD000000000000020LL,  0x80000001000D0550LL,  129LL);
        swift_bridgeObjectRelease(v7);
      }

      else
      {
        unint64_t v8 = sub_10000AE14();
        uint64_t v9 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
        *(_BYTE *)uint64_t v10 = 1;
        *(void *)(v10 + 8) = 0LL;
        *(void *)(v10 + 16) = 0xE000000000000000LL;
        *(void *)(v10 + 24) = 0xD000000000000012LL;
        *(void *)(v10 + 32) = 0x80000001000D0580LL;
        *(void *)(v10 + 40) = 0xD000000000000020LL;
        *(void *)(v10 + 48) = 0x80000001000D0550LL;
        *(void *)(v10 + 56) = 128LL;
        swift_willThrow(v9);
      }
    }
  }
}

void sub_10007AE64()
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v12 = 0LL;
  uint64_t v8 = 0x8000000000C01LL;
  BYTE1(v9) = 1;
  BYTE3(v9) = 1;
  BYTE5(v9) = 1;
  id v1 = [objc_allocWithZone(NSMutableData) initWithBytes:&v8 length:64];
  sub_10007B8C0(2, v1);
  if (!v0)
  {
    sub_10007B690(2, (uint64_t)&v13);
    if ((v15 & 1) == 0)
    {
      int v2 = v13;
      if ((const mach_header_64 *)(v13 & 0xFFFF00000000LL) == &_mh_execute_header)
      {
        if ((v13 & 0xFF00) == 0xC00)
        {
          if (HIWORD(v13) == 4)
          {
            BYTE1(v13) = 12;
            LOBYTE(v13) = v2;
            WORD1(v13) = HIWORD(v2);
            HIDWORD(v13) = 262145;
            sub_10007BB50((unsigned __int8 *)&v14);
            goto LABEL_10;
          }

          unint64_t v7 = sub_10000AE14();
          uint64_t v4 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
          *(_BYTE *)uint64_t v5 = 1;
          *(void *)(v5 + 8) = 0LL;
          *(void *)(v5 + 16) = 0xE000000000000000LL;
          *(void *)(v5 + 24) = 0x45656C6261736964LL;
          *(void *)(v5 + 32) = 0xEB00000000292851LL;
          *(void *)(v5 + 40) = 0xD000000000000020LL;
          *(void *)(v5 + 48) = 0x80000001000D0550LL;
          uint64_t v6 = 178LL;
        }

        else
        {
          unint64_t v3 = sub_10000AE14();
          uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
          *(_BYTE *)uint64_t v5 = 1;
          *(void *)(v5 + 8) = 0LL;
          *(void *)(v5 + 16) = 0xE000000000000000LL;
          *(void *)(v5 + 24) = 0x45656C6261736964LL;
          *(void *)(v5 + 32) = 0xEB00000000292851LL;
          *(void *)(v5 + 40) = 0xD000000000000020LL;
          *(void *)(v5 + 48) = 0x80000001000D0550LL;
          uint64_t v6 = 177LL;
        }

        *(void *)(v5 + 56) = v6;
        swift_willThrow(v4);
      }
    }
  }

uint64_t sub_10007B25C()
{
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  __int16 v9 = 2305;
  id v2 = [objc_allocWithZone(NSMutableData) initWithBytes:&v9 length:64];
  sub_10007B8C0(2, v2);
  if (!v1)
  {
    sub_10007B690(2, (uint64_t)v13);
    if ((v14 & 1) != 0 || (const mach_header_64 *)(v13[0] & 0xFFFF00000000LL) != &_mh_execute_header)
    {

      return 0LL;
    }

    if ((v13[0] & 0xFF00) == 0x900LL)
    {
      if (HIWORD(v13[0]) == 4LL)
      {
        uint64_t v0 = v13[1];

        return v0;
      }

      unint64_t v8 = sub_10000AE14();
      uint64_t v5 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
      *(_BYTE *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = 0LL;
      *(void *)(v6 + 16) = 0xE000000000000000LL;
      strcpy((char *)(v6 + 24), "mikeyBusID()");
      *(_BYTE *)(v6 + 37) = 0;
      *(_WORD *)(v6 + 38) = -5120;
      *(void *)(v6 + 40) = 0xD000000000000020LL;
      *(void *)(v6 + 48) = 0x80000001000D0550LL;
      uint64_t v7 = 146LL;
    }

    else
    {
      unint64_t v4 = sub_10000AE14();
      uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
      *(_BYTE *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = 0LL;
      *(void *)(v6 + 16) = 0xE000000000000000LL;
      strcpy((char *)(v6 + 24), "mikeyBusID()");
      *(_BYTE *)(v6 + 37) = 0;
      *(_WORD *)(v6 + 38) = -5120;
      *(void *)(v6 + 40) = 0xD000000000000020LL;
      *(void *)(v6 + 48) = 0x80000001000D0550LL;
      uint64_t v7 = 145LL;
    }

    *(void *)(v6 + 56) = v7;
    swift_willThrow(v5);
  }

  return v0;
}

uint64_t CS46L06Interface.function.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0);
}

uint64_t CS46L06Interface.function.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 8) = a2;
  swift_unknownObjectWeakAssign(v2, a1);
  return swift_unknownObjectRelease(a1, v4);
}

uint64_t (*CS46L06Interface.function.modify(uint64_t *a1))(uint64_t *a1)
{
  a1[2] = v1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  uint64_t v4 = *(void *)(v1 + 8);
  *a1 = Strong;
  a1[1] = v4;
  return sub_10007B4F8;
}

uint64_t sub_10007B4F8(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = *a1;
  *(void *)(v1 + 8) = a1[1];
  swift_unknownObjectWeakAssign(v1, v2);
  return swift_unknownObjectRelease(v2, v3);
}

uint64_t initializeWithCopy for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t assignWithCopy for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t initializeWithTake for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t assignWithTake for CS46L06Interface(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16);
  return result;
}

uint64_t getEnumTagSinglePayload for CS46L06Interface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007LL) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CS46L06Interface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1LL;
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CS46L06Interface()
{
  return &type metadata for CS46L06Interface;
}

uint64_t sub_10007B690@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for C46L06HVCICommandResponse(0LL);
  uint64_t v7 = v6;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v9 = Strong;
    __int128 v10 = *(uint64_t (***)(void, void))(v3 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    sub_10002F960(0x4843554C4944uLL >> (16 * a1), ObjectType, v7, v10, a2);
    return swift_unknownObjectRelease(v9, v12);
  }

  else
  {
    unint64_t v14 = sub_10000AE14();
    uint64_t v15 = swift_allocError(&type metadata for AUAError, v14, 0LL, 0LL);
    *(_BYTE *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = 0LL;
    *(void *)(v16 + 16) = 0xE000000000000000LL;
    *(void *)(v16 + 24) = 0xD00000000000001DLL;
    *(void *)(v16 + 32) = 0x80000001000CEED0LL;
    *(void *)(v16 + 40) = 0xD000000000000020LL;
    *(void *)(v16 + 48) = 0x80000001000D0550LL;
    *(void *)(v16 + 56) = 45LL;
    return swift_willThrow(v15);
  }

uint64_t sub_10007B7A8(char a1)
{
  uint64_t v3 = v1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v6 = Strong;
    uint64_t v7 = *(uint64_t (***)(void, void))(v3 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    sub_10002F960(0x4843554C4944uLL >> (16 * a1), ObjectType, (uint64_t)&type metadata for UInt64, v7, (uint64_t)&v14);
    uint64_t result = swift_unknownObjectRelease(v6, v9);
    if (!v2) {
      return v14;
    }
  }

  else
  {
    unint64_t v11 = sub_10000AE14();
    uint64_t v12 = swift_allocError(&type metadata for AUAError, v11, 0LL, 0LL);
    *(_BYTE *)uint64_t v13 = 1;
    *(void *)(v13 + 8) = 0LL;
    *(void *)(v13 + 16) = 0xE000000000000000LL;
    *(void *)(v13 + 24) = 0xD00000000000001DLL;
    *(void *)(v13 + 32) = 0x80000001000CEED0LL;
    *(void *)(v13 + 40) = 0xD000000000000020LL;
    *(void *)(v13 + 48) = 0x80000001000D0550LL;
    *(void *)(v13 + 56) = 45LL;
    return swift_willThrow(v12);
  }

  return result;
}

uint64_t sub_10007B8C0(char a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v7 = Strong;
    unint64_t v8 = *(uint64_t (***)(void, void))(v3 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    sub_10002A24C(0x4843554C4944uLL >> (16 * a1), a2, ObjectType, v8);
    return swift_unknownObjectRelease(v7, v10);
  }

  else
  {
    unint64_t v12 = sub_10000AE14();
    uint64_t v13 = swift_allocError(&type metadata for AUAError, v12, 0LL, 0LL);
    *(_BYTE *)uint64_t v14 = 1;
    *(void *)(v14 + 8) = 0LL;
    *(void *)(v14 + 16) = 0xE000000000000000LL;
    *(void *)(v14 + 24) = 0xD00000000000001FLL;
    *(void *)(v14 + 32) = 0x80000001000CEF90LL;
    *(void *)(v14 + 40) = 0xD000000000000020LL;
    *(void *)(v14 + 48) = 0x80000001000D0550LL;
    *(void *)(v14 + 56) = 53LL;
    return swift_willThrow(v13);
  }

void sub_10007B9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  id v8 = [objc_allocWithZone(NSMutableData) initWithBytes:a1 length:8];
  sub_10007BD38(a3, (uint64_t)v14, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  sub_10007B8C0(1, v8);
  sub_100030B00((uint64_t)v14);
  if (v4) {
    goto LABEL_3;
  }
  sub_10007BD38(a3, (uint64_t)v14, (void (*)(uint64_t, uint64_t))&_swift_unknownObjectWeakCopyInit);
  uint64_t v9 = sub_10007B7A8(1);
  char v11 = v10;
  sub_100030B00((uint64_t)v14);
  if ((v11 & 1) == 0 && v9 != 0x4B4C4E554D454D48LL)
  {
    unint64_t v12 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v12, 0LL, 0LL);
    *(_BYTE *)uint64_t v13 = 1;
    *(void *)(v13 + 8) = 0LL;
    *(void *)(v13 + 16) = 0xE000000000000000LL;
    *(void *)(v13 + 24) = 0x29286B636F6C6E75LL;
    *(void *)(v13 + 32) = 0xE800000000000000LL;
    *(void *)(v13 + 40) = 0xD000000000000020LL;
    *(void *)(v13 + 48) = 0x80000001000D0550LL;
    *(void *)(v13 + 56) = 86LL;
    swift_willThrow(v6);
LABEL_3:

    *a4 = v6;
    return;
  }
}

uint64_t sub_10007BB50(unsigned __int8 *a1)
{
  int v1 = *a1;
  int v2 = a1[1];
  int v3 = a1[2];
  if (v1 == 1) {
    uint64_t v4 = 1702195828LL;
  }
  else {
    uint64_t v4 = 0x65736C6166LL;
  }
  if (v1 == 1) {
    unint64_t v5 = 0xE400000000000000LL;
  }
  else {
    unint64_t v5 = 0xE500000000000000LL;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  sub_100029834( 0x74616C4638345145LL,  0xEA0000000000203ALL,  0x45656C6261736964LL,  (void *)0xEB00000000292851LL,  0xD000000000000020LL,  0x80000001000D0550LL,  185LL);
  swift_bridgeObjectRelease(0xEA0000000000203ALL);
  if (v2 == 1) {
    uint64_t v7 = 1702195828LL;
  }
  else {
    uint64_t v7 = 0x65736C6166LL;
  }
  if (v2 == 1) {
    unint64_t v8 = 0xE400000000000000LL;
  }
  else {
    unint64_t v8 = 0xE500000000000000LL;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  sub_100029834( 0x616C463239315145LL,  0xEB00000000203A74LL,  0x45656C6261736964LL,  (void *)0xEB00000000292851LL,  0xD000000000000020LL,  0x80000001000D0550LL,  186LL);
  swift_bridgeObjectRelease(0xEB00000000203A74LL);
  if (v3 == 1) {
    uint64_t v10 = 1702195828LL;
  }
  else {
    uint64_t v10 = 0x65736C6166LL;
  }
  if (v3 == 1) {
    unint64_t v11 = 0xE400000000000000LL;
  }
  else {
    unint64_t v11 = 0xE500000000000000LL;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  sub_100029834( 0x616C4663694D5145LL,  0xEB00000000203A74LL,  0x45656C6261736964LL,  (void *)0xEB00000000292851LL,  0xD000000000000020LL,  0x80000001000D0550LL,  187LL);
  return swift_bridgeObjectRelease(0xEB00000000203A74LL);
}

uint64_t sub_10007BD38(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a1 + 16);
  return a2;
}

void *sub_10007BD78( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, int *, uint64_t))
{
  uint64_t v5 = v4;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v19 = _swiftEmptyArrayStorage;
    sub_1000706A4(0, v6, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v11 = (int *)(a1 + 32);
    while (1)
    {
      int v12 = *v11++;
      int v17 = v12;
      a4(&v18, &v17, a2);
      if (v5) {
        break;
      }
      uint64_t v5 = 0LL;
      uint64_t v13 = v18;
      uint64_t v19 = v7;
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_1000706A4(v14 > 1, v15 + 1, 1);
        uint64_t v7 = v19;
      }

      v7[2] = v15 + 1;
      v7[v15 + 4] = v13;
      if (!--v6) {
        return v7;
      }
    }

    swift_release(v7);
  }

  return v7;
}

uint64_t sub_10007BE80@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t ObjectType = swift_getObjectType(v3);
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  uint64_t v8 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v4);
  uint64_t v9 = swift_getObjectType(v5);
  uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v9, v6);
  if (v8 == result)
  {
    char v11 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v5, v6, ObjectType, v4);
    swift_unknownObjectRelease(v5, v12);
    if ((v11 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease(v3, v13);
      a2[1] = 0u;
      a2[2] = 0u;
      *a2 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v3, v4);
      return swift_unknownObjectRelease(v3, v14);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

AUASDCore::tADCControlRequestParameterBlockLayout __swiftcall USBDescriptorControl.pbLayout()()
{
  return ((unsigned __int8 (*)(void))((char *)sub_10007BFAC
                                    + 4 * byte_1000D7E40[(v0 >> 18) & 0x3C | (v0 >> 6)]))();
}

uint64_t sub_10007BFAC(unsigned int a1)
{
  return HIWORD(a1) & 0xF;
}

uint64_t sub_10007BFB4(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t sub_10007BFBC(unsigned int a1)
{
  return a1 >> 8;
}

void sub_10007BFC4(uint64_t a1, __int16 a2)
{
  switch(HIBYTE(a2))
  {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
      return;
    default:
      unint64_t v2 = sub_10000AE14();
      uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
      *(_BYTE *)uint64_t v4 = 44;
      *(void *)(v4 + 8) = 0LL;
      *(void *)(v4 + 16) = 0xE000000000000000LL;
      *(void *)(v4 + 24) = 0xD000000000000015LL;
      *(void *)(v4 + 32) = 0x80000001000D0790LL;
      *(void *)(v4 + 40) = 0xD00000000000001DLL;
      *(void *)(v4 + 48) = 0x80000001000D05E0LL;
      *(void *)(v4 + 56) = 720LL;
      swift_willThrow(v3);
      break;
  }

Swift::String_optional __swiftcall USBDescriptorControl.label()()
{
  int v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14[-2] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[1] = &type metadata for USBDescriptorControl;
  BYTE2(v13) = BYTE2(v1);
  LOWORD(v13) = v1;
  uint64_t v6 = Mirror.init(reflecting:)(&v13);
  uint64_t v7 = (void *)Mirror.children.getter(v6);
  sub_10007BE80(v7, &v13);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v14[3])
  {
    uint64_t v9 = (void *)*((void *)&v13 + 1);
    uint64_t v8 = v13;
    sub_100017A40(v14);
  }

  else
  {
    sub_1000178B0((uint64_t)&v13, &qword_100113CD0);
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = v8;
  char v11 = v9;
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

void sub_10007C17C(_BYTE *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  switch(HIBYTE(a2))
  {
    case 0x19:
      sub_1000A8438(a1, a2 | 0x1900);
      if (!v3)
      {
        uint64_t v12 = v10;
        __int16 v13 = v11;
        int v14 = HIBYTE(v9);
        uint64_t v15 = v5;
        uint64_t v278 = v6;
        uint64_t v16 = v7;
        unint64_t v17 = (v9 << 16) | (unint64_t)v8 | ((unint64_t)BYTE2(v9) << 32);
        uint64_t v18 = sub_100008E00(&qword_1001150A8);
        uint64_t v19 = swift_allocObject(v18, 44LL, 7LL);
        *(_OWORD *)(v19 + 16) = xmmword_1000D3D30;
        *(void *)(v19 + 32) = v17;
        *(_WORD *)(v19 + 40) = 0;
        if (v14) {
          int v20 = v14;
        }
        else {
          int v20 = 16711680;
        }
        sub_1000AF324( v15,  0LL,  v278,  v16,  0,  (uint64_t)_swiftEmptyArrayStorage,  v20,  v19,  (uint64_t)v160,  0LL,  0xF000000000000000LL,  v12,  v13,  (uint64_t)_swiftEmptyArrayStorage);
        v155 = &type metadata for InputTerminal;
        unint64_t v156 = sub_10007FE64();
        uint64_t v21 = swift_allocObject(&unk_100105F08, 120LL, 7LL);
        *(void *)v154 = v21;
        __int128 v22 = v160[5];
        *(_OWORD *)(v21 + 80) = v160[4];
        *(_OWORD *)(v21 + 96) = v22;
        *(void *)(v21 + 112) = v161;
        __int128 v23 = v160[1];
        *(_OWORD *)(v21 + 16) = v160[0];
        *(_OWORD *)(v21 + 32) = v23;
        __int128 v25 = v160[2];
        __int128 v24 = v160[3];
        goto LABEL_105;
      }

      return;
    case 0x1A:
      sub_1000A87D8(a1, a2 | 0x1A00);
      if (!v3)
      {
        if (v27) {
          int v30 = v27;
        }
        else {
          int v30 = 16711680;
        }
        sub_1000AF4A4( BYTE3(v26),  0LL,  HIBYTE(v26),  WORD2(v26),  BYTE6(v26),  0,  v30,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v162,  v28,  v29,  (uint64_t)_swiftEmptyArrayStorage);
        v155 = &type metadata for OutputTerminal;
        unint64_t v156 = sub_10007FDB4();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105EE0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v32 = v162[3];
        v31[3] = v162[2];
        v31[4] = v32;
        __int128 v33 = v162[5];
        v31[5] = v162[4];
        v31[6] = v33;
        __int128 v34 = v162[0];
        __int128 v35 = v162[1];
        goto LABEL_121;
      }

      return;
    case 0x1B:
      sub_1000A8B50(a1, a2 | 0x1B00);
      if (!v3)
      {
        if (v170) {
          int v36 = v170;
        }
        else {
          int v36 = 16711680;
        }
        swift_bridgeObjectRetain(v168);
        swift_bridgeObjectRetain(v169);
        sub_1000AF59C( v163[3],  v163[5] | ((unint64_t)v164 << 16) | ((unint64_t)v165 << 32),  0,  v168,  v169,  (uint64_t)_swiftEmptyArrayStorage,  v36,  v166,  (uint64_t)v171,  v167,  (uint64_t)_swiftEmptyArrayStorage);
        sub_1000801DC((uint64_t)v163);
        v155 = &type metadata for MixerUnit;
        unint64_t v156 = sub_10001A4C0();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100106070, 104LL, 7LL);
        *(void *)v154 = v31;
        __int128 v37 = v171[3];
        v31[3] = v171[2];
        v31[4] = v37;
        v31[5] = v171[4];
        *((void *)v31 + 12) = v172;
        __int128 v34 = v171[0];
        __int128 v35 = v171[1];
        goto LABEL_121;
      }

      return;
    case 0x1C:
      sub_1000A8EF8(a1, a2 | 0x1C00);
      if (!v3)
      {
        if (v177) {
          int v38 = v177;
        }
        else {
          int v38 = 16711680;
        }
        sub_1000AF6D0( v173,  v176,  (uint64_t)&off_1000FD900,  v38,  v174,  v175,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v178);
        v155 = &type metadata for SelectorUnit;
        unint64_t v156 = sub_10001B56C();
        uint64_t v39 = swift_allocObject(&unk_100106048, 88LL, 7LL);
        *(void *)v154 = v39;
        __int128 v40 = v178[3];
        *(_OWORD *)(v39 + 48) = v178[2];
        *(_OWORD *)(v39 + 64) = v40;
        *(void *)(v39 + 80) = v179;
        __int128 v42 = v178[0];
        __int128 v41 = v178[1];
        goto LABEL_120;
      }

      return;
    case 0x1D:
      sub_1000A94D4(a1, a2 | 0x1D00);
      if (!v3)
      {
        sub_1000A5F30((uint64_t)v181);
        sub_1000801A8((uint64_t)v180);
        v155 = &type metadata for FeatureUnit;
        unint64_t v156 = sub_10007FD28();
        uint64_t v39 = swift_allocObject(&unk_100105EB8, 88LL, 7LL);
        *(void *)v154 = v39;
        __int128 v137 = v181[3];
        *(_OWORD *)(v39 + 48) = v181[2];
        *(_OWORD *)(v39 + 64) = v137;
        *(void *)(v39 + 80) = v182;
        __int128 v42 = v181[0];
        __int128 v41 = v181[1];
        goto LABEL_120;
      }

      return;
    case 0x1E:
      sub_1000A9774(a1, a2 | 0x1E00);
      if (!v3)
      {
        sub_1000A60BC((uint64_t)v184);
        sub_100080164(v183);
        v155 = &type metadata for ProcessingUnit;
        unint64_t v156 = sub_10004E6BC();
        uint64_t v39 = swift_allocObject(&unk_100105FF8, 96LL, 7LL);
        *(void *)v154 = v39;
        __int128 v138 = v184[3];
        *(_OWORD *)(v39 + 48) = v184[2];
        *(_OWORD *)(v39 + 64) = v138;
        *(_OWORD *)(v39 + 80) = v184[4];
        __int128 v42 = v184[0];
        __int128 v41 = v184[1];
        goto LABEL_120;
      }

      return;
    case 0x1F:
      sub_1000A9B4C(a1, a2 | 0x1F00);
      if (!v3)
      {
        if (v189) {
          int v43 = v189;
        }
        else {
          int v43 = 16711680;
        }
        swift_bridgeObjectRetain(v188);
        sub_1000AF8DC( v185[3],  0LL,  v188,  0LL,  0LL,  0,  (uint64_t)_swiftEmptyArrayStorage,  v43,  (uint64_t)v190,  v186,  v187,  (uint64_t)_swiftEmptyArrayStorage);
        sub_1000801DC((uint64_t)v185);
        v155 = &type metadata for ExtensionUnit;
        unint64_t v156 = sub_10004E52C();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105FD0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v44 = v190[3];
        v31[3] = v190[2];
        v31[4] = v44;
        __int128 v45 = v190[5];
        v31[5] = v190[4];
        v31[6] = v45;
        __int128 v34 = v190[0];
        __int128 v35 = v190[1];
        goto LABEL_121;
      }

      return;
    case 0x21:
      sub_10005CACC(a1, a2 | 0x2100);
      if (!v3)
      {
        sub_10005A368((uint64_t)v191);
        v155 = &type metadata for InputTerminal;
        unint64_t v156 = sub_10007FE64();
        uint64_t v21 = swift_allocObject(&unk_100105F08, 120LL, 7LL);
        *(void *)v154 = v21;
        __int128 v46 = v191[5];
        *(_OWORD *)(v21 + 80) = v191[4];
        *(_OWORD *)(v21 + 96) = v46;
        *(void *)(v21 + 112) = v192;
        __int128 v47 = v191[1];
        *(_OWORD *)(v21 + 16) = v191[0];
        *(_OWORD *)(v21 + 32) = v47;
        __int128 v25 = v191[2];
        __int128 v24 = v191[3];
        goto LABEL_105;
      }

      return;
    case 0x22:
      sub_10005CEC4(a1, a2 | 0x2200);
      if (!v3)
      {
        sub_10005A8F8(v48, v49, v50, v51, v193);
        v155 = &type metadata for OutputTerminal;
        unint64_t v156 = sub_10007FDB4();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105EE0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v52 = v193[3];
        v31[3] = v193[2];
        v31[4] = v52;
        __int128 v53 = v193[5];
        v31[5] = v193[4];
        v31[6] = v53;
        __int128 v34 = v193[0];
        __int128 v35 = v193[1];
        goto LABEL_121;
      }

      return;
    case 0x23:
      sub_10005D264(a1, a2 | 0x2300);
      if (!v3)
      {
        sub_10005B034((uint64_t)v195);
        sub_1000801DC((uint64_t)v194);
        v155 = &type metadata for MixerUnit;
        unint64_t v156 = sub_10001A4C0();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100106070, 104LL, 7LL);
        *(void *)v154 = v31;
        __int128 v139 = v195[3];
        v31[3] = v195[2];
        v31[4] = v139;
        v31[5] = v195[4];
        *((void *)v31 + 12) = v196;
        __int128 v34 = v195[0];
        __int128 v35 = v195[1];
        goto LABEL_121;
      }

      return;
    case 0x24:
      sub_10005D618(a1, a2 | 0x2400);
      if (!v3)
      {
        uint64_t v58 = v57;
        sub_10005B2D0(v54 & 0xFFFFFFFFFFFFFFLL, v55, v56, v57, (uint64_t)v197);
        swift_bridgeObjectRelease(v58);
        v155 = &type metadata for SelectorUnit;
        unint64_t v156 = sub_10001B56C();
        uint64_t v39 = swift_allocObject(&unk_100106048, 88LL, 7LL);
        *(void *)v154 = v39;
        __int128 v41 = v197[1];
        __int128 v59 = v197[3];
        *(_OWORD *)(v39 + 48) = v197[2];
        *(_OWORD *)(v39 + 64) = v59;
        *(void *)(v39 + 80) = v198;
        __int128 v42 = v197[0];
        goto LABEL_120;
      }

      return;
    case 0x25:
      sub_10005D670(a1, a2 | 0x2500);
      if (!v3)
      {
        *(void *)v154 = &_swiftEmptySetSingleton;
        uint64_t v60 = v203;
        sub_10008013C((uint64_t)v199);
        uint64_t v278 = (uint64_t)sub_10007BD78( v60,  (uint64_t)v154,  (uint64_t)v150,  (void (*)(uint64_t *__return_ptr, int *, uint64_t))sub_10005B4E4);
        sub_100080074((uint64_t)v199);
        if (v204) {
          int v61 = v204;
        }
        else {
          int v61 = -65536;
        }
        uint64_t v149 = v199[3];
        uint64_t v62 = v199[4];
        uint64_t v63 = v200;
        char v64 = v201;
        char v148 = v202;
        uint64_t v65 = *(void *)v154;
        uint64_t v66 = swift_bridgeObjectRetain(*(void *)v154);
        v67 = sub_100051240(v66);
        swift_bridgeObjectRelease(v65);
        uint64_t v68 = v67[2];
        swift_bridgeObjectRelease(v65);
        if (!v68)
        {
          swift_release(v67);
          v67 = 0LL;
        }

        v69 = v199;
        goto LABEL_68;
      }

      return;
    case 0x28:
      sub_10005DB78(a1, a2 | 0x2800);
      if (!v3)
      {
        sub_10005B8B0(v206);
        sub_10007FD00((uint64_t)v205);
        v155 = &type metadata for ExtensionUnit;
        unint64_t v156 = sub_10004E52C();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105FD0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v70 = v206[3];
        v31[3] = v206[2];
        v31[4] = v70;
        __int128 v71 = v206[5];
        v31[5] = v206[4];
        v31[6] = v71;
        __int128 v34 = v206[0];
        __int128 v35 = v206[1];
        goto LABEL_121;
      }

      return;
    case 0x29:
      sub_10005E1BC(a1, a2 | 0x2900);
      if (!v3)
      {
        sub_10005BDCC(v72, v73, v74, v207);
        v155 = &type metadata for ClockSource;
        unint64_t v156 = sub_10001FB68();
        v75 = (_OWORD *)swift_allocObject(&unk_100105F58, 80LL, 7LL);
        *(void *)v154 = v75;
        __int128 v76 = v207[1];
        v75[1] = v207[0];
        v75[2] = v76;
        __int128 v77 = v207[2];
        __int128 v78 = v207[3];
        goto LABEL_83;
      }

      return;
    case 0x2A:
      sub_10005E548(a1, a2 | 0x2A00);
      if (!v3)
      {
        v83 = v82;
        sub_10005C59C(v79 & 0xFFFFFFFFFFFFFFLL, v80, v81, v82, v208);
        swift_bridgeObjectRelease(v83);
        v155 = &type metadata for ClockSelector;
        unint64_t v156 = sub_100028764();
        uint64_t v140 = swift_allocObject(&unk_100105F30, 72LL, 7LL);
        *(void *)v154 = v140;
        __int128 v141 = v208[1];
        *(_OWORD *)(v140 + 16) = v208[0];
        *(_OWORD *)(v140 + 32) = v141;
        *(_OWORD *)(v140 + 48) = v208[2];
        uint64_t v142 = v209;
        goto LABEL_130;
      }

      return;
    case 0x2E:
      sub_1000A1F28(a1, a2 | 0x2E00);
      if (!v3)
      {
        sub_10009DF90((uint64_t)v210);
        v155 = &type metadata for InputTerminal;
        unint64_t v156 = sub_10007FE64();
        uint64_t v21 = swift_allocObject(&unk_100105F08, 120LL, 7LL);
        *(void *)v154 = v21;
        __int128 v84 = v210[5];
        *(_OWORD *)(v21 + 80) = v210[4];
        *(_OWORD *)(v21 + 96) = v84;
        *(void *)(v21 + 112) = v211;
        __int128 v85 = v210[1];
        *(_OWORD *)(v21 + 16) = v210[0];
        *(_OWORD *)(v21 + 32) = v85;
        __int128 v24 = v210[3];
        __int128 v25 = v210[2];
        goto LABEL_105;
      }

      return;
    case 0x2F:
      sub_1000A22CC(a1, a2 | 0x2F00);
      if (!v3)
      {
        sub_10009E28C(v212);
        v155 = &type metadata for OutputTerminal;
        unint64_t v156 = sub_10007FDB4();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105EE0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v86 = v212[3];
        v31[3] = v212[2];
        v31[4] = v86;
        __int128 v87 = v212[5];
        v31[5] = v212[4];
        v31[6] = v87;
        __int128 v34 = v212[0];
        __int128 v35 = v212[1];
        goto LABEL_121;
      }

      return;
    case 0x30:
      sub_1000A26C4(a1, a2 | 0x3000);
      if (!v3)
      {
        sub_10009E544((uint64_t)v214);
        sub_1000800CC((uint64_t)v213);
        v155 = &type metadata for MixerUnit;
        unint64_t v156 = sub_10001A4C0();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100106070, 104LL, 7LL);
        *(void *)v154 = v31;
        __int128 v143 = v214[3];
        v31[3] = v214[2];
        v31[4] = v143;
        v31[5] = v214[4];
        *((void *)v31 + 12) = v215;
        __int128 v34 = v214[0];
        __int128 v35 = v214[1];
        goto LABEL_121;
      }

      return;
    case 0x31:
      sub_1000A2A68(a1, a2 | 0x3100);
      if (!v3)
      {
        sub_10009E814((uint64_t)v217);
        sub_10007FD00((uint64_t)v216);
        v155 = &type metadata for SelectorUnit;
        unint64_t v156 = sub_10001B56C();
        uint64_t v39 = swift_allocObject(&unk_100106048, 88LL, 7LL);
        *(void *)v154 = v39;
        __int128 v41 = v217[1];
        __int128 v88 = v217[3];
        *(_OWORD *)(v39 + 48) = v217[2];
        *(_OWORD *)(v39 + 64) = v88;
        *(void *)(v39 + 80) = v218;
        __int128 v42 = v217[0];
        goto LABEL_120;
      }

      return;
    case 0x32:
      sub_1000A2AC0(a1, a2 | 0x3200);
      if (!v3)
      {
        *(void *)v154 = &_swiftEmptySetSingleton;
        uint64_t v89 = v223;
        sub_10008013C((uint64_t)v219);
        uint64_t v278 = (uint64_t)sub_10007BD78( v89,  (uint64_t)v154,  (uint64_t)v151,  (void (*)(uint64_t *__return_ptr, int *, uint64_t))sub_1000A1A18);
        sub_100080074((uint64_t)v219);
        if (v224) {
          int v61 = v224 | 0x10000;
        }
        else {
          int v61 = -65536;
        }
        uint64_t v149 = v219[3];
        uint64_t v62 = v219[4];
        uint64_t v63 = v220;
        char v64 = v221;
        char v148 = v222;
        uint64_t v90 = *(void *)v154;
        uint64_t v91 = swift_bridgeObjectRetain(*(void *)v154);
        v67 = sub_100051240(v91);
        swift_bridgeObjectRelease(v90);
        uint64_t v92 = v67[2];
        swift_bridgeObjectRelease(v90);
        if (!v92)
        {
          swift_release(v67);
          v67 = 0LL;
        }

        v69 = v219;
LABEL_68:
        sub_100080074((uint64_t)v69);
        v155 = &type metadata for FeatureUnit;
        unint64_t v156 = sub_10007FD28();
        uint64_t v93 = swift_allocObject(&unk_100105EB8, 88LL, 7LL);
        *(void *)v154 = v93;
        *(void *)(v93 + 16) = v62;
        *(_BYTE *)(v93 + 24) = 0;
        *(void *)(v93 + 32) = v149;
        *(_BYTE *)(v93 + 42) = BYTE2(v61);
        *(_WORD *)(v93 + 40) = v61;
        *(void *)(v93 + 48) = v63;
        *(_BYTE *)(v93 + 56) = v64;
        *(_BYTE *)(v93 + 57) = v148;
        *(void *)(v93 + 64) = v278;
        *(void *)(v93 + 72) = 0LL;
        *(void *)(v93 + 80) = v67;
        goto LABEL_122;
      }

      return;
    case 0x33:
      sub_1000A2FE0(a1, a2 | 0x3300);
      if (!v3)
      {
        if (v228) {
          int v94 = v228 | 0x10000;
        }
        else {
          int v94 = -65536;
        }
        uint64_t v95 = v225[3];
        uint64_t v96 = v225[6];
        sub_100080074((uint64_t)v225);
        uint64_t v97 = v226;
        __int16 v98 = v227;
        v155 = &type metadata for EffectUnit;
        unint64_t v156 = sub_10004E858();
        uint64_t v99 = swift_allocObject(&unk_100106020, 80LL, 7LL);
        *(void *)v154 = v99;
        *(void *)(v99 + 16) = v96;
        *(_BYTE *)(v99 + 24) = 0;
        *(void *)(v99 + 32) = v95;
        *(_BYTE *)(v99 + 42) = BYTE2(v94);
        *(_WORD *)(v99 + 40) = v94;
        *(void *)(v99 + 48) = v97;
        *(_WORD *)(v99 + 56) = v98;
        goto LABEL_119;
      }

      return;
    case 0x34:
      sub_1000A3528(a1, a2 | 0x3400);
      if (!v3)
      {
        if (v233) {
          int v100 = v233 | 0x10000;
        }
        else {
          int v100 = 16711680;
        }
        swift_bridgeObjectRetain(v232);
        sub_1000AF7C0( v229[3],  0LL,  v232,  (uint64_t)_swiftEmptyArrayStorage,  v100,  (uint64_t)_swiftEmptyArrayStorage,  v230,  v231,  (uint64_t)v234,  (uint64_t)_swiftEmptyArrayStorage);
        sub_100080004((uint64_t)v229);
        v155 = &type metadata for ProcessingUnit;
        unint64_t v156 = sub_10004E6BC();
        uint64_t v39 = swift_allocObject(&unk_100105FF8, 96LL, 7LL);
        *(void *)v154 = v39;
        __int128 v101 = v234[3];
        *(_OWORD *)(v39 + 48) = v234[2];
        *(_OWORD *)(v39 + 64) = v101;
        *(_OWORD *)(v39 + 80) = v234[4];
        __int128 v41 = v234[1];
        __int128 v42 = v234[0];
LABEL_120:
        *(_OWORD *)(v39 + 16) = v42;
        *(_OWORD *)(v39 + 32) = v41;
        goto LABEL_122;
      }

      return;
    case 0x35:
      sub_1000A38C0(a1, a2 | 0x3500);
      if (!v3)
      {
        sub_10009E948(v236);
        sub_10007FD00((uint64_t)v235);
        v155 = &type metadata for ExtensionUnit;
        unint64_t v156 = sub_10004E52C();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105FD0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v102 = v236[3];
        v31[3] = v236[2];
        v31[4] = v102;
        __int128 v103 = v236[5];
        v31[5] = v236[4];
        v31[6] = v103;
        __int128 v34 = v236[0];
        __int128 v35 = v236[1];
        goto LABEL_121;
      }

      return;
    case 0x36:
      sub_1000A3ED4(a1, a2 | 0x3600);
      *(void *)v154 = v104;
      *(_DWORD *)&v154[8] = v105;
      if (!v3)
      {
        LOWORD(v152) = v104;
        BYTE2(v152) = BYTE2(v104);
        BYTE3(v152) = BYTE3(v104);
        BYTE4(v152) = BYTE4(v104);
        *(_DWORD *)((char *)&v152 + 5) = *(_DWORD *)&v154[5];
        BYTE9(v152) = BYTE1(v105);
        WORD5(v152) = HIWORD(v105);
        sub_10009EC0C(v152, DWORD2(v152), v106, v107, v237);
        v155 = &type metadata for ClockSource;
        unint64_t v156 = sub_10001FB68();
        v75 = (_OWORD *)swift_allocObject(&unk_100105F58, 80LL, 7LL);
        *(void *)v154 = v75;
        __int128 v108 = v237[1];
        v75[1] = v237[0];
        v75[2] = v108;
        __int128 v77 = v237[2];
        __int128 v78 = v237[3];
LABEL_83:
        v75[3] = v77;
        v75[4] = v78;
        goto LABEL_122;
      }

      return;
    case 0x37:
      sub_1000A4214(a1, a2 | 0x3700);
      if (!v3)
      {
        sub_10009F12C(v239);
        sub_10007FD00((uint64_t)v238);
        v155 = &type metadata for ClockSelector;
        unint64_t v156 = sub_100028764();
        uint64_t v140 = swift_allocObject(&unk_100105F30, 72LL, 7LL);
        *(void *)v154 = v140;
        __int128 v146 = v239[1];
        *(_OWORD *)(v140 + 16) = v239[0];
        *(_OWORD *)(v140 + 32) = v146;
        *(_OWORD *)(v140 + 48) = v239[2];
        uint64_t v142 = v240;
        goto LABEL_130;
      }

      return;
    case 0x38:
      sub_1000A4888(a1, a2 | 0x3800);
      *(void *)v154 = v109;
      *(_DWORD *)&v154[8] = v110;
      if (!v3)
      {
        LOWORD(v152) = v109;
        BYTE2(v152) = BYTE2(v109);
        BYTE3(v152) = BYTE3(v109);
        BYTE4(v152) = BYTE4(v109);
        *(_DWORD *)((char *)&v152 + 5) = *(_DWORD *)&v154[5];
        *(_WORD *)((char *)&v152 + 9) = v110 >> 8;
        sub_10009F5AC(v152, DWORD2(v152), v111, v112, (uint64_t)v241);
        v155 = &type metadata for ClockMultiplier;
        unint64_t v156 = sub_10007FF60();
        uint64_t v113 = swift_allocObject(&unk_100105FA8, 68LL, 7LL);
        *(void *)v154 = v113;
        __int128 v114 = v241[1];
        *(_OWORD *)(v113 + 16) = v241[0];
        *(_OWORD *)(v113 + 32) = v114;
        *(_OWORD *)(v113 + 48) = v241[2];
        *(_DWORD *)(v113 + 64) = v242;
        goto LABEL_122;
      }

      return;
    case 0x3B:
      sub_1000A4BB4(a1, a2 | 0x3B00);
      if (!v3)
      {
        if (v247) {
          int v115 = v247 | 0x10000;
        }
        else {
          int v115 = -65536;
        }
        uint64_t v116 = v246;
        uint64_t v117 = v244;
        __int16 v118 = v245;
        v155 = &type metadata for PowerDomain;
        unint64_t v156 = sub_10004E5AC();
        uint64_t v119 = swift_allocObject(&unk_100105F80, 64LL, 7LL);
        *(void *)v154 = v119;
        *(void *)(v119 + 16) = v243;
        *(_BYTE *)(v119 + 26) = BYTE2(v115);
        *(_WORD *)(v119 + 24) = v115;
        *(void *)(v119 + 32) = v117;
        *(_WORD *)(v119 + 40) = v118;
        *(void *)(v119 + 48) = 0LL;
        *(void *)(v119 + 56) = v116;
        goto LABEL_122;
      }

      return;
    case 0x4E:
      sub_1000BDA50(a1, a2 | 0x4E00);
      if (!v3)
      {
        uint64_t v120 = v248;
        uint64_t v121 = v249;
        __int16 v122 = v250;
        *((void *)&v158 + 1) = &type metadata for ClockSource;
        unint64_t v159 = sub_10001FB68();
        uint64_t v123 = swift_allocObject(&unk_100105F58, 80LL, 7LL);
        *(void *)&__int128 v157 = v123;
        *(_BYTE *)(v123 + 18) = -1;
        *(_WORD *)(v123 + 16) = 0;
        *(void *)(v123 + 24) = v120;
        *(void *)(v123 + 32) = v121;
        *(_WORD *)(v123 + 40) = v122;
        *(void *)(v123 + 48) = 0LL;
        *(void *)(v123 + 56) = 0LL;
        *(_WORD *)(v123 + 64) = 257;
        *(void *)(v123 + 72) = 0LL;
        goto LABEL_123;
      }

      return;
    case 0x4F:
      sub_1000BDD94(a1, a2 | 0x4F00);
      if (!v3)
      {
        sub_1000B9C68((uint64_t)v252);
        sub_10007FEF4((uint64_t)v251);
        v155 = &type metadata for ClockSelector;
        unint64_t v156 = sub_100028764();
        uint64_t v140 = swift_allocObject(&unk_100105F30, 72LL, 7LL);
        *(void *)v154 = v140;
        __int128 v147 = v252[1];
        *(_OWORD *)(v140 + 16) = v252[0];
        *(_OWORD *)(v140 + 32) = v147;
        *(_OWORD *)(v140 + 48) = v252[2];
        uint64_t v142 = v253;
LABEL_130:
        *(void *)(v140 + 64) = v142;
        goto LABEL_122;
      }

      return;
    case 0x50:
      sub_1000BE210(a1, a2 | 0x5000);
      if (!v3)
      {
        if (v258 == 1) {
          uint64_t v124 = 257LL;
        }
        else {
          uint64_t v124 = 512LL;
        }
        if (v255) {
          int v125 = v255 | 0x10000;
        }
        else {
          int v125 = 16711680;
        }
        sub_1000AF324( v256,  v257,  v124,  0LL,  0,  (uint64_t)_swiftEmptyArrayStorage,  v125,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v261,  0LL,  0xF000000000000000LL,  v259,  v260,  (uint64_t)_swiftEmptyArrayStorage);
        sub_10007FE24(&v254);
        v155 = &type metadata for InputTerminal;
        unint64_t v156 = sub_10007FE64();
        uint64_t v21 = swift_allocObject(&unk_100105F08, 120LL, 7LL);
        *(void *)v154 = v21;
        __int128 v24 = v261[3];
        __int128 v126 = v261[5];
        *(_OWORD *)(v21 + 80) = v261[4];
        *(_OWORD *)(v21 + 96) = v126;
        *(void *)(v21 + 112) = v262;
        __int128 v127 = v261[1];
        *(_OWORD *)(v21 + 16) = v261[0];
        *(_OWORD *)(v21 + 32) = v127;
        __int128 v25 = v261[2];
LABEL_105:
        *(_OWORD *)(v21 + 48) = v25;
        *(_OWORD *)(v21 + 64) = v24;
        goto LABEL_122;
      }

      return;
    case 0x51:
      sub_1000BE4D8(a1, a2 | 0x5100);
      if (!v3)
      {
        if (v268 == 1) {
          uint64_t v128 = 257LL;
        }
        else {
          uint64_t v128 = 768LL;
        }
        if (v264) {
          int v129 = v264 | 0x10000;
        }
        else {
          int v129 = 16711680;
        }
        sub_1000AF4A4( v265,  v267,  v266,  v128,  0LL,  0,  v129,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v271,  v269,  v270,  (uint64_t)_swiftEmptyArrayStorage);
        sub_10007FD70((uint64_t)v263);
        v155 = &type metadata for OutputTerminal;
        unint64_t v156 = sub_10007FDB4();
        uint64_t v31 = (_OWORD *)swift_allocObject(&unk_100105EE0, 112LL, 7LL);
        *(void *)v154 = v31;
        __int128 v130 = v271[3];
        v31[3] = v271[2];
        v31[4] = v130;
        __int128 v131 = v271[5];
        v31[5] = v271[4];
        v31[6] = v131;
        __int128 v34 = v271[0];
        __int128 v35 = v271[1];
LABEL_121:
        v31[1] = v34;
        v31[2] = v35;
        goto LABEL_122;
      }

      return;
    case 0x54:
      sub_1000BE780(a1, a2 | 0x5400);
      if (!v3)
      {
        uint64_t v132 = v274;
        uint64_t v133 = v275;
        if (v273) {
          int v134 = v273 | 0x10000;
        }
        else {
          int v134 = -65536;
        }
        sub_10007FD00((uint64_t)v272);
        uint64_t v135 = v276;
        __int16 v136 = v277;
        v155 = &type metadata for FeatureUnit;
        unint64_t v156 = sub_10007FD28();
        uint64_t v99 = swift_allocObject(&unk_100105EB8, 88LL, 7LL);
        *(void *)v154 = v99;
        *(void *)(v99 + 16) = v133;
        *(_BYTE *)(v99 + 24) = 0;
        *(void *)(v99 + 32) = v132;
        *(_BYTE *)(v99 + 42) = BYTE2(v134);
        *(_WORD *)(v99 + 40) = v134;
        *(void *)(v99 + 48) = v135;
        *(_WORD *)(v99 + 56) = v136;
        *(void *)(v99 + 80) = 0LL;
LABEL_119:
        *(void *)(v99 + 64) = _swiftEmptyArrayStorage;
        *(void *)(v99 + 72) = 0LL;
LABEL_122:
        sub_10007FCB8((uint64_t)v154, (uint64_t)&v157);
        goto LABEL_123;
      }

      return;
    default:
      unint64_t v159 = 0LL;
      __int128 v157 = 0u;
      __int128 v158 = 0u;
LABEL_123:
      sub_10007FC70((uint64_t)&v157, (uint64_t)&v152);
      if (!v153)
      {
        sub_1000178B0((uint64_t)&v152, &qword_100114940);
        goto LABEL_127;
      }

      sub_10000AF84(&v152, (uint64_t)v154);
      v144 = v155;
      unint64_t v145 = v156;
      sub_1000178EC(v154, (uint64_t)v155);
      if ((*(uint64_t (**)(ValueMetadata *, unint64_t))(v145 + 16))(v144, v145))
      {
        sub_100017A40(v154);
LABEL_127:
        sub_10007FCB8((uint64_t)&v157, a3);
        return;
      }

      sub_100029840( 0x2064696C61766E49LL,  0xEE00797469746E65LL,  0x2928797469746E65LL,  (void *)0xE800000000000000LL,  0xD00000000000001DLL,  0x80000001000D05E0LL,  882LL);
      sub_1000178B0((uint64_t)&v157, &qword_100114940);
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 32) = 0LL;
      sub_100017A40(v154);
      return;
  }

uint64_t sub_10007D860(_BYTE *a1, __int16 a2)
{
  unsigned __int8 v2 = HIBYTE(a2);
  uint64_t v4 = (_BYTE *)USBDescriptor.usbDescriptor()((uint64_t)a1, a2);
  if (v4)
  {
    unsigned __int8 v5 = v4;
    uint64_t v6 = *v4;
    if (*v4)
    {
      if (v6 <= 0xE)
      {
        return sub_1000762D0(v4, &v4[v6]);
      }

      else
      {
        uint64_t v7 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
        __DataStorage.init(bytes:length:)(v5, v6);
        return v6 << 32;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else if (v2 - 77 < 8 || v2 == 74)
  {
    return sub_100076390(a1, *(unsigned __int16 *)a1);
  }

  else
  {
    return 0LL;
  }

uint64_t USBDescriptor.usbDescriptor()(uint64_t a1, __int16 a2)
{
  uint64_t result = 0LL;
  switch(HIBYTE(a2))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4B:
    case 0x4C:
      uint64_t result = a1;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t USBDescriptor.descriptorTypeName.getter(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v4 = a2 >> 8;
  uint64_t v5 = type metadata accessor for Mirror(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned __int8 v8 = (char *)&v15[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v15[1] = &type metadata for USBDescriptor;
  *(void *)&__int128 v14 = a1;
  BYTE8(v14) = v2;
  BYTE9(v14) = v4;
  uint64_t v9 = Mirror.init(reflecting:)(&v14);
  uint64_t v10 = (void *)Mirror.children.getter(v9);
  sub_10007BE80(v10, &v14);
  swift_release(v10);
  if (!v15[3])
  {
    sub_1000178B0((uint64_t)&v14, &qword_100113CD0);
LABEL_5:
    *(void *)&__int128 v14 = a1;
    BYTE8(v14) = v2;
    BYTE9(v14) = v4;
    uint64_t v11 = String.init<A>(describing:)(&v14, &type metadata for USBDescriptor);
    goto LABEL_6;
  }

  uint64_t v12 = *((void *)&v14 + 1);
  uint64_t v11 = v14;
  sub_100017A40(v15);
  if (!v12) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

void USBDescriptor.hash(into:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }

void sub_10007DAC0()
{
}

Swift::Int USBDescriptor.hashValue.getter(uint64_t a1, __int16 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10007DDE8()
{
  uint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  USBDescriptor.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_10007DE34(uint64_t a1)
{
}

Swift::Int sub_10007DE40(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  __int16 v3 = *(_WORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  USBDescriptor.hash(into:)((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10007DE88(uint64_t a1)
{
  return _s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)a1, *(_WORD *)(a1 + 8));
}

Swift::Bool __swiftcall USBDescriptorControl.supportsRange()()
{
  return ((v0 >> 18) & 0x3C | (v0 >> 6)) == 22;
}

void USBDescriptorControl.hash(into:)(uint64_t a1, int a2)
{
  __asm { BR              X10 }

void sub_10007DEF4()
{
}

uint64_t static USBDescriptorControl.__derived_enum_equals(_:_:)(int a1)
{
  return sub_10007E938(a1 & 0xFFFFFF);
}

Swift::Int USBDescriptorControl.hashValue.getter(int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10007E2E0()
{
  int v1 = *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
  Hasher.init(_seed:)(v3, 0LL);
  USBDescriptorControl.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10007E32C(uint64_t a1)
{
}

Swift::Int sub_10007E33C(uint64_t a1)
{
  int v2 = *v1 | (*((unsigned __int8 *)v1 + 2) << 16);
  Hasher.init(_seed:)(v4, a1);
  USBDescriptorControl.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007E384(unsigned __int16 *a1)
{
  return sub_10007E938(*a1 | (*((unsigned __int8 *)a1 + 2) << 16));
}

uint64_t _s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, __int16 a2)
{
  return ((uint64_t (*)(void))((char *)sub_10007E3C4 + 4 * word_1000D7FD6[HIBYTE(a2)]))();
}

BOOL sub_10007E3C4@<W0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  BOOL v3 = a2 == a1;
  return !v2 && v3;
}

uint64_t sub_10007E938(unsigned int a1)
{
  return ((uint64_t (*)(void))((char *)sub_10007E95C + 4 * word_1000D8082[(a1 >> 18) & 0x3C | (a1 >> 6)]))();
}

BOOL sub_10007E95C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xFF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return !((a2 >> 18) & 0x3C | (a2 >> 6)) && v2;
}

BOOL sub_10007E9A8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 1 && v2;
}

BOOL sub_10007E9F4(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 2 && v2;
}

BOOL sub_10007EA40(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 3 && v2;
}

BOOL sub_10007EA8C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 4 && v2;
}

BOOL sub_10007EAD8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 5 && v2;
}

BOOL sub_10007EB24(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 6 && v2;
}

BOOL sub_10007EB70(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 7 && v2;
}

BOOL sub_10007EBBC(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 8 && v2;
}

BOOL sub_10007EC08(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 9 && v2;
}

BOOL sub_10007EC54(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xA && v2;
}

BOOL sub_10007ECA0(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xB && v2;
}

BOOL sub_10007ECEC(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xC && v2;
}

BOOL sub_10007ED38(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xD && v2;
}

BOOL sub_10007ED84(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xE && v2;
}

BOOL sub_10007EDD0(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0xF && v2;
}

BOOL sub_10007EE1C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x10 && v2;
}

BOOL sub_10007EE68(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x11 && v2;
}

BOOL sub_10007EEB4(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x12 && v2;
}

BOOL sub_10007EF00(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x13 && v2;
}

BOOL sub_10007EF4C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x14 && v2;
}

BOOL sub_10007EF98(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x15 && v2;
}

BOOL sub_10007EFE4(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x16 && v2;
}

BOOL sub_10007F030(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x17 && v2;
}

BOOL sub_10007F07C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x18 && v2;
}

BOOL sub_10007F0C8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x19 && v2;
}

BOOL sub_10007F114(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1A && v2;
}

BOOL sub_10007F160(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1B && v2;
}

BOOL sub_10007F1AC(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1C && v2;
}

BOOL sub_10007F1F8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1D && v2;
}

BOOL sub_10007F244(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1E && v2;
}

BOOL sub_10007F290(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x1F && v2;
}

BOOL sub_10007F2DC(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x20 && v2;
}

BOOL sub_10007F328(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x21 && v2;
}

BOOL sub_10007F374(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x22 && v2;
}

BOOL sub_10007F3C0(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x23 && v2;
}

BOOL sub_10007F40C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x24 && v2;
}

BOOL sub_10007F458(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x25 && v2;
}

BOOL sub_10007F4A4(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x26 && v2;
}

BOOL sub_10007F4F0(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x27 && v2;
}

BOOL sub_10007F53C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x28 && v2;
}

BOOL sub_10007F588(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x29 && v2;
}

BOOL sub_10007F5D4(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2A && v2;
}

BOOL sub_10007F620(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2B && v2;
}

BOOL sub_10007F66C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2C && v2;
}

BOOL sub_10007F6B8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2D && v2;
}

BOOL sub_10007F704(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2E && v2;
}

BOOL sub_10007F750(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x2F && v2;
}

BOOL sub_10007F79C(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x30 && v2;
}

BOOL sub_10007F7E8(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x31 && v2;
}

BOOL sub_10007F834(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x32 && v2;
}

BOOL sub_10007F880(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x33 && v2;
}

BOOL sub_10007F8CC(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x34 && v2;
}

BOOL sub_10007F918(int a1, unsigned int a2)
{
  BOOL v2 = BYTE1(a1) == BYTE1(a2) && ((a2 ^ a1) & 0xF0000) == 0;
  if (((a1 & 1) == 0) == (a2 & 1)) {
    BOOL v2 = 0;
  }
  return ((a2 >> 18) & 0x3C | (a2 >> 6)) == 0x35 && v2;
}

unint64_t sub_10007F968()
{
  unint64_t result = qword_100115508;
  if (!qword_100115508)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for USBDescriptor, &type metadata for USBDescriptor);
    atomic_store(result, (unint64_t *)&qword_100115508);
  }

  return result;
}

unint64_t sub_10007F9B0()
{
  unint64_t result = qword_100115510;
  if (!qword_100115510)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for USBDescriptorControl,  &type metadata for USBDescriptorControl);
    atomic_store(result, (unint64_t *)&qword_100115510);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for USBDescriptor(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for USBDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xAB && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 171);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 0x55) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for USBDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xAA)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 171;
    if (a3 >= 0xAB) {
      *(_BYTE *)(result + 10) = 1;
    }
  }

  else
  {
    if (a3 >= 0xAB) {
      *(_BYTE *)(result + 10) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 9) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10007FA94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_10007FA9C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 9) = a2;
  return result;
}

ValueMetadata *type metadata accessor for USBDescriptor()
{
  return &type metadata for USBDescriptor;
}

uint64_t getEnumTagSinglePayload for USBDescriptorControl(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7CB)
  {
    if ((a2 + 33552437) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16775221;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
    }
  }

  unsigned int v4 = ((((8 * *((unsigned __int8 *)a1 + 2)) & 0x780 | (*a1 >> 1)) >> 5) & 0xFFFFF83F | (((*a1 >> 1) & 0x1F) << 6)) ^ 0x7FF;
  if (v4 >= 0x7CA) {
    unsigned int v4 = -1;
  }
  return v4 + 1;
}

uint64_t storeEnumTagSinglePayload for USBDescriptorControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33552437) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0x7CA) {
    int v3 = 0;
  }
  if (a2 > 0x7CA)
  {
    *(_WORD *)unint64_t result = a2 - 1995;
    *(_BYTE *)(result + 2) = (a2 - 1995) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1995) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_WORD *)unint64_t result = (-a2 >> 5) & 0x3E | ((-(__int16)a2 & 0x7FF) << 6) & 0xFE;
      *(_BYTE *)(result + 2) = ((((-a2 >> 5) & 0x3E | ((-a2 & 0x7FF) << 6)) - (a2 << 18)) & 0xF000FE) >> 16;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

uint64_t sub_10007FBF0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 2) >> 2) & 0x3C | (*(_WORD *)a1 >> 6);
}

unsigned __int16 *sub_10007FC08(unsigned __int16 *result)
{
  int v1 = *result | (*((unsigned __int8 *)result + 2) << 16);
  *result &= 0xFF3Fu;
  *((_BYTE *)result + 2) = BYTE2(v1) & 0xF;
  return result;
}

unsigned __int16 *sub_10007FC2C(unsigned __int16 *result, int a2)
{
  int v2 = ((a2 << 18) | ((a2 & 3) << 6)) & 0xF000F0 | (*result | (*((unsigned __int8 *)result + 2) << 16)) & 0xFFF01;
  *unint64_t result = ((a2 & 3) << 6) | *result & 0xFF01;
  *((_BYTE *)result + 2) = BYTE2(v2);
  return result;
}

ValueMetadata *type metadata accessor for USBDescriptorControl()
{
  return &type metadata for USBDescriptorControl;
}

uint64_t sub_10007FC70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100114940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007FCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100114940);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007FD00(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007FD28()
{
  unint64_t result = qword_100115518;
  if (!qword_100115518)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FeatureUnit, &type metadata for FeatureUnit);
    atomic_store(result, (unint64_t *)&qword_100115518);
  }

  return result;
}

uint64_t sub_10007FD70(uint64_t a1)
{
  return a1;
}

unint64_t sub_10007FD9C(unint64_t result, uint64_t a2)
{
  if (result >> 62 == 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

unint64_t sub_10007FDB4()
{
  unint64_t result = qword_100115520;
  if (!qword_100115520)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OutputTerminal,  &type metadata for OutputTerminal);
    atomic_store(result, (unint64_t *)&qword_100115520);
  }

  return result;
}

uint64_t sub_10007FDF8()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

void *sub_10007FE24(void *a1)
{
  unint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  swift_bridgeObjectRelease(a1[6]);
  sub_10007FD9C(v2, v3);
  return a1;
}

unint64_t sub_10007FE64()
{
  unint64_t result = qword_100115528;
  if (!qword_100115528)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InputTerminal, &type metadata for InputTerminal);
    atomic_store(result, (unint64_t *)&qword_100115528);
  }

  return result;
}

uint64_t sub_10007FEA8()
{
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_100032E74(v0[11], v1);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_10007FEF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007FF1C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10007FF50()
{
  return sub_10004ABBC(80LL);
}

uint64_t sub_10007FF58()
{
  return sub_10004ABBC(64LL);
}

unint64_t sub_10007FF60()
{
  unint64_t result = qword_100115530;
  if (!qword_100115530)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClockMultiplier,  &type metadata for ClockMultiplier);
    atomic_store(result, (unint64_t *)&qword_100115530);
  }

  return result;
}

uint64_t sub_10007FFA4()
{
  return swift_deallocObject(v0, 68LL, 7LL);
}

uint64_t sub_10007FFC8()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100080004(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100080038()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100080074(uint64_t a1)
{
  return a1;
}

uint64_t sub_10008009C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1000800CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100080100()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_10008013C(uint64_t a1)
{
  return a1;
}

void *sub_100080164(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000801A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000801DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_10008020C(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 6);
  if (v1 != 3)
  {
    if (v1 == 2)
    {
      switch((*(_BYTE *)(result + 7) >> 4) | (16 * *(_BYTE *)(result + 7)))
      {
        case 0:
        case 2:
        case 3:
        case 4:
          return result;
        default:
          unint64_t v7 = sub_10000AE14();
          uint64_t v3 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
          *(_BYTE *)uint64_t v4 = 42;
          uint64_t v5 = 428LL;
          goto LABEL_10;
      }
    }

    else
    {
      if (v1 != 1)
      {
        unint64_t v6 = sub_10000AE14();
        uint64_t v3 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
        *(_BYTE *)uint64_t v4 = 43;
        uint64_t v5 = 433LL;
        goto LABEL_10;
      }

      if (((*(_BYTE *)(result + 7) >> 4) | (16 * *(_BYTE *)(result + 7))) >= 5u
        || ((0x1Du >> ((*(_BYTE *)(result + 7) >> 4) | (16 * *(_BYTE *)(result + 7)))) & 1) == 0)
      {
        unint64_t v2 = sub_10000AE14();
        uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
        *(_BYTE *)uint64_t v4 = 42;
        uint64_t v5 = 418LL;
LABEL_10:
        *(void *)(v4 + 8) = 0LL;
        *(void *)(v4 + 16) = 0xE000000000000000LL;
        *(void *)(v4 + 24) = 0xD000000000000015LL;
        *(void *)(v4 + 32) = 0x80000001000D0630LL;
        *(void *)(v4 + 40) = 0xD00000000000001DLL;
        *(void *)(v4 + 48) = 0x80000001000D05E0LL;
        *(void *)(v4 + 56) = v5;
        return swift_willThrow(v3);
      }
    }
  }

  return result;
}

uint64_t sub_1000803FC(uint64_t result)
{
  if (*(_BYTE *)(result + 1) == 36 && *(unsigned __int8 *)(result + 2) - 1 >= 0xD)
  {
    unint64_t v1 = sub_10000AE14();
    uint64_t v2 = swift_allocError(&type metadata for AUAError, v1, 0LL, 0LL);
    *(_BYTE *)uint64_t v3 = 41;
    *(void *)(v3 + 8) = 0LL;
    *(void *)(v3 + 16) = 0xE000000000000000LL;
    *(void *)(v3 + 24) = 0xD00000000000001CLL;
    *(void *)(v3 + 32) = 0x80000001000D06B0LL;
    *(void *)(v3 + 40) = 0xD00000000000001DLL;
    *(void *)(v3 + 48) = 0x80000001000D05E0LL;
    *(void *)(v3 + 56) = 123LL;
    return swift_willThrow(v2);
  }

  return result;
}

uint64_t sub_1000804C4(uint64_t result)
{
  if (*(_BYTE *)(result + 1) == 36
    && ((*(_BYTE *)(result + 2) - 1) >= 0x10u || ((0xFFF7u >> (*(_BYTE *)(result + 2) - 1)) & 1) == 0))
  {
    unint64_t v1 = sub_10000AE14();
    uint64_t v2 = swift_allocError(&type metadata for AUAError, v1, 0LL, 0LL);
    *(_BYTE *)uint64_t v3 = 41;
    *(void *)(v3 + 8) = 0LL;
    *(void *)(v3 + 16) = 0xE000000000000000LL;
    *(void *)(v3 + 24) = 0xD00000000000001CLL;
    *(void *)(v3 + 32) = 0x80000001000D06D0LL;
    *(void *)(v3 + 40) = 0xD00000000000001DLL;
    *(void *)(v3 + 48) = 0x80000001000D05E0LL;
    *(void *)(v3 + 56) = 173LL;
    return swift_willThrow(v2);
  }

  return result;
}

uint64_t sub_1000805A4(uint64_t result, unsigned __int8 a2)
{
  switch((a2 >> 4) | (16 * a2))
  {
    case 0:
      if (*(_BYTE *)(result + 1) == 36)
      {
        switch(*(_BYTE *)(result + 2))
        {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            unint64_t v7 = sub_10000AE14();
            uint64_t v3 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
            *(_BYTE *)uint64_t v4 = 41;
            *(void *)(v4 + 8) = 0LL;
            *(void *)(v4 + 16) = 0xE000000000000000LL;
            *(void *)(v4 + 24) = 0xD00000000000001CLL;
            *(void *)(v4 + 32) = 0x80000001000D0690LL;
            *(void *)(v4 + 40) = 0xD00000000000001DLL;
            *(void *)(v4 + 48) = 0x80000001000D05E0LL;
            uint64_t v5 = 77LL;
            goto LABEL_12;
        }
      }

      break;
    case 2:
      unint64_t result = sub_1000803FC(result);
      break;
    case 3:
      unint64_t result = sub_1000804C4(result);
      break;
    case 4:
      if (*(_BYTE *)(result + 1) == 33 && *(_BYTE *)(result + 2) != 1)
      {
        unint64_t v6 = sub_10000AE14();
        uint64_t v3 = swift_allocError(&type metadata for AUAError, v6, 0LL, 0LL);
        *(_BYTE *)uint64_t v4 = 41;
        *(void *)(v4 + 8) = 0LL;
        *(void *)(v4 + 16) = 0xE000000000000000LL;
        *(void *)(v4 + 24) = 0xD00000000000001CLL;
        *(void *)(v4 + 32) = 0x80000001000D0670LL;
        *(void *)(v4 + 40) = 0xD00000000000001DLL;
        *(void *)(v4 + 48) = 0x80000001000D05E0LL;
        uint64_t v5 = 193LL;
        goto LABEL_12;
      }

      break;
    default:
      unint64_t v2 = sub_10000AE14();
      uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
      *(_BYTE *)uint64_t v4 = 42;
      *(void *)(v4 + 8) = 0LL;
      *(void *)(v4 + 16) = 0xE000000000000000LL;
      *(void *)(v4 + 24) = 0xD00000000000001DLL;
      *(void *)(v4 + 32) = 0x80000001000D0650LL;
      *(void *)(v4 + 40) = 0xD00000000000001DLL;
      *(void *)(v4 + 48) = 0x80000001000D05E0LL;
      uint64_t v5 = 374LL;
LABEL_12:
      *(void *)(v4 + 56) = v5;
      unint64_t result = swift_willThrow(v3);
      break;
  }

  return result;
}

uint64_t sub_100080834(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(_BYTE *)(result + 2) == 1) {
      return result;
    }
    uint64_t v3 = 244LL;
LABEL_14:
    unint64_t v4 = sub_10000AE14();
    uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
    *(_BYTE *)uint64_t v6 = 41;
    *(void *)(v6 + 8) = 0LL;
    *(void *)(v6 + 16) = 0xE000000000000000LL;
    *(void *)(v6 + 24) = 0xD00000000000001ELL;
    *(void *)(v6 + 32) = 0x80000001000D0730LL;
    *(void *)(v6 + 40) = 0xD00000000000001DLL;
    *(void *)(v6 + 48) = 0x80000001000D05E0LL;
    *(void *)(v6 + 56) = v3;
    return swift_willThrow(v5);
  }

  if (v1 == 36)
  {
    int v2 = *(unsigned __int8 *)(result + 2);
    if (v2 != 1 && v2 != 3 && v2 != 2)
    {
      uint64_t v3 = 234LL;
      goto LABEL_14;
    }
  }

  return result;
}

uint64_t sub_100080964(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(_BYTE *)(result + 2) == 1) {
      return result;
    }
    uint64_t v2 = 288LL;
LABEL_10:
    unint64_t v3 = sub_10000AE14();
    uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
    *(_BYTE *)uint64_t v5 = 41;
    *(void *)(v5 + 8) = 0LL;
    *(void *)(v5 + 16) = 0xE000000000000000LL;
    *(void *)(v5 + 24) = 0xD00000000000001ELL;
    *(void *)(v5 + 32) = 0x80000001000D0750LL;
    *(void *)(v5 + 40) = 0xD00000000000001DLL;
    *(void *)(v5 + 48) = 0x80000001000D05E0LL;
    *(void *)(v5 + 56) = v2;
    return swift_willThrow(v4);
  }

  if (v1 == 36 && (*(_BYTE *)(result + 2) - 1) >= 4u)
  {
    uint64_t v2 = 277LL;
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_100080A58(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 1);
  if (v1 == 37)
  {
    if (*(_BYTE *)(result + 2) == 1) {
      return result;
    }
    uint64_t v3 = 327LL;
LABEL_12:
    unint64_t v4 = sub_10000AE14();
    uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
    *(_BYTE *)uint64_t v6 = 41;
    *(void *)(v6 + 8) = 0LL;
    *(void *)(v6 + 16) = 0xE000000000000000LL;
    *(void *)(v6 + 24) = 0xD00000000000001ELL;
    *(void *)(v6 + 32) = 0x80000001000D0770LL;
    *(void *)(v6 + 40) = 0xD00000000000001DLL;
    *(void *)(v6 + 48) = 0x80000001000D05E0LL;
    *(void *)(v6 + 56) = v3;
    return swift_willThrow(v5);
  }

  if (v1 == 36)
  {
    int v2 = *(unsigned __int8 *)(result + 2);
    if (v2 != 1 && v2 != 2)
    {
      uint64_t v3 = 317LL;
      goto LABEL_12;
    }
  }

  return result;
}

uint64_t sub_100080B58(uint64_t result, unsigned __int8 a2)
{
  switch((a2 >> 4) | (16 * a2))
  {
    case 0:
      unint64_t result = sub_100080834(result);
      break;
    case 2:
      unint64_t result = sub_100080964(result);
      break;
    case 3:
      unint64_t result = sub_100080A58(result);
      break;
    case 4:
      if (*(_BYTE *)(result + 1) == 33 && *(_BYTE *)(result + 2) != 2)
      {
        unint64_t v8 = sub_10000AE14();
        uint64_t v3 = swift_allocError(&type metadata for AUAError, v8, 0LL, 0LL);
        *(_BYTE *)uint64_t v4 = 41;
        unint64_t v5 = 0xD00000000000001ELL;
        unint64_t v6 = 0x80000001000D0710LL;
        uint64_t v7 = 352LL;
        goto LABEL_11;
      }

      break;
    default:
      unint64_t v2 = sub_10000AE14();
      uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
      *(_BYTE *)uint64_t v4 = 42;
      unint64_t v5 = 0xD00000000000001FLL;
      unint64_t v6 = 0x80000001000D06F0LL;
      uint64_t v7 = 393LL;
LABEL_11:
      *(void *)(v4 + 8) = 0LL;
      *(void *)(v4 + 16) = 0xE000000000000000LL;
      *(void *)(v4 + 24) = v5;
      *(void *)(v4 + 32) = v6;
      *(void *)(v4 + 40) = 0xD00000000000001DLL;
      *(void *)(v4 + 48) = 0x80000001000D05E0LL;
      *(void *)(v4 + 56) = v7;
      unint64_t result = swift_willThrow(v3);
      break;
  }

  return result;
}

uint64_t sub_100080CE8(_BYTE *a1, __int16 a2)
{
  uint64_t v3 = a1;
  switch(a1[1])
  {
    case 4:
      if (a1[5] == 1)
      {
        uint64_t v4 = sub_10008020C((uint64_t)a1);
        if (!v2) {
          return v4;
        }
      }

      return (uint64_t)v3;
    case 5:
      if (*a1 == 9)
      {
        switch(HIBYTE(a2))
        {
          case 0:
          case 1:
            if ((_BYTE)a2) {
              goto LABEL_8;
            }
            break;
          case 2:
            return (uint64_t)v3;
          default:
LABEL_8:
            sub_100029840( 0xD000000000000027LL,  0x80000001000D0600LL,  0x5F3A5F2874696E69LL,  (void *)0xEA0000000000293ALL,  0xD00000000000001DLL,  0x80000001000D05E0LL,  519LL);
            break;
        }
      }

      return (uint64_t)v3;
    case 0xB:
    case 0x30:
    case 0x31:
      return (uint64_t)v3;
    default:
      if (HIBYTE(a2) == 255) {
        return (uint64_t)v3;
      }
      if (HIBYTE(a2) == 1)
      {
        uint64_t v4 = sub_100080B58((uint64_t)a1, a2);
        if (v2) {
          return (uint64_t)v3;
        }
        return v4;
      }

      if (!HIBYTE(a2))
      {
        uint64_t v4 = sub_1000805A4((uint64_t)a1, a2);
        if (!v2) {
          return v4;
        }
      }

      return (uint64_t)v3;
  }

uint64_t sub_100080ED4(uint64_t result)
{
  if (*(_WORD *)(result + 2) == 1)
  {
    uint64_t v1 = 576LL;
    switch(*(_WORD *)(result + 4))
    {
      case 1:
      case 2:
      case 3:
      case 5:
      case 7:
      case 0xB:
      case 0xE:
        return result;
      default:
        goto LABEL_4;
    }
  }

  else
  {
    uint64_t v1 = 579LL;
LABEL_4:
    unint64_t v2 = sub_10000AE14();
    uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
    *(_BYTE *)uint64_t v4 = 33;
    *(void *)(v4 + 8) = 0LL;
    *(void *)(v4 + 16) = 0xE000000000000000LL;
    *(void *)(v4 + 24) = 0x293A5F2874696E69LL;
    *(void *)(v4 + 32) = 0xE800000000000000LL;
    *(void *)(v4 + 40) = 0xD00000000000001DLL;
    *(void *)(v4 + 48) = 0x80000001000D05E0LL;
    *(void *)(v4 + 56) = v1;
    return swift_willThrow(v3);
  }

uint64_t sub_100080FE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *a1;
  unint64_t v6 = (void *)a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  *(void *)&__int128 v20 = *a1;
  *((void *)&v20 + Hasher._combine(_:)(v0 & 1) = v6;
  sub_100017294((uint64_t)(a1 + 2), (uint64_t)v21);
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_100017A40(v21);
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_100016AFC(v7, (uint64_t)v6);
      if ((v10 & 1) != 0)
      {
        sub_100017910(*(void *)(a2 + 56) + 40 * v9, (uint64_t)&v17);
      }

      else
      {
        uint64_t v19 = 0LL;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
      }

      swift_bridgeObjectRelease(v6);
      if (*((void *)&v18 + 1))
      {
        sub_10000AF84(&v17, (uint64_t)&v20);
        uint64_t v11 = &v20;
LABEL_11:
        sub_10000AF84(v11, (uint64_t)v22);
        *a3 = v7;
        a3[1] = (uint64_t)v6;
        return sub_10000AF84(v22, (uint64_t)(a3 + 2));
      }
    }

    else
    {
      uint64_t v19 = 0LL;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
    }

    sub_1000812D8((uint64_t)&v17);
    __int128 v20 = *(_OWORD *)a1;
    sub_100017294(v8, (uint64_t)v21);
    uint64_t v12 = sub_100008E00(&qword_100115540);
    if ((swift_dynamicCast(v15, v21, (char *)&type metadata for Any + 8, v12, 6LL) & 1) != 0)
    {
      sub_10000AF84(v15, (uint64_t)&v17);
      uint64_t v11 = &v17;
      goto LABEL_11;
    }

    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    sub_1000812D8((uint64_t)v15);
    *(void *)&__int128 v20 = 0LL;
    *((void *)&v20 + Hasher._combine(_:)(v0 & 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(43LL);
    swift_bridgeObjectRelease(*((void *)&v20 + 1));
    *(void *)&__int128 v20 = 0xD000000000000029LL;
    *((void *)&v20 + Hasher._combine(_:)(v0 & 1) = 0x80000001000CDF90LL;
    v14._countAndFlagsBits = v7;
    v14._object = v6;
    String.append(_:)(v14);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v20,  *((void *)&v20 + 1),  "AUASDCore/SynthesizedEncodable.swift",  36LL,  2LL,  48LL,  0);
  }

  else
  {
    sub_100017A40(v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x80000001000D07E0LL,  "AUASDCore/SynthesizedEncodable.swift",  36LL,  2LL,  41LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_10008124C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100081278@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void sub_100081280(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t sub_100081288(uint64_t a1)
{
  unint64_t v2 = sub_1000814E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000812B0(uint64_t a1)
{
  unint64_t v2 = sub_1000814E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000812D8(uint64_t a1)
{
  uint64_t v2 = sub_100008E00(&qword_100115538);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for Configuration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for Configuration(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

void *assignWithCopy for Configuration(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for SynthesizedEncodableKey(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Configuration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SynthesizedEncodableKey()
{
  return &type metadata for SynthesizedEncodableKey;
}

unint64_t sub_100081454()
{
  unint64_t result = qword_100115548;
  if (!qword_100115548)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D82A8, &type metadata for SynthesizedEncodableKey);
    atomic_store(result, (unint64_t *)&qword_100115548);
  }

  return result;
}

unint64_t sub_10008149C()
{
  unint64_t result = qword_100115550;
  if (!qword_100115550)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D82D0, &type metadata for SynthesizedEncodableKey);
    atomic_store(result, (unint64_t *)&qword_100115550);
  }

  return result;
}

unint64_t sub_1000814E0()
{
  unint64_t result = qword_100115558;
  if (!qword_100115558)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D82F8, &type metadata for SynthesizedEncodableKey);
    atomic_store(result, (unint64_t *)&qword_100115558);
  }

  return result;
}

uint64_t ActiveStreamingInterface.function.getter()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 16));
}

uint64_t ActiveStreamingInterface.function.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_unknownObjectRelease(v5, v6);
}

uint64_t (*ActiveStreamingInterface.function.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t ActiveControlInterface.controlInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10005EBF8(v1 + 32, a1);
}

id ActiveControlInterface.usbDevice.getter()
{
  return *(id *)(v0 + 152);
}

uint64_t ActiveControlInterface.interruptEP.getter()
{
  return swift_retain(*(void *)(v0 + 160));
}

uint64_t ActiveControlInterface.entityList.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 168));
}

uint64_t ActiveControlInterface.hasLatencyControl.getter()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 152) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (!v1) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  if (*(_BYTE *)(v1 + 32) == 22) {
    return 0LL;
  }
  if (v2 == 1) {
    return *(unsigned __int8 *)(v0 + 49);
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    if (*(_BYTE *)(v1 + i) == 22) {
      return 0LL;
    }
    if (v5 == v2) {
      return *(unsigned __int8 *)(v0 + 49);
    }
  }

  __break(1u);
  return result;
}

uint64_t ActiveStreamingInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 32) + 2LL);
}

uint64_t ActiveControlInterface.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_bridgeObjectRetain(*(void *)(v0 + 184));
  return v1;
}

uint64_t ActiveControlInterface.category.getter()
{
  return *(unsigned __int8 *)(v0 + 208);
}

uint64_t sub_1000816C4(uint64_t a1, void *a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  unint64_t v83 = a5;
  int v86 = a3;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v84 = *(void *)(v12 - 8);
  uint64_t v85 = v12;
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v15);
  __int128 v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v18);
  __int128 v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v7 + 16) = 0LL;
  *(void *)(v7 + 24) = 0LL;
  __int128 v21 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v7 + 112) = v21;
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 112);
  __int128 v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 48) = v23;
  __int128 v24 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v7 + 80) = v24;
  *(void *)(v7 + 144) = v22;
  *(void *)(v7 + 152) = a2;
  unint64_t v25 = v83;
  *(void *)(v7 + 168) = a4;
  *(void *)(v7 + 176) = v25;
  *(void *)(v7 + 184) = a6;
  unint64_t v83 = sub_100082138();
  unint64_t v26 = a2;
  unsigned __int8 v27 = sub_100030860((void *)a1);
  static DispatchQoS.userInteractive.getter(v27);
  __int128 v88 = _swiftEmptyArrayStorage;
  uint64_t v28 = sub_10000B6D4( &qword_1001151A8,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v29 = sub_100008E00(&qword_1001151B0);
  unint64_t v30 = sub_100082174();
  uint64_t v31 = v29;
  __int128 v32 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v31, v30, v15, v28);
  (*(void (**)(char *, void, uint64_t))(v84 + 104))( v14,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v85);
  __int128 v33 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000029LL,  0x80000001000D0930LL,  v20,  v17,  v14,  0LL);
  *(void *)(v7 + 192) = v33;
  uint64_t v34 = *(void *)&v26[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v34 && sub_10001645C(15LL, *(void *)&v26[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList])) {
    char v35 = 4;
  }
  else {
    char v35 = *(_BYTE *)(a1 + 16);
  }
  *(_BYTE *)(v7 + 208) = v35;
  if ((v86 & 1) == 0)
  {
    *(void *)(v7 + 200) = 0LL;
    goto LABEL_14;
  }

  int v36 = *(void **)&v26[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
  if (!v36) {
    goto LABEL_20;
  }
  uint64_t v37 = objc_opt_self(&OBJC_CLASS___IOUSBHostInterface);
  uint64_t v38 = swift_dynamicCastObjCClass(v36, v37);
  if (!v38)
  {
    uint64_t v55 = objc_opt_self(&OBJC_CLASS___IOUSBHostDevice);
    if (swift_dynamicCastObjCClass(v36, v55))
    {
      unsigned __int8 v56 = *(_BYTE *)(*(void *)a1 + 2LL);
      id v57 = v32;
      id v58 = v33;
      uint64_t v59 = v87;
      uint64_t v60 = sub_1000B3D58(v56, v33, (uint64_t)sub_100081CA0, 0LL);
      uint64_t v87 = v59;
      if (v59)
      {

        sub_100030944((void *)a1);
        int v86 = 0;
        __int128 v32 = v58;
        goto LABEL_21;
      }

      int v81 = v60;

      *(void *)(v7 + 200) = v81;
LABEL_14:
      uint64_t v45 = *(void *)(v7 + 128);
      if (v45 == 1)
      {

        sub_100030944((void *)a1);
        *(void *)(v7 + 160) = 0LL;
      }

      else
      {
        uint64_t v47 = *(void *)(v7 + 136);
        uint64_t v46 = *(void *)(v7 + 144);
        uint64_t v49 = *(void *)(v7 + 112);
        uint64_t v48 = *(void *)(v7 + 120);
        char v50 = *(_BYTE *)(v7 + 104);
        uint64_t v51 = *(void *)(v7 + 96);
        uint64_t v89 = *(void *)(v7 + 72);
        __int128 v90 = *(_OWORD *)(v7 + 80);
        __int16 v91 = v51 & 0x1FF;
        char v92 = v50 & 1;
        uint64_t v93 = v49;
        __int16 v94 = v48 & 0x1FF;
        uint64_t v95 = v45;
        uint64_t v96 = v47;
        uint64_t v97 = v46;
        unsigned __int8 v52 = *(_BYTE *)(*(void *)a1 + 7LL);
        sub_100030944((void *)a1);
        uint64_t active = type metadata accessor for ActiveEndpoint();
        swift_allocObject(active, 136LL, 7LL);
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRetain(v47);
        sub_1000C7B74((uint64_t)&v89, (char *)v32, v52);
        *(void *)(v7 + 160) = v54;
      }

      return v7;
    }

LABEL_20:
    sub_100030944((void *)a1);
    unint64_t v61 = sub_10000AE14();
    uint64_t v62 = swift_allocError(&type metadata for AUAError, v61, 0LL, 0LL);
    *(_BYTE *)uint64_t v63 = 1;
    *(void *)(v63 + 8) = 0LL;
    *(void *)(v63 + 16) = 0xE000000000000000LL;
    *(void *)(v63 + 24) = 0xD000000000000055LL;
    *(void *)(v63 + 32) = 0x80000001000D0960LL;
    *(void *)(v63 + 40) = 0xD000000000000026LL;
    *(void *)(v63 + 48) = 0x80000001000D08C0LL;
    *(void *)(v63 + 56) = 74LL;
    uint64_t v87 = v62;
    swift_willThrow(v62);
    int v86 = 0;
    goto LABEL_21;
  }

  uint64_t v39 = (void *)v38;
  *(void *)(v7 + 200) = v38;
  if (!v34 || !sub_10001645C(17LL, v34))
  {
    id v44 = v36;
    goto LABEL_14;
  }

  __int128 v88 = 0LL;
  id v40 = v36;
  unsigned int v41 = [v39 setIdleTimeout:&v88 error:2000.0];
  __int128 v42 = v88;
  if (v41)
  {
    int v43 = v88;

    goto LABEL_14;
  }

  __int128 v78 = v88;
  sub_100030944((void *)a1);
  uint64_t v79 = _convertNSErrorToError(_:)(v42);

  uint64_t v87 = v79;
  swift_willThrow(v80);

  int v86 = 1;
LABEL_21:

  swift_unknownObjectRelease(*(void *)(v7 + 16), v64);
  uint64_t v65 = *(void *)(v7 + 40);
  uint64_t v66 = *(void *)(v7 + 56);
  uint64_t v67 = *(void *)(v7 + 64);
  uint64_t v68 = *(void *)(v7 + 72);
  uint64_t v69 = *(void *)(v7 + 88);
  uint64_t v84 = *(void *)(v7 + 80);
  uint64_t v85 = v68;
  uint64_t v70 = *(void *)(v7 + 96);
  uint64_t v71 = *(void *)(v7 + 104);
  uint64_t v73 = *(void *)(v7 + 112);
  unint64_t v72 = *(void *)(v7 + 120);
  uint64_t v74 = *(void *)(v7 + 136);
  uint64_t v82 = *(void *)(v7 + 128);
  unint64_t v83 = v72;
  uint64_t v75 = *(void *)(v7 + 144);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v67);
  sub_100019E58(v85, v84, v69, v70, v71, v73, v83, v82, v74, v75);

  swift_bridgeObjectRelease(*(void *)(v7 + 168));
  swift_bridgeObjectRelease(*(void *)(v7 + 184));

  if (v86) {
  uint64_t v76 = type metadata accessor for ActiveControlInterface();
  }
  swift_deallocPartialClassInstance(v7, v76, 209LL, 7LL);
  return v7;
}

  __break(1u);
LABEL_21:
  uint64_t v15 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_21:
  uint64_t result = (uint64_t)sub_100050CB4((void *)(v16 > 1), v9, 1, v8);
  uint64_t v8 = (void *)result;
LABEL_15:
  v8[2] = v9;
  uint64_t v29 = &v8[3 * v6];
  v29[4] = v5;
  v29[5] = v10;
  v29[6] = 1LL;
LABEL_16:
  *unint64_t v30 = v31;
  v30[1] = v8;
  return result;
}

    if ([v29 code] == (id)-536850432 || v23 == 3) {
      goto LABEL_31;
    }
    usleep(0x186A0u);

    swift_errorRelease(v53);
    ++v23;
    __int128 v33 = v8;
    unint64_t v9 = mach_absolute_time();
    aBlock = 0LL;
    uint64_t v34 = [v33 sendDeviceRequest:a1 data:a2 bytesTransferred:a3 completionTimeout:&aBlock error:5.0];
    uint64_t v11 = aBlock;
    if ((v34 & 1) != 0) {
      goto LABEL_3;
    }
  }

  if (v31 != 2)
  {
    char v35 = 34LL;
    while (1)
    {
      int v36 = v35 - 31;
      if (__OFADD__(v35 - 32, 1LL)) {
        break;
      }
      if (*(_BYTE *)(v30 + v35) == 30) {
        goto LABEL_20;
      }
      ++v35;
      if (v36 == v31) {
        goto LABEL_31;
      }
    }

    __break(1u);
    goto LABEL_35;
  }

void sub_100081CA0(uint64_t a1, int a2)
{
  if (a2 == -536870896) {
    sub_100029834( 0xD000000000000018LL,  0x80000001000D09C0LL,  0xD000000000000055LL,  (void *)0x80000001000D0960LL,  0xD000000000000026LL,  0x80000001000D08C0LL,  69LL);
  }
}

uint64_t ActiveControlInterface.entity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 168);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = v4 + 32;
    swift_bridgeObjectRetain(*(void *)(v2 + 168));
    while (1)
    {
      sub_100017910(v7, (uint64_t)&v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_1000178EC(&v11, v12);
      sub_100017A40(&v11);
      v7 += 40LL;
      if (!--v5) {
        goto LABEL_7;
      }
    }

    sub_10000AF84(&v11, a2);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v2 + 168));
LABEL_7:
    *(void *)(a2 + 32) = 0LL;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }

  return swift_bridgeObjectRelease(v4);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveControlInterface.processInterrupt(attribute:controlSelector:)( AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector)
{
}

uint64_t ActiveControlInterface.deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(v2 + 88);
  uint64_t v14 = *(void *)(v2 + 80);
  uint64_t v15 = *(void *)(v2 + 72);
  uint64_t v6 = *(void *)(v2 + 96);
  uint64_t v7 = *(void *)(v2 + 104);
  uint64_t v8 = *(void *)(v2 + 112);
  uint64_t v9 = *(void *)(v2 + 120);
  uint64_t v10 = *(void *)(v2 + 136);
  uint64_t v13 = *(void *)(v2 + 128);
  uint64_t v11 = *(void *)(v2 + 144);
  swift_bridgeObjectRelease(*(void *)(v2 + 40));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  sub_100019E58(v15, v14, v5, v6, v7, v8, v9, v13, v10, v11);

  swift_release(*(void *)(v2 + 160));
  swift_bridgeObjectRelease(*(void *)(v2 + 168));
  swift_bridgeObjectRelease(*(void *)(v2 + 184));

  return v2;
}

uint64_t ActiveControlInterface.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  return swift_deallocClassInstance(v2, 209LL, 7LL);
}

void sub_100081EEC(char a1)
{
  if (a1 == 2)
  {
    sub_100029834( 0xD000000000000039LL,  0x80000001000D08F0LL,  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000026LL,  0x80000001000D08C0LL,  109LL);
  }

  else
  {
    unint64_t v1 = sub_10000AE14();
    uint64_t v2 = swift_allocError(&type metadata for AUAError, v1, 0LL, 0LL);
    *(_BYTE *)uint64_t v3 = 2;
    *(void *)(v3 + 8) = 0LL;
    *(void *)(v3 + 16) = 0xE000000000000000LL;
    *(void *)(v3 + 24) = 0xD00000000000002CLL;
    *(void *)(v3 + 32) = 0x80000001000D0890LL;
    *(void *)(v3 + 40) = 0xD000000000000026LL;
    *(void *)(v3 + 48) = 0x80000001000D08C0LL;
    *(void *)(v3 + 56) = 108LL;
    swift_willThrow(v2);
  }

uint64_t sub_100081FD8()
{
  return sub_10000B6D4( &qword_100115560,  (uint64_t (*)(uint64_t))type metadata accessor for tIOUSBDescriptorType,  (uint64_t)&unk_1000D55BC);
}

unint64_t sub_100082008()
{
  unint64_t result = qword_100115568;
  if (!qword_100115568)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAControlInterfaceControlSelector,  &type metadata for AUAControlInterfaceControlSelector);
    atomic_store(result, (unint64_t *)&qword_100115568);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AUAControlInterfaceControlSelector( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100082098 + 4 * byte_1000D8355[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000820CC + 4 * byte_1000D8350[v4]))();
}

uint64_t sub_1000820CC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000820D4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000820DCLL);
  }
  return result;
}

uint64_t sub_1000820E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000820F0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000820F4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000820FC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAControlInterfaceControlSelector()
{
  return &type metadata for AUAControlInterfaceControlSelector;
}

uint64_t type metadata accessor for ActiveControlInterface()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore22ActiveControlInterface);
}

unint64_t sub_100082138()
{
  unint64_t result = qword_1001151A0;
  if (!qword_1001151A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001151A0);
  }

  return result;
}

unint64_t sub_100082174()
{
  unint64_t result = qword_1001151B8;
  if (!qword_1001151B8)
  {
    uint64_t v1 = sub_1000175B0(&qword_1001151B0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001151B8);
  }

  return result;
}

uint64_t sub_1000821C0(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v6 = v2;
  int v7 = 12714112;
  uint64_t v8 = v2 + 16;
  swift_beginAccess(v2 + 16, v100, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v10 = *(void *)(v6 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    LODWORD(v10) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v10 + 40))(ObjectType, v10);
    swift_unknownObjectRelease(v2, v12);
    if ((_DWORD)v10 == 32) {
      int v7 = 12715904;
    }
    else {
      int v7 = 12714112;
    }
  }

  uint64_t v13 = swift_unknownObjectWeakLoadStrong(v8);
  if (!v13)
  {
    uint64_t v96 = 0LL;
    memset(v95, 0, sizeof(v95));
    sub_1000178B0((uint64_t)v95, &qword_100114040);
    unint64_t v43 = sub_10000AE14();
    uint64_t v44 = swift_allocError(&type metadata for AUAError, v43, 0LL, 0LL);
    *(_BYTE *)uint64_t v45 = 1;
    *(void *)(v45 + 8) = 0LL;
    *(void *)(v45 + 16) = 0xE000000000000000LL;
    *(void *)(v45 + 24) = 0xD000000000000010LL;
    *(void *)(v45 + 32) = 0x80000001000CF860LL;
    *(void *)(v45 + 40) = 0xD00000000000001CLL;
    *(void *)(v45 + 48) = 0x80000001000CE050LL;
    *(void *)(v45 + 56) = 159LL;
    swift_willThrow(v44);
    return v2;
  }

  uint64_t v2 = v13;
  uint64_t v14 = *(void *)(v6 + 24);
  uint64_t v15 = swift_getObjectType(v13);
  v94[3] = a1(0LL);
  v94[4] = a2;
  v94[0] = v6;
  swift_retain(v6);
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(v7, (uint64_t)v94, 0LL, v15, v14, (uint64_t)v95);
  swift_unknownObjectRelease(v2, v16);
  sub_100017A40(v94);
  if (v3) {
    return v2;
  }
  uint64_t v91 = 0LL;
  sub_10000AF84(v95, (uint64_t)v97);
  uint64_t v18 = v98;
  uint64_t v17 = v99;
  uint64_t v19 = sub_1000178EC(v97, v98);
  uint64_t v93 = v84;
  __int128 v20 = *(void **)(v18 - 8);
  __int128 v21 = (void *)v20[8];
  __chkstk_darwin(v19);
  unint64_t v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  __int128 v23 = (void (*)(char *))v20[2];
  v23((char *)v84 - v22);
  uint64_t v24 = *(void *)(v17 + 8);
  uint64_t v25 = dispatch thunk of static BinaryInteger.isSigned.getter(v18, v24);
  char v26 = v25;
  char v92 = v84;
  __int128 v101 = v21;
  __chkstk_darwin(v25);
  unsigned __int8 v27 = (char *)v84 - v22;
  uint64_t v28 = (char *)v84 - v22;
  uint64_t v29 = (char *)v84 - v22;
  unint64_t v30 = (char *)v84 - v22;
  uint64_t v31 = (void (*)(char *, char *, uint64_t))v23;
  ((void (*)(char *, char *, uint64_t))v23)(v28, v30, v18);
  uint64_t v89 = v20;
  if ((v26 & 1) == 0)
  {
    __int128 v33 = (void (*)(char *, uint64_t))v20[1];
    v33(v27, v18);
    uint64_t v35 = v24;
    goto LABEL_16;
  }

  uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v24);
  __int128 v33 = (void (*)(char *, uint64_t))v20[1];
  uint64_t v34 = ((uint64_t (*)(char *, uint64_t))v33)(v27, v18);
  uint64_t v35 = v24;
  if (v32 <= 64)
  {
LABEL_16:
    uint64_t v38 = v29;
    __int128 v42 = v101;
    goto LABEL_31;
  }

  __chkstk_darwin(v34);
  uint64_t v37 = (char *)v84 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = v29;
  v31(v37, v29, v18);
  *(void *)&v95[0] = 0x8000000000000000LL;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v18, v35) & 1) != 0)
  {
    uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v35);
    if (v39 >= 64)
    {
      __int128 v88 = v84;
      __int128 v42 = v101;
      __chkstk_darwin(v39);
      __int128 v90 = v84;
      unint64_t v51 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v95, &type metadata for Int, v51, v18, v35);
      char v52 = dispatch thunk of static Comparable.< infix(_:_:)( v37,  (char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v18,  *(void *)(*(void *)(v35 + 32) + 8LL));
      v33((char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL), v18);
      v33(v37, v18);
      unsigned int v41 = v88;
      if ((v52 & 1) == 0) {
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter(v18, v35);
      v33(v37, v18);
      unsigned int v41 = *(uint64_t **)&v95[0];
      __int128 v42 = v101;
    }

    goto LABEL_29;
  }

  __int128 v90 = v84;
  char v46 = dispatch thunk of static BinaryInteger.isSigned.getter(v18, v35);
  __int128 v88 = (uint64_t *)v37;
  uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter(v18, v35);
  if ((v46 & 1) != 0)
  {
    __int128 v42 = v101;
    if (v47 > 64)
    {
      uint64_t v87 = v84;
      __chkstk_darwin(v47);
      unint64_t v48 = sub_10001CDF8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v95, &type metadata for Int, v48, v18, v35);
      uint64_t v49 = v88;
      char v50 = dispatch thunk of static Comparable.< infix(_:_:)( v88,  (char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v18,  *(void *)(*(void *)(v35 + 32) + 8LL));
      v33((char *)v84 - (((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL), v18);
      v33((char *)v49, v18);
      unsigned int v41 = &v103;
      if ((v50 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }

    uint64_t v86 = *(void *)(*(void *)(v35 + 24) + 16LL);
    uint64_t v56 = v86;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v86);
    uint64_t v87 = v84;
    __chkstk_darwin(AssociatedTypeWitness);
    uint64_t v59 = (char *)v84 - v58;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v56,  v18,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    uint64_t v61 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
    v84[1] = v84;
    __chkstk_darwin(v61);
    unint64_t v85 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    uint64_t v62 = (char *)v84 - v85;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v59, v18, v86);
    uint64_t v63 = v88;
    LODWORD(v86) = dispatch thunk of static Comparable.< infix(_:_:)( v88,  v62,  v18,  *(void *)(*(void *)(v35 + 32) + 8LL));
    uint64_t v64 = ((uint64_t (*)(char *, uint64_t))v33)(v62, v18);
    uint64_t v87 = v84;
    __chkstk_darwin(v64);
    uint64_t v65 = (uint64_t)v84 - v85;
    ((void (*)(char *, uint64_t *, uint64_t))v89[4])((char *)v84 - v85, v63, v18);
    if ((v86 & 1) != 0) {
      goto LABEL_46;
    }
    uint64_t v66 = *(void *)&v95[0];
    uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter(v18, v35);
    v33((char *)v65, v18);
    BOOL v55 = v67 < v66;
  }

  else
  {
    __int128 v42 = v101;
    unsigned int v41 = &v102;
    if (v47 >= 64)
    {
LABEL_30:
      v33((char *)*(v41 - 32), v18);
      goto LABEL_31;
    }

    __int128 v53 = v88;
    uint64_t v54 = dispatch thunk of BinaryInteger._lowWord.getter(v18, v35);
    v33((char *)v53, v18);
    BOOL v55 = v54 < *(void *)&v95[0];
  }

  unsigned int v41 = &v103;
  if (v55)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

uint64_t static AsyncFeedbackType.__derived_enum_equals(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0LL:
      return !a4;
    case 1LL:
      return a4 == 1;
    case 2LL:
      return a4 == 2;
  }

  if (a4 < 3) {
    return 0LL;
  }
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_100082CB8()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100017A94(v0, qword_100117220);
  sub_100008EC4(v0, (uint64_t)qword_100117220);
  return OSSignposter.init(subsystem:category:)( 0xD000000000000013LL,  0x80000001000CC390LL,  0x6165727453415541LL,  0xE90000000000006DLL);
}

Swift::String __swiftcall AsyncFeedbackType.string()()
{
  unint64_t v2 = 0xD000000000000011LL;
  if (v1)
  {
    uint64_t v3 = v1;
    if (v1 == (void *)1)
    {
      uint64_t v4 = "Implicit Feedback";
    }

    else
    {
      if (v1 != (void *)2)
      {
        uint64_t v6 = v0;
        _StringGuts.grow(_:)(24LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        v7._countAndFlagsBits = v6;
        v7._object = v3;
        String.append(_:)(v7);
        unint64_t v2 = 0xD000000000000016LL;
        uint64_t v5 = (void *)0x80000001000D09E0LL;
        goto LABEL_9;
      }

      unint64_t v2 = 0xD00000000000001BLL;
      uint64_t v4 = "Explicit, Implicit Feedback";
    }
  }

  else
  {
    uint64_t v4 = "Explicit Feedback";
  }

  uint64_t v5 = (void *)((unint64_t)(v4 - 32) | 0x8000000000000000LL);
LABEL_9:
  uint64_t v8 = v2;
  result._object = v5;
  result._countAndFlagsBits = v8;
  return result;
}

void AsyncFeedbackType.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a3)
  {
    case 0LL:
      Swift::UInt v5 = 1LL;
      goto LABEL_7;
    case 1LL:
      Swift::UInt v5 = 2LL;
      goto LABEL_7;
    case 2LL:
      Swift::UInt v5 = 3LL;
LABEL_7:
      Hasher._combine(_:)(v5);
      return;
  }

  Hasher._combine(_:)(0LL);
  String.hash(into:)(a1, a2, a3);
}

Swift::Int AsyncFeedbackType.hashValue.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      Swift::UInt v4 = 2LL;
    }

    else
    {
      if (a2 != 2)
      {
        Hasher._combine(_:)(0LL);
        String.hash(into:)(v6, a1, a2);
        return Hasher._finalize()();
      }

      Swift::UInt v4 = 3LL;
    }
  }

  else
  {
    Swift::UInt v4 = 1LL;
  }

  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int sub_100082F08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v5, 0LL);
  if (v2)
  {
    if (v2 == 1)
    {
      Swift::UInt v3 = 2LL;
    }

    else
    {
      if (v2 != 2)
      {
        Hasher._combine(_:)(0LL);
        String.hash(into:)(v5, v1, v2);
        return Hasher._finalize()();
      }

      Swift::UInt v3 = 3LL;
    }
  }

  else
  {
    Swift::UInt v3 = 1LL;
  }

  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100082F94(uint64_t a1)
{
  uint64_t v3 = v1[1];
  switch(v3)
  {
    case 0LL:
      Swift::UInt v4 = 1LL;
      goto LABEL_7;
    case 1LL:
      Swift::UInt v4 = 2LL;
      goto LABEL_7;
    case 2LL:
      Swift::UInt v4 = 3LL;
LABEL_7:
      Hasher._combine(_:)(v4);
      return;
  }

  uint64_t v5 = *v1;
  Hasher._combine(_:)(0LL);
  String.hash(into:)(a1, v5, v3);
}

Swift::Int sub_100083018(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  if (v3)
  {
    if (v3 == 1)
    {
      Swift::UInt v4 = 2LL;
    }

    else
    {
      if (v3 != 2)
      {
        Hasher._combine(_:)(0LL);
        String.hash(into:)(v6, v2, v3);
        return Hasher._finalize()();
      }

      Swift::UInt v4 = 3LL;
    }
  }

  else
  {
    Swift::UInt v4 = 1LL;
  }

  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000830A0(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  switch(v3)
  {
    case 0LL:
      return v4 == 0;
    case 1LL:
      return v4 == 1;
    case 2LL:
      return v4 == 2;
  }

  if (v4 < 3) {
    return 0LL;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_10008311C()
{
  qword_100117238 = (uint64_t)&off_1000FDA08;
}

uint64_t AUAStream.functionProtocol.getter()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___AUAStream_audioDevice);
  if (Strong)
  {
    uint64_t v2 = (void *)Strong;
    uint64_t v3 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
    int v4 = v3 == 0;
    if (v3)
    {
      uint64_t v5 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
      uint64_t ObjectType = swift_getObjectType(*(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function));
      LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    }
  }

  else
  {
    LOBYTE(v3) = 0;
    int v4 = 1;
  }

  return v3 | (v4 << 8);
}

uint64_t AUAStream.function.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___AUAStream_interface);
  swift_beginAccess(v1 + 16, v3, 0LL, 0LL);
  return swift_unknownObjectRetain(*(void *)(v1 + 16));
}

uint64_t AUAStream.latencyInMs.getter()
{
  return *(void *)(v0 + OBJC_IVAR___AUAStream_latencyInMs);
}

uint64_t sub_100083220()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + OBJC_IVAR___AUAStream_interface) + 72LL);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v7 = *(void *)(*(void *)(v0 + OBJC_IVAR___AUAStream_interface) + 72LL);
    }
    else {
      uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v7);
    if (result) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(v1);
    return 3LL;
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v1);
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_6;
  }

  if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v4 = *(void *)(v1 + 32);
    swift_retain(v4);
LABEL_6:
    swift_bridgeObjectRelease(v1);
    uint64_t v5 = *(void *)(v4 + 104);
    swift_retain(v5);
    swift_release(v4);
    uint64_t active = ActiveEndpoint.synchronizationType.getter();
    swift_release(v5);
    return active;
  }

  __break(1u);
  return result;
}

uint64_t AUAStream.controlScope.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR___AUAStream_controlScope);
  swift_beginAccess(v0 + OBJC_IVAR___AUAStream_controlScope, v3, 0LL, 0LL);
  return *v1;
}

uint64_t AUAStream.controlScope.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR___AUAStream_controlScope);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AUAStream.controlScope.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

void sub_1000833D4()
{
  id v1 = [v0 physicalFormat];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = type metadata accessor for AUAStreamFormat();
    uint64_t v4 = swift_dynamicCastClass(v2, v3);
    if (!v4) {
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR___AUAStreamFormat_altSetting);
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = *(void *)(v5 + 104);
    unint64_t v7 = *(void *)(v6 + 56);
    if (!v7) {
      goto LABEL_13;
    }
    int v8 = *(unsigned __int8 *)(v6 + 48);
    uint64_t v9 = *(const IOUSBEndpointDescriptor **)(v6 + 16);
    uint64_t v10 = *(void *)(v6 + 72);
    uint64_t v11 = *(void *)(v6 + 80);
    uint64_t v12 = *(void *)(v6 + 88);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    int v13 = IOUSBGetEndpointSynchronizationType(v9);
    if (!v13) {
      int v13 = IOUSBGetEndpointDirection(v9);
    }
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    int v14 = v13 == 1 ? 0 : v8;
    if (v14 != 1) {
      goto LABEL_13;
    }
    id v15 = [v0 physicalFormat];
    if (!v15) {
      goto LABEL_28;
    }
    uint64_t v16 = v15;
    [v15 sampleRate];
    double v18 = v17;

    if (v18 == 0.0)
    {
LABEL_13:

      return;
    }

    if (!is_mul_ok(v7, 0x3E8uLL)) {
      goto LABEL_23;
    }
    id v19 = [v0 physicalFormat];
    if (!v19)
    {
LABEL_29:
      __break(1u);
      return;
    }

    __int128 v20 = v19;
    [v19 sampleRate];
    double v22 = v21;

    if ((~*(void *)&v22 & 0x7FF0000000000000LL) == 0) {
      goto LABEL_24;
    }
    if (v22 <= -1.0)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    if (v22 >= 1.84467441e19)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    if (!(unint64_t)v22)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (1000 * v7 / (unint64_t)v22 == -1LL)
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }

void sub_1000835CC(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int v8 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (uint64_t)&v116 - v10;
  __chkstk_darwin(v9);
  int v13 = (char *)&v116 - v12;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___AUAStream_audioDevice]);
  if (!Strong)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 98;
    *(void *)(v24 + 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD000000000000020LL;
    *(void *)(v24 + 32) = 0x80000001000D1970LL;
    *(void *)(v24 + 40) = 0xD000000000000016LL;
    *(void *)(v24 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v24 + 56) = 302LL;
    swift_willThrow(v23);
    return;
  }

  id v15 = Strong;
  [Strong samplingRate];
  double v17 = v16;

  if ((~*(void *)&v17 & 0x7FF0000000000000LL) == 0) {
    goto LABEL_36;
  }
  if (v17 <= -1.0) {
    goto LABEL_37;
  }
  if (v17 >= 1.84467441e19) {
    goto LABEL_38;
  }
  uint64_t v119 = v8;
  uint64_t v120 = v13;
  uint64_t v121 = v11;
  unint64_t v2 = (unint64_t)v17;
  id v18 = [v1 physicalFormat];
  unint64_t v19 = (unint64_t)a1 >> 62;
  __int16 v122 = v1;
  uint64_t v123 = v5;
  unint64_t v124 = (unint64_t)a1 >> 62;
  if (!v18)
  {
    uint64_t v25 = *(void *)&v1[OBJC_IVAR___AUAStream_interface];
    char v26 = (uint64_t *)(v25 + 16);
    swift_beginAccess(v25 + 16, v129, 0LL, 0LL);
    int v13 = *(char **)(v25 + 16);
    if (!v13) {
      goto LABEL_45;
    }
    uint64_t v27 = *(void *)(v25 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(v25 + 16));
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 16);
    swift_unknownObjectRetain(v13);
    unint64_t v30 = (char *)v29(ObjectType, v27);
    swift_unknownObjectRelease(v13, v31);
    if (!v30) {
      goto LABEL_44;
    }
    uint64_t v32 = *v26;
    if (*v26)
    {
      uint64_t v33 = *(void *)(v25 + 24);
      uint64_t v34 = swift_getObjectType(v32);
      uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 40);
      swift_unknownObjectRetain(v32);
      unsigned __int8 v36 = v35(v34, v33);
      swift_unknownObjectRelease(v32, v37);
    }

    else
    {
      unsigned __int8 v36 = 0;
    }

    uint64_t v38 = *(void *)&v30[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    id v117 = v30;
    uint64_t v118 = v4;
    if (v38 && sub_10001645C(25LL, v38))
    {
      uint64_t v11 = 24LL;
      if (a1 < 0) {
        goto LABEL_39;
      }
    }

    else
    {
      if (v36 <= 0x20u) {
        uint64_t v11 = 16LL;
      }
      else {
        uint64_t v11 = 24LL;
      }
      if (a1 < 0) {
        goto LABEL_39;
      }
    }

    if ((a1 & 0x4000000000000000LL) == 0)
    {
      uint64_t v39 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v39) {
        goto LABEL_24;
      }
LABEL_43:

      swift_bridgeObjectRelease(a1);
      uint64_t v4 = v118;
LABEL_44:
      id v1 = v122;
      unint64_t v19 = v124;
      goto LABEL_45;
    }

LABEL_39:
    while (1)
    {
      uint64_t v43 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8LL;
      swift_bridgeObjectRetain(a1);
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v43);
      if (!v39) {
        goto LABEL_43;
      }
LABEL_24:
      uint64_t v40 = 4LL;
      while (1)
      {
        unsigned int v41 = (a1 & 0xC000000000000001LL) != 0
        int v13 = v41;
        uint64_t v42 = v40 - 3;
        if (__OFADD__(v40 - 4, 1LL)) {
          break;
        }
        if (v11 == [v41 bitsPerChannel]
          && [v13 channelsPerFrame] == 2
          && *(void *)&v13[OBJC_IVAR___AUAStreamFormat_rateRange] <= v2
          && *(void *)&v13[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= v2)
        {

          swift_bridgeObjectRelease(a1);
          id v130 = v13;
          uint64_t v4 = v118;
          id v1 = v122;
          uint64_t v5 = v123;
          unint64_t v19 = v124;
          goto LABEL_65;
        }

        ++v40;
        if (v42 == v39) {
          goto LABEL_43;
        }
      }

      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
    }
  }

  id v20 = v18;
  uint64_t v21 = v125;
  int v13 = sub_10008E2F0(a1, (uint64_t)v20, (unint64_t)v17);
  uint64_t v125 = v21;

  if (v13)
  {
    id v130 = v13;
    goto LABEL_65;
  }

  swift_bridgeObjectRelease(v5);
  return _swiftEmptyArrayStorage;
}

  __break(1u);
  return result;
}

LABEL_77:
  if (a1 < 0) {
    uint64_t v86 = a1;
  }
  else {
    uint64_t v86 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v87 = _CocoaArrayWrapper.endIndex.getter(v86);
  swift_bridgeObjectRelease(a1);
  if (v87)
  {
LABEL_67:
    if (!v13)
    {
      unint64_t v52 = sub_10000AE14();
      uint64_t v53 = swift_allocError(&type metadata for AUAError, v52, 0LL, 0LL);
      *(_BYTE *)uint64_t v54 = 99;
      *(void *)(v54 + 8) = 0LL;
      *(void *)(v54 + 16) = 0xE000000000000000LL;
      unint64_t v124 = (unint64_t)"AUAStream_publishFormats";
      *(void *)(v54 + 24) = 0xD000000000000020LL;
      *(void *)(v54 + 32) = 0x80000001000D1970LL;
      uint64_t v120 = "changePhysicalFormat(_:)";
      *(void *)(v54 + 40) = 0xD000000000000016LL;
      *(void *)(v54 + 48) = 0x80000001000D0AD0LL;
      *(void *)(v54 + 56) = 344LL;
      swift_willThrow(v53);

      swift_errorRetain(v53);
      uint64_t v55 = v53;
      uint64_t v56 = (void *)_convertErrorToNSError(_:)(v53);
      id v117 = [v56 code];

      if (qword_100112910 != -1) {
        swift_once(&qword_100112910, sub_100082CB8);
      }
      uint64_t v57 = type metadata accessor for OSSignposter(0LL);
      sub_100008EC4(v57, (uint64_t)qword_100117220);
      uint64_t v58 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
      uint64_t v59 = v119;
      uint64_t v60 = v58(v119, &v1[OBJC_IVAR___AUAStream_signpostID], v4);
      uint64_t v61 = (os_log_s *)OSSignposter.logHandle.getter(v60);
      uint64_t v62 = v5;
      os_signpost_type_t v63 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        uint64_t v118 = v4;
        uint64_t v64 = v121;
        v58((char *)v121, v59, v4);
        uint64_t v65 = swift_slowAlloc(12LL, -1LL);
        uint64_t v125 = v55;
        uint64_t v66 = (uint8_t *)v65;
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v127 = v67;
        *(_DWORD *)uint64_t v66 = 136315138;
        uint64_t v68 = sub_100008E00(&qword_100113420);
        uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
        *(_OWORD *)(v69 + 16) = xmmword_1000D3D30;
        *(void *)(v69 + 56) = &type metadata for Int;
        *(void *)(v69 + 64) = &protocol witness table for Int;
        id v70 = v117;
        *(void *)(v69 + 32) = v117;
        uint64_t v71 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v69);
        unint64_t v73 = v72;
        id v130 = (id)sub_1000164BC(v71, v72, &v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v66 + 4, v66 + 12);
        uint64_t v74 = swift_bridgeObjectRelease(v73);
        os_signpost_id_t v75 = OSSignpostID.rawValue.getter(v74);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v61,  v63,  v75,  "AUAStream_publishFormats",  "error %s",  v66,  0xCu);
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1LL, -1LL);
        unint64_t v76 = v66;
        uint64_t v77 = v125;
        swift_slowDealloc(v76, -1LL, -1LL);

        uint64_t v78 = *(void (**)(char *, uint64_t))(v123 + 8);
        uint64_t v79 = v118;
        v78(v119, v118);
        v78((char *)v64, v79);
      }

      else
      {

        (*(void (**)(char *, uint64_t))(v62 + 8))(v59, v4);
        uint64_t v77 = v55;
        id v70 = v117;
      }

      uint64_t v127 = 0LL;
      uint64_t v128 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(23LL);
      swift_bridgeObjectRelease(v128);
      uint64_t v127 = 0xD000000000000015LL;
      uint64_t v128 = 0x80000001000D19A0LL;
      uint64_t v80 = sub_100008E00(&qword_100113420);
      uint64_t v81 = swift_allocObject(v80, 72LL, 7LL);
      *(_OWORD *)(v81 + 16) = xmmword_1000D3D30;
      *(void *)(v81 + 56) = &type metadata for Int;
      *(void *)(v81 + 64) = &protocol witness table for Int;
      *(void *)(v81 + 32) = v70;
      v82._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v81);
      object = v82._object;
      String.append(_:)(v82);
      swift_bridgeObjectRelease(object);
      uint64_t v84 = v128;
      sub_100029840( v127,  v128,  0xD000000000000020LL,  (void *)(v124 | 0x8000000000000000LL),  0xD000000000000016LL,  (unint64_t)v120 | 0x8000000000000000LL,  357LL);
      uint64_t v85 = swift_bridgeObjectRelease(v84);
      swift_willThrow(v85);
      swift_errorRelease(v77);
      return;
    }

    goto LABEL_82;
  }

    if ((v63 & 1) != 0) {
      goto LABEL_125;
    }
    uint64_t v71 = &v38[16 * v40];
    unint64_t v73 = *(void *)v71;
    unint64_t v72 = *((void *)v71 + 1);
    unint64_t v51 = __OFSUB__(v72, v73);
    uint64_t v74 = v72 - v73;
    if (v51) {
      goto LABEL_128;
    }
    if (v74 < v62) {
      goto LABEL_15;
    }
LABEL_85:
    uint64_t v79 = v40 - 1;
    if (v40 - 1 >= v13)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }

    if (!v11) {
      goto LABEL_144;
    }
    uint64_t v80 = v12;
    uint64_t v81 = &v38[16 * v79];
    Swift::String v82 = *(void *)v81;
    unint64_t v83 = &v38[16 * v40];
    uint64_t v84 = *((void *)v83 + 1);
    sub_1000CA3E4((char *)(v11 + 24LL * *(void *)v81), (char *)(v11 + 24LL * *(void *)v83), v11 + 24 * v84, __dst);
    if (v1) {
      break;
    }
    if (v84 < v82) {
      goto LABEL_118;
    }
    if (v40 > *((void *)v80 + 2)) {
      goto LABEL_119;
    }
    *(void *)uint64_t v81 = v82;
    *(void *)&v38[16 * v79 + 8] = v84;
    uint64_t v85 = *((void *)v80 + 2);
    if (v40 >= v85) {
      goto LABEL_120;
    }
    uint64_t v12 = v80;
    int v13 = v85 - 1;
    memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
    *((void *)v80 + 2) = v85 - 1;
    uint64_t v11 = v109;
    if (v85 <= 2) {
      goto LABEL_15;
    }
  }

  uint64_t v87 = v80;
LABEL_94:
  __int128 v88 = v87;
LABEL_95:
  swift_bridgeObjectRelease(v88);
  v106[2] = 0LL;
  return swift_bridgeObjectRelease(v106);
}

uint64_t sub_10008423C(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v120 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  int v129 = (char *)&v112 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v112 - v10;
  uint64_t v12 = OBJC_IVAR___AUAStream_signpostID;
  uint64_t v13 = OBJC_IVAR___AUAStream_audioDevice;
  uint64_t v122 = a2;
  a2 += 16LL;
  swift_beginAccess(a2, v149, 0LL, 0LL);
  uint64_t v136 = a2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    double v16 = (char *)Strong;
    __int128 v138 = &a1[v12];
    id v130 = &a1[v13];
    p_aBlock = &aBlock;
    *(void *)&__int128 v15 = 67109632LL;
    __int128 v126 = v15;
    unint64_t v125 = (unint64_t)"AUAStream_enqueueNextTransfer";
    unint64_t v128 = 0x80000001000D12C0LL;
    unint64_t v124 = (unint64_t)"changePhysicalFormat(_:)";
    unint64_t v127 = 0x80000001000D0AD0LL;
    uint64_t v118 = (void *)0x80000001000D12E0LL;
    *((void *)&v17 + Hasher._combine(_:)(v0 & 1) = 2LL;
    __int128 v121 = xmmword_1000D3D30;
    *(void *)&__int128 v17 = 136315650LL;
    __int128 v114 = v17;
    id v117 = (void *)0x80000001000D1300LL;
    uint64_t v113 = (char *)&type metadata for Any + 8;
    uint64_t v123 = v4;
    uint64_t v140 = v11;
    id v132 = a1;
    uint64_t v119 = v5;
    while (1)
    {
      uint64_t v19 = *(void *)&v16[OBJC_IVAR___AUAStream_transferManager];
      swift_retain(v19);

      if (!v19) {
        goto LABEL_36;
      }
      id v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 104LL);
      uint64_t v21 = swift_retain(v19);
      uint64_t v22 = v20(v21);
      swift_release(v19);
      if (!v22)
      {
        swift_release(v122);
        uint64_t v110 = v19;
        return swift_release(v110);
      }

      uint64_t v23 = *(int **)(v22 + 16);
      uint64_t v24 = *(void **)(v22 + 24);
      int v25 = *v23;
      uint64_t v141 = *((void *)v23 + 4);
      unint64_t v139 = v23[6];
      id v131 = (id)*((void *)v23 + 2);
      id v26 = v24;
      swift_release(v19);
      swift_release(v22);
      if (qword_100112910 != -1) {
        swift_once(&qword_100112910, sub_100082CB8);
      }
      uint64_t v27 = type metadata accessor for OSSignposter(0LL);
      uint64_t v28 = sub_100008EC4(v27, (uint64_t)qword_100117220);
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v29(v11, v138, v4);
      id v30 = v26;
      uint64_t v133 = v28;
      uint64_t v31 = (os_log_s *)OSSignposter.logHandle.getter(v30);
      os_signpost_type_t v32 = static os_signpost_type_t.event.getter();
      char v33 = OS_os_log.signpostsEnabled.getter();
      int v134 = v29;
      if ((v33 & 1) != 0)
      {
        uint64_t v34 = v129;
        v29(v129, v11, v4);
        uint64_t v35 = swift_slowAlloc(24LL, -1LL);
        *(_DWORD *)uint64_t v35 = v126;
        *(_DWORD *)(v35 + 4) = v25;
        *(_WORD *)(v35 + 8) = 1024;
        *(_DWORD *)(v35 + 10) = v139;

        *(_WORD *)(v35 + 14) = 2048;
        *(void *)(v35 + 16) = v141;

        os_signpost_id_t v37 = OSSignpostID.rawValue.getter(v36);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  v32,  v37,  "AUAStream_enqueueNextTransfer",  "transferID %u, numUSBTransfers %u, blockStartingUSBFrame %llu",  (uint8_t *)v35,  0x18u);
        swift_slowDealloc(v35, -1LL, -1LL);

        uint64_t v38 = *(void (**)(char *, uint64_t))(v5 + 8);
        v38(v140, v4);
        uint64_t v135 = v38;
        v38(v34, v4);
      }

      else
      {

        uint64_t v135 = *(void (**)(char *, uint64_t))(v5 + 8);
        v135(v11, v4);
      }

      uint64_t v39 = v30;
      id v40 = v132;
      id v41 = [v132 physicalFormat];
      uint64_t v42 = v141;
      if (!v41) {
        goto LABEL_21;
      }
      uint64_t v43 = v41;
      uint64_t v44 = type metadata accessor for AUAStreamFormat();
      uint64_t v45 = swift_dynamicCastClass(v43, v44);
      if (!v45) {
        break;
      }
      uint64_t v46 = *(void *)(v45 + OBJC_IVAR___AUAStreamFormat_altSetting);
      if (!v46 || (uint64_t v47 = *(void *)(*(void *)(v46 + 104) + 120LL)) == 0)
      {
        unint64_t v56 = sub_10000AE14();
        uint64_t v57 = swift_allocError(&type metadata for AUAError, v56, 0LL, 0LL);
        *(_BYTE *)uint64_t v58 = 1;
        *(void *)(v58 + 8) = 0LL;
        *(void *)(v58 + 16) = 0xE000000000000000LL;
        unint64_t v59 = v125 | 0x8000000000000000LL;
        *(void *)(v58 + 24) = 0xD00000000000001FLL;
        *(void *)(v58 + 32) = v59;
        unint64_t v60 = v124 | 0x8000000000000000LL;
        *(void *)(v58 + 40) = 0xD000000000000016LL;
        *(void *)(v58 + 48) = v60;
        *(void *)(v58 + 56) = 374LL;
        swift_willThrow(v57);

        goto LABEL_22;
      }

      uint64_t v48 = swift_allocObject(&unk_100106460, 24LL, 7LL);
      *(void *)(v48 + 16) = v40;
      uint64_t v49 = *(void **)(v47 + 16);
      id v18 = v39;
      swift_retain(v47);
      id v50 = v40;
      if (![v49 increment])
      {
        swift_release(v48);

        swift_release(v47);
        uint64_t v4 = v123;
        goto LABEL_4;
      }

      id v116 = v49;
      unint64_t v51 = *(void **)(v47 + 24);
      unint64_t v52 = (void *)swift_allocObject(&unk_100106488, 40LL, 7LL);
      v52[2] = sub_10008EEE8;
      v52[3] = v48;
      v52[4] = v47;
      __int128 v147 = sub_10008EF3C;
      char v148 = v52;
      aBlock = _NSConcreteStackBlock;
      uint64_t v144 = 1107296256LL;
      unint64_t v145 = sub_1000C77D8;
      __int128 v146 = &unk_1001064A0;
      uint64_t v53 = _Block_copy(&aBlock);
      uint64_t v54 = v148;
      swift_retain(v47);
      swift_retain(v48);
      swift_release(v54);
      aBlock = 0LL;
      LOBYTE(v5Hasher._combine(_:)(v0 & 1) = [v51 enqueueIORequestWithData:v18 transactionList:v131 transactionListCount:v139 firstFrameNumber:v42 op tions:0 error:&aBlock completionHandler:v53];
      _Block_release(v53);
      uint64_t v55 = aBlock;
      if ((v51 & 1) != 0)
      {
        swift_release(v48);

        swift_release(v47);
        uint64_t v4 = v123;
        uint64_t v5 = v119;
        goto LABEL_4;
      }

      __int128 v108 = v55;
      uint64_t v57 = _convertNSErrorToError(_:)(v55);

      swift_willThrow(v109);
      swift_willThrow([v116 decrement]);
      swift_release(v48);

      swift_release(v47);
      uint64_t v137 = 0LL;
      uint64_t v4 = v123;
      uint64_t v5 = v119;
LABEL_23:
      uint64_t v65 = swift_unknownObjectWeakLoadStrong(v130);
      if (!v65) {
        goto LABEL_3;
      }
      uint64_t v66 = (void *)v65;
      uint64_t v68 = *(void *)(v65 + OBJC_IVAR___AUAAudioDevice_function);
      uint64_t v67 = *(void *)(v65 + OBJC_IVAR___AUAAudioDevice_function + 8);
      swift_unknownObjectRetain(v68);

      if (!v68) {
        goto LABEL_3;
      }
      uint64_t ObjectType = swift_getObjectType(v68);
      id v70 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v67 + 16))(ObjectType, v67);
      swift_unknownObjectRelease(v68, v71);
      if (v70
        && (unint64_t v72 = *(void **)&v70[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject],
            id v18 = v72,
            v70,
            v72))
      {
        id v73 = [v18 frameNumberWithTime:0];
        uint64_t v74 = (void *)_convertErrorToNSError(_:)(v57);
        id v75 = [v74 code];

        aBlock = 0LL;
        uint64_t v144 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(64LL);
        v76._countAndFlagsBits = 0xD000000000000017LL;
        v76._object = v118;
        String.append(_:)(v76);
        id v116 = (id)sub_100008E00(&qword_100113420);
        uint64_t v77 = swift_allocObject(v116, 72LL, 7LL);
        *(_OWORD *)(v77 + 16) = v121;
        *(void *)(v77 + 56) = &type metadata for Int;
        *(void *)(v77 + 64) = &protocol witness table for Int;
        unint64_t v139 = (unint64_t)v75;
        *(void *)(v77 + 32) = v75;
        v78._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v77);
        object = v78._object;
        String.append(_:)(v78);
        swift_bridgeObjectRelease(object);
        v80._countAndFlagsBits = 0x617246727563202CLL;
        v80._object = (void *)0xEB0000000020656DLL;
        String.append(_:)(v80);
        id v131 = v73;
        uint64_t v142 = (uint64_t)v73;
        v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        Swift::String v82 = v81._object;
        String.append(_:)(v81);
        swift_bridgeObjectRelease(v82);
        v83._countAndFlagsBits = 0xD000000000000018LL;
        v83._object = v117;
        String.append(_:)(v83);
        uint64_t v142 = v141;
        v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        uint64_t v85 = v84._object;
        String.append(_:)(v84);
        swift_bridgeObjectRelease(v85);
        uint64_t v86 = v144;
        sub_100029840( (uint64_t)aBlock,  v144,  0xD00000000000001FLL,  (void *)(v125 | 0x8000000000000000LL),  0xD000000000000016LL,  v124 | 0x8000000000000000LL,  387LL);
        swift_bridgeObjectRelease(v86);
        uint64_t v87 = v120;
        __int128 v88 = v134;
        v134(v120, v138, v4);
        id v89 = v39;
        uint64_t v90 = (os_log_s *)OSSignposter.logHandle.getter(v89);
        LODWORD(v133) = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v88(v129, v87, v4);
          uint64_t v91 = swift_slowAlloc(32LL, -1LL);
          int v134 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(32LL, -1LL);
          aBlock = (void **)v134;
          *(_DWORD *)uint64_t v91 = v114;
          uint64_t v92 = swift_allocObject(v116, 72LL, 7LL);
          *(_OWORD *)(v92 + 16) = v121;
          *(void *)(v92 + 56) = &type metadata for Int;
          *(void *)(v92 + 64) = &protocol witness table for Int;
          *(void *)(v92 + 32) = v139;
          uint64_t v93 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v92);
          unint64_t v95 = v94;
          uint64_t v142 = sub_1000164BC(v93, v94, (uint64_t *)&aBlock);
          uint64_t v96 = v89;
          uint64_t v97 = p_aBlock;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, p_aBlock, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease(v95);
          *(_WORD *)(v91 + 12) = 2048;
          uint64_t v142 = (uint64_t)v131;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v97, v91 + 14, v91 + 22);
          *(_WORD *)(v91 + 22) = 2048;

          uint64_t v142 = v141;
          id v98 = v97;
          id v89 = v96;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v98, v91 + 24, v91 + 32);

          uint64_t v99 = v129;
          os_signpost_id_t v101 = OSSignpostID.rawValue.getter(v100);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v90,  (os_signpost_type_t)v133,  v101,  "AUAStream_enqueueNextTransfer_error",  "error %s, curFrame %llu, blockStartingUSBFrame %llu",  (uint8_t *)v91,  0x20u);
          unint64_t v102 = v134;
          swift_arrayDestroy(v134, 1LL, v113);
          uint64_t v5 = v119;
          swift_slowDealloc(v102, -1LL, -1LL);
          uint64_t v103 = v91;
          uint64_t v4 = v123;
          swift_slowDealloc(v103, -1LL, -1LL);

          uint64_t v104 = v135;
          v135(v87, v4);
          os_signpost_id_t v105 = v99;
        }

        else
        {

          os_signpost_id_t v105 = v87;
          uint64_t v104 = v135;
        }

        v104(v105, v4);
        if (v139 == -536870165LL)
        {
          swift_errorRelease(v57);
        }

        else
        {
          uint64_t v106 = swift_unknownObjectWeakLoadStrong(v130);
          if (!v106)
          {
            uint64_t result = swift_release(v122);
            __break(1u);
            return result;
          }

          uint64_t v107 = (void *)v106;
          AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000001FLL,  v125 | 0x8000000000000000LL,  0xD000000000000016LL,  v124 | 0x8000000000000000LL,  392LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);
          swift_errorRelease(v57);
        }
      }

      else
      {
LABEL_3:
        swift_errorRelease(v57);
        id v18 = v39;
      }

uint64_t sub_100084EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSSignposter(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v13 = sub_100008EC4(v9, (uint64_t)qword_100117220);
  uint64_t v33 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v34 = v6;
  uint64_t v35 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v3 + OBJC_IVAR___AUAStream_signpostID, v5);
  int v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v15 = swift_slowAlloc(32LL, -1LL);
  uint64_t v37 = v15;
  *(_DWORD *)int v14 = 136315138;
  uint64_t v16 = sub_100008E00(&qword_100113420);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_1000D3D30;
  *(void *)(v17 + 56) = &type metadata for Int32;
  *(void *)(v17 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v17 + 32) = a1;
  uint64_t v18 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v17);
  uint64_t v19 = a1;
  unint64_t v21 = v20;
  uint64_t v36 = sub_1000164BC(v18, v20, &v37);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v14 + 4, v14 + 12);
  uint64_t v22 = swift_bridgeObjectRelease(v21);
  uint64_t v23 = (os_log_s *)OSSignposter.logHandle.getter(v22);
  uint64_t v24 = static os_signpost_type_t.begin.getter();
  LOBYTE(v2Hasher._combine(_:)(v0 & 1) = v24;
  os_signpost_id_t v25 = OSSignpostID.rawValue.getter(v24);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  (os_signpost_type_t)v21,  v25,  "AUAStream_isocDataCompletion",  "status %s",  v14,  0xCu);
  if (*((_BYTE *)v3 + OBJC_IVAR___AUAStream_started) == 1)
  {
    uint64_t v27 = v3;
    sub_10008EF4C(v19, v32, v27, (uint64_t)v27);
  }

  uint64_t v28 = static os_signpost_type_t.end.getter(v26);
  os_signpost_type_t v29 = v28;
  os_signpost_id_t v30 = OSSignpostID.rawValue.getter(v28);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  v29,  v30,  "AUAStream_isocDataCompletion",  "status %s",  v14,  0xCu);

  swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v15, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v12, v9);
}

Swift::Void __swiftcall AUAStream.start()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignposter(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong((char *)v0 + OBJC_IVAR___AUAStream_audioDevice);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
    uint64_t v9 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
    swift_unknownObjectRetain(v8);

    if (v8)
    {
      uint64_t ObjectType = swift_getObjectType(v8);
      uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
      swift_unknownObjectRelease(v8, v12);
      if (v11)
      {
        uint64_t v13 = *(void **)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
        id v14 = v13;

        if (v13)
        {
          id v15 = [v14 frameNumberWithTime:0];
          id v28 = v14;
          if (qword_100112910 != -1) {
            swift_once(&qword_100112910, sub_100082CB8);
          }
          uint64_t v16 = sub_100008EC4(v2, (uint64_t)qword_100117220);
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v16, v2);
          uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v17 = 134217984;
          id v29 = v15;
          uint64_t v18 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v17 + 4, v17 + 12);
          uint64_t v19 = (os_log_s *)OSSignposter.logHandle.getter(v18);
          uint64_t v20 = static os_signpost_type_t.begin.getter();
          os_signpost_type_t v21 = v20;
          os_signpost_id_t v22 = OSSignpostID.rawValue.getter(v20);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  v21,  v22,  "AUAStream_start",  "curFrame %llu",  v17,  0xCu);
          sub_100085458(v1);
          uint64_t v24 = static os_signpost_type_t.end.getter(v23);
          os_signpost_type_t v25 = v24;
          os_signpost_id_t v26 = OSSignpostID.rawValue.getter(v24);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v19,  v25,  v26,  "AUAStream_start",  "curFrame %llu",  v17,  0xCu);

          swift_slowDealloc(v17, -1LL, -1LL);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        }
      }
    }
  }

void sub_100085458(void *a1)
{
  uint64_t v2 = OBJC_IVAR___AUAStream_transferManager;
  if (!*(void *)((char *)a1 + OBJC_IVAR___AUAStream_transferManager)) {
    sub_100029840( 0xD00000000000001CLL,  0x80000001000D1A60LL,  0x29287472617473LL,  (void *)0xE700000000000000LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  494LL);
  }
  uint64_t v3 = (char *)a1 + OBJC_IVAR___AUAStream_audioDevice;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong((char *)a1 + OBJC_IVAR___AUAStream_audioDevice);

  if (Strong && *(void *)((char *)a1 + v2))
  {
    uint64_t v5 = (char *)swift_unknownObjectWeakLoadStrong(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame];

      *(void *)((char *)a1 + OBJC_IVAR___AUAStream_firstTimeStampUSBFrame) = v6;
      unsigned int v7 = [a1 direction];
      uint64_t v8 = *(void *)((char *)a1 + v2);
      if (v7 == 1768845428)
      {
        if (!v8)
        {
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }

        uint64_t v9 = swift_unknownObjectWeakLoadStrong(v3);
        if (!v9)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }

        uint64_t v10 = (char *)v9;
        uint64_t v11 = &OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame;
      }

      else
      {
        if (!v8)
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }

        uint64_t v12 = swift_unknownObjectWeakLoadStrong(v3);
        if (!v12)
        {
LABEL_21:
          __break(1u);
          return;
        }

        uint64_t v10 = (char *)v12;
        uint64_t v11 = &OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame;
      }

      uint64_t v13 = *(void *)&v10[*v11];
      swift_retain(v8);

      (*(void (**)(uint64_t))(*(void *)v8 + 88LL))(v13);
      swift_release(v8);
      *((_BYTE *)a1 + OBJC_IVAR___AUAStream_started) = 1;
      *((_BYTE *)a1 + OBJC_IVAR___AUAStream_needFirstTimeStamp) = 1;
      *(void *)((char *)a1 + OBJC_IVAR___AUAStream_lastIOTimeNS) = 0LL;
      id v14 = (char *)swift_unknownObjectWeakLoadStrong(v3);
      if (v14)
      {
        uint64_t v15 = *(void *)&v14[OBJC_IVAR___AUAAudioDevice_curZTSSeed];

        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_timeStampSeed) = v15;
        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_sampleTime) = 0LL;
        *(void *)((char *)a1 + OBJC_IVAR___AUAStream_hostTime) = 0LL;
        (*(void (**)(void))((swift_isaMask & *a1) + 0x260LL))();
        v16.receiver = a1;
        v16.super_class = (Class)type metadata accessor for AUAStream(0LL);
        objc_msgSendSuper2(&v16, "startStream");
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_18;
  }

Swift::Void __swiftcall AUAStream.stop()()
{
}

uint64_t sub_1000856E4(_BYTE *a1)
{
  a1[OBJC_IVAR___AUAStream_started] = 0;
  v19.receiver = a1;
  v19.super_class = (Class)type metadata accessor for AUAStream(0LL);
  objc_msgSendSuper2(&v19, "stopStream");
  uint64_t v2 = OBJC_IVAR___AUAStream_streamingEndpoint;
  uint64_t v3 = *(void *)&a1[OBJC_IVAR___AUAStream_streamingEndpoint];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 120);
    if (v4)
    {
      swift_retain(*(void *)&a1[OBJC_IVAR___AUAStream_streamingEndpoint]);
      swift_retain(v4);
      sub_1000C7514();
      swift_release(v4);
      uint64_t v5 = *(void *)(v3 + 120);
      *(void *)(v3 + 120) = 0LL;
      swift_release(v3);
      swift_release(v5);
      uint64_t v3 = *(void *)&a1[v2];
    }
  }

  *(void *)&a1[v2] = 0LL;
  swift_release(v3);
  uint64_t v6 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 112LL);
  if (!v6)
  {
    unint64_t v11 = sub_10000AE14();
    uint64_t v12 = swift_allocError(&type metadata for AUAError, v11, 0LL, 0LL);
    *(_BYTE *)uint64_t v13 = 1;
    *(void *)(v13 + 8) = 0LL;
    *(void *)(v13 + 16) = 0xE000000000000000LL;
    *(void *)(v13 + 24) = 0x2928706F7473LL;
    *(void *)(v13 + 32) = 0xE600000000000000LL;
    *(void *)(v13 + 40) = 0xD000000000000016LL;
    *(void *)(v13 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v13 + 56) = 536LL;
    swift_willThrow(v12);
LABEL_9:
    sub_100029840( 0xD000000000000034LL,  0x80000001000D1A20LL,  0x2928706F7473LL,  (void *)0xE600000000000000LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  540LL);
    swift_errorRelease(v12);
    goto LABEL_10;
  }

  id v18 = 0LL;
  id v7 = v6;
  unsigned __int8 v8 = [v7 selectAlternateSetting:0 error:&v18];
  id v9 = v18;
  if ((v8 & 1) == 0)
  {
    id v14 = v18;
    uint64_t v12 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v15);
    goto LABEL_9;
  }

  id v10 = v18;

LABEL_10:
  uint64_t v16 = *(void *)&a1[OBJC_IVAR___AUAStream_transferManager];
  *(void *)&a1[OBJC_IVAR___AUAStream_transferManager] = 0LL;
  return swift_release(v16);
}

Swift::Bool __swiftcall AUAStream.deviceChanged(toSamplingRate:)(Swift::Double toSamplingRate)
{
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v5);
  id v9 = &v33[-v8];
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v10 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v10, (uint64_t)qword_100117220);
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v9, &v1[OBJC_IVAR___AUAStream_signpostID], v3);
  uint64_t v12 = v1;
  uint64_t v13 = (os_log_s *)OSSignposter.logHandle.getter(v12);
  int v14 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v11(v7, v9, v3);
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    int v34 = v14;
    uint64_t v17 = v16;
    uint64_t v36 = v16;
    *(_DWORD *)uint64_t v15 = 134218242;
    Swift::Double v35 = toSamplingRate;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2080;
    Swift::Double v35 = COERCE_DOUBLE([v12 physicalFormat]);
    uint64_t v18 = sub_100008E00(&qword_1001156A8);
    uint64_t v19 = String.init<A>(describing:)(&v35, v18);
    unint64_t v21 = v20;
    Swift::Double v35 = COERCE_DOUBLE(sub_1000164BC(v19, v20, &v36));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v15 + 14, v15 + 22);

    uint64_t v22 = swift_bridgeObjectRelease(v21);
    os_signpost_id_t v23 = OSSignpostID.rawValue.getter(v22);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  (os_signpost_type_t)v34,  v23,  "AUAStream_deviceChangedToSamplingRate",  "sample rate %f, physicalFormat %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    uint64_t v24 = *(void (**)(char *, uint64_t))(v4 + 8);
    v24(v9, v3);
    v24(v7, v3);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  id v25 = [v12 physicalFormats];
  if (v25)
  {
    os_signpost_id_t v26 = v25;
    uint64_t v27 = sub_10000AF08(0LL, &qword_1001156A0, &OBJC_CLASS___ASDStreamFormat_ptr);
    uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

    if ((unint64_t)v28 >> 62)
    {
      if (v28 < 0) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = v28 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v28);
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v28);
    }

    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease(v28);
    if (v29)
    {
      uint64_t v30 = (objc_class *)type metadata accessor for AUAStream(0LL);
      v37.receiver = v12;
      v37.super_class = v30;
      LOBYTE(v25) = objc_msgSendSuper2(&v37, "deviceChangedToSamplingRate:", toSamplingRate);
    }

    else
    {
      LOBYTE(v25) = 1;
    }
  }

  else
  {
    __break(1u);
  }

  return (char)v25;
}

uint64_t AUAStream.changePhysicalFormat(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v41 - v9;
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v11 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v11, (uint64_t)qword_100117220);
  uint64_t v12 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v13 = v12(v10, &v1[OBJC_IVAR___AUAStream_signpostID], v4);
  int v14 = (os_log_s *)OSSignposter.logHandle.getter(v13);
  os_signpost_type_t v15 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v12(v8, v10, v4);
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    os_signpost_id_t v17 = OSSignpostID.rawValue.getter(v16);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  v15,  v17,  "AUAStream_changePhysicalFormat",  "",  v16,  2u);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v10, v4);
    v18(v8, v4);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  uint64_t result = (uint64_t)[v2 physicalFormats];
  if (result)
  {
    unint64_t v20 = (void *)result;
    uint64_t v21 = sub_10000AF08(0LL, &qword_1001156A0, &OBJC_CLASS___ASDStreamFormat_ptr);
    uint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

    id v23 = a1;
    id v24 = sub_10008E440(v22, a1);
    swift_bridgeObjectRelease(v22);

    if (!v24
      || (id v25 = [v24 copy],
          v24,
          _bridgeAnyObjectToAny(_:)(&v42, v25),
          swift_unknownObjectRelease(v25, v26),
          uint64_t v27 = type metadata accessor for AUAStreamFormat(),
          (swift_dynamicCast(v41, &v42, (char *)&type metadata for Any + 8, v27, 6LL) & 1) == 0))
    {
      unint64_t v35 = sub_10000AE14();
      uint64_t v36 = swift_allocError(&type metadata for AUAError, v35, 0LL, 0LL);
      *(_BYTE *)uint64_t v37 = 0;
      *(void *)(v37 + 8) = 0LL;
      *(void *)(v37 + 16) = 0xE000000000000000LL;
      *(void *)(v37 + 24) = 0xD000000000000018LL;
      *(void *)(v37 + 32) = 0x80000001000D0AB0LL;
      *(void *)(v37 + 40) = 0xD000000000000016LL;
      *(void *)(v37 + 48) = 0x80000001000D0AD0LL;
      *(void *)(v37 + 56) = 569LL;
      swift_willThrow(v36);
      uint64_t v42 = 0LL;
      uint64_t v43 = 0xE000000000000000LL;
      swift_errorRetain(v36);
      _StringGuts.grow(_:)(22LL);
      v38._countAndFlagsBits = 0xD000000000000014LL;
      v38._object = (void *)0x80000001000D0AF0LL;
      String.append(_:)(v38);
      v41[0] = v36;
      uint64_t v39 = sub_100008E00(&qword_100113400);
      _print_unlocked<A, B>(_:_:)( v41,  &v42,  v39,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v40 = v43;
      sub_100029840( v42,  v43,  0xD000000000000018LL,  (void *)0x80000001000D0AB0LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  588LL);
      swift_errorRelease(v36);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v36);
      return 0LL;
    }

    uint64_t v28 = (void *)v41[0];
    uint64_t result = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR___AUAStream_audioDevice]);
    if (!result)
    {

      return 1LL;
    }

    if (a1)
    {
      uint64_t v29 = (void *)result;
      id v30 = v28;
      [v23 sampleRate];
      objc_msgSend(v30, "setSampleRate:");

      uint64_t v31 = (void *)swift_allocObject(&unk_100106278, 40LL, 7LL);
      v31[2] = v2;
      v31[3] = v30;
      v31[4] = v29;
      id v32 = v30;
      uint64_t v33 = v2;
      id v34 = v29;
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000018LL,  0x80000001000D0AB0LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  575LL,  (uint64_t)sub_10008E584,  (uint64_t)v31);

      swift_release(v31);
      return 1LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10008618C(char *a1, void *a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v5 = type metadata accessor for OSSignposter(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v9 = sub_100008EC4(v5, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  id v25 = &a1[OBJC_IVAR___AUAStream_signpostID];
  id v10 = a2;
  uint64_t v11 = swift_slowAlloc(34LL, -1LL);
  *(_DWORD *)uint64_t v11 = 134218752;
  [v10 sampleRate];
  double v28 = v12;
  uint64_t v26 = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 4, v11 + 12);
  id v24 = a1;
  *(_WORD *)(v11 + 12) = 1024;
  LODWORD(v28) = [v10 channelsPerFrame];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 4, v11 + 14, v11 + 18);
  *(_WORD *)(v11 + 18) = 1024;
  LODWORD(v28) = [v10 bitsPerChannel];
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 4, v11 + 20, v11 + 24);
  *(_WORD *)(v11 + 24) = 2048;
  [v10 sampleRate];
  double v28 = v13 * 0.25;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v11 + 26, v11 + 34);

  os_signpost_type_t v15 = (os_log_s *)OSSignposter.logHandle.getter(v14);
  uint64_t v16 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v17 = v16;
  os_signpost_id_t v18 = OSSignpostID.rawValue.getter(v16);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  v17,  v18,  "AUAStream_changePhysicalFormat",  "sampleRate %f, channels %u, bitsPerChannel %u, timestampPeriod %f",  (uint8_t *)v11,  0x22u);
  [v10 sampleRate];
  AUAAudioDevice.setSamplingRate(_:)(v19);
  uint64_t v20 = static os_signpost_type_t.end.getter([v24 setPhysicalFormat:v10]);
  LOBYTE(v10) = v20;
  os_signpost_id_t v21 = OSSignpostID.rawValue.getter(v20);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  (os_signpost_type_t)v10,  v21,  "AUAStream_changePhysicalFormat",  "sampleRate %f, channels %u, bitsPerChannel %u, timestampPeriod %f",  (uint8_t *)v11,  0x22u);

  swift_slowDealloc(v11, -1LL, -1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v8, v5);
}

void sub_1000864A4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSSignposter(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [v2 physicalFormat];
  if (!v11) {
    goto LABEL_10;
  }
  double v12 = v11;
  uint64_t v56 = v1;
  uint64_t v13 = type metadata accessor for AUAStreamFormat();
  uint64_t v14 = swift_dynamicCastClass(v12, v13);
  if (!v14)
  {

LABEL_10:
    unint64_t v34 = sub_10000AE14();
    uint64_t v35 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
    *(_BYTE *)uint64_t v36 = 1;
    *(void *)(v36 + 8) = 0LL;
    *(void *)(v36 + 16) = 0xE000000000000000LL;
    *(void *)(v36 + 24) = 0x5365726170657270LL;
    *(void *)(v36 + 32) = 0xEF29286D61657274LL;
    *(void *)(v36 + 40) = 0xD000000000000016LL;
    *(void *)(v36 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v36 + 56) = 597LL;
    swift_willThrow(v35);
    return;
  }

  os_signpost_type_t v15 = (void *)v14;
  uint64_t v16 = *(void *)(v14 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v16)
  {
    unint64_t v37 = sub_10000AE14();
    uint64_t v38 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v39 = 74;
    *(void *)(v39 + 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    *(void *)(v39 + 24) = 0x5365726170657270LL;
    *(void *)(v39 + 32) = 0xEF29286D61657274LL;
    *(void *)(v39 + 40) = 0xD000000000000016LL;
    *(void *)(v39 + 48) = 0x80000001000D0AD0LL;
    uint64_t v40 = 598LL;
LABEL_13:
    *(void *)(v39 + 56) = v40;
    swift_willThrow(v38);

    return;
  }

  os_signpost_type_t v17 = *(void **)(*(void *)&v2[OBJC_IVAR___AUAStream_interface] + 112LL);
  if (!v17)
  {
    unint64_t v41 = sub_10000AE14();
    uint64_t v38 = swift_allocError(&type metadata for AUAError, v41, 0LL, 0LL);
    *(_BYTE *)uint64_t v39 = 1;
    *(void *)(v39 + 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    *(void *)(v39 + 24) = 0x5365726170657270LL;
    *(void *)(v39 + 32) = 0xEF29286D61657274LL;
    *(void *)(v39 + 40) = 0xD000000000000016LL;
    *(void *)(v39 + 48) = 0x80000001000D0AD0LL;
    uint64_t v40 = 599LL;
    goto LABEL_13;
  }

  uint64_t v54 = *(void *)(v14 + OBJC_IVAR___AUAStreamFormat_altSetting);
  uint64_t v55 = v4;
  uint64_t v18 = qword_100112910;
  swift_retain(v16);
  id v52 = v17;
  if (v18 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v19 = sub_100008EC4(v7, (uint64_t)qword_100117220);
  uint64_t v53 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19, v7);
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v6, &v2[OBJC_IVAR___AUAStream_signpostID], v3);
  uint64_t v20 = v54;
  swift_retain(v54);
  os_signpost_id_t v21 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
  uint64_t v50 = v7;
  uint64_t v22 = v21;
  *(_DWORD *)os_signpost_id_t v21 = 16777472;
  char v57 = *(_BYTE *)(*(void *)(v20 + 16) + 3LL);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v21 + 4, v21 + 5);
  uint64_t v23 = swift_release(v20);
  uint64_t v24 = OSSignposter.logHandle.getter(v23);
  uint64_t v49 = v10;
  id v25 = (os_log_s *)v24;
  uint64_t v26 = static os_signpost_type_t.begin.getter();
  uint64_t v51 = v3;
  os_signpost_type_t v27 = v26;
  os_signpost_id_t v28 = OSSignpostID.rawValue.getter(v26);
  os_signpost_type_t v29 = v27;
  id v30 = v25;
  uint64_t v48 = v22;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  v29,  v28,  "AUAStream_prepareStream",  "alternate %hhu",  v22,  5u);
  uint64_t v31 = v52;
  uint64_t v32 = v56;
  sub_100086958(v52, v20, v15, v2);
  if (v32)
  {

    swift_release(v20);
  }

  else
  {
    uint64_t v42 = static os_signpost_type_t.end.getter(v33);
    os_signpost_type_t v43 = v42;
    uint64_t v44 = v31;
    os_signpost_id_t v45 = OSSignpostID.rawValue.getter(v42);
    uint64_t v46 = v48;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v30,  v43,  v45,  "AUAStream_prepareStream",  "alternate %hhu",  v48,  5u);

    swift_slowDealloc(v46, -1LL, -1LL);
    swift_release(v20);
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v6, v51);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v50);
}

void sub_100086958(void *a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(a2 + 16) + 3LL);
  os_signpost_id_t v45 = 0LL;
  unsigned int v11 = [a1 selectAlternateSetting:v10 error:&v45];
  double v12 = v45;
  if (!v11)
  {
    uint64_t v36 = v45;
    _convertNSErrorToError(_:)(v12);

LABEL_17:
    swift_willThrow(v37);
    return;
  }

  swift_beginAccess(a2 + 144, v51, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2 + 144);
  uint64_t v14 = v12;
  if (Strong)
  {
    uint64_t active = ActiveStreamingInterface.clock()();
    uint64_t v17 = v16;
    swift_release(Strong);
    if (v4) {
      return;
    }
    uint64_t ObjectType = swift_getObjectType(active);
    [a3 sampleRate];
    if ((~*(void *)&v20 & 0x7FF0000000000000LL) != 0)
    {
      if (v20 > -1.0)
      {
        if (v20 < 1.84467441e19)
        {
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v17 + 24))( (unint64_t)v20,  0LL,  ObjectType,  v17);
LABEL_9:
          swift_unknownObjectRelease(active, v19);
          goto LABEL_10;
        }

uint64_t sub_100086D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  swift_retain(v11);
  uint64_t v13 = v12(a2, a3, a4, a5, a6);
  swift_release(v11);
  return v13;
}

void sub_100086DA4()
{
}

Swift::String_optional __swiftcall AUAStream.channelName(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  uint64_t v2 = v1;
  ActiveOutputTerminal.cluster.getter();
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 16) > (unint64_t)forChannelIndex
      && (uint64_t v6 = v4 + 32LL * forChannelIndex, (v7 = *(void *)(v6 + 48)) != 0))
    {
      uint64_t v8 = *(void *)(v6 + 40);
      swift_bridgeObjectRetain(v7);
    }

    else
    {
      uint64_t v8 = 0LL;
      unint64_t v7 = 0xE000000000000000LL;
    }

    swift_bridgeObjectRelease(v5);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___AUAStream_audioDevice);
    if (Strong)
    {
      uint64_t v10 = (void *)Strong;
      uint64_t ObjectType = swift_getObjectType(Strong);
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(ObjectType);
      id v13 = [(id)objc_opt_self(NSBundle) bundleForClass:ObjCClassFromMetadata];
      NSString v14 = String._bridgeToObjectiveC()();
      id v15 = [v13 localizedStringForKey:v14 value:0 table:0];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      unint64_t v17 = v16;

      swift_bridgeObjectRelease(v7);
    }

    else
    {
      unint64_t v17 = v7;
    }
  }

  else
  {
    sub_100029840( 0xD00000000000001ALL,  0x80000001000D0B30LL,  0xD00000000000001DLL,  (void *)0x80000001000D0B50LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  674LL);
    uint64_t v8 = 0LL;
    unint64_t v17 = 0xE000000000000000LL;
  }

  uint64_t v18 = v8;
  uint64_t v19 = (void *)v17;
  result.value._object = v19;
  result.value._countAndFlagsBits = v18;
  return result;
}

Swift::String_optional __swiftcall AUAStream.channelCategory(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall AUAStream.channelNumber(forChannelIndex:)(Swift::UInt32 forChannelIndex)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

uint64_t AUAStream.preferredChannelDescription(_:forChannelIndex:)(uint64_t a1, unsigned int a2)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x1000872E4LL);
  }

  *(void *)(a1 + 4) = 0LL;
  *(void *)(a1 + 12) = 0LL;
  uint64_t result = ActiveOutputTerminal.cluster.getter();
  if (!v5) {
    goto LABEL_7;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a2)
  {
    uint64_t result = swift_bridgeObjectRelease(v5);
LABEL_7:
    int v7 = -1;
    goto LABEL_8;
  }

  int v6 = *(_DWORD *)(v5 + 32LL * a2 + 56);
  uint64_t result = swift_bridgeObjectRelease(v5);
  int v7 = 42;
  switch(v6)
  {
    case 1:
      break;
    case 2:
    case 11:
    case 70:
      int v7 = 1;
      break;
    case 3:
    case 12:
    case 71:
      int v7 = 2;
      break;
    case 5:
      int v7 = 206;
      break;
    case 6:
      int v7 = 207;
      break;
    case 13:
      int v7 = 3;
      break;
    case 14:
      int v7 = 7;
      break;
    case 15:
      int v7 = 8;
      break;
    case 16:
      int v7 = 65;
      break;
    case 17:
      int v7 = 66;
      break;
    case 18:
      int v7 = 10;
      break;
    case 19:
      int v7 = 11;
      break;
    case 22:
      int v7 = 5;
      break;
    case 23:
      int v7 = 6;
      break;
    case 37:
      int v7 = 49;
      break;
    case 38:
      int v7 = 51;
      break;
    case 67:
      int v7 = 4;
      break;
    default:
      goto LABEL_7;
  }

id AUAStream.__allocating_init(direction:with:)(uint64_t a1, void *a2)
{
  id v4 = [objc_allocWithZone(v2) initWithDirection:a1 withPlugin:a2];

  return v4;
}

void AUAStream.init(direction:with:)()
{
}

id AUAStream.__deallocating_deinit()
{
  return sub_10001642C(0LL, (uint64_t (*)(void))type metadata accessor for AUAStream);
}

void sub_1000875D4()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OSSignposter(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v9 = sub_100008EC4(v5, (uint64_t)qword_100117220);
  uint64_t v29 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v30 = v2;
  uint64_t v31 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, (uint64_t)v0 + OBJC_IVAR___AUAStream_signpostID, v1);
  uint64_t v10 = v0;
  uint64_t v11 = swift_slowAlloc(22LL, -1LL);
  *(_DWORD *)uint64_t v11 = 134218240;
  double v12 = &v10[OBJC_IVAR___AUAStream_audioDevice];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v10[OBJC_IVAR___AUAStream_audioDevice]);
  if (!Strong)
  {

    __break(1u);
    goto LABEL_10;
  }

  NSString v14 = (void *)Strong;
  uint64_t v15 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_lockDelayMS);

  uint64_t v33 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v11 + 4, v11 + 12);

  *(_WORD *)(v11 + 12) = 2048;
  uint64_t v16 = swift_unknownObjectWeakLoadStrong(v12);
  if (!v16)
  {
LABEL_10:

    __break(1u);
    return;
  }

  unint64_t v17 = (void *)v16;
  uint64_t v18 = *(void *)(v16 + OBJC_IVAR___AUAAudioDevice_feedbackDelayMS);

  uint64_t v33 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v11 + 14, v11 + 22);

  double v20 = (os_log_s *)OSSignposter.logHandle.getter(v19);
  uint64_t v21 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v22 = v21;
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter(v21);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  v22,  v23,  "AUAInputStream_prepareStream",  "locklDelayMS %lu, feedbackDelayMS %lu",  (uint8_t *)v11,  0x16u);
  uint64_t v24 = v32;
  sub_1000878CC(v10);
  if (v24)
  {
  }

  else
  {
    uint64_t v26 = static os_signpost_type_t.end.getter(v25);
    os_signpost_type_t v27 = v26;
    os_signpost_id_t v28 = OSSignpostID.rawValue.getter(v26);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  v27,  v28,  "AUAInputStream_prepareStream",  "locklDelayMS %lu, feedbackDelayMS %lu",  (uint8_t *)v11,  0x16u);

    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v31);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v5);
}

void sub_1000878CC(char *a1)
{
  if (!v1)
  {
    id v3 = [a1 physicalFormat];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = type metadata accessor for AUAStreamFormat();
      uint64_t v6 = swift_dynamicCastClass(v4, v5);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + OBJC_IVAR___AUAStreamFormat_altSetting);
        if (!v7)
        {
          unint64_t v33 = sub_10000AE14();
          uint64_t v34 = swift_allocError(&type metadata for AUAError, v33, 0LL, 0LL);
          *(_BYTE *)uint64_t v35 = 74;
          *(void *)(v35 + 8) = 0LL;
          *(void *)(v35 + 16) = 0xE000000000000000LL;
          *(void *)(v35 + 24) = 0x5365726170657270LL;
          *(void *)(v35 + 32) = 0xEF29286D61657274LL;
          *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
          *(void *)(v35 + 48) = 0x80000001000D0AD0LL;
          *(void *)(v35 + 56) = 743LL;
          swift_willThrow(v34);

          return;
        }

        uint64_t Strong = swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR___AUAStream_audioDevice]);
        if (!Strong) {
          goto LABEL_30;
        }
        uint64_t v9 = (void *)Strong;
        unint64_t v10 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_lockDelayMS);
        swift_retain(v7);

        uint64_t v11 = *(void **)(v7 + 104);
        unint64_t v12 = v11[12];
        if (is_mul_ok(v10, v12))
        {
          unint64_t v13 = v11[13];
          if (v13)
          {
            unint64_t v14 = v10 * v12 / v13;
            uint64_t v15 = OBJC_IVAR___AUAInputStream_lockDelayTransfers;
            *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransfers] = v14;
            unint64_t v16 = v11[14];
            if (is_mul_ok(v16, v14))
            {
              if (((v16 * v14) & 0x8000000000000000LL) == 0)
              {
                id v17 = [objc_allocWithZone(NSMutableData) initWithLength:v16 * v14];
                uint64_t v18 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayBuffer];
                *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayBuffer] = v17;

                uint64_t v19 = *(void *)&a1[v15];
                if ((v19 & 0x8000000000000000LL) == 0)
                {
                  if ((unsigned __int128)(v19 * (__int128)28LL) >> 64 == (28 * v19) >> 63)
                  {
                    id v20 = [objc_allocWithZone(NSMutableData) initWithLength:28 * v19];
                    uint64_t v21 = OBJC_IVAR___AUAInputStream_lockDelayTransactionList;
                    os_signpost_type_t v22 = *(void **)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransactionList];
                    *(void *)&a1[OBJC_IVAR___AUAInputStream_lockDelayTransactionList] = v20;

                    os_signpost_id_t v23 = *(void **)&a1[v21];
                    if (v23)
                    {
                      uint64_t v24 = (char *)[v23 bytes];
                      uint64_t v25 = *(void *)&a1[v15];
                      if (!v25)
                      {
LABEL_19:

                        swift_release(v7);
                        return;
                      }

                      unint64_t v26 = *(void *)(*(void *)(v7 + 104) + 112LL);
                      if (!HIDWORD(v26))
                      {
                        uint64_t v27 = v25 - 1;
                        os_signpost_id_t v28 = v24 + 16;
                        unint64_t v29 = 0x8000000000000000LL;
                        while (1)
                        {
                          *((void *)v28 - Hasher._combine(_:)(v0 & 1) = 0LL;
                          *(void *)os_signpost_id_t v28 = 0LL;
                          *((_DWORD *)v28 - 4) = -536870911;
                          *((_DWORD *)v28 - 3) = v26;
                          *((_DWORD *)v28 + 2) = 0;
                          if (!v27) {
                            goto LABEL_19;
                          }
                          --v27;
                          v28 += 28;
                          if (!--v29)
                          {
                            __break(1u);
                            goto LABEL_19;
                          }
                        }
                      }

                      goto LABEL_32;
                    }

void sub_100087C44()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSSignposter(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = &v2[OBJC_IVAR___AUAStream_audioDevice];
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR___AUAStream_audioDevice]);
  if (!Strong)
  {
    __break(1u);
    goto LABEL_8;
  }

  os_signpost_id_t v45 = v10;
  uint64_t v46 = v8;
  uint64_t v47 = v7;
  uint64_t v48 = v4;
  uint64_t v49 = v3;
  uint64_t v13 = *(void *)&Strong[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame];

  uint64_t v51 = 0LL;
  uint64_t v52 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(79LL);
  v14._countAndFlagsBits = 0xD00000000000001BLL;
  v14._object = (void *)0x80000001000D16C0LL;
  String.append(_:)(v14);
  uint64_t v15 = (char *)swift_unknownObjectWeakLoadStrong(v11);
  if (!v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v16 = *(void *)&v15[OBJC_IVAR___AUAAudioDevice_lockDelayMS];

  uint64_t v50 = v16;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._countAndFlagsBits = 0xD000000000000015LL;
  v19._object = (void *)0x80000001000D16E0LL;
  String.append(_:)(v19);
  uint64_t v20 = OBJC_IVAR___AUAInputStream_lockDelayTransfers;
  uint64_t v50 = *(void *)&v2[OBJC_IVAR___AUAInputStream_lockDelayTransfers];
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
  os_signpost_type_t v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 0xD000000000000019LL;
  v23._object = (void *)0x80000001000D1700LL;
  String.append(_:)(v23);
  uint64_t v44 = v13;
  uint64_t v50 = v13;
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = v52;
  sub_100029834( v51,  v52,  0xD000000000000010LL,  (void *)0x80000001000D1720LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  765LL);
  swift_bridgeObjectRelease(v26);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v27 = v47;
  uint64_t v28 = sub_100008EC4(v47, (uint64_t)qword_100117220);
  unint64_t v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v28, v27);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v6, &v2[OBJC_IVAR___AUAStream_signpostID], v49);
  uint64_t v1 = v2;
  uint64_t v30 = swift_slowAlloc(32LL, -1LL);
  *(_DWORD *)uint64_t v30 = 134218496;
  uint64_t v31 = swift_unknownObjectWeakLoadStrong(v11);
  if (v31)
  {
    uint64_t v32 = (void *)v31;
    uint64_t v33 = *(void *)(v31 + OBJC_IVAR___AUAAudioDevice_lockDelayMS);

    uint64_t v51 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v30 + 4, v30 + 12);

    *(_WORD *)(v30 + 12) = 2048;
    uint64_t v34 = *(void *)&v2[v20];

    uint64_t v51 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v30 + 14, v30 + 22);

    *(_WORD *)(v30 + 22) = 2048;
    uint64_t v35 = v44;
    uint64_t v51 = v44;
    uint64_t v36 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v30 + 24, v30 + 32);
    uint64_t v37 = (os_log_s *)OSSignposter.logHandle.getter(v36);
    uint64_t v38 = static os_signpost_type_t.begin.getter();
    os_signpost_type_t v39 = v38;
    os_signpost_id_t v40 = OSSignpostID.rawValue.getter(v38);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  v39,  v40,  "AUAInputStream_startLockDelay",  "lockDelayMS %lu _lockDelayTransfers %lu, startingLockDelayFrame %llu",  (uint8_t *)v30,  0x20u);
    uint64_t v41 = sub_1000880C4(v1, v35);
    uint64_t v42 = static os_signpost_type_t.end.getter(v41);
    LOBYTE(v35) = v42;
    os_signpost_id_t v43 = OSSignpostID.rawValue.getter(v42);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v37,  (os_signpost_type_t)v35,  v43,  "AUAInputStream_startLockDelay",  "lockDelayMS %lu _lockDelayTransfers %lu, startingLockDelayFrame %llu",  (uint8_t *)v30,  0x20u);

    swift_slowDealloc(v30, -1LL, -1LL);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v49);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v47);
    return;
  }

char *sub_1000880C4(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v62 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v6 = *(void *)(v62 - 8);
  uint64_t v7 = __chkstk_darwin(v62);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v53 - v10;
  unint64_t v63 = a1;
  id v12 = [a1 physicalFormat];
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for AUAStreamFormat();
  uint64_t result = (char *)swift_dynamicCastClass(v13, v14);
  if (!result)
  {

LABEL_12:
    unint64_t v25 = sub_10000AE14();
    uint64_t v22 = swift_allocError(&type metadata for AUAError, v25, 0LL, 0LL);
    *(_BYTE *)uint64_t v26 = 1;
    *(void *)(v26 + 8) = 0LL;
    *(void *)(v26 + 16) = 0xE000000000000000LL;
    *(void *)(v26 + 24) = 0xD000000000000010LL;
    *(void *)(v26 + 32) = 0x80000001000D1720LL;
    *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v26 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v26 + 56) = 771LL;
    swift_willThrow(v22);
    goto LABEL_13;
  }

  uint64_t v16 = *(void *)&result[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v16 || (uint64_t v17 = *(void *)(*(void *)(v16 + 104) + 120LL)) == 0)
  {
    unint64_t v23 = sub_10000AE14();
    uint64_t v22 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 1;
    *(void *)(v24 + 8) = 0LL;
    *(void *)(v24 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD000000000000010LL;
    *(void *)(v24 + 32) = 0x80000001000D1720LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v24 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v24 + 56) = 773LL;
    swift_willThrow(v22);

LABEL_13:
    int v59 = 0;
    uint64_t v60 = 0LL;
    goto LABEL_14;
  }

  uint64_t v18 = *(void **)&v63[OBJC_IVAR___AUAInputStream_lockDelayBuffer];
  if (!v18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  Swift::String v19 = *(void **)&v63[OBJC_IVAR___AUAInputStream_lockDelayTransactionList];
  if (!v19)
  {
LABEL_27:
    __break(1u);
    return result;
  }

  swift_retain_n(v17, 3LL);
  id v20 = v18;
  uint64_t result = (char *)[v19 bytes];
  uint64_t v21 = *(void *)&v63[OBJC_IVAR___AUAInputStream_lockDelayTransfers];
  if (v21 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  sub_1000C761C((uint64_t)v20, (uint64_t)result, v21, a2, 0, 0LL, 0LL);
  uint64_t v22 = v3;
  if (!v3)
  {

    return (char *)swift_release_n(v17, 3LL);
  }

  uint64_t v53 = v17;
  swift_release_n(v17, 2LL);
  int v59 = 1;
  uint64_t v60 = 0LL;
LABEL_14:
  uint64_t v61 = v22;
  uint64_t v27 = (void *)_convertErrorToNSError(_:)(v22);
  id v28 = [v27 code];

  uint64_t v64 = 0x20726F727265LL;
  uint64_t v65 = 0xE600000000000000LL;
  uint64_t v29 = sub_100008E00(&qword_100113420);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  __int128 v55 = xmmword_1000D3D30;
  *(_OWORD *)(v30 + 16) = xmmword_1000D3D30;
  *(void *)(v30 + 56) = &type metadata for Int;
  *(void *)(v30 + 64) = &protocol witness table for Int;
  id v56 = v28;
  *(void *)(v30 + 32) = v28;
  v31._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v30);
  object = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  uint64_t v33 = v65;
  unint64_t v58 = (unint64_t)", startingLockDelayFrame ";
  unint64_t v57 = (unint64_t)"changePhysicalFormat(_:)";
  sub_100029840( v64,  v65,  0xD000000000000010LL,  (void *)0x80000001000D1720LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  781LL);
  swift_bridgeObjectRelease(v33);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v34 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v34, (uint64_t)qword_100117220);
  uint64_t v35 = v6;
  uint64_t v36 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v37 = v11;
  uint64_t v38 = v11;
  uint64_t v39 = v62;
  uint64_t v40 = v36(v38, &v63[OBJC_IVAR___AUAStream_signpostID], v62);
  uint64_t v41 = (os_log_s *)OSSignposter.logHandle.getter(v40);
  int v54 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v36(v9, v37, v39);
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v44 = swift_allocObject(v29, 72LL, 7LL);
    *(_OWORD *)(v44 + 16) = v55;
    *(void *)(v44 + 56) = &type metadata for Int;
    *(void *)(v44 + 64) = &protocol witness table for Int;
    *(void *)(v44 + 32) = v56;
    uint64_t v45 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v44);
    unint64_t v47 = v46;
    uint64_t v66 = sub_1000164BC(v45, v46, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v42 + 4, v42 + 12);
    uint64_t v48 = swift_bridgeObjectRelease(v47);
    os_signpost_id_t v49 = OSSignpostID.rawValue.getter(v48);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v41,  (os_signpost_type_t)v54,  v49,  "AUAInputStream_startLockDelay_error",  "error %s",  v42,  0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    uint64_t v50 = *(void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v51 = v62;
    v50(v37, v62);
    v50(v9, v51);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v39);
  }

  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong(&v63[OBJC_IVAR___AUAStream_audioDevice]);
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v52 = result;
  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000010LL,  v58 | 0x8000000000000000LL,  0xD000000000000016LL,  v57 | 0x8000000000000000LL,  783LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);

  uint64_t result = (char *)swift_errorRelease(v61);
  if ((v59 & 1) != 0) {
    return (char *)swift_release(v53);
  }
  return result;
}

uint64_t sub_1000886FC()
{
  return sub_10008CA8C( (uint64_t)&OBJC_IVAR___AUAStream_signpostID,  "AUAInputStream_startDirectionalStream",  (uint64_t (*)(uint64_t))sub_100088718);
}

uint64_t sub_100088718(char *a1)
{
  uint64_t v2 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 104LL);
  uint64_t v3 = swift_allocObject(&unk_1001064D8, 24LL, 7LL);
  *(void *)(v3 + 16) = a1;
  uint64_t v4 = swift_allocObject(&unk_100106500, 32LL, 7LL);
  *(void *)(v4 + 16) = sub_10008F9F8;
  *(void *)(v4 + 24) = v3;
  v10[4] = sub_10008FA10;
  uint64_t v11 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  void v10[2] = sub_1000888BC;
  v10[3] = &unk_100106518;
  uint64_t v5 = _Block_copy(v10);
  uint64_t v6 = v11;
  uint64_t v7 = v2;
  uint64_t v8 = a1;
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v7, v5);

  _Block_release(v5);
  LOBYTE(aHasher._combine(_:)(v0 & 1) = swift_isEscapingClosureAtFileLocation(v4, "", 85LL, 795LL, 13LL, 1LL);
  swift_release(v3);
  uint64_t result = swift_release(v4);
  return result;
}

uint64_t sub_10008886C(void *a1)
{
  uint64_t v2 = swift_allocObject(&unk_100106438, 24LL, 7LL);
  swift_unknownObjectWeakInit(v2 + 16, a1);
  sub_10008EC40(a1, v2);
  return swift_release(v2);
}

uint64_t sub_1000888BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000888DC()
{
  uint64_t v1 = v0;
  uint64_t result = (uint64_t)[v0 physicalFormat];
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = type metadata accessor for AUAStreamFormat();
    uint64_t v5 = swift_dynamicCastClass(v3, v4);
    if (v5 && (uint64_t v6 = *(void *)(v5 + OBJC_IVAR___AUAStreamFormat_altSetting)) != 0)
    {
      uint64_t v7 = *(void *)(v6 + 104);
      uint64_t v8 = *(void *)&v1[OBJC_IVAR___AUAStream_interface] + 80LL;
      swift_beginAccess(v8, v14, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8);
      if (Strong)
      {
        uint64_t v10 = (void *)Strong;
        uint64_t v11 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
        if (v11)
        {
          BOOL v12 = sub_10001645C(11LL, v11);
          swift_retain(v7);

          if (v12)
          {

            swift_release(v7);
            return 1LL;
          }
        }

        else
        {
          swift_retain(v7);
        }
      }

      else
      {
        swift_retain(v7);
      }

      int v13 = IOUSBGetEndpointUsageType(*(const IOUSBEndpointDescriptor **)(v7 + 16));

      swift_release(v7);
      return v13 == 2;
    }

    else
    {

      return 0LL;
    }
  }

  return result;
}

void sub_100088A84()
{
}

id sub_100088AB0()
{
  return sub_10001642C(0LL, (uint64_t (*)(void))type metadata accessor for AUAInputStream);
}

uint64_t sub_100088AF8()
{
  uint64_t v0 = type metadata accessor for OSSignpostID(0LL);
  sub_100017A94(v0, qword_100117240);
  sub_100008EC4(v0, (uint64_t)qword_100117240);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v1 = type metadata accessor for OSSignposter(0LL);
  uint64_t v2 = sub_100008EC4(v1, (uint64_t)qword_100117220);
  uint64_t v3 = OSSignposter.logHandle.getter(v2);
  return OSSignpostID.init(log:)(v3);
}

BOOL sub_100088B88(char *a1, char *a2)
{
  return dword_1000D8768[*a1] == dword_1000D8768[*a2];
}

Swift::Int sub_100088BAC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(dword_1000D8768[v1]);
  return Hasher._finalize()();
}

void sub_100088BF8()
{
}

Swift::Int sub_100088C2C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(dword_1000D8768[v2]);
  return Hasher._finalize()();
}

_BYTE *sub_100088C74@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  else {
    char v2 = 0x20303030100uLL >> (8 * (*result - 3));
  }
  *a2 = v2;
  return result;
}

void sub_100088CA4(_DWORD *a1@<X8>)
{
  *a1 = dword_1000D8768[*v1];
}

id sub_100088CBC(id result, int a2, unsigned int a3, uint64_t a4)
{
  *(void *)(v4 + 16) = 8LL;
  *(void *)(v4 + 64) = 0LL;
  if ((unint64_t)(a4 - 0x1000000000000000LL) >> 61 == 7)
  {
    uint64_t v9 = result;
    uint64_t result = sub_1000045A4(result, 8 * a4);
    if (v5)
    {
LABEL_3:

      uint64_t v10 = type metadata accessor for AUAFeedbackTransferBlock();
      swift_deallocPartialClassInstance(v4, v10, 72LL, 7LL);
      return (id)v4;
    }

    if ((unsigned __int128)(a4 * (__int128)28LL) >> 64 == (28 * a4) >> 63)
    {
      uint64_t v11 = result;
      id v12 = [objc_allocWithZone(NSMutableData) initWithLength:28 * a4];
      if (!v12)
      {
        unint64_t v16 = sub_10000AE14();
        uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
        *(_BYTE *)uint64_t v18 = 87;
        *(void *)(v18 + 8) = 0LL;
        *(void *)(v18 + 16) = 0xE000000000000000LL;
        *(void *)(v18 + 24) = 0xD000000000000042LL;
        *(void *)(v18 + 32) = 0x80000001000D1200LL;
        *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
        *(void *)(v18 + 48) = 0x80000001000D0AD0LL;
        *(void *)(v18 + 56) = 912LL;
        swift_willThrow(v17);

        goto LABEL_3;
      }

      int v13 = v12;
      *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v11;
      id v24 = v11;
      bzero([v24 mutableBytes], (size_t)objc_msgSend(v24, "length"));
      *(void *)(v4 + 48) = v13;
      id v23 = v13;
      id v14 = [v23 mutableBytes];
      uint64_t v15 = *(void **)(v4 + 48);
      bzero(v14, (size_t)[v15 length]);
      *(void *)(v4 + 32) = a4;
      *(void *)(v4 + 56) = [v15 mutableBytes];
      if (a2 == 1)
      {
        if (a3 >= 3)
        {

          *(_BYTE *)(v4 + 24) = 0;
          return (id)v4;
        }
      }

      else if (a2 == 3)
      {
        if (a3 >= 3)
        {

          if (a3 == 3)
          {
            *(_BYTE *)(v4 + 24) = 0;
            return (id)v4;
          }

          goto LABEL_18;
        }
      }

      else if (a3 >= 4)
      {

        if (a3 != 4)
        {
          char v22 = 2;
          goto LABEL_20;
        }

void sub_100088FE4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v77 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v74 - v6;
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v84 = *(void *)(v8 - 8);
  uint64_t v85 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v0 + 32);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v86 = v11;
  int v13 = _swiftEmptyArrayStorage;
  if (v12 < v11)
  {
    unint64_t v78 = (unint64_t)"changePhysicalFormat(_:)";
    uint64_t v80 = 0x80000001000D0AD0LL;
    uint64_t v81 = 0x80000001000D15B0LL;
    uint64_t v74 = (void *)0x80000001000D1630LL;
    *((void *)&v14 + Hasher._combine(_:)(v0 & 1) = 2LL;
    __int128 v79 = xmmword_1000D3D30;
    *(void *)&__int128 v14 = 136446210LL;
    __int128 v76 = v14;
    id v75 = (char *)&type metadata for Any + 8;
    Swift::String v82 = v7;
    Swift::String v83 = v10;
    while (1)
    {
      uint64_t v15 = *(void *)(v1 + 56);
      int v16 = *(_DWORD *)(v15 + 28 * v12);
      if (v16 == -536870163) {
        break;
      }
      if (!v16)
      {
        uint64_t v46 = v15 + 28 * v12;
        int v49 = *(_DWORD *)(v46 + 12);
        uint64_t v48 = (int *)(v46 + 12);
        int v47 = v49;
        if (v49)
        {
          int v50 = dword_1000D8768[*(char *)(v1 + 24)];
          if (v47 == v50)
          {
            int v51 = *(unsigned __int8 *)(v1 + 24);
            if (v51)
            {
              if (v51 == 1)
              {
                if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
                  int v13 = sub_100050750(0LL, v13[2] + 1LL, 1, v13);
                }
                unint64_t v54 = v13[2];
                unint64_t v53 = v13[3];
                unint64_t v55 = v54 + 1;
                if (v54 >= v53 >> 1) {
                  int v13 = sub_100050750((void *)(v53 > 1), v54 + 1, 1, v13);
                }
                uint64_t v56 = 1000LL * (unsigned __int16)v52;
                unint64_t v57 = WORD1(v52);
              }

              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
                  int v13 = sub_100050750(0LL, v13[2] + 1LL, 1, v13);
                }
                unint64_t v54 = v13[2];
                unint64_t v72 = v13[3];
                unint64_t v55 = v54 + 1;
                if (v54 >= v72 >> 1) {
                  int v13 = sub_100050750((void *)(v72 > 1), v54 + 1, 1, v13);
                }
                uint64_t v56 = 1000LL * v52;
                unint64_t v57 = HIDWORD(v52);
              }

              v13[2] = v55;
              id v73 = &v13[2 * v54];
              v73[4] = v57;
              v73[5] = v56;
            }

            else
            {
              if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
                int v13 = sub_100050750(0LL, v13[2] + 1LL, 1, v13);
              }
              unint64_t v70 = v13[2];
              unint64_t v69 = v13[3];
              if (v70 >= v69 >> 1) {
                int v13 = sub_100050750((void *)(v69 > 1), v70 + 1, 1, v13);
              }
              v13[2] = v70 + 1;
              uint64_t v71 = &v13[2 * v70];
              v71[4] = ((4 * v52) >> 16) & 0x3FF;
              v71[5] = 1000LL * ((4 * (_DWORD)v52) & 0xFFFC);
            }
          }

          else
          {
            uint64_t v88 = 0LL;
            uint64_t v89 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(63LL);
            v62._countAndFlagsBits = 0xD000000000000030LL;
            v62._object = v74;
            String.append(_:)(v62);
            int v87 = *v48;
            v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
            object = v63._object;
            String.append(_:)(v63);
            swift_bridgeObjectRelease(object);
            v65._countAndFlagsBits = 0x746365707865202CLL;
            v65._object = (void *)0xEB00000000206465LL;
            String.append(_:)(v65);
            int v87 = v50;
            v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
            uint64_t v67 = v66._object;
            String.append(_:)(v66);
            swift_bridgeObjectRelease(v67);
            uint64_t v68 = v89;
            sub_100029840( v88,  v89,  0x6465654664616572LL,  (void *)0xEE0029286B636162LL,  0xD000000000000016LL,  v78 | 0x8000000000000000LL,  997LL);
            swift_bridgeObjectRelease(v68);
          }

          goto LABEL_34;
        }

        goto LABEL_29;
      }

      if (v16 == -536870911) {
        return;
      }
      uint64_t v17 = v3;
      uint64_t v88 = 0x7461747320646162LL;
      uint64_t v89 = 0xEB00000000207375LL;
      uint64_t v18 = sub_100008E00(&qword_100113420);
      uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
      *(_OWORD *)(v19 + 16) = v79;
      *(void *)(v19 + 56) = &type metadata for Int32;
      *(void *)(v19 + 64) = &protocol witness table for Int32;
      *(_DWORD *)(v19 + 32) = v16;
      v20._countAndFlagsBits = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v19);
      uint64_t v21 = v20._object;
      String.append(_:)(v20);
      swift_bridgeObjectRelease(v21);
      uint64_t v23 = v88;
      uint64_t v22 = v89;
      if (qword_1001128F0 != -1) {
        swift_once(&qword_1001128F0, sub_10002984C);
      }
      uint64_t v24 = type metadata accessor for Logger(0LL);
      sub_100008EC4(v24, (uint64_t)qword_1001171F8);
      uint64_t v25 = swift_bridgeObjectRetain_n(v22, 2LL);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(12LL, -1LL);
        uint64_t v29 = swift_slowAlloc(32LL, -1LL);
        uint64_t v88 = v29;
        *(_DWORD *)uint64_t v28 = v76;
        uint64_t v30 = sub_1000298B4( v23,  v22,  0x6465654664616572LL,  (void *)0xEE0029286B636162LL,  0xD000000000000016LL,  v78 | 0x8000000000000000LL,  1026LL);
        unint64_t v32 = v31;
        *(void *)(v28 + 4) = sub_1000164BC(v30, v31, &v88);
        swift_bridgeObjectRelease_n(v22, 2LL);
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v29, 1LL, v75);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
        swift_bridgeObjectRelease(v22);
      }

      else
      {

        swift_bridgeObjectRelease_n(v22, 3LL);
      }

      uint64_t v3 = v17;
      uint64_t v7 = v82;
      uint64_t v10 = v83;
LABEL_34:
      uint64_t v61 = *(void *)(v1 + 64);
      uint64_t v12 = v61 + 1;
      if (__OFADD__(v61, 1LL))
      {
        __break(1u);
        return;
      }

      *(void *)(v1 + 64) = v12;
      if (v12 >= v86) {
        return;
      }
    }

    if (qword_100112910 != -1) {
      swift_once(&qword_100112910, sub_100082CB8);
    }
    uint64_t v33 = v85;
    uint64_t v34 = sub_100008EC4(v85, (uint64_t)qword_100117220);
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v10, v34, v33);
    if (qword_100112920 != -1) {
      swift_once(&qword_100112920, sub_100088AF8);
    }
    uint64_t v35 = sub_100008EC4(v2, (uint64_t)qword_100117240);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v37 = v36(v7, v35, v2);
    uint64_t v38 = (os_log_s *)OSSignposter.logHandle.getter(v37);
    os_signpost_type_t v39 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v40 = v77;
      v36(v77, (uint64_t)v7, v2);
      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      os_signpost_id_t v42 = OSSignpostID.rawValue.getter(v41);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v38,  v39,  v42,  "AUAFeedbackTransferBlock_readFeedback",  "Feedback recieved frameStatus kIOReturnNotResponding, using previous value",  v41,  2u);
      uint64_t v43 = v41;
      uint64_t v7 = v82;
      swift_slowDealloc(v43, -1LL, -1LL);

      uint64_t v44 = *(void (**)(char *, uint64_t))(v3 + 8);
      v44(v7, v2);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
      uint64_t v45 = v40;
      uint64_t v10 = v83;
      v44(v45, v2);
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v10, v85);
    }

    sub_100029834( 0xD00000000000004ALL,  v81,  0x6465654664616572LL,  (void *)0xEE0029286B636162LL,  0xD000000000000016LL,  v80,  1021LL);
LABEL_29:
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      int v13 = sub_100050750(0LL, v13[2] + 1LL, 1, v13);
    }
    unint64_t v59 = v13[2];
    unint64_t v58 = v13[3];
    if (v59 >= v58 >> 1) {
      int v13 = sub_100050750((void *)(v58 > 1), v59 + 1, 1, v13);
    }
    v13[2] = v59 + 1;
    uint64_t v60 = &v13[2 * v59];
    v60[4] = 0LL;
    v60[5] = 0LL;
    goto LABEL_34;
  }

uint64_t sub_1000898B8()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

void *sub_1000898E4(char *a1)
{
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  int v134 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v135 = (char *)&v127 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v133 = (char *)&v127 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v127 - v11;
  *(void *)(v1 + 24) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
  int v13 = (void *)(v1 + 24);
  uint64_t v14 = v1 + 56;
  swift_unknownObjectWeakInit(v1 + 56, 0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  uint64_t v16 = sub_100008EC4(v15, (uint64_t)qword_100117220);
  uint64_t v17 = OSSignposter.logHandle.getter(v16);
  OSSignpostID.init(log:)(v17);
  uint64_t v143 = v1;
  uint64_t v18 = v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v137 = v3;
  uint64_t v138 = v4;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID,  v12,  v3);
  id v19 = [a1 physicalFormat];
  if (!v19) {
    goto LABEL_12;
  }
  Swift::String v20 = v19;
  uint64_t v21 = type metadata accessor for AUAStreamFormat();
  uint64_t v22 = swift_dynamicCastClass(v20, v21);
  if (!v22)
  {

LABEL_12:
    unint64_t v31 = sub_10000AE14();
    uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
    *(_BYTE *)uint64_t v33 = 1;
    *(void *)(v33 + 8) = 0LL;
    *(void *)(v33 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v33 + 24), "init(stream:)");
    *(_WORD *)(v33 + 38) = -4864;
    *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v33 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v33 + 56) = 1048LL;
    swift_willThrow(v32);
    goto LABEL_13;
  }

  uint64_t v23 = *(void *)(v22 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v23)
  {
    unint64_t v37 = sub_10000AE14();
    uint64_t v38 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v39 = 1;
    *(void *)(v39 + 8) = 0LL;
    *(void *)(v39 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v39 + 24), "init(stream:)");
    *(_WORD *)(v39 + 38) = -4864;
    *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v39 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v39 + 56) = 1049LL;
    swift_willThrow(v38);

    goto LABEL_13;
  }

  uint64_t v24 = *(void *)(v23 + 112);
  if (!v24)
  {
    unint64_t v40 = sub_10000AE14();
    swift_allocError(&type metadata for AUAError, v40, 0LL, 0LL);
    *(_BYTE *)uint64_t v41 = 1;
    *(void *)(v41 + 8) = 0LL;
    *(void *)(v41 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v41 + 24), "init(stream:)");
    *(_WORD *)(v41 + 38) = -4864;
    *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v41 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v41 + 56) = 1050LL;
    uint64_t v42 = swift_retain(v23);
    swift_willThrow(v42);

    swift_release(v23);
    goto LABEL_13;
  }

  id v131 = a1;
  uint64_t v132 = v24;
  id v130 = v20;
  swift_beginAccess(v23 + 144, v142, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v23 + 144);
  if (!Strong)
  {
    swift_retain(v23);
    uint64_t v28 = v132;
    swift_retain(v132);
    goto LABEL_18;
  }

  uint64_t v26 = Strong;
  os_log_type_t v27 = *(void **)(Strong + 112);
  id v129 = v27;
  swift_retain(v23);
  uint64_t v28 = v132;
  swift_retain(v132);
  swift_release(v26);
  if (!v27)
  {
LABEL_18:
    unint64_t v43 = sub_10000AE14();
    uint64_t v44 = v28;
    uint64_t v45 = swift_allocError(&type metadata for AUAError, v43, 0LL, 0LL);
    *(_BYTE *)uint64_t v46 = 1;
    *(void *)(v46 + 8) = 0LL;
    *(void *)(v46 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v46 + 24), "init(stream:)");
    *(_WORD *)(v46 + 38) = -4864;
    *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v46 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v46 + 56) = 1051LL;
    swift_willThrow(v45);

    swift_release(v23);
    swift_release(v44);
    a1 = v131;
    goto LABEL_13;
  }

  uint64_t v128 = v23;
  uint64_t v29 = v129;
  unint64_t v30 = v136;
  sub_1000C7D44(v129, 0);
  if (!v30)
  {
    int v47 = &v131[OBJC_IVAR___AUAStream_audioDevice];
    uint64_t v48 = swift_unknownObjectWeakLoadStrong(&v131[OBJC_IVAR___AUAStream_audioDevice]);
    if (v48)
    {
      int v49 = (void *)v48;
      swift_unknownObjectWeakAssign(v14, v48);

      uint64_t v50 = v143;
      *(void *)(v143 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0LL;
      uint64_t v51 = v132;
      unint64_t v52 = *(void *)(v132 + 104);
      if (HIDWORD(v52)
        || (*(_DWORD *)(v50 + 48) = v52, *(void *)(v50 + 16) = v51, unint64_t v136 = *(void *)(v51 + 112), HIDWORD(v136)))
      {
LABEL_64:
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
        __break(1u);
        JUMPOUT(0x10008A814LL);
      }

      uint64_t v53 = swift_unknownObjectWeakLoadStrong(v47);
      if (v53)
      {
        unint64_t v54 = (void *)v53;
        if (*(void *)(v53 + OBJC_IVAR___AUAAudioDevice_function))
        {
          uint64_t v55 = *(void *)(v53 + OBJC_IVAR___AUAAudioDevice_function + 8);
          uint64_t ObjectType = swift_getObjectType(*(void *)(v53 + OBJC_IVAR___AUAAudioDevice_function));
          unint64_t v127 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v55 + 40);
          uint64_t v57 = v132;
          swift_retain(v132);
          int v58 = v127(ObjectType, v55);

          uint64_t v59 = v57;
          uint64_t v29 = v129;
          if (!v58)
          {
            uint64_t v60 = *(unsigned int *)(v143 + 48);
            uint64_t v61 = 64LL;
            switch((int)v60)
            {
              case 1:
                goto LABEL_47;
              case 2:
                uint64_t v60 = 1LL;
                uint64_t v61 = 32LL;
                goto LABEL_47;
              case 3:
              case 5:
              case 6:
              case 7:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
                goto LABEL_56;
              case 4:
                uint64_t v60 = 1LL;
                uint64_t v61 = 16LL;
                goto LABEL_47;
              case 8:
                uint64_t v60 = 1LL;
                uint64_t v61 = 8LL;
                goto LABEL_47;
              case 16:
                goto LABEL_40;
              case 32:
              case 64:
                goto LABEL_46;
              default:
                if ((_DWORD)v60 == 128) {
                  goto LABEL_46;
                }
LABEL_56:
                uint64_t v115 = v137;
                uint64_t v114 = v138;
                id v116 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
                id v117 = v133;
                v116(v133, v18, v137);
                uint64_t v118 = v132;
                uint64_t v119 = swift_retain(v132);
                uint64_t v120 = (os_log_s *)OSSignposter.logHandle.getter(v119);
                os_signpost_type_t v121 = static os_signpost_type_t.event.getter();
                if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
                {
                  v116(v12, (uint64_t)v117, v115);
                  uint64_t v122 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                  *(_DWORD *)uint64_t v122 = 134217984;
                  uint64_t v140 = *(void *)(v118 + 104);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v122 + 4, v122 + 12);
                  uint64_t v123 = swift_release(v118);
                  os_signpost_id_t v124 = OSSignpostID.rawValue.getter(v123);
                  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v120,  v121,  v124,  "AUAOutputExplicitFeedbackStream_init",  "ADC1 unsupported Feedback Polling Interval: msPerTransfer %lu",  v122,  0xCu);
                  swift_slowDealloc(v122, -1LL, -1LL);

                  unint64_t v125 = *(void (**)(char *, uint64_t))(v114 + 8);
                  v125(v117, v115);
                  v125(v12, v115);
                }

                else
                {
                  swift_release(v118);

                  (*(void (**)(char *, uint64_t))(v114 + 8))(v117, v115);
                }

                id v74 = v130;
                id v75 = v131;
                uint64_t v29 = v129;
                unint64_t v126 = sub_10000AE14();
                uint64_t v77 = swift_allocError(&type metadata for AUAError, v126, 0LL, 0LL);
                *(_BYTE *)uint64_t v78 = 96;
                uint64_t v79 = 1087LL;
                break;
            }

            goto LABEL_36;
          }
        }

        else
        {
          uint64_t v62 = v132;
          swift_retain(v132);

          uint64_t v59 = v62;
        }
      }

      else
      {
        uint64_t v59 = v132;
        swift_retain(v132);
      }

      if (*(void *)(v59 + 96) >= 2uLL)
      {
        uint64_t v63 = v137;
        uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
        Swift::String v65 = v135;
        v64(v135, v18, v137);
        uint64_t v66 = swift_retain(v59);
        uint64_t v67 = (os_log_s *)OSSignposter.logHandle.getter(v66);
        os_signpost_type_t v68 = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v64(v12, (uint64_t)v65, v63);
          unint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)unint64_t v69 = 134217984;
          uint64_t v140 = *(void *)(v59 + 96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v69 + 4, v69 + 12);
          uint64_t v70 = swift_release(v59);
          os_signpost_id_t v71 = OSSignpostID.rawValue.getter(v70);
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  v68,  v71,  "AUAOutputExplicitFeedbackStream_init",  "ADC2+ unsupported Feedback Polling Interval: transfersPerMS %lu",  v69,  0xCu);
          swift_slowDealloc(v69, -1LL, -1LL);

          unint64_t v72 = *(void (**)(char *, uint64_t))(v138 + 8);
          v72(v65, v63);
          v72(v12, v63);
        }

        else
        {
          swift_release(v59);

          (*(void (**)(char *, uint64_t))(v138 + 8))(v65, v63);
        }

        id v74 = v130;
        id v75 = v131;
        unint64_t v76 = sub_10000AE14();
        uint64_t v77 = swift_allocError(&type metadata for AUAError, v76, 0LL, 0LL);
        *(_BYTE *)uint64_t v78 = 96;
        uint64_t v79 = 1096LL;
LABEL_36:
        uint64_t v34 = (void *)v143;
LABEL_55:
        *(void *)(v78 + 8) = 0LL;
        *(void *)(v78 + 16) = 0xE000000000000000LL;
        strcpy((char *)(v78 + 24), "init(stream:)");
        *(_WORD *)(v78 + 38) = -4864;
        *(void *)(v78 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
        *(void *)(v78 + 48) = 0x80000001000D0AD0LL;
        *(void *)(v78 + 56) = v79;
        swift_willThrow(v77);
        swift_release(v34);

        swift_release(v128);
        swift_release(v132);

        return v34;
      }

      int v73 = *(_DWORD *)(v143 + 48);
      uint64_t v61 = 8LL;
      uint64_t v60 = 8LL;
      switch(v73)
      {
        case 1:
          goto LABEL_47;
        case 2:
          uint64_t v60 = 8LL;
          uint64_t v61 = 4LL;
          goto LABEL_47;
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
          goto LABEL_38;
        case 4:
          uint64_t v61 = 4LL;
          uint64_t v60 = 4LL;
          goto LABEL_47;
        case 8:
          uint64_t v60 = 2LL;
          uint64_t v61 = 4LL;
          goto LABEL_47;
        case 16:
LABEL_40:
          uint64_t v60 = 1LL;
          uint64_t v61 = 4LL;
          goto LABEL_47;
        case 32:
        case 64:
          goto LABEL_46;
        default:
          if (v73 != 128)
          {
LABEL_38:
            uint64_t v80 = v137;
            uint64_t v81 = v138;
            Swift::String v82 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
            Swift::String v83 = v134;
            v82(v134, v18, v137);
            uint64_t v84 = v132;
            uint64_t v85 = swift_retain(v132);
            uint64_t v86 = (os_log_s *)OSSignposter.logHandle.getter(v85);
            os_signpost_type_t v87 = static os_signpost_type_t.event.getter();
            if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
            {
              v82(v12, (uint64_t)v83, v80);
              uint64_t v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              *(_DWORD *)uint64_t v88 = 134217984;
              uint64_t v140 = *(void *)(v84 + 104);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v88 + 4, v88 + 12);
              uint64_t v89 = swift_release(v84);
              os_signpost_id_t v90 = OSSignpostID.rawValue.getter(v89);
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v86,  v87,  v90,  "AUAOutputExplicitFeedbackStream_init",  "ADC2+ unsupported Feedback Polling Interval: msPerTransfer %lu",  v88,  0xCu);
              swift_slowDealloc(v88, -1LL, -1LL);

              uint64_t v91 = *(void (**)(char *, uint64_t))(v81 + 8);
              v91(v83, v80);
              v91(v12, v80);
            }

            else
            {
              swift_release(v84);

              (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v80);
            }

            id v74 = v130;
            id v75 = v131;
            uint64_t v29 = v129;
            unint64_t v92 = sub_10000AE14();
            uint64_t v77 = swift_allocError(&type metadata for AUAError, v92, 0LL, 0LL);
            *(_BYTE *)uint64_t v78 = 96;
            uint64_t v79 = 1127LL;
            goto LABEL_36;
          }

LABEL_46:
          uint64_t v60 = 1LL;
          uint64_t v61 = 3LL;
LABEL_47:
          uint64_t v140 = 0LL;
          v141[0] = 0xE000000000000000LL;
          _StringGuts.grow(_:)(81LL);
          v93._countAndFlagsBits = 0xD000000000000032LL;
          v93._object = (void *)0x80000001000D11A0LL;
          String.append(_:)(v93);
          v139[0] = v60;
          v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          object = v94._object;
          String.append(_:)(v94);
          swift_bridgeObjectRelease(object);
          v96._countAndFlagsBits = 0xD00000000000001BLL;
          v96._object = (void *)0x80000001000D11E0LL;
          String.append(_:)(v96);
          v139[0] = v61;
          v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
          id v98 = v97._object;
          String.append(_:)(v97);
          swift_bridgeObjectRelease(v98);
          uint64_t v99 = v141[0];
          sub_100029834( v140,  v141[0],  0x7274732874696E69LL,  (void *)0xED0000293A6D6165LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  1130LL);
          swift_bridgeObjectRelease(v99);
          uint64_t v100 = OBJC_IVAR___AUAStream_interface;
          id v75 = v131;
          uint64_t v101 = *(void *)&v131[OBJC_IVAR___AUAStream_interface] + 80LL;
          swift_beginAccess(v101, &v140, 0LL, 0LL);
          unint64_t v102 = (char *)swift_unknownObjectWeakLoadStrong(v101);
          if (!v102)
          {
            unint64_t v113 = sub_10000AE14();
            uint64_t v77 = swift_allocError(&type metadata for AUAError, v113, 0LL, 0LL);
            *(_BYTE *)uint64_t v78 = 51;
            uint64_t v79 = 1132LL;
            uint64_t v29 = v129;
            id v74 = v130;
            uint64_t v34 = (void *)v143;
            goto LABEL_55;
          }

          int v103 = *(_DWORD *)&v102[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed];

          swift_beginAccess(v13, v139, 33LL, 0LL);
          uint64_t v104 = sub_10008CFB0(v61, 0);
          specialized Array._endMutation()(v104);
          swift_endAccess(v139);
          os_signpost_id_t v105 = *(void **)(*(void *)&v75[v100] + 112LL);
          while (v105)
          {
            uint64_t v106 = type metadata accessor for AUAFeedbackTransferBlock();
            uint64_t v107 = swift_allocObject(v106, 72LL, 7LL);
            id v108 = v105;
            sub_100088CBC(v108, v103, v136, v60);
            uint64_t v109 = swift_beginAccess(v13, v139, 33LL, 0LL);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
            unint64_t v111 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v110 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v111 >= v110 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1LL);
            }
            uint64_t v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v111, v107);
            specialized Array._endMutation()(v112);
            swift_endAccess(v139);
            if (!--v61)
            {

              swift_release(v128);
              swift_release(v132);

              return (void *)v143;
            }
          }

          __break(1u);
          break;
      }
    }

    __break(1u);
    goto LABEL_64;
  }

  swift_release(v128);
  swift_release(v28);

  a1 = v131;
LABEL_13:

  uint64_t v34 = (void *)v143;
  swift_bridgeObjectRelease(*(void *)(v143 + 24));
  swift_bridgeObjectRelease(v34[4]);
  swift_unknownObjectWeakDestroy(v14);
  (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v18, v137);
  uint64_t v35 = type metadata accessor for AUAOutputExplicitFeedbackStream(0LL);
  swift_deallocPartialClassInstance(v34, v35, *(unsigned int *)(*v34 + 48LL), *(unsigned __int16 *)(*v34 + 52LL));
  return v34;
}

                        sub_100017910((uint64_t)v113, (uint64_t)v102);
                        unint64_t v72 = sub_100008E00(&qword_100113EB8);
                        if (!swift_dynamicCast(&v100, v102, v72, &type metadata for Int32, 6LL))
                        {
                          Swift::String v83 = sub_10000AE14();
                          uint64_t v79 = swift_allocError(&type metadata for AUAError, v83, 0LL, 0LL);
                          *(_BYTE *)uint64_t v80 = 1;
                          *(void *)(v80 + 8) = 0LL;
                          *(void *)(v80 + 16) = 0xE000000000000000LL;
                          *(void *)(v80 + 24) = 0xD00000000000002ALL;
                          *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                          *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                          *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                          uint64_t v81 = 192LL;
                          goto LABEL_70;
                        }

                        int v73 = v100;
                        sub_100017910((uint64_t)v110, (uint64_t)v102);
                        if (!swift_dynamicCast(&v100, v102, v72, &type metadata for Int32, 6LL))
                        {
                          uint64_t v86 = sub_10000AE14();
                          uint64_t v79 = swift_allocError(&type metadata for AUAError, v86, 0LL, 0LL);
                          *(_BYTE *)uint64_t v80 = 1;
                          *(void *)(v80 + 8) = 0LL;
                          *(void *)(v80 + 16) = 0xE000000000000000LL;
                          *(void *)(v80 + 24) = 0xD00000000000002ALL;
                          *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                          *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                          *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                          uint64_t v81 = 193LL;
                          goto LABEL_70;
                        }

                        id v74 = v100;
                        sub_100017910((uint64_t)v107, (uint64_t)v102);
                        if (!swift_dynamicCast(&v100, v102, v72, &type metadata for Int32, 6LL))
                        {
                          uint64_t v89 = sub_10000AE14();
                          uint64_t v79 = swift_allocError(&type metadata for AUAError, v89, 0LL, 0LL);
                          *(_BYTE *)uint64_t v80 = 1;
                          *(void *)(v80 + 8) = 0LL;
                          *(void *)(v80 + 16) = 0xE000000000000000LL;
                          *(void *)(v80 + 24) = 0xD00000000000002ALL;
                          *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                          *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                          *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                          uint64_t v81 = 194LL;
                          goto LABEL_70;
                        }

                        os_signpost_id_t v105 = &type metadata for AudioClassRange32bit;
                        uint64_t v106 = &off_100105C98;
                        int v103 = __PAIR64__(v74, v73);
                        uint64_t v104 = v100;
LABEL_54:
                        sub_100017910((uint64_t)&v103, (uint64_t)v102);
                        sub_100079488(v96, v102);
                        if (v17)
                        {

                          sub_100017A40(&v103);
LABEL_71:
                          sub_100017A40(v107);
                          goto LABEL_35;
                        }

                        goto LABEL_66;
                      }

                      goto LABEL_74;
                    }
                  }

                  __break(1u);
LABEL_74:
                  __break(1u);
                  return;
                }

char *sub_10008AA14()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t result = (char *)swift_unknownObjectWeakLoadStrong(v0 + 56);
  if (result)
  {
    uint64_t v10 = *(void *)&result[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame];

    *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v10;
    if (qword_100112910 != -1) {
      swift_once(&qword_100112910, sub_100082CB8);
    }
    uint64_t v11 = type metadata accessor for OSSignposter(0LL);
    sub_100008EC4(v11, (uint64_t)qword_100117220);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v12(v8, v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID, v2);
    uint64_t v13 = swift_retain_n(v1, 2LL);
    uint64_t v14 = (os_log_s *)OSSignposter.logHandle.getter(v13);
    os_signpost_type_t v15 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v12(v6, (uint64_t)v8, v2);
      uint64_t v16 = swift_slowAlloc(18LL, -1LL);
      *(_DWORD *)uint64_t v16 = 134218240;
      uint64_t v30 = *(void *)(v1 + 40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 1024;
      os_signpost_type_t v17 = v15;
      int v18 = *(_DWORD *)(v1 + 48);
      swift_release(v1);
      LODWORD(v3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v16 + 14, v16 + 18);
      uint64_t v19 = swift_release(v1);
      os_signpost_id_t v20 = OSSignpostID.rawValue.getter(v19);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  v17,  v20,  "AUAOutputExplicitFeedbackStream_startFeedback",  "starting frame %llu msPerTransfer %u",  (uint8_t *)v16,  0x12u);
      swift_slowDealloc(v16, -1LL, -1LL);

      uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
      v21(v8, v2);
      v21(v6, v2);
    }

    else
    {
      swift_release_n(v1, 2LL);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }

    uint64_t v30 = 0LL;
    uint64_t v31 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease(v31);
    uint64_t v30 = 0xD000000000000015LL;
    uint64_t v31 = 0x80000001000D1560LL;
    uint64_t v29 = *(void *)(v1 + 40);
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._countAndFlagsBits = 0x7254726550736D20LL;
    v24._object = (void *)0xEF20726566736E61LL;
    String.append(_:)(v24);
    LODWORD(v29) = *(_DWORD *)(v1 + 48);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
    uint64_t v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = v31;
    sub_100029834( v30,  v31,  0x6565467472617473LL,  (void *)0xEF29286B63616264LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  1154LL);
    swift_bridgeObjectRelease(v27);
    return (char *)sub_10008AD88();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10008AD88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignposter(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v6 = sub_100008EC4(v2, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  swift_retain(v1);
  uint64_t v19 = v3;
  uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v7 = 134217984;
  uint64_t v20 = *(void *)(v1 + 40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
  uint64_t v8 = swift_release(v1);
  uint64_t v9 = (os_log_s *)OSSignposter.logHandle.getter(v8);
  uint64_t v10 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v11 = v10;
  os_signpost_id_t v12 = OSSignpostID.rawValue.getter(v10);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  v11,  v12,  "AUAOutputExplicitFeedbackStream_enqueueAvailableFeedbackTransferBlocks",  "frame %llu",  v7,  0xCu);
  uint64_t v13 = sub_10008AF6C(v1);
  uint64_t v14 = static os_signpost_type_t.end.getter(v13);
  os_signpost_type_t v15 = v14;
  os_signpost_id_t v16 = OSSignpostID.rawValue.getter(v14);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  v15,  v16,  "AUAOutputExplicitFeedbackStream_enqueueAvailableFeedbackTransferBlocks",  "frame %llu",  v7,  0xCu);

  swift_slowDealloc(v7, -1LL, -1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v2);
}

uint64_t sub_10008AF6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v123 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v126 = *(void *)(v123 - 8);
  uint64_t v4 = __chkstk_darwin(v123);
  uint64_t v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v114 = (char *)&v105 - v6;
  uint64_t v7 = (uint64_t *)(a1 + 24);
  uint64_t v117 = a1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v116 = a1 + 56;
  uint64_t v120 = a1 + 32;
  uint64_t result = swift_beginAccess(a1 + 24, v134, 1LL, 0LL);
  unint64_t v110 = &v131;
  unint64_t v128 = (unint64_t)"Transfer must be 0, usbFrame ";
  unint64_t v107 = 0x80000001000D1480LL;
  unint64_t v127 = (unint64_t)"changePhysicalFormat(_:)";
  unint64_t v106 = 0x80000001000D0AD0LL;
  *((void *)&v9 + Hasher._combine(_:)(v0 & 1) = 2LL;
  __int128 v122 = xmmword_1000D3D30;
  unint64_t v115 = 0x80000001000D14B0LL;
  *(void *)&__int128 v9 = 136315138LL;
  __int128 v109 = v9;
  id v108 = (char *)&type metadata for Any + 8;
  uint64_t v112 = (void *)0x80000001000D1450LL;
  uint64_t v111 = a1;
  for (i = (uint64_t *)(a1 + 24); ; uint64_t v7 = i)
  {
    uint64_t v10 = *v7;
    if ((unint64_t)*v7 >> 62)
    {
      if (v10 < 0) {
        uint64_t v99 = *v7;
      }
      else {
        uint64_t v99 = v10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v7);
      uint64_t v100 = _CocoaArrayWrapper.endIndex.getter(v99);
      uint64_t result = swift_bridgeObjectRelease(v10);
      if (!v100) {
        return result;
      }
    }

    else if (!*(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      return result;
    }

    uint64_t v11 = *v7;
    if ((unint64_t)*v7 >> 62)
    {
      if (v11 < 0) {
        uint64_t v101 = *v7;
      }
      else {
        uint64_t v101 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*v7, 2LL);
      uint64_t v102 = _CocoaArrayWrapper.endIndex.getter(v101);
      swift_bridgeObjectRelease(v11);
      if (!v102) {
        goto LABEL_89;
      }
    }

    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(*v7);
      if (!v12) {
        goto LABEL_89;
      }
    }

    if ((v11 & 0xC000000000000001LL) != 0)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
    }

    else
    {
      if (!*(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_82;
      }
      uint64_t v13 = swift_retain(*(void *)(v11 + 32));
    }

    id v129 = (void *)v13;
    swift_bridgeObjectRelease(v11);
    uint64_t v14 = *v7;
    unint64_t v15 = (unint64_t)*v7 >> 62;
    if (!v15)
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v16 >= 1) {
        uint64_t v17 = 1LL;
      }
      else {
        uint64_t v17 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }
      swift_bridgeObjectRetain(*v7);
      goto LABEL_14;
    }

    uint64_t v11 = v14 < 0 ? *v7 : v14 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain_n(*v7, 2LL);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v11);
    uint64_t result = swift_bridgeObjectRelease(v14);
    if (v16 < 0) {
      break;
    }
    if (v16 >= 1) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = v16;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v103 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v14);
    if (v103 < v17)
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      swift_bridgeObjectRelease(v11);
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
      while (1)
      {
        __break(1u);
LABEL_93:
        LOBYTE(v104) = 2;
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  v104,  3451LL,  0);
      }
    }

    swift_bridgeObjectRetain(v14);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v14);
    if (v11 < v16) {
      goto LABEL_83;
    }
LABEL_14:
    if ((v14 & 0xC000000000000001LL) != 0 && (unint64_t)v16 >= 2)
    {
      type metadata accessor for AUAFeedbackTransferBlock();
      Swift::Int v18 = v17;
      do
      {
        Swift::Int v19 = v18 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v18);
        Swift::Int v18 = v19;
      }

      while (v16 != v19);
    }

    if (v15)
    {
      if (v14 < 0) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = v14 & 0xFFFFFFFFFFFFFF8LL;
      }
      __n128 v23 = swift_bridgeObjectRetain(v14);
      uint64_t v20 = _CocoaArrayWrapper.subscript.getter(v17, v16, v22, v23);
      uint64_t v21 = v24;
      uint64_t v17 = v25;
      uint64_t v11 = v26;
      swift_bridgeObjectRelease_n(v14, 2LL);
      if ((v11 & 1) == 0) {
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v20 = v14 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFF8LL) + 32;
      uint64_t v11 = (2 * v16) | 1;
    }

    uint64_t v29 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v30 = swift_unknownObjectRetain_n(v20, 2LL);
    uint64_t v31 = (void *)swift_dynamicCastClass(v30, v29);
    if (!v31)
    {
      swift_unknownObjectRelease(v20, v32);
      uint64_t v31 = _swiftEmptyArrayStorage;
    }

    uint64_t v33 = v31[2];
    swift_release(v31);
    if (v33 != ((unint64_t)v11 >> 1) - v17)
    {
      swift_unknownObjectRelease(v20, v34);
LABEL_24:
      uint64_t v11 = (uint64_t)sub_100051314(v20, v21, v17, v11);
      uint64_t v28 = v129;
      goto LABEL_31;
    }

    uint64_t v11 = swift_dynamicCastClass(v20, v29);
    uint64_t v28 = v129;
    if (!v11)
    {
      swift_unknownObjectRelease(v20, v27);
      uint64_t v11 = (uint64_t)_swiftEmptyArrayStorage;
    }

uint64_t sub_10008BB24()
{
  return sub_10008CA8C( (uint64_t)&OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID,  "AUAOutputExplicitFeedbackStream_readFeedback",  (uint64_t (*)(uint64_t))sub_10008BB40);
}

void sub_10008BB40(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 32);
  uint64_t v46 = a1 + 56;
  uint64_t v2 = (void *)(a1 + 24);
  swift_beginAccess(a1 + 32, v45, 1LL, 0LL);
  unint64_t v43 = v1;
  while (1)
  {
    uint64_t v3 = *v1;
    if ((unint64_t)*v1 >> 62)
    {
      if (v3 < 0) {
        uint64_t v38 = *v1;
      }
      else {
        uint64_t v38 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*v1, 2LL);
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v3);
      if (!v39)
      {
LABEL_53:
        swift_bridgeObjectRelease(v3);
        sub_100029840( 0xD00000000000001ALL,  0x80000001000D13E0LL,  0x6465654664616572LL,  (void *)0xEE0029286B636162LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  1208LL);
        return;
      }
    }

    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(*v1);
      if (!v4) {
        goto LABEL_53;
      }
    }

    if ((v3 & 0xC000000000000001LL) == 0) {
      break;
    }
    uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
LABEL_7:
    swift_bridgeObjectRelease(v3);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v46);
    if (!Strong) {
      goto LABEL_59;
    }
    uint64_t v7 = (void *)Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_sampleManager);
    swift_retain(v8);

    if (!v8) {
      goto LABEL_60;
    }
    sub_100088FE4();
    uint64_t v10 = v9;
    sub_10000C954(v9);
    swift_bridgeObjectRelease(v10);
    if (*(void *)(v5 + 64) < *(void *)(v5 + 32))
    {
      swift_release(v5);
      swift_release(v8);
      return;
    }

    uint64_t v11 = *v1;
    unint64_t v12 = (unint64_t)*v1 >> 62;
    if (v12)
    {
      if (v11 < 0) {
        uint64_t v40 = *v1;
      }
      else {
        uint64_t v40 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(*v1, 2LL);
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v11);
      if (v13 < 0) {
        goto LABEL_61;
      }
      if (v13 >= 1) {
        uint64_t v14 = 1LL;
      }
      else {
        uint64_t v14 = v13;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v11);
      if (v41 < v14) {
        goto LABEL_56;
      }
      swift_bridgeObjectRetain(v11);
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v11);
      if (v42 < v13) {
        goto LABEL_57;
      }
    }

    else
    {
      uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v13 >= 1) {
        uint64_t v14 = 1LL;
      }
      else {
        uint64_t v14 = *(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }
      swift_bridgeObjectRetain(*v1);
    }

    if ((v11 & 0xC000000000000001LL) != 0 && (unint64_t)v13 >= 2)
    {
      type metadata accessor for AUAFeedbackTransferBlock();
      Swift::Int v15 = v14;
      do
      {
        Swift::Int v16 = v15 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v15);
        Swift::Int v15 = v16;
      }

      while (v13 != v16);
    }

    if (v12)
    {
      if (v11 < 0) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      __n128 v21 = swift_bridgeObjectRetain(v11);
      uint64_t v17 = _CocoaArrayWrapper.subscript.getter(v14, v13, v20, v21);
      uint64_t v18 = v22;
      uint64_t v14 = v23;
      unint64_t v19 = v24;
      swift_bridgeObjectRelease_n(v11, 2LL);
      if ((v19 & 1) == 0) {
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v17 = v11 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFF8LL) + 32;
      unint64_t v19 = (2 * v13) | 1;
      if ((v19 & 1) == 0) {
        goto LABEL_26;
      }
    }

    uint64_t v27 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v28 = swift_unknownObjectRetain_n(v17, 2LL);
    uint64_t v29 = (void *)swift_dynamicCastClass(v28, v27);
    if (!v29)
    {
      swift_unknownObjectRelease(v17, v30);
      uint64_t v29 = _swiftEmptyArrayStorage;
    }

    uint64_t v31 = v29[2];
    swift_release(v29);
    if (__OFSUB__(v19 >> 1, v14)) {
      goto LABEL_58;
    }
    if (v31 != (v19 >> 1) - v14)
    {
      swift_unknownObjectRelease(v17, v32);
LABEL_26:
      uint64_t v26 = sub_100051314(v17, v18, v14, v19);
      uint64_t v1 = v43;
      goto LABEL_33;
    }

    uint64_t v26 = (void *)swift_dynamicCastClass(v17, v27);
    uint64_t v1 = v43;
    if (!v26)
    {
      swift_unknownObjectRelease(v17, v25);
      uint64_t v26 = _swiftEmptyArrayStorage;
    }

uint64_t sub_10008BFAC()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

void *sub_10008C01C()
{
  uint64_t result = [v0 physicalFormat];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = type metadata accessor for AUAStreamFormat();
    uint64_t result = (void *)swift_dynamicCastClass(v2, v3);
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = OBJC_IVAR___AUAStreamFormat_altSetting;
      uint64_t v6 = *(void *)((char *)result + OBJC_IVAR___AUAStreamFormat_altSetting);
      if (!v6)
      {
        __break(1u);
        return result;
      }

      uint64_t v7 = *(void **)(v6 + 104);
      uint64_t v8 = (const IOUSBEndpointDescriptor *)v7[2];
      uint64_t v9 = v7[9];
      uint64_t v10 = v7[10];
      uint64_t v11 = v7[11];
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      int v12 = IOUSBGetEndpointSynchronizationType(v8);
      if (!v12) {
        int v12 = IOUSBGetEndpointDirection(v8);
      }
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v9);
      if (v12 == 1)
      {
        uint64_t v13 = *(void *)((char *)v4 + v5);
        swift_retain(v13);

        if (!v13) {
          return 0LL;
        }
        uint64_t v2 = *(void **)(v13 + 112);
        swift_retain(v2);
        swift_release(v13);
        if (!v2) {
          return 0LL;
        }
        uint64_t v14 = v2[13];
        swift_release(v2);
        uint64_t result = (void *)(v14 - 1);
        if (v14) {
          return result;
        }
        __break(1u);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_10008C150()
{
  return sub_10008CA8C( (uint64_t)&OBJC_IVAR___AUAStream_signpostID,  "AUAOutputStream_startDirectionalStream",  (uint64_t (*)(uint64_t))sub_10008C16C);
}

uint64_t sub_10008C16C(char *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(*(void *)&a1[OBJC_IVAR___AUAStream_interface] + 104LL);
  uint64_t v3 = swift_allocObject(&unk_1001063C0, 24LL, 7LL);
  *(void *)(v3 + 16) = v1;
  uint64_t v4 = swift_allocObject(&unk_1001063E8, 32LL, 7LL);
  *(void *)(v4 + 16) = sub_10008EBEC;
  *(void *)(v4 + 24) = v3;
  v10[4] = sub_100017218;
  uint64_t v11 = v4;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  void v10[2] = sub_1000888BC;
  v10[3] = &unk_100106400;
  uint64_t v5 = _Block_copy(v10);
  uint64_t v6 = v11;
  uint64_t v7 = v2;
  id v8 = v1;
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v7, v5);

  _Block_release(v5);
  LOBYTE(vHasher._combine(_:)(v0 & 1) = swift_isEscapingClosureAtFileLocation(v4, "", 85LL, 1293LL, 13LL, 1LL);
  swift_release(v3);
  uint64_t result = swift_release(v4);
  return result;
}

uint64_t sub_10008C2B8(char *a1)
{
  uint64_t v2 = *(void *)&a1[OBJC_IVAR___AUAOutputStream_explicitFeedback];
  if (v2)
  {
    swift_retain(*(void *)&a1[OBJC_IVAR___AUAOutputStream_explicitFeedback]);
    sub_10008AA14();
    swift_release(v2);
  }

  uint64_t v3 = swift_allocObject(&unk_100106438, 24LL, 7LL);
  swift_unknownObjectWeakInit(v3 + 16, a1);
  sub_10008EC40(a1, v3);
  return swift_release(v3);
}

void sub_10008C32C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OSSignposter(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [v2 physicalFormat];
  if (!v11) {
    goto LABEL_10;
  }
  int v12 = v11;
  uint64_t v50 = v1;
  uint64_t v13 = type metadata accessor for AUAStreamFormat();
  uint64_t v14 = swift_dynamicCastClass(v12, v13);
  if (!v14)
  {

LABEL_10:
    unint64_t v31 = sub_10000AE14();
    uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
    *(_BYTE *)uint64_t v33 = 1;
    *(void *)(v33 + 8) = 0LL;
    *(void *)(v33 + 16) = 0xE000000000000000LL;
    *(void *)(v33 + 24) = 0x5365726170657270LL;
    *(void *)(v33 + 32) = 0xEF29286D61657274LL;
    *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v33 + 48) = 0x80000001000D0AD0LL;
    *(void *)(v33 + 56) = 1306LL;
    swift_willThrow(v32);
    return;
  }

  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 + OBJC_IVAR___AUAStreamFormat_altSetting);
  if (!v16)
  {
    unint64_t v34 = sub_10000AE14();
    uint64_t v35 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
    *(_BYTE *)uint64_t v36 = 74;
    *(void *)(v36 + 8) = 0LL;
    *(void *)(v36 + 16) = 0xE000000000000000LL;
    *(void *)(v36 + 24) = 0x5365726170657270LL;
    *(void *)(v36 + 32) = 0xEF29286D61657274LL;
    *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v36 + 48) = 0x80000001000D0AD0LL;
    uint64_t v37 = 1307LL;
LABEL_13:
    *(void *)(v36 + 56) = v37;
    swift_willThrow(v35);

    return;
  }

  if (!*(void *)(*(void *)&v2[OBJC_IVAR___AUAStream_interface] + 112LL))
  {
    unint64_t v38 = sub_10000AE14();
    uint64_t v35 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
    *(_BYTE *)uint64_t v36 = 1;
    *(void *)(v36 + 8) = 0LL;
    *(void *)(v36 + 16) = 0xE000000000000000LL;
    *(void *)(v36 + 24) = 0x5365726170657270LL;
    *(void *)(v36 + 32) = 0xEF29286D61657274LL;
    *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
    *(void *)(v36 + 48) = 0x80000001000D0AD0LL;
    uint64_t v37 = 1308LL;
    goto LABEL_13;
  }

  uint64_t v17 = qword_100112910;
  uint64_t v18 = *(void *)(v14 + OBJC_IVAR___AUAStreamFormat_altSetting);
  uint64_t v48 = v16;
  swift_retain(v18);
  if (v17 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v19 = sub_100008EC4(v7, (uint64_t)qword_100117220);
  uint64_t v47 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, &v2[OBJC_IVAR___AUAStream_signpostID], v3);
  uint64_t v20 = v48;
  swift_retain(v48);
  uint64_t v49 = v3;
  __n128 v21 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
  uint64_t v46 = v7;
  uint64_t v22 = v21;
  *(_DWORD *)__n128 v21 = 16777472;
  char v51 = *(_BYTE *)(*(void *)(v20 + 16) + 3LL);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4, v21 + 5);
  uint64_t v23 = swift_release(v20);
  uint64_t v24 = OSSignposter.logHandle.getter(v23);
  unint64_t v44 = v10;
  uint64_t v25 = (os_log_s *)v24;
  uint64_t v26 = static os_signpost_type_t.begin.getter();
  uint64_t v45 = v4;
  os_signpost_type_t v27 = v26;
  os_signpost_id_t v28 = OSSignpostID.rawValue.getter(v26);
  unint64_t v43 = v22;
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  v27,  v28,  "AUAOuputStream_prepareStream",  "alternate %hhu",  v22,  5u);
  uint64_t v29 = v50;
  sub_10008C7BC(v2, v20, v15);
  if (v29)
  {

    swift_release(v20);
  }

  else
  {
    uint64_t v39 = static os_signpost_type_t.end.getter(v30);
    os_signpost_type_t v40 = v39;
    os_signpost_id_t v41 = OSSignpostID.rawValue.getter(v39);
    uint64_t v42 = v43;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  v40,  v41,  "AUAOuputStream_prepareStream",  "alternate %hhu",  v43,  5u);

    swift_slowDealloc(v42, -1LL, -1LL);
    swift_release(v20);
  }

  (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v49);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
}

void sub_10008C7BC(char *a1, uint64_t a2, uint64_t a3)
{
  if (!v3)
  {
    uint64_t v7 = &a1[OBJC_IVAR___AUAStream_audioDevice];
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(&a1[OBJC_IVAR___AUAStream_audioDevice]);
    if (Strong)
    {
      uint64_t v9 = (void *)Strong;
      uint64_t v10 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_sampleManager);
      swift_retain(v10);

      if (v10)
      {
        sub_10000BA5C(a1, *(void *)(a2 + 104));
        swift_release(v10);
      }
    }

    id v11 = *(void **)(a2 + 104);
    int v12 = (const IOUSBEndpointDescriptor *)v11[2];
    uint64_t v13 = v11[9];
    uint64_t v14 = v11[10];
    uint64_t v15 = v11[11];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    int v16 = IOUSBGetEndpointSynchronizationType(v12);
    if (!v16) {
      int v16 = IOUSBGetEndpointDirection(v12);
    }
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v13);
    if (v16 == 1)
    {
      uint64_t v17 = swift_unknownObjectWeakLoadStrong(v7);
      if (v17)
      {
        uint64_t v18 = (void *)v17;
        Swift::Bool v19 = AUAAudioDevice.hasImplicitFeedbackStream()();

        if (!v19)
        {
          uint64_t v20 = *(void *)(a3 + OBJC_IVAR___AUAStreamFormat_altSetting);
          if (v20 && *(void *)(v20 + 112))
          {
            uint64_t v21 = type metadata accessor for AUAOutputExplicitFeedbackStream(0LL);
            uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
            uint64_t v23 = a1;
            sub_1000898E4(v23);
            uint64_t v24 = *(void *)&v23[OBJC_IVAR___AUAOutputStream_explicitFeedback];
            *(void *)&v23[OBJC_IVAR___AUAOutputStream_explicitFeedback] = v22;
            swift_release(v24);
          }

          else
          {
            sub_100029840( 0xD000000000000036LL,  0x80000001000D1100LL,  0x5365726170657270LL,  (void *)0xEF29286D61657274LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  1321LL);
          }
        }
      }

      else
      {
        __break(1u);
      }
    }
  }

char *sub_10008CA2C(char *result, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = *(void *)&result[*a3];
  BOOL v5 = __CFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    *(void *)&result[*a3] = v6;
    if (v6 == 1)
    {
      v7.receiver = result;
      v7.super_class = (Class)a4(0LL);
      return (char *)objc_msgSendSuper2(&v7, "startStream");
    }
  }

  return result;
}

uint64_t sub_10008CA8C(uint64_t a1, const char *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v21 = a3;
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for OSSignposter(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  objc_super v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v8 = sub_100008EC4(v4, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v9 = 0;
  uint64_t v10 = (os_log_s *)OSSignposter.logHandle.getter(v9);
  uint64_t v11 = static os_signpost_type_t.begin.getter();
  os_signpost_type_t v12 = v11;
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter(v11);
  uint64_t v14 = v22;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v12, v13, v22, "", v9, 2u);
  uint64_t v15 = v21(v3);
  uint64_t v16 = static os_signpost_type_t.end.getter(v15);
  os_signpost_type_t v17 = v16;
  os_signpost_id_t v18 = OSSignpostID.rawValue.getter(v16);
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v17, v18, v14, "", v9, 2u);

  swift_slowDealloc(v9, -1LL, -1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *sub_10008CC30(char *result)
{
  uint64_t v1 = *(void *)&result[OBJC_IVAR___AUAOutputStream_startCount];
  BOOL v2 = v1 != 0;
  uint64_t v3 = v1 - 1;
  if (v2)
  {
    uint64_t v4 = result;
    *(void *)&result[OBJC_IVAR___AUAOutputStream_startCount] = v3;
    if (!v3)
    {
      v10.receiver = result;
      v10.super_class = (Class)type metadata accessor for AUAOutputStream(0LL);
      objc_msgSendSuper2(&v10, "stopStream");
      uint64_t v5 = OBJC_IVAR___AUAOutputStream_explicitFeedback;
      uint64_t v6 = *(void *)&v4[OBJC_IVAR___AUAOutputStream_explicitFeedback];
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = *(void *)(v7 + 120);
        if (v8)
        {
          swift_retain(*(void *)&v4[OBJC_IVAR___AUAOutputStream_explicitFeedback]);
          swift_retain(v8);
          sub_1000C7514();
          swift_release(v8);
          uint64_t v9 = *(void *)(v7 + 120);
          *(void *)(v7 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0LL;
          swift_release(v6);
          swift_release(v9);
          uint64_t v6 = *(void *)&v4[v5];
        }
      }

      *(void *)&v4[v5] = 0LL;
      return (char *)swift_release(v6);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10008CD58()
{
  return swift_release(*(void *)(v0 + OBJC_IVAR___AUAOutputStream_explicitFeedback));
}

id sub_10008CD68()
{
  return sub_10001642C(0LL, (uint64_t (*)(void))type metadata accessor for AUAOutputStream);
}

uint64_t sub_10008CD88(char a1)
{
  uint64_t v18 = 0xD000000000000017LL;
  uint64_t v19 = 0x80000001000D10C0LL;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1702195828LL;
  }
  else {
    uint64_t v3 = 0x65736C6166LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._countAndFlagsBits = 0x65727473206E6F20LL;
  v6._object = (void *)0xEB00000000206D61LL;
  String.append(_:)(v6);
  id v7 = [*(id *)(v1 + OBJC_IVAR____TtC9AUASDCore13AUATapControl_stream) streamName];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  v17[0] = v9;
  v17[1] = v11;
  uint64_t v12 = sub_100008E00(&qword_100113B18);
  v13._countAndFlagsBits = String.init<A>(describing:)(v17, v12);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  uint64_t v15 = v19;
  sub_100029834( v18,  v19,  0x615665676E616863LL,  (void *)0xEF293A5F2865756CLL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  1388LL);
  swift_bridgeObjectRelease(v15);
  return 1LL;
}

id sub_10008CF80(uint64_t a1)
{
  return sub_10001642C(a1, type metadata accessor for AUATapControl);
}

uint64_t type metadata accessor for AUAStream(uint64_t a1)
{
  return sub_10001736C(a1, (uint64_t *)&unk_100115728, (uint64_t)&nominal type descriptor for AUAStream);
}

uint64_t sub_10008CFB0(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *BOOL v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *BOOL v2 = result;
  return result;
}

void *sub_10008D06C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (_OWORD *)(swift_bridgeObjectRetain(a1) + 40);
  Swift::String v6 = _swiftEmptyArrayStorage;
  do
  {
    if (*((void *)v5 - 1) == a2)
    {
      __int128 v11 = *v5;
      swift_retain(a2);
      swift_retain(v11);
      swift_bridgeObjectRetain(*((void *)&v11 + 1));
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        Swift::String v6 = sub_10004F1C4(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v9 = v6[2];
      unint64_t v8 = v6[3];
      if (v9 >= v8 >> 1) {
        Swift::String v6 = sub_10004F1C4((void *)(v8 > 1), v9 + 1, 1, v6);
      }
      v6[2] = v9 + 1;
      uint64_t v7 = &v6[3 * v9];
      v7[4] = a2;
      *(_OWORD *)(v7 + 5) = v11;
    }

    uint64_t v5 = (_OWORD *)((char *)v5 + 24);
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_10008D1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (!a4) {
    return 0LL;
  }
  uint64_t ObjectType = swift_getObjectType(a4);
  Swift::String v13 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 24);
  swift_unknownObjectRetain(a4);
  uint64_t v14 = v13(ObjectType, a5);
  uint64_t v15 = *(void *)(*(void *)(v14 + 152) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (v15 && sub_10001645C(22LL, v15))
  {
    swift_unknownObjectRelease(a4, v16);
    swift_release(v14);
    return 0LL;
  }

  int v17 = *(unsigned __int8 *)(v14 + 49);
  swift_release(v14);
  if (v17 != 1)
  {
LABEL_9:
    swift_unknownObjectRelease(a4, v18);
    return 0LL;
  }

  swift_retain(a2);
  uint64_t v19 = sub_1000821C0( (uint64_t (*)(void))type metadata accessor for ActiveInputTerminal,  (uint64_t)&protocol witness table for ActiveInputTerminal);
  if (v6)
  {
    swift_release(a2);
    uint64_t v35 = 0LL;
    uint64_t v36 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    v21._countAndFlagsBits = 0xD00000000000001FLL;
    v21._object = (void *)0x80000001000D19E0LL;
    String.append(_:)(v21);
    uint64_t v34 = v6;
    uint64_t v22 = sub_100008E00(&qword_100113400);
    _print_unlocked<A, B>(_:_:)( &v34,  &v35,  v22,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v23 = v36;
    sub_100029840( v35,  v36,  0xD00000000000001CLL,  (void *)0x80000001000D1A00LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  213LL);
    swift_errorRelease(v6);
    swift_bridgeObjectRelease(v23);
    goto LABEL_9;
  }

  uint64_t v20 = v19;
  swift_release(a2);
  swift_retain(a1);
  uint64_t v26 = sub_1000821C0( (uint64_t (*)(void))type metadata accessor for ActiveOutputTerminal,  (uint64_t)&protocol witness table for ActiveOutputTerminal);
  uint64_t result = swift_release(a1);
  uint64_t v24 = v20 + v26;
  if (!__OFADD__(v20, v26))
  {
    uint64_t v28 = *(void *)(a3 + 16);
    if (!v28)
    {
      swift_unknownObjectRelease(a4, v27);
      return v24;
    }

    uint64_t v29 = (void *)(a3 + 32);
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      uint64_t v30 = v29[3];
      uint64_t v31 = v29[4];
      sub_1000178EC(v29, v30);
      uint64_t result = sub_10004C5E8(v30, *(void *)(v31 + 8));
      BOOL v33 = __OFADD__(v24, result);
      v24 += result;
      if (v33) {
        break;
      }
      v29 += 5;
      if (!--v28)
      {
        swift_unknownObjectRelease(a4, v32);
        swift_bridgeObjectRelease(a3);
        return v24;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_10008D460( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v35 = a8;
  os_signpost_id_t v41 = (void *)a6;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  unsigned int v39 = a2;
  uint64_t v13 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v9[OBJC_IVAR___AUAStream_streamingEndpoint] = 0LL;
  *(void *)&v9[OBJC_IVAR___AUAStream_transferManager] = 0LL;
  uint64_t v17 = swift_unknownObjectWeakInit(&v9[OBJC_IVAR___AUAStream_audioDevice], 0LL);
  *(_DWORD *)&v9[OBJC_IVAR___AUAStream_controlScope] = 1735159650;
  id v38 = a9;
  swift_unknownObjectWeakAssign(v17, a9);
  *(void *)&v9[OBJC_IVAR___AUAStream_interface] = a1;
  *(void *)&v9[OBJC_IVAR___AUAStream_firstTimeStampUSBFrame] = 0LL;
  v9[OBJC_IVAR___AUAStream_needFirstTimeStamp] = 0;
  *(void *)&v9[OBJC_IVAR___AUAStream_lastIOTimeNS] = 0LL;
  *(void *)&v9[OBJC_IVAR___AUAStream_sampleTime] = 0LL;
  *(void *)&v9[OBJC_IVAR___AUAStream_hostTime] = 0LL;
  *(void *)&v9[OBJC_IVAR___AUAStream_timeStampSeed] = 0LL;
  v9[OBJC_IVAR___AUAStream_started] = 0;
  uint64_t v18 = qword_100112910;
  uint64_t v19 = v9;
  swift_retain(a1);
  if (v18 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v20 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v20, (uint64_t)qword_100117220);
  uint64_t v21 = OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)(v21);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v19[OBJC_IVAR___AUAStream_signpostID], v16, v13);
  uint64_t v22 = &v19[OBJC_IVAR___AUAStream_path];
  uint64_t v24 = v36;
  uint64_t v23 = v37;
  *(void *)uint64_t v22 = a3;
  *((void *)v22 + Hasher._combine(_:)(v0 & 1) = v24;
  *((void *)v22 + 2) = v23;
  *(void *)&v19[OBJC_IVAR___AUAStream_latencyInMs] = v35;
  uint64_t v25 = v41;
  sub_100017910((uint64_t)v41, (uint64_t)&v19[OBJC_IVAR___AUAStream_streamingTerminal]);
  sub_100017910((uint64_t)a7, (uint64_t)&v19[OBJC_IVAR___AUAStream_otherTerminal]);
  swift_retain(a3);
  swift_retain(v24);
  swift_bridgeObjectRetain(v23);

  id v26 = [v38 plugin];
  uint64_t v27 = (objc_class *)type metadata accessor for AUAStream(0LL);
  v40.receiver = v19;
  v40.super_class = v27;
  id v28 = objc_msgSendSuper2(&v40, "initWithDirection:withPlugin:", v39, v26);

  if (v28)
  {
    uint64_t v29 = *(void *)(a1 + 96);
    id v30 = v28;
    if (v29)
    {
      swift_bridgeObjectRetain(v29);
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
    }

    else
    {
      NSString v31 = 0LL;
    }

    [v28 setStreamName:v31];

    [v28 setStartingChannel:1];
    uint64_t v32 = a7[3];
    sub_1000178EC(a7, v32);
    id v33 = v28;
    [v33 setTerminalType:sub_1000905D0(v32)];

    sub_100017A40(v25);
    sub_100017A40(a7);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10008D7B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  *(void *)&v8[OBJC_IVAR___AUAInputStream_startCount] = 0LL;
  uint64_t v14 = OBJC_IVAR___AUAInputStream_lockDelayBuffer;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayBuffer] = 0LL;
  uint64_t v15 = OBJC_IVAR___AUAInputStream_lockDelayTransactionList;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayTransactionList] = 0LL;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_initialFeedbackMS] = 0LL;
  *(void *)&v8[OBJC_IVAR___AUAInputStream_lockDelayTransfers] = 0LL;
  uint64_t v16 = *(void **)&v8[v14];
  *(void *)&v8[v14] = 0LL;
  uint64_t v17 = v8;

  uint64_t v18 = *(void **)&v8[v15];
  *(void *)&v8[v15] = 0LL;

  v28[3] = type metadata accessor for ActiveOutputTerminal();
  v28[4] = &protocol witness table for ActiveOutputTerminal;
  v28[0] = a5;
  v27[3] = type metadata accessor for ActiveInputTerminal();
  v27[4] = &protocol witness table for ActiveInputTerminal;
  v27[0] = a6;
  uint64_t v19 = v28[6];
  sub_10008D460(a1, 0x696E7074u, a2, a3, a4, (uint64_t)v28, v27, a7, a8);
  uint64_t v21 = v20;
  if (!v19)
  {
    uint64_t v22 = (_DWORD *)(v20 + OBJC_IVAR___AUAStream_controlScope);
    swift_beginAccess(v20 + OBJC_IVAR___AUAStream_controlScope, v28, 1LL, 0LL);
    *uint64_t v22 = 1768845428;
  }

  return v21;
}

void *sub_10008D910(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = swift_bridgeObjectRetain(a1);
  unint64_t v4 = (uint64_t *)(v12 + 48);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if (*(v4 - 1) == a2)
    {
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *v4;
      swift_retain(v7);
      swift_retain(a2);
      swift_bridgeObjectRetain(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
        uint64_t v5 = sub_10004F1C4(0LL, v5[2] + 1LL, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = sub_10004F1C4((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      v5[2] = v10 + 1;
      uint64_t v6 = &v5[3 * v10];
      v6[4] = v7;
      v6[5] = a2;
      v6[6] = v8;
    }

    v4 += 3;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v12);
  return v5;
}

uint64_t sub_10008DA3C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = a1 + 2;
  swift_beginAccess(a1 + 2, v73, 0LL, 0LL);
  uint64_t v7 = a1[2];
  if (!v7)
  {
    id v76 = 0LL;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
LABEL_12:
    uint64_t result = sub_1000178B0((uint64_t)&v74, &qword_100114528);
    goto LABEL_13;
  }

  uint64_t v8 = a1[3];
  uint64_t v9 = a1[9];
  if ((v9 & 0xC000000000000001LL) != 0)
  {
    swift_unknownObjectRetain(a1[2]);
    uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
  }

  else
  {
    if (!*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_36:
      swift_unknownObjectRetain(v7);
      uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v9);
LABEL_17:
      uint64_t ObjectType = swift_getObjectType(v7);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v8 + 168))(&v74, v32, ObjectType, v8);
      swift_release(v32);
      swift_unknownObjectRelease(v7, v34);
      if (*((void *)&v75 + 1))
      {
        uint64_t v7 = sub_100008E00(&qword_100114530);
        uint64_t active = type metadata accessor for ActiveInputTerminal();
        if ((swift_dynamicCast(v72, &v74, v7, active, 6LL) & 1) != 0)
        {
          uint64_t v16 = v72[0];
          uint64_t v7 = *v6;
          if (*v6)
          {
            uint64_t v36 = a1[3];
            uint64_t v37 = swift_getObjectType(v7);
            id v38 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 56);
            swift_unknownObjectRetain(v7);
            uint64_t v39 = v38(v37, v36);
            swift_unknownObjectRelease(v7, v40);
            swift_retain(v16);
            uint64_t v41 = v3;
            uint64_t v42 = sub_10008D910(v39, v16);
            uint64_t v7 = v41;
            swift_bridgeObjectRelease(v39);
            swift_release(v16);
            if (v42[2])
            {
              uint64_t v77 = v41;
              uint64_t v7 = v42[4];
              uint64_t v43 = v42[5];
              uint64_t v44 = v42[6];
              swift_retain(v7);
              swift_retain(v43);
              swift_bridgeObjectRetain(v44);
              swift_bridgeObjectRelease(v42);
              uint64_t v46 = a1[2];
              uint64_t v45 = a1[3];
              swift_unknownObjectRetain(v46);
              uint64_t v47 = swift_retain(v7);
              uint64_t v71 = v7;
              uint64_t v48 = v45;
              uint64_t v49 = v77;
              uint64_t v50 = sub_10008D1A4(v47, v43, v44, v46, v48);
              if (v49)
              {
                swift_release(v16);
                swift_bridgeObjectRelease(v44);
                swift_release(v43);
                swift_release_n(v7, 2LL);
                swift_unknownObjectRelease(v46, v52);
              }

              else
              {
                uint64_t v66 = v50;
                swift_unknownObjectRelease(v46, v51);
                uint64_t v67 = (char *)objc_allocWithZone((Class)type metadata accessor for AUAOutputStream(0LL));
                *(void *)&v67[OBJC_IVAR___AUAOutputStream_startCount] = 0LL;
                *(void *)&v67[OBJC_IVAR___AUAOutputStream_explicitFeedback] = 0LL;
                *((void *)&v75 + Hasher._combine(_:)(v0 & 1) = active;
                id v76 = &protocol witness table for ActiveInputTerminal;
                *(void *)&__int128 v74 = v16;
                v72[3] = type metadata accessor for ActiveOutputTerminal();
                v72[4] = &protocol witness table for ActiveOutputTerminal;
                v72[0] = v71;
                id v68 = a2;
                swift_retain(a1);
                swift_retain(v71);
                swift_retain(v43);
                swift_bridgeObjectRetain(v44);
                sub_10008D460((uint64_t)a1, 0x6F757470u, v71, v43, v44, (uint64_t)&v74, v72, v66, v68);
                uint64_t v7 = v69;
                swift_release(a1);
                swift_bridgeObjectRelease(v44);
                swift_release(v43);
                swift_release(v71);

                uint64_t v70 = (_DWORD *)(v7 + OBJC_IVAR___AUAStream_controlScope);
                swift_beginAccess(v7 + OBJC_IVAR___AUAStream_controlScope, &v74, 1LL, 0LL);
                *uint64_t v70 = 1869968496;
                swift_bridgeObjectRelease(v44);
                swift_release(v43);
                swift_release(v71);
              }

              return v7;
            }

            swift_bridgeObjectRelease(v42);
            unint64_t v62 = sub_10000AE14();
            uint64_t v57 = swift_allocError(&type metadata for AUAError, v62, 0LL, 0LL);
            *(_BYTE *)uint64_t v58 = 93;
            *(void *)(v58 + 8) = 0LL;
            *(void *)(v58 + 16) = 0xE000000000000000LL;
            *(void *)(v58 + 24) = 0xD00000000000001FLL;
            *(void *)(v58 + 32) = 0x80000001000D19C0LL;
            *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
            *(void *)(v58 + 48) = 0x80000001000D0AD0LL;
            uint64_t v59 = 245LL;
          }

          else
          {
            unint64_t v60 = sub_10000AE14();
            uint64_t v57 = swift_allocError(&type metadata for AUAError, v60, 0LL, 0LL);
            *(_BYTE *)uint64_t v58 = 93;
            *(void *)(v58 + 8) = 0LL;
            *(void *)(v58 + 16) = 0xE000000000000000LL;
            *(void *)(v58 + 24) = 0xD00000000000001FLL;
            *(void *)(v58 + 32) = 0x80000001000D19C0LL;
            *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000016LL;
            *(void *)(v58 + 48) = 0x80000001000D0AD0LL;
            uint64_t v59 = 256LL;
          }

char *sub_10008E2F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      uint64_t v8 = (a1 & 0xC000000000000001LL) != 0
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      if ([v8 isEqual:a2]
        && *(void *)&v9[OBJC_IVAR___AUAStreamFormat_rateRange] <= a3
        && *(void *)&v9[OBJC_IVAR___AUAStreamFormat_rateRange + 8] >= a3)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_15:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

id sub_10008E440(uint64_t a1, void *a2)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(a1);
    return 0LL;
  }

uint64_t sub_10008E550()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10008E584()
{
  return sub_10008618C(*(char **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

unint64_t sub_10008E594()
{
  unint64_t result = qword_1001156B0;
  if (!qword_1001156B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AsyncFeedbackType,  &type metadata for AsyncFeedbackType);
    atomic_store(result, (unint64_t *)&qword_1001156B0);
  }

  return result;
}

unint64_t destroy for AsyncFeedbackType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s9AUASDCore17AsyncFeedbackTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for AsyncFeedbackType(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for AsyncFeedbackType(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncFeedbackType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AsyncFeedbackType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }

  return result;
}

void *sub_10008E7E8(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for AsyncFeedbackType()
{
  return &type metadata for AsyncFeedbackType;
}

uint64_t sub_10008E818()
{
  return type metadata accessor for AUAStream(0LL);
}

uint64_t sub_10008E820(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_1000D8578;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_1000D8578;
  void v4[9] = &unk_1000D8590;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[11] = *(void *)(result - 8) + 64LL;
    v4[12] = &unk_1000D85A8;
    v4[13] = &unk_1000D85C0;
    v4[14] = &unk_1000D85C0;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = (char *)&value witness table for Builtin.Int32 + 64;
    return swift_updateClassMetadata2(a1, 256LL, 17LL, v4, a1 + 80);
  }

  return result;
}

uint64_t sub_10008E8F4()
{
  return type metadata accessor for AUAInputStream(0LL);
}

uint64_t type metadata accessor for AUAInputStream(uint64_t a1)
{
  return sub_10001736C(a1, (uint64_t *)&unk_100115788, (uint64_t)&nominal type descriptor for AUAInputStream);
}

uint64_t sub_10008E910(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = "\b";
  v2[4] = "\b";
  return swift_updateClassMetadata2(a1, 256LL, 5LL, v2, a1 + 624);
}

uint64_t type metadata accessor for AUAFeedbackTransferBlock()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore24AUAFeedbackTransferBlock);
}

uint64_t sub_10008E984()
{
  return type metadata accessor for AUAOutputExplicitFeedbackStream(0LL);
}

uint64_t type metadata accessor for AUAOutputExplicitFeedbackStream(uint64_t a1)
{
  return sub_10001736C(a1, qword_1001158C0, (uint64_t)&nominal type descriptor for AUAOutputExplicitFeedbackStream);
}

uint64_t sub_10008E9A0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[5] = &unk_1000D8590;
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[6] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10008EA50()
{
  return type metadata accessor for AUAOutputStream(0LL);
}

uint64_t type metadata accessor for AUAOutputStream(uint64_t a1)
{
  return sub_10001736C(a1, (uint64_t *)&unk_100115A30, (uint64_t)&nominal type descriptor for AUAOutputStream);
}

uint64_t sub_10008EA6C(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = "\b";
  return swift_updateClassMetadata2(a1, 256LL, 2LL, v2, a1 + 624);
}

uint64_t type metadata accessor for AUATapControl()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore13AUATapControl);
}

uint64_t storeEnumTagSinglePayload for AUAFeedbackTransferBlock.FeedbackPacketSize( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10008EB24 + 4 * byte_1000D84C5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10008EB58 + 4 * byte_1000D84C0[v4]))();
}

uint64_t sub_10008EB58(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10008EB60(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10008EB68LL);
  }
  return result;
}

uint64_t sub_10008EB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008EB7CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10008EB80(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10008EB88(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAFeedbackTransferBlock.FeedbackPacketSize()
{
  return &type metadata for AUAFeedbackTransferBlock.FeedbackPacketSize;
}

unint64_t sub_10008EBA8()
{
  unint64_t result = qword_100115A70;
  if (!qword_100115A70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D873C, &type metadata for AUAFeedbackTransferBlock.FeedbackPacketSize);
    atomic_store(result, (unint64_t *)&qword_100115A70);
  }

  return result;
}

uint64_t sub_10008EBEC()
{
  return sub_10008C2B8(*(char **)(v0 + 16));
}

uint64_t sub_10008EBF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008EC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10008EC14(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10008EC1C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10008EC40(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = qword_100112910;
  uint64_t v13 = a2;
  swift_retain(a2);
  if (v12 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v14 = sub_100008EC4(v8, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)a1 + OBJC_IVAR___AUAStream_signpostID, v4);
  id v15 = a1;
  uint64_t v16 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
  uint64_t v32 = v5;
  uint64_t v17 = v16;
  *(_DWORD *)uint64_t v16 = 67109120;
  uint64_t v18 = v16 + 8;
  BOOL v33 = [v15 direction] == 1768845428;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 4, v18);

  uint64_t v20 = OSSignposter.logHandle.getter(v19);
  uint64_t v31 = v8;
  uint64_t v21 = (os_log_s *)v20;
  uint64_t v22 = static os_signpost_type_t.begin.getter();
  uint64_t v30 = v9;
  os_signpost_type_t v23 = v22;
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter(v22);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  v23,  v24,  "AUAStream_enqueueNextTransfer",  "isInput %{BOOL}d",  v17,  8u);
  swift_retain(v13);
  uint64_t v25 = sub_10008423C((char *)v15, v13);
  uint64_t v26 = static os_signpost_type_t.end.getter(v25);
  LOBYTE(v15) = v26;
  os_signpost_id_t v27 = OSSignpostID.rawValue.getter(v26);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  (os_signpost_type_t)v15,  v27,  "AUAStream_enqueueNextTransfer",  "isInput %{BOOL}d",  v17,  8u);

  swift_slowDealloc(v17, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  return swift_release(v13);
}

uint64_t sub_10008EEC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10008EEE8(uint64_t a1, uint64_t a2)
{
  return sub_100084EE0(a1, a2);
}

uint64_t sub_10008EF08()
{
  if (v0[2]) {
    swift_release(v0[3]);
  }
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_10008EF3C(uint64_t a1, uint64_t a2)
{
  return sub_1000C77CC( a1,  a2,  *(void (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32));
}

void sub_10008EF4C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v77[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  id v15 = &v77[-v14];
  uint64_t v16 = mach_absolute_time();
  if (qword_100112948 != -1) {
    swift_once(&qword_100112948, sub_1000CA978);
  }
  if ((_DWORD)qword_1001172D0 != HIDWORD(qword_1001172D0))
  {
    if (!is_mul_ok(v16, qword_1001172D0))
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }

    if (!HIDWORD(qword_1001172D0))
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    uint64_t v16 = v16 * qword_1001172D0 / HIDWORD(qword_1001172D0);
  }

  os_signpost_id_t v84 = v13;
  uint64_t v85 = v10;
  uint64_t v88 = a4;
  uint64_t v17 = *(void *)&a3[OBJC_IVAR___AUAStream_transferManager];
  if (!v17)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  unint64_t v18 = (*(uint64_t (**)(void))(*(void *)v17 + 80LL))();
  uint64_t v4 = OBJC_IVAR___AUAStream_lastIOTimeNS;
  uint64_t v19 = *(void *)&a3[OBJC_IVAR___AUAStream_lastIOTimeNS];
  os_signpost_type_t v87 = &a3[OBJC_IVAR___AUAStream_audioDevice];
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(&a3[OBJC_IVAR___AUAStream_audioDevice]);
  if (!Strong)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }

  uint64_t v10 = Strong;
  uint64_t v86 = v4;
  if (!v19)
  {

    uint64_t v39 = v87;
    goto LABEL_23;
  }

  if (v16 < v19)
  {
    __break(1u);
    goto LABEL_51;
  }

  if (v18 >> 61)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v83 = a2;
  unint64_t v21 = (v16 - v19) / 0xF4240;
  a2 = 8 * v18;
  if (v21 > (8 * v18) >> 1)
  {
    uint64_t v4 = v9;
    unsigned int v82 = a1;
    uint64_t v90 = 0LL;
    uint64_t v91 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease(v91);
    uint64_t v90 = 0xD000000000000020LL;
    uint64_t v91 = 0x80000001000D18A0LL;
    uint64_t v81 = v21;
    uint64_t v89 = v21;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v24._countAndFlagsBits = 0x687365726874202CLL;
    v24._object = (void *)0xEC00000020646C6FLL;
    String.append(_:)(v24);
    uint64_t v89 = 8 * v18;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    uint64_t v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = v91;
    unint64_t v80 = (unint64_t)"Delays timeDiff ";
    unint64_t v79 = (unint64_t)"changePhysicalFormat(_:)";
    sub_100029834( v90,  v91,  0xD000000000000048LL,  (void *)0x80000001000D18D0LL,  0xD000000000000016LL,  0x80000001000D0AD0LL,  653LL);
    swift_bridgeObjectRelease(v27);
    if (qword_100112910 == -1)
    {
LABEL_14:
      unint64_t v28 = a2;
      uint64_t v29 = type metadata accessor for OSSignposter(0LL);
      sub_100008EC4(v29, (uint64_t)qword_100117220);
      uint64_t v30 = v85;
      uint64_t v31 = (uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v85[2];
      uint64_t v32 = v31(v15, &a3[OBJC_IVAR___AUAStream_signpostID], v4);
      BOOL v33 = (os_log_s *)OSSignposter.logHandle.getter(v32);
      int v78 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v31(v84, v15, v4);
        uint64_t v34 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v34 = 134218240;
        unint64_t v35 = v81;
        uint64_t v90 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v34 + 4, v34 + 12);
        *(_WORD *)(v34 + 12) = 2048;
        uint64_t v90 = v28;
        uint64_t v36 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v34 + 14, v34 + 22);
        os_signpost_id_t v37 = OSSignpostID.rawValue.getter(v36);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  (os_signpost_type_t)v78,  v37,  "AUAStream_safeguardAgainstDelays",  "timeDiff %llu, threshold %lu",  (uint8_t *)v34,  0x16u);
        swift_slowDealloc(v34, -1LL, -1LL);

        id v38 = (void (*)(_BYTE *, uint64_t))v85[1];
        v38(v15, v4);
        v38(v84, v4);
        a1 = v82;
      }

      else
      {

        ((void (*)(_BYTE *, uint64_t))v30[1])(v15, v4);
        a1 = v82;
        unint64_t v35 = v81;
      }

      uint64_t v39 = v87;
      if (v28 < v35)
      {
        kdebug_trace(553910272LL, v35, v28, 0LL, 0LL);
        AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD000000000000048LL,  v80 | 0x8000000000000000LL,  0xD000000000000016LL,  v79 | 0x8000000000000000LL,  659LL,  (uint64_t)ClusterChannelInfo.chNum.getter,  0LL);
      }

      goto LABEL_22;
    }

LABEL_54:
    swift_once(&qword_100112910, sub_100082CB8);
    goto LABEL_14;
  }

  uint64_t v39 = v87;
LABEL_22:
  a2 = v83;
LABEL_23:
  uint64_t v40 = v88;
  *(void *)&a3[v86] = v16;
  uint64_t v41 = *(void *)(v40 + OBJC_IVAR___AUAStream_transferManager);
  if (!v41)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 112LL);
  swift_retain(*(void *)(v40 + OBJC_IVAR___AUAStream_transferManager));
  uint64_t v43 = v42(a2, a1);
  unint64_t v45 = v44;
  __int16 v47 = v46;
  swift_release(v41);
  uint64_t v48 = swift_unknownObjectWeakLoadStrong(v39);
  if (!v48)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  uint64_t v49 = (void *)v48;
  uint64_t v50 = *(void **)(v48 + OBJC_IVAR___AUAAudioDevice_timeStampStream);
  uint64_t v51 = v50;

  if (!v50) {
    goto LABEL_47;
  }

  if (v51 != a3) {
    goto LABEL_47;
  }
  uint64_t v52 = OBJC_IVAR___AUAStream_needFirstTimeStamp;
  if (a3[OBJC_IVAR___AUAStream_needFirstTimeStamp] == 1 && (v47 & 0x100) != 0)
  {
    uint64_t v53 = swift_unknownObjectWeakLoadStrong(v39);
    if (v53)
    {
      uint64_t v54 = (void *)v53;
      uint64_t v55 = (os_log_s *)[*(id *)(v53 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) timeforUSBFrame:*(void *)&a3[OBJC_IVAR___AUAStream_firstTimeStampUSBFrame]];

      uint64_t v56 = swift_unknownObjectWeakLoadStrong(v39);
      if (v56)
      {
        uint64_t v57 = (void *)v56;
        AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)( v55,  *(void *)&a3[OBJC_IVAR___AUAStream_timeStampSeed],  (uint64_t)a3,  0.0);

        a3[v52] = 0;
        goto LABEL_47;
      }

      goto LABEL_67;
    }

    id v64 = *(void *)(v49 + 80);
    if (!v64) {
      goto LABEL_66;
    }
LABEL_55:
    uint64_t v65 = *(void *)(v64 + 16);
    if (!v65) {
      goto LABEL_31;
    }
    id v66 = 0;
    uint64_t v67 = (unint64_t *)(v64 + 40);
    double v68 = 1LL;
    do
    {
      if (v66)
      {
        if (v65 == v68) {
          goto LABEL_66;
        }
        id v66 = 1;
      }

      else if (*(v67 - 1) <= a1)
      {
        id v66 = *v67 >= a1;
        if (v65 == v68)
        {
          if (*v67 >= a1)
          {
LABEL_66:
            double v69 = *(void *)(v49 + 96);
            double v70 = *(void *)(v49 + 104);
            if (!is_mul_ok(v70, v69)) {
              goto LABEL_98;
            }
            if (!(v70 * v69))
            {
              swift_bridgeObjectRelease(v108);
              swift_bridgeObjectRelease(v112);
              int v78 = sub_10000AE14();
              unint64_t v79 = swift_allocError(&type metadata for AUAError, v78, 0LL, 0LL);
              *(_BYTE *)unint64_t v80 = 0;
              *(void *)(v80 + 8) = 0LL;
              *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
              *(void *)(v80 + 24) = 0xD000000000000045LL;
              *(void *)(v80 + 32) = 0x80000001000D3670LL;
              *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000028LL;
              *(void *)(v80 + 48) = 0x80000001000D2560LL;
              *(void *)(v80 + 56) = 214LL;
              swift_willThrow(v79);
              swift_release(v52);
              return (void *)swift_release(v49);
            }

            unint64_t v71 = v52[16];
            if (v71)
            {
              BOOL v72 = *(void *)(v71 + 16);
              int v73 = v52[5];
              if ((v73 & 0x8000000000000000LL) != 0) {
                goto LABEL_109;
              }
            }

            else
            {
              BOOL v72 = 0LL;
              int v73 = v52[5];
              if ((v73 & 0x8000000000000000LL) != 0) {
                goto LABEL_109;
              }
            }

            if (HIDWORD(v73))
            {
LABEL_108:
              _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
            }

            else
            {
              uint64_t v74 = v72 * v73;
              if ((v74 & 0x8000000000000000LL) == 0)
              {
                if (!HIDWORD(v74))
                {
                  if (!v70) {
                    goto LABEL_100;
                  }
                  __int128 v75 = 0x3E8 / v70;
                  if (!is_mul_ok(v75, v69)) {
                    goto LABEL_101;
                  }
                  if (!((v75 * v69) >> 32)) {
                    __asm { BR              X12 }
                  }
                }

                goto LABEL_108;
              }

uint64_t sub_10008F70C(int a1)
{
  int v31 = a1;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OSSignposter(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100112910 != -1) {
    swift_once(&qword_100112910, sub_100082CB8);
  }
  uint64_t v10 = sub_100008EC4(v6, (uint64_t)qword_100117220);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v30 = v3;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v32 = v2;
  v11(v5, v1 + OBJC_IVAR____TtC9AUASDCore31AUAOutputExplicitFeedbackStream_signpostID, v2);
  uint64_t v29 = v1;
  uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v13 = swift_slowAlloc(32LL, -1LL);
  uint64_t v34 = v13;
  *(_DWORD *)uint64_t v12 = 136315138;
  uint64_t v14 = sub_100008E00(&qword_100113420);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(void *)(v15 + 56) = &type metadata for Int32;
  *(void *)(v15 + 64) = &protocol witness table for Int32;
  int v16 = v31;
  *(_DWORD *)(v15 + 32) = v31;
  uint64_t v17 = String.init(format:_:)(1478850608LL, 0xE400000000000000LL, v15);
  unint64_t v19 = v18;
  uint64_t v33 = sub_1000164BC(v17, v18, &v34);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v12 + 4, v12 + 12);
  uint64_t v20 = swift_bridgeObjectRelease(v19);
  unint64_t v21 = (os_log_s *)OSSignposter.logHandle.getter(v20);
  uint64_t v22 = static os_signpost_type_t.begin.getter();
  LOBYTE(v19) = v22;
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter(v22);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  (os_signpost_type_t)v19,  v23,  "AUAOutputExplicitFeedbackStream_isocFeedbackCompletion",  "status %s",  v12,  0xCu);
  if (v16 != -536870165) {
    uint64_t v24 = sub_10008AD88();
  }
  uint64_t v25 = static os_signpost_type_t.end.getter(v24);
  os_signpost_type_t v26 = v25;
  os_signpost_id_t v27 = OSSignpostID.rawValue.getter(v25);
  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  v26,  v27,  "AUAOutputExplicitFeedbackStream_isocFeedbackCompletion",  "status %s",  v12,  0xCu);

  swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1LL, -1LL);
  swift_slowDealloc(v12, -1LL, -1LL);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10008F9F8()
{
  return sub_10008886C(*(void **)(v0 + 16));
}

uint64_t sub_10008FA00()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t Configuration.configNum.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 5);
}

void *static Configuration.usbDescriptors(_:)(const IOUSBConfigurationDescriptor *a1)
{
  return sub_10008FC80(a1);
}

void *static Configuration.audioInterfaceAssociations(_:)(uint64_t a1)
{
  return sub_100090450(a1);
}

uint64_t Cluster.channelInfo.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t Configuration.highestExceptionLevel.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a2);
  LOBYTE(v4) = 0;
  uint64_t v5 = 32LL;
  do
  {
    __int128 v6 = *(_OWORD *)(a2 + v5 + 144);
    void v13[8] = *(_OWORD *)(a2 + v5 + 128);
    v13[9] = v6;
    uint64_t v14 = *(void *)(a2 + v5 + 160);
    __int128 v7 = *(_OWORD *)(a2 + v5 + 80);
    v13[4] = *(_OWORD *)(a2 + v5 + 64);
    v13[5] = v7;
    __int128 v8 = *(_OWORD *)(a2 + v5 + 112);
    v13[6] = *(_OWORD *)(a2 + v5 + 96);
    v13[7] = v8;
    __int128 v9 = *(_OWORD *)(a2 + v5 + 16);
    v13[0] = *(_OWORD *)(a2 + v5);
    v13[1] = v9;
    __int128 v10 = *(_OWORD *)(a2 + v5 + 48);
    v13[2] = *(_OWORD *)(a2 + v5 + 32);
    v13[3] = v10;
    sub_100062610(v13);
    unsigned int v11 = Function.highestExceptionLevel.getter();
    sub_100019D7C(v13);
    else {
      uint64_t v4 = v4;
    }
    v5 += 168LL;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(a2);
  return v4;
}

const IOUSBConfigurationDescriptor *static Configuration.newConfiguration(withDescriptor:)( const IOUSBConfigurationDescriptor *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = sub_10008FC80(a1);
  if (!v1)
  {
    uint64_t v4 = (uint64_t)v3;
    __int128 v6 = sub_100090450((uint64_t)v3);
    __int128 v7 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0(v4);
    swift_bridgeObjectRelease(v4);
    if (v7[2])
    {
      swift_bridgeObjectRetain(v6);
      sub_1000626EC((uint64_t)v7, v6);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease_n(v6, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v7);
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_10008FC14(__int16 a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x100) == 0)
  {
    uint64_t v3 = *(void *)(a3 + 16);
    if (!v3) {
      return 0LL;
    }
    LOBYTE(v4) = 0;
    uint64_t v5 = a3 + 32;
    uint64_t v6 = 1LL;
    do
    {
      if (v4)
      {
        BOOL v4 = 1LL;
        if (v3 == v6) {
          return v4;
        }
      }

      else
      {
        BOOL v4 = *(unsigned __int8 *)(*(void *)v5 + 2LL) == a1;
        if (v3 == v6) {
          return v4;
        }
      }

      v5 += 168LL;
    }

    while (!__OFADD__(v6++, 1LL));
    __break(1u);
  }

  return 1LL;
}

void *sub_10008FC80(const IOUSBConfigurationDescriptor *a1)
{
  uint64_t v2 = v1;
  Descriptor = IOUSBGetNextDescriptor(a1, 0LL);
  uint64_t bLength = a1->bLength;
  if (!Descriptor)
  {
    __int128 v8 = _swiftEmptyArrayStorage;
LABEL_4:
    if (bLength == a1->wTotalLength) {
      return v8;
    }
    _StringGuts.grow(_:)(53LL);
    v9._countAndFlagsBits = 0xD000000000000023LL;
    v9._object = (void *)0x80000001000D1A80LL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    v12._countAndFlagsBits = 0x4C6C61746F547720LL;
    v12._object = (void *)0xEE00206874676E65LL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
    uint64_t v14 = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(v14);
    sub_100029840( 0LL,  0xE000000000000000LL,  0xD000000000000012LL,  (void *)0x80000001000D1AB0LL,  0xD00000000000001DLL,  0x80000001000D1AD0LL,  140LL);
    unint64_t v15 = 0xE000000000000000LL;
LABEL_47:
    swift_bridgeObjectRelease(v15);
    return v8;
  }

  uint64_t v6 = (IOUSBDescriptorHeader *)Descriptor;
  uint64_t v7 = 65280LL;
  __int128 v8 = _swiftEmptyArrayStorage;
  while (2)
  {
    uint64_t v16 = v6->bLength;
    if (!v6->bLength || !v6->bDescriptorType) {
      goto LABEL_4;
    }
    BOOL v17 = __OFADD__(bLength, v16);
    bLength += v16;
    if (v17)
    {
      __break(1u);
      JUMPOUT(0x100090404LL);
    }

    uint64_t v18 = sub_100080CE8(v6, v7);
    if (v2)
    {
      unint64_t v15 = (unint64_t)v8;
      goto LABEL_47;
    }

    uint64_t v20 = v18;
    __int16 v21 = v19;
    os_signpost_id_t v37 = v8;
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      __int128 v8 = sub_1000500B8(0LL, v8[2] + 1LL, 1, v8);
    }
    unint64_t v23 = v8[2];
    unint64_t v22 = v8[3];
    if (v23 >= v22 >> 1) {
      __int128 v8 = sub_1000500B8((void *)(v22 > 1), v23 + 1, 1, v8);
    }
    v8[2] = v23 + 1;
    uint64_t v24 = &v8[2 * v23];
    v24[4] = v20;
    *((_WORD *)v24 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v21;
    uint64_t v2 = 0LL;
    switch(HIBYTE(v21))
    {
      case 1:
        uint64_t v7 = 65280LL;
        goto LABEL_7;
      case 2:
      case 3:
      case 4:
      case 5:
        uint64_t v7 = *(unsigned __int8 *)(v20 + 7);
        goto LABEL_7;
      case 6:
        switch(BYTE1(v7))
        {
          case 0:
          case 1:
          case 2:
          case 3:
            if ((_BYTE)v7) {
              goto LABEL_52;
            }
            uint64_t v7 = 256LL;
            goto LABEL_7;
          default:
LABEL_52:
            swift_bridgeObjectRelease(v8);
            unint64_t v29 = sub_10000AE14();
            uint64_t v31 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
            *(_BYTE *)uint64_t v32 = 53;
            *(void *)(v32 + 8) = 0LL;
            *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
            *(void *)(v32 + 24) = 0xD000000000000012LL;
            *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
            *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
            *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
            uint64_t v33 = 89LL;
            goto LABEL_53;
        }

      case 7:
        if (BYTE1(v7) == 255 || BYTE1(v7) && BYTE1(v7) != 1 || v7 != 32)
        {
          swift_bridgeObjectRelease(v8);
          unint64_t v26 = sub_10000AE14();
          uint64_t v31 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
          *(_BYTE *)uint64_t v32 = 53;
          *(void *)(v32 + 8) = 0LL;
          *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          *(void *)(v32 + 24) = 0xD000000000000012LL;
          *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
          *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
          *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
          uint64_t v33 = 99LL;
          goto LABEL_53;
        }

        uint64_t v7 = 288LL;
        goto LABEL_7;
      case 8:
        if (BYTE1(v7) == 255 || BYTE1(v7) && BYTE1(v7) != 1 || v7 != 48)
        {
          swift_bridgeObjectRelease(v8);
          unint64_t v27 = sub_10000AE14();
          uint64_t v31 = swift_allocError(&type metadata for AUAError, v27, 0LL, 0LL);
          *(_BYTE *)uint64_t v32 = 53;
          *(void *)(v32 + 8) = 0LL;
          *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          *(void *)(v32 + 24) = 0xD000000000000012LL;
          *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
          *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
          *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
          uint64_t v33 = 109LL;
          goto LABEL_53;
        }

        uint64_t v7 = 304LL;
        goto LABEL_7;
      case 9:
        if (BYTE1(v7) != 255 && (!BYTE1(v7) || BYTE1(v7) == 1) && v7 == 64)
        {
          uint64_t v7 = 320LL;
LABEL_7:
          uint64_t v6 = (IOUSBDescriptorHeader *)IOUSBGetNextDescriptor(a1, v6);
          if (!v6) {
            goto LABEL_4;
          }
          continue;
        }

        swift_bridgeObjectRelease(v8);
        unint64_t v28 = sub_10000AE14();
        uint64_t v31 = swift_allocError(&type metadata for AUAError, v28, 0LL, 0LL);
        *(_BYTE *)uint64_t v32 = 53;
        *(void *)(v32 + 8) = 0LL;
        *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v32 + 24) = 0xD000000000000012LL;
        *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
        *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
        *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
        uint64_t v33 = 119LL;
LABEL_53:
        *(void *)(v32 + 56) = v33;
        swift_willThrow(v31);
        return v37;
      case 0xA:
        uint64_t v7 = *(unsigned __int8 *)(v20 + 7) | 0x200u;
        goto LABEL_7;
      case 0xB:
        goto LABEL_7;
      case 0xC:
        swift_bridgeObjectRelease(v8);
        unint64_t v30 = sub_10000AE14();
        uint64_t v31 = swift_allocError(&type metadata for AUAError, v30, 0LL, 0LL);
        *(_BYTE *)uint64_t v32 = 53;
        *(void *)(v32 + 8) = 0LL;
        *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v32 + 24) = 0xD000000000000012LL;
        *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
        *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
        *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
        uint64_t v33 = 94LL;
        goto LABEL_53;
      case 0xD:
        swift_bridgeObjectRelease(v8);
        unint64_t v34 = sub_10000AE14();
        uint64_t v31 = swift_allocError(&type metadata for AUAError, v34, 0LL, 0LL);
        *(_BYTE *)uint64_t v32 = 53;
        *(void *)(v32 + 8) = 0LL;
        *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v32 + 24) = 0xD000000000000012LL;
        *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
        *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
        *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
        uint64_t v33 = 104LL;
        goto LABEL_53;
      case 0xE:
        swift_bridgeObjectRelease(v8);
        unint64_t v35 = sub_10000AE14();
        uint64_t v31 = swift_allocError(&type metadata for AUAError, v35, 0LL, 0LL);
        *(_BYTE *)uint64_t v32 = 53;
        *(void *)(v32 + 8) = 0LL;
        *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v32 + 24) = 0xD000000000000012LL;
        *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
        *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
        *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
        uint64_t v33 = 114LL;
        goto LABEL_53;
      case 0xF:
        swift_bridgeObjectRelease(v8);
        unint64_t v36 = sub_10000AE14();
        uint64_t v31 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
        *(_BYTE *)uint64_t v32 = 53;
        *(void *)(v32 + 8) = 0LL;
        *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v32 + 24) = 0xD000000000000012LL;
        *(void *)(v32 + 32) = 0x80000001000D1AB0LL;
        *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001DLL;
        *(void *)(v32 + 48) = 0x80000001000D1AD0LL;
        uint64_t v33 = 124LL;
        goto LABEL_53;
      default:
        uint64_t v2 = v7;
        uint64_t v7 = bLength;
        goto LABEL_7;
    }
  }

void *sub_100090450(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  BOOL v4 = (_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if (!v4[9])
    {
      uint64_t v7 = *(void *)v4;
      if (*(_BYTE *)(*(void *)v4 + 4LL) == 1)
      {
        v1.i32[0] = *(_DWORD *)v7;
        char v8 = *(_BYTE *)(v7 + 5);
        char v9 = *(_BYTE *)(v7 + 6);
        char v10 = *(_BYTE *)(v7 + 7);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          uint64_t v5 = sub_10004FE8C(0LL, v5[2] + 1LL, 1, v5);
        }
        unint64_t v12 = v5[2];
        unint64_t v11 = v5[3];
        if (v12 >= v11 >> 1) {
          uint64_t v5 = sub_10004FE8C((void *)(v11 > 1), v12 + 1, 1, v5);
        }
        v5[2] = v12 + 1;
        uint64_t v6 = &v5[v12];
        *((_DWORD *)v6 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v1)).u32[0];
        *((_BYTE *)v6 + 36) = 1;
        *((_BYTE *)v6 + 3swift_unknownObjectWeakDestroy(v0 + 7) = v8;
        *((_BYTE *)v6 + 38) = v9;
        *((_BYTE *)v6 + 39) = v10;
      }
    }

    v4 += 16;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(a1);
  return v5;
}

uint64_t assignWithTake for Configuration(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Configuration()
{
  return &type metadata for Configuration;
}

uint64_t sub_1000905D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = (char *)&v17 - v8;
  unint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v7);
  if (v11 < 0x10000)
  {
    uint64_t v12 = 1936745574LL;
    if ((unsigned __int16)v11 <= 0x301u)
    {
    }

    else if ((unsigned __int16)v11 > 0x601u)
    {
    }

    else
    {
      if ((unsigned __int16)v11 == 1026)
      {
        Swift::String v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
        v13(v9, v1, a1);
        uint64_t active = type metadata accessor for ActiveOutputTerminal();
        if (swift_dynamicCast(&v18, v9, a1, active, 6LL))
        {
          uint64_t v12 = 1751412840LL;
          swift_release(v18);
          return v12;
        }

        v13(v6, v1, a1);
        uint64_t v15 = type metadata accessor for ActiveInputTerminal();
        if (swift_dynamicCast(&v18, v6, a1, v15, 6LL))
        {
          swift_release(v18);
          return 1752000867LL;
        }
      }
    }

    return 0LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000907C0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_1000178EC(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_100017A40(v6);
  return v4;
}

uint64_t ActiveTerminalEntity.clockEntityID.getter(uint64_t a1, uint64_t a2)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void v23[3];
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[7];
  uint64_t v27;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16LL))();
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t ObjectType = swift_getObjectType(v4);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7);
    swift_unknownObjectRelease(v6, v10);
    __int128 v11 = *(_OWORD *)(v9 + 112);
    v26[4] = *(_OWORD *)(v9 + 96);
    v26[5] = v11;
    v26[6] = *(_OWORD *)(v9 + 128);
    unint64_t v27 = *(void *)(v9 + 144);
    __int128 v12 = *(_OWORD *)(v9 + 48);
    v26[0] = *(_OWORD *)(v9 + 32);
    v26[1] = v12;
    __int128 v13 = *(_OWORD *)(v9 + 80);
    v26[2] = *(_OWORD *)(v9 + 64);
    v26[3] = v13;
    sub_100030860(v26);
    swift_release(v9);
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
    v14(v23, a1, a2);
    uint64_t v15 = v24;
    uint64_t v16 = v25;
    sub_1000178EC(v23, v24);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
    uint64_t v18 = sub_100046434(v17);
    LOBYTE(v15) = v19;
    sub_100030944(v26);
    sub_100017A40(v23);
    if ((v15 & 1) == 0) {
      return v18;
    }
  }

  else
  {
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
  }

  v14(v23, a1, a2);
  uint64_t v20 = v24;
  __int16 v21 = v25;
  sub_1000178EC(v23, v24);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 48))(v20, v21);
  sub_100017A40(v23);
  return v18;
}

uint64_t ActiveTerminalEntity.clock.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v10 + 8);
  __int128 v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = v12(v7, v11);
  swift_unknownObjectRelease(v13, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a1);
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
    return 0LL;
  }

  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v16 = v15(a1, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a1);
  if (!v16) {
    return 0LL;
  }
  uint64_t result = v12(a1, v11);
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t v19 = result;
  uint64_t v20 = v18;
  uint64_t ObjectType = swift_getObjectType(result);
  uint64_t v22 = v15(a1, a2);
  sub_10002C5BC(v22, ObjectType, v20, (uint64_t)v28);
  swift_unknownObjectRelease(v19, v23);
  if (!v29)
  {
    sub_1000178B0((uint64_t)v28, &qword_100113E98);
    return 0LL;
  }

  uint64_t v24 = sub_100008E00(&qword_100113B28);
  uint64_t v25 = sub_100008E00(&qword_1001144E8);
  else {
    return 0LL;
  }
}

uint64_t ActiveTerminalEntity.latencyControlSelector.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16LL))();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t ObjectType = swift_getObjectType(result);
    LODWORD(v5) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5);
    swift_unknownObjectRelease(v4, v7);
    if ((_DWORD)v5 == 32) {
      return 7LL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveTerminalEntity.processTargetedInterrupt(attribute:controlSelector:channelNumber:)( AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
}

uint64_t sub_100090BA0(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  int v6 = a1;
  sub_100029834( 0xD00000000000001BLL,  0x80000001000D1CF0LL,  0xD00000000000002CLL,  (void *)0x80000001000D1D10LL,  0xD00000000000001ELL,  0x80000001000D1BE0LL,  82LL);
  if (v6)
  {
    sub_100029840( 0xD000000000000025LL,  0x80000001000D1D40LL,  0xD00000000000002CLL,  (void *)0x80000001000D1D10LL,  0xD00000000000001ELL,  0x80000001000D1BE0LL,  83LL);
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 2;
    *(void *)(v9 + 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v9 + 24) = 0xD00000000000002CLL;
    *(void *)(v9 + 32) = 0x80000001000D1D10LL;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001ELL;
    *(void *)(v9 + 48) = 0x80000001000D1BE0LL;
    *(void *)(v9 + 56) = 83LL;
    return swift_willThrow(v8);
  }

  else
  {
    uint64_t v11 = v23;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 16LL))(v23);
    if (result)
    {
      uint64_t v13 = result;
      uint64_t v14 = v12;
      uint64_t ObjectType = swift_getObjectType(result);
      __int128 v22[3] = v23;
      v22[4] = a3;
      uint64_t v16 = sub_100028B40(v22);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL))(v16, v3, v11);
      sub_10002EFA0(v22, ObjectType, v14);
      uint64_t v18 = v17;
      swift_unknownObjectRelease(v13, v19);
      uint64_t result = sub_100017A40(v22);
      if (!v4)
      {
        if (v18)
        {
          uint64_t v20 = swift_allocObject(&unk_1001068F8, 24LL, 7LL);
          *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
          id v21 = v18;
          AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000002CLL,  0x80000001000D1D10LL,  0xD00000000000001ELL,  0x80000001000D1BE0LL,  87LL,  (uint64_t)sub_1000924A8,  v20);

          return swift_release(v20);
        }
      }
    }
  }

  return result;
}

void sub_100090DBC()
{
  if (v0)
  {
    sub_100029840( 0xD00000000000001ALL,  0x80000001000D1DA0LL,  0xD00000000000002CLL,  (void *)0x80000001000D1D10LL,  0xD00000000000001ELL,  0x80000001000D1BE0LL,  95LL);
    swift_errorRelease(v0);
  }

uint64_t ActiveTerminalEntity.name.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(&v21, a1, v4);
  uint64_t v5 = v22;
  uint64_t v6 = v23;
  sub_1000178EC(&v21, v22);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  if (BYTE2(v7) == 255)
  {
    sub_100017A40(&v21);
  }

  else
  {
    int v8 = v7;
    sub_100017A40(&v21);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v4);
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      uint64_t ObjectType = swift_getObjectType(v9);
      uint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);
      swift_unknownObjectRelease(v11, v15);
      if (v14)
      {
        if (*(void *)&v14[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
        {
          unint64_t v16 = sub_1000B36EC(v8 & 0x1FFFF);
          uint64_t v18 = v17;

          if (v18) {
            return v16;
          }
        }

        else
        {
        }
      }
    }
  }

  unint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  if (v19 < 0x10000)
  {
    if ((unsigned __int16)v19 > 0x301u)
    {
      if ((unsigned __int16)v19 > 0x601u)
      {
        switch((unsigned __int16)v19)
        {
          case 0x602u:
            return 0xD000000000000020LL;
          case 0x603u:
            return 0xD000000000000017LL;
          case 0x605u:
            return 0xD000000000000018LL;
        }
      }

      else
      {
      }
    }

    else if ((unsigned __int16)v19 > 0x205u)
    {
      switch((unsigned __int16)v19)
      {
        case 0x206u:
          return 0xD00000000000001BLL;
        case 0x300u:
          return 0xD000000000000010LL;
        case 0x301u:
          return 0x72656B61657053LL;
      }
    }

    else
    {
      switch((unsigned __int16)v19)
      {
        case 0x101u:
          return 0x6572745320425355LL;
        case 0x200u:
          return 0x6E55207475706E49LL;
        case 0x201u:
          return 0x6F68706F7263694DLL;
      }
    }

    return 0xD000000000000015LL;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t ActiveInputTerminal.staticInputTerminal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100092040(v1 + 32, a1);
}

double ActiveInputTerminal.staticEntity.getter@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091394((uint64_t (*)(void))sub_10007FE64, a1);
}

double ActiveInputTerminal.staticTerminalEntity.getter@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091394((uint64_t (*)(void))sub_1000920C8, a1);
}

uint64_t ActiveInputTerminal.terminalID.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t ActiveInputTerminal.streamingInterfaceNumber.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ActiveInputTerminal.terminalType.getter()
{
  return *(void *)(v0 + 136);
}

uint64_t ActiveInputTerminal.cluster.getter()
{
  uint64_t v1 = *(void **)(v0 + 144);
  if (!v1[2]) {
    return 0LL;
  }
  uint64_t v2 = v1[4];
  swift_bridgeObjectRetain(v1[5]);
  return v2;
}

uint64_t ActiveInputTerminal.clusterArray.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 144));
}

uint64_t ActiveInputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 152));
}

double ActiveInputTerminal.staticDataEntity.getter@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091394((uint64_t (*)(void))sub_10009210C, a1);
}

double sub_100091394@<D0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 40);
  char v5 = *(_BYTE *)(v2 + 48);
  uint64_t v6 = *(void *)(v2 + 56);
  __int16 v19 = *(_WORD *)(v2 + 64);
  char v7 = *(_BYTE *)(v2 + 66);
  uint64_t v17 = *(void *)(v2 + 72);
  uint64_t v18 = *(void *)(v2 + 32);
  uint64_t v16 = *(void *)(v2 + 80);
  __int16 v15 = *(_WORD *)(v2 + 88);
  uint64_t v8 = *(void *)(v2 + 96);
  uint64_t v9 = *(void *)(v2 + 104);
  unint64_t v10 = *(void *)(v2 + 112);
  uint64_t v11 = *(void *)(v2 + 120);
  uint64_t v12 = *(void *)(v2 + 128);
  a2[3] = (uint64_t)&type metadata for InputTerminal;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100106678, 120LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
  *(void *)(v13 + 24) = v4;
  *(_BYTE *)(v13 + 32) = v5;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v6;
  *(_BYTE *)(v13 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v7;
  *(_WORD *)(v13 + 48) = v19;
  *(void *)(v13 + 56) = v17;
  *(void *)(v13 + 64) = v16;
  *(_WORD *)(v13 + 72) = v15;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
  *(void *)(v13 + 88) = v9;
  *(void *)(v13 + 96) = v10;
  *(void *)(v13 + 104) = v11;
  *(void *)(v13 + 112) = v12;
  swift_bridgeObjectRetain();
  sub_10004AF94(v9, v10);
  swift_bridgeObjectRetain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_10009149C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = 0LL;
  swift_unknownObjectWeakInit(v4 + 16, 0LL);
  uint64_t v9 = *(void *)a2;
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 48) = v10;
  *(void *)(v4 + 128) = *(void *)(a2 + 96);
  __int128 v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 112) = v11;
  __int128 v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v12;
  if (*(void *)(a4 + 16))
  {
    sub_10004AF38(a2);
  }

  else
  {
    sub_10004AF38(a2);
    swift_bridgeObjectRelease(a4);
    a4 = 0LL;
  }

  *(void *)(v4 + 144) = a3;
  *(void *)(v4 + 152) = a4;
  if (v9 == 257 || (uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) == 0)
  {
    sub_100092428((void *)a2);
  }

  else
  {
    BOOL v14 = sub_10001645C(15LL, v13);
    sub_100092428((void *)a2);

    if (v14) {
      uint64_t v9 = 1026LL;
    }
  }

  *(void *)(v4 + 136) = v9;
  return v4;
}

void *ActiveInputTerminal.deinit()
{
  uint64_t v1 = v0[13];
  unint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_bridgeObjectRelease(v0[12]);
  sub_10004B030(v1, v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return v0;
}

uint64_t ActiveInputTerminal.__deallocating_deinit()
{
  uint64_t v1 = v0[13];
  unint64_t v2 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  swift_bridgeObjectRelease(v0[12]);
  sub_10004B030(v1, v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return swift_deallocClassInstance(v0, 160LL, 7LL);
}

double sub_100091670@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091720((uint64_t (*)(void))sub_1000920C8, a1);
}

uint64_t sub_100091684()
{
  return *(unsigned __int8 *)(*(void *)v0 + 48LL);
}

uint64_t sub_100091690()
{
  return *(void *)(*(void *)v0 + 72LL);
}

uint64_t sub_10009169C()
{
  return *(void *)(*(void *)v0 + 136LL);
}

double sub_1000916AC@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091720((uint64_t (*)(void))sub_10009210C, a1);
}

uint64_t sub_1000916B8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 144LL);
  if (!v1[2]) {
    return 0LL;
  }
  uint64_t v2 = v1[4];
  swift_bridgeObjectRetain(v1[5]);
  return v2;
}

double sub_100091714@<D0>(uint64_t *a1@<X8>)
{
  return sub_100091720((uint64_t (*)(void))sub_10007FE64, a1);
}

double sub_100091720@<D0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 40LL);
  char v6 = *(_BYTE *)(*(void *)v2 + 48LL);
  uint64_t v7 = *(void *)(*(void *)v2 + 56LL);
  __int16 v20 = *(_WORD *)(*(void *)v2 + 64LL);
  char v8 = *(_BYTE *)(*(void *)v2 + 66LL);
  uint64_t v18 = *(void *)(*(void *)v2 + 72LL);
  uint64_t v19 = *(void *)(*(void *)v2 + 32LL);
  uint64_t v17 = *(void *)(*(void *)v2 + 80LL);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 88LL);
  uint64_t v9 = *(void *)(*(void *)v2 + 96LL);
  uint64_t v10 = v4[13];
  unint64_t v11 = v4[14];
  uint64_t v12 = v4[15];
  uint64_t v13 = v4[16];
  a2[3] = (uint64_t)&type metadata for InputTerminal;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100106678, 120LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(v14 + 24) = v5;
  *(_BYTE *)(v14 + 32) = v6;
  *(void *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v7;
  *(_BYTE *)(v14 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
  *(_WORD *)(v14 + 48) = v20;
  *(void *)(v14 + 56) = v18;
  *(void *)(v14 + 64) = v17;
  *(_WORD *)(v14 + 72) = v16;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v9;
  *(void *)(v14 + 88) = v10;
  *(void *)(v14 + 96) = v11;
  *(void *)(v14 + 104) = v12;
  *(void *)(v14 + 112) = v13;
  swift_bridgeObjectRetain();
  sub_10004AF94(v10, v11);
  swift_bridgeObjectRetain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

uint64_t sub_100091834(uint64_t a1)
{
  return ActiveTerminalEntity.latencyControlSelector.getter( a1,  (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_100091840(uint64_t a1)
{
  return ActiveTerminalEntity.name.getter(a1, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_10009184C(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100091E10(a1, a2, a4, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t ActiveOutputTerminal.staticOutputTerminal.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100092150(v1 + 32, a1);
}

uint64_t ActiveOutputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 128));
}

uint64_t ActiveOutputTerminal.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 64) | (*(unsigned __int8 *)(v0 + 66) << 16);
}

uint64_t ActiveOutputTerminal.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000918A8((uint64_t (*)(void))sub_10007FDB4, a1);
}

uint64_t ActiveOutputTerminal.staticTerminalEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000918A8((uint64_t (*)(void))sub_1000921B8, a1);
}

uint64_t sub_1000918A8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  char v6 = *(_BYTE *)(v2 + 48);
  uint64_t v7 = *(void *)(v2 + 56);
  __int16 v18 = *(_WORD *)(v2 + 64);
  char v8 = *(_BYTE *)(v2 + 66);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(_BYTE *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 96);
  uint64_t v16 = *(void *)(v2 + 104);
  uint64_t v17 = *(void *)(v2 + 88);
  __int16 v15 = *(_WORD *)(v2 + 112);
  uint64_t v12 = *(void *)(v2 + 120);
  a2[3] = (uint64_t)&type metadata for OutputTerminal;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_1001066A0, 112LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v13 + 24) = v5;
  *(_BYTE *)(v13 + 32) = v6;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v7;
  *(_BYTE *)(v13 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
  *(_WORD *)(v13 + 48) = v18;
  *(void *)(v13 + 56) = v9;
  *(_BYTE *)(v13 + 64) = v10;
  *(void *)(v13 + 72) = v17;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v11;
  *(void *)(v13 + 88) = v16;
  *(_WORD *)(v13 + 96) = v15;
  *(void *)(v13 + 104) = v12;
  swift_bridgeObjectRetain(v12);
  return swift_bridgeObjectRetain(v11);
}

uint64_t ActiveOutputTerminal.cluster.getter()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!result)
  {
    uint64_t v20 = 0LL;
    memset(v19, 0, sizeof(v19));
LABEL_5:
    sub_1000921FC((uint64_t)v19, (uint64_t)v15);
    if (v16)
    {
      uint64_t v7 = sub_100008E00(&qword_100113B28);
      uint64_t v8 = sub_100008E00(&qword_100113B30);
      if ((swift_dynamicCast(&v12, v15, v7, v8, 6LL) & 1) != 0)
      {
        if (*((void *)&v13 + 1))
        {
          sub_10000AF84(&v12, (uint64_t)v15);
          uint64_t v9 = v16;
          uint64_t v10 = v17;
          sub_1000178EC(v15, v16);
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
          sub_1000178B0((uint64_t)v19, &qword_100113E98);
          sub_100017A40(v15);
          return v11;
        }
      }

      else
      {
        uint64_t v14 = 0LL;
        __int128 v12 = 0u;
        __int128 v13 = 0u;
      }
    }

    else
    {
      sub_1000178B0((uint64_t)v15, &qword_100113E98);
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      uint64_t v14 = 0LL;
    }

    sub_1000178B0((uint64_t)v19, &qword_100113E98);
    sub_1000178B0((uint64_t)&v12, &qword_100113B38);
    return 0LL;
  }

  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t ObjectType = swift_getObjectType(result);
    sub_10002C5BC(v4, ObjectType, v3, (uint64_t)v19);
    swift_unknownObjectRelease(v2, v6);
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_100091B40(char *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 24) = 0LL;
  swift_unknownObjectWeakInit(v3 + 16, 0LL);
  uint64_t v7 = *(void *)a2;
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 48) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 112) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v10;
  if (*(void *)(a3 + 16))
  {
    sub_10004AEB8(a2);
  }

  else
  {
    sub_10004AEB8(a2);
    swift_bridgeObjectRelease(a3);
    a3 = 0LL;
  }

  *(void *)(v3 + 128) = a3;
  sub_100062CE8(a2);
  if (v7 == 257 || (uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) == 0)
  {
  }

  else
  {
    BOOL v12 = sub_10001645C(15LL, v11);

    if (v12) {
      uint64_t v7 = 1026LL;
    }
  }

  *(void *)(v3 + 136) = v7;
  return v3;
}

void *ActiveOutputTerminal.deinit()
{
  uint64_t v1 = v0[15];
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[16]);
  return v0;
}

uint64_t ActiveOutputTerminal.__deallocating_deinit()
{
  uint64_t v1 = v0[15];
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[16]);
  return swift_deallocClassInstance(v0, 144LL, 7LL);
}

uint64_t sub_100091CA0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091CE4((uint64_t (*)(void))sub_1000921B8, a1);
}

uint64_t sub_100091CAC()
{
  return *(void *)(*(void *)v0 + 88LL);
}

uint64_t sub_100091CB8()
{
  return ActiveOutputTerminal.cluster.getter();
}

uint64_t sub_100091CD8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100091CE4((uint64_t (*)(void))sub_10007FDB4, a1);
}

uint64_t sub_100091CE4@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  char v7 = *(_BYTE *)(*v2 + 48);
  uint64_t v8 = *(void *)(*v2 + 56);
  __int16 v20 = *(_WORD *)(*v2 + 64);
  char v9 = *(_BYTE *)(*v2 + 66);
  uint64_t v10 = *(void *)(*v2 + 72);
  char v11 = *(_BYTE *)(*v2 + 80);
  uint64_t v12 = *(void *)(*v2 + 88);
  uint64_t v13 = *(void *)(*v2 + 96);
  uint64_t v18 = *(void *)(v4 + 104);
  uint64_t v19 = v12;
  __int16 v17 = *(_WORD *)(v4 + 112);
  uint64_t v14 = *(void *)(v4 + 120);
  a2[3] = (uint64_t)&type metadata for OutputTerminal;
  a2[4] = a1();
  uint64_t v15 = swift_allocObject(&unk_1001066A0, 112LL, 7LL);
  *a2 = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(void *)(v15 + 24) = v6;
  *(_BYTE *)(v15 + 32) = v7;
  *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
  *(_BYTE *)(v15 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v9;
  *(_WORD *)(v15 + 48) = v20;
  *(void *)(v15 + 56) = v10;
  *(_BYTE *)(v15 + 64) = v11;
  *(void *)(v15 + 72) = v19;
  *(void *)(v15 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
  *(void *)(v15 + 88) = v18;
  *(_WORD *)(v15 + 96) = v17;
  *(void *)(v15 + 104) = v14;
  swift_bridgeObjectRetain(v14);
  return swift_bridgeObjectRetain(v13);
}

uint64_t sub_100091DD8(uint64_t a1)
{
  return ActiveTerminalEntity.latencyControlSelector.getter( a1,  (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_100091DE4(uint64_t a1)
{
  return ActiveTerminalEntity.name.getter(a1, (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_100091DF0(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100091E10(a1, a2, a4, (uint64_t)&protocol witness table for ActiveOutputTerminal);
}

uint64_t sub_100091E10(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 16LL))(a3);
  if (!v8
    || (uint64_t v10 = v8,
        uint64_t v11 = v9,
        uint64_t ObjectType = swift_getObjectType(v8),
        char v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 200))(a2, ObjectType, v11),
        swift_unknownObjectRelease(v10, v14),
        v13 == 7))
  {
    unint64_t v16 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 2;
    *(void *)(v18 + 8) = 0LL;
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000042LL;
    *(void *)(v18 + 32) = 0x80000001000CE920LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001ELL;
    *(void *)(v18 + 48) = 0x80000001000D1BE0LL;
    uint64_t v19 = 68LL;
  }

  else
  {
    if (v13 == 1) {
      return sub_100090BA0(a1, a3, a4);
    }
    uint64_t v24 = 0LL;
    uint64_t v25 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    v20._countAndFlagsBits = 0xD000000000000020LL;
    v20._object = (void *)0x80000001000D1CC0LL;
    String.append(_:)(v20);
    char v23 = v13;
    _print_unlocked<A, B>(_:_:)( &v23,  &v24,  &type metadata for AUATerminalControlSelector,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v21 = v25;
    sub_100029834( v24,  v25,  0xD000000000000042LL,  (void *)0x80000001000CE920LL,  0xD00000000000001ELL,  0x80000001000D1BE0LL,  75LL);
    swift_bridgeObjectRelease(v21);
    unint64_t v22 = sub_10000AE14();
    uint64_t v17 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v18 = 2;
    *(void *)(v18 + 8) = 0LL;
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v18 + 24) = 0xD000000000000042LL;
    *(void *)(v18 + 32) = 0x80000001000CE920LL;
    *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001ELL;
    *(void *)(v18 + 48) = 0x80000001000D1BE0LL;
    uint64_t v19 = 76LL;
  }

  *(void *)(v18 + 56) = v19;
  return swift_willThrow(v17);
}

uint64_t sub_100092040(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10009207C()
{
  unint64_t v1 = v0[12];
  if (v1 >> 60 != 15) {
    sub_100032E74(v0[11], v1);
  }
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120LL, 7LL);
}

unint64_t sub_1000920C8()
{
  unint64_t result = qword_100115A80;
  if (!qword_100115A80)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InputTerminal, &type metadata for InputTerminal);
    atomic_store(result, (unint64_t *)&qword_100115A80);
  }

  return result;
}

unint64_t sub_10009210C()
{
  unint64_t result = qword_100115A88;
  if (!qword_100115A88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InputTerminal, &type metadata for InputTerminal);
    atomic_store(result, (unint64_t *)&qword_100115A88);
  }

  return result;
}

uint64_t sub_100092150(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10009218C()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

unint64_t sub_1000921B8()
{
  unint64_t result = qword_100115A90;
  if (!qword_100115A90)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OutputTerminal,  &type metadata for OutputTerminal);
    atomic_store(result, (unint64_t *)&qword_100115A90);
  }

  return result;
}

uint64_t sub_1000921FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100092248()
{
  unint64_t result = qword_100115A98;
  if (!qword_100115A98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUATerminalControlSelector,  &type metadata for AUATerminalControlSelector);
    atomic_store(result, (unint64_t *)&qword_100115A98);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AUATerminalControlSelector(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for AUATerminalControlSelector( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100092368 + 4 * byte_1000D8795[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10009239C + 4 * asc_1000D8790[v4]))();
}

uint64_t sub_10009239C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000923A4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000923ACLL);
  }
  return result;
}

uint64_t sub_1000923B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000923C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1000923C4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000923CC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUATerminalControlSelector()
{
  return &type metadata for AUATerminalControlSelector;
}

uint64_t type metadata accessor for ActiveInputTerminal()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore19ActiveInputTerminal);
}

uint64_t type metadata accessor for ActiveOutputTerminal()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore20ActiveOutputTerminal);
}

void *sub_100092428(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  uint64_t v5 = a1[12];
  swift_bridgeObjectRelease(a1[8]);
  sub_10004B030(v2, v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_100092484()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000924A8()
{
}

id sub_1000924DC()
{
  return sub_100092844(type metadata accessor for AUACustomNumberProperty);
}

uint64_t type metadata accessor for AUACustomNumberProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore23AUACustomNumberProperty);
}

id sub_100092534()
{
  return sub_100092844(type metadata accessor for AUACustomDictionaryProperty);
}

uint64_t type metadata accessor for AUACustomDictionaryProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore27AUACustomDictionaryProperty);
}

id sub_10009258C()
{
  return sub_100092844(type metadata accessor for AUACustomStringProperty);
}

uint64_t type metadata accessor for AUACustomStringProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore23AUACustomStringProperty);
}

id sub_100092628()
{
  return sub_100092844(type metadata accessor for AUASidetoneSubstituteEnable);
}

uint64_t type metadata accessor for AUASidetoneSubstituteEnable()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore27AUASidetoneSubstituteEnable);
}

uint64_t sub_100092660( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, void **a6, uint64_t a7, void *a8)
{
  *a5 = 8;
  int v8 = *(void **)&a1[*a8];
  uint64_t v9 = *a6;
  *a6 = v8;
  uint64_t v10 = a1;
  id v11 = v8;

  return 1LL;
}

id sub_1000926C0()
{
  return sub_100092844(type metadata accessor for AUASidetoneSubstituteProperty);
}

uint64_t type metadata accessor for AUASidetoneSubstituteProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore29AUASidetoneSubstituteProperty);
}

void sub_100092800( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v9 = a3;
  _swift_stdlib_reportUnimplementedInitializer(a6, a7, "init(address:propertyDataType:qualifierDataType:)", 49LL, 0LL);
  __break(1u);
}

id sub_100092838()
{
  return sub_100092844(type metadata accessor for AUABooleanProperty);
}

id sub_100092844(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for AUABooleanProperty()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore18AUABooleanProperty);
}

uint64_t sub_100092894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  objc_super v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  objc_super v3 = sub_10004F1A4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_1000929D8(uint64_t a1)
{
  return sub_100092BC0(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_10009729C);
}

uint64_t sub_1000929E4(uint64_t a1)
{
  return sub_100092BC0(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_1000974B0);
}

uint64_t sub_1000929F0(uint64_t a1)
{
  return sub_100092BC0(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_1000976B4);
}

uint64_t sub_1000929FC(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v4 < 0) {
    uint64_t v17 = *v1;
  }
  else {
    uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v1);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  uint64_t *v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease(*v1);
    uint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = sub_1000978C8(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }

  if (v11 < 1) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v14;
LABEL_19:
    uint64_t v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

uint64_t sub_100092BB4(uint64_t a1)
{
  return sub_100092BC0(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_100097ADC);
}

uint64_t sub_100092BC0(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

uint64_t sub_100092D7C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10004F9DC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_100008E00(&qword_100113EC0);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    void *v1 = v3;
    return result;
  }

uint64_t sub_100092EF0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_10004F9F0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v10 = (unint64_t)&v3[26 * v9 + 4];
  if (a1 + 32 < v10 + 208 * v8 && v10 < a1 + 32 + 208 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    void *v1 = v3;
    return result;
  }

uint64_t sub_10009304C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10004F514(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_100093194(uint64_t a1)
{
  return sub_1000931AC(a1, (uint64_t (*)(void))sub_10004FE80);
}

uint64_t sub_1000931A0(uint64_t a1)
{
  return sub_1000931AC(a1, (uint64_t (*)(void))sub_100050528);
}

uint64_t sub_1000931AC(uint64_t a1, uint64_t (*a2)(void))
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (swift_isUniquelyReferenced_nonNull_native(*v2) && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

  uint64_t v4 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }

void sub_1000932FC()
{
  qword_100117298 = (uint64_t)&off_1000FDA98;
}

uint64_t ActiveFeatureUnit.staticFeatureUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009331C(v1 + 32, a1);
}

uint64_t sub_10009331C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveFeatureUnit.unitControls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t ActiveFeatureUnit.volumeOverrides.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 112));
}

uint64_t ActiveFeatureUnit.volumeOverrides.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*ActiveFeatureUnit.volumeOverrides.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t ActiveFeatureUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100093460((uint64_t (*)(void))sub_10007FD28, a1);
}

uint64_t sub_100093420()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t ActiveFeatureUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100093460((uint64_t (*)(void))sub_100093534, a1);
}

uint64_t sub_100093460@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  char v5 = *(_BYTE *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v15 = *(_WORD *)(v2 + 56);
  char v7 = *(_BYTE *)(v2 + 58);
  uint64_t v8 = *(void *)(v2 + 64);
  __int16 v9 = *(_WORD *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  uint64_t v11 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 96);
  a2[3] = (uint64_t)&type metadata for FeatureUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject(&unk_100106978, 88LL, 7LL);
  *a2 = v13;
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_BYTE *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(_BYTE *)(v13 + 42) = v7;
  *(_WORD *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v15;
  *(void *)(v13 + 48) = v8;
  *(_WORD *)(v13 + 56) = v9;
  *(void *)(v13 + 64) = v10;
  *(void *)(v13 + 72) = v11;
  *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v10);
  return swift_bridgeObjectRetain(v11);
}

unint64_t sub_100093534()
{
  unint64_t result = qword_100115DC8;
  if (!qword_100115DC8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FeatureUnit, &type metadata for FeatureUnit);
    atomic_store(result, (unint64_t *)&qword_100115DC8);
  }

  return result;
}

uint64_t ActiveStreamingAltInterface.bitResolution.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t ActiveFeatureUnit.sourceID.getter()
{
  if (*(_BYTE *)(v0 + 40)) {
    return 0LL;
  }
  else {
    return *(void *)(v0 + 32);
  }
}

uint64_t MixerUnit.exceptionList.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 80));
}

uint64_t ActiveStreamingAltInterface.endpoints.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 96));
}

void ActiveFeatureUnit.start(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess(v3 + 16, v36, 1LL, 0LL);
  *(void *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign(v3 + 16, a1);
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(ObjectType, a2);
  if (!v7) {
    return;
  }
  uint64_t v8 = (char *)v7;
  if (qword_100112928 != -1) {
LABEL_31:
  }
    swift_once(&qword_100112928, sub_1000932FC);
  uint64_t v9 = *(void *)(qword_100117298 + 16);
  if (!v9)
  {

    return;
  }

  uint64_t v10 = OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor;
  uint64_t v11 = (void *)(v3 + 112);
  uint64_t v12 = (char *)(qword_100117298 + 32);
  uint64_t v31 = qword_100117298;
  swift_bridgeObjectRetain();
  uint64_t v32 = (void *)(v3 + 112);
  uint64_t v33 = v3;
  while (1)
  {
    int64_t v14 = *(unsigned __int16 **)&v8[v10];
    if (word_1000D8B22[*v12] != v14[4] || word_1000D8B68[v12[1]] != v14[5]) {
      goto LABEL_7;
    }
    unsigned int v15 = v14[6];
    BOOL v16 = v15 >= *((unsigned __int16 *)v12 + 1) && *((unsigned __int16 *)v12 + 2) >= v15;
    uint64_t v3 = *((void *)v12 + 1);
    __int16 v34 = *((_WORD *)v12 + 8);
    swift_beginAccess(v11, v35, 33LL, 0LL);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
    os_signpost_id_t v37 = (void *)*v11;
    uint64_t v18 = v37;
    void *v11 = 0x8000000000000000LL;
    unint64_t v20 = sub_100016BC0(v3);
    uint64_t v21 = v18[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
      goto LABEL_31;
    }

    char v24 = v19;
    if (v18[3] < v23) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v37;
      if ((v19 & 1) == 0) {
        goto LABEL_23;
      }
    }

    else
    {
      sub_100096D9C();
      uint64_t v27 = v37;
      if ((v24 & 1) == 0) {
        goto LABEL_23;
      }
    }

void ActiveFeatureUnit.audioControlsAndProperties(scope:for:)(unsigned int a1, void *a2)
{
  if (a1 != 1735159650)
  {
    uint64_t v3 = v2;
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v55 = _swiftEmptyArrayStorage;
    uint64_t v54 = _swiftEmptyArrayStorage;
    uint64_t v5 = *(void *)(v2 + 80);
    v51[0] = _swiftEmptyArrayStorage;
    uint64_t v46 = v5;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (unint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v9 = *(void *)(v46 + 8 * i + 32);
        swift_retain(v3);
        id v10 = a2;
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_100097E74(v11, v3, a1, &v55, i, v10, &v54);
        swift_bridgeObjectRelease(v9);
        swift_release(v3);

        sub_100092BC0((uint64_t)v12, (uint64_t (*)(uint64_t, void, uint64_t))sub_1000976B4);
      }

      swift_bridgeObjectRelease(v46);
      uint64_t v13 = v55;
      uint64_t v4 = v54;
      if (!v55[2]) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2]) {
        goto LABEL_12;
      }
    }

    if (v4[2])
    {
      uint64_t v14 = 0x6E776F6E6B6E55LL;
      v51[0] = 0LL;
      v51[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(32LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      uint64_t v52 = 0xD00000000000001ELL;
      uint64_t v53 = 0x80000001000D20B0LL;
      swift_beginAccess(v3 + 16, v51, 0LL, 0LL);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
      if (Strong
        && (uint64_t v16 = Strong,
            uint64_t v17 = *(void *)(v3 + 24),
            uint64_t ObjectType = swift_getObjectType(Strong),
            char v19 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17),
            swift_unknownObjectRelease(v16, v20),
            v19))
      {
        uint64_t v14 = *(void *)&v19[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
        uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
        swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v21 = (void *)0xE700000000000000LL;
      }

      v22._countAndFlagsBits = v14;
      v22._object = v21;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(v21);
      uint64_t v23 = v53;
      sub_100029834( v52,  v53,  0xD000000000000026LL,  (void *)0x80000001000CE0F0LL,  0xD000000000000021LL,  0x80000001000D20D0LL,  171LL);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v13);
      unint64_t v25 = (objc_class *)type metadata accessor for AUASidetoneSubstituteProperty();
      char v26 = (char *)objc_allocWithZone(v25);
      *(void *)&v26[OBJC_IVAR____TtC9AUASDCore29AUASidetoneSubstituteProperty_channels] = isa;
      id v27 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
      uint64_t v28 = isa;
      id v29 = [v27 initWithSelector:1634952563 scope:1886679669 element:0];
      v50.receiver = v26;
      v50.super_class = v25;
      id v30 = objc_msgSendSuper2(&v50, "initWithAddress:propertyDataType:qualifierDataType:", v29, 1886155636, 0);

      if (v30)
      {
        id v31 = v30;
        [v31 setSettable:0];
        id v47 = v31;

        swift_bridgeObjectRetain();
        Class v32 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v4);
        uint64_t v33 = (char *)objc_allocWithZone(v25);
        *(void *)&v33[OBJC_IVAR____TtC9AUASDCore29AUASidetoneSubstituteProperty_channels] = v32;
        id v34 = objc_allocWithZone(&OBJC_CLASS___ASDPropertyAddress);
        unint64_t v35 = v32;
        id v36 = [v34 initWithSelector:1634956915 scope:1886679669 element:0];
        v49.receiver = v33;
        v49.super_class = v25;
        id v37 = objc_msgSendSuper2(&v49, "initWithAddress:propertyDataType:qualifierDataType:", v36, 1886155636, 0);

        if (v37)
        {
          id v38 = v37;
          [v38 setSettable:0];

          uint64_t v39 = (objc_class *)type metadata accessor for AUASidetoneSubstituteEnable();
          id v40 = objc_allocWithZone(v39);
          id v41 = [objc_allocWithZone(ASDPropertyAddress) initWithSelector:1634956133 scope:1886679669 element:0];
          v48.receiver = v40;
          v48.super_class = v39;
          id v42 = objc_msgSendSuper2(&v48, "initWithAddress:propertyDataType:qualifierDataType:", v41, 1886155636, 0);

          if (v42)
          {
            [v42 setSettable:0];
            uint64_t v43 = sub_100008E00(&qword_100113ED0);
            uint64_t v44 = swift_allocObject(v43, 56LL, 7LL);
            *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D89E0;
            *(void *)(v44 + 32) = v47;
            *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v38;
            *(void *)(v44 + 48) = v42;
            uint64_t v52 = v44;
            specialized Array._endMutation()(v44);
            swift_bridgeObjectRelease(v13);
            swift_bridgeObjectRelease(v4);
            return;
          }

          goto LABEL_20;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
LABEL_20:
      __break(1u);
      return;
    }

uint64_t sub_100093DB0@<X0>( unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, unint64_t a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t *a8@<X8>)
{
  int v12 = *((unsigned __int8 *)a1 + 2);
  int v13 = *a1;
  uint64_t v14 = a2 + 16;
  swift_beginAccess(a2 + 16, v62, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v14);
  if (Strong)
  {
    uint64_t v16 = Strong;
    uint64_t v17 = *(void *)(a2 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    char v19 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(ObjectType, v17);
    swift_unknownObjectRelease(v16, v20);
    if (v19)
    {
      uint64_t v21 = *(void *)&v19[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v21)
      {
        BOOL v22 = sub_10001645C(20LL, v21);

        if (v22) {
          goto LABEL_18;
        }
      }

      else
      {
      }
    }
  }

  unsigned int v23 = v13 | (v12 << 16);
  int v24 = (v23 >> 18) & 0x3C | (v13 >> 6);
  if (v24 == 7)
  {
    unint64_t v25 = a5;
    unint64_t v33 = v57;
    if (a3 == 1886679669)
    {
      unint64_t v35 = (void *)*a7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a7);
      *a7 = v35;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v35 = sub_10005085C(0LL, v35[2] + 1LL, 1, v35);
        *a7 = v35;
      }

      unint64_t v38 = v35[2];
      unint64_t v37 = v35[3];
      if (v38 >= v37 >> 1) {
        unint64_t v35 = sub_10005085C((void *)(v37 > 1), v38 + 1, 1, v35);
      }
      v35[2] = v38 + 1;
      v35[v38 + 4] = a5;
      *a7 = v35;
    }

    if ((a5 & 0x8000000000000000LL) == 0)
    {
      id v39 = objc_allocWithZone((Class)type metadata accessor for AUAGainControl());
      swift_retain(a2);
      id v40 = a6;
      uint64_t result = sub_100095568(a2, a5, v23 & 0xFFFFFF, a3, a6);
      if (!v57)
      {
LABEL_32:
        id v34 = a8;
        goto LABEL_33;
      }

uint64_t ActiveFeatureUnit.latencyControlSelector.getter()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType(result);
    BOOL v5 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3) == 32;
    swift_unknownObjectRelease(v2, v6);
    return (16 * v5);
  }

  return result;
}

unint64_t sub_1000942E0(int a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = v2 + 16;
  swift_beginAccess(v2 + 16, v28, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (!Strong) {
    goto LABEL_6;
  }
  uint64_t v9 = Strong;
  uint64_t v10 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(Strong);
  int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
  swift_unknownObjectRelease(v9, v13);
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v14) {
    sub_10001645C(20LL, v14);
  }

  if ((LockDelay.units.getter(a1) & 1) == 0)
  {
    unint64_t v24 = sub_10000AE14();
    uint64_t v25 = swift_allocError(&type metadata for AUAError, v24, 0LL, 0LL);
    *(_BYTE *)uint64_t v26 = 1;
    *(void *)(v26 + 8) = 0LL;
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v26 + 24) = 0xD000000000000021LL;
    *(void *)(v26 + 32) = 0x80000001000D2400LL;
    *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v26 + 48) = 0x80000001000D20D0LL;
    *(void *)(v26 + 56) = 223LL;
    return swift_willThrow(v25);
  }

  else
  {
LABEL_6:
    uint64_t v15 = swift_unknownObjectWeakLoadStrong(v7);
    uint64_t v16 = v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v4 + 24);
      uint64_t v18 = swift_getObjectType(v15);
      v27[3] = type metadata accessor for ActiveFeatureUnit();
      v27[4] = &protocol witness table for ActiveFeatureUnit;
      v27[0] = v4;
      swift_retain(v4);
      sub_10002D7BC(a1 & 0xFFFFFF, (uint64_t)v27, a2, v18, v17);
      unsigned int v20 = v19;
      swift_unknownObjectRelease(v16, v21);
      unint64_t result = sub_100017A40(v27);
      if (v3) {
        return result;
      }
      uint64_t v23 = v20;
    }

    else
    {
      uint64_t v23 = 0LL;
    }

    LOBYTE(v27[0]) = v16 == 0;
    return v23 | ((unint64_t)(v16 == 0) << 32);
  }

void *sub_1000944B8(int a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 16;
  swift_beginAccess(v2 + 16, v24, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (!Strong) {
    goto LABEL_6;
  }
  uint64_t v8 = Strong;
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(Strong);
  uint64_t v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
  swift_unknownObjectRelease(v8, v12);
  if (!v11) {
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v13) {
    sub_10001645C(20LL, v13);
  }

  if ((LockDelay.units.getter(a1) & 1) == 0)
  {
    unint64_t v19 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 1;
    *(void *)(v21 + 8) = 0LL;
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD000000000000023LL;
    *(void *)(v21 + 32) = 0x80000001000D23D0LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v21 + 48) = 0x80000001000D20D0LL;
    *(void *)(v21 + 56) = 236LL;
    swift_willThrow(v20);
  }

  else
  {
LABEL_6:
    uint64_t v14 = swift_unknownObjectWeakLoadStrong(v6);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(v3 + 24);
      uint64_t v17 = swift_getObjectType(v14);
      v23[3] = type metadata accessor for ActiveFeatureUnit();
      v23[4] = &protocol witness table for ActiveFeatureUnit;
      v23[0] = v3;
      swift_retain(v3);
      a2 = sub_10002DE4C(a1 & 0xFFFFFF, (uint64_t)v23, (uint64_t)a2, v17, v16);
      swift_unknownObjectRelease(v15, v18);
      sub_100017A40(v23);
    }

    else
    {
      return 0LL;
    }
  }

  return a2;
}

BOOL sub_100094674(int a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = v2 + 16;
  swift_beginAccess(v2 + 16, v31, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = *(void *)(v2 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
    swift_unknownObjectRelease(v9, v13);
    if (v12)
    {
      uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v14) {
        sub_10001645C(20LL, v14);
      }

      if ((LockDelay.units.getter(a1) & 1) == 0)
      {
        unint64_t v26 = sub_10000AE14();
        uint64_t v23 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
        *(_BYTE *)uint64_t v24 = 1;
        *(void *)(v24 + 8) = 0LL;
        *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v24 + 24) = 0xD000000000000021LL;
        *(void *)(v24 + 32) = 0x80000001000D23A0LL;
        *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
        *(void *)(v24 + 48) = 0x80000001000D20D0LL;
        uint64_t v25 = 249LL;
        goto LABEL_13;
      }
    }
  }

  uint64_t v15 = swift_unknownObjectWeakLoadStrong(v7);
  if (!v15)
  {
    uint64_t v30 = 0LL;
    memset(v29, 0, sizeof(v29));
    sub_1000178B0((uint64_t)v29, &qword_100114040);
LABEL_11:
    unint64_t v22 = sub_10000AE14();
    uint64_t v23 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    *(_BYTE *)uint64_t v24 = 1;
    *(void *)(v24 + 8) = 0LL;
    *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v24 + 24) = 0xD000000000000021LL;
    *(void *)(v24 + 32) = 0x80000001000D23A0LL;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v24 + 48) = 0x80000001000D20D0LL;
    uint64_t v25 = 257LL;
LABEL_13:
    *(void *)(v24 + 56) = v25;
    swift_willThrow(v23);
    return v20;
  }

  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v4 + 24);
  uint64_t v18 = swift_getObjectType(v15);
  v28[3] = type metadata accessor for ActiveFeatureUnit();
  v28[4] = &protocol witness table for ActiveFeatureUnit;
  v28[0] = v4;
  swift_retain(v4);
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(a1 & 0xFFFFFF, (uint64_t)v28, a2, v18, v17, (uint64_t)v29);
  swift_unknownObjectRelease(v16, v19);
  sub_100017A40(v28);
  if (!v3)
  {
    uint64_t v21 = sub_100008E00(&qword_100113EB8);
    if ((swift_dynamicCast(v28, v29, v21, &type metadata for UInt8, 6LL) & 1) != 0) {
      return LOBYTE(v28[0]) != 0;
    }
    goto LABEL_11;
  }

  return v20;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveFeatureUnit.processTargetedInterrupt(attribute:controlSelector:channelNumber:)( AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
  if (attribute)
  {
    unint64_t v5 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 2;
    *(void *)(v7 + 8) = 0LL;
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD000000000000042LL;
    *(void *)(v7 + 32) = 0x80000001000CE920LL;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v7 + 48) = 0x80000001000D20D0LL;
    uint64_t v8 = 264LL;
LABEL_17:
    *(void *)(v7 + 56) = v8;
    swift_willThrow(v6);
    return;
  }

  uint64_t v9 = v3;
  swift_beginAccess(v9 + 16, v61, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9 + 16);
  if (!Strong) {
    goto LABEL_12;
  }
  uint64_t v13 = Strong;
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t ObjectType = swift_getObjectType(Strong);
  char v16 = (*(uint64_t (**)(Swift::UInt, uint64_t, uint64_t))(v14 + 216))(controlSelector, ObjectType, v14);
  swift_unknownObjectRelease(v13, v17);
  if (v16 == 1)
  {
    uint64_t v50 = swift_unknownObjectWeakLoadStrong(v9 + 16);
    if (!v50) {
      return;
    }
    uint64_t v31 = v50;
    uint64_t v32 = *(void *)(v9 + 24);
    uint64_t v33 = swift_getObjectType(v50);
    uint64_t v34 = *(void *)(v9 + 48);
    uint64_t v35 = type metadata accessor for AUAGainControl();
    id v36 = &off_100106AE0;
    goto LABEL_21;
  }

  if (v16)
  {
LABEL_12:
    unint64_t v37 = (void *)0xEE00656369766544LL;
    uint64_t v38 = 0x206E776F6E6B6E55LL;
    uint64_t v57 = 0LL;
    uint64_t v58 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    uint64_t v39 = swift_unknownObjectWeakLoadStrong(v9 + 16);
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)(v9 + 24);
      uint64_t v42 = swift_getObjectType(v39);
      uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v42, v41);
      swift_unknownObjectRelease(v40, v44);
      if (v43)
      {
        id v45 = [v43 boxName];

        if (v45)
        {
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
          unint64_t v37 = v46;
        }
      }
    }

    v47._countAndFlagsBits = v38;
    v47._object = v37;
    String.append(_:)(v47);
    swift_bridgeObjectRelease(v37);
    v48._countAndFlagsBits = 0xD000000000000019LL;
    v48._object = (void *)0x80000001000D2100LL;
    String.append(_:)(v48);
    sub_100029834( v57,  v58,  0xD000000000000042LL,  (void *)0x80000001000CE920LL,  0xD000000000000021LL,  0x80000001000D20D0LL,  275LL);
    swift_bridgeObjectRelease(v58);
    unint64_t v49 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v49, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 2;
    *(void *)(v7 + 8) = 0LL;
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD000000000000042LL;
    *(void *)(v7 + 32) = 0x80000001000CE920LL;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v7 + 48) = 0x80000001000D20D0LL;
    uint64_t v8 = 276LL;
    goto LABEL_17;
  }

  uint64_t v18 = (void *)0xEE00656369766544LL;
  uint64_t v19 = 0x206E776F6E6B6E55LL;
  uint64_t v57 = 0LL;
  uint64_t v58 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  uint64_t v20 = swift_unknownObjectWeakLoadStrong(v9 + 16);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)(v9 + 24);
    uint64_t v23 = swift_getObjectType(v20);
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 16))(v23, v22);
    swift_unknownObjectRelease(v21, v25);
    if (v24)
    {
      id v26 = [v24 boxName];

      if (v26)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        uint64_t v18 = v27;
      }
    }
  }

  v28._countAndFlagsBits = v19;
  v28._object = v18;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v18);
  v29._countAndFlagsBits = 0xD000000000000016LL;
  v29._object = (void *)0x80000001000D2120LL;
  String.append(_:)(v29);
  sub_100029834( v57,  v58,  0xD000000000000042LL,  (void *)0x80000001000CE920LL,  0xD000000000000021LL,  0x80000001000D20D0LL,  270LL);
  swift_bridgeObjectRelease(v58);
  uint64_t v30 = swift_unknownObjectWeakLoadStrong(v9 + 16);
  if (!v30) {
    return;
  }
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v9 + 24);
  uint64_t v33 = swift_getObjectType(v30);
  uint64_t v34 = *(void *)(v9 + 48);
  uint64_t v35 = type metadata accessor for AUAMuteControl();
  id v36 = &off_100106AC0;
LABEL_21:
  uint64_t v51 = sub_10002FCF4(v34, channelNumber, v35, (uint64_t)v36, v33, v32);
  swift_unknownObjectRelease(v31, v52);
  if (v51)
  {
    uint64_t v53 = v51[2];
    if (v53)
    {
      uint64_t v54 = (uint64_t)(v51 + 4);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100017910(v54, (uint64_t)&v57);
        uint64_t v55 = v59;
        uint64_t v56 = v60;
        sub_1000178EC(&v57, v59);
        (*(void (**)(uint64_t, uint64_t))(v56 + 24))(v55, v56);
        if (v4) {
          break;
        }
        sub_100017A40(&v57);
        v54 += 40LL;
        if (!--v53) {
          goto LABEL_29;
        }
      }

      sub_100017A40(&v57);
LABEL_29:
      swift_bridgeObjectRelease_n(v51, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease(v51);
    }
  }

void *ActiveFeatureUnit.deinit()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return v0;
}

uint64_t ActiveFeatureUnit.__deallocating_deinit()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocClassInstance(v0, 120LL, 7LL);
}

uint64_t sub_100094E7C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100094E94((uint64_t (*)(void))sub_100093534, a1);
}

uint64_t sub_100094E88@<X0>(uint64_t *a1@<X8>)
{
  return sub_100094E94((uint64_t (*)(void))sub_10007FD28, a1);
}

uint64_t sub_100094E94@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 32);
  char v6 = *(_BYTE *)(*v2 + 40);
  uint64_t v7 = *(void *)(*v2 + 48);
  __int16 v16 = *(_WORD *)(*v2 + 56);
  char v8 = *(_BYTE *)(*v2 + 58);
  uint64_t v9 = *(void *)(*v2 + 64);
  __int16 v10 = *(_WORD *)(*v2 + 72);
  uint64_t v11 = *(void *)(*v2 + 80);
  uint64_t v12 = *(void *)(v4 + 88);
  uint64_t v13 = *(void *)(v4 + 96);
  a2[3] = (uint64_t)&type metadata for FeatureUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject(&unk_100106978, 88LL, 7LL);
  *a2 = v14;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *(_BYTE *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(_BYTE *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v16;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v12;
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v11);
  return swift_bridgeObjectRetain(v12);
}

uint64_t sub_100094F6C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0 + 16;
  swift_beginAccess(v2, v8, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType(result);
    LODWORD(v5) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v5 + 40))(ObjectType, v5) == 32;
    swift_unknownObjectRelease(v4, v7);
    return (16 * v5);
  }

  return result;
}

uint64_t sub_100094FEC()
{
  return *(void *)(*(void *)v0 + 48LL);
}

void sub_100094FF8(uint64_t a1, uint64_t a2)
{
}

void sub_100095018(unsigned int a1, void *a2)
{
}

void sub_100095038(AUASDCore::AUAInterruptAttribute a1, Swift::UInt a2, Swift::UInt a3)
{
}

uint64_t sub_100095058(uint64_t a1, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  int v12 = a3 & 0xFFFFFF;
  uint64_t v13 = v5;
  BOOL v14 = sub_100094674(v12, a2);
  if (v6)
  {
    swift_release(a1);

    uint64_t v15 = type metadata accessor for AUAMuteControl();
    swift_deallocPartialClassInstance(v13, v15, 32LL, 7LL);
    return (uint64_t)v13;
  }

  BOOL v16 = v14;
  *(void *)&v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit] = a1;
  *(void *)&v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel] = a2;
  uint64_t v17 = &v13[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control];
  void v17[2] = BYTE2(a3);
  *(_WORD *)uint64_t v17 = a3;
  swift_retain(a1);

  char v18 = LockDelay.units.getter(v12);
  if (!HIDWORD(a2))
  {
    char v19 = v18;
    v22.receiver = v13;
    v22.super_class = (Class)type metadata accessor for AUAMuteControl();
    uint64_t v20 = (char *)objc_msgSendSuper2( &v22,  "initWithValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:",  v16,  v19 & 1,  a2,  a4,  a5,  1836414053);
    if (v20)
    {
      uint64_t v13 = v20;
      swift_release(a1);

      return (uint64_t)v13;
    }

    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000951F4(char a1)
{
  uint64_t v2 = (unsigned __int8 *)v1;
  unsigned int v4 = [v1 controlElement];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit];
  swift_beginAccess(v5 + 16, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5 + 16);
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(v5 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    __int16 v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);
    swift_unknownObjectRelease(v7, v11);
    if (v10)
    {
      uint64_t v12 = *(void *)&v10[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
      if (v12 && sub_10001645C(6LL, v12))
      {
        sub_100029834( 0xD00000000000001DLL,  0x80000001000D2380LL,  0x615665676E616863LL,  (void *)0xEF293A5F2865756CLL,  0xD000000000000021LL,  0x80000001000D20D0LL,  319LL);
        usleep(0x1388u);
      }
    }
  }

  int v13 = v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control + 2];
  int v14 = *(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control];
  uint64_t v15 = swift_unknownObjectWeakLoadStrong(v5 + 16);
  if (v15)
  {
    uint64_t v16 = v15;
    int v17 = v14 | (v13 << 16);
    uint64_t v18 = *(void *)(v5 + 24);
    uint64_t v19 = swift_getObjectType(v15);
    __int128 v22[3] = type metadata accessor for ActiveFeatureUnit();
    v22[4] = &protocol witness table for ActiveFeatureUnit;
    v22[0] = v5;
    swift_retain(v5);
    sub_10002C7D0(v17 & 0xFFFFFF, v4, 0, v22, a1 & 1, v19, v18);
    swift_unknownObjectRelease(v16, v20);
    sub_100017A40(v22);
  }

  [v2 setValue:a1 & 1];
  return 1LL;
}

id sub_1000954B0()
{
  return sub_100092844(type metadata accessor for AUAMuteControl);
}

uint64_t sub_1000954CC()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_featureUnit) + 48LL);
}

uint64_t sub_1000954E4()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel);
}

id sub_1000954F8()
{
  uint64_t v2 = (char *)*v0;
  id result = (id)sub_100094674( *(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control] | (v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_control + 2] << 16),  *(void *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAMuteControl_channel]);
  if (!v1) {
    return [v2 setValue:result & 1];
  }
  return result;
}

uint64_t sub_100095568(uint64_t a1, unint64_t a2, int a3, unsigned int a4, void *a5)
{
  uint64_t v7 = v5;
  uint64_t v11 = OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit;
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit] = a1;
  uint64_t v12 = &v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control];
  v12[2] = BYTE2(a3);
  *(_WORD *)uint64_t v12 = a3;
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel] = a2;
  int v13 = a3 & 0xFFFFFF;
  swift_retain_n(a1, 2LL);
  uint64_t v39 = v5;
  unint64_t v14 = sub_1000942E0(v13, a2);
  if (v6)
  {
    swift_release(a1);
LABEL_7:
    swift_release(a1);

    id v21 = *(id *)&v7[v11];
    swift_release(v21);
    uint64_t v22 = type metadata accessor for AUAGainControl();
    swift_deallocPartialClassInstance(v39, v22, 44LL, 7LL);
    return (uint64_t)v21;
  }

  unint64_t v15 = v14;
  unsigned int v38 = a4;
  swift_release(a1);
  if ((v15 & 0x100000000LL) != 0)
  {
    unint64_t v17 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000036LL;
    *(void *)(v19 + 32) = 0x80000001000D2450LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v19 + 48) = 0x80000001000D20D0LL;
    uint64_t v20 = 360LL;
LABEL_6:
    *(void *)(v19 + 56) = v20;
    swift_willThrow(v18);
    goto LABEL_7;
  }

  uint64_t v16 = *(void *)&v5[v11];
  swift_retain(*(void *)&v7[v11]);
  uint64_t v24 = sub_1000944B8(v13, (void *)a2);
  swift_release(v16);
  if (!v24)
  {
    unint64_t v36 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000036LL;
    *(void *)(v19 + 32) = 0x80000001000D2450LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v19 + 48) = 0x80000001000D20D0LL;
    uint64_t v20 = 361LL;
    goto LABEL_6;
  }

  if (v24[2] != 1LL)
  {
    swift_bridgeObjectRelease(v24);
    unint64_t v37 = sub_10000AE14();
    uint64_t v18 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
    *(_BYTE *)uint64_t v19 = 107;
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v19 + 24) = 0xD000000000000036LL;
    *(void *)(v19 + 32) = 0x80000001000D2450LL;
    *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD000000000000021LL;
    *(void *)(v19 + 48) = 0x80000001000D20D0LL;
    uint64_t v20 = 363LL;
    goto LABEL_6;
  }

  int v25 = *((_DWORD *)v24 + 10);
  uint64_t v26 = v24[4];
  swift_bridgeObjectRelease(v24);
  char v27 = &v39[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_range];
  *(void *)char v27 = v26;
  *((_DWORD *)v27 + 2) = v25;

  int v28 = *(_DWORD *)v27;
  int v29 = *((_DWORD *)v27 + 1);
  char v30 = LockDelay.units.getter(v13);
  if (!HIDWORD(a2))
  {
    char v31 = v30;
    v41.receiver = v39;
    v41.super_class = (Class)type metadata accessor for AUAGainControl();
    LODWORD(v32) = v15;
    LODWORD(v33) = v28;
    LODWORD(v34) = v29;
    id v35 = objc_msgSendSuper2( &v41,  "initWithDecibelValue:minimumValue:maximumValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:",  v31 & 1,  a2,  v38,  a5,  1986817381,  v32,  v33,  v34);
    if (v35)
    {
      id v21 = v35;
      swift_release(a1);

      return (uint64_t)v21;
    }

    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10009591C(float a1)
{
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (uint64_t)[v1 controlElement];
  uint64_t v7 = *(void *)(*(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit] + 80LL);
  if (*(void *)(v7 + 16) <= (unint64_t)result)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v8 = *(void *)(v7 + 8LL * result + 32);
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    return 0LL;
  }
  uint64_t v41 = *(void *)&v1[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit];
  unint64_t v40 = result;
  id v39 = v1;
  uint64_t v42 = &v51;
  swift_bridgeObjectRetain_n(v8, 2LL);
  uint64_t v10 = 32LL;
  uint64_t v45 = v8;
  while (1)
  {
    uint64_t v48 = v9;
    int v11 = *(unsigned __int8 *)(v8 + v10 + 2);
    int v12 = *(unsigned __int16 *)(v8 + v10);
    *((void *)&v51 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
    int v43 = v12;
    int v44 = v11;
    BYTE2(v5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v11;
    LOWORD(v5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v12;
    uint64_t v13 = Mirror.init(reflecting:)(&v50);
    unint64_t v14 = v5;
    unint64_t v15 = (void *)Mirror.children.getter(v13);
    uint64_t v16 = v15[2];
    uint64_t v17 = v15[3];
    uint64_t v18 = v15[4];
    uint64_t v19 = v15[5];
    uint64_t ObjectType = swift_getObjectType(v16);
    swift_unknownObjectRetain(v16);
    swift_unknownObjectRetain(v18);
    uint64_t v21 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v17);
    uint64_t v22 = swift_getObjectType(v18);
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v22, v19);
    if (v21 != result)
    {
      __break(1u);
      goto LABEL_26;
    }

    char v23 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v18, v19, ObjectType, v17);
    swift_unknownObjectRelease(v18, v24);
    if ((v23 & 1) != 0)
    {
      swift_unknownObjectRelease(v16, v25);
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v50 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v16, v17);
      __int128 v50 = v49[0];
      __int128 v51 = v49[1];
      __int128 v52 = v49[2];
      swift_unknownObjectRelease(v16, v26);
    }

    uint64_t v5 = v14;
    uint64_t v8 = v45;
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
    if (!*((void *)&v52 + 1))
    {
      sub_1000178B0((uint64_t)&v50, &qword_100113CD0);
      goto LABEL_5;
    }

    uint64_t v27 = *((void *)&v50 + 1);
    uint64_t v28 = v50;
    sub_100017A40(v42);
    if (!v27) {
      goto LABEL_5;
    }
    if (v28 == 0x656D756C6F76LL && v27 == 0xE600000000000000LL) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, 0x656D756C6F76LL, 0xE600000000000000LL, 0LL);
    swift_bridgeObjectRelease(v27);
    if ((v29 & 1) != 0)
    {
      uint64_t v27 = v8;
      goto LABEL_18;
    }

unint64_t sub_100095E3C()
{
  uint64_t v2 = v0;
  unint64_t result = sub_1000942E0( *(unsigned __int16 *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control] | (v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_control + 2] << 16),  *(void *)&v2[OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel]);
  if (v1) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = (result & (unint64_t)&_mh_execute_header) == 0;
  }
  if (v4)
  {
    float v5 = *(float *)&result;
    id v6 = [v0 owner];
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = type metadata accessor for AUAAudioDevice(0LL);
      uint64_t v10 = swift_dynamicCastClass(v8, v9);
      if (v10)
      {
        int v11 = (void *)v10;
        uint64_t v22 = 0LL;
        uint64_t v23 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(49LL);
        v12._countAndFlagsBits = 0xD000000000000026LL;
        v12._object = (void *)0x80000001000D2240LL;
        String.append(_:)(v12);
        id v13 = [v11 deviceName];
        if (v13)
        {
          unint64_t v14 = v13;
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          uint64_t v17 = v16;
        }

        else
        {
          uint64_t v17 = (void *)0xE700000000000000LL;
          uint64_t v15 = 0x6E776F6E6B6E55LL;
        }

        v18._countAndFlagsBits = v15;
        v18._object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease(v17);
        v19._countAndFlagsBits = 544175136LL;
        v19._object = (void *)0xE400000000000000LL;
        String.append(_:)(v19);
        Float.write<A>(to:)( &v22,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v5);
        v20._countAndFlagsBits = 4351008LL;
        v20._object = (void *)0xE300000000000000LL;
        String.append(_:)(v20);
        uint64_t v21 = v23;
        sub_100029834( v22,  v23,  0xD000000000000015LL,  (void *)0x80000001000CE220LL,  0xD000000000000021LL,  0x80000001000D20D0LL,  416LL);

        swift_bridgeObjectRelease(v21);
      }

      else
      {
      }
    }

    *(float *)&double v7 = v5;
    return (unint64_t)objc_msgSend(v2, "setDecibelValue:", v7, v22, v23);
  }

  return result;
}

id sub_100096084()
{
  return sub_100092844(type metadata accessor for AUAGainControl);
}

uint64_t sub_1000960A0()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAGainControl_featureUnit) + 48LL);
}

uint64_t sub_1000960B8()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore14AUAGainControl_channel);
}

unint64_t sub_1000960CC()
{
  return sub_100095E3C();
}

Swift::Int sub_1000960EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100008E00((uint64_t *)&unk_100113460);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_1000963C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100008E00(&qword_100113498);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    uint64_t v33 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v31 = -1LL << v11;
    uint64_t v32 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_34;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_41;
              }

              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

uint64_t sub_10009665C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100008E00(&qword_100113428);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    char v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

uint64_t sub_100096958(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100008E00(&qword_1001134A8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    char v34 = a2;
    uint64_t v33 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v31 = -1LL << v11;
    uint64_t v32 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }

      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v19 >= v14) {
          goto LABEL_34;
        }
        unint64_t v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v14) {
            goto LABEL_34;
          }
          unint64_t v20 = v10[v9];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_41;
              }

              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_43;
                }
                if (v9 >= v14) {
                  goto LABEL_34;
                }
                unint64_t v20 = v10[v9];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v9 = v21;
          }
        }

void *sub_100096BF4()
{
  uint64_t v1 = v0;
  sub_100008E00((uint64_t *)&unk_100113460);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_100096D9C()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_100113498);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_100096F2C()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_100113428);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_100097110()
{
  uint64_t v1 = v0;
  sub_100008E00(&qword_1001134A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }

uint64_t sub_10009729C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000981B8(&qword_100115FC8, &qword_100115FC0);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100008E00(&qword_100115FC0);
          int64_t v13 = sub_1000304A8(v18, i, a3);
          id v15 = *v14;
          ((void (*)(uint64_t (**)(), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000974B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000981B8(&qword_100116000, &qword_100115FF8);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100008E00(&qword_100115FF8);
          int64_t v13 = sub_1000304FC(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000976B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000981B8(&qword_100116010, &qword_100116008);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100008E00(&qword_100116008);
          int64_t v13 = sub_1000304A8(v18, i, a3);
          id v15 = *v14;
          ((void (*)(uint64_t (**)(), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1000978C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000981B8(&qword_100115FF0, &qword_100115FE0);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100008E00(&qword_100115FE0);
          int64_t v13 = sub_1000304A8(v18, i, a3);
          id v15 = *v14;
          ((void (*)(uint64_t (**)(), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_100097ADC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000981B8(&qword_100115FD8, &qword_100115FD0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_100008E00(&qword_100115FD0);
          int64_t v13 = sub_100030450(v18, i, a3);
          uint64_t v15 = *v14;
          swift_retain(*v14);
          ((void (*)(uint64_t **, void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void *sub_100097CE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v7 = (void *)*v4;
  int64_t v8 = *(void *)(*v4 + 16LL);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)result || v9 > v7[3] >> 1) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v13 = v8 + v6;
      }
      else {
        int64_t v13 = v8;
      }
      uint64_t result = sub_10004F1A4(result, v13, 1, v7);
      uint64_t v7 = result;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }

    goto LABEL_22;
  }

void *sub_100097E74( uint64_t a1, uint64_t a2, unsigned int a3, void *a4, unint64_t a5, void *a6, void *a7)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = 32LL;
    do
    {
      unsigned __int16 v15 = *(_WORD *)(a1 + v13);
      char v26 = *(_BYTE *)(a1 + v13 + 2);
      unsigned __int16 v25 = v15;
      uint64_t v16 = sub_100093DB0(&v25, a2, a3, a4, a5, a6, a7, &v24);
      if (v7)
      {
        swift_bridgeObjectRelease(a1);
        return (void *)swift_bridgeObjectRelease(v27);
      }

      uint64_t v17 = v24;
      if (v24)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        unint64_t v19 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v18 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v19 >= v18 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1LL);
        }
        uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
        specialized Array._endMutation()(v14);
      }

      v13 += 3LL;
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease(a1);
    return (void *)v27;
  }

  return result;
}

uint64_t type metadata accessor for AUAGainControl()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore14AUAGainControl);
}

uint64_t type metadata accessor for AUAMuteControl()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore14AUAMuteControl);
}

unint64_t sub_100097FF8()
{
  unint64_t result = qword_100115DD0;
  if (!qword_100115DD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAFeatureUnitControlSelector,  &type metadata for AUAFeatureUnitControlSelector);
    atomic_store(result, (unint64_t *)&qword_100115DD0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AUAFeatureUnitControlSelector(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

uint64_t storeEnumTagSinglePayload for AUAFeatureUnitControlSelector( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_100098118 + 4 * byte_1000D89F5[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_10009814C + 4 * byte_1000D89F0[v4]))();
}

uint64_t sub_10009814C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_100098154(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10009815CLL);
  }
  return result;
}

uint64_t sub_100098168(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x100098170LL);
  }
  *(_BYTE *)unint64_t result = a2 + 15;
  return result;
}

uint64_t sub_100098174(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_10009817C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAFeatureUnitControlSelector()
{
  return &type metadata for AUAFeatureUnitControlSelector;
}

uint64_t type metadata accessor for ActiveFeatureUnit()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore17ActiveFeatureUnit);
}

uint64_t sub_1000981B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000175B0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000981F8(unsigned __int16 a1)
{
  if ((a1 & 0x80) == 0) {
    return 0LL;
  }
  char v3 = a1;
  uint64_t result = HIBYTE(a1);
  unsigned int v4 = v3 & 0xF;
  if (a1 < 0x100u || (v3 & 0xF) != 0)
  {
    if (v4 > 1)
    {
      if (v4 == 2)
      {
        uint64_t v6 = 512LL;
        if ((v3 & 0x40) == 0) {
          uint64_t v6 = 1280LL;
        }
        return v6 | result | 0x1000000;
      }

      else
      {
        sub_100029840( 0xD000000000000026LL,  0x80000001000D2510LL,  0xD000000000000011LL,  (void *)0x80000001000D2540LL,  0xD00000000000001CLL,  0x80000001000D24B0LL,  33LL);
        unint64_t v7 = sub_10000AE14();
        uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
        *(_BYTE *)uint64_t v9 = 2;
        *(void *)(v9 + 8) = 0LL;
        *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v9 + 24) = 0xD000000000000011LL;
        *(void *)(v9 + 32) = 0x80000001000D2540LL;
        *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
        *(void *)(v9 + 48) = 0x80000001000D24B0LL;
        *(void *)(v9 + 56) = 34LL;
        return swift_willThrow(v8);
      }
    }

    else
    {
      uint64_t v5 = 512LL;
      if ((v3 & 0x40) == 0) {
        uint64_t v5 = 1280LL;
      }
      return v5 | result | 0x1000000;
    }
  }

  return result;
}

void *sub_100098384()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v94 = v1;
  uint64_t v2 = v0 + 184;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    unsigned int v4 = (void *)Strong;
    uint64_t v5 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v5)
    {
      BOOL v6 = sub_10001645C(3LL, v5);
      swift_bridgeObjectRetain();

      if (v6)
      {
        uint64_t v7 = 1LL;
        goto LABEL_19;
      }
    }

    else
    {
      swift_bridgeObjectRetain();
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  if (qword_100112938 != -1) {
    swift_once(&qword_100112938, sub_1000B99F4);
  }
  uint64_t v8 = *(void **)(qword_1001172A8 + 16);
  if (v8)
  {
    id v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 stringForKey:v10];

    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      if (v12 == 0x656C676E6973LL && v14 == 0xE600000000000000LL)
      {
        swift_bridgeObjectRelease(0xE600000000000000LL);
        uint64_t v7 = 1LL;
      }

      else
      {
        uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0x656C676E6973LL, 0xE600000000000000LL, 0LL);
        swift_bridgeObjectRelease(v14);
      }
    }

    else
    {

      uint64_t v7 = 0LL;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

LABEL_112:
    swift_bridgeObjectRelease(v1);
    uint64_t v1 = v94;
    if ((unint64_t)v94 >> 62)
    {
      if (v94 < 0) {
        unint64_t v70 = v94;
      }
      else {
        unint64_t v70 = v94 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v70);
      swift_bridgeObjectRelease(v1);
      if (v71 <= 0)
      {
LABEL_119:
        swift_bridgeObjectRelease(v1);
        return v27;
      }
    }

    else if (*(uint64_t *)((v94 & 0xFFFFFFFFFFFFF8LL) + 0x10) <= 0)
    {
      goto LABEL_119;
    }
  }

  if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_45;
  }
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
  return result;
}

void sub_100098D94(int a1, unint64_t a2, char a3, void *a4)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  __int16 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(void *__return_ptr, uint64_t, uint64_t);
  void *v93;
  id v94;
  __int16 v95;
  unsigned __int8 v96;
  __int16 v97;
  unint64_t v98;
  __int16 v99;
  unsigned int v100;
  uint64_t v101;
  void v102[5];
  unint64_t v103;
  unsigned int v104;
  ValueMetadata *v105;
  _UNKNOWN **v106;
  void v107[3];
  uint64_t v108;
  uint64_t v109;
  void v110[3];
  uint64_t v111;
  uint64_t v112;
  void v113[3];
  uint64_t v114;
  uint64_t v115;
  uint64_t v6 = v4;
  uint64_t v101 = 0LL;
  unsigned int v10 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v11 = USBDescriptorControl.pbLayout()();
  __int16 v12 = sub_100079084(v11);
  if (!v5)
  {
    __int16 v14 = v12;
    unsigned __int16 v15 = v13;
    unint64_t v96 = v11;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6 + 184);
    if (!Strong)
    {
      unint64_t v27 = sub_10000AE14();
      uint64_t v28 = swift_allocError(&type metadata for AUAError, v27, 0LL, 0LL);
      *(_BYTE *)uint64_t v29 = 7;
      *(void *)(v29 + 8) = 0LL;
      *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v29 + 24) = 0xD00000000000002ALL;
      *(void *)(v29 + 32) = 0x80000001000CEAF0LL;
      *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
      *(void *)(v29 + 48) = 0x80000001000D24B0LL;
      *(void *)(v29 + 56) = 140LL;
      swift_willThrow(v28);
LABEL_16:

      return;
    }

    uint64_t v17 = (void *)Strong;
    uint64_t v95 = v14;
    unint64_t v97 = sub_10007BFBC(v10);
    if ((a3 & 1) != 0) {
      unint64_t v18 = 0LL;
    }
    else {
      unint64_t v18 = a2;
    }
    uint64_t v98 = v18;
    uint64_t v19 = a4[3];
    uint64_t v20 = a4[4];
    sub_1000178EC(a4, v19);
    id v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v20 + 8);
    NSString v22 = v15;
    v21(v113, v19, v20);
    id v23 = v114;
    uint64_t v24 = v115;
    sub_1000178EC(v113, v114);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
    uint64_t v26 = *(void *)(v6 + 16);
    sub_1000B6284(0x82u, 1, 1, v97, v98, v25, *(_BYTE *)(v26 + 2), v22, (uint64_t)&v101);
    uint64_t v91 = v26;
    uint64_t v92 = v21;
    unint64_t v93 = v17;
    uint64_t v30 = sub_100017A40(v113);
    unsigned __int16 v15 = v22;
    uint64_t v31 = v101;
    unint64_t v32 = NSData.startIndex.getter(v30);
    uint64_t v33 = NSData.endIndex.getter();
    uint64_t v34 = NSData.startIndex.getter(v33);
    uint64_t v94 = v15;
    uint64_t v35 = NSData.endIndex.getter();
    if (v32 < v34 || v35 < v32)
    {
      __break(1u);
    }

    else
    {
      uint64_t v36 = NSData.startIndex.getter(v35);
      uint64_t v37 = NSData.endIndex.getter();
      if (v33 >= v36 && v37 >= v33)
      {
        if (!__OFSUB__(v33, v32))
        {
          if (v31 == v33 - v32)
          {
            ADCControlRequestParameterBlock.getCur()(v15, v95 & 0x1FF, (uint64_t)v113);
            uint64_t v17 = 0LL;
            v21(v110, v19, v20);
            uint64_t v41 = v111;
            uint64_t v42 = v112;
            sub_1000178EC(v110, v111);
            uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
            sub_1000B6284(0x83u, 1, 1, v97, v98, v43, *(_BYTE *)(v91 + 2), v15, (uint64_t)&v101);
            uint64_t v99 = v95 & 0x1FF;

            int v44 = sub_100017A40(v110);
            uint64_t v45 = v101;
            uint64_t v46 = NSData.startIndex.getter(v44);
            uint64_t v47 = NSData.endIndex.getter();
            uint64_t v48 = NSData.startIndex.getter(v47);
            unint64_t v49 = NSData.endIndex.getter();
            if (v46 < v48 || v49 < v46)
            {
              __break(1u);
            }

            else
            {
              uint64_t v50 = NSData.startIndex.getter(v49);
              uint64_t v51 = NSData.endIndex.getter();

              if (v47 >= v50 && v51 >= v47)
              {
                if (!__OFSUB__(v47, v46))
                {
                  if (v45 != v47 - v46)
                  {

                    uint64_t v52 = sub_10000AE14();
                    uint64_t v53 = swift_allocError(&type metadata for AUAError, v52, 0LL, 0LL);
                    *(_BYTE *)uint64_t v54 = 28;
                    *(void *)(v54 + 8) = 0LL;
                    *(void *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                    *(void *)(v54 + 24) = 0xD00000000000002ALL;
                    *(void *)(v54 + 32) = 0x80000001000CEAF0LL;
                    *(void *)(v54 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                    *(void *)(v54 + 48) = 0x80000001000D24B0LL;
                    *(void *)(v54 + 56) = 162LL;
                    swift_willThrow(v53);

LABEL_26:
                    sub_100017A40(v113);
                    return;
                  }

                  ADCControlRequestParameterBlock.getCur()(v94, v99, (uint64_t)v110);
                  v92(v107, v19, v20);
                  uint64_t v55 = v108;
                  unint64_t v56 = v109;
                  sub_1000178EC(v107, v108);
                  unint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v55, v56);
                  sub_1000B6284(0x84u, 1, 1, v97, v98, v57, *(_BYTE *)(v91 + 2), v94, (uint64_t)&v101);

                  uint64_t v58 = sub_100017A40(v107);
                  uint64_t v59 = v101;
                  uint64_t v60 = NSData.startIndex.getter(v58);
                  uint64_t v61 = NSData.endIndex.getter();
                  unint64_t v62 = NSData.startIndex.getter(v61);
                  unint64_t v63 = NSData.endIndex.getter();
                  if (v60 < v62 || v63 < v60)
                  {
                    __break(1u);
                  }

                  else
                  {
                    id v64 = NSData.startIndex.getter(v63);
                    uint64_t v65 = NSData.endIndex.getter();

                    if (v61 >= v64 && v65 >= v61)
                    {
                      if (!__OFSUB__(v61, v60))
                      {
                        if (v59 != v61 - v60)
                        {

                          int64_t v66 = sub_10000AE14();
                          uint64_t v67 = swift_allocError(&type metadata for AUAError, v66, 0LL, 0LL);
                          *(_BYTE *)uint64_t v68 = 28;
                          *(void *)(v68 + 8) = 0LL;
                          *(void *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                          *(void *)(v68 + 24) = 0xD00000000000002ALL;
                          *(void *)(v68 + 32) = 0x80000001000CEAF0LL;
                          *(void *)(v68 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                          *(void *)(v68 + 48) = 0x80000001000D24B0LL;
                          *(void *)(v68 + 56) = 174LL;
                          swift_willThrow(v67);

LABEL_35:
                          sub_100017A40(v110);
                          goto LABEL_26;
                        }

                        ADCControlRequestParameterBlock.getCur()(v94, v99, (uint64_t)v107);

                        if (v96 != 2)
                        {
                          if (v96 != 1)
                          {
                            if (v96)
                            {
                              int v78 = sub_10000AE14();
                              uint64_t v79 = swift_allocError(&type metadata for AUAError, v78, 0LL, 0LL);
                              *(_BYTE *)uint64_t v80 = 30;
                              *(void *)(v80 + 8) = 0LL;
                              *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                              *(void *)(v80 + 24) = 0xD00000000000002ALL;
                              *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                              *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                              *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                              uint64_t v81 = 197LL;
                            }

                            else
                            {
                              sub_100017910((uint64_t)v113, (uint64_t)v102);
                              uint64_t v69 = sub_100008E00(&qword_100113EB8);
                              if (swift_dynamicCast(&v100, v102, v69, &type metadata for UInt8, 6LL))
                              {
                                unint64_t v70 = v100;
                                sub_100017910((uint64_t)v110, (uint64_t)v102);
                                if (swift_dynamicCast(&v100, v102, v69, &type metadata for UInt8, 6LL))
                                {
                                  uint64_t v71 = v100;
                                  sub_100017910((uint64_t)v107, (uint64_t)v102);
                                  if (swift_dynamicCast(&v100, v102, v69, &type metadata for UInt8, 6LL))
                                  {
                                    uint64_t v105 = &type metadata for AudioClassRange8bit;
                                    unint64_t v106 = &off_100105C28;
                                    LOBYTE(v103) = v70;
                                    BYTE1(v103) = v71;
                                    BYTE2(v103) = v100;
                                    goto LABEL_54;
                                  }

                                  uint64_t v88 = sub_10000AE14();
                                  uint64_t v79 = swift_allocError(&type metadata for AUAError, v88, 0LL, 0LL);
                                  *(_BYTE *)uint64_t v80 = 1;
                                  *(void *)(v80 + 8) = 0LL;
                                  *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                                  *(void *)(v80 + 24) = 0xD00000000000002ALL;
                                  *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                                  *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                                  *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                                  uint64_t v81 = 182LL;
                                }

                                else
                                {
                                  uint64_t v85 = sub_10000AE14();
                                  uint64_t v79 = swift_allocError(&type metadata for AUAError, v85, 0LL, 0LL);
                                  *(_BYTE *)uint64_t v80 = 1;
                                  *(void *)(v80 + 8) = 0LL;
                                  *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                                  *(void *)(v80 + 24) = 0xD00000000000002ALL;
                                  *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                                  *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                                  *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                                  uint64_t v81 = 181LL;
                                }
                              }

                              else
                              {
                                unsigned int v82 = sub_10000AE14();
                                uint64_t v79 = swift_allocError(&type metadata for AUAError, v82, 0LL, 0LL);
                                *(_BYTE *)uint64_t v80 = 1;
                                *(void *)(v80 + 8) = 0LL;
                                *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                                *(void *)(v80 + 24) = 0xD00000000000002ALL;
                                *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                                *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                                *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                                uint64_t v81 = 180LL;
                              }
                            }

LABEL_70:
                            *(void *)(v80 + 56) = v81;
                            swift_willThrow(v79);

                            goto LABEL_71;
                          }

                          sub_100017910((uint64_t)v113, (uint64_t)v102);
                          uint64_t v75 = sub_100008E00(&qword_100113EB8);
                          if (!swift_dynamicCast(&v100, v102, v75, &type metadata for UInt16, 6LL))
                          {
                            os_signpost_id_t v84 = sub_10000AE14();
                            uint64_t v79 = swift_allocError(&type metadata for AUAError, v84, 0LL, 0LL);
                            *(_BYTE *)uint64_t v80 = 1;
                            *(void *)(v80 + 8) = 0LL;
                            *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                            *(void *)(v80 + 24) = 0xD00000000000002ALL;
                            *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                            *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                            *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                            uint64_t v81 = 185LL;
                            goto LABEL_70;
                          }

                          uint64_t v76 = v100;
                          sub_100017910((uint64_t)v110, (uint64_t)v102);
                          if (!swift_dynamicCast(&v100, v102, v75, &type metadata for UInt16, 6LL))
                          {
                            __int128 v87 = sub_10000AE14();
                            uint64_t v79 = swift_allocError(&type metadata for AUAError, v87, 0LL, 0LL);
                            *(_BYTE *)uint64_t v80 = 1;
                            *(void *)(v80 + 8) = 0LL;
                            *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                            *(void *)(v80 + 24) = 0xD00000000000002ALL;
                            *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                            *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                            *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                            uint64_t v81 = 186LL;
                            goto LABEL_70;
                          }

                          unint64_t v77 = v100;
                          sub_100017910((uint64_t)v107, (uint64_t)v102);
                          if (!swift_dynamicCast(&v100, v102, v75, &type metadata for UInt16, 6LL))
                          {
                            uint64_t v90 = sub_10000AE14();
                            uint64_t v79 = swift_allocError(&type metadata for AUAError, v90, 0LL, 0LL);
                            *(_BYTE *)uint64_t v80 = 1;
                            *(void *)(v80 + 8) = 0LL;
                            *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
                            *(void *)(v80 + 24) = 0xD00000000000002ALL;
                            *(void *)(v80 + 32) = 0x80000001000CEAF0LL;
                            *(void *)(v80 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
                            *(void *)(v80 + 48) = 0x80000001000D24B0LL;
                            uint64_t v81 = 187LL;
                            goto LABEL_70;
                          }

                          uint64_t v105 = &type metadata for AudioClassRange16bit;
                          unint64_t v106 = &off_100105C60;
                          LOWORD(v103) = v76;
                          WORD1(v103) = v77;
                          WORD2(v103) = v100;
                          goto LABEL_54;
                        }

LABEL_65:
                __break(1u);
LABEL_66:

                sub_100017A40(&v103);
                sub_100017A40(v107);
                sub_100017A40(v110);
                sub_100017A40(v113);
                return;
              }
            }

            __break(1u);
            goto LABEL_65;
          }

          uint64_t v38 = sub_10000AE14();
          uint64_t v39 = swift_allocError(&type metadata for AUAError, v38, 0LL, 0LL);
          *(_BYTE *)uint64_t v40 = 28;
          *(void *)(v40 + 8) = 0LL;
          *(void *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          *(void *)(v40 + 24) = 0xD00000000000002ALL;
          *(void *)(v40 + 32) = 0x80000001000CEAF0LL;
          *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
          *(void *)(v40 + 48) = 0x80000001000D24B0LL;
          *(void *)(v40 + 56) = 150LL;
          swift_willThrow(v39);

          goto LABEL_16;
        }

uint64_t sub_100099C78(int a1, uint64_t a2)
{
  uint64_t v5 = sub_100008E00(&qword_100113420);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
  *(void *)(v6 + 56) = &type metadata for Int32;
  *(void *)(v6 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v6 + 32) = a1;
  *(void *)(v6 + 96) = &type metadata for Int;
  *(void *)(v6 + 104) = &protocol witness table for Int;
  *(void *)(v6 + 72) = a2;
  uint64_t v7 = String.init(format:_:)(0xD000000000000039LL, 0x80000001000D24D0LL, v6);
  uint64_t v9 = v8;
  sub_100029834( v7,  v8,  0xD000000000000029LL,  (void *)0x80000001000CDD90LL,  0xD00000000000001CLL,  0x80000001000D24B0LL,  222LL);
  swift_bridgeObjectRelease(v9);
  if (a2 == 2)
  {
    swift_beginAccess(v2 + 216, v15, 0LL, 0LL);
    unsigned int v10 = *(void **)(v2 + 216);
    if (v10) {
      return sub_1000981F8(*(_WORD *)[v10 bytes]);
    }
  }

  unint64_t v12 = sub_10000AE14();
  uint64_t v13 = swift_allocError(&type metadata for AUAError, v12, 0LL, 0LL);
  *(_BYTE *)uint64_t v14 = 2;
  *(void *)(v14 + 8) = 0LL;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v14 + 24) = 0xD000000000000029LL;
  *(void *)(v14 + 32) = 0x80000001000CDD90LL;
  *(void *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
  *(void *)(v14 + 48) = 0x80000001000D24B0LL;
  *(void *)(v14 + 56) = 227LL;
  return swift_willThrow(v13);
}

uint64_t type metadata accessor for ADC1Function()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore12ADC1Function);
}

uint64_t sub_100099E38()
{
  return 133LL;
}

uint64_t sub_100099E40(int a1, uint64_t a2)
{
  uint64_t result = sub_100099C78(a1, a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_100099E64()
{
  unint64_t v0 = sub_10000AE14();
  uint64_t v1 = swift_allocError(&type metadata for AUAError, v0, 0LL, 0LL);
  *(_BYTE *)uint64_t v2 = 1;
  *(void *)(v2 + 8) = 0LL;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v2 + 24) = 0xD000000000000021LL;
  *(void *)(v2 + 32) = 0x80000001000CDDE0LL;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
  *(void *)(v2 + 48) = 0x80000001000D24B0LL;
  *(void *)(v2 + 56) = 206LL;
  return swift_willThrow(v1);
}

uint64_t sub_100099EF4(int a1, unint64_t a2, char a3, void *a4)
{
  return v4 & 0x1FF;
}

void sub_100099F24(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    swift_bridgeObjectRelease(v121);
    swift_bridgeObjectRelease(v142);
    swift_bridgeObjectRelease(v153);
    uint64_t v114 = v155;
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v114);
    unint64_t v115 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v115, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 32;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = v117 | 0x8000000000000000LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = v116 | 0x8000000000000000LL;
    uint64_t v13 = 336LL;
LABEL_13:
    *(void *)(v12 + 56) = v13;
    swift_willThrow(v11);
    return;
  }

  sub_10007BFC4(*(void *)(a1 + 32), *(_WORD *)(a1 + 40));
  if (v3) {
    return;
  }
  if (v9[2] != a2)
  {
    unint64_t v14 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v14, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 75;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = 0x80000001000CDE90LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = 0x80000001000D24B0LL;
    uint64_t v13 = 236LL;
    goto LABEL_13;
  }

  if (!v9[3])
  {
    unint64_t v15 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 74;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = 0x80000001000CDE90LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = 0x80000001000D24B0LL;
    uint64_t v13 = 237LL;
    goto LABEL_13;
  }

  if (v9[5] != 1)
  {
    unint64_t v16 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 72;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = 0x80000001000CDE90LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = 0x80000001000D24B0LL;
    uint64_t v13 = 238LL;
    goto LABEL_13;
  }

  if (v9[6] != 2)
  {
    unint64_t v17 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 73;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = 0x80000001000CDE90LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = 0x80000001000D24B0LL;
    uint64_t v13 = 239LL;
    goto LABEL_13;
  }

  if (v9[7])
  {
    unint64_t v10 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v10, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 76;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v12 + 24) = 0xD000000000000030LL;
    *(void *)(v12 + 32) = 0x80000001000CDE90LL;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001CLL;
    *(void *)(v12 + 48) = 0x80000001000D24B0LL;
    uint64_t v13 = 240LL;
    goto LABEL_13;
  }

  uint64_t v131 = a3;
  uint64_t v119 = v9[4];
  uint64_t v120 = (uint64_t)v9;
  v155 = &_swiftEmptySetSingleton;
  uint64_t v153 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain(a1);
  uint64_t v141 = 0LL;
  uint64_t v142 = 0LL;
  uint64_t v18 = 0LL;
  char v130 = 0;
  int v133 = 0;
  int v19 = 0;
  uint64_t v126 = 0LL;
  uint64_t v127 = 0LL;
  uint64_t v124 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v121 = a1;
  uint64_t v122 = 0LL;
  char v123 = 0;
  uint64_t v21 = 0LL;
  unint64_t v22 = 0LL;
  uint64_t v140 = -v5;
  uint64_t v128 = a1 + 41;
  unint64_t v129 = v5;
  uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
  __int16 v125 = -256;
  BOOL v118 = 1;
  unint64_t v117 = (unint64_t)"rol:onInterface:)";
  unint64_t v116 = (unint64_t)"_TtC9AUASDCore12ADC1Function";
  char v137 = 1;
  char v138 = 1;
  __int16 v4 = _swiftEmptyArrayStorage;
  do
  {
    char v139 = v130 & 1;
    unint64_t v23 = v129;
    if (v22 > v129) {
      unint64_t v23 = v22;
    }
    uint64_t v143 = -(uint64_t)v23;
    uint64_t v24 = (unsigned __int8 *)(v128 + 16 * v22);
    unint64_t v25 = v22 + 1;
    uint64_t v146 = v20;
    uint64_t v26 = v21;
    int v132 = v19;
    while (1)
    {
      if (v143 + v25 == 1) {
        goto LABEL_149;
      }
      unint64_t v148 = v25;
      uint64_t v150 = v26;
      uint64_t v26 = *(void *)(v24 - 9);
      int v27 = *v24;
      __int16 v28 = *(v24 - 1) | (unsigned __int16)((_WORD)v27 << 8);
      if ((_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v26, v28) & 1) != 0) {
        goto LABEL_17;
      }
      __int128 v147 = (const IOUSBEndpointDescriptor *)v26;
      if (v27 != 17) {
        break;
      }
      if (qword_1001128F0 != -1) {
        swift_once(&qword_1001128F0, sub_10002984C);
      }
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_100008EC4(v29, (uint64_t)qword_1001171F8);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.error.getter();
      uint64_t v144 = v18;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc(12LL, -1LL);
        uint64_t v34 = swift_slowAlloc(32LL, -1LL);
        v152[0] = v34;
        *(_DWORD *)uint64_t v33 = 136446210;
        uint64_t v35 = sub_1000298B4( 0xD000000000000027LL,  0x80000001000D25D0LL,  0xD000000000000030LL,  (void *)0x80000001000CDE90LL,  0xD00000000000001CLL,  0x80000001000D24B0LL,  355LL);
        unint64_t v37 = v36;
        *(void *)(v33 + 4) = sub_1000164BC(v35, v36, v152);
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s", (uint8_t *)v33, 0xCu);
        swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v38 = v34;
        uint64_t v26 = (uint64_t)v147;
        swift_slowDealloc(v38, -1LL, -1LL);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      if (v150)
      {
        uint64_t v18 = (uint64_t)v155;
        uint64_t v39 = v155[2];
        if (v39)
        {
          uint64_t v134 = v5;
          uint64_t v135 = v4;
          uint64_t v40 = sub_100008E00(&qword_100113CC8);
          uint64_t v41 = (void *)swift_allocObject(v40, v39 + 32, 7LL);
          size_t v42 = j__malloc_size(v41);
          void v41[2] = v39;
          v41[3] = 2 * v42 - 64;
          unint64_t v136 = sub_100053440(v152, (_BYTE *)v41 + 32, v39, v18);
          uint64_t v44 = v152[0];
          uint64_t v43 = (void *)v152[1];
          uint64_t v5 = v152[3];
          __int16 v4 = (void *)v152[4];
          swift_bridgeObjectRetain_n(v18, 2LL);
          sub_100019E94(v44);
          if (v136 != (void *)v39)
          {
            __break(1u);
            goto LABEL_153;
          }

          swift_bridgeObjectRelease(v18);
          uint64_t v5 = v134;
          __int16 v4 = v135;
          int v19 = v132;
        }

        else
        {
          uint64_t v41 = _swiftEmptyArrayStorage;
        }

        if (!v41[2])
        {
          swift_release(v41);
          uint64_t v41 = 0LL;
        }

        if (!*(void *)(v5 + 16))
        {
          swift_bridgeObjectRelease(v5);
          uint64_t v5 = 0LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
          __int16 v4 = sub_10004F3F4(0LL, v4[2] + 1LL, 1, v4);
        }
        unint64_t v46 = v4[2];
        unint64_t v45 = v4[3];
        if (v46 >= v45 >> 1) {
          __int16 v4 = sub_10004F3F4((void *)(v45 > 1), v46 + 1, 1, v4);
        }
        v4[2] = v46 + 1;
        uint64_t v47 = &v4[10 * v46];
        v47[4] = v150;
        v47[5] = v146;
        v47[6] = v141;
        *((_BYTE *)v47 + 56) = v133;
        *((_BYTE *)v47 + 5swift_unknownObjectWeakDestroy(v0 + 7) = v137 & 1;
        *((_BYTE *)v47 + 64) = v139;
        v47[9] = v144;
        *((_BYTE *)v47 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v19;
        *((_BYTE *)v47 + 8Hasher._combine(_:)(v0 & 1) = v138 & 1;
        v47[11] = v5;
        v47[12] = v142;
        uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
        v47[13] = v41;
        uint64_t v141 = 0LL;
        uint64_t v142 = 0LL;
        uint64_t v146 = 0LL;
        uint64_t v26 = (uint64_t)v147;
      }

      BOOL v48 = IOUSBGetEndpointDirection((const IOUSBEndpointDescriptor *)v26) == 1 && *(unsigned __int16 *)(v26 + 4) < 9u;
      uint64_t v18 = 0LL;
      unint64_t v25 = v148 + 1;
      v24 += 16;
      if (v140 + v148 + 1 == 1)
      {
        swift_bridgeObjectRelease(v121);
        uint64_t v18 = 0LL;
        uint64_t v44 = v146;
        goto LABEL_111;
      }
    }

    int v49 = v27 - 18;
    uint64_t v20 = v26;
    switch(v49)
    {
      case 0:
        if (v150)
        {
          uint64_t v145 = v18;
          uint64_t v50 = (uint64_t)v155;
          uint64_t v51 = v155[2];
          if (v51)
          {
            uint64_t v52 = sub_100008E00(&qword_100113CC8);
            uint64_t v53 = swift_allocObject(v52, v51 + 32, 7LL);
            size_t v54 = j__malloc_size((const void *)v53);
            *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = v51;
            *(void *)(v53 + 24) = 2 * v54 - 64;
            uint64_t v55 = (void *)v53;
            unint64_t v56 = sub_100053440(v152, (_BYTE *)(v53 + 32), v51, v50);
            uint64_t v57 = v152[0];
            swift_bridgeObjectRetain_n(v50, 2LL);
            sub_100019E94(v57);
            if (v56 != (void *)v51)
            {
              __break(1u);
              JUMPOUT(0x10009AFF8LL);
            }

            swift_bridgeObjectRelease(v50);
            uint64_t v58 = v55;
          }

          else
          {
            uint64_t v58 = _swiftEmptyArrayStorage;
          }

          if (!v58[2])
          {
            swift_release(v58);
            uint64_t v58 = 0LL;
          }

          if (!*(void *)(v5 + 16))
          {
            swift_bridgeObjectRelease(v5);
            uint64_t v5 = 0LL;
          }

          if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
            __int16 v4 = sub_10004F3F4(0LL, v4[2] + 1LL, 1, v4);
          }
          unint64_t v77 = v4[2];
          unint64_t v76 = v4[3];
          if (v77 >= v76 >> 1) {
            __int16 v4 = sub_10004F3F4((void *)(v76 > 1), v77 + 1, 1, v4);
          }
          uint64_t v20 = 0LL;
          v4[2] = v77 + 1;
          int v78 = &v4[10 * v77];
          v78[4] = v150;
          v78[5] = v146;
          v78[6] = v141;
          int v75 = v133;
          *((_BYTE *)v78 + 56) = v133;
          *((_BYTE *)v78 + 5swift_unknownObjectWeakDestroy(v0 + 7) = v137 & 1;
          *((_BYTE *)v78 + 64) = v139;
          v78[9] = v145;
          *((_BYTE *)v78 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v19;
          *((_BYTE *)v78 + 8Hasher._combine(_:)(v0 & 1) = v138 & 1;
          v78[11] = v5;
          v78[12] = v142;
          uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
          v78[13] = v58;
          uint64_t v141 = 0LL;
          uint64_t v142 = 0LL;
          uint64_t v18 = 0LL;
          int v74 = v19;
        }

        else
        {
          uint64_t v20 = v146;
          int v74 = v19;
          int v75 = v133;
        }

        uint64_t v79 = v5;
        int v80 = *(unsigned __int8 *)(v26 + 8);
        BOOL v81 = v80 == 0;
        BOOL v82 = *(_BYTE *)(v26 + 8) == 0;
        int v83 = v80 | 0x80;
        if (!v81) {
          int v74 = v83;
        }
        int v84 = *(unsigned __int8 *)(v26 + 7);
        uint64_t v85 = (const IOUSBEndpointDescriptor *)v26;
        BOOL v86 = *(_BYTE *)(v26 + 7) == 0;
        if (v84) {
          int v75 = v84;
        }
        int v133 = v75;
        BOOL v87 = IOUSBGetEndpointDirection(v85) == 1 && v85->wMaxPacketSize < 9u;
        v138 &= v82;
        v137 &= v86;
        if (v87)
        {
          uint64_t v150 = (uint64_t)v147;
        }

        else
        {
          uint64_t v150 = (uint64_t)v147;
        }

        uint64_t v5 = v79;
        int v19 = v74;
        goto LABEL_18;
      case 1:
        goto LABEL_18;
      case 2:
        uint64_t v141 = v26;
        break;
      case 42:
        int v59 = *(unsigned __int16 *)(v26 + 5);
        unsigned int v60 = v59 - 1;
        if (v59 == 8193) {
          char v61 = 5;
        }
        else {
          char v61 = 0;
        }
        if (v60 < 5) {
          char v61 = 0x304020101uLL >> (8 * v60);
        }
        char v123 = v61;
        uint64_t v122 = *(unsigned __int8 *)(v26 + 3);
        break;
      case 45:
        char v62 = *(_BYTE *)(v26 + 3);
        if ((v62 & 1) == 0) {
          goto LABEL_70;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          uint64_t v5 = (uint64_t)sub_10004F514(0LL, *(void *)(v5 + 16) + 1LL, 1, (void *)v5);
        }
        unint64_t v64 = *(void *)(v5 + 16);
        unint64_t v63 = *(void *)(v5 + 24);
        if (v64 >= v63 >> 1) {
          uint64_t v5 = (uint64_t)sub_10004F514((void *)(v63 > 1), v64 + 1, 1, (void *)v5);
        }
        *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v64 + 1;
        uint64_t v65 = v5 + 3 * v64;
        *(_BYTE *)(v65 + 34) = -61;
        *(_WORD *)(v65 + 32) = 257;
        if (!v118) {
          goto LABEL_151;
        }
        BOOL v118 = v150 == 0;
        char v62 = *(_BYTE *)(v26 + 3);
LABEL_70:
        if ((v62 & 2) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
            uint64_t v5 = (uint64_t)sub_10004F514(0LL, *(void *)(v5 + 16) + 1LL, 1, (void *)v5);
          }
          unint64_t v67 = *(void *)(v5 + 16);
          unint64_t v66 = *(void *)(v5 + 24);
          if (v67 >= v66 >> 1) {
            uint64_t v5 = (uint64_t)sub_10004F514((void *)(v66 > 1), v67 + 1, 1, (void *)v5);
          }
          *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v67 + 1;
          uint64_t v68 = v5 + 3 * v67;
          *(_BYTE *)(v68 + 34) = -64;
          *(_WORD *)(v68 + 32) = 577;
        }

        int v69 = *(unsigned __int8 *)(v26 + 4);
        if (v69 == 2)
        {
          uint64_t v18 = *(unsigned __int16 *)(v26 + 5);
          char v130 = 1;
        }

        else if (v69 == 1)
        {
          char v130 = 0;
          uint64_t v18 = *(unsigned __int16 *)(v26 + 5);
        }

        break;
      case 46:
        swift_bridgeObjectRelease(v142);
        sub_1000A9F10((_BYTE *)v26, v28);
        goto LABEL_81;
      case 47:
        swift_bridgeObjectRelease(v142);
        sub_1000AA7E4((_BYTE *)v26, v28);
LABEL_81:
        uint64_t v142 = v73;
        __int16 v125 = 0;
        uint64_t v127 = v71;
        uint64_t v126 = v72;
        uint64_t v20 = v146;
        uint64_t v124 = v70;
        goto LABEL_18;
      default:
        sub_1000516F0(v152, 33LL);
        break;
    }

LABEL_120:
  uint64_t v94 = v4 + 13;
  swift_bridgeObjectRetain(v4);
  BOOL v95 = 0;
  uint64_t v96 = 1LL;
  while (v95)
  {
LABEL_125:
    if (v151 == v96)
    {
      swift_bridgeObjectRelease(v4);
      goto LABEL_135;
    }

    BOOL v95 = 1;
LABEL_123:
    v94 += 10;
    if (__OFADD__(v96++, 1LL)) {
      goto LABEL_150;
    }
  }

  uint64_t v100 = v5;
  uint64_t v101 = v4;
  uint64_t v102 = (const IOUSBEndpointDescriptor *)*(v94 - 9);
  uint64_t v103 = *(v94 - 2);
  uint64_t v104 = *(v94 - 1);
  uint64_t v105 = *v94;
  swift_bridgeObjectRetain(*v94);
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRetain(v104);
  if (!IOUSBGetEndpointUsageType(v102) && v102->wMaxPacketSize >= 9u)
  {
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v103);
    unint64_t v93 = v131;
    __int16 v4 = v101;
    uint64_t v5 = v100;
    goto LABEL_125;
  }

  int v106 = IOUSBGetEndpointUsageType(v102);
  if (v106)
  {
    int v98 = v106;
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v103);
  }

  else
  {
    unsigned int wMaxPacketSize = v102->wMaxPacketSize;
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v104);
    swift_bridgeObjectRelease(v103);
    int v98 = wMaxPacketSize < 9;
  }

  __int16 v4 = v101;
  BOOL v95 = v98 == 2;
  unint64_t v93 = v131;
  uint64_t v5 = v100;
  if (v151 != v96) {
    goto LABEL_123;
  }
  swift_bridgeObjectRelease(v101);
  if (v98 != 2) {
    goto LABEL_134;
  }
LABEL_135:
  if (*v149 != v119) {
    sub_1000516F0(v152, 82LL);
  }
  unint64_t v107 = v155;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v107);
  id v108 = v153;
  __int128 v109 = sub_100051240((uint64_t)v153);
  swift_bridgeObjectRelease(v108);
  if (HIBYTE(v125) == 255) {
    uint64_t v110 = 0LL;
  }
  else {
    uint64_t v110 = v124;
  }
  if (HIBYTE(v125) == 255) {
    __int16 v111 = 0;
  }
  else {
    __int16 v111 = v125;
  }
  sub_100056EC8( v120,  v123,  v122,  v127,  v126,  v110,  v111,  (uint64_t)v4,  (uint64_t)v154,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)v109);
  __int128 v112 = v154[3];
  v93[2] = v154[2];
  v93[3] = v112;
  v93[4] = v154[4];
  __int128 v113 = v154[1];
  *unint64_t v93 = v154[0];
  v93[1] = v113;
}

uint64_t sub_10009B0B8(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v26 = v5;
  }
  else {
    uint64_t v26 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v5 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v5))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v7 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v5;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0) {
      uint64_t v28 = v7;
    }
    else {
      uint64_t v28 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v28);
    swift_bridgeObjectRelease(v7);
    uint64_t v7 = *v3;
    goto LABEL_15;
  }

void *sub_10009B3B0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10004F1B0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = sub_100008E00(&qword_100114F58);
  uint64_t result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, v12);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v14 = v4[2];
  BOOL v15 = __OFSUB__(v14, a2);
  uint64_t v16 = v14 - a2;
  if (v15) {
    goto LABEL_26;
  }
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    unint64_t v17 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v17[16 * v16]) {
      uint64_t result = memmove(&v4[2 * a1 + 4], v17, 16 * v16);
    }
    uint64_t v18 = v4[2];
    BOOL v15 = __OFADD__(v18, v8);
    uint64_t v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }

    goto LABEL_27;
  }

uint64_t sub_10009B520()
{
  return sub_10009B558();
}

uint64_t sub_10009B53C()
{
  return sub_10009B558();
}

uint64_t sub_10009B558()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [(id)objc_opt_self(IOKRegistryEntry) entryFromPath:v0];

  if (!v1) {
    return 0LL;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 propertyForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v10, v3);
    swift_unknownObjectRelease(v3, v4);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  sub_100017868((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {

    sub_10003355C((uint64_t)v11);
    return 0LL;
  }

  unint64_t v5 = sub_10009B6BC();
  if ((swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v5, 6LL) & 1) == 0)
  {

    return 0LL;
  }

  id v6 = v9;
  int v7 = *(_DWORD *)[v6 bytes];

  if (v7) {
    return 2LL;
  }
  else {
    return 1LL;
  }
}

unint64_t sub_10009B6BC()
{
  unint64_t result = qword_100116190;
  if (!qword_100116190)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSData);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100116190);
  }

  return result;
}

uint64_t sub_10009B6F8( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a5;
  uint64_t v33 = a8;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v31 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v12 + 8));
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = ((uint64_t (*)(void))__chkstk_darwin)();
  unint64_t v36 = (char *)&v29 - v16;
  uint64_t v41 = a4;
  __chkstk_darwin(v15);
  uint64_t v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v34 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  char v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21) {
    return static Array._allocateUninitialized(_:)(0LL, v41);
  }
  Swift::Int v22 = v21;
  uint64_t v30 = v18;
  uint64_t v23 = v41;
  uint64_t v44 = ContiguousArray.init()(v41);
  uint64_t v37 = type metadata accessor for ContiguousArray(0LL, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v41 = v20;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v26 = v35;
    unint64_t v25 = v36;
    while (1)
    {
      uint64_t v27 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0LL);
      uint64_t v28 = v42;
      v38(v25, v40);
      if (v28) {
        break;
      }
      uint64_t v42 = 0LL;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }

  return result;
}

uint64_t sub_10009B9D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)(a7 - 8);
  uint64_t v13 = __chkstk_darwin(a5);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = v16(v13, v15);
  if (v10) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a10, v15, a7);
  }
  return result;
}

uint64_t static DescriptorUtils.readBytes<A>(type:from:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10009CFCC(a3, a1, *(_BYTE **)a1, *(void *)(a1 + 8), a2);
  if (!v3)
  {
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v6;
  }

  return result;
}

uint64_t sub_10009BA8C(void *a1, unsigned int a2)
{
  char v2 = a2;
  LODWORD(v28) = a2 >> 8;
  uint64_t v4 = type metadata accessor for Mirror(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_100008E00(&qword_100116280);
  uint64_t v8 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_1000178EC(a1, v11);
  unint64_t v13 = sub_1000814E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SynthesizedEncodableKey,  &type metadata for SynthesizedEncodableKey,  v13,  v11,  v12);
  unint64_t v14 = sub_100007570((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for IOUSBDescriptorHeader(0LL);
  *((void *)&v35 + Hasher._combine(_:)(v0 & 1) = v15;
  LOBYTE(v34[0]) = v2;
  BYTE1(v34[0]) = (_BYTE)v28;
  uint64_t v16 = Mirror.init(reflecting:)(v34);
  uint64_t v17 = Mirror.children.getter(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v18 = v29;
  uint64_t v19 = sub_10009DD84(v17, v14);
  swift_release(v17);
  swift_bridgeObjectRelease_n(v14, 2LL);
  uint64_t v20 = v19[2];
  if (v20)
  {
    uint64_t v28 = v19;
    uint64_t v29 = v8;
    for (uint64_t i = (uint64_t)(v19 + 4); ; i += 56LL)
    {
      sub_10009DF48(i, (uint64_t)v34);
      uint64_t v22 = v34[0];
      uint64_t v23 = v34[1];
      sub_10000AF84(&v35, (uint64_t)v31);
      uint64_t v24 = v32;
      uint64_t v25 = v33;
      uint64_t v26 = sub_1000178EC(v31, v32);
      v30[0] = v22;
      v30[1] = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)(v26, v30, v36, v24, v25);
      if (v18) {
        break;
      }
      swift_bridgeObjectRelease(v23);
      sub_100017A40(v31);
      if (!--v20)
      {
        swift_bridgeObjectRelease(v28);
        uint64_t v8 = v29;
        return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v36);
      }
    }

    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v36);
    swift_bridgeObjectRelease(v23);
    return sub_100017A40(v31);
  }

  else
  {
    swift_bridgeObjectRelease(v19);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v36);
  }

Swift::Int IOUSBDescriptorHeader.hashValue.getter(unsigned int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009BD38()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_1000446EC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IOUSBDescriptorHeader(uint64_t a1)
{
  return sub_1000446EC(a1, *v1);
}

Swift::Int sub_10009BD84(uint64_t a1)
{
  unsigned int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000446EC((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IOUSBDescriptorHeader( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D5E4(*a1, *a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IOUSBDescriptorHeader(void *a1)
{
  return sub_10009BA8C(a1, *v1);
}

Swift::Int ADCClassSpecificDescriptorHeader.hashValue.getter(int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009BE2C()
{
  int v1 = *((unsigned __int8 *)v0 + 2);
  int v2 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_1000402F4((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADCClassSpecificDescriptorHeader( uint64_t a1)
{
  return sub_1000402F4(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_10009BE84(uint64_t a1)
{
  int v2 = *((unsigned __int8 *)v1 + 2);
  int v3 = *v1;
  Hasher.init(_seed:)(v5, a1);
  sub_1000402F4((uint64_t)v5, v3 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADCClassSpecificDescriptorHeader( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100037A24(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

Swift::Int ADC3HighCapabilityDescriptor.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009BF28()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100041DA8((uint64_t)v4, v2 | (v1 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3HighCapabilityDescriptor(uint64_t a1)
{
  return sub_100041DA8(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_10009BF80(uint64_t a1)
{
  uint64_t v2 = *((unsigned __int16 *)v1 + 2);
  uint64_t v3 = *v1;
  Hasher.init(_seed:)(v5, a1);
  sub_100041DA8((uint64_t)v5, v3 | (v2 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3HighCapabilityDescriptor( unsigned int *a1, unsigned int *a2)
{
  return sub_100039E14( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC3ClusterDescriptorHeader.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C024()
{
  uint64_t v1 = *((unsigned __int16 *)v0 + 2);
  uint64_t v2 = *((unsigned __int8 *)v0 + 6);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100042C8C((uint64_t)v5, v3 | (v1 << 32) | (v2 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterDescriptorHeader(uint64_t a1)
{
  return sub_100042C8C( a1,  *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48));
}

Swift::Int sub_10009C094(uint64_t a1)
{
  uint64_t v2 = *((unsigned __int16 *)v1 + 2);
  uint64_t v3 = *((unsigned __int8 *)v1 + 6);
  uint64_t v4 = *v1;
  Hasher.init(_seed:)(v6, a1);
  sub_100042C8C((uint64_t)v6, v4 | (v2 << 32) | (v3 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterDescriptorHeader( unsigned int *a1, unsigned int *a2)
{
  return sub_10003B268( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC3ClusterDescriptorSegmentHeader.hashValue.getter(int a1)
{
  return sub_10009C25C(a1, (void (*)(void *, void))sub_100040158);
}

Swift::Int sub_10009C120(uint64_t a1, uint64_t a2)
{
  return sub_10009C2B0(a1, a2, (void (*)(void *, void))sub_100040158);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterDescriptorSegmentHeader( uint64_t a1)
{
  return sub_100040158(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_10009C13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009C320(a1, a2, a3, (void (*)(void *, void))sub_100040158);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterDescriptorSegmentHeader( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10009C37C(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_100037800);
}

Swift::Int ADC3ClusterChannelInformationSegment.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C198()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  Hasher.init(_seed:)(v4, 0LL);
  sub_10003FE44((uint64_t)v4, v1 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelInformationSegment( uint64_t a1)
{
  return sub_10003FE44(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_10009C1F0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(unsigned int *)(v1 + 1);
  Hasher.init(_seed:)(v5, a1);
  sub_10003FE44((uint64_t)v5, v2 | (v3 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelInformationSegment( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_100037400( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

Swift::Int ADC3ClusterEndSegment.hashValue.getter(int a1)
{
  return sub_10009C25C(a1, (void (*)(void *, void))sub_10004484C);
}

Swift::Int sub_10009C25C(int a1, void (*a2)(void *, void))
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C2A4(uint64_t a1, uint64_t a2)
{
  return sub_10009C2B0(a1, a2, (void (*)(void *, void))sub_10004484C);
}

Swift::Int sub_10009C2B0(uint64_t a1, uint64_t a2, void (*a3)(void *, void))
{
  int v5 = *v3;
  int v6 = *((unsigned __int8 *)v3 + 2);
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v5 | (v6 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterEndSegment(uint64_t a1)
{
  return sub_10004484C(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

Swift::Int sub_10009C314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009C320(a1, a2, a3, (void (*)(void *, void))sub_10004484C);
}

Swift::Int sub_10009C320(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, void))
{
  int v6 = *v4;
  int v7 = *((unsigned __int8 *)v4 + 2);
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v6 | (v7 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterEndSegment( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_10009C37C(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10003D78C);
}

uint64_t sub_10009C37C( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

Swift::Int ADC3ClusterChannelAmbiosonicSegment.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C3DC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned int *)((char *)v0 + 3);
  Hasher.init(_seed:)(v5, 0LL);
  sub_10003FFC0((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelAmbiosonicSegment( uint64_t a1)
{
  return sub_10003FFC0( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

Swift::Int sub_10009C44C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 2);
  uint64_t v4 = *(unsigned int *)((char *)v1 + 3);
  Hasher.init(_seed:)(v6, a1);
  sub_10003FFC0((uint64_t)v6, v2 | (v3 << 16) | (v4 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelAmbiosonicSegment( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_1000375EC( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a1 + 3) << 24),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a2 + 3) << 24));
}

Swift::Int ADC3ClusterChannelDescriptionSegment.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C510()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)(v5, 0LL);
  sub_10003FFB4((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterChannelDescriptionSegment( uint64_t a1)
{
  return sub_10003FFB4( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 3) << 24));
}

Swift::Int sub_10009C580(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 2);
  uint64_t v4 = *(unsigned __int16 *)((char *)v1 + 3);
  Hasher.init(_seed:)(v6, a1);
  sub_10003FFB4((uint64_t)v6, v2 | (v3 << 16) | (v4 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterChannelDescriptionSegment( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_1000375E0( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 3) << 24),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 3) << 24));
}

Swift::Int ADC4ExtendedDescriptorHeader.hashValue.getter(unint64_t a1, __int16 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C64C()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_1000418F4((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ExtendedDescriptorHeader(uint64_t a1)
{
  return sub_1000418F4(a1, *(void *)v1, *(_WORD *)(v1 + 8));
}

Swift::Int sub_10009C6A4(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  __int16 v3 = *(_WORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_1000418F4((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ExtendedDescriptorHeader( uint64_t a1, uint64_t a2)
{
  return sub_1000397BC(*(void *)a1, *(unsigned __int16 *)(a1 + 8), *(void *)a2, *(unsigned __int16 *)(a2 + 8));
}

Swift::Int ADC4ClusterDescriptorHeader.hashValue.getter(unint64_t a1, unsigned int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C750()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_100042920((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterDescriptorHeader(uint64_t a1)
{
  return sub_100042920(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_10009C7A8(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_100042920((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterDescriptorHeader( uint64_t a1, uint64_t a2)
{
  return sub_10003AD8C(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC4ClusterDescriptorSegmentHeader.hashValue.getter(unsigned int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C850()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100040140((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterDescriptorSegmentHeader( uint64_t a1)
{
  return sub_100040140(a1, *v1);
}

Swift::Int sub_10009C89C(uint64_t a1)
{
  unsigned int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100040140((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterDescriptorSegmentHeader( unsigned int *a1, unsigned int *a2)
{
  return sub_1000377E8(*a1, *a2);
}

Swift::Int ADC4ClusterChannelInformationSegment.hashValue.getter(unint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009C934()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned int *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 12);
  Hasher.init(_seed:)(v5, 0LL);
  sub_10003FCC8((uint64_t)v5, v1, v2 | (v3 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelInformationSegment( uint64_t a1)
{
  return sub_10003FCC8( a1,  *(void *)v1,  *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

Swift::Int sub_10009C9A0(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v1 + 12);
  Hasher.init(_seed:)(v6, a1);
  sub_10003FCC8((uint64_t)v6, v2, v3 | (v4 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelInformationSegment( uint64_t a1, uint64_t a2)
{
  return sub_100037238( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

void *sub_10009CA1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = 0LL;
  uint64_t v24 = v3;
  uint64_t v4 = (unsigned __int8 *)(v3 + 41);
  int v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = *(void *)(v4 - 9);
    char v8 = *(v4 - 1);
    int v9 = *v4;
    if ((v9 - 1) > 4)
    {
      if (!v2)
      {
LABEL_3:
        uint64_t v6 = sub_100008E00(&qword_100114EE0);
        uint64_t v2 = swift_allocObject(v6, 48LL, 7LL);
        *(_OWORD *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
        *(void *)(v2 + 32) = v7;
        *(_BYTE *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
        *(_BYTE *)(v2 + 4Hasher._combine(_:)(v0 & 1) = v9;
        goto LABEL_4;
      }

      swift_bridgeObjectRetain(v2);
      uint64_t v17 = (void *)v2;
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        uint64_t v17 = sub_1000500B8(0LL, *(void *)(v2 + 16) + 1LL, 1, (void *)v2);
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1) {
        uint64_t v17 = sub_1000500B8((void *)(v18 > 1), v19 + 1, 1, v17);
      }
      void v17[2] = v19 + 1;
      uint64_t v20 = &v17[2 * v19];
      v20[4] = v7;
      *((_BYTE *)v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
      *((_BYTE *)v20 + 4Hasher._combine(_:)(v0 & 1) = v9;
      swift_bridgeObjectRelease(v2);
      uint64_t v2 = (uint64_t)v17;
    }

    else
    {
      if (!v2) {
        goto LABEL_3;
      }
      swift_bridgeObjectRetain(v2);
      swift_bridgeObjectRetain(v5);
      uint64_t v11 = v5;
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        uint64_t v11 = sub_1000502D0(0LL, v5[2] + 1LL, 1, v5);
      }
      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      if (v13 >= v12 >> 1) {
        uint64_t v11 = sub_1000502D0((void *)(v12 > 1), v13 + 1, 1, v11);
      }
      _WORD v11[2] = v13 + 1;
      v11[v13 + 4] = v2;
      uint64_t v14 = sub_100008E00(&qword_100114EE0);
      uint64_t v15 = swift_allocObject(v14, 48LL, 7LL);
      *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
      *(void *)(v15 + 32) = v7;
      *(_BYTE *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
      *(_BYTE *)(v15 + 4Hasher._combine(_:)(v0 & 1) = v9;
      swift_bridgeObjectRelease(v2);
      swift_bridgeObjectRelease(v5);
      uint64_t v2 = v15;
      int v5 = v11;
    }

void sub_10009CCC4(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(*(void *)(a5 - 8) + 64LL);
  uint64_t v7 = v6 * a2;
  if ((unsigned __int128)(v6 * (__int128)a2) >> 64 == (v6 * a2) >> 63)
  {
    if (a3)
    {
      sub_10009D06C((uint64_t)a3, a4, v7);
      if (!v5)
      {
        uint64_t v11 = sub_100076390(a3, v7);
        unint64_t v13 = v12;
        __chkstk_darwin(v11);
        v18[2] = a5;
        v18[3] = a2;
        uint64_t v14 = type metadata accessor for Array(0LL, a5);
        Data.withUnsafeBytes<A>(_:)(&v19, sub_10009DCA4, v18, v11, v13, v14);
        sub_100032E74(v11, v13);
      }
    }

    else
    {
      unint64_t v15 = sub_10000AE14();
      uint64_t v16 = swift_allocError(&type metadata for AUAError, v15, 0LL, 0LL);
      *(_BYTE *)uint64_t v17 = 50;
      *(void *)(v17 + 8) = 0LL;
      *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v17 + 24) = 0xD00000000000001BLL;
      *(void *)(v17 + 32) = 0x80000001000D04B0LL;
      *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
      *(void *)(v17 + 48) = 0x80000001000D04D0LL;
      *(void *)(v17 + 56) = 702LL;
      swift_willThrow(v16);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10009CE50(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v6 = result;
    v9[2] = a4;
    v9[3] = a3;
    uint64_t v7 = type metadata accessor for Array(0LL, a4);
    return sub_10009B9D4( a4,  a3,  (uint64_t)sub_10009DCBC,  (uint64_t)v9,  v6,  a4,  (uint64_t)&type metadata for Never,  v7,  (uint64_t)&protocol witness table for Never,  v8);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10009CF08@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    void v9[4] = 0LL;
    v9[5] = a2;
    v9[2] = a3;
    v9[3] = result;
    uint64_t v6 = sub_100008E00(&qword_100116270);
    unint64_t v7 = sub_10009DD18();
    uint64_t result = sub_10009B6F8( (void (*)(char *, char *))sub_10009DCD8,  (uint64_t)v9,  v6,  a3,  (uint64_t)&type metadata for Never,  v7,  (uint64_t)&protocol witness table for Never,  v8);
    *a4 = result;
  }

  return result;
}

uint64_t sub_10009CFCC(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  if (!v6)
  {
    uint64_t v10 = v8;
    uint64_t v5 = v9;
    Array.subscript.getter(0LL, v8, a5);
    swift_bridgeObjectRelease(v10);
  }

  return v5;
}

void *sub_10009D044(void *a1)
{
  return sub_10004FF98(0LL, a1[2], 0, a1);
}

void *sub_10009D058(void *a1)
{
  return sub_1000502E4(0LL, a1[2], 0, a1);
}

uint64_t sub_10009D06C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    uint64_t v3 = 670LL;
LABEL_9:
    unint64_t v4 = sub_10000AE14();
    uint64_t v5 = swift_allocError(&type metadata for AUAError, v4, 0LL, 0LL);
    *(_BYTE *)uint64_t v6 = 49;
    *(void *)(v6 + 8) = 0LL;
    *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v6 + 24) = 0xD000000000000011LL;
    *(void *)(v6 + 32) = 0x80000001000D2660LL;
    *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
    *(void *)(v6 + 48) = 0x80000001000D04D0LL;
    *(void *)(v6 + 56) = v3;
    return swift_willThrow(v5);
  }

  if (!result)
  {
    if (!a3)
    {
      uint64_t v3 = 676LL;
      goto LABEL_9;
    }

    goto LABEL_7;
  }

  if (a2 - result < a3)
  {
LABEL_7:
    uint64_t v3 = 673LL;
    goto LABEL_9;
  }

  return result;
}

void *_s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0( uint64_t a1)
{
  uint64_t v1 = sub_10009CA1C(a1);
  uint64_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = 0LL;
    unint64_t v4 = v1 + 4;
    uint64_t v53 = _swiftEmptyArrayStorage;
    size_t v54 = v1 + 4;
    uint64_t v55 = v1[2];
    unint64_t v56 = v1;
    while (1)
    {
      if (v3 >= v1[2]) {
        goto LABEL_67;
      }
      uint64_t v6 = v4[v3];
      uint64_t v7 = *(void *)(v6 + 16);
      if (!v7) {
        goto LABEL_68;
      }
      unint64_t v57 = v3;
      swift_bridgeObjectRetain(v6);
      uint64_t v8 = 0LL;
      uint64_t v58 = v6;
      uint64_t v9 = (unsigned __int8 *)(v6 + 41);
      uint64_t v10 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v12 = *(void *)(v9 - 9);
        char v13 = *(v9 - 1);
        unsigned int v14 = *v9;
        if (v14 > 0x10 || v14 == 11)
        {
          if (!v8)
          {
LABEL_10:
            uint64_t v11 = sub_100008E00(&qword_100114EE0);
            uint64_t v8 = swift_allocObject(v11, 48LL, 7LL);
            *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
            *(void *)(v8 + 32) = v12;
            *(_BYTE *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
            *(_BYTE *)(v8 + 4Hasher._combine(_:)(v0 & 1) = v14;
            goto LABEL_11;
          }

          swift_bridgeObjectRetain(v8);
          uint64_t v23 = (void *)v8;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
            uint64_t v23 = sub_1000500B8(0LL, *(void *)(v8 + 16) + 1LL, 1, (void *)v8);
          }
          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          if (v25 >= v24 >> 1) {
            uint64_t v23 = sub_1000500B8((void *)(v24 > 1), v25 + 1, 1, v23);
          }
          v23[2] = v25 + 1;
          uint64_t v26 = &v23[2 * v25];
          v26[4] = v12;
          *((_BYTE *)v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
          *((_BYTE *)v26 + 4Hasher._combine(_:)(v0 & 1) = v14;
          swift_bridgeObjectRelease(v8);
          uint64_t v8 = (uint64_t)v23;
        }

        else
        {
          if (!v8) {
            goto LABEL_10;
          }
          swift_bridgeObjectRetain(v8);
          swift_bridgeObjectRetain(v10);
          uint64_t v17 = v10;
          if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
            uint64_t v17 = sub_1000502D0(0LL, v10[2] + 1LL, 1, v10);
          }
          unint64_t v19 = v17[2];
          unint64_t v18 = v17[3];
          if (v19 >= v18 >> 1) {
            uint64_t v17 = sub_1000502D0((void *)(v18 > 1), v19 + 1, 1, v17);
          }
          void v17[2] = v19 + 1;
          v17[v19 + 4] = v8;
          uint64_t v20 = sub_100008E00(&qword_100114EE0);
          uint64_t v21 = swift_allocObject(v20, 48LL, 7LL);
          *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
          *(void *)(v21 + 32) = v12;
          *(_BYTE *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
          *(_BYTE *)(v21 + 4Hasher._combine(_:)(v0 & 1) = v14;
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease(v10);
          uint64_t v8 = v21;
          uint64_t v10 = v17;
        }

uint64_t sub_10009D710()
{
  return sub_10000B6D4( &qword_100116198,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBDescriptorHeader,  (uint64_t)&protocol conformance descriptor for IOUSBDescriptorHeader);
}

uint64_t sub_10009D73C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161A0,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBDescriptorHeader,  (uint64_t)&protocol conformance descriptor for IOUSBDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D778(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161A8,  (uint64_t (*)(uint64_t))type metadata accessor for IOUSBDescriptorHeader,  (uint64_t)&protocol conformance descriptor for IOUSBDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D7B4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161B0,  (uint64_t (*)(uint64_t))type metadata accessor for ADCClassSpecificDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADCClassSpecificDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D7F0()
{
  return sub_10000B6D4( &qword_1001161B8,  (uint64_t (*)(uint64_t))type metadata accessor for ADCClassSpecificDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADCClassSpecificDescriptorHeader);
}

uint64_t sub_10009D81C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161C0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3HighCapabilityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3HighCapabilityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D858()
{
  return sub_10000B6D4( &qword_1001161C8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3HighCapabilityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3HighCapabilityDescriptor);
}

uint64_t sub_10009D884(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161D0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC3ClusterDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D8C0()
{
  return sub_10000B6D4( &qword_1001161D8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC3ClusterDescriptorHeader);
}

uint64_t sub_10009D8EC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161E0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC3ClusterDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D928()
{
  return sub_10000B6D4( &qword_1001161E8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_10009D954(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001161F0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelInformationSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelInformationSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D990()
{
  return sub_10000B6D4( &qword_1001161F8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelInformationSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelInformationSegment);
}

uint64_t sub_10009D9BC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116200,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterEndSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterEndSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009D9F8()
{
  return sub_10000B6D4( &qword_100116208,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterEndSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterEndSegment);
}

uint64_t sub_10009DA24(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116210,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelAmbiosonicSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelAmbiosonicSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DA60()
{
  return sub_10000B6D4( &qword_100116218,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelAmbiosonicSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelAmbiosonicSegment);
}

uint64_t sub_10009DA8C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116220,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DAC8()
{
  return sub_10000B6D4( &qword_100116228,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterChannelDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_10009DAF4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116230,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ExtendedDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4ExtendedDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DB30()
{
  return sub_10000B6D4( &qword_100116238,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ExtendedDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4ExtendedDescriptorHeader);
}

uint64_t sub_10009DB5C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116240,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4ClusterDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DB98()
{
  return sub_10000B6D4( &qword_100116248,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4ClusterDescriptorHeader);
}

uint64_t sub_10009DBC4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116250,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC4ClusterDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DC00()
{
  return sub_10000B6D4( &qword_100116258,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_10009DC2C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116260,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelInformationSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelInformationSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10009DC68()
{
  return sub_10000B6D4( &qword_100116268,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelInformationSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelInformationSegment);
}

ValueMetadata *type metadata accessor for DescriptorUtils()
{
  return &type metadata for DescriptorUtils;
}

uint64_t sub_10009DCA4(uint64_t a1, uint64_t a2)
{
  return sub_10009CE50(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 16));
}

uint64_t sub_10009DCBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10009CF08(a1, *(void *)(v2 + 24), *(char **)(v2 + 16), a2);
}

uint64_t sub_10009DCD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v2 + 16) - 8LL) + 16LL))( a2,  *(void *)(v2 + 24) + *(void *)(*(void *)(*(void *)(v2 + 16) - 8LL) + 72LL) * *a1);
}

unint64_t sub_10009DD18()
{
  unint64_t result = qword_100116278;
  if (!qword_100116278)
  {
    uint64_t v1 = sub_1000175B0(&qword_100116270);
    sub_10007A654();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116278);
  }

  return result;
}

void *sub_10009DD84(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v6 = swift_release(a1);
  dispatch thunk of _AnyIteratorBoxBase.next()(v20, v6);
  if (*((void *)&v21 + 1))
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    while (1)
    {
      v19[0] = v20[0];
      v19[1] = v20[1];
      _OWORD v19[2] = v21;
      sub_100080FE8((uint64_t *)v19, a2, (uint64_t *)v17);
      if (v2) {
        break;
      }
      sub_1000178B0((uint64_t)v19, &qword_100114910);
      if (*((void *)&v17[0] + 1))
      {
        __int128 v13 = v17[0];
        __int128 v14 = v17[1];
        __int128 v15 = v17[2];
        uint64_t v16 = v18;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100050628(0LL, v7[2] + 1LL, 1, v7);
          uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
        }

        unint64_t v10 = v7[2];
        unint64_t v9 = v7[3];
        if (v10 >= v9 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100050628((void *)(v9 > 1), v10 + 1, 1, v7);
          uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
        }

        v7[2] = v10 + 1;
        uint64_t v11 = &v7[7 * v10];
        v11[10] = v16;
        *((_OWORD *)v11 + 3) = v14;
        *((_OWORD *)v11 + 4) = v15;
        *((_OWORD *)v11 + 2) = v13;
      }

      else
      {
        uint64_t isUniquelyReferenced_nonNull_native = sub_1000178B0((uint64_t)v17, &qword_100116288);
      }

      dispatch thunk of _AnyIteratorBoxBase.next()(v20, isUniquelyReferenced_nonNull_native);
      if (!*((void *)&v21 + 1)) {
        goto LABEL_14;
      }
    }

    sub_1000178B0((uint64_t)v19, &qword_100114910);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

uint64_t sub_10009DF48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008E00(&qword_100113490);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

__n128 sub_10009DF90@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100008E00(&qword_1001163B0);
  uint64_t inited = swift_initStackObject(v2, v32);
  uint64_t v4 = 0LL;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6650;
  *(void *)(inited + 32) = 0x200000001LL;
  *(_BYTE *)(inited + 42) = 103;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 257;
  *(_BYTE *)(inited + 45) = 103;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004LL;
  *(_BYTE *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 641;
  *(_BYTE *)(inited + 6Hasher._combine(_:)(v0 & 1) = 0;
  *(_WORD *)(inited + 59) = 640;
  *(void *)(inited + 64) = 0x2000000010LL;
  *(_BYTE *)(inited + 74) = 16;
  *(_WORD *)(inited + 72) = 769;
  *(_BYTE *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 7) = 16;
  *(_WORD *)(inited + 75) = 768;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0x8000000040LL;
  *(_BYTE *)(inited + 9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 16;
  *(_WORD *)(inited + 88) = 1089;
  *(_BYTE *)(inited + 93) = 16;
  *(_WORD *)(inited + 9Hasher._combine(_:)(v0 & 1) = 1088;
  uint64_t v29 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v30 = v1;
  uint64_t v28 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v27 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v26 = *(unsigned __int8 *)(v1 + 7);
  int v5 = *(_DWORD *)(v1 + 8);
  uint64_t v24 = *(unsigned __int16 *)(v1 + 12);
  int v25 = *(unsigned __int16 *)(v1 + 18);
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = inited + v4;
    if ((*(_DWORD *)(inited + v4 + 32) & v5) != 0)
    {
      int v8 = *(_DWORD *)(v7 + 36) & v5;
      if (v8) {
        unint64_t v9 = (unsigned __int16 *)(v7 + 40);
      }
      else {
        unint64_t v9 = (unsigned __int16 *)(v7 + 43);
      }
      int v10 = *((unsigned __int8 *)v9 + 2);
      int v11 = *v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_10004F514(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1) {
        uint64_t v6 = sub_10004F514((void *)(v12 > 1), v13 + 1, 1, v6);
      }
      v6[2] = v13 + 1;
      __int128 v14 = (char *)v6 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
      if (v8) {
        sub_1000516F0(v33, 10LL);
      }
    }

    v4 += 16LL;
  }

  while (v4 != 64);
  swift_bridgeObjectRelease(inited);
  uint64_t v15 = sub_100008E00(&qword_1001150A8);
  uint64_t v16 = swift_allocObject(v15, 44LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(void *)(v16 + 32) = v24;
  *(_WORD *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 512;
  uint64_t v17 = *(void *)(v30 + 24);
  __int16 v18 = *(_WORD *)(v30 + 32);
  unint64_t v19 = sub_100051240((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  if (v25) {
    int v20 = v25 | 0x10000;
  }
  else {
    int v20 = 16711680;
  }
  sub_1000AF324( v29,  v26,  v28,  v27,  0,  (uint64_t)v6,  v20,  v16,  (uint64_t)v33,  0LL,  0xF000000000000000LL,  v17,  v18,  (uint64_t)v19);
  __int128 v21 = v33[5];
  *(_OWORD *)(a1 + 64) = v33[4];
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v21;
  *(void *)(a1 + 96) = v34;
  __int128 v22 = v33[1];
  *(_OWORD *)a1 = v33[0];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  __n128 result = (__n128)v33[3];
  *(_OWORD *)(a1 + 32) = v33[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

double sub_10009E28C@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_100008E00(&qword_1001163B8);
  uint64_t inited = swift_initStackObject(v2, v30);
  uint64_t v4 = 0LL;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6650;
  *(void *)(inited + 32) = 0x200000001LL;
  *(_BYTE *)(inited + 42) = 103;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 257;
  *(_BYTE *)(inited + 45) = 103;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004LL;
  *(_BYTE *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 641;
  *(_BYTE *)(inited + 6Hasher._combine(_:)(v0 & 1) = 0;
  *(_WORD *)(inited + 59) = 640;
  *(void *)(inited + 64) = 0x2000000010LL;
  *(_BYTE *)(inited + 74) = 16;
  *(_WORD *)(inited + 72) = 769;
  *(_BYTE *)(inited + 7swift_unknownObjectWeakDestroy(v0 + 7) = 16;
  *(_WORD *)(inited + 75) = 768;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0x8000000040LL;
  *(_BYTE *)(inited + 9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 16;
  *(_WORD *)(inited + 88) = 1089;
  *(_BYTE *)(inited + 93) = 16;
  *(_WORD *)(inited + 9Hasher._combine(_:)(v0 & 1) = 1088;
  uint64_t v27 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v28 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v26 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v25 = *(unsigned __int8 *)(v1 + 7);
  uint64_t v24 = *(unsigned __int8 *)(v1 + 8);
  int v5 = *(_DWORD *)(v1 + 9);
  int v23 = *(unsigned __int16 *)(v1 + 17);
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = inited + v4;
    if ((*(_DWORD *)(inited + v4 + 32) & v5) != 0)
    {
      int v8 = *(_DWORD *)(v7 + 36) & v5;
      if (v8) {
        unint64_t v9 = (unsigned __int16 *)(v7 + 40);
      }
      else {
        unint64_t v9 = (unsigned __int16 *)(v7 + 43);
      }
      int v10 = *((unsigned __int8 *)v9 + 2);
      int v11 = *v9;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_10004F514(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1) {
        uint64_t v6 = sub_10004F514((void *)(v12 > 1), v13 + 1, 1, v6);
      }
      v6[2] = v13 + 1;
      __int128 v14 = (char *)v6 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
      if (v8) {
        sub_1000516F0(v31, 10LL);
      }
    }

    v4 += 16LL;
  }

  while (v4 != 64);
  swift_bridgeObjectRelease(inited);
  uint64_t v15 = *(void *)(v1 + 24);
  __int16 v16 = *(_WORD *)(v1 + 32);
  uint64_t v17 = sub_100051240((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  if (v23) {
    int v18 = v23 | 0x10000;
  }
  else {
    int v18 = 16711680;
  }
  sub_1000AF4A4(v27, v24, v25, v28, v26, 0, v18, (uint64_t)v6, (uint64_t)v31, v15, v16, (uint64_t)v17);
  __int128 v19 = v31[3];
  a1[2] = v31[2];
  a1[3] = v19;
  __int128 v20 = v31[5];
  a1[4] = v31[4];
  a1[5] = v20;
  double result = *(double *)v31;
  __int128 v22 = v31[1];
  *a1 = v31[0];
  a1[1] = v22;
  return result;
}

double sub_10009E544@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008E00(&qword_1001163C0);
  uint64_t inited = swift_initStackObject(v4, v31);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
  *(void *)(inited + 32) = 0x200000001LL;
  *(_BYTE *)(inited + 42) = 16;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 513;
  *(_BYTE *)(inited + 45) = 16;
  *(_WORD *)(inited + 43) = 512;
  *(void *)(inited + 48) = 0x800000004LL;
  *(_BYTE *)(inited + 58) = 16;
  *(_WORD *)(inited + 56) = 833;
  *(_BYTE *)(inited + 6Hasher._combine(_:)(v0 & 1) = 16;
  *(_WORD *)(inited + 59) = 832;
  uint64_t v34 = &_swiftEmptySetSingleton;
  int v6 = *(_DWORD *)(v1 + 5);
  int v7 = *(unsigned __int16 *)(v1 + 9);
  if ((v6 & 1) != 0)
  {
    if ((v6 & 2) != 0) {
      int v9 = 1049089;
    }
    else {
      int v9 = 1049088;
    }
    int v8 = sub_10004F514(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1) {
      int v8 = sub_10004F514((void *)(v10 > 1), v11 + 1, 1, v8);
    }
    v8[2] = v11 + 1;
    unint64_t v12 = (char *)v8 + 3 * v11;
    v12[34] = BYTE2(v9);
    *((_WORD *)v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    if ((v6 & 2) != 0) {
      sub_1000516F0(v32, 10LL);
    }
  }

  else
  {
    int v8 = _swiftEmptyArrayStorage;
  }

  if ((*(_DWORD *)(inited + 48) & v6) != 0)
  {
    unint64_t v13 = (unsigned __int16 *)(inited + 59);
    int v14 = *(_DWORD *)(inited + 52) & v6;
    if (v14) {
      unint64_t v13 = (unsigned __int16 *)(inited + 56);
    }
    int v15 = *v13 | (*((unsigned __int8 *)v13 + 2) << 16);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      int v8 = sub_10004F514(0LL, v8[2] + 1LL, 1, v8);
    }
    unint64_t v17 = v8[2];
    unint64_t v16 = v8[3];
    if (v17 >= v16 >> 1) {
      int v8 = sub_10004F514((void *)(v16 > 1), v17 + 1, 1, v8);
    }
    v8[2] = v17 + 1;
    int v18 = (char *)v8 + 3 * v17;
    v18[34] = BYTE2(v15);
    *((_WORD *)v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    if (v14) {
      sub_1000516F0(v32, 10LL);
    }
  }

  swift_bridgeObjectRelease(inited);
  uint64_t v30 = *(unsigned __int16 *)(v1 + 40);
  uint64_t v19 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v20 = *(void *)(v1 + 32);
  uint64_t v21 = *(void *)(v1 + 48);
  uint64_t v29 = *(void *)(v1 + 16);
  uint64_t v22 = (uint64_t)v34;
  __int16 v23 = *(_WORD *)(v1 + 24);
  swift_bridgeObjectRetain(*(void *)(v2 + 32));
  swift_bridgeObjectRetain(v21);
  uint64_t v24 = sub_100051240(v22);
  swift_bridgeObjectRelease(v22);
  if (v7) {
    int v25 = v7 | 0x10000;
  }
  else {
    int v25 = 16711680;
  }
  sub_1000AF59C(v19, v30, 512, v20, v21, (uint64_t)v8, v25, v29, (uint64_t)v32, v23, (uint64_t)v24);
  __int128 v26 = v32[3];
  *(_OWORD *)(a1 + 32) = v32[2];
  *(_OWORD *)(a1 + 48) = v26;
  *(_OWORD *)(a1 + 64) = v32[4];
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v33;
  double result = *(double *)v32;
  __int128 v28 = v32[1];
  *(_OWORD *)a1 = v32[0];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
  return result;
}

__n128 sub_10009E814@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  unsigned int v4 = *(_DWORD *)(v1 + 5);
  int v5 = *(unsigned __int16 *)(v1 + 9);
  int v6 = &_swiftEmptySetSingleton;
  uint64_t v19 = &_swiftEmptySetSingleton;
  if ((v4 & 1) == 0)
  {
    sub_1000516F0(v17, 12LL);
    int v6 = v19;
  }

  uint64_t v16 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = sub_100008E00(&qword_100114E78);
  uint64_t v9 = swift_allocObject(v8, 35LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_BYTE *)(v9 + 34) = 64;
  *(_WORD *)(v9 + 32) = (v4 >> 1) & 1 | 0x1C0;
  uint64_t v10 = *(void *)(v2 + 16);
  __int16 v11 = *(_WORD *)(v2 + 24);
  sub_10004AAF8(v2);
  unint64_t v12 = sub_100051240((uint64_t)v6);
  swift_bridgeObjectRelease(v6);
  if (v5) {
    int v13 = v5 | 0x10000;
  }
  else {
    int v13 = 16711680;
  }
  sub_1000AF6D0(v16, v7, v9, v13, v10, v11, (uint64_t)v12, (uint64_t)v17);
  __int128 v14 = v17[3];
  *(_OWORD *)(a1 + 32) = v17[2];
  *(_OWORD *)(a1 + 48) = v14;
  *(void *)(a1 + 64) = v18;
  __n128 result = (__n128)v17[1];
  *(_OWORD *)a1 = v17[0];
  *(__n128 *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

double sub_10009E948@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008E00(&qword_1001163C8);
  uint64_t inited = swift_initStackObject(v4, v30);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
  *(void *)(inited + 32) = 0x200000001LL;
  *(_BYTE *)(inited + 42) = 16;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 257;
  *(_BYTE *)(inited + 45) = 16;
  *(_WORD *)(inited + 43) = 256;
  *(void *)(inited + 48) = 0x800000004LL;
  *(_BYTE *)(inited + 58) = 16;
  *(_WORD *)(inited + 56) = 577;
  *(_BYTE *)(inited + 6Hasher._combine(_:)(v0 & 1) = 16;
  *(_WORD *)(inited + 59) = 576;
  int v6 = *(unsigned __int16 *)(v1 + 7);
  int v7 = *(_DWORD *)(v1 + 9);
  if ((v7 & 1) != 0)
  {
    if ((v7 & 2) != 0) {
      int v9 = 1048833;
    }
    else {
      int v9 = 1048832;
    }
    uint64_t v8 = sub_10004F514(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1) {
      uint64_t v8 = sub_10004F514((void *)(v10 > 1), v11 + 1, 1, v8);
    }
    v8[2] = v11 + 1;
    unint64_t v12 = (char *)v8 + 3 * v11;
    v12[34] = BYTE2(v9);
    *((_WORD *)v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    if ((v7 & 2) != 0) {
      sub_1000516F0(v31, 10LL);
    }
  }

  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }

  uint64_t v29 = a1;
  if ((*(_DWORD *)(inited + 48) & v7) != 0)
  {
    int v13 = (unsigned __int16 *)(inited + 59);
    int v14 = *(_DWORD *)(inited + 52) & v7;
    if (v14) {
      int v13 = (unsigned __int16 *)(inited + 56);
    }
    int v15 = *v13 | (*((unsigned __int8 *)v13 + 2) << 16);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
      uint64_t v8 = sub_10004F514(0LL, v8[2] + 1LL, 1, v8);
    }
    unint64_t v17 = v8[2];
    unint64_t v16 = v8[3];
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_10004F514((void *)(v16 > 1), v17 + 1, 1, v8);
    }
    v8[2] = v17 + 1;
    uint64_t v18 = (char *)v8 + 3 * v17;
    v18[34] = BYTE2(v15);
    *((_WORD *)v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    if (v14) {
      sub_1000516F0(v31, 10LL);
    }
  }

  swift_bridgeObjectRelease(inited);
  uint64_t v19 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v20 = *(void *)(v2 + 32);
  uint64_t v21 = *(void *)(v2 + 16);
  __int16 v22 = *(_WORD *)(v2 + 24);
  sub_10004AAF8(v2);
  __int16 v23 = sub_100051240((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  if (v6) {
    int v24 = v6 | 0x10000;
  }
  else {
    int v24 = 16711680;
  }
  sub_1000AF8DC(v19, 0LL, v20, 0LL, 0LL, 0, (uint64_t)v8, v24, (uint64_t)v31, v21, v22, (uint64_t)v23);
  __int128 v25 = v31[3];
  _OWORD v29[2] = v31[2];
  v29[3] = v25;
  __int128 v26 = v31[5];
  v29[4] = v31[4];
  v29[5] = v26;
  double result = *(double *)v31;
  __int128 v28 = v31[1];
  *uint64_t v29 = v31[0];
  v29[1] = v28;
  return result;
}

uint64_t sub_10009EC0C@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _WORD *a5@<X8>)
{
  int v50 = a4;
  uint64_t v49 = a3;
  uint64_t v52 = a5;
  uint64_t v51 = a1;
  *(void *)&__int128 v63 = a1;
  unsigned int v48 = a2;
  DWORD2(v63) = a2;
  int v5 = *(_DWORD *)((char *)&v63 + 5);
  uint64_t v56 = type metadata accessor for Mirror(0LL);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  int v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100008E00(&qword_1001163D0);
  uint64_t inited = swift_initStackObject(v8, v66);
  int v10 = 0;
  uint64_t v11 = 0LL;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
  *(void *)(inited + 32) = 0x200000001LL;
  uint64_t v12 = inited + 32;
  *(_BYTE *)(inited + 42) = 82;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 385;
  *(_BYTE *)(inited + 45) = 82;
  *(_WORD *)(inited + 43) = 384;
  *(void *)(inited + 48) = 0x800000004LL;
  *(_BYTE *)(inited + 58) = 80;
  *(_WORD *)(inited + 56) = 705;
  *(_BYTE *)(inited + 6Hasher._combine(_:)(v0 & 1) = 80;
  uint64_t v47 = inited;
  *(_WORD *)(inited + 59) = 704;
  unint64_t v67 = &_swiftEmptySetSingleton;
  uint64_t v53 = &v64;
  int v13 = _swiftEmptyArrayStorage;
  int v57 = v5;
  uint64_t v54 = inited + 32;
  do
  {
    int v14 = v10;
    uint64_t v15 = v12 + v11;
    if ((*(_DWORD *)(v12 + v11) & v5) == 0) {
      goto LABEL_3;
    }
    int v16 = *(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16);
    int v17 = *(_DWORD *)(v15 + 4) & v5;
    if (v17) {
      int v18 = *(unsigned __int16 *)(v15 + 8) | (*(unsigned __int8 *)(v15 + 10) << 16);
    }
    else {
      int v18 = *(unsigned __int16 *)(v15 + 11) | (*(unsigned __int8 *)(v15 + 13) << 16);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    int v59 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      int v13 = sub_10004F514(0LL, v13[2] + 1LL, 1, v13);
    }
    unint64_t v21 = v13[2];
    unint64_t v20 = v13[3];
    if (v21 >= v20 >> 1) {
      int v13 = sub_10004F514((void *)(v20 > 1), v21 + 1, 1, v13);
    }
    v13[2] = v21 + 1;
    __int16 v22 = (char *)v13 + 3 * v21;
    v22[34] = BYTE2(v18);
    *((_WORD *)v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
    if (!v17)
    {
      int v5 = v57;
      LOBYTE(v14) = v59;
      goto LABEL_3;
    }

    uint64_t v58 = v13;
    *((void *)&v64 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
    LOWORD(v63) = v16;
    BYTE2(v63) = BYTE2(v16);
    uint64_t v23 = Mirror.init(reflecting:)(&v63);
    int v24 = v7;
    __int128 v25 = (void *)Mirror.children.getter(v23);
    uint64_t v27 = v25[2];
    uint64_t v26 = v25[3];
    uint64_t v28 = v25[4];
    uint64_t v29 = v25[5];
    uint64_t ObjectType = swift_getObjectType(v27);
    swift_unknownObjectRetain(v27);
    swift_unknownObjectRetain(v28);
    uint64_t v31 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v26);
    uint64_t v32 = swift_getObjectType(v28);
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v32, v29);
    if (v31 != result)
    {
      __break(1u);
      return result;
    }

    char v34 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v28, v29, ObjectType, v26);
    swift_unknownObjectRelease(v28, v35);
    if ((v34 & 1) != 0)
    {
      swift_unknownObjectRelease(v27, v36);
      __int128 v64 = 0u;
      __int128 v65 = 0u;
      __int128 v63 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v27, v26);
      __int128 v63 = v60;
      __int128 v64 = v61;
      __int128 v65 = v62;
      swift_unknownObjectRelease(v27, v37);
    }

    int v7 = v24;
    LOBYTE(v14) = v59;
    swift_release(v25);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v24, v56);
    int v13 = v58;
    uint64_t v12 = v54;
    if (!*((void *)&v65 + 1))
    {
      sub_100058DF4((uint64_t)&v63);
      int v5 = v57;
      goto LABEL_3;
    }

    __int128 v38 = v63;
    sub_100017A40(v53);
    int v5 = v57;
    if (!*((void *)&v38 + 1)) {
      goto LABEL_3;
    }
    if (v38 == __PAIR128__(0xE800000000000000LL, 0x79746964696C6176LL))
    {
      swift_bridgeObjectRelease(0xE800000000000000LL);
    }

    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)( v38,  *((void *)&v38 + 1),  0x79746964696C6176LL,  0xE800000000000000LL,  0LL);
      swift_bridgeObjectRelease(*((void *)&v38 + 1));
      if ((v39 & 1) == 0) {
        goto LABEL_3;
      }
    }

    sub_1000516F0(&v63, 10LL);
LABEL_3:
    int v10 = 1;
    uint64_t v11 = 16LL;
  }

  while ((v14 & 1) == 0);
  swift_bridgeObjectRelease(v47);
  unint64_t v40 = v67;
  uint64_t v41 = sub_100051240((uint64_t)v67);
  uint64_t result = swift_bridgeObjectRelease(v40);
  if (!v13[2])
  {
    uint64_t result = swift_bridgeObjectRelease(v13);
    int v13 = 0LL;
    if (v41[2]) {
      goto LABEL_26;
    }
LABEL_30:
    uint64_t result = swift_release(v41);
    uint64_t v41 = 0LL;
    goto LABEL_26;
  }

  if (!v41[2]) {
    goto LABEL_30;
  }
LABEL_26:
  unsigned __int8 v42 = BYTE1(v48);
  int v43 = HIWORD(v48) | 0x10000;
  if (v48 < 0x10000) {
    int v43 = -65536;
  }
  uint64_t v44 = v52;
  *uint64_t v52 = v43;
  *((_BYTE *)v44 + 2) = BYTE2(v43);
  uint64_t v45 = v51;
  uint64_t v46 = v49;
  *((void *)v44 + Hasher._combine(_:)(v0 & 1) = BYTE3(v51);
  *((void *)v44 + 2) = v46;
  v44[12] = v50;
  *((void *)v44 + 4) = v41;
  *((void *)v44 + 5) = v13;
  *((_BYTE *)v44 + 48) = BYTE4(v45) & 1;
  *((_BYTE *)v44 + 49) = (v45 & 0x200000000LL) != 0;
  *((void *)v44 + swift_unknownObjectWeakDestroy(v0 + 7) = v42;
  return result;
}

uint64_t sub_10009F12C@<X0>(_WORD *a1@<X8>)
{
  int v43 = a1;
  uint64_t v47 = type metadata accessor for Mirror(0LL);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100008E00(&qword_1001163D8);
  uint64_t inited = swift_initStackObject(v4, v56);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(void *)(inited + 32) = 0x200000001LL;
  *(_BYTE *)(inited + 42) = 64;
  *(_WORD *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 449;
  *(_BYTE *)(inited + 45) = 64;
  *(_WORD *)(inited + 43) = 448;
  int v57 = &_swiftEmptySetSingleton;
  int v6 = *(_DWORD *)(v1 + 5);
  uint64_t v41 = v1;
  int v42 = *(unsigned __int16 *)(v1 + 9);
  if ((v6 & 1) != 0)
  {
    if ((v6 & 2) != 0) {
      LODWORD(v8) = 4194753;
    }
    else {
      LODWORD(v8) = 4194752;
    }
    int v7 = sub_10004F514(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v10 = v7[2];
    unint64_t v9 = v7[3];
    int64_t v11 = v10 + 1;
    if (v10 >= v9 >> 1) {
      goto LABEL_35;
    }
    goto LABEL_7;
  }

  int v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    swift_bridgeObjectRelease(inited);
    uint64_t v13 = v7[2];
    if (!v13) {
      break;
    }
    uint64_t v44 = &v54;
    swift_bridgeObjectRetain(v7);
    uint64_t v14 = 32LL;
    uint64_t v45 = v7;
    while (1)
    {
      uint64_t v48 = v14;
      uint64_t v49 = v13;
      uint64_t v15 = (char *)v7 + v14;
      __int16 v16 = *(_WORD *)v15;
      LOBYTE(v15) = v15[2];
      *((void *)&v54 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
      BYTE2(v53) = (_BYTE)v15;
      LOWORD(v53) = v16;
      uint64_t v17 = Mirror.init(reflecting:)(&v53);
      int v18 = v3;
      uint64_t v19 = (void *)Mirror.children.getter(v17);
      uint64_t inited = v19[2];
      uint64_t v8 = v19[3];
      unint64_t v10 = v19[4];
      int v7 = (void *)v19[5];
      uint64_t ObjectType = swift_getObjectType(inited);
      swift_unknownObjectRetain(inited);
      swift_unknownObjectRetain(v10);
      unint64_t v3 = (char *)dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v8);
      uint64_t v21 = swift_getObjectType(v10);
      int64_t v11 = v10;
      char v22 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v10, v7, ObjectType, v8);
      swift_unknownObjectRelease(v10, v23);
      if ((v22 & 1) != 0)
      {
        swift_unknownObjectRelease(inited, v24);
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        __int128 v53 = 0u;
      }

      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter(inited, v8);
        __int128 v53 = v50;
        __int128 v54 = v51;
        __int128 v55 = v52;
        swift_unknownObjectRelease(inited, v25);
      }

      int v7 = v45;
      unint64_t v3 = v18;
      swift_release(v19);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v47);
      if (*((void *)&v55 + 1))
      {
        uint64_t v26 = *((void *)&v53 + 1);
        uint64_t v27 = v53;
        sub_100017A40(v44);
        if (v26)
        {
          if (v27 == 0x726F7463656C6573LL && v26 == 0xE800000000000000LL)
          {
            swift_bridgeObjectRelease(v7);
            swift_bridgeObjectRelease(0xE800000000000000LL);
            goto LABEL_24;
          }

          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, 0x726F7463656C6573LL, 0xE800000000000000LL, 0LL);
          swift_bridgeObjectRelease(v26);
          if ((v28 & 1) != 0)
          {
            swift_bridgeObjectRelease(v7);
            goto LABEL_24;
          }
        }
      }

      else
      {
        sub_100058DF4((uint64_t)&v53);
      }

      uint64_t v14 = v48 + 3;
      uint64_t v13 = v49 - 1;
      if (v49 == 1)
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_35:
    int v7 = sub_10004F514((void *)(v9 > 1), v11, 1, v7);
LABEL_7:
    v7[2] = v11;
    uint64_t v12 = (char *)v7 + 3 * v10;
    v12[34] = BYTE2(v8);
    *((_WORD *)v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  }

uint64_t sub_10009F5AC@<X0>( uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7 = result;
  char v10 = BYTE5(result);
  if ((unsigned __int16)(a2 >> 8))
  {
    dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
    uint64_t result = swift_bridgeObjectRelease(v9);
  }

  *(_BYTE *)(a5 + 2) = -1;
  *(_WORD *)a5 = 0;
  *(void *)(a5 + 8) = BYTE3(v7);
  *(void *)(a5 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(_WORD *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = 0LL;
  *(void *)(a5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = BYTE4(v7);
  *(_BYTE *)(a5 + 48) = (v10 & 2) != 0;
  *(_BYTE *)(a5 + 49) = (v10 & 8) != 0;
  *(_BYTE *)(a5 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = (v10 & 1) == 0;
  *(_BYTE *)(a5 + 5Hasher._combine(_:)(v0 & 1) = (v10 & 4) == 0;
  return result;
}

Swift::Int ADC3InputTerminalDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009F6E4()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)(v5, 0LL);
  sub_100042AAC((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3InputTerminalDescriptor(uint64_t a1)
{
  return sub_100042AAC(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_10009F748(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(v1 + 16);
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  Hasher.init(_seed:)(v6, a1);
  sub_100042AAC((uint64_t)v6, v4, v3, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3InputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003AF9C( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
}

Swift::Int ADC3OutputTerminalDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(void *)int64_t v11 = a2;
  *(_DWORD *)&v11[8] = a3;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 40;
  __int16 v7 = *(_WORD *)&v11[7];
  unsigned int v8 = a3 >> 8;
  Hasher.init(_seed:)(v11, 0LL);
  v10[0] = v3;
  *(_DWORD *)&v10[1] = v5;
  *(_WORD *)&void v10[5] = v6;
  *(_WORD *)&v10[7] = v7;
  *(_WORD *)&v10[9] = v8;
  sub_100041A70((uint64_t)v11, a1, *(unint64_t *)v10, *(unsigned int *)&v10[8]);
  return Hasher._finalize()();
}

Swift::Int sub_10009F844()
{
  char v1 = *(_BYTE *)(v0 + 8);
  unsigned int v2 = *(_DWORD *)(v0 + 9);
  unsigned int v3 = *(_DWORD *)(v0 + 13);
  __int16 v4 = *(_WORD *)(v0 + 17);
  unint64_t v5 = *(void *)v0;
  Hasher.init(_seed:)(v8, 0LL);
  v7[0] = v1;
  *(void *)&v7[1] = __PAIR64__(v3, v2);
  *(_WORD *)&void v7[9] = v4;
  sub_100041A70((uint64_t)v8, v5, *(unint64_t *)v7, *(unsigned int *)&v7[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3OutputTerminalDescriptor(uint64_t a1)
{
  *(void *)&v3[1] = *(void *)(v1 + 9);
  *(_WORD *)&void v3[9] = *(_WORD *)(v1 + 17);
  return sub_100041A70(a1, *(void *)v1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_10009F8F4(uint64_t a1)
{
  char v2 = *(_BYTE *)(v1 + 8);
  unsigned int v3 = *(_DWORD *)(v1 + 9);
  unsigned int v4 = *(_DWORD *)(v1 + 13);
  __int16 v5 = *(_WORD *)(v1 + 17);
  unint64_t v6 = *(void *)v1;
  Hasher.init(_seed:)(v9, a1);
  v8[0] = v2;
  *(void *)&v8[1] = __PAIR64__(v4, v3);
  *(_WORD *)&void v8[9] = v5;
  sub_100041A70((uint64_t)v9, v6, *(unint64_t *)v8, *(unsigned int *)&v8[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3OutputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  char v2 = *(_BYTE *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 9);
  unsigned int v4 = *(_DWORD *)(a2 + 13);
  __int16 v5 = *(_WORD *)(a2 + 17);
  unint64_t v6 = *(void *)a2;
  *(void *)&v10[1] = *(void *)(a1 + 9);
  *(_WORD *)&v10[9] = *(_WORD *)(a1 + 17);
  unint64_t v7 = *(void *)v10;
  unsigned int v8 = *(_DWORD *)&v10[8];
  v10[0] = v2;
  *(void *)&v10[1] = __PAIR64__(v4, v3);
  *(_WORD *)&v10[9] = v5;
  return sub_1000399A8(*(void *)a1, v7, v8, v6, *(unint64_t *)v10, *(unsigned int *)&v10[8]);
}

Swift::Int ADC3MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_10004454C);
}

Swift::Int sub_10009F9D8(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_10004454C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3MixerUnitDescriptor(uint64_t a1)
{
  return sub_10004454C(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_10009F9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_10004454C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3MixerUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003D3D8);
}

Swift::Int ADC3MixerUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_10009FF24(a1, (void (*)(void *, uint64_t))sub_100041C48);
}

Swift::Int sub_10009FA18(uint64_t a1, uint64_t a2)
{
  return sub_10009FF78(a1, a2, (void (*)(void *, uint64_t))sub_100041C48);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_100041C48(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_10009FA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009FFE8(a1, a2, a3, (void (*)(void *, uint64_t))sub_100041C48);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3MixerUnitDescriptorPart2( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A0044(a1, a2, a3, a4, sub_100039C6C);
}

Swift::Int ADC3SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_1000434D0);
}

Swift::Int sub_10009FA58(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_1000434D0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SelectorUnitDescriptor(uint64_t a1)
{
  return sub_1000434D0(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_10009FA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000434D0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SelectorUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003BD9C);
}

Swift::Int ADC3SelectorUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_10009FF24(a1, (void (*)(void *, uint64_t))sub_100040D84);
}

Swift::Int sub_10009FA98(uint64_t a1, uint64_t a2)
{
  return sub_10009FF78(a1, a2, (void (*)(void *, uint64_t))sub_100040D84);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SelectorUnitDescriptorPart2(uint64_t a1)
{
  return sub_100040D84(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_10009FAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009FFE8(a1, a2, a3, (void (*)(void *, uint64_t))sub_100040D84);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SelectorUnitDescriptorPart2( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A0044(a1, a2, a3, a4, sub_100038818);
}

Swift::Int ADC3FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_1000439DC);
}

Swift::Int sub_10009FAD8(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_1000439DC);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3FeatureUnitDescriptor(uint64_t a1)
{
  return sub_1000439DC(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_10009FAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000439DC);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3FeatureUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003C474);
}

Swift::Int ADC3EffectUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100044200);
}

Swift::Int sub_10009FB18(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100044200);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3EffectUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100044200);
}

Swift::Int sub_10009FB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100044200);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3EffectUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003CF6C);
}

Swift::Int ADC3ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100041A64);
}

Swift::Int sub_10009FB54(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100041A64);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ProcessingUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100041A64);
}

Swift::Int sub_10009FB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100041A64);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ProcessingUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003999C);
}

Swift::Int ADC3ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100042C80);
}

Swift::Int sub_10009FB90(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100042C80);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ExtensionUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100042C80);
}

Swift::Int sub_10009FBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100042C80);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ExtensionUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003B25C);
}

Swift::Int ADC3ExtensionUnitDescriptorPart2.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10009FC04()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100040654((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ExtensionUnitDescriptorPart2( uint64_t a1)
{
  return sub_100040654(a1, *v1);
}

Swift::Int sub_10009FC50(uint64_t a1)
{
  unint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100040654((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ExtensionUnitDescriptorPart2( unint64_t *a1, unint64_t *a2)
{
  return sub_100037EFC(*a1, *a2);
}

Swift::Int ADC3ClockSourceDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)uint64_t v12 = a1;
  *(_DWORD *)&v12[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  int v7 = *(_DWORD *)&v12[5];
  unsigned int v8 = a2 >> 8;
  unsigned int v9 = HIWORD(a2);
  Hasher.init(_seed:)(v12, 0LL);
  LOBYTE(v1Hasher._combine(_:)(v0 & 1) = v2;
  BYTE1(v1Hasher._combine(_:)(v0 & 1) = v3;
  BYTE2(v1Hasher._combine(_:)(v0 & 1) = v4;
  BYTE3(v1Hasher._combine(_:)(v0 & 1) = v5;
  BYTE4(v1Hasher._combine(_:)(v0 & 1) = v6;
  *(_DWORD *)((char *)&v11 + 5) = v7;
  BYTE9(v1Hasher._combine(_:)(v0 & 1) = v8;
  WORD5(v1Hasher._combine(_:)(v0 & 1) = v9;
  sub_1000439E8((uint64_t)v12, v11, DWORD2(v11));
  return Hasher._finalize()();
}

Swift::Int sub_10009FD40()
{
  char v1 = *(_BYTE *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  char v3 = *(_BYTE *)(v0 + 9);
  __int16 v4 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)(v7, 0LL);
  LODWORD(v6) = *(_DWORD *)v0;
  BYTE4(v6) = v1;
  *(_DWORD *)((char *)&v6 + 5) = v2;
  BYTE9(v6) = v3;
  WORD5(v6) = v4;
  sub_1000439E8((uint64_t)v7, v6, DWORD2(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSourceDescriptor(uint64_t a1)
{
  v3[4] = *(_BYTE *)(v1 + 4);
  *(_DWORD *)&v3[5] = *(_DWORD *)(v1 + 5);
  void v3[9] = *(_BYTE *)(v1 + 9);
  *(_WORD *)&v3[10] = *(_WORD *)(v1 + 10);
  return sub_1000439E8(a1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_10009FDF4(uint64_t a1)
{
  char v2 = *(_BYTE *)(v1 + 4);
  int v3 = *(_DWORD *)(v1 + 5);
  char v4 = *(_BYTE *)(v1 + 9);
  __int16 v5 = *(_WORD *)(v1 + 10);
  Hasher.init(_seed:)(v8, a1);
  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 7) = *(_DWORD *)v1;
  BYTE4(vswift_unknownObjectWeakDestroy(v0 + 7) = v2;
  *(_DWORD *)((char *)&v7 + 5) = v3;
  BYTE9(vswift_unknownObjectWeakDestroy(v0 + 7) = v4;
  WORD5(vswift_unknownObjectWeakDestroy(v0 + 7) = v5;
  sub_1000439E8((uint64_t)v8, v7, DWORD2(v7));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSourceDescriptor( uint64_t a1, uint64_t a2)
{
  v5[4] = *(_BYTE *)(a1 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a1 + 5);
  void v5[9] = *(_BYTE *)(a1 + 9);
  *(_WORD *)&v5[10] = *(_WORD *)(a1 + 10);
  unint64_t v2 = *(void *)v5;
  unsigned int v3 = *(_DWORD *)&v5[8];
  LODWORD(v6) = *(_DWORD *)a2;
  BYTE4(v6) = *(_BYTE *)(a2 + 4);
  *(_DWORD *)((char *)&v6 + 5) = *(_DWORD *)(a2 + 5);
  BYTE9(v6) = *(_BYTE *)(a2 + 9);
  WORD5(v6) = *(_WORD *)(a2 + 10);
  return sub_10003C480(v2, v3, v6, DWORD2(v6));
}

Swift::Int ADC3ClockSelectorDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100042DFC);
}

Swift::Int sub_10009FEE4(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_100042DFC);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSelectorDescriptor(uint64_t a1)
{
  return sub_100042DFC(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_10009FF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100042DFC);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSelectorDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003B448);
}

Swift::Int ADC3ClockSelectorDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_10009FF24(a1, (void (*)(void *, uint64_t))sub_1000407AC);
}

Swift::Int sub_10009FF24(uint64_t a1, void (*a2)(void *, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_10009FF6C(uint64_t a1, uint64_t a2)
{
  return sub_10009FF78(a1, a2, (void (*)(void *, uint64_t))sub_1000407AC);
}

Swift::Int sub_10009FF78(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned __int16 *)v3 + 2);
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v5 | (v6 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockSelectorDescriptorPart2( uint64_t a1)
{
  return sub_1000407AC(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_10009FFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009FFE8(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000407AC);
}

Swift::Int sub_10009FFE8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *((unsigned __int16 *)v4 + 2);
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v6 | (v7 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockSelectorDescriptorPart2( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A0044(a1, a2, a3, a4, sub_1000380A8);
}

uint64_t sub_1000A0044( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC3ClockMultiplierDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)__int128 v11 = a1;
  *(_DWORD *)&v11[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  int v7 = *(_DWORD *)&v11[5];
  unsigned int v8 = a2 >> 8;
  Hasher.init(_seed:)(v11, 0LL);
  v10[0] = v2;
  v10[1] = v3;
  _OWORD v10[2] = v4;
  v10[3] = v5;
  v10[4] = v6;
  *(_DWORD *)&void v10[5] = v7;
  *(_WORD *)&v10[9] = v8;
  sub_1000413F8((uint64_t)v11, *(unint64_t *)v10, *(unsigned int *)&v10[8]);
  return Hasher._finalize()();
}

Swift::Int sub_1000A00FC()
{
  char v1 = *(_BYTE *)(v0 + 4);
  int v2 = *(_DWORD *)(v0 + 5);
  __int16 v3 = *(_WORD *)(v0 + 9);
  Hasher.init(_seed:)(v6, 0LL);
  *(_DWORD *)unint64_t v5 = *(_DWORD *)v0;
  v5[4] = v1;
  *(_DWORD *)&v5[5] = v2;
  *(_WORD *)&void v5[9] = v3;
  sub_1000413F8((uint64_t)v6, *(unint64_t *)v5, *(unsigned int *)&v5[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClockMultiplierDescriptor(uint64_t a1)
{
  v3[4] = *(_BYTE *)(v1 + 4);
  *(_DWORD *)&v3[5] = *(_DWORD *)(v1 + 5);
  *(_WORD *)&void v3[9] = *(_WORD *)(v1 + 9);
  return sub_1000413F8(a1, *(unint64_t *)v3, *(unsigned int *)&v3[8]);
}

Swift::Int sub_1000A0198(uint64_t a1)
{
  char v2 = *(_BYTE *)(v1 + 4);
  int v3 = *(_DWORD *)(v1 + 5);
  __int16 v4 = *(_WORD *)(v1 + 9);
  Hasher.init(_seed:)(v7, a1);
  *(_DWORD *)unint64_t v6 = *(_DWORD *)v1;
  v6[4] = v2;
  *(_DWORD *)&v6[5] = v3;
  *(_WORD *)&void v6[9] = v4;
  sub_1000413F8((uint64_t)v7, *(unint64_t *)v6, *(unsigned int *)&v6[8]);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClockMultiplierDescriptor( uint64_t a1, uint64_t a2)
{
  v5[4] = *(_BYTE *)(a1 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a1 + 5);
  *(_WORD *)&void v5[9] = *(_WORD *)(a1 + 9);
  unint64_t v2 = *(void *)v5;
  unsigned int v3 = *(_DWORD *)&v5[8];
  *(_DWORD *)unint64_t v5 = *(_DWORD *)a2;
  v5[4] = *(_BYTE *)(a2 + 4);
  *(_DWORD *)&v5[5] = *(_DWORD *)(a2 + 5);
  *(_WORD *)&void v5[9] = *(_WORD *)(a2 + 9);
  return sub_1000390D4(v2, v3, *(unint64_t *)v5, *(unsigned int *)&v5[8]);
}

Swift::Int ADC3SRConverterUnitDescriptor.hashValue.getter(unint64_t a1, char a2)
{
  char v2 = a1;
  *(void *)uint64_t v12 = a1;
  v12[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  __int16 v9 = *(_WORD *)&v12[7];
  Hasher.init(_seed:)(v12, 0LL);
  LOBYTE(v1Hasher._combine(_:)(v0 & 1) = v2;
  BYTE1(v1Hasher._combine(_:)(v0 & 1) = v3;
  BYTE2(v1Hasher._combine(_:)(v0 & 1) = v4;
  BYTE3(v1Hasher._combine(_:)(v0 & 1) = v5;
  BYTE4(v1Hasher._combine(_:)(v0 & 1) = v6;
  BYTE5(v1Hasher._combine(_:)(v0 & 1) = v7;
  BYTE6(v1Hasher._combine(_:)(v0 & 1) = v8;
  HIBYTE(v1Hasher._combine(_:)(v0 & 1) = v9;
  sub_100041254((uint64_t)v12, v11, SHIBYTE(v9));
  return Hasher._finalize()();
}

Swift::Int sub_1000A0300()
{
  __int16 v1 = *(_WORD *)(v0 + 4);
  char v2 = *(_BYTE *)(v0 + 6);
  __int16 v3 = *(_WORD *)(v0 + 7);
  Hasher.init(_seed:)(v6, 0LL);
  LODWORD(v5) = *(_DWORD *)v0;
  WORD2(v5) = v1;
  BYTE6(v5) = v2;
  HIBYTE(v5) = v3;
  sub_100041254((uint64_t)v6, v5, SHIBYTE(v3));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3SRConverterUnitDescriptor(uint64_t a1)
{
  *(_WORD *)&v3[4] = *(_WORD *)(v1 + 4);
  v3[6] = *(_BYTE *)(v1 + 6);
  *(_WORD *)&v3[7] = *(_WORD *)(v1 + 7);
  return sub_100041254(a1, *(unint64_t *)v3, v3[8]);
}

Swift::Int sub_1000A0398(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(v1 + 4);
  char v3 = *(_BYTE *)(v1 + 6);
  __int16 v4 = *(_WORD *)(v1 + 7);
  Hasher.init(_seed:)(v7, a1);
  LODWORD(v6) = *(_DWORD *)v1;
  WORD2(v6) = v2;
  BYTE6(v6) = v3;
  HIBYTE(v6) = v4;
  sub_100041254((uint64_t)v7, v6, SHIBYTE(v4));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3SRConverterUnitDescriptor( uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 7);
  WORD2(v5) = *(_WORD *)(a1 + 4);
  BYTE6(v5) = *(_BYTE *)(a1 + 6);
  HIBYTE(v5) = v2;
  unint64_t v3 = v5;
  LODWORD(v6) = *(_DWORD *)a2;
  WORD2(v6) = *(_WORD *)(a2 + 4);
  BYTE6(v6) = *(_BYTE *)(a2 + 6);
  *(_WORD *)((char *)&v6 + swift_unknownObjectWeakDestroy(v0 + 7) = *(_WORD *)(a2 + 7);
  return sub_100038E8C(v3, SHIBYTE(v2), v6, SBYTE8(v6));
}

Swift::Int ADC3PowerDomainDescriptor.hashValue.getter(unint64_t a1, int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A04A4()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_100043850((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3PowerDomainDescriptor(uint64_t a1)
{
  return sub_100043850(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1000A04FC(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_100043850((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3PowerDomainDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003C25C(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

Swift::Int ADC3ClusterClusterDescriptionSegment.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A05A0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int8 *)v0 + 2);
  uint64_t v3 = *(unsigned __int16 *)((char *)v0 + 3);
  Hasher.init(_seed:)(v5, 0LL);
  sub_1000449AC((uint64_t)v5, v1 | (v2 << 16) | (v3 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC3ClusterClusterDescriptionSegment( uint64_t a1)
{
  return sub_1000449AC( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 3) << 24));
}

Swift::Int sub_1000A0610(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 2);
  uint64_t v4 = *(unsigned __int16 *)((char *)v1 + 3);
  Hasher.init(_seed:)(v6, a1);
  sub_1000449AC((uint64_t)v6, v2 | (v3 << 16) | (v4 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC3ClusterClusterDescriptionSegment( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003D934( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 3) << 24),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 3) << 24));
}

uint64_t sub_1000A0690(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116290,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A06CC()
{
  return sub_10000B6D4( &qword_100116298,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3InputTerminalDescriptor);
}

uint64_t sub_1000A06F8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162A0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0734()
{
  return sub_10000B6D4( &qword_1001162A8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3OutputTerminalDescriptor);
}

uint64_t sub_1000A0760(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162B0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A079C()
{
  return sub_10000B6D4( &qword_1001162B8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3MixerUnitDescriptor);
}

uint64_t sub_1000A07C8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162C0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3MixerUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0804()
{
  return sub_10000B6D4( &qword_1001162C8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_1000A0830(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162D0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A086C()
{
  return sub_10000B6D4( &qword_1001162D8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_1000A0898(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162E0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SelectorUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3SelectorUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A08D4()
{
  return sub_10000B6D4( &qword_1001162E8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SelectorUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_1000A0900(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001162F0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A093C()
{
  return sub_10000B6D4( &qword_1001162F8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_1000A0968(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116300,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3EffectUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A09A4()
{
  return sub_10000B6D4( &qword_100116308,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3EffectUnitDescriptor);
}

uint64_t sub_1000A09D0(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116310,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0A0C()
{
  return sub_10000B6D4( &qword_100116318,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_1000A0A38(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116320,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0A74()
{
  return sub_10000B6D4( &qword_100116328,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_1000A0AA0(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116330,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3ExtensionUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0ADC()
{
  return sub_10000B6D4( &qword_100116338,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000A0B08(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116340,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockSourceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0B44()
{
  return sub_10000B6D4( &qword_100116348,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockSourceDescriptor);
}

uint64_t sub_1000A0B70(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116350,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockSelectorDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0BAC()
{
  return sub_10000B6D4( &qword_100116358,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_1000A0BD8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116360,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSelectorDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3ClockSelectorDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0C14()
{
  return sub_10000B6D4( &qword_100116368,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockSelectorDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_1000A0C40(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116370,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockMultiplierDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockMultiplierDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0C7C()
{
  return sub_10000B6D4( &qword_100116378,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClockMultiplierDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3ClockMultiplierDescriptor);
}

uint64_t sub_1000A0CA8(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116380,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SRConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3SRConverterUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0CE4()
{
  return sub_10000B6D4( &qword_100116388,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3SRConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3SRConverterUnitDescriptor);
}

uint64_t sub_1000A0D10(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116390,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3PowerDomainDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3PowerDomainDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0D4C()
{
  return sub_10000B6D4( &qword_100116398,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3PowerDomainDescriptor,  (uint64_t)&protocol conformance descriptor for ADC3PowerDomainDescriptor);
}

uint64_t sub_1000A0D78(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001163A0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterClusterDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterClusterDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A0DB4()
{
  return sub_10000B6D4( &qword_1001163A8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC3ClusterClusterDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC3ClusterClusterDescriptionSegment);
}

void sub_1000A0DE0()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 7);
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1000A0E2C()
{
  return Hasher._finalize()();
}

void sub_1000A0EB0()
{
  __asm { BR              X10 }

uint64_t sub_1000A0EF4()
{
  return sub_10004484C(v0, v1 & 0xFFFFFF);
}

uint64_t sub_1000A0F18()
{
  return sub_10003FFC0(v0, v1 & 0xFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000A0F3C()
{
  return sub_10003FFB4(v0, v1 & 0xFFFFFFFFFFLL);
}

uint64_t sub_1000A0F60()
{
  return sub_10003FE44(v0, v1 & 0xFFFFFFFFFFFFLL);
}

void sub_1000A0F84(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 7);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000A0FCC()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A1050(unint64_t *a1)
{
  return sub_1000A51BC(*a1);
}

void sub_1000A105C(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A12F8LL);
}

uint64_t sub_1000A130C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006E218(1LL, a1, a2);
  if (!v4)
  {
    unint64_t v13 = *(void *)(result + 16);
    if (!v13)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    uint64_t v14 = v10;
    uint64_t v15 = v11;
    LOWORD(v6) = *(_WORD *)(result + 32);
    unsigned int v16 = *(unsigned __int8 *)(result + 34);
    int64_t v8 = *(unsigned __int8 *)(result + 35);
    int v17 = *(unsigned __int16 *)(result + 36);
    unsigned int v18 = *(unsigned __int8 *)(result + 38);
    swift_bridgeObjectRelease(result);
    unint64_t v76 = v14;
    uint64_t v77 = v15;
    unint64_t v5 = sub_1000A5230((uint64_t)&v76);
    unsigned int v78 = v18;
    int v79 = v17;
    char v70 = v8;
    unsigned int v71 = v16;
    unint64_t v3 = HIBYTE(v5);
    if (!HIBYTE(v5))
    {
      uint64_t v12 = sub_100050970(0LL, 1LL, 1, _swiftEmptyArrayStorage);
      unint64_t v3 = v12[2];
      unint64_t v13 = v12[3];
      int64_t v8 = v3 + 1;
      __int16 v7 = v79;
      if (v3 >= v13 >> 1) {
        goto LABEL_46;
      }
      goto LABEL_35;
    }

    uint64_t v73 = _swiftEmptyArrayStorage;
    __int16 v7 = v79;
    while (1)
    {
      uint64_t v19 = sub_100008E00(&qword_100114E58);
      uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
      *(_BYTE *)(v20 + 38) = BYTE6(v5);
      *(_WORD *)(v20 + 36) = WORD2(v5);
      *(_DWORD *)(v20 + 32) = v5;
      *(_BYTE *)(v20 + 39) = v3;
      unint64_t v13 = v78;
      if (v78) {
        break;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      uint64_t v12 = sub_100050970((void *)(v13 > 1), v8, 1, v12);
LABEL_35:
      v12[2] = v8;
      __int128 v64 = &v12[v3];
      *((_DWORD *)v64 + 8) = v5;
      *((_BYTE *)v64 + 38) = BYTE6(v5);
      *((_WORD *)v64 + 18) = WORD2(v5);
      *((_BYTE *)v64 + 39) = 0;
      __int128 v65 = v12;
      unint64_t v5 = sub_1000A5230((uint64_t)&v76);
      uint64_t v73 = v65;
      unint64_t v3 = HIBYTE(v5);
    }

    uint64_t v21 = (void *)v20;
    __int16 v69 = v6;
    char v22 = 1;
    int v74 = _swiftEmptyArrayStorage;
    while (2)
    {
      unsigned __int8 v72 = v22;
      do
      {
        uint64_t v23 = v76;
        uint64_t v6 = v77;
        uint64_t v24 = sub_10006DEA4(1LL, v76, v77);
        unint64_t v13 = *(void *)(v24 + 16);
        if (!v13)
        {
          __break(1u);
          goto LABEL_40;
        }

        unint64_t v3 = *(unsigned __int8 *)(v24 + 34);
        swift_bridgeObjectRelease(v24);
        if ((int)v3 > 33)
        {
          if ((_DWORD)v3 == 34)
          {
            uint64_t v52 = sub_10006D7CC(1LL, v23, v6);
            unint64_t v13 = *(void *)(v52 + 16);
            if (!v13) {
              goto LABEL_44;
            }
            __int128 v55 = v53;
            uint64_t v56 = v54;
            uint64_t v57 = *(unsigned __int16 *)(v52 + 32);
            uint64_t v58 = *(unsigned __int8 *)(v52 + 34);
            uint64_t v59 = *(unsigned __int16 *)(v52 + 35);
            swift_bridgeObjectRelease(v52);
            unint64_t v3 = 0LL;
            unint64_t v76 = v55;
            uint64_t v77 = v56;
            uint64_t v35 = v57 | (v58 << 16) | (v59 << 24);
            __int16 v7 = v79;
            int64_t v8 = 3LL;
          }

          else
          {
            if ((_DWORD)v3 != 255)
            {
LABEL_36:
              unint64_t v66 = sub_10000AE14();
              uint64_t v67 = swift_allocError(&type metadata for AUAError, v66, 0LL, 0LL);
              *(_BYTE *)uint64_t v68 = 37;
              *(void *)(v68 + 8) = 0LL;
              *(void *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
              *(void *)(v68 + 24) = 0xD000000000000012LL;
              *(void *)(v68 + 32) = 0x80000001000D2680LL;
              *(void *)(v68 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
              *(void *)(v68 + 48) = 0x80000001000D26A0LL;
              *(void *)(v68 + 56) = 100LL;
              swift_willThrow(v67);
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(v21);
              return swift_bridgeObjectRelease(v73);
            }

            uint64_t v36 = sub_10006D77C(1LL, v23, v6);
            unint64_t v13 = *(void *)(v36 + 16);
            if (!v13) {
              goto LABEL_42;
            }
            char v39 = v37;
            uint64_t v40 = v38;
            uint64_t v41 = *(unsigned __int16 *)(v36 + 32);
            uint64_t v42 = *(unsigned __int8 *)(v36 + 34);
            swift_bridgeObjectRelease(v36);
            int64_t v8 = 0LL;
            unint64_t v76 = v39;
            uint64_t v77 = v40;
            uint64_t v35 = v41 | (v42 << 16);
            unint64_t v3 = 1LL;
          }
        }

        else if ((_DWORD)v3 == 32)
        {
          uint64_t v43 = sub_10006DE54(1LL, v23, v6);
          unint64_t v13 = *(void *)(v43 + 16);
          if (!v13) {
            goto LABEL_43;
          }
          uint64_t v46 = v44;
          uint64_t v47 = v45;
          uint64_t v48 = *(unsigned __int8 *)(v43 + 36);
          uint64_t v49 = *(unsigned __int8 *)(v43 + 37);
          uint64_t v50 = *(unsigned int *)(v43 + 32);
          swift_bridgeObjectRelease(v43);
          unint64_t v3 = 0LL;
          unint64_t v76 = v46;
          uint64_t v77 = v47;
          uint64_t v51 = v50 | (v48 << 32);
          __int16 v7 = v79;
          uint64_t v35 = v51 | (v49 << 40);
          int64_t v8 = 1LL;
        }

        else
        {
          if ((_DWORD)v3 != 33) {
            goto LABEL_36;
          }
          uint64_t v25 = sub_10006DADC(1LL, v23, v6);
          unint64_t v13 = *(void *)(v25 + 16);
          if (!v13) {
            goto LABEL_41;
          }
          char v28 = v26;
          uint64_t v29 = v27;
          uint64_t v30 = *(unsigned __int8 *)(v25 + 36);
          uint64_t v31 = *(unsigned __int8 *)(v25 + 37);
          uint64_t v32 = *(unsigned int *)(v25 + 32);
          uint64_t v33 = *(unsigned __int8 *)(v25 + 38);
          swift_bridgeObjectRelease(v25);
          unint64_t v3 = 0LL;
          unint64_t v76 = v28;
          uint64_t v77 = v29;
          uint64_t v34 = v32 | (v30 << 32) | (v31 << 40);
          __int16 v7 = v79;
          uint64_t v35 = v34 | (v33 << 48);
          int64_t v8 = 2LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
          uint64_t v21 = sub_100050970(0LL, v21[2] + 1LL, 1, v21);
        }
        unint64_t v5 = v21[2];
        unint64_t v60 = v21[3];
        if (v5 >= v60 >> 1) {
          uint64_t v21 = sub_100050970((void *)(v60 > 1), v5 + 1, 1, v21);
        }
        v21[2] = v5 + 1;
        __int128 v61 = &v21[v5];
        *((_DWORD *)v61 + 8) = v35;
        *((_BYTE *)v61 + 38) = BYTE6(v35);
        *((_WORD *)v61 + 18) = WORD2(v35);
        *((_BYTE *)v61 + 39) = v8;
      }

      while (!(_DWORD)v3);
      swift_bridgeObjectRetain(v21);
      if ((swift_isUniquelyReferenced_nonNull_native(v74) & 1) == 0) {
        int v74 = sub_100050A7C(0LL, v74[2] + 1LL, 1, v74);
      }
      unint64_t v3 = v74[2];
      unint64_t v62 = v74[3];
      unint64_t v5 = v71;
      if (v3 >= v62 >> 1) {
        int v74 = sub_100050A7C((void *)(v62 > 1), v3 + 1, 1, v74);
      }
      v74[2] = v3 + 1;
      v74[v3 + 4] = v21;
      uint64_t result = swift_bridgeObjectRelease(v21);
      char v63 = v78;
      if (v78 == v72)
      {
        *(_WORD *)a3 = v69;
        *(_BYTE *)(a3 + 2) = v71;
        *(_BYTE *)(a3 + 3) = v70;
        *(_WORD *)(a3 + 4) = v7;
        *(_BYTE *)(a3 + 6) = v63;
        *(void *)(a3 + 8) = v73;
        *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v74;
      }

      else
      {
        char v22 = v72 + 1;
        uint64_t v21 = _swiftEmptyArrayStorage;
        if (((v72 + 1) & 0x100) == 0) {
          continue;
        }
        __break(1u);
      }

      break;
    }
  }

  return result;
}

uint64_t sub_1000A188C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10006E2C0(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      __int16 v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease(result);
      uint64_t v12 = sub_10006C838(v11, v9, v10);
      uint64_t result = sub_10006A4E8(1LL, v13, v14);
      if (*(void *)(result + 16))
      {
        int v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v25 = (int16x8_t)vmovl_u8(v4);
        __int16 v19 = *(_WORD *)(result + 32);
        uint64_t result = swift_bridgeObjectRelease(result);
        if (((v25.u16[0] - 13) & 0xFFFFFF00) == 0)
        {
          if ((((v25.i8[0] - 13) - (_DWORD)v11) & 0xFFFFFF00) == 0)
          {
            uint64_t v20 = sub_10006C838((v25.i8[0] - 13 - v11), v17, v18);
            uint64_t result = (uint64_t)sub_10006E268(1LL, v21, v22);
            if (*(void *)(result + 16))
            {
              int v23 = *(_DWORD *)(result + 32);
              __int16 v24 = *(_WORD *)(result + 36);
              uint64_t result = swift_bridgeObjectRelease(result);
              *(_DWORD *)a3 = vmovn_s16(v25).u32[0];
              *(_BYTE *)(a3 + 4) = v11;
              *(void *)(a3 + 8) = v12;
              *(_WORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
              *(void *)(a3 + 24) = v20;
              *(_DWORD *)(a3 + 32) = v23;
              *(_WORD *)(a3 + 36) = v24;
              return result;
            }

            goto LABEL_14;
          }

uint64_t sub_1000A1A18@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0LL;
  int v3 = *(_DWORD *)result;
  uint64_t v19 = 0x200000001LL;
  char v21 = 16;
  __int16 v20 = 385;
  __int16 v22 = 384;
  char v23 = 16;
  uint64_t v24 = 0x800000004LL;
  char v26 = 17;
  __int16 v25 = 705;
  __int16 v27 = 704;
  char v28 = 17;
  uint64_t v29 = 0x2000000010LL;
  char v31 = 32;
  __int16 v30 = 769;
  __int16 v32 = 768;
  char v33 = 32;
  uint64_t v34 = 0x8000000040LL;
  char v36 = 32;
  __int16 v35 = 1089;
  char v38 = 32;
  __int16 v37 = 1088;
  uint64_t v39 = 0x20000000100LL;
  char v41 = 32;
  __int16 v40 = 1409;
  char v43 = 32;
  __int16 v42 = 1408;
  uint64_t v44 = 0x80000000400LL;
  char v46 = 32;
  __int16 v45 = 1729;
  char v48 = 32;
  __int16 v47 = 1728;
  uint64_t v49 = 0x200000001000LL;
  char v51 = 48;
  __int16 v50 = 1793;
  __int16 v52 = 1792;
  char v53 = 48;
  uint64_t v54 = 0x800000004000LL;
  __int16 v55 = 2113;
  char v56 = 50;
  __int16 v57 = 2112;
  char v58 = 50;
  uint64_t v59 = 0x2000000010000LL;
  char v61 = 48;
  __int16 v60 = 2433;
  char v63 = 48;
  __int16 v62 = 2432;
  uint64_t v64 = 0x8000000040000LL;
  char v66 = 48;
  __int16 v65 = 2753;
  char v68 = 48;
  __int16 v67 = 2752;
  uint64_t v69 = 0x20000000100000LL;
  char v71 = 65;
  __int16 v70 = 2817;
  __int16 v72 = 2816;
  char v73 = 65;
  uint64_t v74 = 0x80000000400000LL;
  char v76 = 65;
  __int16 v75 = 3137;
  char v78 = 65;
  __int16 v77 = 3136;
  uint64_t v79 = 0x200000001000000LL;
  char v81 = 64;
  __int16 v80 = 3457;
  __int16 v82 = 3456;
  char v83 = 64;
  uint64_t v84 = 0x800000004000000LL;
  char v86 = 16;
  __int16 v85 = 3585;
  char v88 = 16;
  __int16 v87 = 3584;
  uint64_t v89 = 0x2000000010000000LL;
  char v91 = 16;
  __int16 v90 = 3905;
  __int16 v92 = 3904;
  char v93 = 16;
  uint8x8_t v4 = _swiftEmptyArrayStorage;
  int v94 = v3;
  do
  {
    unint64_t v5 = &v18[v2 + 1];
    if ((*(_DWORD *)&v18[v2 + 33] & v3) != 0)
    {
      int v6 = *((_DWORD *)v5 + 9);
      __int16 v7 = (unsigned __int16 *)(v5 + 43);
      uint64_t v8 = (unsigned __int16 *)(v5 + 40);
      int v9 = v6 & v3;
      if ((v6 & v3) == 0) {
        uint64_t v8 = v7;
      }
      int v10 = *((unsigned __int8 *)v8 + 2);
      int v11 = *v8;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v4);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004F514(0LL, v4[2] + 1LL, 1, v4);
        uint8x8_t v4 = (void *)result;
      }

      unint64_t v13 = v4[2];
      unint64_t v12 = v4[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004F514((void *)(v12 > 1), v13 + 1, 1, v4);
        uint8x8_t v4 = (void *)result;
      }

      v4[2] = v13 + 1;
      uint64_t v14 = (char *)v4 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
      BOOL v16 = v6 == 0x8000000 && v9 != 0;
      if (v6 == 0x20000000 || v16) {
        uint64_t result = sub_1000516F0(v18, 10LL);
      }
      int v3 = v94;
    }

    v2 += 16LL;
  }

  while (v2 != 240);
  *a2 = v4;
  return result;
}

uint64_t sub_1000A1DD4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006E7A4(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      __int16 v11 = *(_WORD *)(result + 36);
      uint64_t v12 = *(unsigned __int8 *)(result + 38);
      swift_bridgeObjectRelease(result);
      uint64_t result = sub_10006C838(v12, v9, v10);
      uint16x8_t v15 = vmovl_u8(v4);
      if (((v15.u16[0] - 9) & 0xFFFFFF00) == 0)
      {
        int16x8_t v23 = (int16x8_t)v15;
        int v16 = (v15.i8[0] - 9) - (_DWORD)v12;
        if ((v16 & 0xFFFFFF00) == 0)
        {
          uint64_t v17 = result;
          uint64_t result = sub_10006A4E8(1LL, v13, v14);
          if (*(void *)(result + 16))
          {
            __int16 v20 = v18;
            uint64_t v21 = v19;
            __int16 v22 = *(_WORD *)(result + 32);
            swift_bridgeObjectRelease(result);
            uint64_t result = sub_10006C838(v16, v20, v21);
            *(_DWORD *)a3 = vmovn_s16(v23).u32[0];
            *(_WORD *)(a3 + 4) = v11;
            *(_BYTE *)(a3 + 6) = v12;
            *(void *)(a3 + 8) = v17;
            *(_WORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
            *(void *)(a3 + 24) = result;
            return result;
          }

          goto LABEL_11;
        }

void sub_1000A1F28(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A22B8LL);
}

void sub_1000A22CC(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A26B0LL);
}

void sub_1000A26C4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A2A54LL);
}

void sub_1000A2A68(_BYTE *a1, __int16 a2)
{
}

void sub_1000A2AC0(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A2FCCLL);
}

void sub_1000A2FE0(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A3514LL);
}

void sub_1000A3528(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A38ACLL);
}

void sub_1000A38C0(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A3EC0LL);
}

void sub_1000A3ED4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A4200LL);
}

void sub_1000A4214(_BYTE *a1, __int16 a2)
{
}

void sub_1000A426C(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A4874LL);
}

void sub_1000A4888(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A4BA0LL);
}

void sub_1000A4BB4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A51A8LL);
}

uint64_t sub_1000A51BC(unint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1000A51DC + 4 * byte_1000D93FC[HIBYTE(a1)]))();
}

uint64_t sub_1000A51DC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  if (a3) {
    return 0LL;
  }
  else {
    return sub_10003D78C(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
  }
}

uint64_t sub_1000A5230(uint64_t a1)
{
  uint8x8_t v4 = *(_BYTE **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = sub_10006DEA4(1LL, *(_BYTE **)a1, v3);
  if (!v1)
  {
    if (*(void *)(result + 16))
    {
      int v6 = *(unsigned __int8 *)(result + 34);
      swift_bridgeObjectRelease(result);
      if (v6 > 33)
      {
        if (v6 == 34)
        {
          uint64_t result = sub_10006D7CC(1LL, v4, v3);
          if (*(void *)(result + 16))
          {
            uint64_t v32 = v30;
            uint64_t v33 = v31;
            uint64_t v34 = *(unsigned __int16 *)(result + 32);
            uint64_t v35 = *(unsigned __int8 *)(result + 34);
            uint64_t v36 = *(unsigned __int16 *)(result + 35);
            swift_bridgeObjectRelease(result);
            *(void *)a1 = v32;
            *(void *)(a1 + 8) = v33;
            uint64_t v15 = v34 | (v35 << 16) | (v36 << 24);
            uint64_t v16 = 0x300000000000000LL;
            return v16 | v15;
          }

          goto LABEL_22;
        }

        if (v6 == 255)
        {
          uint64_t result = sub_10006D77C(1LL, v4, v3);
          if (*(void *)(result + 16))
          {
            uint64_t v19 = v17;
            uint64_t v20 = v18;
            uint64_t v21 = *(unsigned __int16 *)(result + 32);
            uint64_t v22 = *(unsigned __int8 *)(result + 34);
            swift_bridgeObjectRelease(result);
            uint64_t v16 = 0LL;
            *(void *)a1 = v19;
            *(void *)(a1 + 8) = v20;
            uint64_t v15 = v21 | (v22 << 16);
            return v16 | v15;
          }

          goto LABEL_20;
        }
      }

      else
      {
        if (v6 == 32)
        {
          uint64_t result = sub_10006DE54(1LL, v4, v3);
          if (*(void *)(result + 16))
          {
            uint64_t v25 = v23;
            uint64_t v26 = v24;
            uint64_t v27 = *(unsigned __int8 *)(result + 36);
            uint64_t v28 = *(unsigned __int8 *)(result + 37);
            uint64_t v29 = *(unsigned int *)(result + 32);
            swift_bridgeObjectRelease(result);
            *(void *)a1 = v25;
            *(void *)(a1 + 8) = v26;
            uint64_t v15 = v29 | (v27 << 32) | (v28 << 40);
            uint64_t v16 = 0x100000000000000LL;
            return v16 | v15;
          }

          goto LABEL_21;
        }

        if (v6 == 33)
        {
          uint64_t result = sub_10006DADC(1LL, v4, v3);
          if (*(void *)(result + 16))
          {
            uint64_t v9 = v7;
            uint64_t v10 = v8;
            uint64_t v11 = *(unsigned __int8 *)(result + 36);
            uint64_t v12 = *(unsigned __int8 *)(result + 37);
            uint64_t v13 = *(unsigned __int8 *)(result + 38);
            uint64_t v14 = *(unsigned int *)(result + 32);
            swift_bridgeObjectRelease(result);
            *(void *)a1 = v9;
            *(void *)(a1 + 8) = v10;
            uint64_t v15 = v14 | (v11 << 32) | (v12 << 40) | (v13 << 48);
            uint64_t v16 = 0x200000000000000LL;
            return v16 | v15;
          }

          goto LABEL_19;
        }
      }

      unint64_t v37 = sub_10000AE14();
      uint64_t v38 = swift_allocError(&type metadata for AUAError, v37, 0LL, 0LL);
      *(_BYTE *)uint64_t v39 = 37;
      *(void *)(v39 + 8) = 0LL;
      *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v39 + 24) = 0xD000000000000012LL;
      *(void *)(v39 + 32) = 0x80000001000D2680LL;
      *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
      *(void *)(v39 + 48) = 0x80000001000D26A0LL;
      *(void *)(v39 + 56) = 100LL;
      return swift_willThrow(v38);
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ADC3ClusterDescriptorSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 7);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC3ClusterDescriptorSegment( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 7) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000A5518(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 7);
}

uint64_t sub_1000A5520(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 7) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ADC3ClusterDescriptorSegment()
{
  return &type metadata for ADC3ClusterDescriptorSegment;
}

unint64_t sub_1000A553C()
{
  unint64_t result = qword_1001163E0;
  if (!qword_1001163E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000D9E10, &type metadata for ADC3ClusterDescriptorSegment);
    atomic_store(result, (unint64_t *)&qword_1001163E0);
  }

  return result;
}

uint64_t sub_1000A5580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unint64_t v5 = (unsigned __int16 *)(a1 + 35);
  uint64_t v6 = a2 + 35;
  do
  {
    BOOL v7 = --v2 == 0;
    if (!v2) {
      break;
    }
    uint64_t v8 = (unsigned __int16 *)((char *)v5 + 3);
    uint64_t v9 = v6 + 3;
    char v10 = sub_10007E938(*v5 | (*((unsigned __int8 *)v5 + 2) << 16));
    uint64_t v6 = v9;
    unint64_t v5 = v8;
  }

  while ((v10 & 1) != 0);
  return v7;
}

BOOL sub_1000A563C(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[2].i64[0] != a2[2].i64[0] || a1[2].i64[1] != a2[2].i64[1] || a1[3].i64[0] != a2[3].i64[0]) {
    return 0LL;
  }
  uint64_t v6 = a2 + 4;
  BOOL v7 = a1 + 4;
  do
  {
    BOOL result = --v2 == 0;
    if (!v2) {
      break;
    }
    if (v7[-1].i64[1] != v6[-1].i64[1]) {
      break;
    }
    int32x2_t v8 = vmovn_s64(vceqq_s64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0) {
      break;
    }
    uint64_t v6 = (int64x2_t *)((char *)v6 + 24);
    BOOL v7 = (int64x2_t *)((char *)v7 + 24);
  }

  while ((v8.i8[4] & 1) != 0);
  return result;
}

BOOL sub_1000A56D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  unsigned int v3 = (unsigned __int8 *)(a1 + 33);
  int v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

uint64_t sub_1000A5744(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  uint64_t v3 = v2 - 1;
  int v4 = a2 + 8;
  for (uint64_t i = a1 + 8; ; i += 4)
  {
    int v6 = *((_DWORD *)v4 - 2);
    uint64_t v8 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    int v9 = *((_DWORD *)i - 2);
    uint64_t v11 = *(i - 3);
    uint64_t v10 = *(i - 2);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    if (!v10) {
      break;
    }
    if (!v7)
    {
      uint64_t v7 = v10;
      goto LABEL_25;
    }

    if (v11 == v8 && v10 == v7)
    {
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v7);
      if (v9 != v6) {
        return 0LL;
      }
    }

    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v8, v7, 0LL);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v7);
      uint64_t result = 0LL;
      if ((v13 & 1) == 0 || v9 != v6) {
        return result;
      }
    }

BOOL sub_1000A5898(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = (unsigned __int16 *)(a1 + 34);
  int v4 = (unsigned __int16 *)(a2 + 34);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

uint64_t sub_1000A5904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    uint64_t v57 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v6 = v4 + 80 * v3;
      uint64_t v7 = v5 + 80 * v3;
      if (*(void *)v6 != *(void *)v7) {
        break;
      }
      uint64_t v9 = *(void *)(v6 + 8);
      uint64_t v8 = *(void *)(v6 + 16);
      int v10 = *(unsigned __int8 *)(v6 + 24);
      char v11 = *(_BYTE *)(v6 + 25);
      int v12 = *(unsigned __int8 *)(v6 + 32);
      uint64_t v13 = *(void *)(v6 + 40);
      int v14 = *(unsigned __int8 *)(v6 + 48);
      char v15 = *(_BYTE *)(v6 + 49);
      uint64_t v17 = *(void *)(v6 + 56);
      uint64_t v16 = *(int64x2_t **)(v6 + 64);
      uint64_t v18 = *(void *)(v6 + 72);
      uint64_t v20 = *(void *)(v7 + 8);
      uint64_t v19 = *(void *)(v7 + 16);
      int v21 = *(unsigned __int8 *)(v7 + 24);
      int v22 = *(unsigned __int8 *)(v7 + 25);
      int v23 = *(unsigned __int8 *)(v7 + 32);
      uint64_t v24 = *(void *)(v7 + 40);
      int v25 = *(unsigned __int8 *)(v7 + 48);
      int v26 = *(unsigned __int8 *)(v7 + 49);
      uint64_t v28 = *(void *)(v7 + 56);
      uint64_t v27 = *(int64x2_t **)(v7 + 64);
      uint64_t v29 = *(void *)(v7 + 72);
      if (v9)
      {
        uint64_t result = 0LL;
        if (!v20 || v9 != v20) {
          return result;
        }
      }

      else if (v20)
      {
        return 0LL;
      }

      if (v8)
      {
        uint64_t result = 0LL;
        if (!v19 || v8 != v19) {
          return result;
        }
      }

      else if (v19)
      {
        return 0LL;
      }

      if ((v11 & 1) != 0)
      {
        if ((v22 & (v12 ^ v23 ^ 1)) != 1 || v13 != v24) {
          return 0LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
        if ((v22 & 1) != 0 || v10 != v21 || v12 != v23 || v13 != v24) {
          return result;
        }
      }

      if ((v15 & 1) != 0)
      {
        if (!v26) {
          return 0LL;
        }
      }

      else
      {
        if (v14 == v25) {
          char v32 = v26;
        }
        else {
          char v32 = 1;
        }
        if ((v32 & 1) != 0) {
          return 0LL;
        }
      }

      if (v17)
      {
        if (!v28) {
          return 0LL;
        }
        uint64_t v33 = *(void *)(v17 + 16);
        if (v33 != *(void *)(v28 + 16)) {
          return 0LL;
        }
        uint64_t v34 = v3;
        uint64_t v35 = v18;
        uint64_t v36 = v5;
        uint64_t v37 = v4;
        if (v33 && v17 != v28)
        {
          uint64_t v38 = (unsigned __int16 *)(v17 + 35);
          uint64_t v39 = v28 + 35;
          while (--v33)
          {
            __int16 v40 = (unsigned __int16 *)((char *)v38 + 3);
            uint64_t v41 = v39 + 3;
            char v42 = sub_10007E938(*v38 | (*((unsigned __int8 *)v38 + 2) << 16));
            uint64_t v39 = v41;
            uint64_t v38 = v40;
            if ((v42 & 1) == 0) {
              return 0LL;
            }
          }
        }
      }

      else
      {
        uint64_t v34 = v3;
        uint64_t v35 = v18;
        uint64_t v36 = v5;
        uint64_t v37 = v4;
        if (v28) {
          return 0LL;
        }
      }

      if (v16)
      {
        if (!v27) {
          return 0LL;
        }
        uint64_t v43 = v16[1].i64[0];
        if (v43 != v27[1].i64[0]) {
          return 0LL;
        }
        uint64_t v4 = v37;
        uint64_t v5 = v36;
        uint64_t v44 = v35;
        uint64_t v45 = v34;
        uint64_t v46 = v57;
        if (v43 && v16 != v27)
        {
          uint64_t result = 0LL;
          if (v16[2].i64[0] != v27[2].i64[0] || v16[2].i64[1] != v27[2].i64[1] || v16[3].i64[0] != v27[3].i64[0]) {
            return result;
          }
          __int16 v47 = v27 + 4;
          char v48 = v16 + 4;
          while (--v43)
          {
            uint64_t result = 0LL;
            if (v48[-1].i64[1] == v47[-1].i64[1])
            {
              int32x2_t v49 = vmovn_s64(vceqq_s64(*v48, *v47));
              if ((v49.i8[0] & 1) != 0)
              {
                __int16 v47 = (int64x2_t *)((char *)v47 + 24);
                char v48 = (int64x2_t *)((char *)v48 + 24);
                if ((v49.i8[4] & 1) != 0) {
                  continue;
                }
              }
            }

            return result;
          }
        }
      }

      else
      {
        uint64_t v4 = v37;
        uint64_t v5 = v36;
        uint64_t v44 = v35;
        uint64_t v45 = v34;
        uint64_t v46 = v57;
        if (v27) {
          return 0LL;
        }
      }

      if (v44)
      {
        if (!v29) {
          return 0LL;
        }
        uint64_t v50 = *(void *)(v44 + 16);
        if (v50 != *(void *)(v29 + 16)) {
          return 0LL;
        }
        if (v50 && v44 != v29)
        {
          char v51 = (unsigned __int8 *)(v44 + 33);
          __int16 v52 = (unsigned __int8 *)(v29 + 33);
          for (uint64_t i = v50 - 1; i; --i)
          {
            uint64_t result = 0LL;
            int v55 = *v51++;
            int v54 = v55;
            int v56 = *v52++;
            if (v54 != v56) {
              return result;
            }
          }
        }
      }

      else if (v29)
      {
        return 0LL;
      }

      uint64_t v3 = v45 + 1;
      uint64_t result = 1LL;
      if (v3 == v46) {
        return result;
      }
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1000A5C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v3 = a1 + 32;
  uint64_t result = 0LL;
  if (*(void *)v3 == *(void *)(a2 + 32)
    && *(unsigned __int8 *)(v3 + 8) == *(unsigned __int8 *)(a2 + 40)
    && *(void *)(v3 + 16) == *(void *)(a2 + 48)
    && *(void *)(v3 + 24) == *(void *)(a2 + 56)
    && *(void *)(v3 + 32) == *(void *)(a2 + 64))
  {
    __asm { BR              X12 }
  }

  return result;
}

uint64_t sub_1000A5F30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 24);
  int64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v24 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v4);
    sub_1000706A4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v7 = (__int16 *)(v4 + 32);
    do
    {
      __int16 v8 = *v7++;
      __int16 v22 = v8;
      sub_1000A7828((uint64_t)&v22, &v23);
      uint64_t v9 = v23;
      uint64_t v24 = v6;
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000706A4(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v24;
      }

      v6[2] = v11 + 1;
      v6[v11 + 4] = v9;
      --v5;
    }

    while (v5);
    sub_100045FD8(&v25);
  }

  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }

  int v12 = *(unsigned __int8 *)(v2 + 32);
  uint64_t v13 = *(void *)(v2 + 40);
  if (v13) {
    int v14 = *(void **)(v2 + 40);
  }
  else {
    int v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = *(unsigned __int8 *)(v2 + 3);
  uint64_t v16 = *(unsigned __int8 *)(v2 + 4);
  uint64_t v17 = *(void *)(v2 + 8);
  char v18 = *(_BYTE *)(v2 + 16);
  char v19 = *(_BYTE *)(v2 + 17);
  if (v14[2])
  {
    uint64_t result = swift_bridgeObjectRetain(v13);
  }

  else
  {
    swift_bridgeObjectRetain(v13);
    uint64_t result = swift_bridgeObjectRelease(v14);
    int v14 = 0LL;
  }

  *(void *)a1 = v16;
  if (v12) {
    int v21 = v12;
  }
  else {
    int v21 = -65536;
  }
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(_WORD *)(a1 + 24) = v21;
  *(_BYTE *)(a1 + 26) = BYTE2(v21);
  *(void *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v18;
  *(_BYTE *)(a1 + 4Hasher._combine(_:)(v0 & 1) = v19;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = v14;
  return result;
}

__n128 sub_1000A60BC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 3);
  int v5 = *(unsigned __int16 *)(v1 + 4);
  if (*(_BYTE *)(v1 + 6) != 1) {
    sub_1000516F0(v48, 17LL);
  }
  if (*(_BYTE *)(v1 + 11) != 1) {
    sub_1000516F0(v48, 19LL);
  }
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v46 = a1;
  uint64_t v45 = v4;
  uint64_t v47 = v1;
  switch(v5)
  {
    case 1:
      goto LABEL_9;
    case 2:
      unint64_t v7 = *(void *)(*(void *)(v1 + 56) + 16LL);
      if (v7 >= 0x100) {
        goto LABEL_51;
      }
      if ((v7 & 0xFC) != 0) {
        sub_1000516F0(v48, 18LL);
      }
LABEL_9:
      uint64_t v8 = sub_100008E00(&qword_1001164E8);
      uint64_t v9 = swift_allocObject(v8, 40LL, 7LL);
      unint64_t v10 = (void *)v9;
      *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
      *(_BYTE *)(v9 + 32) = 1;
      *(_BYTE *)(v9 + 35) = 80;
      *(_WORD *)(v9 + 33) = 257;
      uint64_t v11 = 2LL;
      *(_BYTE *)(v9 + 36) = 2;
      __int16 v12 = 577;
      goto LABEL_18;
    case 3:
      unint64_t v15 = *(void *)(*(void *)(v1 + 56) + 16LL);
      if (v15 >= 0x100) {
        goto LABEL_51;
      }
      if (v15) {
        sub_1000516F0(v48, 18LL);
      }
      uint64_t v16 = sub_100008E00(&qword_1001164E8);
      uint64_t v9 = swift_allocObject(v16, 40LL, 7LL);
      unint64_t v10 = (void *)v9;
      *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
      *(_BYTE *)(v9 + 32) = 1;
      *(_BYTE *)(v9 + 35) = 80;
      *(_WORD *)(v9 + 33) = 257;
      uint64_t v11 = 2LL;
      *(_BYTE *)(v9 + 36) = 2;
      __int16 v12 = 641;
LABEL_18:
      *(_BYTE *)(v9 + 39) = 96;
      *(_WORD *)(v9 + 3swift_unknownObjectWeakDestroy(v0 + 7) = v12;
      break;
    case 4:
      sub_1000516F0(v48, 21LL);
      unint64_t v17 = *(void *)(*(void *)(v1 + 56) + 16LL);
      if (v17 >= 0x100) {
        goto LABEL_51;
      }
      if (v17) {
        sub_1000516F0(v48, 18LL);
      }
      uint64_t v18 = sub_100008E00(&qword_1001164E8);
      unint64_t v10 = (void *)swift_allocObject(v18, 52LL, 7LL);
      *((_OWORD *)v10 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D6F10;
      *((_BYTE *)v10 + 32) = 1;
      *((_BYTE *)v10 + 35) = 80;
      *(_WORD *)((char *)v10 + 33) = 257;
      *((_BYTE *)v10 + 36) = 2;
      *(_WORD *)((char *)v10 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 193;
      *(_DWORD *)((char *)v10 + 39) = 33621088;
      *((_BYTE *)v10 + 43) = 112;
      *((_BYTE *)v10 + 44) = 8;
      *(_DWORD *)((char *)v10 + 45) = 275841857;
      *((_BYTE *)v10 + 5Hasher._combine(_:)(v0 & 1) = 112;
      uint64_t v11 = 5LL;
      *(_WORD *)((char *)v10 + 49) = 1153;
      break;
    case 5:
      unint64_t v13 = *(void *)(*(void *)(v1 + 56) + 16LL);
      if (v13 >= 0x100) {
        goto LABEL_51;
      }
      if (v13) {
        sub_1000516F0(v48, 18LL);
      }
      uint64_t v14 = sub_100008E00(&qword_1001164E8);
      unint64_t v10 = (void *)swift_allocObject(v14, 48LL, 7LL);
      *((_OWORD *)v10 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D6650;
      *((_BYTE *)v10 + 32) = 1;
      *((_BYTE *)v10 + 35) = 80;
      *(_WORD *)((char *)v10 + 33) = 257;
      *((_BYTE *)v10 + 36) = 2;
      *((_BYTE *)v10 + 39) = 112;
      *(_WORD *)((char *)v10 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 513;
      uint64_t v11 = 4LL;
      *((_BYTE *)v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 4;
      *((_BYTE *)v10 + 43) = -127;
      *(_WORD *)((char *)v10 + 4Hasher._combine(_:)(v0 & 1) = 897;
      *((_BYTE *)v10 + 44) = 8;
      *((_BYTE *)v10 + 4swift_unknownObjectWeakDestroy(v0 + 7) = -127;
      *(_WORD *)((char *)v10 + 45) = 1217;
      break;
    case 6:
      unint64_t v19 = *(void *)(*(void *)(v1 + 56) + 16LL);
      if (v19 >= 0x100) {
        goto LABEL_51;
      }
      if (v19) {
        sub_1000516F0(v48, 18LL);
      }
      uint64_t v20 = sub_100008E00(&qword_1001164E8);
      unint64_t v10 = (void *)swift_allocObject(v20, 56LL, 7LL);
      *((_OWORD *)v10 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D6F00;
      *((_BYTE *)v10 + 32) = 1;
      *((_BYTE *)v10 + 35) = 80;
      *(_WORD *)((char *)v10 + 33) = 257;
      *((_BYTE *)v10 + 36) = 2;
      *((_BYTE *)v10 + 39) = -111;
      *(_WORD *)((char *)v10 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 513;
      *((_BYTE *)v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 4;
      *((_BYTE *)v10 + 43) = -111;
      *(_WORD *)((char *)v10 + 4Hasher._combine(_:)(v0 & 1) = 833;
      *((_BYTE *)v10 + 44) = 8;
      *(_WORD *)((char *)v10 + 45) = 1153;
      *(_WORD *)((char *)v10 + 4swift_unknownObjectWeakDestroy(v0 + 7) = 4241;
      *(_WORD *)((char *)v10 + 49) = 1473;
      *(_DWORD *)((char *)v10 + 5Hasher._combine(_:)(v0 & 1) = 100737169;
      uint64_t v11 = 6LL;
      *((_BYTE *)v10 + 55) = -95;
      break;
    default:
      sub_1000516F0(v48, 16LL);
      uint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage;
      if (!v11) {
        goto LABEL_39;
      }
      break;
  }

  uint64_t v21 = *(void *)(v2 + 40);
  if (!*(void *)(v21 + 16))
  {
    __break(1u);
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    JUMPOUT(0x1000A6778LL);
  }

  unsigned __int8 v22 = *(_BYTE *)(v21 + 32);
  uint64_t v23 = (unsigned __int16 *)((char *)v10 + 33);
  do
  {
    if ((*((_BYTE *)v23 - 1) & v22) != 0)
    {
      int v25 = *((unsigned __int8 *)v23 + 2);
      int v26 = *v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_10004F514(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v28 = v6[2];
      unint64_t v27 = v6[3];
      if (v28 >= v27 >> 1) {
        uint64_t v6 = sub_10004F514((void *)(v27 > 1), v28 + 1, 1, v6);
      }
      v6[2] = v28 + 1;
      uint64_t v24 = (char *)v6 + 3 * v28;
      v24[34] = (v26 | (v25 << 16)) >> 16;
      *((_WORD *)v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
    }

    v23 += 2;
    --v11;
  }

  while (v11);
  uint64_t v2 = v47;
LABEL_39:
  swift_bridgeObjectRelease(v10);
  int v29 = *(unsigned __int8 *)(v2 + 48);
  uint64_t v30 = *(void *)(v2 + 32);
  uint64_t v31 = *(void *)(v2 + 56);
  uint64_t v49 = v31;
  int64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v6);
    sub_10004AB54(&v49);
    *(void *)&v48[0] = _swiftEmptyArrayStorage;
    sub_1000706C0(0, v32, 0);
    uint64_t v33 = *(void **)&v48[0];
    uint64_t v34 = (unsigned __int16 *)(v31 + 32);
    unint64_t v35 = *(void *)(*(void *)&v48[0] + 16LL);
    do
    {
      int v37 = *v34++;
      int v36 = v37;
      *(void *)&v48[0] = v33;
      unint64_t v38 = v33[3];
      if (v35 >= v38 >> 1)
      {
        sub_1000706C0(v38 > 1, v35 + 1, 1);
        uint64_t v33 = *(void **)&v48[0];
      }

      v33[2] = v35 + 1;
      *((_DWORD *)v33 + v35++ + 8) = v36;
      --v32;
    }

    while (v32);
    sub_100045FD8(&v49);
    swift_bridgeObjectRelease(v6);
    uint64_t v2 = v47;
  }

  else
  {
    swift_bridgeObjectRetain(v30);
    uint64_t v33 = _swiftEmptyArrayStorage;
  }

  uint64_t v39 = *(void *)(v2 + 16);
  __int16 v40 = *(_WORD *)(v2 + 24);
  uint64_t v41 = sub_100051240((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
  if (v29) {
    int v42 = v29;
  }
  else {
    int v42 = 16711680;
  }
  sub_1000AF7C0(v45, 0LL, v30, (uint64_t)v6, v42, (uint64_t)v33, v39, v40, (uint64_t)v48, (uint64_t)v41);
  __int128 v43 = v48[3];
  *(_OWORD *)(v46 + 32) = v48[2];
  *(_OWORD *)(v46 + 48) = v43;
  *(_OWORD *)(v46 + 64) = v48[4];
  __n128 result = (__n128)v48[1];
  *(_OWORD *)uint64_t v46 = v48[0];
  *(__n128 *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

void static ADC1AssembledFormatTypeIDescriptor.assemble(_:)(_BYTE *a1, __int16 a2)
{
}

unint64_t ADC1AssembledFormatTypeIDescriptor.bSubframeSize.getter(unint64_t a1)
{
  return a1 >> 40;
}

unint64_t ADC1AssembledFormatTypeIDescriptor.bNrChannels.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

Swift::Int ADC1ACInterfaceHeaderDescriptor.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A6814()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100040D9C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ACInterfaceHeaderDescriptor(uint64_t a1)
{
  return sub_100040D9C(a1, *v1);
}

Swift::Int sub_1000A6860(uint64_t a1)
{
  unint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100040D9C((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ACInterfaceHeaderDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_100038830(*a1, *a2);
}

Swift::Int ADC1InputTerminalDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A68F8()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_100042FF0((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1InputTerminalDescriptor(uint64_t a1)
{
  return sub_100042FF0(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000A6950(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_100042FF0((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1InputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003B730(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC1OutputTerminalDescriptor.hashValue.getter(unint64_t a1, int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A6A00()
{
  unint64_t v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)(v4, 0LL);
  sub_100042244((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1OutputTerminalDescriptor(uint64_t a1)
{
  return sub_100042244(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1000A6A58(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  int v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v5, a1);
  sub_100042244((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1OutputTerminalDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003A414(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

Swift::Int ADC1MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100044564);
}

Swift::Int sub_1000A6AC4(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_100044564);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1MixerUnitDescriptor(uint64_t a1)
{
  return sub_100044564(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000A6AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100044564);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1MixerUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003D3F0);
}

Swift::Int ADC1MixerUnitDescriptorPart2.hashValue.getter(unsigned int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A6B3C()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_1000423DC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_1000423DC(a1, *v1);
}

Swift::Int sub_1000A6B88(uint64_t a1)
{
  unsigned int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000423DC((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1MixerUnitDescriptorPart2( unsigned int *a1, unsigned int *a2)
{
  return sub_10003A648(*a1, *a2);
}

Swift::Int ADC1SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_1000434E8);
}

Swift::Int sub_1000A6BE0(uint64_t a1, uint64_t a2)
{
  return sub_10005992C(a1, a2, (void (*)(void *, uint64_t))sub_1000434E8);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1SelectorUnitDescriptor(uint64_t a1)
{
  return sub_1000434E8(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000A6BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005999C(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000434E8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1SelectorUnitDescriptor( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000599F8(a1, a2, a3, a4, sub_10003BDB4);
}

Swift::Int ADC1FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A6C58()
{
  uint64_t v1 = *(unsigned int *)(v0 + 1);
  uint64_t v2 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100043D50((uint64_t)v4, v2 | (v1 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FeatureUnitDescriptor(uint64_t a1)
{
  return sub_100043D50(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000A6CB0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(v1 + 1);
  uint64_t v3 = *v1;
  Hasher.init(_seed:)(v5, a1);
  sub_100043D50((uint64_t)v5, v3 | (v2 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FeatureUnitDescriptor( unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003C928( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

Swift::Int ADC1ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_1000431B4);
}

Swift::Int sub_1000A6D1C(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_1000431B4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ExtensionUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_1000431B4);
}

Swift::Int sub_1000A6D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000431B4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ExtensionUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003B9A8);
}

Swift::Int ADC1ExtensionUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_100040934);
}

Swift::Int sub_1000A6D58(uint64_t a1, uint64_t a2)
{
  return sub_1000A6DDC(a1, a2, (void (*)(void *, uint64_t))sub_100040934);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ExtensionUnitDescriptorPart2( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6E3C(a1, a2, a3, sub_100040934);
}

Swift::Int sub_1000A6D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6E58(a1, a2, a3, (void (*)(void *, uint64_t))sub_100040934);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ExtensionUnitDescriptorPart2( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A6EB4(a1, a2, a3, a4, sub_1000382A0);
}

Swift::Int ADC1ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100042238);
}

Swift::Int sub_1000A6D94(uint64_t a1, uint64_t a2)
{
  return sub_1000595C8(a1, a2, (void (*)(void *, uint64_t))sub_100042238);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ProcessingUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059630(a1, a2, a3, sub_100042238);
}

Swift::Int sub_1000A6DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059654(a1, a2, a3, (void (*)(void *, uint64_t))sub_100042238);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ProcessingUnitDescriptor( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000596B8(a1, a2, a3, a4, sub_10003A408);
}

Swift::Int ADC1ProcessingUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000598D8(a1, (void (*)(void *, uint64_t))sub_1000402E8);
}

Swift::Int sub_1000A6DD0(uint64_t a1, uint64_t a2)
{
  return sub_1000A6DDC(a1, a2, (void (*)(void *, uint64_t))sub_1000402E8);
}

Swift::Int sub_1000A6DDC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *((unsigned __int8 *)v3 + 4);
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v6 | (v5 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ProcessingUnitDescriptorPart2( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6E3C(a1, a2, a3, sub_1000402E8);
}

uint64_t sub_1000A6E3C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32));
}

Swift::Int sub_1000A6E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A6E58(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000402E8);
}

Swift::Int sub_1000A6E58(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *((unsigned __int8 *)v4 + 4);
  uint64_t v7 = *v4;
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v7 | (v6 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ProcessingUnitDescriptorPart2( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A6EB4(a1, a2, a3, a4, sub_100037A18);
}

uint64_t sub_1000A6EB4( unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

Swift::Int ADC1ASInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100059574(a1, (void (*)(void *, uint64_t))sub_100043ED0);
}

Swift::Int sub_1000A6EDC()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 4);
  uint64_t v2 = *(unsigned __int16 *)((char *)v0 + 5);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100043ED0((uint64_t)v5, v3 | (v1 << 32) | (v2 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ASInterfaceDescriptor(uint64_t a1)
{
  return sub_100043ED0( a1,  *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)v1 + 5) << 40));
}

Swift::Int sub_1000A6F4C(uint64_t a1)
{
  uint64_t v2 = *((unsigned __int8 *)v1 + 4);
  uint64_t v3 = *(unsigned __int16 *)((char *)v1 + 5);
  uint64_t v4 = *v1;
  Hasher.init(_seed:)(v6, a1);
  sub_100043ED0((uint64_t)v6, v4 | (v2 << 32) | (v3 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ASInterfaceDescriptor( unsigned int *a1, unsigned int *a2)
{
  return sub_10003CB24( *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + 5) << 40),  *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*(unsigned __int16 *)((char *)a2 + 5) << 40));
}

Swift::Int ADC1FormatTypeIDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_100043BA0);
}

Swift::Int sub_1000A6FD8(uint64_t a1, uint64_t a2)
{
  return sub_100059820(a1, a2, (void (*)(void *, uint64_t))sub_100043BA0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FormatTypeIDescriptor(uint64_t a1)
{
  return sub_100043BA0(a1, *v1);
}

Swift::Int sub_1000A6FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005987C(a1, a2, a3, (void (*)(void *, uint64_t))sub_100043BA0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FormatTypeIDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_10003C6E0(*a1, *a2);
}

Swift::Int ADC1FormatTypeIIIDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_1000431A8);
}

Swift::Int sub_1000A7010(uint64_t a1, uint64_t a2)
{
  return sub_100059820(a1, a2, (void (*)(void *, uint64_t))sub_1000431A8);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1FormatTypeIIIDescriptor(uint64_t a1)
{
  return sub_1000431A8(a1, *v1);
}

Swift::Int sub_1000A7024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005987C(a1, a2, a3, (void (*)(void *, uint64_t))sub_1000431A8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1FormatTypeIIIDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_10003B99C(*a1, *a2);
}

Swift::Int ADC1ASFormatTypeDescriptorHeader.hashValue.getter(unsigned int a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A7080()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100040AAC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC1ASFormatTypeDescriptorHeader( uint64_t a1)
{
  return sub_100040AAC(a1, *v1);
}

Swift::Int sub_1000A70CC(uint64_t a1)
{
  unsigned int v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100040AAC((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC1ASFormatTypeDescriptorHeader( unsigned int *a1, unsigned int *a2)
{
  return sub_100038478(*a1, *a2);
}

uint64_t sub_1000A7118@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_10006ED08(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease(result);
      uint64_t v12 = sub_10006C838(v11, v9, v10);
      uint64_t result = sub_10006ECB8(1LL, v13, v14);
      if (*(void *)(result + 16))
      {
        unint64_t v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v26 = (int16x8_t)vmovl_u8(v4);
        char v19 = *(_BYTE *)(result + 32);
        __int16 v20 = *(_WORD *)(result + 33);
        char v21 = *(_BYTE *)(result + 35);
        uint64_t result = swift_bridgeObjectRelease(result);
        if (((v26.u16[0] - 10) & 0xFFFFFF00) == 0)
        {
          if ((((v26.i8[0] - 10) - (_DWORD)v11) & 0xFFFFFF00) == 0)
          {
            uint64_t v22 = sub_10006C838((v26.i8[0] - 10 - v11), v17, v18);
            uint64_t result = sub_10006C838(1LL, v23, v24);
            if (*(void *)(result + 16))
            {
              char v25 = *(_BYTE *)(result + 32);
              uint64_t result = swift_bridgeObjectRelease(result);
              *(_DWORD *)a3 = vmovn_s16(v26).u32[0];
              *(_BYTE *)(a3 + 4) = v11;
              *(void *)(a3 + 8) = v12;
              *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
              *(_WORD *)(a3 + 1swift_unknownObjectWeakDestroy(v0 + 7) = v20;
              *(_BYTE *)(a3 + 19) = v21;
              *(void *)(a3 + 24) = v22;
              *(_BYTE *)(a3 + 32) = v25;
              return result;
            }

            goto LABEL_14;
          }

uint64_t sub_1000A72B4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t result = sub_10006EDB8(1LL, a1, a2);
  if (!v3)
  {
    unint64_t v14 = *(void *)(result + 16);
    if (v14)
    {
      unint64_t v15 = v12;
      uint64_t v6 = v13;
      v9.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v7 = (void *)*(unsigned __int8 *)(result + 36);
      uint64_t v5 = *(unsigned __int8 *)(result + 37);
      swift_bridgeObjectRelease(result);
      if (!v5)
      {
        unint64_t v21 = sub_10000AE14();
        uint64_t v18 = swift_allocError(&type metadata for AUAError, v21, 0LL, 0LL);
        *(_BYTE *)uint64_t v19 = 20;
        *(void *)(v19 + 8) = 0LL;
        *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        strcpy((char *)(v19 + 24), "assemble(_:)");
        *(_BYTE *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 0;
        *(_WORD *)(v19 + 38) = -5120;
        *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
        *(void *)(v19 + 48) = 0x80000001000D26E0LL;
        uint64_t v20 = 342LL;
        goto LABEL_8;
      }

      uint16x8_t v16 = vmovl_u8(v9);
      unint64_t v14 = v16.u16[0];
      unint64_t v4 = v16.u16[0] - 7;
      if ((v4 & 0xFFFFFF00) == 0)
      {
        uint64_t v8 = (v16.i8[0] - 7) / v5;
        if ((v16.i8[0] - 7) % v5)
        {
          unint64_t v17 = sub_10000AE14();
          uint64_t v18 = swift_allocError(&type metadata for AUAError, v17, 0LL, 0LL);
          *(_BYTE *)uint64_t v19 = 20;
          *(void *)(v19 + 8) = 0LL;
          *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          strcpy((char *)(v19 + 24), "assemble(_:)");
          *(_BYTE *)(v19 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 0;
          *(_WORD *)(v19 + 38) = -5120;
          *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 0xD00000000000001FLL;
          *(void *)(v19 + 48) = 0x80000001000D26E0LL;
          uint64_t v20 = 350LL;
LABEL_8:
          *(void *)(v19 + 56) = v20;
          return swift_willThrow(v18);
        }

        char v49 = (char)v7;
        int16x8_t v48 = (int16x8_t)v16;
        if ((_DWORD)v5 == 2)
        {
          int v29 = (void *)sub_10006A4E8(v8, v15, v6);
          char v25 = v33;
          uint64_t v6 = v34;
LABEL_40:
          uint64_t v45 = sub_10006C838(1LL, v25, v6);
          if (*(void *)(v45 + 16))
          {
            char v46 = *(_BYTE *)(v45 + 32);
            uint64_t result = swift_bridgeObjectRelease(v45);
            *(_DWORD *)a3 = vmovn_s16(v48).u32[0];
            *(_BYTE *)(a3 + 4) = v49;
            *(_BYTE *)(a3 + 5) = v5;
            *(void *)(a3 + 8) = v29;
            *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v46;
            return result;
          }

          __break(1u);
          goto LABEL_51;
        }

        uint64_t v50 = v5;
        if ((_DWORD)v5 == 1)
        {
          uint64_t v22 = sub_10006C838(v8, v15, v6);
          uint64_t v24 = v22;
          char v25 = v23;
          uint64_t v6 = v26;
          int64_t v27 = *(void *)(v22 + 16);
          if (!v27)
          {
            swift_bridgeObjectRelease(v22);
            int v29 = _swiftEmptyArrayStorage;
            goto LABEL_40;
          }

          char v51 = v23;
          unint64_t v47 = a3;
          __int16 v52 = _swiftEmptyArrayStorage;
          sub_1000705E4(0, v27, 0);
          uint64_t v28 = 0LL;
          int v29 = _swiftEmptyArrayStorage;
          unint64_t v30 = _swiftEmptyArrayStorage[2];
          do
          {
            __int16 v31 = *(unsigned __int8 *)(v24 + v28 + 32);
            __int16 v52 = v29;
            unint64_t v32 = v29[3];
            if (v30 >= v32 >> 1)
            {
              sub_1000705E4(v32 > 1, v30 + 1, 1);
              int v29 = v52;
            }

            ++v28;
            _OWORD v29[2] = v30 + 1;
            *((_WORD *)v29 + v30++ + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
          }

          while (v27 != v28);
          swift_bridgeObjectRelease(v24);
          goto LABEL_39;
        }

        sub_1000516F0(&v52, 19LL);
        if (v5 <= v4)
        {
          uint64_t v7 = _swiftEmptyArrayStorage;
          LOBYTE(v35) = 1;
          while (1)
          {
            uint64_t v36 = sub_10006C838(v5, v15, v6);
            unint64_t v4 = *(void *)(v36 + 16);
            if (!v4)
            {
              __break(1u);
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }

            unint64_t v15 = v37;
            uint64_t v6 = v38;
            LODWORD(v5) = *(unsigned __int8 *)(v36 + 32);
            swift_bridgeObjectRelease(v36);
            if (v4 == 1) {
              goto LABEL_44;
            }
            char v51 = v15;
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
              uint64_t v7 = sub_100050BA8(0LL, v7[2] + 1LL, 1, v7);
            }
            unint64_t v4 = v7[2];
            unint64_t v39 = v7[3];
            if (v4 >= v39 >> 1) {
              uint64_t v7 = sub_100050BA8((void *)(v39 > 1), v4 + 1, 1, v7);
            }
            v7[2] = v4 + 1;
            *((_DWORD *)v7 + v4 + 8) = v5;
            unint64_t v14 = v35;
            __int16 v35 = v35 + 1;
            uint64_t v5 = v50;
            if ((v35 & 0x100) != 0) {
              goto LABEL_45;
            }
          }

          unint64_t v47 = a3;
          __int16 v52 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v7);
          sub_1000705E4(0, v4 + 1, 0);
          LODWORD(v5) = *((_DWORD *)v7 + 8);
          if (WORD1(v5)) {
            goto LABEL_51;
          }
          int v29 = v52;
          a3 = v52[2];
          unint64_t v14 = v52[3];
          uint64_t v8 = a3 + 1;
          if (a3 < v14 >> 1) {
            goto LABEL_32;
          }
          goto LABEL_49;
        }

uint64_t sub_1000A7828@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0LL;
  unsigned __int16 v4 = *(_WORD *)result;
  int v13 = 25231361;
  char v14 = 16;
  int v15 = 46202882;
  char v16 = 17;
  int v17 = 50397188;
  char v18 = 32;
  __int16 v19 = 8;
  __int16 v20 = 1089;
  char v21 = 32;
  __int16 v22 = 16;
  char v24 = 32;
  __int16 v23 = 1409;
  int v25 = 113311776;
  char v26 = 37;
  int v27 = 117506112;
  char v28 = 48;
  int v29 = 138477696;
  char v30 = 49;
  __int16 v31 = 256;
  char v33 = 48;
  __int16 v32 = 2433;
  __int16 v34 = 512;
  char v36 = 48;
  __int16 v35 = 2753;
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = &v12[v3];
    if ((*(_WORD *)&v12[v3 + 32] & v4) != 0)
    {
      int v8 = v7[36];
      int v9 = *((unsigned __int16 *)v7 + 17);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_10004F514(0LL, v5[2] + 1LL, 1, v5);
        uint64_t v5 = (void *)result;
      }

      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t result = (uint64_t)sub_10004F514((void *)(v10 > 1), v11 + 1, 1, v5);
        uint64_t v5 = (void *)result;
      }

      v5[2] = v11 + 1;
      uint64_t v6 = (char *)v5 + 3 * v11;
      v6[34] = (v9 | (v8 << 16)) >> 16;
      *((_WORD *)v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    }

    v3 += 6LL;
  }

  while (v3 != 60);
  *a2 = v5;
  return result;
}

void *sub_1000A7A08@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (void *)sub_10006EE60(1LL, a1, a2);
  if (!v3)
  {
    if (result[2])
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *((_DWORD *)result + 8);
      int v11 = *((unsigned __int16 *)result + 18);
      uint64_t v12 = *((unsigned __int8 *)result + 38);
      swift_bridgeObjectRelease(result);
      uint64_t v13 = sub_10006C838(v12, v9, v10);
      uint64_t result = sub_10006EE08(1LL, v14, v15);
      if (result[2])
      {
        char v18 = v16;
        uint64_t v19 = v17;
        __int16 v37 = *(_WORD *)((char *)result + 33);
        char v38 = *((_BYTE *)result + 32);
        char v20 = *((_BYTE *)result + 35);
        uint64_t v21 = *((unsigned __int8 *)result + 36);
        swift_bridgeObjectRelease(result);
        uint64_t v22 = sub_10006C838(v21, v18, v19);
        char v36 = v21;
        char v23 = v20;
        uint64_t result = (void *)sub_10006C838(1LL, v24, v25);
        if (result[2])
        {
          char v28 = v26;
          uint64_t v29 = v27;
          char v35 = *((_BYTE *)result + 32);
          swift_bridgeObjectRelease(result);
          if ((v11 - 1) >= 2)
          {
            uint64_t result = _swiftEmptyArrayStorage;
            goto LABEL_10;
          }

          uint64_t result = (void *)sub_10006C838(1LL, v28, v29);
          if (result[2])
          {
            __int16 v32 = v30;
            uint64_t v33 = v31;
            uint64_t v34 = *((unsigned __int8 *)result + 32);
            swift_bridgeObjectRelease(result);
            uint64_t result = (void *)sub_10006A4E8(v34, v32, v33);
LABEL_10:
            *(_DWORD *)a3 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
            *(_WORD *)(a3 + 4) = v11;
            *(_BYTE *)(a3 + 6) = v12;
            *(void *)(a3 + 8) = v13;
            *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v38;
            *(_WORD *)(a3 + 1swift_unknownObjectWeakDestroy(v0 + 7) = v37;
            *(_BYTE *)(a3 + 19) = v23;
            *(_BYTE *)(a3 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v36;
            *(void *)(a3 + 24) = v22;
            *(_BYTE *)(a3 + 32) = v35;
            *(void *)(a3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = result;
            return result;
          }

          goto LABEL_14;
        }

uint64_t sub_1000A7C24@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006EF08(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      __int16 v11 = *(_WORD *)(result + 36);
      uint64_t v12 = *(unsigned __int8 *)(result + 38);
      swift_bridgeObjectRelease(result);
      uint64_t v13 = sub_10006C838(v12, v9, v10);
      uint64_t result = (uint64_t)sub_10006EEB0(1LL, v14, v15);
      if (*(void *)(result + 16))
      {
        char v18 = v16;
        uint64_t v19 = v17;
        __int16 v26 = *(_WORD *)(result + 33);
        char v27 = *(_BYTE *)(result + 32);
        char v20 = *(_BYTE *)(result + 35);
        uint64_t v21 = *(unsigned __int8 *)(result + 36);
        swift_bridgeObjectRelease(result);
        uint64_t v22 = sub_10006C838(v21, v18, v19);
        uint64_t result = sub_10006C838(1LL, v23, v24);
        if (*(void *)(result + 16))
        {
          char v25 = *(_BYTE *)(result + 32);
          uint64_t result = swift_bridgeObjectRelease(result);
          *(_DWORD *)a3 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
          *(_WORD *)(a3 + 4) = v11;
          *(_BYTE *)(a3 + 6) = v12;
          *(void *)(a3 + 8) = v13;
          *(_BYTE *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
          *(_WORD *)(a3 + 1swift_unknownObjectWeakDestroy(v0 + 7) = v26;
          *(_BYTE *)(a3 + 19) = v20;
          *(_BYTE *)(a3 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v21;
          *(void *)(a3 + 24) = v22;
          *(_BYTE *)(a3 + 32) = v25;
          return result;
        }

        goto LABEL_10;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  return result;
}

void ADC1AssembledFormatTypeIDescriptor.hash(into:)( uint64_t a1, unint64_t a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  Swift::UInt v9 = *(void *)(a5 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    uint64_t v10 = (Swift::UInt *)(a5 + 48);
    do
    {
      Swift::UInt v11 = *(v10 - 2);
      Swift::UInt v12 = *(v10 - 1);
      Swift::UInt v13 = *v10;
      v10 += 3;
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      Hasher._combine(_:)(v13);
      --v9;
    }

    while (v9);
  }

BOOL static ADC1AssembledFormatTypeIDescriptor.__derived_struct_equals(_:_:)( unint64_t a1, uint64_t a2, __int16 a3, int64x2_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, int64x2_t *a8)
{
  return (sub_10003C6E0(a1, a5) & 1) != 0
      && (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(a2, a3) & 1) != 0
      && sub_1000A563C(a4, a8);
}

Swift::Int ADC1AssembledFormatTypeIDescriptor.hashValue.getter( unint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  Swift::UInt v8 = *(void *)(a4 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    Swift::UInt v9 = (Swift::UInt *)(a4 + 48);
    do
    {
      Swift::UInt v10 = *(v9 - 2);
      Swift::UInt v11 = *(v9 - 1);
      Swift::UInt v12 = *v9;
      v9 += 3;
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      --v8;
    }

    while (v8);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1000A7F7C()
{
  return ADC1AssembledFormatTypeIDescriptor.hashValue.getter( *(void *)v0,  *(void *)(v0 + 8),  *(_WORD *)(v0 + 16),  *(void *)(v0 + 24));
}

void sub_1000A7F8C(uint64_t a1)
{
}

Swift::Int sub_1000A7F9C(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  __int16 v5 = *(_WORD *)(v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  ADC1AssembledFormatTypeIDescriptor.hash(into:)((uint64_t)v7, v2, v3, v5, v4);
  return Hasher._finalize()();
}

BOOL sub_1000A7FF8(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v3 = *(unsigned __int8 *)(a1 + 16);
  __int16 v4 = *(unsigned __int8 *)(a1 + 17);
  __int16 v5 = *(int64x2_t **)(a1 + 24);
  uint64_t v6 = (int64x2_t *)a2[3];
  return (sub_10003C6E0(*(void *)a1, *a2) & 1) != 0
      && (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v2, v3 | (unsigned __int16)(v4 << 8)) & 1) != 0
      && sub_1000A563C(v5, v6);
}

uint64_t sub_1000A8094@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = a3(1LL, a1, a2);
  if (v7) {
    return result;
  }
  unint64_t v16 = *(void *)(result + 16);
  if (!v16) {
    goto LABEL_18;
  }
  int64_t v9 = v14;
  uint64_t v10 = v15;
  uint64_t v31 = *(void *)(result + 32);
  swift_bridgeObjectRelease(result);
  if (HIBYTE(v31))
  {
    char v30 = a5;
    int v17 = 0;
    Swift::UInt v8 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v18 = sub_10006C838(3LL, (_BYTE *)v9, v10);
      unint64_t v16 = *(void *)(v18 + 16);
      if (v16 < 3) {
        break;
      }
      int64_t v9 = v19;
      uint64_t v10 = v20;
      uint64_t v21 = *(unsigned __int8 *)(v18 + 34);
      uint64_t v22 = *(unsigned __int8 *)(v18 + 33);
      unint64_t v5 = *(unsigned __int8 *)(v18 + 32);
      swift_bridgeObjectRelease(v18);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100050CB4(0LL, v8[2] + 1LL, 1, v8);
        Swift::UInt v8 = (void *)result;
      }

      unint64_t v6 = v8[2];
      unint64_t v23 = v8[3];
      if (v6 >= v23 >> 1)
      {
        uint64_t result = (uint64_t)sub_100050CB4((void *)(v23 > 1), v6 + 1, 1, v8);
        Swift::UInt v8 = (void *)result;
      }

      ++v17;
      v8[2] = v6 + 1;
      uint64_t v24 = (int64x2_t *)&v8[3 * v6];
      v24[2] = vdupq_n_s64((v21 << 16) | (v22 << 8) | v5);
      v24[3].i64[0] = 0LL;
    }

    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  Swift::UInt v8 = (void *)sub_10006C838(3LL, (_BYTE *)v9, v10);
  int64_t v9 = sub_10006C838(3LL, v25, v26);
  sub_100029A04( 0xD00000000000001ELL,  0x80000001000D26C0LL,  0x656C626D65737361LL,  (void *)0xEC000000293A5F28LL,  0xD00000000000001FLL,  0x80000001000D26E0LL,  a4);
  unint64_t v16 = v8[2];
  if (v16 < 3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v10 = *((unsigned __int8 *)v8 + 34);
  unint64_t v6 = *((unsigned __int8 *)v8 + 33);
  unint64_t v5 = *((unsigned __int8 *)v8 + 32);
  swift_bridgeObjectRelease(v8);
  unint64_t v16 = *(void *)(v9 + 16);
  if (v16 >= 3)
  {
    char v30 = a5;
    v5 |= (v10 << 16) | (v6 << 8);
    unint64_t v27 = ((unint64_t)*(unsigned __int8 *)(v9 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v9 + 33) << 8);
    uint64_t v28 = *(unsigned __int8 *)(v9 + 32);
    swift_bridgeObjectRelease(v9);
    uint64_t v10 = v27 | v28;
    uint64_t result = (uint64_t)sub_100050CB4(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    Swift::UInt v8 = (void *)result;
    unint64_t v6 = *(void *)(result + 16);
    unint64_t v16 = *(void *)(result + 24);
    int64_t v9 = v6 + 1;
    if (v6 < v16 >> 1) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t sub_1000A8398@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v7 = (_BYTE *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v7 += a1 - result;
  }

  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t v9 = a2 - a1;
  if (v8)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  Swift::UInt v12 = &v7[v11];
  if (v7) {
    uint64_t v13 = (uint64_t)v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return sub_1000A72B4(v7, v13, a3);
}

void sub_1000A8438(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A87C4LL);
}

void sub_1000A87D8(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A8B3CLL);
}

void sub_1000A8B50(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A8EE4LL);
}

void sub_1000A8EF8(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A94C0LL);
}

void sub_1000A94D4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A9760LL);
}

void sub_1000A9774(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A9B38LL);
}

void sub_1000A9B4C(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000A9EFCLL);
}

void sub_1000A9F10(_BYTE *a1, __int16 a2)
{
}

uint64_t sub_1000A9F64(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001163E8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ACInterfaceHeaderDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ACInterfaceHeaderDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A9FA0()
{
  return sub_10000B6D4( &qword_1001163F0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ACInterfaceHeaderDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ACInterfaceHeaderDescriptor);
}

uint64_t sub_1000A9FCC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001163F8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA008()
{
  return sub_10000B6D4( &qword_100116400,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1InputTerminalDescriptor);
}

uint64_t sub_1000AA034(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116408,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA070()
{
  return sub_10000B6D4( &qword_100116410,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1OutputTerminalDescriptor);
}

uint64_t sub_1000AA09C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116418,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA0D8()
{
  return sub_10000B6D4( &qword_100116420,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1MixerUnitDescriptor);
}

uint64_t sub_1000AA104(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116428,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1MixerUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA140()
{
  return sub_10000B6D4( &qword_100116430,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1MixerUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1MixerUnitDescriptorPart2);
}

uint64_t sub_1000AA16C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116438,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA1A8()
{
  return sub_10000B6D4( &qword_100116440,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_1000AA1D4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116448,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA210()
{
  return sub_10000B6D4( &qword_100116450,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FeatureUnitDescriptor);
}

uint64_t sub_1000AA23C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116458,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA278()
{
  return sub_10000B6D4( &qword_100116460,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ExtensionUnitDescriptor);
}

uint64_t sub_1000AA2A4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116468,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1ExtensionUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA2E0()
{
  return sub_10000B6D4( &qword_100116470,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ExtensionUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000AA30C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116478,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA348()
{
  return sub_10000B6D4( &qword_100116480,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_1000AA374(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116488,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ProcessingUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1ProcessingUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA3B0()
{
  return sub_10000B6D4( &qword_100116490,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ProcessingUnitDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_1000AA3DC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116498,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ASInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ASInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA418()
{
  return sub_10000B6D4( &qword_1001164A0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ASInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1ASInterfaceDescriptor);
}

uint64_t sub_1000AA444(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001164A8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FormatTypeIDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FormatTypeIDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA480()
{
  return sub_10000B6D4( &qword_1001164B0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FormatTypeIDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_1000AA4AC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001164B8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FormatTypeIIIDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FormatTypeIIIDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA4E8()
{
  return sub_10000B6D4( &qword_1001164C0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1FormatTypeIIIDescriptor,  (uint64_t)&protocol conformance descriptor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_1000AA514(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001164C8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ASFormatTypeDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC1ASFormatTypeDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AA550()
{
  return sub_10000B6D4( &qword_1001164D0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC1ASFormatTypeDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC1ASFormatTypeDescriptorHeader);
}

unint64_t sub_1000AA57C(uint64_t a1)
{
  unint64_t result = sub_1000AA5A0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000AA5A0()
{
  unint64_t result = qword_1001164D8;
  if (!qword_1001164D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ADC1AssembledFormatTypeIDescriptor,  &type metadata for ADC1AssembledFormatTypeIDescriptor);
    atomic_store(result, (unint64_t *)&qword_1001164D8);
  }

  return result;
}

unint64_t sub_1000AA5E8()
{
  unint64_t result = qword_1001164E0;
  if (!qword_1001164E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ADC1AssembledFormatTypeIDescriptor,  &type metadata for ADC1AssembledFormatTypeIDescriptor);
    atomic_store(result, (unint64_t *)&qword_1001164E0);
  }

  return result;
}

uint64_t destroy for ADC1AssembledFormatTypeIDescriptor(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + Hasher._combine(_:)(v0 & 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 7) = *(_BYTE *)(a2 + 7);
  uint64_t v3 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 initializeWithTake for ADC1AssembledFormatTypeIDescriptor(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ADC1AssembledFormatTypeIDescriptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC1AssembledFormatTypeIDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ADC1AssembledFormatTypeIDescriptor()
{
  return &type metadata for ADC1AssembledFormatTypeIDescriptor;
}

void sub_1000AA7E4(_BYTE *a1, __int16 a2)
{
}

void sub_1000AA838(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000AAAC0LL);
}

uint64_t getEnumTagSinglePayload for USBAudioErrata(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE2) {
    goto LABEL_17;
  }
  if (a2 + 30 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 30) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 30;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 30;
    }
  }

uint64_t storeEnumTagSinglePayload for USBAudioErrata(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 30 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 30) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xE2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE1) {
    return ((uint64_t (*)(void))((char *)&loc_1000AABB0 + 4 * byte_1000DA779[v4]))();
  }
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_1000AABE4 + 4 * asc_1000DA774[v4]))();
}

uint64_t sub_1000AABE4(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AABEC(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AABF4LL);
  }
  return result;
}

uint64_t sub_1000AAC00(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AAC08LL);
  }
  *(_BYTE *)__n128 result = a2 + 30;
  return result;
}

uint64_t sub_1000AAC0C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AAC14(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for USBAudioErrata()
{
  return &type metadata for USBAudioErrata;
}

unint64_t sub_1000AAC34()
{
  unint64_t result = qword_1001164F0;
  if (!qword_1001164F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA8C8, &type metadata for USBAudioErrata);
    atomic_store(result, (unint64_t *)&qword_1001164F0);
  }

  return result;
}

BOOL sub_1000AAC78(char *a1, char *a2)
{
  return word_1000DAABA[*a1] == word_1000DAABA[*a2];
}

Swift::Int sub_1000AAC9C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_1000DAABA[v1]);
  return Hasher._finalize()();
}

void sub_1000AACE8()
{
}

Swift::Int sub_1000AAD1C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_1000DAABA[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1000AAD64@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000ABDB0(*a1);
  *a2 = result;
  return result;
}

void sub_1000AAD8C(_WORD *a1@<X8>)
{
  *a1 = word_1000DAABA[*v1];
}

BOOL sub_1000AADA4(char *a1, char *a2)
{
  return word_1000DAB00[*a1] == word_1000DAB00[*a2];
}

Swift::Int sub_1000AADC8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(word_1000DAB00[v1]);
  return Hasher._finalize()();
}

void sub_1000AAE14()
{
}

Swift::Int sub_1000AAE48(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(word_1000DAB00[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1000AAE90@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000AC0A8(*a1);
  *a2 = result;
  return result;
}

void sub_1000AAEB8(_WORD *a1@<X8>)
{
  *a1 = word_1000DAB00[*v1];
}

Swift::Int sub_1000AAED0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  Hasher._combine(_:)(word_1000DAABA[v1]);
  Hasher._combine(_:)(word_1000DAB00[v2]);
  return Hasher._finalize()();
}

void sub_1000AAF3C()
{
  uint64_t v1 = v0[1];
  Hasher._combine(_:)(word_1000DAABA[*v0]);
  Hasher._combine(_:)(word_1000DAB00[v1]);
}

Swift::Int sub_1000AAF8C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(word_1000DAABA[v2]);
  Hasher._combine(_:)(word_1000DAB00[v3]);
  return Hasher._finalize()();
}

BOOL sub_1000AAFF4(char *a1, char *a2)
{
  return word_1000DAABA[*a1] == word_1000DAABA[*a2] && word_1000DAB00[a1[1]] == word_1000DAB00[a2[1]];
}

uint64_t sub_1000AB040()
{
  uint64_t v0 = sub_100008E00(&qword_1001164F8);
  uint64_t inited = swift_initStackObject(v0, v67);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000DAB90;
  *(_WORD *)(inited + 32) = 779;
  uint64_t v2 = sub_100008E00(&qword_100116500);
  uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v3 + 32) = -65536;
  *(void *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDC98;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v3;
  *(_WORD *)(inited + 48) = 7441;
  uint64_t v4 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v4 + 32) = -65536;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDCC0;
  *(void *)(inited + 56) = v4;
  *(_WORD *)(inited + 64) = 1800;
  uint64_t v5 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v5 + 32) = -65536;
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDCE8;
  *(void *)(inited + 72) = v5;
  *(_WORD *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 513;
  uint64_t v6 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v6 + 32) = -65536;
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDD10;
  *(void *)(inited + 88) = v6;
  *(_WORD *)(inited + 96) = 10263;
  uint64_t v7 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v7 + 32) = -65536;
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDD38;
  *(void *)(inited + 104) = v7;
  *(_WORD *)(inited + 112) = 257;
  uint64_t v8 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v8 + 32) = -65536;
  *(void *)(v8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDD60;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v8;
  *(_WORD *)(inited + 128) = 770;
  uint64_t v9 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v9 + 32) = -65536;
  *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDD88;
  *(void *)(inited + 136) = v9;
  *(_WORD *)(inited + 144) = 1026;
  uint64_t v10 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v10 + 32) = -65536;
  *(void *)(v10 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDDB0;
  *(void *)(inited + 152) = v10;
  *(_WORD *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 1283;
  uint64_t v11 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v11 + 32) = -65536;
  *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDDD8;
  *(void *)(inited + 168) = v11;
  *(_WORD *)(inited + 176) = 1539;
  uint64_t v12 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v12 + 32) = -65536;
  *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDE00;
  *(void *)(inited + 184) = v12;
  *(_WORD *)(inited + 192) = 4620;
  uint64_t v13 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v13 + 32) = -65536;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDE28;
  *(void *)(inited + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v13;
  *(_WORD *)(inited + 208) = 2567;
  uint64_t v14 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v14 + 32) = -65536;
  *(void *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDE50;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *(_WORD *)(inited + 224) = 2311;
  uint64_t v15 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v15 + 32) = -65536;
  *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDE78;
  *(void *)(inited + 232) = v15;
  *(_WORD *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 5645;
  uint64_t v16 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v16 + 32) = -65536;
  *(void *)(v16 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDEA0;
  *(void *)(inited + 248) = v16;
  *(_WORD *)(inited + 256) = 7186;
  uint64_t v17 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v17 + 32) = -65536;
  *(void *)(v17 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDEC8;
  *(void *)(inited + 264) = v17;
  *(_WORD *)(inited + 272) = 5902;
  uint64_t v18 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v18 + 32) = -65536;
  *(void *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDEF0;
  *(void *)(inited + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v18;
  *(_WORD *)(inited + 288) = 7699;
  uint64_t v19 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v19 + 32) = -65536;
  *(void *)(v19 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDF18;
  *(void *)(inited + 296) = v19;
  *(_WORD *)(inited + 304) = 7956;
  uint64_t v20 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v20 + 32) = -65536;
  *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDF40;
  *(void *)(inited + 312) = v20;
  *(_WORD *)(inited + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 8212;
  uint64_t v21 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v21 + 32) = -65536;
  *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDF68;
  *(void *)(inited + 328) = v21;
  *(_WORD *)(inited + 336) = 12549;
  uint64_t v22 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v22 + 32) = -65536;
  *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDF90;
  *(void *)(inited + 344) = v22;
  *(_WORD *)(inited + 352) = 13084;
  uint64_t v23 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v23 + 32) = -65536;
  *(void *)(v23 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDFB8;
  *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v23;
  *(_WORD *)(inited + 368) = 2054;
  uint64_t v24 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v24 + 32) = -65536;
  *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FDFE0;
  *(void *)(inited + 376) = v24;
  *(_WORD *)(inited + 384) = 3339;
  uint64_t v25 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v25 + 32) = -65536;
  *(void *)(v25 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE008;
  *(void *)(inited + 392) = v25;
  *(_WORD *)(inited + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 3596;
  uint64_t v26 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v26 + 32) = -65536;
  *(void *)(v26 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE030;
  *(void *)(inited + 408) = v26;
  *(_WORD *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 16) = 3852;
  uint64_t v27 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v27 + 32) = -65536;
  *(void *)(v27 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE058;
  *(void *)(inited + 424) = v27;
  *(_WORD *)(inited + 432) = 4108;
  uint64_t v28 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v28 + 32) = -65536;
  *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE080;
  *(void *)(inited + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v28;
  *(_WORD *)(inited + 448) = 4364;
  uint64_t v29 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v29 + 32) = -65536;
  *(void *)(v29 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE0A8;
  *(void *)(inited + 456) = v29;
  *(_WORD *)(inited + 464) = 4876;
  uint64_t v30 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v30 + 32) = -65536;
  *(void *)(v30 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE0D0;
  *(void *)(inited + 472) = v30;
  *(_WORD *)(inited + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 5132;
  uint64_t v31 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v31 + 32) = -65536;
  *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE0F8;
  *(void *)(inited + 488) = v31;
  *(_WORD *)(inited + 496) = 5388;
  uint64_t v32 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v32 + 32) = -65536;
  *(void *)(v32 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE120;
  *(void *)(inited + 504) = v32;
  *(_WORD *)(inited + 512) = 6416;
  uint64_t v33 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v33 + 32) = -65536;
  *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE148;
  *(void *)(inited + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v33;
  *(_WORD *)(inited + 528) = 6929;
  uint64_t v34 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v34 + 32) = -65536;
  *(void *)(v34 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE170;
  *(void *)(inited + 536) = v34;
  *(_WORD *)(inited + 544) = 8452;
  uint64_t v35 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v35 + 32) = -65536;
  *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE198;
  *(void *)(inited + 552) = v35;
  *(_WORD *)(inited + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 8981;
  uint64_t v36 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v36 + 32) = -65536;
  *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE1C0;
  *(void *)(inited + 568) = v36;
  *(_WORD *)(inited + 576) = 9480;
  uint64_t v37 = swift_allocObject(v2, 64LL, 7LL);
  *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6660;
  *(_DWORD *)(v37 + 32) = 0;
  *(void *)(v37 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE1E8;
  *(_DWORD *)(v37 + 48) = -65536;
  *(void *)(v37 + 56) = &off_1000FE210;
  *(void *)(inited + 584) = v37;
  *(_WORD *)(inited + 592) = 9992;
  uint64_t v38 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v38 + 32) = -65536;
  *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE238;
  *(void *)(inited + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v38;
  *(_WORD *)(inited + 608) = 9736;
  uint64_t v39 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v39 + 32) = -65536;
  *(void *)(v39 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE260;
  *(void *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 16) = v39;
  *(_WORD *)(inited + 624) = 11289;
  uint64_t v40 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v40 + 32) = -65536;
  *(void *)(v40 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE288;
  *(void *)(inited + 632) = v40;
  *(_WORD *)(inited + 64_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 11546;
  uint64_t v41 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v41 + 32) = -65536;
  *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE2B0;
  *(void *)(inited + 648) = v41;
  *(_WORD *)(inited + 656) = 10520;
  uint64_t v42 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v42 + 32) = -65536;
  *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE2D8;
  *(void *)(inited + 664) = v42;
  *(_WORD *)(inited + 672) = 10776;
  uint64_t v43 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v43 + 32) = -65536;
  *(void *)(v43 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE300;
  *(void *)(inited + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v43;
  *(_WORD *)(inited + 688) = 11032;
  uint64_t v44 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_DWORD *)(v44 + 32) = -65536;
  *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE328;
  *(void *)(inited + 696) = v44;
  *(_WORD *)(inited + 704) = 11803;
  uint64_t v45 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v45 + 32) = 0;
  *(_WORD *)(v45 + 34) = -1;
  *(void *)(v45 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE350;
  *(void *)(inited + 712) = v45;
  *(_WORD *)(inited + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 12059;
  uint64_t v46 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v46 + 32) = 0;
  *(_WORD *)(v46 + 34) = -1;
  *(void *)(v46 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE378;
  *(void *)(inited + 728) = v46;
  *(_WORD *)(inited + 736) = 9233;
  uint64_t v47 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v47 + 32) = 0;
  *(_WORD *)(v47 + 34) = -1;
  *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE3A0;
  *(void *)(inited + 744) = v47;
  *(_WORD *)(inited + 752) = 12827;
  uint64_t v48 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v48 + 32) = 0;
  *(_WORD *)(v48 + 34) = -1;
  *(void *)(v48 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE3C8;
  *(void *)(inited + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v48;
  *(_WORD *)(inited + 768) = 12296;
  uint64_t v49 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v49 + 32) = 0;
  *(_WORD *)(v49 + 34) = -1;
  *(void *)(v49 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE3F0;
  *(void *)(inited + 776) = v49;
  *(_WORD *)(inited + 784) = 13341;
  uint64_t v50 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v50 + 32) = 0;
  *(_WORD *)(v50 + 34) = -1;
  *(void *)(v50 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE418;
  *(void *)(inited + 792) = v50;
  *(_WORD *)(inited + 80_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 13592;
  uint64_t v51 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v51 + 32) = 0;
  *(_WORD *)(v51 + 34) = -1;
  *(void *)(v51 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE440;
  *(void *)(inited + 808) = v51;
  *(_WORD *)(inited + 8swift_unknownObjectWeakDestroy(v0 + 16) = 13854;
  uint64_t v52 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v52 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v52 + 32) = 0;
  *(_WORD *)(v52 + 34) = -1;
  *(void *)(v52 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE468;
  *(void *)(inited + 824) = v52;
  *(_WORD *)(inited + 832) = 14111;
  uint64_t v53 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v53 + 32) = 0;
  *(_WORD *)(v53 + 34) = -1;
  *(void *)(v53 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE490;
  *(void *)(inited + 84_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v53;
  *(_WORD *)(inited + 848) = 14368;
  uint64_t v54 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v54 + 32) = 0;
  *(_WORD *)(v54 + 34) = -1;
  *(void *)(v54 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE4B8;
  *(void *)(inited + 856) = v54;
  *(_WORD *)(inited + 864) = 14882;
  uint64_t v55 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v55 + 32) = 0;
  *(_WORD *)(v55 + 34) = -1;
  *(void *)(v55 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE4E0;
  *(void *)(inited + 872) = v55;
  *(_WORD *)(inited + 88_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 14625;
  uint64_t v56 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v56 + 32) = 0;
  *(_WORD *)(v56 + 34) = -1;
  *(void *)(v56 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE508;
  *(void *)(inited + 888) = v56;
  *(_WORD *)(inited + 896) = 15137;
  uint64_t v57 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v57 + 32) = 0;
  *(_WORD *)(v57 + 34) = -1;
  *(void *)(v57 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE530;
  *(void *)(inited + 904) = v57;
  *(_WORD *)(inited + 912) = 15393;
  uint64_t v58 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v58 + 32) = 0;
  *(_WORD *)(v58 + 34) = -1;
  *(void *)(v58 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE558;
  *(void *)(inited + 92_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v58;
  *(_WORD *)(inited + 928) = 15649;
  uint64_t v59 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v59 + 32) = 0;
  *(_WORD *)(v59 + 34) = -1;
  *(void *)(v59 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE580;
  *(void *)(inited + 936) = v59;
  *(_WORD *)(inited + 944) = 15880;
  uint64_t v60 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v60 + 32) = 0;
  *(_WORD *)(v60 + 34) = -1;
  *(void *)(v60 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE5A8;
  *(void *)(inited + 952) = v60;
  *(_WORD *)(inited + 96_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = 16136;
  uint64_t v61 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v61 + 32) = 0;
  *(_WORD *)(v61 + 34) = -1;
  *(void *)(v61 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE5D0;
  *(void *)(inited + 968) = v61;
  *(_WORD *)(inited + 976) = 2825;
  uint64_t v62 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v62 + 32) = 0;
  *(_WORD *)(v62 + 34) = -1;
  *(void *)(v62 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE5F8;
  *(void *)(inited + 984) = v62;
  *(_WORD *)(inited + 992) = 16388;
  uint64_t v63 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v63 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  *(_WORD *)(v63 + 32) = 0;
  *(_WORD *)(v63 + 34) = -1;
  *(void *)(v63 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = &off_1000FE620;
  *(void *)(inited + 100_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Stream.swift",  22LL,  2LL,  638LL, 0) = v63;
  unint64_t v64 = sub_10000B070(inited);
  swift_setDeallocating(inited);
  uint64_t v65 = sub_100008E00(&qword_100116508);
  uint64_t result = swift_arrayDestroy(inited + 32, 61LL, v65);
  qword_1001172A0 = v64;
  return result;
}

uint64_t sub_1000ABDB0(unsigned __int16 a1)
{
  if (a1 <= 0x869u)
  {
    if (a1 <= 0x581u)
    {
      if (a1 > 0x47Eu)
      {
        if (a1 > 0x4E7u)
        {
          if (a1 == 1256) {
            return 29LL;
          }
          if (a1 == 1378) {
            return 6LL;
          }
        }

        else
        {
          if (a1 == 1151) {
            return 5LL;
          }
          if (a1 == 1177) {
            return 20LL;
          }
        }
      }

      else if (a1 > 0x43Du)
      {
        if (a1 == 1086) {
          return 33LL;
        }
        if (a1 == 1133) {
          return 4LL;
        }
      }

      else
      {
        if (!a1) {
          return 0LL;
        }
        if (a1 == 1054) {
          return 19LL;
        }
      }
    }

    else if (a1 <= 0x6E5u)
    {
      if (a1 > 0x5ABu)
      {
        if (a1 == 1452) {
          return 8LL;
        }
        if (a1 == 1532) {
          return 9LL;
        }
      }

      else
      {
        if (a1 == 1410) {
          return 12LL;
        }
        if (a1 == 1447) {
          return 14LL;
        }
      }
    }

    else if (a1 <= 0x74Cu)
    {
      if (a1 == 1766) {
        return 10LL;
      }
      if (a1 == 1862) {
        return 7LL;
      }
    }

    else
    {
      switch(a1)
      {
        case 0x74Du:
          return 15LL;
        case 0x763u:
          return 1LL;
        case 0x7FDu:
          return 22LL;
      }
    }
  }

  else if (a1 > 0x1531u)
  {
    if (a1 <= 0x1962u)
    {
      if (a1 > 0x170Cu)
      {
        if (a1 == 5901) {
          return 25LL;
        }
        if (a1 == 6479) {
          return 11LL;
        }
      }

      else
      {
        if (a1 == 5426) {
          return 18LL;
        }
        if (a1 == 5454) {
          return 21LL;
        }
      }
    }

    else if (a1 <= 0x2919u)
    {
      if (a1 == 6499) {
        return 32LL;
      }
      if (a1 == 8628) {
        return 24LL;
      }
    }

    else
    {
      switch(a1)
      {
        case 0x291Au:
          return 26LL;
        case 0x2E1Au:
          return 31LL;
        case 0x328Fu:
          return 34LL;
      }
    }
  }

  else if (a1 <= 0xFD8u)
  {
    if (a1 > 0x943u)
    {
      if (a1 == 2372) {
        return 16LL;
      }
      if (a1 == 3168) {
        return 17LL;
      }
    }

    else
    {
      if (a1 == 2154) {
        return 2LL;
      }
      if (a1 == 2276) {
        return 23LL;
      }
    }
  }

  else if (a1 <= 0x13B1u)
  {
    if (a1 == 4057) {
      return 30LL;
    }
    if (a1 == 4661) {
      return 28LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 0x13B2u:
        return 3LL;
      case 0x1460u:
        return 13LL;
      case 0x14EDu:
        return 27LL;
    }
  }

  return 35LL;
}

uint64_t sub_1000AC0A8(unsigned __int16 a1)
{
  if (a1 <= 0x856u)
  {
    if (a1 > 0xE6u)
    {
      if (a1 > 0x300u)
      {
        if (a1 > 0x501u)
        {
          switch(a1)
          {
            case 0x502u:
              return 28LL;
            case 0x547u:
              return 44LL;
            case 0x601u:
              return 34LL;
          }
        }

        else
        {
          switch(a1)
          {
            case 0x301u:
              return 13LL;
            case 0x320u:
              return 8LL;
            case 0x401u:
              return 11LL;
          }
        }
      }

      else if (a1 > 0x14Cu)
      {
        switch(a1)
        {
          case 0x14Du:
            return 40LL;
          case 0x243u:
            return 53LL;
          case 0x300u:
            return 25LL;
        }
      }

      else
      {
        switch(a1)
        {
          case 0xE7u:
            return 15LL;
          case 0x103u:
            return 3LL;
          case 0x111u:
            return 4LL;
        }
      }

      return 65LL;
    }

    switch(a1)
    {
      case 0u:
        uint64_t result = 0LL;
        break;
      case 3u:
        uint64_t result = 26LL;
        break;
      case 6u:
        uint64_t result = 17LL;
        break;
      case 8u:
        uint64_t result = 5LL;
        break;
      case 0xAu:
        uint64_t result = 6LL;
        break;
      case 0x10u:
        uint64_t result = 29LL;
        break;
      case 0x17u:
        uint64_t result = 36LL;
        break;
      case 0x19u:
        uint64_t result = 16LL;
        break;
      case 0x1Au:
        uint64_t result = 18LL;
        break;
      case 0x1Fu:
        uint64_t result = 27LL;
        break;
      case 0x51u:
        uint64_t result = 21LL;
        break;
      case 0x5Cu:
        uint64_t result = 56LL;
        break;
      case 0x6Du:
        uint64_t result = 58LL;
        break;
      case 0x70u:
        uint64_t result = 54LL;
        break;
      case 0x73u:
        uint64_t result = 20LL;
        break;
      case 0x81u:
        uint64_t result = 41LL;
        break;
      case 0x82u:
        uint64_t result = 42LL;
        break;
      case 0x83u:
        uint64_t result = 43LL;
        break;
      case 0x97u:
        uint64_t result = 14LL;
        break;
      case 0xA4u:
        uint64_t result = 19LL;
        break;
      default:
        return 65LL;
    }
  }

  else if (a1 > 0x3004u)
  {
    if (a1 <= 0x9A41u)
    {
      if (a1 > 0x4C00u)
      {
        if (a1 > 0x8177u)
        {
          if (a1 == 33144) {
            return 45LL;
          }
          if (a1 == 33292) {
            return 51LL;
          }
        }

        else
        {
          if (a1 == 19457) {
            return 55LL;
          }
          if (a1 == 21778) {
            return 10LL;
          }
        }
      }

      else if (a1 > 0x3285u)
      {
        if (a1 == 12934) {
          return 22LL;
        }
        if (a1 == 13074) {
          return 9LL;
        }
      }

      else
      {
        if (a1 == 12293) {
          return 35LL;
        }
        if (a1 == 12858) {
          return 30LL;
        }
      }

      return 65LL;
    }

    if (a1 > 0xA050u)
    {
      if (a1 > 0xC008u)
      {
        if (a1 == 49161) {
          return 49LL;
        }
        if (a1 == 49664) {
          return 12LL;
        }
      }

      else
      {
        if (a1 == 41041) {
          return 52LL;
        }
        if (a1 == 42257) {
          return 24LL;
        }
      }

      return 65LL;
    }

    switch(a1)
    {
      case 0x9A42u:
        uint64_t result = 59LL;
        break;
      case 0x9A4Bu:
        uint64_t result = 60LL;
        break;
      case 0x9A64u:
        uint64_t result = 61LL;
        break;
      case 0x9A66u:
        uint64_t result = 57LL;
        break;
      default:
        return 65LL;
    }
  }

  else
  {
    if (a1 > 0x170Bu)
    {
      if (a1 <= 0x1867u)
      {
        switch(a1)
        {
          case 0x170Cu:
            return 32LL;
          case 0x1710u:
            return 39LL;
          case 0x1711u:
            return 31LL;
        }
      }

      else if (a1 > 0x2011u)
      {
        if (a1 == 8210) {
          return 2LL;
        }
        if (a1 == 10514) {
          return 7LL;
        }
      }

      else
      {
        if (a1 == 6248) {
          return 23LL;
        }
        if (a1 == 8207) {
          return 1LL;
        }
      }

      return 65LL;
    }

    if (a1 <= 0x1001u)
    {
      switch(a1)
      {
        case 0x857u:
          return 33LL;
        case 0xA37u:
          return 64LL;
        case 0x1000u:
          return 47LL;
      }

      return 65LL;
    }

    switch(a1)
    {
      case 0x1105u:
        return 62LL;
      case 0x1106u:
      case 0x1108u:
      case 0x1109u:
      case 0x110Cu:
      case 0x110Du:
      case 0x110Eu:
      case 0x110Fu:
      case 0x1110u:
      case 0x1111u:
      case 0x1112u:
      case 0x1113u:
        return 65LL;
      case 0x1107u:
        return 63LL;
      case 0x110Au:
        return 37LL;
      case 0x110Bu:
        return 38LL;
      case 0x1114u:
        return 48LL;
      default:
        if (a1 == 4098)
        {
          uint64_t result = 46LL;
        }

        else
        {
          if (a1 != 4100) {
            return 65LL;
          }
          uint64_t result = 50LL;
        }

        break;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ErrataKey(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 65314 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65314 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65314;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65314;
    }

    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65314;
    }
  }

uint64_t storeEnumTagSinglePayload for ErrataKey(_WORD *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 65314 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65314 < 0xFF0000) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDD) {
    return ((uint64_t (*)(void))((char *)&loc_1000AC62C + 4 * byte_1000DA85D[v4]))();
  }
  *a1 = a2 - 222;
  return ((uint64_t (*)(void))((char *)sub_1000AC660 + 4 * byte_1000DA858[v4]))();
}

uint64_t sub_1000AC660(uint64_t result)
{
  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000AC668(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2) {
    JUMPOUT(0x1000AC670LL);
  }
  return result;
}

uint64_t sub_1000AC67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2) {
    JUMPOUT(0x1000AC684LL);
  }
  *(_BYTE *)uint64_t result = a2 + 34;
  return result;
}

uint64_t sub_1000AC688(uint64_t result)
{
  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000AC690(uint64_t result)
{
  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ErrataKey()
{
  return &type metadata for ErrataKey;
}

unint64_t sub_1000AC6B0()
{
  unint64_t result = qword_100116510;
  if (!qword_100116510)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA8FC, &type metadata for ErrataKey);
    atomic_store(result, (unint64_t *)&qword_100116510);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ProductID(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xC0) {
    goto LABEL_17;
  }
  if (a2 + 64 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 64) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 64;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 64;
    }
  }

uint64_t storeEnumTagSinglePayload for ProductID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 64 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 64) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xC0) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xBF) {
    return ((uint64_t (*)(void))((char *)&loc_1000AC7D0 + 4 * byte_1000DA867[v4]))();
  }
  *a1 = a2 + 64;
  return ((uint64_t (*)(void))((char *)sub_1000AC804 + 4 * byte_1000DA862[v4]))();
}

uint64_t sub_1000AC804(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AC80C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AC814LL);
  }
  return result;
}

uint64_t sub_1000AC820(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AC828LL);
  }
  *(_BYTE *)unint64_t result = a2 + 64;
  return result;
}

uint64_t sub_1000AC82C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AC834(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProductID()
{
  return &type metadata for ProductID;
}

uint64_t getEnumTagSinglePayload for VendorID(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }

uint64_t storeEnumTagSinglePayload for VendorID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xDD) {
    return ((uint64_t (*)(void))((char *)&loc_1000AC92C + 4 * byte_1000DA871[v4]))();
  }
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_1000AC960 + 4 * byte_1000DA86C[v4]))();
}

uint64_t sub_1000AC960(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AC968(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AC970LL);
  }
  return result;
}

uint64_t sub_1000AC97C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AC984LL);
  }
  *(_BYTE *)unint64_t result = a2 + 34;
  return result;
}

uint64_t sub_1000AC988(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000AC990(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VendorID()
{
  return &type metadata for VendorID;
}

unint64_t sub_1000AC9B0()
{
  unint64_t result = qword_100116518;
  if (!qword_100116518)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DA9F0, &type metadata for VendorID);
    atomic_store(result, (unint64_t *)&qword_100116518);
  }

  return result;
}

unint64_t sub_1000AC9F8()
{
  unint64_t result = qword_100116520;
  if (!qword_100116520)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DAA90, &type metadata for ProductID);
    atomic_store(result, (unint64_t *)&qword_100116520);
  }

  return result;
}

uint64_t OutputTerminal.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16);
}

uint64_t InputTerminal.usbDescriptor.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t InputTerminal.controls.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 88));
}

uint64_t InputTerminal.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 96));
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*InputTerminal.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t InputTerminal.clusterDescription(altSetting:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 64);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 == 1) {
    return *(void *)(v2 + 32);
  }
  if (!(_BYTE)result)
  {
    if (!v3)
    {
      __break(1u);
      return result;
    }

    return *(void *)(v2 + 32);
  }

  sub_100029840( 0xD000000000000018LL,  0x80000001000D2700LL,  0xD00000000000001FLL,  (void *)0x80000001000D2720LL,  0xD000000000000016LL,  0x80000001000D2740LL,  185LL);
  return 0LL;
}

uint64_t InputTerminal.clusterDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (*(void *)(v1 + 16)) {
    return *(void *)(v1 + 32);
  }
  __break(1u);
  return result;
}

uint64_t InputTerminal.activate(onDevice:controlInterface:addLatencyControl:)@<X0>( void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v39 = v58[0];
  uint64_t v41 = v58[1];
  int v6 = v61;
  uint64_t v47 = v60;
  uint64_t v50 = v62;
  unint64_t v7 = v64;
  uint64_t v53 = v63;
  char v55 = v59;
  uint64_t v9 = v65;
  uint64_t v8 = v66;
  unint64_t v11 = v67;
  uint64_t v10 = v68;
  uint64_t v12 = v69;
  sub_10004AFEC((uint64_t)v58, (uint64_t)v70, &qword_1001150F8);
  uint64_t v38 = a4;
  if (v71)
  {
    unint64_t v13 = v7 >> 8;
    char v14 = a3;
    uint64_t v16 = v50;
    uint64_t v15 = v53;
    uint64_t v17 = v47;
    char v18 = v55;
    uint64_t v19 = v39;
    uint64_t v20 = v41;
  }

  else
  {
    uint64_t v10 = *(void *)(v4 + 88);
    uint64_t v12 = *(void *)(v4 + 96);
    unint64_t v11 = *(void *)(v4 + 80);
    LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 7) = *(_BYTE *)(v4 + 56);
    char v40 = *(_BYTE *)(v4 + 57);
    uint64_t v42 = *(void *)(v4 + 64);
    uint64_t v54 = *(void *)(v4 + 48);
    uint64_t v56 = *(void *)(v4 + 72);
    int v6 = *(unsigned __int16 *)(v4 + 32) | (*(unsigned __int8 *)(v4 + 34) << 16);
    uint64_t v48 = *(void *)(v4 + 24);
    uint64_t v51 = *(void *)(v4 + 40);
    char v21 = *(_BYTE *)(v4 + 16);
    uint64_t v22 = *(void *)v4;
    uint64_t v20 = *(void *)(v4 + 8);
    sub_10004AF38(v4);
    uint64_t v19 = v22;
    char v18 = v21;
    uint64_t v17 = v48;
    uint64_t v16 = v51;
    uint64_t v15 = v54;
    uint64_t v8 = v56;
    LOBYTE(v13) = v40;
    uint64_t v9 = v42;
    char v14 = a3;
  }

  v73[0] = v19;
  v73[1] = v20;
  char v74 = v18;
  uint64_t v75 = v17;
  __int16 v76 = v6;
  char v77 = BYTE2(v6);
  uint64_t v78 = v16;
  uint64_t v79 = v15;
  char v80 = v7;
  char v81 = v13;
  uint64_t v82 = v9;
  uint64_t v83 = v8;
  unint64_t v84 = v11;
  uint64_t v85 = v10;
  uint64_t v86 = v12;
  uint64_t v23 = v10;
  uint64_t v57 = v8;
  uint64_t v24 = v9;
  if ((v14 & 1) != 0)
  {
    sub_1000B0158((uint64_t *)(v4 + 48), (uint64_t)v72);
    sub_1000B0158(v72, (uint64_t)v87);
    uint64_t v26 = a1;
    uint64_t v25 = v45;
    if (v87[9] == 33)
    {
      uint64_t v27 = sub_100008E00(&qword_100114E78);
      uint64_t v28 = swift_allocObject(v27, 35LL, 7LL);
      *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
      *(_BYTE *)(v28 + 34) = -62;
      *(_WORD *)(v28 + 32) = 1920;
    }

    else
    {
      uint64_t v28 = 0LL;
    }
  }

  else
  {
    uint64_t v28 = 0LL;
    uint64_t v26 = a1;
    uint64_t v25 = v45;
  }

  uint64_t v29 = *(void *)(v4 + 64);
  id v30 = v26;
  sub_100030860(a2);
  swift_bridgeObjectRetain();
  uint64_t v52 = sub_1000AFEC0(v31);
  sub_100030944(a2);
  if (v25)
  {
    swift_bridgeObjectRelease(v24);

    sub_10004B030(v57, v11);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v12);
    return swift_bridgeObjectRelease(v28);
  }

  else
  {
    swift_bridgeObjectRelease(v29);

    if (*(void *)(v4 + 88)) {
      uint64_t v33 = *(void **)(v4 + 88);
    }
    else {
      uint64_t v33 = _swiftEmptyArrayStorage;
    }
    if (v28) {
      uint64_t v34 = (void *)v28;
    }
    else {
      uint64_t v34 = _swiftEmptyArrayStorage;
    }
    char v88 = v33;
    swift_bridgeObjectRetain();
    sub_10009304C((uint64_t)v34);
    uint64_t v49 = (uint64_t)v88;
    uint64_t active = type metadata accessor for ActiveInputTerminal();
    swift_allocObject(active, 160LL, 7LL);
    uint64_t v36 = (char *)v30;
    swift_bridgeObjectRetain();
    sub_10004AF94(v57, v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_10009149C(v36, (uint64_t)v73, (uint64_t)v52, v49);
    v38[3] = active;
    v38[4] = (uint64_t)&protocol witness table for ActiveInputTerminal;
    swift_bridgeObjectRelease(v24);
    sub_10004B030(v57, v11);
    swift_bridgeObjectRelease(v12);
    uint64_t result = swift_bridgeObjectRelease(v23);
    *uint64_t v38 = v37;
  }

  return result;
}

Swift::Int InputTerminal.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1000ACEF8@<X0>(void *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  return InputTerminal.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2, a3, a4);
}

Swift::Int sub_1000ACF40()
{
  __int128 v1 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v1;
  uint64_t v12 = *((void *)v0 + 12);
  __int128 v2 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v2;
  __int128 v3 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100045280((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputTerminal(uint64_t a1)
{
  return sub_100045280(a1);
}

Swift::Int sub_1000ACFEC(uint64_t a1)
{
  __int128 v2 = v1[5];
  __int128 v11 = v1[4];
  __int128 v12 = v2;
  uint64_t v13 = *((void *)v1 + 12);
  __int128 v3 = v1[1];
  __int128 v7 = *v1;
  __int128 v8 = v3;
  __int128 v4 = v1[3];
  __int128 v9 = v1[2];
  __int128 v10 = v4;
  Hasher.init(_seed:)(v6, a1);
  sub_100045280((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputTerminal( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  _WORD v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return sub_10003E4D8((uint64_t)v11, (uint64_t)v13) & 1;
}

uint64_t OutputTerminal.sourceID.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t OutputTerminal.usbDescriptor.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t (*OutputTerminal.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t OutputTerminal.clusterDescription(altSetting:)()
{
  return 0LL;
}

void OutputTerminal.clusterDescription.getter()
{
}

uint64_t OutputTerminal.activate(onDevice:controlInterface:addLatencyControl:)@<X0>( void *a1@<X0>, char a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v37[0];
  uint64_t v4 = v37[1];
  uint64_t v6 = v39;
  int v7 = v40;
  uint64_t v27 = v41;
  char v29 = v38;
  char v9 = v42;
  uint64_t v8 = v43;
  uint64_t v10 = v45;
  uint64_t v34 = v44;
  unint64_t v11 = v46;
  uint64_t v12 = v47;
  sub_10004AFEC((uint64_t)v37, (uint64_t)v48, &qword_100116528);
  if (v49 == 1)
  {
    uint64_t v28 = *(void *)(v3 + 72);
    uint64_t v30 = *(void *)(v3 + 88);
    LOBYTE(v1Hasher._combine(_:)(v0 & 1) = *(_BYTE *)(v3 + 80);
    char v26 = *(_BYTE *)(v3 + 81);
    uint64_t v8 = *(void *)(v3 + 56);
    uint64_t v35 = *(void *)(v3 + 64);
    uint64_t v13 = *(void *)(v3 + 40);
    char v14 = *(_BYTE *)(v3 + 48);
    int v7 = *(unsigned __int16 *)(v3 + 32) | (*(unsigned __int8 *)(v3 + 34) << 16);
    uint64_t v6 = *(void *)(v3 + 24);
    char v15 = *(_BYTE *)(v3 + 16);
    uint64_t v5 = *(void *)v3;
    uint64_t v4 = *(void *)(v3 + 8);
    sub_10004AEB8(v3);
    char v16 = v14;
    LOBYTE(v1swift_unknownObjectWeakDestroy(v0 + 7) = v26;
    uint64_t v10 = v28;
    char v18 = v15;
    uint64_t v19 = v35;
    uint64_t v12 = v30;
    char v20 = a2;
  }

  else
  {
    char v16 = v9 & 1;
    unint64_t v17 = v11 >> 8;
    char v20 = a2;
    uint64_t v19 = v34;
    uint64_t v13 = v27;
    char v18 = v29;
  }

  v51[0] = v5;
  v51[1] = v4;
  char v52 = v18;
  uint64_t v53 = v6;
  __int16 v54 = v7;
  char v55 = BYTE2(v7);
  uint64_t v56 = v13;
  char v57 = v16;
  uint64_t v58 = v8;
  uint64_t v59 = v19;
  uint64_t v60 = v10;
  char v61 = v11;
  char v62 = v17;
  uint64_t v63 = v12;
  if ((v20 & 1) != 0
    && (sub_1000B0158((uint64_t *)(v3 + 72), (uint64_t)v50), sub_1000B0158(v50, (uint64_t)v64), v64[9] == 34))
  {
    uint64_t v21 = sub_100008E00(&qword_100114E78);
    uint64_t v22 = (void *)swift_allocObject(v21, 35LL, 7LL);
    *((_OWORD *)v22 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D3D30;
    *((_BYTE *)v22 + 34) = -62;
    *((_WORD *)v22 + swift_unknownObjectWeakDestroy(v0 + 16) = 1920;
    uint64_t v23 = _swiftEmptyArrayStorage;
    if (*(void *)(v3 + 64)) {
      uint64_t v23 = *(void **)(v3 + 64);
    }
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    if (*(void *)(v3 + 64)) {
      uint64_t v23 = *(void **)(v3 + 64);
    }
    else {
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
  }

  uint64_t v36 = (uint64_t)v23;
  swift_bridgeObjectRetain();
  sub_10009304C((uint64_t)v22);
  uint64_t active = type metadata accessor for ActiveOutputTerminal();
  swift_allocObject(active, 144LL, 7LL);
  uint64_t result = sub_100091B40((char *)a1, (uint64_t)v51, v36);
  a3[3] = active;
  a3[4] = (uint64_t)&protocol witness table for ActiveOutputTerminal;
  *a3 = result;
  return result;
}

Swift::Int OutputTerminal.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100045264);
}

uint64_t sub_1000AD364@<X0>(void *a1@<X0>, char a2@<W2>, uint64_t *a3@<X8>)
{
  return OutputTerminal.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2, a3);
}

Swift::Int sub_1000AD3AC()
{
  __int128 v1 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v1;
  __int128 v2 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v2;
  __int128 v3 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, 0LL);
  sub_100045264((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OutputTerminal(uint64_t a1)
{
  return sub_100045264(a1);
}

Swift::Int sub_1000AD448(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v9 = v1[2];
  __int128 v10 = v2;
  __int128 v3 = v1[5];
  __int128 v11 = v1[4];
  __int128 v12 = v3;
  __int128 v4 = v1[1];
  __int128 v7 = *v1;
  __int128 v8 = v4;
  Hasher.init(_seed:)(v6, a1);
  sub_100045264((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutputTerminal( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  __int128 v3 = a1[5];
  void v9[4] = a1[4];
  v9[5] = v3;
  __int128 v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  __int128 v5 = a2[3];
  _OWORD v10[2] = a2[2];
  v10[3] = v5;
  __int128 v6 = a2[5];
  v10[4] = a2[4];
  void v10[5] = v6;
  __int128 v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_10003E4BC(v9, v10) & 1;
}

uint64_t MixerUnit.sourceID.getter()
{
  return *(void *)v0;
}

uint64_t MixerUnit.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 24) | (*(unsigned __int8 *)(v0 + 26) << 16);
}

uint64_t MixerUnit.usbDescriptor.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t FeatureUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 64));
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*SelectorUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

unint64_t FeatureUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>( char a1@<W2>, uint64_t *a2@<X8>)
{
  uint64_t v6 = v22;
  char v5 = v23;
  uint64_t v7 = v24;
  int v8 = v25;
  uint64_t v9 = v26;
  unint64_t v10 = v27;
  uint64_t v11 = v30;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  sub_10004AFEC((uint64_t)&v22, (uint64_t)v31, &qword_100116530);
  if (v32)
  {
    uint64_t v19 = v11;
    char v12 = v5 & 1;
    unint64_t v18 = v10 >> 8;
    if ((a1 & 1) == 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v21 = v2[7];
    uint64_t v19 = v2[8];
    uint64_t v20 = v2[6];
    uint64_t v9 = v2[4];
    LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_BYTE *)v2 + 40);
    LOBYTE(v18) = *((_BYTE *)v2 + 41);
    int v8 = *((unsigned __int16 *)v2 + 12) | (*((unsigned __int8 *)v2 + 26) << 16);
    uint64_t v7 = v2[2];
    uint64_t v6 = *v2;
    char v12 = *((_BYTE *)v2 + 8);
    sub_10004AE48(v2);
    if ((a1 & 1) == 0) {
      goto LABEL_7;
    }
  }

  sub_1000B0158(v2 + 4, (uint64_t)v33);
  sub_1000B0158(v33, (uint64_t)v34);
  if (v34[9] == 37)
  {
    uint64_t v13 = sub_100008E00(&qword_100114E78);
    char v14 = (void *)swift_allocObject(v13, 35LL, 7LL);
    *((_OWORD *)v14 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D3D30;
    *((_BYTE *)v14 + 34) = -62;
    *((_WORD *)v14 + swift_unknownObjectWeakDestroy(v0 + 16) = 4224;
    goto LABEL_8;
  }

Swift::Int FeatureUnit.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100045A70);
}

unint64_t sub_1000AD750@<X0>(char a1@<W2>, uint64_t *a2@<X8>)
{
  return FeatureUnit.activate(onDevice:controlInterface:addLatencyControl:)(a1, a2);
}

Swift::Int sub_1000AD798(uint64_t a1, uint64_t a2)
{
  return sub_1000ADE18(a1, a2, (void (*)(void *))sub_100045A70);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FeatureUnit(uint64_t a1)
{
  return sub_100045A70(a1);
}

Swift::Int sub_1000AD7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ADEC0(a1, a2, a3, (void (*)(void *))sub_100045A70);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FeatureUnit( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10003EF6C((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t MixerUnit.clusterDescription.getter()
{
  return *(void *)(v0 + 44);
}

uint64_t MixerUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 80));
  *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a1;
  return result;
}

uint64_t (*MixerUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void MixerUnit.activate(onDevice:controlInterface:addLatencyControl:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!v4)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    char v11 = v8;
    uint64_t active = type metadata accessor for ActiveMixerUnit();
    uint64_t v13 = swift_allocObject(active, 137LL, 7LL);
    *(void *)(v13 + 24) = 0LL;
    swift_unknownObjectWeakInit(v13 + 16, 0LL);
    __int128 v14 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(v13 + 64) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)(v3 + 64);
    uint64_t v15 = *(void *)(v3 + 80);
    __int128 v16 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v13 + 32) = *(_OWORD *)v3;
    *(_OWORD *)(v13 + 48) = v16;
    *(void *)(v13 + 112) = v15;
    *(void *)(v13 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v9;
    *(void *)(v13 + 128) = v10;
    *(_BYTE *)(v13 + 136) = v11;
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveMixerUnit;
    *a3 = v13;
    sub_10004ADC4((void *)v3);
  }

Swift::Int MixerUnit.hashValue.getter()
{
  return Hasher._finalize()();
}

void sub_1000AD984(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v23 = *v3;
  char v22 = *((_BYTE *)v3 + 8);
  uint64_t v21 = v3[2];
  int v6 = *((unsigned __int8 *)v3 + 26);
  int v7 = *((unsigned __int16 *)v3 + 12);
  char v24 = *((_BYTE *)v3 + 41);
  char v25 = *((_BYTE *)v3 + 40);
  uint64_t v8 = *(uint64_t *)((char *)v3 + 44);
  __int16 v9 = *((unsigned __int8 *)v3 + 52);
  __int16 v10 = *((unsigned __int8 *)v3 + 53);
  uint64_t v26 = v3[4];
  uint64_t v27 = v3[7];
  uint64_t v28 = v3[8];
  uint64_t v11 = v3[10];
  uint64_t v29 = v3[9];
  sub_1000BF5D0(a1, a2, v8, v9 | (v10 << 8));
  if (!v4)
  {
    char v15 = v14;
    int v16 = v7 | (v6 << 16);
    uint64_t v19 = v13;
    uint64_t v20 = v12;
    uint64_t active = type metadata accessor for ActiveMixerUnit();
    uint64_t v18 = swift_allocObject(active, 137LL, 7LL);
    *(void *)(v18 + 24) = 0LL;
    swift_unknownObjectWeakInit(v18 + 16, 0LL);
    *(void *)(v18 + 32) = v23;
    *(_BYTE *)(v18 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v22;
    *(void *)(v18 + 48) = v21;
    *(_BYTE *)(v18 + 58) = BYTE2(v16);
    *(_WORD *)(v18 + 56) = v16;
    *(void *)(v18 + 64) = v26;
    *(_BYTE *)(v18 + 72) = v25;
    *(_BYTE *)(v18 + 73) = v24;
    *(void *)(v18 + 76) = v8;
    *(_BYTE *)(v18 + 84) = v9;
    *(_BYTE *)(v18 + 85) = v10;
    *(void *)(v18 + 88) = v27;
    *(void *)(v18 + 96) = v28;
    *(void *)(v18 + 104) = v29;
    *(void *)(v18 + 112) = v11;
    *(void *)(v18 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v20;
    *(void *)(v18 + 128) = v19;
    *(_BYTE *)(v18 + 136) = v15;
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveMixerUnit;
    *a3 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

Swift::Int sub_1000ADB04()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  uint64_t v10 = *((void *)v0 + 10);
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100044B1C((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MixerUnit(uint64_t a1)
{
  return sub_100044B1C(a1);
}

Swift::Int sub_1000ADBAC(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v2;
  __int128 v10 = v1[4];
  uint64_t v11 = *((void *)v1 + 10);
  __int128 v3 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, a1);
  sub_100044B1C((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MixerUnit( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  _OWORD v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  _OWORD v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10003DAF0((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t SampleRateConverter.exceptionList.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

void *SelectorUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  uint64_t v4 = swift_allocObject(active, 112LL, 7LL);
  *(_BYTE *)(v4 + 88) = 1;
  *(void *)(v4 + 104) = 0LL;
  swift_unknownObjectWeakInit(v4 + 96, 0LL);
  __int128 v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v6;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveSelectorUnit;
  *a1 = v4;
  return sub_10004AE48((void *)v1);
}

Swift::Int SelectorUnit.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100045750);
}

double sub_1000ADD0C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((_BYTE *)v1 + 8);
  uint64_t v5 = v1[2];
  __int16 v15 = *((_WORD *)v1 + 12);
  char v6 = *((_BYTE *)v1 + 26);
  uint64_t v14 = v1[4];
  __int16 v13 = *((_WORD *)v1 + 20);
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  uint64_t v11 = swift_allocObject(active, 112LL, 7LL);
  *(_BYTE *)(v11 + 88) = 1;
  *(void *)(v11 + 104) = 0LL;
  swift_unknownObjectWeakInit(v11 + 96, 0LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v5;
  *(_BYTE *)(v11 + 42) = v6;
  *(_WORD *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v15;
  *(void *)(v11 + 48) = v14;
  *(_WORD *)(v11 + 56) = v13;
  *(void *)(v11 + 64) = v7;
  *(void *)(v11 + 72) = v8;
  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v9;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveSelectorUnit;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

Swift::Int sub_1000ADE0C(uint64_t a1, uint64_t a2)
{
  return sub_1000ADE18(a1, a2, (void (*)(void *))sub_100045750);
}

Swift::Int sub_1000ADE18(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  __int128 v5 = v3[3];
  __int128 v11 = v3[2];
  __int128 v12 = v5;
  uint64_t v13 = *((void *)v3 + 8);
  __int128 v6 = v3[1];
  __int128 v9 = *v3;
  __int128 v10 = v6;
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SelectorUnit(uint64_t a1)
{
  return sub_100045750(a1);
}

Swift::Int sub_1000ADEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000ADEC0(a1, a2, a3, (void (*)(void *))sub_100045750);
}

Swift::Int sub_1000ADEC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  __int128 v6 = v4[3];
  __int128 v12 = v4[2];
  __int128 v13 = v6;
  uint64_t v14 = *((void *)v4 + 8);
  __int128 v7 = v4[1];
  __int128 v10 = *v4;
  __int128 v11 = v7;
  Hasher.init(_seed:)(v9, a1);
  a4(v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SelectorUnit( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10003EB4C((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t ExtensionUnit.cluster.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

uint64_t ExtensionUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 88));
  *(void *)(v1 + 88) = a1;
  return result;
}

void *ExtensionUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveExtensionUnit();
  uint64_t v4 = swift_allocObject(active, 128LL, 7LL);
  *(void *)(v4 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0LL;
  swift_unknownObjectWeakInit(v4 + 112, 0LL);
  __int128 v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  __int128 v6 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v4 + 96) = v6;
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v7;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveExtensionUnit;
  *a1 = v4;
  return sub_10004AD34((void *)v1);
}

Swift::Int ExtensionUnit.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_1000453F8);
}

Swift::Int sub_1000AE05C(void (*a1)(void *))
{
  return Hasher._finalize()();
}

double sub_1000AE09C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((_BYTE *)v1 + 8);
  __int16 v18 = *((_WORD *)v1 + 12);
  char v5 = *((_BYTE *)v1 + 26);
  uint64_t v16 = v1[4];
  uint64_t v17 = v1[2];
  __int16 v15 = *((_WORD *)v1 + 20);
  uint64_t v6 = v1[6];
  uint64_t v14 = v1[7];
  uint64_t v7 = v1[8];
  char v13 = *((_BYTE *)v1 + 72);
  uint64_t v9 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t active = type metadata accessor for ActiveExtensionUnit();
  uint64_t v11 = swift_allocObject(active, 128LL, 7LL);
  *(void *)(v11 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0LL;
  swift_unknownObjectWeakInit(v11 + 112, 0LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v17;
  *(_BYTE *)(v11 + 42) = v5;
  *(_WORD *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v18;
  *(void *)(v11 + 48) = v16;
  *(_WORD *)(v11 + 56) = v15;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v14;
  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v7;
  *(_BYTE *)(v11 + 88) = v13;
  *(void *)(v11 + 96) = v9;
  *(void *)(v11 + 104) = v8;
  a1[3] = active;
  a1[4] = (uint64_t)&protocol witness table for ActiveExtensionUnit;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

Swift::Int sub_1000AE1C0()
{
  __int128 v1 = v0[3];
  __int128 v8 = v0[2];
  __int128 v9 = v1;
  __int128 v2 = v0[5];
  __int128 v10 = v0[4];
  __int128 v11 = v2;
  __int128 v3 = v0[1];
  __int128 v6 = *v0;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, 0LL);
  sub_1000453F8((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExtensionUnit(uint64_t a1)
{
  return sub_1000453F8(a1);
}

Swift::Int sub_1000AE25C(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v9 = v1[2];
  __int128 v10 = v2;
  __int128 v3 = v1[5];
  __int128 v11 = v1[4];
  __int128 v12 = v3;
  __int128 v4 = v1[1];
  __int128 v7 = *v1;
  __int128 v8 = v4;
  Hasher.init(_seed:)(v6, a1);
  sub_1000453F8((uint64_t)v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExtensionUnit( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  __int128 v3 = a1[5];
  _OWORD v9[4] = a1[4];
  _OWORD v9[5] = v3;
  __int128 v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  __int128 v5 = a2[3];
  _OWORD v10[2] = a2[2];
  v10[3] = v5;
  __int128 v6 = a2[5];
  v10[4] = a2[4];
  void v10[5] = v6;
  __int128 v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_10003E6D4(v9, v10) & 1;
}

uint64_t EffectUnit.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 56));
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*EffectUnit.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

double ClockMultiplier.activate(onDevice:controlInterface:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  return result;
}

Swift::Int EffectUnit.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100045BEC);
}

Swift::Int sub_1000AE360()
{
  __int128 v1 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v1;
  __int128 v2 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100045BEC((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EffectUnit(uint64_t a1)
{
  return sub_100045BEC(a1);
}

Swift::Int sub_1000AE3E8(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v2;
  __int128 v3 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)(v5, a1);
  sub_100045BEC((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EffectUnit( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  __int128 v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v8[2] = a2[2];
  void v8[3] = v5;
  return sub_10003F15C((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t SampleRateConverter.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*(void *)(v1 + 48));
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*SampleRateConverter.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t ProcessingUnit.numberOfModes.getter()
{
  return *(void *)(*(void *)(v0 + 72) + 16LL);
}

void *ProcessingUnit.activate(onDevice:controlInterface:addLatencyControl:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t active = type metadata accessor for ActiveProcessingUnit();
  uint64_t v4 = swift_allocObject(active, 112LL, 7LL);
  *(void *)(v4 + 104) = 0LL;
  swift_unknownObjectWeakInit(v4 + 96, 0LL);
  __int128 v5 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_OWORD *)(v1 + 64);
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v6;
  a1[3] = active;
  a1[4] = (uint64_t)&off_100104C40;
  *a1 = v4;
  return sub_10004AC7C((void *)v1);
}

Swift::Int ProcessingUnit.hashValue.getter()
{
  return Hasher._finalize()();
}

double sub_1000AE578@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((_BYTE *)v1 + 8);
  __int16 v16 = *((_WORD *)v1 + 12);
  char v5 = *((_BYTE *)v1 + 26);
  uint64_t v14 = v1[4];
  uint64_t v15 = v1[2];
  __int16 v13 = *((_WORD *)v1 + 20);
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v8 = v1[9];
  uint64_t active = type metadata accessor for ActiveProcessingUnit();
  uint64_t v11 = swift_allocObject(active, 112LL, 7LL);
  *(void *)(v11 + 104) = 0LL;
  swift_unknownObjectWeakInit(v11 + 96, 0LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_BYTE *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v15;
  *(_BYTE *)(v11 + 42) = v5;
  *(_WORD *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v16;
  *(void *)(v11 + 48) = v14;
  *(_WORD *)(v11 + 56) = v13;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v7;
  *(void *)(v11 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v9;
  *(void *)(v11 + 88) = v8;
  a1[3] = active;
  a1[4] = (uint64_t)&off_100104C40;
  *a1 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)&double result = swift_bridgeObjectRetain().n128_u64[0];
  return result;
}

Swift::Int sub_1000AE67C()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  sub_1000450F4((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ProcessingUnit(uint64_t a1)
{
  return sub_1000450F4(a1);
}

Swift::Int sub_1000AE714(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v2;
  __int128 v10 = v1[4];
  __int128 v3 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, a1);
  sub_1000450F4((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProcessingUnit( _OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  v8[2] = a1[2];
  void v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  _OWORD v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  _OWORD v8[4] = v3;
  v9[0] = v6;
  return sub_10003E2D0((uint64_t)v8, (uint64_t)v9) & 1;
}

Swift::Int SampleRateConverter.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100044C94);
}

Swift::Int sub_1000AE7CC()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  uint64_t v9 = *((void *)v0 + 8);
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100044C94((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SampleRateConverter(uint64_t a1)
{
  return sub_100044C94(a1);
}

Swift::Int sub_1000AE864(uint64_t a1)
{
  __int128 v2 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v2;
  uint64_t v10 = *((void *)v1 + 8);
  __int128 v3 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v3;
  Hasher.init(_seed:)(v5, a1);
  sub_100044C94((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SampleRateConverter( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  uint64_t v10 = *(void *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10003DCEC((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t PowerDomain.nameStringIndex.getter()
{
  return *(unsigned __int16 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 10) << 16);
}

uint64_t ClockMultiplier.usbDescriptor.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ClockSelector.inputClockIDs.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

Swift::Int PowerDomain.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000AE970()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int128 v6 = v0[2];
  Hasher.init(_seed:)(v3, 0LL);
  sub_1000458D8((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PowerDomain(uint64_t a1)
{
  return sub_1000458D8(a1);
}

Swift::Int sub_1000AE9F8(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  Hasher.init(_seed:)(v4, a1);
  sub_1000458D8((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PowerDomain( _OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = *a2;
  __int128 v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  __int128 v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_10003ED40((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t ClockMultiplier.nameStringIndex.getter()
{
  return *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
}

uint64_t ClockSource.isSynchronizedToSOF.getter()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ClockSource.activate(onDevice:controlInterface:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = v4;
  __int128 v6 = v3;
  if (v6[5]) {
    __int128 v9 = (void *)v6[5];
  }
  else {
    __int128 v9 = _swiftEmptyArrayStorage;
  }
  if (*(_BYTE *)(*(void *)a2 + 7LL) == 64)
  {
    unint64_t v11 = v6[1];
    swift_bridgeObjectRetain();
    char v12 = sub_100032178(v11, 1, a1, a2);
    if (v5)
    {
      uint64_t v13 = sub_100008E00(&qword_100113410);
      uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 32) = 0xD00000000000001BLL;
      *(void *)(v14 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0x80000001000D2760LL;
      print(_:separator:terminator:)(v14, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v5);
      uint64_t v5 = 0LL;
    }

    else
    {
      char v15 = v12;
      swift_bridgeObjectRelease(v9);
      uint64_t v16 = sub_100008E00(&qword_100114E78);
      __int128 v9 = (void *)swift_allocObject(v16, 38LL, 7LL);
      *((_OWORD *)v9 + Hasher._combine(_:)(v0 & 1) = xmmword_1000D6660;
      *((_BYTE *)v9 + 34) = 80;
      *((_WORD *)v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 704;
      *((_BYTE *)v9 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 82;
      *(_WORD *)((char *)v9 + 35) = v15 & 1 | 0x180;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
  }

  sub_10004AFEC((uint64_t)v6, (uint64_t)v23, &qword_100116538);
  sub_10004AFEC((uint64_t)v23, (uint64_t)&v24, &qword_100116538);
  if (v25 == 255)
  {
    uint64_t v17 = 0LL;
    __int16 v18 = 0LL;
  }

  else
  {
    uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
    if (v17)
    {
      unint64_t v19 = sub_1000B36EC(v24 | (v25 << 16) & 0x1FFFFu);
      if (v5) {
        return swift_bridgeObjectRelease(v9);
      }
      uint64_t v17 = v19;
      __int16 v18 = v20;
    }

    else
    {
      __int16 v18 = 0LL;
    }
  }

  uint64_t active = type metadata accessor for ActiveClockSource(0LL);
  swift_allocObject(active, *(unsigned int *)(active + 48), *(unsigned __int16 *)(active + 52));
  sub_10004AB84((uint64_t)v6);
  uint64_t result = sub_10001FBCC(v6, v17, v18, (uint64_t)v9);
  if (!v5)
  {
    a3[3] = active;
    a3[4] = (uint64_t)&protocol witness table for ActiveClockSource;
    *a3 = result;
  }

  return result;
}

Swift::Int ClockSource.hashValue.getter()
{
  return sub_1000AE05C((void (*)(void *))sub_100045A84);
}

uint64_t sub_1000AED0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return ClockSource.activate(onDevice:controlInterface:)(a1, a2, a3);
}

Swift::Int sub_1000AED44()
{
  __int128 v1 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v1;
  __int128 v2 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v2;
  Hasher.init(_seed:)(v4, 0LL);
  sub_100045A84((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockSource(uint64_t a1)
{
  return sub_100045A84(a1);
}

Swift::Int sub_1000AEDCC(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v6 = *v1;
  __int128 v7 = v2;
  __int128 v3 = v1[3];
  __int128 v8 = v1[2];
  __int128 v9 = v3;
  Hasher.init(_seed:)(v5, a1);
  sub_100045A84((uint64_t)v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockSource( _OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  __int128 v3 = a1[3];
  v7[2] = a1[2];
  _OWORD v7[3] = v3;
  __int128 v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  __int128 v5 = a2[3];
  v8[2] = a2[2];
  _OWORD v8[3] = v5;
  return sub_10003EF80(v7, v8) & 1;
}

unint64_t ClockSelector.activate(onDevice:controlInterface:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  sub_10004AFEC(v4, (uint64_t)v18, &qword_100116538);
  sub_10004AFEC((uint64_t)v18, (uint64_t)&v19, &qword_100116538);
  if (v20 == 255)
  {
    unint64_t v7 = 0LL;
LABEL_6:
    uint64_t v10 = 0LL;
    goto LABEL_7;
  }

  unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  if (!v7) {
    goto LABEL_6;
  }
  unint64_t result = sub_1000B36EC(v19 | (v20 << 16) & 0x1FFFFu);
  if (v3) {
    return result;
  }
  unint64_t v7 = result;
  uint64_t v10 = v9;
LABEL_7:
  uint64_t v11 = *(void *)(v4 + 48);
  if (v11) {
    char v12 = *(void **)(v4 + 48);
  }
  else {
    char v12 = _swiftEmptyArrayStorage;
  }
  sub_10004AFEC(v4 + 32, (uint64_t)&v17, &qword_1001148F0);
  uint64_t v16 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain_n(v11, 2LL);
  sub_10004AB54(&v17);
  sub_10004AB54(&v16);
  swift_bridgeObjectRelease(v12);
  uint64_t active = type metadata accessor for ActiveClockSelector();
  uint64_t v14 = swift_allocObject(active, 120LL, 7LL);
  *(_BYTE *)(v14 + 72) = 1;
  *(void *)(v14 + 104) = 0LL;
  unint64_t result = swift_unknownObjectWeakInit(v14 + 96, 0LL);
  *(void *)(v14 + 112) = 0LL;
  __int128 v15 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v4;
  *(_OWORD *)(v14 + 32) = v15;
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v4 + 32);
  *(void *)(v14 + 64) = *(void *)(v4 + 48);
  *(void *)(v14 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v7;
  *(void *)(v14 + 88) = v10;
  a2[3] = active;
  a2[4] = (uint64_t)&protocol witness table for ActiveClockSelector;
  *a2 = v14;
  return result;
}

Swift::Int ClockSelector.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t sub_1000AF020@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ClockSelector.activate(onDevice:controlInterface:)(a1, a2);
}

Swift::Int sub_1000AF060()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int128 v6 = v0[2];
  uint64_t v7 = *((void *)v0 + 6);
  Hasher.init(_seed:)(v3, 0LL);
  sub_100045594((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockSelector(uint64_t a1)
{
  return sub_100045594(a1);
}

Swift::Int sub_1000AF0F8(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  uint64_t v8 = *((void *)v1 + 6);
  Hasher.init(_seed:)(v4, a1);
  sub_100045594((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockSelector( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_10003E8D8((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ClockMultiplier.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000AF1E0()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int128 v6 = v0[2];
  int v7 = *((_DWORD *)v0 + 12);
  Hasher.init(_seed:)(v3, 0LL);
  sub_100044F84((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClockMultiplier(uint64_t a1)
{
  return sub_100044F84(a1);
}

Swift::Int sub_1000AF278(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int128 v7 = v1[2];
  int v8 = *((_DWORD *)v1 + 12);
  Hasher.init(_seed:)(v4, a1);
  sub_100044F84((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClockMultiplier( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  int v6 = *(_DWORD *)(a1 + 48);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  int v8 = *(_DWORD *)(a2 + 48);
  return sub_10003E0E4((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_1000AF324@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, __int16 a13, uint64_t a14)
{
  uint64_t v16 = a6;
  uint64_t v18 = a14;
  if (*(void *)(a6 + 16))
  {
    swift_bridgeObjectRetain(a8);
    sub_10004AF94(a10, a11);
  }

  else
  {
    swift_bridgeObjectRetain(a8);
    sub_10004AF94(a10, a11);
    swift_bridgeObjectRelease(v16);
    uint64_t v16 = 0LL;
  }

  if (*(void *)(a14 + 16))
  {
    swift_bridgeObjectRetain(v16);
  }

  else
  {
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRelease(a14);
    uint64_t v18 = 0LL;
  }

  swift_bridgeObjectRetain(a8);
  sub_10004AF94(a10, a11);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v16);
  sub_10004B030(a10, a11);
  swift_bridgeObjectRelease_n(a8, 2LL);
  swift_bridgeObjectRelease(v16);
  sub_10004B030(a10, a11);
  swift_bridgeObjectRelease(v18);
  uint64_t result = swift_bridgeObjectRelease(v16);
  *(void *)a9 = a3;
  *(void *)(a9 + 8) = a4;
  *(_BYTE *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(a9 + 24) = a2;
  *(_BYTE *)(a9 + 34) = BYTE2(a7);
  *(_WORD *)(a9 + 32) = a7;
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a1;
  *(void *)(a9 + 48) = a12;
  *(_WORD *)(a9 + 56) = a13;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a11;
  *(void *)(a9 + 88) = v16;
  *(void *)(a9 + 96) = v18;
  return result;
}

uint64_t sub_1000AF4A4@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, uint64_t a12)
{
  uint64_t v12 = a8;
  uint64_t v19 = a12;
  if (!*(void *)(a8 + 16))
  {
    uint64_t v20 = result;
    uint64_t v21 = a5;
    swift_bridgeObjectRelease(a8);
    a5 = v21;
    uint64_t result = v20;
    uint64_t v12 = 0LL;
  }

  if (!*(void *)(a12 + 16))
  {
    char v25 = a6;
    uint64_t v22 = a3;
    uint64_t v23 = result;
    uint64_t v24 = a5;
    swift_bridgeObjectRelease(a12);
    a5 = v24;
    uint64_t result = v23;
    a3 = v22;
    a6 = v25;
    uint64_t v19 = 0LL;
  }

  *(void *)a9 = a4;
  *(void *)(a9 + 8) = a5;
  *(_BYTE *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a6;
  *(void *)(a9 + 24) = a2;
  *(_WORD *)(a9 + 32) = a7;
  *(_BYTE *)(a9 + 34) = BYTE2(a7);
  *(void *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a3;
  *(_BYTE *)(a9 + 48) = 0;
  *(void *)(a9 + 56) = result;
  *(void *)(a9 + 64) = v12;
  *(void *)(a9 + 72) = a10;
  *(_WORD *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a11;
  *(void *)(a9 + 88) = v19;
  return result;
}

uint64_t sub_1000AF59C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int16 a10, uint64_t a11)
{
  uint64_t v12 = a6;
  uint64_t v17 = a11;
  if (!*(void *)(a6 + 16))
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRelease(v12);
    uint64_t v12 = 0LL;
    if (*(void *)(a11 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(a11);
    uint64_t v17 = 0LL;
    goto LABEL_6;
  }

  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  if (!*(void *)(a11 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain(v12);
LABEL_6:
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(a5);
  uint64_t result = swift_bridgeObjectRelease(a4);
  *(void *)a9 = 0LL;
  *(_BYTE *)(a9 + 8) = 1;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(a9 + 26) = BYTE2(a7);
  *(_WORD *)(a9 + 24) = a7;
  *(void *)(a9 + 32) = a8;
  *(_WORD *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a10;
  *(void *)(a9 + 44) = a2;
  *(_WORD *)(a9 + 52) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = v12;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v17;
  return result;
}

uint64_t sub_1000AF6D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = a3;
  if (!*(void *)(a3 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease(v12);
    uint64_t v12 = 0LL;
    if (*(void *)(a7 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRelease(a7);
    a7 = 0LL;
    goto LABEL_6;
  }

  swift_bridgeObjectRetain(a2);
  if (!*(void *)(a7 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain(v12);
LABEL_6:
  swift_bridgeObjectRelease(v12);
  uint64_t result = swift_bridgeObjectRelease(a2);
  *(void *)a8 = 0LL;
  *(_BYTE *)(a8 + 8) = 1;
  *(void *)(a8 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(a8 + 26) = BYTE2(a4);
  *(_WORD *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(_WORD *)(a8 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a6;
  *(void *)(a8 + 48) = a2;
  *(void *)(a8 + 56) = v12;
  *(void *)(a8 + 64) = a7;
  return result;
}

uint64_t sub_1000AF7C0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int16 a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13 = a4;
  uint64_t v18 = a10;
  if (!*(void *)(a4 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v13);
    uint64_t v13 = 0LL;
    if (*(void *)(a10 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(a10);
    uint64_t v18 = 0LL;
    goto LABEL_6;
  }

  swift_bridgeObjectRetain(a3);
  if (!*(void *)(a10 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain(v13);
LABEL_6:
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v18);
  uint64_t result = swift_bridgeObjectRelease_n(a3, 2LL);
  *(void *)a9 = a2;
  *(_BYTE *)(a9 + 8) = 0;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(a9 + 26) = BYTE2(a5);
  *(_WORD *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a7;
  *(_WORD *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a8;
  *(void *)(a9 + 48) = v18;
  *(void *)(a9 + 56) = a3;
  *(void *)(a9 + 64) = v13;
  *(void *)(a9 + 72) = a6;
  return result;
}

uint64_t sub_1000AF8DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, __int16 a11, uint64_t a12)
{
  uint64_t v13 = a7;
  uint64_t v18 = a12;
  if (*(void *)(a7 + 16))
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a3);
  }

  else
  {
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v13);
    uint64_t v13 = 0LL;
  }

  if (*(void *)(a12 + 16))
  {
    swift_bridgeObjectRetain(v13);
  }

  else
  {
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(a12);
    uint64_t v18 = 0LL;
  }

  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(a5);
  uint64_t result = swift_bridgeObjectRelease(a3);
  *(void *)a9 = a2;
  *(_BYTE *)(a9 + 8) = 0;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(a9 + 26) = BYTE2(a8);
  *(_WORD *)(a9 + 24) = a8;
  *(void *)(a9 + 32) = a10;
  *(_WORD *)(a9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = a11;
  *(void *)(a9 + 48) = a3;
  *(void *)(a9 + 56) = a4;
  *(void *)(a9 + 64) = a5;
  *(_BYTE *)(a9 + 72) = a6;
  *(void *)(a9 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v13;
  *(void *)(a9 + 88) = v18;
  return result;
}

void sub_1000AFA04(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = *((unsigned __int8 *)v1 + 40);
  int v5 = *((unsigned __int8 *)v1 + 41);
  uint64_t v6 = USBDescriptor.descriptorTypeName.getter(v3, v4 | (v5 << 8));
  if (v6 == 0x7461654634434441LL && v7 == 0xEF74696E55657275LL)
  {
    swift_bridgeObjectRelease(0xEF74696E55657275LL);
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0x7461654634434441LL, 0xEF74696E55657275LL, 0LL);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) == 0)
    {
      uint64_t v11 = 0LL;
      uint64_t v3 = 0LL;
      unint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      __int128 v15 = 0uLL;
      goto LABEL_18;
    }
  }

  if (*((_BYTE *)v1 + 8)) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = *v1;
  }
  if (v1[8]) {
    uint64_t v14 = (void *)v1[8];
  }
  else {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v16 = v1[2];
  uint64_t v13 = v1[6];
  if (v14[2])
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease(v14);
    uint64_t v14 = 0LL;
  }

  unint64_t v12 = v4 | ((unint64_t)v5 << 8);
  *((void *)&v15 + Hasher._combine(_:)(v0 & 1) = 16711680LL;
  *(void *)&__int128 v15 = v16;
LABEL_18:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = 0LL;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v12;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = v14;
}

uint64_t sub_1000AFB78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(_BYTE **)(v1 + 48);
  unsigned __int16 v5 = *(_WORD *)(v1 + 56);
  uint64_t v6 = USBDescriptor.descriptorTypeName.getter((uint64_t)v4, v5);
  uint64_t v8 = v7;
  if (v6 == 0xD000000000000011LL && v7 == 0x80000001000D27C0LL)
  {
    swift_bridgeObjectRelease(0x80000001000D27C0LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0xD000000000000011LL, 0x80000001000D27C0LL, 0LL);
    uint64_t result = swift_bridgeObjectRelease(v8);
    if ((v9 & 1) == 0)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      unint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      __int128 v16 = 0uLL;
      __int128 v17 = 0uLL;
      __int128 v18 = 0uLL;
      __int128 v19 = 0uLL;
      goto LABEL_22;
    }
  }

  sub_1000BE210(v4, v5);
  uint64_t v43 = (uint64_t)v4;
  uint64_t v58 = v45;
  int64_t v20 = *(void *)(v45 + 16);
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (v20)
  {
    *(void *)&__int128 v47 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000707F4(0, v20, 0);
    uint64_t v22 = _swiftEmptyArrayStorage;
    uint64_t v23 = (unsigned __int16 *)(v45 + 32);
    unint64_t v24 = _swiftEmptyArrayStorage[2];
    uint64_t v25 = 12 * v24;
    do
    {
      unsigned int v27 = *v23++;
      uint64_t v26 = v27;
      *(void *)&__int128 v47 = v22;
      unint64_t v28 = v22[3];
      unint64_t v29 = v24 + 1;
      if (v24 >= v28 >> 1)
      {
        sub_1000707F4(v28 > 1, v24 + 1, 1);
        uint64_t v22 = (void *)v47;
      }

      v22[2] = v29;
      uint64_t v30 = (char *)v22 + v25;
      *((void *)v30 + 4) = v26;
      *((_WORD *)v30 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 768;
      v25 += 12LL;
      unint64_t v24 = v29;
      --v20;
    }

    while (v20);
    sub_100045FD8(&v58);
    uint64_t v21 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
  }

  unsigned __int8 v31 = *(_BYTE *)(v2 + 16);
  sub_1000B2E70(&v46, &v57);
  sub_1000B2E70(&v57, v59);
  unsigned __int8 v32 = v59[0].n128_u8[0];
  if (v59[0].n128_u64[0] >> 62) {
    unsigned __int8 v32 = v31;
  }
  char v42 = v32;
  sub_10007FE24(v44);
  if (*(void *)(v2 + 88)) {
    uint64_t v33 = *(void **)(v2 + 88);
  }
  else {
    uint64_t v33 = _swiftEmptyArrayStorage;
  }
  if (*(void *)(v2 + 96)) {
    uint64_t v21 = *(void **)(v2 + 96);
  }
  uint64_t v40 = *(void *)(v2 + 40);
  uint64_t v41 = (uint64_t)v33;
  uint64_t v39 = *(void *)(v2 + 24);
  uint64_t v34 = *(void *)v2;
  uint64_t v35 = *(void *)(v2 + 8);
  int v36 = *(unsigned __int16 *)(v2 + 32) | (*(unsigned __int8 *)(v2 + 34) << 16);
  uint64_t v38 = *(void *)(v2 + 72);
  unint64_t v37 = *(void *)(v2 + 80);
  swift_bridgeObjectRetain();
  sub_10004AF94(v38, v37);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1000AF324( v40,  v39,  v34,  v35,  v42,  v41,  v36,  (uint64_t)v22,  (uint64_t)&v47,  v38,  v37,  v43,  v5,  (uint64_t)v21);
  __int128 v16 = v47;
  uint64_t v11 = v48;
  uint64_t v12 = v49;
  unint64_t v13 = v50 | ((unint64_t)v51 << 16);
  __int128 v17 = v52;
  uint64_t v15 = v54;
  __int128 v18 = v55;
  __int128 v19 = v56;
  uint64_t v14 = v53;
LABEL_22:
  *(_OWORD *)a1 = v16;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v17;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 72) = v18;
  *(_OWORD *)(a1 + 88) = v19;
  return result;
}

void *sub_1000AFEC0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000B0158(uint64_t *a1, uint64_t a2)
{
  return a2;
}

void sub_1000B0194(void *a1@<X8>)
{
  uint64_t v3 = (_BYTE *)v1[9];
  uint64_t v4 = *((unsigned __int8 *)v1 + 80);
  int v5 = *((unsigned __int8 *)v1 + 81);
  uint64_t v6 = USBDescriptor.descriptorTypeName.getter((uint64_t)v3, v4 | (v5 << 8));
  uint64_t v8 = v7;
  if (v6 == 0xD000000000000012LL && v7 == 0x80000001000D2780LL)
  {
    swift_bridgeObjectRelease(0x80000001000D2780LL);
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, 0xD000000000000012LL, 0x80000001000D2780LL, 0LL);
    swift_bridgeObjectRelease(v8);
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      uint64_t v3 = 0LL;
      unint64_t v17 = 0LL;
      __int128 v18 = 0LL;
      uint64_t v19 = 1LL;
      goto LABEL_23;
    }
  }

  sub_1000BE4D8(v3, v4 | ((_WORD)v5 << 8));
  unsigned __int8 v20 = *((_BYTE *)v1 + 16);
  sub_1000B2E70(&v30, &v31);
  sub_1000B2E70(&v31, &v32);
  uint64_t v28 = v4;
  if (v32.n128_u64[0] >> 62)
  {
    unsigned __int8 v23 = v20;
    sub_10007FD70((uint64_t)v29);
  }

  else
  {
    unsigned __int8 v23 = v32.n128_u8[0];
  }

  uint64_t v21 = v1[5];
  if (*((_BYTE *)v1 + 48)) {
    uint64_t v21 = 0LL;
  }
  uint64_t v27 = v21;
  uint64_t v26 = v1[7];
  if (v1[8]) {
    uint64_t v19 = v1[8];
  }
  else {
    uint64_t v19 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if (v1[11]) {
    __int128 v18 = (void *)v1[11];
  }
  else {
    __int128 v18 = _swiftEmptyArrayStorage;
  }
  uint64_t v13 = v1[3];
  uint64_t v10 = *v1;
  uint64_t v11 = v1[1];
  int v24 = *((unsigned __int16 *)v1 + 16);
  int v25 = *((unsigned __int8 *)v1 + 34);
  uint64_t v22 = *(void *)(v19 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v22)
  {
    swift_bridgeObjectRelease(v19);
    uint64_t v19 = 0LL;
  }

  if (!v18[2])
  {
    swift_bridgeObjectRelease(v18);
    __int128 v18 = 0LL;
  }

  uint64_t v12 = v23;
  uint64_t v14 = (v24 | (v25 << 16)) & 0xFFFFFF;
  uint64_t v15 = v27;
  unint64_t v17 = v28 | ((unint64_t)v5 << 8);
  uint64_t v16 = v26;
LABEL_23:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v12;
  a1[3] = v13;
  a1[4] = v14;
  a1[5] = v15;
  a1[6] = 0LL;
  a1[7] = v16;
  a1[8] = v19;
  a1[9] = v3;
  a1[10] = v17;
  a1[11] = v18;
}

unint64_t sub_1000B0410(uint64_t a1)
{
  unint64_t result = sub_10009210C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0434(uint64_t a1)
{
  unint64_t result = sub_10007FE64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0458(uint64_t a1)
{
  unint64_t result = sub_1000B047C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B047C()
{
  unint64_t result = qword_100116540;
  if (!qword_100116540)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InputTerminal, &type metadata for InputTerminal);
    atomic_store(result, (unint64_t *)&qword_100116540);
  }

  return result;
}

unint64_t sub_1000B04C4()
{
  unint64_t result = qword_100116548;
  if (!qword_100116548)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for InputTerminal, &type metadata for InputTerminal);
    atomic_store(result, (unint64_t *)&qword_100116548);
  }

  return result;
}

unint64_t sub_1000B0508(uint64_t a1)
{
  unint64_t result = sub_100062C78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B052C(uint64_t a1)
{
  unint64_t result = sub_1000B0550();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0550()
{
  unint64_t result = qword_100116550;
  if (!qword_100116550)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OutputTerminal,  &type metadata for OutputTerminal);
    atomic_store(result, (unint64_t *)&qword_100116550);
  }

  return result;
}

unint64_t sub_1000B0594(uint64_t a1)
{
  unint64_t result = sub_10007FDB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B05BC()
{
  unint64_t result = qword_100116558;
  if (!qword_100116558)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for OutputTerminal,  &type metadata for OutputTerminal);
    atomic_store(result, (unint64_t *)&qword_100116558);
  }

  return result;
}

unint64_t sub_1000B0600(uint64_t a1)
{
  unint64_t result = sub_10007FD28();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0624(uint64_t a1)
{
  unint64_t result = sub_1000B0648();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0648()
{
  unint64_t result = qword_100116560;
  if (!qword_100116560)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FeatureUnit, &type metadata for FeatureUnit);
    atomic_store(result, (unint64_t *)&qword_100116560);
  }

  return result;
}

unint64_t sub_1000B0690()
{
  unint64_t result = qword_100116568;
  if (!qword_100116568)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for FeatureUnit, &type metadata for FeatureUnit);
    atomic_store(result, (unint64_t *)&qword_100116568);
  }

  return result;
}

unint64_t sub_1000B06D4(uint64_t a1)
{
  unint64_t result = sub_10001A4C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B06F8(uint64_t a1)
{
  unint64_t result = sub_1000B071C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B071C()
{
  unint64_t result = qword_100116570;
  if (!qword_100116570)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MixerUnit, &type metadata for MixerUnit);
    atomic_store(result, (unint64_t *)&qword_100116570);
  }

  return result;
}

unint64_t sub_1000B0764()
{
  unint64_t result = qword_100116578;
  if (!qword_100116578)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MixerUnit, &type metadata for MixerUnit);
    atomic_store(result, (unint64_t *)&qword_100116578);
  }

  return result;
}

unint64_t sub_1000B07A8(uint64_t a1)
{
  unint64_t result = sub_10001B56C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B07CC(uint64_t a1)
{
  unint64_t result = sub_1000B07F0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B07F0()
{
  unint64_t result = qword_100116580;
  if (!qword_100116580)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SelectorUnit, &type metadata for SelectorUnit);
    atomic_store(result, (unint64_t *)&qword_100116580);
  }

  return result;
}

unint64_t sub_1000B0838()
{
  unint64_t result = qword_100116588;
  if (!qword_100116588)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SelectorUnit, &type metadata for SelectorUnit);
    atomic_store(result, (unint64_t *)&qword_100116588);
  }

  return result;
}

unint64_t sub_1000B087C(uint64_t a1)
{
  unint64_t result = sub_10004E52C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B08A0(uint64_t a1)
{
  unint64_t result = sub_1000B08C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B08C4()
{
  unint64_t result = qword_100116590;
  if (!qword_100116590)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExtensionUnit, &type metadata for ExtensionUnit);
    atomic_store(result, (unint64_t *)&qword_100116590);
  }

  return result;
}

unint64_t sub_1000B090C()
{
  unint64_t result = qword_100116598;
  if (!qword_100116598)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ExtensionUnit, &type metadata for ExtensionUnit);
    atomic_store(result, (unint64_t *)&qword_100116598);
  }

  return result;
}

unint64_t sub_1000B0950(uint64_t a1)
{
  unint64_t result = sub_10004E858();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0974(uint64_t a1)
{
  unint64_t result = sub_1000B0998();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0998()
{
  unint64_t result = qword_1001165A0;
  if (!qword_1001165A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EffectUnit, &type metadata for EffectUnit);
    atomic_store(result, (unint64_t *)&qword_1001165A0);
  }

  return result;
}

unint64_t sub_1000B09E0()
{
  unint64_t result = qword_1001165A8;
  if (!qword_1001165A8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for EffectUnit, &type metadata for EffectUnit);
    atomic_store(result, (unint64_t *)&qword_1001165A8);
  }

  return result;
}

unint64_t sub_1000B0A24(uint64_t a1)
{
  unint64_t result = sub_10004E6BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0A48(uint64_t a1)
{
  unint64_t result = sub_1000B0A6C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0A6C()
{
  unint64_t result = qword_1001165B0;
  if (!qword_1001165B0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProcessingUnit,  &type metadata for ProcessingUnit);
    atomic_store(result, (unint64_t *)&qword_1001165B0);
  }

  return result;
}

unint64_t sub_1000B0AB4()
{
  unint64_t result = qword_1001165B8;
  if (!qword_1001165B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ProcessingUnit,  &type metadata for ProcessingUnit);
    atomic_store(result, (unint64_t *)&qword_1001165B8);
  }

  return result;
}

unint64_t sub_1000B0AF8(uint64_t a1)
{
  unint64_t result = sub_10004E7A4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0B1C(uint64_t a1)
{
  unint64_t result = sub_1000B0B40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0B40()
{
  unint64_t result = qword_1001165C0;
  if (!qword_1001165C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SampleRateConverter,  &type metadata for SampleRateConverter);
    atomic_store(result, (unint64_t *)&qword_1001165C0);
  }

  return result;
}

unint64_t sub_1000B0B88()
{
  unint64_t result = qword_1001165C8;
  if (!qword_1001165C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SampleRateConverter,  &type metadata for SampleRateConverter);
    atomic_store(result, (unint64_t *)&qword_1001165C8);
  }

  return result;
}

unint64_t sub_1000B0BCC()
{
  unint64_t result = qword_1001165D0;
  if (!qword_1001165D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PowerDomain, &type metadata for PowerDomain);
    atomic_store(result, (unint64_t *)&qword_1001165D0);
  }

  return result;
}

unint64_t sub_1000B0C10(uint64_t a1)
{
  unint64_t result = sub_1000B0BCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0C38()
{
  unint64_t result = qword_1001165D8;
  if (!qword_1001165D8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PowerDomain, &type metadata for PowerDomain);
    atomic_store(result, (unint64_t *)&qword_1001165D8);
  }

  return result;
}

unint64_t sub_1000B0C7C(uint64_t a1)
{
  unint64_t result = sub_10001FB68();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0CA0(uint64_t a1)
{
  unint64_t result = sub_1000B0CC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0CC4()
{
  unint64_t result = qword_1001165E0;
  if (!qword_1001165E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSource, &type metadata for ClockSource);
    atomic_store(result, (unint64_t *)&qword_1001165E0);
  }

  return result;
}

unint64_t sub_1000B0D0C()
{
  unint64_t result = qword_1001165E8;
  if (!qword_1001165E8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSource, &type metadata for ClockSource);
    atomic_store(result, (unint64_t *)&qword_1001165E8);
  }

  return result;
}

unint64_t sub_1000B0D50(uint64_t a1)
{
  unint64_t result = sub_100028764();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0D74(uint64_t a1)
{
  unint64_t result = sub_1000B0D98();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0D98()
{
  unint64_t result = qword_1001165F0;
  if (!qword_1001165F0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSelector, &type metadata for ClockSelector);
    atomic_store(result, (unint64_t *)&qword_1001165F0);
  }

  return result;
}

unint64_t sub_1000B0DE0()
{
  unint64_t result = qword_1001165F8;
  if (!qword_1001165F8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ClockSelector, &type metadata for ClockSelector);
    atomic_store(result, (unint64_t *)&qword_1001165F8);
  }

  return result;
}

unint64_t sub_1000B0E24(uint64_t a1)
{
  unint64_t result = sub_10007FF60();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0E48(uint64_t a1)
{
  unint64_t result = sub_1000B0E6C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B0E6C()
{
  unint64_t result = qword_100116600;
  if (!qword_100116600)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClockMultiplier,  &type metadata for ClockMultiplier);
    atomic_store(result, (unint64_t *)&qword_100116600);
  }

  return result;
}

unint64_t sub_1000B0EB4()
{
  unint64_t result = qword_100116608;
  if (!qword_100116608)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClockMultiplier,  &type metadata for ClockMultiplier);
    atomic_store(result, (unint64_t *)&qword_100116608);
  }

  return result;
}

uint64_t destroy for InputTerminal(void *a1)
{
  unint64_t v2 = a1[10];
  if (v2 >> 60 != 15) {
    sub_100032E74(a1[9], v2);
  }
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  int v5 = (_OWORD *)(a2 + 72);
  unint64_t v6 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_10004AFA8(v7, v6);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v6;
  }

  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_WORD *)(a1 + 32) = v4;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = (uint64_t *)(a2 + 72);
  unint64_t v8 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 != 15LL)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v10 = *v7;
      sub_10004AFA8(*v7, *(void *)(a2 + 80));
      uint64_t v11 = *(void *)(a1 + 72);
      unint64_t v12 = *(void *)(a1 + 80);
      *(void *)(a1 + 72) = v10;
      *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v8;
      sub_100032E74(v11, v12);
      goto LABEL_8;
    }

    sub_100062364(a1 + 72);
    goto LABEL_6;
  }

  if (v8 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v7;
    goto LABEL_8;
  }

  uint64_t v9 = *v7;
  sub_10004AFA8(*v7, *(void *)(a2 + 80));
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v8;
LABEL_8:
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease(v14);
  return a1;
}

__n128 initializeWithTake for InputTerminal(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for InputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v5);
  __int128 v6 = (void *)(a2 + 72);
  unint64_t v7 = *(void *)(a1 + 80);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 80);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = *v6;
      *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v8;
      sub_100032E74(v9, v7);
      goto LABEL_6;
    }

    sub_100062364(a1 + 72);
  }

  *(_OWORD *)(a1 + 72) = *(_OWORD *)v6;
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputTerminal(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputTerminal(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for InputTerminal()
{
  return &type metadata for InputTerminal;
}

uint64_t destroy for OutputTerminal(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 88));
}

uint64_t initializeWithCopy for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_WORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for OutputTerminal(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for OutputTerminal(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease(v4);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutputTerminal(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for OutputTerminal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OutputTerminal()
{
  return &type metadata for OutputTerminal;
}

__n128 initializeWithTake for SelectorUnit(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for FeatureUnit()
{
  return &type metadata for FeatureUnit;
}

uint64_t destroy for MixerUnit(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for MixerUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  uint64_t v3 = *(void *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v5;
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for MixerUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(uint64_t *)((char *)a2 + 44);
  *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
  *(void *)(a1 + 44) = v6;
  uint64_t v7 = a2[7];
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[8];
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = a2[9];
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v11);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v14 = a2[10];
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for MixerUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(void *)(a1 + 44) = *(void *)(a2 + 44);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MixerUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MixerUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MixerUnit()
{
  return &type metadata for MixerUnit;
}

uint64_t _s9AUASDCore12SelectorUnitVwxx_0(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t _s9AUASDCore12SelectorUnitVwcp_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwca_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = a2[6];
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = a2[7];
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = a2[8];
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t _s9AUASDCore12SelectorUnitVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000B1B40(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SelectorUnit()
{
  return &type metadata for SelectorUnit;
}

uint64_t destroy for ExtensionUnit(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ExtensionUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v6;
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for ExtensionUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = a2[6];
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 56) = a2[7];
  uint64_t v8 = a2[8];
  uint64_t v9 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = a2[10];
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = a2[11];
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t assignWithTake for ExtensionUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v7 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExtensionUnit()
{
  return &type metadata for ExtensionUnit;
}

uint64_t destroy for EffectUnit(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 56));
}

uint64_t initializeWithCopy for EffectUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for EffectUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = a2[6];
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = a2[7];
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for EffectUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EffectUnit(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectUnit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EffectUnit()
{
  return &type metadata for EffectUnit;
}

uint64_t destroy for ProcessingUnit(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for ProcessingUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ProcessingUnit(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = a2[6];
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = a2[7];
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = a2[8];
  *(void *)(a1 + 64) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = a2[9];
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for ProcessingUnit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(void *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ProcessingUnit()
{
  return &type metadata for ProcessingUnit;
}

uint64_t destroy for SampleRateConverter(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 48));
}

uint64_t initializeWithCopy for SampleRateConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SampleRateConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[2];
  LOWORD(sub_100091E10(attribute, controlSelector, v3, v4) = *((_WORD *)a2 + 12);
  *(_BYTE *)(a1 + 26) = *((_BYTE *)a2 + 26);
  *(_WORD *)(a1 + 24) = v4;
  uint64_t v5 = a2[4];
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = a2[6];
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  return a1;
}

uint64_t assignWithTake for SampleRateConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_WORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleRateConverter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SampleRateConverter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 72) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SampleRateConverter()
{
  return &type metadata for SampleRateConverter;
}

uint64_t initializeWithCopy for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_BYTE *)(a2 + 10);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int16 v4 = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for PowerDomain(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PowerDomain(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_BYTE *)(a2 + 10);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v4 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PowerDomain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PowerDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for PowerDomain()
{
  return &type metadata for PowerDomain;
}

uint64_t _s9AUASDCore11ClockSourceVwxx_0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

uint64_t initializeWithCopy for ClockSource(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ClockSource(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *((void *)a2 + 5);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  return a1;
}

uint64_t assignWithTake for ClockSource(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClockSource()
{
  return &type metadata for ClockSource;
}

uint64_t destroy for ClockSelector(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ClockSelector(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ClockSelector(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = *((void *)a2 + 5);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *((void *)a2 + 6);
  *(void *)(a1 + 48) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for ClockSelector(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClockSelector(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockSelector(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockSelector(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClockSelector()
{
  return &type metadata for ClockSelector;
}

uint64_t destroy for ClockMultiplier(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ClockMultiplier(uint64_t a1, __int16 *a2)
{
  __int16 v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  *(_WORD *)(a1 + 24) = a2[12];
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((void *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 5Hasher._combine(_:)(v0 & 1) = *((_BYTE *)a2 + 51);
  return a1;
}

__n128 initializeWithTake for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClockMultiplier(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(void *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 5_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 5Hasher._combine(_:)(v0 & 1) = *(_BYTE *)(a2 + 51);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClockMultiplier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 52)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClockMultiplier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 52) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 52) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClockMultiplier()
{
  return &type metadata for ClockMultiplier;
}

__n128 *sub_1000B2E70(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_1000B2EAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease(*(void *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t static DriverVariant.loadDriverVariant()()
{
  int v0 = sub_1000B2F58();
  if ((v0 & 0x100) != 0) {
    int v1 = 2;
  }
  else {
    int v1 = 1;
  }
  return (v0 << 31 >> 31) & v1;
}

uint64_t sub_1000B2F58()
{
  uint64_t v17 = 0LL;
  NSString v0 = String._bridgeToObjectiveC()();
  unsigned int v1 = AUAGetBootArg(v0, (uint64_t)&v17);

  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v15 = 0xD00000000000001DLL;
  uint64_t v16 = 0x80000001000D27E0LL;
  if (v1) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  if (v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x203A65756C617620LL;
  v5._object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = v17;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  sub_100029834( v15,  v16,  0xD000000000000014LL,  (void *)0x80000001000D2800LL,  0xD00000000000001DLL,  0x80000001000D2820LL,  134LL);
  swift_bridgeObjectRelease(v16);
  if (v6 == 1) {
    unsigned int v9 = v1;
  }
  else {
    unsigned int v9 = 0;
  }
  if ((v9 & 1) != 0)
  {
    uint64_t v15 = 0LL;
    NSString v10 = String._bridgeToObjectiveC()();
    char v11 = AUAGetBootArg(v10, (uint64_t)&v15);

    if (v15 == 1) {
      char v12 = v11;
    }
    else {
      char v12 = 0;
    }
    if ((v12 & 1) != 0) {
      int v13 = 256;
    }
    else {
      int v13 = 0;
    }
  }

  else
  {
    int v13 = 0;
  }

  return v13 | v9;
}

unint64_t sub_1000B3164()
{
  unint64_t result = qword_100116610;
  if (!qword_100116610)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DriverVariant.Configuration,  &type metadata for DriverVariant.Configuration);
    atomic_store(result, (unint64_t *)&qword_100116610);
  }

  return result;
}

ValueMetadata *type metadata accessor for DriverVariant()
{
  return &type metadata for DriverVariant;
}

uint64_t storeEnumTagSinglePayload for DriverVariant.Configuration( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000B3204 + 4 * byte_1000DB641[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B3238 + 4 * asc_1000DB63C[v4]))();
}

uint64_t sub_1000B3238(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000B3240(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B3248LL);
  }
  return result;
}

uint64_t sub_1000B3254(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B325CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000B3260(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000B3268(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DriverVariant.Configuration()
{
  return &type metadata for DriverVariant.Configuration;
}

Class sub_1000B3284(uint64_t a1)
{
  __int16 v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10000AF08(0LL, &qword_1001166B8, &OBJC_CLASS___NSObject_ptr);
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  return v5.super.isa;
}

uint64_t sub_1000B3308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v5 = sub_100016B90(a2), (v6 & 1) != 0)) {
    sub_100017294(*(void *)(a1 + 56) + 32 * v5, (uint64_t)v13);
  }
  else {
    memset(v13, 0, sizeof(v13));
  }
  sub_10003359C((uint64_t)v13, (uint64_t)&v11);
  if (v12)
  {
    sub_10000AE58(&v11, a3);
  }

  else
  {
    sub_10003355C((uint64_t)&v11);
    unint64_t v7 = sub_10000AE14();
    uint64_t v8 = swift_allocError(&type metadata for AUAError, v7, 0LL, 0LL);
    *(_BYTE *)uint64_t v9 = 4;
    *(void *)(v9 + 8) = 0LL;
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v9 + 24), "tryUnwrap(_:)");
    *(_WORD *)(v9 + 38) = -4864;
    *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001DLL;
    *(void *)(v9 + 48) = 0x80000001000D2F50LL;
    *(void *)(v9 + 56) = 23LL;
    swift_willThrow(v8);
  }

  return sub_10003355C((uint64_t)v13);
}

uint64_t sub_1000B3424(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) && (uint64_t v2 = a1, v4 = sub_100016B90(a2), (v5 & 1) != 0)) {
    sub_100017294(*(void *)(v2 + 56) + 32 * v4, (uint64_t)v11);
  }
  else {
    memset(v11, 0, sizeof(v11));
  }
  sub_10003359C((uint64_t)v11, (uint64_t)&v8);
  if (!v9)
  {
    sub_10003355C((uint64_t)&v8);
    uint64_t v2 = 0LL;
LABEL_10:
    sub_10003355C((uint64_t)v11);
    return v2;
  }

  sub_10000AE58(&v8, v10);
  uint64_t v6 = sub_1000B3504((uint64_t)v10);
  if (!v3)
  {
    uint64_t v2 = v6;
    sub_100017A40(v10);
    goto LABEL_10;
  }

  sub_100017A40(v10);
  sub_10003355C((uint64_t)v11);
  return v2;
}

uint64_t sub_1000B3504(uint64_t a1)
{
  unint64_t v2 = sub_10000AE14();
  uint64_t v3 = swift_allocError(&type metadata for AUAError, v2, 0LL, 0LL);
  *(_BYTE *)uint64_t v4 = 4;
  *(void *)(v4 + 8) = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  strcpy((char *)(v4 + 24), "coerce(_:to:)");
  *(_WORD *)(v4 + 38) = -4864;
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
  *(void *)(v4 + 48) = 0x80000001000D2FB0LL;
  *(void *)(v4 + 56) = 34LL;
  return swift_willThrow(v3);
}

uint64_t sub_1000B35E4(uint64_t a1)
{
  uint64_t v1 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  unint64_t v3 = sub_10000AE14();
  uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
  *(_BYTE *)uint64_t v5 = 4;
  *(void *)(v5 + 8) = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  strcpy((char *)(v5 + 24), "coerce(_:to:)");
  *(_WORD *)(v5 + 38) = -4864;
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
  *(void *)(v5 + 48) = 0x80000001000D2FB0LL;
  *(void *)(v5 + 56) = 34LL;
  return swift_willThrow(v4);
}

uint64_t static USBDevice.create(hostObject:requireHostInterfaces:analyticsOnly:deviceService:plugin:)( void *a1, char a2, char a3, void *a4, void *a5)
{
  return sub_1000B912C(a1, a2, a3, a4, a5);
}

unint64_t sub_1000B36EC(int a1)
{
  if ((a1 & 0x10000) != 0)
  {
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt16,  &protocol witness table for UInt16);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    return 0xD000000000000010LL;
  }

  else
  {
    id v13 = 0LL;
    id v2 = [v1 stringWithIndex:a1 languageID:1033 error:&v13];
    id v3 = v13;
    if (v2)
    {
      uint64_t v4 = v2;
      id v5 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v6 = v3;
    }

    else
    {
      id v9 = v13;
      uint64_t v10 = _convertNSErrorToError(_:)(v3);

      swift_willThrow();
      __int128 v11 = (void *)_convertErrorToNSError(_:)(v10);
      id v5 = [v11 code];

      if (v5 == (id)-536870206LL || v5 == (id)-536850432LL)
      {
        swift_errorRelease(v10);
        return 0LL;
      }

      else
      {
        swift_willThrow();
      }
    }
  }

  return (unint64_t)v5;
}

uint64_t USBDevice.speed.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_speed);
}

uint64_t USBDevice.deviceDescriptor.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
}

uint64_t USBDevice.bosDescriptor.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor);
}

uint64_t USBDevice.configList.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_configList);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_configList, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t USBDevice.configList.setter(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_configList);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*USBDevice.configList.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t USBDevice.activeConfig.getter()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t USBDevice.activeConfig.setter(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
  return swift_release(v4);
}

uint64_t (*USBDevice.activeConfig.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t USBDevice.deviceAddress.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceAddress);
}

uint64_t USBDevice.curConfigNum.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum);
}

uint64_t USBDevice.vendorID.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 8LL);
}

uint64_t USBDevice.productID.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 10LL);
}

uint64_t USBDevice.bcdDevice.getter()
{
  return *(unsigned __int16 *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor) + 12LL);
}

id USBDevice.locationID.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 propertyForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v10, v3);
    swift_unknownObjectRelease(v3, v4);
  }

  else
  {
    memset(v10, 0, sizeof(v10));
  }

  sub_10004AFEC((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_100115170);
  if (!v12)
  {
    sub_10003355C((uint64_t)v11);
    return 0LL;
  }

  uint64_t v5 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  id v6 = v9;
  id v7 = [v9 unsignedIntegerValue];

  return v7;
}

uint64_t USBDevice.highestExceptionLevel.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig;
  swift_beginAccess(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig, v16, 0LL, 0LL);
  if (!*(void *)v1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0LL;
  }
  swift_bridgeObjectRetain();
  LOBYTE(sub_100091E10(attribute, controlSelector, v3, v4) = 0;
  uint64_t v5 = 32LL;
  do
  {
    __int128 v6 = *(_OWORD *)(v2 + v5);
    __int128 v7 = *(_OWORD *)(v2 + v5 + 32);
    v17[1] = *(_OWORD *)(v2 + v5 + 16);
    void v17[2] = v7;
    v17[0] = v6;
    __int128 v8 = *(_OWORD *)(v2 + v5 + 48);
    __int128 v9 = *(_OWORD *)(v2 + v5 + 64);
    __int128 v10 = *(_OWORD *)(v2 + v5 + 96);
    v17[5] = *(_OWORD *)(v2 + v5 + 80);
    v17[6] = v10;
    _OWORD v17[3] = v8;
    _OWORD v17[4] = v9;
    __int128 v11 = *(_OWORD *)(v2 + v5 + 112);
    __int128 v12 = *(_OWORD *)(v2 + v5 + 128);
    __int128 v13 = *(_OWORD *)(v2 + v5 + 144);
    uint64_t v18 = *(void *)(v2 + v5 + 160);
    v17[8] = v12;
    v17[9] = v13;
    v17[7] = v11;
    sub_100062610(v17);
    unsigned int v14 = Function.highestExceptionLevel.getter();
    sub_100019D7C(v17);
    else {
      uint64_t v4 = v4;
    }
    v5 += 168LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease(v2);
  return v4;
}

void *USBDevice.usbHostObject.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  id v2 = v1;
  return v1;
}

id USBDevice.deviceService.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
}

id USBDevice.timeCorrelater.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater);
}

char *sub_1000B3D58(unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  __int128 v9 = *(void **)(v4 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);
  aBlock = 0LL;
  id v10 = [v9 childIteratorInServicePlaneWithError:&aBlock];
  __int128 v11 = aBlock;
  if (!v10)
  {
    uint64_t v17 = aBlock;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v54);
    return v17;
  }

  __int128 v12 = v10;
  char v61 = a2;
  aBlock = 0LL;
  uint64_t v66 = 0xE000000000000000LL;
  __int128 v13 = v11;
  _StringGuts.grow(_:)(31LL);
  swift_bridgeObjectRelease(v66);
  aBlock = (void **)0xD00000000000001DLL;
  uint64_t v66 = 0x80000001000D2CE0LL;
  LOBYTE(v71[0]) = a1;
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  uint64_t v16 = v66;
  uint64_t v17 = "looking for interface number ";
  sub_100029834( (uint64_t)aBlock,  v66,  0xD000000000000038LL,  (void *)0x80000001000D2D00LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  146LL);
  swift_bridgeObjectRelease(v16);
  id v18 = [v12 nextObject];
  if (!v18)
  {
LABEL_29:
    unint64_t v51 = sub_10000AE14();
    uint64_t v52 = swift_allocError(&type metadata for AUAError, v51, 0LL, 0LL);
    *(_BYTE *)uint64_t v53 = 70;
    *(void *)(v53 + 8) = 0LL;
    *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v53 + 24) = 0xD000000000000038LL;
    *(void *)(v53 + 32) = 0x80000001000D2D00LL;
    *(void *)(v53 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v53 + 48) = 0x80000001000D29B0LL;
    *(void *)(v53 + 56) = 167LL;
    swift_willThrow(v52);

    return v17;
  }

  unsigned __int8 v19 = a1;
  id v20 = v18;
  unsigned __int8 v59 = v19;
  uint64_t v60 = a4;
  uint64_t v21 = 0LL;
  unint64_t v63 = v19;
  while (2)
  {
    char v62 = v21;
    while (1)
    {
      NSString v22 = String._bridgeToObjectiveC()();
      unsigned int v23 = [v20 conformsToIOClassName:v22];

      if (!v23) {
        goto LABEL_7;
      }
      if (qword_1001128F0 != -1) {
        swift_once(&qword_1001128F0, sub_10002984C);
      }
      uint64_t v24 = type metadata accessor for Logger(0LL);
      uint64_t v25 = sub_100008EC4(v24, (uint64_t)qword_1001171F8);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(12LL, -1LL);
        unint64_t v29 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v29;
        *(_DWORD *)uint64_t v28 = 136446210;
        uint64_t v30 = sub_1000298B4( 0xD00000000000001BLL,  0x80000001000D2D40LL,  0xD000000000000038LL,  (void *)0x80000001000D2D00LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  151LL);
        unint64_t v32 = v31;
        *(void *)(v28 + 4) = sub_1000164BC(v30, v31, (uint64_t *)&aBlock);
        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1LL, -1LL);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      uint64_t v33 = objc_opt_self(&OBJC_CLASS___IOKRegistryEntry);
      uint64_t v34 = swift_dynamicCastObjCClass(v20, v33);
      if (!v34) {
        goto LABEL_7;
      }
      uint64_t v35 = (void *)v34;
      static String._unconditionallyBridgeFromObjectiveC(_:)(IOUSBHostMatchingPropertyKeyInterfaceNumber);
      uint64_t v37 = v36;
      id v20 = v20;
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
      id v39 = [v35 propertyForKey:v38];

      if (v39)
      {
        _bridgeAnyObjectToAny(_:)(v71, v39);
        swift_unknownObjectRelease(v39, v40);
      }

      else
      {
        memset(v71, 0, sizeof(v71));
      }

      sub_10004AFEC((uint64_t)v71, (uint64_t)&aBlock, (uint64_t *)&unk_100115170);
      if (!v68)
      {

        sub_10003355C((uint64_t)&aBlock);
        goto LABEL_8;
      }

      uint64_t v41 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
LABEL_6:

LABEL_7:
LABEL_8:
      id v20 = [v12 nextObject];
      if (!v20)
      {
        uint64_t v17 = v62;
        goto LABEL_27;
      }
    }

    id v42 = v64;
    if ([v64 integerValue] != (id)v63)
    {

      goto LABEL_6;
    }

    aBlock = 0LL;
    uint64_t v66 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease(v66);
    aBlock = (void **)0xD00000000000002ALL;
    uint64_t v66 = 0x80000001000D2D60LL;
    LOBYTE(v71[0]) = v59;
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
    uint64_t v44 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v44);
    uint64_t v45 = v66;
    sub_100029834( (uint64_t)aBlock,  v66,  0xD000000000000038LL,  (void *)0x80000001000D2D00LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  158LL);
    swift_bridgeObjectRelease(v45);
    unsigned int v58 = [v20 object];
    id v46 = objc_allocWithZone(&OBJC_CLASS___IOUSBHostInterface);
    uint64_t v69 = a3;
    uint64_t v70 = v60;
    aBlock = _NSConcreteStackBlock;
    uint64_t v66 = 1107296256LL;
    unint64_t v67 = sub_1000B7EA8;
    uint64_t v68 = &unk_1001084E8;
    __int128 v47 = _Block_copy(&aBlock);
    uint64_t v48 = v70;
    swift_retain(v60);
    uint64_t v49 = v61;
    swift_release(v48);
    aBlock = 0LL;
    uint64_t v17 = (char *)[v46 initWithIOService:v58 options:0 queue:v49 error:&aBlock interestHandler:v47];
    _Block_release(v47);
    unsigned __int16 v50 = aBlock;
    if (!v17)
    {
      __int128 v56 = v50;
      uint64_t v17 = v49;
      _convertNSErrorToError(_:)(v50);

      swift_willThrow(v57);
      return v17;
    }

    id v20 = [v12 nextObject];
    uint64_t v21 = v17;
    if (v20) {
      continue;
    }
    break;
  }

void sub_1000B44AC(void *a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v194 = OBJC_IVAR____TtC9AUASDCore9USBDevice_configList;
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_configList] = _swiftEmptyArrayStorage;
  uint64_t v197 = OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig;
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig] = 0LL;
  uint64_t v192 = &v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig];
  *(_OWORD *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig] = xmmword_1000DB6E0;
  uint64_t v215 = (char *)OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData;
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData] = _swiftEmptyArrayStorage;
  uint64_t v15 = v7;
  sub_1000B8FF8(a2, &v203);
  if (v8)
  {
    swift_bridgeObjectRelease(a6);

LABEL_3:
    uint64_t v16 = type metadata accessor for USBDevice();
    swift_bridgeObjectRelease(*(void *)(v191 + v194));
    swift_release(*(void *)(v191 + v197));
    sub_10004B030(*(void *)v192, *((void *)v192 + 1));
    swift_bridgeObjectRelease(*(void *)&v215[v191]);
    swift_deallocPartialClassInstance(v15, v16, 136LL, 7LL);
    return;
  }

  v184 = a2;
  uint64_t v186 = a6;
  uint64_t v188 = v15;
  char v181 = a3;
  char v182 = a4;
  uint64_t v17 = (unsigned __int16 *)[a1 deviceDescriptor];
  if (!v17)
  {
    swift_bridgeObjectRelease(a6);

    sub_1000B9944(&v203);
    unint64_t v29 = sub_10000AE14();
    uint64_t v30 = swift_allocError(&type metadata for AUAError, v29, 0LL, 0LL);
    *(_BYTE *)uint64_t v31 = 65;
    *(void *)(v31 + 8) = 0LL;
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v31 + 24) = 0xD000000000000051LL;
    *(void *)(v31 + 32) = 0x80000001000D2E70LL;
    *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v31 + 48) = 0x80000001000D29B0LL;
    *(void *)(v31 + 56) = 264LL;
    swift_willThrow(v30);

    goto LABEL_3;
  }

  id v18 = v17;
  v183 = a7;
  unsigned int v19 = v17[1];
  unsigned __int16 v179 = v17[4];
  unsigned __int16 v20 = v17[5];
  unsigned int v21 = v17[6];
  uint64_t v177 = *((unsigned __int8 *)v17 + 15);
  int v22 = *((unsigned __int8 *)v17 + 17);
  uint64_t v23 = objc_opt_self(&OBJC_CLASS___IOUSBHostInterface);
  uint64_t v24 = (void *)swift_dynamicCastObjCClass(a1, v23);
  if (v24)
  {
    id v25 = a1;
    uint64_t v26 = (unsigned __int8 *)[v24 configurationDescriptor];
    if (v26)
    {
      os_log_type_t v27 = v26;
      __int16 v174 = *((unsigned __int8 *)[v24 interfaceDescriptor] + 2);

      if (v22) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }

    swift_bridgeObjectRelease(v186);
    uint64_t v15 = v188;

    sub_1000B9944(&v203);
    unint64_t v40 = sub_10000AE14();
    uint64_t v41 = swift_allocError(&type metadata for AUAError, v40, 0LL, 0LL);
    *(_BYTE *)uint64_t v42 = 71;
    *(void *)(v42 + 8) = 0LL;
    *(void *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v42 + 24) = 0xD000000000000051LL;
    *(void *)(v42 + 32) = 0x80000001000D2E70LL;
    *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v42 + 48) = 0x80000001000D29B0LL;
    uint64_t v43 = 273LL;
LABEL_40:
    *(void *)(v42 + 56) = v43;
    swift_willThrow(v41);

    goto LABEL_41;
  }

  uint64_t v32 = objc_opt_self(&OBJC_CLASS___IOUSBHostDevice);
  uint64_t v33 = swift_dynamicCastObjCClass(a1, v32);
  if (!v33)
  {
    swift_bridgeObjectRelease(v186);
    uint64_t v15 = v188;

    sub_1000B9944(&v203);
    unint64_t v68 = sub_10000AE14();
    uint64_t v37 = swift_allocError(&type metadata for AUAError, v68, 0LL, 0LL);
    *(_BYTE *)uint64_t v38 = 5;
    *(void *)(v38 + 8) = 0LL;
    *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v38 + 24) = 0xD000000000000051LL;
    *(void *)(v38 + 32) = 0x80000001000D2E70LL;
    *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v38 + 48) = 0x80000001000D29B0LL;
    uint64_t v39 = 289LL;
    goto LABEL_38;
  }

  uint64_t v34 = (void *)v33;
  id v25 = a1;
  uint64_t v35 = (unsigned __int8 *)[v34 configurationDescriptor];
  if (!v35)
  {
    swift_bridgeObjectRelease(v186);
    uint64_t v15 = v188;

    sub_1000B9944(&v203);
    unint64_t v69 = sub_10000AE14();
    uint64_t v41 = swift_allocError(&type metadata for AUAError, v69, 0LL, 0LL);
    *(_BYTE *)uint64_t v42 = 71;
    *(void *)(v42 + 8) = 0LL;
    *(void *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v42 + 24) = 0xD000000000000051LL;
    *(void *)(v42 + 32) = 0x80000001000D2E70LL;
    *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v42 + 48) = 0x80000001000D29B0LL;
    uint64_t v43 = 282LL;
    goto LABEL_40;
  }

  os_log_type_t v27 = v35;
  __int16 v174 = 0;

  if (!v22)
  {
LABEL_14:
    swift_bridgeObjectRelease(v186);
    uint64_t v15 = v188;

    sub_1000B9944(&v203);
    unint64_t v36 = sub_10000AE14();
    uint64_t v37 = swift_allocError(&type metadata for AUAError, v36, 0LL, 0LL);
    *(_BYTE *)uint64_t v38 = 66;
    *(void *)(v38 + 8) = 0LL;
    *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v38 + 24) = 0xD000000000000051LL;
    *(void *)(v38 + 32) = 0x80000001000D2E70LL;
    *(void *)(v38 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v38 + 48) = 0x80000001000D29B0LL;
    uint64_t v39 = 293LL;
LABEL_38:
    *(void *)(v38 + 56) = v39;
    swift_willThrow(v37);

LABEL_41:
    goto LABEL_3;
  }

LABEL_109:
  __break(1u);
}

              _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
            }

            __break(1u);
            JUMPOUT(0x1000C4450LL);
          }

          goto LABEL_31;
        }
      }

      else
      {
        if (v65 == v68) {
          goto LABEL_31;
        }
        uint64_t v66 = 0;
      }

      v67 += 3;
      char v53 = __OFADD__(v68++, 1LL);
    }

    while (!v53);
    __break(1u);
LABEL_94:
    char v91 = v54;
    swift_unknownObjectRelease(v50, v55);

    if (v91) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease(v112);
  return _swiftEmptyArrayStorage;
}

id sub_1000B5928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  id result = [v4 audioDevices];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = sub_10000AF08(0LL, &qword_100114590, &OBJC_CLASS___ASDAudioDevice_ptr);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    swift_unknownObjectRetain(a1);
    uint64_t v11 = (uint64_t)sub_1000B862C(v10, a1, a2);
    swift_bridgeObjectRelease(v10);
    id result = (id)swift_unknownObjectRelease(a1, v12);
    if (v3) {
      return (id)a1;
    }
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = v11 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v11);
      a1 = _CocoaArrayWrapper.endIndex.getter(v16);
      id result = (id)swift_bridgeObjectRelease(v11);
      if (a1 != 1)
      {
LABEL_5:
        if (a1)
        {
          swift_bridgeObjectRelease(v11);
          unint64_t v13 = sub_10000AE14();
          uint64_t v14 = swift_allocError(&type metadata for AUAError, v13, 0LL, 0LL);
          *(_BYTE *)uint64_t v15 = 1;
          *(void *)(v15 + 8) = 0LL;
          *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          *(void *)(v15 + 24) = 0xD00000000000001BLL;
          *(void *)(v15 + 32) = 0x80000001000D2CC0LL;
          *(void *)(v15 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
          *(void *)(v15 + 48) = 0x80000001000D29B0LL;
          *(void *)(v15 + 56) = 409LL;
          swift_willThrow(v14);
          return (id)a1;
        }

Swift::Void __swiftcall USBDevice.cleanup()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig);
  swift_beginAccess(v0 + OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig, v4, 1LL, 0LL);
  uint64_t v2 = *v1;
  if (*v1)
  {
    swift_retain(*v1);
    sub_100019F74();
    swift_release(v2);
    uint64_t v3 = *v1;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  void *v1 = 0LL;
  swift_release(v3);
}

void sub_1000B5BAC()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = v1;
    id v4 = [objc_allocWithZone(NSMutableData) initWithLength:64];
    uint64_t v56 = 0LL;
    aBlock = 0LL;
    unsigned int v5 = [v3 sendDeviceRequest:0x40000003000680 data:v4 bytesTransferred:&v56 completionTimeout:&aBlock error:5.0];
    __int128 v6 = aBlock;
    if (v5)
    {
      if (v56 < 4)
      {
        id v28 = aBlock;

LABEL_14:
        id v3 = v4;
LABEL_16:

        return;
      }

      if (!v4)
      {
        unint64_t v29 = aBlock;
        goto LABEL_16;
      }

      id v7 = v4;
      uint64_t v8 = v6;
      id v4 = v7;
      uint64_t v9 = [v4 bytes];
      id v10 = [v4 length];
      if (v9) {
        uint64_t v11 = (uint64_t)v10 + (void)v9;
      }
      else {
        uint64_t v11 = 0LL;
      }
      uint64_t v12 = sub_10006C838(1LL, v9, v11);
      if (*(void *)(v12 + 16))
      {
        uint64_t v15 = v13;
        uint64_t v16 = v14;
        int v17 = *(unsigned __int8 *)(v12 + 32);
        swift_bridgeObjectRelease(v12);
        uint64_t v18 = sub_10006C838(1LL, v15, v16);
        if (*(void *)(v18 + 16))
        {
          unsigned int v21 = v19;
          uint64_t v22 = v20;
          int v23 = *(unsigned __int8 *)(v18 + 32);
          swift_bridgeObjectRelease(v18);
          if (v23 == 3)
          {
            uint64_t v24 = sub_10006A4E8((uint64_t)(int)(v17 - 2 + (((v17 - 2) & 0x8000u) >> 15)) >> 1, v21, v22);
            uint64_t v34 = v24;
            uint64_t v35 = *(void *)(v24 + 16);
            if (v35 && (v35 != 1 || *(_WORD *)(v24 + 32) != 1033))
            {
              aBlock = 0LL;
              uint64_t v51 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(71LL);
              v36._countAndFlagsBits = 0x206120646E756F46LL;
              v36._object = (void *)0xEF20656369766564LL;
              String.append(_:)(v36);
              id v37 = [v2 boxName];
              if (v37)
              {
                uint64_t v38 = v37;
                uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
                uint64_t v41 = v40;
              }

              else
              {
                uint64_t v41 = (void *)0xEE00656369766564LL;
                uint64_t v39 = 0x206E776F6E6B6E55LL;
              }

              v42._countAndFlagsBits = v39;
              v42._object = v41;
              String.append(_:)(v42);
              swift_bridgeObjectRelease(v41);
              v43._countAndFlagsBits = 0xD000000000000036LL;
              v43._object = (void *)0x80000001000D2C50LL;
              String.append(_:)(v43);
              uint64_t v44 = v51;
              sub_100029840( (uint64_t)aBlock,  v51,  0xD000000000000010LL,  (void *)0x80000001000D2C30LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  486LL);
              swift_bridgeObjectRelease(v44);
              NSString v45 = String._bridgeToObjectiveC()();
              uint64_t v46 = swift_allocObject(&unk_1001084A8, 32LL, 7LL);
              *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
              *(void *)(v46 + 24) = v34;
              int v54 = sub_1000B993C;
              uint64_t v55 = v46;
              aBlock = _NSConcreteStackBlock;
              uint64_t v51 = 1107296256LL;
              uint64_t v52 = sub_1000B3284;
              char v53 = &unk_1001084C0;
              __int128 v47 = _Block_copy(&aBlock);
              uint64_t v48 = v55;
              id v49 = v2;
              swift_release(v48);
              AnalyticsSendEventLazy(v45, v47);

              _Block_release(v47);
              id v3 = v45;
              goto LABEL_16;
            }

            swift_bridgeObjectRelease(v24);

            goto LABEL_14;
          }

          unint64_t v30 = sub_10000AE14();
          uint64_t v26 = swift_allocError(&type metadata for AUAError, v30, 0LL, 0LL);
          *(_BYTE *)uint64_t v31 = 1;
          *(void *)(v31 + 8) = 0LL;
          *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
          *(void *)(v31 + 24) = 0xD000000000000010LL;
          *(void *)(v31 + 32) = 0x80000001000D2C30LL;
          *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
          *(void *)(v31 + 48) = 0x80000001000D29B0LL;
          *(void *)(v31 + 56) = 480LL;
          swift_willThrow(v26);

          goto LABEL_18;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
    }

    id v25 = aBlock;
    uint64_t v26 = _convertNSErrorToError(_:)(v6);

    swift_willThrow(v27);
LABEL_18:

    uint64_t v32 = sub_100008E00(&qword_100113410);
    uint64_t v33 = swift_allocObject(v32, 64LL, 7LL);
    *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 32) = 0xD000000000000026LL;
    *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0x80000001000D2C00LL;
    print(_:separator:terminator:)(v33, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v33);

    swift_errorRelease(v26);
  }

unint64_t sub_1000B60C0(char *a1, uint64_t a2)
{
  id v4 = [a1 boxName];
  if (!v4)
  {
    sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    id v4 = (id)NSString.init(stringLiteral:)("Unknown", 7LL, 2LL);
  }

  uint64_t v5 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v5, v13);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6F10;
  *(void *)(inited + 32) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xE300000000000000LL;
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v7 + 8)];
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  *(void *)(inited + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v7 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v4;
  strcpy((char *)(inited + 104), "languageCount");
  *(_WORD *)(inited + 118) = -4864;
  uint64_t v8 = *(void *)(a2 + 16);
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  id v10 = v4;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11,  2,  0,  0xE000000000000000,  "AUASDCore/Entity.swift",  22,  2,  333, 0) = [v9 initWithInteger:v8];
  *(void *)(inited + 128) = 0x65676175676E616CLL;
  *(void *)(inited + 136) = 0xE900000000000073LL;
  *(NSArray *)(inited + 144) = Array._bridgeToObjectiveC()();
  unint64_t v11 = sub_100006E90(inited);

  return v11;
}

void sub_1000B6284( unsigned __int8 a1, char a2, char a3, __int16 a4, unint64_t a5, unint64_t a6, unsigned __int8 a7, void *a8, uint64_t a9)
{
  if (a5 >= 0x10000) {
    goto LABEL_11;
  }
  __int16 v10 = a6;
  if (a6 >= 0x10000) {
    goto LABEL_11;
  }
  __int16 v13 = a5;
  char v14 = a3;
  if (!a8)
  {
    unint64_t v24 = 0LL;
    goto LABEL_13;
  }

  char v59 = a2;
  __int16 v60 = a4;
  id v16 = a8;
  uint64_t v17 = NSData.startIndex.getter(v16);
  uint64_t v18 = NSData.endIndex.getter();
  uint64_t v19 = NSData.startIndex.getter(v18);
  uint64_t v20 = NSData.endIndex.getter();
  if (v17 < v19 || v20 < v17)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  unsigned __int8 v57 = a1;
  unsigned __int8 v21 = a7;
  uint64_t v22 = NSData.startIndex.getter(v20);
  uint64_t v23 = NSData.endIndex.getter();

  if (v18 < v22 || v23 < v18) {
    goto LABEL_23;
  }
  unint64_t v24 = v18 - v17;
  if (__OFSUB__(v18, v17))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((v24 & 0x8000000000000000LL) != 0)
  {
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    goto LABEL_26;
  }

  a7 = v21;
  a1 = v57;
  a2 = v59;
  a4 = v60;
  char v14 = a3;
  if (v24 >= 0x10000)
  {
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_26:
    __break(1u);
    return;
  }

void sub_1000B6820( unsigned __int8 a1, char a2, char a3, unsigned __int16 a4, unint64_t a5, unsigned __int8 a6, void *a7, uint64_t a8)
{
  if (a5 >= 0x10000) {
    goto LABEL_10;
  }
  __int16 v11 = a5;
  unsigned __int8 v14 = a1;
  if (!a7)
  {
    unint64_t v24 = 0LL;
    goto LABEL_12;
  }

  char v56 = a3;
  uint64_t v57 = a8;
  id v15 = a7;
  uint64_t v16 = NSData.startIndex.getter(v15);
  uint64_t v17 = NSData.endIndex.getter();
  uint64_t v18 = NSData.startIndex.getter(v17);
  uint64_t v19 = NSData.endIndex.getter();
  if (v16 < v18 || v19 < v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  char v55 = a2;
  unsigned __int16 v20 = a4;
  unsigned __int8 v21 = a6;
  uint64_t v22 = NSData.startIndex.getter(v19);
  uint64_t v23 = NSData.endIndex.getter();

  if (v17 < v22 || v23 < v17) {
    goto LABEL_22;
  }
  unint64_t v24 = v17 - v16;
  if (__OFSUB__(v17, v16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if ((v24 & 0x8000000000000000LL) != 0)
  {
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    goto LABEL_25;
  }

  a6 = v21;
  a4 = v20;
  unsigned __int8 v14 = a1;
  a8 = v57;
  a2 = v55;
  a3 = v56;
  if (v24 >= 0x10000)
  {
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
LABEL_25:
    __break(1u);
    return;
  }

void sub_1000B6DB0(uint64_t a1)
{
  uint64_t v24 = 0LL;
  id v3 = [objc_allocWithZone(NSMutableData) initWithLength:1];
  if (!v3)
  {
    unint64_t v5 = sub_10000AE14();
    uint64_t v6 = swift_allocError(&type metadata for AUAError, v5, 0LL, 0LL);
    *(_BYTE *)uint64_t v7 = 29;
    *(void *)(v7 + 8) = 0LL;
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v7 + 24) = 0xD000000000000012LL;
    *(void *)(v7 + 32) = 0x80000001000D0470LL;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000D03F0LL;
    *(void *)(v7 + 56) = 245LL;
    swift_willThrow(v6);
    return;
  }

  id v4 = v3;
  sub_1000B6284(0xFFu, 1, 1, 0, 0LL, 0LL, *(_BYTE *)(*(void *)a1 + 2LL), v3, (uint64_t)&v24);
  if (v1)
  {

    return;
  }

  uint64_t v8 = v24;
  id v9 = v4;
  uint64_t v10 = NSData.startIndex.getter(v9);
  uint64_t v11 = NSData.endIndex.getter();
  uint64_t v12 = NSData.startIndex.getter(v11);
  uint64_t v13 = NSData.endIndex.getter();
  if (v10 < v12 || v13 < v10)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
  }

  uint64_t v15 = NSData.startIndex.getter(v13);
  uint64_t v16 = NSData.endIndex.getter();

  if (v11 < v15 || v16 < v11) {
    goto LABEL_19;
  }
  if (__OFSUB__(v11, v10)) {
    goto LABEL_20;
  }
  if (v8 == v11 - v10)
  {
    id v9 = v9;
    uint64_t v17 = [v9 bytes];
    unsigned __int16 v26 = &type metadata for UInt8;
    unint64_t v27 = sub_1000698C8();
    LOBYTE(v25) = *v17;
    sub_10000AF84(&v25, (uint64_t)v28);
    uint64_t v18 = sub_100008E00(&qword_100113EB8);
    if ((swift_dynamicCast(&v25, v28, v18, &type metadata for UInt8, 6LL) & 1) != 0)
    {

      return;
    }

    unint64_t v23 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v23, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 1;
    *(void *)(v21 + 8) = 0LL;
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD000000000000033LL;
    *(void *)(v21 + 32) = 0x80000001000D2A30LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v21 + 48) = 0x80000001000D29B0LL;
    uint64_t v22 = 592LL;
  }

  else
  {
    unint64_t v19 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 28;
    *(void *)(v21 + 8) = 0LL;
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0xD000000000000033LL;
    *(void *)(v21 + 32) = 0x80000001000D2A30LL;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v21 + 48) = 0x80000001000D29B0LL;
    uint64_t v22 = 591LL;
  }

  *(void *)(v21 + 56) = v22;
  swift_willThrow(v20);
}

void sub_1000B70D8(uint64_t a1, char a2)
{
  uint64_t v12 = 0LL;
  id v4 = [objc_allocWithZone(NSMutableData) initWithLength:1];
  if (v4)
  {
    unint64_t v5 = v4;
    id v6 = v4;
    *(_BYTE *)[v6 bytes] = a2;
    unsigned __int8 v7 = *(_BYTE *)(*(void *)a1 + 2LL);
    id v8 = v6;
    sub_1000B6284(0xFFu, 0, 1, 0, 0LL, 0LL, v7, v5, (uint64_t)&v12);
  }

  else
  {
    unint64_t v9 = sub_10000AE14();
    uint64_t v10 = swift_allocError(&type metadata for AUAError, v9, 0LL, 0LL);
    *(_BYTE *)uint64_t v11 = 29;
    *(void *)(v11 + 8) = 0LL;
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v11 + 24) = 0xD000000000000012LL;
    *(void *)(v11 + 32) = 0x80000001000D0470LL;
    *(void *)(v11 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001ELL;
    *(void *)(v11 + 48) = 0x80000001000D03F0LL;
    *(void *)(v11 + 56) = 245LL;
    swift_willThrow(v10);
  }

unint64_t USBDevice.string(forIndex:)(int a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject)) {
    return sub_1000B36EC(a1 & 0x1FFFF);
  }
  else {
    return 0LL;
  }
}

void sub_1000B7288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(v3 + OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject);
  if (!v4)
  {
    unint64_t v20 = sub_10000AE14();
    uint64_t v21 = swift_allocError(&type metadata for AUAError, v20, 0LL, 0LL);
    *(_BYTE *)uint64_t v22 = 51;
    *(void *)(v22 + 8) = 0LL;
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v22 + 24) = 0xD00000000000002DLL;
    *(void *)(v22 + 32) = 0x80000001000D2980LL;
    *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v22 + 48) = 0x80000001000D29B0LL;
    *(void *)(v22 + 56) = 624LL;
    swift_willThrow(v21);
    return;
  }

  uint64_t v44 = OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList;
  id v8 = v4;
  uint64_t v9 = mach_absolute_time();
  aBlock = 0LL;
  unsigned __int8 v10 = [v8 sendDeviceRequest:a1 data:a2 bytesTransferred:a3 completionTimeout:&aBlock error:5.0];
  uint64_t v11 = aBlock;
  if ((v10 & 1) != 0)
  {
LABEL_3:
    uint64_t v12 = v11;
    uint64_t v13 = mach_absolute_time();
    unint64_t p_name = v13 - v9;
    if (v13 >= v9)
    {
      if (qword_100112948 == -1) {
        goto LABEL_5;
      }
      goto LABEL_36;
    }

unint64_t sub_1000B77EC(char *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 boxName];
  if (!v6)
  {
    sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    id v6 = (id)NSString.init(stringLiteral:)("Unknown", 7LL, 2LL);
  }

  uint64_t v7 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v7, v14);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D6F30;
  *(void *)(inited + 32) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xE300000000000000LL;
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v9 + 8)];
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  *(void *)(inited + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v9 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v6;
  *(void *)(inited + 104) = 0x4D64657370616C65LL;
  *(void *)(inited + 112) = 0xE900000000000053LL;
  id v10 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  id v11 = v6;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11,  2,  0,  0xE000000000000000,  "AUASDCore/Entity.swift",  22,  2,  333, 0) = [v10 initWithUnsignedLongLong:a2];
  strcpy((char *)(inited + 128), "bmRequestType");
  *(_WORD *)(inited + 142) = -4864;
  *(void *)(inited + 144) = [objc_allocWithZone(NSNumber) initWithUnsignedChar:a3];
  *(void *)(inited + 152) = 0x7473657571655262LL;
  *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xE800000000000000LL;
  *(void *)(inited + 168) = [objc_allocWithZone(NSNumber) initWithUnsignedChar:BYTE1(a3)];
  *(void *)(inited + 176) = 0x65756C615677LL;
  *(void *)(inited + 184) = 0xE600000000000000LL;
  *(void *)(inited + 192) = [objc_allocWithZone(NSNumber) initWithUnsignedShort:WORD1(a3)];
  *(void *)(inited + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0x7865646E4977LL;
  *(void *)(inited + 208) = 0xE600000000000000LL;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = [objc_allocWithZone(NSNumber) initWithUnsignedShort:WORD2(a3)];
  unint64_t v12 = sub_100006E90(inited);

  return v12;
}

unint64_t sub_1000B7A54(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = [a1 boxName];
  if (!v7)
  {
    sub_10000AF08(0LL, (unint64_t *)&unk_100115180, &OBJC_CLASS___NSString_ptr);
    id v7 = (id)NSString.init(stringLiteral:)("Unknown", 7LL, 2LL);
  }

  uint64_t v8 = sub_100008E00((uint64_t *)&unk_100115190);
  uint64_t inited = swift_initStackObject(v8, v16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000DB6F0;
  *(void *)(inited + 32) = 4475222LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xE300000000000000LL;
  uint64_t v10 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor];
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v10 + 8)];
  *(void *)(inited + 56) = 4475216LL;
  *(void *)(inited + 64) = 0xE300000000000000LL;
  *(void *)(inited + 72) = [objc_allocWithZone(NSNumber) initWithInteger:*(unsigned __int16 *)(v10 + 10)];
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = 0x74706D65747461LL;
  *(void *)(inited + 112) = 0xE700000000000000LL;
  id v11 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  id v12 = v7;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11,  2,  0,  0xE000000000000000,  "AUASDCore/Entity.swift",  22,  2,  333, 0) = [v11 initWithInteger:a2];
  *(void *)(inited + 128) = 0x726F727265LL;
  *(void *)(inited + 136) = 0xE500000000000000LL;
  *(void *)(inited + 144) = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(a3, "code"));
  strcpy((char *)(inited + 152), "bmRequestType");
  *(_WORD *)(inited + 166) = -4864;
  *(void *)(inited + 168) = [objc_allocWithZone(NSNumber) initWithUnsignedChar:a4];
  *(void *)(inited + 176) = 0x7473657571655262LL;
  *(void *)(inited + 184) = 0xE800000000000000LL;
  *(void *)(inited + 192) = [objc_allocWithZone(NSNumber) initWithUnsignedChar:BYTE1(a4)];
  *(void *)(inited + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0x65756C615677LL;
  *(void *)(inited + 208) = 0xE600000000000000LL;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = [objc_allocWithZone(NSNumber) initWithUnsignedShort:WORD1(a4)];
  *(void *)(inited + 224) = 0x7865646E4977LL;
  *(void *)(inited + 232) = 0xE600000000000000LL;
  *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11,  2,  0,  0xE000000000000000,  "AUASDCore/Entity.swift",  22,  2,  333, 0) = [objc_allocWithZone(NSNumber) initWithUnsignedShort:WORD2(a4)];
  unint64_t v13 = sub_100006E90(inited);

  return v13;
}

id USBDevice.__allocating_init(boxUID:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v7 = 0LL;
  }

  id v8 = [objc_allocWithZone(v4) initWithBoxUID:v7 withPlugin:a3];

  return v8;
}

void USBDevice.init(boxUID:with:)()
{
}

id USBDevice.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for USBDevice();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000B7EA8(uint64_t a1, void *a2)
{
  id v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void *sub_1000B7F14(__int16 a1, void *a2)
{
  unsigned int v24 = a1;
  unsigned int v26 = HIBYTE(a1);
  uint64_t v2 = HIBYTE(a1) - a1;
  else {
    uint64_t v3 = HIBYTE(a1) - a1;
  }
  id v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    LOBYTE(v5) = a1;
    uint64_t v31 = _swiftEmptyArrayStorage;
    sub_100070A28(0, v3 & ~(v3 >> 63), 0);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      id v4 = v31;
      uint64_t v5 = v5;
      else {
        uint64_t v6 = v26;
      }
      uint64_t v23 = v6;
      while (v3)
      {
        id v30 = 0LL;
        id v7 = [a2 configurationDescriptorWithIndex:v5 error:&v30];
        id v8 = v30;
        if (!v7)
        {
          id v13 = v30;
          uint64_t v14 = _convertNSErrorToError(_:)(v8);

          swift_willThrow(v15);
          uint64_t v16 = sub_100008E00(&qword_100113410);
          uint64_t v17 = swift_allocObject(v16, 64LL, 7LL);
          *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
          swift_getErrorValue(v14, v29, &v27);
          uint64_t v18 = v27;
          uint64_t v19 = v28;
          *(void *)(v17 + 56) = v28;
          unint64_t v20 = sub_100028B40((void *)(v17 + 32));
          (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v20, v18, v19);
          print(_:separator:terminator:)(v17, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
          uint64_t v21 = swift_bridgeObjectRelease(v17);
          swift_willThrow(v21);
          swift_release(v4);
          return v4;
        }

        id v9 = v7;
        uint64_t v31 = v4;
        unint64_t v10 = v4[2];
        unint64_t v11 = v4[3];
        id v12 = v30;
        if (v10 >= v11 >> 1)
        {
          sub_100070A28(v11 > 1, v10 + 1, 1);
          id v4 = v31;
        }

        v4[2] = v10 + 1;
        v4[v10 + 4] = v9;
        if (v26 < v24) {
          goto LABEL_21;
        }
        if (v23 == v5) {
          goto LABEL_22;
        }
        ++v5;
        --v3;
        if (!--v2) {
          return v4;
        }
      }

      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
    }

    __break(1u);
  }

  return v4;
}

void *sub_1000B815C(void *a1)
{
  id v32 = 0LL;
  id v1 = [a1 parentEntryInServicePlaneWithError:&v32];
  id v2 = v32;
  if (!v1)
  {
    id v22 = v32;
    uint64_t v23 = _convertNSErrorToError(_:)(v2);

    swift_willThrow();
LABEL_21:
    uint64_t v25 = 0x6E776F6E6B6E55LL;
    sub_100029840( 0xD000000000000024LL,  0x80000001000D2D90LL,  0xD000000000000013LL,  (void *)0x80000001000D2DC0LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  712LL);
    swift_errorRelease(v23);
    return (void *)v25;
  }

  uint64_t v3 = v1;
  id v4 = v32;
  while (1)
  {
    id v5 = [v3 name];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v9 = v8;

      if (v7 == 1953460050 && v9 == 0xE400000000000000LL)
      {
        uint64_t v25 = 0x6E776F6E6B6E55LL;

        swift_bridgeObjectRelease(0xE400000000000000LL);
        return (void *)v25;
      }

      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, 1953460050LL, 0xE400000000000000LL, 0LL);
      swift_bridgeObjectRelease(v9);
      if ((v11 & 1) != 0)
      {
        uint64_t v25 = 0x6E776F6E6B6E55LL;

        return (void *)v25;
      }
    }

    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = [v3 propertyForKey:v12];

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)(v31, v13);
      swift_unknownObjectRelease(v13, v14);
    }

    else
    {
      memset(v31, 0, sizeof(v31));
    }

    sub_10004AFEC((uint64_t)v31, (uint64_t)&v32, (uint64_t *)&unk_100115170);
    if (v34) {
      break;
    }
    sub_10003355C((uint64_t)&v32);
LABEL_17:
    id v32 = 0LL;
    id v18 = [v3 parentEntryInServicePlaneWithError:&v32];
    id v19 = v32;
    if (!v18)
    {
      id v24 = v32;
      uint64_t v23 = _convertNSErrorToError(_:)(v19);

      swift_willThrow();
      goto LABEL_21;
    }

    id v20 = v18;
    id v21 = v32;

    uint64_t v3 = v20;
  }

  uint64_t v16 = v29;
  uint64_t v15 = v30;
  id v32 = v29;
  uint64_t v33 = v30;
  *(void *)&v31[0] = 4801352LL;
  *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE300000000000000LL;
  unint64_t v17 = sub_100029C3C();
  if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) == 0)
  {
    swift_bridgeObjectRelease(v15);
    goto LABEL_17;
  }

  uint64_t v25 = 1229146181LL;
  id v32 = v16;
  uint64_t v33 = v15;
  uint64_t v27 = 1229146200LL;
  *(void *)&v31[0] = 1229146200LL;
  *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE400000000000000LL;
  if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) != 0) {
    goto LABEL_26;
  }
  id v32 = v16;
  uint64_t v33 = v15;
  *(void *)&v31[0] = 1229146181LL;
  *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE400000000000000LL;
  if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) != 0)
  {
LABEL_28:

    swift_bridgeObjectRelease(v15);
  }

  else
  {
    id v32 = v16;
    uint64_t v33 = v15;
    uint64_t v27 = 1229146191LL;
    *(void *)&v31[0] = 1229146191LL;
    *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE400000000000000LL;
    if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) != 0 {
      || (id v32 = v16,
    }
          uint64_t v33 = v15,
          uint64_t v27 = 1229146197LL,
          *(void *)&v31[0] = 1229146197LL,
          *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE400000000000000LL,
          (StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) != 0))
    {
LABEL_26:

      swift_bridgeObjectRelease(v15);
      return (void *)v27;
    }

    else
    {
      id v32 = v16;
      uint64_t v33 = v15;
      uint64_t v25 = 1229146198LL;
      *(void *)&v31[0] = 1229146198LL;
      *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE400000000000000LL;
      if ((StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17) & 1) != 0) {
        goto LABEL_28;
      }
      uint64_t v25 = 0x49434872657355LL;
      id v32 = v16;
      uint64_t v33 = v15;
      *(void *)&v31[0] = 0x49434872657355LL;
      *((void *)&v31[0] + Hasher._combine(_:)(v0 & 1) = 0xE700000000000000LL;
      char v28 = StringProtocol.contains<A>(_:)(v31, &type metadata for String, &type metadata for String, v17, v17);

      if ((v28 & 1) != 0) {
        swift_bridgeObjectRelease(v15);
      }
      else {
        return v16;
      }
    }
  }

  return (void *)v25;
}

void *sub_1000B862C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    uint64_t v38 = a2;
    uint64_t v7 = 0LL;
    unint64_t v44 = v5 & 0xC000000000000001LL;
    uint64_t v41 = v6;
    uint64_t v42 = v5 + 32;
    uint64_t v39 = a3;
    uint64_t v40 = v5;
    while (1)
    {
      if (v44) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      }
      else {
        id v9 = *(id *)(v42 + 8 * v7);
      }
      unint64_t v10 = v9;
      if (__OFADD__(v7++, 1LL))
      {
        __break(1u);
        goto LABEL_34;
      }

      uint64_t v12 = type metadata accessor for AUAAudioDevice(0LL);
      uint64_t v13 = swift_dynamicCastClass(v10, v12);
      if (!v13)
      {
        unint64_t v33 = sub_10000AE14();
        uint64_t v34 = swift_allocError(&type metadata for AUAError, v33, 0LL, 0LL);
        *(_BYTE *)uint64_t v35 = 1;
        *(void *)(v35 + 8) = 0LL;
        *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        *(void *)(v35 + 24) = 0xD00000000000001BLL;
        *(void *)(v35 + 32) = 0x80000001000D2CC0LL;
        *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
        *(void *)(v35 + 48) = 0x80000001000D29B0LL;
        *(void *)(v35 + 56) = 402LL;
        swift_willThrow(v34);
        swift_bridgeObjectRelease(v5);

        return (void *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      }

      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(v13 + OBJC_IVAR___AUAAudioDevice_clock);
      uint64_t active = type metadata accessor for ActiveClockSource(0LL);
      uint64_t v17 = swift_dynamicCastClass(v15, active);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 40);
        uint64_t ObjectType = swift_getObjectType(a2);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 48LL))(ObjectType);
        if (v18 == v20) {
          goto LABEL_21;
        }
        goto LABEL_5;
      }

      uint64_t v21 = type metadata accessor for ActiveClockSelector();
      uint64_t v22 = swift_dynamicCastClass(v15, v21);
      if (!v22)
      {

        uint64_t v6 = v41;
        goto LABEL_6;
      }

      uint64_t v23 = v22;
      a2 = swift_getObjectType(a2);
      uint64_t v5 = *(void *)(a3 + 8);
      a3 = *(void *)(v5 + 48);
      id v43 = v10;
      swift_unknownObjectRetain(v15);
      uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t))a3)(a2, v5);
      uint64_t v25 = *(void **)(v23 + 56);
      uint64_t v26 = v25[2];
      if (v26)
      {
        if (v25[4] == v24) {
          goto LABEL_20;
        }
        if (v26 != 1)
        {
          if (v25[5] == v24)
          {
LABEL_20:

            uint64_t v20 = swift_unknownObjectRelease(v15, v27);
            a3 = v39;
            uint64_t v5 = v40;
            a2 = v38;
            uint64_t v6 = v41;
LABEL_21:
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
            unint64_t v29 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v28 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v29 >= v28 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1LL);
            }
            uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v14);
            specialized Array._endMutation()(v30);
            goto LABEL_6;
          }

          if (v26 != 2) {
            break;
          }
        }
      }

void *sub_1000B898C(uint64_t a1, char *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v25 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v9 = 32LL;
  do
  {
    __int128 v11 = *(_OWORD *)(a1 + v9 + 144);
    v23[8] = *(_OWORD *)(a1 + v9 + 128);
    v23[9] = v11;
    uint64_t v24 = *(void *)(a1 + v9 + 160);
    __int128 v12 = *(_OWORD *)(a1 + v9 + 80);
    _BYTE v23[4] = *(_OWORD *)(a1 + v9 + 64);
    void v23[5] = v12;
    __int128 v13 = *(_OWORD *)(a1 + v9 + 112);
    v23[6] = *(_OWORD *)(a1 + v9 + 96);
    v23[7] = v13;
    __int128 v14 = *(_OWORD *)(a1 + v9 + 16);
    v23[0] = *(_OWORD *)(a1 + v9);
    v23[1] = v14;
    __int128 v15 = *(_OWORD *)(a1 + v9 + 48);
    v23[2] = *(_OWORD *)(a1 + v9 + 32);
    v23[3] = v15;
    sub_100062610(v23);
    uint64_t v16 = sub_10005F4BC(v25, a3 & 1);
    if (v4)
    {
      sub_100019D7C(v23);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(a1);
      return v8;
    }

    uint64_t v18 = v16;
    uint64_t v19 = v17;
    sub_100019D7C(v23);
    if (v18)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
        uint64_t v8 = sub_100050408(0LL, v8[2] + 1LL, 1, v8);
      }
      unint64_t v21 = v8[2];
      unint64_t v20 = v8[3];
      if (v21 >= v20 >> 1) {
        uint64_t v8 = sub_100050408((void *)(v20 > 1), v21 + 1, 1, v8);
      }
      v8[2] = v21 + 1;
      unint64_t v10 = &v8[2 * v21];
      v10[4] = v18;
      void v10[5] = v19;
    }

    v9 += 168LL;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease(a1);
  return v8;
}

uint64_t sub_1000B8B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v22[0] = 0x6465657053425355LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  sub_1000B3308(a1, (uint64_t)v23, v22);
  if (v2) {
    return sub_100017260((uint64_t)v23);
  }
  uint64_t v5 = (void *)sub_1000B35E4((uint64_t)v22);
  sub_100017A40(v22);
  sub_100017260((uint64_t)v23);
  unint64_t v6 = (unint64_t)[v5 integerValue];

  if ((v6 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
LABEL_11:
    __break(1u);
    return result;
  }

  if (HIDWORD(v6))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    goto LABEL_11;
  }

  *(void *)&v22[0] = 0x6369766544646362LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0xE900000000000065LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  sub_1000B3308(a1, (uint64_t)v23, v22);
  uint64_t v8 = (void *)sub_1000B35E4((uint64_t)v22);
  sub_100017A40(v22);
  sub_100017260((uint64_t)v23);
  id v24 = [v8 integerValue];

  *(void *)&v22[0] = 0xD000000000000011LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0x80000001000CFEC0LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  uint64_t v9 = sub_1000B3424(a1, (uint64_t)v23);
  unint64_t v11 = v10;
  sub_100017260((uint64_t)v23);
  if (!v11)
  {
    swift_bridgeObjectRelease(0LL);
    uint64_t v9 = 0xD000000000000018LL;
    unint64_t v11 = 0x80000001000D2E30LL;
  }

  *(void *)&v22[0] = 0x6375646F72506469LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0xE900000000000074LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  sub_1000B3308(a1, (uint64_t)v23, v22);
  __int128 v12 = (void *)sub_1000B35E4((uint64_t)v22);
  sub_100017A40(v22);
  sub_100017260((uint64_t)v23);
  id v21 = [v12 integerValue];

  *(void *)&v22[0] = 0x726F646E65566469LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  sub_1000B3308(a1, (uint64_t)v23, v22);
  __int128 v13 = (void *)sub_1000B35E4((uint64_t)v22);
  sub_100017A40(v22);
  sub_100017260((uint64_t)v23);
  id v14 = [v13 integerValue];

  *(void *)&v22[0] = 0xD000000000000010LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0x80000001000D2F70LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  uint64_t v20 = sub_1000B3424(a1, (uint64_t)v23);
  uint64_t v16 = v15;
  sub_100017260((uint64_t)v23);
  *(void *)&v22[0] = 0xD000000000000016LL;
  *((void *)&v22[0] + Hasher._combine(_:)(v0 & 1) = 0x80000001000D2F90LL;
  AnyHashable.init<A>(_:)(v22, &type metadata for String, &protocol witness table for String);
  uint64_t v17 = sub_1000B3424(a1, (uint64_t)v23);
  uint64_t v19 = v18;
  uint64_t result = sub_100017260((uint64_t)v23);
  *(_DWORD *)a2 = v6;
  *(void *)(a2 + 8) = v24;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v21;
  *(void *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v14;
  *(void *)(a2 + 48) = v20;
  *(void *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v17;
  *(void *)(a2 + 72) = v19;
  return result;
}

uint64_t sub_1000B8FF8@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4 = [a1 properties];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v4,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    sub_1000B8B18(v6, (uint64_t)v13);
    uint64_t result = swift_bridgeObjectRelease(v6);
    if (!v2)
    {
      __int128 v8 = v13[3];
      a2[2] = v13[2];
      a2[3] = v8;
      a2[4] = v13[4];
      __int128 v9 = v13[1];
      *a2 = v13[0];
      a2[1] = v9;
    }
  }

  else
  {
    unint64_t v10 = sub_10000AE14();
    uint64_t v11 = swift_allocError(&type metadata for AUAError, v10, 0LL, 0LL);
    *(_BYTE *)uint64_t v12 = 4;
    *(void *)(v12 + 8) = 0LL;
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    strcpy((char *)(v12 + 24), "tryUnwrap(_:)");
    *(_WORD *)(v12 + 38) = -4864;
    *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001DLL;
    *(void *)(v12 + 48) = 0x80000001000D2F50LL;
    *(void *)(v12 + 56) = 23LL;
    return swift_willThrow(v11);
  }

  return result;
}

uint64_t sub_1000B912C(void *a1, char a2, char a3, void *a4, void *a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [a4 propertyForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)(&v64, v11);
    swift_unknownObjectRelease(v11, v12);
  }

  else
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
  }

  unint64_t v13 = 0xD000000000000018LL;
  sub_10004AFEC((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100115170);
  if (!v68)
  {
    sub_10003355C((uint64_t)&v66);
    goto LABEL_9;
  }

  id v69 = a1;
  uint64_t v14 = sub_10000AF08(0LL, (unint64_t *)&qword_100113470, &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(v63, &v66, (char *)&type metadata for Any + 8, v14, 6LL) & 1) == 0)
  {
LABEL_9:
    unint64_t v18 = sub_10000AE14();
    uint64_t v19 = swift_allocError(&type metadata for AUAError, v18, 0LL, 0LL);
    *(_BYTE *)uint64_t v20 = 3;
    *(void *)(v20 + 8) = 0LL;
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v20 + 24) = 0xD00000000000004CLL;
    *(void *)(v20 + 32) = 0x80000001000D2DE0LL;
    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD000000000000019LL;
    *(void *)(v20 + 48) = 0x80000001000D29B0LL;
    *(void *)(v20 + 56) = 118LL;
    swift_willThrow(v19);
    return v13;
  }

  id v62 = v63[0];
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [a4 propertyForKey:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v64, v16);
    swift_unknownObjectRelease(v16, v17);
  }

  else
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
  }

  sub_10004AFEC((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100115170);
  char v59 = a2;
  char v60 = a3;
  unsigned __int16 v58 = a5;
  if (v68)
  {
    if (swift_dynamicCast(v63, &v66, (char *)&type metadata for Any + 8, &type metadata for String, 6LL))
    {
      id v21 = v63[0];
      id v22 = v63[1];
      goto LABEL_16;
    }
  }

  else
  {
    sub_10003355C((uint64_t)&v66);
  }

  id v21 = 0LL;
  id v22 = 0LL;
LABEL_16:
  uint64_t v23 = sub_100008E00(&qword_100113420);
  uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  id v25 = [v62 integerValue];
  *(void *)(v24 + 56) = &type metadata for Int;
  *(void *)(v24 + 64) = &protocol witness table for Int;
  *(void *)(v24 + 32) = v25;
  uint64_t v26 = String.init(format:_:)(2016948261LL, 0xE400000000000000LL, v24);
  unint64_t v28 = v27;
  uint64_t v66 = 0LL;
  uint64_t v67 = (void *)0xE000000000000000LL;
  if (v22) {
    unint64_t v29 = (unint64_t)v21;
  }
  else {
    unint64_t v29 = 0xD000000000000018LL;
  }
  if (!v22) {
    id v22 = (id)0x80000001000D2E30LL;
  }
  id v30 = v22;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease(v22);
  v31._countAndFlagsBits = 64LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  v32._countAndFlagsBits = v26;
  v32._object = v28;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v28);
  uint64_t v33 = v66;
  unsigned __int8 v61 = v67;
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [a4 propertyForKey:v34];

  if (v35)
  {
    _bridgeAnyObjectToAny(_:)(&v64, v35);
    swift_unknownObjectRelease(v35, v36);
  }

  else
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
  }

  sub_10004AFEC((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100115170);
  if (v68)
  {
    if ((swift_dynamicCast(v63, &v66, (char *)&type metadata for Any + 8, v14, 6LL) & 1) != 0)
    {
      id v37 = v63[0];
      id v38 = [v63[0] unsignedIntegerValue];

      char v39 = 0;
      goto LABEL_29;
    }
  }

  else
  {
    sub_10003355C((uint64_t)&v66);
  }

  id v38 = 0LL;
  char v39 = 1;
LABEL_29:
  NSString v40 = String._bridgeToObjectiveC()();
  id v41 = [a4 propertyForKey:v40];

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)(&v64, v41);
    swift_unknownObjectRelease(v41, v42);
  }

  else
  {
    __int128 v64 = 0u;
    __int128 v65 = 0u;
  }

  sub_10004AFEC((uint64_t)&v64, (uint64_t)&v66, (uint64_t *)&unk_100115170);
  if (v68)
  {
    if ((swift_dynamicCast(v63, &v66, (char *)&type metadata for Any + 8, v14, 6LL) & 1) != 0)
    {
      id v43 = v63[0];
      id v44 = [v63[0] unsignedIntegerValue];

      char v45 = 0;
      goto LABEL_37;
    }
  }

  else
  {
    sub_10003355C((uint64_t)&v66);
  }

  id v44 = 0LL;
  char v45 = 1;
LABEL_37:
  uint64_t v66 = 0LL;
  uint64_t v67 = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(51LL);
  v46._object = (void *)0x80000001000D2E50LL;
  v46._countAndFlagsBits = 0xD000000000000018LL;
  String.append(_:)(v46);
  v47._countAndFlagsBits = v33;
  v47._object = v61;
  String.append(_:)(v47);
  v48._countAndFlagsBits = 0x49726F646E657620LL;
  v48._object = (void *)0xEA00000000002044LL;
  String.append(_:)(v48);
  uint64_t result = swift_allocObject(v23, 72LL, 7LL);
  *(_OWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
  if ((v39 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    *(void *)(result + 56) = &type metadata for UInt;
    *(void *)(result + 64) = &protocol witness table for UInt;
    *(void *)(result + 32) = v38;
    v50._countAndFlagsBits = String.init(format:_:)(2016948261LL, 0xE400000000000000LL, result);
    object = v50._object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(object);
    v52._countAndFlagsBits = 0x746375646F727020LL;
    v52._object = (void *)0xEB00000000204449LL;
    String.append(_:)(v52);
    uint64_t result = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
    if ((v45 & 1) == 0)
    {
      *(void *)(result + 56) = &type metadata for UInt;
      *(void *)(result + 64) = &protocol witness table for UInt;
      *(void *)(result + 32) = v44;
      v53._countAndFlagsBits = String.init(format:_:)(2016948261LL, 0xE400000000000000LL, result);
      uint64_t v54 = v53._object;
      String.append(_:)(v53);
      swift_bridgeObjectRelease(v54);
      uint64_t v55 = (uint64_t)v67;
      sub_100029834( v66,  (uint64_t)v67,  0xD00000000000004CLL,  (void *)0x80000001000D2DE0LL,  0xD000000000000019LL,  0x80000001000D29B0LL,  128LL);
      swift_bridgeObjectRelease(v55);
      id v56 = objc_allocWithZone((Class)type metadata accessor for USBDevice());
      sub_1000B44AC(v69, a4, v59 & 1, v60 & 1, v33, (uint64_t)v61, v58);
      unint64_t v13 = v57;

      return v13;
    }
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for USBDevice()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore9USBDevice);
}

unint64_t sub_1000B9848()
{
  unint64_t result = qword_100116668;
  if (!qword_100116668)
  {
    type metadata accessor for tIOUSBHostConnectionSpeed(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000D5594, v1);
    atomic_store(result, (unint64_t *)&qword_100116668);
  }

  return result;
}

uint64_t sub_1000B9890()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_1000B98BC()
{
  return sub_1000B7A54(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000B98C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B98D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B98E0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

unint64_t sub_1000B9904()
{
  return sub_1000B77EC(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000B9910()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1000B993C()
{
  return sub_1000B60C0(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_1000B9944(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[9];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1000B998C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B99B4(uint64_t a1)
{
  return a1;
}

void sub_1000B99F4()
{
  uint64_t v0 = type metadata accessor for AUAUserDefaults();
  uint64_t v1 = swift_allocObject(v0, 24LL, 7LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  id v2 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  qword_1001172A8 = v1;
}

uint64_t sub_1000B9A84(char a1)
{
  if (*(void *)(v1 + 16)) {
    __asm { BR              X12 }
  }

  return 0LL;
}

uint64_t sub_1000B9C24()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for AUAUserDefaults()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore15AUAUserDefaults);
}

void sub_1000B9C68(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v1 + 10);
  uint64_t v5 = *(void *)(v1 + 40);
  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    sub_1000BF294(v1);
    sub_100070680(0, v6, 0);
    uint64_t v7 = (unsigned __int16 *)(v5 + 32);
    unint64_t v8 = _swiftEmptyArrayStorage[2];
    do
    {
      unsigned int v10 = *v7++;
      uint64_t v9 = v10;
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v8 >= v11 >> 1) {
        sub_100070680(v11 > 1, v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8++ + 4] = v9;
      --v6;
    }

    while (v6);
    sub_10007FEF4(v1);
    uint64_t v4 = v14;
  }

  uint64_t v12 = *(void *)(v1 + 24);
  __int16 v13 = *(_WORD *)(v1 + 32);
  *(_BYTE *)(a1 + 2) = 1;
  *(_WORD *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(_WORD *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 48) = 0LL;
}

Swift::Int ADC4ClassSpecificAudioControlInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10003F658);
}

Swift::Int sub_1000B9D8C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10003F658);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClassSpecificAudioControlInterfaceDescriptor( uint64_t a1)
{
  return sub_10003F658(a1, *v1);
}

Swift::Int sub_1000B9DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003F658);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClassSpecificAudioControlInterfaceDescriptor( unsigned int *a1, unsigned int *a2)
{
  return sub_1000369B4(*a1, *a2);
}

Swift::Int ADC4AudioControlSelfDescriptor.hashValue.getter(unint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B9E04()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(unsigned __int16 *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 10);
  Hasher.init(_seed:)(v5, 0LL);
  sub_100040F1C((uint64_t)v5, v1, v2 | (v3 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioControlSelfDescriptor(uint64_t a1)
{
  return sub_100040F1C( a1,  *(void *)v1,  *(unsigned __int16 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 10) << 16));
}

Swift::Int sub_1000B9E70(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  uint64_t v3 = *(unsigned __int16 *)(v1 + 8);
  uint64_t v4 = *(unsigned int *)(v1 + 10);
  Hasher.init(_seed:)(v6, a1);
  sub_100040F1C((uint64_t)v6, v2, v3 | (v4 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioControlSelfDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_100038A2C( *(void *)a1,  *(unsigned __int16 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 10) << 16),  *(void *)a2,  *(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 10) << 16));
}

Swift::Int ADC4InputTerminalDescriptor.hashValue.getter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1000BA284(a1, a2, a3, (void (*)(_OWORD *, uint64_t, void, void))sub_100042534);
}

Swift::Int sub_1000B9EF8(uint64_t a1, uint64_t a2)
{
  return sub_1000BA328(a1, a2, (void (*)(void *, uint64_t, void, void))sub_100042534);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4InputTerminalDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA3B0(a1, a2, a3, sub_100042534);
}

Swift::Int sub_1000B9F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA3EC(a1, a2, a3, (void (*)(void *, uint64_t, void, void))sub_100042534);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4InputTerminalDescriptor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA470(a1, a2, a3, a4, sub_10003A7F4);
}

Swift::Int ADC4InputTerminalDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10004044C);
}

Swift::Int sub_1000B9F34(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10004044C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4InputTerminalDescriptorPart2( uint64_t a1)
{
  return sub_10004044C(a1, *v1);
}

Swift::Int sub_1000B9F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10004044C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4InputTerminalDescriptorPart2( unsigned int *a1, unsigned int *a2)
{
  return sub_100037BD0(*a1, *a2);
}

Swift::Int ADC4OutputTerminalDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B9FBC()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  sub_100041730((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4OutputTerminalDescriptor(uint64_t a1)
{
  return sub_100041730(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_1000BA020(uint64_t a1)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  sub_100041730((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4OutputTerminalDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_10003952C(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int ADC4MixerUnitDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unsigned int a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BA0EC()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  unint64_t v3 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  Hasher.init(_seed:)(v5, 0LL);
  sub_1000443A0((uint64_t)v5, v3, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4MixerUnitDescriptor(uint64_t a1)
{
  return sub_1000443A0(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1000BA150(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(v1 + 16);
  unint64_t v4 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  Hasher.init(_seed:)(v6, a1);
  sub_1000443A0((uint64_t)v6, v4, v3, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4MixerUnitDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003D188( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
}

Swift::Int ADC4SelectorUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA730(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_1000431C0);
}

Swift::Int sub_1000BA1CC(uint64_t a1, uint64_t a2)
{
  return sub_1000BA79C(a1, a2, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_1000431C0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4SelectorUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA804(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void))sub_1000431C0);
}

Swift::Int sub_1000BA1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA820(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_1000431C0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4SelectorUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA884( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10003B9B4);
}

Swift::Int ADC4FeatureUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BAB68(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_1000434F4);
}

Swift::Int sub_1000BA208(uint64_t a1, uint64_t a2)
{
  return sub_1000BABCC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_1000434F4);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4FeatureUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC34(a1, a2, a3, sub_1000434F4);
}

Swift::Int sub_1000BA220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC54(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_1000434F4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4FeatureUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BACB8(a1, a2, a3, a4, sub_10003BDC0);
}

Swift::Int ADC4EffectUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BB0EC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_100044050);
}

Swift::Int sub_1000BA244(uint64_t a1, uint64_t a2)
{
  return sub_1000BB788(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_100044050);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4EffectUnitDescriptor(uint64_t a1)
{
  return sub_100044050(a1, *v1, v1[1]);
}

Swift::Int sub_1000BA258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB7F0(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_100044050);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4EffectUnitDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_10003CD20(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ProcessingUnitDescriptor.hashValue.getter( uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1000BA284(a1, a2, a3, (void (*)(_OWORD *, uint64_t, void, void))sub_100041724);
}

Swift::Int sub_1000BA284( uint64_t a1, unint64_t a2, unint64_t a3, void (*a4)(_OWORD *, uint64_t, void, void))
{
  __int16 v5 = a2;
  *(void *)&v14[0] = a2;
  *((void *)&v14[0] + Hasher._combine(_:)(v0 & 1) = a3;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  int v9 = *(_DWORD *)((char *)v14 + 6);
  unint64_t v10 = a3 >> 16;
  unint64_t v11 = HIDWORD(a3);
  Hasher.init(_seed:)(v14, 0LL);
  LOWORD(v13) = v5;
  WORD1(v13) = v7;
  WORD2(v13) = v8;
  *(_DWORD *)((char *)&v13 + 6) = v9;
  WORD5(v13) = v10;
  WORD6(v13) = v11;
  a4(v14, a1, v13, *((void *)&v13 + 1));
  return Hasher._finalize()();
}

Swift::Int sub_1000BA31C(uint64_t a1, uint64_t a2)
{
  return sub_1000BA328(a1, a2, (void (*)(void *, uint64_t, void, void))sub_100041724);
}

Swift::Int sub_1000BA328(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, void, void))
{
  uint64_t v5 = *v3;
  int v6 = *((_DWORD *)v3 + 2);
  __int16 v7 = *((_WORD *)v3 + 6);
  unsigned int v8 = *(_DWORD *)((char *)v3 + 14);
  unsigned int v9 = *(_DWORD *)((char *)v3 + 18);
  Hasher.init(_seed:)(v12, 0LL);
  LODWORD(v1Hasher._combine(_:)(v0 & 1) = v6;
  WORD2(v1Hasher._combine(_:)(v0 & 1) = v7;
  *(void *)((char *)&v11 + 6) = __PAIR64__(v9, v8);
  a3(v12, v5, v11, *((void *)&v11 + 1));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ProcessingUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA3B0(a1, a2, a3, sub_100041724);
}

uint64_t sub_1000BA3B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void))
{
  WORD2(v6) = *(_WORD *)(v4 + 12);
  *(void *)((char *)&v6 + 6) = *(void *)(v4 + 14);
  return a4(a1, *(void *)v4, v6, *((void *)&v6 + 1));
}

Swift::Int sub_1000BA3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA3EC(a1, a2, a3, (void (*)(void *, uint64_t, void, void))sub_100041724);
}

Swift::Int sub_1000BA3EC( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, void, void))
{
  uint64_t v6 = *v4;
  int v7 = *((_DWORD *)v4 + 2);
  __int16 v8 = *((_WORD *)v4 + 6);
  unsigned int v9 = *(_DWORD *)((char *)v4 + 14);
  unsigned int v10 = *(_DWORD *)((char *)v4 + 18);
  Hasher.init(_seed:)(v13, a1);
  LODWORD(v12) = v7;
  WORD2(v12) = v8;
  *(void *)((char *)&v12 + 6) = __PAIR64__(v10, v9);
  a4(v13, v6, v12, *((void *)&v12 + 1));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ProcessingUnitDescriptor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA470(a1, a2, a3, a4, sub_100039520);
}

uint64_t sub_1000BA470( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  WORD2(vswift_unknownObjectWeakDestroy(v0 + 7) = *(_WORD *)(a1 + 12);
  *(void *)((char *)&v7 + 6) = *(void *)(a1 + 14);
  __int128 v5 = v7;
  LODWORD(vswift_unknownObjectWeakDestroy(v0 + 7) = *(_DWORD *)(a2 + 8);
  WORD2(vswift_unknownObjectWeakDestroy(v0 + 7) = *(_WORD *)(a2 + 12);
  *(void *)((char *)&v7 + 6) = *(void *)(a2 + 14);
  return a5(*(void *)a1, v5, *((void *)&v5 + 1), *(void *)a2, v7, *((void *)&v7 + 1));
}

Swift::Int ADC4ExtensionUnitDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BA508()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  int v6 = *((_DWORD *)v0 + 8);
  Hasher.init(_seed:)(v3, 0LL);
  sub_100042708((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ExtensionUnitDescriptor(uint64_t a1)
{
  return sub_100042708(a1);
}

Swift::Int sub_1000BA590(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  int v7 = *((_DWORD *)v1 + 8);
  Hasher.init(_seed:)(v4, a1);
  sub_100042708((uint64_t)v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ExtensionUnitDescriptor( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  int v6 = *(_DWORD *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  int v8 = *(_DWORD *)(a2 + 32);
  return sub_10003AA80((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ADC4ClockSourceDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA8B0(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100043698);
}

Swift::Int sub_1000BA630()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned int *)(v0 + 16);
  uint64_t v4 = *(unsigned __int16 *)(v0 + 20);
  Hasher.init(_seed:)(v6, 0LL);
  sub_100043698((uint64_t)v6, v1, v2, v3 | (v4 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClockSourceDescriptor(uint64_t a1)
{
  return sub_100043698( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 20) << 32));
}

Swift::Int sub_1000BA6A0(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned int *)(v1 + 16);
  uint64_t v5 = *(unsigned __int16 *)(v1 + 20);
  Hasher.init(_seed:)(v7, a1);
  sub_100043698((uint64_t)v7, v2, v3, v4 | (v5 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClockSourceDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_10003BFEC( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 20) << 32),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 20) << 32));
}

Swift::Int ADC4ClockSelectorDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA730(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100042AA0);
}

Swift::Int sub_1000BA730( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BA790(uint64_t a1, uint64_t a2)
{
  return sub_1000BA79C(a1, a2, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100042AA0);
}

Swift::Int sub_1000BA79C(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = *((unsigned __int16 *)v3 + 8);
  Hasher.init(_seed:)(v9, 0LL);
  a3(v9, v5, v6, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClockSelectorDescriptor( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA804(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void))sub_100042AA0);
}

uint64_t sub_1000BA804( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void))
{
  return a4(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int16 *)(v4 + 16));
}

Swift::Int sub_1000BA814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA820(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_100042AA0);
}

Swift::Int sub_1000BA820( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v8 = *((unsigned __int16 *)v4 + 8);
  Hasher.init(_seed:)(v10, a1);
  a4(v10, v6, v7, v8);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClockSelectorDescriptor( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BA884( a1,  a2,  a3,  a4,  (uint64_t (*)(void, void, void, void, void, void))sub_10003AF90);
}

uint64_t sub_1000BA884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int16 *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int16 *)(a2 + 16));
}

Swift::Int ADC4SamplingRateConverterUnitDescriptor.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA8B0(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10003FAF8);
}

Swift::Int sub_1000BA8B0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BA910()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 16);
  uint64_t v4 = *(unsigned int *)(v0 + 18);
  Hasher.init(_seed:)(v6, 0LL);
  sub_10003FAF8((uint64_t)v6, v1, v2, v3 | (v4 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4SamplingRateConverterUnitDescriptor( uint64_t a1)
{
  return sub_10003FAF8( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned __int16 *)(v1 + 16) | ((unint64_t)*(unsigned int *)(v1 + 18) << 16));
}

Swift::Int sub_1000BA980(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(unsigned __int16 *)(v1 + 16);
  uint64_t v5 = *(unsigned int *)(v1 + 18);
  Hasher.init(_seed:)(v7, a1);
  sub_10003FAF8((uint64_t)v7, v2, v3, v4 | (v5 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4SamplingRateConverterUnitDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_100036FB0( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned __int16 *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 18) << 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned __int16 *)(a2 + 16) | ((unint64_t)*(unsigned int *)(a2 + 18) << 16));
}

Swift::Int ADC4PowerDomainEntityDescriptor.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BAA40()
{
  __int128 v1 = v0[1];
  __int128 v4 = *v0;
  __int128 v5 = v1;
  __int16 v6 = *((_WORD *)v0 + 16);
  Hasher.init(_seed:)(v3, 0LL);
  sub_100040C24((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4PowerDomainEntityDescriptor(uint64_t a1)
{
  return sub_100040C24(a1);
}

Swift::Int sub_1000BAAC8(uint64_t a1)
{
  __int128 v2 = v1[1];
  __int128 v5 = *v1;
  __int128 v6 = v2;
  __int16 v7 = *((_WORD *)v1 + 16);
  Hasher.init(_seed:)(v4, a1);
  sub_100040C24((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4PowerDomainEntityDescriptor( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  __int16 v6 = *(_WORD *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  __int16 v8 = *(_WORD *)(a2 + 32);
  return sub_100038650((uint64_t)v5, (uint64_t)v7) & 1;
}

Swift::Int ADC4TerminalCompanionDescriptorHeader.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BAB68(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003FCBC);
}

Swift::Int sub_1000BAB68(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BABC0(uint64_t a1, uint64_t a2)
{
  return sub_1000BABCC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003FCBC);
}

Swift::Int sub_1000BABCC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *((unsigned int *)v3 + 2);
  uint64_t v7 = *((unsigned __int16 *)v3 + 6);
  Hasher.init(_seed:)(v9, 0LL);
  a3(v9, v5, v6 | (v7 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionDescriptorHeader( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC34(a1, a2, a3, sub_10003FCBC);
}

uint64_t sub_1000BAC34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, unint64_t))
{
  return a4(a1, *(void *)v4, *(unsigned int *)(v4 + 8) | ((unint64_t)*(unsigned __int16 *)(v4 + 12) << 32));
}

Swift::Int sub_1000BAC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC54(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_10003FCBC);
}

Swift::Int sub_1000BAC54( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *((unsigned int *)v4 + 2);
  uint64_t v8 = *((unsigned __int16 *)v4 + 6);
  Hasher.init(_seed:)(v10, a1);
  a4(v10, v6, v7 | (v8 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionDescriptorHeader( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BACB8(a1, a2, a3, a4, sub_10003722C);
}

uint64_t sub_1000BACB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, unint64_t, void, unint64_t))
{
  return a5( *(void *)a1,  *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32),  *(void *)a2,  *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

Swift::Int ADC4TerminalCompanionDescriptorSegmentHeader.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10003F97C);
}

Swift::Int sub_1000BACEC(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10003F97C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionDescriptorSegmentHeader( uint64_t a1)
{
  return sub_10003F97C(a1, *v1);
}

Swift::Int sub_1000BAD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003F97C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionDescriptorSegmentHeader( unsigned int *a1, unsigned int *a2)
{
  return sub_100036DDC(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionEN50322_2Segment.hashValue.getter(uint64_t a1)
{
  return sub_10009FF24(a1, (void (*)(void *, uint64_t))sub_10003FCB0);
}

Swift::Int sub_1000BAD24(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8FC(a1, a2, (void (*)(void *, uint64_t))sub_10003FCB0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionEN50322_2Segment( uint64_t a1)
{
  return sub_10003FCB0(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000BAD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB96C(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003FCB0);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionEN50322_2Segment( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BB9C8(a1, a2, a3, a4, sub_100037220);
}

Swift::Int ADC4TerminalCompanionChannelBandwidthSegment.hashValue.getter(unint64_t a1, int a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BADA4()
{
  int v1 = *(_DWORD *)(v0 + 8);
  unint64_t v2 = *(void *)v0;
  Hasher.init(_seed:)(v4, 0LL);
  sub_10003F994((uint64_t)v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelBandwidthSegment( uint64_t a1)
{
  return sub_10003F994(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_1000BADFC(uint64_t a1)
{
  int v2 = *(_DWORD *)(v1 + 8);
  unint64_t v3 = *(void *)v1;
  Hasher.init(_seed:)(v5, a1);
  sub_10003F994((uint64_t)v5, v3, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelBandwidthSegment( uint64_t a1, uint64_t a2)
{
  return sub_100036DF4(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC4TerminalCompanionChannelMagnitudeSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10003F988);
}

Swift::Int sub_1000BAE68(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10003F988);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudeSegment( uint64_t a1)
{
  return sub_10003F988(a1, *v1);
}

Swift::Int sub_1000BAE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003F988);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudeSegment( unsigned int *a1, unsigned int *a2)
{
  return sub_100036DE8(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelMagnitudeSegmentPoint.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BAED8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *((unsigned __int16 *)v0 + 2);
  Hasher.init(_seed:)(v4, 0LL);
  sub_10003F640((uint64_t)v4, v1 | (v2 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudeSegmentPoint( uint64_t a1)
{
  return sub_10003F640(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32));
}

Swift::Int sub_1000BAF30(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int16 *)v1 + 2);
  Hasher.init(_seed:)(v5, a1);
  sub_10003F640((uint64_t)v5, v2 | (v3 << 32));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudeSegmentPoint( unsigned int *a1, unsigned int *a2)
{
  return sub_10003699C( *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32),  *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
}

Swift::Int ADC4TerminalCompanionChannelMagnitudePhaseSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10003F64C);
}

Swift::Int sub_1000BAF9C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10003F64C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegment( uint64_t a1)
{
  return sub_10003F64C(a1, *v1);
}

Swift::Int sub_1000BAFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003F64C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegment( unsigned int *a1, unsigned int *a2)
{
  return sub_1000369A8(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint.hashValue.getter(unint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BB00C()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_10003F4D0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint( uint64_t a1)
{
  return sub_10003F4D0(a1, *v1);
}

Swift::Int sub_1000BB058(uint64_t a1)
{
  unint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_10003F4D0((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint( unint64_t *a1, unint64_t *a2)
{
  return sub_1000367D8(*a1, *a2);
}

Swift::Int ADC4TerminalCompanionChannelPositionXYZSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BB0EC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003F7F8);
}

Swift::Int sub_1000BB0B0(uint64_t a1, uint64_t a2)
{
  return sub_1000BB150(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003F7F8);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelPositionXYZSegment( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB1B0(a1, a2, a3, sub_10003F7F8);
}

Swift::Int sub_1000BB0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB1C4(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_10003F7F8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelPositionXYZSegment( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BB220(a1, a2, a3, a4, sub_100036BF0);
}

Swift::Int ADC4TerminalCompanionChannelPositionRThetaPhiSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BB0EC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003F628);
}

Swift::Int sub_1000BB0EC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BB144(uint64_t a1, uint64_t a2)
{
  return sub_1000BB150(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10003F628);
}

Swift::Int sub_1000BB150(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = v3;
  uint64_t v5 = *v3;
  uint64_t v6 = v7[1];
  Hasher.init(_seed:)(v9, 0LL);
  a3(v9, v5, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4TerminalCompanionChannelPositionRThetaPhiSegment( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB1B0(a1, a2, a3, sub_10003F628);
}

uint64_t sub_1000BB1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void))
{
  return a4(a1, *v4, v4[1]);
}

Swift::Int sub_1000BB1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB1C4(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_10003F628);
}

Swift::Int sub_1000BB1C4( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v8 = v4;
  uint64_t v6 = *v4;
  uint64_t v7 = v8[1];
  Hasher.init(_seed:)(v10, a1);
  a4(v10, v6, v7);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4TerminalCompanionChannelPositionRThetaPhiSegment( void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BB220(a1, a2, a3, a4, sub_100036984);
}

uint64_t sub_1000BB220( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void))
{
  return a5(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ConnectorEntityDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BB28C()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v0[2];
  Hasher.init(_seed:)(v5, 0LL);
  sub_10004109C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ConnectorEntityDescriptor(uint64_t a1)
{
  return sub_10004109C(a1, *v1, v1[1], v1[2]);
}

Swift::Int sub_1000BB2F0(uint64_t a1)
{
  unint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v4 = v1[2];
  Hasher.init(_seed:)(v6, a1);
  sub_10004109C((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ConnectorEntityDescriptor( unint64_t *a1, unint64_t *a2)
{
  return sub_100038C28(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int ADC4ClassSpecificAudioStreamingInterfaceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_10003F634);
}

Swift::Int sub_1000BB36C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_10003F634);
}

Swift::Int sub_1000BB378(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v7, 0LL);
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClassSpecificAudioStreamingInterfaceDescriptor( uint64_t a1)
{
  return sub_10003F634(a1, *v1);
}

Swift::Int sub_1000BB3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003F634);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClassSpecificAudioStreamingInterfaceDescriptor( unsigned int *a1, unsigned int *a2)
{
  return sub_100036990(*a1, *a2);
}

Swift::Int ADC4AudioStreamingSelfDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000BB444()
{
  unsigned int v1 = *(_DWORD *)(v0 + 24);
  unint64_t v2 = *(void *)v0;
  uint64_t v5 = v0 + 8;
  unint64_t v4 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v5 + 8);
  Hasher.init(_seed:)(v7, 0LL);
  sub_100040458((uint64_t)v7, v2, v4, v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioStreamingSelfDescriptor( uint64_t a1)
{
  return sub_100040458(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

Swift::Int sub_1000BB4B4(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(v1 + 24);
  unint64_t v3 = *(void *)v1;
  uint64_t v6 = v1 + 8;
  unint64_t v5 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v6 + 8);
  Hasher.init(_seed:)(v8, a1);
  sub_100040458((uint64_t)v8, v3, v5, v4, v2);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioStreamingSelfDescriptor( uint64_t a1, uint64_t a2)
{
  return sub_100037BDC( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(_DWORD *)(a2 + 24));
}

Swift::Int ADC4AudioStreamingValidFrequencyRangeDescriptor.hashValue.getter( unint64_t a1, unint64_t a2, __int16 a3)
{
  __int16 v3 = a2;
  *(void *)unsigned int v9 = a2;
  *(_WORD *)&v9[8] = a3;
  unint64_t v5 = a2 >> 16;
  unsigned int v6 = *(_DWORD *)&v9[6];
  Hasher.init(_seed:)(v9, 0LL);
  LOWORD(v8) = v3;
  *(void *)((char *)&v8 + 2) = __PAIR64__(v6, v5);
  sub_10003F664((uint64_t)v9, a1, v8, SHIWORD(v6));
  return Hasher._finalize()();
}

Swift::Int sub_1000BB5A8()
{
  unint64_t v1 = *(void *)v0;
  __int16 v2 = *(_WORD *)(v0 + 8);
  unsigned int v3 = *(_DWORD *)(v0 + 10);
  unsigned int v4 = *(_DWORD *)(v0 + 14);
  Hasher.init(_seed:)(v7, 0LL);
  LOWORD(v6) = v2;
  *(void *)((char *)&v6 + 2) = __PAIR64__(v4, v3);
  sub_10003F664((uint64_t)v7, v1, v6, SHIWORD(v4));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4AudioStreamingValidFrequencyRangeDescriptor( uint64_t a1)
{
  *(void *)&v3[2] = *(void *)(v1 + 10);
  return sub_10003F664(a1, *(void *)v1, *(unint64_t *)v3, HIWORD(*(_DWORD *)(v1 + 14)));
}

Swift::Int sub_1000BB63C(uint64_t a1)
{
  unint64_t v2 = *(void *)v1;
  __int16 v3 = *(_WORD *)(v1 + 8);
  unsigned int v4 = *(_DWORD *)(v1 + 10);
  unsigned int v5 = *(_DWORD *)(v1 + 14);
  Hasher.init(_seed:)(v8, a1);
  LOWORD(vswift_unknownObjectWeakDestroy(v0 + 7) = v3;
  *(void *)((char *)&v7 + 2) = __PAIR64__(v5, v4);
  sub_10003F664((uint64_t)v8, v2, v7, SHIWORD(v5));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4AudioStreamingValidFrequencyRangeDescriptor( uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)a2;
  __int16 v3 = *(_WORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 10);
  unsigned int v5 = *(_DWORD *)(a2 + 14);
  *(_DWORD *)((char *)&v8 + 2) = *(_DWORD *)(a1 + 10);
  HIWORD(v8) = *(_DWORD *)(a1 + 14);
  unint64_t v6 = v8;
  LOWORD(v9) = v3;
  *(void *)((char *)&v9 + 2) = __PAIR64__(v5, v4);
  return sub_1000369C0(*(void *)a1, v6, HIWORD(*(_DWORD *)(a1 + 14)), v2, v9, SHIWORD(v5));
}

Swift::Int ADC4ClusterEndBlockSegment.hashValue.getter(uint64_t a1)
{
  return sub_1000597CC(a1, (void (*)(void *, uint64_t))sub_100043370);
}

Swift::Int sub_1000BB700(uint64_t a1, uint64_t a2)
{
  return sub_1000BB378(a1, a2, (void (*)(void *, uint64_t))sub_100043370);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterEndBlockSegment(uint64_t a1)
{
  return sub_100043370(a1, *v1);
}

Swift::Int sub_1000BB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB720(a1, a2, a3, (void (*)(void *, uint64_t))sub_100043370);
}

Swift::Int sub_1000BB720(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v8, a1);
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterEndBlockSegment( unsigned int *a1, unsigned int *a2)
{
  return sub_10003BBF4(*a1, *a2);
}

Swift::Int ADC4ClusterChannelAmbisonicSegment.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return sub_1000BB0EC(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10004014C);
}

Swift::Int sub_1000BB77C(uint64_t a1, uint64_t a2)
{
  return sub_1000BB788(a1, a2, (void (*)(void *, uint64_t, uint64_t))sub_10004014C);
}

Swift::Int sub_1000BB788(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v6, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelAmbisonicSegment( uint64_t a1)
{
  return sub_10004014C(a1, *v1, v1[1]);
}

Swift::Int sub_1000BB7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB7F0(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))sub_10004014C);
}

Swift::Int sub_1000BB7F0( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v7 = *v4;
  uint64_t v6 = v4[1];
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v7, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelAmbisonicSegment( unint64_t *a1, unint64_t *a2)
{
  return sub_1000377F4(*a1, a1[1], *a2, a2[1]);
}

Swift::Int ADC4ClusterChannelDescriptionSegment.hashValue.getter(uint64_t a1)
{
  return sub_10009FF24(a1, (void (*)(void *, uint64_t))sub_10003FCD4);
}

void sub_1000BB860(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __int16 v3 = a2;
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3);
      Swift::UInt v5 = *(void *)(a3 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        uint64_t v6 = (Swift::UInt16 *)(a3 + 32);
        do
        {
          Swift::UInt16 v7 = *v6++;
          Hasher._combine(_:)(v7);
          --v5;
        }

        while (v5);
      }
    }

    else
    {
      Hasher._combine(_:)(0LL);
    }
  }

  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
  }

Swift::Int sub_1000BB8F0(uint64_t a1, uint64_t a2)
{
  return sub_1000BB8FC(a1, a2, (void (*)(void *, uint64_t))sub_10003FCD4);
}

Swift::Int sub_1000BB8FC(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)(v8, 0LL);
  a3(v8, v5 | (v6 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC4ClusterChannelDescriptionSegment( uint64_t a1)
{
  return sub_10003FCD4(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Int sub_1000BB960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB96C(a1, a2, a3, (void (*)(void *, uint64_t))sub_10003FCD4);
}

Swift::Int sub_1000BB96C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)(v9, a1);
  a4(v9, v6 | (v7 << 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC4ClusterChannelDescriptionSegment( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BB9C8(a1, a2, a3, a4, sub_100037244);
}

uint64_t sub_1000BB9C8( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5( *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16),  *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 16));
}

uint64_t sub_1000BB9E4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116798,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBA20()
{
  return sub_10000B6D4( &qword_1001167A0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_1000BBA4C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167A8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioControlSelfDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioControlSelfDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBA88()
{
  return sub_10000B6D4( &qword_1001167B0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioControlSelfDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioControlSelfDescriptor);
}

uint64_t sub_1000BBAB4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167B8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBAF0()
{
  return sub_10000B6D4( &qword_1001167C0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4InputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4InputTerminalDescriptor);
}

uint64_t sub_1000BBB1C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167C8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4InputTerminalDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC4InputTerminalDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBB58()
{
  return sub_10000B6D4( &qword_1001167D0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4InputTerminalDescriptorPart2,  (uint64_t)&protocol conformance descriptor for ADC4InputTerminalDescriptorPart2);
}

uint64_t sub_1000BBB84(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167D8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBBC0()
{
  return sub_10000B6D4( &qword_1001167E0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4OutputTerminalDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4OutputTerminalDescriptor);
}

uint64_t sub_1000BBBEC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167E8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBC28()
{
  return sub_10000B6D4( &qword_1001167F0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4MixerUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4MixerUnitDescriptor);
}

uint64_t sub_1000BBC54(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001167F8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBC90()
{
  return sub_10000B6D4( &qword_100116800,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4SelectorUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4SelectorUnitDescriptor);
}

uint64_t sub_1000BBCBC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116808,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBCF8()
{
  return sub_10000B6D4( &qword_100116810,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4FeatureUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_1000BBD24(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116818,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4EffectUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBD60()
{
  return sub_10000B6D4( &qword_100116820,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4EffectUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4EffectUnitDescriptor);
}

uint64_t sub_1000BBD8C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116828,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBDC8()
{
  return sub_10000B6D4( &qword_100116830,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ProcessingUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_1000BBDF4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116838,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBE30()
{
  return sub_10000B6D4( &qword_100116840,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ExtensionUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ExtensionUnitDescriptor);
}

uint64_t sub_1000BBE5C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116848,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClockSourceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBE98()
{
  return sub_10000B6D4( &qword_100116850,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClockSourceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClockSourceDescriptor);
}

uint64_t sub_1000BBEC4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116858,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClockSelectorDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBF00()
{
  return sub_10000B6D4( &qword_100116860,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClockSelectorDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_1000BBF2C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116868,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4SamplingRateConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4SamplingRateConverterUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBF68()
{
  return sub_10000B6D4( &qword_100116870,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4SamplingRateConverterUnitDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4SamplingRateConverterUnitDescriptor);
}

uint64_t sub_1000BBF94(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116878,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4PowerDomainEntityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4PowerDomainEntityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BBFD0()
{
  return sub_10000B6D4( &qword_100116880,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4PowerDomainEntityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4PowerDomainEntityDescriptor);
}

uint64_t sub_1000BBFFC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116888,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionDescriptorHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC038()
{
  return sub_10000B6D4( &qword_100116890,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionDescriptorHeader,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_1000BC064(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116898,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionDescriptorSegmentHeader);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC0A0()
{
  return sub_10000B6D4( &qword_1001168A0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_1000BC0CC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168A8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionEN50322_2Segment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC108()
{
  return sub_10000B6D4( &qword_1001168B0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_1000BC134(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168B8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelBandwidthSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC170()
{
  return sub_10000B6D4( &qword_1001168C0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelBandwidthSegment);
}

uint64_t sub_1000BC19C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168C8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudeSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC1D8()
{
  return sub_10000B6D4( &qword_1001168D0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_1000BC204(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168D8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC240()
{
  return sub_10000B6D4( &qword_1001168E0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_1000BC26C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168E8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC2A8()
{
  return sub_10000B6D4( &qword_1001168F0,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_1000BC2D4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_1001168F8,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC310()
{
  return sub_10000B6D4( &qword_100116900,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint);
}

uint64_t sub_1000BC33C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116908,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelPositionXYZSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC378()
{
  return sub_10000B6D4( &qword_100116910,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_1000BC3A4(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116918,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC3E0()
{
  return sub_10000B6D4( &qword_100116920,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment,  (uint64_t)&protocol conformance descriptor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_1000BC40C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116928,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ConnectorEntityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ConnectorEntityDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC448()
{
  return sub_10000B6D4( &qword_100116930,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ConnectorEntityDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ConnectorEntityDescriptor);
}

uint64_t sub_1000BC474(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116938,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC4B0()
{
  return sub_10000B6D4( &qword_100116940,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_1000BC4DC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116948,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioStreamingSelfDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioStreamingSelfDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC518()
{
  return sub_10000B6D4( &qword_100116950,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioStreamingSelfDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioStreamingSelfDescriptor);
}

uint64_t sub_1000BC544(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116958,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioStreamingValidFrequencyRangeDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC580()
{
  return sub_10000B6D4( &qword_100116960,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor,  (uint64_t)&protocol conformance descriptor for ADC4AudioStreamingValidFrequencyRangeDescriptor);
}

uint64_t sub_1000BC5AC(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116968,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterEndBlockSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterEndBlockSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC5E8()
{
  return sub_10000B6D4( &qword_100116970,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterEndBlockSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_1000BC614(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116978,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelAmbisonicSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelAmbisonicSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC650()
{
  return sub_10000B6D4( &qword_100116980,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelAmbisonicSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_1000BC67C(uint64_t a1)
{
  uint64_t result = sub_10000B6D4( &qword_100116988,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelDescriptionSegment);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000BC6B8()
{
  return sub_10000B6D4( &qword_100116990,  (uint64_t (*)(uint64_t))type metadata accessor for ADC4ClusterChannelDescriptionSegment,  (uint64_t)&protocol conformance descriptor for ADC4ClusterChannelDescriptionSegment);
}

Swift::Int sub_1000BC6E4()
{
  unint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  sub_1000BB860((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000BC72C(uint64_t a1)
{
}

Swift::Int sub_1000BC734(uint64_t a1)
{
  unint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_1000BB860((uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

BOOL sub_1000BC778(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *a1 >> 62;
  if (!(_DWORD)v3)
  {
    if (!(v2 >> 62)) {
      return *a1 == v2;
    }
    return 0LL;
  }

  uint64_t v4 = a2[1];
  if ((_DWORD)v3 == 1)
  {
    return 0LL;
  }

  return v2 >> 62 == 2 && v2 == 0x8000000000000000LL && v4 == 0;
}

uint64_t sub_1000BC7F4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006F384(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v9 = *(void *)(result + 32);
      __int16 v10 = *(_WORD *)(result + 40);
      __int16 v11 = *(_WORD *)(result + 42);
      __int16 v12 = *(_WORD *)(result + 44);
      int v13 = *(_DWORD *)(result + 46);
      __int16 v14 = *(_WORD *)(result + 50);
      uint64_t v15 = *(unsigned __int16 *)(result + 52);
      swift_bridgeObjectRelease(result);
      uint64_t v16 = sub_10006A4E8(v15, v7, v8);
      __int16 v34 = v11;
      __int16 v35 = v12;
      __int16 v36 = v14;
      int v37 = v13;
      uint64_t result = (uint64_t)sub_10006F32C(1LL, v17, v18);
      if (*(void *)(result + 16))
      {
        id v21 = v19;
        uint64_t v22 = v20;
        __int16 v23 = *(_WORD *)(result + 32);
        uint64_t v24 = *(unsigned __int16 *)(result + 34);
        swift_bridgeObjectRelease(result);
        if (!(_DWORD)v24)
        {
          uint64_t v30 = 0x8000000000000000LL;
          uint64_t result = v24;
          goto LABEL_14;
        }

        if ((_DWORD)v24 != 1)
        {
          if ((_DWORD)v24 != 2)
          {
            swift_bridgeObjectRelease(v16);
            unint64_t v31 = sub_10000AE14();
            uint64_t v32 = swift_allocError(&type metadata for AUAError, v31, 0LL, 0LL);
            *(_BYTE *)uint64_t v33 = 36;
            *(void *)(v33 + 8) = 0LL;
            *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
            strcpy((char *)(v33 + 24), "assemble(_:)");
            *(_BYTE *)(v33 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 0;
            *(_WORD *)(v33 + 38) = -5120;
            *(void *)(v33 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001FLL;
            *(void *)(v33 + 48) = 0x80000001000CF340LL;
            *(void *)(v33 + 56) = 184LL;
            return swift_willThrow(v32);
          }

          uint64_t result = sub_10006A4E8(1LL, v21, v22);
          if (*(void *)(result + 16))
          {
            uint64_t v27 = v25;
            uint64_t v28 = v26;
            uint64_t v29 = *(unsigned __int16 *)(result + 32);
            swift_bridgeObjectRelease(result);
            uint64_t result = sub_10006A4E8(v29, v27, v28);
            uint64_t v30 = v29 | 0x4000000000000000LL;
LABEL_14:
            *(void *)a3 = v9;
            *(_WORD *)(a3 + 8) = v10;
            *(_WORD *)(a3 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v34;
            *(_WORD *)(a3 + 12) = v35;
            *(_DWORD *)(a3 + 14) = v37;
            *(_WORD *)(a3 + 18) = v36;
            *(_WORD *)(a3 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v15;
            *(void *)(a3 + 24) = v16;
            *(_WORD *)(a3 + 32) = v23;
            *(_WORD *)(a3 + 34) = v24;
            *(void *)(a3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v30;
            *(void *)(a3 + 48) = result;
            return result;
          }

          goto LABEL_19;
        }

        uint64_t result = sub_10006C838(1LL, v21, v22);
        if (*(void *)(result + 16))
        {
          uint64_t v30 = *(unsigned __int8 *)(result + 32);
          swift_bridgeObjectRelease(result);
          uint64_t result = 0LL;
          goto LABEL_14;
        }

uint64_t sub_1000BCA70@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10006F6F8(1LL, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      __int128 v22 = *(_OWORD *)(result + 32);
      int v10 = *(_DWORD *)(result + 48);
      __int16 v11 = *(_WORD *)(result + 52);
      uint64_t v12 = *(unsigned __int16 *)(result + 54);
      swift_bridgeObjectRelease(result);
      if (!(_DWORD)v12)
      {
        uint64_t v13 = 0x8000000000000000LL;
        uint64_t result = v12;
        goto LABEL_9;
      }

      if ((_DWORD)v12 == 2)
      {
        uint64_t result = sub_10006A4E8(1LL, v8, v9);
        if (*(void *)(result + 16))
        {
          uint64_t v16 = v14;
          uint64_t v17 = v15;
          uint64_t v18 = *(unsigned __int16 *)(result + 32);
          swift_bridgeObjectRelease(result);
          uint64_t result = sub_10006A4E8(v18, v16, v17);
          uint64_t v13 = v18 | 0x4000000000000000LL;
          goto LABEL_9;
        }

        goto LABEL_15;
      }

      if ((_DWORD)v12 != 1)
      {
        unint64_t v19 = sub_10000AE14();
        uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
        *(_BYTE *)uint64_t v21 = 36;
        *(void *)(v21 + 8) = 0LL;
        *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
        strcpy((char *)(v21 + 24), "assemble(_:)");
        *(_BYTE *)(v21 + 3swift_unknownObjectWeakDestroy(v0 + 7) = 0;
        *(_WORD *)(v21 + 38) = -5120;
        *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001FLL;
        *(void *)(v21 + 48) = 0x80000001000CF340LL;
        *(void *)(v21 + 56) = 268LL;
        return swift_willThrow(v20);
      }

      uint64_t result = sub_10006C838(1LL, v8, v9);
      if (*(void *)(result + 16))
      {
        uint64_t v13 = *(unsigned __int8 *)(result + 32);
        swift_bridgeObjectRelease(result);
        uint64_t result = 0LL;
LABEL_9:
        *(_OWORD *)a3 = v22;
        *(_DWORD *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
        *(_WORD *)(a3 + 2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v11;
        *(_WORD *)(a3 + 22) = v12;
        *(void *)(a3 + 24) = v13;
        *(void *)(a3 + 32) = result;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_15:
    __break(1u);
  }

  return result;
}

void sub_1000BCC40()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1000BCC80()
{
  return Hasher._finalize()();
}

void sub_1000BCD10()
{
  __asm { BR              X10 }

uint64_t sub_1000BCD44()
{
  return sub_100043370(v1, v0);
}

uint64_t sub_1000BCD68()
{
  return sub_10004014C(v2, v0, v1);
}

uint64_t sub_1000BCD90()
{
  return sub_10003FCD4(v1, v0 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1000BCDB4()
{
  return sub_10003FCC8(v2, v0, v1 & 0xFFFFFFFFFFFFLL);
}

void sub_1000BCDDC(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 16);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000BCE18()
{
  return Hasher._finalize()();
}

uint64_t sub_1000BCEA8(uint64_t a1)
{
  return sub_1000BEFCC(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_1000BCEC4(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BD158LL);
}

uint64_t sub_1000BD16C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_100070190(1LL, a1, a2);
  if (!v4)
  {
    unint64_t v14 = *(void *)(result + 16);
    if (!v14)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }

    unint64_t v3 = (unint64_t)v11;
    uint64_t v5 = v12;
    uint64_t v8 = *(void *)(result + 32);
    unsigned int v15 = *(unsigned __int16 *)(result + 40);
    unsigned int v16 = *(unsigned __int16 *)(result + 42);
    swift_bridgeObjectRelease(result);
    uint64_t v68 = (_BYTE *)v3;
    id v69 = v5;
    uint64_t v6 = sub_1000BF050((uint64_t)&v68);
    uint64_t v7 = v17;
    char v19 = v18;
    unsigned int v62 = v15;
    unsigned int v65 = v16;
    if (!v18)
    {
      uint64_t v13 = sub_100050DD8(0LL, 1LL, 1, _swiftEmptyArrayStorage);
      unint64_t v3 = v13[2];
      unint64_t v14 = v13[3];
      uint64_t v5 = (void *)(v3 + 1);
      if (v3 >= v14 >> 1) {
        goto LABEL_46;
      }
      goto LABEL_35;
    }

    for (uint64_t i = _swiftEmptyArrayStorage; ; uint64_t i = (void *)v3)
    {
      uint64_t v20 = sub_100008E00(&qword_100114E70);
      uint64_t v21 = swift_allocObject(v20, 49LL, 7LL);
      *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1000D3D30;
      *(void *)(v21 + 32) = v6;
      *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v7;
      *(_BYTE *)(v21 + 48) = v19;
      unint64_t v14 = v65;
      if (v65) {
        break;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      uint64_t v13 = sub_100050DD8((void *)(v14 > 1), (int64_t)v5, 1, v13);
LABEL_35:
      _OWORD v13[2] = v5;
      id v56 = (char *)v13 + 17 * v3;
      *((void *)v56 + 4) = v6;
      *((void *)v56 + 5) = v7;
      v56[48] = 0;
      unint64_t v3 = (unint64_t)v13;
      uint64_t v6 = sub_1000BF050((uint64_t)&v68);
      uint64_t v7 = v57;
      char v19 = v58;
    }

    uint64_t v5 = (void *)v21;
    LOWORD(v22) = 1;
    uint64_t v66 = _swiftEmptyArrayStorage;
    uint64_t v67 = a3;
    while (2)
    {
      unsigned __int16 v63 = v22;
      do
      {
        __int16 v23 = v68;
        uint64_t v7 = (uint64_t)v69;
        uint64_t v24 = sub_100070138(1LL, v68, (uint64_t)v69);
        unint64_t v14 = *((void *)v24 + 2);
        if (!v14)
        {
          __break(1u);
          goto LABEL_40;
        }

        unint64_t v3 = *((unsigned __int16 *)v24 + 17);
        swift_bridgeObjectRelease(v24);
        if ((int)v3 > 258)
        {
          if ((_DWORD)v3 == 259)
          {
            uint64_t v44 = sub_10006FA5C(1LL, v23, v7);
            unint64_t v14 = *(void *)(v44 + 16);
            if (!v14) {
              goto LABEL_44;
            }
            Swift::String v47 = v45;
            uint64_t v48 = v46;
            uint64_t v49 = *(unsigned int *)(v44 + 32);
            uint64_t v50 = *(unsigned __int16 *)(v44 + 36);
            swift_bridgeObjectRelease(v44);
            uint64_t v30 = 0LL;
            uint64_t v6 = 0LL;
            uint64_t v68 = v47;
            id v69 = (void *)v48;
            char v31 = 3;
            unint64_t v3 = v49 | (v50 << 32);
            a3 = v67;
          }

          else
          {
            if ((_DWORD)v3 != 0xFFFF)
            {
LABEL_36:
              unint64_t v59 = sub_10000AE14();
              uint64_t v60 = swift_allocError(&type metadata for AUAError, v59, 0LL, 0LL);
              *(_BYTE *)uint64_t v61 = 37;
              *(void *)(v61 + 8) = 0LL;
              *(void *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
              *(void *)(v61 + 24) = 0xD000000000000012LL;
              *(void *)(v61 + 32) = 0x80000001000D2680LL;
              *(void *)(v61 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = 0xD00000000000001FLL;
              *(void *)(v61 + 48) = 0x80000001000CF340LL;
              *(void *)(v61 + 56) = 1266LL;
              swift_willThrow(v60);
              swift_bridgeObjectRelease(v66);
              swift_bridgeObjectRelease(v5);
              return swift_bridgeObjectRelease(i);
            }

            uint64_t v32 = sub_10006FA0C(1LL, v23, v7);
            unint64_t v14 = *(void *)(v32 + 16);
            if (!v14) {
              goto LABEL_42;
            }
            __int16 v35 = v33;
            uint64_t v36 = v34;
            unint64_t v3 = *(unsigned int *)(v32 + 32);
            swift_bridgeObjectRelease(v32);
            uint64_t v30 = 0LL;
            char v31 = 0;
            uint64_t v68 = v35;
            id v69 = (void *)v36;
            uint64_t v6 = 1LL;
          }
        }

        else if ((_DWORD)v3 == 257)
        {
          uint64_t v37 = sub_10006FDC0(1LL, v23, v7);
          unint64_t v14 = *(void *)(v37 + 16);
          if (!v14) {
            goto LABEL_43;
          }
          NSString v40 = v38;
          uint64_t v41 = v39;
          unint64_t v3 = *(void *)(v37 + 32);
          uint64_t v42 = *(unsigned int *)(v37 + 40);
          uint64_t v43 = *(unsigned __int16 *)(v37 + 44);
          swift_bridgeObjectRelease(v37);
          uint64_t v6 = 0LL;
          uint64_t v68 = v40;
          id v69 = (void *)v41;
          uint64_t v30 = v42 | (v43 << 32);
          char v31 = 1;
        }

        else
        {
          if ((_DWORD)v3 != 258) {
            goto LABEL_36;
          }
          id v25 = (void *)sub_10006FAAC(1LL, v23, v7);
          unint64_t v14 = v25[2];
          if (!v14) {
            goto LABEL_41;
          }
          uint64_t v28 = v26;
          uint64_t v29 = v27;
          unint64_t v3 = v25[4];
          uint64_t v30 = v25[5];
          swift_bridgeObjectRelease(v25);
          uint64_t v6 = 0LL;
          uint64_t v68 = v28;
          id v69 = (void *)v29;
          char v31 = 2;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          uint64_t v5 = sub_100050DD8(0LL, v5[2] + 1LL, 1, v5);
        }
        unint64_t v52 = v5[2];
        unint64_t v51 = v5[3];
        if (v52 >= v51 >> 1) {
          uint64_t v5 = sub_100050DD8((void *)(v51 > 1), v52 + 1, 1, v5);
        }
        _OWORD v5[2] = v52 + 1;
        Swift::String v53 = (char *)v5 + 17 * v52;
        *((void *)v53 + 4) = v3;
        *((void *)v53 + 5) = v30;
        v53[48] = v31;
      }

      while (!(_DWORD)v6);
      swift_bridgeObjectRetain(v5);
      uint64_t v54 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0) {
        uint64_t v54 = sub_100050EEC(0LL, v66[2] + 1LL, 1, v66);
      }
      unint64_t v3 = v54[2];
      unint64_t v55 = v54[3];
      uint64_t v6 = v62;
      if (v3 >= v55 >> 1) {
        uint64_t v54 = sub_100050EEC((void *)(v55 > 1), v3 + 1, 1, v54);
      }
      v54[2] = v3 + 1;
      v54[v3 + 4] = v5;
      uint64_t result = swift_bridgeObjectRelease(v5);
      if (v65 == v63)
      {
        *(void *)a3 = v8;
        *(_WORD *)(a3 + 8) = v62;
        *(_WORD *)(a3 + 1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "AUASDCore/Entity.swift",  22LL,  2LL,  333LL, 0) = v65;
        *(void *)(a3 + swift_unknownObjectWeakDestroy(v0 + 16) = i;
        *(void *)(a3 + 24) = v54;
      }

      else
      {
        uint64_t v66 = v54;
        int v22 = v63 + 1;
        uint64_t v5 = _swiftEmptyArrayStorage;
        if ((v22 & 0x10000) == 0) {
          continue;
        }
        __break(1u);
      }

      break;
    }
  }

  return result;
}

void sub_1000BD684(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BDA3CLL);
}

void sub_1000BDA50(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BDD80LL);
}

void sub_1000BDD94(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BE1FCLL);
}

void sub_1000BE210(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BE4C4LL);
}

void sub_1000BE4D8(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BE76CLL);
}

void sub_1000BE780(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BEBECLL);
}

void sub_1000BEC00(_BYTE *a1, __int16 a2)
{
  if (v2 >> 60 != 15) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000BEFB8LL);
}

uint64_t sub_1000BEFCC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_1000BEFE8 + 4 * byte_1000DB78C[a3]))();
}

uint64_t sub_1000BEFE8(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  else {
    return sub_10003BBF4(a1, a4);
  }
}

uint64_t sub_1000BF050(uint64_t a1)
{
  uint64_t v4 = *(_BYTE **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t)sub_100070138(1LL, *(_BYTE **)a1, v3);
  if (v1) {
    return v3;
  }
  if (!*(void *)(result + 16))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  int v6 = *(unsigned __int16 *)(result + 34);
  swift_bridgeObjectRelease(result);
  if (v6 <= 258)
  {
    if (v6 == 257)
    {
      uint64_t result = sub_10006FDC0(1LL, v4, v3);
      if (*(void *)(result + 16))
      {
        uint64_t v17 = v15;
        uint64_t v18 = v16;
        uint64_t v3 = *(void *)(result + 32);
        swift_bridgeObjectRelease(result);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        return v3;
      }

      goto LABEL_25;
    }

    if (v6 == 258)
    {
      uint64_t result = sub_10006FAAC(1LL, v4, v3);
      if (*(void *)(result + 16))
      {
        uint64_t v9 = v7;
        uint64_t v10 = v8;
        uint64_t v3 = *(void *)(result + 32);
        swift_bridgeObjectRelease(result);
        *(void *)a1 = v9;
        *(void *)(a1 + 8) = v10;
        return v3;
      }

      goto LABEL_23;
    }

uint64_t sub_1000BF294(uint64_t a1)
{
  return a1;
}

unint64_t *initializeBufferWithCopyOfBuffer for ADC4TerminalVariant( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_1000BF2F8(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

unint64_t sub_1000BF2F8(unint64_t result, uint64_t a2)
{
  if (result >> 62 == 1) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t destroy for ADC4TerminalVariant(uint64_t a1)
{
  return sub_10007FD9C(*(void *)a1, *(void *)(a1 + 8));
}

unint64_t *assignWithCopy for ADC4TerminalVariant(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_1000BF2F8(*a2, v4);
  unint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10007FD9C(v5, v6);
  return a1;
}

unint64_t *assignWithTake for ADC4TerminalVariant(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10007FD9C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ADC4TerminalVariant(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 2);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC4TerminalVariant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (unint64_t)-a2 << 16;
      *(void *)(result + 8) = 0LL;
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_1000BF424(uint64_t a1)
{
  uint64_t v1 = *(void *)a1 >> 62;
  else {
    return ((unsigned __int16)*(void *)a1 | ((unsigned __int16)*(_DWORD *)(a1 + 8) << 16)) + 2;
  }
}

void *sub_1000BF444(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000BF454(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *uint64_t result = *(unsigned __int16 *)result | (unint64_t)(a2 << 62);
  }

  else
  {
    *uint64_t result = (unsigned __int16)(a2 - 2) | 0x8000000000000000LL;
    result[1] = (unint64_t)(a2 - 2) >> 16;
  }

  return result;
}

ValueMetadata *type metadata accessor for ADC4TerminalVariant()
{
  return &type metadata for ADC4TerminalVariant;
}

uint64_t getEnumTagSinglePayload for ADC4ClusterDescriptorSegment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ADC4ClusterDescriptorSegment( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1swift_unknownObjectWeakDestroy(v0 + 7) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1swift_unknownObjectWeakDestroy(v0 + 7) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000BF51C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000BF524(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ADC4ClusterDescriptorSegment()
{
  return &type metadata for ADC4ClusterDescriptorSegment;
}

unint64_t sub_1000BF540()
{
  unint64_t result = qword_100116998;
  if (!qword_100116998)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DC960, &type metadata for ADC4ClusterDescriptorSegment);
    atomic_store(result, (unint64_t *)&qword_100116998);
  }

  return result;
}

unint64_t sub_1000BF588()
{
  unint64_t result = qword_1001169A0;
  if (!qword_1001169A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000DC9C8, &type metadata for ADC4TerminalVariant);
    atomic_store(result, (unint64_t *)&qword_1001169A0);
  }

  return result;
}

void sub_1000BF5D0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __asm { BR              X11 }

uint64_t sub_1000BF608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C123C(a2, a3, WORD1(a3), BYTE4(a3));
}

uint64_t ChannelRelationship.audioChannelLabel.getter(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 42LL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
    case 10:
    case 69:
      uint64_t result = 1LL;
      break;
    case 2:
    case 11:
    case 70:
      uint64_t result = 2LL;
      break;
    case 4:
      uint64_t result = 206LL;
      break;
    case 5:
      uint64_t result = 207LL;
      break;
    case 12:
      uint64_t result = 3LL;
      break;
    case 13:
      uint64_t result = 7LL;
      break;
    case 14:
      uint64_t result = 8LL;
      break;
    case 15:
      uint64_t result = 65LL;
      break;
    case 16:
      uint64_t result = 66LL;
      break;
    case 17:
      uint64_t result = 10LL;
      break;
    case 18:
      uint64_t result = 11LL;
      break;
    case 21:
      uint64_t result = 5LL;
      break;
    case 22:
      uint64_t result = 6LL;
      break;
    case 36:
      uint64_t result = 49LL;
      break;
    case 37:
      uint64_t result = 51LL;
      break;
    case 66:
      uint64_t result = 4LL;
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t ChannelRelationship.description.getter(int a1)
{
  uint64_t result = 0x656E696665646E55LL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return 1869508429LL;
    case 2:
      return 1952867660LL;
    case 3:
      return 0x7468676952LL;
    case 4:
      return 0x7961727241LL;
    case 5:
      return 0x206E726574746150LL;
    case 6:
      return 0x206E726574746150LL;
    case 7:
      return 0x206E726574746150LL;
    case 8:
      return 0x206E726574746150LL;
    case 9:
      return 0x206E726574746150LL;
    case 10:
      return 0x206E726574746150LL;
    case 11:
      return 0x654C20746E6F7246LL;
    case 12:
      return 0x695220746E6F7246LL;
    case 13:
      return 0x654320746E6F7246LL;
    case 14:
      return 0xD000000000000014LL;
    case 15:
      return 0xD000000000000015LL;
    case 16:
      return 0x695720746E6F7246LL;
    case 17:
      return 0xD000000000000010LL;
    case 18:
      unsigned int v3 = 1701079379;
      return v3 | 0x66654C2000000000LL;
    case 19:
      unsigned int v4 = 1701079379;
      return v4 | 0x6769522000000000LL;
    case 20:
    case 25:
    case 35:
    case 47:
    case 51:
      return 0xD000000000000013LL;
    case 21:
      return 0xD000000000000014LL;
    case 22:
      unsigned int v3 = 1801675074;
      return v3 | 0x66654C2000000000LL;
    case 23:
      unsigned int v4 = 1801675074;
      return v4 | 0x6769522000000000LL;
    case 24:
      return 0x6E6543206B636142LL;
    case 26:
      return 0xD000000000000014LL;
    case 27:
      return 0x646957206B636142LL;
    case 28:
      return 0x646957206B636142LL;
    case 29:
      return 0x746E654320706F54LL;
    case 30:
      return 0x6E6F724620706F54LL;
    case 31:
      uint64_t v5 = 0x724620706F54LL;
      goto LABEL_76;
    case 32:
      return 0xD000000000000010LL;
    case 33:
      return 0xD000000000000018LL;
    case 34:
      return 0xD000000000000019LL;
    case 36:
      return 0xD000000000000014LL;
    case 37:
      return 0x6564695320706F54LL;
    case 38:
      return 0x6564695320706F54LL;
    case 39:
      return 0xD000000000000017LL;
    case 40:
      return 0xD000000000000018LL;
    case 41:
      return 0x6B63614220706F54LL;
    case 42:
      return 0x6B63614220706F54LL;
    case 43:
      return 0x6B63614220706F54LL;
    case 44:
      return 0xD000000000000017LL;
    case 45:
      return 0xD000000000000018LL;
    case 46:
      return 0xD000000000000012LL;
    case 48:
      return 0x43206D6F74746F42LL;
    case 49:
      return 0xD000000000000011LL;
    case 50:
      return 0xD000000000000012LL;
    case 52:
      return 0xD00000000000001BLL;
    case 53:
      return 0xD00000000000001CLL;
    case 54:
      return 0xD000000000000016LL;
    case 55:
      return 0xD000000000000017LL;
    case 56:
      return 0xD000000000000010LL;
    case 57:
      return 0xD000000000000011LL;
    case 58:
      return 0xD00000000000001ALL;
    case 59:
      return 0xD00000000000001BLL;
    case 60:
      return 0xD000000000000010LL;
    case 61:
      return 0xD000000000000011LL;
    case 62:
      return 0xD000000000000012LL;
    case 63:
      return 0xD00000000000001ALL;
    case 64:
      return 0xD00000000000001BLL;
    case 65:
      return 0xD000000000000015LL;
    case 66:
      return 0xD000000000000016LL;
    case 67:
      return 0xD000000000000015LL;
    case 68:
      return 0xD00000000000001ALL;
    case 69:
      return 0xD00000000000001BLL;
    case 70:
      return 0x6E6F687064616548LL;
    case 71:
      uint64_t v5 = 0x687064616548LL;
LABEL_76:
      uint64_t result = v5 & 0xFFFFFFFFFFFFLL | 0x6E6F000000000000LL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E55LL;
      break;
  }

  return result;
}

uint64_t sub_1000BFF44()
{
  return ChannelRelationship.description.getter(*v0);
}

Swift::UInt_optional __swiftcall ClusterDescription.numChannels()()
{
  if (HIBYTE(v1) >= 2u) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = v0;
  }
  Swift::Bool v3 = HIBYTE(v1) >= 2u;
  Swift::UInt v4 = v2;
  result.value = v4;
  result.is_nil = v3;
  return result;
}

void *sub_1000BFF78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v18 = a1;
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        int v7 = 0;
        uint64_t v8 = (unsigned __int8 *)(v5 + 39);
        uint64_t v9 = (unsigned __int8 *)(v5 + 39);
        do
        {
          int v10 = *v9;
          v9 += 8;
          if (v10 == 1) {
            int v7 = *(v8 - 3);
          }
          uint64_t v8 = v9;
          --v6;
        }

        while (v6);
      }

      else
      {
        int v7 = 0;
      }

      uint64_t v11 = ChannelRelationship.description.getter(v7);
      uint64_t v13 = v12;
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_100070810(v14 > 1, v15 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      v16[4] = v3;
      v16[5] = v11;
      v16[6] = v13;
      *((_DWORD *)v16 + 14) = v7;
    }

    while (v3 != v2);
  }

  swift_bridgeObjectRelease(v18);
  return _swiftEmptyArrayStorage;
}

void *sub_1000C00B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v18 = a1;
  if (v2)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 32;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        int v7 = 0;
        uint64_t v8 = (unsigned __int8 *)(v5 + 48);
        uint64_t v9 = (unsigned __int8 *)(v5 + 48);
        do
        {
          int v10 = *v9;
          v9 += 17;
          if (v10 == 1) {
            int v7 = *((unsigned __int16 *)v8 - 5);
          }
          uint64_t v8 = v9;
          --v6;
        }

        while (v6);
      }

      else
      {
        int v7 = 0;
      }

      uint64_t v11 = ChannelRelationship.description.getter(v7);
      uint64_t v13 = v12;
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1) {
        sub_100070810(v14 > 1, v15 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      uint64_t v16 = &_swiftEmptyArrayStorage[4 * v15];
      v16[4] = v3;
      v16[5] = v11;
      v16[6] = v13;
      *((_DWORD *)v16 + 14) = v7;
    }

    while (v3 != v2);
  }

  swift_bridgeObjectRelease(v18);
  return _swiftEmptyArrayStorage;
}

void ClusterDescription.hash(into:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  __asm { BR              X10 }

void sub_1000C021C()
{
}

void ClusterDescription.hashValue.getter(uint64_t a1, __int16 a2)
{
  uint64_t v2 = HIBYTE(a2);
  Hasher.init(_seed:)(v3, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1000C02DC()
{
  return Hasher._finalize()();
}

void sub_1000C038C()
{
}

void sub_1000C0398()
{
  __asm { BR              X11 }

void sub_1000C03D0()
{
}

void sub_1000C044C(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 9);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000C048C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C053C(uint64_t a1)
{
  return _s9AUASDCore18ClusterDescriptionO21__derived_enum_equalsySbAC_ACtFZ_0(*(void *)a1, *(_WORD *)(a1 + 8));
}

uint64_t ClusterChannelInfo.chName.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2;
}

uint64_t ClusterChannelInfo.chRelationship.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

void ClusterChannelInfo.hash(into:)(uint64_t a1, Swift::UInt a2, uint64_t a3, uint64_t a4, Swift::UInt32 a5)
{
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a4);
    String.hash(into:)(a1, a3, a4);
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(a5);
}

Swift::Int ClusterChannelInfo.hashValue.getter(Swift::UInt a1, uint64_t a2, uint64_t a3, Swift::UInt32 a4)
{
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v9, a2, a3);
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

Swift::Int sub_1000C06B0()
{
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v6, v1, v3);
    swift_bridgeObjectRelease(v3);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_1000C0754(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 16);
  Swift::UInt32 v6 = *(_DWORD *)(v2 + 24);
  Hasher._combine(_:)(*(void *)v2);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v4, v5);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v6);
}

Swift::Int sub_1000C07CC(uint64_t a1)
{
  Swift::UInt v3 = *(void *)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt32 v5 = *(_DWORD *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v7, v2, v4);
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_1000C086C(uint64_t a1, uint64_t a2)
{
  return _s9AUASDCore18ClusterChannelInfoV23__derived_struct_equalsySbAC_ACtFZ_0( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(_DWORD *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(void *)(a2 + 16),  *(_DWORD *)(a2 + 24));
}

uint64_t Cluster.hasException.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

void Cluster.hash(into:)(uint64_t a1, Swift::UInt a2, uint64_t a3, char a4)
{
}

uint64_t static Cluster.__derived_struct_equals(_:_:)( uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, char a6)
{
  if (a1 != a4) {
    return 0LL;
  }
  char v8 = sub_1000A5744(a2, a5);
  char v9 = a3 ^ a6 ^ 1;
  if ((v8 & 1) == 0) {
    char v9 = 0;
  }
  return v9 & 1;
}

Swift::Int Cluster.hashValue.getter(Swift::UInt a1, uint64_t a2, char a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000C09BC()
{
  Swift::UInt v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  Swift::UInt8 v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  sub_1000C0B54((uint64_t)v5, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000C0A34(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 16);
  Hasher._combine(_:)(*(void *)v1);
  swift_bridgeObjectRetain();
  sub_1000C0B54(a1, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1000C0A8C(uint64_t a1)
{
  Swift::UInt v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt8 v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  sub_1000C0B54((uint64_t)v6, v3);
  swift_bridgeObjectRelease(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000C0B00(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0LL;
  }
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if ((sub_1000A5744(*(void **)(a1 + 8), *(void **)(a2 + 8)) & 1) != 0) {
    return v2 ^ v3 ^ 1u;
  }
  else {
    return 0LL;
  }
}

void sub_1000C0B54(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    Swift::UInt32 v5 = (Swift::UInt32 *)(a2 + 56);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      uint64_t v7 = *((void *)v5 - 1);
      Swift::UInt32 v8 = *v5;
      Hasher._combine(_:)(*((void *)v5 - 3));
      if (v7)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v7);
        String.hash(into:)(a1, v6, v7);
      }

      else
      {
        Hasher._combine(_:)(0);
      }

      v5 += 8;
      Hasher._combine(_:)(v8);
      swift_bridgeObjectRelease(v7);
      --v4;
    }

    while (v4);
  }

BOOL _s9AUASDCore18ClusterChannelInfoV23__derived_struct_equalsySbAC_ACtFZ_0( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  if (a1 != a5) {
    return 0LL;
  }
  if (!a3)
  {
    if (!a7) {
      return a4 == a8;
    }
    return 0LL;
  }

  if (!a7) {
    return 0LL;
  }
  if (a2 == a6 && a3 == a7) {
    return a4 == a8;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a6, a7, 0LL);
  BOOL result = 0LL;
  if ((v10 & 1) != 0) {
    return a4 == a8;
  }
  return result;
}

uint64_t _s9AUASDCore18ClusterDescriptionO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, __int16 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1000C0C9C + 4 * byte_1000DCB1C[HIBYTE(a2)]))();
}

BOOL sub_1000C0C9C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X2>, int a3@<W8>)
{
  BOOL v3 = WORD1(a1) == WORD1(a2) && BYTE4(a1) == BYTE4(a2);
  return !a3 && v3;
}

BOOL sub_1000C0CD8@<W0>(__int16 a1@<W0>, __int16 a2@<W2>, int a3@<W8>)
{
  return a3 == 2 && a1 == a2;
}

BOOL sub_1000C0CF0@<W0>(__int16 a1@<W0>, __int16 a2@<W2>, int a3@<W8>)
{
  return a3 == 3 && a1 == a2;
}

BOOL sub_1000C0D08@<W0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W8>)
{
  BOOL v7 = a1 == a3 && HIDWORD(a1) == HIDWORD(a3) && a2 == a4;
  return a5 == 1 && v7;
}

unint64_t sub_1000C0D3C()
{
  unint64_t result = qword_1001169A8;
  if (!qword_1001169A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClusterDescription,  &type metadata for ClusterDescription);
    atomic_store(result, (unint64_t *)&qword_1001169A8);
  }

  return result;
}

unint64_t sub_1000C0D84()
{
  unint64_t result = qword_1001169B0;
  if (!qword_1001169B0)
  {
    type metadata accessor for ChannelRelationship(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1000D556C, v1);
    atomic_store(result, (unint64_t *)&qword_1001169B0);
  }

  return result;
}

unint64_t sub_1000C0DD0()
{
  unint64_t result = qword_1001169B8;
  if (!qword_1001169B8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClusterChannelInfo,  &type metadata for ClusterChannelInfo);
    atomic_store(result, (unint64_t *)&qword_1001169B8);
  }

  return result;
}

unint64_t sub_1000C0E18()
{
  unint64_t result = qword_1001169C0;
  if (!qword_1001169C0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Cluster, &type metadata for Cluster);
    atomic_store(result, (unint64_t *)&qword_1001169C0);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ClusterDescription(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClusterDescription(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 9);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusterDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1sub_100070810(0, 0LL, 0) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 1sub_100070810(0, 0LL, 0) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 9) = -(char)a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClusterDescription()
{
  return &type metadata for ClusterDescription;
}

uint64_t destroy for ClusterChannelInfo(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ClusterChannelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusterChannelInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusterChannelInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 28) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ClusterChannelInfo()
{
  return &type metadata for ClusterChannelInfo;
}

uint64_t sub_1000C10CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for Cluster(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for Cluster(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for Cluster(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Cluster(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Cluster(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 1swift_unknownObjectWeakDestroy(v0 + 7) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 1swift_unknownObjectWeakDestroy(v0 + 7) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Cluster()
{
  return &type metadata for Cluster;
}

uint64_t sub_1000C123C(uint64_t a1, unsigned __int8 a2, unsigned __int16 a3, unsigned __int8 a4)
{
  unsigned __int8 v4 = a4;
  unint64_t v6 = 0LL;
  unsigned int v44 = a3;
  BOOL v7 = _swiftEmptyArrayStorage;
  LOBYTE(v8) = 1;
  while (v8 <= a2 && v6 <= 0x10)
  {
    if (v6 <= 0xF)
    {
      if (((v44 >> v6) & 1) != 0)
      {
        if (v6 > 0xB) {
          goto LABEL_44;
        }
        int v10 = *((_DWORD *)&off_1000FD928 + v6 + 8);
        uint64_t v11 = ChannelRelationship.description.getter(v10);
        uint64_t v13 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          BOOL v7 = sub_10004FD74(0LL, v7[2] + 1LL, 1, v7);
        }
        unint64_t v15 = v7[2];
        unint64_t v14 = v7[3];
        if (v15 >= v14 >> 1) {
          BOOL v7 = sub_10004FD74((void *)(v14 > 1), v15 + 1, 1, v7);
        }
        _OWORD v7[2] = v15 + 1;
        uint64_t v16 = &v7[4 * v15];
        v16[4] = v8;
        v16[5] = v11;
        v16[6] = v13;
        *((_DWORD *)v16 + 14) = v10;
        __int16 v8 = v8 + 1;
        unsigned __int8 v4 = a4;
        if ((v8 & 0x100) != 0) {
          goto LABEL_45;
        }
      }

      break;
    }

uint64_t sub_1000C1614(uint64_t a1, unsigned __int8 a2, unsigned int a3, unsigned __int8 a4)
{
  unint64_t v5 = 0LL;
  unint64_t v6 = _swiftEmptyArrayStorage;
  LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 7) = 1;
  while (v7 <= a2 && v5 <= 0x20)
  {
    if (v5 <= 0x1F)
    {
      if (((a3 >> v5) & 1) != 0)
      {
        if (v5 > 0x1A) {
          goto LABEL_40;
        }
        int v8 = *((_DWORD *)&off_1000FD978 + v5 + 8);
        uint64_t v9 = ChannelRelationship.description.getter(v8);
        uint64_t v11 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
          unint64_t v6 = sub_10004FD74(0LL, v6[2] + 1LL, 1, v6);
        }
        unint64_t v13 = v6[2];
        unint64_t v12 = v6[3];
        if (v13 >= v12 >> 1) {
          unint64_t v6 = sub_10004FD74((void *)(v12 > 1), v13 + 1, 1, v6);
        }
        v6[2] = v13 + 1;
        unint64_t v14 = &v6[4 * v13];
        _OWORD v14[4] = v7;
        v14[5] = v9;
        v14[6] = v11;
        *((_DWORD *)v14 + 14) = v8;
        LOWORD(vswift_unknownObjectWeakDestroy(v0 + 7) = v7 + 1;
        if ((v7 & 0x100) != 0) {
          goto LABEL_41;
        }
      }

      break;
    }

uint64_t ActiveStreamingInterface.staticStreamingInterface.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v2 = *(void *)(v1 + 40);
  char v4 = *(_BYTE *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v6);
}

uint64_t ActiveStreamingInterface.usbDevice.getter()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 80);
}

void ActiveStreamingInterface.usbDevice.setter(void *a1)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess(v3, v4, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
}

void (*ActiveStreamingInterface.usbDevice.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 80, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 80);
  return sub_1000C1B0C;
}

void sub_1000C1B0C(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[4] + 80, v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
  }

  free(v3);
}

uint64_t ActiveStreamingInterface.interfaceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain(*(void *)(v0 + 96));
  return v1;
}

uint64_t ActiveStreamingInterface.interfaceProtocol.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 32) + 7LL);
}

uint64_t ActiveStreamingInterface.terminal.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_beginAccess(v1 + 2, v10, 0LL, 0LL);
  uint64_t v4 = v1[2];
  if (v4)
  {
    uint64_t v5 = v1[3];
    uint64_t v6 = v1[9];
    if ((v6 & 0xC000000000000001LL) != 0)
    {
      swift_unknownObjectRetain(v1[2]);
      uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
      goto LABEL_5;
    }

    if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v7 = *(void *)(v6 + 32);
      swift_unknownObjectRetain(v1[2]);
      swift_retain(v7);
LABEL_5:
      uint64_t ObjectType = swift_getObjectType(v4);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 168))(v7, ObjectType, v5);
      swift_release(v7);
      return swift_unknownObjectRelease(v4, v9);
    }

    __break(1u);
  }

  else
  {
    *(void *)(a1 + 32) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

id ActiveStreamingInterface.ioQueue.getter()
{
  return *(id *)(v0 + 104);
}

void *ActiveStreamingInterface.usbHostInterface.getter()
{
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

void ActiveStreamingInterface.auaStream.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 80;
  swift_beginAccess(v2, v41, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong) {
    return;
  }
  uint64_t v4 = Strong;
  id v5 = [Strong audioDevices];

  if (!v5) {
    return;
  }
  uint64_t v6 = sub_10000AF08(0LL, &qword_100114590, &OBJC_CLASS___ASDAudioDevice_ptr);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
LABEL_41:
    if (v7 < 0) {
      uint64_t v35 = v7;
    }
    else {
      uint64_t v35 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v7);
    if (v8) {
      goto LABEL_5;
    }
LABEL_45:
    swift_bridgeObjectRelease(v7);
    return;
  }

  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v8) {
    goto LABEL_45;
  }
LABEL_5:
  unint64_t v9 = 0LL;
  uint64_t v39 = v8;
  unint64_t v40 = v7 & 0xC000000000000001LL;
  uint64_t v37 = v7 + 32;
  uint64_t v38 = v7 & 0xFFFFFFFFFFFFFF8LL;
  while (1)
  {
    if (v40)
    {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
      goto LABEL_12;
    }

    if (v9 >= *(void *)(v38 + 16)) {
      break;
    }
    id v10 = *(id *)(v37 + 8 * v9);
LABEL_12:
    uint64_t v11 = v10;
    if (__OFADD__(v9++, 1LL)) {
      goto LABEL_40;
    }
    id v13 = [v10 inputStreams];
    if (!v13) {
      goto LABEL_48;
    }
    unint64_t v14 = v13;
    uint64_t v15 = sub_10000AF08(0LL, (unint64_t *)&qword_100113B00, &OBJC_CLASS___ASDStream_ptr);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    id v17 = [v11 outputStreams];
    if (!v17) {
      goto LABEL_49;
    }
    int v18 = v17;
    uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v15);

    sub_1000929D8(v19);
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0) {
        uint64_t v33 = v16;
      }
      else {
        uint64_t v33 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v16);
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(v16);
      if (v20)
      {
LABEL_17:
        if ((v16 & 0xC000000000000001LL) != 0)
        {
          uint64_t v21 = 0LL;
          while (1)
          {
            uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v16);
            uint64_t v23 = v21 + 1;
            if (__OFADD__(v21, 1LL)) {
              break;
            }
            uint64_t v24 = v22;
            uint64_t v25 = type metadata accessor for AUAStream(0LL);
            uint64_t v26 = swift_dynamicCastClass(v24, v25);
            if (v26
              && *(unsigned __int8 *)(*(void *)(*(void *)(v26 + OBJC_IVAR___AUAStream_interface) + 32LL) + 2LL) == *(unsigned __int8 *)(*(void *)(v1 + 32) + 2LL))
            {
              swift_bridgeObjectRelease(v16);
              goto LABEL_37;
            }

            swift_unknownObjectRelease(v24, v27);
            ++v21;
            if (v23 == v20)
            {

              swift_bridgeObjectRelease(v16);
              uint64_t v8 = v39;
              goto LABEL_7;
            }
          }

          __break(1u);
        }

        else
        {
          uint64_t v36 = v7;
          uint64_t v28 = 0LL;
          uint64_t v29 = OBJC_IVAR___AUAStream_interface;
          while (1)
          {
            uint64_t v7 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              break;
            }
            uint64_t v30 = *(void **)(v16 + 8 * v28 + 32);
            uint64_t v31 = type metadata accessor for AUAStream(0LL);
            uint64_t v32 = swift_dynamicCastClass(v30, v31);
            if (v32
              && *(unsigned __int8 *)(*(void *)(*(void *)(v32 + v29) + 32LL) + 2LL) == *(unsigned __int8 *)(*(void *)(v1 + 32) + 2LL))
            {
              id v34 = v30;
              swift_bridgeObjectRelease(v16);
              uint64_t v7 = v36;
LABEL_37:

              swift_bridgeObjectRelease(v7);
              return;
            }

            ++v28;
            if (v7 == v20)
            {

              swift_bridgeObjectRelease(v16);
              uint64_t v7 = v36;
              uint64_t v8 = v39;
              goto LABEL_7;
            }
          }
        }

        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v20 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v20) {
        goto LABEL_17;
      }
    }

    swift_bridgeObjectRelease(v16);
LABEL_7:
    if (v9 == v8) {
      goto LABEL_45;
    }
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

uint64_t ActiveStreamingInterface.clock()()
{
  uint64_t v1 = v0[15];
  if (v1)
  {
    uint64_t v0 = (void *)v0[15];
LABEL_3:
    swift_retain(v1);
    return (uint64_t)v0;
  }

  uint64_t result = swift_beginAccess(v0 + 2, v17, 0LL, 0LL);
  uint64_t v3 = (void *)v0[2];
  if (!v3)
  {
    uint64_t v20 = 0LL;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    goto LABEL_12;
  }

  uint64_t v4 = v0[3];
  uint64_t v5 = v0[9];
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    swift_unknownObjectRetain(v0[2]);
    uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
LABEL_8:
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v0 = v3;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v4 + 168))(&v18, v6, ObjectType, v4);
    swift_release(v6);
    swift_unknownObjectRelease(v3, v8);
    if (*((void *)&v19 + 1))
    {
      sub_10000AF84(&v18, (uint64_t)v21);
      uint64_t v9 = v22;
      uint64_t v10 = v23;
      uint64_t v0 = sub_1000178EC(v21, v22);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      if (v11)
      {
        uint64_t v0 = (void *)v11;
        sub_100017A40(v21);
        goto LABEL_3;
      }

      sub_100017A40(v21);
      unint64_t v16 = sub_10000AE14();
      uint64_t v13 = swift_allocError(&type metadata for AUAError, v16, 0LL, 0LL);
      *(_BYTE *)uint64_t v14 = 78;
      uint64_t v15 = 88LL;
LABEL_13:
      *(void *)(v14 + 8) = 0LL;
      *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
      *(void *)(v14 + 24) = 0x29286B636F6C63LL;
      *(void *)(v14 + 32) = 0xE700000000000000LL;
      *(void *)(v14 + 4sub_100070810(0, 0LL, 0) = 0xD000000000000028LL;
      *(void *)(v14 + 48) = 0x80000001000D2560LL;
      *(void *)(v14 + 56) = v15;
      swift_willThrow(v13);
      return (uint64_t)v0;
    }

Swift::Int ActiveStreamingInterface.getCur(forControl:)(unsigned int a1)
{
  int v1 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v1 == 52) {
    return 0LL;
  }
  if (v1 == 51) {
    return ActiveStreamingInterface.getValidAlternateSettings()();
  }
  unint64_t v3 = sub_10000AE14();
  uint64_t v4 = swift_allocError(&type metadata for AUAError, v3, 0LL, 0LL);
  *(_BYTE *)uint64_t v5 = 28;
  *(void *)(v5 + 8) = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  *(void *)(v5 + 24) = 0xD000000000000013LL;
  *(void *)(v5 + 32) = 0x80000001000D3520LL;
  *(void *)(v5 + 4sub_100070810(0, 0LL, 0) = 0xD000000000000028LL;
  *(void *)(v5 + 48) = 0x80000001000D2560LL;
  *(void *)(v5 + 56) = 100LL;
  return swift_willThrow(v4);
}

uint64_t ActiveStreamingInterface.hasValidAlternateSettingsControl.getter()
{
  uint64_t v1 = type metadata accessor for Mirror(0LL);
  uint64_t v43 = *(void *)(v1 - 8);
  uint64_t v44 = v1;
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = *(void *)(v0 + 64);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 16)) == 0)
  {
    char v28 = 0;
    return v28 & 1;
  }

  uint64_t v38 = v0;
  uint64_t v41 = &v50;
  uint64_t v6 = swift_bridgeObjectRetain(v4);
  uint64_t v7 = 32LL;
  unint64_t v40 = (unint64_t)"activeAlternateSetting";
  unint64_t v39 = 0x80000001000CFB30LL;
  uint64_t v42 = v6;
  while (1)
  {
    uint64_t v45 = v5;
    __int16 v8 = *(_WORD *)(v6 + v7);
    char v9 = *(_BYTE *)(v6 + v7 + 2);
    *((void *)&v50 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
    BYTE2(v49) = v9;
    LOWORD(v49) = v8;
    uint64_t v10 = Mirror.init(reflecting:)(&v49);
    uint64_t v11 = v3;
    unint64_t v12 = (void *)Mirror.children.getter(v10);
    uint64_t v13 = v12[2];
    uint64_t v14 = v12[3];
    uint64_t v16 = v12[4];
    uint64_t v15 = v12[5];
    uint64_t ObjectType = swift_getObjectType(v13);
    swift_unknownObjectRetain(v13);
    swift_unknownObjectRetain(v16);
    uint64_t v18 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v14);
    uint64_t v19 = swift_getObjectType(v16);
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter(v19, v15);
    if (v18 != result)
    {
      __break(1u);
      return result;
    }

    char v21 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v16, v15, ObjectType, v14);
    swift_unknownObjectRelease(v16, v22);
    if ((v21 & 1) != 0)
    {
      swift_unknownObjectRelease(v13, v23);
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v49 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v13, v14);
      __int128 v49 = v46;
      __int128 v50 = v47;
      __int128 v51 = v48;
      swift_unknownObjectRelease(v13, v24);
    }

    unint64_t v3 = v11;
    swift_release(v12);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
    if (!*((void *)&v51 + 1))
    {
      sub_1000178B0((uint64_t)&v49, &qword_100113CD0);
      goto LABEL_5;
    }

    uint64_t v25 = *((void *)&v49 + 1);
    uint64_t v26 = v49;
    sub_100017A40(v41);
    if (!v25) {
      goto LABEL_5;
    }
    if (v26 == 0xD000000000000016LL && v25 == v39) {
      break;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v25, 0xD000000000000016LL, v40 | 0x8000000000000000LL, 0LL);
    swift_bridgeObjectRelease(v25);
    if ((v27 & 1) != 0)
    {
      uint64_t v25 = v42;
      goto LABEL_19;
    }

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.getValidAlternateSettings()()
{
  unint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Mirror(0LL);
  __int128 v109 = *(_BYTE **)(v3 - 8);
  uint64_t v110 = (_BYTE *)v3;
  __chkstk_darwin(v3);
  uint64_t v5 = &v98[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = *(void *)(v0 + 64);
  if (!v6 || (uint64_t v7 = *(char **)(v6 + 16)) == 0LL)
  {
LABEL_17:
    unint64_t v26 = sub_10000AE14();
    uint64_t v27 = swift_allocError(&type metadata for AUAError, v26, 0LL, 0LL);
    *(_BYTE *)uint64_t v28 = 8;
    *(void *)(v28 + 8) = 0LL;
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v28 + 24) = 0xD00000000000001BLL;
    *(void *)(v28 + 32) = 0x80000001000D3910LL;
    *(void *)(v28 + 4sub_100070810(0, 0LL, 0) = 0xD000000000000028LL;
    *(void *)(v28 + 48) = 0x80000001000D2560LL;
    uint64_t v29 = 120LL;
LABEL_18:
    *(void *)(v28 + 56) = v29;
    swift_willThrow(v27);
    return v0;
  }

  uint64_t v102 = (_BYTE *)v0;
  unint64_t v101 = v2;
  uint64_t v105 = &v116;
  uint64_t v8 = swift_bridgeObjectRetain(v6);
  uint64_t v9 = 32LL;
  unint64_t v104 = (unint64_t)"activeAlternateSetting";
  unint64_t v103 = 0x80000001000CFB30LL;
  id v108 = (_BYTE *)v8;
  while (1)
  {
    uint64_t v111 = (_BYTE *)v9;
    uint64_t v112 = v7;
    uint64_t v10 = (unsigned __int16 *)(v8 + v9);
    int v11 = *(unsigned __int8 *)(v8 + v9 + 2);
    LODWORD(v1sub_100070810(0, 0LL, 0) = *v10;
    *((void *)&v116 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
    LODWORD(v10swift_unknownObjectWeakDestroy(v0 + 7) = v11;
    BYTE2(v115) = v11;
    LODWORD(v106) = (_DWORD)v10;
    LOWORD(v115) = (_WORD)v10;
    uint64_t v12 = Mirror.init(reflecting:)(&v115);
    uint64_t v13 = v5;
    uint64_t v14 = Mirror.children.getter(v12);
    uint64_t v15 = *(void *)(v14 + 16);
    uint64_t v16 = *(_BYTE **)(v14 + 24);
    uint64_t v17 = *(void *)(v14 + 32);
    uint64_t v18 = *(_BYTE **)(v14 + 40);
    uint64_t ObjectType = swift_getObjectType(v15);
    swift_unknownObjectRetain(v15);
    swift_unknownObjectRetain(v17);
    uint64_t v20 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v16);
    uint64_t v21 = swift_getObjectType(v17);
    if (v20 != dispatch thunk of _AnyIndexBox._typeID.getter(v21, v18))
    {
      __break(1u);
LABEL_33:
      char v60 = dispatch thunk of static BinaryInteger.isSigned.getter(ObjectType, v13);
      unint64_t v103 = (unint64_t)v16;
      uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter(ObjectType, v13);
      if ((v60 & 1) != 0)
      {
        int v106 = (void (*)(unint64_t, uint64_t))v14;
        unint64_t v59 = v111;
        if (v61 > 64)
        {
          __chkstk_darwin(v61);
          unint64_t v62 = sub_10001CDF8();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)( &v118,  &type metadata for Int,  v62,  ObjectType,  v13);
          unint64_t v63 = v103;
          char v64 = dispatch thunk of static Comparable.< infix(_:_:)( v103,  &v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  ObjectType,  *(void *)(*((void *)v13 + 4) + 8LL));
          unsigned int v65 = v106;
          v106((unint64_t)&v98[-((unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)], ObjectType);
          v65(v63, ObjectType);
          uint64_t v14 = (uint64_t)v65;
          uint64_t v66 = &v120;
          if ((v64 & 1) != 0) {
            goto LABEL_45;
          }
          goto LABEL_47;
        }

        uint64_t v71 = *(void *)(*((void *)v13 + 3) + 16LL);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v71);
        uint64_t v102 = v98;
        __chkstk_darwin(AssociatedTypeWitness);
        id v74 = &v98[-v73];
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v71,  ObjectType,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        uint64_t v76 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1000D5FA0,  256LL,  AssociatedTypeWitness,  AssociatedConformanceWitness);
        uint64_t v100 = v98;
        __chkstk_darwin(v76);
        unint64_t v101 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        char v77 = &v98[-v101];
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v74, ObjectType, v71);
        unint64_t v78 = v103;
        int v99 = dispatch thunk of static Comparable.< infix(_:_:)( v103,  v77,  ObjectType,  *(void *)(*((void *)v13 + 4) + 8LL));
        uint64_t v14 = (uint64_t)v106;
        uint64_t v79 = ((uint64_t (*)(_BYTE *, uint64_t))v106)(v77, ObjectType);
        uint64_t v102 = v98;
        __chkstk_darwin(v79);
        uint64_t v80 = (uint64_t)&v98[-v101];
        (*((void (**)(_BYTE *, unint64_t, uint64_t))v105 + 4))(&v98[-v101], v78, ObjectType);
        if ((v99 & 1) != 0) {
          goto LABEL_61;
        }
        int64_t v81 = v118;
        uint64_t v82 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v13);
        ((void (*)(uint64_t, uint64_t))v14)(v80, ObjectType);
        BOOL v58 = v82 < v81;
      }

      else
      {
        unint64_t v59 = v111;
        uint64_t v66 = &v119;
        if (v61 >= 64) {
          goto LABEL_46;
        }
        unint64_t v69 = v103;
        uint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter(ObjectType, v13);
        ((void (*)(unint64_t, uint64_t))v14)(v69, ObjectType);
        BOOL v58 = v70 < v118;
      }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.processInterrupt(attribute:controlSelector:)( AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector)
{
}

void sub_1000C3394()
{
  if (v0)
  {
    sub_100029840( 0xD00000000000002FLL,  0x80000001000D38E0LL,  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000028LL,  0x80000001000D2560LL,  158LL);
    swift_errorRelease(v0);
  }

void *ActiveStreamingInterface.streamFormats(forSamplingRate:inClockRateRange:nonStreamingTerminal:)( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v99 = a4;
  uint64_t v101 = a3;
  uint64_t v100 = a2;
  uint64_t v109 = type metadata accessor for Mirror(0LL);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v12 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = _swiftEmptyArrayStorage;
  int v106 = (void *)(v5 + 16);
  swift_beginAccess(v5 + 16, v119, 0LL, 0LL);
  uint64_t v13 = *(void *)(v5 + 16);
  uint64_t v107 = v5;
  unint64_t v111 = a1;
  if (!v13)
  {
    unint64_t v42 = sub_10000AE14();
    uint64_t v43 = swift_allocError(&type metadata for AUAError, v42, 0LL, 0LL);
    *(_BYTE *)uint64_t v44 = 61;
    *(void *)(v44 + 8) = 0LL;
    *(void *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v44 + 24) = 0xD000000000000045LL;
    *(void *)(v44 + 32) = 0x80000001000D3670LL;
    *(void *)(v44 + 4sub_100070810(0, 0LL, 0) = 0xD000000000000028LL;
    *(void *)(v44 + 48) = 0x80000001000D2560LL;
    *(void *)(v44 + 56) = 174LL;
    swift_willThrow(v43);
    goto LABEL_18;
  }

  uint64_t v105 = (uint64_t)v12;
  uint64_t v14 = *(void *)(v5 + 24);
  uint64_t v15 = a5[3];
  uint64_t v16 = a5[4];
  sub_1000178EC(a5, v15);
  swift_unknownObjectRetain(v13);
  uint64_t v17 = sub_1000907C0(v15, v16);
  if (!v17)
  {
    swift_unknownObjectRelease(v13, v18);
    goto LABEL_22;
  }

  uint64_t v19 = v17;
  unint64_t v20 = *(void *)(v17 + 16);
  if (!v20)
  {
    swift_unknownObjectRelease(v13, v18);
    swift_bridgeObjectRelease(v19);
    goto LABEL_22;
  }

  uint64_t v94 = v14;
  unint64_t v95 = a5;
  uint64_t v97 = v13;
  uint64_t v96 = v6;
  int v98 = &v117;
  uint64_t v21 = 32LL;
  uint64_t v104 = v17;
  while (1)
  {
    unint64_t v110 = v20;
    int v23 = *(unsigned __int8 *)(v19 + v21 + 2);
    int v24 = *(unsigned __int16 *)(v19 + v21);
    *((void *)&v117 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
    int v103 = v23;
    BYTE2(v1swift_unknownObjectWeakDestroy(v0 + 16) = v23;
    LODWORD(v102) = v24;
    LOWORD(v1swift_unknownObjectWeakDestroy(v0 + 16) = v24;
    uint64_t v25 = Mirror.init(reflecting:)(&v116);
    unint64_t v26 = (void *)Mirror.children.getter(v25);
    uint64_t v28 = v26[2];
    uint64_t v27 = v26[3];
    uint64_t v30 = v26[4];
    uint64_t v29 = v26[5];
    uint64_t ObjectType = swift_getObjectType(v28);
    swift_unknownObjectRetain(v28);
    swift_unknownObjectRetain(v30);
    uint64_t v32 = dispatch thunk of _AnyIndexBox._typeID.getter(ObjectType, v27);
    uint64_t v33 = swift_getObjectType(v30);
    if (v32 != dispatch thunk of _AnyIndexBox._typeID.getter(v33, v29)) {
      goto LABEL_97;
    }
    char v34 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v30, v29, ObjectType, v27);
    swift_unknownObjectRelease(v30, v35);
    if ((v34 & 1) != 0)
    {
      swift_unknownObjectRelease(v28, v36);
      __int128 v117 = 0u;
      __int128 v118 = 0u;
      __int128 v116 = 0u;
    }

    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter(v28, v27);
      __int128 v116 = v113;
      __int128 v117 = v114;
      __int128 v118 = v115;
      swift_unknownObjectRelease(v28, v37);
    }

    uint64_t v8 = v107;
    a1 = v111;
    uint64_t v38 = v105;
    swift_release(v26);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v38, v109);
    if (!*((void *)&v118 + 1))
    {
      sub_1000178B0((uint64_t)&v116, &qword_100113CD0);
      goto LABEL_6;
    }

    uint64_t v39 = *((void *)&v116 + 1);
    uint64_t v40 = v116;
    sub_100017A40(v98);
    if (!v39) {
      goto LABEL_6;
    }
    if (v40 == 0x6F7463656E6E6F63LL && v39 == 0xE900000000000072LL) {
      break;
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v39, 0x6F7463656E6E6F63LL, 0xE900000000000072LL, 0LL);
    swift_bridgeObjectRelease(v39);
    if ((v41 & 1) != 0)
    {
      uint64_t v39 = v104;
      goto LABEL_90;
    }

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveStreamingInterface.channelCount()()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain_n(v1, 2LL);
    if (v2) {
      goto LABEL_3;
    }
LABEL_30:
    Swift::Int v5 = 0LL;
    goto LABEL_31;
  }

uint64_t ActiveStreamingInterface.deinit(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_bridgeObjectRelease(*(void *)(v2 + 40));
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(void *)(v2 + 72));
  swift_unknownObjectWeakDestroy(v2 + 80);
  swift_bridgeObjectRelease(*(void *)(v2 + 96));

  swift_release(*(void *)(v2 + 120));
  return v2;
}

uint64_t ActiveStreamingInterface.__deallocating_deinit(uint64_t a1, uint64_t a2)
{
  return swift_deallocClassInstance(v2, 128LL, 7LL);
}

uint64_t ActiveStreamingAltInterface.staticStreamingAltInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C7274(v1 + 16, a1);
}

uint64_t ActiveStreamingAltInterface.format.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ActiveStreamingAltInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 2LL);
}

uint64_t ActiveStreamingAltInterface.altSetting.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 3LL);
}

uint64_t ActiveStreamingAltInterface.function.getter()
{
  uint64_t Strong = swift_weakLoadStrong(v0 + 144);
  if (!Strong) {
    return 0LL;
  }
  uint64_t v2 = Strong;
  swift_beginAccess(Strong + 16, &v5, 0LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 16);
  swift_unknownObjectRetain(v3);
  swift_release(v2);
  return v3;
}

uint64_t ActiveStreamingAltInterface.dataEndpoint.getter()
{
  return swift_retain(*(void *)(v0 + 104));
}

uint64_t ActiveStreamingAltInterface.feedbackEndpoint.getter()
{
  return swift_retain(*(void *)(v0 + 112));
}

uint64_t ActiveStreamingAltInterface.channelCount.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0LL;
  }
}

uint64_t ActiveStreamingAltInterface.streamingInterface.getter()
{
  return swift_weakLoadStrong(v0 + 144);
}

uint64_t ActiveStreamingAltInterface.streamingInterface.setter(uint64_t a1)
{
  uint64_t v3 = v1 + 144;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_weakAssign(v3, a1);
  return swift_release(a1);
}

void (*ActiveStreamingAltInterface.streamingInterface.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 144, v3, 33LL, 0LL);
  v3[3] = swift_weakLoadStrong(v1 + 144);
  return sub_1000C4828;
}

void sub_1000C4828(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_weakAssign(*(void *)(*(void *)a1 + 32LL) + 144LL, v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }

  free(v3);
}

void sub_1000C4894(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  uint64_t v13 = v6 + 144;
  swift_weakInit(v6 + 144, 0LL);
  __int128 v14 = a1[3];
  *(_OWORD *)(v6 + 48) = a1[2];
  *(_OWORD *)(v6 + 64) = v14;
  *(_OWORD *)(v6 + 8sub_100070810(0, 0LL, 0) = a1[4];
  __int128 v15 = a1[1];
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = *a1;
  *(_OWORD *)(v6 + 32) = v15;
  *(void *)(v6 + 96) = a2;
  *(void *)(v6 + 12sub_100070810(0, 0LL, 0) = a3;
  *(void *)(v6 + 128) = a4;
  *(_BYTE *)(v6 + 136) = a5;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v30 = a2;
    }
    else {
      uint64_t v30 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v16) {
      goto LABEL_3;
    }
LABEL_50:
    swift_bridgeObjectRelease(a2);
    uint64_t v17 = 0LL;
    goto LABEL_51;
  }

  uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v16) {
    goto LABEL_50;
  }
LABEL_3:
  if (v16 < 1)
  {
    __break(1u);
    return;
  }

  uint64_t v37 = a6;
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    while (1)
    {
      uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a2);
      uint64_t v21 = *(const IOUSBEndpointDescriptor **)(v20 + 16);
      if (IOUSBGetEndpointType(v21) == 1)
      {
        if (!IOUSBGetEndpointUsageType(v21) && v21->wMaxPacketSize > 8u || IOUSBGetEndpointUsageType(v21) == 2)
        {
          if (!v18)
          {
            uint64_t v18 = v20;
            goto LABEL_8;
          }
        }

        else
        {
          int v23 = IOUSBGetEndpointUsageType(v21);
          if (v23 == 1)
          {
            if (!v17) {
              goto LABEL_23;
            }
          }

          else if (!v23 && v21->wMaxPacketSize <= 8u && v17 == 0)
          {
LABEL_23:
            uint64_t v17 = v20;
            goto LABEL_8;
          }
        }
      }

      swift_unknownObjectRelease(v20, v22);
LABEL_8:
      if (v16 == ++v19) {
        goto LABEL_43;
      }
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  for (uint64_t i = 0LL; i != v16; ++i)
  {
    uint64_t v26 = *(void *)(a2 + 8 * i + 32);
    uint64_t v27 = *(const IOUSBEndpointDescriptor **)(v26 + 16);
    swift_retain(v26);
    if (IOUSBGetEndpointType(v27) != 1)
    {
LABEL_26:
      swift_release(v26);
      continue;
    }

    if (!IOUSBGetEndpointUsageType(v27) && v27->wMaxPacketSize > 8u || IOUSBGetEndpointUsageType(v27) == 2)
    {
      if (v18) {
        goto LABEL_26;
      }
      uint64_t v18 = v26;
    }

    else
    {
      int v28 = IOUSBGetEndpointUsageType(v27);
      if (v28 == 1)
      {
        if (v17) {
          goto LABEL_26;
        }
      }

      else
      {
        if (v28) {
          goto LABEL_26;
        }
        if (v27->wMaxPacketSize > 8u || v17 != 0) {
          goto LABEL_26;
        }
      }

      uint64_t v17 = v26;
    }
  }

void *ActiveStreamingAltInterface.deinit()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_weakDestroy(v0 + 18);
  return v0;
}

uint64_t ActiveStreamingAltInterface.__deallocating_deinit()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_weakDestroy(v0 + 18);
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

Swift::Int sub_1000C4CB0(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  Swift::Int v27 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = a2 + 56;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }

    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v11 >= v28) {
      return 1LL;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v28) {
        return 1LL;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v28) {
          return 1LL;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v4);
        if (!v12)
        {
          int64_t v4 = v11 + 3;
          if (v11 + 3 >= v28) {
            return 1LL;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v4);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_1000C4F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v8 + 24) = 0LL;
  uint64_t v16 = swift_unknownObjectWeakInit(v8 + 80, 0LL);
  __int128 v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v8 + 48) = v17;
  *(void *)(v8 + 64) = *(void *)(a1 + 32);
  *(void *)(v8 + 72) = a2;
  swift_beginAccess(v16, v22, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v8 + 80, a3);
  uint64_t v18 = 0LL;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a4;
  *(void *)(v8 + 88) = a5;
  *(void *)(v8 + 96) = a6;
  if (!*(_BYTE *)(*(void *)a1 + 7LL))
  {
    uint64_t v19 = type metadata accessor for EndpointClock(0LL);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_1000C80E4(v20);
  }

  *(void *)(v8 + 12sub_100070810(0, 0LL, 0) = v18;
  return v8;
}

uint64_t sub_1000C4FEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    unint64_t v4 = 0LL;
    uint64_t v47 = v2 + 32;
    uint64_t v48 = v2 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v49 = v2 & 0xC000000000000001LL;
    uint64_t v46 = v2;
    while (v49)
    {
      uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      BOOL v6 = __OFADD__(v4++, 1LL);
      if (v6) {
        goto LABEL_29;
      }
LABEL_10:
      uint64_t active = ActiveStreamingInterface.clock()();
      uint64_t v9 = v8;
      uint64_t ObjectType = swift_getObjectType(active);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 96))(ObjectType, v9) & 1) != 0
        && (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(ObjectType, v9)) != 0)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v12 + 16);
        unint64_t v15 = sub_1000C7424();
        uint64_t v16 = Set.init(minimumCapacity:)(v14, &type metadata for ClockRateRange, v15);
        unint64_t v51 = (void *)v16;
        uint64_t v18 = *(void *)(v13 + 16);
        if (v18)
        {
          uint64_t v19 = (Swift::UInt *)(v13 + 48);
          do
          {
            Swift::UInt v20 = *(v19 - 2);
            Swift::UInt v21 = *(v19 - 1);
            Swift::UInt v22 = *v19;
            v19 += 3;
            sub_100051494(v50, v20, v21, v22);
            --v18;
          }

          while (v18);
          swift_unknownObjectRelease(active, v23);
          swift_bridgeObjectRelease(v13);
          uint64_t v24 = v51;
        }

        else
        {
          uint64_t v24 = (void *)v16;
          swift_unknownObjectRelease(active, v17);
          swift_bridgeObjectRelease(v13);
        }
      }

      else
      {
        swift_unknownObjectRelease(active, v11);
        uint64_t v24 = &_swiftEmptySetSingleton;
      }

      uint64_t v25 = ActiveStreamingInterface.clock()();
      uint64_t v27 = v26;
      uint64_t v28 = swift_getObjectType(v25);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v27 + 96))(v28, v27) & 1) != 0
        && (uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 40))(v28, v27)) != 0)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)(v30 + 16);
        unint64_t v33 = sub_1000C7424();
        uint64_t v34 = Set.init(minimumCapacity:)(v32, &type metadata for ClockRateRange, v33);
        unint64_t v51 = (void *)v34;
        uint64_t v36 = *(void *)(v31 + 16);
        if (v36)
        {
          uint64_t v37 = (Swift::UInt *)(v31 + 48);
          do
          {
            Swift::UInt v38 = *(v37 - 2);
            Swift::UInt v39 = *(v37 - 1);
            Swift::UInt v40 = *v37;
            v37 += 3;
            sub_100051494(v50, v38, v39, v40);
            --v36;
          }

          while (v36);
          swift_unknownObjectRelease(v25, v41);
          swift_bridgeObjectRelease(v31);
          unint64_t v42 = v51;
          uint64_t v2 = v46;
        }

        else
        {
          unint64_t v42 = (void *)v34;
          swift_unknownObjectRelease(v25, v35);
          swift_bridgeObjectRelease(v31);
        }
      }

      else
      {
        swift_unknownObjectRelease(v25, v29);
        unint64_t v42 = &_swiftEmptySetSingleton;
      }

      char v43 = sub_1000C4CB0((Swift::Int)v24, (uint64_t)v42);
      swift_release(v5);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) != 0 || v4 == v3) {
        goto LABEL_36;
      }
    }

    if (v4 >= *(void *)(v48 + 16)) {
      goto LABEL_30;
    }
    uint64_t v5 = *(void *)(v47 + 8 * v4);
    swift_retain(v5);
    BOOL v6 = __OFADD__(v4++, 1LL);
    if (!v6) {
      goto LABEL_10;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    if (v2 < 0) {
      uint64_t v44 = v2;
    }
    else {
      uint64_t v44 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v44);
  }

  char v43 = 0;
LABEL_36:
  swift_bridgeObjectRelease(v2);
  return v43 & 1;
}

uint64_t sub_1000C53B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  while (v3)
  {
    unint64_t v4 = 0LL;
    uint64_t v47 = v2 + 32;
    uint64_t v48 = v2 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v49 = v2 & 0xC000000000000001LL;
    uint64_t v46 = v2;
    while (v49)
    {
      uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      BOOL v6 = __OFADD__(v4++, 1LL);
      if (v6) {
        goto LABEL_29;
      }
LABEL_10:
      uint64_t active = ActiveStreamingInterface.clock()();
      uint64_t v9 = v8;
      uint64_t ObjectType = swift_getObjectType(active);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 96))(ObjectType, v9) & 1) != 0
        && (uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(ObjectType, v9)) != 0)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)(v12 + 16);
        unint64_t v15 = sub_1000C7424();
        uint64_t v16 = Set.init(minimumCapacity:)(v14, &type metadata for ClockRateRange, v15);
        unint64_t v51 = (void *)v16;
        uint64_t v18 = *(void *)(v13 + 16);
        if (v18)
        {
          uint64_t v19 = (Swift::UInt *)(v13 + 48);
          do
          {
            Swift::UInt v20 = *(v19 - 2);
            Swift::UInt v21 = *(v19 - 1);
            Swift::UInt v22 = *v19;
            v19 += 3;
            sub_100051494(v50, v20, v21, v22);
            --v18;
          }

          while (v18);
          swift_unknownObjectRelease(active, v23);
          swift_bridgeObjectRelease(v13);
          uint64_t v24 = v51;
        }

        else
        {
          uint64_t v24 = (void *)v16;
          swift_unknownObjectRelease(active, v17);
          swift_bridgeObjectRelease(v13);
        }
      }

      else
      {
        swift_unknownObjectRelease(active, v11);
        uint64_t v24 = &_swiftEmptySetSingleton;
      }

      uint64_t v25 = ActiveStreamingInterface.clock()();
      uint64_t v27 = v26;
      uint64_t v28 = swift_getObjectType(v25);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v27 + 96))(v28, v27) & 1) != 0
        && (uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 40))(v28, v27)) != 0)
      {
        uint64_t v31 = v30;
        uint64_t v32 = *(void *)(v30 + 16);
        unint64_t v33 = sub_1000C7424();
        uint64_t v34 = Set.init(minimumCapacity:)(v32, &type metadata for ClockRateRange, v33);
        unint64_t v51 = (void *)v34;
        uint64_t v36 = *(void *)(v31 + 16);
        if (v36)
        {
          uint64_t v37 = (Swift::UInt *)(v31 + 48);
          do
          {
            Swift::UInt v38 = *(v37 - 2);
            Swift::UInt v39 = *(v37 - 1);
            Swift::UInt v40 = *v37;
            v37 += 3;
            sub_100051494(v50, v38, v39, v40);
            --v36;
          }

          while (v36);
          swift_unknownObjectRelease(v25, v41);
          swift_bridgeObjectRelease(v31);
          unint64_t v42 = v51;
          uint64_t v2 = v46;
        }

        else
        {
          unint64_t v42 = (void *)v34;
          swift_unknownObjectRelease(v25, v35);
          swift_bridgeObjectRelease(v31);
        }
      }

      else
      {
        swift_unknownObjectRelease(v25, v29);
        unint64_t v42 = &_swiftEmptySetSingleton;
      }

      char v43 = sub_1000C4CB0((Swift::Int)v24, (uint64_t)v42);
      swift_release(v5);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) == 0 || v4 == v3) {
        goto LABEL_36;
      }
    }

    if (v4 >= *(void *)(v48 + 16)) {
      goto LABEL_30;
    }
    uint64_t v5 = *(void *)(v47 + 8 * v4);
    swift_retain(v5);
    BOOL v6 = __OFADD__(v4++, 1LL);
    if (!v6) {
      goto LABEL_10;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    if (v2 < 0) {
      uint64_t v44 = v2;
    }
    else {
      uint64_t v44 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v44);
  }

  char v43 = 1;
LABEL_36:
  swift_bridgeObjectRelease(v2);
  return v43 & 1;
}

void *sub_1000C5784(unint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  if (*a1 >> 62) {
    goto LABEL_58;
  }
  if (*(uint64_t *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10) < 1)
  {
LABEL_62:
    Swift::UInt v22 = _swiftEmptyArrayStorage;
LABEL_63:
    else {
      uint64_t v29 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    a1 = (unint64_t *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v30) {
      goto LABEL_51;
    }
LABEL_43:
    unint64_t v23 = (unint64_t)_swiftEmptyArrayStorage >> 62;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      else {
        unint64_t v33 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
      }
      swift_bridgeObjectRetain();
      Swift::UInt v39 = v33;
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v33);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v34 < 1) {
        goto LABEL_51;
      }
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v39);
      Swift::Int result = (void *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (!v35)
      {
LABEL_90:
        __break(1u);
        return result;
      }

      swift_bridgeObjectRetain();
      Swift::UInt v22 = (unint64_t *)_CocoaArrayWrapper.endIndex.getter(v39);
      a1 = (unint64_t *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      unint64_t v23 = (unint64_t)_swiftEmptyArrayStorage >> 62;
      if (!v22)
      {
        __break(1u);
        goto LABEL_81;
      }
    }

    else if (!*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_51;
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001LL) == 0)
    {
      unint64_t v24 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (!v24)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }

      Swift::UInt v22 = (unint64_t *)_swiftEmptyArrayStorage[4];
      a1 = (unint64_t *)swift_retain(v22);
      if (!v23) {
        goto LABEL_48;
      }
      goto LABEL_82;
    }

LABEL_82:
    else {
      uint64_t v36 = (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    }
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v36);
    a1 = (unint64_t *)swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v37)
    {
LABEL_49:
      uint64_t v25 = sub_10009B0B8(0LL, 1LL);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      a1 = *(unint64_t **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v24 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if ((unint64_t)a1 < v24 >> 1)
      {
LABEL_50:
        uint64_t v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(a1, v22);
        specialized Array._endMutation()(v26);
        goto LABEL_51;
      }

LABEL_88:
      Swift::UInt v38 = a1;
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, (char *)a1 + 1, 1LL);
      a1 = v38;
      goto LABEL_50;
    }

    goto LABEL_86;
  }

  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v3 = (unint64_t)v2 >> 62;
        if ((unint64_t)v2 >> 62)
        {
          if (v2 < 0) {
            uint64_t v6 = v2;
          }
          else {
            uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v6);
          Swift::Int result = (void *)swift_bridgeObjectRelease(v2);
          if (!v7)
          {
            __break(1u);
            goto LABEL_90;
          }

          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v6);
          swift_bridgeObjectRelease(v2);
          if (!v9) {
            goto LABEL_55;
          }
        }

        else if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }

        if ((v2 & 0xC000000000000001LL) != 0) {
          break;
        }
        if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          uint64_t v4 = *(void *)(v2 + 32);
          swift_retain(v4);
          if (!v3) {
            goto LABEL_8;
          }
          goto LABEL_16;
        }

LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        if (v2 < 0) {
          uint64_t v27 = v2;
        }
        else {
          uint64_t v27 = v2 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
        a1 = (unint64_t *)swift_bridgeObjectRelease(v2);
        if (v28 < 1) {
          goto LABEL_62;
        }
      }

      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
      if (!v3)
      {
LABEL_8:
        uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        goto LABEL_20;
      }

void *sub_1000C5CCC(int64_t *a1)
{
  unint64_t v81 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v82 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v80 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v77 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v78 = (uint64_t)_swiftEmptyArrayStorage;
  int64_t v5 = *a1;
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_104:
    swift_bridgeObjectRelease_n(v5, 2LL);
    uint64_t v10 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_92:
LABEL_109:
    uint64_t active = v82;
    if (!(v82 >> 62))
    {
      uint64_t v47 = *(void *)((v82 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      goto LABEL_111;
    }

LABEL_140:
    if (active < 0) {
      uint64_t v57 = active;
    }
    else {
      uint64_t v57 = active & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter(v57);
    swift_bridgeObjectRelease(active);
LABEL_111:
    uint64_t v40 = v78;
    if (v47 >= 1)
    {
      uint64_t v48 = v81;
LABEL_116:
      sub_100092BB4(active);
      swift_bridgeObjectRetain();
      sub_100092BB4(v50);
      sub_100092BB4(v48);
      uint64_t v42 = v77;
      swift_bridgeObjectRetain();
LABEL_117:
      sub_100092BB4(v51);
      sub_100092BB4(v10);
      uint64_t v43 = v79;
      goto LABEL_118;
    }

    if ((unint64_t)v78 >> 62)
    {
      if (v78 < 0) {
        uint64_t v58 = v78;
      }
      else {
        uint64_t v58 = v78 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v49 = _CocoaArrayWrapper.endIndex.getter(v58);
      swift_bridgeObjectRelease(v40);
    }

    else
    {
      uint64_t v49 = *(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v48 = v81;
    if (v49 >= 1) {
      goto LABEL_116;
    }
    if (v81 >> 62)
    {
      if ((v81 & 0x8000000000000000LL) != 0LL) {
        uint64_t v59 = v81;
      }
      else {
        uint64_t v59 = v81 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v59);
      swift_bridgeObjectRelease(v48);
    }

    else
    {
      uint64_t v53 = *(void *)((v81 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v42 = v77;
    if (v53 > 0)
    {
LABEL_125:
      sub_100092BB4(v48);
      swift_bridgeObjectRetain();
      sub_100092BB4(v54);
      sub_100092BB4(active);
      swift_bridgeObjectRetain();
      goto LABEL_117;
    }

    if ((unint64_t)v77 >> 62)
    {
      if (v77 < 0) {
        uint64_t v60 = v77;
      }
      else {
        uint64_t v60 = v77 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v61 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease(v42);
      if (v61 >= 1) {
        goto LABEL_125;
      }
    }

    else if (*(uint64_t *)((v77 & 0xFFFFFFFFFFFFF8LL) + 0x10) >= 1)
    {
      goto LABEL_125;
    }

    swift_bridgeObjectRelease(v48);
    uint64_t v62 = v79;
    if (v79 >> 62)
    {
      if ((v79 & 0x8000000000000000LL) != 0LL) {
        uint64_t v65 = v79;
      }
      else {
        uint64_t v65 = v79 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v66 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v62);
      if (v66 >= 1) {
        goto LABEL_158;
      }
    }

    else if (*(uint64_t *)((v79 & 0xFFFFFFFFFFFFF8LL) + 0x10) >= 1)
    {
LABEL_158:
      sub_100092BB4(v62);
      swift_bridgeObjectRetain();
      sub_100092BB4(v63);
      sub_100092BB4(active);
      swift_bridgeObjectRetain();
      sub_100092BB4(v64);
      uint64_t v43 = v10;
      goto LABEL_118;
    }

    swift_bridgeObjectRelease(active);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v62);
    goto LABEL_119;
  }

LABEL_3:
  unint64_t v72 = v5 & 0xC000000000000001LL;
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
  }

  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_128;
    }

    uint64_t v3 = *(void *)(v5 + 32);
    swift_retain(v3);
  }

  uint64_t v1 = *(void *)(v3 + 72);
  if (!((unint64_t)v1 >> 62))
  {
    uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_8;
    }
LABEL_132:
    swift_bridgeObjectRelease(v1);
    __break(1u);
    goto LABEL_133;
  }

LABEL_128:
  if (v1 < 0) {
    uint64_t v55 = v1;
  }
  else {
    uint64_t v55 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter(v55)) {
    goto LABEL_132;
  }
LABEL_8:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
LABEL_133:
    uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
    goto LABEL_11;
  }

  if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
LABEL_135:
    if (v4 < 0) {
      uint64_t v56 = v4;
    }
    else {
      uint64_t v56 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v4, 2LL);
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease(v4);
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_139;
  }

  uint64_t v8 = *(void *)(v1 + 32);
  swift_retain(v8);
LABEL_11:
  swift_bridgeObjectRelease(v1);
  uint64_t v9 = *(uint64_t **)(v8 + 104);
  swift_retain(v9);
  swift_release(v8);
  uint64_t v1 = (uint64_t)v9;
  uint64_t active = ActiveEndpoint.synchronizationType.getter();
  swift_release(v9);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v10 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_139:
    swift_bridgeObjectRelease(v4);
    __break(1u);
    goto LABEL_140;
  }

void sub_1000C67B4(uint64_t a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for Mirror(0LL);
  uint64_t v112 = *(void *)(v7 - 8);
  uint64_t v113 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  __int128 v122 = (char *)&v102 - v10;
  if ((a2 & 1) != 0)
  {
    unint64_t v22 = sub_10000AE14();
    uint64_t v19 = swift_allocError(&type metadata for AUAError, v22, 0LL, 0LL);
    uint64_t v21 = 130LL;
    goto LABEL_7;
  }

  uint64_t v111 = v9;
  swift_beginAccess(v2 + 16, v121, 0LL, 0LL);
  uint64_t v11 = *(void *)(v2 + 16);
  if (!v11) {
    goto LABEL_5;
  }
  uint64_t v12 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 16));
  uint64_t v109 = v2;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 232);
  swift_unknownObjectRetain(v11);
  char v15 = v14(a1, ObjectType, v12);
  swift_unknownObjectRelease(v11, v16);
  uint64_t v17 = v109;
  if (v15 == 3)
  {
LABEL_5:
    unint64_t v18 = sub_10000AE14();
    uint64_t v19 = swift_allocError(&type metadata for AUAError, v18, 0LL, 0LL);
    uint64_t v21 = 131LL;
    goto LABEL_7;
  }

  sub_100029834( 0xD000000000000029LL,  0x80000001000D3820LL,  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000028LL,  0x80000001000D2560LL,  132LL);
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v23 = (void *)0xEE00656369766544LL;
      uint64_t v24 = 0x206E776F6E6B6E55LL;
      *(void *)&__int128 v117 = 0LL;
      *((void *)&v117 + Hasher._combine(_:)(v0 & 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(36LL);
      uint64_t v25 = v17 + 80;
      swift_beginAccess(v25, v120, 0LL, 0LL);
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v25);
      if (Strong)
      {
        uint64_t v27 = Strong;
        id v28 = [Strong boxName];

        if (v28)
        {
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          uint64_t v23 = v29;
        }
      }

      v30._countAndFlagsBits = v24;
      v30._object = v23;
      String.append(_:)(v30);
      swift_bridgeObjectRelease(v23);
      v31._countAndFlagsBits = 0xD000000000000022LL;
      v31._object = (void *)0x80000001000D3880LL;
      String.append(_:)(v31);
      uint64_t v32 = *((void *)&v117 + 1);
      unint64_t v105 = (unint64_t)"usbHostInterface";
      unint64_t v104 = (unint64_t)"interruptSource()";
      sub_100029834( v117,  *((uint64_t *)&v117 + 1),  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000028LL,  0x80000001000D2560LL,  140LL);
      swift_bridgeObjectRelease(v32);
      uint64_t v33 = *(void *)(v109 + 64);
      if (v33)
      {
        uint64_t v34 = *(char **)(v33 + 16);
        if (v34)
        {
          uint64_t v102 = v4;
          uint64_t v107 = &v118;
          uint64_t v35 = swift_bridgeObjectRetain(v33);
          uint64_t v36 = 32LL;
          unint64_t v108 = 0xD000000000000016LL;
          int v106 = "activeAlternateSetting";
          unint64_t v103 = 0x80000001000CFB30LL;
          uint64_t v110 = v35;
          while (1)
          {
            __int128 v122 = v34;
            __int16 v37 = *(_WORD *)(v35 + v36);
            char v38 = *(_BYTE *)(v35 + v36 + 2);
            *((void *)&v118 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
            BYTE2(v11swift_unknownObjectWeakDestroy(v0 + 7) = v38;
            LOWORD(v11swift_unknownObjectWeakDestroy(v0 + 7) = v37;
            uint64_t v39 = Mirror.init(reflecting:)(&v117);
            uint64_t v40 = (void *)Mirror.children.getter(v39);
            uint64_t v41 = v40[2];
            uint64_t v42 = v40[3];
            uint64_t v44 = v40[4];
            uint64_t v43 = v40[5];
            uint64_t v45 = swift_getObjectType(v41);
            swift_unknownObjectRetain(v41);
            swift_unknownObjectRetain(v44);
            uint64_t v46 = dispatch thunk of _AnyIndexBox._typeID.getter(v45, v42);
            uint64_t v47 = swift_getObjectType(v44);
            if (v46 != dispatch thunk of _AnyIndexBox._typeID.getter(v47, v43)) {
              break;
            }
            char v48 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v44, v43, v45, v42);
            swift_unknownObjectRelease(v44, v49);
            if ((v48 & 1) != 0)
            {
              swift_unknownObjectRelease(v41, v50);
              __int128 v118 = 0u;
              __int128 v119 = 0u;
              __int128 v117 = 0u;
            }

            else
            {
              dispatch thunk of _AnyCollectionBox.subscript.getter(v41, v42);
              __int128 v117 = v114;
              __int128 v118 = v115;
              __int128 v119 = v116;
              swift_unknownObjectRelease(v41, v51);
            }

            uint64_t v52 = v111;
            swift_release(v40);
            (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v52, v113);
            if (*((void *)&v119 + 1))
            {
              uint64_t v54 = *((void *)&v117 + 1);
              uint64_t v53 = v117;
              sub_100017A40(v107);
              if (v54)
              {
                if (v53 == v108 && v54 == v103) {
                  goto LABEL_52;
                }
                char v55 = _stringCompareWithSmolCheck(_:_:expecting:)( v53,  v54,  v108,  (unint64_t)v106 | 0x8000000000000000LL,  0LL);
                swift_bridgeObjectRelease(v54);
                if ((v55 & 1) != 0)
                {
                  uint64_t v54 = v110;
                  goto LABEL_53;
                }
              }
            }

            else
            {
              sub_1000178B0((uint64_t)&v117, &qword_100113CD0);
            }

            v36 += 3LL;
            uint64_t v34 = v122 - 1;
            uint64_t v35 = v110;
          }

          __break(1u);
LABEL_58:
          __break(1u);
        }
      }

      return;
    }

    uint64_t v85 = v17;
    char v86 = (void *)0xEE00656369766544LL;
    uint64_t v87 = 0x206E776F6E6B6E55LL;
    *(void *)&__int128 v117 = 0LL;
    *((void *)&v117 + Hasher._combine(_:)(v0 & 1) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(41LL);
    __int128 v114 = v117;
    swift_beginAccess(v85 + 80, &v117, 0LL, 0LL);
    __int16 v88 = (void *)swift_unknownObjectWeakLoadStrong(v85 + 80);
    if (v88)
    {
      unint64_t v89 = v88;
      id v90 = [v88 boxName];

      if (v90)
      {
        uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        char v86 = v91;
      }
    }

    v92._countAndFlagsBits = v87;
    v92._object = v86;
    String.append(_:)(v92);
    swift_bridgeObjectRelease(v86);
    v93._countAndFlagsBits = 0xD000000000000027LL;
    v93._object = (void *)0x80000001000D3850LL;
    String.append(_:)(v93);
    uint64_t v94 = *((void *)&v114 + 1);
    sub_100029834( v114,  *((uint64_t *)&v114 + 1),  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000028LL,  0x80000001000D2560LL,  143LL);
    swift_bridgeObjectRelease(v94);
    unint64_t v95 = sub_10000AE14();
    uint64_t v19 = swift_allocError(&type metadata for AUAError, v95, 0LL, 0LL);
    uint64_t v21 = 144LL;
LABEL_7:
    *(_BYTE *)uint64_t v20 = 2;
    *(void *)(v20 + 8) = 0LL;
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v20 + 24) = 0xD00000000000002CLL;
    *(void *)(v20 + 32) = 0x80000001000D0890LL;
    *(void *)(v20 + 4sub_100070810(0, 0LL, 0) = 0xD000000000000028LL;
    *(void *)(v20 + 48) = 0x80000001000D2560LL;
    *(void *)(v20 + 56) = v21;
    swift_willThrow(v19);
    return;
  }

  uint64_t v56 = (void *)0xEE00656369766544LL;
  uint64_t v57 = 0x206E776F6E6B6E55LL;
  *(void *)&__int128 v117 = 0LL;
  *((void *)&v117 + Hasher._combine(_:)(v0 & 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_beginAccess(v17 + 80, v120, 0LL, 0LL);
  uint64_t v58 = (void *)swift_unknownObjectWeakLoadStrong(v17 + 80);
  if (v58)
  {
    uint64_t v59 = v58;
    id v60 = [v58 boxName];

    if (v60)
    {
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      uint64_t v56 = v61;
    }
  }

  v62._countAndFlagsBits = v57;
  v62._object = v56;
  String.append(_:)(v62);
  swift_bridgeObjectRelease(v56);
  v63._countAndFlagsBits = 0xD000000000000022LL;
  v63._object = (void *)0x80000001000D38B0LL;
  String.append(_:)(v63);
  uint64_t v64 = *((void *)&v117 + 1);
  unint64_t v105 = (unint64_t)"usbHostInterface";
  unint64_t v104 = (unint64_t)"interruptSource()";
  sub_100029834( v117,  *((uint64_t *)&v117 + 1),  0xD00000000000002CLL,  (void *)0x80000001000D0890LL,  0xD000000000000028LL,  0x80000001000D2560LL,  137LL);
  swift_bridgeObjectRelease(v64);
  uint64_t v65 = *(void *)(v109 + 64);
  if (v65)
  {
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66)
    {
      uint64_t v102 = v4;
      uint64_t v107 = &v118;
      uint64_t v35 = swift_bridgeObjectRetain(v65);
      uint64_t v67 = 32LL;
      unint64_t v108 = 0xD000000000000016LL;
      int v106 = "Descriptors:audioProtocol:)";
      unint64_t v103 = 0x80000001000CFB10LL;
      uint64_t v110 = v35;
      while (1)
      {
        uint64_t v111 = v66;
        __int16 v68 = *(_WORD *)(v35 + v67);
        char v69 = *(_BYTE *)(v35 + v67 + 2);
        *((void *)&v118 + Hasher._combine(_:)(v0 & 1) = &type metadata for USBDescriptorControl;
        BYTE2(v11swift_unknownObjectWeakDestroy(v0 + 7) = v69;
        LOWORD(v11swift_unknownObjectWeakDestroy(v0 + 7) = v68;
        uint64_t v70 = Mirror.init(reflecting:)(&v117);
        int64_t v71 = (void *)Mirror.children.getter(v70);
        uint64_t v72 = v71[2];
        uint64_t v73 = v71[3];
        uint64_t v75 = v71[4];
        uint64_t v74 = v71[5];
        uint64_t v76 = swift_getObjectType(v72);
        swift_unknownObjectRetain(v72);
        swift_unknownObjectRetain(v75);
        uint64_t v77 = dispatch thunk of _AnyIndexBox._typeID.getter(v76, v73);
        uint64_t v78 = swift_getObjectType(v75);
        if (v77 != dispatch thunk of _AnyIndexBox._typeID.getter(v78, v74)) {
          goto LABEL_58;
        }
        char v79 = dispatch thunk of _AnyIndexBox._isEqual(to:)(v75, v74, v76, v73);
        swift_unknownObjectRelease(v75, v80);
        if ((v79 & 1) != 0)
        {
          swift_unknownObjectRelease(v72, v81);
          __int128 v118 = 0u;
          __int128 v119 = 0u;
          __int128 v117 = 0u;
        }

        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter(v72, v73);
          __int128 v117 = v114;
          __int128 v118 = v115;
          __int128 v119 = v116;
          swift_unknownObjectRelease(v72, v82);
        }

        swift_release(v71);
        (*(void (**)(char *, uint64_t))(v112 + 8))(v122, v113);
        if (*((void *)&v119 + 1))
        {
          uint64_t v54 = *((void *)&v117 + 1);
          uint64_t v83 = v117;
          sub_100017A40(v107);
          if (v54)
          {
            if (v83 == v108 && v54 == v103)
            {
LABEL_52:
              swift_bridgeObjectRelease(v110);
LABEL_53:
              swift_bridgeObjectRelease(v54);
              ActiveStreamingInterface.auaStream.getter();
              if (v96)
              {
                uint64_t v97 = v96;
                uint64_t v98 = swift_unknownObjectWeakLoadStrong(&v96[OBJC_IVAR___AUAStream_audioDevice]);
                if (v98)
                {
                  uint64_t v99 = (void *)v98;
                  uint64_t v100 = swift_allocObject(&unk_100108C20, 24LL, 7LL);
                  *(void *)(v100 + swift_unknownObjectWeakDestroy(v0 + 16) = v99;
                  id v101 = v99;
                  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)( 0xD00000000000002CLL,  v105 | 0x8000000000000000LL,  0xD000000000000028LL,  v104 | 0x8000000000000000LL,  154LL,  (uint64_t)sub_1000C748C,  v100);

                  swift_release(v100);
                }
              }

              return;
            }

            char v84 = _stringCompareWithSmolCheck(_:_:expecting:)( v83,  v54,  v108,  (unint64_t)v106 | 0x8000000000000000LL,  0LL);
            swift_bridgeObjectRelease(v54);
            if ((v84 & 1) != 0)
            {
              uint64_t v54 = v110;
              goto LABEL_53;
            }
          }
        }

        else
        {
          sub_1000178B0((uint64_t)&v117, &qword_100113CD0);
        }

        v67 += 3LL;
        uint64_t v66 = v111 - 1;
        uint64_t v35 = v110;
        if (v111 == 1)
        {
LABEL_51:
          swift_bridgeObjectRelease(v35);
          return;
        }
      }
    }
  }

uint64_t sub_1000C7274(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1000C72B4()
{
  unint64_t result = qword_1001169C8;
  if (!qword_1001169C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AUAStreamingInterfaceControlSelector,  &type metadata for AUAStreamingInterfaceControlSelector);
    atomic_store(result, (unint64_t *)&qword_1001169C8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AUAStreamingInterfaceControlSelector( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = 1;
  }
  else {
    LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000C7344 + 4 * byte_1000DCD25[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C7378 + 4 * asc_1000DCD20[v4]))();
}

uint64_t sub_1000C7378(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000C7380(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C7388LL);
  }
  return result;
}

uint64_t sub_1000C7394(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C739CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000C73A0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1000C73A8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AUAStreamingInterfaceControlSelector()
{
  return &type metadata for AUAStreamingInterfaceControlSelector;
}

uint64_t type metadata accessor for ActiveStreamingInterface()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore24ActiveStreamingInterface);
}

uint64_t type metadata accessor for ActiveStreamingAltInterface()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore27ActiveStreamingAltInterface);
}

uint64_t type metadata accessor for StreamingInterfaceUtil()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore22StreamingInterfaceUtil);
}

unint64_t sub_1000C7424()
{
  unint64_t result = qword_100116CF8;
  if (!qword_100116CF8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for ClockRateRange,  &type metadata for ClockRateRange);
    atomic_store(result, (unint64_t *)&qword_100116CF8);
  }

  return result;
}

uint64_t sub_1000C7468()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C748C()
{
}

uint64_t sub_1000C7494()
{
  uint64_t v0 = type metadata accessor for OSSignposter(0LL);
  sub_100017A94(v0, qword_1001172B0);
  sub_100008EC4(v0, (uint64_t)qword_1001172B0);
  return OSSignposter.init(subsystem:category:)( 0xD000000000000013LL,  0x80000001000CC390LL,  0xD000000000000010LL,  0x80000001000D3AA0LL);
}

id sub_1000C7514()
{
  __int16 v1 = *(void **)(v0 + 24);
  id v8 = 0LL;
  unsigned int v2 = [v1 abortWithOption:1 error:&v8];
  id v3 = v8;
  if (v2)
  {
    id v4 = v8;
  }

  else
  {
    id v5 = v8;
    uint64_t v6 = _convertNSErrorToError(_:)(v3);

    swift_willThrow();
    sub_100029840( 0xD000000000000011LL,  0x80000001000D3BC0LL,  0x292874726F6261LL,  (void *)0xE700000000000000LL,  0xD00000000000001ELL,  0x80000001000D3A60LL,  35LL);
    swift_errorRelease(v6);
  }

  return [*(id *)(v0 + 16) wait];
}

id sub_1000C761C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void **)(v7 + 16);
  id result = [v14 increment];
  if ((_DWORD)result)
  {
    id v23 = v14;
    uint64_t v25 = *(void **)(v7 + 24);
    uint64_t v16 = (void *)swift_allocObject(&unk_100108DA0, 40LL, 7LL);
    v16[2] = a6;
    v16[3] = a7;
    v16[4] = v7;
    aBlock[4] = sub_1000C9C44;
    id v28 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000C77D8;
    aBlock[3] = &unk_100108DB8;
    unsigned int v24 = a5;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v18 = a4;
    uint64_t v19 = v28;
    sub_10001718C(a6, a7);
    swift_retain(v7);
    swift_release(v19);
    aBlock[0] = 0LL;
    unsigned int v20 = [v25 enqueueIORequestWithData:a1 transactionList:a2 transactionListCount:a3 firstFrameNumber:v18 options:v24 error:aBlock c ompletionHandler:v17];
    _Block_release(v17);
    id result = aBlock[0];
    if (!v20)
    {
      uint64_t v21 = result;
      _convertNSErrorToError(_:)(result);

      swift_willThrow(v22);
      return (id)swift_willThrow([v23 decrement]);
    }
  }

  return result;
}

id sub_1000C77CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  return sub_1000C7964(a1, a2, a3, a4, a5, (void (*)(void, uint64_t))sub_1000CA874);
}

id sub_1000C77DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)(v3 + 16);
  id result = [v7 increment];
  if ((_DWORD)result)
  {
    uint64_t v9 = *(void **)(v3 + 24);
    uint64_t v10 = (void *)swift_allocObject(&unk_100108D50, 40LL, 7LL);
    _OWORD v10[2] = a2;
    v10[3] = a3;
    v10[4] = v3;
    aBlock[4] = sub_1000C9BD0;
    uint64_t v17 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1000C77D8;
    aBlock[3] = &unk_100108D68;
    uint64_t v11 = _Block_copy(aBlock);
    uint64_t v12 = v17;
    sub_10001718C(a2, a3);
    swift_retain(v3);
    swift_release(v12);
    aBlock[0] = 0LL;
    unsigned int v13 = [v9 enqueueIORequestWithData:a1 completionTimeout:aBlock error:v11 completionHandler:0.0];
    _Block_release(v11);
    id result = aBlock[0];
    if (!v13)
    {
      uint64_t v14 = result;
      _convertNSErrorToError(_:)(result);

      swift_willThrow(v15);
      return (id)swift_willThrow([v7 decrement]);
    }
  }

  return result;
}

id sub_1000C7964( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t))
{
  if (a3)
  {
    swift_retain(a4);
    a3(a1, a2);
    a6(a3, a4);
  }

  return [*(id *)(a5 + 16) decrement];
}

uint64_t sub_1000C79D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

uint64_t sub_1000C7A1C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t ActiveEndpoint.staticEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C7A54(v1 + 16, a1);
}

uint64_t sub_1000C7A54(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveEndpoint.transfersPerMS.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t ActiveEndpoint.MSPerTransfer.getter()
{
  return *(void *)(v0 + 104);
}

uint64_t ActiveEndpoint.direction.getter()
{
  return IOUSBGetEndpointDirection(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

uint64_t ActiveEndpoint.maxTransferSize.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t ActiveEndpoint.transferType.getter()
{
  return IOUSBGetEndpointType(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

uint64_t ActiveEndpoint.usageType.getter()
{
  uint64_t v1 = *(const IOUSBEndpointDescriptor **)(v0 + 16);
  uint64_t result = IOUSBGetEndpointUsageType(v1);
  if (!(_DWORD)result) {
    return v1->wMaxPacketSize < 9u;
  }
  return result;
}

uint64_t ActiveEndpoint.synchronizationType.getter()
{
  uint64_t v1 = *(const IOUSBEndpointDescriptor **)(v0 + 16);
  uint64_t result = IOUSBGetEndpointSynchronizationType(v1);
  if (!(_DWORD)result)
  {
    else {
      return 3LL;
    }
  }

  return result;
}

uint64_t ActiveEndpoint.address.getter()
{
  return IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v0 + 16));
}

id ActiveEndpoint.usbDevice.getter()
{
  return *(id *)(v0 + 128);
}

uint64_t ActiveEndpoint.lockDelay.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

void sub_1000C7B74(uint64_t a1, char *a2, unsigned __int8 a3)
{
  int v6 = a3;
  __int128 v7 = *(_OWORD *)(a1 + 16);
  __int128 v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 64) = v8;
  *(_OWORD *)(v3 + 8sub_100070810(0, 0LL, 0) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v7;
  *(void *)(v3 + 12sub_100070810(0, 0LL, 0) = 0LL;
  *(void *)(v3 + 128) = a2;
  uint64_t v9 = OBJC_IVAR____TtC9AUASDCore9USBDevice_speed;
  uint32_t v10 = *(_DWORD *)&a2[OBJC_IVAR____TtC9AUASDCore9USBDevice_speed];
  uint64_t v11 = *(const IOUSBEndpointDescriptor **)a1;
  uint64_t v12 = *(const IOUSBSuperSpeedEndpointCompanionDescriptor **)(a1 + 8);
  unsigned int v13 = *(const IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor **)(a1 + 16);
  sub_1000561DC((void *)a1);
  uint64_t v14 = a2;
  *(void *)(v3 + 112) = IOUSBGetEndpointBurstSize(v10, v11, v12, v13);
  if (!v6)
  {

    sub_100056220((void *)a1);
    if (*(_BYTE *)(v3 + 41) == 1)
    {
      *(int64x2_t *)(v3 + 96) = vdupq_n_s64(1uLL);
      return;
    }

    unsigned int v19 = *(unsigned __int8 *)(v3 + 40);
    if (v19 >= 0x40) {
      uint64_t v18 = 0LL;
    }
    else {
      uint64_t v18 = 1LL << v19;
    }
    goto LABEL_17;
  }

  unsigned int bInterval = v11->bInterval;
  sub_100056220((void *)a1);
  int v16 = *(_DWORD *)&a2[v9];
  if ((v16 - 3) >= 4)
  {
    if (v16 != 1)
    {
      sub_100029834( 0xD000000000000021LL,  0x80000001000D3C30LL,  0xD000000000000032LL,  (void *)0x80000001000D3C60LL,  0xD00000000000001ELL,  0x80000001000D3A60LL,  155LL);

      *(void *)(v3 + 96) = 0LL;
      *(void *)(v3 + 104) = 0LL;
      return;
    }

    char v17 = bInterval - 1;
    if (((bInterval - 1) & 0xFFFFFF00) == 0)
    {
LABEL_9:
      if ((v17 & 0xC0) != 0) {
        uint64_t v18 = 0LL;
      }
      else {
        uint64_t v18 = 1LL << v17;
      }
LABEL_17:
      *(void *)(v3 + 96) = 1LL;
      *(void *)(v3 + 104) = v18;
      return;
    }
  }

  else
  {

    if (bInterval >= 5)
    {
      char v17 = bInterval - 4;
      goto LABEL_9;
    }

    *(void *)(v3 + 104) = 1LL;
    if (((bInterval - 1) & 0xFFFFFF00) == 0)
    {
      *(void *)(v3 + 96) = 8uLL >> (bInterval - 1);
      return;
    }

    __break(1u);
  }

  __break(1u);
}

void sub_1000C7D44(void *a1, char a2)
{
  unsigned int v5 = IOUSBGetEndpointAddress(*(const IOUSBEndpointDescriptor **)(v2 + 16));
  id v35 = 0LL;
  id v6 = [a1 copyPipeWithAddress:v5 error:&v35];
  id v7 = v35;
  if (v6)
  {
    __int128 v8 = v6;
    uint64_t v9 = type metadata accessor for AbortSafeUSBHostPipe();
    uint64_t v10 = swift_allocObject(v9, 32LL, 7LL);
    *(void *)(v10 + 24) = v8;
    id v11 = objc_allocWithZone((Class)&OBJC_CLASS___AbortWaitLock);
    id v12 = v7;
    id v13 = v8;
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = [v11 init];
    [v13 idleTimeout];
    uint64_t v14 = *(void *)(v2 + 120);
    *(void *)(v2 + 12sub_100070810(0, 0LL, 0) = v10;
    swift_release(v14);
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v15 = *(void *)(*(void *)(v2 + 128) + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (!v15 || !sub_10001645C(17LL, v15)) {
      goto LABEL_7;
    }
    id v35 = 0LL;
    unsigned int v16 = [v13 setIdleTimeout:&v35 error:2000.0];
    id v17 = v35;
    if (v16)
    {
      id v18 = v35;
LABEL_7:

      return;
    }

    id v21 = v35;
    uint64_t v22 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v23);
    uint64_t v38 = v22;
    swift_errorRetain(v22);
    uint64_t v24 = sub_100008E00(&qword_100113400);
    unint64_t v25 = sub_100019D40();
    if (swift_dynamicCast(&v37, &v38, v24, v25, 0LL))
    {
      swift_errorRelease(v22);
      uint64_t v26 = v37;
      id v35 = 0LL;
      uint64_t v36 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(54LL);
      v27._countAndFlagsBits = 0x20726F727245LL;
      v27._object = (void *)0xE600000000000000LL;
      String.append(_:)(v27);
      id v28 = [v26 description];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      Swift::String v31 = v30;

      v32._countAndFlagsBits = v29;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v31);
      v33._countAndFlagsBits = 0xD00000000000002ELL;
      v33._object = (void *)0x80000001000D3B60LL;
      String.append(_:)(v33);
      uint64_t v34 = v36;
      sub_100029840( (uint64_t)v35,  v36,  0xD000000000000019LL,  (void *)0x80000001000D3B90LL,  0xD00000000000001ELL,  0x80000001000D3A60LL,  173LL);

      swift_bridgeObjectRelease(v34);
    }

    swift_errorRelease(v38);
  }

  else
  {
    id v19 = v35;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow(v20);
  }

uint64_t ActiveEndpoint.deinit()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_release(*(void *)(v0 + 120));

  return v0;
}

uint64_t ActiveEndpoint.__deallocating_deinit()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_release(*(void *)(v0 + 120));

  return swift_deallocClassInstance(v0, 136LL, 7LL);
}

Swift::UInt *sub_1000C80E4(uint64_t a1)
{
  uint64_t v2 = v1;
  v1[2] = 0LL;
  if (qword_100112940 != -1) {
    goto LABEL_36;
  }
  while (1)
  {
    uint64_t v4 = type metadata accessor for OSSignposter(0LL);
    uint64_t v5 = sub_100008EC4(v4, (uint64_t)qword_1001172B0);
    uint64_t v6 = OSSignposter.logHandle.getter(v5);
    OSSignpostID.init(log:)(v6);
    *(Swift::UInt *)((char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp) = 0LL;
    id v7 = &qword_100116000;
    __int128 v8 = (char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate;
    *(void *)__int128 v8 = 0LL;
    v8[8] = 1;
    *(Swift::UInt *)((char *)v2 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_altSettings) = a1;
    uint64_t v39 = &_swiftEmptySetSingleton;
    if (!((unint64_t)a1 >> 62))
    {
      uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (!v9) {
        break;
      }
      goto LABEL_4;
    }

    uint64_t v25 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v25);
    if (!v9) {
      break;
    }
LABEL_4:
    unint64_t v10 = 0LL;
    uint64_t v36 = a1;
    unint64_t v37 = a1 & 0xC000000000000001LL;
    uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v35 = v9;
    Swift::String v32 = v2;
    uint64_t v33 = a1 + 32;
    while (v37)
    {
      uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      BOOL v12 = __OFADD__(v10++, 1LL);
      if (v12) {
        goto LABEL_34;
      }
LABEL_13:
      uint64_t v13 = *(void *)(v11 + 96);
      if ((unint64_t)v13 >> 62)
      {
        if (v13 < 0) {
          uint64_t v23 = *(void *)(v11 + 96);
        }
        else {
          uint64_t v23 = v13 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*(void *)(v11 + 96));
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v23);
        if (v14)
        {
LABEL_15:
          uint64_t v2 = (Swift::UInt *)(v13 & 0xC000000000000001LL);
          a1 = 4LL;
          while (1)
          {
            uint64_t v15 = a1 - 4;
            if (v2)
            {
              uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, v13);
              uint64_t v17 = a1 - 3;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_33;
              }
            }

            else
            {
              uint64_t v16 = *(void *)(v13 + 8 * a1);
              swift_retain(v16);
              uint64_t v17 = a1 - 3;
              if (__OFADD__(v15, 1LL))
              {
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
            }

            uint64_t v18 = *(void *)(v16 + 80);
            if (v18)
            {
              uint64_t v19 = *(void *)(v18 + 16);
              if (v19) {
                break;
              }
            }

            swift_release(v16);
            ++a1;
            if (v17 == v14)
            {
              swift_release(v11);
              swift_bridgeObjectRelease(v13);
              uint64_t v9 = v35;
              a1 = v36;
              goto LABEL_6;
            }
          }

          swift_bridgeObjectRetain(*(void *)(v16 + 80));
          swift_bridgeObjectRelease(v13);
          uint64_t v2 = (Swift::UInt *)(v18 + 48);
          a1 = v36;
          do
          {
            Swift::UInt v20 = *(v2 - 2);
            Swift::UInt v21 = *(v2 - 1);
            Swift::UInt v22 = *v2;
            v2 += 3;
            sub_100051494((Swift::UInt *)v38, v20, v21, v22);
            --v19;
          }

          while (v19);
          swift_release(v11);
          swift_release(v16);
          swift_bridgeObjectRelease(v18);
          uint64_t v9 = v35;
          goto LABEL_6;
        }
      }

      else
      {
        uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(*(void *)(v11 + 96));
        if (v14) {
          goto LABEL_15;
        }
      }

      swift_release(v11);
      swift_bridgeObjectRelease(v13);
LABEL_6:
      if (v10 == v9)
      {
        swift_bridgeObjectRelease(a1);
        uint64_t v24 = v39;
        uint64_t v2 = v32;
        id v7 = &qword_100116000;
        goto LABEL_42;
      }
    }

    if (v10 >= *(void *)(v34 + 16)) {
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v33 + 8 * v10);
    swift_retain(v11);
    BOOL v12 = __OFADD__(v10++, 1LL);
    if (!v12) {
      goto LABEL_13;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_once(&qword_100112940, sub_1000C7494);
  }

  swift_bridgeObjectRelease(a1);
  uint64_t v24 = &_swiftEmptySetSingleton;
LABEL_42:
  swift_bridgeObjectRetain_n(v24, 2LL);
  uint64_t v26 = sub_100051068((uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  v38[0] = (uint64_t)v26;
  sub_1000C9C68(v38);
  swift_bridgeObjectRelease_n(v24, 2LL);
  uint64_t v27 = v38[0];
  uint64_t v28 = sub_1000230C8(0LL, v38[0]);
  uint64_t v29 = (char *)v2 + v7[480];
  *(void *)uint64_t v29 = v28;
  _BYTE v29[8] = 0;
  Swift::UInt v30 = v2[2];
  void v2[2] = v27;
  swift_bridgeObjectRelease(v30);
  return v2;
}

uint64_t sub_1000C8450(uint64_t ObjectType, int a2)
{
  uint64_t v3 = v2;
  LODWORD(sub_100091E10(attribute, controlSelector, v3, v4) = a2;
  uint64_t v6 = (void *)0xEF65746152676E69LL;
  unint64_t v7 = 0xD00000000000001ELL;
  uint64_t v8 = 0x6C706D6153727563LL;
  uint64_t v127 = type metadata accessor for Mirror(0LL);
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  unint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v17 = (unint64_t)&v95 - v16;
  uint64_t v18 = "AUASDCore/ActiveEndpoint.swift";
  if ((v4 & 1) != 0)
  {
    unint64_t v19 = sub_10000AE14();
    uint64_t v20 = swift_allocError(&type metadata for AUAError, v19, 0LL, 0LL);
    *(_BYTE *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0LL;
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v21 + 24) = 0x6C706D6153727563LL;
    *(void *)(v21 + 32) = 0xEF65746152676E69LL;
    *(void *)(v21 + 4sub_100070810(0, 0LL, 0) = 0xD00000000000001ELL;
    *(void *)(v21 + 48) = 0x80000001000D3A60LL;
    *(void *)(v21 + 56) = 232LL;
    swift_willThrow(v20);
    Swift::UInt v22 = "AUASDCore/ActiveEndpoint.swift";
    unint64_t v23 = 0LL;
    goto LABEL_46;
  }

  uint64_t v24 = *(void *)&v3[OBJC_IVAR____TtC9AUASDCore13EndpointClock_altSettings];
  uint64_t v118 = v13;
  uint64_t v117 = v14;
  unint64_t v116 = v15;
  if ((v24 & 0xC000000000000001LL) != 0)
  {
LABEL_52:
    unint64_t v7 = ObjectType;
    uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v24);
  }

  else
  {
    if (!*(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }

    unint64_t v7 = ObjectType;
    uint64_t v25 = swift_retain(*(void *)(v24 + 32));
  }

  uint64_t v120 = v25;
  uint64_t v26 = v25 + 144;
  swift_beginAccess(v25 + 144, v136, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v26);
  if (!Strong
    || (uint64_t v28 = Strong,
        swift_beginAccess(Strong + 16, v135, 0LL, 0LL),
        uint64_t v29 = *(void *)(v28 + 16),
        uint64_t v111 = *(void *)(v28 + 24),
        swift_unknownObjectRetain(v29),
        swift_release(v28),
        (uint64_t v115 = v29) == 0))
  {
    unint64_t v79 = sub_10000AE14();
    uint64_t v80 = swift_allocError(&type metadata for AUAError, v79, 0LL, 0LL);
    *(_BYTE *)uint64_t v81 = 13;
    *(void *)(v81 + 8) = 0LL;
    *(void *)(v81 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
    *(void *)(v81 + 24) = 0x6C706D6153727563LL;
    *(void *)(v81 + 32) = v6;
    *(void *)(v81 + 4sub_100070810(0, 0LL, 0) = 0xD00000000000001ELL;
    *(void *)(v81 + 48) = (unint64_t)(v18 - 32) | 0x8000000000000000LL;
    *(void *)(v81 + 56) = 235LL;
    swift_willThrow(v80);
    Swift::UInt v22 = v18;
    uint64_t v20 = v80;
    swift_release(v120);
    uint64_t ObjectType = v7;
    unint64_t v23 = v7;
    goto LABEL_46;
  }

  uint64_t v8 = *(void *)(v120 + 96);
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v30 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    __n128 v32 = swift_bridgeObjectRetain();
    uint64_t ObjectType = v7;
    if (v30) {
      goto LABEL_10;
    }
LABEL_58:
    swift_unknownObjectRelease(v115, v31);
    swift_bridgeObjectRelease(v8);
    swift_release(v120);
    goto LABEL_47;
  }

LABEL_55:
  uint64_t v93 = v8;
  if (v8 >= 0) {
    v8 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  swift_bridgeObjectRetain();
  uint64_t v94 = v8;
  uint64_t v8 = v93;
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v94);
  uint64_t ObjectType = v7;
  if (!v30) {
    goto LABEL_58;
  }
LABEL_10:
  unint64_t v7 = v17;
  unint64_t v17 = 0LL;
  uint64_t v103 = 0LL;
  uint64_t v110 = &v3[OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID];
  uint64_t v113 = v8 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v112 = v8 + 32;
  uint64_t v100 = (char *)&v132 + 8;
  __int128 v122 = &v133;
  v32.n128_u64[0] = 134217984LL;
  __n128 v99 = v32;
  unint64_t v109 = 0x80000001000D3AF0LL;
  uint64_t v33 = v18 - 32;
  uint64_t v18 = (const char *)(v8 & 0xC000000000000001LL);
  id v101 = v33;
  unint64_t v108 = (unint64_t)v33 | 0x8000000000000000LL;
  unint64_t v121 = (unint64_t)"iting sample rate ";
  unint64_t v119 = 0x80000001000D3B20LL;
  int v107 = v4;
  unint64_t v105 = v3;
  uint64_t v104 = ObjectType;
  unint64_t v98 = v7;
  uint64_t v106 = v8;
  uint64_t v97 = v30;
  unint64_t v96 = v8 & 0xC000000000000001LL;
  while (1)
  {
    if (v18)
    {
      uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v8);
      BOOL v35 = __OFADD__(v17++, 1LL);
      if (v35) {
        goto LABEL_51;
      }
    }

    else
    {
      if (v17 >= *(void *)(v113 + 16)) {
        goto LABEL_54;
      }
      uint64_t v34 = swift_retain(*(void *)(v112 + 8 * v17));
      BOOL v35 = __OFADD__(v17++, 1LL);
      if (v35)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
    }

    uint64_t v36 = *(void *)(v34 + 72);
    if (v36)
    {
      uint64_t v37 = *(void *)(v34 + 80);
      if (v37)
      {
        if (*(void *)(v37 + 16)) {
          break;
        }
      }
    }

uint64_t sub_1000C9040(unint64_t a1)
{
  uint64_t v4 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)v29 - v9;
  uint64_t result = mach_absolute_time();
  unint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_lastSamplingRateChangedTimestamp);
  unint64_t v13 = result - v12;
  if (result < v12)
  {
    __break(1u);
  }

  else if (qword_100112948 == -1)
  {
    goto LABEL_3;
  }

  uint64_t result = swift_once(&qword_100112948, sub_1000CA978);
LABEL_3:
  if ((_DWORD)qword_1001172D0 != HIDWORD(qword_1001172D0))
  {
    if (!is_mul_ok(v13, qword_1001172D0))
    {
      __break(1u);
      goto LABEL_18;
    }

    if (!HIDWORD(qword_1001172D0))
    {
      __break(1u);
      goto LABEL_20;
    }

    unint64_t v13 = v13 * qword_1001172D0 / HIDWORD(qword_1001172D0);
  }

  BOOL v14 = a1 > v13 / 0x3E8;
  a1 -= v13 / 0x3E8;
  if (!v14) {
    return result;
  }
  if (HIDWORD(a1))
  {
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
    __break(1u);
    return result;
  }

  v29[1] = v2;
  if (qword_100112940 != -1) {
LABEL_18:
  }
    swift_once(&qword_100112940, sub_1000C7494);
  uint64_t v15 = type metadata accessor for OSSignposter(0LL);
  sub_100008EC4(v15, (uint64_t)qword_1001172B0);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v17 = v16(v10, v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID, v4);
  uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
  os_signpost_type_t v19 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v16(v8, (uint64_t)v10, v4);
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    LODWORD(v3sub_100070810(0, 0LL, 0) = a1;
    uint64_t v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v20 + 4, v20 + 8);
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter(v21);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  v19,  v22,  "EndpointClock_finalizeClock",  "delay %u us",  v20,  8u);
    swift_slowDealloc(v20, -1LL, -1LL);

    unint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v10, v4);
    v23(v8, v4);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  uint64_t v30 = 0LL;
  uint64_t v31 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(53LL);
  v24._countAndFlagsBits = 0x676E6979616C6544LL;
  v24._object = (void *)0xE900000000000020LL;
  String.append(_:)(v24);
  int v32 = a1;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  object = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 0xD00000000000002ALL;
  v27._object = (void *)0x80000001000CE5D0LL;
  String.append(_:)(v27);
  uint64_t v28 = v31;
  sub_100029834( v30,  v31,  0xD000000000000016LL,  (void *)0x80000001000CE640LL,  0xD00000000000001ELL,  0x80000001000D3A60LL,  269LL);
  swift_bridgeObjectRelease(v28);
  return usleep(a1);
}

uint64_t sub_1000C93F8()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)((char *)v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_altSettings));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_1000C9460()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate);
}

uint64_t sub_1000C9478(uint64_t a1, char a2)
{
  return sub_1000C8450(a1, a2 & 1);
}

uint64_t (*sub_1000C9480(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  char v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate + 8);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate);
  *(_BYTE *)(a1 + 8) = v2;
  return sub_1000C94B0;
}

uint64_t sub_1000C94B0(uint64_t a1)
{
  return sub_1000C8450(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000C94DC()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1000C94E4(unint64_t a1)
{
  return sub_1000C9040(a1);
}

void sub_1000C94F8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore13EndpointClock_cachedSamplingRate;
  *(void *)uint64_t v1 = 0LL;
  *(_BYTE *)(v1 + 8) = 1;
}

uint64_t sub_1000C9514(uint64_t result, char a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 & 1;
    swift_bridgeObjectRetain(*(void *)(v2 + 16));
    uint64_t v7 = (uint64_t *)(v3 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      uint64_t ObjectType = swift_getObjectType(v8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24);
      swift_unknownObjectRetain(v8);
      v11(v5, v6, ObjectType, v9);
      swift_unknownObjectRelease(v8, v12);
      v7 += 2;
      --v4;
    }

    while (v4);
    return swift_bridgeObjectRelease(v3);
  }

  return result;
}

uint64_t sub_1000C95D0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1[2]) {
    return 0LL;
  }
  uint64_t v3 = v1[4];
  uint64_t v2 = v1[5];
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  swift_unknownObjectRetain(v3);
  uint64_t v6 = v5(ObjectType, v2);
  swift_unknownObjectRelease(v3, v7);
  return v6;
}

void sub_1000C9648()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 16));
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t ObjectType = swift_getObjectType(v4);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 88);
      swift_unknownObjectRetain(v4);
      v7(ObjectType, v5);
      swift_unknownObjectRelease(v4, v8);
      v3 += 2;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease(v1);
  }

void sub_1000C96E8()
{
  uint64_t v1 = &_swiftEmptySetSingleton;
  os_signpost_type_t v19 = &_swiftEmptySetSingleton;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    unint64_t v4 = 0LL;
    while (v4 < *(void *)(v2 + 16))
    {
      uint64_t v5 = (void *)(v2 + 32 + 16 * v4);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[1];
      uint64_t ObjectType = swift_getObjectType(*v5);
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
      swift_unknownObjectRetain(v6);
      uint64_t v10 = v9(ObjectType, v7);
      if (v10)
      {
        uint64_t v12 = v10;
        uint64_t v13 = *(void *)(v10 + 16);
        if (v13)
        {
          BOOL v14 = (Swift::UInt *)(v10 + 48);
          do
          {
            Swift::UInt v15 = *(v14 - 2);
            Swift::UInt v16 = *(v14 - 1);
            Swift::UInt v17 = *v14;
            v14 += 3;
            sub_100051494(v18, v15, v16, v17);
            --v13;
          }

          while (v13);
        }

        swift_unknownObjectRelease(v6, v11);
        swift_bridgeObjectRelease(v12);
      }

      else
      {
        swift_unknownObjectRelease(v6, v11);
      }

      if (++v4 == v3)
      {
        swift_bridgeObjectRelease(v2);
        uint64_t v1 = v19;
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
    if (v1[2]) {
      sub_100051068((uint64_t)v1);
    }
    swift_bridgeObjectRelease(v1);
  }

uint64_t sub_1000C9828(uint64_t result)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = result;
    swift_bridgeObjectRetain(*(void *)(v1 + 16));
    for (uint64_t i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      uint64_t v7 = *(i - 1);
      uint64_t v8 = *i;
      uint64_t ObjectType = swift_getObjectType(v7);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 72);
      swift_unknownObjectRetain(v7);
      v10(v5, ObjectType, v8);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease(v7, v11);
      if (!--v4) {
        return swift_bridgeObjectRelease(v3);
      }
    }

    swift_bridgeObjectRelease(v3);
    return swift_unknownObjectRelease(v7, v12);
  }

  return result;
}

uint64_t sub_1000C98EC(uint64_t result)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = result;
    swift_bridgeObjectRetain(*(void *)(v1 + 16));
    for (uint64_t i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      uint64_t v7 = *(i - 1);
      uint64_t v8 = *i;
      uint64_t ObjectType = swift_getObjectType(v7);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 80);
      swift_unknownObjectRetain(v7);
      v10(v5, ObjectType, v8);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease(v7, v11);
      if (!--v4) {
        return swift_bridgeObjectRelease(v3);
      }
    }

    swift_bridgeObjectRelease(v3);
    return swift_unknownObjectRelease(v7, v12);
  }

  return result;
}

uint64_t sub_1000C99B0()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t sub_1000C99D4()
{
  return sub_1000C95D0();
}

uint64_t sub_1000C99EC(uint64_t a1, char a2)
{
  return sub_1000C9514(a1, a2 & 1);
}

uint64_t (*sub_1000C99F4(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)a1 = sub_1000C95D0();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_1000C9A30;
}

uint64_t sub_1000C9A30(uint64_t a1)
{
  return sub_1000C9514(*(void *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1000C9A60(uint64_t a1)
{
  return sub_1000C9828(a1);
}

uint64_t sub_1000C9A74(uint64_t a1)
{
  return sub_1000C98EC(a1);
}

uint64_t type metadata accessor for AbortSafeUSBHostPipe()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore20AbortSafeUSBHostPipe);
}

uint64_t type metadata accessor for ActiveEndpoint()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore14ActiveEndpoint);
}

uint64_t sub_1000C9ACC()
{
  return type metadata accessor for EndpointClock(0LL);
}

uint64_t type metadata accessor for EndpointClock(uint64_t a1)
{
  uint64_t result = qword_100116F30;
  if (!qword_100116F30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EndpointClock);
  }
  return result;
}

uint64_t sub_1000C9B10(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = type metadata accessor for OSSignpostID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1000DCF68;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for MultiClock()
{
  return objc_opt_self(&OBJC_CLASS____TtC9AUASDCore10MultiClock);
}

id sub_1000C9BD0(uint64_t a1, uint64_t a2)
{
  return sub_1000C7964( a1,  a2,  *(void (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  (void (*)(void, uint64_t))sub_100017978);
}

uint64_t sub_1000C9BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_100070810(0, 0LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C9C04(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000C9C10()
{
  if (v0[2]) {
    swift_release(v0[3]);
  }
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_1000C9C44(uint64_t a1, uint64_t a2)
{
  return sub_1000C7964( a1,  a2,  *(void (**)(uint64_t, uint64_t))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  (void (*)(void, uint64_t))sub_1000CA874);
}

Swift::Int sub_1000C9C68(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1000CA860(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1000C9CD0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000C9CD0(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      uint64_t v89 = 0LL;
      uint64_t v90 = *a1;
      uint64_t v91 = 1LL;
      while (1)
      {
        unint64_t v92 = *(void *)(v90 + 24 * v91);
        uint64_t v93 = v89;
        do
        {
          uint64_t v94 = v90 + v93;
          if (v92 >= *(void *)(v90 + v93)) {
            break;
          }
          if (!v90) {
            goto LABEL_142;
          }
          uint64_t v95 = v90 + v93;
          __int128 v96 = *(_OWORD *)(v90 + v93 + 32);
          *(_OWORD *)(v90 + v93 + 24) = *(_OWORD *)v94;
          *(void *)(v90 + v93 + 4sub_100070810(0, 0LL, 0) = *(void *)(v94 + 16);
          *(void *)uint64_t v95 = v92;
          *(_OWORD *)(v95 + 8) = v96;
          v93 -= 24LL;
        }

        while (v93 != -24);
        ++v91;
        v89 += 24LL;
        if (v91 == v3) {
          return result;
        }
      }
    }

    goto LABEL_138;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1)
  {
LABEL_147:
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
    return result;
  }

  Swift::Int v6 = result;
  uint64_t v104 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }

    uint64_t v106 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ClockRateRange);
    *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    uint64_t v106 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  uint64_t v11 = *a1;
  uint64_t v105 = *a1 + 48;
  uint64_t v103 = *a1 - 24;
  uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v107 = v6;
  Swift::Int v108 = v3;
  uint64_t v109 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unint64_t v15 = *(void *)(v11 + 24 * v10);
      unint64_t v16 = *(void *)(v11 + 24 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        Swift::UInt v17 = (unint64_t *)(v105 + 24 * v14);
        unint64_t v18 = v15;
        while (1)
        {
          unint64_t v20 = *v17;
          v17 += 3;
          unint64_t v19 = v20;
          if (v15 < v16 == v20 >= v18) {
            break;
          }
          ++v10;
          unint64_t v18 = v19;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }

      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_139;
        }
        if (v14 < v10)
        {
          uint64_t v21 = 24 * v10;
          uint64_t v22 = 24 * v14;
          Swift::Int v23 = v10;
          Swift::Int v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11) {
                goto LABEL_145;
              }
              uint64_t v25 = v11 + v22;
              uint64_t v26 = v11 + v21;
              uint64_t v27 = *(void *)(v11 + v22 + 16);
              __int128 v28 = *(_OWORD *)(v11 + v22);
              uint64_t v29 = *(void *)(v11 + v21 - 8);
              *(_OWORD *)uint64_t v25 = *(_OWORD *)(v11 + v21 - 24);
              *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
              *(_OWORD *)(v26 - 24) = v28;
              *(void *)(v26 - 8) = v27;
            }

            ++v24;
            v21 -= 24LL;
            v22 += 24LL;
          }

          while (v24 < v23);
        }
      }
    }

    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14)) {
        goto LABEL_137;
      }
      if (v10 - v14 < v6)
      {
        Swift::Int v30 = v14 + v6;
        if (__OFADD__(v14, v6)) {
          goto LABEL_140;
        }
        if (v30 >= v3) {
          Swift::Int v30 = v3;
        }
        if (v30 < v14) {
          goto LABEL_141;
        }
        if (v10 != v30)
        {
          uint64_t v31 = v103 + 24 * v10;
          do
          {
            unint64_t v32 = *(void *)(v11 + 24 * v10);
            Swift::Int v33 = v14;
            uint64_t v34 = v31;
            do
            {
              if (v32 >= *(void *)v34) {
                break;
              }
              if (!v11) {
                goto LABEL_143;
              }
              __int128 v35 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)(v34 + 24) = *(_OWORD *)v34;
              *(void *)(v34 + 4sub_100070810(0, 0LL, 0) = *(void *)(v34 + 16);
              *(void *)uint64_t v34 = v32;
              *(_OWORD *)(v34 + 8) = v35;
              v34 -= 24LL;
              ++v33;
            }

            while (v10 != v33);
            ++v10;
            v31 += 24LL;
          }

          while (v10 != v30);
          Swift::Int v10 = v30;
        }
      }
    }

    if (v10 < v14)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      uint64_t v12 = sub_1000CA698(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v37 = *((void *)v12 + 2);
    unint64_t v36 = *((void *)v12 + 3);
    unint64_t v13 = v37 + 1;
    uint64_t v11 = v109;
    if (v37 >= v36 >> 1)
    {
      uint64_t v86 = sub_1000CA698((char *)(v36 > 1), v37 + 1, 1, v12);
      uint64_t v11 = v109;
      uint64_t v12 = v86;
    }

    *((void *)v12 + 2) = v13;
    uint64_t v38 = v12 + 32;
    uint64_t v39 = &v12[16 * v37 + 32];
    *(void *)uint64_t v39 = v14;
    *((void *)v39 + Hasher._combine(_:)(v0 & 1) = v10;
    if (v37) {
      break;
    }
    unint64_t v13 = 1LL;
LABEL_15:
    Swift::Int v6 = v107;
    Swift::Int v3 = v108;
    if (v10 >= v108)
    {
      uint64_t v9 = v106;
LABEL_104:
      __int16 v88 = v12;
      uint64_t v106 = v9;
      if (v13 < 2) {
        goto LABEL_95;
      }
      uint64_t v97 = *v104;
      while (1)
      {
        unint64_t v98 = v13 - 2;
        if (v13 < 2) {
          break;
        }
        if (!v97) {
          goto LABEL_146;
        }
        Swift::String v87 = v88;
        uint64_t v99 = *(void *)&v88[16 * v98 + 32];
        uint64_t v100 = *(void *)&v88[16 * v13 + 24];
        sub_1000CA3E4( (char *)(v97 + 24 * v99),  (char *)(v97 + 24LL * *(void *)&v88[16 * v13 + 16]),  v97 + 24 * v100,  __dst);
        if (v1) {
          goto LABEL_94;
        }
        if (v100 < v99) {
          goto LABEL_134;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0) {
          Swift::String v87 = sub_1000CA84C((uint64_t)v87);
        }
        if (v98 >= *((void *)v87 + 2)) {
          goto LABEL_135;
        }
        id v101 = &v87[16 * v98 + 32];
        *(void *)id v101 = v99;
        *((void *)v101 + Hasher._combine(_:)(v0 & 1) = v100;
        unint64_t v102 = *((void *)v87 + 2);
        if (v13 > v102) {
          goto LABEL_136;
        }
        memmove(&v87[16 * v13 + 16], &v87[16 * v13 + 32], 16 * (v102 - v13));
        __int16 v88 = v87;
        *((void *)v87 + 2) = v102 - 1;
        unint64_t v13 = v102 - 1;
        if (v102 <= 2) {
          goto LABEL_95;
        }
      }

LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }

  while (1)
  {
    unint64_t v40 = v13 - 1;
    if (v13 >= 4)
    {
      os_signpost_type_t v45 = &v38[16 * v13];
      uint64_t v46 = *((void *)v45 - 8);
      uint64_t v47 = *((void *)v45 - 7);
      BOOL v51 = __OFSUB__(v47, v46);
      uint64_t v48 = v47 - v46;
      if (v51) {
        goto LABEL_121;
      }
      uint64_t v50 = *((void *)v45 - 6);
      uint64_t v49 = *((void *)v45 - 5);
      BOOL v51 = __OFSUB__(v49, v50);
      uint64_t v43 = v49 - v50;
      char v44 = v51;
      if (v51) {
        goto LABEL_122;
      }
      unint64_t v52 = v13 - 2;
      Swift::String v53 = &v38[16 * v13 - 32];
      uint64_t v55 = *(void *)v53;
      uint64_t v54 = *((void *)v53 + 1);
      BOOL v51 = __OFSUB__(v54, v55);
      uint64_t v56 = v54 - v55;
      if (v51) {
        goto LABEL_124;
      }
      BOOL v51 = __OFADD__(v43, v56);
      uint64_t v57 = v43 + v56;
      if (v51) {
        goto LABEL_127;
      }
      if (v57 >= v48)
      {
        uint8_t v75 = &v38[16 * v40];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v51 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v51) {
          goto LABEL_131;
        }
        BOOL v68 = v43 < v78;
        goto LABEL_83;
      }
    }

    else
    {
      if (v13 != 3)
      {
        uint64_t v69 = *((void *)v12 + 4);
        uint64_t v70 = *((void *)v12 + 5);
        BOOL v51 = __OFSUB__(v70, v69);
        uint64_t v62 = v70 - v69;
        char v63 = v51;
        goto LABEL_77;
      }

      uint64_t v42 = *((void *)v12 + 4);
      uint64_t v41 = *((void *)v12 + 5);
      BOOL v51 = __OFSUB__(v41, v42);
      uint64_t v43 = v41 - v42;
      char v44 = v51;
    }

    if ((v44 & 1) != 0) {
      goto LABEL_123;
    }
    unint64_t v52 = v13 - 2;
    int v58 = &v38[16 * v13 - 32];
    uint64_t v60 = *(void *)v58;
    uint64_t v59 = *((void *)v58 + 1);
    BOOL v61 = __OFSUB__(v59, v60);
    uint64_t v62 = v59 - v60;
    char v63 = v61;
    if (v61) {
      goto LABEL_126;
    }
    char v64 = &v38[16 * v40];
    uint64_t v66 = *(void *)v64;
    uint64_t v65 = *((void *)v64 + 1);
    BOOL v51 = __OFSUB__(v65, v66);
    uint64_t v67 = v65 - v66;
    if (v51) {
      goto LABEL_129;
    }
    if (__OFADD__(v62, v67)) {
      goto LABEL_130;
    }
    if (v62 + v67 >= v43)
    {
      BOOL v68 = v43 < v67;
LABEL_83:
      if (v68) {
        unint64_t v40 = v52;
      }
      goto LABEL_85;
    }

uint64_t sub_1000CA3E4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 24;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v26 = __src;
  uint64_t v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst) {
        memmove(__dst, a2, 24 * v11);
      }
      unint64_t v16 = &v4[24 * v11];
      Swift::Int v24 = v16;
      uint64_t v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        unint64_t v17 = a3 - 24;
        unint64_t v18 = v6;
        while (1)
        {
          unint64_t v19 = (char *)(v17 + 24);
          unint64_t v20 = *((void *)v18 - 3);
          v18 -= 24;
          if (*((void *)v16 - 3) >= v20)
          {
            Swift::Int v24 = v16 - 24;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              __int128 v22 = *(_OWORD *)(v16 - 24);
              *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v16 - 1);
              *(_OWORD *)unint64_t v17 = v22;
            }

            unint64_t v18 = v6;
            v16 -= 24;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }

          else
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              __int128 v21 = *(_OWORD *)v18;
              *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v18 + 2);
              *(_OWORD *)unint64_t v17 = v21;
            }

            uint64_t v26 = v18;
            if (v18 <= v7) {
              goto LABEL_38;
            }
          }

          v17 -= 24LL;
          Swift::Int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_38;
          }
        }
      }

      goto LABEL_38;
    }
  }

  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    Swift::Int v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4)
          {
            __int128 v15 = *(_OWORD *)v4;
            *((void *)v7 + 2) = *((void *)v4 + 2);
            *(_OWORD *)uint64_t v7 = v15;
          }

          v4 += 24;
          uint64_t v25 = v4;
          unint64_t v13 = v6;
        }

        else
        {
          unint64_t v13 = v6 + 24;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            __int128 v14 = *(_OWORD *)v6;
            *((void *)v7 + 2) = *((void *)v6 + 2);
            *(_OWORD *)uint64_t v7 = v14;
          }
        }

        v7 += 24;
        if (v4 >= v12) {
          break;
        }
        Swift::Int v6 = v13;
      }

      while ((unint64_t)v13 < a3);
      uint64_t v26 = v7;
    }

char *sub_1000CA698(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100008E00(&qword_100117148);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  __int128 v14 = v11 + 32;
  __int128 v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000CA790(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6]) {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }

  return result;
}

char *sub_1000CA84C(uint64_t a1)
{
  return sub_1000CA698(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000CA860(uint64_t a1)
{
  return sub_1000710E0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unint64_t static MachAbsoluteUtils.machAbsoluteToNanoseconds(machAbsolute:)(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_100112948 != -1) {
    uint64_t result = swift_once(&qword_100112948, sub_1000CA978);
  }
  if ((_DWORD)qword_1001172D0 == HIDWORD(qword_1001172D0)) {
    return v1;
  }
  if (is_mul_ok(v1, qword_1001172D0))
  {
    if (HIDWORD(qword_1001172D0)) {
      return v1 * qword_1001172D0 / HIDWORD(qword_1001172D0);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t static MachAbsoluteUtils.nanosecondsToMachAbsolute(nanoseconds:)(unint64_t result)
{
  unint64_t v1 = result;
  if (qword_100112948 != -1) {
    uint64_t result = swift_once(&qword_100112948, sub_1000CA978);
  }
  if ((_DWORD)qword_1001172D0 == HIDWORD(qword_1001172D0)) {
    return v1;
  }
  if (is_mul_ok(v1, HIDWORD(qword_1001172D0)))
  {
    if ((_DWORD)qword_1001172D0) {
      return v1 * HIDWORD(qword_1001172D0) / qword_1001172D0;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

double sub_1000CA978()
{
  double v1 = 0.0;
  mach_timebase_info((mach_timebase_info_t)&v1);
  double result = v1;
  qword_1001172D0 = *(void *)&v1;
  return result;
}

ValueMetadata *type metadata accessor for MachAbsoluteUtils()
{
  return &type metadata for MachAbsoluteUtils;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_fnHALInitializeWithPluginHost(void *a1, const char *a2, ...)
{
  return _[a1 fnHALInitializeWithPluginHost];
}

id objc_msgSend_frameNumberWithTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameNumberWithTime:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_seed(void *a1, const char *a2, ...)
{
  return _[a1 seed];
}

id objc_msgSend_start_maxPeriodMach_eventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start:maxPeriodMach:eventHandler:");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_timestamps(void *a1, const char *a2, ...)
{
  return _[a1 timestamps];
}

id objc_msgSend_updateTimes(void *a1, const char *a2, ...)
{
  return _[a1 updateTimes];
}

id objc_msgSend_updateTimesWithRetries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimesWithRetries:");
}