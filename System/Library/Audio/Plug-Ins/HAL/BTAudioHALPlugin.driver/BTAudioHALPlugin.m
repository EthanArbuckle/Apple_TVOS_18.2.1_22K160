uint64_t sub_43E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  v4 = sub_2C61C(a1);
  *(void *)v4 = off_80B58;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  sub_1C2B4((os_log_t *)(v4 + 96));
  sub_1C2B4((os_log_t *)(a1 + 120));
  sub_1C2B4((os_log_t *)(a1 + 144));
  sub_1C2B4((os_log_t *)(a1 + 168));
  *(_BYTE *)(a1 + 192) = 1;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = a2;
  *(_WORD *)(a1 + 289) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0LL;
  *(_BYTE *)(a1 + 425) = 0;
  *(_DWORD *)(a1 + 428) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 452) = 0x3F8000003F800000LL;
  *(_BYTE *)(a1 + 462) = 0;
  sub_529E8(a1 + 464, v5);
  *(void *)(a1 + 528) = 0LL;
  *(_WORD *)(a1 + 536) = 256;
  *(_DWORD *)(a1 + 540) = 1065353216;
  *(_BYTE *)(a1 + 544) = 0;
  sub_529E8(a1 + 552, v6);
  *(_WORD *)(a1 + 744) = 0;
  *(_DWORD *)(a1 + 9000) = 0;
  *(void *)(a1 + 9008) = 0LL;
  *(_WORD *)(a1 + 9016) = 0;
  *(_DWORD *)(a1 + 9064) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 400) = 0LL;
  bzero((void *)(a1 + 768), 0x2008uLL);
  atomic_store(0, (unsigned __int8 *)(a1 + 288));
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0LL;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 8968) = 0u;
  *(_OWORD *)(a1 + 8984) = 0u;
  *(_OWORD *)(a1 + 9032) = 0u;
  *(_OWORD *)(a1 + 9048) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 616), 0LL);
  pthread_cond_init((pthread_cond_t *)(a1 + 680), 0LL);
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 728) = 4LL;
  return a1;
}

void sub_454C(_Unwind_Exception *a1, uint64_t a2)
{
}

uint64_t sub_459C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_80B58;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 288));
  v4 = *(void **)(a1 + 9008);
  if (v4)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9008)))
    {
      dispatch_block_cancel(v4);
      v4 = *(void **)(a1 + 9008);
    }

    _Block_release(v4);
    *(void *)(a1 + 9008) = 0LL;
  }

  v5 = *(const void **)(a1 + 200);
  if (v5) {
    CFRelease(v5);
  }
  sub_52A64(a1 + 552, a2);
  sub_52A64(a1 + 464, v6);
  return sub_2C6D4(a1);
}

void sub_4640(void *a1)
{
}

void sub_4658(_BYTE *a1, void *a2)
{
  if (sub_52814() && (xpc_object_t v4 = xpc_dictionary_get_value(a2, "kBTAudioDebugEnableAudioLogging")) != 0LL)
  {
    v5 = v4;
    if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v6 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
        sub_57BD8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    BOOL value = xpc_BOOL_get_value(v5);
  }

  else
  {
    BOOL value = 0;
  }

  sub_4928((uint64_t)a1, value);
  string = (char *)xpc_dictionary_get_string(a2, "kBTAudioMsgPropertyDeviceAddress");
  if (string)
  {
    sub_A248(v43, string);
    v16 = (void **)(a1 + 336);
    *(_OWORD *)v16 = *(_OWORD *)v43;
    *((void *)a1 + 44) = *(void *)&v43[16];
  }

  a1[425] = 0;
  xpc_object_t v17 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyVolumeIsAbsolute");
  if (xpc_get_type(v17) != (xpc_type_t)&_xpc_type_BOOL)
  {
    v18 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
      sub_57B68(v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }

  BOOL v26 = xpc_BOOL_get_value(v17);
  (*(void (**)(_BYTE *, BOOL))(*(void *)a1 + 1144LL))(a1, v26);
  xpc_object_t v27 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyIsAppleAudioDevice");
  if (v27)
  {
    if (xpc_get_type(v27) == (xpc_type_t)&_xpc_type_BOOL)
    {
      xpc_object_t v39 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyVolumeScalar");
      if (v39)
      {
        if (a1[408])
        {
          float v40 = xpc_double_get_value(v39);
          v41 = (os_log_s *)qword_8B4B0;
          if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v42 = *((void *)a1 + 25);
            *(_DWORD *)v43 = 134218242;
            *(double *)&v43[4] = v40;
            *(_WORD *)&v43[12] = 2112;
            *(void *)&v43[14] = v42;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "Received initial absolute volume of %f from bluetoothd Device %@",  v43,  0x16u);
          }

          *((float *)a1 + 108) = v40;
          *((float *)a1 + 110) = (*(float (**)(_BYTE *, float))(*(void *)a1 + 360LL))(a1, v40);
        }
      }
    }
  }

  xpc_object_t v28 = xpc_dictionary_get_value(a2, "kBTAudioDebugEnableAudioCaptures");
  v29 = v28;
  if (v28)
  {
    if (xpc_get_type(v28) != (xpc_type_t)&_xpc_type_BOOL)
    {
      v30 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
        sub_57AF8(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }

    BOOL v38 = xpc_BOOL_get_value(v29);
  }

  else
  {
    BOOL v38 = 0;
  }

  sub_49EC((uint64_t)a1, v38);
}

void sub_4928(uint64_t a1, int a2)
{
  xpc_object_t v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2) {
      v5 = "enabled";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Set plugin audio logging to: %s", (uint8_t *)&v6, 0xCu);
  }

  *(_BYTE *)(a1 + 745) = a2;
}

void sub_49EC(uint64_t a1, int a2)
{
  xpc_object_t v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2) {
      v5 = "enabled";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Set plugin audio capture to: %s", (uint8_t *)&v6, 0xCu);
  }

  *(_BYTE *)(a1 + 744) = a2;
}

uint64_t sub_4AB0(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_52B28((uint64_t)v13, a1 + 552);
  uint64_t v2 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    else {
      xpc_object_t v4 = "No";
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1040LL))(a1);
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1536LL))(a1);
    if (v5) {
      uint64_t v7 = "Yes";
    }
    else {
      uint64_t v7 = "No";
    }
    *(_DWORD *)buf = 67109890;
    int v15 = v3;
    __int16 v16 = 2082;
    xpc_object_t v17 = v4;
    __int16 v18 = 2082;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "InitializeIOStreams audioObjectID: %u hasOutput: %{public}s hasInput: %{public}s PCM Packetizaton Threshold: %u",  buf,  0x22u);
  }

  uint64_t v8 = calloc(1uLL, 0x418uLL);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 1664LL))(a1, v8);
  *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) = 64;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 1656LL))(a1, *(unsigned int *)(a1 + 380));
    size_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1640LL))(a1);
    uint64_t v10 = calloc(v9, 1uLL);
    (*(void (**)(uint64_t, void *))(*(void *)a1 + 1648LL))(a1, v10);
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1))
  {
    *(void *)(a1 + 760) = 16450LL;
    *(void *)(a1 + 752) = calloc(1uLL, 0x8084uLL);
  }

  if (*(_BYTE *)(a1 + 745)) {
    mach_timebase_info((mach_timebase_info_t)(a1 + 9020));
  }
  uint64_t v11 = operator new(0x50uLL);
  sub_1A8C0((uint64_t)v11, a1);
  *(void *)(a1 + 16) = v11;
  sub_52C5C(v13);
  return 0LL;
}

void sub_4CEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4D1C(uint64_t a1)
{
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_52B28((uint64_t)v3, a1 + 552);
  sub_4D7C(a1, 0);
  *(_BYTE *)(a1 + 192) = 0;
  return sub_52C5C(v3);
}

void sub_4D68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4D7C(uint64_t a1, int a2)
{
  xpc_object_t v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "NO";
    if (a2) {
      int v5 = "YES";
    }
    int v6 = 136446210;
    uint64_t v7 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Signaling audio start condition! %{public}s", (uint8_t *)&v6, 0xCu);
  }

  atomic_store(a2, (unsigned __int8 *)(a1 + 288));
  if (*(_BYTE *)(a1 + 460))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
    pthread_cond_signal((pthread_cond_t *)(a1 + 680));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
  }
}

uint64_t sub_4E68(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 552);
  atomic_store(0, (unsigned __int8 *)(a1 + 288));
  if (*(void *)(a1 + 208))
  {
    uint64_t v2 = (void *)sub_10FAC();
    operator delete(v2);
    *(void *)(a1 + 208) = 0LL;
  }

  v3.n128_f64[0] = sub_4FC0((FILE **)a1);
  if (*(void *)(a1 + 16))
  {
    xpc_object_t v4 = (void *)nullsub_81(v3.n128_f64[0]);
    operator delete(v4);
    *(void *)(a1 + 16) = 0LL;
  }

  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 1624LL))(a1, v3)
    && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1))
  {
    int v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
    free(v5);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 1664LL))(a1, 0LL);
  }

  if (*(void *)(a1 + 752) && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1))
  {
    free(*(void **)(a1 + 752));
    *(void *)(a1 + 752) = 0LL;
    *(void *)(a1 + 760) = 0LL;
  }

  int v6 = *(void **)(a1 + 400);
  if (v6)
  {
    operator delete(v6);
    *(void *)(a1 + 400) = 0LL;
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
  pthread_cond_signal((pthread_cond_t *)(a1 + 680));
  sub_500C(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 616));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 680));
  return sub_52C5C(v8);
}

void sub_4FAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_4FC0(FILE **a1)
{
  uint64_t v2 = a1 + 1129;
  fclose(a1[1129]);
  fclose(a1[1130]);
  fclose(a1[1131]);
  fclose(a1[1132]);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  return result;
}

void *sub_500C(uint64_t a1)
{
  double result = *(void **)(a1 + 80);
  if (result)
  {
    free(result);
    double result = (void *)sub_1C480(a1 + 168);
    *(void *)(a1 + 80) = 0LL;
  }

  return result;
}

uint64_t sub_5040(uint64_t a1, double a2)
{
  xpc_object_t v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(double *)(a1 + 296);
    int v9 = 67109120;
    unsigned int v10 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT Audio jitter: Update sample rate to %d", (uint8_t *)&v9, 8u);
  }

  double v6 = *(double *)(a1 + 296);
  if (v6 != a2)
  {
    uint64_t v7 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109376;
      unsigned int v10 = v6;
      __int16 v11 = 1024;
      unsigned int v12 = a2;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "BT Audio mPhysicalFormat.mSampleRate %d, sampleRate %d",  (uint8_t *)&v9,  0xEu);
    }

    *(double *)(a1 + 296) = a2;
  }

  return 0LL;
}

void sub_5168(uint64_t a1, int a2, const void *a3, size_t a4)
{
  if (*(_BYTE *)(a1 + 744))
  {
    int v18 = 0;
    memset(__filename, 0, sizeof(__filename));
    __int16 v16 = 0;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    memset(&v12, 0, sizeof(v12));
    time_t v11 = time(0LL);
    localtime_r(&v11, &v12);
    sprintf( v13,  "%d_%d_%d_%d_%d_%d",  v12.tm_year + 1900,  v12.tm_mon + 1,  v12.tm_mday,  v12.tm_hour,  v12.tm_min,  v12.tm_sec);
    int v8 = sub_340E8();
    int v9 = "/private/var/mobile/tmp/com.apple.audiomxd";
    if (v8) {
      int v9 = "/Library/Preferences/Audio";
    }
    switch(a2)
    {
      case 0:
        unsigned int v10 = *(FILE **)(a1 + 9032);
        if (v10) {
          goto LABEL_14;
        }
        sprintf((char *)__filename, "%s/inputEncodedCapture-%s.enc", v9, v13);
        unsigned int v10 = fopen((const char *)__filename, "wb");
        *(void *)(a1 + 9032) = v10;
        break;
      case 1:
        unsigned int v10 = *(FILE **)(a1 + 9040);
        if (v10) {
          goto LABEL_14;
        }
        sprintf((char *)__filename, "%s/inputRawCapture-%s.pcm", v9, v13);
        unsigned int v10 = fopen((const char *)__filename, "wb");
        *(void *)(a1 + 9040) = v10;
        break;
      case 2:
        unsigned int v10 = *(FILE **)(a1 + 9048);
        if (v10) {
          goto LABEL_14;
        }
        sprintf((char *)__filename, "%s/outputEncodedCapture-%s.enc", v9, v13);
        unsigned int v10 = fopen((const char *)__filename, "wb");
        *(void *)(a1 + 9048) = v10;
        break;
      case 3:
        unsigned int v10 = *(FILE **)(a1 + 9056);
        if (v10) {
          goto LABEL_14;
        }
        sprintf((char *)__filename, "%s/outputRawCapture-%s.pcm", v9, v13);
        unsigned int v10 = fopen((const char *)__filename, "wb");
        *(void *)(a1 + 9056) = v10;
        break;
      default:
        if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
          sub_57C48();
        }
        return;
    }

    if (v10) {
LABEL_14:
    }
      fwrite(a3, 1uLL, a4, v10);
  }

void sub_53BC(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1280LL))(a1) && *(_BYTE *)(a1 + 424))
  {
    (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(v9, a1, 0LL);
    bzero(a3, (v10 * a2));
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 1568LL))(a1, a2, a3);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
    {
      uint64_t v6 = *(void *)(a1 + 400);
      if (v6)
      {
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 24));
        if ((v7 & 1) != 0)
        {
          int v8 = *(_DWORD **)(a1 + 400);
          (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(v9, a1, 0LL);
          sub_155AC(v8, (float *)a3, a2, v9);
        }
      }
    }
  }

void sub_54A4(uint64_t a1, unsigned int a2, const float *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    sub_1AFFC(v4, a2, a3, a4);
  }
}

void sub_54B4(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    sub_1AC74(v4, a2, a3, a4);
  }
}

uint64_t sub_54C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_52B28((uint64_t)v27, (uint64_t)(a1 + 69));
  if (a1[27])
  {
    uint64_t v6 = sub_14CC4(a1[3]);
    uint64_t v7 = a1[27];
    uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24LL))(v7, a3, a2, v8, 64LL);
    unint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    while (1)
    {
      if (v9 >= *(unsigned int *)(*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1))
      {
        int v22 = sub_52814();
        if (v10 < 0xC) {
          int v23 = v22;
        }
        else {
          int v23 = 0;
        }
        if (v23 == 1 && v10 && *(_DWORD *)(a1[27] + 52) == 33023) {
          sub_527A8(36LL, v6, 0LL, 0LL, 0LL);
        }
        return sub_52C5C(v27);
      }

      size_t v11 = *(unsigned int *)((*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1) + 16 * v9 + 12);
      if ((_DWORD)v11) {
        break;
      }
LABEL_31:
      ++v9;
    }

    if (v11 > (*(unsigned int (**)(uint64_t *))(*a1 + 768))(a1))
    {
      tm v12 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
        sub_57CF4(v30, &v31, v12);
      }
    }

    if (v11 > (*(unsigned int (**)(uint64_t *))(*a1 + 768))(a1))
    {
      uint64_t v24 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR))
      {
        int v25 = (*(uint64_t (**)(uint64_t *))(*a1 + 768))(a1);
        sub_57CA0(buf, v11, v25, v24);
      }

      return sub_52C5C(v27);
    }

    uint64_t v13 = a1[27];
    if (v6)
    {
      if (!v13)
      {
LABEL_29:
        uint64_t v18 = *(unsigned int *)((*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1) + 16 * v9 + 12);
        uint64_t v19 = a1[3];
        uint64_t v20 = (*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1);
        sub_14A08(v19, *(const void **)(v20 + 16 * v9 + 16), v11);
        v6 += v11;
        ++*((_DWORD *)a1 + 2250);
        v10 += v18;
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 1672))(a1))
        {
          *((_DWORD *)a1 + 2250) = 0;
          sub_14BE8(a1[3]);
          uint64_t v6 = sub_14CC4(a1[3]);
        }

        goto LABEL_31;
      }
    }

    else
    {
      if (!v13)
      {
        uint64_t v6 = 0LL;
        goto LABEL_29;
      }

      if (*(_DWORD *)(v13 + 52) == 2)
      {
        else {
          __int128 v14 = &unk_6522D;
        }
        sub_14A08(a1[3], v14, 9uLL);
        unint64_t v15 = *(unsigned int *)((*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1) + 16 * v9 + 12);
        if (v15 >= 0xFF)
        {
          do
          {
            buf[0] = -1;
            sub_14A08(a1[3], buf, 1uLL);
            v15 -= 255LL;
          }

          while (v15 > 0xFE);
        }

        buf[0] = v15;
        sub_14A08(a1[3], buf, 1uLL);
        uint64_t v13 = a1[27];
        uint64_t v6 = 9LL;
        if (!v13) {
          goto LABEL_29;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }
    }

    if (*(_DWORD *)(v13 + 52) == 33023)
    {
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1) + 16 * v9 + 12) >= 0x800u)
      {
        __int16 v16 = (os_log_s *)qword_8B4B0;
        if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR))
        {
          int v21 = *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1) + 16 * v9 + 12);
          *(_DWORD *)buf = 67109120;
          int v29 = v21;
          _os_log_error_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "FATAL: Unable to correctly create AAC-ELD Size Header for %d bytes of encoded audio (max: 0x7FF = 2047)",  buf,  8u);
        }
      }

      uint64_t v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 1624))(a1);
      v6 += (*(uint64_t (**)(uint64_t *, void))(*a1 + 1520))(a1, *(unsigned int *)(v17 + 16 * v9 + 12));
    }

    goto LABEL_29;
  }

  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
    sub_57C74();
  }
  return sub_52C5C(v27);
}

void sub_5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_5950(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_1166C(v2);
  }
  *(_BYTE *)(a1 + 462) = 0;
}

uint64_t sub_597C(uint64_t a1, uint64_t a2, char *a3)
{
  v41[0] = 0LL;
  v41[1] = 0LL;
  sub_52B28((uint64_t)v41, a1 + 552);
  uint64_t v40 = 0LL;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&v38, a1, 0LL);
  uint64_t v6 = *(void *)(a1 + 216);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24LL))(v6, a3, a2, v7, 64LL);
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    for (unsigned int i = 0; i < *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1); ++i)
    {
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) + 16LL * (int)i + 12))
      {
        unsigned int v11 = i;
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 216) + 32LL))(*(void *)(a1 + 216)))
        {
          else {
            BOOL v12 = HIDWORD(v39) == 1;
          }
          if (v12 || *(_DWORD *)(*(void *)(a1 + 216) + 132LL) == 1)
          {
            if (_os_feature_enabled_impl("AudioAccessoryFeatures", "SeamlessAudioTransition")
              && *(_DWORD *)(*(void *)(a1 + 216) + 52LL) == 508
              && sub_26DD4(*(void *)(*(void *)(a1 + 416) + 9248LL)))
            {
              uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              (*(void (**)(uint64_t, char *, void))(*(void *)a1 + 1528LL))( a1,  byte_8B4B8,  *(unsigned int *)(v13 + 16LL * (int)i + 12));
              __int128 v14 = *(const void **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                   + 16LL * (int)i
                                   + 16);
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              memcpy(&unk_8B4C2, v14, *(unsigned int *)(v15 + 16LL * (int)i + 12));
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              unint64_t v9 = sub_1CC40(a1 + 96, byte_8B4B8, (*(_DWORD *)(v16 + 16LL * (int)i + 12) + 10));
              uint64_t v17 = *(const void **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                   + 16LL * (int)i
                                   + 16);
              uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              sub_5168(a1, 2, v17, *(unsigned int *)(v18 + 16LL * (int)i + 12));
              if (*(_BYTE *)(a1 + 745))
              {
                uint64_t v19 = (os_log_s *)qword_8B4B0;
                if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
                {
                  int v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                  + 16LL * (int)i
                                  + 12);
                  *(_DWORD *)buf = 67109376;
                  int v43 = v20;
                  __int16 v44 = 1024;
                  int v45 = v9;
                  _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "Number of bytes to write: %d; number of bytes written: %d;",
                    buf,
                    0xEu);
                }
              }
            }

            else
            {
              int v21 = *(char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) + 16LL * (int)i + 16);
              uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              unint64_t v9 = sub_1CC40(a1 + 96, v21, *(unsigned int *)(v22 + 16LL * (int)i + 12));
              uint64_t v23 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                    + 16LL * (int)i
                                    + 12);
              uint64_t v24 = *(const void **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                   + 16LL * (int)i
                                   + 16);
              uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
              sub_5168(a1, 2, v24, *(unsigned int *)(v25 + 16LL * (int)i + 12));
              v8 += v23;
            }
          }

          else
          {
            xpc_object_t v28 = *(char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) + 16LL * (int)i + 16);
            size_t v29 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1)
                                  + 16LL * (int)i
                                  + 12);
            uint64_t v30 = (int)i + 1LL;
            uint64_t v31 = *(char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) + 16 * v30 + 16);
            uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
            unint64_t v9 = sub_1CD68(a1 + 96, v28, v29, v31, *(unsigned int *)(v32 + 16 * v30 + 12));
            unsigned int i = v11 + 1;
          }
        }

        else
        {
          BOOL v26 = *(char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1) + 16LL * (int)i + 16);
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1624LL))(a1);
          unint64_t v9 = sub_1CBB8(a1 + 96, v26, *(unsigned int *)(v27 + 16LL * (int)i + 12));
        }

        ++*(_DWORD *)(a1 + 9000);
      }
    }

    int v33 = sub_52814();
    if (v9 < 0xC) {
      int v34 = v33;
    }
    else {
      int v34 = 0;
    }
    if (v34 == 1)
    {
      if (v9)
      {
        int v35 = *(_DWORD *)(*(void *)(a1 + 216) + 52LL);
        if (v35 == 510 || v35 == 260) {
          sub_527A8(36LL, v9, 0LL, 0LL, 0LL);
        }
      }
    }
  }

  else
  {
    sub_1CBB8(a1 + 96, a3, (v39 * a2));
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
  }

  sub_52BF4((uint64_t)v41);
  (*(void (**)(uint64_t))(*(void *)a1 + 1584LL))(a1);
  if (!*(void *)(a1 + 216))
  {
    uint64_t v36 = *(id **)(a1 + 208);
LABEL_37:
    *(_DWORD *)(a1 + 9000) = 0;
    *(_BYTE *)(a1 + 9004) = 1;
    sub_11724(v36);
    goto LABEL_38;
  }

  if ((*(unsigned int (**)(uint64_t, void, unint64_t))(*(void *)a1 + 1672LL))( a1,  *(unsigned int *)(a1 + 9000),  v9))
  {
    if (!*(_BYTE *)(a1 + 9004))
    {
      uint64_t v36 = *(id **)(a1 + 208);
      if (v36) {
        goto LABEL_37;
      }
    }
  }

LABEL_38:
  sub_52C5C(v41);
  return v8;
}

    if (!v5 && v3 != v6) {
      goto LABEL_42;
    }
LABEL_52:
    *a3 = 0;
    return 0LL;
  }

  if (v3 > 1668641651)
  {
    if (v3 > 1735354733)
    {
      if (v3 > 1818850925)
      {
        if (v3 == 1818850926) {
          goto LABEL_52;
        }
        uint64_t v4 = 1819107691;
      }

      else
      {
        if (v3 == 1735354734) {
          goto LABEL_52;
        }
        uint64_t v4 = 1751737454;
      }

      goto LABEL_51;
    }

    unsigned int v5 = v3 == 1668641652 || v3 == 1684236338;
    uint64_t v6 = 1684434036;
    goto LABEL_38;
  }

  if (v3 <= 1668049763)
  {
    unsigned int v5 = v3 == 1635087471 || v3 == 1650682995;
    uint64_t v6 = 1668047219;
    goto LABEL_38;
  }

  if (v3 > 1668510817)
  {
    if (v3 == 1668510818) {
      goto LABEL_54;
    }
    uint64_t v4 = 1668575852;
    goto LABEL_51;
  }

  if (v3 == 1668049764) {
    goto LABEL_52;
  }
  if (v3 != 1668050795) {
    goto LABEL_42;
  }
LABEL_54:
  unint64_t v9 = *(void *)(a1 + 9120);
  if (!v9) {
    return 0LL;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32LL))(v9);
}

void sub_5EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

unint64_t sub_5F10(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  size_t v23 = 0LL;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40LL))(a2))
  {
    if (a3)
    {
      unint64_t v8 = 0LL;
      uint64_t v22 = a1 + 144;
      while (1)
      {
        if (!sub_1C4C0(a1 + 120)) {
          return v8;
        }
        unint64_t v9 = sub_1C7C4(a1 + 120, (char *)&unk_8B8B8, 0x2021uLL);
        unint64_t v10 = v9;
        if (v9 <= 1)
        {
          unsigned int v11 = (os_log_s *)qword_8B4B0;
          if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134217984;
            unint64_t v25 = v10;
            _os_log_error_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "Input Decode: Bytes read too small: bytesRead %lu",  buf,  0xCu);
          }

          goto LABEL_18;
        }

        size_t v12 = byte_8B8B9;
        *a4 += v9;
        if (v12)
        {
          *(_BYTE *)(a1 + 544) = 1;
          sub_5168(a1, 0, &unk_8B8BA, v12);
          if (!*(_BYTE *)(a1 + 544)) {
            goto LABEL_20;
          }
        }

        else
        {
          sub_5168(a1, 0, &unk_8B8BA, 0LL);
          if (!*(_BYTE *)(a1 + 544))
          {
LABEL_20:
            uint64_t v15 = (os_log_s *)qword_8B4B0;
            if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "Input Decode: This may be an invalid packet. Not decoding",  buf,  2u);
            }

            unint64_t v14 = v23;
            if (!v23) {
              goto LABEL_18;
            }
            goto LABEL_17;
          }

          unint64_t v13 = sub_1C4A4(v22);
          sub_527A8(35LL, v13, 0LL, 0LL, 0LL);
        }

        (*(void (**)(uint64_t, void *, size_t, char *, uint64_t, size_t *))(*(void *)a2 + 32LL))( a2,  &unk_8B8BA,  v12,  byte_8D8DA,  16450LL,  &v23);
        unint64_t v14 = v23;
        if (*(_BYTE *)(a1 + 536) && !v23)
        {
          (*(void (**)(uint64_t, void *, void, char *, uint64_t, size_t *))(*(void *)a2 + 32LL))( a2,  &unk_8B8BA,  0LL,  byte_8D8DA,  16450LL,  &v23);
          unint64_t v14 = v23;
        }

        v8 += v14;
        if (!v14) {
          goto LABEL_18;
        }
LABEL_17:
        sub_1CBB8(v22, byte_8D8DA, v14);
        sub_5168(a1, 1, byte_8D8DA, v23);
        size_t v23 = 0LL;
LABEL_18:
        if (v8 >= a3) {
          return v8;
        }
      }
    }

    return 0LL;
  }

  if (!a3) {
    return 0LL;
  }
  unint64_t v8 = 0LL;
  do
  {
    if (!sub_1C4C0(a1 + 120)) {
      break;
    }
    unint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
    if (!v16)
    {
      uint64_t v17 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
        sub_57D40(buf, &buf[1], v17);
      }
    }

    if (v16 >= 0x2021) {
      size_t v18 = 8225LL;
    }
    else {
      size_t v18 = v16;
    }
    size_t v19 = sub_1C754(a1 + 120, (char *)&unk_8B8B8, v18);
    sub_5168(a1, 0, &unk_8B8B8, v19);
    (*(void (**)(uint64_t, void *, size_t, char *, uint64_t, size_t *))(*(void *)a2 + 32LL))( a2,  &unk_8B8B8,  v19,  byte_8D8DA,  16450LL,  &v23);
    size_t v20 = v23;
    if (v23)
    {
      sub_1CBB8(a1 + 144, byte_8D8DA, v23);
      sub_5168(a1, 1, byte_8D8DA, v23);
      size_t v23 = 0LL;
    }

    v8 += v20;
  }

  while (v8 < a3);
  return v8;
}

uint64_t sub_62BC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, float))(*(void *)a1 + 680LL))(a1, 0LL, 1.0);
}

uint64_t sub_62D0(unsigned __int8 *a1)
{
  unsigned __int8 v2 = atomic_load(a1 + 545);
  if ((v2 & 1) != 0) {
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 1544LL))(a1);
  }
  return (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 632LL))(a1);
}

uint64_t sub_6314(uint64_t a1, int a2, BOOL *a3, _BYTE *a4)
{
  if (a3)
  {
    BOOL v5 = a2 == 1919246692 || a2 == 1919513701;
    *a3 = v5;
  }

  if (a4) {
    *a4 = 1;
  }
  return 0LL;
}

uint64_t sub_634C(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = 1852797029LL;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)a1 + 288);
  if ((v7 & 1) != 0)
  {
    if (a3 == 1919246692)
    {
      uint64_t v40 = 0LL;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      (*(void (**)(__int128 *__return_ptr, uint64_t *, uint64_t))(*a1 + 792))(&v38, a1, 1LL);
      uint64_t v26 = a1[28];
      if (v26) {
        uint64_t v27 = (__int128 *)(v26 + 80);
      }
      else {
        uint64_t v27 = &v39;
      }
      size_t v28 = (*(_DWORD *)v27 * a4);
      if ((_DWORD)v28)
      {
        bzero(a6, v28);
        uint64_t v29 = a1[28];
        uint64_t v37 = 0LL;
        if (v29)
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t *, uint64_t, size_t, uint64_t *))(*a1 + 1576))(a1, v29, v28, &v37);
          uint64_t v31 = v37;
          size_t v32 = sub_1C754((uint64_t)(a1 + 18), (char *)a6, v28);
          unint64_t v33 = sub_1C4A4((uint64_t)(a1 + 18));
        }

        else
        {
          size_t v32 = sub_1C754((uint64_t)(a1 + 15), (char *)a6, v28);
          unint64_t v33 = sub_1C4A4((uint64_t)(a1 + 15));
          sub_5168((uint64_t)a1, 1, a6, v32);
          uint64_t v31 = 0LL;
          uint64_t v30 = 0LL;
        }

        sub_527A8(30LL, v28, v32, v33, v28);
        uint64_t v34 = a1[2];
        if (v34) {
          sub_1AC74(v34, v32, (const float *)a6, v31);
        }
        if (v32 != v28)
        {
          int v35 = (os_log_s *)qword_8B4B0;
          if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218496;
            size_t v42 = v28;
            __int16 v43 = 2048;
            size_t v44 = v32;
            __int16 v45 = 2048;
            uint64_t v46 = v30;
            _os_log_error_impl( &dword_0,  v35,  OS_LOG_TYPE_ERROR,  "Input Decode: Requested %lu bytes, but only read %lu bytes instead. Decoded a total of %lu bytes",  buf,  0x20u);
          }
        }

        return 0LL;
      }

      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
        sub_57D7C();
      }
    }

    else
    {
      if (a3 != 1919513701) {
        return 0LL;
      }
      if ((*(uint64_t (**)(uint64_t *))(*a1 + 1632))(a1))
      {
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 864))(a1))
        {
          uint64_t v11 = mach_absolute_time();
          unsigned __int8 v12 = atomic_load((unsigned __int8 *)a1 + 545);
          if ((v12 & 1) != 0) {
            (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 1544))(a1, a4, v11);
          }
          (*(void (**)(uint64_t *))(*a1 + 632))(a1);
        }

        uint64_t v40 = 0LL;
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        (*(void (**)(__int128 *__return_ptr, uint64_t *, void))(*a1 + 792))(&v38, a1, 0LL);
        unint64_t v13 = (v39 * a4);
        unsigned int v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 1536))(a1);
        unsigned int v15 = v14;
        unint64_t v16 = v39 * v14;
        if (v14) {
          uint64_t v17 = v14;
        }
        else {
          uint64_t v17 = a4;
        }
        if ((_DWORD)v16) {
          unint64_t v18 = v39 * v14;
        }
        else {
          unint64_t v18 = v13;
        }
        sub_1CBB8((uint64_t)(a1 + 21), (char *)a6, v13);
        sub_527A8(31LL, v18, 0LL, 0LL, 0LL);
        uint64_t v19 = 0LL;
        do
        {
          size_t v20 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 1632))(a1);
          sub_1C754((uint64_t)(a1 + 21), v20, v18);
          int v21 = (const void *)(*(uint64_t (**)(uint64_t *))(*a1 + 1632))(a1);
          sub_5168((uint64_t)a1, 3, v21, v18);
          uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 1632))(a1);
          sub_53BC((uint64_t)a1, v17, v22);
          int v23 = (*(uint64_t (**)(uint64_t *))(*a1 + 368))(a1);
          uint64_t v24 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 1632))(a1);
          if (v23) {
            sub_54C4(a1, v17, (uint64_t)v24);
          }
          else {
            v19 += sub_597C((uint64_t)a1, v17, v24);
          }
        }

        while ((_DWORD)v16 && sub_1C4A4((uint64_t)(a1 + 21)) >= v16);
        uint64_t v25 = a1[2];
        if (v25) {
          sub_1AFFC(v25, a4, (const float *)a6, v19);
        }
        return 0LL;
      }
    }
  }

  return v6;
}

void *sub_677C(uint64_t a1, uint64_t a2, double *a3, void *a4, void *a5)
{
  uint64_t v9 = mach_absolute_time();
  unsigned int v10 = *(_DWORD *)(a1 + 376);
  if (!*(void *)(a1 + 8976))
  {
    double v11 = *(double *)&qword_95960;
    if (*(double *)&qword_95960 == 0.0)
    {
      *(double *)&mach_timebase_info info = 0.0;
      if (mach_timebase_info(&info))
      {
        qword_95960 = 0x41CDCD6500000000LL;
        double v11 = 1000000000.0;
      }

      else if (info.numer && info.denom)
      {
        double v11 = (double)info.denom / (double)info.numer * 1000000000.0;
        *(double *)&qword_95960 = v11;
      }

      else
      {
        double v11 = *(double *)&qword_95960;
      }
    }

    double v12 = v11 * (double)v10;
    (*(void (**)(mach_timebase_info *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&info, a1, 0LL);
    double v13 = v12 / *(double *)&info * *(float *)(a1 + 540);
    *(void *)(a1 + 8984) = (unint64_t)v13;
    *(void *)(a1 + 8968) = v9;
    *(void *)(a1 + 8976) = v9 + (unint64_t)v13;
    *(void *)(a1 + 8992) = 0LL;
  }

  mach_timebase_info v19 = 0LL;
  double result = (void *)mach_timebase_info(&v19);
  if (v9 >= *(void *)(a1 + 8976))
  {
    double v17 = *(double *)&qword_95960 * (double)v10;
    double result = (*(void *(**)(mach_timebase_info *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))( &info,  a1,  0LL);
    unint64_t v18 = (unint64_t)(v17 / *(double *)&info * *(float *)(a1 + 540));
    *(void *)(a1 + 8984) = v18;
    uint64_t v16 = *(void *)(a1 + 8976);
    *(void *)(a1 + 8968) = v16;
    *(void *)(a1 + 8976) = v16 + v18;
    double v15 = *(double *)(a1 + 8992) + (double)v10;
    *(double *)(a1 + 8992) = v15;
  }

  else
  {
    double v15 = *(double *)(a1 + 8992);
    uint64_t v16 = *(void *)(a1 + 8968);
  }

  *a3 = v15;
  *a4 = v16;
  *a5 = 0LL;
  return result;
}

uint64_t sub_6928(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 416) + 9256LL);
    v47[0] = BYTE3(v3);
    v47[1] = BYTE2(v3);
    v47[2] = BYTE1(v3);
    v47[3] = v3;
    v47[4] = 0;
    uint64_t v4 = *(void *)(a1 + 8960);
    uint64_t v5 = *(void *)(a1 + 200);
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392LL))(a1);
    *(_DWORD *)buf = 136447234;
    *(void *)v49 = v47;
    *(_WORD *)&v49[8] = 2048;
    *(void *)&v49[10] = v4;
    __int16 v50 = 2114;
    uint64_t v51 = v5;
    __int16 v52 = 1024;
    int v53 = v6;
    __int16 v54 = 1024;
    int v55 = v7;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "Starting IO on profile %{public}s, activeIO:%llu to %{public}@ mAudioObjectID: %u Wait IO Start %d",  buf,  0x2Cu);
  }

  int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 328LL);
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1304LL))(a1) & 1) == 0)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 840LL))(a1);
    BOOL v10 = v8 || v9 == 0;
    if (!v10 && os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_57E00();
    }
  }

  uint64_t v11 = *(void *)(a1 + 8960);
  if (v11 == -1)
  {
    uint64_t v12 = 1852797029LL;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_57DA8();
    }
    goto LABEL_47;
  }

  uint64_t v12 = 0LL;
  *(void *)(a1 + 8960) = v11 + 1;
  *(_BYTE *)(a1 + 544) = 0;
  if (v11)
  {
LABEL_47:
    int v35 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(void *)(a1 + 8960);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v49 = v12;
      *(_WORD *)&v49[4] = 2048;
      *(void *)&v49[6] = v36;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "StartIO returns %x (%llu)", buf, 0x12u);
    }

    return v12;
  }

  if (!*(void *)(a1 + 208))
  {
LABEL_44:
    uint64_t v12 = 0LL;
    *(_BYTE *)(a1 + 9004) = 0;
    goto LABEL_47;
  }

  double v13 = (pthread_mutex_t *)(a1 + 616);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15) {
    v14.n128_f64[0] = sub_1A8C8(v15);
  }
  if (*(_BYTE *)(a1 + 9017) && *(_BYTE *)(a1 + 9016))
  {
    (*(void (**)(void))(**(void **)(a1 + 416) + 1448LL))(*(void *)(a1 + 416));
    uint64_t v16 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 200);
      *(_DWORD *)buf = 138543362;
      *(void *)v49 = v17;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ : Injecting silent Audio started", buf, 0xCu);
    }

    unsigned int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 16LL))(*(void *)(a1 + 416));
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_7128;
    v45[3] = &unk_811E8;
    unsigned int v46 = v18;
    sub_3E3BC(qword_962E8, v18, v45);
  }

  sub_71B0((void *)a1);
  sub_112F8(*(id **)(a1 + 208), *(void **)(a1 + 32), *(void *)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v19 = *(void *)(a1 + 216);
  if (v19 && *(_DWORD *)(v19 + 52) == 33023) {
    (*(void (**)(uint64_t))(*(void *)a1 + 1608LL))(a1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 296LL))(a1))
  {
    uint64_t v20 = qword_962E8;
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    if (sub_3DD60(v20, v21))
    {
      uint64_t v22 = qword_962E8;
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      sub_3E060(v22, v23);
    }
  }

  if (!*(_BYTE *)(a1 + 460) || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 392LL))(a1))
  {
LABEL_42:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
    if (sub_340E8()) {
      (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 416) + 592LL))( *(void *)(a1 + 416),  0LL,  200LL);
    }
    goto LABEL_44;
  }

  uint64_t v24 = mach_absolute_time();
  if (*(_BYTE *)(a1 + 745))
  {
    uint64_t v25 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = mach_absolute_time() * *(unsigned int *)(a1 + 9020) / *(unsigned int *)(a1 + 9024) / 0x3E8;
      *(_DWORD *)buf = 134217984;
      *(void *)v49 = v26;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "start time %llus", buf, 0xCu);
    }
  }

  int v27 = pthread_cond_timedwait_relative_np( (pthread_cond_t *)(a1 + 680),  (pthread_mutex_t *)(a1 + 616),  (const timespec *)(a1 + 728));
  if (v27 == 60)
  {
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_57DD4();
    }
    dispatch_async(*(dispatch_queue_t *)(qword_962E8 + 192), &stru_81228);
  }

  if (*(_BYTE *)(a1 + 192))
  {
    if (*(_BYTE *)(a1 + 745))
    {
      size_t v28 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = mach_absolute_time() * *(unsigned int *)(a1 + 9020) / *(unsigned int *)(a1 + 9024) / 0x3E8;
        *(_DWORD *)buf = 134217984;
        *(void *)v49 = v29;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEFAULT, "response time %llus", buf, 0xCu);
      }
    }

    uint64_t v30 = mach_absolute_time();
    float v31 = sub_28FF8(*(void *)(*(void *)(a1 + 416) + 9248LL), v30 - v24, 1);
    int v32 = *(_DWORD *)(a1 + 368);
    int v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 816LL))(a1);
    uint64_t v34 = *(dispatch_queue_s **)(qword_962E8 + 192);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_7258;
    block[3] = &unk_81248;
    int v40 = 0;
    int v41 = v27;
    int v42 = v32;
    int v43 = v33;
    float v44 = v31;
    dispatch_async(v34, block);
    goto LABEL_42;
  }

  __int128 v38 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_0, v38, OS_LOG_TYPE_DEFAULT, "device No longer valid, StartIO return immediately", buf, 2u);
  }

  pthread_mutex_unlock(v13);
  return 560227702LL;
}

uint64_t sub_6FA0(uint64_t a1)
{
  return *(void *)(a1 + 200);
}

BOOL sub_6FA8(void *a1)
{
  if (!a1[4])
  {
    if ((*(unsigned int (**)(void *))(*a1 + 1032LL))(a1))
    {
      unsigned __int8 v2 = (unint64_t *)mmap(0LL, a1[5], 3, 4097, -1, 0LL);
      a1[4] = v2;
      if ((sub_1C2F0((uint64_t)(a1 + 12), v2, a1[5]) & 1) == 0)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_57E84();
        return 0LL;
      }
    }
  }

  if (!a1[6])
  {
    if ((*(unsigned int (**)(void *))(*a1 + 1040LL))(a1))
    {
      uint64_t v3 = (unint64_t *)mmap(0LL, a1[7], 3, 4097, -1, 0LL);
      a1[6] = v3;
      if ((sub_1C2F0((uint64_t)(a1 + 15), v3, a1[7]) & 1) == 0)
      {
        BOOL result = os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR);
        if (!result) {
          return result;
        }
        sub_57E58();
        return 0LL;
      }
    }
  }

  if (a1[8]) {
    return 1LL;
  }
  uint64_t v4 = (unint64_t *)mmap(0LL, a1[9], 3, 4097, -1, 0LL);
  a1[8] = v4;
  BOOL result = os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_57E2C();
    return 0LL;
  }

  return result;
}

void *sub_7128(uint64_t a1)
{
  BOOL result = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (_BYTE *)result[1137];
    if (v4 && v4[192]) {
      (*(void (**)(_BYTE *, void, void))(*(void *)v4 + 1440LL))(v4, 0LL, *(unsigned int *)(a1 + 32));
    }
    BOOL result = (void *)v3[1139];
    if (result)
    {
      if (*((_BYTE *)result + 192)) {
        return (void *)(*(uint64_t (**)(void *, void, void))(*result + 1440LL))( result,  0LL,  *(unsigned int *)(a1 + 32));
      }
    }
  }

  return result;
}

BOOL sub_71B0(void *a1)
{
  if (a1[11]) {
    size_t v1 = a1[11];
  }
  else {
    size_t v1 = 16450LL;
  }
  if (a1[10]) {
    return 1LL;
  }
  uint64_t v3 = (unint64_t *)calloc(1uLL, v1);
  a1[10] = v3;
  if (v3)
  {
  }

  BOOL result = os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_57EB0();
    return 0LL;
  }

  return result;
}

void sub_7244(id a1)
{
}

uint64_t sub_7250(uint64_t a1)
{
  return *(unsigned int *)(a1 + 368);
}

void sub_7258(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  sub_3D160(*(_DWORD *)(a1 + 40), &__p);
  sub_3CF94(v2, v3, (uint64_t *)&__p, *(unsigned int *)(a1 + 44), (unint64_t)*(float *)(a1 + 48));
}

void sub_72C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_72DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 416) + 9256LL);
    v13[0] = BYTE3(v3);
    v13[1] = BYTE2(v3);
    void v13[2] = BYTE1(v3);
    v13[3] = v3;
    v13[4] = 0;
    uint64_t v4 = *(void *)(a1 + 8960);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "StopIO on profile %{public}s, activeIO:%llu", buf, 0x16u);
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_52B28((uint64_t)buf, a1 + 552);
  uint64_t v5 = *(void *)(a1 + 8960);
  if (v5)
  {
    *(_BYTE *)(a1 + 544) = 0;
    uint64_t v6 = v5 - 1;
    *(void *)(a1 + 8960) = v6;
    if (!v6)
    {
      if (*(_BYTE *)(a1 + 9017) && *(_BYTE *)(a1 + 9016)) {
        (*(void (**)(void))(**(void **)(a1 + 416) + 1448LL))(*(void *)(a1 + 416));
      }
      uint64_t v7 = *(void *)(a1 + 216);
      if (v7 && *(_DWORD *)(a1 + 9000) && *(_DWORD *)(v7 + 52) == 33023)
      {
        sub_14BE8(*(void *)(a1 + 24));
        *(_DWORD *)(a1 + 9000) = 0;
      }

      *(_OWORD *)(a1 + 8968) = 0u;
      *(_OWORD *)(a1 + 8984) = 0u;
      (*(void (**)(uint64_t, void, float))(*(void *)a1 + 680LL))(a1, 0LL, 1.0);
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 230LL))
      {
        if (sub_340E8())
        {
          sub_20CE4(*(void *)(*(void *)(a1 + 416) + 9248LL));
          sub_1EA30(*(void **)(*(void *)(a1 + 416) + 9248LL), 1LL);
        }

        *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 232LL) = 0;
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 560LL))(a1, 0LL, 6LL);
        if ((sub_340E8() & 1) != 0) {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 416) + 592LL))( *(void *)(a1 + 416),  1LL,  200LL);
        }
        else {
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 560LL))(a1, 0LL, 7LL);
        }
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1376LL))(a1, 1LL);
      uint64_t v9 = *(void *)(a1 + 216);
      if (v9)
      {
        AudioConverterReset(*(AudioConverterRef *)(v9 + 56));
        if (*(_BYTE *)(a1 + 744)) {
          sub_10C7C(*(void *)(a1 + 216));
        }
      }

      uint64_t v10 = *(void *)(a1 + 224);
      if (v10)
      {
        AudioConverterReset(*(AudioConverterRef *)(v10 + 16));
        if (sub_1C4C0(a1 + 144)) {
          sub_1C8E0(a1 + 144);
        }
      }

      sub_4FC0((FILE **)a1);
      sub_7674(a1);
      sub_500C(a1);
      sub_76E4((_DWORD *)a1);
      *(_BYTE *)(a1 + 537) = 1;
      pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 416) + 9480LL));
      pthread_cond_broadcast((pthread_cond_t *)(*(void *)(a1 + 416) + 9544LL));
      pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(a1 + 416) + 9480LL));
    }

    uint64_t v11 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEBUG)) {
      sub_57F08((uint64_t *)(a1 + 8960), v11);
    }
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1852797029LL;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_57EDC();
    }
  }

  sub_52C5C(buf);
  return v8;
}

void sub_7658( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_7674(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 32))
  {
    sub_1C480(result + 96);
    BOOL result = munmap(*(void **)(v1 + 32), *(void *)(v1 + 40));
    *(void *)(v1 + 32) = 0LL;
  }

  if (*(void *)(v1 + 48))
  {
    sub_1C480(v1 + 120);
    BOOL result = munmap(*(void **)(v1 + 48), *(void *)(v1 + 56));
    *(void *)(v1 + 48) = 0LL;
  }

  if (*(void *)(v1 + 64))
  {
    sub_1C480(v1 + 144);
    BOOL result = munmap(*(void **)(v1 + 64), *(void *)(v1 + 72));
    *(void *)(v1 + 64) = 0LL;
  }

  return result;
}

uint64_t sub_76E4(_DWORD *a1)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 656LL))(a1);
  if ((result & 1) == 0)
  {
    unsigned int v3 = a1[99];
    int v4 = a1[97];
    if (v3 != v4)
    {
      uint64_t v5 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = a1[96];
        v7[0] = 67109632;
        v7[1] = v4;
        __int16 v8 = 1024;
        unsigned int v9 = v3;
        __int16 v10 = 1024;
        int v11 = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "LatencyUpdate Request config change mLinkLatency %u -> %u, mPluginLatency %u to HAL",  (uint8_t *)v7,  0x14u);
        unsigned int v3 = a1[99];
      }

      return (*(uint64_t (**)(_DWORD *, uint64_t, void))(*(void *)a1 + 240LL))(a1, 1819569763LL, v3);
    }
  }

  return result;
}

uint64_t sub_77E0(uint64_t a1)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, a1 + 552);
  if (*(void *)(a1 + 216)) {
    *(void *)(a1 + 216) = 0LL;
  }
  if (*(void *)(a1 + 224)) {
    *(void *)(a1 + 224) = 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 232);
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 744) || (sub_10C7C(v2), (uint64_t v2 = *(void *)(a1 + 232)) != 0)) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    *(void *)(a1 + 232) = 0LL;
  }

  uint64_t v3 = *(void *)(a1 + 240);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    *(void *)(a1 + 240) = 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 248);
  if (v4)
  {
    if (*(_BYTE *)(a1 + 744))
    {
      sub_10C7C(v4);
      uint64_t v4 = *(void *)(a1 + 248);
    }

    if (v4 == *(void *)(a1 + 272)) {
      *(void *)(a1 + 272) = 0LL;
    }
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(a1 + 248) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 272);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    *(void *)(a1 + 272) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 256);
  if (v6)
  {
    if (v6 == *(void *)(a1 + 280)) {
      *(void *)(a1 + 280) = 0LL;
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    *(void *)(a1 + 256) = 0LL;
  }

  uint64_t v7 = *(void *)(a1 + 280);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    *(void *)(a1 + 280) = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 264);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    *(void *)(a1 + 264) = 0LL;
  }

  return sub_52C5C(v10);
}

void sub_7924( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_7938(uint64_t a1, float a2)
{
  float v2 = *(float *)(a1 + 444);
  if (v2 > a2) {
    a2 = *(float *)(a1 + 444);
  }
  float v3 = *(float *)(a1 + 448);
  if (a2 > v3) {
    a2 = *(float *)(a1 + 448);
  }
  return (float)((float)(v3 - a2) / v2) + 1.0;
}

float sub_7964(uint64_t a1, float a2)
{
  return *(float *)(a1 + 448) - (float)((float)(a2 + -1.0) * *(float *)(a1 + 444));
}

uint64_t sub_797C(uint64_t a1, int a2)
{
  return sub_44110(*(uint64_t **)(a1 + 416), a2, a1);
}

float *sub_7988(float *result, float a2)
{
  float v3 = result[108];
  float v4 = result[2266];
  float v5 = v4 * a2;
  if (v3 != (float)(v4 * a2))
  {
    uint64_t v6 = result;
    result[108] = v5;
    (*(void (**)(float *, float))(*(void *)result + 328LL))(result, v4 * a2);
    uint64_t v7 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *((void *)v6 + 25);
      v11[0] = 134218754;
      *(double *)&v11[1] = v3;
      __int16 v12 = 2048;
      double v13 = v5;
      __int16 v14 = 2048;
      double v15 = a2;
      __int16 v16 = 2114;
      uint64_t v17 = v8;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Updating individual volume from MV [%f -> %f] MV = %f device %{public}@",  (uint8_t *)v11,  0x2Au);
    }

    uint64_t result = (float *)(*(uint64_t (**)(float *))(*(void *)v6 + 1272LL))(v6);
    if ((_DWORD)result)
    {
      if (!*((_BYTE *)v6 + 408))
      {
        uint64_t v9 = *((void *)v6 + 50);
        if (v9)
        {
          unsigned __int8 v10 = atomic_load((unsigned __int8 *)(v9 + 24));
          if ((v10 & 1) != 0) {
            sub_15554(*((void *)v6 + 50), v6[110]);
          }
        }
      }

      strcpy((char *)v11, "dlovptuo");
      BYTE1(v11[2]) = 0;
      HIWORD(v11[2]) = 0;
      return (float *)(*(uint64_t (**)(float *, _DWORD *))(*(void *)v6 + 248LL))(v6, v11);
    }
  }

  return result;
}

void sub_7AF4(void *a1, int a2)
{
  uint64_t v3 = *(void *)(a1[52] + 9248LL);
  if ((*(_BYTE *)(v3 + 328) != 0) != a2)
  {
    sub_29904(v3, a2);
    float v5 = (id *)a1[26];
    if (v5)
    {
      uint64_t v6 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          uint64_t v7 = "enabled";
        }
        else {
          uint64_t v7 = "disabled";
        }
        int v8 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
        int v9 = 136315394;
        unsigned __int8 v10 = v7;
        __int16 v11 = 1024;
        int v12 = v8;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter from CA is %s for device %d",  (uint8_t *)&v9,  0x12u);
        float v5 = (id *)a1[26];
      }

      sub_123F0(v5, a2);
    }
  }

uint64_t sub_7C08(uint64_t a1, char a2)
{
  return sub_29904(*(void *)(*(void *)(a1 + 416) + 9248LL), a2);
}

uint64_t sub_7C14(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 328LL);
}

uint64_t sub_7C24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 232);
  if (v1) {
    return *(unsigned int *)(v1 + 52);
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_7C3C(uint64_t a1, void **a2, BOOL a3)
{
  uint64_t v6 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 200);
    int v8 = a2;
    int v9 = "Relinquished";
    *(_DWORD *)buf = 138543874;
    uint64_t v14 = v7;
    __int16 v15 = 2082;
    if (a3) {
      int v9 = "Owned";
    }
    __int16 v16 = v8;
    __int16 v17 = 2082;
    unsigned int v18 = v9;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Update ownership state notification for %{public}s Bluetoothd as %{public}s",  buf,  0x20u);
  }

  unsigned __int8 v10 = *(id **)(a1 + 208);
  if (v10)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_A134(__p, *a2, (unint64_t)a2[1]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      int v12 = a2[2];
    }

    sub_136E8(v10, (const char *)__p, a3);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }

void sub_7D78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_7D9C(uint64_t a1, float a2)
{
  float v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_139F4(v2, a2);
  }
}

void sub_7DAC(uint64_t a1, uint64_t a2)
{
  float v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_13AE8(v2, a2);
  }
}

BOOL sub_7DBC(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 320LL) == 0;
}

float sub_7DD4(uint64_t a1, float a2)
{
  return TranslateValue(a2, 0.0, 1.0, *(float *)(a1 + 444), *(float *)(a1 + 448));
}

void *sub_7E08@<X0>(int a1@<W1>, void *a2@<X8>)
{
  uint64_t v3 = "unknown";
  if (a1 == 2) {
    uint64_t v3 = "right";
  }
  if (a1 == 1) {
    float v4 = "left";
  }
  else {
    float v4 = (char *)v3;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v4);
}

void *sub_7E40@<X0>(int a1@<W1>, void *a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      float v4 = "FiedLeft";
      return sub_A248(a2, v4);
    case 1:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      float v4 = "FixedRight";
      return sub_A248(a2, v4);
    case 0:
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      float v4 = "Auto";
      return sub_A248(a2, v4);
  }

  uint64_t v6 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
    sub_57F7C(a1, v6);
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, "Unknown");
}

uint64_t sub_7F08(uint64_t a1, __int32 *a2)
{
  if (!a2) {
    return 1852797029LL;
  }
  uint64_t v3 = *(uint64_t (***)(void, uint64_t, uint64_t, __int32 *))(qword_962E8 + 144);
  float v4 = *v3;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  uint64_t v6 = v4(v3, v5, 1LL, a2);
  if ((_DWORD)v6)
  {
    uint64_t v7 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_57FEC(a2, v7, v8);
    }
  }

  return v6;
}

uint64_t sub_7FA0(uint64_t a1)
{
  uint64_t v2 = 0x676C6F6262616366LL;
  int v3 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v2);
}

BOOL sub_7FD8(uint64_t a1)
{
  return *(void *)(a1 + 8960) != 0LL;
}

void sub_7FE8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 289);
  BOOL v2 = v1 != 0;
  unsigned __int8 v3 = v1 - 1;
  if (v2) {
    unsigned __int8 v4 = v3;
  }
  else {
    unsigned __int8 v4 = 0;
  }
  *(_BYTE *)(a1 + 289) = v4;
  uint64_t v5 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Decerement StartIO block counters pending Config Change %d",  (uint8_t *)v6,  8u);
  }

void sub_8094(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 289) = a2;
  unsigned __int8 v3 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Increment StartIO block counters pending Config Change %d",  (uint8_t *)v4,  8u);
  }

uint64_t sub_8134(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 289);
}

void sub_813C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 290);
  BOOL v2 = v1 != 0;
  unsigned __int8 v3 = v1 - 1;
  if (v2) {
    unsigned __int8 v4 = v3;
  }
  else {
    unsigned __int8 v4 = 0;
  }
  *(_BYTE *)(a1 + 290) = v4;
  uint64_t v5 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Decrement bypass StartIO counter %d", (uint8_t *)v6, 8u);
  }

void sub_81E8(uint64_t a1)
{
  *(_BYTE *)(a1 + 290) = 0;
  int v1 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 0;
    _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "Clear bypass StartIO counter %d", (uint8_t *)v2, 8u);
  }

void sub_8284(uint64_t a1)
{
  unsigned __int8 v1 = *(_BYTE *)(a1 + 290) + 1;
  *(_BYTE *)(a1 + 290) = v1;
  BOOL v2 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = v1;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Increment bypass StartIO counter %d", (uint8_t *)v3, 8u);
  }

uint64_t sub_832C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 290);
}

uint64_t sub_8334(uint64_t a1, uint64_t a2)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_52B28((uint64_t)v5, a1 + 552);
  *(void *)(a1 + 208) = a2;
  return sub_52C5C(v5);
}

uint64_t sub_8378(uint64_t a1)
{
  return *(void *)(a1 + 208);
}

uint64_t sub_8380()
{
  v0 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

uint64_t sub_83C8()
{
  return 0LL;
}

uint64_t sub_83D0(_DWORD *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 656LL))(a1);
    v7[0] = 67109376;
    v7[1] = a2;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "LatencyUpdate Set link latency to %u, dynamic %d",  (uint8_t *)v7,  0xEu);
  }

  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 656LL))(a1);
  if ((result & 1) == 0)
  {
    a1[97] = a2;
    a1[98] = a2;
  }

  return result;
}

void sub_84B0(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656LL))(a1);
  int v5 = *(void **)(a1 + 416);
  if (v5)
  {
    uint64_t v6 = v5[1156];
    if (v6) {
      LODWORD(v6) = *(unsigned __int8 *)(v6 + 328);
    }
  }

  else
  {
    LODWORD(v6) = 0;
  }

  if (v6 | v4)
  {
    *(_DWORD *)(a1 + 388) = a2;
    *(_DWORD *)(a1 + 396) = a2;
    uint64_t v7 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v8 = *(_DWORD *)(a1 + 384);
    int v16 = 67109376;
    int v17 = a2;
    __int16 v18 = 1024;
    int v19 = v8;
    int v9 = "LatencyUpdate dynamic, mLinkLatency %u, mPluginLatency %u";
    unsigned __int8 v10 = (os_log_s *)v7;
    uint32_t v11 = 14;
    goto LABEL_12;
  }

  *(_DWORD *)(a1 + 396) = a2;
  uint64_t v12 = qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 388);
    int v14 = *(_DWORD *)(a1 + 384);
    int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 984LL))(*(void *)(a1 + 416));
    int v16 = 67109632;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v14;
    __int16 v20 = 1024;
    int v21 = v15;
    int v9 = "LatencyUpdate static, mLinkLatency %u, mPluginLatency %u, IO %d";
    unsigned __int8 v10 = (os_log_s *)v12;
    uint32_t v11 = 20;
LABEL_12:
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v16, v11);
  }

uint64_t sub_8638()
{
  v0 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

uint64_t sub_8680()
{
  return 0LL;
}

uint64_t sub_8688()
{
  return 0LL;
}

uint64_t sub_8690()
{
  return 0LL;
}

uint64_t sub_8698()
{
  return 0LL;
}

uint64_t sub_86A0()
{
  return 0LL;
}

uint64_t sub_86A8()
{
  return 0LL;
}

uint64_t sub_86B0()
{
  return 0LL;
}

uint64_t sub_86B8()
{
  return 0LL;
}

uint64_t sub_86C0()
{
  return 0LL;
}

uint64_t sub_86C8()
{
  return 0LL;
}

uint64_t sub_86D0()
{
  return 0LL;
}

uint64_t sub_86D8()
{
  return 0LL;
}

uint64_t sub_86E0(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2) {
    return 1852797029LL;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = *(dispatch_queue_s **)(qword_962E8 + 168);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_8760;
  block[3] = &unk_81268;
  int v7 = a2;
  int v8 = v3;
  void block[4] = a1;
  block[5] = a3;
  dispatch_async(v4, block);
  return 0LL;
}

void sub_8760(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 48);
  if (*(_DWORD *)(a1 + 48) && *(void *)(qword_962E8 + 144) && (uint64_t v3 = *(void *)(a1 + 32), sub_3B4F4()))
  {
    uint64_t v4 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      v5.i32[0] = *v2;
      int16x8_t v6 = (int16x8_t)vmovl_u8(v5);
      *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
      unsigned __int32 v9 = vmovn_s16(v6).u32[0];
      char v10 = 0;
      int v7 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 136446466;
      uint64_t v12 = &v9;
      __int16 v13 = 1024;
      int v14 = v7;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Sending device config change for %{public}s on %d", buf, 0x12u);
    }

    (*(void (**)(void))(*(void *)(qword_962E8 + 144) + 32LL))();
  }

  else
  {
    int v8 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_ERROR)) {
      sub_580EC(v2, a1, v8);
    }
  }

uint64_t sub_88B0()
{
  return 0LL;
}

uint64_t sub_88B8()
{
  return 0LL;
}

uint64_t sub_88C0()
{
  return 0LL;
}

uint64_t sub_88C8()
{
  v0 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

BOOL sub_8910(uint64_t a1)
{
  return *(_BYTE *)(a1 + 409) != 0;
}

BOOL sub_8920(uint64_t a1)
{
  return *(_BYTE *)(a1 + 410) != 0;
}

uint64_t sub_8930()
{
  v0 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

void sub_8978(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 400);
    if (v4) {
      atomic_store(0, (unsigned __int8 *)(v4 + 24));
    }
  }

  *(_BYTE *)(a1 + 408) = a2;
  uint64_t v5 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v6 = "";
    }
    else {
      uint64_t v6 = "not";
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v8 = 136446466;
    unsigned __int32 v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Set absolute volume to %{public}s supported for device mAudioObjectID %d",  (uint8_t *)&v8,  0x12u);
  }

uint64_t sub_8A6C(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 180LL);
}

uint64_t sub_8A7C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 157LL);
}

uint64_t sub_8A8C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 200LL);
}

uint64_t sub_8A9C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 329LL);
}

uint64_t sub_8AAC(void *a1, float a2)
{
  int v4 = sub_340E8();
  if (a2 != 0.0 && v4 != 0)
  {
    uint64_t v6 = a1[52];
    uint64_t v7 = *(void *)(v6 + 9248);
    if (*(_DWORD *)(v7 + 152))
    {
      *(_DWORD *)(v7 + 152) = 0;
      sub_4CD38(v6, 1836414053);
    }
  }

  int v8 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void **)(a1[52] + 9120LL) == a1) {
      unsigned __int32 v9 = "Routed";
    }
    else {
      unsigned __int32 v9 = "Not Routed";
    }
    int v11 = 136446466;
    uint64_t v12 = v9;
    __int16 v13 = 2048;
    double v14 = a2;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Volume Update received from bluetoothd, for %{public}s Audio device volume %f",  (uint8_t *)&v11,  0x16u);
  }

  return (*(uint64_t (**)(void *, BOOL, float))(*a1 + 472LL))( a1,  *(void *)(a1[52] + 9120LL) == (void)a1,  a2);
}

void sub_8BDC(uint64_t *a1, char *__s1, void *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyVolumeScalar"))
  {
    float value = xpc_double_get_value(a3);
    (*(void (**)(uint64_t *, float))(*a1 + 352))(a1, value);
    __int16 v10 = *(void (**)(uint64_t *, __n128))(*a1 + 344);
    int v11 = a1;
    v12.n128_f32[0] = value;
LABEL_36:
    v10(v11, v12);
    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyInputVolumeScalar"))
  {
    v12.n128_f64[0] = xpc_double_get_value(a3);
    __int16 v10 = *(void (**)(uint64_t *, __n128))(*a1 + 496);
    v12.n128_f32[0] = v12.n128_f64[0];
    int v11 = a1;
    goto LABEL_36;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyLatency"))
  {
    int64_t v13 = xpc_int64_get_value(a3);
    double v14 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEBUG)) {
      sub_58174(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    (*(void (**)(uint64_t *, int64_t))(*a1 + 280))(a1, v13);
    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyVolumeIsAbsolute"))
  {
    BOOL v21 = xpc_BOOL_get_value(a3);
    uint64_t v22 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEBUG)) {
      sub_581D8(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    (*(void (**)(uint64_t *, BOOL))(*a1 + 1144))(a1, v21);
    if (v21) {
      (*(void (**)(uint64_t *))(*a1 + 504))(a1);
    }
    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyScoIsEnabled"))
  {
    xpc_object_t v29 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyScoStatus");
    xpc_object_t v30 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyScoIsEnabled");
    if (v30 && v29)
    {
      float v31 = v30;
      int64_t v32 = xpc_int64_get_value(v29);
      BOOL v33 = xpc_BOOL_get_value(v31);
      (*(void (**)(uint64_t *, int64_t, BOOL))(*a1 + 376))(a1, v32, v33);
    }

    return;
  }

  if (!strcmp(__s1, "kBTAudioMsgPropertyECNRIsEnabled"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 408);
LABEL_58:
    int64_t v41 = v34;
    int v42 = a1;
LABEL_59:
    v35(v42, v41);
    return;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyNBSSupport"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 416);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyWBSSupport"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 424);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyUWBSSupport"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 432);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyUWBSStereoSupport"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 440);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertySWBStereoSupport"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 448);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyCategory"))
  {
    int64_t v36 = xpc_int64_get_value(a3);
    (*(void (**)(uint64_t *, int64_t))(*a1 + 456))(a1, v36);
    sub_429B4(a1[52], 1684234612);
    uint64_t v37 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v38 = (*(uint64_t (**)(uint64_t *))(*a1 + 816))(a1);
    int v56 = 67109120;
    LODWORD(v57) = v38;
    __int128 v39 = "kBTAudioMsgPropertyCategory : Updated as %u";
    int v40 = (os_log_s *)v37;
    goto LABEL_55;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyDSPOffload"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 464);
    goto LABEL_58;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyBitpool"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 728);
LABEL_66:
    int64_t v41 = v43;
    int v42 = a1;
    goto LABEL_59;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyCodec"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 744);
    goto LABEL_66;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyFrameCount"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 736);
    goto LABEL_66;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyRtpInterval"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 752);
    goto LABEL_66;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyFrameLen"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 760);
    goto LABEL_66;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyLinkAdaptEncoderBitrate"))
  {
    int64_t v43 = xpc_int64_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 872);
    goto LABEL_66;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertySamplingSpeedParams"))
  {
    (*(void (**)(uint64_t *))(*a1 + 856))(a1);
    (*(void (**)(uint64_t *))(*a1 + 848))(a1);
    xpc_object_t v44 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyLatencyChangeMsec");
    xpc_object_t v45 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySamplingIntervalMultiplier");
    if (v45 && v44)
    {
      unsigned int v46 = v45;
      int64_t v47 = xpc_int64_get_value(v44);
      float v48 = xpc_double_get_value(v46);
      (*(void (**)(uint64_t *, int64_t, float))(*a1 + 680))(a1, v47, v48);
    }

    return;
  }

  if (!strcasecmp(__s1, "kBTAudioMsgPropertyDynamicClock"))
  {
    BOOL v34 = xpc_BOOL_get_value(a3);
    int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 688);
    goto LABEL_58;
  }

  if (strcasecmp(__s1, "kBTAudioMsgPropertyLowLatencyMode"))
  {
    if (strcasecmp(__s1, "kBTAudioMsgPropertyDynamicLatencyDelayMicroSec"))
    {
      if (strcasecmp(__s1, "kBTAudioMsgPropertyInputAudio"))
      {
        if (!strcasecmp(__s1, "kBTAudioMsgPropertySupportedCodecs"))
        {
          int v53 = (const void *)_CFXPCCreateCFObjectFromXPCObject(a3);
          (*(void (**)(uint64_t *, const void *))(*a1 + 896))(a1, v53);
          CFRelease(v53);
        }

        else if (!strcasecmp(__s1, "kBTAudioMsgPropertyInputSWPLCSupport"))
        {
          BOOL v54 = xpc_BOOL_get_value(a3);
          sub_953C((uint64_t)a1, v54);
        }

        else if (!strcasecmp(__s1, "kBTAudioMsgPropertyWSModeEnabled"))
        {
          BOOL v55 = xpc_BOOL_get_value(a3);
          sub_44110((uint64_t *)a1[52], v55, (uint64_t)a1);
          sub_3E078(qword_962E8);
        }

        else if (!strcasecmp(__s1, "kBTAudioMsgPropertyDynamicLatencySupported"))
        {
          BOOL v6 = xpc_BOOL_get_value(a3);
          uint64_t v7 = (os_log_s *)qword_8B4B0;
          if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
          {
            int v8 = "not supported";
            if (v6) {
              int v8 = "supported";
            }
            int v56 = 136315138;
            v57 = v8;
            _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Latency is %s", (uint8_t *)&v56, 0xCu);
          }

          (*(void (**)(uint64_t *, BOOL))(*a1 + 664))(a1, v6);
        }

        return;
      }

      BOOL v34 = xpc_BOOL_get_value(a3);
      int v35 = *(void (**)(uint64_t *, int64_t))(*a1 + 880);
      goto LABEL_58;
    }

    unint64_t v51 = xpc_int64_get_value(a3) / 0x3E8uLL;
    (*(void (**)(uint64_t *, unint64_t))(*a1 + 648))(a1, v51);
    uint64_t v52 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v56 = 67109120;
    LODWORD(v57) = v51;
    __int128 v39 = "In ear-Latency change received from BTServer, latency %uMSec";
    int v40 = (os_log_s *)v52;
LABEL_55:
    _os_log_impl(&dword_0, v40, OS_LOG_TYPE_DEFAULT, v39, (uint8_t *)&v56, 8u);
    return;
  }

  unsigned __int8 v49 = xpc_int64_get_value(a3);
  __int16 v50 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    int v56 = 67109120;
    LODWORD(v57) = v49;
    _os_log_impl(&dword_0, v50, OS_LOG_TYPE_DEFAULT, "latencyMode received from bluetoothd: %d", (uint8_t *)&v56, 8u);
  }

  (*(void (**)(uint64_t *, void))(*a1 + 616))(a1, v49);
}

void sub_953C(uint64_t a1, int a2)
{
  int v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "not supported";
    if (a2) {
      uint64_t v5 = "supported";
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Set SupportInputSwPlc %s", (uint8_t *)&v6, 0xCu);
  }

  *(_BYTE *)(a1 + 536) = a2;
}

uint64_t sub_9600(uint64_t result, uint64_t a2)
{
  *(void *)(result + 416) = a2;
  return result;
}

uint64_t sub_9608(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 168LL);
}

uint64_t sub_9618(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 152LL);
}

uint64_t sub_9628(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 145LL);
}

uint64_t sub_9638(uint64_t a1, char a2, int a3)
{
  uint64_t result = *(void *)(a1 + 416);
  *(_BYTE *)(*(void *)(result + 9248) + 145LL) = a2;
  if (a3) {
    return sub_429B4(result, 1651466595);
  }
  return result;
}

uint64_t sub_9658(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 144LL);
}

uint64_t sub_9668(uint64_t result, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 416) + 9248LL) + 144LL) = a2;
  return result;
}

uint64_t sub_9678(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 172LL);
}

uint64_t sub_9688(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 176LL);
}

uint64_t sub_9698(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 60LL);
}

void sub_96A8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 416);
  uint64_t v3 = v2[1156];
  if (*(_DWORD *)(v3 + 60) != a2)
  {
    *(_DWORD *)(v3 + 60) = a2;
    uint64_t v5 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (*(uint64_t (**)(void *))(*v2 + 16LL))(v2);
      int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 60LL);
      v8[0] = 67109376;
      v8[1] = v6;
      __int16 v9 = 1024;
      int v10 = v7;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Local stream state of mAudioObjectID %d changed to %d",  (uint8_t *)v8,  0xEu);
    }
  }

void sub_978C(uint64_t a1, unsigned int a2)
{
  int v4 = (os_log_s *)qword_8B4B0;
  if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Setting listen mode  %d", (uint8_t *)v6, 8u);
  }

  uint64_t v5 = *(id **)(a1 + 208);
  if (v5) {
    sub_138D4(v5, a2);
  }
}

void sub_9844(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = 0LL;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  int v6 = sub_3E48C(qword_962E8, a3);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = v6[1137];
  if (v7) {
    LOBYTE(v7) = *(_BYTE *)(v7 + 192) != 0;
  }
  uint64_t v8 = v6[1139];
  if (v8 && *(_BYTE *)(v8 + 192)) {
    LOBYTE(v7) = 1;
  }
  if ((v7 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 9017))
    {
      if (*(void *)(a1 + 416))
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&v19, a1, 0LL);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        void v13[2] = sub_9A10;
        v13[3] = &unk_81288;
        unsigned int v17 = a3;
        v13[4] = a1;
        _BYTE v13[5] = a2;
        __int128 v14 = v19;
        __int128 v15 = v20;
        uint64_t v16 = v21;
        dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v13);
        *(void *)(a1 + 9008) = v9;
        sub_3EB3C(qword_962E8, 10LL, a3, v9);
      }
    }

    else
    {
      int v11 = (os_log_s *)qword_8B4B0;
      if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "Injecting silent Audio Stopped", buf, 2u);
      }

      __n128 v12 = *(void **)(a1 + 9008);
      if (v12 && !dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9008)))
      {
        dispatch_block_cancel(v12);
        __n128 v12 = *(void **)(a1 + 9008);
      }

      _Block_release(v12);
      *(void *)(a1 + 9008) = 0LL;
    }
  }

  else
  {
LABEL_11:
    int v10 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Injecting silent Audio Stopped : Input device not available",  buf,  2u);
    }
  }

uint64_t sub_9A10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_52B28((uint64_t)v22, qword_962E8 + 200);
  _Block_release(*(const void **)(v2 + 9008));
  *(void *)(v2 + 9008) = 0LL;
  sub_52BF4((uint64_t)v22);
  uint64_t v3 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 88));
  if (!v3) {
    goto LABEL_17;
  }
  uint64_t v4 = v3[1137];
  if (v4) {
    LOBYTE(v4) = *(_BYTE *)(v4 + 192) != 0;
  }
  uint64_t v5 = v3[1139];
  if (v5 && *(_BYTE *)(v5 + 192)) {
    LOBYTE(v4) = 1;
  }
  if ((v4 & 1) == 0)
  {
LABEL_17:
    uint64_t v13 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return sub_52C5C(v22);
    }
    *(_WORD *)mach_timebase_info info = 0;
    __int128 v14 = "Injecting silent Audio Stopped : Input device not available";
    goto LABEL_19;
  }

  if (!*(_BYTE *)(v2 + 9017))
  {
    uint64_t v13 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return sub_52C5C(v22);
    }
    *(_WORD *)mach_timebase_info info = 0;
    __int128 v14 = "Injecting silent Audio Stopped";
LABEL_19:
    __int128 v15 = (os_log_s *)v13;
    uint32_t v16 = 2;
LABEL_20:
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, v14, info, v16);
    return sub_52C5C(v22);
  }

  uint64_t v6 = mach_absolute_time();
  if (*(void *)(a1 + 40) && !*(_BYTE *)(*(void *)(v2 + 416) + 9440LL))
  {
    *(void *)mach_timebase_info info = 0LL;
    mach_timebase_info((mach_timebase_info_t)info);
    float v7 = *(double *)(a1 + 48) / 1000.0;
    float v8 = (float)((float)((v6 - *(void *)(a1 + 40)) * *(unsigned int *)info / *(unsigned int *)&info[4] / 0x3E8)
               / 1000.0)
       * v7;
    unsigned int v9 = *(_DWORD *)(a1 + 64);
    unsigned int v10 = v8;
    uint64_t v11 = sub_597C(v2, v8, (char *)(v2 + 768));
    uint64_t v12 = *(void *)(v2 + 16);
    if (v12) {
      sub_1AFFC(v12, v10, (const float *)(v2 + 768), v11);
    }
  }

  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 984LL))(v2))
  {
    uint64_t v18 = qword_8B4B0;
    if (!os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT)) {
      return sub_52C5C(v22);
    }
    uint64_t v19 = *(void *)(v2 + 200);
    uint64_t v20 = *(void *)(a1 + 40);
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 984LL))(v2);
    *(_DWORD *)mach_timebase_info info = 138543874;
    *(void *)&info[4] = v19;
    __int16 v24 = 2048;
    uint64_t v25 = v20;
    __int16 v26 = 1024;
    int v27 = v21;
    __int128 v14 = " %{public}@ : Injecting silent Audio allowed to stop [%llu  %d]";
    __int128 v15 = (os_log_s *)v18;
    uint32_t v16 = 28;
    goto LABEL_20;
  }

  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v2 + 1440LL))(v2, v6, *(unsigned int *)(a1 + 88));
  return sub_52C5C(v22);
}

void sub_9CE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9D18(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 16LL))(*(void *)(a1 + 416));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_9D94;
  v4[3] = &unk_812A8;
  v4[4] = a1;
  return sub_3E3BC(qword_962E8, v2, v4);
}

void sub_9D94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(void **)(v1 + 9008);
  if (v2 && !dispatch_block_testcancel(*(dispatch_block_t *)(v1 + 9008)))
  {
    uint64_t v3 = (os_log_s *)qword_8B4B0;
    if (os_log_type_enabled((os_log_t)qword_8B4B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Injecting silent Audio Stopped", v4, 2u);
      unsigned int v2 = *(void **)(v1 + 9008);
    }

    dispatch_block_cancel(v2);
    _Block_release(*(const void **)(v1 + 9008));
    *(void *)(v1 + 9008) = 0LL;
  }

float sub_9E2C(float *a1, int a2)
{
  if (a2 == 1)
  {
    float v2 = a1[108];
    float v3 = a1[114];
    return v2 * v3;
  }

  if (!a2)
  {
    float v2 = a1[108];
    float v3 = a1[113];
    return v2 * v3;
  }

  return a1[108];
}

void *sub_9E5C@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 3) {
    float v2 = "Unknown";
  }
  else {
    float v2 = off_812E0[a1];
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v2);
}

void *sub_9E8C@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0xC) {
    float v2 = "unknown";
  }
  else {
    float v2 = off_81300[a1];
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v2);
}

BOOL sub_9EDC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 460) != 0;
}

uint64_t sub_9F58()
{
  return 0LL;
}

uint64_t sub_9F64()
{
  return 0LL;
}

uint64_t sub_9FA0()
{
  return 0LL;
}

uint64_t sub_9FA8()
{
  return 0LL;
}

float sub_9FB0()
{
  return 1.0;
}

uint64_t sub_9FB8()
{
  return 0LL;
}

float sub_9FD4(uint64_t a1)
{
  return *(float *)(a1 + 432);
}

float sub_9FDC(uint64_t a1)
{
  return *(float *)(a1 + 440);
}

uint64_t sub_9FE4(uint64_t result, float a2)
{
  *(float *)(result + 440) = a2;
  return result;
}

float sub_9FEC(uint64_t a1)
{
  return *(float *)(a1 + 444);
}

float sub_9FF4(uint64_t a1)
{
  return *(float *)(a1 + 448);
}

BOOL sub_A008(uint64_t a1)
{
  return *(void *)(a1 + 8960) != 0LL;
}

uint64_t sub_A018(uint64_t a1)
{
  return *(void *)(a1 + 8960);
}

uint64_t sub_A020(uint64_t result)
{
  return result;
}

uint64_t sub_A030(uint64_t result)
{
  return result;
}

uint64_t sub_A040(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8968) = a2;
  return result;
}

uint64_t sub_A048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8976) = a2;
  return result;
}

uint64_t sub_A050(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8984) = a2;
  return result;
}

double sub_A058(uint64_t a1, unint64_t a2)
{
  double result = (double)a2;
  *(double *)(a1 + 8992) = (double)a2;
  return result;
}

uint64_t sub_A064(uint64_t a1)
{
  return *(void *)(a1 + 8968);
}

uint64_t sub_A06C(uint64_t a1)
{
  return *(void *)(a1 + 8976);
}

uint64_t sub_A074(uint64_t a1)
{
  return *(void *)(a1 + 8984);
}

unint64_t sub_A07C(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 8992);
}

uint64_t sub_A090()
{
  return 0LL;
}

uint64_t sub_A098()
{
  return 0LL;
}

uint64_t sub_A0A0()
{
  return 0LL;
}

uint64_t sub_A0A8()
{
  return 0LL;
}

uint64_t sub_A0D8()
{
  return 1LL;
}

uint64_t sub_A0EC()
{
  return 0LL;
}

uint64_t sub_A0F4()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_A0FC()
{
  return 0LL;
}

uint64_t sub_A104()
{
  return 0LL;
}

uint64_t sub_A10C()
{
  return 0LL;
}

uint64_t sub_A11C()
{
  return 0LL;
}

uint64_t sub_A12C()
{
  return 0LL;
}

void *sub_A134(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_A1C0();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    float v8 = operator new(v6 + 1);
    v5[1] = a3;
    void v5[2] = v7 | 0x8000000000000000LL;
    void *v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_A1C0()
{
}

void sub_A1D4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_A224(exception, a1);
}

void sub_A210(_Unwind_Exception *a1)
{
}

std::logic_error *sub_A224(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_A248(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_A1C0();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_A2F8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_A308( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

void sub_A334( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_A344()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_8B4B0 = (uint64_t)result;
  return result;
}

void *sub_A370(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  *((_DWORD *)a1 + 6) = 0;
  *a1 = a2;
  a1[1] = a3;
  sub_A55C(a1);
  uint64_t v6 = (os_log_s *)qword_95968;
  if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = sub_6FA0(*a1);
    uint64_t v7 = "Owner";
    else {
      uint64_t v8 = "Owner";
    }
    unsigned int v17 = v8;
    else {
      unsigned int v9 = "disabled";
    }
    else {
      unsigned int v10 = "disabled";
    }
    uint64_t v11 = sub_6FA0(a1[1]);
    else {
      uint64_t v12 = "disabled";
    }
    int v13 = (*(uint64_t (**)(void))(*(void *)a1[1] + 1304LL))(a1[1]);
    *(_DWORD *)buf = 138414338;
    if (v13) {
      __int128 v14 = "enabled";
    }
    else {
      __int128 v14 = "disabled";
    }
    uint64_t v20 = v18;
    __int128 v15 = "mediaexperience";
    __int16 v21 = 2080;
    uint64_t v22 = v17;
    if (a4) {
      __int128 v15 = "bluetooth";
    }
    __int16 v23 = 2080;
    __int16 v24 = v9;
    __int16 v25 = 2080;
    __int16 v26 = v10;
    __int16 v27 = 2112;
    uint64_t v28 = v11;
    __int16 v29 = 2080;
    xpc_object_t v30 = v7;
    __int16 v31 = 2080;
    int64_t v32 = v12;
    __int16 v33 = 2080;
    BOOL v34 = v14;
    __int16 v35 = 2080;
    int64_t v36 = v15;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter session started aggregating user1 %@ is %s = [InEar=%s, Onwership=%s] and user2 %@ is %s = [InEa r=%s, Onwership=%s] aggregated from %s",  buf,  0x5Cu);
  }

  if ((a4 & 1) == 0) {
    sub_A5F0((uint64_t)a1);
  }
  return a1;
}

uint64_t sub_A55C(void *a1)
{
  float v2 = (os_log_s *)qword_95968;
  if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)size_t v4 = 0;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter start all aggregates from BTAudioHALPlugin",  v4,  2u);
  }

  if (*a1) {
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 312LL))(*a1, 1LL);
  }
  uint64_t result = a1[1];
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 312LL))(result, 1LL);
  }
  return result;
}

void sub_A5F0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 16) = sub_7C24(v2);
      *(_DWORD *)(a1 + 20) = sub_7C24(*(void *)(a1 + 8));
      float v3 = (os_log_s *)qword_95968;
      if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
      {
        sub_AC0C(*(_DWORD *)(a1 + 16), v10);
        int v4 = v11;
        size_t v5 = (void **)v10[0];
        sub_AC0C(*(_DWORD *)(a1 + 20), __p);
        uint64_t v6 = v10;
        if (v4 < 0) {
          uint64_t v6 = v5;
        }
        if (v9 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446466;
        int v13 = v6;
        __int16 v14 = 2082;
        __int128 v15 = v7;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Codec Configuration User1 = %{public}s , User2 = %{public}s",  buf,  0x16u);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        if (v11 < 0) {
          operator delete(v10[0]);
        }
      }
    }
  }

void sub_A724( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A74C(void *a1)
{
  uint64_t v2 = (os_log_s *)qword_95968;
  if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter stop all aggregates from BTAudioHALPlugin",  v4,  2u);
  }

  if (*a1) {
    (*(void (**)(void, void))(*(void *)*a1 + 312LL))(*a1, 0LL);
  }
  uint64_t result = a1[1];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)result + 312LL))(result, 0LL);
  }
  return result;
}

void sub_A7E0(void *a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_95968;
  if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    uint64_t v7 = sub_6FA0(a2);
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter stop for Audio Device %{public}@",  (uint8_t *)&v6,  0xCu);
  }

  sub_A74C(a1);
  if (*a1 == a2)
  {
    *a1 = 0LL;
  }

  else if (a1[1] == a2)
  {
    a1[1] = 0LL;
  }

  else
  {
    size_t v5 = (os_log_s *)qword_95968;
    if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_ERROR)) {
      sub_58240(v5);
    }
  }

void sub_A8DC(float *a1)
{
  uint64_t v2 = *(float **)a1;
  if (v2)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if (v3)
    {
      float v4 = a1[6];
      float v5 = v2[108];
      a1[6] = v5;
      (*(void (**)(float *))(*(void *)v2 + 320LL))(v2);
      (*(void (**)(void, float))(**((void **)a1 + 1) + 320LL))(*((void *)a1 + 1), a1[6]);
      int v6 = (os_log_s *)qword_95968;
      if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
      {
        double v7 = *(float *)(*(void *)a1 + 9064LL);
        double v8 = *(float *)(*((void *)a1 + 1) + 9064LL);
        int v9 = 134218240;
        double v10 = v7;
        __int16 v11 = 2048;
        double v12 = v8;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter aggregated scale factor user1=%f user2=%f",  (uint8_t *)&v9,  0x16u);
      }

      if (v4 != a1[6]) {
        (*(void (**)(void))(**(void **)a1 + 336LL))(*(void *)a1);
      }
    }
  }

float *sub_AA04(float **a1, float a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (a1[1])
    {
      sub_7988(result, a2);
      sub_7988(a1[1], a2);
      *((float *)a1 + 6) = a2;
      (*(void (**)(float *, float))(*(void *)*a1 + 480LL))(*a1, (*a1)[110]);
      return (float *)(*(uint64_t (**)(float *, float))(*(void *)a1[1] + 480LL))(a1[1], a1[1][110]);
    }
  }

  return result;
}

CFArrayRef sub_AA84(uint64_t *a1)
{
  if (!*a1) {
    return 0LL;
  }
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = *(const __CFString **)(*(void *)(*a1 + 416) + 9080LL);
  float v4 = *(const __CFString **)(*(void *)(v2 + 416) + 9080LL);
  CFRetain(v3);
  CFRetain(v4);
  int v5 = sub_8A9C(*a1);
  if (v5) {
    int v6 = v4;
  }
  else {
    int v6 = v3;
  }
  if (v5) {
    double v7 = v3;
  }
  else {
    double v7 = v4;
  }
  values[0] = (void *)v6;
  values[1] = (void *)v7;
  CFArrayRef v8 = CFArrayCreate(kCFAllocatorDefault, (const void **)values, 2LL, &kCFTypeArrayCallBacks);
  int v9 = (os_log_s *)qword_95968;
  if (os_log_type_enabled((os_log_t)qword_95968, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    __int16 v13 = 2080;
    __int16 v14 = CFStringGetCStringPtr(v4, 0x8000100u);
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter kBluetoothAudioDeviceWirelessSplitterAggregation called aggregating with %s and %s",  (uint8_t *)&v11,  0x16u);
  }

  CFRelease(v3);
  CFRelease(v4);
  return v8;
}

BOOL sub_ABE8(void *a1, uint64_t a2)
{
  return *a1 == a2 || a1[1] == a2;
}

void *sub_AC0C@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 33022)
  {
    if (a1 == 33023)
    {
      uint64_t v2 = "AAC-ELD";
      goto LABEL_11;
    }

    if (a1 == 0xFFFF)
    {
      uint64_t v2 = "Undefined";
      goto LABEL_11;
    }

LABEL_8:
    uint64_t v2 = "Unknown";
    goto LABEL_11;
  }

  if (!a1)
  {
    uint64_t v2 = "SBC";
    goto LABEL_11;
  }

  if (a1 != 2) {
    goto LABEL_8;
  }
  uint64_t v2 = "AAC-LC";
LABEL_11:
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v2);
}

    xpc_release(v9);
    return;
  }

  sub_114D8(a1, 3u, (uint64_t)v10);
  xpc_release(v10);
  if (v9) {
    goto LABEL_8;
  }
LABEL_10:
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
    sub_59F00();
  }
}

uint64_t sub_AC84(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = *a1;
  if (v4 && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16LL))(v4), (_DWORD)result == a2))
  {
    int v6 = (int *)(v3 + 2);
  }

  else
  {
    uint64_t result = v3[1];
    if (!result) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
    if ((_DWORD)result != a2) {
      return result;
    }
    int v6 = (int *)v3++ + 5;
  }

  uint64_t v7 = *v3;
  if (v7)
  {
    int v8 = *v6;
    if (v8 != 0xFFFF)
    {
      if (v8 == 33023)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 736LL))(v7, 3LL);
        uint64_t v9 = 174LL;
      }

      else if (v8 == 2)
      {
        else {
          uint64_t v9 = 244LL;
        }
      }

      else
      {
        uint64_t v9 = 256LL;
      }

      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 872LL))(v7, v9);
    }
  }

  return result;
}

os_log_t sub_AD78()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95968 = (uint64_t)result;
  return result;
}

void sub_ADA4(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v5);
  *(void *)uint64_t v4 = off_81378;
  *(_BYTE *)(v4 + 152) = 1;
  *(void *)(v4 + 16) = 0LL;
}

void *sub_ADEC(void *a1)
{
  *a1 = off_81378;
  uint64_t v2 = (OpaqueAudioConverter *)a1[2];
  if (v2)
  {
    AudioConverterDispose(v2);
  }

  else
  {
    __int128 v3 = (os_log_s *)qword_95970;
    if (os_log_type_enabled((os_log_t)qword_95970, OS_LOG_TYPE_ERROR)) {
      sub_58280(v3);
    }
  }

  return sub_415F0(a1);
}

void sub_AE58(void *a1)
{
  uint64_t v1 = sub_ADEC(a1);
  operator delete(v1);
}

uint64_t sub_AE6C(uint64_t a1, int a2)
{
  *(void *)(a1 + 24) = 0x40D7700000000000LL;
  uint64_t v3 = a1 + 24;
  *(_DWORD *)(a1 + 116) = a2;
  *(_OWORD *)(a1 + 32) = xmmword_65250;
  *(_OWORD *)(a1 + 48) = xmmword_65260;
  UInt32 ioPropertyDataSize = 40;
  uint64_t v4 = (const AudioStreamBasicDescription *)(a1 + 64);
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 64));
  sub_189BC(Property, (uint64_t)"couldn't get output data format");
  OSStatus v6 = AudioConverterNew((const AudioStreamBasicDescription *)v3, v4, (AudioConverterRef *)(v3 - 8));
  sub_189BC(v6, (uint64_t)"Could not create new audio converter");
  *(_DWORD *)(v3 + 96) = 1;
  uint64_t v7 = operator new[](0x10uLL);
  int v8 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v7;
  if (v8) {
    operator delete[](v8);
  }
  *(_DWORD *)(a1 + 112) = 16450;
  uint64_t v9 = operator new[](0x4042uLL);
  double v10 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v9;
  if (v10) {
    operator delete[](v10);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 44);
  return 0LL;
}

void sub_AF68(uint64_t a1, unsigned __int8 *a2, BOOL a3, void *a4, unint64_t a5, void *a6)
{
  if (a3) {
    a3 = *a2 != 255;
  }
  sub_41654(a1, (uint64_t)a2, a3, a4, a5, a6);
}

uint64_t sub_AF80()
{
  return 0LL;
}

uint64_t sub_AF88()
{
  return 1LL;
}

uint64_t sub_AF90()
{
  return 0LL;
}

uint64_t sub_AF98()
{
  return 0LL;
}

uint64_t sub_AFA0()
{
  return 0LL;
}

os_log_t sub_AFA8()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95970 = (uint64_t)result;
  return result;
}

uint64_t sub_AFD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_43E8(a1, a3);
  *(void *)uint64_t v7 = off_813E8;
  *(_DWORD *)(v7 + 9212) = 0;
  *(void *)(v7 + 9080) = 0LL;
  *(void *)(v7 + 9096) = 0LL;
  *(void *)(v7 + 9088) = 0LL;
  sub_9600(v7, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 1552LL))(a1, a4);
  sub_4658((_BYTE *)a1, a4);
  sub_B3F8(a1, a4);
  *(_DWORD *)(a1 + 368) = 1953260897;
  *(_BYTE *)(a1 + 9016) = 1;
  atomic_store(1u, (unsigned __int8 *)(a1 + 288));
  *(_DWORD *)(a1 + 292) = 1;
  *(void *)(a1 + 296) = 0x40D7700000000000LL;
  *(void *)(a1 + 304) = 0xC6C70636DLL;
  int v8 = *(_DWORD *)(a1 + 9160);
  *(_DWORD *)(a1 + 312) = 2 * v8;
  *(_DWORD *)(a1 + 316) = 1;
  *(_DWORD *)(a1 + 320) = 2 * v8;
  *(_DWORD *)(a1 + 324) = v8;
  *(void *)(a1 + 328) = 16LL;
  *(_DWORD *)(a1 + 372) = 10240;
  *(void *)(a1 + 376) = 0xA00000002800LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 40) = sub_1C3A4() + *(unsigned int *)(a1 + 372);
  uint64_t v9 = (double *)(a1 + 296);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1))
  {
    *(void *)(a1 + 56) = sub_1C3A4() + *(unsigned int *)(a1 + 372);
    *(void *)(a1 + 72) = sub_1C3A4() + *(unsigned int *)(a1 + 372);
    __int128 v10 = *(_OWORD *)v9;
    *(_OWORD *)(a1 + 9184) = *(_OWORD *)(a1 + 312);
    *(_OWORD *)(a1 + 9168) = v10;
    *(void *)(a1 + 9200) = *(void *)(a1 + 328);
    *(_DWORD *)(a1 + 9184) = 2;
    *(void *)(a1 + 9192) = 0x100000002LL;
  }

  int v11 = *(_DWORD *)(a1 + 9108);
  if (v11 <= 59)
  {
    if (v11 == 40)
    {
      int v12 = 10;
      __int16 v13 = &unk_65330;
      goto LABEL_18;
    }

    if (v11 == 56)
    {
      int v12 = 3;
      __int16 v13 = &unk_65358;
      goto LABEL_18;
    }
  }

  else
  {
    if (v11 == 60)
    {
      int v12 = 13;
      __int16 v13 = &unk_65364;
      goto LABEL_18;
    }

    if (v11 == 90 || v11 == 120)
    {
      int v12 = 4;
      __int16 v13 = &unk_65398;
      goto LABEL_18;
    }
  }

  __int16 v14 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
    sub_582C0(v11, v14);
  }
  __int16 v13 = 0LL;
  int v12 = 0;
LABEL_18:
  *(void *)(a1 + 9144) = v13;
  *(_DWORD *)(a1 + 9152) = v12;
  *(void *)(a1 + 9120) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  *(void *)(a1 + 9128) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  *(void *)(a1 + 9136) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  if (*(void *)(a1 + 9144))
  {
    __int128 v15 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 9108);
      v23[0] = 67109120;
      v23[1] = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Using CodecPriorityTable%u", (uint8_t *)v23, 8u);
    }

    sub_B7DC(a1, *(CFArrayRef *)(a1 + 9112));
  }

  *(void *)(a1 + 384) = 10000LL;
  *(_DWORD *)(a1 + 396) = 0;
  *(_BYTE *)(a1 + 424) = sub_340E8();
  *(_DWORD *)(a1 + 432) = 1056964608;
  *(_DWORD *)(a1 + 448) = 0;
  *(void *)(a1 + 440) = 0xC2C80000C2480000LL;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    unsigned int v17 = operator new(0x1CuLL);
    v18.n128_u32[0] = *(_DWORD *)(a1 + 440);
    v19.n128_u64[0] = *(void *)(a1 + 296);
    v19.n128_f32[0] = v19.n128_f64[0];
    sub_15524(v17, *(_BYTE *)(a1 + 408) == 0, v18, v19, 0.02);
    *(void *)(a1 + 400) = v17;
  }

  (*(void (**)(uint64_t, float))(*(void *)a1 + 480LL))(a1, *(float *)(a1 + 440));
  *(_BYTE *)(a1 + 460) = sub_340E8() ^ 1;
  *(_BYTE *)(a1 + 461) = 0;
  else {
    int v20 = -1;
  }
  *(_DWORD *)(a1 + 9104) = v20;
  uint64_t v21 = *(void *)(a1 + 216);
  if (v21) {
    sub_1B4B4(*(void *)(qword_962E8 + 328), *(_DWORD *)(v21 + 52), 3, *v9);
  }
  return a1;
}

void sub_B3CC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_B3F8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyDirection");
  if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_int64)
  {
    int v5 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_585D0(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  unint64_t v13 = xpc_int64_get_value(value);
  xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyInputAudio");
  if (xpc_get_type(v14) != (xpc_type_t)&_xpc_type_BOOL)
  {
    __int128 v15 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_58560(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  *(_BYTE *)(a1 + 9208) = xpc_BOOL_get_value(v14);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 1016LL))(a1, (v13 >> 1) & 1);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 1024LL))( a1,  (*(_BYTE *)(a1 + 9208) != 0) & v13);
  __int16 v23 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 9208)) {
      __int16 v24 = "Yes";
    }
    else {
      __int16 v24 = "No";
    }
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032LL))(a1);
    int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1040LL))(a1);
    v74[0] = 67109890;
    v74[1] = v13;
    __int16 v75 = 2082;
    v76 = v24;
    __int16 v77 = 1024;
    int v78 = v25;
    __int16 v79 = 1024;
    int v80 = v26;
    _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "LEA: Direction %x Stream state Input Audio = %{public}s output = %d input = %d",  (uint8_t *)v74,  0x1Eu);
  }

  xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyIsStereo");
  if (xpc_get_type(v27) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v28 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_584F0(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }

  int v36 = xpc_BOOL_get_value(v27) ? 2 : 1;
  *(_DWORD *)(a1 + 9160) = v36;
  xpc_object_t v37 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySupportsAudioMixing");
  if (xpc_get_type(v37) != (xpc_type_t)&_xpc_type_BOOL)
  {
    int v38 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_58480(v38, v39, v40, v41, v42, v43, v44, v45);
    }
  }

  *(_BYTE *)(a1 + 9156) = xpc_BOOL_get_value(v37);
  xpc_object_t v46 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySupportedCodecs");
  if (xpc_get_type(v46) != (xpc_type_t)&_xpc_type_array)
  {
    int64_t v47 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_58410(v47, v48, v49, v50, v51, v52, v53, v54);
    }
  }

  *(void *)(a1 + 9112) = _CFXPCCreateCFObjectFromXPCObject(v46);
  xpc_object_t v55 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyMaxPacketSize");
  if (xpc_get_type(v55) != (xpc_type_t)&_xpc_type_int64)
  {
    int v56 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_583A0(v56, v57, v58, v59, v60, v61, v62, v63);
    }
  }

  *(_DWORD *)(a1 + 9108) = xpc_int64_get_value(v55);
  xpc_object_t v64 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyECNRIsEnabled");
  if (xpc_get_type(v64) != (xpc_type_t)&_xpc_type_BOOL)
  {
    v65 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_58330(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    if (sub_52814()) {
LABEL_40:
    }
      abort();
  }

  uint64_t result = xpc_BOOL_get_value(v64);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 408LL))(a1, 1LL);
  }
  return result;
}

void sub_B7DC(uint64_t a1, CFArrayRef theArray)
{
  if (CFArrayGetCount(theArray) >= 1)
  {
    CFIndex v4 = 0LL;
    while (1)
    {
      unsigned int valuePtr = 0;
      uint64_t v5 = *(void *)(a1 + 296);
      __int128 v6 = *(_OWORD *)(a1 + 320);
      *(_OWORD *)v152 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)&v152[16] = v6;
      __int128 v7 = *(_OWORD *)(a1 + 9192);
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 9176);
      __int128 v145 = v7;
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v4);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      uint64_t v9 = *(unsigned int *)(a1 + 9152);
      if (!(_DWORD)v9)
      {
LABEL_7:
        uint64_t v12 = (os_log_s *)qword_95978;
        if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
          _os_log_error_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "Could not find codec %d matching codec priority table, skipping codec",  (uint8_t *)&buf,  8u);
        }

        goto LABEL_148;
      }

      uint64_t v10 = *(int **)(a1 + 9144);
      while (1)
      {
        int v11 = *v10++;
        if (valuePtr == v11) {
          break;
        }
        if (!--v9) {
          goto LABEL_7;
        }
      }

      switch(valuePtr)
      {
        case 1u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0xB8uLL);
            uint64_t v109 = 0x40BF400000000000LL;
            __int128 v110 = *(_OWORD *)v152;
            __int128 v111 = *(_OWORD *)&v152[16];
            sub_1D978((uint64_t)v13, valuePtr, (uint64_t)&v109);
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          int v29 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
          }

          else
          {
            uint64_t v19 = operator new(0xA8uLL);
            uint64_t v106 = 0x40BF400000000000LL;
            __int128 v107 = *(_OWORD *)__p;
            __int128 v108 = v145;
            sub_51BB0((uint64_t)v19, v29, (uint64_t)&v106);
          }

          uint64_t v16 = 64000LL;
          goto LABEL_93;
        case 2u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x7938uLL);
            uint64_t v103 = 0x40BF400000000000LL;
            __int128 v104 = *(_OWORD *)v152;
            __int128 v105 = *(_OWORD *)&v152[16];
            sub_2B370(v13, valuePtr, &v103);
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v30 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0) {
            goto LABEL_86;
          }
          uint64_t v19 = operator new(0x4128uLL);
          uint64_t v100 = 0x40BF400000000000LL;
          __int128 v101 = *(_OWORD *)__p;
          __int128 v102 = v145;
          sub_41B0C(v19, v30, &v100);
          goto LABEL_87;
        case 3u:
        case 0x11u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x7A48uLL);
            uint64_t v141 = 0x40CF400000000000LL;
            __int128 v142 = *(_OWORD *)v152;
            __int128 v143 = *(_OWORD *)&v152[16];
            sub_1C054(v13, valuePtr, &v141);
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v25 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
          }

          else
          {
            uint64_t v19 = operator new(0x170uLL);
            uint64_t v138 = 0x40CF400000000000LL;
            __int128 v139 = *(_OWORD *)__p;
            __int128 v140 = v145;
            sub_51910(v19, v25, &v138);
          }

          uint64_t v16 = 64000LL;
          goto LABEL_132;
        case 4u:
        case 0x10u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x7A48uLL);
            uint64_t v135 = 0x40CF400000000000LL;
            __int128 v136 = *(_OWORD *)v152;
            __int128 v137 = *(_OWORD *)&v152[16];
            sub_1C054(v13, valuePtr, &v135);
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v26 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0) {
            goto LABEL_82;
          }
          uint64_t v19 = operator new(0x170uLL);
          uint64_t v132 = 0x40CF400000000000LL;
          __int128 v133 = *(_OWORD *)__p;
          __int128 v134 = v145;
          sub_51910(v19, v26, &v132);
          goto LABEL_83;
        case 5u:
          int v15 = *(_DWORD *)(a1 + 9108);
          switch(v15)
          {
            case '(':
              uint64_t v16 = 42666LL;
              goto LABEL_113;
            case '<':
              uint64_t v16 = 48000LL;
              goto LABEL_113;
            case '8':
              uint64_t v16 = 44800LL;
LABEL_113:
              if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
              {
                unint64_t v13 = operator new(0xD8uLL);
                uint64_t v117 = 0x40CF400000000000LL;
                __int128 v118 = *(_OWORD *)v152;
                __int128 v119 = *(_OWORD *)&v152[16];
                sub_1CE74((uint64_t)v13, valuePtr, (uint64_t)&v117, 0);
              }

              else
              {
                unint64_t v13 = 0LL;
              }

              uint64_t v19 = 0LL;
              goto LABEL_132;
          }

          if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
            sub_5866C(&v120, v121);
          }
LABEL_119:
          unint64_t v13 = 0LL;
          uint64_t v19 = 0LL;
          uint64_t v16 = 0LL;
LABEL_132:
          uint64_t v5 = 0x40CF400000000000LL;
LABEL_133:
          uint64_t v43 = (os_log_s *)qword_95978;
          if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT)
            && ((sub_CE9C(valuePtr, &buf), (buf.__r_.__value_.__s.__size_ & 0x80u) == 0)
              ? (p_std::string buf = &buf)
              : (p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0]),
                *(_DWORD *)v148 = 136315394,
                v149 = p_buf,
                __int16 v150 = 1024,
                int v151 = v16,
                _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEFAULT, "Adding codec %s at bitrate %d", v148, 0x12u),
                (char)buf.__r_.__value_.__s.__size_ < 0))
          {
            operator delete(buf.__r_.__value_.__l.__data_);
            if (v13)
            {
LABEL_139:
              (*(void (**)(_BYTE *, uint64_t, void))(*(void *)v13 + 16LL))( v13,  v16,  *(unsigned int *)(a1 + 9108));
              v13[177] = *(_BYTE *)(a1 + 744);
              uint64_t v45 = calloc(1uLL, 0x20uLL);
              *uint64_t v45 = v13;
              v13[48] = *(_BYTE *)(a1 + 745);
              if (v19) {
                goto LABEL_144;
              }
              goto LABEL_147;
            }
          }

          else if (v13)
          {
            goto LABEL_139;
          }

          if (v19)
          {
            uint64_t v45 = 0LL;
LABEL_144:
            (*(void (**)(void *, uint64_t))(*(void *)v19 + 16LL))(v19, v16);
            if (!v45) {
              uint64_t v45 = calloc(1uLL, 0x20uLL);
            }
            v45[1] = v19;
LABEL_147:
            *((_DWORD *)v45 + 4) = valuePtr;
            v45[3] = v5;
            sub_CF1C((CFArrayRef *)a1, (uint64_t)v45);
          }

LABEL_148:
          if (++v4 >= CFArrayGetCount(theArray)) {
            goto LABEL_149;
          }
          break;
        case 6u:
          int v17 = *(_DWORD *)(a1 + 9108);
          if (v17 == 40)
          {
            uint64_t v16 = 64000LL;
          }

          else
          {
            if (v17 != 60)
            {
              if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
                sub_5866C(&v130, v131);
              }
              goto LABEL_128;
            }

            uint64_t v16 = 96000LL;
          }

          unint64_t v13 = operator new(0xD8uLL);
          uint64_t v127 = 0x40D7700000000000LL;
          __int128 v128 = *(_OWORD *)v152;
          __int128 v129 = *(_OWORD *)&v152[16];
          sub_1CE74((uint64_t)v13, valuePtr, (uint64_t)&v127, 0);
          goto LABEL_125;
        case 7u:
          int v18 = *(_DWORD *)(a1 + 9108);
          switch(v18)
          {
            case '(':
              uint64_t v16 = 32000LL;
              break;
            case '<':
              uint64_t v16 = 48000LL;
              break;
            case '8':
              uint64_t v16 = 44800LL;
              break;
            default:
              if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
                sub_5866C(&v125, v126);
              }
LABEL_128:
              unint64_t v13 = 0LL;
              uint64_t v19 = 0LL;
              uint64_t v16 = 0LL;
              goto LABEL_129;
          }

          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0xD8uLL);
            uint64_t v122 = 0x40D7700000000000LL;
            __int128 v123 = *(_OWORD *)v152;
            __int128 v124 = *(_OWORD *)&v152[16];
            sub_1CE74((uint64_t)v13, valuePtr, (uint64_t)&v122, 0);
          }

          else
          {
LABEL_124:
            unint64_t v13 = 0LL;
          }

LABEL_125:
          uint64_t v19 = 0LL;
LABEL_129:
          uint64_t v5 = 0x40D7700000000000LL;
          goto LABEL_133;
        case 9u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v91 = 0x40C7700000000000LL;
            __int128 v92 = *(_OWORD *)v152;
            __int128 v93 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v91, *(unsigned int *)(a1 + 9108));
            uint64_t v20 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v31 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
            uint64_t v16 = 32000LL;
          }

          else
          {
            uint64_t v19 = operator new(0xC8uLL);
            uint64_t v88 = 0x40C7700000000000LL;
            __int128 v89 = *(_OWORD *)__p;
            __int128 v90 = v145;
            sub_41920(v19, v31, &v88, *(unsigned int *)(a1 + 9108));
            int v36 = (os_log_s *)qword_95978;
            uint64_t v16 = 32000LL;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "Adding decoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          uint64_t v5 = 0x40C7700000000000LL;
          goto LABEL_133;
        case 0xAu:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v85 = 0x40CF400000000000LL;
            __int128 v86 = *(_OWORD *)v152;
            __int128 v87 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v85, *(unsigned int *)(a1 + 9108));
            uint64_t v21 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 42667;
              _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v32 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
            uint64_t v16 = 42667LL;
            goto LABEL_132;
          }

          uint64_t v19 = operator new(0xC8uLL);
          uint64_t v82 = 0x40CF400000000000LL;
          __int128 v83 = *(_OWORD *)__p;
          __int128 v84 = v145;
          sub_41920(v19, v32, &v82, *(unsigned int *)(a1 + 9108));
          uint64_t v37 = qword_95978;
          uint64_t v16 = 42667LL;
          if (!os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_132;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 42667;
          int v38 = (os_log_s *)v37;
          uint64_t v39 = "Adding decoder %u, kLEAudioCodecHeimdall at bitrate %d";
          goto LABEL_105;
        case 0xBu:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v79 = 0x40CF400000000000LL;
            __int128 v80 = *(_OWORD *)v152;
            __int128 v81 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v79, *(unsigned int *)(a1 + 9108));
            uint64_t v22 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 48000;
              _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v33 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
LABEL_82:
            uint64_t v19 = 0LL;
LABEL_83:
            uint64_t v16 = 48000LL;
            goto LABEL_132;
          }

          uint64_t v19 = operator new(0xC8uLL);
          uint64_t v76 = 0x40CF400000000000LL;
          __int128 v77 = *(_OWORD *)__p;
          __int128 v78 = v145;
          sub_41920(v19, v33, &v76, *(unsigned int *)(a1 + 9108));
          uint64_t v40 = qword_95978;
          uint64_t v16 = 48000LL;
          if (!os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_132;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 48000;
          int v38 = (os_log_s *)v40;
          uint64_t v39 = "Adding decoder %u, kLEAudioCodecHeimdall at bitrate %d";
          goto LABEL_105;
        case 0xCu:
        case 0x12u:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v73 = 0x40D7700000000000LL;
            __int128 v74 = *(_OWORD *)v152;
            __int128 v75 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v73, *(unsigned int *)(a1 + 9108));
            xpc_object_t v14 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 64000;
              _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v27 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
            uint64_t v16 = 64000LL;
          }

          else
          {
            uint64_t v19 = operator new(0xC8uLL);
            uint64_t v70 = 0x40D7700000000000LL;
            __int128 v71 = *(_OWORD *)__p;
            __int128 v72 = v145;
            sub_41920(v19, v27, &v70, *(unsigned int *)(a1 + 9108));
            uint64_t v28 = (os_log_s *)qword_95978;
            uint64_t v16 = 64000LL;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 64000;
              _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "Adding decoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          goto LABEL_129;
        case 0xDu:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v97 = 0x40BF400000000000LL;
            __int128 v98 = *(_OWORD *)v152;
            __int128 v99 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v97, *(unsigned int *)(a1 + 9108));
            __int16 v23 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v34 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
LABEL_86:
            uint64_t v19 = 0LL;
LABEL_87:
            uint64_t v16 = 32000LL;
          }

          else
          {
            uint64_t v19 = operator new(0xC8uLL);
            uint64_t v94 = 0x40BF400000000000LL;
            __int128 v95 = *(_OWORD *)__p;
            __int128 v96 = v145;
            sub_41920(v19, v34, &v94, *(unsigned int *)(a1 + 9108));
            uint64_t v41 = (os_log_s *)qword_95978;
            uint64_t v16 = 32000LL;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "Adding decoder %u, kLEAudioCodecHeimdall at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

LABEL_93:
          uint64_t v5 = 0x40BF400000000000LL;
          goto LABEL_133;
        case 0xEu:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
          {
            unint64_t v13 = operator new(0x130uLL);
            uint64_t v67 = 0x40CF400000000000LL;
            __int128 v68 = *(_OWORD *)v152;
            __int128 v69 = *(_OWORD *)&v152[16];
            sub_2CA34(v13, valuePtr, &v67, *(unsigned int *)(a1 + 9108));
            __int16 v24 = (os_log_s *)qword_95978;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "Adding encoder %u, kLEAudioCodecHeimdallLite_W at bitrate %d",  (uint8_t *)&buf,  0xEu);
            }
          }

          else
          {
            unint64_t v13 = 0LL;
          }

          uint64_t v35 = valuePtr;
          if (((valuePtr - 14) & 0xFFFFFFFD) != 0)
          {
            uint64_t v19 = 0LL;
            uint64_t v16 = 32000LL;
          }

          else
          {
            uint64_t v19 = operator new(0xC8uLL);
            uint64_t v64 = 0x40CF400000000000LL;
            __int128 v65 = *(_OWORD *)__p;
            __int128 v66 = v145;
            sub_41920(v19, v35, &v64, *(unsigned int *)(a1 + 9108));
            uint64_t v42 = qword_95978;
            uint64_t v16 = 32000LL;
            if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = valuePtr;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = 32000;
              int v38 = (os_log_s *)v42;
              uint64_t v39 = "Adding decoder %u, kLEAudioCodecHeimdallLite_W at bitrate %d";
LABEL_105:
              _os_log_impl(&dword_0, v38, OS_LOG_TYPE_DEFAULT, v39, (uint8_t *)&buf, 0xEu);
            }
          }

          goto LABEL_132;
        case 0xFu:
          if (*(_DWORD *)(a1 + 9108) == 60)
          {
            if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032LL))(a1) & 1) != 0)
            {
              unint64_t v13 = operator new(0xD8uLL);
              uint64_t v112 = 0x40CF400000000000LL;
              __int128 v113 = *(_OWORD *)v152;
              __int128 v114 = *(_OWORD *)&v152[16];
              sub_1CE74((uint64_t)v13, valuePtr, (uint64_t)&v112, 0);
            }

            else
            {
              unint64_t v13 = 0LL;
            }

            uint64_t v19 = 0LL;
            uint64_t v16 = 24000LL;
            goto LABEL_132;
          }

          if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
            sub_5866C(&v115, v116);
          }
          goto LABEL_119;
        default:
          if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
            sub_58640(&v62, v63);
          }
          unint64_t v13 = 0LL;
          uint64_t v19 = 0LL;
          uint64_t v16 = 0LL;
          goto LABEL_133;
      }
    }
  }

LABEL_149:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1) && *(_DWORD *)(a1 + 9152))
  {
    uint64_t v46 = 0LL;
    while (1)
    {
      uint64_t v47 = sub_D19C(a1, *(unsigned int *)(*(void *)(a1 + 9144) + 4 * v46));
      if (v47) {
        break;
      }
    }

    *(void *)(a1 + 216) = v47;
  }

LABEL_156:
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1))
  {
    uint64_t v48 = 0LL;
    char v49 = 1;
    while (1)
    {
      char v50 = v49;
      uint64_t v51 = sub_D2DC(a1, dword_653A8[v48]);
      if (v51) {
        break;
      }
      char v49 = 0;
      uint64_t v48 = 1LL;
      if ((v50 & 1) == 0) {
        goto LABEL_162;
      }
    }

    *(void *)(a1 + 224) = v51;
  }

LABEL_162:
  uint64_t v52 = *(void *)(a1 + 224);
  if (v52)
  {
    if (*(_DWORD *)(a1 + 9104) == 2)
    {
      uint64_t v53 = sub_D19C(a1, *(unsigned int *)(v52 + 8));
      if (v53) {
        *(void *)(a1 + 216) = v53;
      }
    }
  }

  uint64_t v54 = *(void *)(a1 + 216);
  if (v54)
  {
    sub_117CC(*(id **)(a1 + 208), *(_DWORD *)(v54 + 52));
    uint64_t v55 = *(void *)(a1 + 216);
    uint64_t v56 = *(void *)(v55 + 96);
    __int128 v57 = *(_OWORD *)(v55 + 80);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(v55 + 64);
    *(_OWORD *)(a1 + 312) = v57;
    *(void *)(a1 + 328) = v56;
    uint64_t v58 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
    {
      sub_CE9C(*(_DWORD *)(v55 + 52), (std::string *)__p);
      if ((SBYTE7(v145) & 0x80u) == 0) {
        uint64_t v59 = __p;
      }
      else {
        uint64_t v59 = (void **)__p[0];
      }
      uint64_t v60 = *(void *)(a1 + 296);
      int v61 = *(_DWORD *)(a1 + 9104);
      *(_DWORD *)v152 = 136315650;
      *(void *)&v152[4] = v59;
      *(_WORD *)&v152[12] = 2048;
      *(void *)&v152[14] = v60;
      *(_WORD *)&v152[22] = 1024;
      *(_DWORD *)&v152[24] = v61;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_DEFAULT,  "Update physical format based %s at bitrate %f mAudioContentType = %d",  v152,  0x1Cu);
      if (SBYTE7(v145) < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_CAF4(_Unwind_Exception *a1)
{
}

uint64_t sub_CB78(uint64_t a1)
{
  *(void *)a1 = off_813E8;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 840LL))(a1))
  {
    uint64_t v2 = qword_962E8;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 824LL))(__p, a1);
    sub_3B7F0(v2, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 9112));
  sub_CC8C(a1);
  sub_77E0(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1632LL))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
  {
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1632LL))(a1);
    free(v3);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 1648LL))(a1, 0LL);
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  return sub_459C(a1, v4);
}

void sub_CC8C(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9120));
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0LL; i != v3; ++i)
    {
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9120), i);
      if (ValueAtIndex)
      {
        __int128 v6 = ValueAtIndex;
        uint64_t v7 = *ValueAtIndex;
        if (*ValueAtIndex)
        {
          uint64_t v8 = (os_log_s *)qword_95978;
          if (!os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)
            || (*(_DWORD *)std::string buf = 134217984,
                uint64_t v12 = v7,
                _os_log_debug_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "Deleting BTAudioEncoder 0x%p from mCodecList",  buf,  0xCu),  (uint64_t v7 = *v6) != 0))
          {
            (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
          }

          *__int128 v6 = 0LL;
        }

        uint64_t v9 = v6[1];
        if (v9)
        {
          uint64_t v10 = (os_log_s *)qword_95978;
          if (!os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)
            || (*(_DWORD *)std::string buf = 134217984,
                uint64_t v12 = v9,
                _os_log_debug_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "Deleting BTAudioDecoder 0x%p from mCodecList",  buf,  0xCu),  (uint64_t v9 = v6[1]) != 0))
          {
            (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
          }
        }

        free(v6);
      }
    }
  }

  if (*(void *)(a1 + 216)) {
    *(void *)(a1 + 216) = 0LL;
  }
  if (*(void *)(a1 + 224)) {
    *(void *)(a1 + 224) = 0LL;
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9120));
  CFRelease(*(CFTypeRef *)(a1 + 9120));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9128));
  CFRelease(*(CFTypeRef *)(a1 + 9128));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9136));
  CFRelease(*(CFTypeRef *)(a1 + 9136));
}

void sub_CE78(uint64_t a1)
{
  uint64_t v1 = (void *)sub_CB78(a1);
  operator delete(v1);
}

BOOL sub_CE8C(uint64_t a1, int a2)
{
  return ((a2 - 14) & 0xFFFFFFFD) == 0;
}

std::string *sub_CE9C@<X0>(int a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  sub_A248(a2, "Unknown");
  else {
    uint64_t v4 = off_81A90[a1 - 1];
  }
  return std::string::assign(a2, v4);
}

void sub_CF00(_Unwind_Exception *exception_object)
{
}

void sub_CF1C(CFArrayRef *a1, uint64_t a2)
{
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a1[1140]);
    uint64_t v5 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v6 = "Yes";
      int v7 = *(_DWORD *)(a2 + 16);
      if (*(void *)a2) {
        uint64_t v8 = "Yes";
      }
      else {
        uint64_t v8 = "NO";
      }
      if (!*(void *)(a2 + 8)) {
        __int128 v6 = "NO";
      }
      int v17 = 134219010;
      uint64_t v18 = a2;
      __int16 v19 = 1024;
      *(_DWORD *)uint64_t v20 = v7;
      *(_WORD *)&v20[4] = 2048;
      *(void *)&v20[6] = Count;
      __int16 v21 = 2080;
      uint64_t v22 = v8;
      __int16 v23 = 2080;
      __int16 v24 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding BTAudioEncoder %p type %d, to mCodecArray at index %ld Encode %s decode %s",  (uint8_t *)&v17,  0x30u);
    }

    CFArrayInsertValueAtIndex(a1[1140], Count, (const void *)a2);
    CFIndex v9 = CFArrayGetCount(a1[1141]);
    if (!sub_D420(v9, a1[1141], *(double *)(a2 + 24)))
    {
      uint64_t v10 = (os_log_s *)qword_95978;
      if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 24);
        int v12 = *(_DWORD *)(a2 + 16);
        int v17 = 134218496;
        uint64_t v18 = v11;
        __int16 v19 = 2048;
        *(void *)uint64_t v20 = v9;
        *(_WORD *)&v20[8] = 1024;
        *(_DWORD *)&v20[10] = v12;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Adding sampleRate %f to mSampleRateArray at index %ld via Codec %d ",  (uint8_t *)&v17,  0x1Cu);
      }

      CFArrayInsertValueAtIndex(a1[1141], v9, (const void *)(a2 + 24));
    }

    if (*(void *)(a2 + 8))
    {
      CFIndex v13 = CFArrayGetCount(a1[1142]);
      if (!sub_D420(v13, a1[1142], *(double *)(a2 + 24)))
      {
        xpc_object_t v14 = (os_log_s *)qword_95978;
        if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void *)(a2 + 24);
          int v16 = *(_DWORD *)(a2 + 16);
          int v17 = 134218496;
          uint64_t v18 = v15;
          __int16 v19 = 2048;
          *(void *)uint64_t v20 = v13;
          *(_WORD *)&v20[8] = 1024;
          *(_DWORD *)&v20[10] = v16;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Adding sampleRate %f to mSampleRateInputArray at index %ld via Codec %d ",  (uint8_t *)&v17,  0x1Cu);
        }

        CFArrayInsertValueAtIndex(a1[1142], v13, (const void *)(a2 + 24));
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR))
  {
    sub_58698();
  }

uint64_t sub_D19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)) {
    sub_586C8(a2, v4, v5, v6, v7, v8, v9, v10);
  }
  CFIndex v11 = 0LL;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9120), v11);
    if (ValueAtIndex)
    {
      CFIndex v13 = ValueAtIndex;
      uint64_t v14 = *ValueAtIndex;
      if (*ValueAtIndex)
      {
        if (*(_DWORD *)(v14 + 52) == (_DWORD)a2) {
          break;
        }
      }
    }

    if (++v11 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 9120))) {
      return 0LL;
    }
  }

  int v16 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG))
  {
    int v17 = 134217984;
    uint64_t v18 = v14;
    _os_log_debug_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "GetEncoder returned encoder at addr %p",  (uint8_t *)&v17,  0xCu);
    return *v13;
  }

  return v14;
}

uint64_t sub_D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)) {
    sub_5872C(a2, v4, v5, v6, v7, v8, v9, v10);
  }
  CFIndex v11 = 0LL;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9120), v11);
    if (ValueAtIndex)
    {
      CFIndex v13 = ValueAtIndex;
      uint64_t v14 = ValueAtIndex[1];
      if (v14)
      {
        if (*(_DWORD *)(v14 + 8) == (_DWORD)a2) {
          break;
        }
      }
    }

    if (++v11 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 9120))) {
      return 0LL;
    }
  }

  int v16 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG))
  {
    int v17 = 134217984;
    uint64_t v18 = v14;
    _os_log_debug_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "GetDecoder returned decoder at addr %p",  (uint8_t *)&v17,  0xCu);
    return v13[1];
  }

  return v14;
}

BOOL sub_D420(int a1, CFArrayRef theArray, double a3)
{
  if (!theArray) {
    return 0LL;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v6 = Count - 1;
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v7 = 0LL;
  do
  {
    BOOL v9 = *(double *)CFArrayGetValueAtIndex(theArray, v7) == a3;
    BOOL result = v9;
    BOOL v9 = v9 || v6 == v7++;
  }

  while (!v9);
  return result;
}

uint64_t sub_D49C(uint64_t a1, int a2, float *a3)
{
  float v6 = *(double *)(a1 + 296);
  *a3 = v6;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1) && a2 == 2 && *(void *)(a1 + 224))
  {
    unsigned int v7 = 2;
    uint64_t v8 = dword_653A8;
  }

  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 9152);
    if (!v7)
    {
      uint64_t v9 = 0LL;
LABEL_19:
      char v14 = 1;
LABEL_20:
      uint64_t v16 = 1LL;
      goto LABEL_21;
    }

    uint64_t v8 = *(int **)(a1 + 9144);
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = v7;
  do
  {
    unsigned int v11 = *v8++;
    uint64_t v12 = sub_D19C(a1, v11);
    if (!v12) {
      goto LABEL_14;
    }
    if (!v9)
    {
      double v13 = *(double *)(v12 + 64);
LABEL_13:
      float v6 = v13;
      uint64_t v9 = v12;
      goto LABEL_14;
    }

    double v13 = *(double *)(v12 + 64);
    if (v13 > v6) {
      goto LABEL_13;
    }
LABEL_14:
    --v10;
  }

  while (v10);
  if (!v9) {
    goto LABEL_19;
  }
  if (v9 != *(void *)(a1 + 216))
  {
    char v14 = 0;
    float v15 = *(double *)(v9 + 64);
    *a3 = v15;
    goto LABEL_20;
  }

  __int16 v21 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(_DWORD *)(v9 + 52);
    int v23 = 67109376;
    *(_DWORD *)__int16 v24 = v22;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v22;
    _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "Preferred encoded is same as current encoder = %d : %d",  (uint8_t *)&v23,  0xEu);
  }

  char v14 = 0;
  uint64_t v16 = 0LL;
LABEL_21:
  int v17 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    double v18 = *a3;
    if ((v14 & 1) != 0) {
      int v19 = 0;
    }
    else {
      int v19 = *(_DWORD *)(v9 + 52);
    }
    int v23 = 134218240;
    *(double *)__int16 v24 = v18;
    *(_WORD *)&v24[8] = 1024;
    int v25 = v19;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "New suggested sampling rate %f preferredEncoder = %d",  (uint8_t *)&v23,  0x12u);
  }

  return v16;
}

id *sub_D6A0(uint64_t a1, unsigned int a2)
{
  float v8 = 0.0;
  sub_D49C(a1, a2, &v8);
  uint64_t v4 = *(void *)(a1 + 216);
  if (v4 && *(double *)(v4 + 64) == v8)
  {
    *(_DWORD *)(a1 + 9104) = a2;
    (*(void (**)(uint64_t, double))(*(void *)a1 + 512LL))(a1, *(double *)(a1 + 296));
    uint64_t v5 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(*(void *)(a1 + 216) + 52LL);
      *(_DWORD *)std::string buf = 67109120;
      int v10 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Updating Content Type immediately as we are already using the requested codec: %d",  buf,  8u);
    }

    BOOL result = *(id **)(a1 + 208);
    if (result)
    {
      sub_11A20(result, *(_DWORD *)(a1 + 9104));
      return 0LL;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 240LL))(a1, 1650549620LL, a2);
    return (id *)(&dword_0 + 1);
  }

  return result;
}

void sub_D7C0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    float v5 = *(float *)(a1 + 9104);
    v7[0] = 1.5047e-36;
    v7[1] = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Update content type via config change, new content type =%d",  (uint8_t *)v7,  8u);
  }

  v7[0] = 0.0;
  sub_D49C(a1, a2, v7);
  *(_DWORD *)(a1 + 9104) = a2;
  (*(void (**)(uint64_t, double))(*(void *)a1 + 512LL))(a1, v7[0]);
  int v6 = *(id **)(a1 + 208);
  if (v6) {
    sub_11A20(v6, *(_DWORD *)(a1 + 9104));
  }
}

uint64_t sub_D8AC(uint64_t a1, double a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(double *)(a1 + 296);
    int v22 = 134218240;
    double v23 = v5;
    __int16 v24 = 2048;
    double v25 = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Updating sample rate %f -> %f", (uint8_t *)&v22, 0x16u);
  }

  if (*(void *)(a1 + 224) && (unsigned int v6 = *(_DWORD *)(a1 + 9104), v6 == 2))
  {
    unsigned int v7 = dword_653A8;
  }

  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 9152);
    if (!v6)
    {
LABEL_12:
      uint64_t v12 = 560227702LL;
      if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
        sub_58790();
      }
      return v12;
    }

    unsigned int v7 = *(int **)(a1 + 9144);
  }

  uint64_t v8 = v6;
  while (1)
  {
    uint64_t v9 = sub_D19C(a1, *v7);
    unsigned int v10 = *v7++;
    uint64_t v11 = sub_D2DC(a1, v10);
    if (v9)
    {
    }

    if (!--v8) {
      goto LABEL_12;
    }
  }

  if (v9 == *(void *)(a1 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
      sub_587C0();
    }
  }

  else
  {
    __int128 v13 = *(_OWORD *)(v9 + 64);
    __int128 v14 = *(_OWORD *)(v9 + 80);
    *(void *)(a1 + 328) = *(void *)(v9 + 96);
    *(_OWORD *)(a1 + 296) = v13;
    *(_OWORD *)(a1 + 312) = v14;
    *(void *)(a1 + 216) = v9;
    if (v11) {
      *(void *)(a1 + 224) = v11;
    }
    float v15 = *(id **)(a1 + 208);
    if (v15) {
      sub_117CC(v15, *(_DWORD *)(v9 + 52));
    }
  }

  *(double *)(a1 + 296) = a2;
  uint64_t v16 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(void *)(a1 + 216);
    if (v18) {
      int v19 = *(_DWORD *)(v18 + 52);
    }
    else {
      int v19 = 255;
    }
    uint64_t v20 = *(void *)(a1 + 224);
    if (v20) {
      int v21 = *(_DWORD *)(v20 + 8);
    }
    else {
      int v21 = 255;
    }
    int v22 = 134218752;
    double v23 = a2;
    __int16 v24 = 2048;
    double v25 = a2;
    __int16 v26 = 1024;
    int v27 = v19;
    __int16 v28 = 1024;
    int v29 = v21;
    _os_log_error_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "Device sample rate changed for LEA %f -> %f [encoder = %d, decoder = %d]",  (uint8_t *)&v22,  0x22u);
  }

  return 0LL;
}

void *sub_DB04@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result[52] + 9248LL);
  __int128 v3 = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 16) = *(void *)(v2 + 24);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_DB34(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 277LL);
}

uint64_t sub_DB44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 248LL))(*(void *)(a1 + 416));
}

uint64_t sub_DB54(uint64_t a1, char a2, float a3)
{
  *(float *)(a1 + 432) = a3;
  *(float *)(a1 + 440) = (float)((float)(a3 + -1.0) * 100.0) + 0.0;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)) {
    sub_587F0(a3);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1272LL))(a1);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 408))
    {
      uint64_t v7 = *(void *)(a1 + 400);
      if (v7)
      {
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 24));
        if ((v8 & 1) != 0) {
          sub_15554(*(void *)(a1 + 400), *(float *)(a1 + 440));
        }
      }
    }

    if ((a2 & 1) != 0 || (uint64_t result = sub_340E8(), (_DWORD)result))
    {
      uint64_t v9 = 0x6F757470766F6C64LL;
      int v10 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v9);
    }
  }

  return result;
}

uint64_t sub_DC4C(uint64_t a1)
{
  return (*(double *)(a1 + 296)
}

void sub_DC78(uint64_t a1, float a2)
{
  *(float *)(a1 + 440) = a2;
  *(float *)(a1 + 432) = (float)((float)(0.0 - a2) / -100.0) + 1.0;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)) {
    sub_58864(a2);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      uint64_t v4 = *(id **)(a1 + 208);
      if (v4) {
        sub_11C14(v4, *(float *)(a1 + 432));
      }
    }

    else
    {
      uint64_t v5 = *(void *)(a1 + 400);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 24));
        if ((v6 & 1) != 0) {
          sub_15554(*(void *)(a1 + 400), *(float *)(a1 + 440));
        }
      }
    }
  }

uint64_t sub_DD40(_DWORD *a1, int a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "disabled";
    if (a2) {
      uint64_t v5 = "enabled";
    }
    unsigned __int8 v6 = "enable";
    if (a2) {
      unsigned __int8 v6 = "disable";
    }
    v8[0] = 136446466;
    *(void *)&v8[1] = v5;
    __int16 v9 = 2082;
    int v10 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BT LEA device set ecnr is %{public}s. AG will %{public}s EC/NR.",  (uint8_t *)v8,  0x16u);
  }

  a1[2303] = a2;
  strcpy((char *)v8, "rncebolg");
  BYTE1(v8[2]) = 0;
  HIWORD(v8[2]) = 0;
  return (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)a1 + 248LL))(a1, v8);
}

uint64_t sub_DE48(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 9208) != (_DWORD)a2)
  {
    *(_BYTE *)(result + 9208) = a2;
    uint64_t v3 = *(void *)(result + 416);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 1032LL))(result);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 1232LL))(v3, a2, v4);
  }

  return result;
}

uint64_t sub_DEAC(CFTypeRef *a1, const __CFArray *a2)
{
  uint64_t v4 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v6 = 0;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "LEA: Setting Supported Codecs", v6, 2u);
  }

  CFRelease(a1[1139]);
  a1[1139] = CFArrayCreateCopy(kCFAllocatorDefault, a2);
  return (*((uint64_t (**)(CFTypeRef *, uint64_t, const __CFArray *))*a1 + 30))(a1, 1885762657LL, a2);
}

uint64_t sub_DF58(uint64_t a1)
{
  *(void *)(a1 + 9120) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  *(void *)(a1 + 9128) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  *(void *)(a1 + 9136) = CFArrayCreateMutable(0LL, 0LL, 0LL);
  sub_B7DC(a1, *(CFArrayRef *)(a1 + 9112));
  float v3 = 0.0;
  sub_D49C(a1, *(_DWORD *)(a1 + 9104), &v3);
  return (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 512LL))(a1, v3);
}

void sub_DFF8(uint64_t a1, int a2, int a3)
{
  unsigned __int8 v6 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v7 = "Yes";
    }
    else {
      uint64_t v7 = "No";
    }
    uint64_t v8 = *(void *)(a1 + 224);
    if (v8) {
      int v9 = *(_DWORD *)(v8 + 8);
    }
    else {
      int v9 = 255;
    }
    if (a3) {
      int v10 = "Yes";
    }
    else {
      int v10 = "No";
    }
    uint64_t v11 = *(void *)(a1 + 216);
    if (v11) {
      int v12 = *(_DWORD *)(v11 + 52);
    }
    else {
      int v12 = 255;
    }
    int v26 = 136446978;
    int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v9;
    __int16 v30 = 2082;
    uint64_t v31 = v10;
    __int16 v32 = 1024;
    int v33 = v12;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "LEA: Updating Codecs Input = %{public}s Decoder = %d , Output = %{public}s Encoder = %d",  (uint8_t *)&v26,  0x22u);
  }

  if (a3 && !*(void *)(a1 + 216) && *(_DWORD *)(a1 + 9152))
  {
    uint64_t v21 = 0LL;
    while (1)
    {
      uint64_t v22 = sub_D19C(a1, *(unsigned int *)(*(void *)(a1 + 9144) + 4 * v21));
      if (v22) {
        break;
      }
    }

    *(void *)(a1 + 216) = v22;
  }

LABEL_17:
  if (a2)
  {
    uint64_t v13 = *(void *)(a1 + 224);
    if (v13) {
      goto LABEL_25;
    }
    char v14 = 1;
    while (1)
    {
      char v15 = v14;
      uint64_t v16 = sub_D2DC(a1, dword_653A8[v13]);
      if (v16) {
        break;
      }
      char v14 = 0;
      uint64_t v13 = 1LL;
      if ((v15 & 1) == 0) {
        goto LABEL_25;
      }
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  *(void *)(a1 + 224) = v16;
LABEL_25:
  int v17 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v18 = "Yes";
    }
    else {
      uint64_t v18 = "No";
    }
    uint64_t v19 = *(void *)(a1 + 224);
    if (v19) {
      int v20 = *(_DWORD *)(v19 + 8);
    }
    else {
      int v20 = 255;
    }
    if (a3) {
      double v23 = "Yes";
    }
    else {
      double v23 = "No";
    }
    uint64_t v24 = *(void *)(a1 + 216);
    if (v24) {
      int v25 = *(_DWORD *)(v24 + 52);
    }
    else {
      int v25 = 255;
    }
    int v26 = 136446978;
    int v27 = v18;
    __int16 v28 = 1024;
    int v29 = v20;
    __int16 v30 = 2082;
    uint64_t v31 = v23;
    __int16 v32 = 1024;
    int v33 = v25;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "LEA: Codec Update completed Input = %{public}s Decoder = %d , Output = %{public}s Encoder = %d",  (uint8_t *)&v26,  0x22u);
  }

  if (*(_BYTE *)(a1[1137] + 192LL)) {
    uint64_t v13 = a1[1137];
  }
  else {
    uint64_t v13 = 0LL;
  }
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v13 + 256LL))( v13,  0LL,  1918989668LL,  1LL))
  {
    sub_4DAF8((uint64_t)a1);
  }

  return 1LL;
}

uint64_t sub_E24C(_BYTE *a1, int *a2)
{
  int v4 = *a2;
  uint64_t result = 1LL;
  if (*a2 > 1701015153)
  {
    if (v4 == 1701015154) {
      return result;
    }
    if (v4 != 1870098020 && v4 != 1937009955) {
      return sub_8680();
    }
    if (((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 1040LL))(a1) && a1[9208] || a2[1] != 1768845428)
      && ((char v7 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 1032LL))(a1), v8 = a2[1], (v7 & 1) != 0)
       || v8 != 1869968496)
      && (v8 == 1735159650 || v8 == 1869968496 || v8 == 1768845428))
    {
      return a2[2] == 0;
    }

    else
    {
      return 0LL;
    }
  }

  else if (v4 != 1650549620 && v4 != 1651728749)
  {
    if (v4 == 1684234612)
    {
      if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEBUG)) {
        sub_588D8();
      }
      return 1LL;
    }

    return sub_8680();
  }

  return result;
}

uint64_t sub_E3C0(uint64_t a1, int *a2, _BYTE *a3)
{
  int v4 = *a2;
  if (*a2 > 1684234611)
  {
    if (v4 != 1701015154)
    {
      if (v4 != 1684234612) {
        return sub_8688();
      }
      uint64_t v5 = (os_log_s *)qword_95978;
      if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)char v7 = 0;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "kBluetoothAudioDeviceCategory", v7, 2u);
      }
    }
  }

  else
  {
    if (v4 == 1650549620)
    {
      *a3 = 1;
      return 0LL;
    }

    if (v4 != 1651728749) {
      return sub_8688();
    }
  }

  *a3 = 0;
  return 0LL;
}

uint64_t sub_E4A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a2;
  if (*a2 > 1668641651)
  {
    if (v6 != 1701015154 && v6 != 1684234612)
    {
      if (v6 == 1668641652)
      {
        uint64_t result = sub_8690();
        *a5 += 48;
        return result;
      }

      return sub_8690();
    }

    goto LABEL_9;
  }

  if (v6 == 1650549620)
  {
LABEL_9:
    int v8 = 4;
    goto LABEL_10;
  }

  if (v6 == 1651728749)
  {
    int v8 = 1;
LABEL_10:
    *a5 = v8;
    return 0LL;
  }

  return sub_8690();
}

uint64_t sub_E560(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 240LL))(*(void *)(a1 + 416));
}

uint64_t sub_E570(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int *a7, double *a8)
{
  int v12 = *a2;
  if (*a2 > 1684234611)
  {
    switch(v12)
    {
      case 1684234612:
        uint64_t result = 0LL;
        int v22 = *(_DWORD *)(a1 + 9216);
        break;
      case 1701015154:
        uint64_t result = 0LL;
        int v22 = *(_DWORD *)(a1 + 9212);
        break;
      case 1853059619:
        if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)))
        {
          double v18 = *(double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9128), 0LL);
          if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)) < 2)
          {
            double v20 = v18;
          }

          else
          {
            CFIndex v19 = 1LL;
            double v20 = v18;
            do
            {
              ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9128), v19);
              if (*ValueAtIndex < v20) {
                double v20 = *ValueAtIndex;
              }
              if (*ValueAtIndex > v18) {
                double v18 = *ValueAtIndex;
              }
              ++v19;
            }

            while (v19 < CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)));
          }
        }

        else
        {
          double v20 = 8000.0;
          double v18 = 8000.0;
        }

        uint64_t result = 0LL;
        *a8 = v20;
        a8[1] = v18;
        int v17 = 16;
        goto LABEL_34;
      default:
        return sub_8698();
    }

LABEL_29:
    *(_DWORD *)a8 = v22;
    int v17 = 4;
    goto LABEL_34;
  }

  if (v12 == 1650549620)
  {
    uint64_t result = 0LL;
    int v22 = *(_DWORD *)(a1 + 9104);
    goto LABEL_29;
  }

  if (v12 != 1651728749)
  {
    if (v12 == 1668641652)
    {
      uint64_t result = sub_8698();
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v14 = *a7;
      unsigned int v15 = (a6 - (int)v14) / 0xCu;
      if (v15 >= 2) {
        unsigned int v15 = 2;
      }
      if (v15)
      {
        uint64_t v16 = (char *)a8 + v14;
        *(void *)uint64_t v16 = 0x7261777764636174LL;
        *((_DWORD *)v16 + 2) = 0;
        if (v15 != 1)
        {
          strcpy(v16 + 12, "tcabwwar");
          v16[21] = 0;
          *((_WORD *)v16 + 11) = 0;
        }

        LODWORD(v14) = *a7;
      }

      uint64_t result = 0LL;
      int v17 = v14 + 12 * v15;
      goto LABEL_34;
    }

    return sub_8698();
  }

  uint64_t result = 0LL;
  *(_BYTE *)a8 = *(_BYTE *)(a1 + 9156);
  int v17 = 1;
LABEL_34:
  *a7 = v17;
  return result;
}

    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }

  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }

    while (v12);
  }

  else
  {
    CFIndex v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      uint64_t v14 = *a4 == (void)v19;
      CFIndex v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    double v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          double v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }

        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        double v20 = v21[1];
      }

      while (v20);
    }

    else
    {
      uint64_t v21 = a1 + 1;
    }

    if (!v11) {
      return result;
    }
    uint64_t v14 = 0;
    goto LABEL_39;
  }

  if (v16 > 1667591276)
  {
    if (v16 == 1667591277) {
      goto LABEL_39;
    }
    int v17 = 1668047219;
    goto LABEL_35;
  }

  if (v16 == 1650682995) {
    goto LABEL_39;
  }
  if (v16 == 1650685548 && v13)
  {
LABEL_38:
    uint64_t v14 = 1;
    goto LABEL_39;
  }

  return result;
}

uint64_t sub_E7A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6)
{
  uint64_t v6 = 561211770LL;
  if (a6)
  {
    if (*a2 == 1853059700)
    {
      if (a5 != 8)
      {
        if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_ERROR)) {
          sub_58910();
        }
        return v6;
      }

      double v8 = *(double *)(a1 + 296);
      double v9 = *(double *)a6;
      int v10 = (os_log_s *)qword_95978;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        int v17 = 67109376;
        unsigned int v18 = v8;
        __int16 v19 = 1024;
        unsigned int v20 = v9;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "setPropertyData: sample rate (%d->%d)\n",  (uint8_t *)&v17,  0xEu);
      }

      if (v9 != v8)
      {
        if (*(void *)(a1 + 224) && *(_DWORD *)(a1 + 9104) == 2) {
          uint64_t v12 = 9136LL;
        }
        else {
          uint64_t v12 = 9128LL;
        }
        BOOL v14 = sub_D420(v11, *(CFArrayRef *)(a1 + v12), v9);
        unsigned int v15 = (os_log_s *)qword_95978;
        BOOL v16 = os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT);
        if (!v14)
        {
          uint64_t v6 = 560226676LL;
          if (v16)
          {
            int v17 = 67109376;
            unsigned int v18 = v8;
            __int16 v19 = 1024;
            unsigned int v20 = v9;
            _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "setPropertyData unsupported: sample rate (%d->%d)\n",  (uint8_t *)&v17,  0xEu);
          }

          return v6;
        }

        if (v16)
        {
          int v17 = 67109376;
          unsigned int v18 = v8;
          __int16 v19 = 1024;
          unsigned int v20 = v9;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "Request device configuration change: sample rate (%d->%d)\n",  (uint8_t *)&v17,  0xEu);
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1853059700LL, (uint64_t)v9);
      }
    }

    else
    {
      if (*a2 != 1650549620) {
        return sub_86A0();
      }
      if (*a6 != *(_DWORD *)(a1 + 9104)) {
        sub_D6A0(a1, *a6);
      }
    }

    return 0LL;
  }

  return v6;
}

uint64_t sub_EA30()
{
  v0 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

uint64_t sub_EA78()
{
  v0 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

uint64_t sub_EAC0()
{
  v0 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

void sub_EB08()
{
  v0 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_0, v0, OS_LOG_TYPE_DEFAULT, "LEA NotifyPostProfileUpdateProperty", v1, 2u);
  }

uint64_t sub_EB68()
{
  v0 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
    sub_5807C(v0, v1, v2, v3, v4, v5, v6, v7);
  }
  uint64_t result = sub_52814();
  if ((_DWORD)result) {
    abort();
  }
  return result;
}

double sub_EBB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 224);
  if (v1) {
    return *(double *)(v1 + 64);
  }
  else {
    return 0.0;
  }
}

__n128 sub_EBC8@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2) {
    uint64_t v3 = *(void *)(a1 + 224);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 216);
  }
  __n128 result = *(__n128 *)(v3 + 64);
  __int128 v5 = *(_OWORD *)(v3 + 80);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v5;
  *(void *)(a3 + 32) = *(void *)(v3 + 96);
  return result;
}

void sub_EBEC(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kBTAudioMsgPropertyDeviceUID");
  if (!string)
  {
    uint64_t v4 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_58940(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
  *(void *)(a1 + 200) = v12;
  uint64_t v13 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v15 = 138412546;
    CFStringRef v16 = v12;
    __int16 v17 = 1024;
    int v18 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "LEA Device XPC connection for UID %@ connected to[ %d ] ",  (uint8_t *)&v15,  0x12u);
    CFStringRef v12 = *(CFStringRef *)(a1 + 200);
  }

  **(void **)(a1 + 208) = v12;
}

CFIndex sub_ED24(uint64_t a1, uint64_t a2, CFIndex Count, int a4)
{
  if (a4)
  {
    uint64_t v7 = *(void *)(a1 + 224);
    *(_OWORD *)int v18 = *(_OWORD *)(v7 + 64);
    *(_OWORD *)&v18[16] = *(_OWORD *)(v7 + 80);
    *(void *)&v18[32] = *(void *)(v7 + 96);
    __int128 v20 = *(_OWORD *)&v18[8];
    __int128 v21 = *(_OWORD *)&v18[24];
LABEL_3:
    uint64_t v8 = 9136LL;
    goto LABEL_8;
  }

  uint64_t v9 = *(void *)(a1 + 216);
  *(_OWORD *)__int16 v19 = *(_OWORD *)(v9 + 64);
  *(_OWORD *)&v19[16] = *(_OWORD *)(v9 + 80);
  *(void *)&v19[32] = *(void *)(v9 + 96);
  __int128 v20 = *(_OWORD *)&v19[8];
  __int128 v21 = *(_OWORD *)&v19[24];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1)
    && *(void *)(a1 + 224)
    && *(_DWORD *)(a1 + 9104) == 2)
  {
    goto LABEL_3;
  }

  uint64_t v8 = 9128LL;
LABEL_8:
  uint64_t v10 = *(const __CFArray **)(a1 + v8);
  if (CFArrayGetCount(v10) >= 1)
  {
    CFIndex v11 = 0LL;
    unsigned int v12 = 1;
    do
    {
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(v10, v11);
      uint64_t v14 = *ValueAtIndex;
      CFIndex v15 = a2 + 56 * v11;
      *(void *)CFIndex v15 = *ValueAtIndex;
      *(_OWORD *)(v15 + 24) = v21;
      *(_OWORD *)(v15 + 8) = v20;
      *(int64x2_t *)(v15 + 40) = vdupq_lane_s64(v14, 0);
      CFIndex v11 = v12;
    }

    while (CFArrayGetCount(v10) > v12++);
  }

  return Count;
}

uint64_t sub_EE60(uint64_t a1, double *a2, uint64_t a3)
{
  if ((_DWORD)a3 != 1)
  {
    uint64_t v6 = (os_log_s *)qword_95978;
    if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_FAULT)) {
      sub_589B0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)))
  {
    double v14 = *(double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9128), 0LL);
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)) < 2)
    {
      double v16 = v14;
    }

    else
    {
      CFIndex v15 = 1LL;
      double v16 = v14;
      do
      {
        ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9128), v15);
        if (*ValueAtIndex < v16) {
          double v16 = *ValueAtIndex;
        }
        if (*ValueAtIndex > v14) {
          double v14 = *ValueAtIndex;
        }
        ++v15;
      }

      while (v15 < CFArrayGetCount(*(CFArrayRef *)(a1 + 9128)));
    }
  }

  else
  {
    double v16 = 8000.0;
    double v14 = 8000.0;
  }

  int v18 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 134218240;
    double v21 = v16;
    __int16 v22 = 2048;
    double v23 = v14;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "LEA: UpdateSamplingRate minRate %f, maxRate %f",  (uint8_t *)&v20,  0x16u);
  }

  *a2 = v16;
  a2[1] = v14;
  return a3;
}

uint64_t sub_EFE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 1232LL))(*(void *)(a1 + 416));
}

uint64_t sub_EFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1472LL))(a1, a2, a3);
}

CFIndex sub_F054(uint64_t a1, int a2)
{
  if (a2
    || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1)
    && *(void *)(a1 + 224)
    && *(_DWORD *)(a1 + 9104) == 2)
  {
    uint64_t v3 = 9136LL;
  }

  else
  {
    uint64_t v3 = 9128LL;
  }

  return CFArrayGetCount(*(CFArrayRef *)(a1 + v3));
}

uint64_t sub_F0B4()
{
  return 1LL;
}

BOOL sub_F0BC(uint64_t a1, char a2, double a3, double a4)
{
  if (a4 == a3)
  {
    BOOL v7 = 0LL;
  }

  else
  {
    if ((a2 & 1) != 0 || *(void *)(a1 + 224) && *(_DWORD *)(a1 + 9104) == 2) {
      uint64_t v6 = 9136LL;
    }
    else {
      uint64_t v6 = 9128LL;
    }
    BOOL v7 = sub_D420(a1, *(CFArrayRef *)(a1 + v6), a4);
  }

  uint64_t v8 = (os_log_s *)qword_95978;
  if (os_log_type_enabled((os_log_t)qword_95978, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a3;
    __int16 v11 = 1024;
    unsigned int v12 = a4;
    __int16 v13 = 1024;
    BOOL v14 = v7;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "FormatChangeSupported: sample rate (%d->%d) Supported = %d\n",  (uint8_t *)v10,  0x14u);
  }

  return v7;
}

uint64_t sub_F1CC(_BYTE *a1, int a2, int a3)
{
  if (!(*(unsigned int (**)(_BYTE *))(*(void *)a1 + 1040LL))(a1))
  {
    if (a2 != 1768845428) {
      goto LABEL_6;
    }
    return 0LL;
  }

  if (a2 == 1768845428 && !a1[9208]) {
    return 0LL;
  }
LABEL_6:
  uint64_t result = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 1032LL))(a1);
  if (a2 != 1869968496 || (_DWORD)result)
  {
    if (a2 == 1735159650 || a2 == 1869968496 || a2 == 1768845428) {
      return a3 == 0;
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_F290()
{
  return 0LL;
}

uint64_t sub_F298()
{
  return 0LL;
}

uint64_t sub_F2A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9216) = a2;
  return result;
}

double sub_F2A8(uint64_t a1)
{
  return *(double *)(a1 + 296);
}

uint64_t sub_F2B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 376);
}

uint64_t sub_F2B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9216);
}

uint64_t sub_F2C0()
{
  return 0LL;
}

uint64_t sub_F2C8()
{
  return 0LL;
}

uint64_t sub_F2D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 409) = a2;
  return result;
}

uint64_t sub_F2D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 410) = a2;
  return result;
}

BOOL sub_F2E0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 409) != 0;
}

BOOL sub_F2F0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 410) != 0;
}

uint64_t sub_F300()
{
  return 0LL;
}

uint64_t sub_F308()
{
  return 1LL;
}

uint64_t sub_F310()
{
  return 0LL;
}

uint64_t sub_F318()
{
  return 0LL;
}

uint64_t sub_F320(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9104);
}

uint64_t sub_F330(uint64_t a1)
{
  return *(void *)(a1 + 9080);
}

uint64_t sub_F338(uint64_t a1)
{
  return *(void *)(a1 + 9088);
}

uint64_t sub_F340(uint64_t a1)
{
  return *(void *)(a1 + 9096);
}

uint64_t sub_F348(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9088) = a2;
  return result;
}

uint64_t sub_F350(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9096) = a2;
  return result;
}

uint64_t sub_F358(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9080) = a2;
  return result;
}

void sub_F360(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

_BYTE *sub_F36C(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = 0;
  *a2 = 0;
  return result;
}

double sub_F37C(float a1)
{
  return a1;
}

void sub_F398( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_F3A8()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95978 = (uint64_t)result;
  return result;
}

uint64_t sub_F3D4(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)sub_2C61C(a1) = &off_81B30;
  uint64_t v6 = (os_log_s *)qword_95980;
  if (os_log_type_enabled((os_log_t)qword_95980, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = sub_2C7AC(a1);
    uint64_t v8 = "output";
    if (a3) {
      uint64_t v8 = "input";
    }
    int v10 = 136446466;
    __int16 v11 = v8;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Creating %{public}s audio stream with audioObjectID: %u",  (uint8_t *)&v10,  0x12u);
  }

  *(void *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 13) = a3;
  return a1;
}

void sub_F4C8(_Unwind_Exception *a1)
{
}

void sub_F4E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2C6D4(a1);
  operator delete(v1);
}

uint64_t sub_F4FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 13);
}

uint64_t sub_F504(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 80LL))( *(void *)(a1 + 16),  a1,  a2);
}

uint64_t sub_F51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 88LL))( *(void *)(a1 + 16),  a1,  a2,  a3);
}

uint64_t sub_F538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 96LL))( *(void *)(a1 + 16),  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_F55C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 104LL))( *(void *)(a1 + 16),  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_F5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 16) + 112LL))( *(void *)(a1 + 16),  a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

os_log_t sub_F5D4()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95980 = (uint64_t)result;
  return result;
}

LABEL_11:
  __int16 v12 = qword_95988;
  if (!os_log_type_enabled((os_log_t)qword_95988, OS_LOG_TYPE_DEFAULT)) {
    return;
  }
  volumeAudioCategoryMap = self->_volumeAudioCategoryMap;
  BOOL v14 = 138412290;
  CFIndex v15 = volumeAudioCategoryMap;
  uint64_t v9 = "BTAudioAVNotificationMonitor: _volumeAudioCategoryMap %@";
  int v10 = (os_log_s *)v12;
  __int16 v11 = 12;
LABEL_13:
  _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
}

  __int16 v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1032LL))(*(void *)(a1 + 9120));
  int v18 = *(void *)(a1 + 9136);
  if (!v17)
  {
    if (v18)
    {
      __int16 v22 = *(const __CFArray **)(a1 + 9200);
      double v23 = *(const __CFArray **)(a1 + 9176);
      v46.length = CFArrayGetCount(v22);
      v46.location = 0LL;
      uint64_t v24 = CFArrayGetFirstIndexOfValue(v23, v46, *(const void **)(a1 + 9136));
      CFArrayRemoveValueAtIndex(v22, v24);
      int v25 = *(const __CFArray **)(a1 + 9216);
      int v26 = *(const __CFArray **)(a1 + 9192);
      v47.length = CFArrayGetCount(v25);
      v47.location = 0LL;
      int v27 = CFArrayGetFirstIndexOfValue(v26, v47, *(const void **)(a1 + 9136));
      CFArrayRemoveValueAtIndex(v25, v27);
      __int16 v28 = *(const __CFArray **)(a1 + 9224);
      v48.length = CFArrayGetCount(v28);
      v48.location = 0LL;
      int v29 = CFArrayGetFirstIndexOfValue(v28, v48, *(const void **)(a1 + 9136));
      CFArrayRemoveValueAtIndex(v28, v29);
      __int16 v30 = *(const __CFArray **)(a1 + 9240);
      v49.length = CFArrayGetCount(v30);
      v49.location = 0LL;
      uint64_t v31 = CFArrayGetFirstIndexOfValue(v30, v49, *(const void **)(a1 + 9136));
      CFArrayRemoveValueAtIndex(v30, v31);
    }

    goto LABEL_19;
  }

  if (v18)
  {
    __int16 v19 = *(const __CFArray **)(a1 + 9200);
    v45.length = CFArrayGetCount(v19);
    v45.location = 0LL;
    int v20 = *(__CFArray **)(a1 + 9200);
    double v21 = *(const void **)(a1 + 9136);
  }

  else
  {
    __int16 v32 = operator new(0x18uLL);
    sub_F4DC((uint64_t)v32, a1, 0);
    *(void *)(a1 + 9136) = v32;
    int v20 = *(__CFArray **)(a1 + 9200);
    double v21 = v32;
  }

  CFArrayAppendValue(v20, v21);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9216), *(const void **)(a1 + 9136));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9224), *(const void **)(a1 + 9136));
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9136));
LABEL_19:
  int v33 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9176))) {
      uint64_t v34 = "Yes";
    }
    else {
      uint64_t v34 = "No";
    }
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 9200))) {
      uint64_t v35 = "Yes";
    }
    else {
      uint64_t v35 = "No";
    }
    int v36 = 136315394;
    uint64_t v37 = v34;
    int v38 = 2080;
    uint64_t v39 = v35;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice : Stream info,  Input Stream = %s Output Stream = %s ",  (uint8_t *)&v36,  0x16u);
  }

uint64_t sub_100F0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100F8(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(*(void *)(a1 + 32) + 24LL));
  if (v2)
  {
    (*(void (**)(void *, void))(*v2 + 1120LL))(v2, *(void *)(a1 + 40));
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_95988;
    if (os_log_type_enabled((os_log_t)qword_95988, OS_LOG_TYPE_ERROR)) {
      sub_58A94(v3);
    }
  }

BTAudioAVNotificationMonitor *sub_10220(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  uint64_t v2 = (os_log_s *)qword_95988;
  if (os_log_type_enabled((os_log_t)qword_95988, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice::startManualVolumeUpdateTimer: reached the time limit",  v6,  2u);
  }

  os_log_t result = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
  if (result)
  {
    uint64_t v4 = result;
    id v5 = *(id *)(*(void *)(a1 + 32) + 32LL);
    os_log_t result = -[BTAudioAVNotificationMonitor getPersonalizedVolumeDevice:]( v4,  "getPersonalizedVolumeDevice:",  *(void *)(*(void *)(a1 + 32) + 32LL));
    if (result) {
      *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
    }
  }

  return result;
}

os_log_t sub_10318()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95988 = (uint64_t)result;
  return result;
}

double sub_10344(uint64_t a1, int a2, __int128 *a3)
{
  *(void *)a1 = off_81C10;
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 168) = 0LL;
  *(_WORD *)(a1 + 177) = 0;
  *(_DWORD *)(a1 + 52) = a2;
  __int128 v3 = *a3;
  __int128 v4 = a3[1];
  *(void *)(a1 + 96) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return result;
}

void *sub_10384(void *a1)
{
  *a1 = off_81C10;
  uint64_t v2 = (void *)a1[18];
  a1[18] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  __int128 v3 = (void *)a1[21];
  a1[21] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  __int128 v4 = (void *)a1[18];
  a1[18] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  return a1;
}

uint64_t sub_103E8(uint64_t a1, int a2, _BYTE *a3, int a4, int a5)
{
  if (a4)
  {
    unint64_t v5 = 0LL;
    uint64_t v6 = a4;
    char v7 = ~(-1 << a2);
    char v8 = 8 - a2;
    uint64_t v9 = a3;
    do
    {
      unint64_t v10 = v5 / a2;
      if (a5)
      {
        unsigned int v11 = (a3[v10] & v7);
        LOBYTE(v12) = a3[v10] & v7;
      }

      else
      {
        int v12 = a3[v10] >> v8;
        unsigned int v11 = a3[v10 + 1] >> v8;
      }

      *v9++ = (v11 >> (a2 - 8 + a2 + v10 * a2 - v5)) | ((_BYTE)v12 << (8 - (a2 + v10 * a2 - v5)));
      v5 += 8LL;
      --v6;
    }

    while (v6);
  }

  return (uint64_t)(a4 * a2 + (a4 * a2 < 0 ? 7 : 0)) >> 3;
}

void sub_1048C(int a1, AudioConverterRef inAudioConverter, OpaqueAudioFileID *a3)
{
  UInt32 outSize = 0;
  if (!AudioConverterGetPropertyInfo(inAudioConverter, 0x636D6763u, &outSize, 0LL) && outSize)
  {
    unint64_t v5 = operator new[](outSize);
    if (AudioConverterGetProperty(inAudioConverter, 0x636D6763u, &outSize, v5))
    {
      if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
        sub_58B68();
      }
    }

    else
    {
      OSStatus v6 = AudioFileSetProperty(a3, 0x6D676963u, outSize, v5);
      char v7 = (os_log_s *)qword_95990;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
      if (v6)
      {
        if (v8) {
          sub_58B3C();
        }
      }

      else if (v8)
      {
        sub_58AD4((uint64_t)&outSize, v7, v9, v10, v11, v12, v13, v14);
      }
    }

    operator delete[](v5);
  }

void sub_1058C(int a1, AudioConverterRef inAudioConverter, uint64_t a3, OpaqueAudioFileID *a4)
{
  UInt32 outSize = 0;
  if (!AudioConverterGetPropertyInfo(inAudioConverter, 0x6F636C20u, &outSize, 0LL) && outSize)
  {
    OSStatus v6 = operator new[](outSize);
    if (AudioConverterGetProperty(inAudioConverter, 0x6F636C20u, &outSize, v6))
    {
      if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
        sub_58C28();
      }
    }

    else
    {
      OSStatus v7 = AudioFileSetProperty(a4, 0x636D6170u, outSize, v6);
      BOOL v8 = (os_log_s *)qword_95990;
      BOOL v9 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        if (v9) {
          sub_58BFC();
        }
      }

      else if (v9)
      {
        sub_58B94((uint64_t)&outSize, v8, v10, v11, v12, v13, v14, v15);
      }
    }

    operator delete[](v6);
  }

void sub_1068C(int a1, OpaqueAudioConverter *a2, AudioFileID inAudioFile)
{
  *(void *)isWritable = 0LL;
  OSStatus PropertyInfo = AudioFileGetPropertyInfo(inAudioFile, 0x706E666Fu, isWritable, &isWritable[1]);
  int v6 = isWritable[1];
  if (PropertyInfo || !isWritable[1])
  {
    OSStatus v7 = (os_log_s *)qword_95990;
    if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
      sub_58DEC(PropertyInfo, v6, v7);
    }
  }

  else
  {
    uint64_t outPropertyData = 0LL;
    isWritable[0] = 8;
    if (AudioConverterGetProperty(a2, 0x7072696Du, isWritable, &outPropertyData))
    {
      if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
        sub_58DC0();
      }
    }

    else
    {
      uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      isWritable[0] = 16;
      uint64_t Property = AudioFileGetProperty(inAudioFile, 0x706E666Fu, isWritable, &v28);
      if ((_DWORD)Property)
      {
        uint64_t v9 = Property;
        uint64_t v10 = (os_log_s *)qword_95990;
        if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
          sub_58D5C(v9, v10, v11, v12, v13, v14, v15, v16);
        }
      }

      else
      {
        uint64_t v17 = v28 + (int)v29 + SHIDWORD(v29);
        int v18 = (os_log_s *)qword_95990;
        if (os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR)) {
          sub_58CE8(v17, v18);
        }
        uint64_t v29 = outPropertyData;
        uint64_t v28 = v17 - ((int)outPropertyData + (uint64_t)SHIDWORD(outPropertyData));
        OSStatus v19 = AudioFileSetProperty(inAudioFile, 0x706E666Fu, 0x10u, &v28);
        int v20 = (os_log_s *)qword_95990;
        BOOL v21 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
        if (v19)
        {
          if (v21) {
            sub_58CBC();
          }
        }

        else
        {
          if (v21)
          {
            *(_DWORD *)std::string buf = 134217984;
            uint64_t v33 = 16LL;
            _os_log_error_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "Writing packet table information to destination file: %ld\n",  buf,  0xCu);
            int v20 = (os_log_s *)qword_95990;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 134217984;
            uint64_t v33 = v28;
            _os_log_error_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "     Total valid frames: %lld\n", buf, 0xCu);
            int v20 = (os_log_s *)qword_95990;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            LODWORD(v33) = v29;
            _os_log_error_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "         Priming frames: %d\n", buf, 8u);
            int v20 = (os_log_s *)qword_95990;
          }

          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
            sub_58C54((uint64_t)&v29 + 4, v20, v22, v23, v24, v25, v26, v27);
          }
        }
      }
    }
  }

void sub_1097C(uint64_t a1, UInt32 a2, UInt32 a3)
{
  UInt32 ioNumPackets = a3;
  __int16 v31 = 0;
  memset(v30, 0, sizeof(v30));
  memset(&v24, 0, sizeof(v24));
  time_t v23 = time(0LL);
  localtime_r(&v23, &v24);
  sprintf( (char *)v30,  "%d_%d_%d_%d_%d_%d",  v24.tm_year + 1900,  v24.tm_mon + 1,  v24.tm_mday,  v24.tm_hour,  v24.tm_min,  v24.tm_sec);
  int v5 = sub_340E8();
  int v6 = "/var/tmp";
  if (v5) {
    int v6 = "/Library/Preferences/Audio";
  }
  if (*(_BYTE *)(a1 + 176))
  {
    if (!*(void *)(a1 + 16))
    {
      __int16 v29 = 0;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      *(_OWORD *)cStr = 0u;
      sprintf(cStr, "%s/encode-capture-%s.caf", v6, (const char *)v30);
      OSStatus v7 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
      CFURLRef v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v7, kCFURLPOSIXPathStyle, 0);
      *(void *)(a1 + 16) = v8;
      BOOL v9 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
      if (v8)
      {
        if (v9) {
          sub_58EC8();
        }
      }

      else if (v9)
      {
        sub_58E9C();
      }

      CFRelease(v7);
    }

    uint64_t v12 = (OpaqueAudioFileID **)(a1 + 8);
    uint64_t v11 = *(OpaqueAudioFileID **)(a1 + 8);
    if (v11) {
      goto LABEL_15;
    }
    uint64_t v16 = *(const __CFURL **)(a1 + 16);
    if (v16)
    {
      int v17 = AudioFileCreateWithURL( v16,  0x63616666u,  (const AudioStreamBasicDescription *)(a1 + 104),  1u,  (AudioFileID *)(a1 + 8));
      if (v17)
      {
        int v17 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
        if (v17) {
          sub_58E70();
        }
      }

      sub_1048C(v17, *(AudioConverterRef *)(a1 + 56), *(OpaqueAudioFileID **)(a1 + 8));
      if (*(_DWORD *)(a1 + 92) >= 3u) {
        sub_1058C(v18, *(AudioConverterRef *)(a1 + 56), v19, *(OpaqueAudioFileID **)(a1 + 8));
      }
      uint64_t v11 = *v12;
      if (*v12)
      {
LABEL_15:
        OSStatus v13 = AudioFileWritePackets( v11,  0,  a2,  *(const AudioStreamPacketDescription **)(a1 + 168),  *(void *)(a1 + 32),  &ioNumPackets,  *(const void **)(a1 + 144));
        sub_189BC(v13, (uint64_t)"AudioFileWritePackets failed!");
        uint64_t v14 = ioNumPackets;
        *(void *)(a1 + 32) += ioNumPackets;
        int v15 = *(_DWORD *)(a1 + 124);
        if (v15)
        {
          *(void *)(a1 + 24) += (v15 * v14);
        }

        else if ((_DWORD)v14)
        {
          uint64_t v20 = *(void *)(a1 + 24);
          BOOL v21 = (unsigned int *)(*(void *)(a1 + 168) + 8LL);
          do
          {
            unsigned int v22 = *v21;
            v21 += 4;
            v20 += v22;
            --v14;
          }

          while (v14);
          *(void *)(a1 + 24) = v20;
        }
      }
    }
  }

  else
  {
    uint64_t v10 = *(FILE **)(a1 + 40);
    if (v10
      || (__int16 v29 = 0,
          __int128 v27 = 0u,
          __int128 v28 = 0u,
          *(_OWORD *)cStr = 0u,
          sprintf(cStr, "%s/encode-capture-%s.enc", v6, (const char *)v30),
          uint64_t v10 = fopen(cStr, "wb"),
          (*(void *)(a1 + 40) = v10) != 0LL))
    {
      fwrite(*(const void **)(a1 + 144), 1uLL, a2, v10);
    }
  }

void sub_10C7C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 176))
  {
    uint64_t v2 = *(OpaqueAudioFileID **)(a1 + 8);
    if (v2)
    {
      if (!*(_DWORD *)(a1 + 136))
      {
        __int128 v3 = (os_log_s *)qword_95990;
        BOOL v4 = os_log_type_enabled((os_log_t)qword_95990, OS_LOG_TYPE_ERROR);
        if (v4)
        {
          uint64_t v5 = *(void *)(a1 + 24);
          int v6 = 134217984;
          uint64_t v7 = v5;
          _os_log_error_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "Total number of output frames counted: %lld\n",  (uint8_t *)&v6,  0xCu);
          uint64_t v2 = *(OpaqueAudioFileID **)(a1 + 8);
        }

        sub_1068C(v4, *(OpaqueAudioConverter **)(a1 + 56), v2);
        uint64_t v2 = *(OpaqueAudioFileID **)(a1 + 8);
      }

      sub_1048C(a1, *(AudioConverterRef *)(a1 + 56), v2);
      AudioFileClose(*(AudioFileID *)(a1 + 8));
      *(void *)(a1 + 8) = 0LL;
      CFRelease(*(CFTypeRef *)(a1 + 16));
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 32) = 0LL;
    }
  }

  else
  {
    fclose(*(FILE **)(a1 + 40));
    *(void *)(a1 + 40) = 0LL;
  }

void sub_10D8C(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v5 = (_BYTE *)(a5 + 1);
    do
    {
      char v6 = *a2++;
      *(v5 - 1) = v6;
      char v7 = *a3++;
      _BYTE *v5 = v7;
      v5 += 2;
      --a4;
    }

    while (a4);
  }

uint64_t sub_10DB0()
{
  return 0LL;
}

uint64_t sub_10DB8()
{
  return 0LL;
}

void sub_10DC0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_10DD0()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95990 = (uint64_t)result;
  return result;
}

uint64_t *sub_10DFC(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "kBTAudioMsgArgDeviceType");
  uint64_t v5 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_58EF4(int64, v5);
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceProperties");
  return sub_3A6D4(qword_962E8, int64, a1, value);
}

BOOL sub_10E8C(uint64_t a1, xpc_object_t xdict)
{
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472LL;
  applier[2] = sub_112DC;
  applier[3] = &unk_81D98;
  applier[4] = a1;
  return xpc_dictionary_apply(xdict, applier);
}

void sub_10EE8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = sub_3B4F4();
  if (v2)
  {
    sub_4D7C(v2, 1);
  }

  else
  {
    __int128 v3 = (os_log_s *)qword_95998;
    if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
      sub_58F8C(v1, v3, v4, v5, v6, v7, v8, v9);
    }
  }

uint64_t sub_10F54(uint64_t result)
{
  *(void *)os_log_t result = 0LL;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_10F60(uint64_t a1)
{
  uint64_t v2 = sub_3B4F4();
  if (v2) {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 1112LL))(v2, 0LL);
  }
  return a1;
}

void sub_10FB0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_10F60(a1);
    operator delete(v1);
  }

void sub_10FCC(uint64_t a1)
{
  uint64_t v2 = sub_3B4F4();
  if (v2)
  {
    __int128 v3 = (void *)v2;
    uint64_t v4 = (os_log_s *)qword_95998;
    if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTAudioDevice %d disconnected, marking invalid",  (uint8_t *)v6,  8u);
    }

    sub_3AD54(qword_962E8, v3);
  }

void sub_1109C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_11198(a1, object);
  }

  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10FCC(a1);
    }

    else
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      uint64_t v14 = (os_log_s *)qword_95998;
      if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
        sub_58FF4((uint64_t)string, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }

  else
  {
    int v5 = xpc_copy_description(object);
    uint64_t v6 = (os_log_s *)qword_95998;
    if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
      sub_59058((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
    }
    free(v5);
  }

void sub_11198(uint64_t a1, xpc_object_t xdict)
{
  unsigned int int64 = xpc_dictionary_get_int64(xdict, "kBTAudioMsgId");
  if (int64 - 1 > 0x14)
  {
    if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
      sub_5911C();
    }
  }

  else if (qword_81D08[2 * int64])
  {
    uint64_t v6 = (void (*)(uint64_t, xpc_object_t))qword_81D08[2 * int64];
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgs");
    v6(a1, value);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_590BC();
  }

void sub_11284(uint64_t a1, char *a2, void *a3)
{
  uint64_t v5 = sub_3B4F4();
  if (v5) {
    sub_484BC(*(void *)(v5 + 416), v5, a2, a3);
  }
}

uint64_t sub_112DC(uint64_t a1, char *a2, void *a3)
{
  return 1LL;
}

void sub_112F8(id *a1, void *a2, size_t a3, void *a4, size_t a5)
{
  uint64_t v10 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134218752;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = a3;
    __int16 v18 = 2048;
    uint64_t v19 = a4;
    __int16 v20 = 2048;
    size_t v21 = a5;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "XPC START MESSAGE SENT, Shared Memory output 0x%p of size %lu. Shared Memory Input 0x%p of size %lu",  buf,  0x2Au);
  }

  xpc_object_t v11 = 0LL;
  *(_OWORD *)std::string buf = *(_OWORD *)off_81DB8;
  if (a2 && a3) {
    xpc_object_t v11 = xpc_shmem_create(a2, a3);
  }
  xpc_object_t v12 = 0LL;
  xpc_object_t object = v11;
  if (a4 && a5) {
    xpc_object_t v12 = xpc_shmem_create(a4, a5);
  }
  xpc_object_t v16 = v12;
  xpc_object_t v13 = xpc_dictionary_create((const char *const *)buf, &object, 2uLL);
  if (v13)
  {
    uint64_t v14 = v13;
    sub_114D8(a1, 5u, (uint64_t)v13);
    xpc_release(v14);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_591D4();
  }

  if (object)
  {
    xpc_release(object);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_591A8();
  }

  if (v16)
  {
    xpc_release(v16);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5917C();
  }

void sub_114D8(id *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_3A314(qword_962E8);
  if (v6)
  {
    uint64_t v7 = (_xpc_connection_s *)v6;
    *(_OWORD *)keys = *(_OWORD *)off_81DE0;
    uint64_t v15 = "kBTAudioMsgArgs";
    xpc_object_t values = xpc_int64_create(a2);
    xpc_object_t object = xpc_string_create((const char *)[*a1 UTF8String]);
    uint64_t v13 = a3;
    if (a3) {
      size_t v8 = 3LL;
    }
    else {
      size_t v8 = 2LL;
    }
    xpc_object_t v9 = xpc_dictionary_create((const char *const *)keys, &values, v8);
    if (v9)
    {
      uint64_t v10 = v9;
      xpc_connection_send_message(v7, v9);
      xpc_release(v10);
    }

    else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
    {
      sub_59284();
    }

    if (object)
    {
      xpc_release(object);
    }

    else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
    {
      sub_59258();
    }

    if (values)
    {
      xpc_release(values);
    }

    else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
    {
      sub_5922C();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59200();
  }

void sub_1166C(id *a1)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_592B0();
  }
  sub_114D8(a1, 7u, 0LL);
}

void sub_116BC(id *a1, int a2)
{
  if (a2 == 2)
  {
    unsigned int v2 = 21;
  }

  else
  {
    if (a2 != 3) {
      goto LABEL_6;
    }
    unsigned int v2 = 20;
  }

  sub_114D8(a1, v2, 0LL);
LABEL_6:
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_592DC();
  }
}

void sub_11724(id *a1)
{
}

void sub_11730(id *a1, BOOL a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59368();
  }
  xpc_object_t v4 = xpc_BOOL_create(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_114D8(a1, 0xEu, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5933C();
  }

void sub_117CC(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_593F4();
  }
  xpc_object_t v4 = xpc_int64_create(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_114D8(a1, 9u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_593C8();
  }

void sub_11868(id *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59504();
  }
  *(_OWORD *)keys = *(_OWORD *)off_81DC8;
  uint64_t v14 = "kBTAudioMsgPropertyScoSampleRate";
  xpc_object_t values = xpc_int64_create(a2);
  xpc_object_t object = xpc_int64_create(a3);
  xpc_object_t v12 = xpc_int64_create(a4);
  xpc_object_t v8 = xpc_dictionary_create((const char *const *)keys, &values, 3uLL);
  if (v8)
  {
    xpc_object_t v9 = v8;
    sub_114D8(a1, 0xBu, (uint64_t)v8);
    xpc_release(v9);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_594D8();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_594AC();
  }

  if (object)
  {
    xpc_release(object);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59480();
  }

  if (v12)
  {
    xpc_release(v12);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59454();
  }

void sub_11A20(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_595AC();
  }
  xpc_object_t v4 = xpc_int64_create(a2);
  if (v4)
  {
    uint64_t v5 = v4;
    sub_114D8(a1, 0xAu, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59580();
  }

void sub_11ABC(id *a1, float a2)
{
  __int128 v3 = (os_log_s *)qword_95998;
  double v4 = a2;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)keys = 134217984;
    *(double *)&keys[4] = v4;
    _os_log_debug_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "Send XPC Input volume changed to %f", keys, 0xCu);
  }

  *(void *)keys = "kBTAudioMsgPropertyInputVolumeScalar";
  xpc_object_t values = xpc_double_create(v4);
  xpc_object_t v5 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_114D8(a1, 3u, (uint64_t)v5);
    xpc_release(v6);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59638();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5960C();
  }

void sub_11C14(id *a1, float a2)
{
  __int128 v3 = (os_log_s *)qword_95998;
  double v4 = a2;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)keys = 134217984;
    *(double *)&keys[4] = v4;
    _os_log_debug_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "Send XPC volume changed to %f", keys, 0xCu);
  }

  *(void *)keys = "kBTAudioMsgPropertyVolumeScalar";
  xpc_object_t values = xpc_double_create(v4);
  xpc_object_t v5 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_114D8(a1, 3u, (uint64_t)v5);
    xpc_release(v6);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59690();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59664();
  }

void sub_11D6C(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyDynamicLatencyAudioAndInputAggregationOn";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    double v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_596E8();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_596BC();
  }

void sub_11E60(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyExpanseOn";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59740();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59714();
  }

  uint64_t v6 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = value;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "SendExpanseStatePropertyChanged expanseOn:%d", (uint8_t *)v7, 8u);
  }

void sub_11FA4(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyExpanseInA2DP";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59798();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5976C();
  }

  uint64_t v6 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = value;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "SendExpanseInA2DPChanged expanseOn:%d", (uint8_t *)v7, 8u);
  }

void sub_120E8(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyCallScreening";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_597C4();
  }

  if (values) {
    xpc_release(values);
  }
  uint64_t v6 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = value;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "SendCallScreeningState enabled:%d", (uint8_t *)v7, 8u);
  }

void sub_12208(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyGameOn";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5981C();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_597F0();
  }

void sub_122FC(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyVoiceOverOn";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59874();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59848();
  }

void sub_123F0(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertyWSModeEnabled";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_598CC();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_598A0();
  }

void sub_124E4(id *a1, BOOL value)
{
  keys = "kBTAudioMsgPropertySpatialAudioActive";
  xpc_object_t values = xpc_BOOL_create(value);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59924();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_598F8();
  }

void sub_125D8(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_599A8();
  }
  keys = "kBTAudioMsgPropertyFrameCount";
  xpc_object_t values = xpc_int64_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5997C();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59950();
  }

void sub_126F8(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59A60();
  }
  keys = "kBTAudioMsgPropertySpatialOn";
  xpc_object_t values = xpc_int64_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59A34();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59A08();
  }

void sub_12818(id *a1, const __CFString *a2, int a3, float a4)
{
  __int16 valuePtr = a3;
  unsigned int v15 = (float)(a4 * 100.0);
  xpc_object_t v8 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a4;
    __int16 v19 = 2112;
    __int16 v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Send adaptive volume ramp end config CurrentVolume %d audioCategory %@ rampEndReason %d",  buf,  0x18u);
  }

  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v15);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyAdaptiveVolumeCurrentVolume", v10);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyAdaptiveVolumeAudioCategory", Copy);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyAdaptiveVolumeRampEndReason", v12);
  *(void *)std::string buf = "kBTAudioMsgPropertyAdaptiveVolumeRampEnd";
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(Mutable);
  xpc_object_t v13 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  if (v13)
  {
    uint64_t v14 = v13;
    sub_114D8(a1, 3u, (uint64_t)v13);
    xpc_release(v14);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59AEC();
  }

  if (values)
  {
    xpc_release(values);
    if (!Mutable) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (!os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    if (!Mutable) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  sub_59AC0();
  if (Mutable) {
LABEL_12:
  }
    CFRelease(Mutable);
LABEL_13:
  if (v10) {
    CFRelease(v10);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v12) {
    CFRelease(v12);
  }
}

void sub_12A88(id *a1, const __CFString *a2, void *a3, void *a4, void *a5)
{
  unsigned int v9 = [a3 intValue];
  unsigned int v22 = v9;
  unsigned int v10 = [a4 intValue];
  unsigned int valuePtr = v10;
  unsigned int v11 = [a5 intValue];
  unsigned int v20 = v11;
  CFNumberRef v12 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138413058;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v25 = 1024;
    unsigned int v26 = v9;
    __int16 v27 = 1024;
    unsigned int v28 = v10;
    __int16 v29 = 1024;
    unsigned int v30 = v11;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "Send manual volume update currentAudioCategory %@ currentVolume %d manualVolumeUpdate %d isRampInProgress %d",  buf,  0x1Eu);
  }

  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v22);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v20);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyManualVolumeUpdateNewVolume", v14);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume", v15);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyManualVolumeUpdateRampInProgress", v16);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory", Copy);
  *(void *)std::string buf = "kBTAudioMsgPropertyManualVolumeUpdate";
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(Mutable);
  xpc_object_t v18 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  if (v18)
  {
    __int16 v19 = v18;
    sub_114D8(a1, 3u, (uint64_t)v18);
    xpc_release(v19);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59B44();
  }

  if (values)
  {
    xpc_release(values);
    if (!v14) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (!os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    if (!v14) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  sub_59B18();
  if (v14) {
LABEL_12:
  }
    CFRelease(v14);
LABEL_13:
  if (v15) {
    CFRelease(v15);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_12D3C(id *a1, BOOL a2)
{
  xpc_object_t v4 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Send PME On bud status%d", buf, 8u);
  }

  *(void *)std::string buf = "kBTAudioMsgPropertyPMEOnBuds";
  xpc_object_t values = xpc_BOOL_create(a2);
  xpc_object_t v5 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_114D8(a1, 3u, (uint64_t)v5);
    xpc_release(v6);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59B9C();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59B70();
  }

void sub_12E80(id *a1, const __CFString *a2, int a3, int a4)
{
  int valuePtr = a3;
  xpc_object_t v8 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412546;
    *(void *)&uint8_t buf[4] = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "Send SpatialAudio App Based Mode %@ Mode%d", buf, 0x12u);
  }

  Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
  CFNumberRef v12 = &kCFBooleanTrue;
  if (!a4) {
    CFNumberRef v12 = &kCFBooleanFalse;
  }
  CFBooleanRef v13 = *v12;
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialMode", v10);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertySpatialBundleID", Copy);
  CFDictionaryAddValue(Mutable, @"kBTAudioMsgPropertyHeadTrack", v13);
  *(void *)std::string buf = "kBTAudioMsgPropertySpatialAudioAppBasedMode";
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(Mutable);
  xpc_object_t v14 = xpc_dictionary_create((const char *const *)buf, &values, 1uLL);
  if (v14)
  {
    CFNumberRef v15 = v14;
    sub_114D8(a1, 3u, (uint64_t)v14);
    xpc_release(v15);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59BF4();
  }

  if (values)
  {
    xpc_release(values);
    if (!Copy) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  if (!os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    if (!Copy) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  sub_59BC8();
  if (Copy) {
LABEL_14:
  }
    CFRelease(Copy);
LABEL_15:
  if (v10) {
    CFRelease(v10);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_130C0(id *a1, BOOL a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59C78();
  }
  keys = "kBTAudioMsgPropertyAllowSpatialAudio";
  xpc_object_t values = xpc_BOOL_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59C4C();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59C20();
  }

void sub_131E0(id *a1, BOOL a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59D30();
  }
  keys = "kBTAudioMsgPropertyEnableSoftwareVolume";
  xpc_object_t values = xpc_BOOL_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59D04();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59CD8();
  }

void sub_13300(id *a1, BOOL a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59DE8();
  }
  keys = "kBTAudioMsgPropertyAllowSCOForTBT";
  xpc_object_t values = xpc_BOOL_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59DBC();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59D90();
  }

void sub_13420(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_59EA0();
  }
  keys = "kBTAudioMsgPropertyScoSampleRate";
  xpc_object_t values = xpc_int64_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59E74();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59E48();
  }

void sub_13540(id *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  xpc_object_t v8 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109376;
    v11[1] = a3;
    __int16 v12 = 1024;
    unsigned int v13 = a2;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "XPC Send HFP Codec Type: %u, %u!", (uint8_t *)v11, 0xEu);
  }

  xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v9, "kBTAudioMsgPropertyScoChannelFormat", a2);
  xpc_dictionary_set_int64(v9, "kBTAudioMsgPropertyScoSampleRate", a3);
  xpc_dictionary_set_int64(v9, "kBTAudioMsgPropertyTransportType", a4);
  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_value(v10, "kBTAudioMsgPropertyScoCodecTypeChanged", v9);
  if (!v10)
  {
    if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
    {
      sub_59F2C();
      if (!v9) {
        goto LABEL_10;
      }
    }

    else if (!v9)
    {
      goto LABEL_10;
    }

void sub_136E8(id *a1, const char *a2, BOOL a3)
{
  uint64_t v6 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Send ownership state for has changed to %d", buf, 8u);
  }

  *(_OWORD *)std::string buf = *(_OWORD *)off_81DF8;
  xpc_object_t values = xpc_BOOL_create(a3);
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  xpc_object_t v12 = xpc_string_create(a2);
  keys = "kBTAudioMsgPropertyOwnershipStateChanged";
  xpc_object_t object = xpc_dictionary_create((const char *const *)buf, &values, 2uLL);
  xpc_object_t v7 = xpc_dictionary_create((const char *const *)&keys, &object, 1uLL);
  if (v7)
  {
    xpc_object_t v8 = v7;
    sub_114D8(a1, 3u, (uint64_t)v7);
    xpc_release(v8);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59FDC();
  }

  if (object)
  {
    xpc_release(object);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59FB0();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59F84();
  }

  if (v12)
  {
    xpc_release(v12);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_59F58();
  }

void sub_138D4(id *a1, unsigned int a2)
{
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG)) {
    sub_5A060();
  }
  keys = "kBTAudioMsgPropertyListenMode";
  xpc_object_t values = xpc_int64_create(a2);
  xpc_object_t v4 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v4)
  {
    xpc_object_t v5 = v4;
    sub_114D8(a1, 3u, (uint64_t)v4);
    xpc_release(v5);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A034();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A008();
  }

void sub_139F4(id *a1, float a2)
{
  keys = "kBTAudioMsgPropertyDosimetrySensitivity";
  xpc_object_t values = xpc_double_create(a2);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A0EC();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A0C0();
  }

void sub_13AE8(id *a1, uint64_t a2)
{
  keys = "kBTAudioMsgPropertyDosimetryVolumeCurve";
  xpc_object_t values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(a2);
  xpc_object_t v3 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  if (v3)
  {
    xpc_object_t v4 = v3;
    sub_114D8(a1, 3u, (uint64_t)v3);
    xpc_release(v4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A144();
  }

  if (values)
  {
    xpc_release(values);
  }

  else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
  {
    sub_5A118();
  }

void sub_13BDC(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_3B4F4();
  xpc_object_t v5 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
  {
    sub_5A1F4(v3, v5, v6, v7, v8, v9, v10, v11);
    if (v4)
    {
LABEL_3:
      xpc_object_t value = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyInEarDetection");
      if (value)
      {
        unsigned int v13 = value;
        if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_BOOL)
        {
          BOOL v14 = xpc_BOOL_get_value(v13);
          sub_200C8(*(_BYTE **)(*(void *)(v4 + 416) + 9248LL), v14);
          if (v14)
          {
            xpc_object_t v15 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyInEarEnabled");
            BOOL v16 = xpc_BOOL_get_value(v15);
            sub_202D0(*(void **)(*(void *)(v4 + 416) + 9248LL), v16);
            xpc_object_t v17 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyInEarStatus");
            if (xpc_get_type(v17) == (xpc_type_t)&_xpc_type_int64)
            {
              __int16 v20 = xpc_int64_get_value(v17);
              int v18 = v20;
              int v19 = HIBYTE(v20);
            }

            else
            {
              int v18 = 0;
              int v19 = 0;
            }

            xpc_object_t v21 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyPrimaryBudSide");
            else {
              int v22 = 0;
            }
            xpc_object_t v23 = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyFixedMicRole");
            else {
              int v24 = 0;
            }
            sub_21280(*(void **)(*(void *)(v4 + 416) + 9248LL), v22);
            sub_21448(*(void **)(*(void *)(v4 + 416) + 9248LL), v24);
            sub_21078(*(void **)(*(void *)(v4 + 416) + 9248LL), v18, v19);
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
        {
          sub_5A1C8();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
      {
        sub_5A19C();
      }

      return;
    }
  }

  else if (v4)
  {
    goto LABEL_3;
  }

  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
    sub_5A170();
  }
}

void sub_13E04(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v4 = sub_3B4F4();
  xpc_object_t v5 = (os_log_s *)qword_95998;
  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
  {
    sub_5A2B4(v3, v5, v6, v7, v8, v9, v10, v11);
    if (v4)
    {
LABEL_3:
      xpc_object_t value = xpc_dictionary_get_value(a2, "kBTAudioMsgPropertyIsGenuineAirPods");
      if (value)
      {
        unsigned int v13 = value;
        if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_BOOL)
        {
          BOOL v14 = xpc_BOOL_get_value(v13);
          sub_2485C(*(void **)(*(void *)(v4 + 416) + 9248LL), v14);
        }

        else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR))
        {
          sub_5A288();
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_DEBUG))
      {
        sub_5A25C();
      }

      return;
    }
  }

  else if (v4)
  {
    goto LABEL_3;
  }

  if (os_log_type_enabled((os_log_t)qword_95998, OS_LOG_TYPE_ERROR)) {
    sub_5A170();
  }
}

  ;
}

void sub_13F2C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_13F4C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_13F5C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95998 = (uint64_t)result;
  return result;
}

os_log_t *sub_13F88(os_log_t *a1)
{
  *a1 = 0LL;
  a1[1] = (os_log_t)os_nexus_controller_create();
  os_log_t v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  uint64_t v3 = *a1;
  *a1 = v2;

  uint64_t v4 = *a1;
  xpc_object_t v5 = *a1;
  if (a1[1])
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v8[0]) = 134219008;
      *(void *)((char *)v8 + 4) = 2048LL;
      WORD2(v8[1]) = 2048;
      *(void *)((char *)&v8[1] + 6) = 1LL;
      HIWORD(v8[2]) = 2048;
      _DWORD v8[3] = 1LL;
      LOWORD(v8[4]) = 2048;
      *(void *)((char *)&v8[4] + 2) = 8LL;
      WORD1(v8[5]) = 2048;
      *(void *)((char *)&v8[5] + 4) = 8LL;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Creating skywalk nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu , NEXUS_ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu",  (uint8_t *)v8,  0x34u);
    }

    uint64_t v6 = os_nexus_attr_create();
    os_nexus_attr_set(v6, 4LL, 2048LL);
    os_nexus_attr_set(v6, 1LL, 1LL);
    os_nexus_attr_set(v6, 0LL, 1LL);
    os_nexus_attr_set(v6, 2LL, 8LL);
    os_nexus_attr_set(v6, 3LL, 8LL);
    os_nexus_attr_set(v6, 7LL, 2LL);
    strcpy((char *)v8, "com.apple.bluetooth.AudioPipe");
    HIWORD(v8[3]) = 0;
    memset(&v8[4], 0, 32);
    os_nexus_controller_register_provider(a1[1], v8, 0LL, v6, a1 + 2);
    os_nexus_attr_destroy(v6);
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_5A31C();
  }

  return a1;
}

void sub_14134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1415C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    os_nexus_controller_deregister_provider(v2, a1 + 16);
    os_nexus_controller_destroy(*(void *)(a1 + 8));
  }

  return a1;
}

uint64_t sub_141A4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

NSUUID *sub_141AC(uint64_t a1)
{
  return -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a1 + 16);
}

uint64_t sub_141DC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = off_81E18;
  *(void *)(a1 + 8) = -1LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 200) = 0LL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0LL;
  *(_BYTE *)(a1 + 208) = a3;
  mach_timebase_info((mach_timebase_info_t)(a1 + 192));
  *(void *)(a1 + 200) = a2;
  os_log_t v5 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;

  return a1;
}

void sub_1425C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1428C(uint64_t a1)
{
  *(void *)a1 = off_81E18;
  uint64_t v2 = *(os_log_s **)(a1 + 16);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9.ident) = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Tearing down AudioSkywalkPipe", (uint8_t *)&v9, 2u);
  }

  atomic_store(1u, (unsigned __int8 *)(a1 + 144));
  int v3 = *(_DWORD *)(a1 + 12);
  if (v3 != -1 || *(_DWORD *)(a1 + 8) != -1)
  {
    v9.ident = a1 + 144;
    *(void *)&v9.filter = 0x10000000000FFF6LL;
    v9.data = 0LL;
    v9.udata = 0LL;
    kevent(v3, &v9, 1, 0LL, 0, 0LL);
    kevent(*(_DWORD *)(a1 + 8), &v9, 1, 0LL, 0, 0LL);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 96));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 8);
    if (v5 != -1) {
      close(v5);
    }
  }

  int v6 = *(_DWORD *)(a1 + 12);
  if (v6 != -1) {
    close(v6);
  }
  if (*(void *)(a1 + 176)) {
    os_channel_destroy();
  }
  uint64_t v7 = *(os_log_s **)(a1 + 16);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9.ident) = 0;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "AudioSkywalkPipe torn down", (uint8_t *)&v9, 2u);
  }

  return a1;
}

void sub_14444(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1428C(a1);
  operator delete(v1);
}

void sub_14458(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = objc_retainBlock(a2);
  uint64_t v10 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v9;

  id v11 = objc_retainBlock(v8);
  xpc_object_t v12 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v11;

  id v13 = objc_retainBlock(v7);
  BOOL v14 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = v13;

  atomic_store(0, (unsigned __int8 *)(a1 + 144));
  atomic_store(0, (unsigned __int8 *)(a1 + 145));
  if (*(void *)(a1 + 152)) {
    *(_DWORD *)(a1 + 12) = kqueue();
  }
  if (*(void *)(a1 + 160)) {
    *(_DWORD *)(a1 + 8) = kqueue();
  }
  uint64_t fd = os_channel_get_fd(*(void *)(a1 + 176));
  v16.ident = (int)__chkstk_darwin(fd);
  *(_DWORD *)&v16.filter = 393215;
  memset(&v16.fflags, 0, 20);
  uint64_t v17 = a1 + 144;
  int v18 = 393206;
  uint64_t v20 = 0LL;
  uint64_t v19 = 0LL;
  int v21 = 0;
  if (kevent(*(_DWORD *)(a1 + 12), &v16, 2, 0LL, 0, 0LL) == -1)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_5A348();
    }
  }

  else if (*(void *)(a1 + 152))
  {
    pthread_mutex_init((pthread_mutex_t *)(a1 + 32), 0LL);
    pthread_cond_init((pthread_cond_t *)(a1 + 96), 0LL);
    memset(&v22, 0, sizeof(v22));
    pthread_attr_init(&v22);
    pthread_attr_setdetachstate(&v22, 2);
    pthread_create((pthread_t *)(a1 + 24), &v22, (void *(__cdecl *)(void *))sub_1463C, (void *)a1);
  }

uint64_t sub_1463C(uint64_t a1)
{
  uint64_t v2 = os_log_create("com.apple.bluetooth", "BTAudioSkywalk");
  int v3 = v2;
  uint64_t v4 = *(void *)(a1 + 200);
  if (!v4)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_5A374((uint64_t *)(a1 + 200), v3);
    }
    uint64_t v4 = 22000LL;
    *(void *)(a1 + 200) = 22000LL;
  }

  unint64_t v5 = 1000 * v4 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
  policy_mach_timebase_info info = v5;
  int v16 = v5 >> 2;
  int v17 = v16;
  int v18 = 0;
  thread_act_t v6 = mach_thread_self();
  thread_policy_set(v6, 2u, &policy_info, 4u);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Starting AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }

  mach_absolute_time();
  *(void *)(a1 + 216) = 0LL;
  *(void *)(a1 + 224) = 0LL;
  id v7 = (void *)(a1 + 216);
  if (!atomic_load((unsigned __int8 *)(a1 + 144)))
  {
    unint64_t v9 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
    do
    {
      memset(&v14, 0, sizeof(v14));
      kevent(*(_DWORD *)(a1 + 12), 0LL, 0, &v14, 1, 0LL);
      if (v14.filter != -1) {
        break;
      }
      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = v10;
      if (*v7 && *(void *)(a1 + 224) && v10 > *v7 + v9) {
        (*(void (**)(void))(*(void *)(a1 + 168) + 16LL))();
      }
      sub_1490C(a1);
      *(void *)(a1 + 216) = v11 + v5;
      *(void *)(a1 + 224) = v11;
    }

    while (!atomic_load((unsigned __int8 *)(a1 + 144)));
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Stopping AudioSkywalk read loop", (uint8_t *)&v14, 2u);
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  atomic_store(1u, (unsigned __int8 *)(a1 + 145));
  pthread_cond_signal((pthread_cond_t *)(a1 + 96));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14.ident) = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "AudioSkywalk read loop stopped", (uint8_t *)&v14, 2u);
  }

  return 0LL;
}

void sub_148AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_148CC(uint64_t a1, uint64_t a2)
{
  return 1000 * a2 * (unint64_t)*(unsigned int *)(a1 + 196) / *(unsigned int *)(a1 + 192);
}

unint64_t sub_148E4(uint64_t a1, uint64_t a2)
{
  return (unint64_t)*(unsigned int *)(a1 + 192) * a2 / *(unsigned int *)(a1 + 196) / 0xF4240;
}

void sub_1490C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = os_channel_ring_id(*(void *)(a1 + 176), 2LL);
    uint64_t v4 = os_channel_rx_ring(v2, v3);
    memset(v7, 0, sizeof(v7));
    uint64_t next_slot = os_channel_get_next_slot(v4, 0LL, v7);
    if (next_slot)
    {
      uint64_t v6 = next_slot;
      if (*(_BYTE *)(a1 + 208))
      {
        if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_DEBUG)) {
          sub_5A414();
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 152) + 16LL))();
      os_channel_get_next_slot(v4, v6, v7);
      os_channel_advance_slot(v4, v6);
    }

    os_channel_sync(*(void *)(a1 + 176), 1LL);
  }

  else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
  {
    sub_5A3E8();
  }

void sub_14A08(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4 = *(void *)(a1 + 176);
  if (v4)
  {
    uint64_t v7 = os_channel_ring_id(*(void *)(a1 + 176), 0LL);
    uint64_t v8 = os_channel_tx_ring(v4, v7);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    uint64_t next_slot = os_channel_get_next_slot(v8, 0LL, &v17);
    if (next_slot)
    {
      uint64_t v10 = *(void *)(a1 + 184);
      unint64_t v11 = WORD1(v17) - v10;
      if (v11 >= a3)
      {
        uint64_t v13 = next_slot;
        if (*(_BYTE *)(a1 + 208))
        {
          kevent v14 = *(os_log_s **)(a1 + 16);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v16 = *(void *)(a1 + 184);
            *(_DWORD *)std::string buf = 134218752;
            size_t v22 = a3;
            __int16 v23 = 1024;
            int v24 = DWORD1(v17);
            __int16 v25 = 1024;
            int v26 = WORD1(v17);
            __int16 v27 = 2048;
            uint64_t v28 = v16;
            _os_log_debug_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "Writing total of %lu bytes into pipe, slot %d of length %hu starting at offset %lu",  buf,  0x22u);
          }

          uint64_t v10 = *(void *)(a1 + 184);
        }

        memcpy((void *)(v10 + v18), a2, a3);
        size_t v15 = *(void *)(a1 + 184) + a3;
        *(void *)(a1 + 184) = v15;
        WORD1(v17) = v15;
        os_channel_set_slot_properties(v8, v13, &v17);
      }

      else
      {
        xpc_object_t v12 = *(os_log_s **)(a1 + 16);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
          sub_5A4B4(a3, v11, v12);
        }
      }
    }

    else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
    {
      sub_5A488();
    }
  }

  else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
  {
    sub_5A3E8();
  }

void sub_14BE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = os_channel_ring_id(*(void *)(a1 + 176), 0LL);
    uint64_t v4 = os_channel_tx_ring(v2, v3);
    memset(v6, 0, sizeof(v6));
    uint64_t next_slot = os_channel_get_next_slot(v4, 0LL, v6);
    if (*(_BYTE *)(a1 + 208))
    {
      if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_DEBUG)) {
        sub_5A534();
      }
    }

    os_channel_advance_slot(v4, next_slot);
    os_channel_sync(*(void *)(a1 + 176), 0LL);
    *(void *)(a1 + 184) = 0LL;
  }

  else if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR))
  {
    sub_5A3E8();
  }

uint64_t sub_14CC4(uint64_t a1)
{
  return *(void *)(a1 + 184);
}

uint64_t sub_14CCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 176) = a2;
  return result;
}

uint64_t sub_14CD4(uint64_t a1)
{
  return *(void *)(a1 + 176);
}

uint64_t sub_14CDC(uint64_t result)
{
  *(void *)(result + 216) = 0LL;
  return result;
}

uint64_t sub_14CE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = (void *)sub_141DC(a1, a3, a4);
  *uint64_t v6 = off_81E38;
  v6[30] = 0LL;
  uint64_t v7 = v6 + 30;
  v6[31] = 0LL;
  v6[32] = 0LL;
  v6[29] = *(void *)(a2 + 8);
  uint64_t v8 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a2 + 16);
  unint64_t v9 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = v8;

  v22[0] = 0LL;
  v22[1] = 0LL;
  [*(id *)(a1 + 248) getUUIDBytes:v22];
  v21[0] = 0LL;
  v21[1] = 0LL;
  if (os_nexus_controller_alloc_provider_instance(*(void *)(a1 + 232), v22, v21))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_5A5E8();
    }
  }

  else
  {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSUUID);
    unint64_t v11 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v10;

    v20[0] = 0LL;
    v20[1] = 0LL;
    [*(id *)(a1 + 256) getUUIDBytes:v20];
    os_nexus_controller_bind_provider_instance(*(void *)(a1 + 232), v21, 1LL, 0LL, 0LL, v20, 16LL, 4LL);
    os_nexus_controller_bind_provider_instance(*(void *)(a1 + 232), v21, 0LL, 0LL, 0LL, v20, 16LL, 4LL);
    xpc_object_t v12 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v21);
    uint64_t v13 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v12;

    kevent v14 = *(os_log_s **)(a1 + 16);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *v7;
      int v18 = 138412290;
      uint64_t v19 = v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Registering Audio skywalk server channel to %@",  (uint8_t *)&v18,  0xCu);
    }

    uint64_t v16 = os_channel_attr_create();
    os_channel_attr_set(v16, 7LL, 1LL);
    os_channel_attr_set_key(v16, v20, 16LL);
    *(void *)(a1 + 176) = os_channel_create_extended(v21, 1LL, 0LL, 0xFFFFFFFFLL, v16);
    os_channel_attr_destroy(v16);
    if (!*(void *)(a1 + 176) && os_log_type_enabled(*(os_log_t *)(a1 + 16), OS_LOG_TYPE_ERROR)) {
      sub_5A5BC();
    }
  }

  return a1;
}

void sub_14F1C(_Unwind_Exception *a1)
{
  sub_1428C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_14F68(uint64_t a1)
{
  *(void *)a1 = off_81E38;
  v3[0] = 0LL;
  v3[1] = 0LL;
  [*(id *)(a1 + 240) getUUIDBytes:v3];
  os_nexus_controller_free_provider_instance(*(void *)(a1 + 232), v3);

  sub_1428C(a1);
  return a1;
}

void sub_15004(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_4640(a1);
  }
  _Unwind_Resume(a1);
}

void sub_15014(uint64_t a1)
{
  uint64_t v1 = (void *)sub_14F68(a1);
  operator delete(v1);
}

id sub_15028(uint64_t a1)
{
  return *(id *)(a1 + 240);
}

id sub_15030(uint64_t a1)
{
  return *(id *)(a1 + 256);
}

void *sub_15038(void *a1, void *a2, void *a3, uint64_t a4, char a5)
{
  id v9 = a2;
  id v10 = a3;
  sub_141DC((uint64_t)a1, a4, a5);
  *a1 = &off_81E58;
  v15[0] = 0LL;
  v15[1] = 0LL;
  [v9 getUUIDBytes:v15];
  unint64_t v11 = (os_log_s *)a1[2];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 138412290;
    *(void *)((char *)&v14 + 4) = v9;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Registering Audio skywalk client channel to %@",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v12 = os_channel_attr_create();
  __int128 v14 = 0uLL;
  [v10 getUUIDBytes:&v14];
  os_channel_attr_set_key(v12, &v14, 16LL);
  os_channel_attr_set(v12, 7LL, 1LL);
  a1[22] = os_channel_create_extended(v15, 0LL, 0LL, 0xFFFFFFFFLL, v12);
  os_channel_attr_destroy(v12);

  return a1;
}

void sub_15190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_151D0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1428C(a1);
  operator delete(v1);
}

  ;
}

uint64_t sub_151FC(uint64_t a1)
{
  return a1;
}

uint64_t sub_15224(uint64_t a1)
{
  return a1;
}

float sub_1524C(float a1)
{
  if (a1 >= 0.0) {
    return 1.0;
  }
  else {
    return __exp10f(a1 / 20.0);
  }
}

uint64_t sub_15268(float a1)
{
  if (a1 >= 0.0) {
    float v1 = 32768.0;
  }
  else {
    float v1 = __exp10f(a1 / 20.0) * 32768.0;
  }
  int v2 = llroundf(v1);
  if (v2 >= 0x8000) {
    return 0x8000LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_152AC(uint64_t a1, int a2, float a3, float a4, float a5)
{
  *(float *)a1 = a3;
  if (a3 >= 0.0) {
    float v10 = 32768.0;
  }
  else {
    float v10 = __exp10f(a3 / 20.0) * 32768.0;
  }
  int v11 = llroundf(v10);
  if (v11 >= 0x8000) {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a1 + 4) = v11;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = 0;
  *(float *)(a1 + 16) = a5;
  *(float *)(a1 + 20) = a4;
  sub_15400(a1);
  uint64_t v12 = (os_log_s *)qword_959A0;
  if (os_log_type_enabled((os_log_t)qword_959A0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = "NO";
    int v15 = 134218498;
    double v16 = a3;
    if (a2) {
      uint64_t v13 = "YES";
    }
    __int16 v17 = 2048;
    double v18 = a4;
    __int16 v19 = 2080;
    __int128 v20 = v13;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "BT Audio Volume initialized with Volume %f Sample Rate %f Valid %s",  (uint8_t *)&v15,  0x20u);
  }

  atomic_store(a2, (unsigned __int8 *)(a1 + 24));
  return a1;
}

void sub_15400(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4);
  int v2 = *(_DWORD *)(a1 + 8);
  float v3 = *(float *)(a1 + 16);
  float v4 = *(float *)(a1 + 20);
  int v5 = (int)(float)((float)(v2 - v1) / (float)(v3 * v4));
  *(_DWORD *)(a1 + 12) = v5;
  if (v2 <= v1)
  {
    if (v2 >= v1)
    {
      int v5 = 0;
    }

    else
    {
      if (v5) {
        goto LABEL_9;
      }
      int v5 = -1;
    }
  }

  else
  {
    if (v5) {
      goto LABEL_9;
    }
    int v5 = 1;
  }

  *(_DWORD *)(a1 + 12) = v5;
LABEL_9:
  uint64_t v6 = (os_log_s *)qword_959A0;
  if (os_log_type_enabled((os_log_t)qword_959A0, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67110144;
    v7[1] = v5;
    __int16 v8 = 1024;
    int v9 = v2;
    __int16 v10 = 1024;
    int v11 = v1;
    __int16 v12 = 2048;
    double v13 = v3;
    __int16 v14 = 2048;
    double v15 = v4;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "UpdateVolume mVolumeStep1dot15 %d mTargetVolume1dot15 %d mCurrentVolume1dot15 %d mRampTimeMs %f mSampleRate %f",  (uint8_t *)v7,  0x28u);
  }

void sub_15528(uint64_t a1, float a2)
{
  *(float *)(a1 + 20) = a2;
  sub_15400(a1);
}

uint64_t sub_15530(uint64_t result)
{
  int v1 = llroundf(32768.0);
  if (v1 >= 0x8000) {
    int v1 = 0x8000;
  }
  *(_DWORD *)os_log_t result = 0;
  *(_DWORD *)(result + 4) = v1;
  *(_DWORD *)(result + 8) = v1;
  *(void *)(result + 12) = 0LL;
  return result;
}

void sub_15554(uint64_t a1, float a2)
{
  if (a2 >= 0.0) {
    float v3 = 32768.0;
  }
  else {
    float v3 = __exp10f(a2 / 20.0) * 32768.0;
  }
  int v4 = llroundf(v3);
  if (v4 >= 0x8000) {
    int v4 = 0x8000;
  }
  *(_DWORD *)(a1 + 8) = v4;
  sub_15400(a1);
}

void sub_155AC(_DWORD *a1, float *__A, unsigned int a3, _DWORD *a4)
{
  unsigned int v5 = a3;
  uint64_t v6 = __A;
  int v8 = a1[1];
  unsigned int v9 = a1[2];
  if (__PAIR64__(v9, v8) != 0x800000008000LL)
  {
    int v10 = v9 - v8;
    if (v10 && (int v11 = a1[3]) != 0)
    {
      int v12 = v10 / v11;
      if (v12 < 0) {
        int v12 = -v12;
      }
      if (v12 >= a3) {
        unsigned int v13 = a3;
      }
      else {
        unsigned int v13 = v12;
      }
    }

    else
    {
      unsigned int v13 = 0;
    }

    int v14 = a4[3];
    if (v14 == 9)
    {
      if (v13)
      {
        float __Step = (float)(int)a1[3] * 0.000030518;
        float __Start = (float)v8 * 0.000030518;
        int v15 = a4[7];
        if (v15 == 1)
        {
          vDSP_vrampmul(__A, 1LL, &__Start, &__Step, __A, 1LL, v13);
        }

        else if (v15 == 2)
        {
          vDSP_vrampmul2(__A, __A + 1, 2LL, &__Start, &__Step, __A, __A + 1, 2LL, v13);
        }

        v6 += a4[7] * v13;
        if (v5 == v13) {
          int v18 = a1[1] + a1[3] * v5;
        }
        else {
          int v18 = a1[2];
        }
        a1[1] = v18;
        v5 -= v13;
      }

      if (v5)
      {
        float __Start = (float)(int)a1[2] * 0.000030518;
        vDSP_vsmul(v6, 1LL, &__Start, v6, 1LL, a4[7] * v5);
      }
    }

    else if ((v14 & 0xC) != 0 && a4[8] == 16)
    {
      if (v13)
      {
        LOWORD(__Start) = a1[1];
        LOWORD(__Step) = a1[3];
        int v17 = a4[7];
        if (v17 == 1)
        {
          vDSP_vrampmul_s1_15( (const __int16 *)__A,  1LL,  (__int16 *)&__Start,  (const __int16 *)&__Step,  (__int16 *)__A,  1LL,  v13);
        }

        else if (v17 == 2)
        {
          vDSP_vrampmul2_s1_15( (const __int16 *)__A,  (const __int16 *)__A + 1,  2LL,  (__int16 *)&__Start,  (const __int16 *)&__Step,  (__int16 *)__A,  (__int16 *)__A + 1,  2LL,  v13);
        }

        uint64_t v6 = (float *)((char *)v6 + 2 * a4[7] * v13);
        if (v5 == v13) {
          int v8 = a1[1] + a1[3] * v5;
        }
        else {
          int v8 = a1[2];
        }
        a1[1] = v8;
        v5 -= v13;
      }

      if (v5)
      {
        LOWORD(__Start) = v8;
        LOWORD(__Step) = 0;
        vDSP_vrampmul_s1_15( (const __int16 *)v6,  1LL,  (__int16 *)&__Start,  (const __int16 *)&__Step,  (__int16 *)v6,  1LL,  a4[7] * v5);
      }
    }
  }

double sub_15810(void *a1, double a2)
{
  int v2 = a1 + 1;
  uint64_t v3 = a1[1];
  if (v3)
  {
    do
    {
      int v4 = (uint64_t *)(v3 + 8);
      if (*(double *)(v3 + 32) >= a2)
      {
        int v4 = (uint64_t *)v3;
        int v2 = (void *)v3;
      }

      uint64_t v3 = *v4;
    }

    while (*v4);
  }

  double v5 = *((double *)v2 + 4);
  int v6 = *((_DWORD *)v2 + 10);
  if (v2 == (void *)*a1)
  {
    int v10 = (void *)v2[1];
    if (v10)
    {
      do
      {
        int v8 = v10;
        int v10 = (void *)*v10;
      }

      while (v10);
    }

    else
    {
      do
      {
        int v8 = (void *)v2[2];
        BOOL v9 = *v8 == (void)v2;
        int v2 = v8;
      }

      while (!v9);
    }
  }

  else
  {
    uint64_t v7 = (void *)*v2;
    if (*v2)
    {
      do
      {
        int v8 = v7;
        uint64_t v7 = (void *)v7[1];
      }

      while (v7);
    }

    else
    {
      do
      {
        int v8 = (void *)v2[2];
        BOOL v9 = *v8 == (void)v2;
        int v2 = v8;
      }

      while (v9);
    }
  }

  float v11 = 1.0 / (double)(unint64_t)(a1[2] - 1LL);
  float v12 = v5;
  float v13 = *((double *)v8 + 4);
}

float sub_1590C(float a1)
{
  int v1 = &qword_959B0;
  uint64_t v2 = qword_959B0;
  float v3 = 1.0 / (double)(unint64_t)(qword_959B8 - 1);
  if (qword_959B0)
  {
    signed int v4 = llroundf(a1 / v3);
    do
    {
      signed int v5 = *(_DWORD *)(v2 + 32);
      BOOL v6 = v5 < v4;
      if (v5 >= v4) {
        uint64_t v7 = (uint64_t *)v2;
      }
      else {
        uint64_t v7 = (uint64_t *)(v2 + 8);
      }
      if (!v6) {
        int v1 = (uint64_t *)v2;
      }
      uint64_t v2 = *v7;
    }

    while (*v7);
  }

  int v8 = *((_DWORD *)v1 + 8);
  double v9 = *((double *)v1 + 5);
  if (v1 == (uint64_t *)qword_959A8)
  {
    float v13 = (uint64_t *)v1[1];
    if (v13)
    {
      do
      {
        float v11 = v13;
        float v13 = (uint64_t *)*v13;
      }

      while (v13);
    }

    else
    {
      do
      {
        float v11 = (uint64_t *)v1[2];
        BOOL v12 = *v11 == (void)v1;
        int v1 = v11;
      }

      while (!v12);
    }
  }

  else
  {
    uint64_t v10 = *v1;
    if (*v1)
    {
      do
      {
        float v11 = (uint64_t *)v10;
        uint64_t v10 = *(void *)(v10 + 8);
      }

      while (v10);
    }

    else
    {
      do
      {
        float v11 = (uint64_t *)v1[2];
        BOOL v12 = *v11 == (void)v1;
        int v1 = v11;
      }

      while (v12);
    }
  }

  float v14 = v9;
  float v15 = *((double *)v11 + 5);
  return (float)((float)((float)(a1 - (float)(v3 * (float)v8)) * (float)(v15 - v14))
}

float sub_15A04(float a1)
{
  double v1 = a1;
  sub_162E0(v3, (uint64_t)&qword_959C0);
  *(float *)&double v1 = sub_15810(v3, v1);
  sub_16000((uint64_t)v3, (void *)v3[1]);
  return *(float *)&v1;
}

double sub_15A58(double a1, float a2)
{
  float v4 = sub_15810(v7, a1);
  sub_16000((uint64_t)v7, (void *)v7[1]);
  signed int v5 = (os_log_s *)qword_959A0;
  if (os_log_type_enabled((os_log_t)qword_959A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134218752;
    double v9 = (float)(v4 / a2);
    __int16 v10 = 2048;
    double v11 = a1;
    __int16 v12 = 2048;
    double v13 = v4;
    __int16 v14 = 2048;
    double v15 = a2;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Calculated a volScalarFactor = %f given destVolDb = %f, destVolScalar = %f, currentVolScalar = %f",  buf,  0x2Au);
  }

  return (float)(v4 / a2);
}

uint64_t sub_15B68(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  float v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_15BE4((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16LL;
    }

    while (v6);
  }

  return a1;
}

void sub_15BCC(_Unwind_Exception *a1)
{
}

uint64_t *sub_15BE4(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t v10 = 0LL;
  double v11 = 0LL;
  uint64_t v6 = sub_15C6C(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_15E14(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

uint64_t *sub_15C6C(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  signed int v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      double v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        double v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      double v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        double v13 = v10;
      }

      while (v14);
    }

    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          signed int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }

        if (v18 >= v15) {
          break;
        }
        signed int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }

      while (v16);
    }

    else
    {
      int v17 = a1 + 1;
    }

LABEL_48:
    *a3 = v21;
    return v5;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

      *a5 = v8;
      return 0LL;
    }

    if (v6 > 1853059699)
    {
      if (v6 != 1853059700)
      {
        if (v6 == 1870098020)
        {
          uint64_t v16 = a2[1];
          switch(v16)
          {
            case 0x6F757470u:
              int v15 = 9216LL;
              goto LABEL_65;
            case 0x696E7074u:
              int v15 = 9192LL;
              goto LABEL_65;
            case 0x676C6F62u:
              int v15 = 9240LL;
              goto LABEL_65;
          }

uint64_t *sub_15E14(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = a2;
  *a3 = a4;
  signed int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }

  os_log_t result = sub_15E68(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_15E68(uint64_t *result, uint64_t *a2)
{
  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24)) {
        return result;
      }
      float v3 = (uint64_t *)v2[2];
      float v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            double v9 = (uint64_t **)a2[2];
          }

          else
          {
            double v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _DWORD v10[2] = (uint64_t)v2;
              float v3 = (uint64_t *)v2[2];
            }

            void v9[2] = v3;
            *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = v9;
            *double v9 = v2;
            _DWORD v2[2] = (uint64_t)v9;
            float v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }

          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *float v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          _DWORD v2[2] = v3[2];
          *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }

      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            float v3 = (uint64_t *)v2[2];
          }

          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8LL * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          _DWORD v2[2] = (uint64_t)a2;
          float v3 = (uint64_t *)a2[2];
        }

        else
        {
          a2 = (uint64_t *)a2[2];
        }

        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        _DWORD v2[2] = v3[2];
        *(void *)(v3[2] + 8LL * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        void v3[2] = (uint64_t)v2;
        return result;
      }

      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      _BYTE *v5 = 1;
    }

    while (v3 != result);
  }

  return result;
}

void sub_16000(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_16000(a1, *a2);
    sub_16000(a1, a2[1]);
    operator delete(a2);
  }

uint64_t sub_16040(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  float v4 = (double *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_160BC((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16LL;
    }

    while (v6);
  }

  return a1;
}

void sub_160A4(_Unwind_Exception *a1)
{
}

uint64_t *sub_160BC(uint64_t **a1, double *a2, double *a3, _OWORD *a4)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v6 = sub_16144(a1, a2, &v11, (double *)&v10, a3);
  uint64_t v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    int v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_15E14(a1, (uint64_t)v11, v8, v7);
  }

  return v7;
}

double *sub_16144(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  signed int v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (double v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    int v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v8)
    {
      double v9 = *(uint64_t **)a2;
      do
      {
        uint64_t v10 = (double *)v9;
        double v9 = (uint64_t *)v9[1];
      }

      while (v9);
    }

    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        uint64_t v13 = v10;
      }

      while (v14);
    }

    double v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          int v17 = v16;
          double v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *(double **)v16;
          signed int v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }

        if (v18 >= v15) {
          break;
        }
        signed int v5 = v16 + 1;
        uint64_t v16 = (double *)*((void *)v16 + 1);
      }

      while (v16);
      goto LABEL_43;
    }

LABEL_42:
    int v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }

  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }

  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    uint64_t v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      uint64_t v12 = *(double **)v12;
    }

    while (v12);
  }

  else
  {
    __int16 v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      __int16 v19 = a4;
    }

    while (!v14);
  }

  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          int v17 = v20;
          double v21 = v20[4];
          if (v6 >= v21) {
            break;
          }
          uint64_t v20 = *(double **)v20;
          signed int v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }

        if (v21 >= v6) {
          break;
        }
        signed int v5 = v20 + 1;
        uint64_t v20 = (double *)*((void *)v20 + 1);
      }

      while (v20);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v11)
  {
    *a3 = a4;
  }

  else
  {
    *a3 = a2;
    return a2 + 1;
  }

  return a4;
}

      if (v3 != v5) {
        return sub_44E98(a1, a2);
      }
      goto LABEL_43;
    }

    if (v3 <= 1953653101)
    {
      if (v3 == 1937007734) {
        goto LABEL_54;
      }
      double v6 = 1937009955;
      goto LABEL_47;
    }

    if (v3 == 1969841184) {
      goto LABEL_54;
    }
    float v4 = 1953653102;
    goto LABEL_53;
  }

  if (v3 > 1668641651)
  {
    if (v3 <= 1685278577)
    {
      if (v3 > 1684434035)
      {
        if (v3 != 1684434036)
        {
          if (v3 == 1685278561) {
            return 0LL;
          }
          return sub_44E98(a1, a2);
        }

        goto LABEL_54;
      }

      if (v3 == 1668641652) {
        goto LABEL_54;
      }
      signed int v5 = 1684236338;
      goto LABEL_42;
    }

    if (v3 > 1751737453)
    {
      if (v3 == 1751737454) {
        goto LABEL_54;
      }
      float v4 = 1818850926;
    }

    else
    {
      if (v3 == 1685278578) {
        return *(unsigned __int8 *)(a1[1156] + 257LL);
      }
      float v4 = 1735354734;
    }

          sub_45A2C(a1, a2, a3);
          return 0LL;
        }

        if (v3 == 1870098020) {
          goto LABEL_52;
        }
        float v4 = 1919512167;
LABEL_51:
        if (v3 == v4) {
          goto LABEL_52;
        }
        goto LABEL_42;
      }

      signed int v5 = v3 == 1819173229 || v3 == 1819569763;
      double v6 = 1836411236;
    }

uint64_t *sub_162E0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0LL;
  a1[1] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_16334(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_1631C(_Unwind_Exception *a1)
{
}

uint64_t *sub_16334(uint64_t *result, double *a2, double *a3)
{
  if (a2 != a3)
  {
    float v4 = a2;
    signed int v5 = (uint64_t **)result;
    double v6 = (double *)(result + 1);
    do
    {
      os_log_t result = sub_160BC(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      double v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          double v7 = *(double **)v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          float v4 = v8;
        }

        while (!v9);
      }

      float v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t sub_163B8()
{
  qword_959A0 = (uint64_t)os_log_create("com.apple.bluetooth", "BTAudio");
  memcpy(__dst, &unk_654A8, sizeof(__dst));
  sub_15B68((uint64_t)&qword_959A8, (int *)__dst, 17LL);
  __cxa_atexit((void (*)(void *))sub_151FC, &qword_959A8, &dword_0);
  memcpy(__dst, &unk_655B8, sizeof(__dst));
  sub_16040((uint64_t)&qword_959C0, __dst, 17LL);
  return __cxa_atexit((void (*)(void *))sub_15224, &qword_959C0, &dword_0);
}

void sub_16518( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_165FC(uint64_t a1)
{
  uint64_t v2 = kMXSystemControllerNotification_NowPlayingAppDidChange;
  uint64_t v3 = kMXSystemControllerNotification_ActiveAudioRouteDidChange;
  v23[0] = kMXSystemControllerNotification_NowPlayingAppDidChange;
  v23[1] = kMXSystemControllerNotification_ActiveAudioRouteDidChange;
  uint64_t v4 = kMXSystemControllerNotification_SystemVolumeDidChange;
  uint64_t v5 = kMXSystemControllerNotification_PickableRoutesDidChange;
  _DWORD v23[2] = kMXSystemControllerNotification_SystemVolumeDidChange;
  v23[3] = kMXSystemControllerNotification_PickableRoutesDidChange;
  double v6 = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 4LL);
  *(void *)(*(void *)(a1 + 32) + 96LL) = 0LL;
  *(void *)(*(void *)(a1 + 32) + 152LL) = 0LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 88LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 80LL) = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  2LL);
  *(void *)(*(void *)(a1 + 32) + 112LL) = -[NSMutableSet initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithCapacity:",  2LL);
  unsigned int v7 = [*(id *)(*(void *)(a1 + 32) + 104) setAttributeForKey:kMXSystemControllerProperty_SubscribeToNotifications andValue:v6];
  if (v7)
  {
    int v8 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 67109120;
      unsigned int v20 = v7;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Subscribe to notification failed code: %d",  (uint8_t *)&v19,  8u);
    }

    *(void *)(*(void *)(a1 + 32) + 104LL) = 0LL;
  }

  if (*(void *)(*(void *)(a1 + 32) + 104LL))
  {
    BOOL v9 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v10 = getpid();
      int v19 = 67109376;
      unsigned int v20 = v7;
      __int16 v21 = 1024;
      pid_t v22 = v10;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Initialization via  %d PID %d",  (uint8_t *)&v19,  0xEu);
    }

    uint64_t v11 = ((uint64_t (*)(void))CMSessionGetNotificationCenter)();
    uint64_t v12 = FigNotificationCenterAddWeakListener( v11,  *(void *)(a1 + 32),  sub_168D0,  v2,  *(void *)(*(void *)(a1 + 32) + 104LL),  0LL,  *(void *)(*(void *)(a1 + 32) + 144LL));
    uint64_t NotificationCenter = CMSessionGetNotificationCenter(v12);
    FigNotificationCenterAddWeakListener( NotificationCenter,  *(void *)(a1 + 32),  sub_168D0,  v3,  *(void *)(*(void *)(a1 + 32) + 104LL),  0LL,  *(void *)(*(void *)(a1 + 32) + 144LL));
    BOOL v14 = (os_log_s *)qword_959D8;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT);
    if (v15)
    {
      LOWORD(v19) = 0;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Add listener (kMXSystemControllerNotification_SystemVolumeDidChange)",  (uint8_t *)&v19,  2u);
    }

    uint64_t v16 = CMSessionGetNotificationCenter(v15);
    FigNotificationCenterAddWeakListener( v16,  *(void *)(a1 + 32),  sub_168D0,  v4,  *(void *)(*(void *)(a1 + 32) + 104LL),  0LL,  *(void *)(*(void *)(a1 + 32) + 144LL));
    uint64_t v17 = _os_feature_enabled_impl("BluetoothFeatures", "PersonalizedVolumeV2");
    if ((_DWORD)v17)
    {
      uint64_t v18 = CMSessionGetNotificationCenter(v17);
      FigNotificationCenterAddWeakListener( v18,  *(void *)(a1 + 32),  sub_168D0,  v5,  *(void *)(*(void *)(a1 + 32) + 104LL),  0LL,  *(void *)(*(void *)(a1 + 32) + 144LL));
    }
  }

void sub_168D0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if ([a3 isEqualToString:kMXSystemControllerNotification_NowPlayingAppDidChange])
  {
    objc_msgSend( a2,  "nowPlayingAppChanged:",  objc_msgSend(a5, "objectForKey:", kMXSystemControllerNotificationKey_NowPlayingAppDidChange_DisplayID));
    return;
  }

  if ([a3 isEqualToString:kMXSystemControllerNotification_ActiveAudioRouteDidChange])
  {
    if ([a2 isRouteAvailable] && !objc_msgSend(a2, "nowPlayingBundleID"))
    {
      [a2 refreshNowPlayingAppBundleID];
      if ([a2 nowPlayingBundleID]) {
        [a2 unregisterRouteChangeListener];
      }
    }

    return;
  }

  if ([a3 isEqualToString:kMXSystemControllerNotification_PickableRoutesDidChange])
  {
    return;
  }

  id v8 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_Volume];
  id v9 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_AudioCategory];
  id v10 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_ActiveAudioCategory];
  [a2 setCurrentActiveVolumeAudioCategory:v10];
  id v11 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_SequenceNumber];
  uint64_t v12 = kMXSystemControllerNotificationKey_SystemVolumeDidChange_SilenceVolumeHUD;
  id v13 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_SilenceVolumeHUD];
  [a2 setIsPersonalizedVolumeUpdate:v13];
  BOOL v14 = (os_log_s *)qword_959D8;
  if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 138413314;
    id v22 = v8;
    __int16 v23 = 2112;
    id v24 = v9;
    __int16 v25 = 2112;
    id v26 = v11;
    __int16 v27 = 2112;
    id v28 = v13;
    __int16 v29 = 2112;
    id v30 = v10;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: kMXSystemControllerNotification_SystemVolumeDidChange : volume %@, audio category %@ , sequenceNumber %@, isPersonalizedVolumeUpdate %@ activeAudioCategory: %@",  (uint8_t *)&v21,  0x34u);
  }

  id v15 = [a5 objectForKey:kMXSystemControllerNotificationKey_SystemVolumeDidChange_Reason];
  id v16 = [a5 objectForKey:v12];
  if (!_os_feature_enabled_impl("BluetoothFeatures", "PersonalizedVolumeV2"))
  {
    int v19 = (os_log_s *)qword_959D8;
    if (!os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v21) = 0;
    unsigned int v20 = "Error: PersonalizedVolumeV2 feature flag is not enabled";
    goto LABEL_29;
  }

  if (![v15 isEqualToString:@"ExplicitVolumeChange"]
    || !objc_msgSend( v16,  "isEqualToNumber:",  +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0))
    || ([v10 isEqualToString:kMXSessionAudioCategory_PhoneCall] & 1) == 0
    && ([v10 isEqualToString:kMXSessionAudioCategory_AudioVideo] & 1) == 0
    && ![v10 isEqualToString:kMXSessionAudioCategory_VoiceCommand]
    || ![a2 isBluetoothRoute])
  {
    return;
  }

  if (!objc_msgSend(objc_msgSend(a2, "processManualVolumeUpdates"), "BOOLValue"))
  {
    int v19 = (os_log_s *)qword_959D8;
    if (!os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v21) = 0;
    unsigned int v20 = "Error: PersonalizedVolumeV2 processManualVolumeUpdates is disabled";
LABEL_29:
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v21, 2u);
    return;
  }

  if (([v13 BOOLValue] & 1) == 0)
  {
    else {
      uint64_t v17 = @"Bottom-Up";
    }
    [a2 setReasonForManualVolumeUpdate:v17];
    [v8 floatValue];
    [a2 sendManualVolumeUpdate:(int)(float)(v18 * 100.0)];
  }

void sub_16ED4(uint64_t a1)
{
  uint64_t v2 = -[NSNumber initWithUnsignedInt:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInt:",  *(unsigned int *)(a1 + 40));
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 112LL);
    if (!v4)
    {
      *(void *)(*(void *)(a1 + 32) + 112LL) = -[NSMutableSet initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithCapacity:",  2LL);
      uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 112LL);
    }

    [v4 addObject:v3];
  }

  uint64_t v5 = (os_log_s *)qword_959D8;
  if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 40);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Registering for volume change Device %d",  (uint8_t *)v7,  8u);
  }

void sub_17028(uint64_t a1)
{
  uint64_t v2 = -[NSNumber initWithUnsignedInt:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInt:",  *(unsigned int *)(a1 + 40));
  if (v2)
  {
    uint64_t v3 = v2;
    [*(id *)(*(void *)(a1 + 32) + 112) removeObject:v2];
  }

  uint64_t v4 = (os_log_s *)qword_959D8;
  if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Unregistering for volume change Device %d",  (uint8_t *)v6,  8u);
  }

void sub_17198(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    id v16 = 0LL;
    [Weak copyAttributeForKey:kMXSystemControllerProperty_PickedRoute withValueOut:&v16];
    uint64_t v3 = (os_log_s *)qword_959D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT);
    uint64_t v5 = kMXSession_RouteDescriptionKey_AVAudioRouteName;
    if (v4)
    {
      id v6 = [v16 objectForKeyedSubscript:kMXSession_RouteDescriptionKey_AVAudioRouteName];
      *(_DWORD *)std::string buf = 138412290;
      id v18 = v6;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "BTAudioAVNotificationMonitor:Av audio route name %@", buf, 0xCu);
    }

    if ((objc_msgSend( @"HeadphonesBT",  "isEqualToString:",  objc_msgSend(v16, "objectForKeyedSubscript:", v5)) & 1) != 0 || objc_msgSend( @"HeadsetBT",  "isEqualToString:",  objc_msgSend(v16, "objectForKeyedSubscript:", v5)))
    {
      id v7 = [v16 objectForKeyedSubscript:kMXSession_RouteDescriptionKey_RouteUID];
      id v8 = v7;
      if (v7)
      {
        id v9 = [v7 componentsSeparatedByString:@"-"];
        id v10 = *(void **)(*(void *)(a1 + 32) + 152LL);
        if (v10)
        {

          *(void *)(*(void *)(a1 + 32) + 152LL) = 0LL;
        }

        *(void *)(*(void *)(a1 + 32) + 152) = objc_msgSend(objc_msgSend(v9, "firstObject"), "copy");
      }
    }

    else
    {
      id v11 = *(void **)(*(void *)(a1 + 32) + 152LL);
      if (v11)
      {

        id v8 = 0LL;
        *(void *)(*(void *)(a1 + 32) + 152LL) = 0LL;
      }

      else
      {
        id v8 = 0LL;
      }
    }

    uint64_t v12 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(v13 + 152);
      uint64_t v15 = *(void *)(v13 + 120);
      *(_DWORD *)std::string buf = 138413058;
      id v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      __int16 v21 = 2112;
      uint64_t v22 = v15;
      __int16 v23 = 2112;
      id v24 = v16;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "Pickable routes for routeUid %@ _currentDeviceUID %@ _currentActiveVolumeAudioCategory %@ (current category is <%@>):",  buf,  0x2Au);
    }
  }

void sub_17414(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = objc_msgSend(objc_msgSend(v2, "componentsSeparatedByString:", @"-"), "firstObject");
    if (![*(id *)(*(void *)(a1 + 40) + 80) objectForKey:v3])
    {
      BOOL v4 = (os_log_s *)qword_959D8;
      if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 48);
        int v15 = 138412546;
        id v16 = v3;
        __int16 v17 = 1024;
        int v18 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Creating _btAudioDeviceDict entry for %@ Device ID %u: ",  (uint8_t *)&v15,  0x12u);
      }

      id v6 = -[BTAudioPersonalizedVolumeDevice initWithBluetoothInfo:deviceAddr:]( objc_alloc(&OBJC_CLASS___BTAudioPersonalizedVolumeDevice),  "initWithBluetoothInfo:deviceAddr:",  *(unsigned int *)(a1 + 48),  v3);
      -[BTAudioPersonalizedVolumeDevice setAvNotificationMonitorQueue:]( v6,  "setAvNotificationMonitorQueue:",  *(void *)(*(void *)(a1 + 40) + 168LL));
      [*(id *)(*(void *)(a1 + 40) + 80) setObject:v6 forKey:v3];
    }
  }

  else
  {
    id v7 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_ERROR)) {
      sub_5A614(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

void sub_17630(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = objc_msgSend(objc_msgSend(v2, "componentsSeparatedByString:", @"-"), "firstObject");
    id v4 = [*(id *)(*(void *)(a1 + 40) + 80) objectForKey:v3];
    if (v4)
    {
      int v5 = v4;
      [*(id *)(*(void *)(a1 + 40) + 80) removeObjectForKey:v3];
      id v6 = (os_log_s *)qword_959D8;
      if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 138412546;
        id v16 = v3;
        __int16 v17 = 1024;
        unsigned int v18 = [v5 retainCount];
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "unRegisterPersonalizedVolumeListener %@ lookupDevice retainCount %d",  (uint8_t *)&v15,  0x12u);
      }

      [v5 invalidate];
    }
  }

  else
  {
    id v7 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_ERROR)) {
      sub_5A614(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }

NSNumber *sub_17800(uint64_t a1)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "PersonalizedVolumeV2"))
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 40);
  }

  else
  {
    id v3 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Error: PersonalizedVolumeV2 feature flag is not enabled", v5, 2u);
    }

    uint64_t v2 = 0LL;
  }

  os_log_t result = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v2);
  *(void *)(*(void *)(a1 + 32) + 128LL) = result;
  return result;
}

id sub_179F8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) getPersonalizedVolumeDevice:*(void *)(a1 + 40)];
  if (result) {
    return objc_msgSend( result,  "NotifyManualVolumeChanged:shouldUpdateBuds:",  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 56), "BOOLValue") ^ 1);
  }
  return result;
}

void sub_17AB0(uint64_t a1)
{
  uint64_t v2 = -[NSNumber initWithUnsignedInt:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInt:",  *(unsigned int *)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    id v4 = *(void **)(*(void *)(a1 + 32) + 112LL);
    if (!v4)
    {
      *(void *)(*(void *)(a1 + 32) + 112LL) = -[NSMutableSet initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithCapacity:",  2LL);
      id v4 = *(void **)(*(void *)(a1 + 32) + 112LL);
    }

    [v4 addObject:v3];
  }

  int v5 = (os_log_s *)qword_959D8;
  if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 40);
    unsigned int v7 = [*(id *)(*(void *)(a1 + 32) + 112) count];
    v8[0] = 67109376;
    v8[1] = v6;
    __int16 v9 = 1024;
    unsigned int v10 = v7;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Registering Device %d List %d",  (uint8_t *)v8,  0xEu);
  }

void sub_17C80(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    float v9 = 0.0;
    uint64_t v8 = 0LL;
    LODWORD(v3) = *(_DWORD *)(a1 + 56);
    [Weak performVolumeOperation:4 volume:0 category:0 mode:@"HeadphonesBT" routeName:*(void *)(a1 + 48) routeDeviceIdentifier:0 routeSubtype:v3 outVolume:&v9 outSequenceNumb er:&v8 outMuted:0 outCategoryCopy:0 outModeCopy:0];
    if (!*(void *)(*(void *)(a1 + 32) + 72LL)) {
      *(void *)(*(void *)(a1 + 32) + 72LL) = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    }
    id v4 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      *(double *)&int v5 = COERCE_DOUBLE(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v8));
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 72LL);
      *(_DWORD *)std::string buf = 138412546;
      double v11 = *(double *)&v5;
      __int16 v12 = 2112;
      uint64_t v13 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: adding sequence num: %@ sequeneArray %@",  buf,  0x16u);
    }

    objc_msgSend( *(id *)(*(void *)(a1 + 32) + 72),  "addObject:",  +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v8));
    CFRelease(*(CFTypeRef *)(a1 + 48));
    unsigned int v7 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      double v11 = v9;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "software volume: CM Volume: %f", buf, 0xCu);
    }
  }

void sub_17F08(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    double v3 = Weak;
    id v4 = (os_log_s *)qword_959D8;
    if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
    {
      double v8 = *(float *)(a1 + 48);
      double v9 = *(float *)(a1 + 52);
      double v10 = *(float *)(a1 + 56);
      double v11 = *(float *)(a1 + 60);
      double v12 = *(float *)(a1 + 64);
      *(_DWORD *)std::string buf = 138414082;
      uint64_t v20 = @"Audio/Video";
      __int16 v21 = 2048;
      double v22 = v8;
      __int16 v23 = 2112;
      id v24 = @"PhoneCall";
      __int16 v25 = 2048;
      double v26 = v9;
      __int16 v27 = 2112;
      id v28 = @"VoiceCommand";
      __int16 v29 = 2048;
      double v30 = v10;
      __int16 v31 = 2048;
      double v32 = v11;
      __int16 v33 = 2048;
      double v34 = v12;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Adaptive Volume: Category %@ mediaVolume %f, Category %@ telephoneVolume %f, Category %@ voiceCommandVolume %f, rampUpDuration %f, rampDownDuration %f",  buf,  0x52u);
    }

    LODWORD(v5) = *(_DWORD *)(a1 + 48);
    LODWORD(v6) = *(_DWORD *)(a1 + 60);
    LODWORD(v7) = *(_DWORD *)(a1 + 64);
    [v3 performVolumeOperation:12 volume:@"Audio/Video" category:0 mode:@"HeadphonesBT" routeName:*(void *)(a1 + 40) routeDeviceIdentifier:0 routeSubtype:v5 rampUpDuration:v6 rampDownDu ration:v7 outVolume:0 outSequenceNumber:0 outMuted:0 outCategoryCopy:0 outModeCopy:0];
    LODWORD(v13) = *(_DWORD *)(a1 + 52);
    LODWORD(v14) = *(_DWORD *)(a1 + 60);
    LODWORD(v15) = *(_DWORD *)(a1 + 64);
    [v3 performVolumeOperation:12 volume:@"PhoneCall" category:0 mode:@"HeadphonesBT" routeName:*(void *)(a1 + 40) routeDeviceIdentifier:0 routeSubtype:v13 rampUpDuration:v14 rampDownDu ration:v15 outVolume:0 outSequenceNumber:0 outMuted:0 outCategoryCopy:0 outModeCopy:0];
    LODWORD(v16) = *(_DWORD *)(a1 + 56);
    LODWORD(v17) = *(_DWORD *)(a1 + 60);
    LODWORD(v18) = *(_DWORD *)(a1 + 64);
    [v3 performVolumeOperation:12 volume:@"VoiceCommand" category:0 mode:@"HeadphonesBT" routeName:*(void *)(a1 + 40) routeDeviceIdentifier:0 routeSubtype:v16 rampUpDuration:v17 rampDownDu ration:v18 outVolume:0 outSequenceNumber:0 outMuted:0 outCategoryCopy:0 outModeCopy:0];
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }

void sub_18148(uint64_t a1)
{
  uint64_t v2 = -[NSNumber initWithUnsignedInt:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInt:",  *(unsigned int *)(a1 + 40));
  if (v2)
  {
    double v3 = v2;
    [*(id *)(*(void *)(a1 + 32) + 112) removeObject:v2];
  }

  id v4 = (os_log_s *)qword_959D8;
  if (os_log_type_enabled((os_log_t)qword_959D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    unsigned int v6 = [*(id *)(*(void *)(a1 + 32) + 112) count];
    v7[0] = 67109376;
    v7[1] = v5;
    __int16 v8 = 1024;
    unsigned int v9 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTAudioAVNotificationMonitor: Un-Registering Device %d List %d",  (uint8_t *)v7,  0xEu);
  }

uint64_t sub_18850()
{
  qword_959D8 = (uint64_t)os_log_create("com.apple.bluetooth", "BTAudio");
  sub_529E8(&unk_959E0, v0);
  return __cxa_atexit((void (*)(void *))sub_52A64, &unk_959E0, &dword_0);
}

uint64_t sub_188A8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v5 = a5[1];
  unint64_t v6 = *((unsigned int *)a5 + 8);
  unint64_t v7 = v5 / v6;
  if ((_DWORD)v7)
  {
    uint64_t result = 0LL;
    uint64_t v9 = (v7 * v6);
    *a2 = v7;
    uint64_t v10 = *a5;
    int v11 = *((_DWORD *)a5 + 11);
    *a5 += v9;
    a5[1] = v5 - v9;
  }

  else
  {
    uint64_t v10 = 0LL;
    LODWORD(v9) = 0;
    *a2 = 0;
    int v11 = *((_DWORD *)a5 + 11);
    uint64_t result = 1684368995LL;
  }

  *(void *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 8) = v11;
  *(_DWORD *)(a3 + 12) = v9;
  return result;
}

uint64_t sub_1890C(uint64_t a1, _DWORD *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a5 + 8);
  if (v5 || (*(_DWORD *)(a5 + 32) - 1633772389) < 3)
  {
    *a2 = 1;
    *(void *)(a3 + 16) = *(void *)a5;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a5 + 52);
    *(_DWORD *)(a3 + 12) = v5;
    if (a4) {
      *a4 = *(void *)(a5 + 64);
    }
    uint64_t v6 = 0LL;
    *(void *)(a5 + 8) = 0LL;
  }

  else
  {
    uint64_t v6 = 1684303459LL;
    *a2 = 0;
    __int16 v8 = (os_log_s *)qword_95A28;
    if (os_log_type_enabled((os_log_t)qword_95A28, OS_LOG_TYPE_ERROR)) {
      sub_5A644(v8);
    }
  }

  return v6;
}

BOOL sub_189A4(int a1)
{
  return (a1 - 1633772389) < 3;
}

void sub_189BC(unsigned int a1, uint64_t a2)
{
  if (a1 && a1 != 1684303459 && a1 != 1684368995)
  {
    *(void *)uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    int v11 = 0;
    int v4 = bswap32(a1);
    *(_DWORD *)&v9[1] = v4;
    if ((v4 & 0x80) != 0)
    {
    }

    else if ((_DefaultRuneLocale.__runetype[(char)v4] & 0x40000) == 0)
    {
      goto LABEL_20;
    }

    __darwin_ct_rune_t v5 = (__int16)v4 >> 8;
    if ((v4 & 0x8000) != 0)
    {
      if (!__maskrune(v5, 0x40000uLL)) {
        goto LABEL_20;
      }
    }

    else if ((_DefaultRuneLocale.__runetype[v5] & 0x40000) == 0)
    {
      goto LABEL_20;
    }

    __darwin_ct_rune_t v6 = v4 << 8 >> 24;
    if ((v4 & 0x800000) != 0)
    {
      if (!__maskrune(v6, 0x40000uLL)) {
        goto LABEL_20;
      }
    }

    else if ((_DefaultRuneLocale.__runetype[v6] & 0x40000) == 0)
    {
      goto LABEL_20;
    }

    __darwin_ct_rune_t v7 = v4 >> 24;
    if (v4 < 0)
    {
      if (__maskrune(v7, 0x40000uLL)) {
        goto LABEL_18;
      }
    }

    else if ((_DefaultRuneLocale.__runetype[v7] & 0x40000) != 0)
    {
LABEL_18:
      strcpy(&v9[5], "'");
      v9[0] = 39;
      goto LABEL_21;
    }

LABEL_20:
    sprintf(v9, "%d", a1);
LABEL_21:
    __int16 v8 = (os_log_s *)qword_95A28;
    if (os_log_type_enabled((os_log_t)qword_95A28, OS_LOG_TYPE_ERROR)) {
      sub_5A684(a2, (uint64_t)v9, v8);
    }
  }

        double v16 = *(_OWORD *)v6;
        *(void *)(v8 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)__int16 v8 = v16;
        v8 += 24LL;
        *(_BYTE *)(v9 + 47) = 0;
        *(_BYTE *)__darwin_ct_rune_t v6 = 0;
      }

os_log_t sub_18B58()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A28 = (uint64_t)result;
  return result;
}

id sub_18C10(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = -[IDSService initWithService:]( objc_alloc(&OBJC_CLASS___IDSService),  "initWithService:",  @"com.apple.private.alloy.bluetooth.audio");
  [*(id *)(*(void *)(a1 + 32) + 16) addDelegate:*(void *)(a1 + 32) queue:*(void *)(qword_962E8 + 160)];
  uint64_t v2 = &byte_8D8DA[30502];
  double v3 = (os_log_s *)qword_95A30;
  if (os_log_type_enabled((os_log_t)qword_95A30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Initializing BTAudioIDSConnection", buf, 2u);
  }

  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) devices];
  __darwin_ct_rune_t v5 = (os_log_s *)qword_95A30;
  if (os_log_type_enabled((os_log_t)qword_95A30, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v4 count];
    *(_DWORD *)std::string buf = 134218242;
    id v34 = v6;
    __int16 v35 = 2112;
    id v36 = v4;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Current registered devices %lu. %@", buf, 0x16u);
  }

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id result = [v4 countByEnumeratingWithState:&v29 objects:v47 count:16];
  if (result)
  {
    id v9 = result;
    uint64_t v10 = *(void *)v30;
    *(void *)&__int128 v8 = 136316674LL;
    __int128 v24 = v8;
    uint64_t v25 = *(void *)v30;
    do
    {
      int v11 = 0LL;
      do
      {
        if (*(void *)v30 != v10) {
          objc_enumerationMutation(v4);
        }
        double v12 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)v11);
        double v13 = (os_log_s *)*((void *)v2 + 326);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v28 = objc_msgSend(objc_msgSend(v12, "productName"), "UTF8String");
          id v27 = [v12 productBuildVersion];
          id v26 = objc_msgSend(objc_msgSend(v12, "service"), "UTF8String");
          double v14 = "false";
          else {
            double v15 = "false";
          }
          double v16 = v2;
          id v17 = [v12 serviceMinCompatibilityVersion];
          unsigned int v18 = [*(id *)(a1 + 32) deviceIsCompatible:v12];
          *(_DWORD *)std::string buf = v24;
          __int16 v19 = "will not";
          if (v18) {
            __int16 v19 = "will";
          }
          id v34 = v28;
          __int16 v35 = 2112;
          id v36 = v27;
          __int16 v37 = 2080;
          id v38 = v26;
          __int16 v39 = 2080;
          uint64_t v40 = v15;
          __int16 v41 = 2080;
          uint64_t v42 = v14;
          __int16 v43 = 2048;
          id v44 = v17;
          uint64_t v2 = v16;
          uint64_t v10 = v25;
          __int16 v45 = 2080;
          uint64_t v46 = v19;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "Device %s %@ is registered on service %s. Nearby: %s Connected: %s. ServiceMincompatibilityVersion: %lu. Dev ice %s arbitrate",  buf,  0x48u);
        }

        uint64_t v20 = *(void **)(a1 + 32);
        if (objc_msgSend(v20, "compatibleAndNearby", v24))
        {
          id v21 = &dword_0 + 1;
        }

        else if ([*(id *)(a1 + 32) deviceIsCompatible:v12] {
               && [v12 isNearby])
        }
        {
          id v21 = [v12 isConnected];
        }

        else
        {
          id v21 = 0LL;
        }

        [v20 setCompatibleAndNearby:v21];
        double v22 = *(void **)(a1 + 32);
        if ([v22 compatibleAndConnected])
        {
          id v23 = &dword_0 + 1;
        }

        else if ([*(id *)(a1 + 32) deviceIsCompatible:v12] {
               && [v12 isNearby])
        }
        {
          id v23 = [v12 isConnected];
        }

        else
        {
          id v23 = 0LL;
        }

        [v22 setCompatibleAndConnected:v23];
        int v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id result = [v4 countByEnumeratingWithState:&v29 objects:v47 count:16];
      id v9 = result;
    }

    while (result);
  }

  return result;
}

void sub_196B4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void sub_1986C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19964( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19A34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_19C84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1A198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A7E4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

os_log_t sub_1A7FC()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A30 = (uint64_t)result;
  return result;
}

uint64_t sub_1A828(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = -1024458752;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = -1024458752;
  *(void *)(a1 + 64) = 0LL;
  id v4 = (os_log_s *)qword_95A38;
  if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Creating audio level", v6, 2u);
  }

  *(void *)(a1 + 72) = a2;
  return a1;
}

double sub_1A8C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 1288LL))(v2))
  {
    if (*(void *)(*(void *)(a1 + 72) + 216LL))
    {
      *(void *)(a1 + 64) = 0LL;
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(_DWORD *)(a1 + 16) = -1024458752;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_DWORD *)(a1 + 56) = -1024458752;
    }
  }

  return result;
}

void sub_1A928(uint64_t a1, unsigned int a2, const float *a3)
{
  float __C = 0.0;
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 1288LL))(v4))
  {
    if (a2 - 1921 > 0xFFFFF87F)
    {
      if (a3)
      {
        if (sub_7250(*(void *)(a1 + 72)) == 1952539500)
        {
          (*(void (**)(double *__return_ptr, void, void))(**(void **)(a1 + 72) + 792LL))( &v28,  *(void *)(a1 + 72),  0LL);
          double v7 = v28;
          __int128 v33 = v29;
          vDSP_Stride v8 = v31;
          int v34 = v30;
          uint64_t v9 = v32;
          unsigned int v10 = (v28 / (double)a2);
          if (v10 >= 4) {
            unsigned int v11 = v10 >> 2;
          }
          else {
            unsigned int v11 = 2;
          }
          unsigned int v12 = *(_DWORD *)(a1 + 4) + a2;
          unsigned int v13 = *(_DWORD *)a1 + 1;
          *(_DWORD *)a1 = v13;
          *(_DWORD *)(a1 + 4) = v12;
          if (!(v13 % v11))
          {
            vDSP_svesq(a3, v8, &__C, a2);
            float v14 = (float)(__C / (float)a2) + 1.0e-12;
            float v15 = log10f(v14) * 10.0;
            *(float *)(a1 + 12) = *(float *)(a1 + 12) + v15;
            *(_DWORD *)(a1 + 8) += a2;
            if (v15 <= -119.9) {
              *(void *)(a1 + 64) += v11 * a2;
            }
            else {
              *(void *)(a1 + 64) = 0LL;
            }
          }

          uint64_t v16 = *(unsigned int *)(a1 + 4);
          if (v7 * 0.25 <= (double)v16)
          {
            float v17 = *(float *)(a1 + 12) / (float)(*(_DWORD *)a1 / v11);
            *(float *)(a1 + 16) = v17;
            uint64_t v18 = *(unsigned int *)(a1 + 8);
            __int16 v19 = *(dispatch_queue_s **)(qword_962E8 + 184);
            v20[0] = _NSConcreteStackBlock;
            v20[1] = 3221225472LL;
            void v20[2] = sub_1AB94;
            v20[3] = &unk_81FC0;
            float v25 = v17;
            unsigned int v26 = v11;
            unsigned int v27 = v10;
            v20[4] = v18;
            v20[5] = v16;
            *(double *)&v20[6] = v7;
            __int128 v21 = v33;
            int v22 = v34;
            int v23 = v8;
            uint64_t v24 = v9;
            dispatch_async(v19, v20);
            *(void *)a1 = 0LL;
            *(void *)(a1 + 8) = 0LL;
            *(_DWORD *)(a1 + 16) = -1024458752;
            *(void *)(a1 + 24) = 0LL;
          }
        }
      }

      else if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR))
      {
        sub_5A870();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR))
    {
      sub_5A844();
    }
  }

double sub_1AB94(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95A38;
  if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(a1 + 88);
    int v5 = *(_DWORD *)(a1 + 92);
    int v6 = *(_DWORD *)(a1 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = 134219264;
    double v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v9;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioDetect virtual avgPwr %fdB,intv %u/%u,processed %llu,delivered %llu,rate %f",  (uint8_t *)&v10,  0x36u);
  }

  return result;
}

void sub_1AC74(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4)
{
  __C[0] = 0.0;
  if (sub_52814())
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 1288LL))(v8))
      {
        if (a3)
        {
          uint64_t v9 = *(void *)(a1 + 72);
          if (*(void *)(v9 + 224))
          {
            if ((unint64_t)(a2 - 7681) > 0xFFFFFFFFFFFFE1FFLL)
            {
              if (a4 && sub_7250(v9) == 1953719151)
              {
                (*(void (**)(double *__return_ptr, void, uint64_t))(**(void **)(a1 + 72) + 792LL))( &v34,  *(void *)(a1 + 72),  1LL);
                double v11 = v34;
                __int128 v38 = v35;
                int v39 = v36;
                unsigned int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 224LL) + 80LL);
                if (v12)
                {
                  vDSP_Stride v13 = __IA[0];
                  vDSP_Length v14 = a2 / v12;
                  unsigned int v15 = (v34 / (double)v14);
                  uint64_t v16 = *(void *)&__IA[1];
                  if (v15 >= 4) {
                    unsigned int v17 = v15 >> 2;
                  }
                  else {
                    unsigned int v17 = 2;
                  }
                  unsigned int v18 = *(_DWORD *)(a1 + 44) + v14;
                  unsigned int v19 = *(_DWORD *)(a1 + 40) + 1;
                  *(_DWORD *)(a1 + 40) = v19;
                  *(_DWORD *)(a1 + 44) = v18;
                  *(void *)(a1 + 32) += a4;
                  if (!(v19 % v17))
                  {
                    vDSP_svesq(a3, v13, __C, v14);
                    float v20 = (float)(__C[0] / (float)v14) + 1.0e-12;
                    *(float *)(a1 + 52) = *(float *)(a1 + 52) + (float)(log10f(v20) * 10.0);
                    unsigned int v18 = *(_DWORD *)(a1 + 44);
                    *(_DWORD *)(a1 + 48) += v14;
                  }

                  if (v11 + v11 <= (double)v18)
                  {
                    float v21 = *(float *)(a1 + 52) / (float)(*(_DWORD *)(a1 + 40) / v17);
                    *(float *)(a1 + 56) = v21;
                    uint64_t v22 = *(unsigned int *)(a1 + 48);
                    uint64_t v23 = *(void *)(a1 + 32);
                    uint64_t v24 = *(dispatch_queue_s **)(qword_962E8 + 184);
                    block[0] = _NSConcreteStackBlock;
                    block[1] = 3221225472LL;
                    block[2] = sub_1AF10;
                    block[3] = &unk_81FE0;
                    float v31 = v21;
                    unsigned int v32 = v17;
                    unsigned int v33 = (v11 / (double)v14);
                    void block[4] = v22;
                    block[5] = v18;
                    *(double *)&void block[6] = v11;
                    __int128 v26 = v38;
                    int v27 = v39;
                    int v28 = v13;
                    uint64_t v29 = v16;
                    uint64_t v30 = v23;
                    dispatch_async(v24, block);
                    *(void *)(a1 + 40) = 0LL;
                    *(void *)(a1 + 48) = 0LL;
                    *(_DWORD *)(a1 + 56) = -1024458752;
                    *(void *)(a1 + 32) = 0LL;
                  }
                }

                else if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR))
                {
                  sub_5A910();
                }
              }
            }

            else
            {
              int v10 = (os_log_s *)qword_95A38;
              if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR)) {
                sub_5A89C(a2, v10);
              }
            }
          }
        }
      }
    }
  }

double sub_1AF10(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95A38;
  if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(a1 + 96);
    int v5 = *(_DWORD *)(a1 + 100);
    int v6 = *(_DWORD *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 88);
    int v11 = 134219520;
    double v12 = v4;
    __int16 v13 = 1024;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioDetect Input avgPwr %fdB,intv %u/%u,processed %llu,delivered %llu,rate %f,encoded %zu",  (uint8_t *)&v11,  0x40u);
  }

  return result;
}

void sub_1AFFC(uint64_t a1, unsigned int a2, const float *a3, uint64_t a4)
{
  float __C = 0.0;
  if (sub_52814())
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 1288LL))(v8))
      {
        if (a2 - 1921 > 0xFFFFF87F)
        {
          if (a3)
          {
            if (sub_7250(*(void *)(a1 + 72)) == 1953719151)
            {
              (*(void (**)(double *__return_ptr, void, void))(**(void **)(a1 + 72) + 792LL))( &v32,  *(void *)(a1 + 72),  0LL);
              double v9 = v32;
              __int128 v37 = v33;
              vDSP_Stride v10 = v35;
              int v38 = v34;
              uint64_t v11 = v36;
              unsigned int v12 = (v32 / (double)a2);
              if (v12 >= 4) {
                unsigned int v13 = v12 >> 2;
              }
              else {
                unsigned int v13 = 2;
              }
              unsigned int v14 = *(_DWORD *)(a1 + 4) + a2;
              unsigned int v15 = *(_DWORD *)a1 + 1;
              *(_DWORD *)a1 = v15;
              *(_DWORD *)(a1 + 4) = v14;
              *(void *)(a1 + 24) += a4;
              if (!(v15 % v13))
              {
                vDSP_svesq(a3, v10, &__C, a2);
                float v16 = (float)(__C / (float)a2) + 1.0e-12;
                float v17 = log10f(v16) * 10.0;
                *(float *)(a1 + 12) = *(float *)(a1 + 12) + v17;
                *(_DWORD *)(a1 + 8) += a2;
                if (v17 <= -119.9) {
                  *(void *)(a1 + 64) += v13 * a2;
                }
                else {
                  *(void *)(a1 + 64) = 0LL;
                }
              }

              uint64_t v18 = *(unsigned int *)(a1 + 4);
              if (v9 * 0.25 <= (double)v18)
              {
                float v19 = *(float *)(a1 + 12) / (float)(*(_DWORD *)a1 / v13);
                *(float *)(a1 + 16) = v19;
                uint64_t v20 = *(unsigned int *)(a1 + 8);
                uint64_t v21 = *(void *)(a1 + 24);
                uint64_t v22 = *(dispatch_queue_s **)(qword_962E8 + 184);
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472LL;
                block[2] = sub_1B290;
                block[3] = &unk_81FE0;
                float v29 = v19;
                unsigned int v30 = v13;
                unsigned int v31 = v12;
                void block[4] = v20;
                block[5] = v18;
                *(double *)&void block[6] = v9;
                __int128 v24 = v37;
                int v25 = v38;
                int v26 = v10;
                uint64_t v27 = v11;
                uint64_t v28 = v21;
                dispatch_async(v22, block);
                *(void *)a1 = 0LL;
                *(void *)(a1 + 8) = 0LL;
                *(_DWORD *)(a1 + 16) = -1024458752;
                *(void *)(a1 + 24) = 0LL;
              }
            }
          }

          else if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR))
          {
            sub_5A968();
          }
        }

        else if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_ERROR))
        {
          sub_5A93C();
        }
      }
    }
  }

double sub_1B290(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95A38;
  if (os_log_type_enabled((os_log_t)qword_95A38, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = *(float *)(a1 + 96);
    int v5 = *(_DWORD *)(a1 + 100);
    int v6 = *(_DWORD *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 88);
    int v11 = 134219520;
    double v12 = v4;
    __int16 v13 = 1024;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioDetect Output avgPwr %fdB,intv %u/%u,processed %llu,delivered %llu,rate %f,encoded %zu",  (uint8_t *)&v11,  0x40u);
  }

  return result;
}

os_log_t sub_1B37C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A38 = (uint64_t)result;
  return result;
}

void sub_1B3A8(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t *a6, int a7)
{
  __int16 v13 = (os_log_s *)qword_95A40;
  if (os_log_type_enabled((os_log_t)qword_95A40, OS_LOG_TYPE_DEBUG))
  {
    v14[0] = 67110402;
    v14[1] = a2;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a4;
    __int16 v19 = 2048;
    uint64_t v20 = a5;
    __int16 v21 = 2080;
    uint64_t v22 = a6;
    __int16 v23 = 1024;
    int v24 = a7;
    _os_log_debug_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "Sending arbitration metric - version: %d, productId: %d, action: %d, epoch: %llu, responseId: %s, type: %d",  (uint8_t *)v14,  0x2Eu);
  }

void sub_1B4B4(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = (os_log_s *)qword_95A40;
  if (os_log_type_enabled((os_log_t)qword_95A40, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 67109632;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    __int16 v11 = 1024;
    int v12 = a4;
    _os_log_debug_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "Sending codec metric - codecType: %d, mediaType: %d, [sampleRate: %d]",  (uint8_t *)v8,  0x14u);
  }

void sub_1B578()
{
  uint64_t v0 = (os_log_s *)qword_95A40;
  if (os_log_type_enabled((os_log_t)qword_95A40, OS_LOG_TYPE_DEBUG)) {
    sub_5A994(v0);
  }
}

uint64_t sub_1B5B4()
{
  return 0LL;
}

os_log_t sub_1B5BC()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A40 = (uint64_t)result;
  return result;
}

uint64_t sub_1B5E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)sub_2C61C(a1) = &off_82010;
  uint64_t v8 = (os_log_s *)qword_95A48;
  if (os_log_type_enabled((os_log_t)qword_95A48, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = sub_2C7AC(a1);
    int v10 = "output";
    if (a3 == 1768845428) {
      int v10 = "input";
    }
    int v12 = 136446466;
    __int16 v13 = v10;
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Creating %{public}s audio control with audioObjectID: %u",  (uint8_t *)&v12,  0x12u);
  }

  *(void *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  return a1;
}

void sub_1B6F0(_Unwind_Exception *a1)
{
}

void sub_1B70C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2C6D4(a1);
  operator delete(v1);
}

uint64_t sub_1B720(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 120LL))( *(void *)(a1 + 24),  a1,  a2);
}

uint64_t sub_1B738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 128LL))( *(void *)(a1 + 24),  a1,  a2,  a3);
}

uint64_t sub_1B754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 136LL))( *(void *)(a1 + 24),  a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_1B778(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 144LL))( *(void *)(a1 + 24),  a1,  a2);
}

uint64_t sub_1B790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 152LL))( *(void *)(a1 + 24),  a1,  a2,  a3,  a4,  a5,  a6,  a7);
}

uint64_t sub_1B7BC(uint64_t a1, __int32 *a2)
{
  if (!a2) {
    return 1852797029LL;
  }
  uint64_t v3 = (**(uint64_t (***)(void, void, uint64_t, __int32 *))(qword_962E8 + 144))( *(void *)(qword_962E8 + 144),  *(unsigned int *)(a1 + 8),  1LL,  a2);
  if ((_DWORD)v3)
  {
    double v4 = (os_log_s *)qword_95A48;
    if (os_log_type_enabled((os_log_t)qword_95A48, OS_LOG_TYPE_ERROR)) {
      sub_57FEC(a2, v4, v5);
    }
  }

  return v3;
}

os_log_t sub_1B848()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A48 = (uint64_t)result;
  return result;
}

void sub_1B874(uint64_t a1, int a2, uint64_t a3, char a4)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v7);
  *(void *)uint64_t v6 = off_82078;
  *(_BYTE *)(v6 + 152) = 1;
  *(_BYTE *)(v6 + 161) = a4;
  *(void *)(v6 + 16) = 0LL;
}

void *sub_1B8CC(void *a1)
{
  *a1 = off_82078;
  uint64_t v2 = (OpaqueAudioConverter *)a1[2];
  if (v2)
  {
    AudioConverterDispose(v2);
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_95A50;
    if (os_log_type_enabled((os_log_t)qword_95A50, OS_LOG_TYPE_ERROR)) {
      sub_5A9D4(v3);
    }
  }

  return sub_415F0(a1);
}

void sub_1B938(void *a1)
{
  uint64_t v1 = sub_1B8CC(a1);
  operator delete(v1);
}

uint64_t sub_1B94C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 116) = a2;
  if (*(_BYTE *)(a1 + 161))
  {
    uint64_t v3 = (os_log_s *)qword_95A50;
    if (os_log_type_enabled((os_log_t)qword_95A50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "LC3 decoder init to AACELD 48K", buf, 2u);
    }

    int v4 = 1633772389;
  }

  else
  {
    int v4 = 1818440480;
  }

  *(void *)(a1 + 24) = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v4;
  int v5 = *(_DWORD *)(a1 + 8) - 258;
  int v6 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v6;
  *(void *)(a1 + 56) = 0LL;
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 64));
  sub_189BC(Property, (uint64_t)"couldn't get output data format");
  uint64_t v8 = (os_log_s *)qword_95A50;
  if (os_log_type_enabled((os_log_t)qword_95A50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    int v10 = *(_DWORD *)(a1 + 32);
    int v11 = *(_DWORD *)(a1 + 36);
    int v12 = *(_DWORD *)(a1 + 40);
    int v13 = *(_DWORD *)(a1 + 44);
    int v14 = *(_DWORD *)(a1 + 48);
    int v15 = *(_DWORD *)(a1 + 52);
    int v16 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)std::string buf = 134219776;
    uint64_t v33 = v9;
    __int16 v34 = 1024;
    int v35 = v10;
    __int16 v36 = 1024;
    int v37 = v11;
    __int16 v38 = 1024;
    int v39 = v12;
    __int16 v40 = 1024;
    int v41 = v13;
    __int16 v42 = 1024;
    int v43 = v14;
    __int16 v44 = 1024;
    int v45 = v15;
    __int16 v46 = 1024;
    int v47 = v16;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Decoder intput format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPerPacket = %u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
    uint64_t v8 = (os_log_s *)qword_95A50;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 64);
    int v18 = *(_DWORD *)(a1 + 72);
    int v19 = *(_DWORD *)(a1 + 76);
    int v20 = *(_DWORD *)(a1 + 80);
    int v21 = *(_DWORD *)(a1 + 84);
    int v22 = *(_DWORD *)(a1 + 88);
    int v23 = *(_DWORD *)(a1 + 92);
    int v24 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)std::string buf = 134219776;
    uint64_t v33 = v17;
    __int16 v34 = 1024;
    int v35 = v18;
    __int16 v36 = 1024;
    int v37 = v19;
    __int16 v38 = 1024;
    int v39 = v20;
    __int16 v40 = 1024;
    int v41 = v21;
    __int16 v42 = 1024;
    int v43 = v22;
    __int16 v44 = 1024;
    int v45 = v23;
    __int16 v46 = 1024;
    int v47 = v24;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Decoder output format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPerPacket = %u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
  }

  OSStatus v25 = AudioConverterNew( (const AudioStreamBasicDescription *)(a1 + 24),  (const AudioStreamBasicDescription *)(a1 + 64),  (AudioConverterRef *)(a1 + 16));
  sub_189BC(v25, (uint64_t)"Could not create new audio converter");
  *(_DWORD *)(a1 + 120) = 1;
  int v26 = operator new[](0x10uLL);
  uint64_t v27 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete[](v27);
  }
  *(_DWORD *)(a1 + 112) = 16450;
  uint64_t v28 = operator new[](0x4042uLL);
  float v29 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v28;
  if (v29) {
    operator delete[](v29);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 44);
  return 0LL;
}

uint64_t sub_1BC18(uint64_t a1, int a2, double a3)
{
  *(double *)(a1 + 24) = a3;
  int v5 = (const AudioStreamBasicDescription *)(a1 + 24);
  *(_DWORD *)(a1 + 116) = a2;
  if (*(_BYTE *)(a1 + 161))
  {
    int v6 = (os_log_s *)qword_95A50;
    if (os_log_type_enabled((os_log_t)qword_95A50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "LC3 decoderasym init to AACELD 48K", buf, 2u);
    }

    int v7 = 1633772389;
  }

  else
  {
    int v7 = 1818440480;
  }

  *(_DWORD *)(a1 + 32) = v7;
  if (a3 == 24000.0)
  {
    int v8 = 180;
  }

  else
  {
    if (a3 != 32000.0) {
      goto LABEL_11;
    }
    int v8 = 240;
  }

  *(_DWORD *)(a1 + 44) = v8;
LABEL_11:
  *(_DWORD *)(a1 + 156) = 360;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_65260;
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 64));
  sub_189BC(Property, (uint64_t)"couldn't get output data format");
  int v10 = (os_log_s *)qword_95A50;
  if (os_log_type_enabled((os_log_t)qword_95A50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    int v12 = *(_DWORD *)(a1 + 32);
    int v13 = *(_DWORD *)(a1 + 36);
    int v14 = *(_DWORD *)(a1 + 40);
    int v15 = *(_DWORD *)(a1 + 44);
    int v16 = *(_DWORD *)(a1 + 48);
    int v17 = *(_DWORD *)(a1 + 52);
    int v18 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)std::string buf = 134219776;
    uint64_t v37 = v11;
    __int16 v38 = 1024;
    int v39 = v12;
    __int16 v40 = 1024;
    int v41 = v13;
    __int16 v42 = 1024;
    int v43 = v14;
    __int16 v44 = 1024;
    int v45 = v15;
    __int16 v46 = 1024;
    int v47 = v16;
    __int16 v48 = 1024;
    int v49 = v17;
    __int16 v50 = 1024;
    int v51 = v18;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Decoder input format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPerPacket = % u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
    int v10 = (os_log_s *)qword_95A50;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(a1 + 64);
    int v20 = *(_DWORD *)(a1 + 72);
    int v21 = *(_DWORD *)(a1 + 76);
    int v22 = *(_DWORD *)(a1 + 80);
    int v23 = *(_DWORD *)(a1 + 84);
    int v24 = *(_DWORD *)(a1 + 88);
    int v25 = *(_DWORD *)(a1 + 92);
    int v26 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)std::string buf = 134219776;
    uint64_t v37 = v19;
    __int16 v38 = 1024;
    int v39 = v20;
    __int16 v40 = 1024;
    int v41 = v21;
    __int16 v42 = 1024;
    int v43 = v22;
    __int16 v44 = 1024;
    int v45 = v23;
    __int16 v46 = 1024;
    int v47 = v24;
    __int16 v48 = 1024;
    int v49 = v25;
    __int16 v50 = 1024;
    int v51 = v26;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Decoder output format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPerPacket = %u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
  }

  OSStatus v27 = AudioConverterNew(v5, (const AudioStreamBasicDescription *)(a1 + 64), (AudioConverterRef *)(a1 + 16));
  sub_189BC(v27, (uint64_t)"Could not create new audio converter");
  *(_DWORD *)std::string buf = 1835626096;
  OSStatus v28 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 16), 0x73726361u, 4u, buf);
  sub_189BC(v28, (uint64_t)"Failed to set kAudioConverterSampleRateConverterComplexity");
  *(_DWORD *)std::string buf = 33;
  OSStatus v29 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 16), 0x73726371u, 4u, buf);
  sub_189BC(v29, (uint64_t)"Failed to set kAudioConverterSampleRateConverterQuality");
  *(_DWORD *)(a1 + 120) = 1;
  unsigned int v30 = operator new[](0x10uLL);
  unsigned int v31 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v30;
  if (v31) {
    operator delete[](v31);
  }
  *(_DWORD *)(a1 + 112) = 16450;
  double v32 = operator new[](0x4042uLL);
  uint64_t v33 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v32;
  if (v33) {
    operator delete[](v33);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 44);
  return 0LL;
}

void sub_1BF64(uint64_t a1, unsigned __int8 *a2, BOOL a3, void *a4, unint64_t a5, void *a6)
{
  if (a3) {
    a3 = *a2 != 255;
  }
  sub_41654(a1, (uint64_t)a2, a3, a4, a5, a6);
}

uint64_t sub_1BF7C()
{
  return 1LL;
}

os_log_t sub_1BF84()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A50 = (uint64_t)result;
  return result;
}

uint64_t sub_1BFB0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  uint64_t v10 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v9);
  *(void *)uint64_t v6 = off_820E8;
  *(_BYTE *)(v6 + 176) = 0;
  if (a2 > 0x11 || ((1 << a2) & 0x30018) == 0)
  {
    int v8 = (os_log_s *)qword_95A58;
    if (os_log_type_enabled((os_log_t)qword_95A58, OS_LOG_TYPE_ERROR)) {
      sub_5AA14(a2, v8);
    }
  }

  return a1;
}

void sub_1C060(void *a1)
{
  uint64_t v1 = sub_10384(a1);
  operator delete(v1);
}

uint64_t sub_1C074(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 156) = a2;
  if (a2 == 64000)
  {
    int v3 = 8;
  }

  else
  {
    if (a2 != 48000) {
      goto LABEL_6;
    }
    int v3 = 6;
  }

  *(_DWORD *)(a1 + 31300) = v3;
LABEL_6:
  *(_DWORD *)(a1 + 152) = 10240;
  int v4 = operator new[](0x2800uLL);
  __int128 v5 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v4;
  if (v5) {
    operator delete[](v5);
  }
  if (*(_DWORD *)(a1 + 92))
  {
    unint64_t v6 = 0LL;
    uint64_t v7 = a1 + 180;
    do
    {
      g722_encoder_init(v7, *(_DWORD *)(a1 + 31300));
      ++v6;
      v7 += 200LL;
    }

    while (v6 < *(unsigned int *)(a1 + 92));
  }

  return 0LL;
}

void sub_1C128(uint64_t a1, __int16 *a2, unsigned int a3, uint64_t a4)
{
  __int16 v14 = 0;
  int v6 = *(_DWORD *)(a1 + 92);
  if (v6 == 2)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = a1;
      do
      {
        *(_WORD *)(v8 + 580) = *a2;
        *(_WORD *)(v8 + 10820) = a2[1];
        v8 += 2LL;
        a2 += 2;
        --v7;
      }

      while (v7);
    }

    int v9 = (__int16)a3;
    g722_encode_frame((int16x4_t *)(a1 + 180), (__int16 *)(a1 + 580), (__int16)a3, (_BYTE *)(a1 + 21060), &v14);
    g722_encode_frame((int16x4_t *)(a1 + 380), (__int16 *)(a1 + 10820), v9, (_BYTE *)(a1 + 26180), &v14);
    __int16 v10 = v14;
    if (v14 >= 1)
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      do
      {
        *(_BYTE *)(*(void *)(a1 + 144) + v12) = *(_BYTE *)(a1 + 21060 + v11);
        uint64_t v13 = *(void *)(a1 + 144) + v12;
        v12 += 2LL;
        *(_BYTE *)(v13 + 1) = *(_BYTE *)(a1 + 26180 + v11++);
      }

      while (v11 < v14);
      __int16 v10 = v14;
    }
  }

  else
  {
    g722_encode_frame((int16x4_t *)(a1 + 180), a2, (__int16)a3, *(_BYTE **)(a1 + 144), &v14);
    __int16 v10 = v14;
  }

  if (*(_BYTE *)(a1 + 177))
  {
    sub_1097C(a1, v10, 0);
    __int16 v10 = v14;
  }

  *(_DWORD *)a4 = 1;
  *(void *)(a4 + 16) = *(void *)(a1 + 144);
  *(_DWORD *)(a4 + 8) = 1;
  *(_DWORD *)(a4 + 12) = v6 * v10;
}

os_log_t sub_1C288()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A58 = (uint64_t)result;
  return result;
}

os_log_t *sub_1C2B4(os_log_t *a1)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = os_log_create("com.apple.bluetooth", "BTAudio");
  return a1;
}

uint64_t sub_1C2F0(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  size_t v6 = (strlen(off_8AA60) & 0xFFFFFFFFFFFFFFF8LL) + 56;
  unint64_t v7 = a3 - v6;
  if (a3 < v6 || v7 < 2) {
    return 0LL;
  }
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (char *)a2 + v6;
  *a2 = v7;
  a2[1] = 0LL;
  a2[2] = 0LL;
  unint64_t v8 = atomic_load(a2 + 3);
  int v9 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v10 = __ldaxr(v9);
  while (__stlxr(v10 - v8, v9));
  uint64_t v11 = *(void *)(a1 + 8);
  *(_BYTE *)(v11 + 40) = 0;
  atomic_store(0LL, (unint64_t *)(v11 + 32));
  strlcpy((char *)(*(void *)(a1 + 8) + 41LL), off_8AA60, a3 - 41);
  return 1LL;
}

size_t sub_1C3A4()
{
  return (strlen(off_8AA60) & 0xFFFFFFFFFFFFFFF8LL) + 56;
}

uint64_t sub_1C3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 + a3;
}

uint64_t sub_1C3D0(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 8);
  v1[1] = 0LL;
  v1[2] = 0LL;
  unint64_t v2 = atomic_load(v1 + 3);
  int v3 = (unint64_t *)(*(void *)(result + 8) + 24LL);
  do
    unint64_t v4 = __ldaxr(v3);
  while (__stlxr(v4 - v2, v3));
  uint64_t v5 = *(void *)(result + 8);
  *(_BYTE *)(v5 + 40) = 0;
  atomic_store(0LL, (unint64_t *)(v5 + 32));
  return result;
}

BOOL sub_1C410(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a2;
  int v3 = off_8AA60;
  *(void *)(a1 + 16) = a2 + (strlen(off_8AA60) & 0xFFFFFFFFFFFFFFF8LL) + 56;
  size_t v4 = strlen(v3);
  return strncmp((const char *)(a2 + 41), v3, v4) == 0;
}

uint64_t sub_1C480(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  return result;
}

uint64_t sub_1C488(uint64_t result, uint64_t a2)
{
  unint64_t v2 = (unint64_t *)(*(void *)(result + 8) + 24LL);
  do
    unint64_t v3 = __ldaxr(v2);
  while (__stlxr(v3 - a2, v2));
  return result;
}

unint64_t sub_1C4A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return atomic_load((unint64_t *)(v1 + 24));
  }
  else {
    return 0LL;
  }
}

unint64_t sub_1C4C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 40)) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
    *(void *)(v1 + 8) = 0LL;
    *(void *)(v1 + 16) = 0LL;
    unint64_t v2 = atomic_load((unint64_t *)(v1 + 24));
    unint64_t v3 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
    do
      unint64_t v4 = __ldaxr(v3);
    while (__stlxr(v4 - v2, v3));
    uint64_t v5 = *(void *)(a1 + 8);
    *(_BYTE *)(v5 + 40) = 0;
    atomic_store(0LL, (unint64_t *)(v5 + 32));
    uint64_t v1 = *(void *)(a1 + 8);
    if (v1) {
      return atomic_load((unint64_t *)(v1 + 24));
    }
  }

  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_5AA88();
  }

  return 0LL;
}

void *sub_1C558(uint64_t a1, char *__dst, size_t a3)
{
  uint64_t v5 = *(size_t **)(a1 + 8);
  size_t v6 = v5[1];
  size_t v7 = *v5;
  size_t v8 = v6 + a3;
  size_t v9 = *v5 - v6;
  if (a3 - v9 >= v6) {
    size_t v10 = v6;
  }
  else {
    size_t v10 = a3 - v9;
  }
  if (v8 >= v7) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = a3;
  }
  os_log_t result = memcpy(__dst, (const void *)(v6 + *(void *)(a1 + 16)), v11);
  if (v8 >= v7 && v10 != 0) {
    os_log_t result = memcpy(&__dst[v11], *(const void **)(a1 + 16), v10);
  }
  if (v8 >= v7) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v8;
  }
  *(void *)(*(void *)(a1 + 8) + 8LL) = v14;
  return result;
}

uint64_t sub_1C5F0(uint64_t result, uint64_t a2)
{
  return result;
}

unint64_t sub_1C610(uint64_t a1, char *a2, size_t *a3, size_t a4)
{
  uint64_t v6 = a1 + 8;
  uint64_t v5 = *(void **)(a1 + 8);
  if ((unint64_t)(v5[1] + 2LL) > *v5)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_5AAB4();
    }
    return 0LL;
  }

  uint64_t v7 = v5[1];
  size_t v8 = *(unsigned __int16 *)(v7 + *(void *)(a1 + 16));
  if (!*(_WORD *)(v7 + *(void *)(a1 + 16))) {
    return 0LL;
  }
  if (v8 >= a4) {
    size_t v8 = a4;
  }
  *a3 = v8;
  size_t v10 = v8 & 1;
  unint64_t v11 = v8 + v10 + 2;
  unint64_t v12 = atomic_load(v5 + 3);
  if (v11 > v12)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
      sub_5AAE0((uint64_t)a3, v6);
    }
    return 0LL;
  }

  size_t v14 = *(void **)(a1 + 8);
  v14[1] += 2LL;
  v14[1] %= *v14;
  sub_1C558(a1, a2, *a3);
  int v15 = *(void **)(a1 + 8);
  if (v10) {
    v15[1] = (unint64_t)(v15[1] + 1LL) % *v15;
  }
  int v16 = v15 + 4;
  do
    unint64_t v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  return v11;
}

uint64_t sub_1C74C(uint64_t a1, char a2)
{
  return a2 & 1;
}

size_t sub_1C754(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = sub_1C4C0(a1);
  if (!v6) {
    return 0LL;
  }
  if (v6 < a3) {
    a3 = v6;
  }
  sub_1C558(a1, a2, a3);
  uint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 - a3, v7));
  return a3;
}

unint64_t sub_1C7C4(uint64_t a1, char *a2, size_t a3)
{
  unint64_t result = sub_1C4C0(a1);
  if (result)
  {
    size_t v9 = 0LL;
    unint64_t result = sub_1C610(a1, a2, &v9, a3);
    if (result)
    {
      uint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - result, v7));
      return v9;
    }
  }

  return result;
}

BOOL sub_1C838(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  unint64_t v14 = sub_1C4C0(a1);
  if (v14)
  {
    unint64_t v15 = sub_1C610(a1, a2, a3, a4);
    unint64_t v16 = sub_1C610(a1, a5, a6, a7);
    unint64_t v17 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
    do
      unint64_t v18 = __ldaxr(v17);
    while (__stlxr(v18 - (v16 + v15), v17));
  }

  return v14 != 0;
}

uint64_t sub_1C8E0(uint64_t result)
{
  uint64_t v1 = *(unint64_t **)(result + 8);
  unint64_t v2 = v1[1];
  unint64_t v3 = *v1;
  unint64_t v4 = atomic_load(v1 + 3);
  uint64_t v5 = *(void *)(result + 8);
  *(void *)(v5 + 8) = (v4 + v2) % v3;
  unint64_t v6 = (unint64_t *)(v5 + 24);
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 - v4, v6));
  atomic_store(0LL, (unint64_t *)(*(void *)(result + 8) + 32LL));
  return result;
}

BOOL sub_1C928(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1 + 8;
  unint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    if (*((_BYTE *)v2 + 40)) {
      return 0LL;
    }
    uint64_t v5 = *v2;
    unint64_t v6 = atomic_load((unint64_t *)v2 + 3);
    if (v5 + ~v6 >= a2)
    {
      return 1LL;
    }

    else
    {
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
        sub_5AB88(v3);
      }
      BOOL result = 0LL;
      *(_BYTE *)(*(void *)v3 + 40LL) = 1;
    }
  }

  else
  {
    BOOL result = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_5AB5C();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1C9E0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *v1;
  unint64_t v3 = atomic_load(v1 + 3);
  return v2 + ~v3;
}

void sub_1C9F8(uint64_t a1, __int16 a2)
{
  uint64_t v2 = *(unint64_t **)(a1 + 8);
  unint64_t v3 = v2[2];
  unint64_t v4 = *v2;
  if (v3 + 2 <= *v2)
  {
    *(_WORD *)(v3 + *(void *)(a1 + 16)) = a2;
    _DWORD v2[2] = (v3 + 2) % v4;
  }

  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_5AC04();
  }

void *sub_1CA5C(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6 = *(size_t **)(a1 + 8);
  size_t v7 = v6[2];
  size_t v8 = *v6;
  size_t v9 = v7 + a3;
  size_t v10 = *v6 - v7;
  size_t v11 = a3 - v10;
  if (v7 + a3 >= *v6) {
    size_t v12 = *v6 - v7;
  }
  else {
    size_t v12 = a3;
  }
  BOOL result = memcpy((void *)(v7 + *(void *)(a1 + 16)), a2, v12);
  if (v9 >= v8 && a3 != v10) {
    BOOL result = memcpy(*(void **)(a1 + 16), &a2[v12], v11);
  }
  if (v9 >= v8) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v9;
  }
  *(void *)(*(void *)(a1 + 8) + 16LL) = v15;
  return result;
}

uint64_t sub_1CAF4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 8);
  v2[2] += a2;
  v2[2] %= *v2;
  return result;
}

void sub_1CB1C(uint64_t a1, char **a2, size_t *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  {
    size_t v12 = *a2++;
    size_t v11 = v12;
    size_t v13 = *a3++;
    sub_1CA5C(a1, v11, v13);
  }

  unint64_t v14 = *(void **)(a1 + 8);
  if (a6)
  {
    v14[2] += a6;
    v14[2] %= *v14;
  }

  size_t v15 = v14 + 4;
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
}

size_t sub_1CBB8(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3 = a3;
  if (!sub_1C928(a1, a3)) {
    return 0LL;
  }
  sub_1CA5C(a1, a2, v3);
  unint64_t v6 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v7 = __ldaxr(v6);
  while (__stlxr(v7 + v3, v6));
  return v3;
}

uint64_t sub_1CC24(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (unint64_t *)(*(void *)(result + 8) + 24LL);
  do
    unint64_t v3 = __ldaxr(v2);
  while (__stlxr(v3 + a2, v2));
  return result;
}

unint64_t sub_1CC40(uint64_t a1, char *a2, size_t a3)
{
  __int16 v3 = a3;
  size_t v10 = a3;
  size_t v11 = a2;
  uint64_t v5 = a3 & 1;
  unint64_t v6 = a3 + v5 + 2;
  if (!sub_1C928(a1, v6)) {
    return 0LL;
  }
  sub_1CB1C(a1, &v11, &v10, 1LL, v3, v5);
  unint64_t v7 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v8 = __ldaxr(v7);
  while (__stlxr(v8 + v6, v7));
  return v6;
}

unint64_t sub_1CCCC(uint64_t a1, char **a2, size_t *a3, uint64_t a4, uint64_t a5)
{
  __int16 v5 = a5;
  uint64_t v10 = a5 & 1;
  unint64_t v11 = a5 + v10 + 2;
  if (!sub_1C928(a1, v11)) {
    return 0LL;
  }
  sub_1CB1C(a1, a2, a3, a4, v5, v10);
  size_t v12 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
  do
    unint64_t v13 = __ldaxr(v12);
  while (__stlxr(v13 + v11, v12));
  return v11;
}

BOOL sub_1CD68(uint64_t a1, char *a2, size_t a3, char *a4, size_t a5)
{
  __int16 v5 = a5;
  __int16 v6 = a3;
  size_t v17 = a3;
  unint64_t v18 = a2;
  size_t v15 = a5;
  unint64_t v16 = a4;
  uint64_t v8 = a3 & 1;
  uint64_t v9 = a5 & 1;
  unint64_t v10 = a3 + a5 + v8 + v9 + 4;
  BOOL v11 = sub_1C928(a1, v10);
  if (v11)
  {
    sub_1CB1C(a1, &v18, &v17, 1LL, v6, v8);
    sub_1CB1C(a1, &v16, &v15, 1LL, v5, v9);
    size_t v12 = (unint64_t *)(*(void *)(a1 + 8) + 24LL);
    do
      unint64_t v13 = __ldaxr(v12);
    while (__stlxr(v13 + v10, v12));
  }

  return v11;
}

unint64_t sub_1CE30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return atomic_load((unint64_t *)(v1 + 32));
  }
  else {
    return 0LL;
  }
}

void sub_1CE4C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1CE74(uint64_t a1, int a2, uint64_t a3, char a4)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v7[0] = *(_OWORD *)a3;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v7);
  *(void *)uint64_t v6 = off_82140;
  *(_BYTE *)(v6 + 209) = 0;
  *(_BYTE *)(v6 + 176) = 1;
  *(_BYTE *)(v6 + 208) = a4;
  *(void *)(v6 + 56) = 0LL;
}

void *sub_1CED0(void *a1)
{
  *a1 = off_82140;
  uint64_t v2 = (OpaqueAudioConverter *)a1[7];
  if (v2)
  {
    AudioConverterDispose(v2);
  }

  else
  {
    __int16 v3 = (os_log_s *)qword_95A60;
    if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_ERROR)) {
      sub_5AC30(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  return sub_10384(a1);
}

void sub_1CF3C(void *a1)
{
  uint64_t v1 = sub_1CED0(a1);
  operator delete(v1);
}

uint64_t sub_1CF50(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = (const AudioStreamBasicDescription *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 92);
  int v56 = 96;
  *(_DWORD *)(a1 + 156) = a2;
  int v6 = *(_DWORD *)(a1 + 52);
  if (v6 <= 14)
  {
    switch(v6)
    {
      case 2:
        int v56 = 32;
        *(void *)(a1 + 184) = a3;
        *(void *)(a1 + 200) = 0LL;
        int v7 = 1633772320;
        int v8 = 1024;
        goto LABEL_31;
      case 5:
        int v7 = 1633772389;
        if (a3 == 60)
        {
          *(void *)(a1 + 184) = 177LL;
          uint64_t v9 = 90LL;
          goto LABEL_25;
        }

        if (a3 == 56)
        {
          *(void *)(a1 + 184) = 165LL;
          uint64_t v9 = 168LL;
          goto LABEL_25;
        }

LABEL_12:
        if (a3 == 40)
        {
          *(void *)(a1 + 184) = 156LL;
          uint64_t v9 = 160LL;
          goto LABEL_25;
        }

        goto LABEL_30;
      case 6:
        int v7 = 1633772389;
        if (a3 != 60) {
          goto LABEL_12;
        }
        *(void *)(a1 + 184) = 236LL;
        uint64_t v9 = 240LL;
        goto LABEL_25;
      case 7:
        int v7 = 1633772389;
        switch(a3)
        {
          case '<':
            *(void *)(a1 + 184) = 118LL;
            uint64_t v10 = 120LL;
            break;
          case '8':
            *(void *)(a1 + 184) = 110LL;
            uint64_t v10 = 112LL;
            break;
          case '(':
            *(void *)(a1 + 184) = 78LL;
            uint64_t v10 = 80LL;
            break;
          default:
            goto LABEL_29;
        }

        *(void *)(a1 + 200) = v10;
LABEL_29:
        int v5 = 1;
        break;
      default:
        goto LABEL_20;
    }

    goto LABEL_30;
  }

  switch(v6)
  {
    case 15:
      int v7 = 1633772389;
      *(void *)(a1 + 184) = 88LL;
      uint64_t v9 = 180LL;
LABEL_25:
      *(void *)(a1 + 200) = v9;
      goto LABEL_30;
    case 510:
      int v7 = 1633772389;
      *(void *)(a1 + 184) = a3;
      *(void *)(a1 + 200) = 0LL;
      int v8 = 180;
      break;
    case 33023:
      int v7 = 1633772389;
      int v56 = 64;
      *(void *)(a1 + 184) = a3;
      *(void *)(a1 + 200) = 0LL;
LABEL_30:
      int v8 = 480;
      break;
    default:
LABEL_20:
      BOOL v11 = (os_log_s *)qword_95A60;
      if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_ERROR)) {
        sub_5AE74(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      int v7 = 0;
      int v8 = 0;
      break;
  }

        LOBYTE(result) = 0;
        return result;
      }

      if (v4 == 1651271025) {
        goto LABEL_158;
      }
      if (v4 != 1651466595)
      {
        uint64_t v10 = 1651466852;
        goto LABEL_157;
      }

    *(_DWORD *)(a1 + 22) = 0;
    *(void *)(a1 + 14) = 0LL;
    return result;
  }

  if (a3) {
    goto LABEL_12;
  }
  __int16 v3 = (a2 >> 15) & 1;
  uint64_t v4 = (int8x8_t)vceq_s16( vdup_n_s16(v3),  (int16x4_t)(*(void *)&vshr_n_u16(*(uint16x4_t *)(a1 + 26), 0xAuLL) & 0xFFC1FFC1FFC1FFC1LL));
  BOOL result = vadd_s16( vadd_s16( vsub_s16(*(int16x4_t *)(a1 + 14), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(a1 + 14), 8uLL)),  (int16x4_t)(*(void *)&vshr_n_u16(*(uint16x4_t *)(a1 + 14), 7uLL) & 0xFF00FF00FF00FF00LL)),  (int16x4_t)vorr_s8( vand_s8(v4, (int8x8_t)0x80008000800080LL),  (int8x8_t)(*(void *)&vmvn_s8(v4) & 0xFF80FF80FF80FF80LL)));
  *(int16x4_t *)(a1 + 14) = result;
  else {
    int v6 = -128;
  }
  *(_WORD *)(a1 + 22) = *(_WORD *)(a1 + 22) - HIBYTE(*(_WORD *)(a1 + 22)) + ((*(_WORD *)(a1 + 22) >> 7) & 0x100) + v6;
  else {
    int v7 = -128;
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) - HIBYTE(*(_WORD *)(a1 + 24)) + ((*(_WORD *)(a1 + 24) >> 7) & 0x100) + v7;
  return result;
}

LABEL_31:
  *(void *)(a1 + 104) = *(void *)(a1 + 64);
  *(void *)(a1 + 192) = 8LL * *(void *)(a1 + 184);
  *(_DWORD *)(a1 + 112) = v7;
  *(void *)(a1 + 116) = 0LL;
  *(_DWORD *)(a1 + 124) = v8;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 132) = v5;
  *(void *)(a1 + 136) = 0LL;
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 104));
  sub_189BC(Property, (uint64_t)"couldn't create output data format");
  if (*(_BYTE *)(a1 + 48) && os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEBUG)) {
    sub_5AE10();
  }
  int v20 = (AudioConverterRef *)(a1 + 56);
  OSStatus v21 = AudioConverterNew(v4, (const AudioStreamBasicDescription *)(a1 + 104), (AudioConverterRef *)(a1 + 56));
  sub_189BC(v21, (uint64_t)"Could not create new audio converter");
  if (*(_DWORD *)(a1 + 120))
  {
    *(_DWORD *)(a1 + 160) = 6;
    *(_DWORD *)(a1 + 152) = 10240;
    int v22 = operator new[](0x2800uLL);
    int v23 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v22;
    if (v23) {
      operator delete[](v23);
    }
    int v24 = operator new[](0x10uLL);
    int v25 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v24;
    if (v25)
    {
      operator delete[](v25);
      int v24 = *(_DWORD **)(a1 + 168);
    }

    *(void *)int v24 = 0LL;
    v24[2] = 0;
    v24[3] = *(_DWORD *)(a1 + 152);
  }

  else
  {
    unsigned int outPropertyData = 0;
    UInt32 ioPropertyDataSize = 4;
    int v53 = 3;
    if (*(_BYTE *)(a1 + 208))
    {
      uint64_t v26 = *(unsigned int *)(a1 + 156);
      int inPropertyData = *(_DWORD *)(a1 + 156);
      int v53 = 0;
      if (*(_BYTE *)(a1 + 48))
      {
        OSStatus v27 = (os_log_s *)qword_95A60;
        if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEBUG)) {
          sub_5ADAC(v26, v27, v28, v29, v30, v31, v32, v33);
        }
      }

      OSStatus v34 = AudioConverterSetProperty(*v20, 0x62726174u, 4u, &inPropertyData);
      sub_189BC(v34, (uint64_t)"Failed to set target data rate");
      OSStatus v35 = AudioConverterGetProperty(*v20, 0x62726174u, &ioPropertyDataSize, &inPropertyData);
      sub_189BC(v35, (uint64_t)"Failed to set target data rate");
      if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEBUG)) {
        sub_5AD48();
      }
      OSStatus v36 = AudioConverterGetProperty(*v20, 0x70616B62u, &ioPropertyDataSize, &outPropertyData);
      sub_189BC(v36, (uint64_t)"Failed to get kAudioCodecPropertyMaximumPacketByteSize");
    }

    else
    {
      OSStatus v37 = AudioConverterGetProperty( *(AudioConverterRef *)(a1 + 56),  0x70616B62u,  &ioPropertyDataSize,  &outPropertyData);
      sub_189BC(v37, (uint64_t)"Failed to get kAudioCodecPropertyMaximumPacketByteSize");
      if (*(_BYTE *)(a1 + 48) && os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEBUG)) {
        sub_5ACE4();
      }
    }

    OSStatus v38 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x63647175u, 4u, &v56);
    sub_189BC(v38, (uint64_t)"Failed to set kAudioConverterCodecQuality");
    OSStatus v39 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x61636266u, 4u, &v53);
    sub_189BC(v39, (uint64_t)"Failed to set kAudioCodecPropertyBitRateControlMode");
    int inPropertyData = 256;
    OSStatus v40 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x70616B6Du, 4u, &inPropertyData);
    sub_189BC(v40, (uint64_t)"Failed to set kAudioCodecPrivatePropertyMinimumPacketBitSize");
    unsigned int v41 = 20480 * v5 * *(_DWORD *)(a1 + 88);
    unsigned int v42 = outPropertyData;
    unsigned int v43 = vcvtps_u32_f32((float)v41 / (float)outPropertyData);
    *(_DWORD *)(a1 + 160) = v43;
    size_t v44 = v42 * v43;
    *(_DWORD *)(a1 + 152) = v44;
    int v45 = operator new[](v44);
    __int16 v46 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v45;
    if (v46)
    {
      operator delete[](v46);
      unsigned int v42 = outPropertyData;
    }

    unsigned int v51 = *(_DWORD *)(a1 + 192);
    UInt32 ioPropertyDataSize = 4;
    if (8 * v42 < v51) {
      unsigned int v51 = 8 * v42;
    }
    if (!*(_BYTE *)(a1 + 208))
    {
      OSStatus v47 = AudioConverterSetProperty(*v20, 0x70616B6Cu, 4u, &v51);
      sub_189BC(v47, (uint64_t)"Failed to set kAudioCodecPropertyPacketSizeLimitForVBR");
    }

    __int16 v48 = operator new[](16LL * *(unsigned int *)(a1 + 160));
    int v49 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v48;
    if (v49) {
      operator delete[](v49);
    }
  }

  if (*(_BYTE *)(a1 + 48) && os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEBUG)) {
    sub_5AC60();
  }
  return 0LL;
}
}

    qword_962C0 = v43;
    unsigned int v42 = &dword_962C8;
    unsigned int v41 = 3;
    goto LABEL_32;
  }

  if (v6 == 80)
  {
    unsigned int v43 = 0x400000004LL;
    goto LABEL_31;
  }

  if (v6 == 90)
  {
    qword_962C0 = 0x300000002LL;
    dword_962C8 = 3;
    unsigned int v42 = &dword_962CC;
    unsigned int v41 = 4;
    goto LABEL_32;
  }

  if (v6 != 120)
  {
LABEL_34:
    imdct_destroy((uint64_t)v2);
    return 0LL;
  }

  qword_962C0 = 0x300000002LL;
  unsigned int v41 = 4;
  dword_962C8 = 4;
  unsigned int v42 = &dword_962CC;
LABEL_32:
  *unsigned int v42 = 5;
  *((void *)v2 + 11) = hfft_create((int *)&qword_962C0, v41);
  return v2;
}

void sub_1D510(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, UInt32 a5)
{
  uint64_t v5 = a1;
  int v6 = 0;
  uint64_t v7 = 0LL;
  int v40 = 0;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v47 = 0u;
  memset(&outOutputData, 0, sizeof(outOutputData));
  inInputDataProcUserData[0] = a2;
  UInt32 ioOutputDataPacketSize = *(_DWORD *)(a1 + 160);
  inInputDataProcUserData[1] = *(unsigned int *)(a1 + 80) * (unint64_t)a3;
  __int128 v8 = *(_OWORD *)(a1 + 80);
  __int128 v44 = *(_OWORD *)(a1 + 64);
  __int128 v45 = v8;
  uint64_t v46 = *(void *)(a1 + 96);
  *a4 = 0;
  while (1)
  {
    unsigned int v9 = *(_DWORD *)(v5 + 152);
    UInt32 v10 = *(_DWORD *)(v5 + 132);
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = v10;
    outOutputData.mBuffers[0].mDataByteSize = v9 - v7;
    outOutputData.mBuffers[0].mData = (void *)(*(void *)(v5 + 144) + v7);
    if (*(_BYTE *)(v5 + 209))
    {
      BOOL v11 = (os_log_s *)qword_95A60;
      if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)unsigned int v51 = ioOutputDataPacketSize;
        *(_WORD *)&v51[4] = 2048;
        *(void *)&v51[6] = v7;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "AACEncoder ->c io:%u, offset %llu", buf, 0x12u);
      }
    }

    OSStatus v12 = AudioConverterFillComplexBuffer( *(AudioConverterRef *)(v5 + 56),  (AudioConverterComplexInputDataProc)sub_188A8,  inInputDataProcUserData,  &ioOutputDataPacketSize,  &outOutputData,  *(AudioStreamPacketDescription **)(v5 + 168));
    sub_189BC(v12, (uint64_t)"Encoder AudioConverterFillComplexBuffer failed");
    if (*(_BYTE *)(v5 + 209))
    {
      uint64_t v13 = (os_log_s *)qword_95A60;
      if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)unsigned int v51 = ioOutputDataPacketSize;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "AACEncoder c-> io:%u", buf, 8u);
      }
    }

    uint64_t v14 = ioOutputDataPacketSize;
    if (!ioOutputDataPacketSize) {
      return;
    }
    if (ioOutputDataPacketSize > a5)
    {
      if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_ERROR)) {
        sub_5AEA4();
      }
      *a4 = 0;
      return;
    }

    uint64_t v15 = 0LL;
    unint64_t v16 = 0LL;
    int v37 = v6 + 1;
    uint64_t v17 = *(void *)(v5 + 144) + v7;
    do
    {
      uint64_t v18 = (unsigned __int8 *)(v17 + *(void *)(*(void *)(v5 + 168) + v15));
      uint64_t v19 = &a4[4 * (v40 + v16)];
      *((void *)v19 + 2) = v18;
      int v20 = (uint64_t *)(*(void *)(v5 + 168) + v15);
      uint64_t v21 = *((unsigned int *)v20 + 3);
      v19[2] = 1;
      v19[3] = v21;
      ++*a4;
      if (*(_BYTE *)(v5 + 209))
      {
        int v22 = (os_log_s *)qword_95A60;
        uint64_t v23 = v7;
        uint64_t v24 = v17;
        uint64_t v25 = v14;
        BOOL v26 = os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_DEFAULT);
        uint64_t v14 = v25;
        uint64_t v17 = v24;
        uint64_t v7 = v23;
        if (v26)
        {
          uint64_t v27 = *v20;
          int v28 = *v18;
          int v29 = v18[1];
          int v30 = v18[2];
          int v31 = v18[3];
          *(_DWORD *)std::string buf = 134220032;
          *(void *)unsigned int v51 = v17;
          *(_WORD *)&v51[8] = 1024;
          *(_DWORD *)&v51[10] = v16;
          __int16 v52 = 1024;
          int v53 = v40 + v16;
          __int16 v54 = 2048;
          uint64_t v55 = v27;
          __int16 v56 = 1024;
          int v57 = v21;
          __int16 v58 = 1024;
          int v59 = v28;
          __int16 v60 = 1024;
          int v61 = v29;
          __int16 v62 = 1024;
          int v63 = v30;
          __int16 v64 = 1024;
          int v65 = v31;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "AACEncoder c->%p,%d,%u,%lld,%u,%02x,%02x,%02x,%02x",  buf,  0x40u);
          uint64_t v14 = ioOutputDataPacketSize;
        }
      }

      v7 += v21;
      ++v16;
      v15 += 16LL;
      uint64_t v5 = a1;
    }

    while (v16 < v14);
    int v6 = v37;
    if ((_DWORD)v14 && *(_BYTE *)(a1 + 177))
    {
      UInt32 v32 = 0;
      uint64_t v33 = (int *)(*(void *)(a1 + 168) + 12LL);
      uint64_t v34 = v14;
      do
      {
        int v35 = *v33;
        v33 += 4;
        v32 += v35;
        --v34;
      }

      while (v34);
      sub_1097C(a1, v32, v14);
    }

    v40 += v16;
    if (v37 == 10) {
      return;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_95A60, OS_LOG_TYPE_ERROR)) {
    sub_5AF0C();
  }
}

uint64_t sub_1D90C()
{
  return 1LL;
}

uint64_t sub_1D914()
{
  return 1LL;
}

void sub_1D91C(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

os_log_t sub_1D94C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A60 = (uint64_t)result;
  return result;
}

void sub_1D978(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v5);
  *(void *)uint64_t v4 = off_82198;
  *(_BYTE *)(v4 + 176) = 1;
}

void sub_1D9C0(void *a1)
{
  uint64_t v1 = sub_10384(a1);
  operator delete(v1);
}

uint64_t sub_1D9D4(uint64_t a1, int a2)
{
  *(void *)(a1 + 104) = 0x40BF400000000000LL;
  uint64_t v3 = a1 + 104;
  *(_DWORD *)(a1 + 156) = a2;
  *(void *)(a1 + 112) = 1634492791LL;
  uint64_t v4 = (const AudioStreamBasicDescription *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 120) = v5;
  *(_DWORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = v5;
  *(_DWORD *)(a1 + 132) = v5;
  *(void *)(a1 + 136) = 8LL;
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 104));
  sub_189BC(Property, (uint64_t)"couldn't create output data format");
  OSStatus v7 = AudioConverterNew(v4, (const AudioStreamBasicDescription *)v3, (AudioConverterRef *)(v3 - 48));
  sub_189BC(v7, (uint64_t)"Could not create new audio converter");
  *(_DWORD *)(v3 + 48) = 4096;
  __int128 v8 = operator new[](0x1000uLL);
  unsigned int v9 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v8;
  if (v9) {
    operator delete[](v9);
  }
  UInt32 v10 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0LL;
  if (v10) {
    operator delete[](v10);
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a1 + 152) / *(_DWORD *)(a1 + 120);
  return 0LL;
}

void sub_1DAD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v19 = 0u;
  *(void *)&outOutputData.mNumberBuffers = 0LL;
  UInt32 v6 = *(_DWORD *)(a1 + 152);
  outOutputData.mBuffers[0].mNumberChannels = *(_DWORD *)(a1 + 92);
  outOutputData.mBuffers[0].UInt32 mDataByteSize = v6;
  outOutputData.mBuffers[0].mData = *(void **)(a1 + 144);
  inInputDataProcUserData[0] = a2;
  UInt32 ioOutputDataPacketSize = *(_DWORD *)(a1 + 160);
  outOutputData.mNumberBuffers = 1;
  inInputDataProcUserData[1] = (*(_DWORD *)(a1 + 80) * a3);
  __int128 v7 = *(_OWORD *)(a1 + 64);
  __int128 v8 = *(_OWORD *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 96);
  __int128 v17 = v8;
  __int128 v16 = v7;
  OSStatus v9 = AudioConverterFillComplexBuffer( *(AudioConverterRef *)(a1 + 56),  (AudioConverterComplexInputDataProc)sub_188A8,  inInputDataProcUserData,  &ioOutputDataPacketSize,  &outOutputData,  0LL);
  sub_189BC(v9, (uint64_t)"AudioConverterFillComplexBuffer failed");
  UInt32 v10 = ioOutputDataPacketSize;
  if (*(_BYTE *)(a1 + 177) && ioOutputDataPacketSize)
  {
    sub_1097C(a1, *(_DWORD *)(a4 + 12), ioOutputDataPacketSize);
    UInt32 v10 = ioOutputDataPacketSize;
  }

  int v11 = 0;
  if (v10)
  {
    UInt32 mDataByteSize = outOutputData.mBuffers[0].mDataByteSize;
    if (outOutputData.mBuffers[0].mDataByteSize)
    {
      *(void *)(a4 + 16) = *(void *)(a1 + 144);
      *(_DWORD *)(a4 + 8) = outOutputData.mBuffers[0].mNumberChannels;
      *(_DWORD *)(a4 + 12) = mDataByteSize;
      int v11 = 1;
    }
  }

  *(_DWORD *)a4 = v11;
}

os_log_t sub_1DBC0()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A68 = (uint64_t)result;
  return result;
}

os_log_t sub_1E0B4()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A70 = (uint64_t)result;
  return result;
}

void sub_1E7CC(_Unwind_Exception *a1)
{
}

void sub_1E7E8(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(*(void *)(a1 + 32) + 20LL));
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Spatial Client, Proc Exit handler Fired", v5, 2u);
    }

    sub_1E894(v3[1156], *(_DWORD *)(a1 + 48));
    sub_1EA30((void *)v3[1156], 1LL);
  }

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

uint64_t sub_1E894(uint64_t a1, int a2)
{
  int v13 = a2;
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_52B28((uint64_t)v12, a1 + 408);
  uint64_t v4 = *(void *)(a1 + 392);
  if (v4)
  {
    uint64_t v5 = a1 + 392;
    do
    {
      int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        __int128 v8 = (uint64_t *)v4;
      }
      else {
        __int128 v8 = (uint64_t *)(v4 + 8);
      }
      if (!v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 392 && *(_DWORD *)(v5 + 32) <= a2)
    {
      *(void *)std::string buf = &v13;
      objc_msgSend(sub_2990C((uint64_t **)(a1 + 384), &v13, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5], "cancelExitHandler");
      *(void *)std::string buf = &v13;

      sub_299CC(a1 + 384, &v13);
      OSStatus v9 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 400);
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v13;
        __int16 v15 = 1024;
        int v16 = v10;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "Released client info for PID %d Pending Clients %d", buf, 0xEu);
      }
    }
  }

  return sub_52C5C(v12);
}

void sub_1EA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1EA30(void *a1, uint64_t a2)
{
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_52B28((uint64_t)v22, (uint64_t)(a1 + 51));
  uint64_t v4 = (void *)a1[48];
  if (v4 == a1 + 49)
  {
    int v6 = 0;
    id v5 = 0LL;
  }

  else
  {
    id v5 = 0LL;
    int v6 = 0;
    do
    {
      id v7 = [(id)v4[5] HighestQualityFormat];
      int v9 = BYTE1(v6);
      else {
        int v10 = v6;
      }
      else {
        id v11 = v5;
      }
      else {
        int v12 = v6;
      }
      else {
        id v13 = v5;
      }
      if (v8 - 1 <= 1)
      {
        id v14 = v13;
      }

      else
      {
        int v12 = v10;
        id v14 = v11;
      }

      if (BYTE1(v6) == BYTE1(v8)) {
        int v15 = v12;
      }
      else {
        int v15 = v6;
      }
      if (BYTE1(v6) == BYTE1(v8)) {
        id v16 = v14;
      }
      else {
        id v16 = v5;
      }
      if (BYTE1(v6) < BYTE1(v8))
      {
        int v15 = v8;
        id v16 = v7;
      }

      if (BYTE1(v6)) {
        int v6 = v15;
      }
      else {
        int v6 = v8;
      }
      if (v9) {
        id v5 = v16;
      }
      else {
        id v5 = v7;
      }
      __int128 v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          __int128 v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v4[2];
          BOOL v19 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }

        while (!v19);
      }

      uint64_t v4 = v18;
    }

    while (v18 != a1 + 49);
  }

  sub_52BF4((uint64_t)v22);
  a1[44] = v5;
  *((_DWORD *)a1 + 90) = v6;
  __int128 v20 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67110144;
    int v24 = BYTE1(v6);
    __int16 v25 = 1024;
    int v26 = v6;
    __int16 v27 = 1024;
    int v28 = 1;
    __int16 v29 = 1024;
    int v30 = 1;
    __int16 v31 = 1024;
    int v32 = a2;
    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "Updated Best Possible Stream info, Channels = %d Spatial Status = %d Mode = %d Head Tracking = %d delaySpatialUIUpdate = %d",  buf,  0x20u);
  }

  (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a1 + 592LL))(*a1, a2, 200LL);
  return sub_52C5C(v22);
}

void sub_1EC08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1EC2C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Spatial Enable: Cancel Proc Exit handler", v4, 2u);
  }

  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  os_log_t result = sub_3E48C(qword_962E8, *(_DWORD *)(*(void *)(a1 + 40) + 20LL));
  if (result) {
    return (void *)sub_1ECC0(result[1156], *(_DWORD *)(a1 + 48));
  }
  return result;
}

uint64_t sub_1ECC0(uint64_t a1, int a2)
{
  int v11 = a2;
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, a1 + 408);
  uint64_t v4 = *(void *)(a1 + 392);
  if (v4)
  {
    uint64_t v5 = a1 + 392;
    do
    {
      int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        int v8 = (uint64_t *)v4;
      }
      else {
        int v8 = (uint64_t *)(v4 + 8);
      }
      if (!v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }

    while (*v8);
    if (v5 != a1 + 392 && *(_DWORD *)(v5 + 32) <= a2)
    {
      int v12 = &v11;
      objc_msgSend( sub_2990C((uint64_t **)(a1 + 384), &v11, (uint64_t)&unk_65AD4, &v12)[5],  "SpatialAudioClientProcExitHandler");
    }
  }

  return sub_52C5C(v10);
}

void sub_1ED70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

LABEL_25:
  -[SpatialAudioClient updateHighestQualityFormat](self, "updateHighestQualityFormat");
  sub_52C5C(v33);
}

void sub_1F224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1F3E4(_Unwind_Exception *exception_object)
{
}

LABEL_21:
          self->_numActiveQueue += [v9 audioQueueRef];
          uint64_t v5 = v19;
          goto LABEL_22;
        }
      }

      id v13 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v9 streamInfo];
        [v9 streamInfo];
        id v16 = v15;
        [v9 streamInfo];
        disableControlCentreUpdate = self->_disableControlCentreUpdate;
        *(_DWORD *)std::string buf = 67109888;
        __int16 v56 = v14;
        int v57 = 1024;
        __int16 v58 = HIBYTE(v16) & 1;
        int v59 = 1024;
        __int16 v60 = v18;
        int v61 = 1024;
        LODWORD(v62) = disableControlCentreUpdate;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "[ %d ]Highest quality format ignored mContentspatializable %d mSpatializationStatus %d _disableControlCentreUpdate %d",  buf,  0x1Au);
      }

    int v12 = sub_34A1C((uint64_t)a1);
    (*(void (**)(_BYTE *, double))(*(void *)a1 + 512LL))(a1, v12);
    if (a1[461]) {
      sub_35240((uint64_t)a1, 1u, a4);
    }
  }

LABEL_22:
      BOOL v7 = (char *)v7 + 1;
    }

    while (v4 != v7);
    unsigned int v42 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( audioQueueDict,  "countByEnumeratingWithState:objects:count:",  &v50,  v63,  16LL);
    uint64_t v4 = v42;
  }

  while (v42);
  *(_DWORD *)&self->_HighestQualityFormat.mSpatializationStatus = 0;
  *(void *)&self->_HighestQualityFormat.mClientProcessID = 0LL;
  if (v5)
  {
    unsigned int v43 = [v5 streamInfo];
    __int128 v44 = HIDWORD(v43);
    uint64_t v46 = v45;
    *(void *)&self->_HighestQualityFormat.mClientProcessID = v43;
    *(_DWORD *)&self->_HighestQualityFormat.mSpatializationStatus = v45;
    __int128 v47 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      clientPid = self->clientPid;
      v49[0] = HIBYTE(v44);
      v49[1] = BYTE2(v44);
      v49[2] = BYTE1(v44);
      v49[3] = v44;
      v49[4] = 0;
      *(_DWORD *)std::string buf = 67109890;
      __int16 v56 = clientPid;
      int v57 = 1024;
      __int16 v58 = v46;
      int v59 = 1024;
      __int16 v60 = HIBYTE(v46);
      int v61 = 2082;
      __int16 v62 = v49;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "[ %d ]Highest quality format Status = %d Channels = %d Format ID = %{public}s",  buf,  0x1Eu);
    }
  }

      *a3 = 0;
      return 0LL;
    }

    if (v4 == 1684234612)
    {
      int v8 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "kBluetoothAudioDeviceCategory", v9, 2u);
      }

      goto LABEL_22;
    }

    uint64_t v5 = 1684826732;
LABEL_18:
    if (v4 != v5) {
      return sub_8688();
    }
    goto LABEL_22;
  }

  if (v4 > 1668050794)
  {
    if (v4 != 1668050795 && v4 != 1668510818) {
      return sub_8688();
    }
    goto LABEL_22;
  }

  if (v4 != 1633972065)
  {
    uint64_t v5 = 1651798132;
    goto LABEL_18;
  }

    uint64_t v4 = 1;
    goto LABEL_26;
  }

  if (v5 > 1870098019)
  {
    if (v5 == 1870098020) {
      goto LABEL_26;
    }
    if (v5 != 1885762592)
    {
      int v9 = 1885762657;
      goto LABEL_25;
    }

    goto LABEL_22;
  }

  if (v5 == 1650682995 || v5 == 1668047219 || v5 == 1819569763) {
    goto LABEL_26;
  }
  return result;
}

LABEL_44:
  sub_52C5C(v54);
}

        int v9 = 0LL;
        if (!v10)
        {
          if (!v13) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }

void sub_1F8CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1FDAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_529E8(a1 + 64, a2);
  *(_WORD *)(a1 + 128) = 1;
  *(void *)(a1 + 136) = 0LL;
  *(_DWORD *)(a1 + 164) = 0;
  *(void *)(a1 + 192) = 0LL;
  *(_WORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 218) = 1;
  *(_BYTE *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 219) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 227) = 0;
  *(void *)(a1 + 232) = 0LL;
  *(_BYTE *)(a1 + 240) = 0;
  *(void *)(a1 + 244) = 0LL;
  *(void *)(a1 + 250) = 0LL;
  *(_BYTE *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 304) = 0LL;
  *(void *)(a1 + 312) = 0LL;
  *(_WORD *)(a1 + 325) = 1;
  *(_WORD *)(a1 + 331) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 340) = 1;
  *(_BYTE *)(a1 + 348) = 0;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 384) = a1 + 392;
  sub_529E8(a1 + 408, v8);
  *(_BYTE *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0LL;
  *(_BYTE *)(a1 + 488) = 0;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  *(void *)(a1 + 4sub_52C5C(v1 - 96) = 0LL;
  sub_529E8(a1 + 520, v9);
  *(_BYTE *)(a1 + 584) = 1;
  *(void *)(a1 + 592) = 0LL;
  *(void *)a1 = a2;
  *(void *)(a1 + 48) = 0LL;
  *(_DWORD *)(a1 + 56) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 600));
  *(_BYTE *)(a1 + 144) = 0;
  sub_200C8((_BYTE *)a1, 0);
  sub_201BC((_BYTE *)a1, 0);
  sub_202D0((void *)a1, 0);
  sub_203D4((void *)a1, 0);
  *(_BYTE *)(a1 + 168) = 1;
  *(_DWORD *)(a1 + 1sub_52C5C(v1 - 96) = 0;
  *(void *)(a1 + 172) = 0x300000003LL;
  *(_DWORD *)(a1 + 180) = 3;
  *(_DWORD *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 145) = 0;
  *(_BYTE *)(a1 + 277) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0LL;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 278) = 512;
  *(_DWORD *)(a1 + 280) = -1082130432;
  *(void *)(a1 + 288) = 0LL;
  *(_BYTE *)(a1 + 2sub_52C5C(v1 - 96) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_52B28((uint64_t)v11, a1 + 520);
  *(void *)(a1 + 4sub_52C5C(v1 - 96) = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_52BF4((uint64_t)v11);
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 352) = 0LL;
  *(_DWORD *)(a1 + 327) = 0;
  *(void *)(a1 + 368) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  keys = @"airpods noise suppression";
  xpc_object_t values = CFDictionaryCreateMutable(0LL, 0LL, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRetain(values);
  *(void *)(a1 + 264) = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  sub_204B8(a1, a3, a4);
  sub_208C8(a1);
  *(_WORD *)(a1 + 608) = -1;
  sub_52C5C(v11);
  return a1;
}

void sub_20058(_Unwind_Exception *a1, uint64_t a2)
{
}

void sub_200C8(_BYTE *a1, int a2)
{
  if ((a1[156] != 0) != a2)
  {
    a1[156] = a2;
    uint64_t v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        uint64_t v5 = "enabled";
      }
      else {
        uint64_t v5 = "disabled";
      }
      int v6 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
      int v7 = 136446466;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "AccessoryInEarDetectionSupported set to %{public}s for mAudioObjectID %d",  (uint8_t *)&v7,  0x12u);
    }
  }

void sub_201BC(_BYTE *a1, int a2)
{
  if ((a1[488] != 0) != a2)
  {
    a1[488] = a2;
    uint64_t v3 = *(_BYTE **)(*(void *)a1 + 9096LL);
    if (v3 && v3[192]) {
      (*(void (**)(_BYTE *))(*(void *)v3 + 960LL))(v3);
    }
    uint64_t v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (a1[488]) {
        uint64_t v5 = "enabled";
      }
      else {
        uint64_t v5 = "disabled";
      }
      int v6 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
      int v7 = 136446466;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Accessory SetHfpExtendedVolumeRange set to %{public}s for mAudioObjectID %d",  (uint8_t *)&v7,  0x12u);
    }
  }

void sub_202D0(void *a1, int a2)
{
  if ((*((_BYTE *)a1 + 157) != 0) != a2)
  {
    *((_BYTE *)a1 + 157) = a2;
    sub_429B4(*a1, 1768252517);
    uint64_t v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)a1 + 156)) {
        uint64_t v4 = "enabled";
      }
      else {
        uint64_t v4 = "disabled";
      }
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      int v6 = 136446466;
      int v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory SetInEarDetectionEnabled set to %{public}s for mAudioObjectID %d",  (uint8_t *)&v6,  0x12u);
    }
  }

void sub_203D4(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 40) != a2)
  {
    *((_DWORD *)a1 + 40) = a2;
    sub_429B4(*a1, 1819503987);
    uint64_t v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 40);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mListenModeSupported set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void *sub_204B8(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v71) = 0;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "InitializeCommonAccessoryFeatureFromDevice", (uint8_t *)&v71, 2u);
  }

  string = xpc_dictionary_get_string(a3, "kBTAudioMsgPropertyName");
  if (string)
  {
    __int128 v71 = 0uLL;
    sub_52B28((uint64_t)&v71, a1 + 64);
    __int16 v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 32) = 0LL;
    }

    CFStringRef v8 = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
    *(void *)(a1 + 32) = v8;
    int v9 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      CFStringRef v74 = v8;
    }

    sub_52C5C(&v71);
  }

  else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
  {
    sub_5B1D0();
  }

  int v10 = (char *)xpc_dictionary_get_string(a3, "kBTAudioMsgPropertyDeviceAddress");
  if (!v10)
  {
    int v11 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
      sub_5B160(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }

  sub_A248(&v71, v10);
  BOOL v19 = (void **)(a1 + 8);
  *(_OWORD *)BOOL v19 = v71;
  *(void *)(a1 + 24) = v72;
  if (!xpc_dictionary_get_string(a3, "kBTAudioMsgPropertyDeviceUID"))
  {
    __int128 v20 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
      sub_58940(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }

  xpc_object_t value = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyProductID");
  __int16 v29 = value;
  if (value)
  {
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_int64)
    {
      int v30 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B0F0(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }

    *(_DWORD *)(a1 + 48) = xpc_int64_get_value(v29);
  }

  xpc_object_t v38 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyVersion");
  OSStatus v39 = v38;
  if (v38)
  {
    if (xpc_get_type(v38) != (xpc_type_t)&_xpc_type_int64)
    {
      int v40 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B080(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }

    *(_DWORD *)(a1 + 52) = xpc_int64_get_value(v39);
  }

  xpc_object_t v48 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyVendorID");
  __int128 v49 = v48;
  if (v48)
  {
    if (xpc_get_type(v48) != (xpc_type_t)&_xpc_type_int64)
    {
      __int16 v50 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B010(v50, v51, v52, v53, v54, v55, v56, v57);
      }
    }

    *(_DWORD *)(a1 + 56) = xpc_int64_get_value(v49);
  }

  xpc_object_t v58 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportedServices");
  __int16 v60 = v58;
  if (v58)
  {
    if (xpc_get_type(v58) != (xpc_type_t)&_xpc_type_int64)
    {
      int v61 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5AFA0(v61, v62, v63, v64, v65, v66, v67, v68);
      }
    }

    *(_DWORD *)(a1 + 192) = xpc_int64_get_value(v60);
  }

  sub_22CF4(a1, v59, a3);
  os_log_t result = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyIsAppleAudioDevice");
  uint64_t v70 = result;
  if (result)
  {
    os_log_t result = xpc_get_type(result);
    if (result == &_xpc_type_BOOL)
    {
      os_log_t result = (void *)xpc_BOOL_get_value(v70);
      *(_BYTE *)(a1 + 144) = (_BYTE)result;
    }
  }

  return result;
}

void sub_208AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_208C8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t v17 = 0LL;
    *(void *)&v17[8] = 0LL;
    sub_52B28((uint64_t)v17, a1 + 64);
    uint64_t v3 = *(void *)(a1 + 32);
    sub_52C5C(v17);
    int v4 = *(_DWORD *)(a1 + 48);
    int v5 = *(_DWORD *)(a1 + 52);
    int v6 = *(_DWORD *)(a1 + 56);
    int v7 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)uint64_t v17 = 138413314;
    *(void *)&v17[4] = v3;
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = v4;
    *(_WORD *)&v17[18] = 1024;
    *(_DWORD *)&v17[20] = v5;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v6;
    HIWORD(v18) = 1024;
    LODWORD(v19[0]) = v7;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioAccessoryDevice : deviceName=%@ ID=%d Version=%d VendorID=%d ServiceMask=%x",  v17,  0x24u);
    uint64_t v2 = (os_log_s *)qword_95A80;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 144)) {
      CFStringRef v8 = "Yes";
    }
    else {
      CFStringRef v8 = "No";
    }
    int v9 = *(unsigned __int8 *)(a1 + 156);
    int v10 = *(unsigned __int8 *)(a1 + 157);
    int v11 = *(unsigned __int8 *)(a1 + 200);
    if (*(_BYTE *)(a1 + 274)) {
      uint64_t v12 = "Yes";
    }
    else {
      uint64_t v12 = "No";
    }
    *(_DWORD *)uint64_t v17 = 136316162;
    *(void *)&v17[4] = v8;
    *(_WORD *)&v17[12] = 1024;
    *(_DWORD *)&v17[14] = v9;
    *(_WORD *)&v17[18] = 1024;
    *(_DWORD *)&v17[20] = v10;
    LOWORD(v18) = 1024;
    *(_DWORD *)((char *)&v18 + 2) = v11;
    HIWORD(v18) = 2080;
    v19[0] = v12;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioAccessoryDevice : Apple Device=%s IED=%d IED En=%d DoAP=%d Software Volume=%s",  v17,  0x28u);
    uint64_t v2 = (os_log_s *)qword_95A80;
  }

  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 279)) {
      uint64_t v13 = "Yes";
    }
    else {
      uint64_t v13 = "No";
    }
    if (*(_BYTE *)(a1 + 278)) {
      uint64_t v14 = "Yes";
    }
    else {
      uint64_t v14 = "No";
    }
    if (*(_BYTE *)(a1 + 230)) {
      uint64_t v15 = "Yes";
    }
    else {
      uint64_t v15 = "No";
    }
    if (*(_BYTE *)(a1 + 348)) {
      uint64_t v16 = "Yes";
    }
    else {
      uint64_t v16 = "No";
    }
    *(_DWORD *)uint64_t v17 = 136315906;
    *(void *)&v17[4] = v13;
    *(_WORD *)&v17[12] = 2080;
    *(void *)&v17[14] = v14;
    *(_WORD *)&v17[22] = 2080;
    uint64_t v18 = v15;
    LOWORD(v19[0]) = 2080;
    *(void *)((char *)v19 + 2) = v16;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "BTAudioAccessoryDevice : mOneBudANCMode=%s mLiveListenSupported=%s mSpatialAudioSupported=%s mTipiConnected=%s",  v17,  0x2Au);
  }

uint64_t sub_20AFC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 368);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 376);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 376) = 0LL;
  }

  int v4 = *(void **)(a1 + 208);
  if (v4) {

  }
  int v5 = *(void **)(a1 + 304);
  if (v5)
  {

    *(void *)(a1 + 304) = 0LL;
  }

  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_52B28((uint64_t)v25, a1 + 64);
  int v6 = *(const void **)(a1 + 288);
  if (v6) {
    CFRelease(v6);
  }
  sub_52BF4((uint64_t)v25);
  int v7 = *(void **)(a1 + 312);
  if (v7) {

  }
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_52B28((uint64_t)v24, a1 + 64);
  CFStringRef v8 = *(const void **)(a1 + 32);
  if (v8) {
    CFRelease(v8);
  }
  sub_52BF4((uint64_t)v24);
  int v9 = *(const void **)(a1 + 136);
  if (v9) {
    CFRelease(v9);
  }
  int v10 = *(const void **)(a1 + 496);
  if (v10) {
    CFRelease(v10);
  }
  v23[0] = 0LL;
  v23[1] = 0LL;
  sub_52B28((uint64_t)v23, a1 + 64);
  int v11 = *(const void **)(a1 + 264);
  if (v11) {
    CFRelease(v11);
  }
  sub_52BF4((uint64_t)v23);
  v22[0] = 0LL;
  v22[1] = 0LL;
  sub_52B28((uint64_t)v22, a1 + 408);
  uint64_t v12 = *(void **)(a1 + 384);
  uint64_t v13 = (void *)(a1 + 392);
  if (v12 != (void *)(a1 + 392))
  {
    do
    {
      uint64_t v14 = (void *)v12[5];
      [v14 cancelExitHandler];

      uint64_t v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (void *)v12[2];
          BOOL v17 = *v16 == (void)v12;
          uint64_t v12 = v16;
        }

        while (!v17);
      }

      uint64_t v12 = v16;
    }

    while (v16 != v13);
  }

  sub_16000(a1 + 384, *(void **)(a1 + 392));
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 384) = v13;
  sub_52C5C(v22);
  sub_52C5C(v23);
  sub_52C5C(v24);
  sub_52C5C(v25);
  sub_52A64(a1 + 520, v18);
  sub_52A64(a1 + 408, v19);
  sub_16000(a1 + 384, *(void **)(a1 + 392));
  sub_52A64(a1 + 64, v20);
  return a1;
}

uint64_t sub_20CE4(uint64_t a1)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_52B28((uint64_t)v18, a1 + 408);
  uint64_t v2 = *(void **)(a1 + 384);
  if (v2 != (void *)(a1 + 392))
  {
    do
    {
      int v3 = *((_DWORD *)v2 + 8);
      int v4 = (void *)v2[5];
      int v5 = (unint64_t)[v4 HighestQualityFormat] >> 32;
      int v6 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = [v4 spatialRefCount];
        [v4 HighestQualityFormat];
        unsigned __int8 v9 = v8;
        [v4 HighestQualityFormat];
        v17[0] = HIBYTE(v5);
        v17[1] = BYTE2(v5);
        v17[2] = BYTE1(v5);
        v17[3] = v5;
        v17[4] = 0;
        *(_DWORD *)std::string buf = 67110146;
        int v20 = v3;
        __int16 v21 = 1024;
        unsigned int v22 = v7;
        __int16 v23 = 1024;
        int v24 = v9;
        __int16 v25 = 1024;
        int v26 = v10;
        __int16 v27 = 2080;
        int v28 = v17;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Client PID = %d Ref CFIndex Count = %d [%d %d %s]",  buf,  0x24u);
      }

      int v11 = (void *)v2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          uint64_t v12 = (void *)v2[2];
          BOOL v13 = *v12 == (void)v2;
          uint64_t v2 = v12;
        }

        while (!v13);
      }

      uint64_t v2 = v12;
    }

    while (v12 != (void *)(a1 + 392));
  }

  uint64_t v14 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)std::string buf = 67109120;
    int v20 = v15;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "Updated Spatial Enable %d", buf, 8u);
  }

  return sub_52C5C(v18);
}

void sub_20EEC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL sub_20F14(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 192);
  int v2 = *(_DWORD *)(a1 + 196);
  int v3 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109888;
    v5[1] = v1 & 0x10011;
    __int16 v6 = 1024;
    int v7 = v1;
    __int16 v8 = 1024;
    int v9 = v2 & 0x10011;
    __int16 v10 = 1024;
    int v11 = v2;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "BTAudioAccessoryDevice : AllProfilesConnected service Mask=%x [%x] Connect Mask=%x[%x]",  (uint8_t *)v5,  0x1Au);
  }

  return (v2 & 0x10011 & v1) == (v1 & 0x10011);
}

BOOL sub_20FF4(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 192) & a2) != 0;
}

uint64_t sub_21004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 192) |= a2;
  return result;
}

uint64_t sub_21014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 196) |= a2;
  return result;
}

uint64_t sub_21024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 196) &= ~a2;
  return result;
}

uint64_t sub_21034(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, a1 + 64);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_52C5C(v4);
  return v2;
}

void sub_21078(void *a1, int a2, int a3)
{
  if (*((_DWORD *)a1 + 43) == a2)
  {
    if (*((_DWORD *)a1 + 44) == a3) {
      return;
    }
  }

  else
  {
    *((_DWORD *)a1 + 43) = a2;
    sub_429B4(*a1, 1768256368);
    int v5 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *((_DWORD *)a1 + 43);
      int v7 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      int v15 = 67109376;
      int v16 = v6;
      __int16 v17 = 1024;
      int v18 = v7;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Accessory mInEarStatusPrimary set to %d for mAudioObjectID %d",  (uint8_t *)&v15,  0xEu);
    }

    if (*((_DWORD *)a1 + 44) == a3) {
      goto LABEL_9;
    }
  }

  *((_DWORD *)a1 + 44) = a3;
  sub_429B4(*a1, 1768256371);
  __int16 v8 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *((_DWORD *)a1 + 44);
    int v10 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
    int v15 = 67109376;
    int v16 = v9;
    __int16 v17 = 1024;
    int v18 = v10;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Accessory mInEarStatusSecondary set to %u for mAudioObjectID %u",  (uint8_t *)&v15,  0xEu);
  }

LABEL_9:
  sub_429B4(*a1, 1768256354);
  int v11 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
    int v13 = *((_DWORD *)a1 + 43);
    int v14 = *((_DWORD *)a1 + 44);
    int v15 = 67109632;
    int v16 = v12;
    __int16 v17 = 1024;
    int v18 = v13;
    __int16 v19 = 1024;
    int v20 = v14;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Accessory mInEarStatus set for mAudioObjectID %u. Primary: %u, Secondary: %u",  (uint8_t *)&v15,  0x14u);
  }

    int v6 = (float)((float)(*(float *)(a1 + 448) - a2) / *(float *)(a1 + 444)) + 1.0;
    *(float *)(a1 + 432) = v6;
    goto LABEL_10;
  }

  if (!v4[275]) {
    goto LABEL_9;
  }
  int v6 = sub_15A04(a2);
LABEL_8:
  *(float *)(a1 + 432) = v6;
  *(float *)(a1 + 436) = v6;
LABEL_10:
  *(float *)(a1 + 440) = a2;
  int v7 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = *(float *)(a1 + 436);
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1272LL))(a1);
    int v10 = *(unsigned __int8 *)(a1 + 408);
    int v11 = *(float *)(a1 + 452);
    int v12 = *(float *)(a1 + 456);
    int v16 = 134219778;
    __int16 v17 = a2;
    int v18 = 2048;
    __int16 v19 = v6;
    int v20 = 2048;
    __int16 v21 = v8;
    unsigned int v22 = 1024;
    __int16 v23 = v9;
    int v24 = 1024;
    __int16 v25 = v10;
    int v26 = 2048;
    __int16 v27 = v11;
    int v28 = 2048;
    __int16 v29 = v12;
    int v30 = 2114;
    uint64_t v31 = sub_6FA0(a1);
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Audio layer set volume %f, mScalarVolume %f, mScalarRemoteVolume %f, IsVolumeSupported %d, mIsAbsoluteVolume %d L/ R : %f/%f Device %{public}@",  (uint8_t *)&v16,  0x4Au);
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      int v13 = *(id **)(a1 + 208);
      if (v13) {
        sub_11C14(v13, *(float *)(a1 + 432));
      }
    }

    else
    {
      int v14 = *(void *)(a1 + 400);
      if (v14)
      {
        int v15 = atomic_load((unsigned __int8 *)(v14 + 24));
        if ((v15 & 1) != 0)
        {
          sub_15554(*(void *)(a1 + 400), *(float *)(a1 + 440));
          *(_BYTE *)(a1 + 425) = 1;
        }
      }
    }
  }

        (*(void (**)(uint64_t))(*(void *)a1 + 720LL))(a1);
        goto LABEL_10;
      }
    }

    *(_DWORD *)(a1 + 9124) = a2;
    *(_DWORD *)(a1 + 9168) = a2;
    goto LABEL_9;
  }

  int v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  int v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v18);
  int v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v17 + 4);
  int v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v17);
  __int16 v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v16);
  int v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v19);
  *(_OWORD *)keys = *(_OWORD *)off_83200;
  int v24 = *(_OWORD *)off_83210;
  __int16 v25 = *(_OWORD *)off_83220;
  values[0] = v4;
  values[1] = v5;
  values[2] = v6;
  values[3] = v7;
  values[4] = v8;
  values[5] = v9;
  int v10 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  6LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  theDict = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 11LL, v10);
  CFRelease(v10);
  sub_34938((uint64_t)a1, a1[2328], &theDict);
  CFStringRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, theDict);
  int v12 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138543362;
    __int16 v21 = Copy;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "DSP disctionary settings are %{public}@", buf, 0xCu);
  }

  CFRelease(v6);
  CFRelease(v5);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v9);
  CFRelease(theDict);
  return Copy;
}

void sub_21280(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 45) != a2)
  {
    *((_DWORD *)a1 + 45) = a2;
    sub_429B4(*a1, 1886546291);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 45);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory PrimaryBudSide set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_21364(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 41) != a2)
  {
    *((_DWORD *)a1 + 41) = a2;
    sub_429B4(*a1, 1819505773);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 41);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mListenMode set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_21448(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 46) != a2)
  {
    *((_DWORD *)a1 + 46) = a2;
    sub_429B4(*a1, 1684434285);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 46);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory MicMode set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

uint64_t sub_2152C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 278) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 278) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (a2) {
        int v5 = "enabled";
      }
      else {
        int v5 = "disabled";
      }
      int v6 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
      int v7 = 136446466;
      int v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mLiveListenSupported set to %{public}s for mAudioObjectID %d",  (uint8_t *)&v7,  0x12u);
    }

    return sub_429B4(*v3, 1819046768);
  }

  return result;
}

uint64_t sub_21628(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 325) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 325) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mAllowAutoRoute set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }

    os_log_t result = sub_340E8();
    if ((_DWORD)result) {
      return sub_429B4(*v3, 1635087471);
    }
  }

  return result;
}

uint64_t sub_21714(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 257) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 257) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mHostedDSPOffloadSupported set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }

    return sub_429B4(*v3, 1685278578);
  }

  return result;
}

uint64_t sub_217F8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 249) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 249) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "mPVDRCEnable set to %d", (uint8_t *)v5, 8u);
    }

    return sub_429B4(*v3, 1886807154);
  }

  return result;
}

uint64_t sub_218C0(uint64_t a1)
{
  return *(void *)(a1 + 264);
}

uint64_t sub_218E8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 326) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 326) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mAudioRouteHidden set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }

    return sub_429B4(*v3, 1751737454);
  }

  return result;
}

uint64_t sub_219CC(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 324) != a2)
  {
    int v3 = (uint64_t *)result;
    *(_BYTE *)(result + 324) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mUserSelectedDeviceType set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }

    return sub_429B4(*v3, 1970496630);
  }

  return result;
}

void sub_21AB0(void *a1, int a2)
{
  if ((*((_BYTE *)a1 + 200) != 0) != a2)
  {
    *((_BYTE *)a1 + 200) = a2;
    sub_429B4(*a1, 1685021040);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int8 *)a1 + 200);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mDoAPSupported set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

uint64_t sub_21B9C(uint64_t result, void *a2)
{
  if (a2)
  {
    int v3 = (uint64_t *)result;
    int v4 = *(void **)(result + 208);
    if (v4 != a2)
    {

      v3[26] = (uint64_t)a2;
      id v5 = a2;
      int v6 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = v3[26];
        int v8 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
        int v9 = 138412546;
        uint64_t v10 = v7;
        __int16 v11 = 1024;
        int v12 = v8;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "DoAP UUID %@ for mAudioObjectID %d", (uint8_t *)&v9, 0x12u);
      }

      return sub_429B4(*v3, 1685088612);
    }
  }

  return result;
}

void sub_21C90(_BYTE *a1, int a2)
{
  if ((a1[240] != 0) != a2)
  {
    a1[240] = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Accessory mCustomHRTFSupported set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_21D6C(void *a1, int a2)
{
  int v2 = a2;
  if (!*((_BYTE *)a1 + 144) || ((int v4 = *((_DWORD *)a1 + 12), v4 != 8229) ? (v5 = v4 == 8215) : (v5 = 1), !v5))
  {
    int v9 = (char *)a1 + 230;
    if ((*((_BYTE *)a1 + 230) != 0) == a2) {
      return;
    }
    goto LABEL_12;
  }

  int v6 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *((unsigned __int8 *)a1 + 230);
    int v8 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
    int v12 = 67109376;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Accessory mSpatialAudioSupported Overwritten %d for mAudioObjectID %d",  (uint8_t *)&v12,  0xEu);
  }

  int v9 = (char *)a1 + 230;
  if (!*((_BYTE *)a1 + 230))
  {
    int v2 = 1;
LABEL_12:
    *int v9 = v2;
    uint64_t v10 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      int v12 = 67109376;
      int v13 = v2;
      __int16 v14 = 1024;
      int v15 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Accessory mSpatialAudioSupported set to %d for mAudioObjectID %d",  (uint8_t *)&v12,  0xEu);
    }
  }

BOOL sub_21EEC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 144)) {
    return 0LL;
  }
  int v1 = *(_DWORD *)(a1 + 48);
  return v1 == 8215 || v1 == 8229;
}

uint64_t sub_21F18(uint64_t a1, char a2)
{
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl");
  *(_BYTE *)(a1 + 228) = result & a2;
  return result;
}

void sub_21F54(void *a1, int a2)
{
  if (*((unsigned __int8 *)a1 + 238) != a2)
  {
    *((_BYTE *)a1 + 238) = a2;
    sub_429B4(*a1, 1752327777);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int8 *)a1 + 238);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mSoundProfileAllowed set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_22038(void *a1, int a2)
{
  if (*((unsigned __int8 *)a1 + 239) != a2)
  {
    *((_BYTE *)a1 + 239) = a2;
    sub_429B4(*a1, 1752327777);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int8 *)a1 + 239);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mSoundProfileEnhancedTuning set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_2211C(void *a1, int a2)
{
  if ((*((_BYTE *)a1 + 236) != 0) != a2)
  {
    *((_BYTE *)a1 + 236) = a2;
    sub_429B4(*a1, 1936746611);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int8 *)a1 + 236);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mSpatialAudioUserEnableFeature set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_22208(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 61) != a2)
  {
    *((_DWORD *)a1 + 61) = a2;
    sub_429B4(*a1, 1936225136);
    int v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((_DWORD *)a1 + 61);
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      v6[0] = 67109376;
      v6[1] = v4;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Accessory mStereoHfpCodecIDSupported set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_222EC(_BYTE *a1, int a2)
{
  if (*((_DWORD *)a1 + 61))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 9096LL);
    if (v3 && *(_BYTE *)(v3 + 192))
    {
      if ((a1[248] != 0) == a2) {
        return;
      }
      a1[248] = a2;
      char v13 = 0;
      if (sub_340E8())
      {
        if (!a2) {
          goto LABEL_21;
        }
        sub_50340(*(void *)a1, &v13, 1);
        if (*(_BYTE *)(*(void *)(*(void *)a1 + 9096LL) + 192LL)) {
          uint64_t v5 = *(void *)(*(void *)a1 + 9096LL);
        }
        else {
          uint64_t v5 = 0LL;
        }
        int v6 = *(void (**)(void))(*(void *)v5 + 520LL);
      }

      else
      {
        if (*(_BYTE *)(*(void *)(*(void *)a1 + 9096LL) + 192LL)) {
          uint64_t v7 = *(void *)(*(void *)a1 + 9096LL);
        }
        else {
          uint64_t v7 = 0LL;
        }
        int v6 = *(void (**)(void))(*(void *)v7 + 520LL);
      }

      v6();
LABEL_21:
      sub_429B4(*(void *)a1, 1936221550);
      int v8 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = a1[248];
        int v10 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
        if (*(_BYTE *)(*(void *)(*(void *)a1 + 9096LL) + 192LL)) {
          uint64_t v11 = *(void *)(*(void *)a1 + 9096LL);
        }
        else {
          uint64_t v11 = 0LL;
        }
        (*(void (**)(void *__return_ptr, uint64_t, void))(*(void *)v11 + 792LL))(v12, v11, 0LL);
        *(_DWORD *)std::string buf = 67109632;
        int v15 = v9;
        __int16 v16 = 1024;
        int v17 = v10;
        __int16 v18 = 2048;
        uint64_t v19 = v12[0];
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "HFPstereo publish, Accessory mStereoHfpEnabled set to %d for mAudioObjectID %d, samplerate: %f",  buf,  0x18u);
      }

      return;
    }

    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
      sub_5B228();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
  {
    sub_5B1FC();
  }

void sub_224E8(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 320) != a2)
  {
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        uint64_t v5 = "Unknown";
      }
      else {
        uint64_t v5 = off_821F0[a2];
      }
      memset(__p, 0, 24);
      sub_A248(__p, v5);
      if (SHIBYTE(__p[2]) >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      uint64_t v7 = "YES";
      if (!*(_BYTE *)(a1 + 256)) {
        uint64_t v7 = "NO";
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&_BYTE buf[12] = 2082;
      *(void *)&buf[14] = v7;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "RemoteStreamState set to %{public}s Spatial Busy %{public}s",  buf,  0x16u);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }

    *(_DWORD *)(a1 + 320) = a2;
    int v8 = *(_DWORD *)(a1 + 60);
    memset(buf, 0, sizeof(buf));
    if (*(char *)(a1 + 31) < 0)
    {
      sub_A134(buf, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 8);
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 24);
    }

    uint64_t v9 = qword_962E8;
    if ((char)buf[23] < 0)
    {
      sub_A134(v27, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)__int16 v27 = *(_OWORD *)buf;
      uint64_t v28 = *(void *)&buf[16];
    }

    int v10 = sub_3B50C(v9, (uint64_t)v27);
    if (SHIBYTE(v28) < 0) {
      operator delete(v27[0]);
    }
    int v11 = *(unsigned __int8 *)(a1 + 145);
    int v12 = *(_BYTE **)(*(void *)a1 + 9088LL);
    if (v12 && v12[192])
    {
      uint64_t v13 = qword_962E8;
      int v14 = (*(uint64_t (**)(_BYTE *))(*(void *)v12 + 16LL))(v12);
      int v15 = sub_3DD60(v13, v14);
    }

    else
    {
      int v15 = 0;
    }

    unsigned __int8 v16 = sub_3C400(qword_962E8);
    unsigned int v17 = a2 - 3;
    unsigned int v18 = v8 - 1;
    uint64_t v19 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 348)) {
        int v20 = "TiPi";
      }
      else {
        int v20 = "Triangle";
      }
      __int16 v21 = buf;
      if ((buf[23] & 0x80u) != 0) {
        __int16 v21 = *(uint8_t **)buf;
      }
      LODWORD(__p[0]) = 136446722;
      *(void **)((char *)__p + 4) = (void *)v20;
      WORD2(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 6) = v21;
      if (v10) {
        unsigned int v22 = "Yes";
      }
      else {
        unsigned int v22 = "No";
      }
      HIWORD(__p[2]) = 2082;
      __p[3] = (void *)v22;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%{public}s Ownership Status : device %{public}s. Device Stream Status %{public}s",  (uint8_t *)__p,  0x20u);
    }

    if (v18 < 2) {
      int v23 = 1;
    }
    else {
      int v23 = v10;
    }
    if (v17 < 0xFFFFFFFE) {
      int v23 = 1;
    }
    if (!v11) {
      int v23 = 1;
    }
    if (((v23 | v15) & 1) == 0 && ((v16 & 1) != 0 || *(_BYTE *)(a1 + 348)))
    {
      int v24 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 348)) {
          __int16 v25 = "TiPi";
        }
        else {
          __int16 v25 = "Triangle";
        }
        int v26 = buf;
        if ((buf[23] & 0x80u) != 0) {
          int v26 = *(uint8_t **)buf;
        }
        LODWORD(__p[0]) = 136446466;
        *(void **)((char *)__p + 4) = (void *)v25;
        WORD2(__p[1]) = 2082;
        *(void **)((char *)&__p[1] + 6) = v26;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}s sync mismatch warning:device %{public}s",  (uint8_t *)__p,  0x16u);
      }
    }
  }

void sub_22878( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_228B8@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 2) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_821F0[a1];
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v2);
}

uint64_t sub_228E8(uint64_t *a1, const char *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_52B28((uint64_t)v6, (uint64_t)(a1 + 8));
  int v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  a1[4] = (uint64_t)CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  sub_52BF4((uint64_t)v6);
  sub_429B4(*a1, 1819173229);
  return sub_52C5C(v6);
}

void sub_2296C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_22980(float *a1, float a2)
{
  if (a2 != -1.0 && a1[70] != a2)
  {
    a1[70] = a2;
    uint64_t v5 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
      int v7 = 134218240;
      double v8 = a2;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "mDosimetrySensitivity set to %f for mAudioObjectID %d",  (uint8_t *)&v7,  0x12u);
    }

    sub_429B4(*(void *)a1, 1685025637);
    if (*(void *)a1) {
      sub_4EDA0(*(void *)a1);
    }
  }

CFIndex sub_22A7C(CFIndex result, const void *a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t *)result;
    int v4 = *(void **)(result + 288);
    if (!v4
      || (uint64_t result = (CFIndex)[v4 isEqualToArray:a2], (result & 1) == 0)
      && (!v3[36] || (uint64_t result = CFArrayGetCount((CFArrayRef)a2)) != 0))
    {
      uint64_t v5 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = (*(uint64_t (**)(uint64_t))(*(void *)*v3 + 16LL))(*v3);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "mDosimetryVolumeCurve set for mAudioObjectID %d", buf, 8u);
      }

      *(void *)std::string buf = 0LL;
      uint64_t v10 = 0LL;
      sub_52B28((uint64_t)buf, (uint64_t)(v3 + 8));
      int v7 = (const void *)v3[36];
      if (v7) {
        CFRelease(v7);
      }
      sub_52BF4((uint64_t)buf);
      v3[36] = (uint64_t)a2;
      CFRetain(a2);
      sub_429B4(*v3, 1685026403);
      v8[0] = 0LL;
      v8[1] = 0LL;
      sub_52B28((uint64_t)v8, (uint64_t)(v3 + 8));
      if (*v3) {
        sub_4EDCC(*v3);
      }
      sub_52BF4((uint64_t)v8);
      sub_52C5C(v8);
      return sub_52C5C(buf);
    }
  }

  return result;
}

void sub_22BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_22C08(void *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 296) != (_DWORD)a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    *((_BYTE *)result + 2sub_52C5C(v1 - 96) = a2;
    int v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void))(*(void *)*v3 + 16LL))(*v3);
      v6[0] = 67109376;
      v6[1] = v2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mEURegionBit set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
      uint64_t v2 = *((unsigned __int8 *)v3 + 296);
    }

    return [(id)v3[38] updateRegionalDosimetryVolumeCurve:v2 productID:*((unsigned int *)v3 + 12) audioDevice:*v3];
  }

  return result;
}

void sub_22CF4(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "UpdateAccessoryFeatureFromDevice", buf, 2u);
  }

  xpc_object_t value = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportedServices");
  __int16 v7 = value;
  if (value)
  {
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_int64)
    {
      int v8 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BC90(v8, v9, v10, v11, v12, v13, v14, v15);
      }
    }

    *(_DWORD *)(a1 + 192) = xpc_int64_get_value(v7);
  }

  xpc_object_t v16 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyIsAppleAudioDevice");
  unsigned int v17 = v16;
  if (v16 && xpc_get_type(v16) == (xpc_type_t)&_xpc_type_BOOL) {
    *(_BYTE *)(a1 + 144) = xpc_BOOL_get_value(v17);
  }
  xpc_object_t v18 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyLocalStreamState");
  uint64_t v19 = v18;
  if (v18)
  {
    if (xpc_get_type(v18) != (xpc_type_t)&_xpc_type_int64)
    {
      int v20 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BC20(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }

    *(_DWORD *)(a1 + 60) = xpc_int64_get_value(v19);
  }

  xpc_object_t v28 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyInEarDetection");
  __int16 v29 = v28;
  if (v28)
  {
    if (xpc_get_type(v28) != (xpc_type_t)&_xpc_type_BOOL)
    {
      int v30 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BBB0(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }

    BOOL v38 = xpc_BOOL_get_value(v29);
    sub_200C8((_BYTE *)a1, v38);
  }

  xpc_object_t v39 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyExtentedHfpVolumeRange");
  int v40 = v39;
  if (v39 && xpc_get_type(v39) == (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL v41 = xpc_BOOL_get_value(v40);
    sub_201BC((_BYTE *)a1, v41);
  }

  if (*(_BYTE *)(a1 + 156))
  {
    xpc_object_t v42 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyInEarEnabled");
    if (xpc_get_type(v42) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v43 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BB40(v43, v44, v45, v46, v47, v48, v49, v50);
      }
    }

    BOOL v51 = xpc_BOOL_get_value(v42);
    sub_202D0((void *)a1, v51);
    xpc_object_t v52 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyInEarStatus");
    uint64_t v53 = v52;
    if (v52)
    {
      if (xpc_get_type(v52) != (xpc_type_t)&_xpc_type_int64)
      {
        uint64_t v54 = (os_log_s *)qword_95A80;
        if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
          sub_5BAD0(v54, v55, v56, v57, v58, v59, v60, v61);
        }
      }

      __int16 v62 = xpc_int64_get_value(v53);
      sub_21078((void *)a1, v62, HIBYTE(v62));
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BAA4();
    }

    xpc_object_t v63 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyPrimaryBudSide");
    if (xpc_get_type(v63) != (xpc_type_t)&_xpc_type_int64)
    {
      uint64_t v64 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BA34(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }

    int v72 = xpc_int64_get_value(v63);
    sub_21280((void *)a1, v72);
    xpc_object_t v73 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyFixedMicRole");
    if (xpc_get_type(v73) != (xpc_type_t)&_xpc_type_int64)
    {
      CFStringRef v74 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B9C4(v74, v75, v76, v77, v78, v79, v80, v81);
      }
    }

    int v82 = xpc_int64_get_value(v73);
    sub_21448((void *)a1, v82);
  }

  xpc_object_t v83 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDOAPUuid");
  if (v83)
  {
    __int128 v84 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v83));
    sub_21B9C(a1, v84);
  }

  xpc_object_t v85 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyListenModeSupported");
  __int128 v86 = v85;
  if (v85)
  {
    if (xpc_get_type(v85) != (xpc_type_t)&_xpc_type_int64)
    {
      __int128 v87 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B954(v87, v88, v89, v90, v91, v92, v93, v94);
      }
    }

    int v95 = xpc_int64_get_value(v86);
    sub_203D4((void *)a1, v95);
    if (xpc_int64_get_value(v86))
    {
      xpc_object_t v96 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyListenMode");
      uint64_t v97 = v96;
      if (v96)
      {
        if (xpc_get_type(v96) != (xpc_type_t)&_xpc_type_int64)
        {
          __int128 v98 = (os_log_s *)qword_95A80;
          if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
            sub_5B8E4(v98, v99, v100, v101, v102, v103, v104, v105);
          }
        }

        int v106 = xpc_int64_get_value(v97);
        sub_21364((void *)a1, v106);
      }
    }
  }

  uint64_t v107 = qword_962E8;
  __int128 v108 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_A134(__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }

  else
  {
    *(_OWORD *)std::string __p = *v108;
    uint64_t v371 = *(void *)(a1 + 24);
  }

  int v109 = sub_3C39C(v107, (unsigned __int8 **)__p);
  *(_BYTE *)(a1 + 145) = v109;
  if (SHIBYTE(v371) < 0)
  {
    operator delete(__p[0]);
    int v109 = *(unsigned __int8 *)(a1 + 145);
  }

  __int128 v110 = (os_log_s *)qword_95A80;
  if (v109 && os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_DEFAULT,  "Corresponding A2DP device was owned already, initializing to owned",  buf,  2u);
    __int128 v110 = (os_log_s *)qword_95A80;
  }

  int v111 = *(unsigned __int8 *)(a1 + 144);
  *(_BYTE *)(a1 + 277) = v111;
  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v112 = "supported.";
    if (!v111) {
      uint64_t v112 = "not supported";
    }
    *(_DWORD *)std::string buf = 136315138;
    v373 = v112;
    _os_log_impl(&dword_0, v110, OS_LOG_TYPE_DEFAULT, "Ownership is %s", buf, 0xCu);
    int v111 = *(unsigned __int8 *)(a1 + 277);
  }

  if (v111)
  {
    uint64_t v113 = qword_962E8;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_A134(v368, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }

    else
    {
      *(_OWORD *)v368 = *v108;
      uint64_t v369 = *(void *)(a1 + 24);
    }

    int v114 = sub_3C39C(v113, (unsigned __int8 **)v368);
    *(_BYTE *)(a1 + 145) = v114;
    if (SHIBYTE(v369) < 0)
    {
      operator delete(v368[0]);
      int v114 = *(unsigned __int8 *)(a1 + 145);
    }

    if (v114)
    {
      char v115 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( &dword_0,  v115,  OS_LOG_TYPE_DEFAULT,  "Corresponding A2DP device was owned already, initializing to owned",  buf,  2u);
      }
    }
  }

  xpc_object_t v116 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDOAPSupported");
  uint64_t v117 = v116;
  if (v116)
  {
    if (xpc_get_type(v116) != (xpc_type_t)&_xpc_type_BOOL)
    {
      __int128 v118 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B874(v118, v119, v120, v121, v122, v123, v124, v125);
      }
    }

    BOOL v126 = xpc_BOOL_get_value(v117);
    sub_21AB0((void *)a1, v126);
  }

  xpc_object_t v127 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyLiveListenSupported");
  __int128 v128 = v127;
  if (v127)
  {
    if (xpc_get_type(v127) != (xpc_type_t)&_xpc_type_BOOL)
    {
      __int128 v129 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B804(v129, v130, v131, v132, v133, v134, v135, v136);
      }
    }

    BOOL v137 = xpc_BOOL_get_value(v128);
    sub_2152C(a1, v137);
  }

  xpc_object_t v138 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyOneBudANCMode");
  __int128 v139 = v138;
  if (v138)
  {
    if (xpc_get_type(v138) != (xpc_type_t)&_xpc_type_int64)
    {
      __int128 v140 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B794(v140, v141, v142, v143, v144, v145, v146, v147);
      }
    }

    *(_BYTE *)(a1 + 279) = xpc_int64_get_value(v139);
  }

  xpc_object_t v148 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyRemoteStreamState");
  v149 = v148;
  if (v148)
  {
    if (xpc_get_type(v148) != (xpc_type_t)&_xpc_type_int64)
    {
      __int16 v150 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B724(v150, v151, v152, v153, v154, v155, v156, v157);
      }
    }

    unsigned int v158 = xpc_int64_get_value(v149);
    sub_224E8(a1, v158);
  }

  xpc_object_t v159 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyWSModeSupported");
  if (v159) {
    *(_BYTE *)(a1 + 327) = xpc_BOOL_get_value(v159);
  }
  xpc_object_t v160 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyWSIsGuestDevice");
  if (v160)
  {
    BOOL v161 = xpc_BOOL_get_value(v160);
    *(_BYTE *)(a1 + 329) = v161;
    if (v161)
    {
      *(_BYTE *)(a1 + 277) = 0;
      v162 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        v373 = "not supported";
        _os_log_impl( &dword_0,  v162,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter guest device ownership is being set to  %s",  buf,  0xCu);
      }
    }
  }

  if (*(_BYTE *)(a1 + 327))
  {
    xpc_object_t v163 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyWSIsGuestNotInContactsDevice");
    if (v163)
    {
      BOOL v164 = xpc_BOOL_get_value(v163);
      *(_BYTE *)(a1 + 330) = v164;
      if (*(_BYTE *)(a1 + 329))
      {
        v165 = (os_log_s *)qword_95A80;
        if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
        {
          v166 = "In Contacts";
          if (v164) {
            v166 = "Not In Contacts.";
          }
          *(_DWORD *)std::string buf = 136315138;
          v373 = v166;
          _os_log_impl(&dword_0, v165, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device %s", buf, 0xCu);
        }
      }
    }

    xpc_object_t v167 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyWSModeEnabled");
    if (v167) {
      *(_BYTE *)(a1 + 328) = xpc_BOOL_get_value(v167);
    }
  }

  v168 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 327)) {
      v169 = "supported";
    }
    else {
      v169 = "not supported ";
    }
    v170 = "enabled";
    if (!*(_BYTE *)(a1 + 328)) {
      v170 = "not enabled ";
    }
    *(_DWORD *)std::string buf = 136315394;
    v373 = v169;
    __int16 v374 = 2080;
    v375 = v170;
    _os_log_impl(&dword_0, v168, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is %s and %s", buf, 0x16u);
  }

  xpc_object_t v171 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDigitalCrownSupported");
  v172 = v171;
  if (v171)
  {
    BOOL v173 = xpc_BOOL_get_value(v171);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureDigitalCrown", v173);
    *(_BYTE *)(a1 + 217) = xpc_BOOL_get_value(v172);
  }

  xpc_object_t v174 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyBudSideLoudnessEqControlSupported");
  if (v174)
  {
    v175 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v176 = xpc_BOOL_get_value(v174);
      v177 = "not supported";
      if (v176) {
        v177 = "supported";
      }
      *(_DWORD *)std::string buf = 136315138;
      v373 = v177;
      _os_log_impl(&dword_0, v175, OS_LOG_TYPE_DEFAULT, "Bud side loudness EQ control is %s", buf, 0xCu);
    }

    BOOL v178 = xpc_BOOL_get_value(v174);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureBudSideLoudnessEqControlSupport", v178);
  }

  xpc_object_t v179 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyBudSideLoudnessEqEnabled");
  if (v179)
  {
    v180 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v181 = xpc_BOOL_get_value(v179);
      v182 = "disabled";
      if (v181) {
        v182 = "enabled";
      }
      *(_DWORD *)std::string buf = 136315138;
      v373 = v182;
      _os_log_impl(&dword_0, v180, OS_LOG_TYPE_DEFAULT, "Bud side loudness EQ is %s", buf, 0xCu);
    }

    *(_BYTE *)(a1 + 218) = xpc_BOOL_get_value(v179);
  }

  xpc_object_t v183 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyUWBSStereoSupport");
  if (v183)
  {
    BOOL v184 = xpc_BOOL_get_value(v183);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureStereoHfpSupport", v184);
  }

  xpc_object_t v185 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportSpatialAudio");
  v186 = v185;
  if (v185)
  {
    BOOL v187 = xpc_BOOL_get_value(v185);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureHeadTrackedSpatialAudio", v187);
    BOOL v188 = xpc_BOOL_get_value(v186);
    sub_21D6C((void *)a1, v188);
  }

  xpc_object_t v189 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAllowSoundProfile");
  if (v189)
  {
    BOOL v190 = xpc_BOOL_get_value(v189);
    sub_21F54((void *)a1, v190);
  }

  xpc_object_t v191 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySoundProfileEnhancedTuning");
  if (v191)
  {
    BOOL v192 = xpc_BOOL_get_value(v191);
    sub_22038((void *)a1, v192);
  }

  xpc_object_t v193 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAdaptiveVolume");
  if (v193)
  {
    BOOL v194 = xpc_BOOL_get_value(v193);
    *(_BYTE *)(a1 + 228) = v194 & _os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl");
    v195 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      v196 = "not supported";
      if (v194) {
        v196 = "supported";
      }
      *(_DWORD *)std::string buf = 136315138;
      v373 = v196;
      _os_log_impl(&dword_0, v195, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: feature %s", buf, 0xCu);
    }

    sub_24518(a1, @"kBluetoothAudioDeviceFeatureAdaptiveVolume", v194);
  }

  xpc_object_t v197 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAdaptiveVolumeMode");
  if (v197)
  {
    char v198 = xpc_int64_get_value(v197);
    *(_BYTE *)(a1 + 229) = v198;
    v199 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
    if (v199) {
      -[BTAudioAVNotificationMonitor personalizedVolumeEnabled:](v199, "personalizedVolumeEnabled:", v198 == 1LL);
    }
    v200 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (v198 == 1LL) {
        v201 = "enabled";
      }
      else {
        v201 = "disabled";
      }
      *(_DWORD *)std::string buf = 136315138;
      v373 = v201;
      _os_log_impl(&dword_0, v200, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: Configration %s", buf, 0xCu);
    }
  }

  xpc_object_t v202 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyMuteControl");
  if (v202)
  {
    BOOL v203 = xpc_BOOL_get_value(v202);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureMuteControl", v203);
  }

  xpc_object_t v204 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyConversationDetect");
  if (v204)
  {
    BOOL v205 = xpc_BOOL_get_value(v204);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureConversationDetect", v205);
  }

  xpc_object_t v206 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportSoundProfile");
  v207 = v206;
  if (v206)
  {
    BOOL v208 = xpc_BOOL_get_value(v206);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureCustomHRTF", v208);
    BOOL v209 = xpc_BOOL_get_value(v207);
    sub_21C90((_BYTE *)a1, v209);
  }

  xpc_object_t v210 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySoundProfile");
  if (v210)
  {
    v211 = (IR::IRData *)_CFXPCCreateCFObjectFromXPCObject(v210);
    v212 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      v373 = (const char *)v211;
      _os_log_impl(&dword_0, v212, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: received %@", buf, 0xCu);
    }

    sub_3ED94(qword_962E8, v211);
    if (v211) {
      CFRelease(v211);
    }
  }

  xpc_object_t v213 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportHighQualityBiDirectionalAudio");
  if (v213)
  {
    v214 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v215 = xpc_BOOL_get_value(v213);
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v373) = v215;
      _os_log_impl(&dword_0, v214, OS_LOG_TYPE_DEFAULT, "BTAudiohighQuality BiDirectional Audio: received %d", buf, 8u);
    }

    *(_BYTE *)(a1 + 237) = xpc_BOOL_get_value(v213);
    BOOL v216 = xpc_BOOL_get_value(v213);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureHighQualityBiDirectionalAudio", v216);
  }

  xpc_object_t v217 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyTipiSupported");
  v218 = v217;
  if (v217)
  {
    if (xpc_get_type(v217) == (xpc_type_t)&_xpc_type_BOOL)
    {
      BOOL v219 = xpc_BOOL_get_value(v218);
      *(_BYTE *)(a1 + 250) = v219;
      v220 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        v221 = "not support";
        if (v219) {
          v221 = "support";
        }
        *(_DWORD *)std::string buf = 136315138;
        v373 = v221;
        _os_log_impl(&dword_0, v220, OS_LOG_TYPE_DEFAULT, "TiPi is %s", buf, 0xCu);
      }
    }
  }

  if (*(_BYTE *)(a1 + 230))
  {
    xpc_object_t v222 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAllowSpatialAudio");
    if (v222)
    {
      BOOL v223 = xpc_BOOL_get_value(v222);
      sub_2211C((void *)a1, v223);
    }

    xpc_object_t v224 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySpatialPerAppModeMap");
    xpc_object_t v225 = v224;
    if (v224)
    {
      if (xpc_get_type(v224) != (xpc_type_t)&_xpc_type_dictionary)
      {
        v226 = (os_log_s *)qword_95A80;
        if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
          sub_5B6B4(v226, v227, v228, v229, v230, v231, v232, v233);
        }
      }

      v234 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject(v225);
      v235 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int Count = CFDictionaryGetCount(v234);
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v373) = Count;
        _os_log_impl(&dword_0, v235, OS_LOG_TYPE_DEFAULT, "Per App Spatial information : %d", buf, 8u);
      }

      sub_245A0(a1, v234);
      sub_245FC(a1);
      if (v234) {
        CFRelease(v234);
      }
    }
  }

  xpc_object_t v237 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAdaptiveVolumeMap");
  xpc_object_t v238 = v237;
  if (v237)
  {
    if (xpc_get_type(v237) != (xpc_type_t)&_xpc_type_dictionary)
    {
      v239 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B644(v239, v240, v241, v242, v243, v244, v245, v246);
      }
    }

    v247 = (const __CFDictionary *)_CFXPCCreateCFObjectFromXPCObject(v238);
    v248 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v249 = CFDictionaryGetCount(v247);
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v373) = v249;
      _os_log_impl(&dword_0, v248, OS_LOG_TYPE_DEFAULT, "Adaptive Volume information: %d", buf, 8u);
    }

    sub_24668((CFDictionaryRef *)a1, v247);
    if (v247) {
      CFRelease(v247);
    }
  }

  xpc_object_t v250 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySoftwareVolumeSupported");
  if (v250) {
    *(_BYTE *)(a1 + 274) = xpc_BOOL_get_value(v250);
  }
  xpc_object_t v251 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySupportRemoteVolumeChange");
  if (v251) {
    *(_BYTE *)(a1 + 276) = xpc_BOOL_get_value(v251);
  }
  xpc_object_t v252 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyTipiConnected");
  if (v252) {
    *(_BYTE *)(a1 + 348) = xpc_BOOL_get_value(v252);
  }
  xpc_object_t v253 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDeviceUUID");
  v254 = v253;
  if (v253)
  {
    if (xpc_get_type(v253) != (xpc_type_t)&_xpc_type_uuid)
    {
      v255 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B5D4(v255, v256, v257, v258, v259, v260, v261, v262);
      }
    }

    v263 = *(void **)(a1 + 312);
    if (v263) {

    }
    *(void *)(a1 + 312) = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  xpc_uuid_get_bytes(v254));
  }

  xpc_object_t v264 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDosimetrySensitivity");
  v265 = v264;
  if (v264)
  {
    if (xpc_get_type(v264) != (xpc_type_t)&_xpc_type_double)
    {
      v266 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B564(v266, v267, v268, v269, v270, v271, v272, v273);
      }
    }

    float v274 = xpc_double_get_value(v265);
    sub_22980((float *)a1, v274);
  }

  xpc_object_t v275 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyDosimetryVolumeCurve");
  xpc_object_t v276 = v275;
  if (v275)
  {
    if (xpc_get_type(v275) != (xpc_type_t)&_xpc_type_array)
    {
      v277 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B4F4(v277, v278, v279, v280, v281, v282, v283, v284);
      }
    }

    v285 = (const void *)_CFXPCCreateCFObjectFromXPCObject(v276);
    v286 = (os_log_s *)qword_95A80;
    BOOL v287 = os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT);
    if (v285)
    {
      if (v287)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_0, v286, OS_LOG_TYPE_DEFAULT, "Set VolumeCurve", buf, 2u);
      }

      sub_22A7C(a1, v285);
      CFRelease(v285);
    }

    else if (v287)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v286, OS_LOG_TYPE_DEFAULT, "Set VolumeCurve with NULL", buf, 2u);
    }
  }

  xpc_object_t v288 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyEURegionBit");
  v289 = v288;
  if (v288)
  {
    if (xpc_get_type(v288) != (xpc_type_t)&_xpc_type_int64)
    {
      v290 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B484(v290, v291, v292, v293, v294, v295, v296, v297);
      }
    }

    *(_BYTE *)(a1 + 2sub_52C5C(v1 - 96) = xpc_int64_get_value(v289);
  }

  xpc_object_t v298 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAllowSCOForTBT");
  v299 = v298;
  if (v298)
  {
    if (xpc_get_type(v298) != (xpc_type_t)&_xpc_type_BOOL)
    {
      v300 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B414(v300, v301, v302, v303, v304, v305, v306, v307);
      }
    }

    BOOL v308 = xpc_BOOL_get_value(v299);
    sub_2479C(a1, v308);
  }

  xpc_object_t v309 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyAllowAutoRoute");
  v310 = v309;
  if (v309)
  {
    if (xpc_get_type(v309) != (xpc_type_t)&_xpc_type_BOOL)
    {
      v311 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B3A4(v311, v312, v313, v314, v315, v316, v317, v318);
      }
    }

    BOOL v319 = xpc_BOOL_get_value(v310);
    sub_21628(a1, v319);
  }

  xpc_object_t v320 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyIsHidden");
  v321 = v320;
  if (v320)
  {
    if (xpc_get_type(v320) != (xpc_type_t)&_xpc_type_BOOL)
    {
      v322 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B334(v322, v323, v324, v325, v326, v327, v328, v329);
      }
    }

    BOOL v330 = xpc_BOOL_get_value(v321);
    sub_218E8(a1, v330);
  }

  xpc_object_t v331 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyUserSelectedDeviceType");
  v332 = v331;
  if (v331)
  {
    if (xpc_get_type(v331) != (xpc_type_t)&_xpc_type_int64)
    {
      v333 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B2C4(v333, v334, v335, v336, v337, v338, v339, v340);
      }
    }

    unsigned __int8 v341 = xpc_int64_get_value(v332);
    sub_219CC(a1, v341);
  }

  xpc_object_t v342 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertySiriUseDeviceMic");
  if (v342)
  {
    BOOL v343 = xpc_BOOL_get_value(v342);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureSiriUseDeviceMic", v343);
  }

  xpc_object_t v344 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyFindMyPlayBack");
  if (v344)
  {
    BOOL v345 = xpc_BOOL_get_value(v344);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureFindMyPlayBack", v345);
  }

  xpc_object_t v346 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyUntrackedSpatial");
  if (v346)
  {
    BOOL v347 = xpc_BOOL_get_value(v346);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureAutomaticNonHeadTrackedSpatialAudio", v347);
  }

  xpc_object_t v348 = xpc_dictionary_get_value(a3, "kBTHostedDSPOffloadSupport");
  v349 = v348;
  if (v348)
  {
    BOOL v350 = xpc_BOOL_get_value(v348);
    sub_24518(a1, @"kBluetoothAudioDeviceFeatureHostedDSPOffload", v350);
    BOOL v351 = xpc_BOOL_get_value(v349);
    sub_21714(a1, v351);
  }

  xpc_object_t v352 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyPersonalizedVolumeDRCInfo");
  if (v352)
  {
    BOOL v353 = xpc_BOOL_get_value(v352);
    sub_217F8(a1, v353);
  }

  xpc_object_t v354 = xpc_dictionary_get_value(a3, "kBTAudioMsgPropertyIsGenuineAirPods");
  v355 = v354;
  if (v354)
  {
    if (xpc_get_type(v354) != (xpc_type_t)&_xpc_type_BOOL)
    {
      v356 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5B254(v356, v357, v358, v359, v360, v361, v362, v363);
      }
    }

    BOOL v364 = xpc_BOOL_get_value(v355);
    sub_2485C((void *)a1, v364);
  }

  string = (char *)xpc_dictionary_get_string(a3, "kBTAudioMsgPropertyGenericName");
  if (string)
  {
    sub_24958((uint64_t *)a1, string);
    v366 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      v367 = *(const char **)(a1 + 592);
      *(_DWORD *)std::string buf = 138412290;
      v373 = v367;
    }
  }

  sub_208C8(a1);
  sub_429B4(*(void *)a1, 1651798886);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 496), (CFDictionaryApplierFunction)sub_249C4, 0LL);
}

void sub_244DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_24518(uint64_t a1, const void *a2, int a3)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 520);
  int v6 = (const void **)&kCFBooleanTrue;
  if (!a3) {
    int v6 = (const void **)&kCFBooleanFalse;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 496), a2, *v6);
  return sub_52C5C(v8);
}

void sub_2458C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_245A0(uint64_t a1, CFDictionaryRef theDict)
{
  if (theDict)
  {
    int v4 = *(const void **)(a1 + 368);
    if (v4) {
      CFRelease(v4);
    }
    MutableCFStringRef Copy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, theDict);
    *(void *)(a1 + 368) = MutableCopy;
    CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)sub_274AC, 0LL);
  }

uint64_t sub_245FC(uint64_t a1)
{
  int v5 = 0;
  uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "PerAppHeadTrackedSetting");
  BOOL v3 = 0;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_277F8(a1, @"global", &v5, &v4);
    BOOL v3 = v5 != 0;
  }

  *(_BYTE *)(a1 + 255) = v3;
  return result;
}

void sub_24668(CFDictionaryRef *a1, const __CFDictionary *a2)
{
  if (a2)
  {
    CFDictionaryRef v4 = a1[47];
    if (v4)
    {
      CFRelease(v4);
      a1[47] = 0LL;
    }

    if (_os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl"))
    {
      a1[47] = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      int v16 = 0;
      sub_26DF4((uint64_t)a1, (_DWORD *)&v18 + 1, &v18, (_DWORD *)&v17 + 1, &v17, &v16);
      int v5 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
      uint64_t v6 = *((void *)*a1 + 1157);
      if (v6 == 1953719151 || v6 == 1952539500)
      {
        int v8 = v5;
        uint64_t v9 = (const void *)sub_6FA0(*((void *)*a1 + 1140));
        CFRetain(v9);
        LODWORD(v10) = HIDWORD(v18);
        LODWORD(v11) = v18;
        LODWORD(v12) = HIDWORD(v17);
        LODWORD(v13) = v17;
        LODWORD(v14) = v16;
        -[BTAudioAVNotificationMonitor updateVolumeForCategories:telephoneVolume:voiceCommandVolume:uid:rampUpDuration:rampDownDuration:]( v8,  "updateVolumeForCategories:telephoneVolume:voiceCommandVolume:uid:rampUpDuration:rampDownDuration:",  v9,  v10,  v11,  v12,  v13,  v14);
      }

      else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
      {
        sub_5BD00();
      }

      CFDictionaryApplyFunction(a1[47], (CFDictionaryApplierFunction)sub_2706C, 0LL);
    }
  }

void sub_2479C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 344) != a2)
  {
    *(_DWORD *)(a1 + 344) = a2;
    sub_429B4(*(void *)a1, 1635017332);
    BOOL v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(a1 + 344);
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Allow SCO for Turn by Turn %d", (uint8_t *)v5, 8u);
    }
  }

void sub_2485C(void *a1, int a2)
{
  if (*((unsigned __int8 *)a1 + 584) != a2)
  {
    *((_BYTE *)a1 + 584) = a2;
    sub_429B4(*a1, 1768382832);
    BOOL v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)a1 + 584)) {
        int v4 = "genuine";
      }
      else {
        int v4 = "non-genuine";
      }
      int v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 16LL))(*a1);
      int v6 = 136446466;
      __int16 v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "AccessoryIsGenuineAirPods set to %{public}s for mAudioObjectID %d",  (uint8_t *)&v6,  0x12u);
    }
  }

uint64_t sub_24958(uint64_t *a1, char *cStr)
{
  int v4 = (const void *)a1[74];
  if (v4)
  {
    CFRelease(v4);
    a1[74] = 0LL;
  }

  a1[74] = (uint64_t)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  return sub_429B4(*a1, 1651795822);
}

uint64_t sub_249B4(uint64_t *a1)
{
  return sub_429B4(*a1, 1651798886);
}

void sub_249C4(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFBooleanGetTypeID())
  {
    int v5 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int Value = CFBooleanGetValue((CFBooleanRef)cf);
      __int16 v7 = "YES";
      if (!Value) {
        __int16 v7 = "NO";
      }
      int v8 = 138412546;
      uint64_t v9 = a1;
      __int16 v10 = 2080;
      double v11 = v7;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Feature: %@ : Support %s", (uint8_t *)&v8, 0x16u);
    }
  }

uint64_t sub_24AB0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) = a2;
  return result;
}

uint64_t sub_24AB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t sub_24AC0(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

void sub_24AC8(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (*(float *)(a1 + 280) == -1.0 || !CFArrayGetCount(*(CFArrayRef *)(a1 + 288)))
  {
    -[NSMutableArray addObject:]( v2,  "addObject:",  +[CBUUID UUIDWithString:](&OBJC_CLASS___CBUUID, "UUIDWithString:", CBUUIDDosimetrySensitivityCharacteristicString));
    -[NSMutableArray addObject:]( v2,  "addObject:",  +[CBUUID UUIDWithString:](&OBJC_CLASS___CBUUID, "UUIDWithString:", CBUUIDDosimetryVolumeCurveCharacteristicString));
    *(void *)(a1 + 304) = -[BTHearingHealthObject initWithUUID:productID:vendorID:EURegionBit:audioDevice:readCharacteristics:]( objc_alloc(&OBJC_CLASS___BTHearingHealthObject),  "initWithUUID:productID:vendorID:EURegionBit:audioDevice:readCharacteristics:",  *(void *)(a1 + 312),  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 56),  *(unsigned __int8 *)(a1 + 296),  *(void *)a1,  v2);
  }
}

void sub_24B8C(void *a1, uint64_t a2, char *a3, void *a4)
{
  if (!strcasecmp(a3, "kBTAudioMsgPropertySoundProfile"))
  {
    sub_3ECB4(qword_962E8, a2, a3, (uint64_t)a4);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySupportedServices"))
  {
    BOOL v8 = xpc_int64_get_value(a4) != 0;
    uint64_t v9 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v8;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "Supported  Mask is %x", (uint8_t *)&v167, 8u);
    }

    *((_DWORD *)a1 + 48) = v8;
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyIncompatibleHidConnected"))
  {
    int value = xpc_BOOL_get_value(a4);
    double v11 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *((unsigned __int8 *)a1 + 216);
      int v167 = 67109376;
      *(_DWORD *)v168 = v13;
      *(_WORD *)&v168[4] = 1024;
      *(_DWORD *)&v168[6] = value;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "HAL received kBTAudioMsgPropertyIncompatibleHidConnected:%u -> %u",  (uint8_t *)&v167,  0xEu);
    }

    if (*((unsigned __int8 *)a1 + 216) != value)
    {
      *((_BYTE *)a1 + 216) = value;
      if (*a1)
      {
        uint64_t v14 = *(void *)(*a1 + 9096LL);
        if (v14)
        {
          if (*(_BYTE *)(v14 + 192)) {
            nullsub_81(v12);
          }
        }
      }
    }

    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyName"))
  {
    string_ptr = xpc_string_get_string_ptr(a4);
    sub_228E8(a1, string_ptr);
    return;
  }

  if (!strcmp(a3, "kBTAudioMsgPropertyLocalStreamState"))
  {
    *((_DWORD *)a1 + 15) = xpc_int64_get_value(a4);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyListenModeSupported"))
  {
    int v16 = xpc_int64_get_value(a4);
    sub_203D4(a1, v16);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyInEarStatus"))
  {
    __int16 v17 = xpc_int64_get_value(a4);
    int v18 = v17;
    int v19 = HIBYTE(v17);
    int v20 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109376;
      *(_DWORD *)v168 = v18;
      *(_WORD *)&v168[4] = 1024;
      *(_DWORD *)&v168[6] = v19;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "In Ear status change received from BTServer: primaryStatus %u, secondaryStatus %u",  (uint8_t *)&v167,  0xEu);
    }

    sub_21078(a1, v18, v19);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyFixedMicRole"))
  {
    int v21 = xpc_int64_get_value(a4);
    uint64_t v22 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v21;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "Fixed mic role received from BTServer, role %u",  (uint8_t *)&v167,  8u);
    }

    sub_21448(a1, v21);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyDOAPSupported"))
  {
    BOOL v23 = xpc_BOOL_get_value(a4);
    sub_21AB0(a1, v23);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyPrimaryBudSide"))
  {
    int v24 = xpc_int64_get_value(a4);
    uint64_t v25 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v24;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "Primary bud side received from BTServer, budside %u",  (uint8_t *)&v167,  8u);
    }

    sub_21280(a1, v24);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyInEarDetection"))
  {
    BOOL v26 = xpc_BOOL_get_value(a4);
    uint64_t v27 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v28 = "not supported";
      if (v26) {
        xpc_object_t v28 = "supported";
      }
      int v167 = 136446210;
      *(void *)v168 = v28;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_DEFAULT, "In Ear detection  %{public}s", (uint8_t *)&v167, 0xCu);
    }

    sub_200C8(a1, v26);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyExtentedHfpVolumeRange"))
  {
    BOOL v29 = xpc_BOOL_get_value(a4);
    sub_201BC(a1, v29);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyInEarEnabled"))
  {
    BOOL v30 = xpc_BOOL_get_value(a4);
    uint64_t v31 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = "disabled";
      if (v30) {
        uint64_t v32 = "enabled";
      }
      int v167 = 136446210;
      *(void *)v168 = v32;
      _os_log_impl(&dword_0, v31, OS_LOG_TYPE_DEFAULT, "In Ear enabled %{public}s", (uint8_t *)&v167, 0xCu);
    }

    sub_202D0(a1, v30);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyListenMode"))
  {
    int v33 = xpc_int64_get_value(a4);
    sub_21364(a1, v33);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyOwnershipHijack"))
  {
    BOOL v34 = xpc_BOOL_get_value(a4);
    uint64_t v35 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = "true";
      if (v34) {
        uint64_t v36 = "false";
      }
      int v167 = 136446210;
      *(void *)v168 = v36;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "Received hijack audio route request ownership will be set to %{public}s",  (uint8_t *)&v167,  0xCu);
    }

    (*(void (**)(void, BOOL, uint64_t))(*(void *)*a1 + 1312LL))(*a1, !v34, 1LL);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySoftwareVolumeSupported"))
  {
    *((_BYTE *)a1 + 274) = xpc_BOOL_get_value(a4);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySupportRemoteVolumeChange"))
  {
    *((_BYTE *)a1 + 276) = xpc_BOOL_get_value(a4);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyLiveListenSupported"))
  {
    BOOL v37 = xpc_BOOL_get_value(a4);
    sub_2152C((uint64_t)a1, v37);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyOneBudANCMode"))
  {
    unsigned __int8 v38 = xpc_int64_get_value(a4);
    sub_26A00(a1, v38);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyDosimetrySensitivity"))
  {
    int64_t v39 = xpc_int64_get_value(a4);
    sub_22980((float *)a1, (float)v39);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyDosimetryVolumeCurve"))
  {
    int v40 = (const void *)_CFXPCCreateCFObjectFromXPCObject(a4);
    BOOL v41 = (os_log_s *)qword_95A80;
    BOOL v42 = os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT);
    if (!v40)
    {
      if (!v42) {
        return;
      }
      LOWORD(v167) = 0;
      uint64_t v47 = "Update VolumeCurve with NULL";
      uint64_t v48 = v41;
      uint32_t v49 = 2;
      goto LABEL_119;
    }

    if (v42)
    {
      LOWORD(v167) = 0;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEFAULT, "Update VolumeCurve", (uint8_t *)&v167, 2u);
    }

    sub_22A7C((CFIndex)a1, v40);
    uint64_t v43 = (const __CFDictionary *)v40;
LABEL_112:
    CFRelease(v43);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyEURegionBit"))
  {
    unsigned __int8 v44 = xpc_int64_get_value(a4);
    sub_22C08(a1, v44);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyRemoteStreamState"))
  {
    unsigned int v45 = xpc_int64_get_value(a4);
    uint64_t v46 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v45;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEFAULT,  "Stream state change received from BTServer, state %u",  (uint8_t *)&v167,  8u);
    }

    sub_224E8((uint64_t)a1, v45);
    return;
  }

  if (!strcmp(a3, "kBTAudioMsgPropertyAllowSCOForTBT"))
  {
    BOOL v50 = xpc_BOOL_get_value(a4);
    sub_2479C((uint64_t)a1, v50);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyTipiConnected"))
  {
    BOOL v51 = xpc_BOOL_get_value(a4);
    xpc_object_t v52 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = "Disconnected";
      if (v51) {
        uint64_t v53 = "Connected";
      }
      int v167 = 136446210;
      *(void *)v168 = v53;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_DEFAULT,  "Smart Route: Tipi Connection Changed to %{public}s",  (uint8_t *)&v167,  0xCu);
    }

    *((_BYTE *)a1 + 348) = v51;
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyWSIsGuestDevice"))
  {
    BOOL v54 = xpc_BOOL_get_value(a4);
    sub_26AD4((uint64_t)a1, v54);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySupportSpatialAudio"))
  {
    BOOL v55 = xpc_BOOL_get_value(a4);
    uint64_t v56 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = "not supported";
      if (v55) {
        uint64_t v57 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v57;
      _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEFAULT, "Spatial Audio is %s", (uint8_t *)&v167, 0xCu);
    }

    sub_24518((uint64_t)a1, @"kBluetoothAudioDeviceFeatureHeadTrackedSpatialAudio", v55);
    sub_21D6C(a1, v55);
    goto LABEL_148;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAllowSoundProfile"))
  {
    BOOL v58 = xpc_BOOL_get_value(a4);
    uint64_t v59 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v60 = "not allowed";
      if (v58) {
        uint64_t v60 = "allowed";
      }
      int v167 = 136315138;
      *(void *)v168 = v60;
      _os_log_impl(&dword_0, v59, OS_LOG_TYPE_DEFAULT, "Spatial Profile is %s", (uint8_t *)&v167, 0xCu);
    }

    sub_21F54(a1, v58);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySoundProfileEnhancedTuning"))
  {
    BOOL v61 = xpc_BOOL_get_value(a4);
    __int16 v62 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v63 = "not Set";
      if (v61) {
        xpc_object_t v63 = "Set";
      }
      int v167 = 136315138;
      *(void *)v168 = v63;
      _os_log_impl(&dword_0, v62, OS_LOG_TYPE_DEFAULT, "Spatial Profile Enhanced Tuning  %s", (uint8_t *)&v167, 0xCu);
    }

    sub_22038(a1, v61);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySupportHighQualityBiDirectionalAudio"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    uint64_t v65 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v66 = "not supported";
      if (v64) {
        uint64_t v66 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v66;
      _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEFAULT,  "BT High Quality BiDirectional Audio is %s",  (uint8_t *)&v167,  0xCu);
    }

    *((_BYTE *)a1 + 237) = v64;
    uint64_t v67 = @"kBluetoothAudioDeviceFeatureHighQualityBiDirectionalAudio";
    goto LABEL_147;
  }

  if (!strcmp(a3, "kBTAudioMsgPropertyTipiSupported"))
  {
    BOOL v70 = xpc_BOOL_get_value(a4);
    *((_BYTE *)a1 + 250) = v70;
    uint64_t v71 = qword_95A80;
    if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v72 = "not Supported";
    if (v70) {
      int v72 = "Supported";
    }
    int v167 = 136315138;
    *(void *)v168 = v72;
    uint64_t v47 = "TiPi Capable update to %s";
    goto LABEL_154;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySupportSoundProfile"))
  {
    BOOL v73 = xpc_BOOL_get_value(a4);
    sub_24518((uint64_t)a1, @"kBluetoothAudioDeviceFeatureCustomHRTF", v73);
    sub_21C90(a1, v73);
LABEL_172:
    sub_429B4(*a1, 1651798886);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAdaptiveVolume"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    CFStringRef v74 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v75 = "not supported";
      if (v64) {
        uint64_t v75 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v75;
      _os_log_impl(&dword_0, v74, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: feature %s", (uint8_t *)&v167, 0xCu);
    }

    *((_BYTE *)a1 + 228) = v64 & _os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl");
    uint64_t v67 = @"kBluetoothAudioDeviceFeatureAdaptiveVolume";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAdaptiveVolumeMode"))
  {
    char v76 = xpc_int64_get_value(a4);
    uint64_t v77 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      if (v76 == 1LL) {
        uint64_t v78 = "enabled";
      }
      else {
        uint64_t v78 = "disabled";
      }
      int v167 = 136315138;
      *(void *)v168 = v78;
      _os_log_impl(&dword_0, v77, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: Configuration %s", (uint8_t *)&v167, 0xCu);
    }

    *((_BYTE *)a1 + 229) = v76;
    uint64_t v79 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
    if (v79) {
      -[BTAudioAVNotificationMonitor personalizedVolumeEnabled:](v79, "personalizedVolumeEnabled:", v76 == 1LL);
    }
    uint64_t v68 = *a1;
    int v69 = 1633973868;
    goto LABEL_149;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyMuteControl"))
  {
    BOOL v80 = xpc_BOOL_get_value(a4);
    uint64_t v81 = @"kBluetoothAudioDeviceFeatureMuteControl";
LABEL_171:
    sub_24518((uint64_t)a1, v81, v80);
    goto LABEL_172;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyConversationDetect"))
  {
    BOOL v80 = xpc_BOOL_get_value(a4);
    uint64_t v81 = @"kBluetoothAudioDeviceFeatureConversationDetect";
    goto LABEL_171;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAllowSpatialAudio"))
  {
    BOOL v82 = xpc_BOOL_get_value(a4);
    xpc_object_t v83 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v84 = "not Allowed";
      if (v82) {
        __int128 v84 = "Allowed";
      }
      int v167 = 136315138;
      *(void *)v168 = v84;
      _os_log_impl(&dword_0, v83, OS_LOG_TYPE_DEFAULT, "Spatial Audio is %s", (uint8_t *)&v167, 0xCu);
    }

    sub_2211C(a1, v82);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyForegroundApp"))
  {
    if (xpc_get_type(a4) == (xpc_type_t)&_xpc_type_string) {
      goto LABEL_182;
    }
    xpc_object_t v85 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
      sub_5BD58(v85, v86, v87, v88, v89, v90, v91, v92);
    }
    if (!sub_52814())
    {
LABEL_182:
      uint64_t v93 = (const void *)a1[17];
      if (v93) {
        CFRelease(v93);
      }
      uint64_t v94 = _CFXPCCreateCFObjectFromXPCObject(a4);
      a1[17] = v94;
      uint64_t v71 = qword_95A80;
      if (v94)
      {
        uint64_t v95 = v94;
        if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        int v167 = 138412290;
        *(void *)v168 = v95;
        uint64_t v47 = "BTHAL got kBTAudioMsgPropertyForegroundApp: %@";
        goto LABEL_154;
      }

      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
        sub_5BD2C();
      }
      return;
    }

    goto LABEL_290;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySpatialPerAppModeMap"))
  {
    if (xpc_get_type(a4) != (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_object_t v96 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BDC8(v96, v97, v98, v99, v100, v101, v102, v103);
      }
    }

    uint64_t v104 = _CFXPCCreateCFObjectFromXPCObject(a4);
    if (!v104) {
      return;
    }
    uint64_t v105 = (const __CFDictionary *)v104;
    int v106 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = CFDictionaryGetCount(v105);
      _os_log_impl(&dword_0, v106, OS_LOG_TYPE_DEFAULT, "Per App Spatial information : %d", (uint8_t *)&v167, 8u);
    }

    sub_245A0((uint64_t)a1, v105);
LABEL_203:
    uint64_t v43 = v105;
    goto LABEL_112;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAdaptiveVolumeMap"))
  {
    if (xpc_get_type(a4) != (xpc_type_t)&_xpc_type_dictionary)
    {
      uint64_t v107 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
        sub_5BDC8(v107, v108, v109, v110, v111, v112, v113, v114);
      }
    }

    uint64_t v115 = _CFXPCCreateCFObjectFromXPCObject(a4);
    if (!v115) {
      return;
    }
    uint64_t v105 = (const __CFDictionary *)v115;
    xpc_object_t v116 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = CFDictionaryGetCount(v105);
      _os_log_impl(&dword_0, v116, OS_LOG_TYPE_DEFAULT, "Adaptive Volume information: %d", (uint8_t *)&v167, 8u);
    }

    sub_24668((CFDictionaryRef *)a1, v105);
    goto LABEL_203;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyDigitalCrownSupported"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    uint64_t v117 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v118 = "not supported";
      if (v64) {
        __int128 v118 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v118;
      _os_log_impl(&dword_0, v117, OS_LOG_TYPE_DEFAULT, "Digital Crown is %s", (uint8_t *)&v167, 0xCu);
    }

    *((_BYTE *)a1 + 217) = v64;
    uint64_t v67 = @"kBluetoothAudioDeviceFeatureDigitalCrown";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyBudSideLoudnessEqControlSupported"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    uint64_t v119 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v120 = "not supported";
      if (v64) {
        uint64_t v120 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v120;
      _os_log_impl(&dword_0, v119, OS_LOG_TYPE_DEFAULT, "Bud side loudness EQ control is %s", (uint8_t *)&v167, 0xCu);
    }

    uint64_t v67 = @"kBluetoothAudioDeviceFeatureBudSideLoudnessEqControlSupport";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyBudSideLoudnessEqEnabled"))
  {
    BOOL v121 = xpc_BOOL_get_value(a4);
    uint64_t v122 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v123 = "disabled";
      if (v121) {
        uint64_t v123 = "enabled";
      }
      int v167 = 136315138;
      *(void *)v168 = v123;
      _os_log_impl(&dword_0, v122, OS_LOG_TYPE_DEFAULT, "Bud Side Loudness EQ is %s", (uint8_t *)&v167, 0xCu);
    }

    *((_BYTE *)a1 + 218) = v121;
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyUWBSStereoSupport"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    uint64_t v124 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v125 = "not supported";
      if (v64) {
        uint64_t v125 = "supported";
      }
      int v167 = 136315138;
      *(void *)v168 = v125;
      _os_log_impl(&dword_0, v124, OS_LOG_TYPE_DEFAULT, "Stereo HFP is %s", (uint8_t *)&v167, 0xCu);
    }

    uint64_t v67 = @"kBluetoothAudioDeviceFeatureStereoHfpSupport";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyUserSelectedDeviceType"))
  {
    int v126 = xpc_int64_get_value(a4);
    xpc_object_t v127 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v126;
      _os_log_impl(&dword_0, v127, OS_LOG_TYPE_DEFAULT, "User Device Type Update: %d", (uint8_t *)&v167, 8u);
    }

    sub_219CC((uint64_t)a1, v126);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAccessHeadTrack"))
  {
    BOOL v128 = xpc_BOOL_get_value(a4);
    *((_BYTE *)a1 + 128) = v128;
    __int128 v129 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v128;
      _os_log_impl( &dword_0,  v129,  OS_LOG_TYPE_DEFAULT,  "BTHAL got kBTAudioMsgPropertyAccessHeadTrack:%u",  (uint8_t *)&v167,  8u);
    }

    sub_429B4(*a1, 1752457571);
    sub_429B4(*a1, 1752462196);
    sub_429B4(*a1, 1752457590);
    sub_429B4(*a1, 1936747876);
    sub_429B4(*a1, 1936745318);
    sub_429B4(*a1, 1936744822);
    sub_429B4(*a1, 1936749430);
    uint64_t v68 = *a1;
    int v69 = 1936746095;
    goto LABEL_149;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySpatialAudioAppBasedMode"))
  {
    if (xpc_get_type(a4) == (xpc_type_t)&_xpc_type_dictionary) {
      goto LABEL_236;
    }
    uint64_t v130 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_FAULT)) {
      sub_5BDC8(v130, v131, v132, v133, v134, v135, v136, v137);
    }
    if (!sub_52814())
    {
LABEL_236:
      uint64_t v138 = _CFXPCCreateCFObjectFromXPCObject(a4);
      __int128 v139 = (os_log_s *)qword_95A80;
      if (!v138)
      {
        if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
          sub_5BE38();
        }
        return;
      }

      uint64_t v105 = (const __CFDictionary *)v138;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v167) = 0;
        _os_log_impl( &dword_0,  v139,  OS_LOG_TYPE_DEFAULT,  "kBTAudioMsgPropertySpatialAudioAppBasedMode get Dict",  (uint8_t *)&v167,  2u);
      }

      __int128 v140 = (const __CFNumber *)CFDictionaryGetValue(v105, @"kBTAudioMsgPropertySpatialMode");
      uint64_t v141 = (const __CFString *)CFDictionaryGetValue(v105, @"kBTAudioMsgPropertySpatialBundleID");
      CFBooleanRef v142 = (CFBooleanRef)CFDictionaryGetValue(v105, @"kBTAudioMsgPropertyHeadTrack");
      if (v141 && v140 && v142)
      {
        int v167 = 0;
        BOOL v143 = v142 == kCFBooleanTrue;
        CFNumberGetValue(v140, kCFNumberIntType, &v167);
        sub_4F848((uint64_t *)*a1, v141, v167, v143);
        sub_245FC((uint64_t)a1);
      }

      goto LABEL_203;
    }

LABEL_290:
    abort();
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyAllowAutoRoute"))
  {
    BOOL v144 = xpc_BOOL_get_value(a4);
    uint64_t v145 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v144;
      _os_log_impl(&dword_0, v145, OS_LOG_TYPE_DEFAULT, "Updated Auto Route Support : %d", (uint8_t *)&v167, 8u);
    }

    sub_21628((uint64_t)a1, v144);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyIsHidden"))
  {
    BOOL v146 = xpc_BOOL_get_value(a4);
    uint64_t v147 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v146;
      _os_log_impl(&dword_0, v147, OS_LOG_TYPE_DEFAULT, "Updated AudioRouteHidden : %d", (uint8_t *)&v167, 8u);
    }

    sub_218E8((uint64_t)a1, v146);
    return;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertySiriUseDeviceMic"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    xpc_object_t v148 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v64;
      _os_log_impl(&dword_0, v148, OS_LOG_TYPE_DEFAULT, "Updated Siri Use device Mic : %d", (uint8_t *)&v167, 8u);
    }

    uint64_t v67 = @"kBluetoothAudioDeviceFeatureSiriUseDeviceMic";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyFindMyPlayBack"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    v149 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v64;
      _os_log_impl(&dword_0, v149, OS_LOG_TYPE_DEFAULT, "Updated Find My Playback : %d", (uint8_t *)&v167, 8u);
    }

    uint64_t v67 = @"kBluetoothAudioDeviceFeatureFindMyPlayBack";
    goto LABEL_147;
  }

  if (!strcasecmp(a3, "kBTAudioMsgPropertyUntrackedSpatial"))
  {
    BOOL v64 = xpc_BOOL_get_value(a4);
    __int16 v150 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v64;
      _os_log_impl( &dword_0,  v150,  OS_LOG_TYPE_DEFAULT,  "Updated Automatic Non HeadTracked Spatial : %d",  (uint8_t *)&v167,  8u);
    }

    uint64_t v67 = @"kBluetoothAudioDeviceFeatureAutomaticNonHeadTrackedSpatialAudio";
LABEL_147:
    sub_24518((uint64_t)a1, v67, v64);
LABEL_148:
    uint64_t v68 = *a1;
    int v69 = 1651798886;
LABEL_149:
    sub_429B4(v68, v69);
    return;
  }

  if (!strcasecmp(a3, "kBTHostedDSPOffloadSupport"))
  {
    BOOL v151 = xpc_BOOL_get_value(a4);
    uint64_t v152 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v167 = 67109120;
      *(_DWORD *)v168 = v151;
      _os_log_impl( &dword_0,  v152,  OS_LOG_TYPE_DEFAULT,  "Updated Hosted DSP Offload Support Property: %d",  (uint8_t *)&v167,  8u);
    }

    sub_24518((uint64_t)a1, @"kBluetoothAudioDeviceFeatureHostedDSPOffload", v151);
    sub_429B4(*a1, 1651798886);
    sub_21714((uint64_t)a1, v151);
  }

  else
  {
    if (strcasecmp(a3, "kBTAudioMsgPropertyIsGenuineAirPods"))
    {
      if (strcasecmp(a3, "kBTAudioMsgPropertyGenericName"))
      {
        if (strcasecmp(a3, "kBTAudioMsgPropertyTransportType"))
        {
          if (!strcasecmp(a3, "kBTAudioMsgPropertyLowLatencyGameMode"))
          {
            if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
            {
              BOOL v160 = xpc_BOOL_get_value(a4);
              BOOL v161 = (os_log_s *)qword_95A80;
              if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
              {
                if (*((_BYTE *)a1 + 221)) {
                  v162 = "running";
                }
                else {
                  v162 = "not running";
                }
                if (v160) {
                  xpc_object_t v163 = "running";
                }
                else {
                  xpc_object_t v163 = "not running";
                }
                BOOL v164 = *(_BYTE **)(*a1 + 9096LL);
                if (v164)
                {
                  if (v164[192]) {
                    LODWORD(v164) = (*(uint64_t (**)(_BYTE *))(*(void *)v164 + 984LL))(v164);
                  }
                  else {
                    LODWORD(v164) = 0;
                  }
                }

                int v167 = 136315650;
                *(void *)v168 = v162;
                *(_WORD *)&v168[8] = 2080;
                v169 = v163;
                __int16 v170 = 1024;
                int v171 = (int)v164;
                _os_log_impl( &dword_0,  v161,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game state: %s->%s, HFP IO: %d",  (uint8_t *)&v167,  0x1Cu);
              }

              sub_50160(*a1, v160);
            }
          }

          else if (!strcasecmp(a3, "kBTAudioMsgPropertyPersonalizedVolumeDRCInfo"))
          {
            BOOL v165 = xpc_BOOL_get_value(a4);
            v166 = (os_log_s *)qword_95A80;
            if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
            {
              int v167 = 67109120;
              *(_DWORD *)v168 = v165;
              _os_log_impl( &dword_0,  v166,  OS_LOG_TYPE_DEFAULT,  "Updated Personalized Volume DRC enablement to: %d",  (uint8_t *)&v167,  8u);
            }

            sub_217F8((uint64_t)a1, v165);
          }

          else if (a2)
          {
            (*(void (**)(uint64_t, char *, void *))(*(void *)a2 + 264LL))(a2, a3, a4);
          }

          return;
        }

        unsigned __int8 v158 = xpc_int64_get_value(a4);
        *((_BYTE *)a1 + 219) = v158;
        uint64_t v159 = qword_95A80;
        if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        int v167 = 67109120;
        *(_DWORD *)v168 = v158;
        uint64_t v47 = "Transport type update: %d";
        uint64_t v48 = (os_log_s *)v159;
        uint32_t v49 = 8;
LABEL_119:
        _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEFAULT, v47, (uint8_t *)&v167, v49);
        return;
      }

      uint64_t v156 = (char *)xpc_string_get_string_ptr(a4);
      if (!v156) {
        return;
      }
      uint64_t v157 = v156;
      sub_24958(a1, v156);
      uint64_t v71 = qword_95A80;
      if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v167 = 136446210;
      *(void *)v168 = v157;
      uint64_t v47 = "Device Generic Name : %{public}s";
LABEL_154:
      uint64_t v48 = (os_log_s *)v71;
      uint32_t v49 = 12;
      goto LABEL_119;
    }

    BOOL v153 = xpc_BOOL_get_value(a4);
    uint64_t v154 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v155 = "non-genuine";
      if (v153) {
        uint64_t v155 = "genuine";
      }
      int v167 = 136446210;
      *(void *)v168 = v155;
      _os_log_impl(&dword_0, v154, OS_LOG_TYPE_DEFAULT, "Is Genuine AirPods : %{public}s", (uint8_t *)&v167, 0xCu);
    }

    sub_2485C(a1, v153);
  }

void sub_26A00(_BYTE *a1, int a2)
{
  if (a1[279] != a2)
  {
    a1[279] = a2;
    CFTypeID v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void))(**(void **)a1 + 16LL))(*(void *)a1);
      v6[0] = 67109376;
      v6[1] = a2;
      __int16 v7 = 1024;
      int v8 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "mOneBudANCMode set to %d for mAudioObjectID %d",  (uint8_t *)v6,  0xEu);
    }
  }

void sub_26AD4(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 329) != a2)
  {
    *(_BYTE *)(a1 + 329) = a2;
    BOOL v3 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeID v4 = "is not guest";
      if (a2) {
        CFTypeID v4 = "is guest";
      }
      int v5 = 136315138;
      int v6 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter From BT device %s", (uint8_t *)&v5, 0xCu);
    }
  }

uint64_t sub_26B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 264LL))(a2, a3, a4);
  }
  return result;
}

void sub_26BB8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AdvancedHandsfreeGamingOnly"))
    {
      uint64_t v3 = 2LL;
LABEL_6:
      *(_DWORD *)(a1 + 224) = v3;
      goto LABEL_8;
    }

    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AdvancedHandsfreeEverywhere"))
    {
      uint64_t v3 = 1LL;
      goto LABEL_6;
    }
  }

  uint64_t v3 = 0LL;
  *(_DWORD *)(a1 + 224) = 0;
LABEL_8:
  CFTypeID v4 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = off_82208[v3];
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v8 = 0LL;
    sub_A248(__p, v5);
    if (v8 >= 0) {
      int v6 = __p;
    }
    else {
      int v6 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    __int16 v10 = v6;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Advanced Handsfree Audio Support : %s", buf, 0xCu);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }

void *sub_26CE8@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 2) {
    uint64_t v2 = "Unknown";
  }
  else {
    uint64_t v2 = off_82208[a1];
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_A248(a2, v2);
}

void sub_26D18(uint64_t a1, int a2)
{
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    *(_BYTE *)(a1 + 220) = a2;
    CFTypeID v4 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Low Latency Game Support set to %d", (uint8_t *)v5, 8u);
    }
  }

BOOL sub_26DD4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 220) && *(_DWORD *)(a1 + 224) != 0;
}

void sub_26DF4(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v6 = *(void **)(a1 + 376);
  if (v6)
  {
    uint64_t v8 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v29) = [v6 count];
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: dict count %u", buf, 8u);
    }

    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id obj = [v6 allKeys];
    id v10 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v25;
      do
      {
        for (CFIndex i = 0LL; i != v11; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v25 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
          objc_msgSend(objc_msgSend(v6, "valueForKey:", v14), "floatValue");
          -[NSMutableString appendFormat:](v9, "appendFormat:", @"%@ : %f\n", v14, v15);
          int v16 = a2;
          if (([v14 isEqualToString:@"kCBMsgArgParamAutoVolumeMediaTarget"] & 1) == 0)
          {
            int v16 = a3;
            if (([v14 isEqualToString:@"kCBMsgArgParamAutoVolumeTelephonyTarget"] & 1) == 0)
            {
              int v16 = a4;
              if (([v14 isEqualToString:@"kCBMsgArgParamAutoVolumeVoiceTarget"] & 1) == 0)
              {
                int v16 = a5;
                if (([v14 isEqualToString:@"kCBMsgArgParamAutoVolumeRampUpRate"] & 1) == 0)
                {
                  int v16 = a6;
                  if (![v14 isEqualToString:@"kCBMsgArgParamAutoVolumeRampDownRate"]) {
                    continue;
                  }
                }
              }
            }
          }

          objc_msgSend(objc_msgSend(v6, "valueForKey:", v14), "floatValue");
          *int v16 = v17;
        }

        id v11 = [obj countByEnumeratingWithState:&v24 objects:v30 count:16];
      }

      while (v11);
    }

    int v18 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      BOOL v29 = v9;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "GetAutoVolumeTargets: %@", buf, 0xCu);
    }
  }

void sub_2706C(int a1, CFTypeRef cf)
{
  int v11 = 0;
  int valuePtr = 0;
  unsigned __int16 v10 = 0;
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 == CFDictionaryGetTypeID())
  {
    int Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamAutoVolumeMediaTarget");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 2);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BF14();
    }

    int v5 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamAutoVolumeTelephonyTarget");
    if (v5)
    {
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BEE8();
    }

    int v6 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamAutoVolumeVoiceTarget");
    if (v6)
    {
      CFNumberGetValue(v6, kCFNumberSInt32Type, (char *)&v11 + 2);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BEBC();
    }

    __int16 v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamAutoVolumeRampUpRate");
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt32Type, &v11);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BE90();
    }

    uint64_t v8 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamAutoVolumeRampDownRate");
    if (v8)
    {
      CFNumberGetValue(v8, kCFNumberSInt32Type, &v10);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BE64();
    }

    uint64_t v9 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67110144;
      int v14 = HIWORD(valuePtr);
      __int16 v15 = 1024;
      int v16 = (unsigned __int16)valuePtr;
      __int16 v17 = 1024;
      int v18 = HIWORD(v11);
      __int16 v19 = 1024;
      int v20 = (unsigned __int16)v11;
      __int16 v21 = 1024;
      int v22 = v10;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "Auto Volume mode: mediaTarget %u, telephonyTarget %u, voiceTarget %u, rampUpRate %u, rampDownRate %u",  buf,  0x20u);
    }
  }

uint64_t sub_272BC(uint64_t *a1, float a2, float a3)
{
  uint64_t v6 = *a1;
  __int16 v7 = *(_BYTE **)(*a1 + 9088);
  float v8 = 0.0;
  if (v7
    && v7[192]
    && (v9 = (*(float (**)(_BYTE *))(*(void *)v7 + 912LL))(v7), v8 = v9, uint64_t v6 = *a1, v9 != a2))
  {
    BOOL v10 = a2 == 0.0;
    BOOL v11 = a2 != 0.0;
    if (v9 == 0.0) {
      BOOL v10 = 0;
    }
    else {
      BOOL v11 = 0;
    }
    int v12 = v11 || v10;
    uint64_t v13 = *(void *)(v6 + 9088);
    if (*(_BYTE *)(v13 + 192)) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0LL;
    }
    (*(void (**)(uint64_t, void, float))(*(void *)v14 + 472LL))(v14, 0LL, a2);
    uint64_t v6 = *a1;
  }

  else
  {
    int v12 = 0;
  }

  __int16 v15 = *(_BYTE **)(v6 + 9096);
  if (v15 && v15[192])
  {
    float v16 = (*(float (**)(_BYTE *))(*(void *)v15 + 912LL))(v15);
    if (v16 == a3)
    {
      sub_340E8();
      goto LABEL_28;
    }

    float v8 = v16;
    BOOL v17 = a3 == 0.0;
    BOOL v18 = a3 != 0.0;
    if (v16 == 0.0) {
      BOOL v17 = 0;
    }
    else {
      BOOL v18 = 0;
    }
    int v12 = v18 || v17;
    if (*(_BYTE *)(*(void *)(*a1 + 9096) + 192LL)) {
      uint64_t v19 = *(void *)(*a1 + 9096);
    }
    else {
      uint64_t v19 = 0LL;
    }
    (*(void (**)(uint64_t, void, float))(*(void *)v19 + 472LL))(v19, 0LL, a3);
  }

  int v20 = sub_340E8();
  if (v12 && v20)
  {
    __int16 v21 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 134218240;
      double v24 = v8;
      __int16 v25 = 2048;
      double v26 = a2;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "Updating Mute changed %f->%f", (uint8_t *)&v23, 0x16u);
    }

    sub_4CD38(*a1, 1836414053);
  }

LABEL_28:
  uint64_t result = *(void *)(*a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 1128LL))(result);
  }
  return result;
}

  BOOL v18 = sub_3C89C(a1, a2, v8, v9, a5);
LABEL_32:
  sub_52C5C(v20);
  return v18;
}

    qword_962D0 = v40;
    int64_t v39 = &dword_962D8;
    unsigned __int8 v38 = 3;
    goto LABEL_29;
  }

  if ((_DWORD)v5 == 80)
  {
    int v40 = 0x400000004LL;
    goto LABEL_28;
  }

  if ((_DWORD)v5 == 90)
  {
    qword_962D0 = 0x300000002LL;
    dword_962D8 = 3;
    int64_t v39 = &dword_962DC;
    unsigned __int8 v38 = 4;
    goto LABEL_29;
  }

  if ((_DWORD)v5 != 120)
  {
LABEL_31:
    mdct_destroy((uint64_t)v2);
    return 0LL;
  }

  qword_962D0 = 0x300000002LL;
  unsigned __int8 v38 = 4;
  dword_962D8 = 4;
  int64_t v39 = &dword_962DC;
LABEL_29:
  *int64_t v39 = 5;
  v2[11] = (int32x2_t)hfft_create((int *)&qword_962D0, v38);
  return v2;
}

void sub_274AC(uint64_t a1, CFTypeRef cf)
{
  int valuePtr = 1;
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFDictionaryGetTypeID())
  {
    int Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamSpatialMode");
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }

    else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
    {
      sub_5BF6C();
    }

    uint64_t v6 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"kCBMsgArgParamSpatialHeadTracking");
    if (v6)
    {
      BOOL v7 = CFBooleanGetValue(v6) != 0;
    }

    else
    {
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
        sub_5BF40();
      }
      BOOL v7 = 1;
    }

    float v8 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412802;
      uint64_t v11 = a1;
      __int16 v12 = 1024;
      int v13 = valuePtr;
      __int16 v14 = 1024;
      BOOL v15 = v7;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio Mode :BundleID %@, spatialMode %u, headTrack %u",  buf,  0x18u);
    }
  }

void sub_27618(uint64_t a1, const __CFString *a2, int a3, int a4)
{
  int valuePtr = a3;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFStringRef Copy = CFStringCreateCopy(kCFAllocatorDefault, a2);
  float v9 = &kCFBooleanTrue;
  if (!a4) {
    float v9 = &kCFBooleanFalse;
  }
  CFBooleanRef v10 = *v9;
  uint64_t v11 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412802;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = valuePtr;
    __int16 v17 = 1024;
    int v18 = a4;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Update Per App Config BundleID = %@  Mode = %d Head Track = %d",  buf,  0x18u);
  }

  *(_OWORD *)std::string buf = off_821E0;
  values[0] = v7;
  values[1] = v10;
  CFDictionaryRef v12 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)buf,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  int v13 = *(__CFDictionary **)(a1 + 368);
  if (v13)
  {
    CFDictionarySetValue(v13, Copy, v12);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 368), (CFDictionaryApplierFunction)sub_274AC, 0LL);
    if (!v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
  {
    if (!v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  sub_5BF98();
  if (v7) {
LABEL_10:
  }
    CFRelease(v7);
LABEL_11:
  if (v12) {
    CFRelease(v12);
  }
  if (Copy) {
    CFRelease(Copy);
  }
}

_BYTE *sub_277F8(uint64_t a1, void *a2, _DWORD *a3, BOOL *a4)
{
  *a3 = 1;
  *a4 = 1;
  *a4 = *(_BYTE *)(a1 + 128);
  if (![a2 caseInsensitiveCompare:@"com.apple.facetime"])
  {
    *a3 = 2;
    *a4 = 0;
    *a4 = _os_feature_enabled_impl("CoreLocation", "Zelda");
  }

  float v8 = *(const __CFDictionary **)(a1 + 368);
  if (v8)
  {
    if (CFDictionaryContainsKey(v8, a2))
    {
      int Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 368), a2);
      CFTypeID v10 = CFGetTypeID(Value);
      if (v10 == CFDictionaryGetTypeID())
      {
        uint64_t v11 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)Value, @"kCBMsgArgParamSpatialMode");
        if (v11)
        {
          CFNumberGetValue(v11, kCFNumberSInt32Type, a3);
        }

        else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
        {
          sub_5BFF0();
        }

        CFDictionaryRef v12 = (const __CFBoolean *)CFDictionaryGetValue( (CFDictionaryRef)Value,  @"kCBMsgArgParamSpatialHeadTracking");
        if (v12)
        {
          BOOL v13 = CFBooleanGetValue(v12) != 0;
          *a4 = v13;
          if (!*(_BYTE *)(a1 + 128)) {
            BOOL v13 = 0;
          }
          *a4 = v13;
        }

        else if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR))
        {
          sub_5BFC4();
        }
      }
    }
  }

  return sub_2796C((_BYTE *)a1, a2, a3, a4);
}

_BYTE *sub_2796C(_BYTE *result, void *a2, _DWORD *a3, _BYTE *a4)
{
  CFNumberRef v7 = result;
  if ((result[237] || (uint64_t result = (_BYTE *)_os_feature_enabled_impl("CoreLocation", "Link"), (_DWORD)result)) && v7[230])
  {
    uint64_t v8 = *(void *)(*(void *)v7 + 9256LL);
  }

  else
  {
    uint64_t v8 = *(void *)(*(void *)v7 + 9256LL);
    if (v8 == 1953719151)
    {
LABEL_8:
      *a4 = 0;
      goto LABEL_9;
    }
  }

  if (v8 == 1952539500 && v7[272]) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7[129]) {
    goto LABEL_13;
  }
  if (!a2 || (uint64_t result = [a2 caseInsensitiveCompare:@"com.apple.facetime"]) != 0)
  {
    *a3 = 0;
    *a4 = 0;
LABEL_13:
    if (v7[328]) {
      *a4 = 0;
    }
  }

  return result;
}

uint64_t sub_27A38(uint64_t a1)
{
  v2[0] = 0LL;
  v2[1] = 0LL;
  sub_52B28((uint64_t)v2, a1 + 408);
  sub_52BF4((uint64_t)v2);
  return sub_52C5C(v2);
}

void sub_27A78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_27A8C(uint64_t **a1, uint64_t a2, unsigned int a3)
{
  v19[1] = 0LL;
  uint64_t v20 = a2;
  unsigned int v21 = a3;
  v19[0] = 0LL;
  sub_52B28((uint64_t)v19, (uint64_t)(a1 + 51));
  uint64_t v6 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = HIBYTE(a2);
    v18[1] = BYTE6(a2);
    void v18[2] = BYTE5(a2);
    v18[3] = BYTE4(a2);
    v18[4] = 0;
    *(_DWORD *)std::string buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v23 = 1024;
    int v24 = a3;
    __int16 v25 = 1024;
    int v26 = BYTE1(a3);
    __int16 v27 = 2082;
    xpc_object_t v28 = v18;
    __int16 v29 = 1024;
    int v30 = BYTE2(a3);
    __int16 v31 = 1024;
    unsigned int v32 = HIBYTE(a3);
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "[ %d ]Update Spatial Audio Stream, Status = %d Channels = %d Format ID = %{public}s Available Content Type %d Is S patializable = %d",  buf,  0x2Au);
  }

  CFNumberRef v7 = a1[49];
  if (v7)
  {
    uint64_t v8 = a1 + 49;
    do
    {
      int v9 = *((_DWORD *)v7 + 8);
      BOOL v10 = v9 < (int)a2;
      else {
        uint64_t v11 = (uint64_t **)(v7 + 1);
      }
      if (!v10) {
        uint64_t v8 = (uint64_t **)v7;
      }
      CFNumberRef v7 = *v11;
    }

    while (*v11);
  }

  CFDictionaryRef v12 = (os_log_s *)qword_95A80;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT);
  if ((_BYTE)a3)
  {
    if (v13)
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v23 = 1024;
      int v24 = a3;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "[ %d ] Create Audio Client with State = %d", buf, 0xEu);
    }

    __int16 v14 = objc_alloc(&OBJC_CLASS___SpatialAudioClient);
    BOOL v15 = -[SpatialAudioClient initWithPid:deviceID:]( v14,  "initWithPid:deviceID:",  v20,  (*(uint64_t (**)(uint64_t *))(**a1 + 16))(*a1));
    *(void *)std::string buf = &v20;
    sub_2990C(a1 + 48, (int *)&v20, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5] = v15;
LABEL_17:
    *(void *)std::string buf = &v20;
    float v16 = sub_2990C(a1 + 48, (int *)&v20, (uint64_t)&unk_65AD4, (_DWORD **)buf);
    objc_msgSend(v16[5], "UpdateSpatialAudioQueueInfo:", v20, v21);
    *(void *)std::string buf = &v20;
    if (objc_msgSend( sub_2990C(a1 + 48, (int *)&v20, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5],  "isActiveAudioQueue")) {
      sub_1E894((uint64_t)a1, v20);
    }
    sub_52BF4((uint64_t)v19);
    sub_1EA30(a1, 1LL);
    return sub_52C5C(v19);
  }

  if (v13)
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v23 = 1024;
    int v24 = 0;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "[ %d ] Audio Client already released new State = %d", buf, 0xEu);
  }

  return sub_52C5C(v19);
}

void sub_27D98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_27DB4(uint64_t **a1, int a2, int a3)
{
  int v47 = a2;
  v46[0] = 0LL;
  v46[1] = 0LL;
  sub_52B28((uint64_t)v46, (uint64_t)(a1 + 51));
  uint64_t v6 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    __int16 v49 = 1024;
    int v50 = a3;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "[ %d ] Update Spatial client From Spatial Enable, State = %d",  buf,  0xEu);
  }

  if ((a3 & 1) != 0)
  {
    float v16 = a1[49];
    if (!v16) {
      goto LABEL_28;
    }
    __int16 v17 = a1 + 49;
    do
    {
      int v18 = *((_DWORD *)v16 + 8);
      BOOL v19 = v18 < v47;
      if (v18 >= v47) {
        uint64_t v20 = (uint64_t **)v16;
      }
      else {
        uint64_t v20 = (uint64_t **)(v16 + 1);
      }
      if (!v19) {
        __int16 v17 = (uint64_t **)v16;
      }
      float v16 = *v20;
    }

    while (*v20);
    if (v17 == a1 + 49 || v47 < *((_DWORD *)v17 + 8))
    {
LABEL_28:
      unsigned int v21 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v47;
        __int16 v49 = 1024;
        int v50 = a3;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "[ %d ] Create Stream info to List, State = %d", buf, 0xEu);
      }

      int v22 = objc_alloc(&OBJC_CLASS___SpatialAudioClient);
      __int16 v23 = -[SpatialAudioClient initWithPid:deviceID:]( v22,  "initWithPid:deviceID:",  v47,  (*(uint64_t (**)(uint64_t *))(**a1 + 16))(*a1));
      *(void *)std::string buf = &v47;
      sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5] = v23;
    }

    *(void *)std::string buf = &v47;
    objc_msgSend(sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5], "incrementRefCount");
    *(void *)std::string buf = &v47;
    unsigned int v13 = objc_msgSend( sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5],  "spatialRefCount");
    __int16 v14 = (os_log_s *)qword_95A80;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v47;
      __int16 v49 = 1024;
      int v50 = a3;
      BOOL v15 = "[ %d ] Update State information State = %d";
LABEL_33:
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xEu);
    }
  }

  else
  {
    CFNumberRef v7 = (uint64_t *)(a1 + 49);
    uint64_t v8 = a1[49];
    if ((a3 & 4) == 0)
    {
      if (v8)
      {
        int v9 = (uint64_t *)(a1 + 49);
        do
        {
          int v10 = *((_DWORD *)v8 + 8);
          BOOL v11 = v10 < v47;
          if (v10 >= v47) {
            CFDictionaryRef v12 = (uint64_t **)v8;
          }
          else {
            CFDictionaryRef v12 = (uint64_t **)(v8 + 1);
          }
          if (!v11) {
            int v9 = v8;
          }
          uint64_t v8 = *v12;
        }

        while (*v12);
        if (v9 != v7 && v47 >= *((_DWORD *)v9 + 8))
        {
          *(void *)std::string buf = &v47;
          objc_msgSend(sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5], "dercrementRefCount");
          *(void *)std::string buf = &v47;
          unsigned int v13 = objc_msgSend( sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5],  "spatialRefCount");
          *(void *)std::string buf = &v47;
          if (!objc_msgSend( sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5],  "spatialNonUIRefCount")) {
            goto LABEL_50;
          }
          *(void *)std::string buf = &v47;
          objc_msgSend(sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5], "resetNonUIRefCount");
          sub_1E894((uint64_t)a1, v47);
          __int16 v14 = (os_log_s *)qword_95A80;
          if (!os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_50;
          }
          *(_DWORD *)std::string buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v47;
          __int16 v49 = 1024;
          int v50 = a3;
          BOOL v15 = "[ %d ] Clear [ Non - UI] information State = %d";
          goto LABEL_33;
        }
      }

LABEL_49:
      unsigned int v13 = 0;
      goto LABEL_50;
    }

    if (!v8) {
      goto LABEL_44;
    }
    int v24 = (uint64_t *)(a1 + 49);
    do
    {
      int v25 = *((_DWORD *)v8 + 8);
      BOOL v26 = v25 < v47;
      if (v25 >= v47) {
        __int16 v27 = (uint64_t **)v8;
      }
      else {
        __int16 v27 = (uint64_t **)(v8 + 1);
      }
      if (!v26) {
        int v24 = v8;
      }
      uint64_t v8 = *v27;
    }

    while (*v27);
    if (v24 == v7 || v47 < *((_DWORD *)v24 + 8))
    {
LABEL_44:
      xpc_object_t v28 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v47;
        __int16 v49 = 1024;
        int v50 = a3;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "[ %d ] Create Stream Non UI info to List, State = %d",  buf,  0xEu);
      }

      __int16 v29 = objc_alloc(&OBJC_CLASS___SpatialAudioClient);
      int v30 = -[SpatialAudioClient initWithPid:deviceID:]( v29,  "initWithPid:deviceID:",  v47,  (*(uint64_t (**)(uint64_t *))(**a1 + 16))(*a1));
      *(void *)std::string buf = &v47;
      sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5] = v30;
    }

    *(void *)std::string buf = &v47;
    objc_msgSend(sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5], "setNonUIRefCount");
    __int16 v31 = (os_log_s *)qword_95A80;
    unsigned int v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v47;
      __int16 v49 = 1024;
      int v50 = a3;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "[ %d ] Update State [ Non - UI] information State = %d",  buf,  0xEu);
      goto LABEL_49;
    }
  }

LABEL_50:
  unsigned int v32 = a1 + 48;
  int v33 = (uint64_t *)(a1 + 49);
  BOOL v34 = a1[49];
  if (v34)
  {
    uint64_t v35 = (uint64_t *)(a1 + 49);
    do
    {
      int v36 = *((_DWORD *)v34 + 8);
      BOOL v37 = v36 < v47;
      if (v36 >= v47) {
        unsigned __int8 v38 = (uint64_t **)v34;
      }
      else {
        unsigned __int8 v38 = (uint64_t **)(v34 + 1);
      }
      if (!v37) {
        uint64_t v35 = v34;
      }
      BOOL v34 = *v38;
    }

    while (*v38);
    if (v35 != v33 && v47 >= *((_DWORD *)v35 + 8))
    {
      *(void *)std::string buf = &v47;
      if (objc_msgSend( sub_2990C(a1 + 48, &v47, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5],  "spatialNonUIRefCount"))
      {
LABEL_61:
        int v39 = 1;
        goto LABEL_73;
      }
    }
  }

  int v40 = *v32;
  if (*v32 != v33)
  {
    int v39 = 0;
    while (![(id)v40[5] spatialRefCount])
    {
      BOOL v41 = (uint64_t *)v40[1];
      if (v41)
      {
        do
        {
          BOOL v42 = v41;
          BOOL v41 = (uint64_t *)*v41;
        }

        while (v41);
      }

      else
      {
        do
        {
          BOOL v42 = (uint64_t *)v40[2];
          BOOL v43 = *v42 == (void)v40;
          int v40 = v42;
        }

        while (!v43);
      }

      int v40 = v42;
      if (v42 == v33) {
        goto LABEL_73;
      }
    }

    goto LABEL_61;
  }

  int v39 = 0;
LABEL_73:
  sub_52BF4((uint64_t)v46);
  *((_DWORD *)a1 + 58) = v39;
  unsigned __int8 v44 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v47;
    __int16 v49 = 1024;
    int v50 = v39;
    __int16 v51 = 1024;
    unsigned int v52 = v13;
    _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEFAULT,  "[ %d ]Spatial Enable: Updated Spatial Enable %d Ref Count %d ",  buf,  0x14u);
  }

  return sub_52C5C(v46);
}

void sub_28474(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_2849C(uint64_t a1, int a2)
{
  if (sub_340E8())
  {
    *(_DWORD *)(a1 + 251) = 0;
    if (a2 && *(_BYTE *)(a1 + 361) && *(_BYTE *)(a1 + 360))
    {
      int v27 = 0;
      BOOL v26 = 0;
      else {
        CFTypeID v4 = @"global";
      }
      sub_277F8(a1, v4, &v27, &v26);
      int v5 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(a1 + 129);
        int v7 = *(unsigned __int8 *)(a1 + 361);
        int v8 = *(unsigned __int8 *)(a1 + 362);
        int v9 = *(unsigned __int8 *)(a1 + 360);
        *(_DWORD *)std::string buf = 138414082;
        *(void *)__int16 v29 = v4;
        *(_WORD *)&v29[8] = 1024;
        *(_DWORD *)int v30 = 1;
        *(_WORD *)&uint8_t v30[4] = 1024;
        *(_DWORD *)&v30[6] = v6;
        *(_WORD *)&v30[10] = 1024;
        *(_DWORD *)&v30[12] = v7;
        *(_WORD *)&v30[16] = 1024;
        *(_DWORD *)&v30[18] = v8;
        *(_WORD *)&v30[22] = 1024;
        *(_DWORD *)&v30[24] = v9;
        *(_WORD *)&v30[28] = 1024;
        *(_DWORD *)&v30[30] = v27;
        *(_WORD *)&v30[34] = 1024;
        *(_DWORD *)&v30[36] = v26;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "[ %@ ] UpdateSpatialAudioCCStates Streaming = %d screensharingState %d Channels = %d BestAvailableContentType = %d Spatial Status = %d Mode = %d Head Tracking = %d",  buf,  0x36u);
      }

      BOOL v10 = 1;
      *(_BYTE *)(a1 + 251) = 1;
      int v11 = *(unsigned __int8 *)(a1 + 360);
      switch(*(_BYTE *)(a1 + 360))
      {
        case 2:
          goto LABEL_21;
        case 3:
        case 6:
          BOOL v10 = v11 == 5;
          goto LABEL_12;
        case 4:
LABEL_12:
          sub_245FC(a1);
          int v12 = 1;
          *(_BYTE *)(a1 + 254) = 1;
          break;
        default:
          BOOL v10 = v11 == 5;
LABEL_21:
          sub_245FC(a1);
          int v12 = 0;
          break;
      }

      switch(v27)
      {
        case 0:
          goto LABEL_43;
        case 1:
          goto LABEL_32;
        case 2:
          if (v10 || !os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
            goto LABEL_25;
          }
          sub_5C048();
          if (!v12) {
            goto LABEL_32;
          }
          goto LABEL_26;
        case 3:
LABEL_25:
          if (v12)
          {
LABEL_26:
            BOOL v16 = v27 == 3 && v10;
            if (v16 && os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_ERROR)) {
              sub_5C01C();
            }
          }

LABEL_32:
          char v17 = !v10;
          if ((v17 & 1) == 0) {
            *(_BYTE *)(a1 + 252) = 1;
          }
          if (*(_BYTE *)(a1 + 360) == 5) {
            *(_BYTE *)(a1 + 252) = 1;
          }
          if (v12)
          {
            if (v10)
            {
              *(_BYTE *)(a1 + 253) = 1;
            }

            else
            {
              int v18 = (os_log_s *)qword_95A80;
              if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
              {
                int v19 = *(unsigned __int8 *)(a1 + 362);
                *(_DWORD *)std::string buf = 67109120;
                *(_DWORD *)__int16 v29 = v19;
                _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio: Not spatializing BestAvailableContentType = %d",  buf,  8u);
              }

    BOOL v15 = a3[1];
    BOOL v16 = 1735159650;
LABEL_33:
    if (v15 == v16) {
      return a3[2] == 0;
    }
    return 0LL;
  }

  if (v12 <= 1935892840)
  {
    if (v12 != 1818453110 && v12 != 1818456950)
    {
      uint64_t result = 0LL;
      int v14 = 1870098020;
      goto LABEL_31;
    }

    goto LABEL_27;
  }

  if (v12 > 1935894893)
  {
    uint64_t result = v7;
    if (v12 == 1935894894) {
      return result;
    }
    uint64_t result = 0LL;
    int v14 = 1937007734;
LABEL_31:
    if (v12 != v14) {
      return result;
    }
    goto LABEL_32;
  }

  if (v12 == 1935892841) {
    return v7;
  }
  uint64_t result = 0LL;
  if (v12 == 1935893353) {
    return v7;
  }
  return result;
}

LABEL_43:
              unsigned int v20 = *(unsigned __int8 *)(a1 + 362);
              if (v20 <= 3 && v20 != 1) {
                *(_BYTE *)(a1 + 254) = 0;
              }
            }
          }

          break;
        default:
          break;
      }

      sub_289F8(a1, 0);
      unsigned int v21 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = "YES";
        if (*(_BYTE *)(a1 + 251)) {
          __int16 v23 = "YES";
        }
        else {
          __int16 v23 = "NO";
        }
        if (*(_BYTE *)(a1 + 252)) {
          int v24 = "YES";
        }
        else {
          int v24 = "NO";
        }
        if (*(_BYTE *)(a1 + 254)) {
          int v25 = "YES";
        }
        else {
          int v25 = "NO";
        }
        if (!*(_BYTE *)(a1 + 253)) {
          int v22 = "NO";
        }
        *(_DWORD *)std::string buf = 138413570;
        *(void *)__int16 v29 = v4;
        *(_WORD *)&v29[8] = 1024;
        *(_DWORD *)int v30 = v27;
        *(_WORD *)&uint8_t v30[4] = 2082;
        *(void *)&v30[6] = v23;
        *(_WORD *)&v30[14] = 2082;
        *(void *)&v30[16] = v24;
        *(_WORD *)&v30[24] = 2082;
        *(void *)&v30[26] = v25;
        *(_WORD *)&v30[34] = 2082;
        *(void *)&v30[36] = v22;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "[ %@ ] Spatial Audio: [%d] Control Center State mSpatialAudioCCIsAvailable = %{public}s mSpatialAudioCCState = %{public}s mSpatializeStereoCCIsAvailable = %{public}s mSpatializeStereoCCState = %{public}s",  buf,  0x3Au);
      }

      sub_429B4(*(void *)a1, 1752457571);
      sub_429B4(*(void *)a1, 1752462196);
      sub_429B4(*(void *)a1, 1752457590);
      sub_429B4(*(void *)a1, 1936744822);
      sub_429B4(*(void *)a1, 1936749430);
      sub_429B4(*(void *)a1, 1936746095);
      sub_429B4(*(void *)a1, 1633907555);
    }

    else
    {
      unsigned int v13 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *(unsigned __int8 *)(a1 + 129);
        if (*(_BYTE *)(a1 + 255)) {
          BOOL v15 = "YES";
        }
        else {
          BOOL v15 = "NO";
        }
        *(_DWORD *)std::string buf = 67110658;
        *(_DWORD *)__int16 v29 = a2;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v14;
        *(_WORD *)int v30 = 2082;
        *(void *)&v30[2] = "NO";
        *(_WORD *)&v30[10] = 2082;
        *(void *)&v30[12] = "NO";
        *(_WORD *)&v30[20] = 2082;
        *(void *)&v30[22] = "NO";
        *(_WORD *)&v30[30] = 2082;
        *(void *)&v30[32] = "NO";
        *(_WORD *)&v30[40] = 2082;
        *(void *)&v30[42] = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio: Control Center State isStreaming %d screensharingState %d mSpatialAudioCCIsAvailable = %{public }s mSpatialAudioCCState = %{public}s mSpatializeStereoCCIsAvailable = %{public}s mSpatializeStereoCCState = %{ public}s mIsLastSessionSpatial = %{public}s",  buf,  0x40u);
      }

      sub_429B4(*(void *)a1, 1752457571);
      sub_429B4(*(void *)a1, 1752462196);
      sub_429B4(*(void *)a1, 1752457590);
      sub_429B4(*(void *)a1, 1936744822);
      sub_429B4(*(void *)a1, 1936749430);
      sub_429B4(*(void *)a1, 1936746095);
      sub_429B4(*(void *)a1, 1633907555);
      sub_289F8(a1, 0);
    }
  }

        int v7 = a2[1];
        if (v7 == 1869968496) {
          return a2[2] == 0;
        }
        int v8 = 1768845428;
        goto LABEL_55;
      }

      if (v3 <= 1853059699)
      {
        if (v3 != 1836414053)
        {
          CFTypeID v4 = 1853059619;
          goto LABEL_53;
        }

        uint64_t result = sub_340E8();
        if ((_DWORD)result)
        {
          int v7 = a2[1];
          int v8 = 1869968496;
LABEL_55:
          if (v7 == v8) {
            return a2[2] == 0;
          }
          return 0LL;
        }

        return result;
      }

      if (v3 == 1853059700) {
        goto LABEL_54;
      }
      int v6 = 1870098020;
LABEL_47:
      if (v3 == v6) {
        return (*(uint64_t (**)(void *, void, void))(*a1 + 1264LL))( a1,  a2[1],  a2[2]);
      }
      return sub_44E98(a1, a2);
    }

    if (v3 <= 1937007733)
    {
      if (v3 > 1936092275)
      {
        if (v3 == 1936092276) {
          goto LABEL_54;
        }
        int v5 = 1936879204;
      }

      else
      {
        if (v3 == 1919512167) {
          goto LABEL_54;
        }
        int v5 = 1935763060;
      }

void sub_289F8(uint64_t a1, int a2)
{
  *(_BYTE *)(a1 + 256) = a2;
  if (a2) {
    uint64_t v4 = mach_absolute_time();
  }
  else {
    uint64_t v4 = 0LL;
  }
  *(void *)(a1 + 480) = v4;
  int v5 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = "NO";
    if (a2) {
      int v6 = "YES";
    }
    int v7 = 136446210;
    int v8 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Spatial UI busy %{public}s", (uint8_t *)&v7, 0xCu);
  }

void sub_28AC8(void *a1, int a2, int a3)
{
  else {
    int v6 = @"global";
  }
  unsigned int v7 = *((unsigned __int8 *)a1 + 360);
  int v31 = 0;
  BOOL v30 = 0;
  sub_277F8((uint64_t)a1, v6, &v31, &v30);
  unsigned int v8 = (v7 < 6) & (0x34u >> v7);
  int v9 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = "Disable";
    int v11 = *((unsigned __int8 *)a1 + 360);
    if (a2) {
      BOOL v10 = "Enable";
    }
    int v12 = *((unsigned __int8 *)a1 + 362);
    unsigned int v13 = "NO";
    *(_DWORD *)std::string buf = 136447746;
    if ((a2 & v8) != 0) {
      unsigned int v13 = "YES";
    }
    int v33 = (void *)v10;
    __int16 v34 = 1024;
    *(_DWORD *)uint64_t v35 = v31;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v30;
    *(_WORD *)int v36 = 1024;
    *(_DWORD *)&v36[2] = a3;
    *(_WORD *)BOOL v37 = 1024;
    *(_DWORD *)&v37[2] = v11;
    *(_WORD *)unsigned __int8 v38 = 1024;
    *(_DWORD *)&v38[2] = v12;
    *(_WORD *)int v39 = 2082;
    *(void *)&v39[2] = v13;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "Spatial Control Centre Request to %{public}s Spatial Audio Current Mode = %d HT [%d -> %d] Spatialization Status = %d Best Available Content %d Only HeadTracking changed %{public}s",  buf,  0x34u);
  }

  if (*((_BYTE *)a1 + 256))
  {
    if ((float)((float)((mach_absolute_time() - a1[60])
                       * *((unsigned int *)a1 + 150)
                       / *((unsigned int *)a1 + 151)
                       / 0x3E8)
               / 1000000.0) < 5.0)
    {
      int v14 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          BOOL v15 = "YES";
        }
        else {
          BOOL v15 = "NO";
        }
        double v16 = (float)((float)((mach_absolute_time() - a1[60])
                            * *((unsigned int *)a1 + 150)
                            / *((unsigned int *)a1 + 151)
                            / 0x3E8)
                    / 1000000.0);
        *(_DWORD *)std::string buf = 136446466;
        int v33 = (void *)v15;
        __int16 v34 = 2048;
        *(double *)uint64_t v35 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Received Spatial Control Centre Update [ %{public}s ] while previous process is ongoing time from the last update %f ",  buf,  0x16u);
      }

      return;
    }

    sub_289F8((uint64_t)a1, 0);
  }

  if (a2)
  {
    if (*((unsigned __int8 *)a1 + 362) > 1u && (v31 != 1 ? (char v17 = 1) : (char v17 = v8), (v17 & 1) != 0))
    {
      if (v31) {
        sub_27618((uint64_t)a1, v6, v31, a3);
      }
      else {
        sub_27618((uint64_t)a1, v6, 1, a3);
      }
    }

    else
    {
      sub_27618((uint64_t)a1, v6, 2, a3);
    }
  }

  else
  {
    sub_27618((uint64_t)a1, v6, 0, v30);
  }

  unsigned int v29 = 0;
  BOOL v28 = 0;
  sub_277F8((uint64_t)a1, v6, &v29, &v28);
  if (v31 != v29) {
    sub_289F8((uint64_t)a1, 1);
  }
  int v18 = *(_BYTE **)(*a1 + 9088LL);
  if (v18 && v18[192]) {
    (*(void (**)(_BYTE *, __CFString *, void, BOOL))(*(void *)v18 + 600LL))(v18, v6, v29, v28);
  }
  *((_BYTE *)a1 + 472) = 0;
  v27[0] = 0LL;
  v27[1] = 0LL;
  sub_52B28((uint64_t)v27, (uint64_t)(a1 + 51));
  int v19 = (void *)a1[48];
  if (v19 == a1 + 49)
  {
    unsigned int v20 = 0;
  }

  else
  {
    unsigned int v20 = 0;
    do
    {
      unsigned int v21 = [(id)v19[5] numActiveQueue];
      int v22 = (void *)v19[1];
      if (v22)
      {
        do
        {
          __int16 v23 = v22;
          int v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          __int16 v23 = (void *)v19[2];
          BOOL v24 = *v23 == (void)v19;
          int v19 = v23;
        }

        while (!v24);
      }

      v20 += v21;
      int v19 = v23;
    }

    while (v23 != a1 + 49);
  }

  sub_52BF4((uint64_t)v27);
  if (v20 >= 2) {
    *((_BYTE *)a1 + 472) = 1;
  }
  if (v31 == v29 && v30 != a3) {
    (*(void (**)(void))(*(void *)*a1 + 696LL))(*a1);
  }
  int v25 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v26 = "Disabled";
    if (a2) {
      BOOL v26 = "Enabled ";
    }
    *(_DWORD *)std::string buf = 138413826;
    int v33 = v6;
    __int16 v34 = 2082;
    *(void *)uint64_t v35 = v26;
    *(_WORD *)&v35[8] = 1024;
    *(_DWORD *)int v36 = v31;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)BOOL v37 = v30;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)unsigned __int8 v38 = v29;
    *(_WORD *)&v38[4] = 1024;
    *(_DWORD *)int v39 = v28;
    *(_WORD *)&v39[4] = 1024;
    *(_DWORD *)&v39[6] = v20;
    _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "[ %@ ] Spatial Control Centre Request update: SetSpatialAudioCCState %{public}s Current Mode %d [%d] -> %d [%d] Nu mber of Queues %d",  buf,  0x34u);
  }

  sub_52C5C(v27);
}

void sub_28FD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_28FF8(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = (unint64_t)*(unsigned int *)(a1 + 600) * a2 / *(unsigned int *)(a1 + 604) / 0x3E8;
  if (!a3)
  {
    float v5 = (float)v3;
    float v6 = 1000000.0;
    return v5 / v6;
  }

  if (a3 == 1)
  {
    float v5 = (float)v3;
    float v6 = 1000.0;
    return v5 / v6;
  }

  float result = 0.0;
  if (a3 == 2) {
    return (float)v3;
  }
  return result;
}

void *sub_29068(void *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    float v6 = (char *)result[49];
    if (v6)
    {
      int v9 = (char *)(result + 49);
      BOOL v10 = (char *)(result + 49);
      int v11 = (char *)result[49];
      do
      {
        int v12 = *((_DWORD *)v11 + 8);
        BOOL v13 = v12 < a2;
        if (v12 >= a2) {
          int v14 = (char **)v11;
        }
        else {
          int v14 = (char **)(v11 + 8);
        }
        if (!v13) {
          BOOL v10 = v11;
        }
        int v11 = *v14;
      }

      while (*v14);
      if (v10 != v9 && *((_DWORD *)v10 + 8) <= a2)
      {
        BOOL v15 = (char *)(result + 49);
        do
        {
          int v16 = *((_DWORD *)v6 + 8);
          BOOL v17 = v16 < a2;
          if (v16 >= a2) {
            int v18 = (char **)v6;
          }
          else {
            int v18 = (char **)(v6 + 8);
          }
          if (!v17) {
            BOOL v15 = v6;
          }
          float v6 = *v18;
        }

        while (*v18);
        if (v15 == v9 || *((_DWORD *)v15 + 8) > a2) {
          BOOL v15 = (char *)(result + 49);
        }
        if (a3) {
          float result = [*((id *)v15 + 5) setSpatialAudioUserSelection:a5];
        }
        if (a4) {
          return [*((id *)v15 + 5) setSpatialAudioHeadTrackingUserSelection:a6];
        }
      }
    }
  }

  return result;
}

void sub_2913C(void *a1, int a2, int a3)
{
  int v6 = _os_feature_enabled_impl("BluetoothFeatures", "PerAppHeadTrackedSetting");
  unsigned int v7 = *((unsigned __int8 *)a1 + 360);
  if (v6) {
    unsigned int v8 = 0LL;
  }
  else {
    unsigned int v8 = @"global";
  }
  int v32 = 0;
  BOOL v31 = 0;
  sub_277F8((uint64_t)a1, v8, &v32, &v31);
  int v9 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *((unsigned __int8 *)a1 + 360);
    int v11 = "Disable";
    unsigned int v12 = *((unsigned __int8 *)a1 + 362);
    *(_DWORD *)std::string buf = 136447746;
    if (a2) {
      int v11 = "Enable";
    }
    __int16 v34 = v11;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = v32;
    if (((v7 < 6) & (0x34u >> v7) & a2) != 0) {
      BOOL v13 = "YES";
    }
    else {
      BOOL v13 = "NO";
    }
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&_BYTE v36[6] = v31;
    __int16 v37 = 1024;
    int v38 = a3;
    __int16 v39 = 1024;
    BOOL v40 = v10;
    __int16 v41 = 1024;
    unsigned int v42 = v12;
    __int16 v43 = 2082;
    unsigned __int8 v44 = v13;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "Spatial Control Centre Request to %{public}s Stereo Upmix Current Mode = %d [ %d --> %d] Spatialization Status = % d Best Available Content %d Head Tracking only Changed %{public}s",  buf,  0x34u);
  }

  if (*((_BYTE *)a1 + 256))
  {
    if (!a1[60]) {
      a1[60] = mach_absolute_time();
    }
    if ((float)((float)((mach_absolute_time() - a1[60])
                       * *((unsigned int *)a1 + 150)
                       / *((unsigned int *)a1 + 151)
                       / 0x3E8)
               / 1000.0) < 3.0)
    {
      int v14 = (os_log_s *)qword_95A80;
      if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          BOOL v15 = "YES";
        }
        else {
          BOOL v15 = "NO";
        }
        double v16 = (float)((float)((mach_absolute_time() - a1[60])
                            * *((unsigned int *)a1 + 150)
                            / *((unsigned int *)a1 + 151)
                            / 0x3E8)
                    / 1000.0);
        *(_DWORD *)std::string buf = 136446466;
        __int16 v34 = v15;
        __int16 v35 = 2048;
        *(double *)int v36 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Received Stereo Upmix Control Centre Update [ %{public}s ] while previous process is ongoing time from the last update %f ",  buf,  0x16u);
      }

      return;
    }

    a1[60] = 0LL;
    sub_289F8((uint64_t)a1, 0);
  }

  if (a2)
  {
    unsigned int v17 = *((unsigned __int8 *)a1 + 360);
    if (v17 <= 5 && ((1 << v17) & 0x34) != 0) {
      sub_27618((uint64_t)a1, v8, v32, a3);
    }
    else {
      sub_27618((uint64_t)a1, v8, 2, a3);
    }
    goto LABEL_35;
  }

  if (v32 != 3)
  {
    int v18 = *((unsigned __int8 *)a1 + 360);
    if (v18 == 2)
    {
      sub_27618((uint64_t)a1, v8, 3, v31);
      goto LABEL_35;
    }

    if (v18 == 4)
    {
      else {
        sub_27618((uint64_t)a1, v8, 0, v31);
      }
      goto LABEL_35;
    }
  }

  sub_27618((uint64_t)a1, v8, 0, v31);
LABEL_35:
  unsigned int v30 = 0;
  BOOL v29 = 0;
  sub_277F8((uint64_t)a1, v8, &v30, &v29);
  if (v32 != v30) {
    sub_289F8((uint64_t)a1, 1);
  }
  int v19 = *(_BYTE **)(*a1 + 9088LL);
  if (v19 && v19[192]) {
    (*(void (**)(_BYTE *, __CFString *, void, BOOL))(*(void *)v19 + 600LL))(v19, v8, v30, v29);
  }
  *((_BYTE *)a1 + 472) = 0;
  v28[0] = 0LL;
  v28[1] = 0LL;
  sub_52B28((uint64_t)v28, (uint64_t)(a1 + 51));
  unsigned int v20 = (void *)a1[48];
  if (v20 == a1 + 49)
  {
    unsigned int v21 = 0;
  }

  else
  {
    unsigned int v21 = 0;
    do
    {
      unsigned int v22 = [(id)v20[5] numActiveQueue];
      __int16 v23 = (void *)v20[1];
      if (v23)
      {
        do
        {
          BOOL v24 = v23;
          __int16 v23 = (void *)*v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          BOOL v24 = (void *)v20[2];
          BOOL v25 = *v24 == (void)v20;
          unsigned int v20 = v24;
        }

        while (!v25);
      }

      v21 += v22;
      unsigned int v20 = v24;
    }

    while (v24 != a1 + 49);
  }

  sub_52BF4((uint64_t)v28);
  if (v21 >= 2) {
    *((_BYTE *)a1 + 472) = 1;
  }
  if (v32 == v30 && v31 != a3) {
    (*(void (**)(void))(*(void *)*a1 + 696LL))(*a1);
  }
  BOOL v26 = (os_log_s *)qword_95A80;
  if (os_log_type_enabled((os_log_t)qword_95A80, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = "Disabled";
    if (a2) {
      int v27 = "Enabled ";
    }
    *(_DWORD *)std::string buf = 136447490;
    __int16 v34 = v27;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = v32;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&_BYTE v36[6] = v31;
    __int16 v37 = 1024;
    int v38 = v30;
    __int16 v39 = 1024;
    BOOL v40 = v29;
    __int16 v41 = 1024;
    unsigned int v42 = v21;
    _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "Spatial Control Centre update, SetSpatializeStereoCCState %{public}s Current Mode %d [ %d ] -> %d [ %d ] Num Queues %d",  buf,  0x2Au);
  }

  sub_52C5C(v28);
}

void sub_296C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_296E0(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  v18[0] = 0LL;
  v18[1] = 0LL;
  sub_52B28((uint64_t)v18, a1 + 408);
  int v10 = *(void **)(a1 + 384);
  int v11 = (void *)(a1 + 392);
  if (v10 != (void *)(a1 + 392))
  {
    while (1)
    {
      unsigned int v12 = (void *)v10[5];
      BOOL v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          BOOL v13 = (void *)*v13;
        }

        while (v13);
      }

      else
      {
        do
        {
          int v14 = (void *)v10[2];
          BOOL v15 = *v14 == (void)v10;
          int v10 = v14;
        }

        while (!v15);
      }

      int v10 = v14;
      if (v14 == v11) {
        goto LABEL_16;
      }
    }

    unsigned int v16 = [v12 HighestQualityFormat];
    if (a4) {
      *a4 = [v12 spatialAudioUserSelection];
    }
    if (a5) {
      *a5 = [v12 spatialAudioHeadTrackingUserSelection];
    }
    if (v16) {
      *a3 = v16;
    }
  }

LABEL_16:
  sub_52BF4((uint64_t)v18);
  sub_52C5C(v18);
  return 0LL;
}

  int v6 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = *(_DWORD *)(a1 + 9340);
    int v9 = 134218496;
    int v10 = v5;
    int v11 = 1024;
    unsigned int v12 = v7;
    BOOL v13 = 1024;
    int v14 = v2;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "GetBestSampleRate:%f mStereoSelected:%d mStereoSupported:%d",  (uint8_t *)&v9,  0x18u);
  }

  return v5;
}

void sub_297E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_29800(unsigned __int8 *a1)
{
  unsigned int v1 = a1[360];
  BOOL v2 = v1 > 5;
  int v3 = (1 << v1) & 0x34;
  if (!v2 && v3 != 0) {
    return a1[361];
  }
  if ((a1[362] & 0xFE) == 2) {
    return 6LL;
  }
  return 2LL;
}

uint64_t sub_29844(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 356);
  unsigned int v3 = *(unsigned __int8 *)(a1 + 360);
  BOOL v4 = v3 > 5;
  int v5 = (1 << v3) & 0x34;
  if (v4 || v5 == 0)
  {
    if (*(_BYTE *)(a1 + 362) == 3) {
      return 1902324531LL;
    }
    else {
      return result;
    }
  }

  return result;
}

uint64_t sub_29888(uint64_t result, int a2)
{
  *(_BYTE *)(result + 255) = a2 != 0;
  return result;
}

CFDictionaryRef sub_29898(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, a1 + 520);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 496));
  sub_52C5C(v4);
  return Copy;
}

void sub_298F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_29904(uint64_t result, char a2)
{
  *(_BYTE *)(result + 328) = a2;
  return result;
}

uint64_t **sub_2990C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    int v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_15E14(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t sub_299CC(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0LL;
  }
  sub_29A44((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1LL;
}

uint64_t *sub_29A44(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_29AB4(v6, a2);
  return v3;
}

uint64_t *sub_29AB4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }

    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }

  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unsigned int v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v7 = 0LL;
      uint64_t result = (uint64_t *)v2;
    }

    else
    {
      unsigned int v7 = v6[1];
    }
  }

  else
  {
    v6[1] = (uint64_t *)v2;
  }

  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8LL * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }

  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }

  while (1)
  {
    uint64_t v12 = v7[2];
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      BOOL v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v13;
      *BOOL v13 = v12;
      *(void *)(v12 + 16) = v13;
      unsigned int v7 = *(uint64_t **)(*v7 + 8);
    }

    BOOL v15 = (void *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      unsigned int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unsigned int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        __int128 v7[2] = (uint64_t)v15;
        unsigned int v16 = v7;
      }

      else
      {
        BOOL v15 = v7;
      }

      uint64_t v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      BOOL v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
      *BOOL v24 = v23;
      goto LABEL_72;
    }

    unsigned int v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24)) {
      goto LABEL_55;
    }
    *((_BYTE *)v7 + 24) = 0;
    unsigned int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      unsigned int v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }

    if (!*((_BYTE *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unsigned int v7 = *(uint64_t **)(v17[2] + 8LL * (*(void *)v17[2] == (void)v17));
  }

  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    __int128 v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8LL * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    unsigned int v7 = *(uint64_t **)v12;
  }

  int v19 = (void *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24)) {
    goto LABEL_68;
  }
  unsigned int v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    unsigned int v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }

  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    unsigned int v20 = v7;
  }

  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    void v20[2] = v7[2];
    *(void *)(v7[2] + 8LL * (*(void *)v7[2] != (void)v7)) = v20;
    *unsigned int v20 = (uint64_t)v7;
    __int128 v7[2] = (uint64_t)v20;
    int v19 = v7;
  }

  uint64_t v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  BOOL v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8LL);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8LL * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

os_log_t sub_29E38()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A80 = (uint64_t)result;
  return result;
}

LABEL_18:
    uint64_t v22 = (os_log_s *)qword_95A88;
    if (os_log_type_enabled((os_log_t)qword_95A88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(double *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "Dosimetry sensitivity = %f", buf, 0xCu);
      uint64_t v22 = (os_log_s *)qword_95A88;
    }

    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *v18;
      BOOL v24 = v18[1];
      uint64_t v25 = v18[2];
      uint64_t v26 = v18[3];
      uint64_t v27 = v18[4];
      BOOL v28 = v18[5];
      BOOL v29 = v18[6];
      unsigned int v30 = v18[7];
      BOOL v31 = v18[8];
      int v32 = v18[9];
      int v33 = v18[10];
      __int16 v34 = v18[11];
      __int16 v35 = v18[12];
      int v36 = v18[13];
      __int16 v37 = v18[14];
      int v38 = v18[15];
      __int16 v39 = v18[16];
      *(_DWORD *)std::string buf = 134222080;
      *(double *)&uint8_t buf[4] = v23;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(double *)&buf[14] = v24;
      *(_WORD *)&_BYTE buf[22] = 2048;
      *(double *)&uint8_t buf[24] = v25;
      *(_WORD *)&buf[32] = 2048;
      *(double *)&buf[34] = v26;
      *(_WORD *)&buf[42] = 2048;
      *(double *)&buf[44] = v27;
      *(_WORD *)&buf[52] = 2048;
      *(double *)&buf[54] = v28;
      *(_WORD *)&buf[62] = 2048;
      *(double *)&buf[64] = v29;
      *(_WORD *)&buf[72] = 2048;
      *(double *)&buf[74] = v30;
      *(_WORD *)&buf[82] = 2048;
      *(double *)&buf[84] = v31;
      *(_WORD *)&buf[92] = 2048;
      *(double *)&buf[94] = v32;
      *(_WORD *)&buf[102] = 2048;
      *(double *)&buf[104] = v33;
      *(_WORD *)&buf[112] = 2048;
      *(double *)&buf[114] = v34;
      *(_WORD *)&buf[122] = 2048;
      *(double *)&buf[124] = v35;
      *(_WORD *)&buf[132] = 2048;
      *(double *)&buf[134] = v36;
      int v50 = 2048;
      __int16 v51 = v37;
      unsigned int v52 = 2048;
      uint64_t v53 = v38;
      BOOL v54 = 2048;
      BOOL v55 = v39;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "Dosimetry volume curve = [%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f]",  buf,  0xACu);
    }

    (*(void (**)(void *, float))(*(void *)a7 + 1344LL))(a7, v19);
    BOOL v40 = 0LL;
    memset(buf, 0, 136);
    do
    {
      *(void *)&buf[v40] = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, v18);
      v40 += 8LL;
      ++v18;
    }

    while (v40 != 136);
    __int16 v41 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 17LL, &kCFTypeArrayCallBacks);
    (*(void (**)(void *, CFArrayRef))(*(void *)a7 + 1352LL))(a7, v41);
    for (CFIndex i = 0LL; i != 136; i += 8LL)
    {
      __int16 v43 = *(const void **)&buf[i];
      if (v43) {
        CFRelease(v43);
      }
    }

    CFRelease(v41);
    if ((v17 & 1) != 0)
    {
      unsigned __int8 v44 = objc_alloc(&OBJC_CLASS___CBCentralManager);
      v47[0] = CBCentralManagerOptionReceiveSystemEvents;
      v47[1] = CBManagerNeedsRestrictedStateOperation;
      v48[0] = &__kCFBooleanTrue;
      v48[1] = &__kCFBooleanTrue;
      v15->_centralManager = -[CBCentralManager initWithDelegate:queue:options:]( v44,  "initWithDelegate:queue:options:",  v15,  &_dispatch_main_q,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v48,  v47,  2LL));
      -[BTHearingHealthObject setUuid:](v15, "setUuid:", a3);
      -[BTHearingHealthObject setCharacteristics:](v15, "setCharacteristics:", a8);
      -[BTHearingHealthObject setAudioDevice:](v15, "setAudioDevice:", a7);
    }
  }

  return v15;
}

void sub_2B278( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_2B28C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_2B2B0()
{
  return [v0 identifier];
}

os_log_t sub_2B2BC()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A88 = (uint64_t)result;
  return result;
}

uint64_t sub_2B2E8(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v4;
  uint64_t v10 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v9);
  *(void *)uint64_t v5 = &off_82280;
  *(_DWORD *)(v5 + 152) = 10240;
  BOOL v6 = operator new[](0x2800uLL);
  unsigned int v7 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v6;
  if (v7) {
    operator delete[](v7);
  }
  *(_BYTE *)(a1 + 176) = 0;
  return a1;
}

void sub_2B35C(_Unwind_Exception *a1)
{
}

void sub_2B378(void *a1)
{
  unsigned int v1 = sub_10384(a1);
  operator delete(v1);
}

uint64_t sub_2B38C(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 92);
  *(_DWORD *)(a1 + 156) = a2;
  if ((int)v2 >= 1)
  {
    uint64_t v4 = a1 + 180;
    do
    {
      g726_init(v4, a2, 2);
      v4 += 64LL;
      --v2;
    }

    while (v2);
  }

  return 0LL;
}

uint64_t sub_2B3E4(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 92);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 180;
    do
    {
      os_log_t result = g726_init(v3, *(_DWORD *)(v2 + 156), 2);
      v3 += 64LL;
      --v1;
    }

    while (v1);
  }

  return result;
}

void sub_2B434(uint64_t a1, _WORD *a2, unsigned int a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 92) == 2)
  {
    BOOL v6 = (char *)(a1 + 20788);
    if (a3)
    {
      uint64_t v7 = a3;
      uint64_t v8 = a3;
      uint64_t v9 = a1;
      do
      {
        *(_WORD *)(v9 + 308) = *a2;
        *(_WORD *)(v9 + 10548) = a2[1];
        v9 += 2LL;
        a2 += 2;
        --v8;
      }

      while (v8);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    __int16 v11 = g726_encode_frame(a1 + 180, a1 + 308, v7, a1 + 20788);
    unsigned __int16 v12 = g726_encode_frame(a1 + 244, a1 + 10548, v7, a1 + 25908) + v11;
    __int16 v10 = v12;
    if ((__int16)v12 >= 2)
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = (char *)(a1 + 25908);
      uint64_t v15 = v12 >> 1;
      do
      {
        char v16 = *v6++;
        *(_BYTE *)(*(void *)(a1 + 144) + v13) = v16;
        char v17 = *v14++;
        uint64_t v18 = *(void *)(a1 + 144) + v13;
        v13 += 2LL;
        *(_BYTE *)(v18 + 1) = v17;
        --v15;
      }

      while (v15);
    }
  }

  else
  {
    __int16 v10 = g726_encode_frame(a1 + 180, (uint64_t)a2, a3, *(void *)(a1 + 144));
  }

  int v19 = v10;
  if (*(_BYTE *)(a1 + 177)) {
    sub_1097C(a1, v10, 0);
  }
  *(_DWORD *)a4 = 1;
  *(void *)(a4 + 16) = *(void *)(a1 + 144);
  *(_DWORD *)(a4 + 8) = 1;
  *(_DWORD *)(a4 + 12) = v19;
}

os_log_t sub_2B574()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A90 = (uint64_t)result;
  return result;
}

void sub_2BB64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_2BB84(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 intValue];
  if ((_DWORD)result == 1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
  }
  return result;
}

void sub_2BD10(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(*(void *)(a1 + 32) + 72LL));
  uint64_t v3 = (os_log_s *)qword_95A98;
  if (v2)
  {
    uint64_t v4 = v2;
    if (os_log_type_enabled((os_log_t)qword_95A98, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 80LL);
      int v6 = *(unsigned __int8 *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v5;
      __int16 v16 = 1024;
      int v17 = v6;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Mac SmartRouting Update Ownership on  %@ -> %d",  (uint8_t *)&v14,  0x12u);
    }

    sub_42324(v4, v4[1157], *(unsigned __int8 *)(a1 + 40), 1);
  }

  else if (os_log_type_enabled((os_log_t)qword_95A98, OS_LOG_TYPE_ERROR))
  {
    sub_5C2BC(v3, v7, v8, v9, v10, v11, v12, v13);
  }

os_log_t sub_2C358()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95A98 = (uint64_t)result;
  return result;
}

uint64_t sub_2C384(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0LL;
  *(void *)a1 = off_82300;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0LL;
  sub_529E8(a1 + 40, a2);
  atomic_store(1u, (unsigned int *)(a1 + 8));
  return a1;
}

void sub_2C3E0(_Unwind_Exception *a1)
{
}

uint64_t sub_2C3FC(uint64_t a1)
{
  *(void *)a1 = off_82300;
  uint64_t v2 = a1 + 40;
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_52B28((uint64_t)v5, a1 + 40);
  sub_16000(a1 + 16, *(void **)(a1 + 24));
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  sub_52C5C(v5);
  sub_52A64(v2, v3);
  sub_16000(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_2C490(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2C3FC(a1);
  operator delete(v1);
}

uint64_t sub_2C4A4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 40);
  uint64_t v4 = (unsigned int *)(a1 + 8);
  do
    uint64_t v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  LODWORD(v7) = v5;
  *((void *)&v7 + 1) = a2;
  sub_2C7EC((uint64_t **)(a1 + 16), (unsigned int *)&v7, &v7);
  sub_52C5C(v8);
  return v5;
}

void sub_2C51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_2C530(uint64_t a1, unsigned int a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_52B28((uint64_t)v13, a1 + 40);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = a1 + 24;
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = v5;
  do
  {
    unsigned int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v4;
    }
    else {
      uint64_t v10 = (uint64_t *)(v4 + 8);
    }
    if (v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }

  while (*v10);
  if (v7 != v5 && *(_DWORD *)(v7 + 32) <= a2) {
    uint64_t v11 = *(void *)(v7 + 40);
  }
  else {
LABEL_12:
  }
    uint64_t v11 = 0LL;
  sub_52C5C(v13);
  return v11;
}

uint64_t sub_2C5BC(uint64_t a1, unsigned int a2)
{
  unsigned int v5 = a2;
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, a1 + 40);
  sub_2C8A4(a1 + 16, &v5);
  return sub_52C5C(v4);
}

void sub_2C608(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_2C61C(uint64_t a1)
{
  *(void *)a1 = &off_82338;
  if (qword_95AA8 != -1) {
    dispatch_once(&qword_95AA8, &stru_82378);
  }
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 16LL))(qword_962E0, a1);
  return a1;
}

void sub_2C68C(id a1)
{
  uint64_t v1 = operator new(0x68uLL);
  sub_2C384((uint64_t)v1, v2);
  qword_962E0 = (uint64_t)v1;
}

void sub_2C6BC(_Unwind_Exception *a1)
{
}

uint64_t sub_2C6D4(uint64_t a1)
{
  *(void *)a1 = &off_82338;
  (*(void (**)(uint64_t, void))(*(void *)qword_962E0 + 32LL))(qword_962E0, *(unsigned int *)(a1 + 8));
  return a1;
}

uint64_t sub_2C71C(uint64_t a1)
{
  *(void *)a1 = &off_82338;
  (*(void (**)(uint64_t, void))(*(void *)qword_962E0 + 32LL))(qword_962E0, *(unsigned int *)(a1 + 8));
  return a1;
}

void sub_2C764(unsigned int *a1)
{
  *(void *)a1 = &off_82338;
  (*(void (**)(uint64_t, void))(*(void *)qword_962E0 + 32LL))(qword_962E0, a1[2]);
  operator delete(a1);
}

uint64_t sub_2C7AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_2C7B4()
{
  return 0LL;
}

uint64_t sub_2C7BC()
{
  return 2003329396LL;
}

uint64_t sub_2C7C8()
{
  return 2003329396LL;
}

uint64_t sub_2C7D4()
{
  return 2003329396LL;
}

uint64_t sub_2C7E0()
{
  return 2003329396LL;
}

uint64_t **sub_2C7EC(uint64_t **a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        unsigned int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (v9 >= v7) {
        break;
      }
      unsigned int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    sub_15E14(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }

  return v8;
}

uint64_t sub_2C8A4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0LL;
  }
  sub_29A44((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1LL;
}

os_log_t sub_2C91C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AA0 = (uint64_t)result;
  return result;
}

uint64_t sub_2C948(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v10);
  *(void *)uint64_t v6 = off_823C8;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  switch(a2)
  {
    case 9:
      int v7 = 1;
      goto LABEL_8;
    case 10:
      int v7 = 2;
      goto LABEL_8;
    case 11:
      int v7 = 3;
      goto LABEL_8;
    case 12:
    case 18:
      int v7 = 4;
      goto LABEL_8;
    case 13:
      *(_DWORD *)(a1 + 256) = 0;
      break;
    case 14:
      int v7 = 6;
LABEL_8:
      *(_DWORD *)(a1 + 256) = v7;
      break;
    default:
      unsigned int v9 = (os_log_s *)qword_95AB0;
      if (os_log_type_enabled((os_log_t)qword_95AB0, OS_LOG_TYPE_ERROR)) {
        sub_5C2EC(a2, v9);
      }
      break;
  }

  *(_BYTE *)(a1 + 176) = 0;
  return a1;
}

void *sub_2CA38(uint64_t a1)
{
  *(void *)a1 = off_823C8;
  if (*(_DWORD *)(a1 + 92))
  {
    unint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = a1 + 8 * v2;
      encoder_destroy(*(int **)(v3 + 184));
      free(*(void **)(v3 + 216));
      free(*(void **)(v3 + 232));
      ++v2;
    }

    while (v2 < *(unsigned int *)(a1 + 92));
  }

  return sub_10384((void *)a1);
}

void sub_2CAAC(uint64_t a1)
{
  uint64_t v1 = sub_2CA38(a1);
  operator delete(v1);
}

uint64_t sub_2CAC0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 156) = a2;
  if (*(_DWORD *)(a1 + 92))
  {
    unint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = encoder_create(*(_DWORD *)(a1 + 256));
      uint64_t v5 = a1 + 8 * v3;
      *(void *)(v5 + 184) = v4;
      *(void *)(v5 + 200) = v4;
      ++v3;
      unint64_t v6 = *(unsigned int *)(a1 + 92);
    }

    while (v3 < v6);
    BOOL v7 = (_DWORD)v6 == 0;
  }

  else
  {
    BOOL v7 = 1;
  }

  unint64_t v9 = *(int *)(*(void *)(a1 + 200) + 4LL);
  unint64_t v8 = *(int *)(*(void *)(a1 + 200) + 8LL);
  *(void *)(a1 + 264) = v8;
  *(void *)(a1 + 272) = v9;
  *(void *)(a1 + 280) = 2 * v8;
  *(void *)(a1 + 28_Block_object_dispose(va, 8) = 2 * v9;
  if (!v7)
  {
    unint64_t v10 = 0LL;
    do
    {
      uint64_t v11 = a1 + 8 * v10;
      *(void *)(v11 + 216) = calloc(*(void *)(a1 + 264), 2uLL);
      *(void *)(v11 + 232) = calloc(*(void *)(a1 + 264), 4uLL);
      ++v10;
    }

    while (v10 < *(unsigned int *)(a1 + 92));
    unint64_t v8 = *(void *)(a1 + 264);
    unint64_t v9 = *(void *)(a1 + 272);
  }

  *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
  unsigned int v12 = (float)(ceilf((float)(20480 * *(_DWORD *)(a1 + 88)) / (float)v8) * (float)v9);
  *(_DWORD *)(a1 + 152) = v12;
  uint64_t v13 = operator new[](2LL * v12);
  int v14 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v13;
  if (v14) {
    operator delete[](v14);
  }
  *(_DWORD *)(a1 + 2sub_52C5C(v1 - 96) = 939524096;
  return 0LL;
}

void sub_2CBD8(uint64_t a1, __int16 *a2, int a3, _DWORD *a4)
{
  LODWORD(v5) = a3;
  unint64_t v8 = *(_OWORD **)(a1 + 144);
  if (*(_DWORD *)(a1 + 92) >= 3u)
  {
    unint64_t v9 = (os_log_s *)qword_95AB0;
    if (os_log_type_enabled((os_log_t)qword_95AB0, OS_LOG_TYPE_FAULT)) {
      sub_5C360(v9);
    }
  }

  unint64_t v10 = 0LL;
  if ((_DWORD)v5)
  {
    uint64_t v5 = v5;
    uint64_t v11 = *(void *)(a1 + 248);
    unint64_t v12 = *(void *)(a1 + 264);
    while (v11 + v5 >= v12)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 92);
      if (v12 != v11)
      {
        uint64_t v14 = 0LL;
        do
        {
          if ((_DWORD)v13)
          {
            uint64_t v15 = v13;
            __int16 v16 = (uint64_t *)(a1 + 232);
            do
            {
              int v17 = *a2++;
              float v18 = *(float *)(a1 + 296) * (float)v17;
              uint64_t v19 = *v16++;
              *(float *)(v19 + 4 * (v14 + v11)) = v18;
              --v15;
            }

            while (v15);
          }

          ++v14;
        }

        while (v14 != v12 - v11);
      }

      if ((_DWORD)v13)
      {
        unint64_t v20 = 0LL;
        do
        {
          encode(*(void *)(a1 + 8 * v20 + 184), *(const float **)(a1 + 8 * v20 + 232), v8);
          unint64_t v8 = (_OWORD *)((char *)v8 + 2 * *(void *)(a1 + 272));
          ++v20;
        }

        while (v20 < *(unsigned int *)(a1 + 92));
        unint64_t v12 = *(void *)(a1 + 264);
        uint64_t v11 = *(void *)(a1 + 248);
        v10 += v20;
      }

      *(void *)(a1 + 24_Block_object_dispose(va, 8) = 0LL;
      uint64_t v5 = v5 - v12 + v11;
      uint64_t v11 = 0LL;
      if (!v5) {
        goto LABEL_26;
      }
    }

    uint64_t v21 = 0LL;
    uint64_t v22 = *(unsigned int *)(a1 + 92);
    do
    {
      if ((_DWORD)v22)
      {
        uint64_t v23 = v22;
        BOOL v24 = (uint64_t *)(a1 + 232);
        do
        {
          int v25 = *a2++;
          float v26 = *(float *)(a1 + 296) * (float)v25;
          uint64_t v27 = *v24++;
          *(float *)(v27 + 4 * (v21 + v11)) = v26;
          --v23;
        }

        while (v23);
      }

      ++v21;
    }

    while (v21 != v5);
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = v11 + v5;
  }

LABEL_26:
  if (*(_BYTE *)(a1 + 177)) {
    sub_1097C(a1, *(_DWORD *)(a1 + 288) * v10, 0);
  }
  if (*(_BYTE *)(a1 + 178))
  {
    if (!v10)
    {
      *a4 = 0;
      return;
    }

    int v28 = 0;
    int v29 = byte_95AB8;
    LODWORD(v30) = *(_DWORD *)(a1 + 92);
    do
    {
      if ((_DWORD)v30)
      {
        unint64_t v31 = 0LL;
        do
        {
          memset((void *)(*(void *)(a1 + 144) + *(void *)(a1 + 288) * (v28 + v31++)), v29, *(void *)(a1 + 288));
          unint64_t v30 = *(unsigned int *)(a1 + 92);
        }

        while (v31 < v30);
      }

      else
      {
        LODWORD(v31) = 0;
      }

      ++v29;
      v28 += v31;
    }

    while (v10 > v28);
    byte_95AB8 = v29;
  }

  *a4 = v10;
  if ((_DWORD)v10)
  {
    uint64_t v32 = 0LL;
    uint64_t v33 = *(void *)(a1 + 288);
    uint64_t v34 = v10;
    __int16 v35 = a4 + 4;
    do
    {
      *__int16 v35 = *(void *)(a1 + 144) + v32;
      *((_DWORD *)v35 - 2) = 1;
      *((_DWORD *)v35 - 1) = v33;
      v32 += v33;
      v35 += 2;
      --v34;
    }

    while (v34);
  }

          int v17 = qword_962E0;
          float v18 = (*(uint64_t (**)(void *, uint64_t *))(*v9 + 16LL))(v9, v13);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32LL))(v17, v18);
          sub_52BF4((uint64_t)v30);
          int v29 = 0;
          int v29 = (*(uint64_t (**)(void *))(*v9 + 16LL))(v9);
          v28[0] = 0LL;
          v28[1] = 0LL;
          sub_52B28((uint64_t)v28, a1 + 264);
          uint64_t v19 = (dispatch_queue_s *)sub_3EA54(a1, v29);
          if (v19)
          {
            unint64_t v20 = +[BTAudioSmartRouteManager sharedInstance](&OBJC_CLASS___BTAudioSmartRouteManager, "sharedInstance");
            uint64_t v21 = objc_alloc(&OBJC_CLASS___NSString);
            (*(void (**)(_BYTE *__return_ptr, void *))(*v9 + 824LL))(buf, v9);
            if (v34 >= 0) {
              uint64_t v22 = buf;
            }
            else {
              uint64_t v22 = *(_BYTE **)buf;
            }
            uint64_t v23 = -[NSString initWithUTF8String:](v21, "initWithUTF8String:", v22);
            if (v34 < 0) {
              operator delete(*(void **)buf);
            }
            -[BTAudioSmartRouteManager unRegisterDevice:](v20, "unRegisterDevice:", v23);

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_3EAE4;
            block[3] = &unk_812A8;
            void block[4] = v9;
            dispatch_async(v19, block);
            dispatch_release(v19);
          }

          sub_2C8A4(a1 + 472, &v29);
          sub_52BF4((uint64_t)v28);
          sub_52B54((uint64_t)v30);
          sub_52C5C(v28);
        }
      }
    }

    while (Count-- > 1);
  }

  sub_52BF4((uint64_t)v30);
  return sub_52C5C(v30);
}

      uint64_t v11 = 8;
      goto LABEL_31;
    }

    if (v10 == 1819107691) {
      goto LABEL_26;
    }
    uint64_t v13 = 1870098020;
  }

  if (v10 == v13)
  {
    int Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
    if (Count < 1)
    {
      __int16 v16 = 0;
    }

    else
    {
      uint64_t v15 = 0LL;
      __int16 v16 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v15);
        if (ValueAtIndex[1136] || ValueAtIndex[1137] || ValueAtIndex[1139]) {
          ++v16;
        }
        ++v15;
      }

      while (Count != v15);
    }

    uint64_t v11 = 4 * v16;
    goto LABEL_31;
  }

        os_log_t result = 0LL;
        *a4 = v4;
        return result;
      }

      if (v5 == 1937007734) {
        goto LABEL_26;
      }
      unint64_t v9 = 1952805485;
LABEL_25:
      if (v5 != v9) {
        return result;
      }
      goto LABEL_26;
    }

    if (v5 != 1935762292)
    {
      if (v5 == 1935894638) {
        goto LABEL_26;
      }
      unint64_t v9 = 1935960434;
      goto LABEL_25;
    }

uint64_t sub_2CE3C(uint64_t result)
{
  *(void *)(result + 24_Block_object_dispose(va, 8) = 0LL;
  return result;
}

uint64_t sub_2CE44()
{
  return 1LL;
}

os_log_t sub_2CE4C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AB0 = (uint64_t)result;
  return result;
}

void sub_2CE78(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v5);
  *(void *)uint64_t v4 = &off_82420;
  *(_BYTE *)(v4 + 176) = 1;
}

uint64_t sub_2CEBC(uint64_t a1, int a2, unsigned int a3)
{
  UInt32 ioPropertyDataSize = 0;
  int v24 = a2;
  *(void *)(a1 + 104) = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 184) = a2;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = xmmword_658A0;
  *(_OWORD *)(a1 + 112) = xmmword_658B0;
  OSStatus v5 = AudioConverterNew( (const AudioStreamBasicDescription *)(a1 + 64),  (const AudioStreamBasicDescription *)(a1 + 104),  (AudioConverterRef *)(a1 + 56));
  sub_189BC(v5, (uint64_t)"Could not create new audio converter");
  int v21 = 8;
  int inPropertyData = 3;
  int v20 = 0;
  if (*(_DWORD *)(a1 + 132) == 2)
  {
    OSStatus v6 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x73746D64u, 4u, &inPropertyData);
    sub_189BC(v6, (uint64_t)"Failed to set SBC stereo mode");
  }

  OSStatus v7 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x6E737562u, 4u, &v21);
  sub_189BC(v7, (uint64_t)"Failed to set SBC subband number");
  OSStatus v8 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x616C6C63u, 4u, &v20);
  sub_189BC(v8, (uint64_t)"Failed to set SBC allocation method");
  OSStatus v9 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x62697470u, 4u, &v24);
  sub_189BC(v9, (uint64_t)"Failed to set SBC bitpool");
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioConverterGetProperty( *(AudioConverterRef *)(a1 + 56),  0x61636F64u,  &ioPropertyDataSize,  (void *)(a1 + 104));
  sub_189BC(Property, (uint64_t)"Failed to create SBC output data format");
  int outPropertyData = *(_DWORD *)(a1 + 120);
  UInt32 ioPropertyDataSize = 4;
  OSStatus v11 = AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 56), 0x786F7073u, &ioPropertyDataSize, &outPropertyData);
  sub_189BC(v11, (uint64_t)"Could not get kAudioConverterPropertyMaximumOutputPacketSize");
  if (*(_BYTE *)(a1 + 48))
  {
    unint64_t v12 = (os_log_s *)qword_95AC0;
    if (os_log_type_enabled((os_log_t)qword_95AC0, OS_LOG_TYPE_DEBUG)) {
      sub_5C3E0(&outPropertyData, v12);
    }
  }

  *(_DWORD *)(a1 + 160) = a3;
  size_t v13 = outPropertyData * a3;
  *(_DWORD *)(a1 + 152) = v13;
  uint64_t v14 = operator new[](v13);
  uint64_t v15 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v14;
  if (v15)
  {
    operator delete[](v15);
    a3 = *(_DWORD *)(a1 + 160);
  }

  __int16 v16 = operator new[](16LL * a3);
  int v17 = *(void **)(a1 + 168);
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v16;
  if (v17) {
    operator delete[](v17);
  }
  return 0LL;
}

void sub_2D0BC(uint64_t a1, uint64_t a2, int a3, UInt32 *a4)
{
  *(void *)&outOutputData.mNumberBuffers = 0LL;
  UInt32 v6 = *(_DWORD *)(a1 + 132);
  outOutputData.mNumberBuffers = 1;
  UInt32 v7 = *(_DWORD *)(a1 + 152);
  outOutputData.mBuffers[0].mNumberChannels = v6;
  outOutputData.mBuffers[0].UInt32 mDataByteSize = v7;
  uint64_t v8 = *(void *)(a1 + 136);
  outOutputData.mBuffers[0].mData = *(void **)(a1 + 144);
  inInputDataProcUserData[0] = a2;
  inInputDataProcUserData[1] = (*(_DWORD *)(a1 + 80) * a3);
  __int128 v9 = *(_OWORD *)(a1 + 80);
  __int128 v25 = *(_OWORD *)(a1 + 64);
  __int128 v26 = v9;
  uint64_t v27 = *(void *)(a1 + 96);
  __int128 v10 = *(_OWORD *)(a1 + 120);
  __int128 v28 = *(_OWORD *)(a1 + 104);
  __int128 v29 = v10;
  OSStatus v11 = *(AudioStreamPacketDescription **)(a1 + 168);
  uint64_t v30 = v8;
  unint64_t v31 = v11;
  UInt32 ioOutputDataPacketSize = *(_DWORD *)(a1 + 160);
  OSStatus v12 = AudioConverterFillComplexBuffer( *(AudioConverterRef *)(a1 + 56),  (AudioConverterComplexInputDataProc)sub_188A8,  inInputDataProcUserData,  &ioOutputDataPacketSize,  &outOutputData,  v11);
  sub_189BC(v12, (uint64_t)"AudioConverterFillComplexBuffer Failed");
  uint64_t v13 = ioOutputDataPacketSize;
  if (ioOutputDataPacketSize && outOutputData.mBuffers[0].mDataByteSize)
  {
    uint64_t v14 = 0LL;
    *a4 = ioOutputDataPacketSize;
    uint64_t v15 = *(void *)(a1 + 168);
    do
    {
      __int16 v16 = &a4[v14];
      *((void *)v16 + 2) = *(void *)(a1 + 144) + *(void *)(v15 + v14 * 4);
      uint64_t v15 = *(void *)(a1 + 168);
      UInt32 v17 = *(_DWORD *)(v15 + v14 * 4 + 12);
      v16[2] = 1;
      v16[3] = v17;
      v14 += 4LL;
    }

    while (4 * v13 != v14);
    if (!(_DWORD)v13) {
      return;
    }
  }

  else
  {
    *a4 = 0;
    if (!(_DWORD)v13) {
      return;
    }
  }

  if (*(_BYTE *)(a1 + 177))
  {
    UInt32 v18 = 0;
    uint64_t v19 = (int *)(*(void *)(a1 + 168) + 12LL);
    uint64_t v20 = v13;
    do
    {
      int v21 = *v19;
      v19 += 4;
      v18 += v21;
      --v20;
    }

    while (v20);
    sub_1097C(a1, v18, v13);
  }

AudioComponent sub_2D1FC()
{
  AudioComponent result = (AudioComponent)dlopen("/System/Library/Components/AudioCodecs.component/Contents/MacOS/AudioCodecs", 5);
  if (result)
  {
    uint64_t v1 = (AudioComponentPlugInInterface *(__cdecl *)(const AudioComponentDescription *))dlsym( result,  "ACSBCEncoderFactory");
    *(_OWORD *)&v2.componentType = xmmword_658C0;
    v2.componentFlagsMask = 0;
    return AudioComponentRegister(&v2, &stru_84880, 0, v1);
  }

  return result;
}

void sub_2D264(void *a1)
{
  uint64_t v1 = sub_10384(a1);
  operator delete(v1);
}

uint64_t sub_2D278()
{
  return 1LL;
}

uint64_t sub_2D280()
{
  return 1LL;
}

os_log_t sub_2D288()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AC0 = (uint64_t)result;
  return result;
}

uint64_t sub_2D2B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = a1 + 9156;
  uint64_t v8 = sub_43E8(a1, a3);
  *(void *)uint64_t v8 = off_82478;
  *(_WORD *)(v7 + _Block_object_dispose(va, 8) = 0;
  *(_OWORD *)(v8 + 9236) = 0u;
  *(_OWORD *)(v8 + 9252) = 0u;
  *(void *)(v8 + 9080) = 0LL;
  *(void *)(v8 + 90sub_52C5C(v1 - 96) = 0LL;
  *(void *)(v8 + 908_Block_object_dispose(va, 8) = 0LL;
  sub_9600(v8, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 1552LL))(a1, a4);
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 38_Block_object_dispose(va, 8) = 0LL;
  sub_4658((_BYTE *)a1, a4);
  *(_WORD *)(v7 + 2_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 918_Block_object_dispose(va, 8) = 150;
  *(_BYTE *)uint64_t v7 = 0;
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 1952539500;
  sub_2D774(a1, a4);
  *(_DWORD *)(a1 + 9232) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 288));
  *(_DWORD *)(a1 + 292) = 1;
  *(void *)(a1 + 2sub_52C5C(v1 - 96) = *(void *)(a1 + 9112);
  *(_DWORD *)(a1 + 380) = 21856;
  *(_OWORD *)(a1 + 304) = xmmword_658F0;
  *(_OWORD *)(a1 + 320) = xmmword_65900;
  *(_DWORD *)(a1 + 372) = 2732;
  if (*(_DWORD *)(a1 + 9160) == 33023) {
    int v9 = 1280;
  }
  else {
    int v9 = 2732;
  }
  *(_DWORD *)(a1 + 376) = v9;
  __int128 v10 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
    sub_5C54C(v9, v10);
  }
  *(_DWORD *)(a1 + 384) = 10000;
  *(_BYTE *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 436) = -1082130432;
  if (sub_8A8C(a1) && (sub_5280C() & 1) == 0)
  {
    *(_DWORD *)(a1 + 444) = -1027080192;
    uint64_t v19 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      unint64_t v34 = 0xC059000000000000LL;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "Adjusting volume floor to %f", buf, 0xCu);
      int v11 = *(_DWORD *)(a1 + 444);
    }

    else
    {
      int v11 = -1027080192;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 444) = -1038090240;
    int v11 = -1038090240;
  }

  *(_DWORD *)(a1 + 44_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 440) = v11;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    OSStatus v12 = operator new(0x1CuLL);
    v13.n128_u32[0] = *(_DWORD *)(a1 + 440);
    v14.n128_u64[0] = *(void *)(a1 + 296);
    v14.n128_f32[0] = v14.n128_f64[0];
    sub_15524(v12, *(_BYTE *)(a1 + 408) == 0, v13, v14, 0.02);
    *(void *)(a1 + 400) = v12;
  }

  *(_WORD *)(a1 + 460) = 1;
  *(void *)(a1 + 736) = 0LL;
  *(void *)(a1 + 72_Block_object_dispose(va, 8) = 4LL;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 1024LL))(a1, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1016LL))(a1, 1LL);
  *(void *)(a1 + 40) = sub_1C3A4() + (10 * *(_DWORD *)(a1 + 372));
  *(void *)(a1 + 56) = 0LL;
  uint64_t v15 = (_OWORD *)(a1 + 296);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = sub_1C3A4() + 109280;
  int v16 = *(_DWORD *)(a1 + 9160);
  switch(v16)
  {
    case 33023:
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
        sub_5C520();
      }
      UInt32 v17 = operator new(0xD8uLL);
      __int128 v20 = *(_OWORD *)(a1 + 312);
      v27[0] = *v15;
      v27[1] = v20;
      uint64_t v28 = *(void *)(a1 + 328);
      sub_1CE74((uint64_t)v17, 33023, (uint64_t)v27, 0);
      goto LABEL_25;
    case 2:
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
        sub_5C4F4();
      }
      UInt32 v17 = operator new(0xD8uLL);
      __int128 v21 = *(_OWORD *)(a1 + 312);
      v29[0] = *v15;
      v29[1] = v21;
      uint64_t v30 = *(void *)(a1 + 328);
      sub_1CE74((uint64_t)v17, 2, (uint64_t)v29, 0);
      goto LABEL_25;
    case 0:
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
        sub_5C4C8();
      }
      UInt32 v17 = operator new(0xC0uLL);
      __int128 v18 = *(_OWORD *)(a1 + 312);
      v31[0] = *v15;
      v31[1] = v18;
      uint64_t v32 = *(void *)(a1 + 328);
      sub_2CE78((uint64_t)v17, 0, (uint64_t)v31);
LABEL_25:
      *(void *)(a1 + 232) = v17;
      (*(void (**)(void *, void, void))(*(void *)v17 + 16LL))( v17,  *(unsigned int *)(a1 + 9108),  *(unsigned int *)(a1 + 9120));
      uint64_t v22 = *(void *)(a1 + 232);
      *(_BYTE *)(v22 + 177) = *(_BYTE *)(a1 + 744);
      *(void *)(a1 + 216) = v22;
      sub_1B4B4(*(void *)(qword_962E8 + 328), *(_DWORD *)(v22 + 52), 2, *(double *)(a1 + 9112));
      *(_BYTE *)(*(void *)(a1 + 216) + 48LL) = *(_BYTE *)(a1 + 745);
      uint64_t v23 = qword_962E8;
      int v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      return a1;
  }

  __int128 v25 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR)) {
    sub_5C458(v16, v25);
  }
  return a1;
}

void sub_2D738(_Unwind_Exception *a1)
{
}

void sub_2D774(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyNexusUuid");
  if (value)
  {
    OSStatus v5 = value;
    xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySkywalkKey");
    uint64_t v7 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v6));
    uint64_t v8 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    int v9 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      int v156 = 67109378;
      LODWORD(v157[0]) = v10;
      WORD2(v157[0]) = 2112;
      *(void *)((char *)v157 + 6) = v8;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "device [%d] Received skywalk nexus provider NSUUID: %@",  (uint8_t *)&v156,  0x12u);
    }

    int v11 = operator new(0xE8uLL);
    sub_151C8(v11, v8, v7, 0LL, 0);
    *(void *)(a1 + 24) = v11;
  }

  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySampleRate");
  if (xpc_get_type(v12) != (xpc_type_t)&_xpc_type_double)
  {
    __n128 v13 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5CAFC(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }

  *(double *)(a1 + 9112) = xpc_double_get_value(v12);
  xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyCategory");
  if (xpc_get_type(v21) != (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v22 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5CA8C(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }

  *(_DWORD *)(a1 + 9104) = xpc_int64_get_value(v21);
  xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyLatency");
  if (xpc_get_type(v30) != (xpc_type_t)&_xpc_type_int64)
  {
    unint64_t v31 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5CA1C(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }

  int v39 = xpc_int64_get_value(v30);
  *(_DWORD *)(a1 + 38_Block_object_dispose(va, 8) = v39;
  *(_DWORD *)(a1 + 3sub_52C5C(v1 - 96) = v39;
  *(_DWORD *)(a1 + 392) = v39;
  BOOL v40 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v156 = 67109120;
    LODWORD(v157[0]) = v39;
    _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "A2DP Received initial latency %u from bluetoothd",  (uint8_t *)&v156,  8u);
  }

  xpc_object_t v41 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyCodec");
  if (xpc_get_type(v41) != (xpc_type_t)&_xpc_type_int64)
  {
    unsigned int v42 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C9AC(v42, v43, v44, v45, v46, v47, v48, v49);
    }
  }

  *(_DWORD *)(a1 + 9160) = xpc_int64_get_value(v41);
  xpc_object_t v50 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyBitpool");
  if (xpc_get_type(v50) != (xpc_type_t)&_xpc_type_int64)
  {
    __int16 v51 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C93C(v51, v52, v53, v54, v55, v56, v57, v58);
    }
  }

  *(_DWORD *)(a1 + 910_Block_object_dispose(va, 8) = xpc_int64_get_value(v50);
  xpc_object_t v59 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyFrameLen");
  if (xpc_get_type(v59) != (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v60 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C8CC(v60, v61, v62, v63, v64, v65, v66, v67);
    }
  }

  *(_DWORD *)(a1 + 9120) = xpc_int64_get_value(v59);
  xpc_object_t v68 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyFrameCount");
  if (xpc_get_type(v68) != (xpc_type_t)&_xpc_type_int64)
  {
    int v69 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C85C(v69, v70, v71, v72, v73, v74, v75, v76);
    }
  }

  *(_DWORD *)(a1 + 9124) = xpc_int64_get_value(v68);
  xpc_object_t v77 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyRtpInterval");
  if (xpc_get_type(v77) != (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v78 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C77C(v78, v79, v80, v81, v82, v83, v84, v85);
    }
  }

  *(_DWORD *)(a1 + 914_Block_object_dispose(va, 8) = xpc_int64_get_value(v77);
  xpc_object_t v86 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyDynamicClock");
  if (xpc_get_type(v86) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v87 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C7EC(v87, v88, v89, v90, v91, v92, v93, v94);
    }
  }

  *(_BYTE *)(a1 + 9164) = xpc_BOOL_get_value(v86);
  xpc_object_t v95 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySamplingSpeed");
  if (v95) {
    *(_BYTE *)(a1 + 9184) = xpc_BOOL_get_value(v95);
  }
  xpc_object_t v96 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySamplingSpeedParams");
  xpc_object_t v97 = xpc_dictionary_get_value(v96, "kBTAudioMsgPropertyLatencyChangeMsec");
  if (xpc_get_type(v77) != (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v98 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C77C(v98, v99, v100, v101, v102, v103, v104, v105);
    }
  }

  int64_t v106 = xpc_int64_get_value(v97);
  xpc_object_t v107 = xpc_dictionary_get_value(v96, "kBTAudioMsgPropertySamplingIntervalMultiplier");
  if (xpc_get_type(v107) != (xpc_type_t)&_xpc_type_double)
  {
    uint64_t v108 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C70C(v108, v109, v110, v111, v112, v113, v114, v115);
    }
  }

  float v116 = xpc_double_get_value(v107);
  (*(void (**)(uint64_t, int64_t, float))(*(void *)a1 + 680LL))(a1, v106, v116);
  xpc_object_t v117 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyDynamicLatencySupported");
  if (xpc_get_type(v117) != (xpc_type_t)&_xpc_type_BOOL)
  {
    __int128 v118 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5C69C(v118, v119, v120, v121, v122, v123, v124, v125);
    }
  }

  *(_BYTE *)(a1 + 9185) = xpc_BOOL_get_value(v117);
  xpc_object_t v126 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyLowLatencyGameSupport");
  xpc_object_t v127 = v126;
  if (v126)
  {
    if (xpc_get_type(v126) != (xpc_type_t)&_xpc_type_BOOL)
    {
      BOOL v128 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
        sub_5C62C(v128, v129, v130, v131, v132, v133, v134, v135);
      }
    }

    uint64_t v136 = *(void *)(*(void *)(a1 + 416) + 9248LL);
    BOOL v137 = xpc_BOOL_get_value(v127);
    sub_26D18(v136, v137);
  }

  xpc_object_t v138 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyDynamicLatencyDelayMicroSec");
  __int128 v139 = v138;
  if (v138)
  {
    if (xpc_get_type(v138) != (xpc_type_t)&_xpc_type_int64)
    {
      __int128 v140 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
        sub_5C5BC(v140, v141, v142, v143, v144, v145, v146, v147);
      }
    }

    xpc_object_t v148 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      int v149 = xpc_int64_get_value(v139);
      int v156 = 67109120;
      LODWORD(v157[0]) = v149 / 1000;
      _os_log_impl(&dword_0, v148, OS_LOG_TYPE_DEFAULT, "Device In ear delay %uMsec", (uint8_t *)&v156, 8u);
    }

    unsigned int v150 = xpc_int64_get_value(v139);
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 648LL))(a1, v150 / 0x3E8uLL);
  }

  if (!*(_DWORD *)(a1 + 9104)
    && (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1288LL))(a1) & 1) != 0 || sub_340E8()))
  {
    BOOL v151 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v156) = 0;
      _os_log_impl( &dword_0,  v151,  OS_LOG_TYPE_DEFAULT,  "Device category was unknown, defaulting to headphone",  (uint8_t *)&v156,  2u);
    }

    *(_DWORD *)(a1 + 9104) = 1;
  }

  xpc_object_t v152 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyVolumeScalar");
  if (v152 && *(_BYTE *)(a1 + 408))
  {
    float v153 = xpc_double_get_value(v152);
    uint64_t v154 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      int v156 = 134217984;
      v157[0] = v153;
      _os_log_impl( &dword_0,  v154,  OS_LOG_TYPE_DEFAULT,  "A2DP Received initial absolute volume of %f from bluetoothd",  (uint8_t *)&v156,  0xCu);
    }

    *(float *)(a1 + 432) = v153;
    *(float *)(a1 + 440) = (*(float (**)(uint64_t, float))(*(void *)a1 + 360LL))(a1, v153);
  }

  uint64_t v155 = *(void *)(a1 + 416);
}

void sub_2E068(_Unwind_Exception *a1)
{
}

uint64_t sub_2E088(void *a1)
{
  *a1 = off_82478;
  uint64_t v2 = *(void *)(a1[52] + 9248LL);
  if (*(_BYTE *)(v2 + 277))
  {
    uint64_t v3 = qword_962E8;
    if (*(char *)(v2 + 31) < 0)
    {
      sub_A134(__p, *(void **)(v2 + 8), *(void *)(v2 + 16));
    }

    else
    {
      __int128 v4 = *(_OWORD *)(v2 + 8);
      uint64_t v9 = *(void *)(v2 + 24);
      *(_OWORD *)std::string __p = v4;
    }

    sub_3B7F0(v3, (uint64_t)__p);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }

  (*(void (**)(void *))(*a1 + 1400LL))(a1);
  sub_77E0((uint64_t)a1);
  if ((*(uint64_t (**)(void *))(*a1 + 1632LL))(a1)
    && (*(unsigned int (**)(void *))(*a1 + 1032LL))(a1))
  {
    OSStatus v5 = (void *)(*(uint64_t (**)(void *))(*a1 + 1632LL))(a1);
    free(v5);
    (*(void (**)(void *, void))(*a1 + 1648LL))(a1, 0LL);
  }

  (*(void (**)(void *))(*a1 + 72LL))(a1);
  return sub_459C((uint64_t)a1, v6);
}

void sub_2E1A0(void *a1)
{
  uint64_t v1 = (void *)sub_2E088(a1);
  operator delete(v1);
}

void sub_2E1B4(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kBTAudioMsgPropertyDeviceUID");
  if (!string)
  {
    __int128 v4 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_58940(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
  *(void *)(a1 + 200) = v12;
  __n128 v13 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v15 = 138412546;
    CFStringRef v16 = v12;
    __int16 v17 = 1024;
    int v18 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "A2DP Device XPC connection for UID %@ connected to[ %d ] ",  (uint8_t *)&v15,  0x12u);
    CFStringRef v12 = *(CFStringRef *)(a1 + 200);
  }

  **(void **)(a1 + 20_Block_object_dispose(va, 8) = v12;
}

uint64_t sub_2E2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a3 != 1)
  {
    uint64_t v8 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5CB6C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 792LL))(v18, a1, a4);
  __int128 v16 = v18[1];
  *(_OWORD *)a2 = v18[0];
  *(_OWORD *)(a2 + 16) = v16;
  *(void *)(a2 + 32) = v19;
  *(double *)(a2 + 40) = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  *(double *)(a2 + 4_Block_object_dispose(va, 8) = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  return a3;
}

uint64_t sub_2E3BC(uint64_t a1, double *a2, uint64_t a3)
{
  if ((_DWORD)a3 != 1)
  {
    uint64_t v6 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_FAULT)) {
      sub_5CB6C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  *a2 = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  a2[1] = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  return a3;
}

BOOL sub_2E44C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return 0LL;
  }
  return 1LL;
}

BOOL sub_2E484(uint64_t a1, char a2, double a3, double a4)
{
  return (a2 & 1) == 0 && (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1) == a4;
}

uint64_t sub_2E4C0(uint64_t a1, int a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1040LL))(a1);
  if (a2 != 1768845428 || (_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032LL))(a1);
    if (a2 != 1869968496 || (_DWORD)result) {
      return (a2 == 1735159650 || a2 == 1869968496 || a2 == 1768845428) && a3 == 0;
    }
  }

  return result;
}

uint64_t sub_2E570(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL);
}

uint64_t sub_2E580(_DWORD *a1)
{
  if (a1[99] != a1[97]) {
    (*(void (**)(_DWORD *))(*(void *)a1 + 272LL))(a1);
  }
  return 0LL;
}

uint64_t sub_2E5B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 416);
  if (*(_BYTE *)(*(void *)(v1 + 9248) + 230LL))
  {
    uint64_t v2 = result;
    uint64_t v3 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v4 = 0;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "A2DP notify kBluetoothAudioDevicePropertySpatialMode change",  v4,  2u);
      uint64_t v1 = *(void *)(v2 + 416);
    }

    return sub_429B4(v1, 1936747876);
  }

  return result;
}

void sub_2E640(uint64_t a1, BOOL a2)
{
  uint64_t v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_124E4(v2, a2);
  }
}

void sub_2E650(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_125D8(v2, *(_DWORD *)(a1 + 9124));
  }
}

uint64_t sub_2E668(void *a1, __int16 a2)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "A2DPSeamlessTransition")
    && sub_26DD4(*(void *)(a1[52] + 9248LL)))
  {
    char v23 = 0;
    __int16 v22 = 0;
    uint64_t v4 = sub_3EE68(qword_962E8);
    uint64_t v5 = *(void *)(a1[52] + 9248LL);
    __int16 v6 = *(_WORD *)(v5 + 608);
    __int16 v7 = v6 + 1;
    *(_WORD *)(v5 + 60_Block_object_dispose(va, 8) = v6 + 1;
    v21[0] = ((unsigned __int16)(v6 + 1) >> 8) & 7 | 0xB0;
    v21[1] = v6 + 1;
    void v21[2] = (v4 >> 15) & 7 | 0xE8;
    v21[3] = v4 >> 7;
    v21[4] = v4 & 0x7F;
    if (*((_BYTE *)a1 + 745))
    {
      uint64_t v8 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 134218496;
        uint64_t v16 = v4;
        __int16 v17 = 1024;
        int v18 = v4 & 0x3FFFF;
        __int16 v19 = 1024;
        int v20 = v7 & 0x7FF;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Current Host Time: %llu; Current Host Time: (converted to 18 bits) %d; A2DP Frame number: %d",
          (uint8_t *)&v15,
          0x18u);
      }
    }

    v21[5] = HIBYTE(a2) & 7 | 0x10;
    v21[6] = a2;
    uint64_t v9 = a1[3];
    uint64_t v10 = 10LL;
    uint64_t v11 = (int *)v21;
    size_t v12 = 10LL;
  }

  else
  {
    (*(void (**)(void *))(*a1 + 1616LL))(a1);
    __int16 v13 = (*(uint64_t (**)(void *))(*a1 + 1600LL))(a1);
    LOBYTE(v15) = HIBYTE(v13) & 0xF | 0xB0;
    BYTE1(v15) = v13;
    BYTE2(v15) = HIBYTE(a2) & 7 | 0x10;
    HIBYTE(v15) = a2;
    uint64_t v9 = a1[3];
    uint64_t v10 = 4LL;
    uint64_t v11 = &v15;
    size_t v12 = 4LL;
  }

  sub_14A08(v9, v11, v12);
  return v10;
}

uint64_t sub_2E83C(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(_BYTE **)(*(void *)(a1 + 416) + 9096LL);
    if (v3)
    {
      if (v3[192] && (*(unsigned int (**)(_BYTE *))(*(void *)v3 + 1160LL))(v3))
      {
        uint64_t v4 = (os_log_s *)qword_95AC8;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v8 = 0;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "A2DP TriggerAudioStream Start while eSCO ongoing: Disconnect eSCO immediately",  v8,  2u);
        }

        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9096LL) + 192LL)) {
          uint64_t v5 = *(void *)(*(void *)(a1 + 416) + 9096LL);
        }
        else {
          uint64_t v5 = 0LL;
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 1488LL))(v5);
        if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9096LL) + 192LL)) {
          uint64_t v6 = *(void *)(*(void *)(a1 + 416) + 9096LL);
        }
        else {
          uint64_t v6 = 0LL;
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 256LL))(v6, 0LL, 1918989668LL, 1LL);
      }
    }
  }

  return 0LL;
}

uint64_t sub_2E91C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 248LL))(*(void *)(a1 + 416));
}

uint64_t sub_2E92C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 240LL))(*(void *)(a1 + 416));
}

void *sub_2E93C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result[52] + 9248LL);
  __int128 v3 = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 16) = *(void *)(v2 + 24);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_2E96C(uint64_t a1, int a2, float a3)
{
  *(float *)(a1 + 432) = a3;
  *(float *)(a1 + 436) = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL)) {
    float v6 = sub_1590C(a3);
  }
  else {
    float v6 = *(float *)(a1 + 448) - (float)((float)(a3 + -1.0) * *(float *)(a1 + 444));
  }
  *(float *)(a1 + 440) = v6;
  __int16 v7 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    float v8 = *(float *)(a1 + 432);
    double v9 = a3;
    double v10 = v6;
    if (a2) {
      uint64_t v11 = "Yes";
    }
    else {
      uint64_t v11 = "No";
    }
    v15[0] = 134219266;
    *(double *)&v15[1] = v9;
    __int16 v16 = 2048;
    double v17 = v8;
    __int16 v18 = 1024;
    int v19 = (int)(float)(v8 * 127.0);
    __int16 v20 = 2048;
    double v21 = v10;
    __int16 v22 = 2082;
    char v23 = v11;
    __int16 v24 = 2114;
    uint64_t v25 = sub_6FA0(a1);
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Remote device set volume %f, mScalarVolume %f steps = [ %d ] , mDBVolume %f Notify Up : %{public}s Device %{public}@",  (uint8_t *)v15,  0x3Au);
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1272LL))(a1);
  if ((_DWORD)result)
  {
    if (!*(_BYTE *)(a1 + 408))
    {
      uint64_t v13 = *(void *)(a1 + 400);
      if (v13)
      {
        unsigned __int8 v14 = atomic_load((unsigned __int8 *)(v13 + 24));
        if ((v14 & 1) != 0) {
          sub_15554(*(void *)(a1 + 400), *(float *)(a1 + 440));
        }
      }
    }

    if ((a2 & 1) != 0 || (uint64_t result = sub_340E8(), (_DWORD)result))
    {
      strcpy((char *)v15, "dlovptuo");
      BYTE1(v15[2]) = 0;
      HIWORD(v15[2]) = 0;
      return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 248LL))(a1, v15);
    }
  }

  return result;
}

float sub_2EB58(uint64_t a1, float a2)
{
  float v2 = *(float *)(a1 + 444);
  if (v2 > a2) {
    a2 = *(float *)(a1 + 444);
  }
  float v3 = *(float *)(a1 + 448);
  if (a2 > v3) {
    a2 = *(float *)(a1 + 448);
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL)) {
    return sub_15A04(a2);
  }
  else {
    return (float)((float)(v3 - a2) / v2) + 1.0;
  }
}

float sub_2EB98(uint64_t a1, float a2)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL)) {
    return sub_1590C(a2);
  }
  else {
    return *(float *)(a1 + 448) - (float)((float)(a2 + -1.0) * *(float *)(a1 + 444));
  }
}

void sub_2EBC4(uint64_t a1, float a2)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL)) {
    float v3 = sub_1590C(a2);
  }
  else {
    float v3 = *(float *)(a1 + 448) - (float)((float)(a2 + -1.0) * *(float *)(a1 + 444));
  }
  *(float *)(a1 + 440) = v3;
}

uint64_t sub_2EC10(void *a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1[52] + 9248LL) + 327LL);
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 1272LL))(a1);
  if (v2) {
    BOOL v4 = (_DWORD)result == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    __int128 v8 = xmmword_65910;
    uint64_t v9 = 1735159650LL;
    uint64_t v5 = *(uint64_t (***)(void, uint64_t, uint64_t, __int128 *))(qword_962E8 + 144);
    float v6 = *v5;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1[52] + 16LL))(a1[52]);
    return v6(v5, v7, 2LL, &v8);
  }

  return result;
}

void sub_2ECDC(uint64_t a1, float a2)
{
  BOOL v4 = (os_log_s *)qword_95AC8;
  float v5 = fabsf(a2);
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    float v6 = *(float *)(a1 + 432);
    double v7 = 1.0;
    if (v5 >= 0.00000011921) {
      double v7 = (float)(v6 / a2);
    }
    int v9 = 134218496;
    double v10 = v7;
    __int16 v11 = 2048;
    double v12 = a2;
    __int16 v13 = 2048;
    double v14 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter Main Volume Scale Factor = %f [MV=%f Vol=%f]",  (uint8_t *)&v9,  0x20u);
  }

  float v8 = 1.0;
  if (v5 >= 0.00000011921) {
    float v8 = *(float *)(a1 + 432) / a2;
  }
  *(float *)(a1 + 9064) = v8;
}

uint64_t sub_2EDDC(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 277LL);
}

void sub_2EDEC(uint64_t a1, void *a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_12A88( v2,  (const __CFString *)[a2 objectForKeyedSubscript:@"CurrentAudioCategory"],  objc_msgSend(a2, "objectForKeyedSubscript:", @"CurrentVolume"),  objc_msgSend(a2, "objectForKeyedSubscript:", @"ManualVolumeUpdate"),  objc_msgSend(a2, "objectForKeyedSubscript:", @"RampInProgress"));
  }
}

void sub_2EE94(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      int v2 = *(id **)(a1 + 208);
      if (v2)
      {
        float v3 = (os_log_s *)qword_95AC8;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
        {
          double v4 = *(float *)(a1 + 432);
          int v5 = 134217984;
          double v6 = v4;
          _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "A2DPAudioDevice: volume update back to headphone %f",  (uint8_t *)&v5,  0xCu);
          int v2 = *(id **)(a1 + 208);
        }

        sub_11C14(v2, *(float *)(a1 + 432));
      }
    }
  }

void sub_2EF70(uint64_t a1, float a2)
{
  double v4 = *(_BYTE **)(*(void *)(a1 + 416) + 9248LL);
  if (v4[274])
  {
    if (v4[275])
    {
      int v5 = v4[276];
      float v6 = sub_15A04(a2);
      goto LABEL_8;
    }

uint64_t sub_2F188(float a1, float a2)
{
  if (a1 == 0.0) {
    return 0LL;
  }
  float v4 = vabds_f32(a2, a1);
  if (v4 >= 0.025) {
    return 0LL;
  }
  int v5 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 134218496;
    double v8 = a1;
    __int16 v9 = 2048;
    double v10 = a2;
    __int16 v11 = 2048;
    double v12 = v4;
    _os_log_debug_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "software volume: Ignore low threashold volume delta: [%f - %f] => %f",  (uint8_t *)&v7,  0x20u);
  }

  return 1LL;
}

void sub_2F284(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 425))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
    {
      if (*(_BYTE *)(a1 + 408))
      {
        int v2 = *(id **)(a1 + 208);
        if (v2)
        {
          float v3 = (os_log_s *)qword_95AC8;
          if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
          {
            double v4 = *(float *)(a1 + 440);
            double v5 = *(float *)(a1 + 432);
            int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1272LL))(a1);
            int v7 = *(unsigned __int8 *)(a1 + 408);
            int v8 = 134219010;
            double v9 = v4;
            __int16 v10 = 2048;
            double v11 = v5;
            __int16 v12 = 1024;
            int v13 = v6;
            __int16 v14 = 1024;
            int v15 = v7;
            __int16 v16 = 2114;
            uint64_t v17 = sub_6FA0(a1);
            _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "Audio layer set volume Update %f, mScalarVolume %f, IsVolumeSupported %d, mIsAbsoluteVolume %d Device %{public}@",  (uint8_t *)&v8,  0x2Cu);
            int v2 = *(id **)(a1 + 208);
          }

          sub_11C14(v2, *(float *)(a1 + 432));
        }
      }
    }
  }

uint64_t sub_2F3C4(uint64_t a1, int a2, int a3)
{
  if (a2) {
    unsigned int v3 = 1024;
  }
  else {
    unsigned int v3 = a3 << 7;
  }
  if (a2 == 33023) {
    return 480LL;
  }
  else {
    return v3;
  }
}

void sub_2F3E8(uint64_t a1, BOOL a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_11D6C(v2, a2);
  }
}

void sub_2F3F8(uint64_t a1, BOOL a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_130C0(v2, a2);
  }
}

void sub_2F408(uint64_t a1, const __CFString *a2, int a3, int a4)
{
  if (a2)
  {
    double v4 = *(id **)(a1 + 208);
    if (v4) {
      sub_12E80(v4, a2, a3, a4);
    }
  }

  else
  {
    double v5 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Spatial Audio: Feature updated with no active Now playing App: Dropping",  v6,  2u);
    }
  }

void sub_2F480(uint64_t a1, BOOL a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_12D3C(v2, a2);
  }
}

void sub_2F490(uint64_t a1, const __CFString *a2, int a3, float a4)
{
  double v4 = *(id **)(a1 + 208);
  if (v4) {
    sub_12818(v4, a2, a3, a4);
  }
}

void sub_2F4A0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 9185))
  {
    int v2 = *(id **)(a1 + 208);
    if (v2)
    {
      sub_122FC(v2, 0);
      sub_12208(*(id **)(a1 + 208), 0);
      sub_126F8(*(id **)(a1 + 208), 0);
      sub_124E4(*(id **)(a1 + 208), 0);
      sub_11D6C(*(id **)(a1 + 208), 0);
    }

    *(_DWORD *)(a1 + 9232) = 0;
  }

void sub_2F50C(uint64_t a1, int value, int a3)
{
  double v5 = *(id **)(a1 + 208);
  if (v5)
  {
    char v6 = value;
    if (a3 == 3 || *(_DWORD *)(a1 + 9232) == 3)
    {
      sub_122FC(v5, value);
      goto LABEL_5;
    }

    if (a3 != 8)
    {
      if (a3 == 7)
      {
        if (value)
        {
          unsigned int v7 = 2;
          goto LABEL_15;
        }

LABEL_14:
        unsigned int v7 = 0;
        goto LABEL_15;
      }

      if (a3 == 6)
      {
        if (value)
        {
          unsigned int v7 = 1;
LABEL_15:
          sub_126F8(v5, v7);
          goto LABEL_5;
        }

        goto LABEL_14;
      }

      sub_12208(v5, value);
      if ((v6 & 1) != 0) {
        goto LABEL_5;
      }
      double v5 = *(id **)(a1 + 208);
      xpc_object_t value = 0;
    }

    sub_11E60(v5, value);
  }

LABEL_5:
  *(_DWORD *)(a1 + 9232) = a3;
}

uint64_t sub_2F5C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9232);
}

uint64_t sub_2F5C8(uint64_t a1)
{
  if (sub_5280C()
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1288LL))(a1)
    && !*(_DWORD *)(a1 + 428))
  {
    double v2 = 0.08;
  }

  else
  {
    double v2 = (double)(*(_DWORD *)(a1 + 384) + *(_DWORD *)(a1 + 392)) / 1000000.0;
  }

  uint64_t v3 = (*(double *)(a1 + 296) * v2);
  double v4 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 392);
    int v6 = *(_DWORD *)(a1 + 384);
    int v7 = *(_DWORD *)(a1 + 388);
    v9[0] = 67109888;
    v9[1] = v3;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "A2DP Returning latency of %d from %d, %d, %d\n",  (uint8_t *)v9,  0x1Au);
  }

  return v3;
}

void sub_2F6EC(uint64_t a1, unsigned int a2, float a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 864LL))(a1))
  {
    *(void *)(a1 + 9136) = 0LL;
    atomic_store(a2, (unsigned int *)(a1 + 548));
    atomic_store(a2 != 0, (unsigned __int8 *)(a1 + 545));
    int v6 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = "Not Running";
      if (a2) {
        int v7 = "Running";
      }
      v8[0] = 67109634;
      v8[1] = a2;
      __int16 v9 = 2082;
      __int16 v10 = v7;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "audio delivery speed Latency Target %u, Currently running %{public}s, multiplier %f ",  (uint8_t *)v8,  0x1Cu);
    }
  }

uint64_t sub_2F808(uint64_t result, int a2)
{
  double v2 = (_BYTE *)(result + 9164);
  if (*(unsigned __int8 *)(result + 9164) != a2)
  {
    int v3 = a2;
    double v4 = (_DWORD *)result;
    *double v2 = a2;
    uint64_t v11 = 0x676C6F6263737462LL;
    int v12 = 0;
    uint64_t v9 = 0x676C6F62636C6F6BLL;
    int v10 = 0;
    int v5 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      if (v3) {
        int v6 = "enabled";
      }
      else {
        int v6 = "disabled";
      }
      int v7 = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 16LL))(v4);
      *(_DWORD *)std::string buf = 136446466;
      __int16 v14 = v6;
      __int16 v15 = 1024;
      int v16 = v7;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "mA2dpDynamicClock set to %{public}s for mAudioObjectID %d",  buf,  0x12u);
      int v3 = *v2;
    }

    if (v3) {
      int v8 = 1918990199;
    }
    else {
      int v8 = 1768518246;
    }
    v4[2288] = v8;
    (*(void (**)(_DWORD *, uint64_t *))(*(void *)v4 + 248LL))(v4, &v9);
    return (*(uint64_t (**)(_DWORD *, uint64_t *))(*(void *)v4 + 248LL))(v4, &v11);
  }

  return result;
}

void sub_2F964(uint64_t a1, BOOL a2)
{
  double v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_131E0(v2, a2);
  }
}

float sub_2F974(float a1, float a2, float a3)
{
  float v3 = a1 * 127.0;
  float v4 = a2 * 127.0;
  if (a1 != 1.0)
  {
    if (a1 == 0.0) {
      return -a3;
    }
LABEL_5:
    if (v3 == 0.0)
    {
      float v5 = v4 - v3;
      float v6 = 1.0;
    }

    else
    {
      float v5 = v4 - v3;
      if (v4 != 0.0) {
        return v5 * 0.0078125;
      }
      float v6 = -1.0;
    }

    float v5 = v5 + v6;
    return v5 * 0.0078125;
  }

  return a3;
}

void sub_2F9E0(uint64_t a1, float a2)
{
  float v4 = *(float *)(a1 + 436);
  if (v4 == -1.0)
  {
    *(float *)(a1 + 436) = a2;
    float v4 = a2;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 217LL)) {
    float v5 = 0.0078125;
  }
  else {
    float v5 = 0.0625;
  }
  float v6 = sub_2F974(v4, a2, v5);
  int v7 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218496;
    double v13 = v4;
    __int16 v14 = 2048;
    double v15 = a2;
    __int16 v16 = 2048;
    double v17 = v6;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "software volume: Volume Change: %f -> %f, Delta: %f",  (uint8_t *)&v12,  0x20u);
  }

  *(float *)(a1 + 436) = a2;
  *(float *)(a1 + 432) = a2;
  if (*(_BYTE *)(a1 + 408))
  {
    int v8 = (const void *)sub_6FA0(a1);
    CFRetain(v8);
    uint64_t v9 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
    if (v9)
    {
      *(float *)&double v10 = v6;
      -[BTAudioAVNotificationMonitor updateVolumeDelta:uid:](v9, "updateVolumeDelta:uid:", v8, v10);
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 275LL)) {
    float v11 = sub_1590C(*(float *)(a1 + 432));
  }
  else {
    float v11 = *(float *)(a1 + 448) - (float)((float)(*(float *)(a1 + 432) + -1.0) * *(float *)(a1 + 444));
  }
  *(float *)(a1 + 440) = v11;
}

void sub_2FB6C(uint64_t a1, BOOL a2)
{
  double v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_11730(v2, a2);
  }
}

uint64_t sub_2FB7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 910_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_2FB84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9160) = a2;
  return result;
}

uint64_t sub_2FB8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9124) = a2;
  return result;
}

uint64_t sub_2FB94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 918_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_2FB9C(_DWORD *a1, uint64_t a2)
{
  if ((a2 & 0xFE) == 2 && !a1[2308]) {
    ++a1[2316];
  }
  BOOL v4 = sub_7FD8((uint64_t)a1);
  float v5 = a1 + 2310;
  if (v4) {
    float v5 = a1 + 2312;
  }
  ++*v5;
  float v6 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency : Latency Mode %d", (uint8_t *)v8, 8u);
  }

  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 624LL))(a1, a2);
}

BOOL sub_2FCA4(_DWORD *a1, int a2)
{
  BOOL result = 0LL;
  switch(a2)
  {
    case 0:
      BOOL result = sub_7FD8((uint64_t)a1);
      if (result)
      {
        BOOL result = 0LL;
        ++a1[2312];
      }

      else
      {
        ++a1[2310];
      }

      return result;
    case 1:
      ++a1[2313];
      goto LABEL_7;
    case 2:
      ++a1[2314];
LABEL_7:
      else {
        ++a1[2309];
      }
      goto LABEL_14;
    case 3:
      ++a1[2315];
      goto LABEL_11;
    case 4:
      ++a1[2316];
LABEL_11:
      else {
        ++a1[2310];
      }
      goto LABEL_14;
    case 8:
LABEL_14:
      BOOL result = 1LL;
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_2FDA8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 9185) = a2;
  return result;
}

void sub_2FDB4(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 9160) == 33023)
  {
    float v3 = (unsigned __int8 *)(a1 + 9165);
    *(_BYTE *)(a1 + 9165) = 0;
    if (a2 == 3)
    {
      a2 = 1;
    }

    else if (a2 != 2)
    {
      a2 = 3;
      *(_DWORD *)(a1 + 916_Block_object_dispose(va, 8) = 3;
      if ((*(_DWORD *)(a1 + 9124) - 1) < 2)
      {
        if (sub_7FD8(a1))
        {
          *(void *)(a1 + 9176) = mach_absolute_time();
          *float v3 = 1;
          goto LABEL_10;
        }

        int v5 = *v3;
        *(_DWORD *)(a1 + 9124) = 3;
        *(_DWORD *)(a1 + 916_Block_object_dispose(va, 8) = 3;
        if (v5)
        {
LABEL_10:
          BOOL v4 = (os_log_s *)qword_95AC8;
          if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
            sub_5CBDC(v3, a1, v4);
          }
          return;
        }

uint64_t sub_2FE9C(uint64_t result)
{
  uint64_t v1 = (_BYTE *)(result + 9165);
  if (*(_BYTE *)(result + 9165))
  {
    uint64_t v2 = result;
    mach_timebase_info info = 0LL;
    mach_timebase_info(&info);
    BOOL result = mach_absolute_time();
    if ((float)((float)((result - *(void *)(v2 + 9176)) * info.numer / info.denom / 0x3E8) / 1000.0) >= 100.0)
    {
      *(void *)(v2 + 9176) = 0LL;
      *uint64_t v1 = 0;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
        sub_5CC88();
      }
      *(_DWORD *)(v2 + 9124) = *(_DWORD *)(v2 + 9168);
      return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 720LL))(v2);
    }
  }

  return result;
}

uint64_t sub_2FF78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 914_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_2FF80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9120) = a2;
  return result;
}

uint64_t sub_2FF88(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9120);
}

BOOL sub_2FF90(_DWORD *a1, unsigned int a2, unint64_t a3)
{
  if (!a1[2290]) {
    return (a1[2281] * a1[2280]) < a3;
  }
  unsigned int v5 = a1[2282];
  if (v5 < a2)
  {
    float v6 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR))
    {
      v8[0] = 67109376;
      v8[1] = a2;
      __int16 v9 = 1024;
      unsigned int v10 = v5;
      _os_log_error_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "Higher than expected frameCount: Sending (%d > %d) A2DP frames in BT packet",  (uint8_t *)v8,  0xEu);
      unsigned int v5 = a1[2282];
    }
  }

  return v5 <= a2;
}

uint64_t sub_30080(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1LL;
  if (*a2 <= 1684234611)
  {
    if (v2 > 1668050794)
    {
      if (v2 == 1668050795 || v2 == 1668510818) {
        return v3;
      }
    }

    else if (v2 == 1633972065 || v2 == 1651798132)
    {
      return *(unsigned __int8 *)(a1 + 9185);
    }

    return sub_8680();
  }

  if (v2 <= 1685484389)
  {
    if (v2 == 1684234612)
    {
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
        sub_5CCF0();
      }
      return 1LL;
    }

    int v4 = 1684826732;
    goto LABEL_14;
  }

  if (v2 != 1685484390)
  {
    if (v2 == 1818326127) {
      return sub_5280C();
    }
    int v4 = 1819241569;
LABEL_14:
    if (v2 == v4) {
      return *(unsigned __int8 *)(a1 + 9185);
    }
    return sub_8680();
  }

  return v3;
}

uint64_t sub_301A8(uint64_t a1, int *a2, _BYTE *a3)
{
  int v4 = *a2;
  if (*a2 > 1684234611)
  {
    if (v4 > 1685484389)
    {
      if (v4 != 1685484390)
      {
        if (v4 != 1818326127 && v4 != 1819241569) {
          return sub_8688();
        }
        goto LABEL_10;
      }

LABEL_10:
  *a3 = 1;
  return 0LL;
}

  unsigned int v10 = *(_DWORD *)(a1 + 9328);
  if (v10 == 129 || v10 == 255 || *(_DWORD *)(a1 + 9336) == 130)
  {
    float v11 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109376;
      uint64_t v62 = v10;
      uint64_t v63 = 1024;
      uint64_t v64 = v10 == 129;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Creating HFP Codec for Stereo mStereoSupported:%d, %d",  buf,  0xEu);
    }

    int v12 = operator new(0xD8uLL);
    double v13 = *(_OWORD *)(a1 + 9120);
    v49[0] = *(_OWORD *)(a1 + 9104);
    v49[1] = v13;
    xpc_object_t v50 = *(void *)(a1 + 9136);
    sub_51DCC((uint64_t)v12, 260, (uint64_t)v49, *(_DWORD *)(a1 + 9328) == 129, 0);
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = v12;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 16LL))(v12, 64000LL, 178LL);
    __int16 v14 = operator new(0xD8uLL);
    double v15 = *(_OWORD *)(a1 + 9120);
    v47[0] = *(_OWORD *)(a1 + 9104);
    v47[1] = v15;
    uint64_t v48 = *(void *)(a1 + 9136);
    sub_51DCC((uint64_t)v14, 508, (uint64_t)v47, *(_DWORD *)(a1 + 9336) == 130, 0);
    *(void *)(a1 + 264) = v14;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 16LL))(v14, 64000LL, 118LL);
    __int16 v16 = *(_OWORD *)(a1 + 9104);
    *(_OWORD *)(a1 + 9200) = *(_OWORD *)(a1 + 9120);
    *(_OWORD *)(a1 + 9184) = v16;
    double v17 = *(void *)(a1 + 9136);
    *(void *)(a1 + 9216) = v17;
    *(_DWORD *)(a1 + 9212) = 1;
    LODWORD(v17) = v17 >> 3;
    *(_DWORD *)(a1 + 9200) = v17;
    *(_DWORD *)(a1 + 920_Block_object_dispose(va, 8) = v17;
    __int16 v18 = operator new(0xA8uLL);
    double v19 = *(_OWORD *)(a1 + 9200);
    v45[0] = *(_OWORD *)(a1 + 9184);
    v45[1] = v19;
    uint64_t v46 = *(void *)(a1 + 9216);
    sub_1B874((uint64_t)v18, 260, (uint64_t)v45, *(_DWORD *)(a1 + 9328) == 129);
    *(void *)(a1 + 256) = v18;
    (*(void (**)(void *, uint64_t, double))(*(void *)v18 + 24LL))(v18, 64000LL, v60);
    __int16 v20 = *(void *)(a1 + 9176);
    *(void *)(a1 + 9256) = v20;
    double v21 = *(_OWORD *)(a1 + 9160);
    *(_OWORD *)(a1 + 9224) = *(_OWORD *)(a1 + 9144);
    *(_OWORD *)(a1 + 9240) = v21;
    *(_DWORD *)(a1 + 9252) = 1;
    LODWORD(v20) = v20 >> 3;
    *(_DWORD *)(a1 + 9240) = v20;
    *(_DWORD *)(a1 + 924_Block_object_dispose(va, 8) = v20;
    __int16 v22 = operator new(0xD8uLL);
    int v23 = *(_OWORD *)(a1 + 9160);
    v43[0] = *(_OWORD *)(a1 + 9144);
    v43[1] = v23;
    uint64_t v44 = *(void *)(a1 + 9176);
    sub_1CE74((uint64_t)v22, 510, (uint64_t)v43, 0);
    *(void *)(a1 + 272) = v22;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v22 + 16LL))(v22, 64000LL, 118LL);
    __int16 v24 = operator new(0xA8uLL);
    int v25 = *(_OWORD *)(a1 + 9240);
    v41[0] = *(_OWORD *)(a1 + 9224);
    v41[1] = v25;
    unsigned int v42 = *(void *)(a1 + 9256);
    sub_ADA4((uint64_t)v24, 510, (uint64_t)v41);
    *(void *)(a1 + 280) = v24;
    (*(void (**)(void *, uint64_t))(*(void *)v24 + 16LL))(v24, 64000LL);
  }

  else if (v10 == 128)
  {
    double v29 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "Creating HFP Codec for Stereo", buf, 2u);
    }

    *(_OWORD *)(a1 + 9200) = *(_OWORD *)(a1 + 9120);
    __int16 v30 = *(_OWORD *)(a1 + 9104);
    *(_OWORD *)(a1 + 9184) = v30;
    uint64_t v31 = *(void *)(a1 + 9136);
    *(void *)(a1 + 9216) = v31;
    *(_DWORD *)(a1 + 9212) = 1;
    *(_DWORD *)(a1 + 9200) = v31 >> 3;
    *(_DWORD *)(a1 + 920_Block_object_dispose(va, 8) = v31 >> 3;
    *(void *)(a1 + 9256) = v31;
    uint64_t v32 = *(_OWORD *)(a1 + 9200);
    *(_OWORD *)(a1 + 9224) = v30;
    *(_OWORD *)(a1 + 9240) = v32;
    uint64_t v33 = operator new(0xD8uLL);
    uint64_t v34 = *(_OWORD *)(a1 + 9120);
    v39[0] = *(_OWORD *)(a1 + 9104);
    v39[1] = v34;
    BOOL v40 = *(void *)(a1 + 9136);
    sub_1CE74((uint64_t)v33, 510, (uint64_t)v39, 0);
    *(void *)(a1 + 24_Block_object_dispose(va, 8) = v33;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 16LL))(v33, 64000LL, 118LL);
    uint64_t v35 = operator new(0xA8uLL);
    uint64_t v36 = *(_OWORD *)(a1 + 9200);
    v37[0] = *(_OWORD *)(a1 + 9184);
    v37[1] = v36;
    uint64_t v38 = *(void *)(a1 + 9216);
    sub_ADA4((uint64_t)v35, 510, (uint64_t)v37);
    *(void *)(a1 + 256) = v35;
    (*(void (**)(void *, uint64_t))(*(void *)v35 + 16LL))(v35, 64000LL);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a1 + 248);
  }

  __int16 v26 = *(void *)(a1 + 232);
  if (v26)
  {
    *(_BYTE *)(v26 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 745);
    *(_BYTE *)(v26 + 177) = *(_BYTE *)(a1 + 744);
  }

  double v27 = *(void *)(a1 + 248);
  if (v27)
  {
    *(_BYTE *)(v27 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 745);
    *(_BYTE *)(v27 + 177) = *(_BYTE *)(a1 + 744);
  }

  if (v2[1])
  {
    __int16 v28 = 510;
  }

  else if (*v2)
  {
    __int16 v28 = 257;
  }

  else
  {
    __int16 v28 = 256;
  }

  sub_1B4B4(*(void *)(qword_962E8 + 328), v28, 1, *(double *)(a1 + 296));
}

  *a2 = v8;
  return v5;
}

uint64_t sub_302F8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a2;
  if (*a2 > 1668641651)
  {
    if (v6 <= 1684826731)
    {
      if (v6 == 1668641652)
      {
        uint64_t result = sub_8690();
        *a5 += 72;
        return result;
      }

      int v7 = 1684234612;
      goto LABEL_14;
    }

    if (v6 != 1684826732)
    {
      if (v6 == 1685484390)
      {
        int v8 = 8;
        goto LABEL_16;
      }

      int v7 = 1819241569;
LABEL_14:
      if (v6 == v7) {
        goto LABEL_15;
      }
      return sub_8690();
    }

    goto LABEL_15;
  }

  if (v6 > 1668050794)
  {
    if (v6 != 1668050795)
    {
      int v7 = 1668510818;
      goto LABEL_14;
    }

LABEL_15:
    int v8 = 4;
    goto LABEL_16;
  }

  if (v6 == 1633972065) {
    goto LABEL_15;
  }
  if (v6 == 1651798132)
  {
    int v8 = 40;
LABEL_16:
    *a5 = v8;
    return 0LL;
  }

  return sub_8690();
}

    *a3 = 0;
    return 0LL;
  }

  if (v3 <= 1668510817)
  {
    if (v3 != 1650750320)
    {
      int v4 = 1668506479;
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  if (v3 == 1668510818 || v3 == 1684234612) {
    goto LABEL_15;
  }
  int v4 = 1685283695;
LABEL_14:
  if (v3 == v4) {
    goto LABEL_15;
  }
  return sub_8688();
}

uint64_t sub_30414(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, double *a5, int a6, int *a7, uint64_t a8)
{
  int v12 = (_BYTE *)(a1 + 9164);
  int v13 = *a2;
  if (*a2 > 1684234611)
  {
    if (v13 > 1818326126)
    {
      switch(v13)
      {
        case 1818326127:
          uint64_t result = 0LL;
          int v23 = *(_DWORD *)(a1 + 428);
          break;
        case 1819241569:
          uint64_t result = 0LL;
          int v23 = v12[21];
          break;
        case 1819569763:
          int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 808LL))(a1);
          uint64_t result = 0LL;
          break;
        default:
          return sub_8698();
      }
    }

    else
    {
      switch(v13)
      {
        case 1684234612:
          uint64_t result = 0LL;
          int v23 = *(_DWORD *)(a1 + 9104);
          break;
        case 1684826732:
          uint64_t result = 0LL;
          int v23 = *(_DWORD *)(a1 + 9188);
          break;
        case 1685484390:
          double v14 = sub_15A58(*a5, *(float *)(a1 + 432));
          uint64_t result = 0LL;
          *(double *)a8 = fmin(v14, 1.0);
          int v16 = 8;
          goto LABEL_45;
        default:
          return sub_8698();
      }
    }

    goto LABEL_44;
  }

  if (v13 <= 1668050794)
  {
    if (v13 != 1633972065)
    {
      if (v13 == 1651798132)
      {
        __int16 v24 = (_OWORD *)(a1 + 9192);
        __asm { FMOV            V0.2D, #1.0 }

        *(_OWORD *)(a1 + 9216) = _Q0;
        *(double *)(a1 + 9200) = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1104LL))(a1);
        *(void *)(a1 + 9192) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1080LL))(a1);
        double v30 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1104LL))(a1);
        unsigned int v31 = sub_30818(a1);
        uint64_t result = 0LL;
        *(double *)(a1 + 920_Block_object_dispose(va, 8) = v30 - (double)v31;
        __int128 v32 = *(_OWORD *)(a1 + 9208);
        uint64_t v33 = *(void *)(a1 + 9224);
        *(_OWORD *)a8 = *v24;
        *(_OWORD *)(a8 + 16) = v32;
        *(void *)(a8 + 32) = v33;
        int v16 = 40;
        goto LABEL_45;
      }

      return sub_8698();
    }

    uint64_t result = 0LL;
    int v23 = v12[104];
LABEL_44:
    *(_DWORD *)a8 = v23;
    int v16 = 4;
    goto LABEL_45;
  }

  if (v13 == 1668050795)
  {
    uint64_t result = 0LL;
    int v23 = *(_DWORD *)(a1 + 9152);
    goto LABEL_44;
  }

  if (v13 == 1668510818)
  {
    uint64_t result = 0LL;
    int v23 = *v12 == 0;
    goto LABEL_44;
  }

  if (v13 != 1668641652) {
    return sub_8698();
  }
  uint64_t result = sub_8698();
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v17 = *a7;
  else {
    unsigned int v18 = 6;
  }
  if (!v12[21]) {
    v18 -= 4;
  }
  if (v18)
  {
    int v19 = 0;
    __int16 v20 = (_DWORD *)(a8 + v17);
    do
    {
      switch(v19)
      {
        case 0:
          *__int16 v20 = 1684234612;
          double v21 = v20 + 1;
          __int16 v22 = v20 + 2;
          goto LABEL_26;
        case 1:
          v20[3] = 1685484390;
          double v21 = v20 + 4;
          __int16 v22 = v20 + 5;
          goto LABEL_26;
        case 2:
          v20[6] = 1633972065;
          double v21 = v20 + 7;
          __int16 v22 = v20 + 8;
          goto LABEL_26;
        case 3:
          v20[9] = 1651798132;
          double v21 = v20 + 10;
          __int16 v22 = v20 + 11;
          goto LABEL_26;
        case 4:
          v20[12] = 1819241569;
          double v21 = v20 + 13;
          __int16 v22 = v20 + 14;
          goto LABEL_26;
        case 5:
          v20[15] = 1684826732;
          double v21 = v20 + 16;
          __int16 v22 = v20 + 17;
LABEL_26:
          *double v21 = 1918990199;
          *__int16 v22 = 0;
          break;
        default:
          break;
      }

      ++v19;
    }

    while (v18 != v19);
    LODWORD(v17) = *a7;
  }

  uint64_t result = 0LL;
  int v16 = v17 + 12 * v18;
LABEL_45:
  *a7 = v16;
  return result;
}

uint64_t sub_30818(uint64_t a1)
{
  uint64_t v2 = a1 + 9156;
  int v3 = *(_DWORD *)(a1 + 9188);
  if (*(_BYTE *)(a1 + 9156))
  {
    float v5 = *(float *)(a1 + 540);
    float v6 = (float)v3;
    int v4 = *(unsigned __int8 *)(a1 + 9156);
    float v7 = (float)((*(unint64_t (**)(uint64_t))(*(void *)a1 + 848LL))(a1) * v4) / 100.0;
    if (v5 <= 1.0) {
      float v8 = v7 + v6;
    }
    else {
      float v8 = v6 - v7;
    }
    int v3 = (int)v8;
  }

  return (*(double *)(a1 + 296) * (double)(v3 & ~(v3 >> 31)) / 1000.0);
}

uint64_t sub_308E0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int *a6)
{
  float v7 = (_BYTE *)(a1 + 9185);
  int v8 = *a2;
  if (*a2 == 1819241569)
  {
    if (a5 <= 3)
    {
      uint64_t v9 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR)) {
        sub_5CD48();
      }
      return v9;
    }

    uint64_t v18 = *a6;
    BOOL v19 = sub_2FCA4((_DWORD *)a1, *a6);
    if (*v7)
    {
      BOOL v20 = v19;
      double v21 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v22 = "disabled";
        if (v20) {
          __int16 v22 = "enabled";
        }
        int v23 = 136315394;
        *(void *)__int16 v24 = v22;
        *(_WORD *)&v24[8] = 1024;
        int v25 = v18;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "A2DP Low Latency Mode %s, Latency Category:%d",  (uint8_t *)&v23,  0x12u);
      }

      (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 560LL))(a1, v20, v18);
    }
  }

  else
  {
    if (v8 == 1818326127)
    {
      if (a5 > 3)
      {
        int v11 = *a6;
        int v12 = (os_log_s *)qword_95AC8;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(_DWORD *)(a1 + 428);
          int v23 = 67109376;
          *(_DWORD *)__int16 v24 = v13;
          *(_WORD *)&v24[4] = 1024;
          *(_DWORD *)&v24[6] = v11;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting Audio Latency Override, from %u to %u",  (uint8_t *)&v23,  0xEu);
        }

        uint64_t v9 = 0LL;
        *(_DWORD *)(a1 + 42_Block_object_dispose(va, 8) = v11;
      }

      else
      {
        uint64_t v9 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR)) {
          sub_5CD74();
        }
      }

      return v9;
    }

    if (v8 != 1633972065) {
      return sub_86A0();
    }
    if (a5 <= 3)
    {
      uint64_t v9 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR)) {
        sub_5CD1C();
      }
      return v9;
    }

    int v14 = *a6;
    BOOL v15 = *a6 != 0;
    *(_BYTE *)(a1 + 926_Block_object_dispose(va, 8) = v15;
    if (*v7)
    {
      int v16 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = "disabled";
        if (v14) {
          uint64_t v17 = "enabled";
        }
        int v23 = 136315138;
        *(void *)__int16 v24 = v17;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "A2DP Bluetooth and Output aggregation Mode %s",  (uint8_t *)&v23,  0xCu);
        BOOL v15 = v7[83] != 0;
      }

      (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 672LL))(a1, v15);
    }
  }

  return 0LL;
}

void sub_30C04(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 208);
  if (v1) {
    sub_11724(v1);
  }
}

std::string *sub_30C14@<X0>(int a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  sub_A248(a2, "Unknown");
  int v4 = "AAC-LC";
  float v5 = "Unknown Codec";
  if (!a1) {
    float v5 = "SBC";
  }
  if (a1 != 2) {
    int v4 = v5;
  }
  if (a1 == 33023) {
    float v6 = "AAC-ELD";
  }
  else {
    float v6 = v4;
  }
  return std::string::assign(a2, v6);
}

void sub_30C90(_Unwind_Exception *exception_object)
{
}

void sub_30CAC(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 9160);
  if (v4 == 33023) {
    int v5 = 480;
  }
  else {
    int v5 = 1024;
  }
  if (v4) {
    int v6 = v5;
  }
  else {
    int v6 = 128;
  }
  unsigned int v7 = ((double)(1000 * a2 * v6) / *(double *)(a1 + 9112)) & 0xFFFFFFF8;
  unsigned int inPropertyData = v7;
  if (a2 > 0x80)
  {
    if (a2 > 0xA0)
    {
      int v14 = 20000;
      double v8 = 20.0;
    }

    else
    {
      int v14 = 17500;
      double v8 = 17.5;
    }
  }

  else
  {
    int v14 = 15500;
    double v8 = 15.5;
  }

  uint64_t v9 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(a1 + 9124);
    *(_DWORD *)std::string buf = 67110144;
    unsigned int v16 = a2;
    __int16 v17 = 2048;
    double v18 = v8;
    __int16 v19 = 1024;
    unsigned int v20 = v7;
    __int16 v21 = 1024;
    int v22 = v6;
    __int16 v23 = 1024;
    int v24 = v10;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "SetLinkAdaptiveEncoderRateFromBT Updating AAC Encoder to %d kbps, bandwidth = %2.1f KHz, frame size = %d bits, sam ples per frame = %d, frames per packet = %d",  buf,  0x24u);
  }

  OSStatus v11 = AudioConverterSetProperty( *(AudioConverterRef *)(*(void *)(a1 + 232) + 56LL),  0x5E70736Cu,  4u,  &inPropertyData);
  sub_189BC(v11, (uint64_t)"Failed to set kAudioCodecPropertyAdjustPacketSizeLimitForVBR");
  OSStatus v12 = AudioConverterSetProperty(*(AudioConverterRef *)(*(void *)(a1 + 232) + 56LL), 0x5E62776Cu, 4u, &v14);
  sub_189BC(v12, (uint64_t)"Failed to set kAudioCodecPrivatePropertyBandwidthLimit");
}

uint64_t sub_30E68(_DWORD *a1)
{
  int v1 = a1[2281];
  a1[2282] = v1;
  int v2 = a1[2290];
  unsigned int v3 = v1 << 7;
  if (v2) {
    unsigned int v3 = 1024;
  }
  if (v2 == 33023) {
    return 480LL;
  }
  else {
    return v3;
  }
}

void sub_30E98(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = (_BYTE *)(a1 + 9156);
  if (*(void *)(a1 + 9136))
  {
    mach_timebase_info info = 0LL;
    mach_timebase_info(&info);
    float v7 = *(double *)(a1 + 296) / 1000.0;
    float v8 = v7 * (float)(*(unsigned int (**)(uint64_t))(*(void *)a1 + 848LL))(a1);
    float v9 = (float)((a3 - *(void *)(a1 + 9136)) * (unint64_t)info.numer / info.denom / 0x3E8) / 1000.0;
    float v10 = v9 * v7;
    unsigned int v11 = *(_DWORD *)(a1 + 9144) + a2;
    *(_DWORD *)(a1 + 9144) = v11;
    float v12 = *(float *)(a1 + 540);
    if (v12 <= 1.0)
    {
      float v13 = 0.0;
      if (v12 < 1.0) {
        float v13 = (float)v11 - v10;
      }
    }

    else
    {
      float v13 = v10 - (float)v11;
    }

    if (v13 < 0.0) {
      float v13 = 0.0;
    }
    if (v13 >= v8)
    {
      _BYTE *v5 = 100;
      if (v9 <= 10000.0)
      {
LABEL_15:
        unsigned int v16 = (os_log_s *)qword_95AC8;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG))
        {
          if (v12 <= 1.0) {
            __int16 v19 = "Speed Up";
          }
          else {
            __int16 v19 = "Slow Down";
          }
          int v20 = *(_DWORD *)(a1 + 9144);
          int v21 = sub_30818(a1);
          *(_DWORD *)std::string buf = 136447490;
          __int16 v26 = v19;
          __int16 v27 = 2048;
          double v28 = v10;
          __int16 v29 = 1024;
          int v30 = v20;
          __int16 v31 = 2048;
          double v32 = v8;
          __int16 v33 = 2048;
          double v34 = v9;
          __int16 v35 = 1024;
          int v36 = v21;
          _os_log_debug_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "Dynamic Latency : %{public}s Complete : Target Samples=%f, actual samples=%u Target Drift=%f Duration = %f F inal in-ear-delay=%u",  buf,  0x36u);
          float v12 = *(float *)(a1 + 540);
        }

        _BYTE *v5 = 0;
        int v17 = atomic_load((unsigned int *)(a1 + 548));
        if (v12 > 1.0) {
          int v17 = -v17;
        }
        *(_DWORD *)(a1 + 9188) += v17;
        if (v5[9])
        {
          *(void *)(a1 + 9176) = 0LL;
          v5[9] = 0;
          if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
            sub_5CE54();
          }
          *(_DWORD *)(a1 + 9124) = *(_DWORD *)(a1 + 9168);
          (*(void (**)(uint64_t))(*(void *)a1 + 720LL))(a1);
        }

        atomic_store(0, (unsigned int *)(a1 + 548));
        atomic_store(0, (unsigned __int8 *)(a1 + 545));
        double v18 = *(dispatch_queue_s **)(qword_962E8 + 160);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        void v23[2] = sub_31260;
        v23[3] = &unk_812A8;
        void v23[4] = a1;
        dispatch_async(v18, v23);
        *(void *)(a1 + 9136) = 0LL;
        *(_DWORD *)(a1 + 9144) = 0;
        return;
      }
    }

    else
    {
      _BYTE *v5 = (int)(float)((float)(v13 / v8) * 100.0);
      if (v9 <= 10000.0) {
        return;
      }
    }

    BOOL v15 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_ERROR))
    {
      int v22 = "Speed Up";
      if (v12 > 1.0) {
        int v22 = "Slow Down";
      }
      *(_DWORD *)std::string buf = 136446466;
      __int16 v26 = v22;
      __int16 v27 = 2048;
      double v28 = v9;
      _os_log_error_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "Dynamic Latency : %{public}s took too long to complete Duration=%f",  buf,  0x16u);
      float v12 = *(float *)(a1 + 540);
    }

    goto LABEL_15;
  }

  *(_DWORD *)(a1 + 9144) = 0;
  *(void *)(a1 + 9136) = a3;
  _BYTE *v5 = 0;
  int v14 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEBUG)) {
    sub_5CDA0(a1, v14);
  }
}

uint64_t sub_31260(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 1592LL))(*(void *)(a1 + 32), 1LL);
}

void sub_31274(void *a1, float a2)
{
  int v4 = *(_BYTE **)(a1[52] + 9248LL);
  BOOL v5 = v4[274] && v4[275] && v4[276] != 0;
  int v6 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 134218242;
    double v13 = a2;
    __int16 v14 = 2114;
    uint64_t v15 = sub_6FA0((uint64_t)a1);
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "A2DP : Volume received from bluetoothd: volume %f Device %{public}@",  (uint8_t *)&v12,  0x16u);
  }

  if (v5)
  {
    (*(void (**)(void *, float))(*a1 + 1184LL))(a1, a2);
  }

  else
  {
    int v7 = sub_340E8();
    if (a2 != 0.0)
    {
      if (v7)
      {
        uint64_t v8 = a1[52];
        uint64_t v9 = *(void *)(v8 + 9248);
        if (*(_DWORD *)(v9 + 152))
        {
          *(_DWORD *)(v9 + 152) = 0;
          sub_4CD38(v8, 1836414053);
        }
      }
    }

    (*(void (**)(void *, uint64_t, float))(*a1 + 472LL))(a1, 1LL, a2);
  }

  if ((*(unsigned int (**)(void *))(*a1 + 296LL))(a1))
  {
    uint64_t v10 = qword_962E8;
    int v11 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  }

BOOL sub_31414(void *a1)
{
  return ((*(uint64_t (**)(void *))(*a1 + 1288LL))(a1) & 1) == 0
      && *(_BYTE *)(*(void *)(a1[52] + 9248LL) + 274LL) == 0;
}

float sub_3145C(uint64_t a1, int a2, uint64_t a3)
{
  float result = *(float *)(a1 + 456);
  if (result != *(float *)(a1 + 452) && *(_DWORD *)(a1 + 324) == 2)
  {
    unint64_t v4 = (2 * a2);
    if (*(_DWORD *)(a1 + 308) == 9 && (_DWORD)v4 != 0)
    {
      unint64_t v6 = 0LL;
      do
      {
        int v7 = (float *)(a3 + 4 * v6);
        float v8 = v7[1];
        *int v7 = *v7 * *(float *)(a1 + 452);
        float result = v8 * *(float *)(a1 + 456);
        v7[1] = result;
        v6 += 2LL;
      }

      while (v6 < v4);
    }
  }

  return result;
}

float sub_314C0(float *a1, int a2, float a3)
{
  float v4 = a3;
  float v6 = a1[113];
  float v7 = a1[108];
  if (a2)
  {
    if (a2 != 1) {
      return v4;
    }
    float v8 = v6 * v7;
    float v9 = a3;
  }

  else
  {
    float v9 = v7 * a1[114];
    float v8 = a3;
  }

  uint64_t v10 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    float v11 = a1[114];
    int v12 = "Right";
    int v19 = 136447490;
    if (!a2) {
      int v12 = "Left";
    }
    int v20 = v12;
    __int16 v21 = 2048;
    double v22 = v4;
    __int16 v23 = 2048;
    double v24 = v6;
    __int16 v25 = 2048;
    double v26 = v11;
    __int16 v27 = 2048;
    double v28 = v8;
    __int16 v29 = 2048;
    double v30 = v9;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Update Volume Balance : [ %{public}s ] volume %f Current Scale [ %f  %f ]   Current balance [ %f - %f ]",  (uint8_t *)&v19,  0x3Eu);
    float v7 = a1[108];
  }

  if (v7 != 0.0)
  {
    if (v8 > v9)
    {
      a1[113] = 1.0;
      a1[114] = v9 / v8;
      return v8;
    }

    if (v8 < v9)
    {
      a1[114] = 1.0;
      a1[113] = v8 / v9;
      return v9;
    }
  }

  __asm { FMOV            V0.2S, #1.0 }

  *(void *)(a1 + 113) = _D0;
  return v4;
}

void sub_31664(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 416) + 9248LL);
  int v5 = *(unsigned __int8 *)(v4 + 222);
  if (*(_BYTE *)(v4 + 222)) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  float v7 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    float v8 = @"Send";
    if (v6) {
      float v8 = @"Not Send";
    }
    if (a2) {
      float v9 = @"IO Stop";
    }
    else {
      float v9 = @"Route Change/Timer";
    }
    int v12 = 138412802;
    double v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    if (v5) {
      uint64_t v10 = @"Enabled";
    }
    else {
      uint64_t v10 = @"Disabled";
    }
    __int16 v16 = 2112;
    int v17 = v10;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Evaluate Transport Transition,  %@ A2DP Stop Message to bluetoothd:, Trigger Type: %@ Route transition: %@",  (uint8_t *)&v12,  0x20u);
  }

  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1392LL))(a1);
  }

  else
  {
    float v11 = *(id **)(a1 + 208);
    if (v11) {
      sub_1166C(v11);
    }
  }

  *(_BYTE *)(a1 + 462) = v6;
}

uint64_t sub_317AC(uint64_t a1)
{
  int v2 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Start A2DP Transition timer", buf, 2u);
  }

  unsigned int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 16LL))(*(void *)(a1 + 416));
  *(void *)std::string buf = 0LL;
  uint64_t v10 = 0LL;
  sub_52B28((uint64_t)buf, a1 + 464);
  uint64_t v4 = *(void **)(a1 + 528);
  if (v4)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 528)))
    {
      dispatch_block_cancel(v4);
      uint64_t v4 = *(void **)(a1 + 528);
    }

    _Block_release(v4);
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  __int128 v7[2] = sub_318EC;
  uint64_t v7[3] = &unk_82B08;
  _OWORD v7[4] = a1;
  unsigned int v8 = v3;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v7);
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = v5;
  sub_3EB3C(qword_962E8, 200LL, v3, v5);
  sub_52BF4((uint64_t)buf);
  return sub_52C5C(buf);
}

void sub_318D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_318EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 40));
  if (v2)
  {
    unsigned int v3 = v2;
    uint64_t v4 = (_BYTE *)v2[1136];
    if (v4)
    {
      if (v4[192] && v4[462])
      {
        dispatch_block_t v5 = (os_log_s *)qword_95AC8;
        if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v7[0]) = 0;
          _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "A2DP - HFP Transiton timer fired", (uint8_t *)v7, 2u);
          if (*(_BYTE *)(v3[1136] + 192LL)) {
            uint64_t v4 = (_BYTE *)v3[1136];
          }
          else {
            uint64_t v4 = 0LL;
          }
        }

        (*(void (**)(_BYTE *, void))(*(void *)v4 + 1376LL))(v4, 0LL);
      }
    }
  }

  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_52B28((uint64_t)v7, v1 + 464);
  _Block_release(*(const void **)(v1 + 528));
  *(void *)(v1 + 52_Block_object_dispose(va, 8) = 0LL;
  sub_52BF4((uint64_t)v7);
  return sub_52C5C(v7);
}

void sub_319E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_319F4(uint64_t a1)
{
  int v2 = (os_log_s *)qword_95AC8;
  if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, " A2DP ResetTransitionTimer", buf, 2u);
  }

  *(void *)std::string buf = 0LL;
  uint64_t v8 = 0LL;
  sub_52B28((uint64_t)buf, a1 + 464);
  unsigned int v3 = *(void **)(a1 + 528);
  if (v3)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 528)))
    {
      uint64_t v4 = (os_log_s *)qword_95AC8;
      if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Cancel: Transition Timer", v6, 2u);
        unsigned int v3 = *(void **)(a1 + 528);
      }

      dispatch_block_cancel(v3);
    }

    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  }

  sub_52BF4((uint64_t)buf);
  return sub_52C5C(buf);
}

void sub_31AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_31AF4(_BYTE *a1)
{
  if (a1[462]) {
    (*(void (**)(_BYTE *, void))(*(void *)a1 + 1376LL))(a1, 0LL);
  }
  return (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 1400LL))(a1);
}

void sub_31B38(uint64_t a1, int a2)
{
  if (a2 == 1953719151)
  {
    unsigned int v3 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      sub_9E5C(3u, __p);
      if (v7 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      float v9 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Send Transiton Message %{public}s ", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }

    dispatch_block_t v5 = *(id **)(a1 + 208);
    if (v5) {
      sub_116BC(v5, 3);
    }
  }

uint64_t sub_31C34(uint64_t result, int a2, int a3, unsigned int a4)
{
  if (*(_BYTE *)(result + 462))
  {
    uint64_t v7 = result;
    uint64_t v8 = (os_log_s *)qword_95AC8;
    if (os_log_type_enabled((os_log_t)qword_95AC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(v7 + 416) + 9264LL);
      v14[0] = BYTE3(v9);
      v14[1] = BYTE2(v9);
      _DWORD v14[2] = BYTE1(v9);
      v14[3] = v9;
      v14[4] = 0;
      v13[0] = HIBYTE(a3);
      v13[1] = BYTE2(a3);
      void v13[2] = BYTE1(a3);
      v13[3] = a3;
      v13[4] = 0;
      sub_9E5C(a4, __p);
      uint64_t v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      __int16 v16 = v14;
      __int16 v17 = 2080;
      double v18 = v13;
      __int16 v19 = 2080;
      int v20 = v10;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "A2DP Profile HandleTransportOnRouteChange %s => %s Recommended Transtion: %s",  buf,  0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    if (a3 == 1919183219 || a2 != 1953719151) {
      (*(void (**)(uint64_t, void))(*(void *)v7 + 1376LL))(v7, 0LL);
    }
    else {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 1416LL))(v7, 1953719151LL);
    }
    *(_BYTE *)(v7 + 462) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1400LL))(v7);
  }

  return result;
}

uint64_t sub_31E24()
{
  return 1LL;
}

uint64_t sub_31E2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9104) = a2;
  return result;
}

uint64_t sub_31E34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9185);
}

double sub_31E40(uint64_t a1)
{
  return *(double *)(a1 + 296);
}

double sub_31E48()
{
  return 0.0;
}

__n128 sub_31E50@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = *(void *)(a1 + 328);
  __n128 result = *(__n128 *)(a1 + 296);
  __int128 v3 = *(_OWORD *)(a1 + 312);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_31E68(uint64_t a1)
{
  return *(unsigned int *)(a1 + 376);
}

uint64_t sub_31E70(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9104);
}

uint64_t sub_31E78()
{
  return 0LL;
}

uint64_t sub_31E80(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 548));
}

float sub_31E8C(uint64_t a1)
{
  return *(float *)(a1 + 540);
}

uint64_t sub_31E94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9184);
}

uint64_t sub_31EA0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 409) = a2;
  return result;
}

uint64_t sub_31EA8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 410) = a2;
  return result;
}

BOOL sub_31EB0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 409) != 0;
}

BOOL sub_31EC0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 410) != 0;
}

uint64_t sub_31ED0()
{
  return 0LL;
}

uint64_t sub_31ED8()
{
  return 1LL;
}

uint64_t sub_31EE0()
{
  return 1LL;
}

uint64_t sub_31EF0()
{
  return 0LL;
}

uint64_t sub_31EF8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 9270);
}

uint64_t sub_31F04(uint64_t result)
{
  *(_WORD *)(result + 9270) = 0;
  return result;
}

uint64_t sub_31F10(uint64_t result)
{
  return result;
}

uint64_t sub_31F24(uint64_t a1)
{
  return *(void *)(a1 + 9080);
}

uint64_t sub_31F2C(uint64_t a1)
{
  return *(void *)(a1 + 9088);
}

uint64_t sub_31F34(uint64_t a1)
{
  return *(void *)(a1 + 9096);
}

uint64_t sub_31F3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 908_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_31F44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 90sub_52C5C(v1 - 96) = a2;
  return result;
}

uint64_t sub_31F4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9080) = a2;
  return result;
}

void sub_31F54( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_31F64()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AC8 = (uint64_t)result;
  return result;
}

uint64_t sub_31F90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_43E8(a1, a3);
  *(void *)uint64_t v7 = off_82B50;
  *(_DWORD *)(v7 + 930_Block_object_dispose(va, 8) = 0;
  *(_WORD *)(v7 + 9353) = 0;
  *(void *)(v7 + 9080) = 0LL;
  *(_OWORD *)(v7 + 908_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v7 + 932_Block_object_dispose(va, 8) = 0u;
  sub_529E8(v7 + 9360, v8);
  *(void *)(a1 + 9424) = 0LL;
  *(_DWORD *)(a1 + 9432) = 0;
  *(_BYTE *)(a1 + 9436) = 0;
  *(_DWORD *)(a1 + 9440) = 512;
  sub_9600(a1, a2);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 1552LL))(a1, a4);
  sub_4658((_BYTE *)a1, a4);
  sub_32310(a1, a4);
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 1953719151;
  atomic_store(0, (unsigned __int8 *)(a1 + 288));
  *(_DWORD *)(a1 + 292) = 1;
  strcpy((char *)(a1 + 9348), "ichs");
  *(_OWORD *)(a1 + 372) = xmmword_65990;
  *(_DWORD *)(a1 + 38_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 3sub_52C5C(v1 - 96) = 0;
  *(_BYTE *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 44_Block_object_dispose(va, 8) = 0;
  *(void *)(a1 + 440) = 0xC2000000C2000000LL;
  sub_32B68(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    uint64_t v9 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(float *)(a1 + 440);
      uint64_t v11 = *(void *)(a1 + 296);
      int v19 = 134218496;
      double v20 = v10;
      __int16 v21 = 2048;
      uint64_t v22 = v11;
      __int16 v23 = 2048;
      uint64_t v24 = 0x3F947AE147AE147BLL;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "Create Volume Obj mDBVolume %f, mPhysicalFormat.mSampleRate %f, kHFPAudioRampTime %f",  (uint8_t *)&v19,  0x20u);
    }

    char v12 = operator new(0x1CuLL);
    v13.n128_u32[0] = *(_DWORD *)(a1 + 440);
    v14.n128_u64[0] = *(void *)(a1 + 296);
    v14.n128_f32[0] = v14.n128_f64[0];
    sub_15524(v12, *(_BYTE *)(a1 + 408) == 0, v13, v14, 0.02);
    *(void *)(a1 + 400) = v12;
  }

  *(_BYTE *)(a1 + 9345) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1024LL))(a1, 1LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1016LL))(a1, 1LL);
  *(_BYTE *)(a1 + 9016) = 1;
  if (sub_340E8())
  {
    *(_WORD *)(a1 + 460) = 0;
  }

  else
  {
    *(_BYTE *)(a1 + 460) = 1;
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1288LL))(a1);
    if (v15) {
      LOBYTE(v15) = _os_feature_enabled_impl("BluetoothFeatures", "SCOUpdateOnRouteChange");
    }
    *(_BYTE *)(a1 + 461) = v15;
  }

  __int16 v16 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 460)) {
      __int16 v17 = "YES";
    }
    else {
      __int16 v17 = "NO";
    }
    int v19 = 136315138;
    double v20 = *(double *)&v17;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "HFP : Need Transport Ready %s", (uint8_t *)&v19, 0xCu);
  }

  *(_WORD *)(a1 + 9346) = 0;
  *(void *)(a1 + 40) = sub_1C3A4() + 4000;
  *(void *)(a1 + 56) = sub_1C3A4() + 4000;
  *(void *)(a1 + 72) = sub_1C3A4() + 0x4000;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
  return a1;
}

void sub_322DC(_Unwind_Exception *a1)
{
}

void sub_32310(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyCategory");
  if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v5 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D4DC(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  *(_DWORD *)(a1 + 9304) = xpc_int64_get_value(value);
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyLatency");
  if (xpc_get_type(v13) != (xpc_type_t)&_xpc_type_int64)
  {
    __n128 v14 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D46C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

  *(_DWORD *)(a1 + 9320) = xpc_int64_get_value(v13);
  xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyEQSettingID");
  if (xpc_get_type(v22) != (xpc_type_t)&_xpc_type_int64)
  {
    __int16 v23 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D3FC(v23, v24, v25, v26, v27, v28, v29, v30);
    }
  }

  *(_DWORD *)(a1 + 9312) = xpc_int64_get_value(v22);
  xpc_object_t v31 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyNBSSupport");
  if (xpc_get_type(v31) != (xpc_type_t)&_xpc_type_BOOL)
  {
    double v32 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D38C(v32, v33, v34, v35, v36, v37, v38, v39);
    }
  }

  *(_BYTE *)(a1 + 9324) = xpc_BOOL_get_value(v31);
  xpc_object_t v40 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyInputSWPLCSupport");
  if (v40)
  {
    xpc_object_t v41 = v40;
    if (xpc_get_type(v40) != (xpc_type_t)&_xpc_type_BOOL)
    {
      unsigned int v42 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D31C(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }

    BOOL v50 = xpc_BOOL_get_value(v41);
    sub_953C(a1, v50);
  }

  xpc_object_t v51 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyWBSSupport");
  if (xpc_get_type(v51) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v52 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D2AC(v52, v53, v54, v55, v56, v57, v58, v59);
    }
  }

  *(_BYTE *)(a1 + 9325) = xpc_BOOL_get_value(v51);
  (*(void (**)(uint64_t, xpc_object_t))(*(void *)a1 + 904LL))(a1, xdict);
  xpc_object_t v60 = xpc_dictionary_get_value(xdict, "kBTAudioDebugEnableUWBSStereoTest");
  *(_BYTE *)(a1 + 9344) = 0;
  if (v60)
  {
    uint64_t v61 = v60;
    if (xpc_get_type(v60) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v62 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D23C(v62, v63, v64, v65, v66, v67, v68, v69);
      }
    }

    BOOL v70 = xpc_BOOL_get_value(v61);
    *(_BYTE *)(a1 + 9344) = v70;
  }

  else
  {
    BOOL v70 = 0;
  }

  uint64_t v71 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v72 = "On";
    if (*(_BYTE *)(a1 + 9326)) {
      uint64_t v73 = "On";
    }
    else {
      uint64_t v73 = "Off";
    }
    int v74 = *(_DWORD *)(a1 + 9328);
    if (*(_BYTE *)(a1 + 9327)) {
      uint64_t v75 = "On";
    }
    else {
      uint64_t v75 = "Off";
    }
    int v169 = 136315906;
    if (v74) {
      uint64_t v76 = "On";
    }
    else {
      uint64_t v76 = "Off";
    }
    __int16 v170 = v73;
    __int16 v171 = 2080;
    if (!v70) {
      uint64_t v72 = "Off";
    }
    v172 = v75;
    __int16 v173 = 2080;
    xpc_object_t v174 = v76;
    __int16 v175 = 2080;
    BOOL v176 = v72;
    _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEFAULT,  "InitializePublishedProperties mUWBS %s, mSWB %s, mStereoSupported %s, mUWBSStereoTest %s",  (uint8_t *)&v169,  0x2Au);
  }

  xpc_object_t v77 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyIncompatibleHidConnected");
  if (v77 && *(void *)(*(void *)(a1 + 416) + 9248LL))
  {
    uint64_t v78 = v77;
    if (xpc_get_type(v77) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v79 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D1CC(v79, v80, v81, v82, v83, v84, v85, v86);
      }
    }

    uint64_t v87 = *(void *)(*(void *)(a1 + 416) + 9248LL);
    *(_BYTE *)(v87 + 216) = xpc_BOOL_get_value(v78);
    uint64_t v88 = qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v89 = xpc_BOOL_get_value(v78);
      int v169 = 67109120;
      LODWORD(v170) = v89;
      uint64_t v90 = "HFPAudioDevice InitializePublishedProperties, mIncompatibleHidUpdateNeeded:%u";
      uint64_t v91 = (os_log_s *)v88;
      uint32_t v92 = 8;
LABEL_57:
      _os_log_impl(&dword_0, v91, OS_LOG_TYPE_DEFAULT, v90, (uint8_t *)&v169, v92);
    }
  }

  else
  {
    uint64_t v93 = qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v169) = 0;
      uint64_t v90 = "HFPAudioDevice InitializePublishedProperties no hid connect property, publish stereo";
      uint64_t v91 = (os_log_s *)v93;
      uint32_t v92 = 2;
      goto LABEL_57;
    }
  }

  xpc_object_t v94 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyNRLevel");
  if (xpc_get_type(v94) != (xpc_type_t)&_xpc_type_int64)
  {
    xpc_object_t v95 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D15C(v95, v96, v97, v98, v99, v100, v101, v102);
    }
  }

  *(_DWORD *)(a1 + 9316) = xpc_int64_get_value(v94);
  xpc_object_t v103 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyECNRIsEnabled");
  if (xpc_get_type(v103) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v104 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D0EC(v104, v105, v106, v107, v108, v109, v110, v111);
    }
  }

  BOOL v112 = xpc_BOOL_get_value(v103);
  (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 408LL))(a1, v112);
  xpc_object_t v113 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyVolumeScalar");
  if (xpc_get_type(v113) != (xpc_type_t)&_xpc_type_double)
  {
    uint64_t v114 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D07C(v114, v115, v116, v117, v118, v119, v120, v121);
    }
  }

  float v122 = xpc_double_get_value(v113);
  (*(void (**)(uint64_t, void, float))(*(void *)a1 + 472LL))(a1, 0LL, v122);
  xpc_object_t v123 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyInputVolumeScalar");
  if (v123)
  {
    uint64_t v124 = v123;
    if (xpc_get_type(v123) != (xpc_type_t)&_xpc_type_double)
    {
      uint64_t v125 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D00C(v125, v126, v127, v128, v129, v130, v131, v132);
      }
    }

    float v133 = xpc_double_get_value(v124);
    (*(void (**)(uint64_t, float))(*(void *)a1 + 496LL))(a1, v133);
  }

  xpc_object_t v134 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyDSPOffload");
  if (xpc_get_type(v134) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v135 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5CF9C(v135, v136, v137, v138, v139, v140, v141, v142);
    }
  }

  *(_BYTE *)(a1 + 9355) = xpc_BOOL_get_value(v134);
  xpc_object_t v143 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyAdvancedHandsfreeSupport");
  if (v143)
  {
    uint64_t v144 = v143;
    if (xpc_get_type(v143) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v145 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5CF2C(v145, v146, v147, v148, v149, v150, v151, v152);
      }
    }

    uint64_t v153 = *(void *)(*(void *)(a1 + 416) + 9248LL);
    char v154 = xpc_BOOL_get_value(v144);
    sub_26BB8(v153, v154);
  }

  xpc_object_t v155 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyLowLatencyGameMode");
  if (!v155) {
    goto LABEL_101;
  }
  int v156 = v155;
  if (xpc_get_type(v155) != (xpc_type_t)&_xpc_type_BOOL)
  {
    uint64_t v157 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5CEBC(v157, v158, v159, v160, v161, v162, v163, v164);
    }
    if (sub_52814()) {
LABEL_108:
    }
      abort();
  }

  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
    BOOL v165 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 221LL)) {
        v166 = "running";
      }
      else {
        v166 = "not running";
      }
      if (xpc_BOOL_get_value(v156)) {
        int v167 = "running";
      }
      else {
        int v167 = "not running";
      }
      int v169 = 136315394;
      __int16 v170 = v166;
      __int16 v171 = 2080;
      v172 = v167;
      _os_log_impl( &dword_0,  v165,  OS_LOG_TYPE_DEFAULT,  "HFPAudioDevice InitializePublishedProperties LowLatencyGameMode: %s->%s",  (uint8_t *)&v169,  0x16u);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 221LL) = xpc_BOOL_get_value(v156);
  }

LABEL_101:
  if (!*(_DWORD *)(a1 + 9304)
    && (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1288LL))(a1) & 1) != 0 || sub_340E8()))
  {
    v168 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v169) = 0;
      _os_log_impl( &dword_0,  v168,  OS_LOG_TYPE_DEFAULT,  "Device category was unknown, defaulting to headphone",  (uint8_t *)&v169,  2u);
    }

    *(_DWORD *)(a1 + 9304) = 1;
  }

      xpc_object_t v40 = v42;
LABEL_102:
      *(_WORD *)(a4 + 2 * sub_52A64(v2, v5) = v40;
      uint64_t v54 = (__int16)(((v27 >> 10) & 0x1F | 0x20) << (v27 >> 15));
      if (2 * v27 >= 655360) {
        uint64_t v54 = 31744;
      }
      uint64_t v55 = (v54 + (v54 >> 1)) >> 1;
      uint64_t v57 = *(_WORD *)(a1 + 52) == 1 && v20 > v55;
      uint64_t v58 = v81;
      *(_WORD *)(a1 + 52) = ((v81 - 0x8000) >> 9 < 0x29) & (unsigned __int16)~v57;
      sub_563D4(a1, v14, v41, v57, v24, v25, v26);
      sub_56508(a1, v23, v57);
      *(_WORD *)(a1 + 44) = *(_WORD *)(a1 + 42);
      if (v39 >= 0) {
        uint64_t v59 = v39;
      }
      else {
        uint64_t v59 = -v39 & 0x7FFF;
      }
      if (v59)
      {
        xpc_object_t v60 = 0;
        uint64_t v61 = 1;
        do
        {
          ++v60;
          v61 *= 2;
        }

        while (v61 <= (unsigned __int16)v59);
        uint64_t v62 = ((unsigned __int16)v59 << 6) >> v60;
        uint64_t v63 = (_WORD)v60 << 6;
      }

      else
      {
        uint64_t v63 = 0;
        uint64_t v62 = 32;
      }

      *(_WORD *)(a1 + 42) = v63 + v62 + ((v39 >> 5) & 0x400);
      uint64_t v64 = v77;
      if (v57) {
        uint64_t v64 = 0;
      }
      *(_WORD *)(a1 + 10) = v64;
      if (v57) {
        uint64_t v65 = 0;
      }
      else {
        uint64_t v65 = v58;
      }
      *(_WORD *)(a1 + 12) = v65;
      uint64_t v66 = *(_WORD *)(v70 + 8);
      *(void *)uint64_t v71 = *(void *)v70;
      *(_WORD *)(v71 + _Block_object_dispose(va, 8) = v66;
      uint64_t v67 = 0;
      if (v76)
      {
        uint64_t v68 = 1;
        do
        {
          ++v67;
          v68 *= 2;
        }

        while (v68 <= v20);
        uint64_t v67 = (__int16)v67;
      }

      uint64_t v6 = (v20 << 6) >> v67;
      uint64_t v7 = ((v21 >> 5) & 0x400) + (v67 << 6);
      if (!v76) {
        LOWORD(sub_459C(v1, v6) = 32;
      }
      *(_WORD *)BOOL v70 = v7 + v6;
      if (++v5 == a3) {
        return a3;
      }
    }

    if (v51 <= 0xF83)
    {
      if (v51 <= 0x7FF)
      {
        if (v51 <= 0x18F)
        {
          if (v51 <= 0x15C)
          {
            if (v51 <= 0x12B)
            {
              if (v51 <= 0xF5)
              {
                if (v51 <= 0xB1)
                {
                  if (v51 > 0x4F) {
                    uint64_t v53 = 5;
                  }
                  else {
                    uint64_t v53 = 6;
                  }
                }

                else
                {
                  uint64_t v53 = 4;
                }
              }

              else
              {
                uint64_t v53 = 3;
              }
            }

            else
            {
              uint64_t v53 = 12;
            }
          }

          else
          {
            uint64_t v53 = 1;
          }
        }

        else
        {
          uint64_t v53 = 0;
        }
      }

      else
      {
        uint64_t v53 = 7;
      }
    }

    else
    {
      uint64_t v53 = 6;
    }

    goto LABEL_93;
  }

  return a3;
}

void sub_32B68(uint64_t a1)
{
  uint64_t v2 = (_BYTE *)(a1 + 9325);
  uint64_t v59 = 0LL;
  double v60 = 0.0;
  sub_33310(a1, (uint64_t *)&v60, (double *)&v59);
  if (v2[2])
  {
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
      sub_5D578();
    }
    __int128 v3 = operator new(0xD8uLL);
    uint64_t v58 = *(void *)(a1 + 328);
    __int128 v4 = *(_OWORD *)(a1 + 312);
    v57[0] = *(_OWORD *)(a1 + 296);
    v57[1] = v4;
    sub_51DCC((uint64_t)v3, 258, (uint64_t)v57, 0, 0);
    *(void *)(a1 + 232) = v3;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v3 + 16LL))(v3, 64000LL, 58LL);
    uint64_t v5 = operator new(0xA8uLL);
    __int128 v6 = *(_OWORD *)(a1 + 312);
    v55[0] = *(_OWORD *)(a1 + 296);
    v55[1] = v6;
    uint64_t v56 = *(void *)(a1 + 328);
    sub_1B874((uint64_t)v5, 258, (uint64_t)v55, 0);
LABEL_9:
    *(void *)(a1 + 240) = v5;
    (*(void (**)(void *, uint64_t))(*(void *)v5 + 16LL))(v5, 64000LL);
    goto LABEL_10;
  }

  if (v2[1])
  {
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
      sub_5D54C();
    }
    uint64_t v7 = operator new(0xD8uLL);
    uint64_t v54 = *(void *)(a1 + 328);
    __int128 v8 = *(_OWORD *)(a1 + 312);
    v53[0] = *(_OWORD *)(a1 + 296);
    v53[1] = v8;
    sub_1CE74((uint64_t)v7, 510, (uint64_t)v53, 0);
    *(void *)(a1 + 232) = v7;
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 16LL))(v7, 64000LL, 58LL);
    uint64_t v5 = operator new(0xA8uLL);
    __int128 v9 = *(_OWORD *)(a1 + 312);
    v51[0] = *(_OWORD *)(a1 + 296);
    v51[1] = v9;
    uint64_t v52 = *(void *)(a1 + 328);
    sub_ADA4((uint64_t)v5, 510, (uint64_t)v51);
    goto LABEL_9;
  }

void sub_3313C(_Unwind_Exception *a1)
{
}

uint64_t sub_33184(uint64_t a1)
{
  *(void *)a1 = off_82B50;
  *(_BYTE *)(a1 + 9017) = 0;
  v11[0] = 0LL;
  v11[1] = 0LL;
  uint64_t v2 = a1 + 9360;
  sub_52B28((uint64_t)v11, a1 + 9360);
  __int128 v3 = *(const void **)(a1 + 9424);
  if (v3)
  {
    _Block_release(v3);
    *(void *)(a1 + 9424) = 0LL;
  }

  sub_52BF4((uint64_t)v11);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 840LL))(a1))
  {
    uint64_t v4 = qword_962E8;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 824LL))(__p, a1);
    sub_3B7F0(v4, (uint64_t)__p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_77E0(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1632LL))(a1)
    && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1632LL))(a1);
    free(v5);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 1648LL))(a1, 0LL);
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
  sub_52C5C(v11);
  sub_52A64(v2, v6);
  return sub_459C(a1, v7);
}

void sub_332CC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_33184(a1);
  operator delete(v1);
}

BOOL sub_332E0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 9328);
  BOOL result = 1LL;
  if (v2 != 129 && v2 != 255) {
    return *(_DWORD *)(a1 + 9336) == 130;
  }
  return result;
}

void sub_33310(uint64_t a1, uint64_t *a2, double *a3)
{
  uint64_t v6 = a1 + 9272;
  uint64_t v7 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(v6 + 52);
    int v9 = *(unsigned __int8 *)(v6 + 53);
    int v10 = *(unsigned __int8 *)(v6 + 54);
    int v11 = *(unsigned __int8 *)(v6 + 55);
    int v12 = *(_DWORD *)(a1 + 9328);
    v19[0] = 67110144;
    v19[1] = v8;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 1024;
    int v23 = v10;
    __int16 v24 = 1024;
    int v25 = v11;
    __int16 v26 = 1024;
    int v27 = v12;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Codecs available. NBS (CVSD): %d, WBS (mSBC): %d, UWBS (AAC-ELD): %d, mSWB:%d, Stereo: %d",  (uint8_t *)v19,  0x20u);
  }

  int v13 = *(unsigned __int8 *)(v6 + 55);
  uint64_t v14 = 0x40D7700000000000LL;
  if (!*(_BYTE *)(v6 + 55) && !*(_BYTE *)(v6 + 54)) {
    uint64_t v14 = qword_659A0[*(_BYTE *)(v6 + 53) == 0];
  }
  int v15 = *(_DWORD *)(a1 + 9328);
  double v16 = 48000.0;
  if (v15 != 129 && v15 != 255 && *(_DWORD *)(a1 + 9336) != 130)
  {
    double v16 = 24000.0;
    if (v15 != 128) {
      double v16 = 0.0;
    }
  }

  *(void *)(a1 + 9264) = v14;
  *(_OWORD *)uint64_t v6 = xmmword_659B0;
  *(_OWORD *)(v6 + 16) = xmmword_659C0;
  if (v13 || *(_BYTE *)(v6 + 54))
  {
    *(void *)(a1 + 2sub_52C5C(v1 - 96) = v14;
    *(_DWORD *)(a1 + 32_Block_object_dispose(va, 8) = 32;
    *(_OWORD *)(a1 + 304) = xmmword_659D0;
    *(void *)(a1 + 320) = 0x100000004LL;
  }

  else
  {
    __int128 v18 = *(_OWORD *)(a1 + 9280);
    *(_OWORD *)(a1 + 2sub_52C5C(v1 - 96) = *(_OWORD *)(a1 + 9264);
    *(_OWORD *)(a1 + 312) = v18;
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = *(void *)(a1 + 9296);
  }

  *(double *)(a1 + 9104) = v16;
  *(_DWORD *)(a1 + 9112) = 1819304813;
  *(_DWORD *)(a1 + 9124) = 1;
  *(_DWORD *)(a1 + 9140) = 0;
  *(_DWORD *)(a1 + 9132) = 2;
  if (v15 == 129 || v15 == 255 || v15 == 128 || *(_DWORD *)(a1 + 9336) == 130)
  {
    *(void *)(a1 + 9116) = 0x800000009LL;
    *(_DWORD *)(a1 + 9136) = 32;
    *(_DWORD *)(a1 + 912_Block_object_dispose(va, 8) = 8;
    if (*(_DWORD *)(a1 + 9332))
    {
      *(void *)(a1 + 9176) = *(void *)(a1 + 9136);
      __int128 v17 = *(_OWORD *)(a1 + 9120);
      *(_OWORD *)(a1 + 9144) = *(_OWORD *)(a1 + 9104);
      *(_OWORD *)(a1 + 9160) = v17;
      *(void *)(a1 + 9144) = 0x40D7700000000000LL;
    }
  }

  if (a2) {
    *a2 = v14;
  }
  if (a3) {
    *a3 = v16;
  }
}

void sub_33584(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyUWBSSupport");
  if (value)
  {
    uint64_t v5 = value;
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v6 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D7D4(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    BOOL v75 = xpc_BOOL_get_value(v5);
  }

  else
  {
    uint64_t v14 = (os_log_s *)qword_95AD0;
    BOOL v75 = 0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "InitializePublishedProperties no UWBS Mono published", buf, 2u);
      BOOL v75 = 0;
    }
  }

  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyUWBSStereoSupport");
  if (xpc_get_type(v15) != (xpc_type_t)&_xpc_type_BOOL)
  {
    double v16 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D764(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  if (v15)
  {
    LODWORD(v15) = xpc_BOOL_get_value(v15);
  }

  else
  {
    __int16 v24 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "InitializePublishedProperties no UWBS Stereo published",  buf,  2u);
      LODWORD(v15) = 0;
    }
  }

  xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySWBSupport");
  __int16 v26 = v25;
  if (v25)
  {
    if (xpc_get_type(v25) != (xpc_type_t)&_xpc_type_BOOL)
    {
      int v27 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D6F4(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }

    LODWORD(v26) = xpc_BOOL_get_value(v26);
  }

  else
  {
    uint64_t v35 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "InitializePublishedProperties no SWB Mono published", buf, 2u);
      LODWORD(v26) = 0;
    }
  }

  __int128 v36 = (_WORD *)(a1 + 9326);
  xpc_object_t v37 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertySWBStereoSupport");
  uint64_t v38 = v37;
  if (v37)
  {
    if (xpc_get_type(v37) != (xpc_type_t)&_xpc_type_BOOL)
    {
      uint64_t v39 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D684(v39, v40, v41, v42, v43, v44, v45, v46);
      }
    }

    LODWORD(v3_Block_object_dispose(va, 8) = xpc_BOOL_get_value(v38);
  }

  else
  {
    uint64_t v47 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      int v48 = *(unsigned __int8 *)(a1 + 9327);
      *(_DWORD *)std::string buf = 67109120;
      BOOL v77 = v48;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEFAULT,  "InitializePublishedProperties invalid SWB Stereo published, mSWB:%u",  buf,  8u);
      LODWORD(v3_Block_object_dispose(va, 8) = 0;
    }
  }

  xpc_object_t v49 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyAACELDStereo48KSupport");
  uint64_t v50 = v49;
  if (v49)
  {
    if (xpc_get_type(v49) != (xpc_type_t)&_xpc_type_BOOL)
    {
      xpc_object_t v51 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
        sub_5D614(v51, v52, v53, v54, v55, v56, v57, v58);
      }
    }

    LODWORD(v50) = xpc_BOOL_get_value(v50);
  }

  else
  {
    uint64_t v59 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      int v60 = *(unsigned __int8 *)(a1 + 9327);
      *(_DWORD *)std::string buf = 67109120;
      BOOL v77 = v60;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEFAULT,  "InitializePublishedProperties invalid SWB Stereo fake published, mSWB:%u",  buf,  8u);
      LODWORD(v50) = 0;
    }
  }

  xpc_object_t v61 = xpc_dictionary_get_value(xdict, "kBTAudioMsgPropertyAACELDStereo48K10msSupport");
  int v62 = _os_feature_enabled_impl("AudioAccessoryFeatures", "SeamlessAudioTransition");
  BOOL v63 = 0;
  if (!v62 || !v61) {
    goto LABEL_48;
  }
  if (xpc_get_type(v61) != (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL v64 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5D5A4(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    if (sub_52814()) {
LABEL_64:
    }
      abort();
  }

  BOOL v63 = xpc_BOOL_get_value(v61);
LABEL_48:
  if ((_DWORD)v50)
  {
    int v72 = 129;
  }

  else if ((_DWORD)v38)
  {
    int v72 = 255;
  }

  else
  {
    int v72 = (_DWORD)v15 << 7;
  }

  *(_DWORD *)(a1 + 932_Block_object_dispose(va, 8) = v72;
  if (v63) {
    int v73 = 130;
  }
  else {
    int v73 = 0;
  }
  *(_DWORD *)(a1 + 9336) = v73;
  *(_DWORD *)(a1 + 9332) = (_DWORD)v15 << 7;
  int v74 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67110912;
    BOOL v77 = v75;
    __int16 v78 = 1024;
    int v79 = (int)v15;
    __int16 v80 = 1024;
    int v81 = (int)v26;
    __int16 v82 = 1024;
    int v83 = (int)v38;
    __int16 v84 = 1024;
    int v85 = (int)v50;
    __int16 v86 = 1024;
    int v87 = v72;
    __int16 v88 = 1024;
    int v89 = v73;
    __int16 v90 = 1024;
    int v91 = (_DWORD)v15 << 7;
    _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_DEFAULT,  "HFPStereo, SupportedCodecs AACELDMono %u, AACELDStereo %u, LC3Mono %u, LC348kStereo %u, AACELD48KStereo %u, mStere oSupported %u, mStereoSupported10ms %u, mStereoSupported24K %u",  buf,  0x32u);
  }

  if ((_DWORD)v26)
  {
    *__int128 v36 = 256;
  }

  else
  {
    *(_BYTE *)(a1 + 9327) = 0;
    *(_BYTE *)__int128 v36 = v75;
  }

  sub_22208(*(void **)(*(void *)(a1 + 416) + 9248LL), *(_DWORD *)(a1 + 9328));
}

uint64_t sub_33AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 == 1650750576)
  {
    v6[0] = xmmword_659E0;
    v6[1] = xmmword_659F0;
    int v7 = 0;
    (**(void (***)(void, void, uint64_t, _OWORD *, uint64_t))(qword_962E8 + 144))( *(void *)(qword_962E8 + 144),  *(unsigned int *)(a1 + 8),  3LL,  v6,  a5);
  }

  return sub_8380();
}

uint64_t sub_33B88(float *a1, int a2, float a3)
{
  a1[108] = a3;
  float v6 = (*(float (**)(float *))(*(void *)a1 + 952LL))(a1);
  float v7 = a1[108] + -1.0;
  float v8 = v6 - (float)(v7 * (*(float (**)(float *))(*(void *)a1 + 944LL))(a1));
  a1[110] = v8;
  uint64_t v9 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = a1[108];
    double v11 = v8;
    int v12 = (*(uint64_t (**)(float *))(*(void *)a1 + 1272LL))(a1);
    v17[0] = 134219010;
    uint64_t v13 = "No";
    *(double *)&v17[1] = a3;
    if (a2) {
      uint64_t v13 = "Yes";
    }
    __int16 v18 = 2048;
    double v19 = v10;
    __int16 v20 = 2048;
    double v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 2082;
    xpc_object_t v25 = v13;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "[HF] volume %f, mScalarVolume %f, mDBVolume %f, IsVolumeSupported %d Notify Mx %{public}s",  (uint8_t *)v17,  0x30u);
  }

  uint64_t result = (*(uint64_t (**)(float *))(*(void *)a1 + 1272LL))(a1);
  if ((_DWORD)result)
  {
    if (!*((_BYTE *)a1 + 408))
    {
      uint64_t v15 = *((void *)a1 + 50);
      if (v15)
      {
        unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v15 + 24));
        if ((v16 & 1) != 0) {
          sub_15554(*((void *)a1 + 50), a1[110]);
        }
      }
    }

    if ((a2 & 1) != 0 || (uint64_t result = sub_340E8(), (_DWORD)result))
    {
      strcpy((char *)v17, "dlovptuo");
      BYTE1(v17[2]) = 0;
      HIWORD(v17[2]) = 0;
      return (*(uint64_t (**)(float *, _DWORD *))(*(void *)a1 + 248LL))(a1, v17);
    }
  }

  return result;
}

void sub_33D50(void *a1, float a2)
{
  uint64_t v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(void *))(*a1 + 1272LL))(a1);
    int v7 = 134218240;
    double v8 = a2;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Input volume mScalarVolume %f, IsVolumeSupported %d",  (uint8_t *)&v7,  0x12u);
  }

  if ((*(unsigned int (**)(void *))(*a1 + 1272LL))(a1))
  {
    float v6 = (id *)a1[26];
    if (v6) {
      sub_11ABC(v6, a2);
    }
  }

void sub_33E3C(uint64_t a1, void *a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_12A88( v2,  (const __CFString *)[a2 objectForKeyedSubscript:@"CurrentAudioCategory"],  objc_msgSend(a2, "objectForKeyedSubscript:", @"CurrentVolume"),  objc_msgSend(a2, "objectForKeyedSubscript:", @"ManualVolumeUpdate"),  objc_msgSend(a2, "objectForKeyedSubscript:", @"RampInProgress"));
  }
}

void sub_33EE8(float *a1, float a2)
{
  a1[110] = a2;
  float v4 = (*(float (**)(float *))(*(void *)a1 + 952LL))(a1) - a1[110];
  float v5 = (float)(v4 / (*(float (**)(float *))(*(void *)a1 + 944LL))(a1)) + 1.0;
  a1[108] = v5;
  float v6 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = a1[110];
    int v8 = (*(uint64_t (**)(float *))(*(void *)a1 + 1272LL))(a1);
    int v12 = 134218752;
    double v13 = a2;
    __int16 v14 = 2048;
    double v15 = v5;
    __int16 v16 = 2048;
    double v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "volume %f, mScalarVolume %f, mDBVolume %f, IsVolumeSupported %d",  (uint8_t *)&v12,  0x26u);
  }

  if ((*(unsigned int (**)(float *))(*(void *)a1 + 1272LL))(a1))
  {
    if (*((_BYTE *)a1 + 408))
    {
      __int16 v9 = (id *)*((void *)a1 + 26);
      if (v9) {
        sub_11C14(v9, a1[108]);
      }
    }

    else
    {
      uint64_t v10 = *((void *)a1 + 50);
      if (v10)
      {
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)(v10 + 24));
        if ((v11 & 1) != 0) {
          sub_15554(*((void *)a1 + 50), a1[110]);
        }
      }
    }
  }

uint64_t sub_34060(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 248LL))(*(void *)(a1 + 416));
}

void *sub_34070@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(result[52] + 9248LL);
  __int128 v3 = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 16) = *(void *)(v2 + 24);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_340A0(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 277LL);
}

size_t sub_340B0(uint64_t a1, char *a2, size_t a3)
{
  return sub_1C754(a1 + 120, a2, a3);
}

double sub_340B8(uint64_t a1)
{
  (*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(v2, a1, 0LL);
  return v2[0];
}

uint64_t sub_340E8()
{
  return 0LL;
}

void sub_340F0(uint64_t a1, int a2, __CFDictionary **a3)
{
  uint64_t valuePtr = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v33 = 0LL;
  CFTypeRef cf = 0LL;
  CFTypeRef v32 = 0LL;
  *(_OWORD *)xpc_object_t values = 0u;
  __int128 v30 = 0u;
  *(_OWORD *)keys = *(_OWORD *)off_831E0;
  __int128 v28 = *(_OWORD *)off_831F0;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, (char *)&valuePtr + 4);
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v7 = v6;
  if (a3)
  {
    if (v5 && v6 != 0LL)
    {
      CFArrayRef v9 = 0LL;
      if (a2 <= 4)
      {
        if (a2 == 1)
        {
          HIDWORD(v26) = 1;
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v26 + 4);
          int v11 = 1163984896;
        }

        else
        {
          if (a2 != 2) {
            goto LABEL_47;
          }
          HIDWORD(v26) = 2;
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v26 + 4);
          int v11 = 1128792064;
        }

        LODWORD(v26) = v11;
        CFNumberRef v17 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v26);
        CFNumberRef v13 = v17;
        if (v10) {
          BOOL v18 = v17 == 0LL;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18)
        {
          values[0] = v10;
          values[1] = v17;
          *(void *)&__int128 v30 = v5;
          *((void *)&v30 + 1) = v7;
          CFTypeRef cf = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          if (cf)
          {
            int v19 = kCFAllocatorDefault;
            CFIndex v20 = 1LL;
LABEL_37:
            CFArrayRef v9 = CFArrayCreate(v19, &cf, v20, &kCFTypeArrayCallBacks);
            double v15 = *a3;
            __int16 v16 = @"BT_EQValuesDownlink";
            goto LABEL_38;
          }

          goto LABEL_54;
        }

LABEL_55:
        CFRelease(v10);
        if (!v13) {
          goto LABEL_47;
        }
LABEL_46:
        CFRelease(v13);
        goto LABEL_47;
      }

      if (a2 == 12)
      {
        HIDWORD(v26) = 2;
        CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v26 + 4);
        LODWORD(v26) = 1128792064;
        CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v26);
        CFNumberRef v13 = v21;
        if (v10) {
          BOOL v22 = v21 == 0LL;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22) {
          goto LABEL_44;
        }
        values[0] = v10;
        values[1] = v21;
        *(void *)&__int128 v30 = v5;
        *((void *)&v30 + 1) = v7;
        CFDictionaryRef v23 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        CFTypeRef cf = v23;
        if (v23)
        {
          HIDWORD(v26) = 1;
          CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v26 + 4);
          LODWORD(v26) = 1163984896;
          CFNumberRef v24 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v26);
          CFNumberRef v13 = v24;
          if (v10 && v24)
          {
            values[0] = v10;
            values[1] = v24;
            *(void *)&__int128 v30 = v5;
            *((void *)&v30 + 1) = v7;
            CFTypeRef v32 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
            if (v32)
            {
              int v19 = kCFAllocatorDefault;
              CFIndex v20 = 2LL;
              goto LABEL_37;
            }

            goto LABEL_54;
          }

          goto LABEL_44;
        }
      }

      else
      {
        if (a2 != 5) {
          goto LABEL_47;
        }
        HIDWORD(v26) = 5;
        CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v26 + 4);
        CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &v26);
        CFNumberRef v13 = v12;
        if (v10) {
          BOOL v14 = v12 == 0LL;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14) {
          goto LABEL_44;
        }
        values[0] = v10;
        values[1] = v12;
        *(void *)&__int128 v30 = v5;
        *((void *)&v30 + 1) = v7;
        uint64_t v33 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        if (v33)
        {
          CFArrayRef v9 = CFArrayCreate(kCFAllocatorDefault, (const void **)&v33, 1LL, &kCFTypeArrayCallBacks);
          double v15 = *a3;
          __int16 v16 = @"BT_EQValuesUplink";
LABEL_38:
          CFDictionaryAddValue(v15, v16, v9);
          goto LABEL_55;
        }
      }

LABEL_54:
      CFArrayRef v9 = 0LL;
      goto LABEL_55;
    }
  }

  CFArrayRef v9 = 0LL;
  if (!v5)
  {
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

          CFNumberRef v7 = a2[1];
          int v8 = 1735159650;
          goto LABEL_55;
        }

        if (v3 != 1819569763)
        {
          float v4 = 1836411236;
          goto LABEL_53;
        }

LABEL_47:
  CFRelease(v5);
  if (v7) {
LABEL_12:
  }
    CFRelease(v7);
LABEL_13:
  if (v33) {
    CFRelease(v33);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v9) {
    CFRelease(v9);
  }
}

    int v8 = 4;
    goto LABEL_48;
  }

  if (v6 == 1751737454) {
    goto LABEL_47;
  }
  CFNumberRef v7 = 1819107691;
LABEL_45:
  if (v6 == v7) {
    goto LABEL_46;
  }
  return sub_46064(a1, a2, a3, a4, a5);
}

void sub_344DC(uint64_t a1, unsigned int a2, CFMutableDictionaryRef *a3)
{
  int valuePtr = 1;
  unsigned int v16 = a2;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = v5;
  if (a3 && v5)
  {
    if (a2 >= 7)
    {
      unsigned int v16 = a2 - 6;
      CFDictionaryAddValue(*a3, @"BT_EQLevelUplink", v5);
      sub_340F0(v7, 5, a3);
    }

    CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v16);
    if (v8)
    {
      CFNumberRef v9 = v8;
      int v10 = v16;
      switch(v16)
      {
        case 1u:
        case 2u:
          int v11 = 2;
          goto LABEL_14;
        case 3u:
        case 4u:
          int v11 = 12;
          goto LABEL_14;
        case 5u:
        case 6u:
          int v11 = 1;
LABEL_14:
          sub_340F0((uint64_t)v8, v11, a3);
          CFDictionaryAddValue(*a3, @"BT_EQLevelDownlink", v9);
          break;
        default:
          BOOL v14 = (os_log_s *)qword_95AD0;
          if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
            sub_5D870(v10, v14);
          }
          break;
      }

      CFNumberRef v12 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        CFMutableDictionaryRef v13 = *a3;
        *(_DWORD *)std::string buf = 138543362;
        CFMutableDictionaryRef v18 = v13;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "EQ settings are %{public}@", buf, 0xCu);
      }

      CFRelease(v9);
    }

    else if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR))
    {
      sub_5D844();
    }

    goto LABEL_18;
  }

  if (v5) {
LABEL_18:
  }
    CFRelease(v6);
}

CFDictionaryRef sub_346C0(_DWORD *a1)
{
  int v2 = a1[2327];
  int v18 = 0;
  BOOL v19 = v2 == 0;
  uint64_t v17 = 0LL;
  BOOL valuePtr = v19;
  int v16 = 0;
  if (!v2 && ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 1288LL))(a1) & 1) == 0)
  {
    int v3 = a1[2326];
    if (v3 != 1)
    {
      if (v3 == 2 || v3 == 3)
      {
        uint64_t v17 = 0x141000000LL;
        int v16 = 0;
        goto LABEL_9;
      }

      int v3 = 1;
    }

    HIDWORD(v17) = v3;
    int v16 = 1086324736;
    LODWORD(v17) = 1077936128;
  }

void sub_34938(uint64_t a1, unsigned int a2, CFMutableDictionaryRef *a3)
{
  *(_DWORD *)(a1 + 9312) = a2;
  if (a2)
  {
    unsigned int v4 = a2;
    CFNumberRef v6 = (os_log_s *)qword_95AD0;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      v8[0] = 67109120;
      v8[1] = v4;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Adding eq setting %d", (uint8_t *)v8, 8u);
      unsigned int v4 = *(_DWORD *)(a1 + 9312);
    }

    sub_344DC(v7, v4, a3);
  }

uint64_t sub_349FC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 9340);
  unsigned int v2 = v1 - 128;
  BOOL v3 = v1 == 255;
  return v2 < 3 || v3;
}

double sub_34A1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 9328);
  if (v2 != 129 && v2 != 255 && *(_DWORD *)(a1 + 9336) != 130) {
    goto LABEL_9;
  }
  int v3 = *(_DWORD *)(a1 + 9340);
  if ((v3 - 129) < 2)
  {
    double v5 = 48000.0;
    goto LABEL_16;
  }

  if (v3)
  {
    if (v3 == 128)
    {
      unsigned int v4 = (double *)&unk_65000;
LABEL_11:
      double v5 = v4[87];
      goto LABEL_16;
    }

    double v5 = 8000.0;
  }

  else
  {
LABEL_9:
    unsigned int v4 = (double *)&unk_65000;
    if (v2 == 128 && *(_DWORD *)(a1 + 9340)) {
      goto LABEL_11;
    }
    double v5 = 24000.0;
    if (!*(_BYTE *)(a1 + 9327) && !*(_BYTE *)(a1 + 9326)) {
      double v5 = *(double *)&qword_659A0[*(_BYTE *)(a1 + 9325) == 0];
    }
  }

uint64_t sub_34B90(uint64_t a1, double a2)
{
  unsigned int v4 = (_BYTE *)(a1 + 9325);
  if (*(_BYTE *)(a1 + 9326) && *(_BYTE *)(a1 + 9345)) {
    return 4294956445LL;
  }
  CFNumberRef v6 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v14 = 134217984;
    *(double *)&v14[4] = a2;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "HFPStereo, Update Sampling Rate %f", v14, 0xCu);
  }

  if (v4[29])
  {
    if (a2 > 16000.0 && *v4 != 0)
    {
      CFNumberRef v8 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v14 = 134217984;
        *(void *)&v14[4] = 0x40CF400000000000LL;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "HFP sample Rate Limited to %f", v14, 0xCu);
      }

      a2 = 16000.0;
    }

    __int128 v9 = *(_OWORD *)(a1 + 9280);
    *(_OWORD *)(a1 + 2sub_52C5C(v1 - 96) = *(_OWORD *)(a1 + 9264);
    *(_OWORD *)(a1 + 312) = v9;
    *(void *)(a1 + 32_Block_object_dispose(va, 8) = *(void *)(a1 + 9296);
  }

  else
  {
    sub_33310(a1, 0LL, 0LL);
  }

  double v10 = *(double *)(a1 + 296);
  if (v10 != a2)
  {
    if (*(_DWORD *)(a1 + 9340))
    {
      __int16 v11 = (os_log_s *)qword_95AD0;
      if (*(_DWORD *)(a1 + 9328))
      {
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 9104);
          *(_DWORD *)int v14 = 134218496;
          *(double *)&v14[4] = a2;
          __int16 v15 = 2048;
          double v16 = v10;
          __int16 v17 = 2048;
          uint64_t v18 = v12;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "HFPStereo, sample Rate between host codec changed to %f, %f, %f",  v14,  0x20u);
        }

        (*(void (**)(_BYTE *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(v14, a1, 0LL);
        uint64_t v13 = *(double *)v14;
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1464LL))(a1, v13);
        return 0LL;
      }
    }

    else
    {
      __int16 v11 = (os_log_s *)qword_95AD0;
    }

    *(double *)(a1 + 2sub_52C5C(v1 - 96) = a2;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v14 = 134217984;
      *(double *)&v14[4] = a2;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "HFPStereo, Rate changed to %f", v14, 0xCu);
      a2 = *(double *)(a1 + 296);
    }

    uint64_t v13 = a2;
    goto LABEL_26;
  }

  return 0LL;
}

void sub_34E08(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 416);
  if (v4 && (uint64_t v5 = *(void *)(v4 + 9248)) != 0) {
    int v6 = *(unsigned __int8 *)(v5 + 221);
  }
  else {
    int v6 = 0;
  }
  int v7 = *(_DWORD *)(a1 + 9340);
  if (sub_5280C())
  {
    unsigned int v8 = *(_DWORD *)(a1 + 9328);
    if (!v8) {
      return;
    }
    *(_DWORD *)(a1 + 9340) = v8;
    __int128 v9 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 67109888;
      int v17 = v7;
      __int16 v18 = 1024;
      int v19 = v8;
      __int16 v20 = 1024;
      unsigned int v21 = a2;
      __int16 v22 = 1024;
      unsigned int v23 = v8;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "HFPStereo Output Device Configured to %d -> %d, desired:%d, highest:%d",  (uint8_t *)&v16,  0x1Au);
      unsigned int v8 = *(_DWORD *)(a1 + 9340);
    }

    uint64_t v10 = a1;
    unsigned int v11 = v8;
    unsigned int v12 = 0;
  }

  else
  {
    if ((sub_340E8() & 1) != 0) {
      return;
    }
    if (a2 == 4)
    {
      int v13 = 130;
    }

    else if (a2 < 2 || (int v13 = *(_DWORD *)(a1 + 9328)) == 0)
    {
      int v13 = 0;
    }

    *(_DWORD *)(a1 + 9340) = v13;
    int v14 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = *(_DWORD *)(a1 + 9328);
      int v16 = 67110144;
      int v17 = v7;
      __int16 v18 = 1024;
      int v19 = v13;
      __int16 v20 = 1024;
      unsigned int v21 = a2;
      __int16 v22 = 1024;
      unsigned int v23 = v15;
      __int16 v24 = 1024;
      int v25 = v6;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "HFPStereo Output Device Configured to %d -> %d, desired:%d, highest:%d, game:%d",  (uint8_t *)&v16,  0x20u);
      int v13 = *(_DWORD *)(a1 + 9340);
    }

    unsigned int v12 = v13 == 130;
    uint64_t v10 = a1;
    unsigned int v11 = v13;
  }

  sub_34FD4(v10, v11, v12);
}

void sub_34FD4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(v12, a1, 0LL);
  unsigned int v6 = ((*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1) * 20.0 / 1000.0);
  *(_DWORD *)(a1 + 9440) = v6;
  int v7 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = "BT_TRANSPORT_TYPE_LEGACY";
    *(_DWORD *)std::string buf = 134218754;
    if (a3) {
      unsigned int v8 = "BT_TRANSPORT_TYPE_ADVANCED";
    }
    uint64_t v15 = *(void *)&v12[0];
    __int16 v16 = 1024;
    unsigned int v17 = a2;
    __int16 v18 = 2082;
    int v19 = v8;
    __int16 v20 = 1024;
    unsigned int v21 = v6;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "HFPStereo SendStereoEnable samplerate:%f, codec:%u Transport %{public}s, Max Supported Frame Size %d",  buf,  0x22u);
  }

  uint64_t v9 = *(void *)(a1 + 400);
  if (v9)
  {
    float v10 = *(double *)v12;
    sub_15528(v9, v10);
  }

  unsigned int v11 = *(id **)(a1 + 208);
  if (v11) {
    sub_13540(v11, a2, *(double *)v12, a3);
  }
}

uint64_t sub_35140(uint64_t a1)
{
  uint64_t result = sub_5280C();
  if ((result & 1) == 0 && *(_DWORD *)(a1 + 9336) == 130)
  {
    int v3 = (os_log_s *)qword_95AD0;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT);
    unsigned int v5 = 130;
    if (v4)
    {
      int v6 = *(_DWORD *)(a1 + 9340);
      v8[0] = 67109120;
      v8[1] = v6;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "HFPStereo enabled HAoS codec from currCodec%d",  (uint8_t *)v8,  8u);
      unsigned int v5 = *(_DWORD *)(a1 + 9336);
    }

    *(_DWORD *)(a1 + 9340) = 130;
    sub_34FD4(a1, v5, 1u);
    uint64_t v7 = *(void *)(*(void *)(a1 + 416) + 9248LL);
    uint64_t result = sub_340E8();
    if ((_DWORD)result) {
      uint64_t result = _os_feature_enabled_impl("BluetoothFeatures", "DirectRouteTransition");
    }
    *(_BYTE *)(v7 + 222) = result;
  }

  return result;
}

void sub_35240(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = a1 + 9326;
  *(_BYTE *)(a1 + 9352) = a2;
  uint64_t v7 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      unsigned int v8 = "true";
    }
    else {
      unsigned int v8 = "false";
    }
    (*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&v29, a1, 0LL);
    double v9 = v29;
    int v10 = *(_DWORD *)(a1 + 9432);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1304LL))(a1);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v35 = v8;
    __int16 v36 = 2048;
    double v37 = v9;
    __int16 v38 = 1024;
    int v39 = v10;
    __int16 v40 = 1024;
    int v41 = v11;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "HFPStereo set kBluetoothAudioDevicePropertySCOIsEnabled : %s, sample rate %f Current State %d, owned %d",  buf,  0x22u);
  }

  sub_527A8(33LL, a2, (unint64_t)*(double *)(a1 + 296), 0LL, 0LL);
  if (a3 == 1920364387) {
    sub_52740(5LL);
  }
  if (*(_BYTE *)(v6 + 26))
  {
    int v12 = *(_DWORD *)(a1 + 9348);
    *(_WORD *)(v6 + 20) = 1;
    double v13 = *(double *)(a1 + 296);
    if (v12 == 1935765619)
    {
      if (v13 == 16000.0) {
        int v12 = 1935765620;
      }
      else {
        int v12 = 1935765619;
      }
    }

    if (v13 != 48000.0 && v13 != 24000.0 && v13 != 32000.0)
    {
      *(void *)(a1 + 216) = 0LL;
      *(void *)(a1 + 224) = 0LL;
      goto LABEL_39;
    }

    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 232);
    __int16 v20 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(a1 + 9340);
      int v22 = *(_DWORD *)(a1 + 9336);
      int v23 = *(_DWORD *)(a1 + 9328);
      LODWORD(v29) = 67109632;
      HIDWORD(v29) = v21;
      __int16 v30 = 1024;
      int v31 = v22;
      __int16 v32 = 1024;
      int v33 = v23;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "HFPStereo, check codec in trigger sco, mStereoSelected %u, mStereoSupported10ms %u, mStereoSupported %u",  (uint8_t *)&v29,  0x14u);
    }

    if (*(_DWORD *)(a1 + 9328))
    {
      int v24 = *(_DWORD *)(a1 + 9340);
      if (v24)
      {
        if (v24 == 128)
        {
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 272);
          int v25 = (os_log_s *)qword_95AD0;
          if (!os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          LOWORD(v29) = 0;
          uint64_t v26 = "HFPStereo install Stereo 24k encoder";
        }

        else if (v24 == 130)
        {
          *(int8x16_t *)(a1 + 216) = vextq_s8(*(int8x16_t *)(a1 + 256), *(int8x16_t *)(a1 + 256), 8uLL);
          int v25 = (os_log_s *)qword_95AD0;
          if (!os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          LOWORD(v29) = 0;
          uint64_t v26 = "HFPStereo install Stereo 10ms encoder";
        }

        else
        {
          *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 248);
          int v25 = (os_log_s *)qword_95AD0;
          if (!os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_39;
          }
          LOWORD(v29) = 0;
          uint64_t v26 = "HFPStereo install highest stereo encoder";
        }

        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&v29, 2u);
      }
    }

LABEL_39:
    if (a3 == 1936090482 || a3 == 1919708275) {
      a3 = 1918989668;
    }
    if (!*(_DWORD *)(a1 + 9432)) {
      sub_35690(a1, 1);
    }
    __int128 v28 = *(id **)(a1 + 208);
    if (v28)
    {
      (*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&v29, a1, 0LL);
      unsigned int v16 = v29;
      unsigned int v17 = v28;
      unsigned int v18 = v12;
      unsigned int v19 = a3;
LABEL_48:
      sub_11868(v17, v18, v19, v16);
      return;
    }

    return;
  }

  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
    sub_5D8E0();
  }
  *(_WORD *)(v6 + 20) = 256;
  if (*(_BYTE *)v6 && *(_BYTE *)(v6 + 19))
  {
    *(_BYTE *)(v6 + 19) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)(a1 + 296));
  }

  int v14 = *(id **)(a1 + 208);
  if (v14)
  {
    if (*(_DWORD *)(a1 + 9432) == 2)
    {
      sub_35690(a1, 3);
      int v14 = *(id **)(a1 + 208);
    }

    unsigned int v15 = *(_DWORD *)(a1 + 9348);
    (*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)a1 + 792LL))(&v29, a1, 0LL);
    unsigned int v16 = v29;
    unsigned int v17 = v14;
    unsigned int v18 = v15;
    unsigned int v19 = 0;
    goto LABEL_48;
  }

        __int16 v30 = 15;
        goto LABEL_40;
      }

      __int16 v30 = 1;
      int v31 = 1;
LABEL_41:
      __int16 v32 = 32 * word_666F0[v31 & 7];
LABEL_42:
      int v33 = v32 - (v26 & 0x1FFF);
      uint64_t v34 = (v33 >> 5) & 0xFFF;
      if ((v33 & 0x10000) != 0) {
        uint64_t v35 = v34 | 0x1000;
      }
      else {
        uint64_t v35 = v34;
      }
      __int16 v36 = (v35 + v26) & 0x1FFF;
      double v37 = v36 + 15840;
      if ((((_WORD)v36 + 11264) & 0x2000) == 0) {
        __int16 v36 = 5120;
      }
      if ((v37 & 0x2000) != 0) {
        __int16 v36 = 544;
      }
      *(_WORD *)(a1 + 60) = v36;
      __int16 v38 = v36 + (-v18 >> 6);
      if ((v38 & 0x2000) != 0) {
        int v39 = v38 | 0x7C000;
      }
      else {
        int v39 = v38 & 0x3FFF;
      }
      *(_DWORD *)(a1 + 56) = (v39 + v18) & 0x7FFFF;
      *(_BYTE *)(a4 + sub_52A64(v2, v5) = v30;
      if (*(_DWORD *)(a1 + 4) == 32000)
      {
        __int16 v40 = (v30 & 0xFFF8) << 12;
        LOWORD(v2_Block_object_dispose(va, 8) = word_66700[(unsigned __int16)v30] + v28;
        int v41 = v28 & 0xFFF;
        if (v41 <= 0x7FF) {
          goto LABEL_56;
        }
      }

      else
      {
        __int16 v40 = 0;
        int v41 = (v27 >> 2) & 0xFFF;
        if (v41 <= 0x7FF)
        {
LABEL_56:
          uint64_t v42 = (((v28 & 0x7F) << 7) | 0x4000) >> (14 - (v41 >> 7));
          goto LABEL_57;
        }
      }

      uint64_t v42 = 0;
LABEL_57:
      uint64_t v43 = v42 + v40;
      uint64_t v44 = (__int16)(v42 + v40);
      sub_56258((_WORD *)a1, &v69, &v68, (_WORD *)&v69 + 1, v44, (__int16)v11, (__int16)v70);
      else {
        int v48 = 31744;
      }
      xpc_object_t v49 = (v48 + (v48 >> 1)) >> 1;
      xpc_object_t v51 = *(_WORD *)(a1 + 52) == 1 && v42 > v49;
      uint64_t v52 = v68;
      *(_WORD *)(a1 + 52) = ((v68 - 0x8000) >> 9 < 0x29) & (unsigned __int16)~v51;
      sub_563D4(a1, v30, v27, v51, v45, v46, v47);
      sub_56508(a1, v44, v51);
      *(_WORD *)(a1 + 44) = *(_WORD *)(a1 + 42);
      uint64_t v53 = -HIWORD(v69) & 0x7FFF;
      if (v69 >= 0) {
        uint64_t v53 = HIWORD(v69);
      }
      if (v53)
      {
        uint64_t v54 = 0;
        for (CFIndex i = 1; i <= v53; i *= 2)
          ++v54;
        uint64_t v56 = (v53 << 6) >> v54;
        uint64_t v57 = v54 << 6;
      }

      else
      {
        uint64_t v57 = 0;
        uint64_t v56 = 32;
      }

      *(_WORD *)(a1 + 42) = v57 + v56 + ((HIWORD(v69) >> 5) & 0x400);
      uint64_t v58 = v69;
      if (v51) {
        uint64_t v58 = 0;
      }
      *(_WORD *)(a1 + 10) = v58;
      if (v51) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = v52;
      }
      *(_WORD *)(a1 + 12) = v59;
      int v60 = *(_WORD *)(v6 + 8);
      *(void *)BOOL v64 = *(void *)v6;
      *(_WORD *)(v64 + _Block_object_dispose(va, 8) = v60;
      xpc_object_t v61 = 0;
      if ((v43 & 0x7FFF) != 0)
      {
        int v62 = 1;
        do
        {
          LOWORD(v61) = v61 + 1;
          v62 *= 2;
        }

        while (v62 <= v42);
        xpc_object_t v61 = (__int16)v61;
      }

      uint64_t v7 = (v42 << 6) >> v61;
      unsigned int v8 = ((v43 >> 5) & 0x400) + (v61 << 6);
      if ((v43 & 0x7FFF) != 0) {
        double v9 = v7;
      }
      else {
        double v9 = 32;
      }
      *(_WORD *)uint64_t v6 = v8 + v9;
      if (++v5 == a3) {
        return a3;
      }
    }

    if (v29 <= 0xF83)
    {
      if (v29 > 0x7FF) {
        goto LABEL_39;
      }
      if (v29 <= 0x18F)
      {
        if (v29 <= 0x15C)
        {
          if (v29 <= 0x12B)
          {
            if (v29 <= 0xF5)
            {
              if (v29 <= 0xB1)
              {
                if (v29 > 0x4F) {
                  __int16 v30 = 13;
                }
                else {
                  __int16 v30 = 14;
                }
              }

              else
              {
                __int16 v30 = 12;
              }
            }

            else
            {
              __int16 v30 = 11;
            }
          }

          else
          {
            __int16 v30 = 10;
          }
        }

        else
        {
          __int16 v30 = 9;
        }
      }

      else
      {
        __int16 v30 = 8;
      }
    }

    else
    {
      __int16 v30 = 14;
    }

void sub_35690(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 9432);
    v6[0] = 67109376;
    v6[1] = v5;
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Set SCOStatus %d ---> %d", (uint8_t *)v6, 0xEu);
  }

  *(_DWORD *)(a1 + 9432) = a2;
}

void sub_3574C(uint64_t a1, char *a2, void *a3)
{
  if (!strcasecmp(a2, "kBTAudioMsgPropertyAACELDStereo48K10msSupport"))
  {
    *(_DWORD *)(a1 + 9336) = xpc_BOOL_get_value(a3);
    uint64_t v6 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v7 = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "HFPStereo, mStereoSupported10ms leave us", v7, 2u);
    }
  }

  else
  {
    sub_8BDC((uint64_t *)a1, a2, a3);
  }

uint64_t sub_35800(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v6 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v7 = "tear down";
    if (a2) {
      __int16 v7 = "creation";
    }
    int v9 = 136315138;
    int v10 = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "TriggerSCOAudio: Request eSCO %s ", (uint8_t *)&v9, 0xCu);
  }

  sub_35240((uint64_t)a1, a2, a3);
  if (a2) {
    return (*(unsigned int (**)(uint64_t *))(*a1 + 1152))(a1) ^ 1;
  }
  if (sub_4DA3C(a1[52])) {
    sub_4DC90(a1[52]);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 1152))(a1);
}

void sub_35914(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 9432);
  if ((_DWORD)a3)
  {
    BOOL v7 = 1;
    if (a2 == 116) {
      int v8 = 1;
    }
    else {
      int v8 = 2;
    }
    sub_35690(a1, v8);
  }

  else if (a2)
  {
    if (a2 == 116)
    {
      sub_35690(a1, 4);
    }

    else
    {
      if (v6 == 1) {
        sub_4D7C(a1, 0);
      }
      sub_35690(a1, 0);
      if (sub_340E8())
      {
        sub_429B4(*(void *)(a1 + 416), 1685283695);
        int v9 = (os_log_s *)qword_95AD0;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = 67109120;
          LODWORD(v15) = a2;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "eSCO Connect/Disconnect Failed Status: %d",  (uint8_t *)&v14,  8u);
        }
      }
    }

    BOOL v7 = 1;
  }

  else
  {
    sub_35690(a1, 0);
    BOOL v7 = v6 != 4;
  }

  int v10 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = sub_6FA0(a1);
    int v12 = *(_DWORD *)(a1 + 9432);
    double v13 = @"NO";
    int v14 = 138544386;
    uint64_t v15 = v11;
    if (v7) {
      double v13 = @"YES";
    }
    __int16 v16 = 1024;
    int v17 = a2;
    __int16 v18 = 1024;
    int v19 = v6;
    __int16 v20 = 1024;
    int v21 = v12;
    __int16 v22 = 2112;
    int v23 = v13;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Received Status update from bluetoothd Status %d %d -> %d Notify HAL %@",  (uint8_t *)&v14,  0x28u);
  }

  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 384LL))(a1, a3);
    sub_43360(*(void *)(a1 + 416), 1953719151, a3);
  }

BOOL sub_35B20(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 461))
  {
    int v2 = *(_DWORD *)(a1 + 9432);
  }

  else
  {
    if (sub_4DA3C(*(void *)(a1 + 416))) {
      return 0LL;
    }
    int v2 = *(unsigned __int8 *)(a1 + 460);
  }

  return v2 != 0;
}

void sub_35B6C(uint64_t a1, int a2)
{
  BOOL v4 = (_BYTE *)(a1 + 9346);
  atomic_store(a2, (unsigned __int8 *)(a1 + 288));
  uint64_t v11 = 0x676C6F6273636F6ELL;
  int v12 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v11);
  if (a2)
  {
    if (!*v4)
    {
      LODWORD(v11) = 1668506479;
      int v5 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)std::string buf = 67109120;
        int v14 = v6;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Taking Audio for mAudioObjectID %d", buf, 8u);
      }

      BOOL v7 = @"BluetoothTakeAudioNotification";
LABEL_11:
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v11);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, v7, 0LL, 0LL, 0);
    }
  }

  else if (!v4[1] && (sub_340E8() & 1) == 0)
  {
    LODWORD(v11) = 1685283695;
    int v8 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)std::string buf = 67109120;
      int v14 = v9;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "Relinquishing Audio for mAudioObjectID %d", buf, 8u);
    }

    BOOL v7 = @"BluetoothRelinquishAudioNotification";
    goto LABEL_11;
  }

  *(_WORD *)BOOL v4 = 0;
  v4[7] = a2;
}

uint64_t sub_35D14(_DWORD *a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "disabled";
    if (a2) {
      int v5 = "enabled";
    }
    int v6 = "enable";
    if (a2) {
      int v6 = "disable";
    }
    v8[0] = 136446466;
    *(void *)&v8[1] = v5;
    __int16 v9 = 2082;
    int v10 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BT HFP device set ecnr is %{public}s. AG will %{public}s EC/NR.",  (uint8_t *)v8,  0x16u);
  }

  a1[2327] = a2;
  strcpy((char *)v8, "rncebolg");
  BYTE1(v8[2]) = 0;
  HIWORD(v8[2]) = 0;
  return (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)a1 + 248LL))(a1, v8);
}

uint64_t sub_35E1C(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT set NBS (CVSD) is %d", (uint8_t *)v6, 8u);
  }

  *(_BYTE *)(a1 + 9324) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)(a1 + 296));
}

uint64_t sub_35EEC(uint64_t a1)
{
  return (*(double *)(a1 + 296)
}

uint64_t sub_35F18(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT set WBS (mSBC) is %d", (uint8_t *)v6, 8u);
  }

  *(_BYTE *)(a1 + 9325) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)(a1 + 296));
}

uint64_t sub_35FE8(uint64_t a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT set UWBS (AAC-ELD) is %d", (uint8_t *)v6, 8u);
  }

  *(_BYTE *)(a1 + 9326) = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)(a1 + 296));
}

void sub_360B8(int *a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)a1 + 37);
    LODWORD(v7) = 67109376;
    HIDWORD(v7) = a2;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT set UWBSStereo: %d, sample rate:%f", (uint8_t *)&v7, 0x12u);
  }

  (*(void (**)(double *__return_ptr, int *, void))(*(void *)a1 + 792LL))(&v7, a1, 0LL);
  (*(void (**)(int *, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1853059619LL, (uint64_t)v7);
  int v6 = a1[2332];
  if (a2)
  {
    if (!v6)
    {
      int v6 = 128;
LABEL_8:
      a1[2332] = v6;
    }
  }

  else if (v6 == 128)
  {
    int v6 = 0;
    goto LABEL_8;
  }

  sub_22208(*(void **)(*((void *)a1 + 52) + 9248LL), v6);
}

void sub_361D8(int *a1, int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *((void *)a1 + 37);
    LODWORD(v7) = 67109376;
    HIDWORD(v7) = a2;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BT set SWBStereo: %d, sample rate:%f", (uint8_t *)&v7, 0x12u);
  }

  (*(void (**)(double *__return_ptr, int *, void))(*(void *)a1 + 792LL))(&v7, a1, 0LL);
  (*(void (**)(int *, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1853059619LL, (uint64_t)v7);
  int v6 = a1[2332];
  if (a2)
  {
    if (!v6)
    {
      int v6 = 255;
LABEL_8:
      a1[2332] = v6;
    }
  }

  else if (v6 == 255)
  {
    int v6 = 0;
    goto LABEL_8;
  }

  sub_22208(*(void **)(*((void *)a1 + 52) + 9248LL), v6);
}

BOOL sub_362F8(uint64_t a1)
{
  int v2 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 9344);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "BT get UWBSStereoTest: %d", (uint8_t *)v5, 8u);
  }

  return *(_BYTE *)(a1 + 9344) != 0;
}

uint64_t sub_363AC(_BYTE *a1, unsigned int a2)
{
  BOOL v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "NO";
    if (a2) {
      uint64_t v5 = "YES";
    }
    int v7 = 136446210;
    __int16 v8 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "dsp offload support =  %{public}s", (uint8_t *)&v7, 0xCu);
  }

  a1[9355] = a2;
  return (*(uint64_t (**)(_BYTE *, uint64_t, void))(*(void *)a1 + 240LL))(a1, 1987080038LL, a2);
}

void sub_36490(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 16LL))(*(void *)(a1 + 416));
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 992LL))(a1))
  {
    int v3 = 0;
  }

  else
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 288));
    int v3 = v4 & 1;
  }

  (*(void (**)(uint64_t))(*(void *)a1 + 1488LL))(a1);
  uint64_t v5 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 992LL))(a1);
    int v7 = "YES";
    if (v6) {
      __int16 v8 = "YES";
    }
    else {
      __int16 v8 = "NO";
    }
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 288));
    if ((v9 & 1) == 0) {
      int v7 = "NO";
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v7;
    if (v3) {
      int v10 = "Create new Delayed Disconnect Timer";
    }
    else {
      int v10 = "Not disconnecting eSCO";
    }
    __int16 v14 = 2082;
    uint64_t v15 = v10;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Status : IO = %{public}s eSCO Running = %{public}s Delayed Transport Disconnect: %{public}s",  buf,  0x20u);
  }

  if (v3)
  {
    *(void *)std::string buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    sub_52B28((uint64_t)buf, a1 + 9360);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_36688;
    _DWORD v11[3] = &unk_82B08;
    v11[4] = a1;
    unsigned int v12 = v2;
    *(void *)(a1 + 9424) = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v11);
    sub_52BF4((uint64_t)buf);
    sub_3EB3C(qword_962E8, 2000LL, v2, *(void **)(a1 + 9424));
    sub_52C5C(buf);
  }

void sub_3666C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void *sub_36688(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 40));
  if (result)
  {
    int v3 = result;
    v8[0] = 0LL;
    v8[1] = 0LL;
    sub_52B28((uint64_t)v8, v1 + 9360);
    unsigned __int8 v4 = *(const void **)(v1 + 9424);
    if (v4)
    {
      _Block_release(v4);
      *(void *)(v1 + 9424) = 0LL;
    }

    sub_52BF4((uint64_t)v8);
    uint64_t v5 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Delayed Transport Disconnect: Disconnect Timer Fired..Disconnect eSCO",  v7,  2u);
    }

    uint64_t v6 = (_BYTE *)v3[1137];
    if (v6)
    {
      if (v6[192]) {
        (*(void (**)(_BYTE *, void, uint64_t, void))(*(void *)v6 + 256LL))(v6, 0LL, 1918989668LL, 0LL);
      }
    }

    return (void *)sub_52C5C(v8);
  }

  return result;
}

void sub_3676C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_36780(uint64_t a1)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, a1 + 9360);
  unsigned int v2 = *(void **)(a1 + 9424);
  if (v2)
  {
    uint64_t v3 = dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9424));
    BOOL v4 = v3 == 0;
    if (!v3)
    {
      uint64_t v5 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Delayed Transport Disconnect: Cancelling current Dispatch",  buf,  2u);
        unsigned int v2 = *(void **)(a1 + 9424);
      }

      dispatch_block_cancel(v2);
    }

    *(void *)(a1 + 9424) = 0LL;
  }

  else
  {
    BOOL v4 = 0LL;
  }

  uint64_t v6 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 288));
    *(_DWORD *)std::string buf = 67109376;
    BOOL v11 = v4;
    __int16 v12 = 1024;
    int v13 = v7 & 1;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Delayed Transport Disconnect: cancelled block = %d Transport  = %d",  buf,  0xEu);
  }

  sub_52C5C(v9);
  return v4;
}

uint64_t sub_368D8(unsigned __int8 *a1)
{
  unsigned __int8 v2 = atomic_load(a1 + 288);
  if ((v2 & 1) != 0) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 1168LL))(a1);
  }
}

uint64_t sub_3692C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9352);
}

void sub_36938(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1272LL))(a1))
  {
    if (*(_BYTE *)(a1 + 408))
    {
      unsigned __int8 v2 = *(id **)(a1 + 208);
      if (v2)
      {
        uint64_t v3 = (os_log_s *)qword_95AD0;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
        {
          double v4 = *(float *)(a1 + 432);
          int v5 = 134217984;
          double v6 = v4;
          _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "HFPAudioDevice: volume update back to headphone %f",  (uint8_t *)&v5,  0xCu);
          unsigned __int8 v2 = *(id **)(a1 + 208);
        }

        sub_11C14(v2, *(float *)(a1 + 432));
      }
    }
  }

uint64_t sub_36A14(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1701015153)
  {
    if (v2 <= 1935896429)
    {
      BOOL v3 = v2 == 1701015154;
      int v4 = 1852992613;
    }

    else
    {
      BOOL v3 = v2 == 1935896430 || v2 == 1935959404;
      int v4 = 1987080038;
    }
  }

  else if (v2 <= 1668510817)
  {
    BOOL v3 = v2 == 1650750320;
    int v4 = 1668506479;
  }

  else
  {
    BOOL v3 = v2 == 1668510818 || v2 == 1684234612;
    int v4 = 1685283695;
  }

  if (v3 || v2 == v4) {
    return 1LL;
  }
  else {
    return sub_8680();
  }
}

uint64_t sub_36AD0(uint64_t a1, int *a2, _BYTE *a3)
{
  int v3 = *a2;
  if (*a2 > 1701015153)
  {
    if (v3 <= 1935896429)
    {
      if (v3 != 1701015154)
      {
        int v4 = 1852992613;
        goto LABEL_14;
      }
    }

    else
    {
      if (v3 == 1935896430)
      {
        *a3 = 1;
        return 0LL;
      }

      if (v3 != 1935959404)
      {
        int v4 = 1987080038;
        goto LABEL_14;
      }
    }

uint64_t sub_36BB4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  *a5 = 0;
  int v6 = *a2;
  if (*a2 <= 1701015153)
  {
    if (v6 > 1668641651)
    {
      if (v6 == 1668641652)
      {
        uint64_t result = sub_8690();
        *a5 += 120;
        return result;
      }

      if (v6 == 1684234612)
      {
LABEL_25:
        int v9 = 4;
        goto LABEL_26;
      }

      int v7 = 1685283695;
    }

    else
    {
      if (v6 == 1650750320)
      {
        int v9 = 8;
        goto LABEL_26;
      }

      if (v6 == 1668506479) {
        goto LABEL_25;
      }
      int v7 = 1668510818;
    }

    goto LABEL_24;
  }

  if (v6 > 1935896429)
  {
    if (v6 == 1935896430 || v6 == 1935959404) {
      goto LABEL_25;
    }
    int v7 = 1987080038;
LABEL_24:
    if (v6 == v7) {
      goto LABEL_25;
    }
    return sub_8690();
  }

  if (v6 == 1701015154 || v6 == 1852992613) {
    goto LABEL_25;
  }
  if (v6 == 1853059619)
  {
    int v8 = *(unsigned __int8 *)(a1 + 9324);
    if (*(_BYTE *)(a1 + 9324))
    {
      int v8 = 16;
      *a5 = 16;
    }

    if (*(_BYTE *)(a1 + 9325))
    {
      v8 += 16;
      *a5 = v8;
    }

    if (*(_BYTE *)(a1 + 9326))
    {
      v8 += 16;
      *a5 = v8;
    }

    if (!*(_DWORD *)(a1 + 9328)) {
      return 0LL;
    }
    int v9 = v8 + 16;
LABEL_26:
    *a5 = v9;
    return 0LL;
  }

  return sub_8690();
}

uint64_t sub_36D44( uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int *a7, CFDictionaryRef *a8)
{
  int v12 = *a2;
  if (*a2 <= 1701015153)
  {
    if (v12 > 1668641651)
    {
      if (v12 == 1668641652)
      {
        uint64_t result = sub_8698();
        if ((_DWORD)result) {
          return result;
        }
        uint64_t v21 = *a7;
        unsigned int v22 = (a6 - v21) / 0xC;
        if (v22 >= 0xA) {
          unsigned int v22 = 10;
        }
        if (v22)
        {
          int v23 = 0;
          int v24 = (CFDictionaryRef *)((char *)a8 + v21);
          do
          {
            switch(v23)
            {
              case 0:
                *int v24 = 0x7261777764636174LL;
                int v25 = v24 + 1;
                goto LABEL_52;
              case 1:
                *(void *)((char *)v24 + 12) = 0x7261777773636F6ELL;
                int v25 = (_DWORD *)v24 + 5;
                goto LABEL_52;
              case 2:
                v24[3] = 0x726177776373636FLL;
                int v25 = v24 + 4;
                goto LABEL_52;
              case 3:
                *(void *)((char *)v24 + 36) = 0x726177776473636FLL;
                int v25 = (_DWORD *)v24 + 11;
                goto LABEL_52;
              case 4:
                v24[6] = 0x7261777765636E72LL;
                int v25 = v24 + 7;
                goto LABEL_52;
              case 5:
                *(void *)((char *)v24 + 60) = 0x726177776E726C65LL;
                int v25 = (_DWORD *)v24 + 17;
                goto LABEL_52;
              case 6:
                v24[9] = 0x706C737462647370LL;
                int v25 = v24 + 10;
                goto LABEL_52;
              case 7:
                *(void *)((char *)v24 + 84) = 0x726177777364656CLL;
                int v25 = (_DWORD *)v24 + 23;
                goto LABEL_52;
              case 8:
                v24[12] = 0x7261777761746274LL;
                int v25 = v24 + 13;
                goto LABEL_52;
              case 9:
                *(void *)((char *)v24 + 10_Block_object_dispose(va, 8) = 0x7261777776706F66LL;
                int v25 = (_DWORD *)v24 + 29;
LABEL_52:
                *int v25 = 0;
                break;
              default:
                break;
            }

            ++v23;
          }

          while (v22 != v23);
          LODWORD(v21) = *a7;
        }

        uint64_t result = 0LL;
        int v18 = v21 + 12 * v22;
        goto LABEL_61;
      }

      if (v12 == 1684234612)
      {
        uint64_t result = 0LL;
        int v15 = *(_DWORD *)(a1 + 9304);
        goto LABEL_59;
      }

      int v13 = 1685283695;
      if (v12 != 1685283695) {
        return sub_8698();
      }
    }

    else
    {
      if (v12 == 1650750320)
      {
        CFDictionaryRef v19 = sub_346C0((_DWORD *)a1);
        uint64_t result = 0LL;
        *a8 = v19;
        int v18 = 8;
LABEL_61:
        *a7 = v18;
        return result;
      }

      int v13 = 1668506479;
      if (v12 != 1668506479)
      {
        if (v12 == 1668510818)
        {
          uint64_t result = 0LL;
          int v15 = 1;
LABEL_59:
          *(_DWORD *)a8 = v15;
          goto LABEL_60;
        }

        return sub_8698();
      }
    }

    uint64_t result = 0LL;
    *(_DWORD *)a8 = v13;
LABEL_60:
    int v18 = 4;
    goto LABEL_61;
  }

  if (v12 > 1935896429)
  {
    switch(v12)
    {
      case 1935896430:
        uint64_t result = 0LL;
        unsigned __int8 v26 = atomic_load((unsigned __int8 *)(a1 + 288));
        int v15 = v26 & 1;
        goto LABEL_59;
      case 1935959404:
        uint64_t result = 0LL;
        int v15 = *(_DWORD *)(a1 + 9320);
        goto LABEL_59;
      case 1987080038:
        uint64_t result = 0LL;
        int v15 = *(unsigned __int8 *)(a1 + 9355);
        goto LABEL_59;
    }

    return sub_8698();
  }

  if (v12 == 1701015154)
  {
    uint64_t result = 0LL;
    int v15 = *(_DWORD *)(a1 + 9308);
    goto LABEL_59;
  }

  if (v12 != 1852992613)
  {
    if (v12 == 1853059619)
    {
      unsigned int v16 = 0;
      unsigned int v17 = a6 >> 4;
      if (a6 >> 4 >= 3) {
        unsigned int v17 = 3;
      }
      if (v17 && *(_BYTE *)(a1 + 9324))
      {
        *(int64x2_t *)a8 = vdupq_n_s64(0x40BF400000000000uLL);
        unsigned int v16 = 1;
      }

      if (v16 < v17 && *(_BYTE *)(a1 + 9325)) {
        *(int64x2_t *)&a8[2 * v16++] = vdupq_n_s64(0x40CF400000000000uLL);
      }
      if (*(_BYTE *)(a1 + 9326) && !*(_BYTE *)(a1 + 9345) && v16 < v17) {
        *(int64x2_t *)&a8[2 * v16++] = vdupq_n_s64(0x40D7700000000000uLL);
      }
      uint64_t result = 0LL;
      int v18 = 16 * v16;
      goto LABEL_61;
    }

    return sub_8698();
  }

  if (*(_DWORD *)(a1 + 9308)) {
    int v20 = *(_DWORD *)(a1 + 9316);
  }
  else {
    int v20 = 4;
  }
  uint64_t result = 0LL;
  *(_DWORD *)a8 = v20;
  *a7 = 4;
  return result;
}

uint64_t sub_37144(uint64_t a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, _BYTE *a6)
{
  if (*a2 != 1935896430) {
    return sub_86A0();
  }
  sub_35240(a1, *a6 != 0, *a4);
  return 0LL;
}

uint64_t sub_37188(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 240LL))(*(void *)(a1 + 416));
}

uint64_t sub_37198(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, int *a6)
{
  *a6 = 0;
  if (*a3 != 1936092513 && *a3 != 1885762657) {
    return sub_86B8();
  }
  int v7 = *(unsigned __int8 *)(a1 + 9324);
  if (*(_BYTE *)(a1 + 9324))
  {
    int v7 = 56;
    *a6 = 56;
  }

  if (*(_BYTE *)(a1 + 9325))
  {
    v7 += 56;
    *a6 = v7;
  }

  if (*(_BYTE *)(a1 + 9326))
  {
    v7 += 56;
    *a6 = v7;
  }

  if (*(_DWORD *)(a1 + 9328)) {
    *a6 = v7 + 56;
  }
  return 0LL;
}

uint64_t sub_37210( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, _DWORD *a8, uint64_t a9)
{
  if (*a3 != 1936092513 && *a3 != 1885762657) {
    return sub_86C0();
  }
  int v13 = (_BYTE *)(a1 + 9324);
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v14 = sub_F4FC(a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 792LL))(&v27, a1, v14);
  if (a7 / 0x38 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a7 / 0x38;
  }
  if (v15) {
    BOOL v16 = *v13 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    unsigned int v19 = 0;
  }

  else
  {
    *(void *)&__int128 v27 = 0x40BF400000000000LL;
    *(void *)(a9 + 32) = v29;
    __int128 v18 = v28;
    *(_OWORD *)a9 = v27;
    *(_OWORD *)(a9 + 16) = v18;
    *(int64x2_t *)(a9 + 40) = vdupq_n_s64(0x40BF400000000000uLL);
    unsigned int v19 = 1;
  }

  if (v19 < v15 && *(_BYTE *)(a1 + 9325) != 0)
  {
    *(void *)&__int128 v27 = 0x40CF400000000000LL;
    uint64_t v21 = a9 + 56LL * v19;
    *(void *)(v21 + 32) = v29;
    __int128 v22 = v28;
    *(_OWORD *)uint64_t v21 = v27;
    *(_OWORD *)(v21 + 16) = v22;
    *(int64x2_t *)(v21 + 40) = vdupq_n_s64(0x40CF400000000000uLL);
    ++v19;
  }

  if (*(_BYTE *)(a1 + 9326) && !*(_BYTE *)(a1 + 9345) && v19 < v15)
  {
    *(void *)&__int128 v27 = 0x40D7700000000000LL;
    uint64_t v23 = a9 + 56LL * v19;
    *(void *)(v23 + 32) = v29;
    __int128 v24 = v28;
    *(_OWORD *)uint64_t v23 = v27;
    *(_OWORD *)(v23 + 16) = v24;
    *(int64x2_t *)(v23 + 40) = vdupq_n_s64(0x40D7700000000000uLL);
    ++v19;
  }

  if (*(_DWORD *)(a1 + 9328) && !*(_BYTE *)(a1 + 9345) && v19 < v15)
  {
    *(void *)&__int128 v27 = 0x40D7700000000000LL;
    uint64_t v25 = a9 + 56LL * v19;
    *(void *)(v25 + 32) = v29;
    __int128 v26 = v28;
    *(_OWORD *)uint64_t v25 = v27;
    *(_OWORD *)(v25 + 16) = v26;
    *(int64x2_t *)(v25 + 40) = vdupq_n_s64(0x40D7700000000000uLL);
    ++v19;
  }

  *a8 = 56 * v19;
  return 0LL;
}

uint64_t sub_3740C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (*a3 != 1936092532 && *a3 != 1885762592) {
    return sub_86C8();
  }
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG))
  {
    sub_5D980();
    if (!a7) {
      return 0LL;
    }
  }

  else if (!a7)
  {
    return 0LL;
  }

  int v10 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
    sub_5D90C(a7, v10);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 512LL))(a1, *(double *)a7);
  if (!(_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)a7);
    return 0LL;
  }

  return result;
}

uint64_t sub_374F8(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(*(void *)(a1 + 416) + 9160LL)
    && (int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2),
        v5 == (*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 416) + 9160LL) + 16LL))(*(void *)(*(void *)(a1 + 416) + 9160LL)))
    && ((int v6 = *a3, *a3 != 1935892841) ? (v7 = v6 == 1935893353) : (v7 = 1), !v7 ? (v8 = v6 == 1935894894) : (v8 = 1), v8))
  {
    return 1LL;
  }

  else
  {
    return sub_86D0();
  }

uint64_t sub_375AC(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 416) + 9160LL);
}

uint64_t sub_375B8(uint64_t a1, uint64_t a2, int *a3, _BYTE *a4)
{
  if (!*(void *)(*(void *)(a1 + 416) + 9160LL)) {
    return sub_86D8();
  }
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  int v8 = *a3;
  if (*a3 != 1935894894)
  {
    if (v8 == 1935893353)
    {
      *a4 = 1;
      return 0LL;
    }

    if (v8 != 1935892841) {
      return sub_86D8();
    }
  }

  *a4 = 0;
  return 0LL;
}

uint64_t sub_37698(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (!*(void *)(*(void *)(a1 + 416) + 9160LL)) {
    return sub_88B0();
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  int v10 = *a3;
  if (*a3 == 1935892841)
  {
    int v11 = 16;
    goto LABEL_10;
  }

  if (v10 == 1935894894)
  {
    int v11 = 8;
    goto LABEL_10;
  }

  if (v10 != 1935893353) {
    return sub_88B0();
  }
  int v11 = 4;
LABEL_10:
  *a6 = v11;
  return 0LL;
}

uint64_t sub_3779C( uint64_t a1, uint64_t a2, int *a3, int a4, int *a5, unsigned int a6, unsigned int *a7, int *a8)
{
  if (!*(void *)(*(void *)(a1 + 416) + 9160LL)) {
    return sub_88B8();
  }
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  int v16 = *a3;
  if (*a3 <= 1935892840)
  {
    if (v16 == 1650682995)
    {
      if (a6 <= 3)
      {
        uint64_t v17 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
          sub_5D9AC();
        }
        return v17;
      }

      uint64_t v17 = 0LL;
      int v22 = 1936483188;
    }

    else
    {
      if (v16 != 1668047219) {
        return sub_88B8();
      }
      if (a6 <= 3)
      {
        uint64_t v17 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
          sub_5D9D8();
        }
        return v17;
      }

      uint64_t v17 = 0LL;
      int v22 = 1685287523;
    }
  }

  else
  {
    if (v16 == 1935892841)
    {
      unsigned int v19 = a6 >> 2;
      if (a6 >> 2 >= 4) {
        unsigned int v19 = 4;
      }
      if (v19)
      {
        *a8 = 1936221033;
        if (v19 == 1)
        {
          unsigned int v19 = 4;
        }

        else
        {
          a8[1] = 1935827571;
          if (v19 < 3)
          {
            unsigned int v19 = 8;
          }

          else
          {
            a8[2] = 1935765619;
            if (v19 == 3)
            {
              unsigned int v19 = 12;
            }

            else
            {
              a8[3] = 1935765620;
              unsigned int v19 = 16;
            }
          }
        }
      }

      uint64_t v17 = 0LL;
      goto LABEL_47;
    }

    if (v16 != 1935893353)
    {
      if (v16 == 1935894894)
      {
        if (a6 <= 7)
        {
          uint64_t v17 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
            sub_5DA30();
          }
          return v17;
        }

        if (a4 != 4)
        {
          uint64_t v17 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
            sub_5DA5C();
          }
          return v17;
        }

        int v20 = *a5;
        if (*a5 > 1935827570)
        {
          if (v20 == 1936221033)
          {
            uint64_t v21 = @"HCI";
            goto LABEL_51;
          }

          if (v20 == 1935827571)
          {
            uint64_t v21 = @"Baseband I2S";
            goto LABEL_51;
          }
        }

        else
        {
          if (v20 == 1935765619)
          {
            uint64_t v21 = @"API2S";
            goto LABEL_51;
          }

          if (v20 == 1935765620)
          {
            uint64_t v21 = @"API2S16kHz";
LABEL_51:
            uint64_t v17 = 0LL;
            *(void *)a8 = v21;
            unsigned int v19 = 8;
            goto LABEL_47;
          }
        }

        uint64_t v17 = 1852797029LL;
        uint64_t v23 = (os_log_s *)qword_95AD0;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR))
        {
          v24[0] = HIBYTE(v20);
          v24[1] = BYTE2(v20);
          void v24[2] = BYTE1(v20);
          v24[3] = v20;
          v24[4] = 0;
          *(_DWORD *)std::string buf = 136446210;
          __int128 v26 = v24;
          _os_log_error_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "An invalid data source of %{public}s was selected",  buf,  0xCu);
        }

        return v17;
      }

      return sub_88B8();
    }

    if (a6 <= 3)
    {
      uint64_t v17 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
        sub_5DA04();
      }
      return v17;
    }

    uint64_t v17 = 0LL;
    int v22 = *(_DWORD *)(a1 + 9348);
  }

  *a8 = v22;
  unsigned int v19 = 4;
LABEL_47:
  *a7 = v19;
  return v17;
}

uint64_t sub_37BE4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, int a6, int *a7)
{
  if (!*(void *)(*(void *)(a1 + 416) + 9160LL)) {
    return sub_88C0();
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  if (*a3 == 1935893353)
  {
    if (a6 != 4)
    {
      uint64_t v17 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
        sub_5DB38();
      }
      return v17;
    }

    int v13 = *a7;
    *(_DWORD *)(a1 + 934_Block_object_dispose(va, 8) = *a7;
    if (!*(void *)(a1 + 208)) {
      goto LABEL_24;
    }
    uint64_t v14 = (_BYTE *)(a1 + 9326);
    switch(v13)
    {
      case 1935765619:
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
          sub_5DB0C();
        }
        break;
      case 1935827571:
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
          sub_5DAE0();
        }
        break;
      case 1936221033:
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEBUG)) {
          sub_5DAB4();
        }
        if (!*v14) {
          goto LABEL_24;
        }
        char v15 = 0;
        goto LABEL_23;
      default:
        uint64_t v17 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_ERROR)) {
          sub_5DA88();
        }
        return v17;
    }

    if (!*v14)
    {
LABEL_24:
      uint64_t v21 = 0x676C6F6273636369LL;
      int v22 = 0;
      __int128 v18 = *(void (***)(void, uint64_t, uint64_t, uint64_t *))(qword_962E8 + 144);
      unsigned int v19 = *v18;
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
      v19(v18, v20, 1LL, &v21);
      return 0LL;
    }

    char v15 = 1;
LABEL_23:
    *(_BYTE *)(a1 + 9345) = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240LL))( a1,  1853059619LL,  (uint64_t)*(double *)(a1 + 296));
    goto LABEL_24;
  }

  return 2003332927LL;
}

void sub_37EC8(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 208);
  if (v1) {
    sub_11724(v1);
  }
}

std::string *sub_37ED8@<X0>(int a1@<W1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  sub_A248(a2, "Unknown");
  int v4 = "mSBC";
  int v5 = "Unknown Codec";
  if (a1 == 256) {
    int v5 = "CVSD";
  }
  if (a1 != 257) {
    int v4 = v5;
  }
  if (a1 == 510) {
    int v6 = "AAC-ELD";
  }
  else {
    int v6 = v4;
  }
  return std::string::assign(a2, v6);
}

void sub_37F50(_Unwind_Exception *exception_object)
{
}

void sub_37F6C(uint64_t a1, BOOL a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_13300(v2, a2);
  }
}

void sub_37F7C(uint64_t a1, unsigned int a2)
{
  int v2 = *(id **)(a1 + 208);
  if (v2) {
    sub_13420(v2, a2);
  }
}

void sub_37F8C(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kBTAudioMsgPropertyDeviceUID");
  if (!string)
  {
    int v4 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_58940(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

  CFStringRef v12 = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
  *(void *)(a1 + 200) = v12;
  int v13 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    int v15 = 138412546;
    CFStringRef v16 = v12;
    __int16 v17 = 1024;
    int v18 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "HFP Device XPC connection for UID %@ connected to[ %d ] ",  (uint8_t *)&v15,  0x12u);
    CFStringRef v12 = *(CFStringRef *)(a1 + 200);
  }

  **(void **)(a1 + 20_Block_object_dispose(va, 8) = v12;
}

uint64_t sub_380C4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a3 != 1)
  {
    uint64_t v8 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5CB6C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }

  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 792LL))(v20, a1, a4);
  __int128 v16 = v20[1];
  *(_OWORD *)a2 = v20[0];
  *((_OWORD *)a2 + 1) = v16;
  a2[4] = v21;
  *((double *)a2 + 5) = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  *((double *)a2 + 6) = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  __int16 v17 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *a2;
    LODWORD(v20[0]) = 134217984;
    *(void *)((char *)v20 + 4) = v18;
    _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "Physical Format Supported %f", (uint8_t *)v20, 0xCu);
  }

  return a3;
}

uint64_t sub_38208(uint64_t a1, double *a2, uint64_t a3)
{
  if ((_DWORD)a3 != 1)
  {
    uint64_t v6 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_FAULT)) {
      sub_5CB6C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }

  *a2 = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  a2[1] = (*(double (**)(uint64_t))(*(void *)a1 + 776LL))(a1);
  return a3;
}

BOOL sub_38298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)a2 != *(double *)a3 || *(_DWORD *)(a2 + 28) != *(_DWORD *)(a3 + 28);
}

BOOL sub_382C4(void *a1, int a2, double a3, double a4)
{
  uint64_t v4 = 776LL;
  if (a2) {
    uint64_t v4 = 784LL;
  }
  return (*(double (**)(void))(*a1 + v4))() == a4;
}

uint64_t sub_38304(uint64_t a1, int a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1040LL))(a1);
  if (a2 != 1768845428 || (_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1032LL))(a1);
    if (a2 != 1869968496 || (_DWORD)result) {
      return (a2 == 1735159650 || a2 == 1869968496 || a2 == 1768845428) && a3 == 0;
    }
  }

  return result;
}

uint64_t sub_383B4(_BYTE *a1, int a2, int a3, int a4)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_52B28((uint64_t)v19, (uint64_t)(a1 + 552));
  if (a2 == a3) {
    goto LABEL_23;
  }
  uint64_t v8 = a1 + 9354;
  if (a2 != 1953719151) {
    goto LABEL_8;
  }
  if ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 984LL))(a1))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
    pthread_cond_signal((pthread_cond_t *)(a1 + 680));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
  }

  if (a4 != 1936090482)
  {
LABEL_8:
    if (a3 != 1953719151) {
      goto LABEL_23;
    }
    *uint64_t v8 = a4 == 1919708275;
    if (a4 != 1936090482)
    {
      BOOL v9 = sub_362F8((uint64_t)a1);
      if (a4 != 1918989668 || !v9) {
        goto LABEL_21;
      }
    }

    goto LABEL_17;
  }

  a1[9436] = 0;
  sub_4A414(*((void *)a1 + 52));
  v18[0] = 0;
  if (sub_50340(*((void *)a1 + 52), v18, 1))
  {
    (*(void (**)(_BYTE *, void))(*(void *)a1 + 520LL))(a1, v18[0]);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "HFPStereo facetime skip stereo disable", buf, 2u);
    }
  }

  if (a3 == 1953719151)
  {
    *uint64_t v8 = 0;
LABEL_17:
    a1[9436] = 1;
    sub_4A414(*((void *)a1 + 52));
    v18[0] = 0;
    if (sub_50340(*((void *)a1 + 52), v18, 1))
    {
      (*(void (**)(_BYTE *, void))(*(void *)a1 + 520LL))(a1, v18[0]);
    }

    else
    {
      uint64_t v11 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, "HFPStereo facetime skip stereo enable", buf, 2u);
      }
    }

LABEL_23:
  uint64_t v13 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = HIBYTE(a2);
    v18[1] = BYTE2(a2);
    _OWORD v18[2] = BYTE1(a2);
    v18[3] = a2;
    v18[4] = 0;
    v17[0] = HIBYTE(a3);
    v17[1] = BYTE2(a3);
    v17[2] = BYTE1(a3);
    _DWORD v17[3] = a3;
    v17[4] = 0;
    v16[0] = HIBYTE(a4);
    v16[1] = BYTE2(a4);
    v16[2] = BYTE1(a4);
    v16[3] = a4;
    v16[4] = 0;
    if (a1[460]) {
      uint64_t v14 = "Yes";
    }
    else {
      uint64_t v14 = "No";
    }
    *(_DWORD *)std::string buf = 136316162;
    uint64_t v21 = v18;
    __int16 v22 = 2080;
    uint64_t v23 = v17;
    __int16 v24 = 2080;
    uint64_t v25 = v16;
    __int16 v26 = 2080;
    __int128 v27 = "No";
    __int16 v28 = 2080;
    uint64_t v29 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "Profile Transition %s => %s , reason %s streamChangeReqd = %s Need Transport Ready %s",  buf,  0x34u);
  }

  sub_52C5C(v19);
  return 0LL;
}

      uint64_t v7 = v6 + 24;
      if (v6 + 24 == a2) {
        return v8;
      }
    }
  }

  return v5;
}

  if (a7 > 0x37)
  {
    uint64_t v13 = a7 / 0x38uLL;
    uint64_t v14 = sub_F4FC(a2);
    uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, unint64_t, uint64_t))(*a1 + 1208LL))(a1, a9, v13, v14);
    double v12 = 0LL;
    __int128 v16 = 56 * v15;
LABEL_63:
    *a8 = v16;
    return v12;
  }

  double v12 = 561211770LL;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
    sub_5FE68();
  }
  return v12;
}

void sub_38718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_3873C(_BYTE *a1, int a2, int a3, int a4)
{
  v25[0] = 0LL;
  v25[1] = 0LL;
  sub_52B28((uint64_t)v25, (uint64_t)(a1 + 552));
  double v8 = sub_34A1C((uint64_t)a1);
  BOOL v9 = 0LL;
  if (a2 != 1953719151 || a3 == a4) {
    goto LABEL_31;
  }
  double v10 = v8;
  int v11 = 0;
  a1[9354] = 0;
  if (a3 == 1919708275)
  {
    (*(void (**)(_BYTE *, double))(*(void *)a1 + 512LL))(a1, v8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1853059700LL, (uint64_t)v10);
    int v11 = 1;
  }

  if ((*(unsigned int (**)(_BYTE *))(*(void *)a1 + 984LL))(a1))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
    pthread_cond_signal((pthread_cond_t *)(a1 + 680));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
  }

  if (a3 == 1936090482 || (BOOL v12 = sub_362F8((uint64_t)a1), a3 == 1918989668) && v12)
  {
    uint64_t v13 = *((void *)a1 + 52);
    if (*(_DWORD *)(*(void *)(v13 + 9248) + 244LL))
    {
      if (*((_DWORD *)a1 + 2332))
      {
        a1[9436] = 0;
        sub_4A414(v13);
        v24[0] = 0;
        if (sub_50340(*((void *)a1 + 52), v24, 1))
        {
          (*(void (**)(_BYTE *, void))(*(void *)a1 + 520LL))(a1, v24[0]);
        }

        else
        {
          uint64_t v14 = (os_log_s *)qword_95AD0;
          if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "HFPStereo facetime skip stereo disable", buf, 2u);
          }
        }

        (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(void *)a1 + 240LL))(a1, 1885762592LL, a1 + 296);
        int v11 = 1;
      }
    }
  }

  BOOL v9 = v11 != 0;
  if (a4 == 1918989668)
  {
  }

  else if (a4 != 1936090482)
  {
    if (a4 == 1919708275)
    {
      a1[9354] = 1;
      (*(void (**)(_BYTE *, double))(*(void *)a1 + 512LL))(a1, v10);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1853059700LL, (uint64_t)v10);
      BOOL v9 = 1LL;
    }

    goto LABEL_31;
  }

  uint64_t v15 = *((void *)a1 + 52);
  if (*(_DWORD *)(*(void *)(v15 + 9248) + 244LL) && *((_DWORD *)a1 + 2332))
  {
    a1[9436] = 1;
    sub_4A414(v15);
    v24[0] = 0;
    if (sub_50340(*((void *)a1 + 52), v24, 1))
    {
      (*(void (**)(_BYTE *, void))(*(void *)a1 + 520LL))(a1, v24[0]);
    }

    else
    {
      __int128 v16 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "HFPStereo facetime skip stereo enable", buf, 2u);
      }
    }

    (*(void (**)(_BYTE *, uint64_t, _BYTE *))(*(void *)a1 + 240LL))(a1, 1885762592LL, a1 + 9104);
    int v11 = 1;
  }

  BOOL v9 = v11 != 0;
  if (a1[461]) {
    sub_35240((uint64_t)a1, 1u, a4);
  }
LABEL_31:
  __int16 v17 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v24[0] = HIBYTE(a3);
    v24[1] = BYTE2(a3);
    void v24[2] = BYTE1(a3);
    v24[3] = a3;
    v24[4] = 0;
    v23[0] = HIBYTE(a4);
    v23[1] = BYTE2(a4);
    void v23[2] = BYTE1(a4);
    v23[3] = a4;
    void v23[4] = 0;
    int v18 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 1152LL))(a1);
    unsigned int v19 = "No";
    int v20 = a1[460];
    __int128 v27 = v24;
    uint64_t v29 = v23;
    if (v9) {
      uint64_t v21 = "Yes";
    }
    else {
      uint64_t v21 = "No";
    }
    *(_DWORD *)std::string buf = 136316162;
    __int16 v28 = 2080;
    if (v20) {
      unsigned int v19 = "Yes";
    }
    __int16 v30 = 2080;
    int v31 = v21;
    __int16 v32 = 1024;
    int v33 = v18;
    __int16 v34 = 2080;
    uint64_t v35 = v19;
    _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "HFP change reason %s => %s Blocking for Stream Change : %s, current transport status %d Need Transport Ready %s",  buf,  0x30u);
  }

  sub_52C5C(v25);
  return v9;
}

void sub_38BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_38BC8(void *a1)
{
  uint64_t v2 = a1[52];
  if (*(_BYTE *)(*(void *)(v2 + 9248) + 230LL))
  {
    int v3 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "HFP notify kBluetoothAudioDevicePropertySpatialMode change",  (uint8_t *)v6,  2u);
      uint64_t v2 = a1[52];
    }

    sub_429B4(v2, 1936747876);
  }

  unsigned int v4 = ((*(double (**)(void *))(*a1 + 776LL))(a1) * 20.0 / 1000.0);
  *((_DWORD *)a1 + 2360) = v4;
  uint64_t v5 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Update Max Supported Frame Size %d", (uint8_t *)v6, 8u);
  }

  if (*(_DWORD *)(*(void *)(a1[52] + 9248LL) + 224LL) == 1) {
    (*(void (**)(void *, uint64_t))(*a1 + 520LL))(a1, 4LL);
  }
}

BOOL sub_38D20(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 416) + 9248LL) + 217LL) == 0;
}

uint64_t sub_38D38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 376) = a2;
  return result;
}

uint64_t sub_38D40(uint64_t result)
{
  float v1 = -52.0;
  if (!*(_BYTE *)(*(void *)(*(void *)(result + 416) + 9248LL) + 488LL)) {
    float v1 = -32.0;
  }
  *(float *)(result + 444) = v1;
  return result;
}

void sub_38D68(uint64_t a1, BOOL a2)
{
  unsigned int v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Notify Expanse in A2DP %d", (uint8_t *)v6, 8u);
  }

  uint64_t v5 = *(id **)(a1 + 208);
  if (v5) {
    sub_11FA4(v5, a2);
  }
}

void sub_38E20(uint64_t a1, BOOL a2)
{
  unsigned int v4 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Notify Call Screening State:%d", (uint8_t *)v6, 8u);
  }

  uint64_t v5 = *(id **)(a1 + 208);
  if (v5) {
    sub_120E8(v5, a2);
  }
}

__n128 sub_38ED8@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if ((sub_340E8() & 1) == 0 && *(_DWORD *)(a1 + 9340) && *(_DWORD *)(a1 + 9328) && !*(_BYTE *)(a1 + 9354))
    {
      uint64_t v5 = 9184LL;
LABEL_15:
      uint64_t v6 = a1 + v5;
      goto LABEL_9;
    }
  }

  else if (!*(_BYTE *)(a1 + 9354))
  {
    int v9 = *(_DWORD *)(a1 + 9340);
    if (v9)
    {
      if (v9 == 128)
      {
        uint64_t v5 = 9144LL;
        goto LABEL_15;
      }

      if (*(_DWORD *)(a1 + 9328))
      {
        uint64_t v5 = 9104LL;
        goto LABEL_15;
      }
    }
  }

  uint64_t v6 = a1 + 296;
LABEL_9:
  __n128 result = *(__n128 *)v6;
  __int128 v8 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 32) = *(void *)(v6 + 32);
  return result;
}

BOOL sub_38F74(uint64_t a1, _BYTE *a2, __int16 a3)
{
  if (a2)
  {
    uint64_t v6 = sub_3EE68(qword_962E8);
    uint64_t v7 = *(void *)(*(void *)(a1 + 416) + 9248LL);
    __int16 v8 = *(_WORD *)(v7 + 608);
    __int16 v9 = v8 + 1;
    *(_WORD *)(v7 + 60_Block_object_dispose(va, 8) = v8 + 1;
    *a2 = ((unsigned __int16)(v8 + 1) >> 8) & 7 | 0xB0;
    a2[1] = v8 + 1;
    a2[2] = (v6 >> 15) & 7 | 0xE8;
    a2[3] = v6 >> 7;
    a2[4] = v6 & 0x7F;
    if (*(_BYTE *)(a1 + 745))
    {
      double v10 = (os_log_s *)qword_95AD0;
      if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = 134218496;
        uint64_t v14 = v6;
        __int16 v15 = 1024;
        int v16 = v6 & 0x3FFFF;
        __int16 v17 = 1024;
        int v18 = v9 & 0x7FF;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Current Host Time: %llu; Current Host Time: (converted to 18 bits) %d; A2DP Frame number: %d",
          (uint8_t *)&v13,
          0x18u);
      }
    }

    a2[8] = HIBYTE(a3) & 7 | 0x10;
    a2[9] = a3;
  }

  else if (*(_BYTE *)(a1 + 745))
  {
    BOOL v12 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "AACELDHeader-Header buffer size is NULL", (uint8_t *)&v13, 2u);
    }
  }

  return a2 != 0LL;
}

void sub_39108(uint64_t a1, int a2)
{
  if (a2 == 1952539500)
  {
    int v3 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      sub_9E5C(2u, __p);
      if (v7 >= 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      __int16 v9 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Send Transiton Message %{public}s ", buf, 0xCu);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v5 = *(id **)(a1 + 208);
    if (v5) {
      sub_116BC(v5, 2);
    }
  }

uint64_t sub_39204(uint64_t result, int a2, int a3, unsigned int a4)
{
  if (*(_BYTE *)(result + 462))
  {
    uint64_t v7 = result;
    __int16 v8 = (os_log_s *)qword_95AD0;
    if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(v7 + 416) + 9264LL);
      v14[0] = BYTE3(v9);
      v14[1] = BYTE2(v9);
      _DWORD v14[2] = BYTE1(v9);
      v14[3] = v9;
      v14[4] = 0;
      v13[0] = HIBYTE(a3);
      v13[1] = BYTE2(a3);
      void v13[2] = BYTE1(a3);
      v13[3] = a3;
      v13[4] = 0;
      sub_9E5C(a4, __p);
      double v10 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315650;
      int v16 = v14;
      __int16 v17 = 2080;
      int v18 = v13;
      __int16 v19 = 2080;
      int v20 = v10;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Handsfree Profile HandleTransportOnRouteChange %s => %s Recommended Transtion : %s",  buf,  0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    if (a3 == 1919183219 || a2 != 1952539500) {
      (*(void (**)(uint64_t, void))(*(void *)v7 + 1376LL))(v7, 0LL);
    }
    else {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 1416LL))(v7, 1952539500LL);
    }
    *(_BYTE *)(v7 + 462) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 1400LL))(v7);
  }

  return result;
}

void sub_393F4(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 416) + 9248LL);
  int v5 = *(unsigned __int8 *)(v4 + 222);
  if (*(_BYTE *)(v4 + 222)) {
    int v6 = a2;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v8 = @"Send";
    if (v6) {
      __int16 v8 = @"Not Send";
    }
    if (a2) {
      uint64_t v9 = @"IO Stop";
    }
    else {
      uint64_t v9 = @"Route Change/Timer";
    }
    int v12 = 138412802;
    int v13 = v8;
    __int16 v14 = 2112;
    __int16 v15 = v9;
    if (v5) {
      double v10 = @"Enabled";
    }
    else {
      double v10 = @"Disabled";
    }
    __int16 v16 = 2112;
    __int16 v17 = v10;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Evaluate Transport Transition,  %@ Handsfree Stop Message to bluetoothd:, Trigger Type: %@ Route transition: %@",  (uint8_t *)&v12,  0x20u);
  }

  if ((v6 & 1) != 0)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1392LL))(a1);
  }

  else
  {
    int v11 = *(id **)(a1 + 208);
    if (v11) {
      sub_1166C(v11);
    }
  }

  *(_BYTE *)(a1 + 462) = v6;
}

uint64_t sub_3953C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Start HFP-A2DP Transtion timer", buf, 2u);
  }

  unsigned int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 16LL))(*(void *)(a1 + 416));
  *(void *)std::string buf = 0LL;
  uint64_t v10 = 0LL;
  sub_52B28((uint64_t)buf, a1 + 464);
  uint64_t v4 = *(void **)(a1 + 528);
  if (v4)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 528)))
    {
      dispatch_block_cancel(v4);
      uint64_t v4 = *(void **)(a1 + 528);
    }

    _Block_release(v4);
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_3967C;
  uint64_t v7[3] = &unk_82B08;
  _OWORD v7[4] = a1;
  unsigned int v8 = v3;
  dispatch_block_t v5 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v7);
  *(void *)(a1 + 52_Block_object_dispose(va, 8) = v5;
  sub_3EB3C(qword_962E8, 200LL, v3, v5);
  sub_52BF4((uint64_t)buf);
  return sub_52C5C(buf);
}

void sub_39668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_3967C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 40));
  if (v2)
  {
    unsigned int v3 = (_BYTE *)v2[1137];
    if (v3)
    {
      if (v3[192] && v3[462]) {
        (*(void (**)(_BYTE *, void))(*(void *)v3 + 1376LL))(v3, 0LL);
      }
    }
  }

  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_52B28((uint64_t)v5, v1 + 464);
  _Block_release(*(const void **)(v1 + 528));
  *(void *)(v1 + 52_Block_object_dispose(va, 8) = 0LL;
  sub_52BF4((uint64_t)v5);
  return sub_52C5C(v5);
}

void sub_39710( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_39724(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95AD0;
  if (os_log_type_enabled((os_log_t)qword_95AD0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Reset HFP-A2DP Transtion timer", (uint8_t *)v5, 2u);
  }

  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_52B28((uint64_t)v5, a1 + 464);
  unsigned int v3 = *(void **)(a1 + 528);
  if (v3)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 528))) {
      dispatch_block_cancel(v3);
    }
    *(void *)(a1 + 52_Block_object_dispose(va, 8) = 0LL;
  }

  sub_52BF4((uint64_t)v5);
  return sub_52C5C(v5);
}

void sub_397C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_397DC(_BYTE *a1)
{
  if (a1[462]) {
    (*(void (**)(_BYTE *, void))(*(void *)a1 + 1376LL))(a1, 0LL);
  }
  return (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 1400LL))(a1);
}

uint64_t sub_39820()
{
  return 0LL;
}

uint64_t sub_39828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9304) = a2;
  return result;
}

double sub_39830(uint64_t a1)
{
  return *(double *)(a1 + 296);
}

uint64_t sub_39838(uint64_t a1)
{
  return *(unsigned int *)(a1 + 376);
}

uint64_t sub_39840(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9304);
}

uint64_t sub_39848()
{
  return 0LL;
}

uint64_t sub_39850(uint64_t result, char a2)
{
  *(_BYTE *)(result + 409) = a2;
  return result;
}

uint64_t sub_39858(uint64_t result, char a2)
{
  *(_BYTE *)(result + 410) = a2;
  return result;
}

BOOL sub_39860(uint64_t a1)
{
  return *(_BYTE *)(a1 + 409) != 0;
}

BOOL sub_39870(uint64_t a1)
{
  return *(_BYTE *)(a1 + 410) != 0;
}

BOOL sub_39880(uint64_t a1)
{
  return *(_BYTE *)(a1 + 9353) != 0;
}

BOOL sub_39894(uint64_t a1)
{
  return *(_BYTE *)(a1 + 9352) != 0;
}

BOOL sub_398A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9352) != *(unsigned __int8 *)(a1 + 9353);
}

uint64_t sub_398C4()
{
  return 1LL;
}

uint64_t sub_398CC()
{
  return 1LL;
}

uint64_t sub_398E0(uint64_t a1)
{
  return *(void *)(a1 + 9080);
}

uint64_t sub_398E8(uint64_t a1)
{
  return *(void *)(a1 + 9088);
}

uint64_t sub_398F0(uint64_t a1)
{
  return *(void *)(a1 + 9096);
}

uint64_t sub_398F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 908_Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_39900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 90sub_52C5C(v1 - 96) = a2;
  return result;
}

uint64_t sub_39908(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9080) = a2;
  return result;
}

os_log_t sub_39910()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AD0 = (uint64_t)result;
  return result;
}

uint64_t sub_3993C(uint64_t a1)
{
  uint64_t v2 = sub_2C61C(a1);
  *(void *)uint64_t v2 = off_83258;
  *(_BYTE *)(v2 + 12) = 0;
  sub_529E8(v2 + 200, v3);
  sub_529E8(a1 + 264, v4);
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 360) = a1 + 368;
  *(void *)(a1 + 400) = 0LL;
  *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 392) = 0LL;
  *(void *)(a1 + 424) = 0LL;
  *(void *)(a1 + 432) = 0LL;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 440) = 0LL;
  *(void *)(a1 + 44_Block_object_dispose(va, 8) = a1 + 456;
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 48_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 472) = a1 + 480;
  dispatch_block_t v5 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    *(_DWORD *)std::string buf = 67109120;
    int v17 = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Creating audio plugin with audioID: %u", buf, 8u);
  }

  uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  *(void *)(a1 + 160) = dispatch_queue_create("com.apple.BTAudioHALPlugin", v7);
  unsigned int v8 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = dispatch_queue_create("com.apple.BTAudioHALPlugin.Config.Change", v8);
  uint64_t v9 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_UTILITY, -1);
  *(void *)(a1 + 184) = dispatch_queue_create("com.apple.BTAudioHALPlugin.Config.Change", v9);
  uint64_t v10 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  *(void *)(a1 + 176) = dispatch_queue_create("com.apple.BTAudioHALPlugin.Property.Change", v10);
  int v11 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_BACKGROUND, -1);
  *(void *)(a1 + 192) = dispatch_queue_create("com.apple.BTAudioHALPlugin.Telemetry", v11);
  qword_962E8 = a1;
  *(void *)(a1 + 336) = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, 0LL);
  if ((sub_52870() & 1) == 0) {
    *(void *)(a1 + 384) = objc_alloc_init(&OBJC_CLASS___BTAudioIDSService);
  }
  int v12 = operator new(1uLL);
  nullsub_81(v13);
  *(void *)(a1 + 32_Block_object_dispose(va, 8) = v12;
  __int16 v15 = "frhctslp";
  sub_410EC((uint64_t **)(a1 + 360), (unsigned int *)"frhctslp", (uint64_t)&unk_65AD4, (_DWORD **)&v15)[5] = (uint64_t *)"frhctslp";
  atomic_store(0, (unsigned int *)(a1 + 152));
  pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0LL);
  pthread_cond_init((pthread_cond_t *)(a1 + 80), 0LL);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = xmmword_65AA0;
  sub_39CC4(a1);
  mach_timebase_info((mach_timebase_info_t)(a1 + 416));
  return a1;
}

void sub_39BD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)(v13 + 424);
  sub_4085C(&a13);
  a13 = (void **)(v13 + 392);
  sub_407D4(&a13);
  sub_16000(v16, *v17);
  sub_52A64(v15, v21);
  sub_52A64(v14, v22);
  sub_2C6D4(v13);
  _Unwind_Resume(a1);
}

uint64_t **sub_39C78(uint64_t a1)
{
  uint64_t v2 = "frhctslp";
  os_log_t result = sub_410EC((uint64_t **)(a1 + 360), (unsigned int *)"frhctslp", (uint64_t)&unk_65AD4, (_DWORD **)&v2);
  result[5] = (uint64_t *)"frhctslp";
  return result;
}

_xpc_connection_s *sub_39CC4(uint64_t a1)
{
  uint64_t v2 = -[NSProcessInfo processName]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "processName");
  uint64_t v3 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v9 = v2;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Starting BTAudioPlugin for %@", buf, 0xCu);
  }

  os_log_t result = xpc_connection_create_mach_service("com.apple.BTAudioHALPlugin.xpc", *(dispatch_queue_t *)(a1 + 160), 0LL);
  *(void *)(a1 + 344) = result;
  if (result)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_39FD4;
    handler[3] = &unk_83298;
    handler[4] = a1;
    xpc_connection_set_event_handler(result, handler);
    xpc_connection_resume(*(xpc_connection_t *)(a1 + 344));
    dispatch_block_t v5 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Register audio plugin connection with bluetoothd", buf, 2u);
    }

    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_uint64(v6, "kBTAudioMsgMethod", 0xDuLL);
    xpc_dictionary_set_string(v6, "kBTAudioMsgProcess", -[NSString UTF8String](v2, "UTF8String"));
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 344), v6);
    xpc_release(v6);
    return (_xpc_connection_s *)(*(void *)(a1 + 344) != 0LL);
  }

  return result;
}

uint64_t sub_39E78(uint64_t a1)
{
  *(void *)a1 = off_83258;
  uint64_t v2 = a1 + 200;
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 200);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 336));
  CFRelease(*(CFTypeRef *)(a1 + 160));
  CFRelease(*(CFTypeRef *)(a1 + 168));
  CFRelease(*(CFTypeRef *)(a1 + 184));
  CFRelease(*(CFTypeRef *)(a1 + 176));
  CFRelease(*(CFTypeRef *)(a1 + 336));
  CFRelease(*(CFTypeRef *)(a1 + 192));

  sub_16000(a1 + 360, *(void **)(a1 + 368));
  *(void *)(a1 + 36_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 360) = a1 + 368;
  if (*(void *)(a1 + 328))
  {
    uint64_t v4 = (void *)nullsub_81(v3);
    operator delete(v4);
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 16));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  sub_52C5C(v8);
  sub_16000(a1 + 472, *(void **)(a1 + 480));
  sub_408E8(a1 + 448, *(char **)(a1 + 456));
  v8[0] = (void **)(a1 + 424);
  sub_4085C(v8);
  v8[0] = (void **)(a1 + 392);
  sub_407D4(v8);
  sub_16000(a1 + 360, *(void **)(a1 + 368));
  sub_52A64(a1 + 264, v5);
  sub_52A64(v2, v6);
  return sub_2C6D4(a1);
}

void sub_39FC0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_39E78(a1);
  operator delete(v1);
}

void sub_39FD4(uint64_t a1, void *a2)
{
}

void sub_39FDC(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    uint64_t v10 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5DB64((uint64_t)string, v10, v11);
    }
    xpc_release(*(xpc_object_t *)(a1 + 344));
    *(void *)(a1 + 344) = 0LL;
    sub_3A31C(a1);
    if (!sub_52814())
    {
      sub_39CC4(a1);
      return;
    }

    if (object == &_xpc_error_connection_interrupted && sub_52820())
    {
      int64_t v12 = 1000000000LL;
      uint64_t v13 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v24) = 1;
        uint64_t v14 = "Rate limiting BTAudio xpc connection restart to %d sec on dev boards";
LABEL_26:
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 8u);
      }
    }

    else if (object == &_xpc_error_connection_invalid)
    {
      int64_t v12 = 30000000000LL;
      uint64_t v13 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v24) = 30;
        uint64_t v14 = "No connection exist or bluetoothd is rejecting connection, reconnect in %d secs";
        goto LABEL_26;
      }
    }

    else
    {
      int64_t v12 = 0LL;
    }

    dispatch_time_t v20 = dispatch_time(0LL, v12);
    uint64_t v21 = *(dispatch_queue_s **)(a1 + 160);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_3A4D0;
    block[3] = &unk_812A8;
    void block[4] = a1;
    dispatch_after(v20, v21, block);
    return;
  }

  xpc_type_t v5 = type;
  uint64_t v6 = xpc_copy_description(object);
  if (v5 == (xpc_type_t)&_xpc_type_dictionary)
  {
    int int64 = xpc_dictionary_get_int64(object, "kBTAudioMsgId");
    xpc_object_t value = xpc_dictionary_get_value(object, "kBTAudioMsgArgs");
    int v17 = xpc_dictionary_get_string(object, "kBTAudioMsgDeviceUid");
    if (v17)
    {
      int v18 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17);
      __int16 v19 = (os_log_s *)qword_95AD8;
      if (int64 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138412290;
          __int16 v24 = v18;
          _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "Publish Message from Audio Device UID: %@\n", buf, 0xCu);
        }

        sub_3A4D8(a1, value);
      }

      else
      {
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEBUG)) {
          sub_5DBCC((uint64_t)v18, int64, v19);
        }
        sub_3A558(a1, object);
      }
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5DC4C((uint64_t)v6, v7, v8);
    }
  }

  free(v6);
}

uint64_t sub_3A314(uint64_t a1)
{
  return *(void *)(a1 + 344);
}

uint64_t sub_3A31C(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_52B28((uint64_t)v13, a1 + 200);
  sub_3DF1C(a1);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  double v3 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    CFIndex v15 = Count;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Invalidating all (%ld) audio devices", buf, 0xCu);
  }

  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), i);
      std::string __p = 0LL;
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      sub_4144C(&__p, 0LL, 0LL, 0LL);
      sub_43A44(ValueAtIndex, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v8 = __p;
        operator delete(__p);
      }
    }

    sub_3AED0(a1, &v10);
    sub_3AC94(a1, 1684370979);
    if (v10)
    {
      uint64_t v11 = v10;
      operator delete(v10);
    }
  }

  return sub_52C5C(v13);
}

void sub_3A480( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_52C5C(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_3A4D0(uint64_t a1)
{
  return sub_39CC4(*(void *)(a1 + 32));
}

uint64_t *sub_3A4D8(uint64_t a1, void *a2)
{
  uint64_t v4 = operator new(0x10uLL);
  sub_10F54((uint64_t)v4);
  int64_t int64 = xpc_dictionary_get_int64(a2, "kBTAudioMsgArgDeviceType");
  xpc_object_t value = xpc_dictionary_get_value(a2, "kBTAudioMsgArgDeviceProperties");
  return sub_3A6D4(a1, int64, (uint64_t)v4, value);
}

void sub_3A544(_Unwind_Exception *a1)
{
}

void sub_3A558(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgs");
  if (value) {
    xpc_dictionary_get_value(value, "kBTAudioMsgArgDeviceProperties");
  }
  string = xpc_dictionary_get_string(xdict, "kBTAudioMsgDeviceUid");
  if (string) {
    uint64_t v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", string);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = sub_3A61C(a1, v6);
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    uint64_t v9 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEBUG)) {
      sub_5DCB4(v6, v9);
    }
    uint64_t v10 = sub_8378(v8);
    sub_11198(v10, xdict);
  }

const void *sub_3A61C(uint64_t a1, void *a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_6:
    uint64_t v7 = 0LL;
  }

  else
  {
    CFIndex v5 = 0LL;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v5);
      if (ValueAtIndex)
      {
        uint64_t v7 = sub_4E84C((uint64_t)ValueAtIndex, a2);
        if (v7) {
          break;
        }
      }

      if (Count == ++v5) {
        goto LABEL_6;
      }
    }
  }

  sub_52C5C(v9);
  return v7;
}

void sub_3A6B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_3A6D4(uint64_t a1, uint64_t a2, uint64_t a3, xpc_object_t xdict)
{
  string = (char *)xpc_dictionary_get_string(xdict, "kBTAudioMsgPropertyDeviceAddress");
  if (!string)
  {
    uint64_t v9 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_FAULT)) {
      sub_5DDC4(v9);
    }
  }

  v31[0] = 0LL;
  v31[1] = 0LL;
  uint64_t v32 = 0LL;
  sub_A248(v31, string);
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 12));
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 128);
      uint64_t v12 = *(void *)(a1 + 136);
      *(_DWORD *)std::string buf = 134218240;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v34 = 2048;
      uint64_t v35 = v13;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Publish BTDevice waiting BTAudioPlugin ready %ld, %ld",  buf,  0x16u);
    }

    if (!*(void *)(a1 + 128)) {
      *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = xmmword_65AA0;
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
    if (pthread_cond_timedwait_relative_np( (pthread_cond_t *)(a1 + 80),  (pthread_mutex_t *)(a1 + 16),  (const timespec *)(a1 + 128)) == 60)
    {
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 12));
      if ((v14 & 1) == 0)
      {
        CFIndex v15 = (os_log_s *)qword_95AD8;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5DD3C(a1, (uint64_t *)(a1 + 128), v15);
        }
      }
    }

    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  }

  uint64_t v16 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = v31;
    if (v32 < 0) {
      int v17 = (void **)v31[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "Add BTDevice to UnifiedAudioDevice : %{public}s ", buf, 0xCu);
  }

  if (SHIBYTE(v32) < 0)
  {
    sub_A134(__p, v31[0], (unint64_t)v31[1]);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v31;
    uint64_t v30 = v32;
  }

  uint64_t v18 = sub_3BFDC(a1, (__int128 *)__p);
  __int16 v19 = (uint64_t *)v18;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if (v19) {
      goto LABEL_24;
    }
  }

  else if (v18)
  {
LABEL_24:
    sub_22CF4(v19[1156], a3, xdict);
    sub_41FDC((uint64_t)v19, a2, a3, xdict);
    goto LABEL_29;
  }

  dispatch_time_t v20 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, "Creating Unified Device", buf, 2u);
  }

  __int16 v19 = (uint64_t *)operator new(0x25D0uLL);
  sub_4277C(v19, a2, a3, xdict);
  (*(void (**)(uint64_t *))(*v19 + 64))(v19);
  uint64_t v21 = dispatch_queue_attr_make_with_qos_class(0LL, QOS_CLASS_USER_INTERACTIVE, -1);
  uint64_t v22 = (uint64_t *)dispatch_queue_create("com.apple.BTAudioHALPlugin.UnifiedDeviceSyncQueue", v21);
  unsigned int v28 = (*(uint64_t (**)(uint64_t *))(*v19 + 16))(v19);
  *(void *)std::string buf = &v28;
  sub_410EC((uint64_t **)(a1 + 472), &v28, (uint64_t)&unk_65AD4, (_DWORD **)buf)[5] = v22;
  *(void *)std::string buf = v31;
  sub_411AC((uint64_t **)(a1 + 448), (const void **)v31, (uint64_t)&unk_65AD4, (__int128 **)buf)[7] = (uint64_t)v19;
  sub_42324(v19, a2, 1, 0);
  sub_429B4((uint64_t)v19, 1635148656);
LABEL_29:
  uint64_t v23 = v19[1156];
  if (v23)
  {
    if (*(_BYTE *)(v23 + 144) || *(_BYTE *)(v23 + 274))
    {
      __int16 v24 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
      if (v24)
      {
        -[BTAudioAVNotificationMonitor registerNowPlayingListener:]( v24,  "registerNowPlayingListener:",  (*(uint64_t (**)(uint64_t *))(*v19 + 16))(v19));
        -[BTAudioAVNotificationMonitor registerPersonalizedVolumeListener:deviceUID:]( v24,  "registerPersonalizedVolumeListener:deviceUID:",  (*(uint64_t (**)(uint64_t *))(*v19 + 16))(v19),  v19[1135]);
        -[BTAudioAVNotificationMonitor processManualVolumeUpdates:](v24, "processManualVolumeUpdates:", 1LL);
      }
    }

    if (sub_3E560(a1, v19))
    {
      uint64_t v25 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = v19[1135];
        *(_DWORD *)std::string buf = 138543362;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "Publish UnifiedAudioDevice : %{public}@", buf, 0xCu);
      }

      sub_3AC94(a1, 1684370979);
    }

    sub_505E8(v19, a2);
    if (a2 == 1952539500 || *(_BYTE *)(v19[1156] + 328)) {
      sub_3E078(a1);
    }
  }

  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  return v19;
}

void sub_3AB8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

xpc_object_t sub_3ABE4(int a1, char *string, void *a3, int a4)
{
  *(_OWORD *)keys = *(_OWORD *)off_832B8;
  object[0] = xpc_string_create(string);
  object[1] = a3;
  if (a3) {
    size_t v6 = 2LL;
  }
  else {
    size_t v6 = 1LL;
  }
  xpc_object_t v7 = xpc_dictionary_create((const char *const *)keys, object, v6);
  xpc_release(object[0]);
  if (a3 && a4) {
    xpc_release(a3);
  }
  return v7;
}

void sub_3AC94(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 144))
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 176);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_3AD34;
    block[3] = &unk_81248;
    void block[4] = a1;
    int v4 = a2;
    uint64_t v5 = 1735159650LL;
    dispatch_async(v2, block);
  }

  else if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR))
  {
    sub_5DE40();
  }

uint64_t sub_3AD34(uint64_t a1)
{
  return (**(uint64_t (***)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 144LL))( *(void *)(*(void *)(a1 + 32) + 144LL),  1LL,  1LL,  a1 + 40);
}

void sub_3AD54(uint64_t a1, void *a2)
{
  uint64_t v2 = (os_log_s *)qword_95AD8;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void *))(*a2 + 16LL))(a2);
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v5;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Invalidating mAudioObjectID %d", (uint8_t *)&__p, 8u);
    }

    size_t v6 = (uint64_t *)a2[52];
    if (v6)
    {
      unsigned int v7 = sub_7250((uint64_t)a2);
      sub_43784(v6, v7);
    }

    std::string __p = 0LL;
    int v8 = (*(uint64_t (**)(void *))(*a2 + 16LL))(a2);
    uint64_t v9 = operator new(4uLL);
    std::string __p = v9;
    *uint64_t v9 = v8;
    uint64_t v12 = v9 + 1;
    uint64_t v11 = v9 + 1;
    sub_3AED0(a1, &__p);
    sub_3AC94(a1, 1684370979);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR))
  {
    sub_5DE6C();
  }

void sub_3AEA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3AED0(uint64_t a1, void *a2)
{
  v30[0] = 0LL;
  v30[1] = 0LL;
  sub_52B28((uint64_t)v30, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  int v5 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (uint64_t)(a2[1] - *a2) >> 2;
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v32 = 2048;
    CFIndex v33 = Count;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Deleting %lu invalid audio devices, Total Number of Unified device = %ld",  buf,  0x16u);
  }

  if (Count >= 1)
  {
    unsigned int v7 = (uint64_t *)(a1 + 456);
    uint64_t v26 = (uint64_t **)(a1 + 448);
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), Count - 1);
      uint64_t v9 = ValueAtIndex;
      if (ValueAtIndex)
      {
        sub_43DB8((uint64_t)ValueAtIndex, (uint64_t)a2);
        unsigned __int8 v10 = (os_log_s *)qword_95AD8;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
        {
          if (v9[1136] || v9[1137] || v9[1139]) {
            uint64_t v11 = "No";
          }
          else {
            uint64_t v11 = "Yes";
          }
          uint64_t v12 = v9[1135];
          *(_DWORD *)std::string buf = 138543618;
          *(void *)&uint8_t buf[4] = v12;
          __int16 v32 = 2082;
          CFIndex v33 = (CFIndex)v11;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Can Unified Device be released : %{public}s",  buf,  0x16u);
        }

        if (!v9[1136] && !v9[1137] && !v9[1139])
        {
          sub_4D1C((uint64_t)v9);
          sub_3E828(a1, v9);
          uint64_t v13 = *v26;
          if (*v26 != v7)
          {
            while ((void *)v13[7] != v9)
            {
              unsigned __int8 v14 = (uint64_t *)v13[1];
              if (v14)
              {
                do
                {
                  CFIndex v15 = v14;
                  unsigned __int8 v14 = (uint64_t *)*v14;
                }

                while (v14);
              }

              else
              {
                do
                {
                  CFIndex v15 = (uint64_t *)v13[2];
                  BOOL v16 = *v15 == (void)v13;
                  uint64_t v13 = v15;
                }

                while (!v16);
              }

              uint64_t v13 = v15;
              if (v15 == v7) {
                goto LABEL_26;
              }
            }

            sub_41550(v26, (uint64_t)v13);
          }

void sub_3B294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_52C5C(&a20);
  sub_52C5C(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_3B2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }

  uint64_t v5 = sub_3B390(a1, (char *)__p, a3);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_3B374( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3B390(uint64_t a1, char *a2, uint64_t a3)
{
  v24[0] = 0LL;
  v24[1] = 0LL;
  sub_52B28((uint64_t)v24, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v21 = a3;
    CFIndex v7 = 0LL;
    BOOL v8 = 1;
    while (1)
    {
      uint64_t ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v7);
      uint64_t v10 = ValueAtIndex;
      if (ValueAtIndex)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)ValueAtIndex + 824LL))(v22, ValueAtIndex);
        if (a2[23] < 0)
        {
          uint64_t v12 = *(char **)a2;
          unint64_t v11 = *((void *)a2 + 1);
        }

        else
        {
          unint64_t v11 = a2[23];
          uint64_t v12 = a2;
        }

        unsigned __int8 v13 = v23;
        unsigned __int8 v14 = (void *)v22[0];
        unint64_t v15 = (v23 & 0x80u) == 0 ? v23 : v22[1];
        BOOL v16 = (v23 & 0x80u) == 0 ? v22 : (void *)v22[0];
        size_t v17 = v15 >= v11 ? v11 : v15;
        uint64_t ValueAtIndex = memcmp(v12, v16, v17);
        BOOL v18 = v15 == v11 && (_DWORD)ValueAtIndex == 0;
        if ((v13 & 0x80) != 0) {
          operator delete(v14);
        }
        if (v18) {
          break;
        }
      }

      BOOL v8 = ++v7 < Count;
      if (Count == v7) {
        goto LABEL_26;
      }
    }

    uint64_t ValueAtIndex = (uint64_t)sub_4E8CC(v10, v21);
LABEL_26:
    if (v8) {
      uint64_t v19 = ValueAtIndex;
    }
    else {
      uint64_t v19 = 0LL;
    }
  }

  sub_52C5C(v24);
  return v19;
}

void sub_3B4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_3B4F4()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0);
}

uint64_t sub_3B50C(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_52B28((uint64_t)v13, a1 + 200);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }

  uint64_t v4 = sub_3B2F8(a1, (uint64_t)__p, 1953719151LL);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(v9, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }

  uint64_t v5 = sub_3B2F8(a1, (uint64_t)v9, 1952539500LL);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(v9[0]);
    if (v4) {
      goto LABEL_11;
    }
LABEL_14:
    BOOL v7 = 0;
    goto LABEL_16;
  }

  if (!v4) {
    goto LABEL_14;
  }
LABEL_11:
  if (sub_7FD8(v4))
  {
    uint64_t v6 = 1LL;
    goto LABEL_22;
  }

  BOOL v7 = sub_3692C(v4) != 0;
LABEL_16:
  if (v5) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v7;
  }
  if (v5 && !v7) {
    uint64_t v6 = sub_7FD8(v5);
  }
LABEL_22:
  sub_52C5C(v13);
  return v6;
}

void sub_3B648( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_3B68C(uint64_t a1, uint64_t a2)
{
  v13[0] = 0LL;
  v13[1] = 0LL;
  sub_52B28((uint64_t)v13, a1 + 200);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }

  uint64_t v4 = sub_3B2F8(a1, (uint64_t)__p, 1953719151LL);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(v9, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
  }

  uint64_t v5 = sub_3B2F8(a1, (uint64_t)v9, 1952539500LL);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(v9[0]);
    if (v4) {
      goto LABEL_11;
    }
  }

  else if (v4)
  {
LABEL_11:
    BOOL v6 = sub_7DBC(v4);
    goto LABEL_14;
  }

  BOOL v6 = 0;
LABEL_14:
  if (v5) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  if (v5 && !v6) {
    uint64_t v7 = sub_7DBC(v5);
  }
  sub_52C5C(v13);
  return v7;
}

void sub_3B7AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_3B7F0(uint64_t a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_52B28((uint64_t)v6, a1 + 200);
  uint64_t v4 = sub_3B8E8(*(void *)(a1 + 424), *(void *)(a1 + 432), a2);
  sub_3B864(a1 + 424, v4, *(__int128 **)(a1 + 432));
  return sub_52C5C(v6);
}

void sub_3B84C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3B864(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if ((__int128 *)a2 != a3)
  {
    sub_409C0((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 24LL;
      }

      while (v7 != v6);
    }

    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }

  return a2;
}

uint64_t sub_3B8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_40E00(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2) {
    return a2;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    uint64_t v8 = v5;
    while (1)
    {
      uint64_t v9 = v6;
      uint64_t v6 = v7;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0LL) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 32);
      }
      uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0LL) {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      if (v11 != v12) {
        goto LABEL_20;
      }
      if (v13 >= 0) {
        unsigned __int8 v14 = (unsigned __int8 *)a3;
      }
      else {
        unsigned __int8 v14 = *(unsigned __int8 **)a3;
      }
      if ((v10 & 0x80) != 0)
      {
      }

      else if (*(_BYTE *)(v9 + 47))
      {
        uint64_t v15 = 0LL;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_23;
          }
        }

uint64_t sub_3BA0C(void *a1, uint64_t a2, uint64_t a3, int a4, __CFString *a5)
{
  v45[0] = 0LL;
  v45[1] = 0LL;
  sub_52B28((uint64_t)v45, (uint64_t)(a1 + 25));
  uint64_t v10 = (char *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v44 = *(void *)(a2 + 16);
  }

  uint64_t v11 = (void *)sub_3BFDC((uint64_t)a1, (__int128 *)__p);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (os_log_s *)qword_95AD8;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (*(uint64_t (**)(void *))(*v11 + 1304LL))(v11);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "SynchronizeOwnershipChangeForDeviceAddr %d -> %d", buf, 0xEu);
    }

    if ((*(unsigned int (**)(void *))(*v11 + 1304LL))(v11) == (_DWORD)a3)
    {
      if ((a3 & 1) != 0)
      {
        BOOL v18 = (os_log_s *)qword_95AD8;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = "true";
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, "Ownership didn't change, it already was %s", buf, 0xCu);
        }

        return sub_52C5C(v45);
      }
    }

    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*v11 + 1312LL))(v11, a3, 1LL);
      if ((a3 & 1) != 0)
      {
        unsigned __int8 v14 = a1 + 53;
        unint64_t v15 = a1[54];
        if (v15 >= a1[55])
        {
          uint64_t v16 = sub_40A8C(v14, (__int128 *)a2);
        }

        else
        {
          sub_40A30(v14, (__int128 *)a2);
          uint64_t v16 = v15 + 24;
        }

        a1[54] = v16;
        double Current = CFAbsoluteTimeGetCurrent();
        memset(buf, 0, sizeof(buf));
        if (a5) {
          unsigned __int8 v23 = (char *)-[__CFString UTF8String](a5, "UTF8String");
        }
        else {
          unsigned __int8 v23 = "";
        }
        sub_A248(buf, v23);
        uint64_t v25 = *(void *)(qword_962E8 + 328);
        if ((char)buf[23] < 0)
        {
          sub_A134(v33, *(void **)buf, *(unint64_t *)&buf[8]);
        }

        else
        {
          *(_OWORD *)CFIndex v33 = *(_OWORD *)buf;
          uint64_t v34 = *(void *)&buf[16];
        }

        sub_1B3A8(v25, 2, 0, 3, (int)Current, (uint64_t *)v33, 3);
        if (SHIBYTE(v34) < 0) {
          operator delete(v33[0]);
        }
        if ((char)buf[23] < 0)
        {
          __int16 v24 = *(void **)buf;
          goto LABEL_51;
        }

        return sub_52C5C(v45);
      }
    }

    if (!*(_BYTE *)(v11[1156] + 348LL) && a4)
    {
      uint64_t v19 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        if (*v10 < 0)
        {
          uint64_t v20 = *(void *)a2;
          sub_A134(v37, *(void **)a2, *(void *)(a2 + 8));
        }

        else
        {
          *(_OWORD *)double v37 = *(_OWORD *)a2;
          uint64_t v38 = *(void *)(a2 + 16);
          uint64_t v20 = a2;
        }

        int v27 = sub_3B50C((uint64_t)a1, (uint64_t)v37);
        unsigned int v28 = "not";
        if (v27) {
          unsigned int v28 = "still";
        }
        *(_DWORD *)std::string buf = 136446722;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)&buf[14] = v28;
        *(_WORD *)&_BYTE buf[22] = 2082;
        uint64_t v47 = "No";
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "Sending relinquishing of ownership for %{public}s. Device is %{public}s streaming. TiPi Connection: %{public}s",  buf,  0x20u);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
      }

      unsigned int v29 = (void *)a1[48];
      if (*v10 < 0)
      {
        sub_A134(v35, *(void **)a2, *(void *)(a2 + 8));
      }

      else
      {
        *(_OWORD *)uint64_t v35 = *(_OWORD *)a2;
        uint64_t v36 = *(void *)(a2 + 16);
      }

      if (a5) {
        uint64_t v30 = a5;
      }
      else {
        uint64_t v30 = &stru_84880;
      }
      [v29 sendArbitrationMsg:@"DidTakeOwnership" forAddress:v35 withResponseIdentifier:v30];
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
    }

    uint64_t v31 = sub_3B8E8(a1[53], a1[54], a2);
    sub_3B864((uint64_t)(a1 + 53), v31, (__int128 *)a1[54]);
    return sub_52C5C(v45);
  }

  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
    sub_5DF10((char *)(a2 + 23), (void *)a2, v12);
  }
  if ((_DWORD)a3)
  {
    size_t v17 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5DE98((char *)(a2 + 23), (void *)a2, v17);
    }
    if (*v10 < 0)
    {
      sub_A134(&__dst, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      __int128 __dst = *(_OWORD *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
    }

    sub_3C090((uint64_t)a1, (uint64_t)&__dst);
    if (SHIBYTE(v42) < 0)
    {
      __int16 v24 = (void *)__dst;
LABEL_51:
      operator delete(v24);
    }
  }

  else if (a4)
  {
    uint64_t v21 = (void *)a1[48];
    if (*v10 < 0)
    {
      sub_A134(v39, *(void **)a2, *(void *)(a2 + 8));
    }

    else
    {
      *(_OWORD *)int v39 = *(_OWORD *)a2;
      uint64_t v40 = *(void *)(a2 + 16);
    }

    uint64_t v26 = a5 ? a5 : &stru_84880;
    [v21 sendArbitrationMsg:@"DidTakeOwnership" forAddress:v39 withResponseIdentifier:v26];
    if (SHIBYTE(v40) < 0)
    {
      __int16 v24 = v39[0];
      goto LABEL_51;
    }
  }

  return sub_52C5C(v45);
}

void sub_3BF14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, int a39, __int16 a40, char a41, char a42, uint64_t a43, uint64_t a44, uint64_t a45, int a46, __int16 a47, char a48, char a49)
{
}

uint64_t sub_3BFDC(uint64_t a1, __int128 *a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_52B28((uint64_t)v6, a1 + 200);
  if (!*(void *)(a1 + 464) || a1 + 456 == sub_414C4(a1 + 448, (const void **)a2))
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v7 = a2;
    uint64_t v4 = sub_411AC((uint64_t **)(a1 + 448), (const void **)a2, (uint64_t)&unk_65AD4, &v7)[7];
  }

  sub_52C5C(v6);
  return v4;
}

void sub_3C078( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3C090(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(__p, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }

  uint64_t v4 = sub_3B2F8(a1, (uint64_t)__p, 1953719151LL);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_A134(v6, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }

  uint64_t v5 = sub_3B2F8(a1, (uint64_t)v6, 1952539500LL);
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[0]);
  }
  if (v4) {
    sub_7FA0(v4);
  }
  if (v5) {
    sub_7FA0(v5);
  }
}

void sub_3C178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_3C1AC(uint64_t a1, void **a2)
{
  uint64_t v4 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2;
    *(_DWORD *)std::string buf = 136446210;
    size_t v17 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Taking ownership for %{public}s", buf, 0xCu);
  }

  if (*((char *)a2 + 23) < 0)
  {
    sub_A134(__p, *a2, (unint64_t)a2[1]);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    unint64_t v15 = a2[2];
  }

  BOOL v6 = sub_3C39C(a1, (unsigned __int8 **)__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void **)(a1 + 384);
  int v8 = *((char *)a2 + 23);
  if (v6)
  {
    if (v8 < 0)
    {
      sub_A134(&__dst, *a2, (unint64_t)a2[1]);
    }

    else
    {
      __int128 __dst = *(_OWORD *)a2;
      int v13 = a2[2];
    }

    [v7 handleDidTakeOwnership:&__dst withResponseIdentifier:0];
    if (SHIBYTE(v13) < 0)
    {
      p_dst = (void **)&__dst;
LABEL_21:
      operator delete(*p_dst);
    }
  }

  else
  {
    if (v8 < 0)
    {
      sub_A134(&v10, *a2, (unint64_t)a2[1]);
    }

    else
    {
      __int128 v10 = *(_OWORD *)a2;
      uint64_t v11 = a2[2];
    }

    [v7 sendArbitrationMsg:@"RequestOwnership" forAddress:&v10 withResponseIdentifier:0];
    if (SHIBYTE(v11) < 0)
    {
      p_dst = (void **)&v10;
      goto LABEL_21;
    }
  }

void sub_3C34C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, char a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_3C39C(uint64_t a1, unsigned __int8 **a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 200);
  uint64_t v4 = *(void *)(a1 + 424);
  uint64_t v5 = *(void *)(a1 + 432);
  char v9 = 0;
  BOOL v6 = sub_40E00(v4, v5, a2) != *(void *)(a1 + 432);
  sub_52C5C(v8);
  return v6;
}

id sub_3C400(uint64_t a1)
{
  return [*(id *)(a1 + 384) isConnected];
}

BOOL sub_3C408(uint64_t a1, unsigned int *a2)
{
  int v2 = *a2;
  if ((int)*a2 <= 1819107690)
  {
    if (v2 > 1668641651)
    {
      BOOL v3 = v2 == 1668641652;
      int v4 = 1684370979;
    }

    else
    {
      BOOL v3 = v2 == 1650682995;
      int v4 = 1668047219;
    }
  }

  else if (v2 <= 1920168546)
  {
    BOOL v3 = v2 == 1819107691;
    int v4 = 1870098020;
  }

  else
  {
    BOOL v3 = v2 == 1920168547 || v2 == 1969841252;
    int v4 = 1937007734;
  }

  if (!v3 && v2 != v4) {
    return sub_3C4DC(a1, a2);
  }
  if (a2[1] == 1735159650) {
    return a2[2] == 0;
  }
  return 0LL;
}

BOOL sub_3C4DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 368);
  if (!v2) {
    return 0LL;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 368;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 368) {
    return 0LL;
  }
  BOOL result = 0LL;
  if (v3 == 1667789414 && *(_DWORD *)(v4 + 32) < 0x63687267u)
  {
    if (a2[1] == 1735159650) {
      return a2[2] == 0;
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_3C564(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  int v3 = *a2;
  if ((int)*a2 <= 1819107690)
  {
    if (v3 > 1668641651)
    {
      BOOL v4 = v3 == 1668641652;
      int v5 = 1684370979;
    }

    else
    {
      BOOL v4 = v3 == 1650682995;
      int v5 = 1668047219;
    }
  }

  else if (v3 <= 1920168546)
  {
    BOOL v4 = v3 == 1819107691;
    int v5 = 1870098020;
  }

  else
  {
    BOOL v4 = v3 == 1920168547 || v3 == 1969841252;
    int v5 = 1937007734;
  }

  if (v4 || v3 == v5)
  {
    uint64_t result = 0LL;
    *a3 = 0;
  }

  else
  {
    sub_3C630(a1, a2, a3);
    return 2003332927LL;
  }

  return result;
}

uint64_t sub_3C630(uint64_t a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t v3 = *(void *)(a1 + 368);
  if (v3)
  {
    int v5 = (uint64_t **)(a1 + 360);
    uint64_t v6 = a1 + 368;
    unsigned int v7 = *a2;
    uint64_t v8 = v6;
    do
    {
      unsigned int v9 = *(_DWORD *)(v3 + 32);
      BOOL v10 = v9 >= v7;
      if (v9 >= v7) {
        uint64_t v11 = (uint64_t *)v3;
      }
      else {
        uint64_t v11 = (uint64_t *)(v3 + 8);
      }
      if (v10) {
        uint64_t v8 = v3;
      }
      uint64_t v3 = *v11;
    }

    while (*v11);
    if (v8 != v6 && v7 >= *(_DWORD *)(v8 + 32))
    {
      int v13 = a2;
      *a3 = *((_BYTE *)sub_410EC(v5, a2, (uint64_t)&unk_65AD4, &v13)[5] + 16);
    }
  }

  return 2003332927LL;
}

uint64_t sub_3C6CC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_52B28((uint64_t)v20, a1 + 200);
  int v10 = *a2;
  int v11 = 4;
  if ((int)*a2 <= 1819107690)
  {
    if (v10 <= 1668641651)
    {
      if (v10 != 1650682995 && v10 != 1668047219) {
        goto LABEL_28;
      }
      goto LABEL_31;
    }

    if (v10 == 1668641652)
    {
      int v11 = 12 * *(_DWORD *)(a1 + 376);
      goto LABEL_31;
    }

    int v13 = 1684370979;
  }

  else
  {
    if (v10 > 1920168546)
    {
      if (v10 != 1920168547)
      {
        if (v10 != 1937007734 && v10 != 1969841252) {
          goto LABEL_28;
        }
LABEL_31:
        uint64_t v18 = 0LL;
        *a5 = v11;
        goto LABEL_32;
      }

void sub_3C880( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3C89C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = 2003332927LL;
  uint64_t v7 = *(void *)(a1 + 368);
  if (v7)
  {
    uint64_t v9 = (uint64_t **)(a1 + 360);
    uint64_t v10 = a1 + 368;
    unsigned int v11 = *a2;
    uint64_t v12 = v10;
    do
    {
      unsigned int v13 = *(_DWORD *)(v7 + 32);
      BOOL v14 = v13 >= v11;
      if (v13 >= v11) {
        CFIndex v15 = (uint64_t *)v7;
      }
      else {
        CFIndex v15 = (uint64_t *)(v7 + 8);
      }
      if (v14) {
        uint64_t v12 = v7;
      }
      uint64_t v7 = *v15;
    }

    while (*v15);
    if (v12 != v10 && v11 >= *(_DWORD *)(v12 + 32))
    {
      size_t v17 = a2;
      int v16 = sub_410EC(v9, a2, (uint64_t)&unk_65AD4, &v17);
      uint64_t result = 0LL;
      *a5 = *((_DWORD *)v16[5] + 3);
    }
  }

  return result;
}

uint64_t sub_3C944( uint64_t a1, int *a2, uint64_t a3, int a4, const __CFString *a5, unsigned int a6, int *a7, CFDictionaryRef *a8)
{
  v31[0] = 0LL;
  v31[1] = 0LL;
  sub_52B28((uint64_t)v31, a1 + 200);
  int v17 = *a2;
  if (*a2 <= 1819107690)
  {
    if (v17 <= 1668641651)
    {
      if (v17 == 1650682995)
      {
        if (a6 <= 3)
        {
          uint64_t v18 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
            sub_5DF88();
          }
          goto LABEL_56;
        }

        uint64_t v18 = 0LL;
        int v26 = 1634689642;
      }

      else
      {
        if (v17 != 1668047219) {
          goto LABEL_41;
        }
        if (a6 <= 3)
        {
          uint64_t v18 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
            sub_5DFB4();
          }
          goto LABEL_56;
        }

        uint64_t v18 = 0LL;
        int v26 = 1634757735;
      }

      *(_DWORD *)a8 = v26;
LABEL_52:
      int v25 = 4;
      goto LABEL_55;
    }

    if (v17 == 1668641652)
    {
      unsigned int v30 = a6 / 0xC;
      sub_3CE20(a1, (uint64_t)a8, &v30);
      uint64_t v18 = 0LL;
      int v25 = 12 * v30;
LABEL_55:
      *a7 = v25;
      goto LABEL_56;
    }

    int v19 = 1684370979;
    goto LABEL_19;
  }

  if (v17 <= 1920168546)
  {
    if (v17 == 1819107691)
    {
      if (a6 <= 3)
      {
        uint64_t v18 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E00C();
        }
        goto LABEL_56;
      }

      int v27 = (const __CFDictionary *)CFRetain(@"Apple Inc.");
LABEL_54:
      uint64_t v18 = 0LL;
      *a8 = v27;
      int v25 = 8;
      goto LABEL_55;
    }

    int v19 = 1870098020;
LABEL_19:
    if (v17 == v19)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
      if (Count < 1)
      {
        unsigned int v22 = 0;
      }

      else
      {
        CFIndex v21 = 0LL;
        unsigned int v22 = 0;
        unsigned int v23 = (a6 >> 2) + 1;
        do
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v21);
          if (ValueAtIndex[1136] || ValueAtIndex[1137] || ValueAtIndex[1139])
          {
            *((_DWORD *)a8 + v22++) = (*(uint64_t (**)(void *))(*ValueAtIndex + 16LL))(ValueAtIndex);
            if (v22 > v23) {
              break;
            }
          }

          ++v21;
        }

        while (Count != v21);
      }

      uint64_t v18 = 0LL;
      int v25 = 4 * v22;
      goto LABEL_55;
    }

LABEL_41:
    uint64_t v18 = sub_3CEEC(a1, a2, v15, v16, a6, a7, a8);
    goto LABEL_56;
  }

  if (v17 == 1920168547)
  {
    if (a6 <= 3)
    {
      uint64_t v18 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E0BC();
      }
      goto LABEL_56;
    }

    int v27 = (const __CFDictionary *)CFRetain(&stru_84880);
    goto LABEL_54;
  }

  if (v17 == 1937007734)
  {
    if (a6 <= 3)
    {
      uint64_t v18 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5DFE0();
      }
      goto LABEL_56;
    }

    uint64_t v18 = 0LL;
    *(_DWORD *)a8 = 0;
    goto LABEL_52;
  }

  if (v17 != 1969841252) {
    goto LABEL_41;
  }
  if (a6 <= 3)
  {
    uint64_t v18 = 561211770LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E038();
    }
    goto LABEL_56;
  }

  if (a4 == 8)
  {
    uint64_t v18 = 561211770LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E064();
    }
    goto LABEL_56;
  }

  if (a5)
  {
    int v29 = sub_3CD84(a1, a5);
    uint64_t v18 = 0LL;
    *(_DWORD *)a8 = v29;
    goto LABEL_52;
  }

  uint64_t v18 = 561211770LL;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
    sub_5E090();
  }
LABEL_56:
  sub_52C5C(v31);
  return v18;
}

void sub_3CD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_3CD84(uint64_t a1, const __CFString *a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 336)) < 1) {
    return 0LL;
  }
  CFIndex v4 = 0LL;
  for (unsigned int i = 1; ; ++i)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v4);
    uint64_t v7 = (const __CFString *)sub_6FA0((uint64_t)ValueAtIndex);
    if (CFStringCompare(v7, a2, 0LL) == kCFCompareEqualTo) {
      break;
    }
    CFIndex v4 = i;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 336)) <= i) {
      return 0LL;
    }
  }

  return (*(uint64_t (**)(const void *))(*(void *)ValueAtIndex + 16LL))(ValueAtIndex);
}

uint64_t sub_3CE20(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (*a3)
  {
    unsigned int v3 = *(_DWORD *)(result + 376);
    if (*a3 > v3)
    {
      unsigned int v11 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E0E8(v11, v12, v13);
      }
      abort();
    }

    CFIndex v4 = *(void **)(result + 360);
    if (v4 != (void *)(result + 368))
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v6 = v4[5];
        uint64_t v7 = a2 + 12LL * v5;
        *(void *)uint64_t v7 = *(void *)v6;
        *(_DWORD *)(v7 + _Block_object_dispose(va, 8) = *(_DWORD *)(v6 + 8);
        if (++v5 == *a3) {
          break;
        }
        uint64_t v8 = (void *)v4[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            uint64_t v9 = (void *)v4[2];
            BOOL v10 = *v9 == (void)v4;
            CFIndex v4 = v9;
          }

          while (!v10);
        }

        CFIndex v4 = v9;
      }

      while (v9 != (void *)(result + 368));
    }

    *a3 = v3;
  }

  return result;
}

uint64_t sub_3CEEC( uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, _DWORD *a6, CFDictionaryRef *a7)
{
  if (*a2 != 1667789414) {
    return 0LL;
  }
  if (a5 > 7)
  {
    *a7 = 0LL;
    *a6 = 0;
    CFDictionaryRef v10 = sub_3EBF0(a1);
    if (v10)
    {
      uint64_t v7 = 0LL;
      *a7 = v10;
      *a6 = 8;
      return v7;
    }

    return 0LL;
  }

  uint64_t v7 = 561211770LL;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
    sub_5E15C();
  }
  return v7;
}

uint64_t sub_3CF88()
{
  return 2003332927LL;
}

void sub_3CF94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  v16[0] = @"Status";
  v17[0] = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a1);
  v16[1] = @"Error";
  v17[1] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  v16[2] = @"Profile";
  v17[2] = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3);
  v16[3] = @"DeviceType";
  _DWORD v17[3] = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4);
  v16[4] = @"Duration";
  v17[4] = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a5);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_3D158;
  _DWORD v11[3] = &unk_81B90;
  v11[4] = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  5LL);
  int v9 = AnalyticsSendEventLazy(@"com.apple.Bluetooth.StartIOInfo", v11);
  CFDictionaryRef v10 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 138412546;
    uint64_t v13 = @"com.apple.Bluetooth.StartIOInfo";
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "BT Start IO Stats for metric '%@' sent to CoreAnalytics with result %u",  buf,  0x12u);
  }

uint64_t sub_3D158(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

std::string *sub_3D160@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  sub_A248(a2, "");
  CFIndex v4 = "kBluetoothAudioDeviceTypeLEA";
  if (a1 == 1952539500) {
    unsigned int v5 = "kBluetoothAudioDeviceTypeA2DP";
  }
  else {
    unsigned int v5 = "unknown";
  }
  if (a1 != 1953260897) {
    CFIndex v4 = v5;
  }
  if (a1 == 1953719151) {
    uint64_t v6 = "kBluetoothAudioDeviceTypeSCO";
  }
  else {
    uint64_t v6 = v4;
  }
  return std::string::assign(a2, v6);
}

void sub_3D1F0(_Unwind_Exception *exception_object)
{
}

_UNKNOWN **AudioServerPlugIn_Create(uint64_t a1, const void *a2)
{
  CFUUIDRef v3 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0x44u,  0x3Au,  0xBAu,  0xB8u,  0xE7u,  0xB3u,  0x49u,  0x1Au,  0xB9u,  0x85u,  0xBEu,  0xB9u,  0x18u,  0x70u,  0x30u,  0xDBu);
  if (!CFEqual(a2, v3)) {
    return 0LL;
  }
  CFIndex v4 = operator new(0x1F0uLL);
  sub_3993C((uint64_t)v4);
  qword_95AE0 = (uint64_t)v4;
  return &off_8AD90;
}

void sub_3D2A8(_Unwind_Exception *a1)
{
}

const void *sub_3D2BC(uint64_t a1, int a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_8:
    uint64_t v8 = 0LL;
  }

  else
  {
    CFIndex v5 = 0LL;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v5);
      if (ValueAtIndex)
      {
        uint64_t v7 = sub_4E8CC((uint64_t)ValueAtIndex, 1952539500LL);
        uint64_t v8 = v7;
        if (v7)
        {
          if ((*(unsigned int (**)(const void *))(*(void *)v7 + 296LL))(v7)
            && (*(unsigned int (**)(const void *))(*(void *)v8 + 16LL))(v8) != a2)
          {
            break;
          }
        }
      }

      if (Count == ++v5) {
        goto LABEL_8;
      }
    }
  }

  sub_52C5C(v10);
  return v8;
}

void sub_3D388( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3D3A4(uint64_t *a1, uint64_t a2)
{
  v29[0] = 0LL;
  v29[1] = 0LL;
  sub_52B28((uint64_t)v29, (uint64_t)(a1 + 25));
  CFIndex v4 = (uint64_t *)sub_3D2BC((uint64_t)a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  uint64_t v6 = (uint64_t *)v5;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  uint64_t v8 = !v7;
  if (v7)
  {
    memset(buf, 0, sizeof(buf));
    sub_A248(buf, "WS_ERROR_AGGREGATE_DEVICES_BT");
    if ((char)buf[23] < 0)
    {
      sub_A134(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v28 = *(void *)&buf[16];
    }

    if (SHIBYTE(v28) < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E188();
    }
  }

  else
  {
    int v9 = operator new(0x20uLL);
    uint64_t v10 = (uint64_t)sub_A748(v9, (uint64_t)v4, (uint64_t)v6, 1);
    uint64_t v12 = (void *)a1[50];
    unint64_t v11 = a1[51];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = a1[49];
      uint64_t v15 = ((uint64_t)v12 - v14) >> 3;
      uint64_t v16 = v11 - v14;
      uint64_t v17 = v16 >> 2;
      else {
        unint64_t v18 = v17;
      }
      *((void *)&v31 + 1) = a1 + 51;
      if (v18) {
        int v19 = (char *)sub_40F28((uint64_t)(a1 + 51), v18);
      }
      else {
        int v19 = 0LL;
      }
      uint64_t v20 = &v19[8 * v15];
      *(void *)std::string buf = v19;
      *(void *)&uint8_t buf[8] = v20;
      *(void *)&__int128 v31 = &v19[8 * v18];
      *(void *)uint64_t v20 = v9;
      *(void *)&uint8_t buf[16] = v20 + 8;
      sub_40EB4(a1 + 49, buf);
      uint64_t v13 = (void *)a1[50];
      uint64_t v10 = sub_41068((uint64_t)buf);
    }

    else
    {
      *uint64_t v12 = v9;
      uint64_t v13 = v12 + 1;
      a1[50] = (uint64_t)v13;
    }

    a1[50] = (uint64_t)v13;
    sub_3D6D4(v10, v4[52], v6[52]);
    CFIndex v21 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = (*(uint64_t (**)(uint64_t *))(*v4 + 16))(v4);
      uint64_t v23 = sub_6FA0((uint64_t)v4);
      int v24 = (*(uint64_t (**)(uint64_t *))(*v6 + 16))(v6);
      uint64_t v25 = sub_6FA0((uint64_t)v6);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v23;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v24;
      LOWORD(v31) = 2114;
      *(void *)((char *)&v31 + 2) = v25;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter, mAggregateDevices AudioObjectIDUser1 = %u User1UID = %{public}@ AudioObjectIDUser2 = %u User2 UID = %{public}@",  buf,  0x22u);
    }
  }

  sub_52C5C(v29);
  return v8;
}

void sub_3D66C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_52C5C(&a13);
  _Unwind_Resume(a1);
}

void sub_3D6CC()
{
}

void sub_3D6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    sub_429B4(a2, 1752327777);
    sub_429B4(a2, 1936745318);
  }

  else
  {
    uint64_t v5 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Couldn't find device1", buf, 2u);
    }
  }

  if (a3)
  {
    sub_429B4(a3, 1752327777);
    sub_429B4(a3, 1936745318);
  }

  else
  {
    uint64_t v6 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Couldn't find device2", v7, 2u);
    }
  }

void sub_3D7C8(uint64_t *a1, void *a2, void *a3)
{
  if (sub_3DADC((uint64_t)a1, a2) && (uint64_t v6 = sub_3DADC((uint64_t)a1, a2), (v7 = v6[1136]) != 0))
  {
    if (*(_BYTE *)(v7 + 192)) {
      uint64_t v8 = (uint64_t *)v6[1136];
    }
    else {
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  if (sub_3DADC((uint64_t)a1, a3)
    && (int v9 = sub_3DADC((uint64_t)a1, a3), (v10 = v9[1136]) != 0)
    && (*(_BYTE *)(v10 + 192) ? (unint64_t v11 = (uint64_t *)v9[1136]) : (unint64_t v11 = 0LL), v8 && v11))
  {
    uint64_t v12 = operator new(0x20uLL);
    uint64_t v13 = (uint64_t)sub_A748(v12, (uint64_t)v8, (uint64_t)v11, 0);
    uint64_t v15 = (void *)a1[50];
    unint64_t v14 = a1[51];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = a1[49];
      uint64_t v18 = ((uint64_t)v15 - v17) >> 3;
      uint64_t v19 = v14 - v17;
      uint64_t v20 = v19 >> 2;
      else {
        unint64_t v21 = v20;
      }
      *((void *)&v32 + 1) = a1 + 51;
      if (v21) {
        int v22 = (char *)sub_40F28((uint64_t)(a1 + 51), v21);
      }
      else {
        int v22 = 0LL;
      }
      uint64_t v23 = &v22[8 * v18];
      *(void *)std::string buf = v22;
      *(void *)&uint8_t buf[8] = v23;
      *(void *)&__int128 v32 = &v22[8 * v21];
      *(void *)uint64_t v23 = v12;
      *(void *)&uint8_t buf[16] = v23 + 8;
      sub_40EB4(a1 + 49, buf);
      uint64_t v16 = (void *)a1[50];
      uint64_t v13 = sub_41068((uint64_t)buf);
    }

    else
    {
      *uint64_t v15 = v12;
      uint64_t v16 = v15 + 1;
      a1[50] = (uint64_t)v16;
    }

    a1[50] = (uint64_t)v16;
    sub_3D6D4(v13, v8[52], v11[52]);
    int v24 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = (*(uint64_t (**)(uint64_t *))(*v8 + 16))(v8);
      uint64_t v26 = sub_6FA0((uint64_t)v8);
      int v27 = (*(uint64_t (**)(uint64_t *))(*v11 + 16))(v11);
      uint64_t v28 = sub_6FA0((uint64_t)v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2114;
      *(void *)&buf[10] = v26;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&buf[20] = v27;
      LOWORD(v32) = 2114;
      *(void *)((char *)&v32 + 2) = v28;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter, mAggregateDevices AudioObjectIDUser1 = %u User1UID = %{public}@ AudioObjectIDUser2 = %u User2 UID = %{public}@",  buf,  0x22u);
    }
  }

  else
  {
    memset(buf, 0, sizeof(buf));
    sub_A248(buf, "WS_ERROR_AGGREGATE_DEVICES_CA");
    if ((char)buf[23] < 0)
    {
      sub_A134(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v30 = *(void *)&buf[16];
    }

    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E1B4();
    }
  }

void sub_3DA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void *sub_3DADC(uint64_t a1, void *a2)
{
  v8[0] = 0LL;
  v8[1] = 0LL;
  sub_52B28((uint64_t)v8, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_5:
    uint64_t ValueAtIndex = 0LL;
  }

  else
  {
    CFIndex v5 = 0LL;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v5);
      if (![a2 compare:ValueAtIndex[1135]]) {
        break;
      }
      if (Count == ++v5) {
        goto LABEL_5;
      }
    }
  }

  sub_52C5C(v8);
  return ValueAtIndex;
}

void sub_3DB78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFArrayRef sub_3DB94(uint64_t a1)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  sub_52B28((uint64_t)v5, a1 + 200);
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2 == *(void *)(a1 + 392)) {
    CFArrayRef v3 = 0LL;
  }
  else {
    CFArrayRef v3 = sub_AA84(*(uint64_t **)(v2 - 8));
  }
  sub_52C5C(v5);
  return v3;
}

void sub_3DBF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3DC08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1 != *(void *)(a1 + 392)) {
    sub_A8DC(*(float **)(v1 - 8));
  }
}

float sub_3DC20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1 != *(void *)(a1 + 392)) {
    return *(float *)(*(void *)(v1 - 8) + 24LL);
  }
  CFArrayRef v3 = (os_log_s *)qword_95AD8;
  float v2 = 0.5;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
    sub_5E1E0(v3, v4, v5);
  }
  return v2;
}

float *sub_3DC84(float *result, float a2)
{
  uint64_t v2 = *((void *)result + 50);
  if (v2 != *((void *)result + 49))
  {
    uint64_t v4 = result;
    uint64_t v5 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 134217984;
      double v7 = a2;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter : setting individual device volume from main volume %f",  (uint8_t *)&v6,  0xCu);
      uint64_t v2 = *((void *)v4 + 50);
    }

    uint64_t result = sub_AA04(*(float ***)(v2 - 8), a2);
    *(float *)(*(void *)(*((void *)v4 + 50) - 8LL) + 24LL) = a2;
  }

  return result;
}

uint64_t sub_3DD60(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2 == *(void *)(a1 + 392)) {
    return 0LL;
  }
  uint64_t v5 = *(void **)(v2 - 8);
  if (*v5)
  {
    BOOL v6 = (*(unsigned int (**)(void))(*(void *)*v5 + 16LL))(*v5) == a2;
    uint64_t v5 = *(void **)(*(void *)(a1 + 400) - 8LL);
  }

  else
  {
    BOOL v6 = 0LL;
  }

  uint64_t v7 = v5[1];
  if (v7) {
    return (*(unsigned int (**)(uint64_t))(*(void *)v7 + 16LL))(v7) == a2 || v6;
  }
  return v6;
}

void sub_3DDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2 != *(void *)(a1 + 392))
  {
    sub_A7E0(*(void **)(v2 - 8), a2);
    uint64_t v5 = *(uint64_t **)(*(void *)(a1 + 400) - 8LL);
    uint64_t v6 = *v5;
    if (*v5 && (uint64_t v7 = v5[1]) != 0)
    {
      sub_3D6D4(v4, *(void *)(v6 + 416), *(void *)(v7 + 416));
    }

    else
    {
      uint64_t v8 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = @"valid";
        if (v6) {
          uint64_t v10 = @"valid";
        }
        else {
          uint64_t v10 = @"in-valid";
        }
        if (!v5[1]) {
          int v9 = @"in-valid";
        }
        int v12 = 138412546;
        uint64_t v13 = v10;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter: user1 is %@ user2 is %@",  (uint8_t *)&v12,  0x16u);
      }
    }

    unint64_t v11 = *(void **)(*(void *)(a1 + 400) - 8LL);
    if (!*v11 || !v11[1]) {
      sub_3DF1C(a1);
    }
  }

void sub_3DF1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1 != *(void *)(a1 + 392))
  {
    CFArrayRef v3 = (void *)(a1 + 392);
    uint64_t v4 = *(uint64_t **)(v1 - 8);
    uint64_t v5 = *v4;
    if (*v4 && (uint64_t v6 = v4[1]) != 0)
    {
      sub_3D6D4(a1, *(void *)(v5 + 416), *(void *)(v6 + 416));
    }

    else
    {
      uint64_t v7 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = @"valid";
        if (v5) {
          int v9 = @"valid";
        }
        else {
          int v9 = @"in-valid";
        }
        if (!v4[1]) {
          uint64_t v8 = @"in-valid";
        }
        int v12 = 138412546;
        uint64_t v13 = v9;
        __int16 v14 = 2112;
        uint64_t v15 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter: user1 is %@ user2 is %@",  (uint8_t *)&v12,  0x16u);
      }
    }

    uint64_t v10 = *(void *)(a1 + 400);
    unint64_t v11 = *(void **)(v10 - 8);
    *(void *)(v10 - _Block_object_dispose(va, 8) = 0LL;
    if (v11) {
      operator delete(v11);
    }
    sub_40814(v3);
  }

void sub_3E048(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1 != *(void *)(a1 + 392)) {
    sub_A5F0(*(void *)(v1 - 8));
  }
}

uint64_t sub_3E060(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 400);
  if (v2 != *(void *)(result + 392)) {
    return sub_AC84(*(void **)(v2 - 8), a2);
  }
  return result;
}

void sub_3E078(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1 == *(void *)(a1 + 392))
  {
    memset(buf, 0, sizeof(buf));
    sub_A248(buf, "WS_ERROR_AGGREGATE_DEVICE_COUNT_0");
    if ((char)buf[23] < 0)
    {
      sub_A134(v15, *(void **)buf, *(unint64_t *)&buf[8]);
    }

    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)buf;
      uint64_t v16 = *(void *)&buf[16];
    }

    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    uint64_t v13 = (os_log_s *)qword_95AD8;
    if (!os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    *(_WORD *)uint64_t v17 = 0;
    __int16 v14 = "Wireless Splitter: The device count in the mAggregateDevices list is 0";
    goto LABEL_30;
  }

  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = *(void *)(*v2 + 416LL);
  if (*(void *)(v3 + 9080) && *(void *)(*(void *)(v2[1] + 416LL) + 9080LL))
  {
    uint64_t v5 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "Wireless Splitter: Send aggregation notification of both users",  buf,  2u);
      uint64_t v3 = *(void *)(**(void **)(*(void *)(a1 + 400) - 8LL) + 416LL);
    }

    sub_429B4(v3, 2004050279);
    uint64_t v6 = sub_429B4(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 400) - 8LL) + 8LL) + 416LL), 2004050279);
    uint64_t v7 = *(uint64_t **)(*(void *)(a1 + 400) - 8LL);
    uint64_t v8 = *v7;
    if (*v7 && (uint64_t v9 = v7[1]) != 0)
    {
      sub_3D6D4(v6, *(void *)(v8 + 416), *(void *)(v9 + 416));
    }

    else
    {
      uint64_t v10 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v11 = @"valid";
        if (v8) {
          int v12 = @"valid";
        }
        else {
          int v12 = @"in-valid";
        }
        if (!v7[1]) {
          unint64_t v11 = @"in-valid";
        }
        *(_DWORD *)std::string buf = 138412546;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: user1 is %@ user2 is %@", buf, 0x16u);
      }
    }

    return;
  }

  memset(buf, 0, sizeof(buf));
  sub_A248(buf, "WS_ERROR_AGGREGATE_DEVICES_NOT_READY");
  if ((char)buf[23] < 0)
  {
    sub_A134(__p, *(void **)buf, *(unint64_t *)&buf[8]);
  }

  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v19 = *(void *)&buf[16];
  }

  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v17 = 0;
    __int16 v14 = "Wireless Splitter: Not all devices are ready to aggregate";
LABEL_30:
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, v14, v17, 2u);
  }

void sub_3E344(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3E36C(uint64_t a1, unsigned int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  void v3[2] = sub_3E454;
  uint64_t v3[3] = &unk_811E8;
  unsigned int v4 = a2;
  return sub_3E3BC(a1, a2, v3);
}

uint64_t sub_3E3BC(uint64_t a1, unsigned int a2, void *a3)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_52B28((uint64_t)v12, a1 + 264);
  uint64_t v6 = *(void *)(a1 + 480);
  if (v6)
  {
    uint64_t v7 = a1 + 480;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = (uint64_t *)v6;
      }
      else {
        uint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }

    while (*v10);
    if (v7 != a1 + 480 && *(_DWORD *)(v7 + 32) <= a2) {
      dispatch_async(*(dispatch_queue_t *)(v7 + 40), a3);
    }
  }

  return sub_52C5C(v12);
}

void *sub_3E454(uint64_t a1)
{
  uint64_t result = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (result)
  {
    if (*((_BYTE *)result + 192)) {
      return (void *)sub_4F254((uint64_t)result);
    }
  }

  return result;
}

void *sub_3E48C(uint64_t a1, int a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, a1 + 200);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_8:
    uint64_t v7 = 0LL;
  }

  else
  {
    CFIndex v5 = 0LL;
    while (1)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v5);
      uint64_t v7 = ValueAtIndex;
      if ((ValueAtIndex[1136] || ValueAtIndex[1137] || ValueAtIndex[1139])
        && (*(unsigned int (**)(void *))(*ValueAtIndex + 16LL))(ValueAtIndex) == a2)
      {
        break;
      }

      if (Count == ++v5) {
        goto LABEL_8;
      }
    }
  }

  sub_52C5C(v9);
  return v7;
}

void sub_3E548( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3E560(uint64_t a1, const void *a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_52B28((uint64_t)v11, a1 + 200);
  unsigned int v4 = (os_log_s *)qword_95AD8;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E250();
    }
    goto LABEL_13;
  }

  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(const void *))(*(void *)a2 + 16LL))(a2);
    *(_DWORD *)std::string buf = 67109120;
    int v13 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Adding BTUnifiedAudioDevice %d", buf, 8u);
  }

  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_8:
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 336), a2);
    sub_52BF4((uint64_t)v11);
    uint64_t v8 = 1LL;
  }

  else
  {
    CFIndex v7 = 0LL;
    while (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v7) != a2)
    {
      if (Count == ++v7) {
        goto LABEL_8;
      }
    }

    BOOL v9 = (os_log_s *)qword_95AD8;
    uint64_t v8 = 0LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "Unified Audio device already in list", buf, 2u);
LABEL_13:
      uint64_t v8 = 0LL;
    }
  }

  sub_52C5C(v11);
  return v8;
}

void sub_3E6F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3E714(uint64_t a1, const void *a2)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, a1 + 200);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E250();
    }
    goto LABEL_9;
  }

  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
  if (Count < 1)
  {
LABEL_9:
    uint64_t v6 = 0LL;
    goto LABEL_10;
  }

  CFIndex v5 = 0LL;
  while (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v5) != a2)
  {
    if (Count == ++v5) {
      goto LABEL_9;
    }
  }

  uint64_t v8 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v9 = 0;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "Unified Audio device already published", v9, 2u);
  }

  uint64_t v6 = 1LL;
LABEL_10:
  sub_52C5C(v10);
  return v6;
}

void sub_3E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_3E828(uint64_t a1, void *a2)
{
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0LL;
      while (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), v6) != a2)
      {
        if (v5 == ++v6) {
          return;
        }
      }

      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 336), v6);
      CFIndex v7 = (os_log_s *)qword_95AD8;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = a2[1135];
        int v9 = (*(uint64_t (**)(void *))(*a2 + 16LL))(a2);
        int v16 = 138543618;
        uint64_t v17 = v8;
        __int16 v18 = 1024;
        int v19 = v9;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Deleting BTUnifiedAudioDevice [%{public}@] ID = %d From Unified device list",  (uint8_t *)&v16,  0x12u);
      }

      CFArrayGetCount(*(CFArrayRef *)(a1 + 336));
      uint64_t v10 = a2[1156];
      if (*(_BYTE *)(v10 + 144) || *(_BYTE *)(v10 + 274))
      {
        unint64_t v11 = +[BTAudioAVNotificationMonitor sharedInstance]( &OBJC_CLASS___BTAudioAVNotificationMonitor,  "sharedInstance");
        if (v11)
        {
          int v12 = v11;
          -[BTAudioAVNotificationMonitor unRegisterNowPlayingListener:]( v11,  "unRegisterNowPlayingListener:",  (*(uint64_t (**)(void *))(*a2 + 16LL))(a2));
          -[BTAudioAVNotificationMonitor unRegisterPersonalizedVolumeListener:deviceUID:]( v12,  "unRegisterPersonalizedVolumeListener:deviceUID:",  (*(uint64_t (**)(void *))(*a2 + 16LL))(a2),  a2[1135]);
          -[BTAudioAVNotificationMonitor processManualVolumeUpdates:](v12, "processManualVolumeUpdates:", 0LL);
        }
      }

      if (!CFArrayGetCount(*(CFArrayRef *)(a1 + 336)))
      {
        int v13 = *(const void **)(a1 + 352);
        if (v13)
        {
          __int16 v14 = (os_log_s *)qword_95AD8;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = CFGetRetainCount(v13);
            int v16 = 67109120;
            LODWORD(v17) = v15;
            _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Spatial Profile : HRTF no longer required in plugin: Trigger Release %d",  (uint8_t *)&v16,  8u);
            int v13 = *(const void **)(a1 + 352);
          }

          CFRelease(v13);
        }

        *(void *)(a1 + 352) = 0LL;
      }
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR))
  {
    sub_5E250();
  }

uint64_t sub_3EA54(uint64_t a1, unsigned int a2)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_52B28((uint64_t)v11, a1 + 264);
  uint64_t v4 = *(void *)(a1 + 480);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 480;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }

  while (*v8);
  if (v5 != a1 + 480 && *(_DWORD *)(v5 + 32) <= a2) {
    uint64_t v9 = *(void *)(v5 + 40);
  }
  else {
LABEL_12:
  }
    uint64_t v9 = 0LL;
  sub_52C5C(v11);
  return v9;
}

uint64_t sub_3EAE4(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, qword_962E8 + 200);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_52C5C(v4);
}

uint64_t sub_3EB3C(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  v17[0] = 0LL;
  v17[1] = 0LL;
  sub_52B28((uint64_t)v17, a1 + 264);
  uint64_t v8 = *(void *)(a1 + 480);
  if (v8)
  {
    uint64_t v9 = a1 + 480;
    uint64_t v10 = a1 + 480;
    do
    {
      unsigned int v11 = *(_DWORD *)(v8 + 32);
      BOOL v12 = v11 >= a3;
      if (v11 >= a3) {
        int v13 = (uint64_t *)v8;
      }
      else {
        int v13 = (uint64_t *)(v8 + 8);
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      uint64_t v8 = *v13;
    }

    while (*v13);
    if (v10 != v9 && *(_DWORD *)(v10 + 32) <= a3 && a4 != 0LL)
    {
      dispatch_time_t v15 = dispatch_time(0LL, 1000000 * a2);
      dispatch_after(v15, *(dispatch_queue_t *)(v10 + 40), a4);
    }
  }

  return sub_52C5C(v17);
}

CFDictionaryRef sub_3EBF0(uint64_t a1)
{
  uint64_t v1 = *(const __CFData **)(a1 + 352);
  if (v1) {
    CFDataRef Copy = CFDataCreateCopy(kCFAllocatorDefault, v1);
  }
  else {
    CFDataRef Copy = objc_alloc_init(&OBJC_CLASS___NSData);
  }
  CFDataRef v3 = Copy;
  if (!Copy) {
    return 0LL;
  }
  xpc_object_t values = Copy;
  keys = @"kBTAudioMsgPropertySoundProfile";
  CFDictionaryRef v4 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)&keys,  (const void **)&values,  1LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFRelease(v3);
  return v4;
}

void sub_3ECB4(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  if (!strcasecmp(a3, "kBTAudioMsgPropertySoundProfile"))
  {
    unsigned int v6 = (IR::IRData *)CUXPCCreateCFObjectFromXPCObject(a4);
    BOOL v7 = (os_log_s *)qword_95AD8;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "BTAudioCloudSyncMonitor: received %@", (uint8_t *)&v8, 0xCu);
    }

    sub_3ED94(a1, v6);
    if (v6) {
      CFRelease(v6);
    }
  }

void sub_3ED94(uint64_t a1, IR::IRData *this)
{
  CFDictionaryRef v4 = *(const void **)(a1 + 352);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t NoisySoundProfilePack = IR::IRData::createNoisySoundProfilePack(this, this);
  *(void *)(a1 + 352) = NoisySoundProfilePack;
  unsigned int v6 = (os_log_s *)qword_95AD8;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    uint64_t v8 = NoisySoundProfilePack;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "BTAudioCloudSyncMonitor: Custom HRTF File Descriptor receivd %@ ",  (uint8_t *)&v7,  0xCu);
  }

  sub_3AC94(a1, 1667789414);
}

uint64_t sub_3EE68(uint64_t a1)
{
  return mach_absolute_time() * *(unsigned int *)(a1 + 416) / *(unsigned int *)(a1 + 420) / 0xF4240;
}

uint64_t sub_3EEB0(_UNKNOWN **a1, uint64_t a2, uint64_t a3, void *a4)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_52B28((uint64_t)v15, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    if (a4)
    {
      *(void *)&v16.byte0 = a2;
      *(void *)&v16.byte8 = a3;
      CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, v16);
      if (v10)
      {
        CFUUIDRef v11 = CFUUIDGetConstantUUIDWithBytes( kCFAllocatorSystemDefault,  0,  0,  0,  0,  0,  0,  0,  0,  0xC0u,  0,  0,  0,  0,  0,  0,  0x46u);
        if (CFEqual(v10, v11)
          || (CFUUIDRef v12 = CFUUIDGetConstantUUIDWithBytes( 0LL,  0xEEu,  0xA5u,  0x77u,  0x3Du,  0xCCu,  0x43u,  0x49u,  0xF1u,  0x8Eu,  0,  0x8Fu,  0x96u,  0xE7u,  0xD2u,  0x3Bu,  0x17u),  CFEqual(v10, v12)))
        {
          int v13 = (unsigned int *)(qword_962E8 + 152);
          do
            unsigned int v14 = __ldaxr(v13);
          while (__stlxr(v14 + 1, v13));
          uint64_t v8 = 0LL;
          *a4 = &off_8AD90;
        }

        else
        {
          uint64_t v8 = 2147483652LL;
        }

        CFRelease(v10);
      }

      else
      {
        uint64_t v8 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E2A8();
        }
      }
    }

    else
    {
      uint64_t v8 = 1852797029LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E27C();
      }
    }
  }

  else
  {
    uint64_t v8 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E2D4();
    }
  }

  sub_52C5C(v15);
  return v8;
}

void sub_3F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_3F0B4(_UNKNOWN **a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_52B28((uint64_t)v6, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    CFDataRef v3 = (unsigned int *)(qword_962E8 + 152);
    do
      unsigned int v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    uint64_t v2 = atomic_load((unsigned int *)(qword_962E8 + 152));
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E300();
    }
    uint64_t v2 = 0LL;
  }

  sub_52C5C(v6);
  return v2;
}

uint64_t sub_3F15C(_UNKNOWN **a1)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  sub_52B28((uint64_t)v6, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    CFDataRef v3 = (unsigned int *)(qword_962E8 + 152);
    do
      unsigned int v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    uint64_t v2 = atomic_load((unsigned int *)(qword_962E8 + 152));
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E32C();
    }
    uint64_t v2 = 0LL;
  }

  sub_52C5C(v6);
  return v2;
}

uint64_t sub_3F204(_UNKNOWN **a1, uint64_t a2)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    uint64_t v5 = qword_962E8;
    *(void *)(qword_962E8 + 144) = a2;
    LOBYTE(sub_52A64(v2, v5) = atomic_load((unsigned __int8 *)(v5 + 12));
    if ((v5 & 1) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(qword_962E8 + 16));
      pthread_cond_signal((pthread_cond_t *)(qword_962E8 + 80));
      pthread_mutex_unlock((pthread_mutex_t *)(qword_962E8 + 16));
      atomic_store(1u, (unsigned __int8 *)(qword_962E8 + 12));
      unsigned int v6 = (os_log_s *)qword_95AD8;
      uint64_t v4 = 0LL;
      if (!os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "AudioServerPlugIn Initialized", v8, 2u);
    }

    uint64_t v4 = 0LL;
    goto LABEL_8;
  }

  uint64_t v4 = 560947818LL;
  if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
    sub_5E358();
  }
LABEL_8:
  sub_52C5C(v9);
  return v4;
}

void sub_3F324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_3F338(_UNKNOWN **a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    uint64_t v2 = 1970171760LL;
  }

  else
  {
    uint64_t v2 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E384();
    }
  }

  sub_52C5C(v4);
  return v2;
}

uint64_t sub_3F3C4(_UNKNOWN **a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, qword_962E8 + 200);
  if (a1 == &off_8AD90)
  {
    uint64_t v2 = 1970171760LL;
  }

  else
  {
    uint64_t v2 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E3B0();
    }
  }

  sub_52C5C(v4);
  return v2;
}

uint64_t sub_3F450(_UNKNOWN **a1, uint64_t a2, uint64_t a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, qword_962E8 + 200);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 216LL))(v6, a3);
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E3DC();
      }
    }
  }

  else
  {
    uint64_t v7 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E408();
    }
  }

  sub_52C5C(v9);
  return v7;
}

void sub_3F548( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3F55C(_UNKNOWN **a1, uint64_t a2, uint64_t a3)
{
  v9[0] = 0LL;
  v9[1] = 0LL;
  sub_52B28((uint64_t)v9, qword_962E8 + 200);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 224LL))(v6, a3);
      uint64_t v7 = 0LL;
    }

    else
    {
      uint64_t v7 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E434();
      }
    }
  }

  else
  {
    uint64_t v7 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E460();
    }
  }

  sub_52C5C(v9);
  return v7;
}

void sub_3F654( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3F668(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_52B28((uint64_t)v11, qword_962E8 + 200);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 160LL))(v8, a3, a4, v11);
    }

    else
    {
      uint64_t v9 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E48C();
      }
    }
  }

  else
  {
    uint64_t v9 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E4B8();
    }
  }

  sub_52C5C(v11);
  return v9;
}

void sub_3F76C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3F780(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = 0LL;
  v11[1] = 0LL;
  sub_52B28((uint64_t)v11, qword_962E8 + 200);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168LL))(v8, a3, a4);
    }

    else
    {
      uint64_t v9 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E4E4();
      }
    }
  }

  else
  {
    uint64_t v9 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E4B8();
    }
  }

  sub_52C5C(v11);
  return v9;
}

void sub_3F880( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3F894(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, qword_962E8 + 200);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v7)
    {
      if (a4)
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24LL))(v7, a4);
        goto LABEL_5;
      }

      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E570();
      }
    }

    else if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR))
    {
      sub_5E510();
    }
  }

  else if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR))
  {
    sub_5E59C();
  }

  uint64_t v8 = 0LL;
LABEL_5:
  sub_52C5C(v10);
  return v8;
}

void sub_3F9AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3F9C0(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_52B28((uint64_t)v12, qword_962E8 + 200);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v9)
    {
      if (a4)
      {
        if (a5)
        {
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32LL))(v9, a4, a5);
        }

        else
        {
          uint64_t v10 = 1852797029LL;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
            sub_5E654();
          }
        }
      }

      else
      {
        uint64_t v10 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E628();
        }
      }
    }

    else
    {
      uint64_t v10 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E5C8();
      }
    }
  }

  else
  {
    uint64_t v10 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E680();
    }
  }

  sub_52C5C(v12);
  return v10;
}

void sub_3FB24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3FB38(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v16[0] = 0LL;
  v16[1] = 0LL;
  sub_52B28((uint64_t)v16, qword_962E8 + 200);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v13)
    {
      if (a4)
      {
        if (a7)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 40LL))( v13,  a4,  a5,  a6,  a7);
        }

        else
        {
          uint64_t v14 = 1852797029LL;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
            sub_5E6D8();
          }
        }
      }

      else
      {
        uint64_t v14 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E6AC();
        }
      }
    }

    else
    {
      uint64_t v14 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E5C8();
      }
    }
  }

  else
  {
    uint64_t v14 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E704();
    }
  }

  sub_52C5C(v16);
  return v14;
}

void sub_3FCB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3FCC8( _UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v20[0] = 0LL;
  v20[1] = 0LL;
  sub_52B28((uint64_t)v20, qword_962E8 + 200);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v17)
    {
      if (a4)
      {
        if (a8)
        {
          if (a9)
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 48LL))( v17,  a4,  a3,  a5,  a6,  a7,  a8);
          }

          else
          {
            uint64_t v18 = 1852797029LL;
            if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
              sub_5E788();
            }
          }
        }

        else
        {
          uint64_t v18 = 1852797029LL;
          if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
            sub_5E75C();
          }
        }
      }

      else
      {
        uint64_t v18 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E730();
        }
      }
    }

    else
    {
      uint64_t v18 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E5C8();
      }
    }
  }

  else
  {
    uint64_t v18 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E7B4();
    }
  }

  sub_52C5C(v20);
  return v18;
}

void sub_3FE90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3FEA4( _UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_52B28((uint64_t)v19, qword_962E8 + 200);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v16)
    {
      if (a4)
      {
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 56LL))( v16,  a4,  a5,  a6,  a7,  a8,  a3);
      }

      else
      {
        uint64_t v17 = 1852797029LL;
        if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
          sub_5E7E0();
        }
      }
    }

    else
    {
      uint64_t v17 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E5C8();
      }
    }
  }

  else
  {
    uint64_t v17 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E80C();
    }
  }

  sub_52C5C(v19);
  return v17;
}

void sub_40008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4001C(_UNKNOWN **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0);
  if (a1 == &off_8AD90)
  {
    uint64_t v8 = v5;
    if (v5)
    {
      sub_52770(9LL);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 184LL))(v8, a3);
      if ((_DWORD)v6 && os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E864();
      }
    }

    else
    {
      uint64_t v6 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E838();
      }
    }
  }

  else
  {
    uint64_t v6 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E8C4();
    }
  }

  return v6;
}

uint64_t sub_40120(_UNKNOWN **a1, uint64_t a2, uint64_t a3)
{
  v10[0] = 0LL;
  v10[1] = 0LL;
  sub_52B28((uint64_t)v10, qword_962E8 + 200);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    uint64_t v8 = v6;
    if (v6)
    {
      sub_52770(10LL);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 192LL))(v8, a3);
    }

    else
    {
      uint64_t v7 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E8F0();
      }
    }
  }

  else
  {
    uint64_t v7 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E91C();
    }
  }

  sub_52C5C(v10);
  return v7;
}

void sub_40228( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4023C(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[0] = 0LL;
  v15[1] = 0LL;
  sub_52B28((uint64_t)v15, qword_962E8 + 200);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v12)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 176LL))( v12,  a3,  a4,  a5,  a6);
      uint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v13 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E948();
      }
    }
  }

  else
  {
    uint64_t v13 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E974();
    }
  }

  sub_52C5C(v15);
  return v13;
}

void sub_40354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_40368(_UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = 0LL;
  v14[1] = 0LL;
  sub_52B28((uint64_t)v14, qword_962E8 + 200);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v11)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 200LL))(v11, a4, a5, a6);
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E9A0();
      }
    }
  }

  else
  {
    uint64_t v12 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5E9CC();
    }
  }

  sub_52C5C(v14);
  return v12;
}

void sub_40478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4048C(_UNKNOWN **a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_52B28((uint64_t)v7, qword_962E8 + 200);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v4)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5E9F8();
      }
    }
  }

  else
  {
    uint64_t v5 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5EA24();
    }
  }

  sub_52C5C(v7);
  return v5;
}

void sub_40568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4057C( _UNKNOWN **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_52B28((uint64_t)v19, qword_962E8 + 200);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v16)
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 208LL))( v16,  a4,  a5,  a6,  a7,  a8,  a9);
    }

    else
    {
      uint64_t v17 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5EA50();
      }
    }
  }

  else
  {
    uint64_t v17 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5EA7C();
    }
  }

  sub_52C5C(v19);
  return v17;
}

void sub_406A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_406BC(_UNKNOWN **a1, uint64_t a2)
{
  v7[0] = 0LL;
  v7[1] = 0LL;
  sub_52B28((uint64_t)v7, qword_962E8 + 200);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)qword_962E0 + 24LL))(qword_962E0, a2);
  if (a1 == &off_8AD90)
  {
    if (v4)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      uint64_t v5 = 560947818LL;
      if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
        sub_5EAA8();
      }
    }
  }

  else
  {
    uint64_t v5 = 560947818LL;
    if (os_log_type_enabled((os_log_t)qword_95AD8, OS_LOG_TYPE_ERROR)) {
      sub_5EAD4();
    }
  }

  sub_52C5C(v7);
  return v5;
}

void sub_40798( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_407AC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_407D4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_40814(v2);
    operator delete(**a1);
  }

void sub_40814(void *a1)
{
  uint64_t v2 = (void *)*a1;
  CFDataRef v3 = (void *)a1[1];
  while (v3 != v2)
  {
    uint64_t v5 = (void *)*--v3;
    uint64_t v4 = v5;
    *CFDataRef v3 = 0LL;
    if (v5) {
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

void sub_4085C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_4089C((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_4089C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24LL)
  {
  }

  a1[1] = v2;
}

void sub_408E8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_408E8(a1, *(void *)a2);
    sub_408E8(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }

char *sub_40938(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_40978();
  }
  uint64_t result = (char *)sub_4098C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_40978()
{
}

void *sub_4098C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_407AC();
  }
  return operator new(4 * a2);
}

__int128 *sub_409C0(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      __int128 v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24LL;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)uint64_t v5 = 0;
      uint64_t v5 = (__int128 *)((char *)v5 + 24);
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void *sub_40A30(void *result, __int128 *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_A134((_BYTE *)result[1], *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }

  v2[1] = v3 + 24;
  return result;
}

void sub_40A84(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_40A8C(uint64_t *a1, __int128 *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_40978();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_40C20(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_A134(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }

  else
  {
    __int128 v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }

  uint64_t v16 = v11 + 24;
  sub_40BAC(a1, v15);
  uint64_t v13 = a1[1];
  sub_40D78((uint64_t)v15);
  return v13;
}

void sub_40B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_40BAC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_40C64((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_40C20(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_407AC();
  }
  return operator new(24 * a2);
}

uint64_t sub_40C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v15 = a6;
  *((void *)&v15 + 1) = a7;
  __int128 v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0LL;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      __int128 v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - _Block_object_dispose(va, 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24LL;
      *(void *)(a3 - 16) = 0LL;
      *(void *)(a3 - _Block_object_dispose(va, 8) = 0LL;
      *(void *)(a3 - 24) = 0LL;
      v7 -= 24LL;
      a3 -= 24LL;
    }

    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }

  LOBYTE(v13) = 1;
  sub_40D00((uint64_t)v12);
  return a6;
}

uint64_t sub_40D00(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_40D34(a1);
  }
  return a1;
}

void sub_40D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    v1 += 24LL;
  }

uint64_t sub_40D78(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_40DAC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }

      uint64_t v2 = v5;
    }

    while (v5 != a2);
  }

uint64_t sub_40E00(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0LL) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
        }

        else
        {
          if (!*(_BYTE *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0LL;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }

      v3 += 24LL;
    }

    while (v3 != a2);
    return a2;
  }

  return v3;
}

uint64_t sub_40EB4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_40F5C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_40F28(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_407AC();
  }
  return operator new(8 * a2);
}

uint64_t sub_40F5C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v16 = a6;
  *((void *)&v16 + 1) = a7;
  __int128 v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  uint64_t v14 = 0LL;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }

  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0LL;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8LL;
      uint64_t v8 = v9;
    }

    while (a3 != a5);
    uint64_t v11 = v16;
  }

  LOBYTE(v14) = 1;
  sub_40FF0((uint64_t)v13);
  return v11;
}

uint64_t sub_40FF0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_41024(a1);
  }
  return a1;
}

void sub_41024(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0LL;
    if (v3) {
      operator delete(v3);
    }
    ++v1;
  }

uint64_t sub_41068(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_4109C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void **)(i - 8);
    *(void *)(i - _Block_object_dispose(va, 8) = 0LL;
    if (v5) {
      operator delete(v5);
    }
  }

uint64_t **sub_410EC(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }

      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0LL;
    sub_15E14(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }

  return v9;
}

uint64_t *sub_411AC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t v9 = 0LL;
  uint64_t v6 = (uint64_t **)sub_4124C((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_412E8((uint64_t)a1, a4, v8);
    sub_15E14(a1, v9, v6, v8[0]);
    return v8[0];
  }

  return result;
}

void *sub_4124C(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unsigned int v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }

      if (!sub_41398(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }

    while (v4);
  }

  else
  {
    unsigned int v8 = (void *)(a1 + 8);
  }

_BYTE *sub_412E8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0LL;
  a3[2] = 0LL;
  a3[1] = 0LL;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_A134(result, *(void **)v9, *((void *)v9 + 1));
  }

  else
  {
    __int128 v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }

  *((void *)v7 + 7) = 0LL;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_4137C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0LL;
  sub_41400(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_41398(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    unsigned int v8 = a3;
  }
  else {
    unsigned int v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_41400(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_4144C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_40938(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_414A8(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_414C4(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_41398(v5, (const void **)(v3 + 32), a2);
    size_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      size_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }

    uint64_t v3 = *v8;
  }

  while (*v8);
  return v6;
}

uint64_t *sub_41550(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_29A44(a1, (uint64_t *)a2);
  operator delete((void *)a2);
  return v3;
}

os_log_t sub_41590()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AD8 = (uint64_t)result;
  return result;
}

__n128 sub_415BC(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = off_832F0;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 144) = 0LL;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = a2;
  __n128 result = *(__n128 *)a3;
  __int128 v4 = *(_OWORD *)(a3 + 16);
  *(void *)(a1 + sub_52C5C(v1 - 96) = *(void *)(a3 + 32);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v4;
  return result;
}

void *sub_415F0(void *a1)
{
  *a1 = off_832F0;
  uint64_t v2 = (void *)a1[18];
  a1[18] = 0LL;
  if (v2) {
    operator delete[](v2);
  }
  uint64_t v3 = (void *)a1[16];
  a1[16] = 0LL;
  if (v3) {
    operator delete[](v3);
  }
  __int128 v4 = (void *)a1[13];
  a1[13] = 0LL;
  if (v4) {
    operator delete[](v4);
  }
  return a1;
}

void sub_41654(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, void *a6)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = 0u;
  memset(&inInputDataProcUserData[2], 0, 48);
  *(void *)&outOutputData.mNumberBuffers = 0LL;
  UInt32 v10 = *(_DWORD *)(a1 + 92);
  outOutputData.mNumberBuffers = 1;
  UInt32 v11 = *(_DWORD *)(a1 + 112);
  outOutputData.mBuffers[0].mNumberChannels = v10;
  outOutputData.mBuffers[0].size_t mDataByteSize = v11;
  outOutputData.mBuffers[0].mData = *(void **)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 128);
  if (v12)
  {
    *(void *)uint64_t v12 = 0LL;
    *(_DWORD *)(v12 + _Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(v12 + 12) = a3;
  }

  UInt32 v13 = *(_DWORD *)(a1 + 156);
  if (!v13) {
    UInt32 v13 = *(_DWORD *)(a1 + 44);
  }
  *(_OWORD *)&inInputDataProcUserData[3] = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&inInputDataProcUserData[5] = *(_OWORD *)(a1 + 40);
  __int128 v14 = *(_OWORD *)(a1 + 80);
  __int128 v23 = *(_OWORD *)(a1 + 64);
  UInt32 ioOutputDataPacketSize = v13;
  inInputDataProcUserData[0] = a2;
  inInputDataProcUserData[1] = a3;
  uint64_t v15 = *(void *)(a1 + 56);
  LODWORD(inInputDataProcUserData[2]) = *(_DWORD *)(a1 + 120);
  inInputDataProcUserData[7] = v15;
  *(void *)&__int128 v21 = v12;
  __int128 v24 = v14;
  *(void *)&__int128 v25 = *(void *)(a1 + 96);
  OSStatus v16 = AudioConverterFillComplexBuffer( *(AudioConverterRef *)(a1 + 16),  (AudioConverterComplexInputDataProc)sub_1890C,  inInputDataProcUserData,  &ioOutputDataPacketSize,  &outOutputData,  *(AudioStreamPacketDescription **)(a1 + 144));
  sub_189BC(v16, (uint64_t)"Decoder AudioConverterFillComplexBuffer Failed!");
  if (ioOutputDataPacketSize
    && (size_t mDataByteSize = outOutputData.mBuffers[0].mDataByteSize) != 0
    && outOutputData.mBuffers[0].mDataByteSize <= a5)
  {
    *a6 = outOutputData.mBuffers[0].mDataByteSize;
    memcpy(a4, *(const void **)(a1 + 104), mDataByteSize);
  }

  else
  {
    *a6 = 0LL;
  }

uint64_t sub_4177C(uint64_t a1, int a2, uint64_t a3, _BYTE *a4, int a5)
{
  int v5 = 8 * a5 / a2;
  if (v5 << 16 >= 1)
  {
    unsigned int v6 = 0;
    unsigned int v7 = 0;
    int v8 = 0;
    int v9 = 8 - a2;
    else {
      uint64_t v10 = (unsigned __int16)(8 * a5 / a2);
    }
    do
    {
      int v11 = (v7 & ~(-1 << v8)) << (a2 - v8);
      *a4 = v11;
      unsigned int v7 = *(unsigned __int8 *)(a3 + v6);
      int v12 = 252 << v8;
      int v13 = v8 + v9;
      int v8 = ((_BYTE)v8 + (_BYTE)v9) & 7;
      if ((v13 & 7) != 0) {
        ++v6;
      }
      int v15 = -v13;
      BOOL v14 = v15 < 0;
      int v16 = v15 & 7;
      if (v14) {
        LOBYTE(v17) = v8;
      }
      else {
        int v17 = -v16;
      }
      *a4++ = (((v12 & v7) >> v17) | v11) << v9;
      --v10;
    }

    while (v10);
  }

  return (__int16)v5;
}

uint64_t sub_41810()
{
  return 0LL;
}

os_log_t sub_41818()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AE8 = (uint64_t)result;
  return result;
}

uint64_t sub_41844(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v5;
  uint64_t v11 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v10);
  *unsigned int v6 = off_83358;
  switch(a2)
  {
    case 9:
      int v7 = 1;
      goto LABEL_10;
    case 10:
      int v7 = 2;
      goto LABEL_10;
    case 11:
      int v7 = 3;
      goto LABEL_10;
    case 12:
      int v7 = 4;
      goto LABEL_10;
    case 13:
      *(_DWORD *)(a1 + 192) = 0;
      break;
    case 14:
      int v7 = 6;
LABEL_10:
      *(_DWORD *)(a1 + 192) = v7;
      break;
    default:
      int v8 = (os_log_s *)qword_95AF0;
      if (os_log_type_enabled((os_log_t)qword_95AF0, OS_LOG_TYPE_ERROR)) {
        sub_5C2EC(a2, v8);
      }
      break;
  }

  *(void *)(a1 + 16_Block_object_dispose(va, 8) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  return a1;
}

void *sub_41924(uint64_t a1)
{
  *(void *)a1 = off_83358;
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2) {
    decoder_destroy(v2);
  }
  free(*(void **)(a1 + 184));
  return sub_415F0((void *)a1);
}

void sub_4196C(uint64_t a1)
{
  uint64_t v1 = sub_41924(a1);
  operator delete(v1);
}

uint64_t sub_41980(uint64_t a1)
{
  uint64_t v2 = decoder_create(*(_DWORD *)(a1 + 192));
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = v2;
  *(void *)(a1 + sub_52C5C(v49 - 176) = v2;
  *(void *)(a1 + 184) = calloc((int)v2[2], 4uLL);
  return 0LL;
}

void sub_419BC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4, uint64_t a5, void *a6)
{
  decode(*(void *)(a1 + 168), a2, *(float **)(a1 + 184), a3 == 0);
  int v9 = *(_DWORD *)(*(void *)(a1 + 176) + 8LL);
  if (v9 >= 1)
  {
    uint64_t v10 = *(float **)(a1 + 184);
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 176) + 8LL);
    do
    {
      float v12 = *v10++;
      *a4++ = (int)fminf(fmaxf(v12 * 32768.0, -32768.0), 32767.0);
      --v11;
    }

    while (v11);
  }

  *a6 = 2LL * v9;
}

uint64_t sub_41A54()
{
  return 1LL;
}

os_log_t sub_41A5C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AF0 = (uint64_t)result;
  return result;
}

uint64_t sub_41A88(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v4;
  uint64_t v10 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v9);
  *(void *)uint64_t v5 = &off_833C8;
  *(_DWORD *)(v5 + 112) = 10240;
  unsigned int v6 = operator new[](0x2800uLL);
  int v7 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v6;
  if (v7) {
    operator delete[](v7);
  }
  return a1;
}

void sub_41AF8(_Unwind_Exception *a1)
{
}

void sub_41B18(void *a1)
{
  uint64_t v1 = sub_415F0(a1);
  operator delete(v1);
}

uint64_t sub_41B2C(uint64_t a1)
{
  return g726_init(a1 + 164, *(_DWORD *)(a1 + 116), 2);
}

uint64_t sub_41B40()
{
  return 0LL;
}

uint64_t sub_41B48(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (os_log_type_enabled((os_log_t)qword_95AF8, OS_LOG_TYPE_ERROR))
  {
    sub_5EB6C();
    if (!a3) {
      goto LABEL_5;
    }
  }

  else if (!a3)
  {
    goto LABEL_5;
  }

  uint64_t v11 = (_BYTE *)(a1 + 229);
  uint64_t v12 = a3;
  do
  {
    *(v11 - 1) = *a2 >> 4;
    char v13 = *a2++;
    *uint64_t v11 = v13 & 0xF;
    v11 += 2;
    --v12;
  }

  while (v12);
LABEL_5:
  if (os_log_type_enabled((os_log_t)qword_95AF8, OS_LOG_TYPE_ERROR)) {
    sub_5EB00();
  }
  uint64_t result = g726_decode_frame(a1 + 164, a1 + 228, a3, a4);
  *a6 = result;
  return result;
}

uint64_t sub_41C20(uint64_t a1, int a2)
{
  return (2 * a2);
}

uint64_t sub_41C28(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

double sub_41C30()
{
  return 2.0542726e-289;
}

void sub_41C5C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_41C6C()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_95AF8 = (uint64_t)result;
  return result;
}

void *sub_41C98(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v8 = a1 + 1159;
  uint64_t v9 = sub_43E8((uint64_t)a1, a3);
  *(void *)uint64_t v9 = off_83438;
  *(void *)(v9 + 924_Block_object_dispose(va, 8) = 0LL;
  *(void *)(v9 + 9160) = 0LL;
  *(_OWORD *)(v9 + 9080) = 0u;
  *(_OWORD *)(v9 + 90sub_52C5C(v1 - 96) = 0u;
  *(_OWORD *)(v9 + 9112) = 0u;
  *(_OWORD *)(v9 + 912_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v9 + 9144) = 0u;
  *(void *)(v9 + 9256) = 1953853033LL;
  *(void *)(v9 + 9264) = 1919183219LL;
  *(_WORD *)int v8 = 0;
  *(_OWORD *)(v9 + 928_Block_object_dispose(va, 8) = 0u;
  *(void *)(v9 + 9280) = v9 + 9288;
  *((_WORD *)v8 + 16) = 0;
  *((_BYTE *)v8 + 34) = 0;
  *((_WORD *)v8 + 84) = 0;
  *((_BYTE *)v8 + 170) = 1;
  *(_OWORD *)(v9 + 944_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(v9 + 9472) = 0;
  *(void *)(v9 + 9464) = 0LL;
  sub_529E8(v9 + 9608, v10);
  a1[1209] = 0LL;
  a1[1147] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1148] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1149] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1150] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1151] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1152] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1153] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1154] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  a1[1155] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1164), 0LL);
  pthread_cond_init((pthread_cond_t *)(a1 + 1172), 0LL);
  *((_OWORD *)a1 + 589) = xmmword_65B20;
  (*(void (**)(void *, uint64_t))(*a1 + 1016LL))(a1, 1LL);
  (*(void (**)(void *, void))(*a1 + 1024LL))(a1, 0LL);
  a1[1146] = CFArrayCreateMutable(0LL, 0LL, 0LL);
  uint64_t v11 = operator new(0x268uLL);
  sub_20AF8((uint64_t)v11, (uint64_t)a1, a3, a4);
  a1[1156] = v11;
  if (sub_41FDC((uint64_t)a1, a2, a3, a4))
  {
    a1[1138] = 0LL;
    int v12 = (*(uint64_t (**)(void *))(*a1 + 1304LL))(a1);
    sub_42324(a1, a2, v12, 0);
    sub_24AC8(a1[1156]);
    sub_42608((uint64_t)a1);
    sub_4658(a1, a4);
    sub_42684((uint64_t)a1, a4);
  }

  else if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
  {
    sub_5EBD8();
  }

  return a1;
}

void sub_41F50(_Unwind_Exception *a1)
{
}

double sub_41F94(uint64_t a1)
{
  *(void *)&double result = 3LL;
  *(_OWORD *)(a1 + 9424) = xmmword_65B20;
  return result;
}

void *sub_41FDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v8 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    LOBYTE(v14) = BYTE3(a2);
    BYTE1(v14) = BYTE2(a2);
    BYTE2(v14) = BYTE1(a2);
    *(_WORD *)((char *)&v14 + 3) = a2;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = &v14;
    *(_WORD *)&_BYTE buf[12] = 2048;
    *(void *)&buf[14] = a2;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice, CreateBTAudioDevice %{public}s via = %lld",  buf,  0x16u);
  }

  switch(a2)
  {
    case 1952539500LL:
      uint64_t v9 = operator new(0x2438uLL);
      sub_2E084(v9, a1, a3, a4);
      if ((*(unsigned int (**)(void *))(*(void *)v9 + 64LL))(v9))
      {
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EC30();
        }
        (*(void (**)(void *))(*(void *)v9 + 8LL))(v9);
        uint64_t v9 = 0LL;
      }

      *(void *)(a1 + 908_Block_object_dispose(va, 8) = v9;
      uint64_t v10 = (uint64_t *)(a1 + 9248);
      int v11 = 16;
      break;
    case 1953260897LL:
      sub_21004(*(void *)(a1 + 9248), 0x10000);
      uint64_t v9 = operator new(0x2408uLL);
      sub_CB74((uint64_t)v9, a1, a3, a4);
      if ((*(unsigned int (**)(void *))(*(void *)v9 + 64LL))(v9))
      {
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EC5C();
        }
        (*(void (**)(void *))(*(void *)v9 + 8LL))(v9);
        uint64_t v9 = 0LL;
      }

      uint64_t v10 = (uint64_t *)(a1 + 9248);
      *(void *)(a1 + 9112) = v9;
      int v11 = 0x10000;
      break;
    case 1953719151LL:
      uint64_t v9 = operator new(0x24E8uLL);
      sub_33180(v9, a1, a3, a4);
      if ((*(unsigned int (**)(void *))(*(void *)v9 + 64LL))(v9))
      {
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EC04();
        }
        (*(void (**)(void *))(*(void *)v9 + 8LL))(v9);
        uint64_t v9 = 0LL;
      }

      *(void *)(a1 + 90sub_52C5C(v1 - 96) = v9;
      uint64_t v10 = (uint64_t *)(a1 + 9248);
      int v11 = 1;
      break;
    default:
      uint64_t v9 = 0LL;
      goto LABEL_24;
  }

  sub_21014(*v10, v11);
  if (v9)
  {
    int v12 = (*(uint64_t (**)(void *))(*(void *)v9 + 16LL))(v9);
    *(_DWORD *)(sub_8378((uint64_t)v9) + _Block_object_dispose(va, 8) = v12;
    sub_9600((uint64_t)v9, a1);
  }

LABEL_24:
  *(void *)std::string buf = 0LL;
  *(void *)&uint8_t buf[8] = 0LL;
  sub_52B28((uint64_t)buf, qword_962E8 + 200);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9168), v9);
  uint64_t v14 = 0x676C6F6261766170LL;
  int v15 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v14);
  sub_52C5C(buf);
  return v9;
}

void sub_422F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL sub_42324(void *a1, uint64_t a2, int a3, int a4)
{
  int v8 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    LOBYTE(v20) = BYTE3(a2);
    BYTE1(v20) = BYTE2(a2);
    BYTE2(v20) = BYTE1(a2);
    HIBYTE(v20) = a2;
    char v21 = 0;
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = &v20;
    __int16 v23 = 1024;
    int v24 = a3;
    __int16 v25 = 1024;
    int v26 = a4;
    _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: UpdateCurrentBTAudioDevice %s, %d, %d",  buf,  0x18u);
  }

  uint64_t v9 = a1[1157];
  if (sub_340E8())
  {
    if (v9 == 1953719151)
    {
      uint64_t v10 = (_BYTE *)a1[1137];
      if (v10)
      {
        if (v10[192] && (*(unsigned int (**)(_BYTE *))(*(void *)v10 + 1488LL))(v10))
        {
          int v11 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Delayed Transport Disconnect: Transitioning out of HFP: Disconnect eSCO",  buf,  2u);
          }

          if (*(_BYTE *)(a1[1137] + 192LL)) {
            uint64_t v12 = a1[1137];
          }
          else {
            uint64_t v12 = 0LL;
          }
          (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v12 + 256LL))( v12,  0LL,  1918989668LL,  0LL);
        }
      }
    }
  }

  switch(a2)
  {
    case 1952539500LL:
      uint64_t v13 = 1136LL;
      goto LABEL_20;
    case 1953260897LL:
      uint64_t v13 = 1139LL;
      goto LABEL_20;
    case 1953719151LL:
      uint64_t v13 = 1137LL;
LABEL_20:
      uint64_t v14 = a1[v13];
      goto LABEL_22;
  }

  uint64_t v14 = 0LL;
LABEL_22:
  a1[1157] = a2;
  a1[1140] = v14;
  strcpy(buf, "pavabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
  if (v9 != a1[1157])
  {
    strcpy(buf, "pcvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
    (*(void (**)(void *, uint64_t))(*a1 + 704LL))(a1, v9);
  }

  sub_430B8(a1);
  int v15 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    if (a1[1140])
    {
      v16.i32[0] = *((_DWORD *)a1 + 2314);
      int16x8_t v17 = (int16x8_t)vmovl_u8(v16);
      *(int16x4_t *)v17.i8 = vrev64_s16(*(int16x4_t *)v17.i8);
      unsigned __int32 v20 = vmovn_s16(v17).u32[0];
      char v21 = 0;
      uint64_t v18 = &v20;
    }

    else
    {
      uint64_t v18 = (unsigned __int32 *)"None";
    }

    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v18;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: UpdateCurrentBTAudioDevice : New Audio device %s ",  buf,  0xCu);
  }

  return a1[1140] != 0LL;
}

uint64_t **sub_42608(uint64_t a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = (uint64_t **)(a1 + 9280);
  do
  {
    __int128 v4 = (_DWORD *)((char *)&xmmword_95B10 + v1);
    double result = sub_410EC(v2, (unsigned int *)((char *)&xmmword_95B10 + v1), (uint64_t)&unk_65AD4, &v4);
    result[5] = (uint64_t *)((char *)&xmmword_95B10 + v1);
    v1 += 20LL;
  }

  while (v1 != 1660);
  return result;
}

CFStringRef sub_42684(uint64_t a1, void *a2)
{
  if (sub_52814())
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kBTAudioDebugEnableAudioLogging");
    if (value)
    {
      uint64_t v5 = value;
      if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_BOOL)
      {
        uint64_t v6 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
          sub_5EC88(v6, v7, v8, v9, v10, v11, v12, v13);
        }
        if (sub_52814()) {
LABEL_13:
        }
          abort();
      }

      xpc_BOOL_get_value(v5);
    }
  }

  string = xpc_dictionary_get_string(a2, "kBTAudioMsgPropertyDeviceUID");
  if (!string)
  {
    int v15 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_58940(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }

  CFStringRef result = CFStringCreateWithCString(kCFAllocatorDefault, string, 0x8000100u);
  *(void *)(a1 + 200) = result;
  return result;
}

uint64_t sub_42780(uint64_t a1)
{
  uint64_t v2 = off_83438;
  *(void *)a1 = off_83438;
  uint64_t v3 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "BTUnifiedAudioDevice Destructor completed", buf, 2u);
    uint64_t v2 = *(uint64_t (***)())a1;
  }

  ((void (*)(uint64_t))v2[9])(a1);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9176));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9184));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9192));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9200));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9208));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9216));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9224));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9232));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9240));
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 9168));
  CFRelease(*(CFTypeRef *)(a1 + 9176));
  CFRelease(*(CFTypeRef *)(a1 + 9184));
  CFRelease(*(CFTypeRef *)(a1 + 9192));
  CFRelease(*(CFTypeRef *)(a1 + 9200));
  CFRelease(*(CFTypeRef *)(a1 + 9208));
  CFRelease(*(CFTypeRef *)(a1 + 9216));
  CFRelease(*(CFTypeRef *)(a1 + 9224));
  CFRelease(*(CFTypeRef *)(a1 + 9232));
  CFRelease(*(CFTypeRef *)(a1 + 9240));
  CFRelease(*(CFTypeRef *)(a1 + 9168));
  uint64_t v4 = *(void *)(a1 + 9248);
  if (v4)
  {
    uint64_t v5 = (void *)sub_20CE0(v4);
    operator delete(v5);
    *(void *)(a1 + 924_Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v6 = *(void **)(a1 + 9456);
  if (v6)
  {

    *(void *)(a1 + 9456) = 0LL;
  }

  *(void *)std::string buf = 0LL;
  uint64_t v14 = 0LL;
  sub_52B28((uint64_t)buf, a1 + 9608);
  uint64_t v7 = *(void **)(a1 + 9672);
  if (v7)
  {
    if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9672)))
    {
      uint64_t v8 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "Delayed Control Centre Update: Cancelling current Dispatch",  v12,  2u);
        uint64_t v7 = *(void **)(a1 + 9672);
      }

      dispatch_block_cancel(v7);
    }

    *(void *)(a1 + 9672) = 0LL;
  }

  sub_52BF4((uint64_t)buf);
  sub_16000(a1 + 9280, *(void **)(a1 + 9288));
  *(void *)(a1 + 9280) = a1 + 9288;
  *(void *)(a1 + 92sub_52C5C(v1 - 96) = 0LL;
  *(void *)(a1 + 928_Block_object_dispose(va, 8) = 0LL;
  sub_52C5C(buf);
  sub_52A64(a1 + 9608, v9);
  sub_16000(a1 + 9280, *(void **)(a1 + 9288));
  return sub_459C(a1, v10);
}

void sub_429A0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_42780(a1);
  operator delete(v1);
}

uint64_t sub_429B4(uint64_t a1, int a2)
{
  int v3 = a2;
  uint64_t v4 = 1735159650LL;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 248LL))(a1, &v3);
}

uint64_t sub_429EC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    __n128 v5 = ((__n128 (*)(_DWORD *))*(void *)(*(void *)a1 + 984LL))(a1);
    v5.n128_u32[0] = a1[2314];
    int16x8_t v6 = (int16x8_t)vmovl_u8((uint8x8_t)v5.n128_u64[0]);
    *(int16x4_t *)v6.i8 = vrev64_s16(*(int16x4_t *)v6.i8);
    unsigned __int32 v10 = vmovn_s16(v6).u32[0];
    char v11 = 0;
    v9[0] = BYTE3(a2);
    v9[1] = BYTE2(a2);
    _OWORD v9[2] = BYTE1(a2);
    v9[3] = a2;
    v9[4] = 0;
    *(_DWORD *)std::string buf = 67109634;
    int v13 = v7;
    __int16 v14 = 2080;
    int v15 = &v10;
    __int16 v16 = 2080;
    uint64_t v17 = v9;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Request profile Change, IO status %d, profile change %s => %s",  buf,  0x1Cu);
  }

  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 240LL))(a1, 1650750576LL, a2);
}

void sub_42B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1304LL))(a1);
  sub_42324((void *)a1, a3, v6, 0);
  int v7 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    __n128 v8 = ((__n128 (*)(uint64_t))*(void *)(*(void *)a1 + 984LL))(a1);
    v13[0] = BYTE3(a2);
    v13[1] = BYTE2(a2);
    void v13[2] = BYTE1(a2);
    __int16 v14 = a2;
    v8.n128_u32[0] = *(_DWORD *)(a1 + 9256);
    int16x8_t v9 = (int16x8_t)vmovl_u8((uint8x8_t)v8.n128_u64[0]);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    unsigned __int32 v11 = vmovn_s16(v9).u32[0];
    char v12 = 0;
    *(_DWORD *)std::string buf = 67109634;
    int v16 = v10;
    __int16 v17 = 2080;
    uint64_t v18 = v13;
    __int16 v19 = 2080;
    uint64_t v20 = &v11;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "Perform ProfileUpdate, IO status %d, profile change %s => %s",  buf,  0x1Cu);
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1360LL))( a1,  a2,  a3,  *(unsigned int *)(a1 + 9264));
  if (a3 == 1953260897) {
    sub_42C90(a1);
  }
}

void sub_42C90(uint64_t a1)
{
  if ((sub_340E8() & 1) != 0) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 9120);
  if (!v2) {
    return;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1040LL))(v2);
  uint64_t v4 = *(void *)(a1 + 9128);
  if (v3)
  {
    if (v4)
    {
      __n128 v5 = *(const __CFArray **)(a1 + 9176);
      v40.length = CFArrayGetCount(v5);
      v40.location = 0LL;
      int v6 = *(__CFArray **)(a1 + 9176);
      int v7 = *(const void **)(a1 + 9128);
    }

    else
    {
      int v16 = operator new(0x18uLL);
      sub_F4DC((uint64_t)v16, a1, 1);
      *(void *)(a1 + 912_Block_object_dispose(va, 8) = v16;
      int v6 = *(__CFArray **)(a1 + 9176);
      int v7 = v16;
    }

    CFArrayAppendValue(v6, v7);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9192), *(const void **)(a1 + 9128));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9224), *(const void **)(a1 + 9128));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9128));
  }

  else if (v4)
  {
    __n128 v8 = *(const __CFArray **)(a1 + 9176);
    v41.length = CFArrayGetCount(v8);
    v41.location = 0LL;
    FirstIndexOfint Value = CFArrayGetFirstIndexOfValue(v8, v41, *(const void **)(a1 + 9128));
    CFArrayRemoveValueAtIndex(v8, FirstIndexOfValue);
    int v10 = *(const __CFArray **)(a1 + 9192);
    v42.length = CFArrayGetCount(v10);
    v42.location = 0LL;
    CFIndex v11 = CFArrayGetFirstIndexOfValue(v10, v42, *(const void **)(a1 + 9128));
    CFArrayRemoveValueAtIndex(v10, v11);
    char v12 = *(const __CFArray **)(a1 + 9224);
    v43.length = CFArrayGetCount(v12);
    v43.location = 0LL;
    CFIndex v13 = CFArrayGetFirstIndexOfValue(v12, v43, *(const void **)(a1 + 9128));
    CFArrayRemoveValueAtIndex(v12, v13);
    __int16 v14 = *(const __CFArray **)(a1 + 9240);
    v44.length = CFArrayGetCount(v14);
    v44.location = 0LL;
    CFIndex v15 = CFArrayGetFirstIndexOfValue(v14, v44, *(const void **)(a1 + 9128));
    CFArrayRemoveValueAtIndex(v14, v15);
  }

void sub_43034(_Unwind_Exception *a1)
{
}

_BYTE *sub_4304C(uint64_t a1)
{
  CFStringRef result = *(_BYTE **)(a1 + 9096);
  if (result && result[192])
  {
    (*(void (**)(_BYTE *))(*(void *)result + 1488LL))(result);
    if (*(_BYTE *)(*(void *)(a1 + 9096) + 192LL)) {
      uint64_t v3 = *(void *)(a1 + 9096);
    }
    else {
      uint64_t v3 = 0LL;
    }
    return (_BYTE *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v3 + 256LL))( v3,  0LL,  1918989668LL,  1LL);
  }

  return result;
}

uint64_t sub_430B8(void *a1)
{
  uint64_t v2 = (_BYTE *)a1[1137];
  if (v2 && v2[192])
  {
    BOOL v3 = a1[1157] == 1952539500LL && *(_BYTE *)(a1[1156] + 272LL) != 0;
    (*(void (**)(_BYTE *, BOOL))(*(void *)v2 + 568LL))(v2, v3);
  }

  uint64_t v5 = 0x676C6F6265636E72LL;
  int v6 = 0;
  (*(void (**)(void *, uint64_t *))(*a1 + 248LL))(a1, &v5);
  uint64_t v5 = 0x676C6F6263737462LL;
  int v6 = 0;
  (*(void (**)(void *, uint64_t *))(*a1 + 248LL))(a1, &v5);
  uint64_t v5 = 0x676C6F62636C6F6BLL;
  int v6 = 0;
  return (*(uint64_t (**)(void *, uint64_t *))(*a1 + 248LL))(a1, &v5);
}

BOOL sub_43190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = BYTE3(a2);
    v6[1] = BYTE2(a2);
    void v6[2] = BYTE1(a2);
    v6[3] = a2;
    _OWORD v6[4] = 0;
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "BTUnifiedAudioDevice: Remove BTAudioDevice %s", buf, 0xCu);
  }

  switch(a2)
  {
    case 1952539500LL:
      *(void *)(a1 + 908_Block_object_dispose(va, 8) = 0LL;
      break;
    case 1953260897LL:
      *(void *)(a1 + 9112) = 0LL;
      break;
    case 1953719151LL:
      *(void *)(a1 + 90sub_52C5C(v1 - 96) = 0LL;
      sub_43360(a1, 1953719151, 0);
      break;
  }

  if (*(void *)(a1 + 9256) == a2
    && (*(void *)(a1 + 9120) = 0LL,
        *(void *)(a1 + 9256) = 1953853033LL,
        *(void *)(a1 + 9264) = 1919183219LL,
        sub_340E8()))
  {
    if (*(void *)(a1 + 9112)) {
      sub_429EC((_DWORD *)a1, 1953260897LL);
    }
    if (*(void *)(a1 + 9096)) {
      sub_429EC((_DWORD *)a1, 1953719151LL);
    }
    if (*(void *)(a1 + 9088)) {
      sub_429EC((_DWORD *)a1, 1952539500LL);
    }
  }

  else
  {
    strcpy((char *)buf, "pavabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 248LL))(a1, buf);
  }

  return *(void *)(a1 + 9120) != 0LL;
}

uint64_t sub_43360(uint64_t a1, int a2, unsigned int a3)
{
  int v6 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 9080);
    v10[0] = HIBYTE(a2);
    v10[1] = BYTE2(a2);
    _OWORD v10[2] = BYTE1(a2);
    v10[3] = a2;
    v10[4] = 0;
    __n128 v8 = "Disconnection";
    if (a3) {
      __n128 v8 = "Creation";
    }
    *(_DWORD *)std::string buf = 138543874;
    uint64_t v12 = v7;
    __int16 v13 = 2082;
    __int16 v14 = v10;
    __int16 v15 = 2082;
    int v16 = v8;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@ ]  %{public}s, Profile Transport operation completed operaton xpc_type_t type = %{public}s",  buf,  0x20u);
  }

  if (sub_4DA3C(a1)) {
    sub_4DC90(a1);
  }
  sub_527A8(34LL, a3, 0LL, 0LL, 0LL);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 9312));
  pthread_cond_signal((pthread_cond_t *)(a1 + 9376));
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 9312));
}

uint64_t sub_434B0(void *a1, double *a2, __n128 a3)
{
  uint64_t v5 = a1[1137];
  if (v5
    && ((*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)v5 + 792LL))(v19, v5, 0LL),
        a3.n128_f64[0] = v19[0],
        double v6 = *a2,
        v19[0] == *a2))
  {
    uint64_t v7 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(double *__return_ptr, void, void))(*(void *)a1[1137] + 792LL))(v19, a1[1137], 0LL);
      *(_DWORD *)std::string buf = 134218240;
      double v21 = v6;
      __int16 v22 = 2048;
      double v23 = v19[0];
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "UpdateCurrentBTAudioDeviceFromSampleRate HFP  %f = %f",  buf,  0x16u);
    }

    int v8 = (*(uint64_t (**)(void *))(*a1 + 1304LL))(a1);
    sub_42324(a1, 1953719151LL, v8, 0);
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  uint64_t v10 = a1[1136];
  if (v10)
  {
    (*(void (**)(double *__return_ptr, uint64_t, void))(*(void *)v10 + 792LL))(v19, v10, 0LL);
    a3.n128_f64[0] = v19[0];
    double v11 = *a2;
    if (v19[0] == *a2)
    {
      uint64_t v12 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(double *__return_ptr, void, void))(*(void *)a1[1136] + 792LL))(v19, a1[1136], 0LL);
        *(_DWORD *)std::string buf = 134218240;
        double v21 = v11;
        __int16 v22 = 2048;
        double v23 = v19[0];
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "UpdateCurrentBTAudioDeviceFromSampleRate A2DP  %f = %f",  buf,  0x16u);
      }

      int v13 = (*(uint64_t (**)(void *))(*a1 + 1304LL))(a1);
      sub_42324(a1, 1952539500LL, v13, 0);
      uint64_t v9 = 1LL;
    }
  }

  uint64_t v14 = a1[1139];
  if (v14)
  {
    (*(void (**)(double *__return_ptr, uint64_t, void, __n128))(*(void *)v14 + 792LL))(v19, v14, 0LL, a3);
    double v15 = *a2;
    if (v19[0] == *a2)
    {
      int v16 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(double *__return_ptr, void, void))(*(void *)a1[1139] + 792LL))(v19, a1[1139], 0LL);
        *(_DWORD *)std::string buf = 134218240;
        double v21 = v15;
        __int16 v22 = 2048;
        double v23 = v19[0];
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "UpdateCurrentBTAudioDeviceFromSampleRate LEA  %f = %f",  buf,  0x16u);
      }

      int v17 = (*(uint64_t (**)(void *))(*a1 + 1304LL))(a1);
      sub_42324(a1, 1953260897LL, v17, 0);
      return 1LL;
    }
  }

  return v9;
}

void sub_43784(uint64_t *a1, uint64_t a2)
{
  switch(a2)
  {
    case 1952539500LL:
      uint64_t v4 = a1 + 1136;
      int v5 = 16;
      break;
    case 1953260897LL:
      uint64_t v4 = a1 + 1139;
      int v5 = 0x10000;
      break;
    case 1953719151LL:
      uint64_t v4 = a1 + 1137;
      int v5 = 1;
      break;
    default:
      goto LABEL_8;
  }

  sub_4D1C(*v4);
  uint64_t *v4 = 0LL;
  sub_21024(a1[1156], v5);
  sub_43190((uint64_t)a1, a2);
LABEL_8:
  double v6 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = BYTE3(a2);
    v9[1] = BYTE2(a2);
    _OWORD v9[2] = BYTE1(a2);
    v9[3] = a2;
    v9[4] = 0;
    BOOL v7 = a1[1137] || a1[1136] || a1[1139] != 0;
    int v8 = *(_DWORD *)(a1[1156] + 196);
    *(_DWORD *)std::string buf = 136315650;
    double v11 = v9;
    __int16 v12 = 1024;
    BOOL v13 = v7;
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice, InvalidateBTAudioDevice %s Empty=%d Connected Bitmap = %x",  buf,  0x18u);
  }

uint64_t sub_43910(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v3 = Count;
  LODWORD(sub_459C(v1, v4) = 0;
  for (CFIndex i = 0LL; i != v3; ++i)
    uint64_t v4 = v4 + *((unsigned __int8 *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), i) + 192);
  return v4;
}

__CFArray *sub_4397C(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 2LL, &kCFTypeArrayCallBacks);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0LL; i != v4; ++i)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), i);
      if (ValueAtIndex[192])
      {
        int valuePtr = 0;
        int valuePtr = sub_7250((uint64_t)ValueAtIndex);
        CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }
    }
  }

  return Mutable;
}

void sub_43A44(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1137];
  if (v4)
  {
    sub_4D1C(v4);
    int v5 = (*(uint64_t (**)(void))(*(void *)a1[1137] + 16LL))(a1[1137]);
    int v6 = v5;
    unint64_t v7 = *(void *)(a2 + 16);
    int v8 = *(_DWORD **)(a2 + 8);
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = *(_DWORD **)a2;
      uint64_t v11 = ((uint64_t)v8 - *(void *)a2) >> 2;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = v7 - (void)v10;
      if (v13 >> 1 > v12) {
        unint64_t v12 = v13 >> 1;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        int v15 = (char *)sub_4098C(a2 + 16, v14);
        uint64_t v10 = *(_DWORD **)a2;
        int v8 = *(_DWORD **)(a2 + 8);
      }

      else
      {
        int v15 = 0LL;
      }

      int v16 = &v15[4 * v11];
      int v17 = &v15[4 * v14];
      *(_DWORD *)int v16 = v6;
      uint64_t v9 = v16 + 4;
      while (v8 != v10)
      {
        int v18 = *--v8;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }

      *(void *)a2 = v16;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v9;
      *(void *)(a2 + 16) = v17;
      if (v10) {
        operator delete(v10);
      }
    }

    else
    {
      *int v8 = v5;
      uint64_t v9 = v8 + 1;
    }

    *(void *)(a2 + _Block_object_dispose(va, 8) = v9;
    a1[1137] = 0LL;
    sub_43190((uint64_t)a1, 1953719151LL);
  }

  uint64_t v19 = a1[1136];
  if (v19)
  {
    sub_4D1C(v19);
    int v20 = (*(uint64_t (**)(void))(*(void *)a1[1136] + 16LL))(a1[1136]);
    int v21 = v20;
    unint64_t v22 = *(void *)(a2 + 16);
    double v23 = *(_DWORD **)(a2 + 8);
    if ((unint64_t)v23 >= v22)
    {
      __int16 v25 = *(_DWORD **)a2;
      uint64_t v26 = ((uint64_t)v23 - *(void *)a2) >> 2;
      unint64_t v27 = v26 + 1;
      uint64_t v28 = v22 - (void)v25;
      if (v28 >> 1 > v27) {
        unint64_t v27 = v28 >> 1;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        uint64_t v30 = (char *)sub_4098C(a2 + 16, v29);
        __int16 v25 = *(_DWORD **)a2;
        double v23 = *(_DWORD **)(a2 + 8);
      }

      else
      {
        uint64_t v30 = 0LL;
      }

      CFIndex v31 = &v30[4 * v26];
      __int128 v32 = &v30[4 * v29];
      *(_DWORD *)CFIndex v31 = v21;
      CFIndex v24 = v31 + 4;
      while (v23 != v25)
      {
        int v33 = *--v23;
        *((_DWORD *)v31 - 1) = v33;
        v31 -= 4;
      }

      *(void *)a2 = v31;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v24;
      *(void *)(a2 + 16) = v32;
      if (v25) {
        operator delete(v25);
      }
    }

    else
    {
      *double v23 = v20;
      CFIndex v24 = v23 + 1;
    }

    *(void *)(a2 + _Block_object_dispose(va, 8) = v24;
    a1[1136] = 0LL;
    sub_43190((uint64_t)a1, 1952539500LL);
  }

  uint64_t v34 = a1[1139];
  if (!v34) {
    goto LABEL_55;
  }
  sub_4D1C(v34);
  int v35 = (*(uint64_t (**)(void))(*(void *)a1[1139] + 16LL))(a1[1139]);
  int v36 = v35;
  unint64_t v37 = *(void *)(a2 + 16);
  __int16 v38 = *(_DWORD **)(a2 + 8);
  if ((unint64_t)v38 >= v37)
  {
    CFRange v40 = *(_DWORD **)a2;
    uint64_t v41 = ((uint64_t)v38 - *(void *)a2) >> 2;
    unint64_t v42 = v41 + 1;
    if (!((unint64_t)(v41 + 1) >> 62))
    {
      uint64_t v43 = v37 - (void)v40;
      if (v43 >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        CFRange v45 = (char *)sub_4098C(a2 + 16, v44);
        CFRange v40 = *(_DWORD **)a2;
        __int16 v38 = *(_DWORD **)(a2 + 8);
      }

      else
      {
        CFRange v45 = 0LL;
      }

      CFRange v46 = &v45[4 * v41];
      CFRange v47 = &v45[4 * v44];
      *(_DWORD *)CFRange v46 = v36;
      int v39 = v46 + 4;
      while (v38 != v40)
      {
        int v48 = *--v38;
        *((_DWORD *)v46 - 1) = v48;
        v46 -= 4;
      }

      *(void *)a2 = v46;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v39;
      *(void *)(a2 + 16) = v47;
      if (v40) {
        operator delete(v40);
      }
      goto LABEL_54;
    }

LABEL_62:
    sub_40978();
  }

  *__int16 v38 = v35;
  int v39 = v38 + 1;
LABEL_54:
  *(void *)(a2 + _Block_object_dispose(va, 8) = v39;
  a1[1139] = 0LL;
  sub_43190((uint64_t)a1, 1953260897LL);
LABEL_55:
  CFRange v49 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v50 = a1[1137] || a1[1136] || a1[1139] != 0LL;
    v51[0] = 67109120;
    v51[1] = v50;
    _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: InvalidateAllBTAudioDevice Empty=%d ",  (uint8_t *)v51,  8u);
  }

uint64_t sub_43DB8(uint64_t a1, uint64_t a2)
{
  v26[0] = 0LL;
  v26[1] = 0LL;
  sub_52B28((uint64_t)v26, a1 + 552);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count >= 1)
  {
    unint64_t v5 = Count + 1;
    do
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v5 - 2);
      unint64_t v7 = *(const __int32 **)a2;
      int v8 = *(__int32 **)(a2 + 8);
      __int32 v9 = (*(uint64_t (**)(const void *))(*(void *)ValueAtIndex + 16LL))(ValueAtIndex);
      uint64_t v10 = wmemchr(v7, v9, v8 - v7);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = v8;
      }
      if (v11 != *(__int32 **)(a2 + 8))
      {
        if ((*(unsigned int (**)(const void *))(*(void *)ValueAtIndex + 296LL))(ValueAtIndex)
          && sub_7250((uint64_t)ValueAtIndex) == 1952539500)
        {
          uint64_t v12 = qword_962E8;
          uint64_t v13 = *(void *)(qword_962E8 + 392);
          uint64_t v14 = *(void *)(qword_962E8 + 400);
          int v15 = (os_log_s *)qword_95B00;
          BOOL v16 = os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR);
          if (v14 == v13)
          {
            if (v16) {
              sub_5ECF8(&v24, v25, v15);
            }
          }

          else
          {
            if (v16)
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "Wireless Splitter device is an aggregate removing",  buf,  2u);
              uint64_t v12 = qword_962E8;
            }

            sub_3DDEC(v12, (uint64_t)ValueAtIndex);
          }
        }

        int v17 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 9080);
          uint64_t v19 = sub_6FA0((uint64_t)ValueAtIndex);
          *(_DWORD *)std::string buf = 138543618;
          uint64_t v28 = v18;
          __int16 v29 = 2114;
          uint64_t v30 = v19;
          _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEFAULT, "[%{public}@] Deleting BTAudioDevice %{public}@", buf, 0x16u);
        }

        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 9168), v5 - 2);
        sub_52BF4((uint64_t)v26);
        uint64_t v20 = qword_962E8;
        unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        void v23[2] = sub_440A0;
        v23[3] = &unk_812A8;
        void v23[4] = ValueAtIndex;
        sub_3E3BC(v20, v21, v23);
        sub_52B54((uint64_t)v26);
      }

      --v5;
    }

    while (v5 > 1);
  }

  sub_52BF4((uint64_t)v26);
  return sub_52C5C(v26);
}

void sub_44078( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

uint64_t sub_440A0(uint64_t a1)
{
  v4[0] = 0LL;
  v4[1] = 0LL;
  sub_52B28((uint64_t)v4, qword_962E8 + 200);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return sub_52C5C(v4);
}

uint64_t sub_440FC(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 9248) + 328LL);
}

uint64_t sub_44108(uint64_t a1, char a2)
{
  return sub_29904(*(void *)(a1 + 9248), a2);
}

uint64_t sub_44110(uint64_t *a1, int a2, uint64_t a3)
{
  int v6 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = "disabled";
    if (a2) {
      unint64_t v7 = "enabled";
    }
    v11[0] = 136315138;
    *(void *)&v11[1] = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Wireless Splitter From BT is %s", (uint8_t *)v11, 0xCu);
  }

  int v8 = (uint64_t *)qword_962E8;
  if ((a2 & 1) != 0)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16LL))(a3);
    return sub_3D3A4(v8, v9);
  }

  else
  {
    sub_3DF1C(qword_962E8);
    strcpy((char *)v11, "gaswbolg");
    BYTE1(v11[2]) = 0;
    HIWORD(v11[2]) = 0;
    return (*(uint64_t (**)(uint64_t *, _DWORD *))(*a1 + 248))(a1, v11);
  }

uint64_t sub_44238(uint64_t a1)
{
  v19[0] = 0LL;
  v19[1] = 0LL;
  sub_52B28((uint64_t)v19, a1 + 552);
  *(_DWORD *)(a1 + 36_Block_object_dispose(va, 8) = 1953853033;
  uint64_t v2 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 200);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v21 = v3;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "BTUnifiedAudioDevice::Initialize %@", buf, 0xCu);
  }

  if (*(void *)(a1 + 200))
  {
    if (sub_20FF4(*(void *)(a1 + 9248), 0x10000) || sub_20FF4(*(void *)(a1 + 9248), 0x20000))
    {
      *(void *)(a1 + 9080) = CFStringCreateCopy(kCFAllocatorDefault, *(CFStringRef *)(a1 + 200));
      if (sub_340E8())
      {
        ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings( kCFAllocatorDefault,  *(CFStringRef *)(a1 + 200),  @"-tlea");
        unint64_t v5 = ArrayBySeparatingStrings;
        if (ArrayBySeparatingStrings)
        {
          uint64_t ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0LL);
          *(void *)(a1 + 9080) = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@:output", ValueAtIndex);
          CFRelease(v5);
        }
      }
    }

    else
    {
      unint64_t v7 = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, *(CFStringRef *)(a1 + 200), @"-");
      if (CFArrayGetCount(v7))
      {
        int v8 = CFArrayGetValueAtIndex(v7, 0LL);
        int v9 = sub_340E8();
        uint64_t v10 = @"btaudio";
        if (v9) {
          uint64_t v10 = @"output";
        }
        *(void *)(a1 + 9080) = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@-%@", v8, v10);
      }

      CFRelease(v7);
    }
  }

  sub_44694(a1);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1032LL))(a1))
  {
    uint64_t v11 = operator new(0x18uLL);
    sub_F4DC((uint64_t)v11, a1, 0);
    *(void *)(a1 + 9136) = v11;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9200), v11);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9216), *(const void **)(a1 + 9136));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9224), *(const void **)(a1 + 9136));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9136));
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1040LL))(a1))
  {
    uint64_t v12 = operator new(0x18uLL);
    sub_F4DC((uint64_t)v12, a1, 1);
    *(void *)(a1 + 912_Block_object_dispose(va, 8) = v12;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9176), v12);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9192), *(const void **)(a1 + 9128));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9224), *(const void **)(a1 + 9128));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9128));
  }

  if (*(_BYTE *)(*(void *)(a1 + 9248) + 168LL))
  {
    uint64_t v13 = operator new(0x20uLL);
    sub_1B704((uint64_t)v13, a1, 1869968496, 0);
    *(void *)(a1 + 9144) = v13;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9208), v13);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9232), *(const void **)(a1 + 9144));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9216), *(const void **)(a1 + 9144));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9144));
  }

  if (*(_BYTE *)(a1 + 424))
  {
    uint64_t v14 = operator new(0x20uLL);
    sub_1B704((uint64_t)v14, a1, 1869968496, 0);
    *(void *)(a1 + 9152) = v14;
    int v15 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16LL))(v14);
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v21) = v16;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Mute Controls Created  = %d", buf, 8u);
      uint64_t v14 = *(void **)(a1 + 9152);
    }

    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9208), v14);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9216), *(const void **)(a1 + 9152));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9232), *(const void **)(a1 + 9152));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9152));
  }

  int v17 = operator new(0x20uLL);
  sub_1B704((uint64_t)v17, a1, 1735159650, 0);
  *(void *)(a1 + 9160) = v17;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9232), v17);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 9240), *(const void **)(a1 + 9160));
  sub_52C5C(v19);
  return 0LL;
}

void sub_44644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_44694(uint64_t a1)
{
  if (sub_340E8())
  {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 1024LL))(a1, 0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1016LL))(a1, 1LL);
  }

  else if (sub_20FF4(*(void *)(a1 + 9248), 0x10000))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1040LL))(*(void *)(a1 + 9120));
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1024LL))(a1, v2);
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1032LL))(*(void *)(a1 + 9120));
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1016LL))(a1, v3);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1024LL))(a1, 1LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1016LL))(a1, 1LL);
    uint64_t v4 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109376;
      v5[1] = 1;
      __int16 v6 = 1024;
      int v7 = 1;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Initial Streams input = %d | Output = %d ", (uint8_t *)v5, 0xEu);
    }
  }

void sub_4482C(uint64_t a1)
{
  uint64_t v1 = (pthread_cond_t *)a1;
  uint64_t v2 = (pthread_mutex_t *)(a1 + 9312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 9312));
  uint64_t v1 = (pthread_cond_t *)((char *)v1 + 9376);
  pthread_cond_signal(v1);
  pthread_mutex_unlock(v2);
  pthread_mutex_lock(v2);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  pthread_cond_destroy(v1);
  uint64_t v3 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Trasnport Synchronization completed", v4, 2u);
  }

uint64_t sub_448D8(uint64_t a1)
{
  uint64_t result = pthread_cond_init((pthread_cond_t *)(a1 + 9544), 0LL);
  *(void *)(a1 + 9600) = 100000LL;
  *(void *)(a1 + 9592) = 0LL;
  return result;
}

void sub_44924(uint64_t a1)
{
  uint64_t v1 = (pthread_cond_t *)a1;
  uint64_t v2 = (pthread_mutex_t *)(a1 + 9480);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 9480));
  uint64_t v1 = (pthread_cond_t *)((char *)v1 + 9544);
  pthread_cond_signal(v1);
  pthread_mutex_unlock(v2);
  pthread_mutex_lock(v2);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  pthread_cond_destroy(v1);
  uint64_t v3 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Trasnport Synchronization completed", v4, 2u);
  }

uint64_t sub_449D0(void *a1)
{
  v12[0] = 0LL;
  v12[1] = 0LL;
  sub_52B28((uint64_t)v12, (uint64_t)(a1 + 69));
  sub_4482C((uint64_t)a1);
  uint64_t v2 = (const void *)a1[1135];
  if (v2)
  {
    CFRelease(v2);
    a1[1135] = 0LL;
  }

  uint64_t v3 = a1[1142];
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    a1[1142] = 0LL;
  }

  uint64_t v4 = a1[1141];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    a1[1141] = 0LL;
  }

  uint64_t v5 = a1[1143];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    a1[1143] = 0LL;
  }

  uint64_t v6 = a1[1144];
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    a1[1144] = 0LL;
  }

  uint64_t v7 = a1[1145];
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    a1[1145] = 0LL;
  }

  if (*(_BYTE *)(a1[1156] + 277LL))
  {
    uint64_t v8 = qword_962E8;
    (*(void (**)(void **__return_ptr, void *))(*a1 + 824LL))(__p, a1);
    sub_3B7F0(v8, (uint64_t)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }

  return sub_52C5C(v12);
}

void sub_44AE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_52C5C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_44B10(void *a1, int *a2)
{
  int v3 = *a2;
  if (*a2 > 1819107690)
  {
    if (v3 <= 1919512166)
    {
      if (v3 <= 1836414052)
      {
        if (v3 <= 1819569762)
        {
          if (v3 != 1819107691)
          {
            int v4 = 1819173229;
            goto LABEL_53;
          }

LABEL_53:
    if (v3 == v4) {
      goto LABEL_54;
    }
    return sub_44E98(a1, a2);
  }

  if (v3 <= 1668049763)
  {
    if (v3 == 1635087471) {
      return sub_340E8();
    }
    if (v3 == 1650682995) {
      goto LABEL_54;
    }
    int v4 = 1668047219;
    goto LABEL_53;
  }

  if (v3 > 1668510817)
  {
    if (v3 != 1668510818)
    {
      int v4 = 1668575852;
      goto LABEL_53;
    }
  }

  else
  {
    if (v3 == 1668049764) {
      goto LABEL_54;
    }
    if (v3 != 1668050795) {
      return sub_44E98(a1, a2);
    }
  }

  uint64_t result = a1[1140];
  if (result) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 24LL))(result, a2);
  }
  return result;
}

    (*(void (**)(uint64_t, int *, uint64_t, unsigned int *, uint64_t, unsigned int *, uint64_t))(*(void *)v23 + 56LL))( v23,  a2,  a3,  a4,  a5,  a6,  a7);
    return 0LL;
  }

  if (v12 <= 1937204589)
  {
    if (v12 != 1936745838)
    {
      if (v12 == 1936749417)
      {
        if (a5 > 0xB)
        {
          *(void *)std::string buf = *(void *)a6;
          *(_DWORD *)&uint8_t buf[8] = a6[2];
          if (*(_BYTE *)(a1[1156] + 230LL) && sub_340E8())
          {
            uint32_t v92 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
            v99[0] = _NSConcreteStackBlock;
            v99[1] = 3221225472LL;
            v99[2] = sub_49E40;
            v99[3] = &unk_83AD0;
            uint64_t v100 = v92;
            uint64_t v101 = *(void *)buf;
            uint64_t v102 = *(_DWORD *)&buf[8];
            sub_3E3BC(qword_962E8, v92, v99);
          }

          return 0LL;
        }

        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FBA8();
        }
        return v13;
      }

      if (v12 == 1936749427)
      {
        if (a5 > 3)
        {
          uint64_t v71 = a1[1156];
          if (*(_BYTE *)(v71 + 230)) {
            sub_2913C((void *)v71, *a6 != 0, 1);
          }
          return 0LL;
        }

        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FC00();
        }
        return v13;
      }

      goto LABEL_118;
    }

    if (a5 <= 3)
    {
      uint64_t v13 = 561211770LL;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        return v13;
      }
      goto LABEL_109;
    }

    if (a1[1140])
    {
      __int16 v86 = a1[1156];
      if (*(_BYTE *)(v86 + 230))
      {
        int v87 = *a6;
        __int16 v88 = *(_DWORD *)(v86 + 232);
        int v89 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v7;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v88;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v87;
          _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_DEFAULT,  "[ %d ] SetProperty kBluetoothAudioDevicePropertySpatialAudioEnabled %u -> %u ",  buf,  0x14u);
        }

        __int16 v90 = sub_340E8();
        int v91 = a1[1156];
        if (v90)
        {
          sub_27DB4((uint64_t **)v91, v7, v87);
          int v87 = *(_DWORD *)(a1[1156] + 232LL);
        }

        else
        {
          *(_DWORD *)(v91 + 232) = v87;
        }

        if ((v87 & 1) != 0)
        {
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)a1[1140] + 560LL))(a1[1140], 1LL, 6LL);
        }

        else if ((v87 & 2) != 0)
        {
          (*(void (**)(void, uint64_t, uint64_t))(*(void *)a1[1140] + 560LL))(a1[1140], 1LL, 7LL);
        }

        else
        {
          if ((v88 & 1) != 0) {
            (*(void (**)(void, void, uint64_t))(*(void *)a1[1140] + 560LL))(a1[1140], 0LL, 6LL);
          }
          if ((v88 & 2) != 0) {
            (*(void (**)(void, void, uint64_t))(*(void *)a1[1140] + 560LL))(a1[1140], 0LL, 7LL);
          }
        }
      }

      return 0LL;
    }

    uint64_t v13 = 1937010544LL;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      return v13;
    }
    goto LABEL_200;
  }

  if (v12 > 2004050293)
  {
    if (v12 == 2004050294 || v12 == 2004053366)
    {
      if (a5 > 3)
      {
        unint64_t v37 = *(float *)a6;
        __int16 v38 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          int v39 = (*(uint64_t (**)(void *))(*a1 + 296LL))(a1);
          CFRange v40 = "No";
          if (v39) {
            CFRange v40 = "Yes";
          }
          *(_DWORD *)std::string buf = 134218242;
          *(double *)&uint8_t buf[4] = v37;
          *(_WORD *)&_BYTE buf[12] = 2080;
          *(void *)&buf[14] = v40;
          _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  " SetProperty Wireless Splitter Main Volume change request %f, Aggregate=%s",  buf,  0x16u);
        }

        sub_3DC84((float *)qword_962E8, v37);
        return 0LL;
      }

      uint64_t v13 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FA74();
      }
      return v13;
    }

    goto LABEL_118;
  }

  if (v12 == 1937204590)
  {
    if (a5 <= 3)
    {
      uint64_t v13 = 561211770LL;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        return v13;
      }
      goto LABEL_109;
    }

    uint64_t v13 = a1[1140];
    if (!v13)
    {
      uint64_t v13 = 1937010544LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FAF8();
      }
      return v13;
    }

    int v81 = a1[1156];
    if (*(_BYTE *)(v81 + 274))
    {
      __int16 v82 = *a6;
      int v83 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v84 = " Yes";
        if (!v82) {
          __int16 v84 = " No";
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v84;
        int v85 = v82 != 0;
        _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_DEFAULT,  " SetProperty kBluetoothAudioDevicePropertySoftwareVolumeEnabled %{public}s ",  buf,  0xCu);
        uint64_t v13 = a1[1140];
        *(_BYTE *)(a1[1156] + 275LL) = v85;
        if (!v13) {
          return v13;
        }
      }

      else
      {
        int v85 = v82 != 0;
        *(_BYTE *)(v81 + 275) = v85;
      }

      (*(void (**)(uint64_t, BOOL))(*(void *)v13 + 1192LL))(v13, v85);
    }

    return 0LL;
  }

  if (v12 != 2004050279)
  {
LABEL_118:
    uint64_t v13 = 2003332927LL;
    uint64_t v41 = qword_95B00;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
      return v13;
    }
    v42.i32[0] = a2[1];
    uint64_t v43 = (int16x8_t)vmovl_u8(v42);
    *(int16x4_t *)v43.i8 = vrev64_s16(*(int16x4_t *)v43.i8);
    uint64_t v97 = vmovn_s16(v43).u32[0];
    uint64_t v98 = 0;
    v96[0] = HIBYTE(v12);
    v96[1] = BYTE2(v12);
    v96[2] = BYTE1(v12);
    v96[3] = v12;
    v96[4] = 0;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = &v97;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v96;
    uint64_t v19 = "Unknown SetProperty for scope: %{public}s / element: %{public}s";
    uint64_t v20 = (os_log_s *)v41;
    uint64_t v21 = 22;
    goto LABEL_120;
  }

  if (a5 <= 7)
  {
    uint64_t v13 = 561211770LL;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_5FA1C();
    }
    return v13;
  }

  if (a1[1140])
  {
    CFRange v46 = *(const __CFArray **)a6;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)a6);
    int v48 = (os_log_s *)qword_95B00;
    CFRange v49 = os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT);
    if (Count)
    {
      if (v49)
      {
        BOOL v50 = a1[1135];
        *(_DWORD *)std::string buf = 138543362;
        *(void *)&uint8_t buf[4] = v50;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEFAULT,  "SetProperty kBluetoothAudioDeviceWirelessSplitterAggregation creating aggregate device %{public}@",  buf,  0xCu);
      }

      xpc_object_t v51 = qword_962E8;
      uint64_t v52 = (*(uint64_t (**)(void))(*(void *)a1[1140] + 16LL))(a1[1140]);
      if ((sub_3DD60(v51, v52) & 1) == 0)
      {
        uint64_t v53 = (uint64_t *)qword_962E8;
        uint64_t ValueAtIndex = (void *)CFArrayGetValueAtIndex(v46, 0LL);
        uint64_t v55 = (void *)CFArrayGetValueAtIndex(v46, 1LL);
        sub_3D7C8(v53, ValueAtIndex, v55);
      }
    }

    else
    {
      if (v49)
      {
        uint64_t v93 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v93;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEFAULT,  "SetProperty kBluetoothAudioDeviceWirelessSplitterAggregation destroying aggregate device with ID %u",  buf,  8u);
      }

      sub_3DDEC(qword_962E8, a1[1140]);
    }

    return 0LL;
  }

  uint64_t v13 = 1937010544LL;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
    sub_5FA48();
  }
  return v13;
}

uint64_t sub_44E98(void *a1, int *a2)
{
  uint64_t v2 = a1[1161];
  if (!v2) {
    goto LABEL_12;
  }
  int v4 = *a2;
  int v5 = a1 + 1161;
  do
  {
    unsigned int v6 = *(_DWORD *)(v2 + 32);
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      int v8 = (uint64_t *)v2;
    }
    else {
      int v8 = (uint64_t *)(v2 + 8);
    }
    if (v7) {
      int v5 = (void *)v2;
    }
    uint64_t v2 = *v8;
  }

  while (*v8);
  LOBYTE(result) = 0;
  if (v4 <= 1768256353)
  {
    if (v4 > 1684234611)
    {
      if (v4 > 1702391922)
      {
        if (v4 <= 1752457589)
        {
          if (v4 <= 1735221621)
          {
            if (v4 != 1702391923)
            {
              int v10 = 1718772584;
              goto LABEL_157;
            }

            goto LABEL_151;
          }

          if (v4 == 1735221622 || v4 == 1752327777) {
            goto LABEL_158;
          }
          unsigned __int16 v13 = 24931;
        }

        else
        {
          if (v4 > 1767989615)
          {
            if (v4 == 1767989616) {
              goto LABEL_158;
            }
            if (v4 == 1767994227) {
              goto LABEL_133;
            }
            int v17 = 1768252517;
LABEL_127:
            if (v4 != v17) {
              return result;
            }
            goto LABEL_128;
          }

          if (v4 == 1752457590) {
            goto LABEL_133;
          }
          if (v4 == 1752462195) {
            goto LABEL_151;
          }
          unsigned __int16 v13 = 29556;
        }

        int v16 = v13 | 0x68740000;
        goto LABEL_132;
      }

      if (v4 > 1685026402)
      {
        if (v4 > 1685484389)
        {
          if (v4 == 1685484390 || v4 == 1701015154) {
            goto LABEL_147;
          }
          int v10 = 1701408627;
          goto LABEL_157;
        }

        if (v4 != 1685026403)
        {
          if (v4 == 1685088612)
          {
            BOOL v18 = *(void *)(a1[1156] + 208LL) == 0LL;
LABEL_136:
            LOBYTE(result) = !v18;
            return result;
          }

          int v10 = 1685283695;
          goto LABEL_157;
        }

        goto LABEL_151;
      }

      if (v4 > 1684826731)
      {
        if (v4 == 1684826732) {
          goto LABEL_147;
        }
        if (v4 == 1685021040)
        {
          LOBYTE(result) = *(_BYTE *)(a1[1156] + 200LL);
          return result;
        }

        if (v4 != 1685025637) {
          return result;
        }
LABEL_151:
        BOOL v19 = a1[1139] == 0LL;
LABEL_152:
        LOBYTE(result) = v19;
        return result;
      }

      if (v4 != 1684234612)
      {
        int v17 = 1684434285;
        goto LABEL_127;
      }

      goto LABEL_142;
    }

    if (v4 > 1650750319)
    {
      if (v4 > 1651728748)
      {
        if (v4 > 1651798885)
        {
          if (v4 == 1651798886 || v4 == 1668051827) {
            goto LABEL_158;
          }
          int v10 = 1668506479;
          goto LABEL_157;
        }

        if (v4 == 1651728749) {
          goto LABEL_147;
        }
        if (v4 == 1651795822) {
          goto LABEL_158;
        }
        int v12 = 1651798132;
        goto LABEL_146;
      }

      if (v4 <= 1651271024)
      {
        if (v4 == 1650750320) {
          goto LABEL_147;
        }
        if (v4 != 1650750576) {
          return result;
        }
LABEL_142:
        if (a2[1] == 1735159650)
        {
          BOOL v19 = a2[2] == 0;
          goto LABEL_152;
        }

LABEL_163:
      LOBYTE(result) = *(_BYTE *)(a1[1156] + 277LL);
      return result;
    }

    if (v4 > 1635148655)
    {
      if (v4 > 1650549605)
      {
        if (v4 != 1650549606)
        {
          if (v4 == 1650549620) {
            goto LABEL_147;
          }
          int v10 = 1650551140;
          goto LABEL_157;
        }

        goto LABEL_163;
      }

      if (v4 == 1635148656) {
        goto LABEL_158;
      }
      if (v4 != 1635149170) {
        return result;
      }
    }

    else
    {
      if (v4 <= 1633973867)
      {
        if (v4 != 1633907555)
        {
          int v12 = 1633972065;
          goto LABEL_146;
        }

        LODWORD(result) = sub_340E8();
        if (!(_DWORD)result) {
          return result;
        }
        if (!*(_BYTE *)(a1[1156] + 230LL)) {
          goto LABEL_12;
        }
        uint64_t v20 = "PerAppHeadTrackedSetting";
        goto LABEL_175;
      }

      if (v4 != 1633973868)
      {
        if (v4 == 1635017332) {
          goto LABEL_158;
        }
        int v10 = 1635148144;
        goto LABEL_157;
      }
    }

    if (!*(_BYTE *)(a1[1156] + 228LL)) {
      goto LABEL_12;
    }
    uint64_t v20 = "AdaptiveVolumeControl";
LABEL_175:
    LOBYTE(result) = _os_feature_enabled_impl("BluetoothFeatures", v20);
    return result;
  }

  if (v4 > 1936746088)
  {
    if (v4 <= 1970496629)
    {
      if (v4 <= 1936749416)
      {
        if (v4 > 1936746610)
        {
          if (v4 == 1936746611 || v4 == 1936747876) {
            goto LABEL_158;
          }
          unsigned __int16 v14 = 28259;
LABEL_114:
          if (v4 != (v14 | 0x73700000)) {
            return result;
          }
          goto LABEL_139;
        }

        if (v4 != 1936746089)
        {
          unsigned __int16 v11 = 26223;
          goto LABEL_131;
        }
      }

      else if (v4 > 1937138785)
      {
        if (v4 != 1937138786)
        {
          if (v4 == 1937204590 || v4 == 1937208176) {
            LOBYTE(result) = *(_BYTE *)(a1[1156] + 274LL);
          }
          return result;
        }
      }

      else if (v4 != 1936749417)
      {
        if (v4 != 1936749427)
        {
          unsigned __int16 v11 = 29558;
LABEL_131:
          int v16 = v11 | 0x73700000;
LABEL_132:
          if (v4 != v16) {
            return result;
          }
        }

LABEL_133:
        LODWORD(result) = sub_340E8();
        if (!(_DWORD)result) {
          return result;
        }
        int v15 = *(unsigned __int8 *)(a1[1156] + 230LL);
        goto LABEL_135;
      }

LABEL_139:
      LOBYTE(result) = *(_BYTE *)(a1[1156] + 230LL);
      return result;
    }

    if (v4 > 2004050278)
    {
      if (v4 > 2004051821)
      {
        if (v4 != 2004051822)
        {
          if (v4 == 2004053366)
          {
LABEL_164:
            if (a1[1140])
            {
              LODWORD(result) = (*(uint64_t (**)(void *))(*a1 + 296LL))(a1);
              if ((_DWORD)result)
              {
                uint64_t v21 = qword_962E8;
                int v22 = (*(uint64_t (**)(void))(*(void *)a1[1140] + 16LL))(a1[1140]);
                LOBYTE(result) = sub_3DD60(v21, v22);
              }

              return result;
            }

            goto LABEL_12;
          }

          if (v4 != 2004054901) {
            return result;
          }
        }
      }

      else if (v4 != 2004050279)
      {
        if (v4 != 2004050294)
        {
          if (v4 == 2004051812) {
            LOBYTE(result) = *(_BYTE *)(a1[1156] + 329LL);
          }
          return result;
        }

        goto LABEL_164;
      }

      LOBYTE(result) = *(_BYTE *)(a1[1156] + 327LL);
      return result;
    }

    if (v4 <= 1986947427)
    {
      if (v4 == 1970496630)
      {
        LOBYTE(result) = *(_BYTE *)(a1[1156] + 144LL) ^ 1;
        return result;
      }

      int v10 = 1986225518;
    }

    else
    {
      if (v4 == 1986947428) {
        goto LABEL_158;
      }
      if (v4 == 1987080038) {
        goto LABEL_147;
      }
      int v10 = 2003394928;
    }

LABEL_157:
    if (v4 != v10) {
      return result;
    }
LABEL_158:
    LOBYTE(result) = 1;
    return result;
  }

  if (v4 > 1886807153)
  {
    if (v4 > 1936225135)
    {
      if (v4 <= 1936745317)
      {
        if (v4 != 1936225136)
        {
          if (v4 == 1936744816) {
            goto LABEL_158;
          }
          unsigned __int16 v11 = 24950;
          goto LABEL_131;
        }

LABEL_84:
        int v15 = *(_DWORD *)(a1[1156] + 244LL);
LABEL_135:
        BOOL v18 = v15 == 0;
        goto LABEL_136;
      }

      if (v4 == 1936745318) {
        goto LABEL_158;
      }
      if (v4 == 1936745331) {
        goto LABEL_133;
      }
      unsigned __int16 v14 = 25966;
      goto LABEL_114;
    }

    if (v4 > 1935959403)
    {
      if (v4 == 1935959404) {
        goto LABEL_147;
      }
      if (v4 != 1936220524 && v4 != 1936221550) {
        return result;
      }
      goto LABEL_84;
    }

    if (v4 == 1886807154) {
      goto LABEL_158;
    }
    int v12 = 1935896430;
LABEL_146:
    if (v4 != v12) {
      return result;
    }
    goto LABEL_147;
  }

  if (v4 <= 1819046767)
  {
    if ((v4 - 1768256354) > 0x11 || ((1 << (v4 - 98)) & 0x24001) == 0)
    {
      if (v4 != 1768382832)
      {
        if (v4 == 1818326127) {
          LOBYTE(result) = sub_5280C();
        }
        return result;
      }

      goto LABEL_158;
    }

LABEL_128:
    LOBYTE(result) = *(_BYTE *)(a1[1156] + 156LL);
    return result;
  }

  if (v4 > 1819505772)
  {
    if (v4 == 1819505773)
    {
      uint64_t v23 = a1[1156];
      if (!*(_DWORD *)(v23 + 160))
      {
        LOBYTE(result) = sub_21EEC(v23);
        return result;
      }

      goto LABEL_158;
    }

    if (v4 == 1852992613) {
      goto LABEL_147;
    }
    int v17 = 1886546291;
    goto LABEL_127;
  }

  if (v4 == 1819046768)
  {
    LOBYTE(result) = *(_BYTE *)(a1[1156] + 278LL);
    return result;
  }

  if (v4 != 1819241569)
  {
    int v10 = 1819503987;
    goto LABEL_157;
  }

LABEL_147:
  uint64_t result = a1[1140];
  if (!result) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result);
}

uint64_t sub_457B0(uint64_t a1, int *a2, _BYTE *a3)
{
  int v3 = *a2;
  if (*a2 > 1819173228)
  {
    if (v3 > 1935763059)
    {
      if (v3 > 1937007733)
      {
        if (v3 > 1953653101)
        {
          if (v3 == 1969841184) {
            goto LABEL_52;
          }
          int v4 = 1953653102;
        }

        else
        {
          if (v3 == 1937007734) {
            goto LABEL_52;
          }
          int v4 = 1937009955;
        }

        goto LABEL_51;
      }

      BOOL v5 = v3 == 1935763060 || v3 == 1936092276;
      int v6 = 1936879204;
    }

    else
    {
      if (v3 > 1853059618)
      {
        if (v3 <= 1870098019)
        {
          if (v3 == 1853059619) {
            goto LABEL_52;
          }
          if (v3 == 1853059700)
          {
            *a3 = 1;
            return 0LL;
          }

uint64_t sub_45A2C(uint64_t a1, int *a2, _BYTE *a3)
{
  int v3 = *a2;
  if (*a2 > 1701015153)
  {
    if (v3 <= 1852992612)
    {
      BOOL v4 = v3 == 1701015154 || v3 == 1818326127;
      int v5 = 1819241569;
    }

    else if (v3 > 1935959403)
    {
      BOOL v4 = v3 == 1987080038;
      int v5 = 1935959404;
    }

    else
    {
      BOOL v4 = v3 == 1852992613;
      int v5 = 1935896430;
    }
  }

  else if (v3 <= 1651728748)
  {
    BOOL v4 = v3 == 1633972065 || v3 == 1650549620;
    int v5 = 1650750320;
  }

  else if (v3 > 1684826731)
  {
    BOOL v4 = v3 == 1684826732;
    int v5 = 1685484390;
  }

  else
  {
    BOOL v4 = v3 == 1651728749;
    int v5 = 1651798132;
  }

  if (v4 || v3 == v5)
  {
    uint64_t v7 = *(void *)(a1 + 9120);
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
    }
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 9288);
    if (v9)
    {
      uint64_t v10 = a1 + 9288;
      do
      {
        unsigned int v11 = *(_DWORD *)(v9 + 32);
        BOOL v12 = v11 >= v3;
        if (v11 >= v3) {
          unsigned __int16 v13 = (uint64_t *)v9;
        }
        else {
          unsigned __int16 v13 = (uint64_t *)(v9 + 8);
        }
        if (v12) {
          uint64_t v10 = v9;
        }
        uint64_t v9 = *v13;
      }

      while (*v13);
      if (v10 != a1 + 9288 && v3 >= *(_DWORD *)(v10 + 32))
      {
        unsigned __int16 v14 = a2;
        *a3 = *((_BYTE *)sub_410EC((uint64_t **)(a1 + 9280), (unsigned int *)a2, (uint64_t)&unk_65AD4, &v14)[5] + 16);
      }
    }
  }

  return 0LL;
}

uint64_t sub_45BEC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a2;
  if ((int)*a2 > 1819173228)
  {
    if (v6 > 1935763059)
    {
      if (v6 <= 1937007733)
      {
        if (v6 == 1935763060 || v6 == 1936092276) {
          goto LABEL_47;
        }
        if (v6 != 1936879204) {
          return sub_46064(a1, a2, a3, a4, a5);
        }
        uint64_t v11 = *(void *)(a1 + 9120);
        if (!v11) {
          return 0LL;
        }
        (*(void (**)(void *__return_ptr))(*(void *)v11 + 792LL))(v17);
        int v8 = 20 * v18 + 12;
      }

      else
      {
        if (v6 > 1953653101)
        {
          if (v6 == 1953653102) {
            goto LABEL_47;
          }
          int v7 = 1969841184;
          goto LABEL_45;
        }

        if (v6 == 1937007734) {
          goto LABEL_47;
        }
        if (v6 != 1937009955) {
          return sub_46064(a1, a2, a3, a4, a5);
        }
        int v8 = 4 * (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 1496LL))(a1, a2[1]);
      }

LABEL_60:
          int v8 = 0;
          goto LABEL_48;
        }

        int v9 = 1919512167;
LABEL_39:
        if (v6 != v9) {
          return sub_46064(a1, a2, a3, a4, a5);
        }
        goto LABEL_47;
      }
    }

    else if (v6 != 1819173229)
    {
      if (v6 == 1819569763) {
        goto LABEL_47;
      }
      int v7 = 1836411236;
      goto LABEL_45;
    }

LABEL_46:
    int v8 = 8;
    goto LABEL_48;
  }

  if (v6 <= 1668575851)
  {
    if (v6 > 1668049763)
    {
      if (v6 != 1668049764)
      {
        if (v6 == 1668050795 || v6 == 1668510818)
        {
          uint64_t v12 = *(void *)(a1 + 9120);
          if (v12) {
            return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40LL))(v12);
          }
          return 0LL;
        }

        return sub_46064(a1, a2, a3, a4, a5);
      }

      goto LABEL_47;
    }

    if (v6 == 1635087471 || v6 == 1650682995) {
      goto LABEL_47;
    }
    int v9 = 1668047219;
    goto LABEL_39;
  }

  if (v6 <= 1684434035)
  {
    if (v6 != 1668575852)
    {
      if (v6 == 1668641652)
      {
        int v8 = 12 * *(_DWORD *)(a1 + 9296);
        goto LABEL_48;
      }

      int v7 = 1684236338;
      goto LABEL_45;
    }

    unsigned int v14 = a2[1];
    switch(v14)
    {
      case 0x6F757470u:
        uint64_t v15 = 9208LL;
        goto LABEL_65;
      case 0x696E7074u:
        uint64_t v15 = 9184LL;
        goto LABEL_65;
      case 0x676C6F62u:
        uint64_t v15 = 9232LL;
LABEL_65:
        int v8 = 4 * CFArrayGetCount(*(CFArrayRef *)(a1 + v15));
        goto LABEL_48;
    }

    goto LABEL_60;
  }

  if (v6 <= 1751737453)
  {
    if (v6 != 1684434036)
    {
      int v7 = 1685278578;
      goto LABEL_45;
    }

CFIndex sub_45F94(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1869968496:
      uint64_t v2 = 9208LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1768845428:
      uint64_t v2 = 9184LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1735159650:
      uint64_t v2 = 9232LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
  }

  return 0LL;
}

CFIndex sub_45FFC(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1869968496:
      uint64_t v2 = 9216LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1768845428:
      uint64_t v2 = 9192LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1735159650:
      uint64_t v2 = 9240LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
  }

  return 0LL;
}

uint64_t sub_46064(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result = 2003332927LL;
  uint64_t v7 = *(void *)(a1 + 9288);
  if (v7)
  {
    int v9 = (uint64_t **)(a1 + 9280);
    uint64_t v10 = a1 + 9288;
    unsigned int v11 = *a2;
    uint64_t v12 = v10;
    do
    {
      unsigned int v13 = *(_DWORD *)(v7 + 32);
      BOOL v14 = v13 >= v11;
      if (v13 >= v11) {
        uint64_t v15 = (uint64_t *)v7;
      }
      else {
        uint64_t v15 = (uint64_t *)(v7 + 8);
      }
      if (v14) {
        uint64_t v12 = v7;
      }
      uint64_t v7 = *v15;
    }

    while (*v15);
    if (v12 != v10 && v11 >= *(_DWORD *)(v12 + 32))
    {
      int v17 = a2;
      unsigned int v16 = sub_410EC(v9, a2, (uint64_t)&unk_65AD4, &v17);
      uint64_t result = 0LL;
      *a5 = *((_DWORD *)v16[5] + 3);
    }
  }

  return result;
}

uint64_t sub_46114( void *a1, int *a2, uint64_t a3, uint64_t a4, void **a5, unsigned int a6, int *a7, uint64_t a8)
{
  int v12 = *a2;
  if (*a2 > 1819173228)
  {
    if (v12 <= 1919512166)
    {
      if (v12 > 1853059618)
      {
        if (v12 <= 1870098019)
        {
          if (v12 == 1853059619)
          {
            uint64_t v13 = 0LL;
            unsigned int v21 = 16 * (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 1224LL))(a1, a8, a6 >> 4);
            goto LABEL_135;
          }

          if (v12 != 1853059700) {
            return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
          }
          if (a6 <= 7)
          {
            uint64_t v13 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5EE94();
            }
            return v13;
          }

          *(void *)a8 = 0LL;
          uint64_t v22 = a1[1140];
          if (v22) {
            *(double *)a8 = (*(double (**)(uint64_t))(*(void *)v22 + 776LL))(v22);
          }
          uint64_t v13 = 0LL;
          goto LABEL_125;
        }

        if (v12 != 1870098020)
        {
          if (v12 != 1886807154) {
            return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
          }
          uint64_t v13 = 0LL;
          int v14 = *(unsigned __int8 *)(a1[1156] + 249LL);
          goto LABEL_133;
        }

        sub_46BB8((uint64_t)a1, a2[1], a8, a6 >> 2);
LABEL_102:
        uint64_t v13 = 0LL;
        unsigned int v21 = a6 & 0xFFFFFFFC;
        goto LABEL_135;
      }

      if (v12 != 1819173229)
      {
        if (v12 != 1819569763)
        {
          if (v12 != 1836411236) {
            return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
          }
          id v15 = -[NSString copy]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%x %x",  *(unsigned int *)(a1[1156] + 48LL),  *(unsigned int *)(a1[1156] + 56LL)),  "copy");
          goto LABEL_51;
        }

        if (a6 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5EF18();
          }
          return v13;
        }

        *(_DWORD *)a8 = 0;
        uint64_t v27 = a1[1140];
        if (!v27) {
          goto LABEL_130;
        }
        uint64_t v26 = *(uint64_t (**)(void))(*(void *)v27 + 808LL);
        goto LABEL_129;
      }

      if (a6 <= 3)
      {
        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EDB8();
        }
        return v13;
      }

      if (!sub_21034(a1[1156])) {
        return 0LL;
      }
      uint8_t v24 = (const void *)sub_21034(a1[1156]);
      uint64_t v23 = v24;
    }

    else
    {
      if (v12 <= 1937007733)
      {
        if (v12 > 1936092275)
        {
          if (v12 != 1936092276)
          {
            if (v12 == 1936879204)
            {
              uint64_t v16 = a1[1140];
              if (v16)
              {
                uint64_t v33 = 0LL;
                __int128 v31 = 0u;
                __int128 v32 = 0u;
                (*(void (**)(__int128 *__return_ptr))(*(void *)v16 + 792LL))(&v31);
                uint64_t v17 = HIDWORD(v32);
                unsigned int v18 = 20 * HIDWORD(v32) + 12;
                if (v18 <= a6)
                {
                  *(void *)a8 = 0LL;
                  *(_DWORD *)(a8 + _Block_object_dispose(va, 8) = v17;
                  if ((_DWORD)v17)
                  {
                    uint64_t v28 = 0LL;
                    __int16 v29 = (void *)(a8 + 16);
                    do
                    {
                      ++v28;
                      if ((_DWORD)v17 == 1) {
                        int v30 = 42;
                      }
                      else {
                        int v30 = v28;
                      }
                      *((_DWORD *)v29 - 1) = v30;
                      void *v29 = 0LL;
                      v29[1] = 0LL;
                      __int16 v29 = (void *)((char *)v29 + 20);
                    }

                    while (v17 != v28);
                  }

                  uint64_t v13 = 0LL;
                  *a7 = v18;
                }

                else
                {
                  uint64_t v13 = 561211770LL;
                  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                    sub_5EFF4();
                  }
                }
              }

              else
              {
                uint64_t v13 = 1937010544LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5EFC8();
                }
              }

              return v13;
            }

            return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
          }

LABEL_74:
          if (a6 <= 3)
          {
            uint64_t v13 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5EF44();
            }
            return v13;
          }

LABEL_79:
          uint64_t v13 = 0LL;
          int v14 = 1;
LABEL_133:
          *(_DWORD *)a8 = v14;
          goto LABEL_134;
        }

        if (v12 != 1919512167)
        {
          if (v12 != 1935763060) {
            return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
          }
          if (a6 <= 3)
          {
            uint64_t v13 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5EEEC();
            }
            return v13;
          }

LABEL_110:
          uint64_t v13 = 0LL;
          *(_DWORD *)a8 = 0;
LABEL_134:
          unsigned int v21 = 4;
          goto LABEL_135;
        }

        if (a6 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5EEC0();
          }
          return v13;
        }

        *(_DWORD *)a8 = 0;
        uint64_t v25 = a1[1140];
        if (!v25)
        {
LABEL_130:
          uint64_t v13 = 0LL;
          goto LABEL_134;
        }

        uint64_t v26 = *(uint64_t (**)(void))(*(void *)v25 + 800LL);
LABEL_129:
        *(_DWORD *)a8 = v26();
        goto LABEL_130;
      }

      if (v12 <= 1953653101)
      {
        if (v12 == 1937007734)
        {
          if (a6 <= 3)
          {
            uint64_t v13 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5ED8C();
            }
            return v13;
          }

          uint64_t v13 = 0LL;
          *(_DWORD *)a8 = (*(uint64_t (**)(uint64_t))(*(void *)qword_962E8 + 16LL))(qword_962E8);
          goto LABEL_134;
        }

        if (v12 != 1937009955) {
          return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
        }
        (*(void (**)(void *, void, uint64_t, void))(*a1 + 1504LL))(a1, a2[1], a8, a6 >> 2);
        goto LABEL_102;
      }

      if (v12 == 1953653102)
      {
        if (a6 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5EE68();
          }
          return v13;
        }

        uint64_t v13 = 0LL;
        int v14 = 1651275109;
        goto LABEL_133;
      }

      if (v12 != 1969841184) {
        return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
      }
      if (a6 <= 3)
      {
        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EE3C();
        }
        return v13;
      }

      uint64_t v23 = (const void *)a1[1135];
      uint8_t v24 = v23;
    }

    CFRetain(v24);
    uint64_t v13 = 0LL;
    *(void *)a8 = v23;
    goto LABEL_125;
  }

  if (v12 > 1668641651)
  {
    if (v12 <= 1718772583)
    {
      if (v12 <= 1684434035)
      {
        if (v12 != 1668641652)
        {
          if (v12 == 1684236338)
          {
            if (a6 <= 7)
            {
              uint64_t v13 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5EF9C();
              }
              return v13;
            }

            uint64_t v13 = 0LL;
            *(void *)a8 = 0x200000001LL;
            goto LABEL_125;
          }

          return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
        }

        LODWORD(v31) = a6 / 0xC;
        (*(void (**)(void *, uint64_t, __int128 *))(*a1 + 1560LL))(a1, a8, &v31);
        uint64_t v13 = 0LL;
        unsigned int v21 = 12 * v31;
LABEL_135:
        *a7 = v21;
        return v13;
      }

      if (v12 != 1684434036)
      {
        if (v12 != 1685278578) {
          return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
        }
        id v15 = (id)sub_218C0(a1[1156]);
LABEL_51:
        uint64_t v13 = 0LL;
        *(void *)a8 = v15;
        goto LABEL_125;
      }

      goto LABEL_74;
    }

    if (v12 <= 1751737453)
    {
      if (v12 != 1718772584)
      {
        if (v12 != 1735221622) {
          return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
        }
        uint64_t v13 = 0LL;
        int v14 = *(unsigned __int8 *)(a1[1156] + 221LL);
        goto LABEL_133;
      }

      goto LABEL_79;
    }

    if (v12 == 1751737454)
    {
      if (a6 <= 3)
      {
        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5EF70();
        }
        return v13;
      }

      uint64_t v13 = 0LL;
      int v14 = *(unsigned __int8 *)(a1[1156] + 326LL);
      goto LABEL_133;
    }

    if (v12 != 1819107691) {
      return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
    }
    if (a6 <= 7)
    {
      uint64_t v13 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5EE10();
      }
      return v13;
    }

    uint64_t v13 = 0LL;
    *(void *)a8 = @"Apple Inc.";
LABEL_125:
    unsigned int v21 = 8;
    goto LABEL_135;
  }

  if (v12 <= 1668049763)
  {
    switch(v12)
    {
      case 1635087471:
        uint64_t v13 = 0LL;
        int v14 = *(unsigned __int8 *)(a1[1156] + 325LL);
        break;
      case 1650682995:
        if (a6 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5ED34();
          }
          return v13;
        }

        uint64_t v13 = 0LL;
        int v14 = 1634689642;
        break;
      case 1668047219:
        if (a6 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5ED60();
          }
          return v13;
        }

        uint64_t v13 = 0LL;
        int v14 = 1633969526;
        break;
      default:
        return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
    }

    goto LABEL_133;
  }

  if (v12 <= 1668510817)
  {
    if (v12 != 1668049764)
    {
      if (v12 != 1668050795) {
        return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
      }
      goto LABEL_77;
    }

    if (a6 <= 3)
    {
      uint64_t v13 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5EDE4();
      }
      return v13;
    }

    goto LABEL_110;
  }

  if (v12 != 1668510818)
  {
    if (v12 != 1668575852) {
      return sub_46C8C((uint64_t)a1, a2, a4, a5, a6, a7, a8);
    }
    sub_46AE4((uint64_t)a1, a2[1], a8, a6 >> 2);
    goto LABEL_102;
  }

LABEL_77:
  uint64_t v19 = a1[1140];
  if (v19) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48LL))(v19);
  }
  return 0LL;
}

CFIndex sub_46AE4(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  int Count = a4;
  switch(a2)
  {
    case 1869968496:
      uint64_t v6 = 9208LL;
      goto LABEL_7;
    case 1768845428:
      uint64_t v6 = 9184LL;
      goto LABEL_7;
    case 1735159650:
      uint64_t v6 = 9232LL;
LABEL_7:
      uint64_t v7 = *(const __CFArray **)(a1 + v6);
      goto LABEL_9;
  }

  uint64_t v7 = 0LL;
LABEL_9:
  if (Count)
  {
    for (CFIndex i = 0LL;
          i != Count;
          *(_DWORD *)(a3 + 4 * i++) = (*(uint64_t (**)(const void *))(*(void *)ValueAtIndex + 16LL))(ValueAtIndex))
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
    }
  }

  return CFArrayGetCount(v7);
}

CFIndex sub_46BB8(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  int Count = a4;
  switch(a2)
  {
    case 1869968496:
      uint64_t v6 = 9216LL;
      goto LABEL_7;
    case 1768845428:
      uint64_t v6 = 9192LL;
      goto LABEL_7;
    case 1735159650:
      uint64_t v6 = 9240LL;
LABEL_7:
      uint64_t v7 = *(const __CFArray **)(a1 + v6);
      goto LABEL_9;
  }

  uint64_t v7 = 0LL;
LABEL_9:
  if (Count)
  {
    for (CFIndex i = 0LL;
          i != Count;
          *(_DWORD *)(a3 + 4 * i++) = (*(uint64_t (**)(const void *))(*(void *)ValueAtIndex + 16LL))(ValueAtIndex))
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
    }
  }

  return CFArrayGetCount(v7);
}

uint64_t sub_46C8C(uint64_t a1, int *a2, uint64_t a3, void **a4, unsigned int a5, int *a6, uint64_t a7)
{
  uint64_t v10 = 0LL;
  int v11 = *a2;
  if (*a2 <= 1768382831)
  {
    if (v11 > 1684434284)
    {
      if (v11 > 1701408626)
      {
        if (v11 <= 1767994226)
        {
          if (v11 <= 1752327776)
          {
            if (v11 != 1701408627)
            {
              if (v11 != 1702391923) {
                return v10;
              }
              if (a5 <= 3)
              {
                uint64_t v10 = 561211770LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5F574();
                }
                return v10;
              }

              uint64_t v10 = 0LL;
              int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 272LL);
              goto LABEL_376;
            }

            uint64_t v10 = 561211770LL;
            if (a5 != 4) {
              return v10;
            }
            uint64_t v25 = *(void *)(a1 + 9096);
            if (!v25) {
              return v10;
            }
            uint64_t v10 = 0LL;
            uint64_t v26 = 9017LL;
            goto LABEL_336;
          }

          switch(v11)
          {
            case 1752327777:
              if (a5 <= 3)
              {
                uint64_t v10 = 561211770LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5F5CC();
                }
                return v10;
              }

              uint64_t v30 = *(void *)(a1 + 9248);
              if (*(_BYTE *)(v30 + 238))
              {
                if (*(_BYTE *)(v30 + 239)) {
                  int v31 = 2;
                }
                else {
                  int v31 = 1;
                }
              }

              else
              {
                int v31 = 0;
              }

              uint64_t v10 = 0LL;
              else {
                int v15 = v31;
              }
              break;
            case 1752462195:
              if (a5 <= 3)
              {
                uint64_t v10 = 561211770LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5F860();
                }
                return v10;
              }

              uint64_t v10 = 0LL;
              int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 129LL);
              break;
            case 1767989616:
              if (a5 <= 3)
              {
                uint64_t v10 = 561211770LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5F30C();
                }
                return v10;
              }

              uint64_t v10 = 0LL;
              int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 144LL);
              break;
            default:
              return v10;
          }

          goto LABEL_376;
        }

        if (v11 <= 1768256353)
        {
          if (v11 == 1767994227)
          {
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F414();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 255LL);
          }

          else
          {
            if (v11 != 1768252517) {
              return v10;
            }
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F04C();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 157LL);
          }

          goto LABEL_376;
        }

        if (v11 != 1768256354)
        {
          if (v11 == 1768256368)
          {
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F154();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 172LL);
          }

          else
          {
            if (v11 != 1768256371) {
              return v10;
            }
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F1AC();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 176LL);
          }

          goto LABEL_376;
        }

        if (a5 <= 7)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F180();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        *(void *)a7 = *(void *)(*(void *)(a1 + 9248) + 172LL);
        goto LABEL_372;
      }

      if (v11 <= 1685026402)
      {
        if (v11 > 1685021039)
        {
          if (v11 == 1685021040)
          {
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F0A4();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 200LL);
            goto LABEL_376;
          }

          if (v11 != 1685025637) {
            return v10;
          }
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F2E0();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          float v28 = *(float *)(*(void *)(a1 + 9248) + 280LL);
          goto LABEL_310;
        }

        if (v11 == 1684434285)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F204();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 184LL);
          goto LABEL_376;
        }

        int v14 = 1684826732;
        goto LABEL_179;
      }

      if (v11 > 1685283694)
      {
        if (v11 == 1685283695 || v11 == 1685484390) {
          goto LABEL_180;
        }
        int v14 = 1701015154;
        goto LABEL_179;
      }

      if (v11 == 1685026403)
      {
        if (a5 <= 7)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F338();
          }
          return v10;
        }

        int v12 = *(const void **)(*(void *)(a1 + 9248) + 288LL);
        if (!v12) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }

      if (v11 != 1685088612) {
        return v10;
      }
      if (a5 <= 7)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F2B4();
        }
        return v10;
      }

      uint64_t v13 = (__CFArray *)objc_msgSend( objc_msgSend(*(id *)(*(void *)(a1 + 9248) + 208), "UUIDString", a3, a3, a4),  "copy");
    }

    else
    {
      if (v11 <= 1651271024)
      {
        if (v11 <= 1635148655)
        {
          if (v11 > 1635017331)
          {
            if (v11 == 1635017332)
            {
              if (a5 <= 3)
              {
                uint64_t v10 = 561211770LL;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                  sub_5F834();
                }
                return v10;
              }

              uint64_t v10 = 0LL;
              int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 344LL);
              goto LABEL_376;
            }

            if (v11 != 1635148144) {
              return v10;
            }
            if (a5 <= 7)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F230();
              }
              return v10;
            }

            uint64_t v13 = sub_4397C(a1);
            goto LABEL_308;
          }

          if (v11 != 1633972065)
          {
            if (v11 != 1633973868) {
              return v10;
            }
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F4C4();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 229LL) == 1;
            goto LABEL_376;
          }

          goto LABEL_180;
        }

        if (v11 > 1650551139)
        {
          if (v11 == 1650551140)
          {
            if (a5 > 3)
            {
              uint64_t v10 = 0LL;
              int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 48LL);
              goto LABEL_376;
            }

            uint64_t v10 = 561211770LL;
            if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              return v10;
            }
            goto LABEL_132;
          }

          if (v11 == 1650750320) {
            goto LABEL_180;
          }
          if (v11 != 1650750576) {
            return v10;
          }
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F020();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(_DWORD *)(a1 + 368);
LABEL_376:
          *(_DWORD *)a7 = v15;
          goto LABEL_377;
        }

        if (v11 == 1635148656)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F25C();
            }
            return v10;
          }

          else {
            uint64_t v10 = 2003329396LL;
          }
          goto LABEL_377;
        }

        int v14 = 1650549620;
        goto LABEL_179;
      }

      if (v11 <= 1651798131)
      {
        if (v11 <= 1651466851)
        {
          if (v11 == 1651271025)
          {
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F8B8();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 218LL);
          }

          else
          {
            if (v11 != 1651466595) {
              return v10;
            }
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F7DC();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 145LL);
          }

          goto LABEL_376;
        }

        if (v11 == 1651466852)
        {
          int v22 = *(_DWORD *)(a1 + 9472);
          *(_DWORD *)a7 = v22 == 2;
          uint64_t v23 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v24 = *(_BYTE *)(a1 + 9441) == 0;
            *(_DWORD *)std::string buf = 67109376;
            BOOL v41 = v24;
            __int16 v42 = 1024;
            int v43 = v22;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "Get kBluetoothAudioDevicePropertyOutOfBandBiDirectionalAudio: Transport Update Completed %d, Out of Band Audio State %d",  buf,  0xEu);
          }

          goto LABEL_303;
        }

        if (v11 == 1651728749) {
          goto LABEL_180;
        }
        if (v11 != 1651795822) {
          return v10;
        }
        int v12 = *(const void **)(*(void *)(a1 + 9248) + 592LL);
        if (!v12) {
          goto LABEL_21;
        }
LABEL_20:
        CFRetain(v12);
LABEL_21:
        uint64_t v10 = 0LL;
        *(void *)a7 = v12;
        goto LABEL_372;
      }

      if (v11 > 1668051826)
      {
        if (v11 == 1668051827)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F5A0();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 273LL);
          goto LABEL_376;
        }

        if (v11 != 1668506479)
        {
          if (v11 != 1684234612) {
            return v10;
          }
          LODWORD(v16) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 816LL))(a1);
          goto LABEL_314;
        }

        goto LABEL_180;
      }

      if (v11 == 1651798132) {
        goto LABEL_180;
      }
      if (v11 != 1651798886) {
        return v10;
      }
      if (a5 <= 7)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F88C();
        }
        return v10;
      }

      uint64_t v13 = sub_29898(*(void *)(a1 + 9248));
    }

LABEL_308:
    uint64_t v10 = 0LL;
    *(void *)a7 = v13;
    goto LABEL_372;
  }

  if (v11 <= 1936746610)
  {
    if (v11 > 1935959403)
    {
      if (v11 <= 1936744821)
      {
        if (v11 <= 1936221549)
        {
          if (v11 != 1935959404)
          {
            if (v11 != 1936220524) {
              return v10;
            }
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F6A8();
              }
              return v10;
            }

            LODWORD(v16) = sub_4E3DC(a1);
            goto LABEL_314;
          }

          goto LABEL_180;
        }

        switch(v11)
        {
          case 1936221550:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F67C();
              }
              return v10;
            }

            uint64_t v16 = *(void *)(a1 + 9096);
            if (v16) {
              LODWORD(v16) = sub_349FC(v16);
            }
LABEL_314:
            uint64_t v10 = 0LL;
            *(_DWORD *)a7 = v16;
            goto LABEL_377;
          case 1936225136:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F650();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 244LL) != 0;
            break;
          case 1936744816:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F364();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 230LL);
            break;
          default:
            return v10;
        }

        goto LABEL_376;
      }

      if (v11 > 1936745330)
      {
        switch(v11)
        {
          case 1936745331:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F440();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 252LL);
            break;
          case 1936745838:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F390();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 232LL);
            break;
          case 1936746089:
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F51C();
              }
              return v10;
            }

            LODWORD(v16) = sub_29844(*(void *)(a1 + 9248));
            goto LABEL_314;
          default:
            return v10;
        }

        goto LABEL_376;
      }

      if (v11 == 1936744822)
      {
        if (a5 <= 3)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F3BC();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 251LL);
        goto LABEL_376;
      }

      if (v11 != 1936745318) {
        return v10;
      }
      if (a5 != 4 && a5 != 8)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F548();
        }
        return v10;
      }

      char v39 = 1;
      *(_DWORD *)std::string buf = 1;
      if (a4)
      {
        if (*a4) {
          sub_277F8(*(void *)(a1 + 9248), *a4, buf, (BOOL *)&v39);
        }
      }

      else
      {
        uint64_t v33 = +[BTAudioAVNotificationMonitor sharedInstance]( &OBJC_CLASS___BTAudioAVNotificationMonitor,  "sharedInstance",  a3,  a3);
        if (v33)
        {
          id v34 = -[NSString copy](-[BTAudioAVNotificationMonitor nowPlayingBundleID](v33, "nowPlayingBundleID"), "copy");
          if (v34) {
            sub_277F8(*(void *)(a1 + 9248), v34, buf, (BOOL *)&v39);
          }
        }

        else
        {
          id v34 = 0LL;
        }
      }

      int v37 = *(_DWORD *)buf;
      char v38 = v39;
      if (v39) {
        char v38 = sub_52870() ^ 1;
      }
      uint64_t v10 = 0LL;
      *(_BYTE *)(a7 + 4) = v38;
      *(_DWORD *)a7 = v37;
LABEL_372:
      int v21 = 8;
      goto LABEL_378;
    }

    if (v11 <= 1819503986)
    {
      if (v11 > 1819046767)
      {
        if (v11 == 1819046768)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F808();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 278LL);
          goto LABEL_376;
        }

        int v14 = 1819241569;
      }

      else
      {
        if (v11 == 1768382832)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F498();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 584LL);
          goto LABEL_376;
        }

        int v14 = 1818326127;
      }
    }

    else
    {
      if (v11 <= 1852992612)
      {
        if (v11 == 1819503987)
        {
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F0FC();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 160LL);
        }

        else
        {
          if (v11 != 1819505773) {
            return v10;
          }
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F128();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 164LL);
        }

        goto LABEL_376;
      }

      if (v11 == 1852992613) {
        goto LABEL_180;
      }
      if (v11 == 1886546291)
      {
        if (a5 <= 3)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F1D8();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 180LL);
        goto LABEL_376;
      }

      int v14 = 1935896430;
    }

LABEL_179:
    if (v11 != v14) {
      return v10;
    }
    goto LABEL_180;
  }

  if (v11 > 1986225517)
  {
    if (v11 <= 2004050293)
    {
      if (v11 > 1987080037)
      {
        if (v11 != 1987080038)
        {
          if (v11 == 2003394928)
          {
            if (a5 <= 3)
            {
              uint64_t v10 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_5F0D0();
              }
              return v10;
            }

            uint64_t v10 = 0LL;
            int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 148LL);
            goto LABEL_376;
          }

          if (v11 != 2004050279) {
            return v10;
          }
          uint64_t v13 = sub_3DB94(qword_962E8);
          goto LABEL_308;
        }

LABEL_180:
        uint64_t v17 = *(void *)(a1 + 9120);
        if (v17) {
          return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48LL))(v17);
        }
        return 0LL;
      }

      if (v11 != 1986225518)
      {
        if (v11 != 1986947428) {
          return v10;
        }
        if (a5 > 3)
        {
          uint64_t v10 = 0LL;
          int v15 = *(_DWORD *)(*(void *)(a1 + 9248) + 56LL);
          goto LABEL_376;
        }

        uint64_t v10 = 561211770LL;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          return v10;
        }
LABEL_132:
        sub_5F078();
        return v10;
      }

      *(_DWORD *)a7 = 1;
      uint64_t v27 = *(void *)(a1 + 9120);
      if (v27) {
        *(_DWORD *)a7 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 1456LL))(v27);
      }
LABEL_303:
      uint64_t v10 = 0LL;
LABEL_377:
      int v21 = 4;
      goto LABEL_378;
    }

    if (v11 <= 2004051821)
    {
      if (v11 != 2004050294)
      {
        if (v11 != 2004051812) {
          return v10;
        }
        if (a5 <= 3)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F758();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 329LL);
        goto LABEL_376;
      }
    }

    else
    {
      if (v11 == 2004051822)
      {
        if (a5 <= 3)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F784();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 330LL);
        goto LABEL_376;
      }

      if (v11 != 2004053366)
      {
        if (v11 != 2004054901) {
          return v10;
        }
        if (a5 <= 3)
        {
          uint64_t v10 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F72C();
          }
          return v10;
        }

        uint64_t v10 = 0LL;
        int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 327LL);
        goto LABEL_376;
      }
    }

    if (a5 <= 3)
    {
      uint64_t v10 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5F7B0();
      }
      return v10;
    }

    float v28 = sub_3DC20(qword_962E8);
    uint64_t v10 = 0LL;
LABEL_310:
    *(float *)a7 = v28;
    goto LABEL_377;
  }

  if (v11 > 1936749429)
  {
    if (v11 > 1937204589)
    {
      switch(v11)
      {
        case 1937204590:
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F700();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 275LL);
          break;
        case 1937208176:
          if (a5 <= 3)
          {
            uint64_t v10 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5F6D4();
            }
            return v10;
          }

          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 274LL);
          break;
        case 1970496630:
          uint64_t v10 = 0LL;
          int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 324LL);
          break;
        default:
          return v10;
      }

      goto LABEL_376;
    }

    if (v11 == 1936749430)
    {
      if (a5 <= 3)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F3E8();
        }
        return v10;
      }

      uint64_t v10 = 0LL;
      int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 254LL);
      goto LABEL_376;
    }

    if (v11 != 1937138786) {
      return v10;
    }
    if (a5 <= 3)
    {
      uint64_t v10 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5F288();
      }
      return v10;
    }

    uint64_t v29 = *(void *)(a1 + 9120);
    if (v29) {
      *(float *)a7 = (*(float (**)(uint64_t))(*(void *)v29 + 928LL))(v29);
    }
    goto LABEL_303;
  }

  if (v11 <= 1936748130)
  {
    if (v11 != 1936746611)
    {
      if (v11 != 1936747876) {
        return v10;
      }
      if (a5 != 4 && a5 != 8)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F5F8();
        }
        return v10;
      }

      *(_DWORD *)std::string buf = 1;
      char v39 = 1;
      if (*(void *)(a1 + 9256) == 1953719151LL)
      {
        *(_DWORD *)std::string buf = 0;
      }

      else if (a4)
      {
        if (*a4) {
          sub_277F8(*(void *)(a1 + 9248), *a4, buf, (BOOL *)&v39);
        }
      }

      else
      {
        int v35 = +[BTAudioAVNotificationMonitor sharedInstance]( &OBJC_CLASS___BTAudioAVNotificationMonitor,  "sharedInstance",  a3,  a3);
        if (v35)
        {
          id v36 = -[NSString copy](-[BTAudioAVNotificationMonitor nowPlayingBundleID](v35, "nowPlayingBundleID"), "copy");
          if (v36) {
            sub_277F8(*(void *)(a1 + 9248), v36, buf, (BOOL *)&v39);
          }
        }

        else
        {
          id v36 = 0LL;
        }
      }

      uint64_t v10 = 0LL;
      int v15 = *(_DWORD *)buf;
      goto LABEL_376;
    }

    if (a5 <= 3)
    {
      uint64_t v10 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5F624();
      }
      return v10;
    }

    int v32 = sub_5280C();
    uint64_t v10 = 0LL;
    uint64_t v25 = *(void *)(a1 + 9248);
    uint64_t v26 = 230LL;
    if (v32) {
      uint64_t v26 = 236LL;
    }
LABEL_336:
    int v15 = *(unsigned __int8 *)(v25 + v26);
    goto LABEL_376;
  }

  switch(v11)
  {
    case 1936748131:
      if (a5 <= 3)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F4F0();
        }
        return v10;
      }

      LODWORD(v16) = sub_29800(*(unsigned __int8 **)(a1 + 9248));
      goto LABEL_314;
    case 1936749417:
      uint64_t v10 = 0LL;
      uint64_t v19 = *(void *)(a1 + 9248);
      uint64_t v20 = *(void *)(v19 + 352);
      LODWORD(v19) = *(_DWORD *)(v19 + 360);
      *(void *)a7 = v20;
      *(_DWORD *)(a7 + _Block_object_dispose(va, 8) = v19;
      int v21 = 12;
LABEL_378:
      *a6 = v21;
      return v10;
    case 1936749427:
      if (a5 <= 3)
      {
        uint64_t v10 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5F46C();
        }
        return v10;
      }

      uint64_t v10 = 0LL;
      int v15 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 253LL);
      goto LABEL_376;
  }

  return v10;
}

void sub_484BC(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
}

uint64_t sub_484C4(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2) {
    return 1852797029LL;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  BOOL v4 = *(dispatch_queue_s **)(qword_962E8 + 168);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_48540;
  v6[3] = &unk_83AD0;
  int v7 = a2;
  int v8 = v3;
  _OWORD v6[4] = a3;
  dispatch_async(v4, v6);
  return 0LL;
}

void sub_48540(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 40);
  if (*(_DWORD *)(a1 + 40) && *(void *)(qword_962E8 + 144) && sub_3B4F4())
  {
    int v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      v4.i32[0] = *(_DWORD *)(a1 + 40);
      int16x8_t v5 = (int16x8_t)vmovl_u8(v4);
      *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
      unsigned __int32 v8 = vmovn_s16(v5).u32[0];
      char v9 = 0;
      int v6 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)std::string buf = 136446466;
      int v11 = &v8;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice : Sending device config change for %{public}s on %d",  buf,  0x12u);
    }

    (*(void (**)(void))(*(void *)(qword_962E8 + 144) + 32LL))();
  }

  else
  {
    int v7 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_5F8E4(v2, a1, v7);
    }
  }

uint64_t sub_48684( void *a1, int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  int v7 = a7;
  int v9 = a5;
  int v12 = *a2;
  if (*a2 <= 1818326126)
  {
    if (v12 > 1651466851)
    {
      if (v12 > 1701408626)
      {
        if (v12 == 1701408627)
        {
          if ((_DWORD)a5 != 4) {
            return 561211770LL;
          }
          uint64_t v29 = a1[1137];
          if (v29)
          {
            int v30 = *a6;
            int v31 = *a6 != 0;
            *(_BYTE *)(v29 + 9017) = v31;
            int v32 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v30 != 0;
              _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "Set kBluetoothAudioDevicePropertyEmptyOutputStream %d",  buf,  8u);
              int v31 = *(unsigned __int8 *)(a1[1137] + 9017LL);
            }

            if (!v31) {
              (*(void (**)(void *))(*a1 + 1448LL))(a1);
            }
          }

          return 0LL;
        }

        if (v12 != 1702391923)
        {
          if (v12 == 1752462195)
          {
            if (a5 > 3)
            {
              int v67 = *a6;
              uint64_t v68 = a1[1156];
              int v69 = *(unsigned __int8 *)(v68 + 129);
              *(_BYTE *)(v68 + 129) = *a6 != 0;
              uint64_t v70 = (os_log_s *)qword_95B00;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v67 != 0;
                _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEFAULT,  "BTHAL got kBluetoothAudioDevicePropertyShareplayScreenSharing: %u",  buf,  8u);
              }

              if ((v67 != 0) != (v69 != 0))
              {
                sub_27A38(a1[1156]);
                sub_1EA30((void *)a1[1156], 0LL);
              }

              return 0LL;
            }

            uint64_t v13 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5FC2C();
            }
            return v13;
          }

          goto LABEL_118;
        }

        if (a5 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            return v13;
          }
LABEL_109:
          sub_5FACC();
          return v13;
        }

        if (a1[1140])
        {
          uint64_t v75 = a1[1156];
          int v76 = *(unsigned __int8 *)(v75 + 272);
          int v77 = *a6;
          *(_BYTE *)(v75 + 272) = *a6 != 0;
          __int16 v78 = (os_log_s *)qword_95B00;
          uint64_t v13 = 0LL;
          if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
            return v13;
          }
          int v79 = "YES";
          if (v76) {
            __int16 v80 = "YES";
          }
          else {
            __int16 v80 = "NO";
          }
          *(_DWORD *)std::string buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v77 != 0;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v80;
          if (!v77) {
            int v79 = "NO";
          }
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v79;
          _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEFAULT, "Expanse Session %d  %s -> %s", buf, 0x1Cu);
          return 0LL;
        }

        uint64_t v13 = 1937010544LL;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          return v13;
        }
LABEL_200:
        sub_5FB24();
        return v13;
      }

      if (v12 == 1651466852)
      {
        uint64_t v13 = 561211770LL;
        if (!a4 || (_DWORD)a3 != 8 || (_DWORD)a5 != 4) {
          return v13;
        }
        sub_4A10C((uint64_t)a1, a4);
        return 0LL;
      }

      if (v12 == 1651795567) {
        return 0LL;
      }
      if (v12 != 1668051827) {
        goto LABEL_118;
      }
      if (a5 <= 3)
      {
        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FB50();
        }
        return v13;
      }

      if (!a1[1140])
      {
        uint64_t v13 = 1937010544LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FB7C();
        }
        return v13;
      }

      *(_BYTE *)(a1[1156] + 273LL) = *a6 != 0;
      xpc_object_t v61 = (_BYTE *)a1[1137];
      if (!v61 || !v61[192]) {
        return 0LL;
      }
      CFRange v45 = *(void (**)(void))(*(void *)v61 + 584LL);
LABEL_123:
      v45();
      return 0LL;
    }

    if (v12 > 1635149169)
    {
      if (v12 == 1635149170)
      {
        int v24 = _os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl");
        uint64_t v13 = 0LL;
        if (v9 != 24 || !v24) {
          return v13;
        }
        if (*(_BYTE *)(a1[1156] + 228LL))
        {
          uint64_t v25 = (_BYTE *)a1[1136];
          if (v25)
          {
            if (v25[192])
            {
              float v26 = *(float *)a6;
              uint64_t v27 = *((void *)a6 + 1);
              uint64_t v28 = *((unsigned __int16 *)a6 + 8);
              (*(void (**)(_BYTE *, uint64_t, uint64_t, float))(*(void *)v25 + 608LL))(v25, v27, v28, v26);
              sub_49ED8(a1, v27, v28, v26);
            }
          }
        }

        return 0LL;
      }

      if (v12 != 1650549620)
      {
        if (v12 != 1651466595) {
          goto LABEL_118;
        }
        int v22 = (os_log_s *)qword_95B00;
        if (a5 <= 3)
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F9C4();
          }
          return v13;
        }

        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          int v62 = *a6;
          *(_DWORD *)std::string buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v62;
          _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "Ownership Set as %d", buf, 8u);
        }

        if (!*a6)
        {
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F9F0();
          }
          return 0LL;
        }

        if (*(_BYTE *)(a1[1156] + 348LL))
        {
          BOOL v63 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_0, v63, OS_LOG_TYPE_DEFAULT, "Tipi connection posting ownership", buf, 2u);
          }

          notify_post("com.apple.BluetoothServices.AudioRoutingOwnershipTaken");
          BOOL v64 = (void *)qword_962E8;
          (*(void (**)(void *__return_ptr, void *))(*a1 + 824LL))(v105, a1);
          sub_3BA0C(v64, (uint64_t)v105, 1LL, 0, 0LL);
          if ((v106 & 0x80000000) == 0) {
            return 0LL;
          }
          uint64_t v65 = (void *)v105[0];
        }

        else
        {
          uint64_t v94 = qword_962E8;
          (*(void (**)(void **__return_ptr, void *))(*a1 + 824LL))(__p, a1);
          sub_3C1AC(v94, __p);
          if ((v104 & 0x80000000) == 0) {
            return 0LL;
          }
          uint64_t v65 = __p[0];
        }

        operator delete(v65);
        return 0LL;
      }

      goto LABEL_52;
    }

    if (v12 == 1633972065) {
      goto LABEL_52;
    }
    if (v12 == 1635017332)
    {
      if (a5 > 3)
      {
        if (a1[1137])
        {
          sub_2479C(a1[1156], *a6);
          uint64_t v72 = a1[1137];
          if (v72)
          {
            int v73 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              int v74 = *(_DWORD *)(a1[1156] + 344LL);
              *(_DWORD *)std::string buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v74;
              _os_log_impl(&dword_0, v73, OS_LOG_TYPE_DEFAULT, "HFP Setting allow sco for turn by turn %d", buf, 8u);
              uint64_t v72 = a1[1137];
            }

            (*(void (**)(uint64_t, BOOL))(*(void *)v72 + 1432LL))(v72, *(_DWORD *)(a1[1156] + 344LL) != 0);
          }

          return 0LL;
        }

        uint64_t v13 = 1937010544LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FC84();
        }
      }

      else
      {
        uint64_t v13 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FC58();
        }
      }

      return v13;
    }

    if (v12 != 1635148656) {
      goto LABEL_118;
    }
    if (a5 <= 3)
    {
      uint64_t v13 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FAA0();
      }
      return v13;
    }

    uint64_t v56 = *a6;
    uint64_t v57 = *a4;
    if (*(_BYTE *)(a1[1156] + 222LL))
    {
      unsigned int v58 = 1;
      if ((_DWORD)v57 == 1919183219 || a1[1158] == 1919183219LL) {
        goto LABEL_225;
      }
      uint64_t v59 = 1952539500LL;
      if ((_DWORD)v56 == 1953719151)
      {
        int v60 = 3;
LABEL_222:
        if (a1[1157] == v59) {
          unsigned int v58 = v60;
        }
        else {
          unsigned int v58 = 0;
        }
        goto LABEL_225;
      }

      if ((_DWORD)v56 == 1952539500)
      {
        int v60 = 2;
        uint64_t v59 = 1953719151LL;
        goto LABEL_222;
      }
    }

    unsigned int v58 = 0;
LABEL_225:
    else {
      return 2003329396LL;
    }
  }

  if (v12 <= 1936745837)
  {
    if (v12 > 1853059699)
    {
      if (v12 == 1853059700)
      {
        if ((_DWORD)a5 == 8)
        {
          uint64_t v33 = a1[1140];
          if (v33)
          {
            double v34 = (*(double (**)(uint64_t))(*(void *)v33 + 776LL))(v33);
            double v35 = *(double *)a6;
            id v36 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 134218240;
              *(double *)&uint8_t buf[4] = v34;
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(double *)&buf[14] = v35;
              _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: Setting sample rate %f -> %f ",  buf,  0x16u);
            }

            if (v34 != v35) {
              (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 240LL))(a1, 1853059700LL, (uint64_t)v35);
            }
            return 0LL;
          }

          uint64_t v13 = 1937010544LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F96C();
          }
        }

        else
        {
          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5F998();
          }
        }

        return v13;
      }

      if (v12 != 1935896430)
      {
        if (v12 == 1936745331)
        {
          if (a5 > 3)
          {
            uint64_t v66 = a1[1156];
            if (*(_BYTE *)(v66 + 230)) {
              sub_28AC8((void *)v66, *a6 != 0, 1);
            }
            return 0LL;
          }

          uint64_t v13 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FBD4();
          }
          return v13;
        }

        goto LABEL_118;
      }
    }

    else if (v12 != 1818326127)
    {
      if (v12 != 1819241569)
      {
        if (v12 != 1819505773) {
          goto LABEL_118;
        }
        uint64_t v14 = a1[1156];
        if (*(_BYTE *)(v14 + 279) == 2 && *a6 == 2)
        {
          if (*(_BYTE *)(v14 + 156))
          {
            if (*(_BYTE *)(v14 + 157))
            {
              int v16 = *(_DWORD *)(v14 + 172);
              if (v16 || *(_DWORD *)(v14 + 176))
              {
                uint64_t v13 = 1852797029LL;
                uint64_t v17 = qword_95B00;
                if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
                  return v13;
                }
                int v18 = *(_DWORD *)(v14 + 176);
                *(_DWORD *)std::string buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v16;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v18;
                uint64_t v19 = "For in-ear support audio headsets, ANC mode cannot be enabled if both sides are not in-ear: primar"
                      "y bud = %u , secondary bud = %u";
                uint64_t v20 = (os_log_s *)v17;
                uint32_t v21 = 14;
LABEL_120:
                _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
                return v13;
              }
            }
          }
        }

        sub_21364((void *)a1[1156], *a6);
        uint64_t v44 = a1[1140];
        if (!v44) {
          return 0LL;
        }
        CFRange v45 = *(void (**)(void))(*(void *)v44 + 1424LL);
        goto LABEL_123;
      }

      uint64_t v23 = a1[1140];
      if (!v23)
      {
        uint64_t v13 = 1937010544LL;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          return v13;
        }
        goto LABEL_72;
      }

      goto LABEL_53;
    }

LABEL_52:
    uint64_t v23 = a1[1140];
    if (!v23)
    {
      uint64_t v13 = 1937010544LL;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        return v13;
      }
LABEL_72:
      sub_5FCB0();
      return v13;
    }

void sub_499A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_499E4(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned __int32 v8 = a1 + 1159;
  uint64_t v9 = a1[1157];
  BOOL v10 = v9 == a2 && a1[1158] == a3 && *((_BYTE *)a1 + 9273) != 0;
  int v11 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = a1[1135];
    v32[0] = BYTE3(v9);
    v32[1] = BYTE2(v9);
    v32[2] = BYTE1(v9);
    v32[3] = v9;
    v32[4] = 0;
    v30[0] = BYTE3(a2);
    v30[1] = BYTE2(a2);
    void v30[2] = BYTE1(a2);
    __int16 v31 = a2;
    v12.i32[0] = *((_DWORD *)a1 + 2316);
    int16x8_t v14 = (int16x8_t)vmovl_u8(v12);
    *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
    unsigned __int32 v28 = vmovn_s16(v14).u32[0];
    char v29 = 0;
    v27[0] = BYTE3(a3);
    v27[1] = BYTE2(a3);
    _OWORD v27[2] = BYTE1(a3);
    v27[3] = a3;
    v27[4] = 0;
    sub_9E5C(a4, __p);
    *(_DWORD *)std::string buf = 138544642;
    int v15 = v26 >= 0 ? __p : (void **)__p[0];
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)&buf[14] = v32;
    *(_WORD *)&_BYTE buf[22] = 2082;
    double v34 = v30;
    *(_WORD *)double v35 = 2082;
    *(void *)&v35[2] = &v28;
    *(_WORD *)&_BYTE v35[10] = 2082;
    id v36 = v27;
    __int16 v37 = 2082;
    char v38 = v15;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Request For route Change: [%{public}@ ] profile %{public}s => %{public}s reason %{public}s = > %{public}s Calculat ed Transition:  %{public}s ",  buf,  0x3Eu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((_DWORD)a2 == 1953719151)
  {
    if (a1[1137]) {
      goto LABEL_19;
    }
    return 0LL;
  }

  if ((_DWORD)a2 == 1953260897)
  {
    if (a1[1139]) {
      goto LABEL_19;
    }
    return 0LL;
  }

  if ((_DWORD)a2 != 1952539500 || !a1[1136]) {
    return 0LL;
  }
LABEL_19:
  if (v10)
  {
    uint64_t v17 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "ForceRouteChange step2 VA notified BT, requestConfigChange to switch format",  buf,  2u);
    }

    __p[0] = 0LL;
    __p[1] = 0LL;
    sub_52B28((uint64_t)__p, (uint64_t)(a1 + 69));
    *unsigned __int32 v8 = 1;
    sub_52BF4((uint64_t)__p);
    unsigned int v18 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
    *(void *)std::string buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_500C4;
    double v34 = &unk_83AD0;
    *(_DWORD *)&v35[8] = v18;
    LODWORD(v36) = 1718772584;
    *(void *)double v35 = 0LL;
    sub_3E3BC(qword_962E8, v18, buf);
    v8[1] = 0;
    uint64_t v19 = __p;
  }

  else
  {
    sub_4FBDC(a1, a2, a3);
    *(void *)std::string buf = 0LL;
    *(void *)&uint8_t buf[8] = 0LL;
    sub_52B28((uint64_t)buf, (uint64_t)(a1 + 69));
    *unsigned __int32 v8 = 1;
    unsigned int v20 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
    sub_52BF4((uint64_t)buf);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_4FE10;
    v21[3] = &unk_82B08;
    unsigned int v22 = v20;
    int v23 = a2;
    int v24 = a3;
    sub_3E3BC(qword_962E8, v20, v21);
    uint64_t v19 = (void **)buf;
  }

  sub_52C5C(v19);
  return 1LL;
}

void sub_49D94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_49DBC(void *a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1[1156] + 222LL);
  if (*(_BYTE *)(a1[1156] + 222LL))
  {
    uint64_t v3 = 1LL;
    if (a3 != 1919183219 && a1[1158] != 1919183219LL)
    {
      uint64_t v4 = 1952539500LL;
      if (a2 == 1953719151)
      {
        unsigned int v5 = 3;
      }

      else
      {
        if (a2 != 1952539500) {
          return 0LL;
        }
        unsigned int v5 = 2;
        uint64_t v4 = 1953719151LL;
      }

      if (a1[1157] == v4) {
        return v5;
      }
      else {
        return 0LL;
      }
    }
  }

  return v3;
}

void sub_49E40(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    sub_27A8C((uint64_t **)v2[1156], *(void *)(a1 + 36), *(_DWORD *)(a1 + 44));
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "UpdateSpatialAudioQueueInfo update dispatched after disconnection",  v4,  2u);
    }
  }

void sub_49ED8(void *a1, uint64_t a2, int a3, float a4)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "PersonalizedVolumeV2"))
  {
    unsigned __int32 v8 = +[BTAudioAVNotificationMonitor sharedInstance](&OBJC_CLASS___BTAudioAVNotificationMonitor, "sharedInstance");
    uint64_t v9 = v8;
    BOOL v10 = v8 ? -[BTAudioAVNotificationMonitor nowPlayingBundleID](v8, "nowPlayingBundleID") : (NSString *)&stru_84880;
    if (a3 == 5 || a3 == 3)
    {
      BOOL v12 = a3 == 3 || a3 == 5;
      v20[0] = a2;
      v19[0] = @"CurrentAudioCategory";
      v19[1] = @"CurrentVolume";
      v20[1] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(float)(a4 * 100.0));
      void v20[2] = &off_85600;
      void v19[2] = @"IsPersonalizedVolumeUpdate";
      void v19[3] = @"ManualVolumeUpdate";
      if (*(_BYTE *)(a1[1136] + 192LL)) {
        uint64_t v13 = a1[1136];
      }
      else {
        uint64_t v13 = 0LL;
      }
      v20[3] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(float)((*(float (**)(uint64_t))(*(void *)v13 + 912LL))(v13) * 100.0));
      v19[4] = @"RampInProgress";
      v20[4] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v12);
      double v19[5] = @"PersonalizedVolumeEnabled";
      v20[5] = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned __int8 *)(a1[1156] + 229LL) == 1);
      v20[6] = v10;
      v19[6] = @"BundleID";
      v19[7] = @"ReasonForManualUpdate";
      void v20[7] = @"PersonalizedVolume";
      int16x8_t v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v19,  8LL);
      if (v9)
      {
        int v15 = v14;
        int v16 = (void *)a1[1135];
        id v17 = v16;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        _OWORD v18[2] = sub_4F3B0;
        v18[3] = &unk_83AF8;
        v18[4] = v9;
        char v18[5] = v16;
        v18[6] = v15;
        dispatch_async( (dispatch_queue_t)-[BTAudioAVNotificationMonitor manualVolumeUpdatesQueue](v9, "manualVolumeUpdatesQueue"),  v18);
      }
    }
  }

uint64_t sub_4A10C(uint64_t a1, void *a2)
{
  unsigned int v4 = objc_msgSend(objc_msgSend(a2, "objectForKey:", @"profileType"), "unsignedIntValue");
  unsigned int v5 = objc_msgSend(objc_msgSend(a2, "objectForKey:", @"Reason"), "unsignedIntValue");
  int v6 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 9080);
    v16[0] = HIBYTE(v4);
    v16[1] = BYTE2(v4);
    void v16[2] = BYTE1(v4);
    v16[3] = v4;
    v16[4] = 0;
    v15[0] = HIBYTE(v5);
    v15[1] = BYTE2(v5);
    void v15[2] = BYTE1(v5);
    _DWORD v15[3] = v5;
    v15[4] = 0;
    *(_DWORD *)std::string buf = 138543874;
    uint64_t v18 = v7;
    __int16 v19 = 2082;
    unsigned int v20 = v16;
    __int16 v21 = 2082;
    unsigned int v22 = v15;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Request Out of Band Audio : [%{public}@ ] profile %{public}s reason %{public}s ",  buf,  0x20u);
  }

  unsigned __int32 v8 = *(_BYTE **)(a1 + 9096);
  if (!v8) {
    return 0LL;
  }
  BOOL v9 = v8[192] && v4 == 1953719151;
  if (!v9 || v5 == 1919183219) {
    return 0LL;
  }
  uint64_t v13 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "Out of Band Audio : request Audio in OoB", buf, 2u);
    if (*(_BYTE *)(*(void *)(a1 + 9096) + 192LL)) {
      unsigned __int32 v8 = *(_BYTE **)(a1 + 9096);
    }
    else {
      unsigned __int32 v8 = 0LL;
    }
  }

  uint64_t v11 = 1LL;
  *(_DWORD *)(a1 + 9472) = 1;
  return v11;
}

BOOL sub_4A300(uint64_t a1, uint64_t a2, int *a3)
{
  BOOL result = 0LL;
  int v4 = *a3;
  if (*a3 <= 1935762291)
  {
    if (v4 > 1870098019)
    {
      BOOL v5 = v4 == 1870098020 || v4 == 1885762592;
      int v6 = 1885762657;
    }

    else
    {
      BOOL v5 = v4 == 1650682995 || v4 == 1668047219;
      int v6 = 1819569763;
    }
  }

  else if (v4 <= 1936092512)
  {
    BOOL v5 = v4 == 1935762292 || v4 == 1935894638;
    int v6 = 1935960434;
  }

  else if (v4 > 1937007733)
  {
    BOOL v5 = v4 == 1952805485;
    int v6 = 1937007734;
  }

  else
  {
    BOOL v5 = v4 == 1936092513;
    int v6 = 1936092532;
  }

  if (v5 || v4 == v6) {
    return a3[1] == 1735159650 && a3[2] == 0;
  }
  return result;
}

void sub_4A414(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 9096);
  if (v1 && *(_BYTE *)(v1 + 192) && *(_DWORD *)(v1 + 9328))
  {
    uint64_t v3 = (_WORD *)(a1 + 9305);
    uint64_t v4 = *(void *)(a1 + 9248);
    if (*(_BYTE *)(v4 + 221))
    {
      int v5 = *(_DWORD *)(v1 + 9340);
      if (v5 == 130)
      {
        *uint64_t v3 = 0;
        uint64_t v6 = qword_95B00;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_WORD *)std::string buf = 0;
        uint64_t v7 = "HFPStereo config policy nopending for game";
        unsigned __int32 v8 = (os_log_s *)v6;
        uint32_t v9 = 2;
        goto LABEL_22;
      }

      *uint64_t v3 = 1028;
      uint64_t v12 = qword_95B00;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      v13.i32[0] = *(_DWORD *)(a1 + 9256);
      int16x8_t v14 = (int16x8_t)vmovl_u8(v13);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      unsigned __int32 v24 = vmovn_s16(v14).u32[0];
      char v25 = 0;
      *(_DWORD *)std::string buf = 67109378;
      int v27 = v5;
      __int16 v28 = 2082;
      char v29 = &v24;
      uint64_t v7 = "HFPStereo config policy picked HAoS, currCodec %u, device %{public}s";
      goto LABEL_14;
    }

    if (*(_BYTE *)(v4 + 216))
    {
      int v10 = *(_DWORD *)(v1 + 9340);
      if ((v10 | 0x100) == 0x100)
      {
        *uint64_t v3 = 0;
        uint64_t v11 = qword_95B00;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)std::string buf = 67109120;
        int v27 = v10;
        uint64_t v7 = "HFPStereo config no pending for hid, currCodec %u";
      }

      else
      {
        *uint64_t v3 = 257;
        uint64_t v11 = qword_95B00;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)std::string buf = 67109120;
        int v27 = v10;
        uint64_t v7 = "HFPStereo config policy picked mono for hid, currCodec %u";
      }

      goto LABEL_21;
    }

    if (*(_BYTE *)(v1 + 9436))
    {
      int v15 = *(_DWORD *)(v1 + 9340);
      if ((v15 & 0xFFFFFFFE) == 0x80)
      {
        *uint64_t v3 = 0;
        uint64_t v11 = qword_95B00;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)std::string buf = 67109120;
        int v27 = v15;
        uint64_t v7 = "HFPStereo config no pending for sfer, currCodec %u";
LABEL_21:
        unsigned __int32 v8 = (os_log_s *)v11;
        uint32_t v9 = 8;
        goto LABEL_22;
      }

      *uint64_t v3 = 771;
      uint64_t v12 = qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        v22.i32[0] = *(_DWORD *)(a1 + 9256);
        int16x8_t v23 = (int16x8_t)vmovl_u8(v22);
        *(int16x4_t *)v23.i8 = vrev64_s16(*(int16x4_t *)v23.i8);
        unsigned __int32 v24 = vmovn_s16(v23).u32[0];
        char v25 = 0;
        *(_DWORD *)std::string buf = 67109378;
        int v27 = v15;
        __int16 v28 = 2082;
        char v29 = &v24;
        uint64_t v7 = "HFPStereo config policy picked high stereo for sfer, currCodec %u, device %{public}s";
LABEL_14:
        unsigned __int32 v8 = (os_log_s *)v12;
        uint32_t v9 = 18;
LABEL_22:
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
      }
    }

    else if ((sub_340E8() & 1) == 0)
    {
      int v16 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(_DWORD *)(v1 + 9340);
        v17.i32[0] = *(_DWORD *)(a1 + 9256);
        int16x8_t v19 = (int16x8_t)vmovl_u8(v17);
        *(int16x4_t *)v19.i8 = vrev64_s16(*(int16x4_t *)v19.i8);
        unsigned __int32 v24 = vmovn_s16(v19).u32[0];
        char v25 = 0;
        int v20 = *(unsigned __int8 *)(*(void *)(a1 + 9248) + 221LL);
        int v21 = *(unsigned __int8 *)(v1 + 9436);
        *(_DWORD *)std::string buf = 67109890;
        int v27 = v18;
        __int16 v28 = 2082;
        char v29 = &v24;
        __int16 v30 = 1024;
        int v31 = v20;
        __int16 v32 = 1024;
        int v33 = v21;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "HFPStereo config policy picked mono, currCodec %u, device %{public}s, game %u, sfer %d",  buf,  0x1Eu);
      }

      *uint64_t v3 = 257;
    }
  }

uint64_t sub_4A790(uint64_t a1, uint64_t a2, int *a3, char *a4)
{
  char v4 = 0;
  int v5 = *a3;
  uint64_t result = 2003332927LL;
  if (*a3 > 1935762291)
  {
    if (v5 > 1936092512)
    {
      if (v5 <= 1937007733)
      {
        if (v5 != 1936092513)
        {
          if (v5 != 1936092532) {
            return result;
          }
          goto LABEL_22;
        }

uint64_t sub_4A8BC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, int *a6)
{
  int v8 = *a3;
  int v9 = 4;
  uint64_t result = 2003332927LL;
  if (*a3 <= 1935762291)
  {
    if (v8 > 1853059618)
    {
      if (v8 <= 1885762591)
      {
        if (v8 == 1853059619)
        {
          int v9 = 16 * (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1216LL))(a1);
        }

        else
        {
          if (v8 != 1870098020) {
            return result;
          }
          int v9 = 0;
        }

        goto LABEL_33;
      }

      if (v8 != 1885762592)
      {
        if (v8 != 1885762657) {
          return result;
        }
        goto LABEL_27;
      }

      goto LABEL_31;
    }

    BOOL v11 = v8 == 1650682995 || v8 == 1668047219;
    int v12 = 1819569763;
    goto LABEL_20;
  }

  if (v8 <= 1936092512)
  {
    BOOL v11 = v8 == 1935762292 || v8 == 1935894638;
    int v12 = 1935960434;
LABEL_20:
    if (v11 || v8 == v12) {
      goto LABEL_33;
    }
    return result;
  }

  if (v8 > 1937007733)
  {
    if (v8 == 1937007734 || v8 == 1952805485) {
      goto LABEL_33;
    }
  }

  else
  {
    if (v8 == 1936092513)
    {
LABEL_27:
      uint64_t v14 = sub_F4FC(a2);
      int v9 = 56 * (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1200LL))(a1, v14);
LABEL_33:
      uint64_t result = 0LL;
      *a6 = v9;
      return result;
    }

    if (v8 == 1936092532)
    {
LABEL_31:
      int v9 = 40;
      goto LABEL_33;
    }
  }

  return result;
}

uint64_t sub_4AA68( void *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int *a8, uint64_t a9)
{
  int v11 = *a3;
  uint64_t v12 = 2003332927LL;
  if (*a3 <= 1935762291)
  {
    if (v11 > 1870098019)
    {
      if (v11 == 1870098020)
      {
        uint64_t v12 = 0LL;
        *a8 = 0;
        return v12;
      }

      if (v11 == 1885762592) {
        goto LABEL_31;
      }
      if (v11 != 1885762657) {
        return v12;
      }
      goto LABEL_23;
    }

    switch(v11)
    {
      case 1650682995:
        if (a7 <= 3)
        {
          uint64_t v12 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FCDC();
          }
          return v12;
        }

        uint64_t v12 = 0LL;
        int v21 = 1634689642;
        break;
      case 1668047219:
        if (a7 <= 3)
        {
          uint64_t v12 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FD08();
          }
          return v12;
        }

        uint64_t v12 = 0LL;
        int v21 = 1634956402;
        break;
      case 1819569763:
        if (a7 > 3)
        {
LABEL_51:
          uint64_t v12 = 0LL;
          *(_DWORD *)a9 = 0;
LABEL_62:
          int v16 = 4;
          goto LABEL_63;
        }

        uint64_t v12 = 561211770LL;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          return v12;
        }
LABEL_13:
        sub_5FDE4();
        return v12;
      default:
        return v12;
    }

LABEL_59:
    *(_DWORD *)a9 = v21;
    goto LABEL_62;
  }

  if (v11 <= 1936092512)
  {
    switch(v11)
    {
      case 1935762292:
        if (a7 <= 3)
        {
          uint64_t v12 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FD60();
          }
          return v12;
        }

        uint64_t v12 = 0LL;
        int v21 = *(unsigned __int8 *)(a2 + 12);
        break;
      case 1935894638:
        if (a7 <= 3)
        {
          uint64_t v12 = 561211770LL;
          if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            return v12;
          }
          goto LABEL_13;
        }

        uint64_t v12 = 0LL;
        int v21 = 1;
        break;
      case 1935960434:
        if (a7 <= 3)
        {
          uint64_t v12 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FD8C();
          }
          return v12;
        }

        int v20 = sub_F4FC(a2);
        goto LABEL_61;
      default:
        return v12;
    }

    goto LABEL_59;
  }

  if (v11 > 1937007733)
  {
    if (v11 != 1937007734)
    {
      if (v11 != 1952805485) {
        return v12;
      }
      if (a7 <= 3)
      {
        uint64_t v12 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FDB8();
        }
        return v12;
      }

      goto LABEL_51;
    }

    if (a7 <= 3)
    {
      uint64_t v12 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FD34();
      }
      return v12;
    }

    int v20 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
LABEL_61:
    uint64_t v12 = 0LL;
    *(_DWORD *)a9 = v20;
    goto LABEL_62;
  }

  if (v11 != 1936092513)
  {
    if (v11 != 1936092532) {
      return v12;
    }
LABEL_31:
    if (a7 <= 0x27)
    {
      uint64_t v12 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FE10();
      }
      return v12;
    }

    uint64_t v17 = a1[1140];
    if (v17)
    {
      uint64_t v18 = sub_F4FC(a2);
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 792LL))(v23, v17, v18);
      uint64_t v12 = 0LL;
      __int128 v19 = v23[1];
      *(_OWORD *)a9 = v23[0];
      *(_OWORD *)(a9 + 16) = v19;
      *(void *)(a9 + 32) = v24;
      int v16 = 40;
      goto LABEL_63;
    }

    uint64_t v12 = 1937010544LL;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_5FE3C();
    }
    return v12;
  }

uint64_t sub_4AF04(void *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v10 = *a3;
  if (*a3 == 1885762592 || v10 == 1936092532)
  {
    if (a6 != 40)
    {
      uint64_t v26 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FEEC();
      }
      return v26;
    }

    if (*(_DWORD *)(a7 + 8) != 1819304813)
    {
      uint64_t v26 = 560226676LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FEC0();
      }
      return v26;
    }

    uint64_t v13 = a1[1140];
    if (!v13)
    {
      uint64_t v26 = 1937010544LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FE94();
      }
      return v26;
    }

    uint64_t v35 = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    uint64_t v15 = sub_F4FC(a2);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 792LL))(&v33, v13, v15);
    double v16 = *(double *)&v33;
    double v17 = *(double *)a7;
    uint64_t v18 = a1[1140];
    uint64_t v19 = sub_F4FC(a2);
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(*(void *)v18 + 1248LL))(v18, v19, v16, v17);
    int v21 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)__int16 v37 = a8;
      *(_WORD *)&v37[4] = 2048;
      *(double *)&_BYTE v37[6] = v16;
      __int16 v38 = 2048;
      double v39 = v17;
      __int16 v40 = 1024;
      int v41 = v20;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "[ %d ] Request for physical format change %f -> %f format change supported %d",  buf,  0x22u);
    }

    if ((v20 & 1) != 0)
    {
      v31[0] = v33;
      v31[1] = v34;
      uint64_t v32 = v35;
      __int128 v22 = *(_OWORD *)(a7 + 16);
      v29[0] = *(_OWORD *)a7;
      v29[1] = v22;
      uint64_t v30 = *(void *)(a7 + 32);
      uint64_t v23 = sub_F4FC(a2);
      if (((*(uint64_t (**)(void *, _OWORD *, _OWORD *, uint64_t))(*a1 + 1256LL))(a1, v31, v29, v23) & 1) == 0)
      {
        int v27 = (os_log_s *)qword_95B00;
        uint64_t v26 = 0LL;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return v26;
        }
        *(_WORD *)std::string buf = 0;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "Requesting For same format as current, nothing to do",  buf,  2u);
        return 0LL;
      }

      uint64_t v24 = (os_log_s *)qword_95B00;
      if (v17 != v16)
      {
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(double *)__int16 v37 = v17;
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEFAULT, "kAudioDevicePropertyNominalSampleRate %f", buf, 0xCu);
        }

        (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 240LL))(a1, 1853059700LL, (uint64_t)v17);
        return 0LL;
      }
    }

    else
    {
      uint64_t v24 = (os_log_s *)qword_95B00;
    }

    uint64_t v26 = 1852797029LL;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "We do not support changing to this format at this moment",  buf,  2u);
    }

    return v26;
  }

  if (v10 != 1935762292) {
    return 2003332927LL;
  }
  if (a6 == 4)
  {
    int v25 = *(_DWORD *)a7 != 0;
    if (*(unsigned __int8 *)(a2 + 12) != v25)
    {
      uint64_t v26 = 0LL;
      *(_BYTE *)(a2 + 12) = v25;
      return v26;
    }

    return 0LL;
  }

  uint64_t v26 = 561211770LL;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
    sub_5F998();
  }
  return v26;
}

BOOL sub_4B2E4(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a1 + 9160) && *(void *)(a1 + 9256) == 1953719151LL)
  {
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v7 = v6 == (*(unsigned int (**)(void))(**(void **)(a1 + 9160) + 16LL))(*(void *)(a1 + 9160));
  }

  else
  {
    BOOL v7 = 0LL;
  }

  if (*(void *)(a1 + 9144))
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v9 = v8 == (*(uint64_t (**)(void))(**(void **)(a1 + 9144) + 16LL))(*(void *)(a1 + 9144));
  }

  else
  {
    BOOL v9 = 0;
  }

  if (*(void *)(a1 + 9152))
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v11 = v10 == (*(uint64_t (**)(void))(**(void **)(a1 + 9152) + 16LL))(*(void *)(a1 + 9152));
  }

  else
  {
    BOOL v11 = 0;
  }

  int v12 = *a3;
  if (*a3 <= 1818453109)
  {
    if (v12 > 1668047218)
    {
      if (v12 != 1668047219 && v12 != 1668506480)
      {
        BOOL result = 0LL;
        if (v12 != 1818453106) {
          return result;
        }
LABEL_27:
        if (v9)
        {
          int v15 = a3[1];
          int v16 = 1869968496;
          goto LABEL_33;
        }

        return 0LL;
      }
    }

    else if (v12 != 1650682995)
    {
      if (v12 != 1650685548)
      {
        BOOL result = 0LL;
        int v14 = 1667591277;
        goto LABEL_31;
      }

      if (!v11) {
        return 0LL;
      }
    }

uint64_t sub_4B54C(void **a1, uint64_t a2, int *a3, char *a4)
{
  if (a1[1145])
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v9 = v8 == (*(unsigned int (**)(void *))(*a1[1145] + 16LL))(a1[1145]);
  }

  else
  {
    BOOL v9 = 0;
  }

  if (a1[1143])
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v11 = v10 == (*(unsigned int (**)(void *))(*a1[1143] + 16LL))(a1[1143]);
  }

  else
  {
    BOOL v11 = 0;
  }

  if (a1[1144])
  {
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v13 = v12 == (*(unsigned int (**)(void *))(*a1[1144] + 16LL))(a1[1144]);
  }

  else
  {
    BOOL v13 = 0;
  }

  char v14 = 0;
  uint64_t result = 2003332927LL;
  int v16 = *a3;
  if (*a3 > 1818456931)
  {
    if (v16 <= 1935892840)
    {
      if (v16 == 1818456932) {
        goto LABEL_29;
      }
      if (v16 == 1818456950) {
        goto LABEL_37;
      }
      int v17 = 1870098020;
    }

    else
    {
      if (v16 <= 1935894893)
      {
        if (v16 != 1935892841)
        {
          if (v16 != 1935893353) {
            return result;
          }
          char v14 = v9;
        }

        goto LABEL_39;
      }

      if (v16 == 1935894894)
      {
LABEL_39:
        uint64_t result = 0LL;
        *a4 = v14;
        return result;
      }

      int v17 = 1937007734;
    }

LABEL_35:
    if (v16 != v17) {
      return result;
    }
    goto LABEL_39;
  }

  if (v16 > 1668506479)
  {
    if ((v16 - 1818453106) >= 2)
    {
      if (v16 == 1668506480) {
        goto LABEL_39;
      }
      if (v16 != 1818453110) {
        return result;
      }
LABEL_37:
      if (!v11) {
        return result;
      }
      goto LABEL_38;
    }

uint64_t sub_4B7A8(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*(void *)(a1 + 9160) && *(void *)(a1 + 9256) == 1953719151LL)
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v11 = v10 == (*(uint64_t (**)(void))(**(void **)(a1 + 9160) + 16LL))(*(void *)(a1 + 9160));
  }

  else
  {
    BOOL v11 = 0;
  }

  if (*(void *)(a1 + 9144))
  {
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v13 = v12 == (*(unsigned int (**)(void))(**(void **)(a1 + 9144) + 16LL))(*(void *)(a1 + 9144));
  }

  else
  {
    BOOL v13 = 0;
  }

  if (*(void *)(a1 + 9152))
  {
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    BOOL v15 = v14 == (*(unsigned int (**)(void))(**(void **)(a1 + 9152) + 16LL))(*(void *)(a1 + 9152));
  }

  else
  {
    BOOL v15 = 0;
  }

  uint64_t result = 2003332927LL;
  int v17 = *a3;
  int v18 = 4;
  if (*a3 > 1818453109)
  {
    if (v17 <= 1935892840)
    {
      if (v17 <= 1818456949)
      {
        if (v17 != 1818453110)
        {
          unsigned __int16 v19 = 29540;
LABEL_33:
          int v20 = v19 | 0x6C630000;
          goto LABEL_36;
        }

        if (!v13) {
          return result;
        }
LABEL_37:
        uint64_t result = 0LL;
        *a6 = v18;
        return result;
      }

      if (v17 != 1818456950)
      {
        if (v17 != 1870098020) {
          return result;
        }
        int v18 = 0;
        goto LABEL_37;
      }

      if (!v13) {
        return result;
      }
LABEL_48:
      int v18 = 4;
      goto LABEL_37;
    }

    if (v17 > 1935894893)
    {
      if (v17 != 1935894894)
      {
        int v20 = 1937007734;
LABEL_36:
        if (v17 != v20) {
          return result;
        }
        goto LABEL_37;
      }

      if (v11)
      {
        int v18 = 8;
        goto LABEL_37;
      }

      return 0LL;
    }

    if (v17 != 1935892841)
    {
      if (v17 != 1935893353) {
        return result;
      }
      if (v11) {
        goto LABEL_48;
      }
      return 0LL;
    }

    if (!v11) {
      return 0LL;
    }
LABEL_46:
    int v18 = 16;
    goto LABEL_37;
  }

  if (v17 <= 1668047218)
  {
    if (v17 != 1650682995)
    {
      if (v17 != 1650685548)
      {
        int v20 = 1667591277;
        goto LABEL_36;
      }

      if (!v15) {
        return result;
      }
    }

    goto LABEL_37;
  }

  if (v17 <= 1818453105)
  {
    if (v17 != 1668047219)
    {
      int v20 = 1668506480;
      goto LABEL_36;
    }

    goto LABEL_37;
  }

  if (v17 != 1818453106)
  {
    unsigned __int16 v19 = 25715;
    goto LABEL_33;
  }

  if (v13) {
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_4BA50(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  if (*(void *)(a1 + 9160) && *(void *)(a1 + 9256) == 1953719151LL)
  {
    int v15 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16LL))(a2);
    BOOL v16 = v15 == (*(uint64_t (**)(void))(**(void **)(a1 + 9160) + 16LL))(*(void *)(a1 + 9160));
  }

  else
  {
    BOOL v16 = 0;
  }

  if (*(void *)(a1 + 9144))
  {
    int v17 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16LL))(a2);
    BOOL v18 = v17 == (*(uint64_t (**)(void))(**(void **)(a1 + 9144) + 16LL))(*(void *)(a1 + 9144));
  }

  else
  {
    BOOL v18 = 0;
  }

  if (*(void *)(a1 + 9152))
  {
    int v19 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16LL))(a2);
    BOOL v20 = v19 == (*(uint64_t (**)(void))(**(void **)(a1 + 9152) + 16LL))(*(void *)(a1 + 9152));
  }

  else
  {
    BOOL v20 = 0;
  }

  uint64_t v21 = 2003332927LL;
  int v22 = *a3;
  if (*a3 > 1818453109)
  {
    if (v22 <= 1935892840)
    {
      if (v22 > 1818456949)
      {
        if (v22 != 1818456950)
        {
          if (v22 == 1870098020)
          {
            uint64_t v21 = 0LL;
            *a7 = 0;
          }

          return v21;
        }

        if (a6 <= 3)
        {
          uint64_t v21 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FFF4();
          }
          return v21;
        }

        if (!*(void *)(a1 + 9120))
        {
          uint64_t v21 = 1937010544LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_60020();
          }
          return v21;
        }

        if (!v18)
        {
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_6004C();
          }
          return v21;
        }

        int v34 = sub_340E8();
        uint64_t v35 = **(void **)(a1 + 9120);
        if (v34)
        {
          (*(void (**)(void))(v35 + 920))();
          goto LABEL_124;
        }

        __int16 v38 = *(float (**)(void))(v35 + 912);
      }

      else
      {
        if (v22 != 1818453110)
        {
          if (v22 == 1818456932)
          {
            if (a6 <= 3)
            {
              uint64_t v21 = 561211770LL;
              if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
                sub_60180();
              }
              return v21;
            }

            uint64_t v25 = *(void *)(a1 + 9120);
            if (v25)
            {
              float v26 = *(float *)a8;
              float v27 = 0.0;
              if (*(float *)a8 < 0.0 || (float v27 = 1.0, v26 > 1.0))
              {
                *(float *)a8 = v27;
                float v26 = v27;
              }

              goto LABEL_86;
            }

            return 560227702LL;
          }

          return v21;
        }

        if (a6 <= 3)
        {
          uint64_t v21 = 561211770LL;
          if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            return v21;
          }
          goto LABEL_43;
        }

        if (!*(void *)(a1 + 9120))
        {
          uint64_t v21 = 1937010544LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_600A4();
          }
          return v21;
        }

        if (!v18)
        {
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_600D0();
          }
          return v21;
        }

        int v31 = sub_340E8();
        uint64_t v32 = **(void **)(a1 + 9120);
        if (v31)
        {
          (*(void (**)(void))(v32 + 920))();
          uint64_t v25 = a1;
LABEL_86:
          float v30 = sub_7964(v25, v26);
          goto LABEL_124;
        }

        __int16 v38 = *(float (**)(void))(v32 + 928);
      }

      float v30 = v38();
      goto LABEL_124;
    }

    if (v22 > 1935894893)
    {
      if (v22 != 1935894894)
      {
        if (v22 == 1937007734)
        {
          if (a6 <= 3)
          {
            uint64_t v21 = 561211770LL;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
              sub_5FF70();
            }
            return v21;
          }

          uint64_t v21 = 0LL;
          *(_DWORD *)a8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
          goto LABEL_125;
        }

        return v21;
      }
    }

    else if (v22 != 1935892841 && v22 != 1935893353)
    {
      return v21;
    }

    uint64_t v23 = *(void *)(a1 + 9120);
    if (v23)
    {
      if (v16) {
        return (*(uint64_t (**)(uint64_t, _DWORD *, int *, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v23 + 144LL))( v23,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
      }
      return 0LL;
    }

    uint64_t v21 = 1937010544LL;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      return v21;
    }
LABEL_53:
    sub_60128();
    return v21;
  }

  if (v22 <= 1668047218)
  {
    switch(v22)
    {
      case 1650682995:
        if (a6 <= 3)
        {
          uint64_t v21 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FF18();
          }
          return v21;
        }

        uint64_t v21 = 0LL;
        if (v16) {
          int v28 = 1685287523;
        }
        else {
          int v28 = 1818588780;
        }
        break;
      case 1650685548:
        if (a6 <= 3)
        {
          uint64_t v21 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_601AC();
          }
          return v21;
        }

        if (!v20) {
          return v21;
        }
        uint64_t v21 = 0LL;
        int v28 = *(_DWORD *)(*(void *)(a1 + 9248) + 152LL);
        break;
      case 1667591277:
        if (a6 <= 3)
        {
          uint64_t v21 = 561211770LL;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
            sub_5FFC8();
          }
          return v21;
        }

        uint64_t v21 = 0LL;
        int v28 = a2[4];
        break;
      default:
        return v21;
    }

    goto LABEL_100;
  }

  if (v22 <= 1818453105)
  {
    if (v22 == 1668047219)
    {
      if (a6 <= 3)
      {
        uint64_t v21 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_5FF44();
        }
        return v21;
      }

      if (v16 || v18 || v20)
      {
        if (v20) {
          int v33 = 1836414053;
        }
        else {
          int v33 = 1685287523;
        }
        if (v18) {
          int v33 = 1986817381;
        }
        *(_DWORD *)a8 = v33;
      }

      uint64_t v21 = 0LL;
      goto LABEL_125;
    }

    if (v22 != 1668506480) {
      return v21;
    }
    if (a6 <= 3)
    {
      uint64_t v21 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5FF9C();
      }
      return v21;
    }

    uint64_t v21 = 0LL;
    int v28 = a2[3];
LABEL_100:
    *(_DWORD *)a8 = v28;
LABEL_125:
    int v37 = 4;
LABEL_126:
    *a7 = v37;
    return v21;
  }

  if (v22 == 1818453106)
  {
    if (a6 <= 0xF)
    {
      uint64_t v21 = 561211770LL;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_600FC();
      }
      return v21;
    }

    uint64_t v36 = *(void *)(a1 + 9120);
    if (v36)
    {
      if (!v18)
      {
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_60154();
        }
        return v21;
      }

      *(double *)a8 = (*(float (**)(uint64_t))(*(void *)v36 + 944LL))(v36);
      uint64_t v21 = 0LL;
      *(double *)(a8 + _Block_object_dispose(va, 8) = (*(float (**)(void))(**(void **)(a1 + 9120) + 952LL))(*(void *)(a1 + 9120));
      int v37 = 16;
      goto LABEL_126;
    }

    uint64_t v21 = 1937010544LL;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      return v21;
    }
    goto LABEL_53;
  }

  if (v22 == 1818453107)
  {
    if (a6 > 3)
    {
      uint64_t v29 = *(void *)(a1 + 9120);
      if (v29)
      {
        float v30 = sub_7938(v29, *(float *)a8);
LABEL_124:
        uint64_t v21 = 0LL;
        *(float *)a8 = v30;
        goto LABEL_125;
      }

      return 560227702LL;
    }

    uint64_t v21 = 561211770LL;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
LABEL_43:
    }
      sub_60078();
  }

  return v21;
}

uint64_t sub_4C26C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, int a6, float *a7, int a8)
{
  if (*(void *)(a1 + 9160) && *(void *)(a1 + 9256) == 1953719151LL)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    (*(void (**)(void))(**(void **)(a1 + 9160) + 16LL))(*(void *)(a1 + 9160));
  }

  if (!*(void *)(a1 + 9144))
  {
    if (!*(void *)(a1 + 9152)) {
      return 0LL;
    }
    BOOL v16 = 0;
LABEL_10:
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
    int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 9152) + 16LL))(*(void *)(a1 + 9152));
    if (v16) {
      goto LABEL_11;
    }
    if (v17 == v18)
    {
      int v32 = *a3;
      if (*a3 != 1650685548)
      {
        uint64_t v34 = 2003332927LL;
        int v48 = (os_log_s *)qword_95B00;
        if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
          return v34;
        }
        v52.i32[0] = a3[1];
        int16x8_t v53 = (int16x8_t)vmovl_u8(v52);
        *(int16x4_t *)v53.i8 = vrev64_s16(*(int16x4_t *)v53.i8);
        LODWORD(v71) = vmovn_s16(v53).u32[0];
        BYTE4(v71) = 0;
        char v67 = HIBYTE(v32);
        char v68 = BYTE2(v32);
        char v69 = BYTE1(v32);
        __int16 v70 = v32;
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = &v71;
        *(_WORD *)&_BYTE buf[12] = 2082;
        *(void *)int v74 = &v67;
        uint64_t v51 = "Unknown muteControl property set for scope: %{public}s / element: %{public}s";
        goto LABEL_51;
      }

      *(float *)(*(void *)(a1 + 9248) + 152LL) = *a7;
      if (sub_340E8())
      {
        strcpy(buf, "etumptuo");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 248LL))(a1, buf);
      }

      int v33 = (os_log_s *)qword_95B00;
      uint64_t v34 = 0LL;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
        return v34;
      }
      uint64_t v35 = *(void *)(a1 + 200);
      int v36 = *(_DWORD *)(*(void *)(a1 + 9248) + 152LL);
      *(_DWORD *)std::string buf = 138412546;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)int v74 = v36;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEFAULT, "Set muteControl for mAudioDeviceUID %@ to %d", buf, 0x12u);
    }

    return 0LL;
  }

  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
  int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 9144) + 16LL))(*(void *)(a1 + 9144));
  BOOL v16 = v14 == v15;
  if (*(void *)(a1 + 9152)) {
    goto LABEL_10;
  }
  if (v14 != v15) {
    return 0LL;
  }
LABEL_11:
  int v19 = *a3;
  if (*a3 != 1818453110)
  {
    if (v19 == 1818456950)
    {
      if (a6 == 4)
      {
        if (*(void *)(a1 + 9120))
        {
          uint64_t v71 = 0LL;
          uint64_t v72 = 0LL;
          sub_52B28((uint64_t)&v71, a1 + 552);
          float v20 = *a7;
          if (sub_340E8())
          {
            float v21 = (*(float (**)(void))(**(void **)(a1 + 9120) + 912LL))(*(void *)(a1 + 9120));
            int v22 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
              int v24 = a3[2];
              *(_DWORD *)std::string buf = 67110144;
              *(_DWORD *)&uint8_t buf[4] = a8;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v23;
              *(_WORD *)int v74 = 2048;
              *(double *)&_DWORD v74[2] = v21;
              __int16 v75 = 2048;
              double v76 = v20;
              __int16 v77 = 1024;
              int v78 = v24;
              _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "Volume update from PID = %d Control ID = %d Scalar volume %f -> %f Element = %d",  buf,  0x28u);
            }

            float v25 = (*(float (**)(void, uint64_t, float))(**(void **)(a1 + 9120) + 976LL))( *(void *)(a1 + 9120),  2LL,  *a7);
            float v20 = v25;
            BOOL v26 = v25 == 0.0;
            BOOL v27 = v25 != 0.0;
            if (v21 == 0.0) {
              BOOL v26 = 0;
            }
            else {
              BOOL v27 = 0;
            }
            int v28 = v27 || v26;
            if (v21 == v25) {
              int v29 = 0;
            }
            else {
              int v29 = v28;
            }
            float v30 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              double v31 = *a7;
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = "Right ";
              *(_WORD *)&_BYTE buf[12] = 2048;
              *(double *)int v74 = v31;
              _os_log_impl(&dword_0, v30, OS_LOG_TYPE_DEFAULT, "%{public}s : Sclar volume from CA %f ", buf, 0x16u);
            }
          }

          else
          {
            uint64_t v54 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 134217984;
              *(double *)&uint8_t buf[4] = v20;
              _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEFAULT, "Volume Sclar volume from CA %f", buf, 0xCu);
            }

            int v29 = 0;
          }

          uint64_t v55 = *(void *)(a1 + 9120);
          (*(void (**)(uint64_t, float))(*(void *)v55 + 360LL))(v55, v20);
          (*(void (**)(uint64_t))(*(void *)v55 + 936LL))(v55);
          (*(void (**)(void))(**(void **)(a1 + 9120) + 928LL))(*(void *)(a1 + 9120));
          (*(void (**)(uint64_t))(*(void *)a1 + 480LL))(a1);
          if ((sub_340E8() & v29) == 1)
          {
            uint64_t v56 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_0, v56, OS_LOG_TYPE_DEFAULT, "Notify that Mute changed", buf, 2u);
            }

            strcpy(buf, "etumptuo");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 248LL))(a1, buf);
          }

          sub_52BF4((uint64_t)&v71);
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 296LL))(a1))
          {
            uint64_t v57 = qword_962E8;
            int v58 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 16LL))(*(void *)(a1 + 9120));
            if (sub_3DD60(v57, v58))
            {
              sub_3DC08(qword_962E8);
              (*(void (**)(void))(**(void **)(a1 + 9120) + 912LL))(*(void *)(a1 + 9120));
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 472LL))(a1, 1LL);
            }
          }

          int v59 = a3[1];
          if (v59 != 1735159650 || a3[2])
          {
            int v60 = (os_log_s *)qword_95B00;
            if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
            {
              char v67 = HIBYTE(v59);
              char v68 = BYTE2(v59);
              char v69 = BYTE1(v59);
              __int16 v70 = v59;
              v61.i32[0] = a3[2];
              int16x8_t v64 = (int16x8_t)vmovl_u8(v61);
              *(int16x4_t *)v64.i8 = vrev64_s16(*(int16x4_t *)v64.i8);
              unsigned __int32 v65 = vmovn_s16(v64).u32[0];
              char v66 = 0;
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = &v67;
              *(_WORD *)&_BYTE buf[12] = 2082;
              *(void *)int v74 = &v65;
              _os_log_error_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "kAudioDevicePropertyVolumeScalar is setting wrong scope: %{public}s / element: %{public}s",  buf,  0x16u);
            }
          }

          goto LABEL_75;
        }

        uint64_t v34 = 1937010544LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_601D8();
        }
      }

      else
      {
        uint64_t v34 = 561211770LL;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
          sub_60204();
        }
      }

      return v34;
    }

    uint64_t v34 = 2003332927LL;
    int v48 = (os_log_s *)qword_95B00;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
      return v34;
    }
    v49.i32[0] = a3[1];
    int16x8_t v50 = (int16x8_t)vmovl_u8(v49);
    *(int16x4_t *)v50.i8 = vrev64_s16(*(int16x4_t *)v50.i8);
    LODWORD(v71) = vmovn_s16(v50).u32[0];
    BYTE4(v71) = 0;
    char v67 = HIBYTE(v19);
    char v68 = BYTE2(v19);
    char v69 = BYTE1(v19);
    __int16 v70 = v19;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = &v71;
    *(_WORD *)&_BYTE buf[12] = 2082;
    *(void *)int v74 = &v67;
    uint64_t v51 = "Unknown volumeControl property set for scope: %{public}s / element: %{public}s";
LABEL_51:
    _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEFAULT, v51, buf, 0x16u);
    return v34;
  }

  if (a6 == 4)
  {
    int v37 = (os_log_s *)qword_95B00;
    if (*(void *)(a1 + 9120))
    {
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
        double v39 = *a7;
        int v40 = a3[2];
        *(_DWORD *)std::string buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = a8;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v38;
        *(_WORD *)int v74 = 2048;
        *(double *)&_DWORD v74[2] = v39;
        __int16 v75 = 1024;
        LODWORD(v76) = v40;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEFAULT,  "kAudioLevelControlPropertyDecibelValue update from PID = %d Control ID = %d DBM volume %f  Element = %d",  buf,  0x1Eu);
      }

      uint64_t v71 = 0LL;
      uint64_t v72 = 0LL;
      sub_52B28((uint64_t)&v71, a1 + 552);
      int v41 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        double v42 = *a7;
        *(_DWORD *)std::string buf = 134217984;
        *(double *)&uint8_t buf[4] = v42;
        _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEFAULT, "DB volume from CA  %f", buf, 0xCu);
      }

      (*(void (**)(void, float))(**(void **)(a1 + 9120) + 936LL))(*(void *)(a1 + 9120), *a7);
      (*(void (**)(void))(**(void **)(a1 + 9120) + 928LL))(*(void *)(a1 + 9120));
      (*(void (**)(uint64_t))(*(void *)a1 + 480LL))(a1);
      sub_52BF4((uint64_t)&v71);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 296LL))(a1))
      {
        uint64_t v43 = qword_962E8;
        int v44 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 16LL))(*(void *)(a1 + 9120));
        if (sub_3DD60(v43, v44))
        {
          sub_3DC08(qword_962E8);
          (*(void (**)(void))(**(void **)(a1 + 9120) + 912LL))(*(void *)(a1 + 9120));
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 472LL))(a1, 1LL);
        }
      }

      int v45 = a3[1];
      if (v45 != 1735159650 || a3[2])
      {
        CFRange v46 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
        {
          char v67 = HIBYTE(v45);
          char v68 = BYTE2(v45);
          char v69 = BYTE1(v45);
          __int16 v70 = v45;
          v47.i32[0] = a3[2];
          int16x8_t v63 = (int16x8_t)vmovl_u8(v47);
          *(int16x4_t *)v63.i8 = vrev64_s16(*(int16x4_t *)v63.i8);
          unsigned __int32 v65 = vmovn_s16(v63).u32[0];
          char v66 = 0;
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = &v67;
          *(_WORD *)&_BYTE buf[12] = 2082;
          *(void *)int v74 = &v65;
          _os_log_error_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "kAudioDevicePropertyVolumeDecibels is setting wrong scope: %{public}s / element: %{public}s",  buf,  0x16u);
        }
      }

LABEL_75:
      strcpy(buf, "vsclbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_1B7BC(a2, (__int32 *)buf);
      strcpy(buf, "vdclbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_1B7BC(a2, (__int32 *)buf);
LABEL_76:
      sub_52C5C(&v71);
      return 0LL;
    }

    uint64_t v34 = 1937010544LL;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_60230();
    }
  }

  else
  {
    uint64_t v34 = 561211770LL;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_6025C();
    }
  }

  return v34;
}

void sub_4CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_4CD38(uint64_t a1, int a2)
{
  int v3 = a2;
  uint64_t v4 = 1869968496LL;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 248LL))(a1, &v3);
}

uint64_t sub_4CD70(uint64_t a1, uint64_t a2, __int32 a3)
{
  __int32 v4 = a3;
  uint64_t v5 = 1735159650LL;
  return sub_1B7BC(a2, &v4);
}

uint64_t sub_4CDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = a2;
  BOOL v7 = (_BYTE *)(a1 + 9272);
  int v8 = *(unsigned __int8 *)(a1 + 9272);
  if (a2 > 1853059699)
  {
    if (a2 <= 1885762656)
    {
      if (a2 == 1853059700)
      {
        double v26 = (double)a3;
        double v35 = (double)a3;
        BOOL v27 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(double *)&uint8_t buf[4] = (double)a3;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice::PerformDeviceConfigurationChange [sample rate = %f]",  buf,  0xCu);
        }

        int v29 = sub_434B0((void *)a1, &v35, v28);
        uint64_t v30 = *(void *)(a1 + 9120);
        if (v30) {
          (*(void (**)(uint64_t, double))(*(void *)v30 + 512LL))(v30, v26);
        }
        double v31 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          int v32 = "NO";
          if (v29) {
            int v32 = "YES";
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v32;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEFAULT,  "Perform Config change : kAudioDevicePropertyNominalSampleRate Upate pending shedule Profile Updated %{public}s",  buf,  0xCu);
        }

        *BOOL v7 = 0;
        sub_4D4F0(a1);
      }

      else
      {
        if (a2 != 1885762592) {
          goto LABEL_32;
        }
        *BOOL v7 = 0;
        int v14 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "Perform Config change : kAudioStreamPropertyPhysicalFormat Upate pending shedule",  buf,  2u);
        }
      }

      strcpy(buf, "pcvabolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 248LL))(a1, buf);
      goto LABEL_61;
    }

    if (a2 == 1885762657)
    {
      int v18 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "kAudioStreamPropertyAvailablePhysicalFormats Config change",  buf,  2u);
      }

      uint64_t v19 = *(void *)(a1 + 9120);
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 544LL))(v19);
      }
      goto LABEL_61;
    }

    if (a2 == 1937009955)
    {
      BOOL v20 = a3 != 0;
      uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1032LL))(*(void *)(a1 + 9120));
      (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 1240LL))(a1, v20, v21);
      sub_42C90(a1);
      int v22 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 9128) + 16LL))(*(void *)(a1 + 9128));
        strcpy((char *)&v35, "stm#");
        *(_DWORD *)std::string buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v23;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = &v35;
        _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "Object %u:Perform ConfigurationChange on property %{public}s",  buf,  0x12u);
      }

      goto LABEL_61;
    }

    if (a2 != 1969779572)
    {
LABEL_32:
      int v17 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
      {
        LOBYTE(v35) = HIBYTE(v5);
        BYTE1(v35) = BYTE2(v5);
        BYTE2(v35) = BYTE1(v5);
        *(_WORD *)((char *)&v35 + 3) = v5;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = &v35;
        _os_log_error_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "PerformDeviceConfigurationChange on property %{public}s, but we're doing nothing.",  buf,  0xCu);
      }

      goto LABEL_61;
    }

    if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 992LL))(a1))
    {
      sub_52BF4(a4);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 9480));
      if (pthread_cond_timedwait_relative_np( (pthread_cond_t *)(a1 + 9544),  (pthread_mutex_t *)(a1 + 9480),  (const timespec *)(a1 + 9592)) == 60 && os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
      {
        sub_60288();
      }

      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 9480));
      sub_52B54(a4);
      BOOL v11 = (os_log_s *)qword_95B00;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_57;
      }
      *(_WORD *)std::string buf = 0;
      int v12 = "HFPStereo output performFormatChange IOs all stopped";
    }

    else
    {
      BOOL v11 = (os_log_s *)qword_95B00;
      if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
LABEL_57:
        sub_4D618(a1);
        uint64_t v33 = *(void *)(a1 + 9096);
        if (v33) {
          sub_7FE8(v33);
        }
        *(_OWORD *)std::string buf = xmmword_659E0;
        *(_OWORD *)&uint8_t buf[16] = xmmword_659F0;
        __int128 v37 = xmmword_65B30;
        __int128 v38 = xmmword_65B40;
        __int128 v39 = xmmword_65B50;
        __int128 v40 = xmmword_65B60;
        BOOL v9 = **(void (***)(void))(qword_962E8 + 144);
        goto LABEL_60;
      }

      *(_WORD *)std::string buf = 0;
      int v12 = "HFPStereo output performFormatChange IOs already stopped";
    }

    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    goto LABEL_57;
  }

  if (a2 <= 1702391922)
  {
    if (a2 == 1650549620)
    {
      int v24 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "kBluetoothAudioDevicePropertyAudioContentType Config change %d",  buf,  8u);
      }

      uint64_t v25 = *(void *)(a1 + 9120);
      if (v25)
      {
        BOOL v9 = *(void (**)(void))(*(void *)v25 + 536LL);
        goto LABEL_60;
      }

      goto LABEL_61;
    }

    if (a2 == 1650750576)
    {
      sub_42B1C(a1, *(void *)(a1 + 9256), a3);
      sub_4D618(a1);
      uint64_t v13 = *(void *)(a1 + 9096);
      if (v13) {
        sub_7FE8(v13);
      }
      *BOOL v7 = 0;
      *(_OWORD *)std::string buf = xmmword_659E0;
      *(_OWORD *)&uint8_t buf[16] = xmmword_659F0;
      __int128 v37 = xmmword_65B30;
      __int128 v38 = xmmword_65B40;
      __int128 v39 = xmmword_65B50;
      LODWORD(v40) = 0;
      BOOL v9 = **(void (***)(void))(qword_962E8 + 144);
      goto LABEL_60;
    }

    goto LABEL_32;
  }

  if (a2 != 1702391923)
  {
    if (a2 == 1718772584)
    {
      BOOL v16 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "ForceRouteChange step3 PerformConfigChange to switch format",  buf,  2u);
      }

      *BOOL v7 = 0;
      sub_4D618(a1);
    }

    else if (a2 == 1819569763)
    {
      BOOL v9 = *(void (**)(void))(*(void *)a1 + 272LL);
LABEL_60:
      v9();
      goto LABEL_61;
    }

    goto LABEL_32;
  }

  int v15 = *(_BYTE **)(a1 + 9096);
  if (v15 && v15[192])
  {
    BOOL v9 = *(void (**)(void))(*(void *)v15 + 568LL);
    goto LABEL_60;
  }

LABEL_61:
  return 0LL;
}

_BYTE *sub_4D4F0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    v3.i32[0] = *(_DWORD *)(a1 + 9256);
    int16x8_t v4 = (int16x8_t)vmovl_u8(v3);
    *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
    *(int8x8_t *)v4.i8 = vmovn_s16(v4);
    __int32 v10 = v4.i32[0];
    char v11 = 0;
    v4.i32[0] = *(_DWORD *)(a1 + 9264);
    int16x8_t v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
    *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
    unsigned __int32 v8 = vmovn_s16(v5).u32[0];
    char v9 = 0;
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v13 = &v10;
    __int16 v14 = 2082;
    int v15 = &v8;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "Post PostRouteChange [%{public}s - %{public}s]", buf, 0x16u);
  }

  uint64_t result = *(_BYTE **)(a1 + 9096);
  if (result && result[192])
  {
    BOOL v7 = *(void *)(a1 + 9256) == 1952539500LL && *(_BYTE *)(*(void *)(a1 + 9248) + 272LL) != 0;
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, BOOL))(*(void *)result + 568LL))(result, v7);
  }

  return result;
}

void sub_4D618(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    v3.i32[0] = *(_DWORD *)(a1 + 9256);
    int16x8_t v4 = (int16x8_t)vmovl_u8(v3);
    *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
    *(int8x8_t *)v4.i8 = vmovn_s16(v4);
    __int32 v8 = v4.i32[0];
    char v9 = 0;
    v4.i32[0] = *(_DWORD *)(a1 + 9264);
    int16x8_t v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
    *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
    unsigned __int32 v6 = vmovn_s16(v5).u32[0];
    char v7 = 0;
    *(_DWORD *)std::string buf = 136446466;
    char v11 = &v8;
    __int16 v12 = 2082;
    uint64_t v13 = &v6;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "HFPStereo PostPerformConfigChange [%{public}s - %{public}s]",  buf,  0x16u);
  }

  if (*(void *)(a1 + 9096))
  {
    buf[0] = 0;
  }

  *(_BYTE *)(a1 + 9305) = 0;
}

uint64_t sub_4D734()
{
  return 0LL;
}

_BYTE *sub_4D73C(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 9120);
  if (result)
  {
    if (result[192]) {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(void *)result + 176LL))(result);
    }
  }

  return result;
}

uint64_t sub_4D75C(uint64_t a1, uint64_t a2)
{
  int16x8_t v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 992LL))(a1);
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    uint64_t v7 = *(void *)(a1 + 9120);
    if (v7) {
      __int32 v8 = (const __CFString *)sub_6FA0(v7);
    }
    else {
      __int32 v8 = @"None";
    }
    int v12 = 134218498;
    uint64_t v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 2114;
    int v17 = v8;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: StartIO activeIO:%llu [%d] delegate to current Device  %{public}@",  (uint8_t *)&v12,  0x1Cu);
  }

  sub_4D968(a1, 0);
  if (*(void *)(a1 + 9120))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 1408LL))(a1);
    if (sub_340E8())
    {
      uint64_t v9 = *(void *)(a1 + 9248);
      if (*(_BYTE *)(v9 + 277) && !*(_BYTE *)(v9 + 145)) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1312LL))(a1, 1LL, 1LL);
      }
      (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 9120) + 256LL))( *(void *)(a1 + 9120),  1LL,  1918989668LL,  0LL);
    }

    else if (!sub_4DA3C(a1) {
           && (*(unsigned int (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 9120) + 256LL))( *(void *)(a1 + 9120),  1LL,  *(unsigned int *)(a1 + 9264),  1LL))
    }
    {
      sub_4DAF8(a1);
    }

    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 9120) + 184LL))(*(void *)(a1 + 9120), a2);
    sub_4DC90(a1);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_602B4();
    }
    uint64_t v10 = 0LL;
  }

  *(void *)(a1 + 9464) = mach_absolute_time();
  return v10;
}

void sub_4D968(uint64_t a1, int a2)
{
  uint64_t v2 = (_BYTE *)(a1 + 9440);
  if (*(unsigned __int8 *)(a1 + 9440) != a2)
  {
    int16x8_t v4 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "NO";
      if (a2) {
        uint64_t v5 = "YES";
      }
      int v6 = 136446210;
      uint64_t v7 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: Output Audio Ongoing : %{public}s",  (uint8_t *)&v6,  0xCu);
    }

    *uint64_t v2 = a2;
  }

BOOL sub_4DA3C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 9472);
  uint64_t v2 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint8x8_t v3 = "No Follow normal Audio bringup path";
    if (v1 == 2) {
      uint8x8_t v3 = "Yes : Skipping audio Setup on IOStart";
    }
    int v5 = 136446210;
    int v6 = v3;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "Out of Band Audio Trigged Status : %{public}s ",  (uint8_t *)&v5,  0xCu);
  }

  return v1 == 2;
}

uint64_t sub_4DAF8(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 9312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 9312));
  if (*(_BYTE *)(a1 + 9441))
  {
    uint8x8_t v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 9080);
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v14 = v4;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "[%{public}@ ] Transport schedule already running", buf, 0xCu);
    }

    return pthread_mutex_unlock(v2);
  }

  else
  {
    pthread_mutex_unlock(v2);
    int v6 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 9080);
      *(_DWORD *)std::string buf = 138543362;
      uint64_t v14 = v7;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@ ] Request block Scheduling transport update",  buf,  0xCu);
    }

    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    uint64_t v9 = qword_962E8;
    unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_4FA78;
    _DWORD v11[3] = &unk_811E8;
    int v12 = v8;
    return sub_3E3BC(v9, v10, v11);
  }

void sub_4DC90(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 9472);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "reset of band audio triggered: Current state %d ",  (uint8_t *)v4,  8u);
  }

  *(_DWORD *)(a1 + 9472) = 0;
}

uint64_t sub_4DD34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 992LL))(a1);
    int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    uint64_t v7 = *(void *)(a1 + 9120);
    if (v7) {
      int v8 = (const __CFString *)sub_6FA0(v7);
    }
    else {
      int v8 = @"None";
    }
    int v12 = 134218498;
    uint64_t v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    __int16 v16 = 2114;
    int v17 = v8;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: StopIO activeIO:%llu [%d] delegate Current Device  %{public}@",  (uint8_t *)&v12,  0x1Cu);
  }

  sub_4D968(a1, 0);
  uint64_t v9 = *(_BYTE **)(a1 + 9120);
  if (v9 && v9[192])
  {
    uint64_t v10 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)v9 + 192LL))(v9, a2);
    if (sub_340E8())
    {
      if (!(_DWORD)v10) {
        (*(void (**)(void))(**(void **)(a1 + 9120) + 1480LL))(*(void *)(a1 + 9120));
      }
    }

    else if ((*(unsigned int (**)(void, void, void, uint64_t))(**(void **)(a1 + 9120) + 256LL))( *(void *)(a1 + 9120),  0LL,  *(unsigned int *)(a1 + 9264),  1LL))
    {
      sub_4DAF8(a1);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_602E0();
    }
    return 0LL;
  }

  return v10;
}

uint64_t sub_4DEE0(uint64_t a1, uint64_t a2, int a3, BOOL *a4, _BYTE *a5)
{
  return sub_6314(a1, a3, a4, a5);
}

uint64_t sub_4DEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((_DWORD)a3 == 1919513701) {
    sub_4D968(a1, 1);
  }
  __int16 v14 = *(_BYTE **)(a1 + 9120);
  if (v14 && v14[192]) {
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 208LL))( v14,  a2,  a3,  a4,  a5,  a6,  a7);
  }
  else {
    return 0LL;
  }
}

CFIndex sub_4DFA4(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1869968496:
      uint64_t v2 = 9200LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1768845428:
      uint64_t v2 = 9176LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    case 1735159650:
      uint64_t v2 = 9224LL;
      return CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
  }

  return 0LL;
}

uint64_t sub_4E00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result)
  {
    __int128 v4 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v4;
    uint64_t v9 = *(void *)(a2 + 32);
    __int128 v5 = *(_OWORD *)(a3 + 16);
    v6[0] = *(_OWORD *)a3;
    v6[1] = v5;
    uint64_t v7 = *(void *)(a3 + 32);
    return (*(uint64_t (**)(uint64_t, _OWORD *, _OWORD *))(*(void *)result + 1256LL))(result, v8, v6);
  }

  return result;
}

BOOL sub_4E060(uint64_t a1, uint64_t a2, double a3, double a4)
{
  BOOL result = 1;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1248LL))(*(void *)(a1 + 9120)) & 1) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 9096);
    if (!v8
      || ((*(uint64_t (**)(uint64_t, uint64_t, double, double))(*(void *)v8 + 1248LL))(v8, a2, a3, a4) & 1) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 9088);
      if (!v9
        || ((*(uint64_t (**)(uint64_t, uint64_t, double, double))(*(void *)v9 + 1248LL))(v9, a2, a3, a4) & 1) == 0)
      {
        return 0;
      }
    }
  }

  return result;
}

CFIndex sub_4E0F8(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  int Count = a4;
  switch(a2)
  {
    case 1869968496:
      uint64_t v6 = 9200LL;
      goto LABEL_7;
    case 1768845428:
      uint64_t v6 = 9176LL;
      goto LABEL_7;
    case 1735159650:
      uint64_t v6 = 9224LL;
LABEL_7:
      uint64_t v7 = *(const __CFArray **)(a1 + v6);
      goto LABEL_9;
  }

  uint64_t v7 = 0LL;
LABEL_9:
  if (Count)
  {
    for (CFIndex i = 0LL;
          i != Count;
          *(_DWORD *)(a3 + 4 * i++) = (*(uint64_t (**)(const void *))(*(void *)ValueAtIndex + 16LL))(ValueAtIndex))
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
    }
  }

  return CFArrayGetCount(v7);
}

uint64_t sub_4E1CC(uint64_t result, uint64_t a2, unsigned int *a3)
{
  if (*a3)
  {
    unsigned int v3 = *(_DWORD *)(result + 9296);
    if (*a3 > v3)
    {
      char v11 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_5E0E8(v11, v12, v13);
      }
      abort();
    }

    __int128 v4 = *(void **)(result + 9280);
    if (v4 != (void *)(result + 9288))
    {
      unsigned int v5 = 0;
      do
      {
        uint64_t v6 = v4[5];
        uint64_t v7 = a2 + 12LL * v5;
        *(void *)uint64_t v7 = *(void *)v6;
        *(_DWORD *)(v7 + _Block_object_dispose(va, 8) = *(_DWORD *)(v6 + 8);
        if (++v5 == *a3) {
          break;
        }
        uint64_t v8 = (void *)v4[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            uint64_t v9 = (void *)v4[2];
            BOOL v10 = *v9 == (void)v4;
            __int128 v4 = v9;
          }

          while (!v10);
        }

        __int128 v4 = v9;
      }

      while (v9 != (void *)(result + 9288));
    }

    *a3 = v3;
  }

  return result;
}

uint64_t sub_4E29C(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 9096) && !*(void *)(a1 + 9088) && !*(void *)(a1 + 9112)) {
    return 0LL;
  }
  __int128 v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 9080);
    BOOL v7 = *(_BYTE *)(a1 + 9272) == 0;
    v5.i32[0] = *(_DWORD *)(a1 + 9256);
    int16x8_t v8 = (int16x8_t)vmovl_u8(v5);
    *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
    unsigned __int32 v12 = vmovn_s16(v8).u32[0];
    char v13 = 0;
    if (v7) {
      uint64_t v9 = "No";
    }
    else {
      uint64_t v9 = "Yes";
    }
    *(_DWORD *)std::string buf = 138543874;
    uint64_t v15 = v6;
    __int16 v16 = 2082;
    int v17 = v9;
    __int16 v18 = 2082;
    uint64_t v19 = &v12;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: [%{public}@ ] Is route change pending ? %{public}s Current profile %{public}s ",  buf,  0x20u);
  }

  if (*(_BYTE *)(a1 + 9272)) {
    int v10 = 1953853033;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 9256);
  }
  *a2 = v10;
  return 1LL;
}

uint64_t sub_4E3DC(uint64_t a1)
{
  unsigned __int8 v3 = 0;
  uint64_t v1 = *(void *)(a1 + 9096);
  if (v1 && *(_BYTE *)(v1 + 192))
  {
    if (sub_50340(a1, (char *)&v3, 1))
    {
      if (v3 > 1u) {
        return 1LL;
      }
    }

    else if ((*(_DWORD *)(v1 + 9340) - 128) < 3)
    {
      return 1LL;
    }
  }

  return 0LL;
}

double sub_4E448(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 9120);
  if (!v1) {
    return 0.0;
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 776LL))(v1);
  return result;
}

uint64_t sub_4E464(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9120);
  if (!v2)
  {
    unsigned __int8 v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_6030C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    if ((sub_52814() & 1) != 0) {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 9120);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 784LL))(v2);
}

uint64_t sub_4E4C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9120);
  if (!v2)
  {
    unsigned __int8 v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_6030C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    if ((sub_52814() & 1) != 0) {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 9120);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 800LL))(v2);
}

uint64_t sub_4E52C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9120);
  if (!v2)
  {
    unsigned __int8 v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_6030C(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    if ((sub_52814() & 1) != 0) {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 9120);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 808LL))(v2);
}

uint64_t sub_4E590(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 816LL))(result);
  }
  return result;
}

uint64_t sub_4E5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 9120);
  if (!v4)
  {
    uint64_t v5 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_6030C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    if ((sub_52814() & 1) != 0) {
      abort();
    }
    uint64_t v4 = *(void *)(a1 + 9120);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 792LL))(v4, a2);
}

uint64_t sub_4E624(void *a1, uint64_t a2, float a3)
{
  uint64_t result = a1[1140];
  if (result)
  {
    float v7 = (*(float (**)(uint64_t))(*(void *)result + 912LL))(result);
    float v8 = v7;
    BOOL v9 = a3 == 0.0;
    BOOL v10 = a3 != 0.0;
    if (v7 == 0.0) {
      BOOL v9 = 0;
    }
    else {
      BOOL v10 = 0;
    }
    char v11 = !v10 && !v9;
    char v12 = v7 == a3 ? 1 : v11;
    (*(void (**)(void, uint64_t, float))(*(void *)a1[1140] + 472LL))(a1[1140], a2, a3);
    uint64_t result = sub_340E8();
    if ((v12 & 1) == 0)
    {
      if ((_DWORD)result)
      {
        char v13 = (os_log_s *)qword_95B00;
        if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
        {
          v14[0] = 134218240;
          *(double *)&v14[1] = v8;
          __int16 v15 = 2048;
          double v16 = a3;
          _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "Updating Mute changed %f->%f", (uint8_t *)v14, 0x16u);
        }

        strcpy((char *)v14, "etumptuo");
        BYTE1(v14[2]) = 0;
        HIWORD(v14[2]) = 0;
        return (*(uint64_t (**)(void *, _DWORD *))(*a1 + 248LL))(a1, v14);
      }
    }
  }

  return result;
}

uint64_t sub_4E778(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 480LL))(result);
  }
  return result;
}

float sub_4E790(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 9120);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 912LL))(v1);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_6037C();
    }
    return 0.0;
  }

  return result;
}

float sub_4E7EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 9120);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 928LL))(v1);
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_603A8();
    }
    return -40.0;
  }

  return result;
}

const void *sub_4E84C(uint64_t a1, void *a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0LL;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v6);
    if (v5 == ++v6) {
      return 0LL;
    }
  }

  return ValueAtIndex;
}

const void *sub_4E8CC(uint64_t a1, uint64_t a2)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0LL;
  while (1)
  {
    uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v6);
    if (v5 == ++v6) {
      return 0LL;
    }
  }

  return ValueAtIndex;
}

uint64_t sub_4E948(uint64_t a1, __int32 *a2)
{
  if (!a2) {
    return 1852797029LL;
  }
  uint64_t v2 = *(uint64_t (***)(void, void, uint64_t, __int32 *))(qword_962E8 + 144);
  if (v2)
  {
    uint64_t v4 = (*v2)(*(void *)(qword_962E8 + 144), *(unsigned int *)(a1 + 8), 1LL, a2);
    if ((_DWORD)v4)
    {
      CFIndex v5 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_6040C(a2, v5, v6, v7);
      }
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_FAULT)) {
      sub_603D4();
    }
    return 4294960564LL;
  }

  return v4;
}

uint64_t sub_4EA10(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 704LL))(result);
  }
  return result;
}

CFIndex sub_4EA28(uint64_t a1, uint64_t a2)
{
  CFIndex result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(CFIndex, uint64_t))(*(void *)result + 1200LL))(result, a2);
  }
  return result;
}

uint64_t sub_4EA7C(uint64_t a1, uint64_t a2, CFIndex Count, uint64_t a4)
{
  if (sub_340E8())
  {
    if ((_DWORD)Count)
    {
      CFIndex v8 = 0LL;
      BOOL v9 = (double *)(a2 + 48);
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v8);
        if (ValueAtIndex)
        {
          char v11 = ValueAtIndex;
          (*(void (**)(_OWORD *__return_ptr, const void *, uint64_t))(*(void *)ValueAtIndex + 792LL))( v15,  ValueAtIndex,  a4);
          __int128 v12 = v15[1];
          *((_OWORD *)v9 - 3) = v15[0];
          *((_OWORD *)v9 - 2) = v12;
          *((void *)v9 - 2) = v16;
          *(v9 - 1) = (*(double (**)(const void *))(*(void *)v11 + 776LL))(v11);
          *BOOL v9 = (*(double (**)(const void *))(*(void *)v11 + 776LL))(v11);
        }

        ++v8;
        v9 += 7;
      }

      while (Count != v8);
    }
  }

  else
  {
    uint64_t v13 = *(void *)(a1 + 9120);
    if (v13) {
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex, uint64_t))(*(void *)v13 + 1208LL))( v13,  a2,  Count,  a4);
    }
    return 0LL;
  }

  return Count;
}

CFIndex sub_4EBB0(uint64_t a1)
{
  CFIndex result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(CFIndex))(*(void *)result + 1216LL))(result);
  }
  return result;
}

uint64_t sub_4EBFC(uint64_t a1, uint64_t a2, CFIndex Count)
{
  if (sub_340E8())
  {
    if ((_DWORD)Count)
    {
      CFIndex v6 = 0LL;
      uint8x8_t v7 = (double *)(a2 + 8);
      do
      {
        uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v6);
        if (ValueAtIndex)
        {
          BOOL v9 = ValueAtIndex;
          *(v7 - 1) = (*(double (**)(const void *))(*(void *)ValueAtIndex + 776LL))(ValueAtIndex);
          *uint8x8_t v7 = (*(double (**)(const void *))(*(void *)v9 + 776LL))(v9);
        }

        ++v6;
        v7 += 2;
      }

      while (Count != v6);
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 9120);
    if (v10) {
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex))(*(void *)v10 + 1224LL))(v10, a2, Count);
    }
    return 0LL;
  }

  return Count;
}

uint64_t sub_4ECE4(uint64_t a1)
{
  return sub_21034(*(void *)(a1 + 9248));
}

BOOL sub_4ECEC(uint64_t a1)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 9168));
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v3 = Count;
  uint64_t ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), 0LL);
  CFIndex v6 = 1LL;
  do
  {
    CFIndex v7 = v6;
    if (v3 == v6) {
      break;
    }
    CFIndex v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 9168), v6);
    int v9 = (*(uint64_t (**)(const void *))(*(void *)v8 + 984LL))(v8);
    CFIndex v6 = v7 + 1;
  }

  while (!v9);
  return v7 < v3;
}

uint64_t sub_4ED88(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 9248) + 148LL);
}

uint64_t sub_4ED94(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 9248) + 152LL);
}

void sub_4EDA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9120);
  if (v2) {
    sub_7D9C(v2, *(float *)(*(void *)(a1 + 9248) + 280LL));
  }
}

void sub_4EDBC(uint64_t a1, float a2)
{
}

CFIndex sub_4EDC4(uint64_t a1, const void *a2)
{
  return sub_22A7C(*(void *)(a1 + 9248), a2);
}

void sub_4EDCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9120);
  if (v2) {
    sub_7DAC(v2, *(void *)(*(void *)(a1 + 9248) + 288LL));
  }
}

uint64_t sub_4EDE8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 9248) + 145LL);
}

void sub_4EDF4(void *a1, BOOL a2, int a3)
{
  uint64_t v3 = a1[1156];
  if (*(_BYTE *)(v3 + 277))
  {
    *(_BYTE *)(v3 + 145) = a2;
    if (a3)
    {
      strcpy((char *)buf, "caobbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(void *, uint8_t *))(*a1 + 248LL))(a1, buf);
      CFIndex v6 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex v7 = "False";
        if (a2) {
          CFIndex v7 = "True";
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "Notify Mx ownership Changed to %{public}s", buf, 0xCu);
      }
    }

    uint64_t v8 = a1[1136];
    if (v8)
    {
      if (*(_BYTE *)(v8 + 192))
      {
        (*(void (**)(void **__return_ptr, void *))(*a1 + 824LL))(__p, a1);
        sub_7C3C(v8, __p, a2);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    uint64_t v9 = a1[1137];
    if (v9 && *(_BYTE *)(v9 + 192))
    {
      (*(void (**)(void **__return_ptr, void *))(*a1 + 824LL))(v10, a1);
      sub_7C3C(v9, v10, a2);
      if (v11 < 0) {
        operator delete(v10[0]);
      }
    }
  }

void sub_4EF74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4EFB0(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 9248) + 144LL);
}

uint64_t sub_4EFBC(uint64_t result, char a2)
{
  *(_BYTE *)(*(void *)(result + 9248) + 144LL) = a2;
  return result;
}

uint64_t sub_4EFC8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 9248) + 156LL);
}

uint64_t sub_4EFD4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 9248) + 172LL);
}

uint64_t sub_4EFE0(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 9248) + 176LL);
}

void sub_4EFEC(void *a1, int a2)
{
  uint64_t v3 = a1[1156];
  if (*(_DWORD *)(v3 + 184) != a2)
  {
    sub_21448((void *)v3, a2);
    CFIndex v5 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      sub_9E8C(*(_DWORD *)(a1[1156] + 184LL), __p);
      int v6 = v11;
      CFIndex v7 = (void **)__p[0];
      int v8 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
      uint64_t v9 = __p;
      *(_DWORD *)std::string buf = 136446722;
      if (v6 < 0) {
        uint64_t v9 = v7;
      }
      char v13 = v9;
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 1024;
      int v17 = v8;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "MicMode set to %{public}s (%d) for mAudioObjectID %d",  buf,  0x18u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }

void sub_4F10C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4F130(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 9248) + 60LL);
}

void sub_4F13C(void *a1, int a2)
{
  uint64_t v2 = a1[1156];
  if (*(_DWORD *)(v2 + 60) != a2)
  {
    *(_DWORD *)(v2 + 60) = a2;
    uint64_t v4 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
      int v6 = *(_DWORD *)(a1[1156] + 60LL);
      v7[0] = 67109376;
      v7[1] = v5;
      __int16 v8 = 1024;
      int v9 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "Local stream state of mAudioObjectID %d changed to %d",  (uint8_t *)v7,  0xEu);
    }
  }

uint64_t sub_4F210(_BYTE *a1)
{
  a1[9273] = 1;
  uint64_t v2 = 0x676C6F6266726368LL;
  int v3 = 0;
  return (*(uint64_t (**)(_BYTE *, uint64_t *))(*(void *)a1 + 248LL))(a1, &v2);
}

uint64_t sub_4F254(uint64_t result)
{
  if (*(_BYTE *)(*(void *)(result + 9248) + 230LL))
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v1[1135];
      v4[0] = 138543362;
      *(void *)&v4[1] = v3;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "Notify Spatial Audio Mode via NowPlaying App changed: %{public}@",  (uint8_t *)v4,  0xCu);
    }

    strcpy((char *)v4, "dmpsbolg");
    BYTE1(v4[2]) = 0;
    HIWORD(v4[2]) = 0;
    return (*(uint64_t (**)(void *, _DWORD *))(*v1 + 248LL))(v1, v4);
  }

  return result;
}

void sub_4F324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_BYTE **)(a1 + 9120);
  if (v4 && v4[192] && *(_BYTE *)(*(void *)(a1 + 9248) + 228LL))
  {
    (*(void (**)(_BYTE *, uint64_t))(*(void *)v4 + 1120LL))(v4, a2);
  }

  else
  {
    int v5 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
      sub_60494(a1, a2, v5);
    }
  }

id sub_4F3B0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) getPersonalizedVolumeDevice:*(void *)(a1 + 40)];
  if (result) {
    return [result NotifyManualVolumeChanged:*(void *)(a1 + 48) shouldUpdateBuds:0];
  }
  return result;
}

void *sub_4F3F0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1156];
  __int128 v3 = *(_OWORD *)(v2 + 8);
  *(void *)(a2 + 16) = *(void *)(v2 + 24);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_4F41C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 9248) + 277LL);
}

uint64_t sub_4F428(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 240LL))(a1, 1937009955LL, a2);
}

uint64_t sub_4F440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 9120) + 1240LL))(*(void *)(a1 + 9120));
}

uint64_t sub_4F450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_340E8()) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 9120) + 1264LL))( *(void *)(a1 + 9120),  a2,  a3);
  }
  if ((_DWORD)a2 == 1735159650 || (_DWORD)a2 == 1869968496 || (_DWORD)a2 == 1768845428) {
    return (_DWORD)a3 == 0;
  }
  return 0LL;
}

uint64_t sub_4F4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v32[0] = 0LL;
  v32[1] = 0LL;
  sub_52B28((uint64_t)v32, a1 + 552);
  uint64_t v6 = *(void *)(a1 + 9256);
  if (v6 == a2 && (uint64_t v7 = *(void *)(a1 + 9264), v7 == a3))
  {
    *(_BYTE *)(a1 + 9272) = 0;
    __int16 v8 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 9080);
      char v27 = BYTE3(v6);
      char v28 = BYTE2(v6);
      char v29 = BYTE1(v6);
      char v30 = v6;
      char v31 = 0;
      char v23 = BYTE3(a2);
      char v24 = BYTE2(a2);
      char v25 = BYTE1(a2);
      __int16 v26 = a2;
      LOBYTE(v21) = BYTE3(v7);
      BYTE1(v21) = BYTE2(v7);
      BYTE2(v21) = BYTE1(v7);
      HIBYTE(v21) = v7;
      char v22 = 0;
      char v16 = BYTE3(a3);
      char v17 = BYTE2(a3);
      char v18 = BYTE1(a3);
      char v19 = a3;
      char v20 = 0;
      *(_DWORD *)std::string buf = 138544386;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v34 = 2082;
      double v35 = &v27;
      __int16 v36 = 2082;
      __int128 v37 = &v23;
      __int16 v38 = 2082;
      __int128 v39 = &v21;
      __int16 v40 = 2082;
      int v41 = &v16;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: No profile/reason change [%{public}@ ] , profile %{public}s => %{public}s reason %{public} s = > %{public}s ",  buf,  0x34u);
    }

    sub_4D4F0(a1);
    strcpy(buf, "pcvabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 248LL))(a1, buf);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 9080);
      char v27 = BYTE3(v6);
      char v28 = BYTE2(v6);
      char v29 = BYTE1(v6);
      char v30 = v6;
      char v31 = 0;
      char v23 = BYTE3(a2);
      char v24 = BYTE2(a2);
      char v25 = BYTE1(a2);
      __int16 v26 = a2;
      v11.i32[0] = *(_DWORD *)(a1 + 9264);
      int16x8_t v13 = (int16x8_t)vmovl_u8(v11);
      *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
      unsigned __int32 v21 = vmovn_s16(v13).u32[0];
      char v22 = 0;
      char v16 = BYTE3(a3);
      char v17 = BYTE2(a3);
      char v18 = BYTE1(a3);
      char v19 = a3;
      char v20 = 0;
      *(_DWORD *)std::string buf = 138544386;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v34 = 2082;
      double v35 = &v27;
      __int16 v36 = 2082;
      __int128 v37 = &v23;
      __int16 v38 = 2082;
      __int128 v39 = &v21;
      __int16 v40 = 2082;
      int v41 = &v16;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "BTUnifiedAudioDevice: [%{public}@ ] Perform Route change, profile %{public}s => %{public}s reason %{public}s = > %{public}s ",  buf,  0x34u);
    }

    if (*(void *)(a1 + 9096) || *(void *)(a1 + 9088) || *(void *)(a1 + 9112))
    {
      uint64_t v14 = *(void *)(a1 + 9256);
      if (v14 == a2)
      {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 1368LL))( a1,  a2,  *(unsigned int *)(a1 + 9264),  a3);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1360LL))( a1,  v14,  a2,  *(unsigned int *)(a1 + 9264));
        *(void *)(a1 + 9264) = a3;
        sub_429EC((_DWORD *)a1, a2);
      }
    }
  }

  return sub_52C5C(v32);
}

void sub_4F82C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_4F848(uint64_t *a1, const __CFString *a2, int a3, int a4)
{
  uint64_t v6 = 0x676C6F6273706D64LL;
  int v7 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 248))(a1, &v6);
  uint64_t v6 = 0x676C6F6273706366LL;
  int v7 = 0;
  return (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 248))(a1, &v6);
}

uint64_t sub_4F8BC(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 9312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 9312));
  uint64_t v3 = *(void *)(a1 + 9120);
  if (v3 && (*(unsigned int (**)(uint64_t))(*(void *)v3 + 1176LL))(v3))
  {
    *(_BYTE *)(a1 + 9441) = 1;
    uint64_t v4 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 9080);
      v11[0] = 138543362;
      *(void *)&v11[1] = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "[%{public}@ ] Wait for transport update", (uint8_t *)v11, 0xCu);
    }

    if (pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1 + 9376), v2, (const timespec *)(a1 + 9424)) == 60)
    {
      uint64_t v6 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR)) {
        sub_60544(a1, v6, v7);
      }
    }

    *(_BYTE *)(a1 + 9441) = 0;
  }

  if (*(_DWORD *)(a1 + 9472) == 1) {
    *(_DWORD *)(a1 + 9472) = 2;
  }
  strcpy((char *)v11, "dbobbolg");
  BYTE1(v11[2]) = 0;
  HIWORD(v11[2]) = 0;
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 248LL))(a1, v11);
  __int16 v8 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 9080);
    v11[0] = 138543362;
    *(void *)&v11[1] = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "[%{public}@ ] transport Update Completed", (uint8_t *)v11, 0xCu);
  }

  return pthread_mutex_unlock(v2);
}

void sub_4FA78(uint64_t a1)
{
  uint64_t v1 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (v1)
  {
    sub_4F8BC((uint64_t)v1);
  }

  else
  {
    uint64_t v2 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "transport update dispatched after disconnection", v3, 2u);
    }
  }

uint64_t sub_4FB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = a4;
  uint64_t v6 = *(void *)(a1 + 9120);
  if (v6)
  {
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1368LL))(v6, a2, a3, a4);
    *(void *)(a1 + 9264) = v4;
    if ((v7 & 1) != 0) {
      return 1LL;
    }
  }

  else
  {
    *(void *)(a1 + 9264) = a4;
  }

  *(_BYTE *)(a1 + 9272) = 0;
  sub_4D4F0(a1);
  uint64_t v9 = 0x676C6F6261766370LL;
  int v10 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 248LL))(a1, &v9);
  return 1LL;
}

BOOL sub_4FB94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 9120);
  return v1 != 0;
}

uint64_t sub_4FBDC(void *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  if (*(_BYTE *)(a1[1156] + 222LL))
  {
    uint64_t v6 = a1[1140];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 1384LL))(v6, a2, a3);
    }
    return 1LL;
  }

  char v7 = (_BYTE *)a1[1137];
  if (v4 != 1953719151 && v3 != 1919183219)
  {
    __int16 v8 = (os_log_s *)qword_95B00;
    if (!os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    if (*(_BYTE *)(a1[1137] + 192LL)) {
      uint64_t v9 = a1[1137];
    }
    else {
      uint64_t v9 = 0LL;
    }
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 1160LL))(v9);
    uint8x8_t v11 = "idle";
    if (v10) {
      uint8x8_t v11 = "active";
    }
    int v18 = 136315138;
    char v19 = v11;
    uint64_t v12 = "Route changing in while eSCO is active, transport %s";
    goto LABEL_16;
  }

  uint64_t v14 = *(_BYTE *)(a1[1137] + 192LL) ? (_DWORD *)a1[1137] : 0LL;
  if (v14[2335] == v14[2332]) {
    return 1LL;
  }
  __int16 v8 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v14 + 1160LL))(v14);
    char v17 = "idle";
    if (v16) {
      char v17 = "active";
    }
    int v18 = 136315138;
    char v19 = v17;
    uint64_t v12 = "Route changing update OoB link, transport %s";
LABEL_16:
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v18, 0xCu);
  }

void sub_4FE10(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (v2)
  {
    sub_4F4E8((uint64_t)v2, *(unsigned int *)(a1 + 36), *(unsigned int *)(a1 + 40));
  }

  else
  {
    int v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "transport update dispatched after disconnection", v4, 2u);
    }
  }

uint64_t sub_4FEA0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_500C4;
  uint64_t v7[3] = &unk_83AD0;
  unsigned int v8 = v5;
  int v9 = a2;
  _OWORD v7[4] = a3;
  return sub_3E3BC(qword_962E8, v5, v7);
}

uint64_t sub_4FF20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 1152LL))(result);
  }
  return result;
}

uint64_t sub_4FF38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 1448LL))(result);
  }
  return result;
}

uint64_t sub_4FF50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 9120);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 272LL))(result);
  }
  return result;
}

void sub_4FF68(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  if (*(_DWORD *)a4 == 1651795567)
  {
    uint64_t v16 = *a4;
    int v17 = *((_DWORD *)a4 + 2);
    char v7 = (dispatch_queue_s *)sub_3EA54(qword_962E8, a3);
    if (v7)
    {
      unsigned int v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, a2, 0x80000000uLL, v7);
      if (v8)
      {
        int v9 = v8;
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_50088;
        handler[3] = &unk_83B20;
        unsigned int v12 = a3;
        uint64_t v13 = v16;
        int v14 = v17;
        int v15 = a2;
        handler[4] = v8;
        void handler[5] = a1;
        dispatch_source_set_event_handler(v8, handler);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        _OWORD v10[2] = sub_500BC;
        v10[3] = &unk_81BE0;
        v10[4] = v9;
        dispatch_source_set_cancel_handler(v9, v10);
        dispatch_resume(v9);
      }
    }
  }

void sub_50088(uint64_t a1)
{
}

void sub_500BC(uint64_t a1)
{
}

void sub_500C4(uint64_t a1)
{
  uint64_t v2 = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 40));
  if (v2)
  {
    (*(void (**)(void *, void, void))(*v2 + 240LL))( v2,  *(unsigned int *)(a1 + 44),  *(void *)(a1 + 32));
  }

  else
  {
    int v3 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Update dispatched after disconnection", v4, 2u);
    }
  }

void sub_50160(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 9248);
  if (*(unsigned __int8 *)(v2 + 221) != a2)
  {
    *(_BYTE *)(v2 + 221) = a2;
    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AdvancedHandsfreeGamingOnly"))
    {
      uint64_t v5 = *(void *)(a1 + 9096);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 192) && sub_340E8())
        {
          uint64_t v6 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v8 = "disabled";
            v7.i32[0] = *(_DWORD *)(a1 + 9256);
            int16x8_t v9 = (int16x8_t)vmovl_u8(v7);
            *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
            unsigned __int32 v13 = vmovn_s16(v9).u32[0];
            char v14 = 0;
            if (a2) {
              unsigned int v8 = "enabled";
            }
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = v8;
            __int16 v16 = 2080;
            int v17 = &v13;
            _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "Low Latency Game ForceRouteChange check, game %s, currentProfile %s",  buf,  0x16u);
          }

          sub_4A414(a1);
          if (*(void *)(a1 + 9256) == 1953719151LL)
          {
            LOBYTE(v13) = 0;
            int v10 = sub_50340(a1, (char *)&v13, 1);
            if (a2)
            {
              int v11 = v13 == 4 ? v10 : 0;
              if (v11 == 1)
              {
                unsigned int v12 = (os_log_s *)qword_95B00;
                if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "ForceRouteChange step1 notify VA", buf, 2u);
                }

                *(_BYTE *)(a1 + 9273) = 1;
                strcpy(buf, "hcrfbolg");
                buf[9] = 0;
                *(_WORD *)&buf[10] = 0;
                (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 248LL))(a1, buf);
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_50340(uint64_t a1, char *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 9096);
  if (v3 && *(_BYTE *)(v3 + 192))
  {
    int v4 = *(unsigned __int8 *)(a1 + 9305);
    switch(*(_BYTE *)(a1 + 9305))
    {
      case 1:
        int v6 = *(_DWORD *)(v3 + 9340);
        if ((v6 | 0x100) == 0x100) {
          goto LABEL_17;
        }
        if (a3)
        {
          uint8x8_t v7 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = 67109120;
            int v20 = v6;
            _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "HFPStereo need Mono, currentCodec %u", (uint8_t *)&v19, 8u);
          }
        }

        uint64_t result = 1LL;
        if (a2) {
          *a2 = 1;
        }
        return result;
      case 2:
        int v9 = *(_DWORD *)(v3 + 9340);
        if (v9 == 128) {
          goto LABEL_17;
        }
        if (a3)
        {
          int v10 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = 67109120;
            int v20 = v9;
            _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "HFPStereo need Low Stereo, currentCodec %u",  (uint8_t *)&v19,  8u);
          }
        }

        if (!a2) {
          return 1LL;
        }
        char v11 = 2;
        goto LABEL_32;
      case 3:
        int v12 = *(_DWORD *)(v3 + 9340);
        if (v12 == 129) {
          goto LABEL_17;
        }
        if (a3)
        {
          int v18 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = 67109120;
            int v20 = v12;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "HFPStereo need High Stereo, currentCodec %u",  (uint8_t *)&v19,  8u);
          }
        }

        if (!a2) {
          return 1LL;
        }
        char v11 = 3;
LABEL_32:
        *a2 = v11;
        return 1LL;
      case 4:
        if (a3)
        {
          __int16 v16 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = *(_DWORD *)(v3 + 9340);
            int v19 = 67109120;
            int v20 = v17;
            _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "HFPStereo need HAoS, currentCodec %u",  (uint8_t *)&v19,  8u);
          }
        }

        if (!a2) {
          return 1LL;
        }
        char v11 = 4;
        goto LABEL_32;
      default:
LABEL_17:
        if (!a3) {
          return 0LL;
        }
        unsigned __int32 v13 = (os_log_s *)qword_95B00;
        BOOL v14 = os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0LL;
        if (!v14) {
          return result;
        }
        int v15 = *(_DWORD *)(v3 + 9340);
        int v19 = 67109376;
        int v20 = v4;
        __int16 v21 = 1024;
        int v22 = v15;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "HFPStereo no HFPStereo pending, pendingConfig %u, currentCodec %u",  (uint8_t *)&v19,  0xEu);
        break;
    }
  }

  return 0LL;
}

_BYTE *sub_505E8(void *a1, uint64_t a2)
{
  int v4 = (os_log_s *)qword_95B00;
  if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1135];
    v20[0] = BYTE3(a2);
    v20[1] = BYTE2(a2);
    void v20[2] = BYTE1(a2);
    v20[3] = a2;
    v20[4] = 0;
    *(_DWORD *)std::string buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v22 = 2080;
    char v23 = v20;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "Post Publish UnifiedAudioDevice : %{public}@, %s", buf, 0x16u);
  }

  (*(void (**)(void *, void, void))(*a1 + 1312LL))(a1, *(unsigned __int8 *)(a1[1156] + 145LL), 0LL);
  uint64_t v6 = a1[1137];
  if (v6 && *(_BYTE *)(v6 + 192))
  {
    if (sub_5280C())
    {
      uint64_t v7 = a1[1137];
      if (v7)
      {
        if (*(_BYTE *)(v7 + 192))
        {
          uint64_t v8 = a1[1156];
          if (*(_DWORD *)(v8 + 244)) {
            sub_222EC((_BYTE *)v8, 1);
          }
        }
      }
    }

    else if (sub_340E8())
    {
      if (a2 == 1953719151)
      {
        sub_4A414((uint64_t)a1);
        buf[0] = 0;
        if (sub_50340((uint64_t)a1, buf, 1))
        {
          if (*(_BYTE *)(a1[1137] + 192LL)) {
            uint64_t v9 = a1[1137];
          }
          else {
            uint64_t v9 = 0LL;
          }
          (*(void (**)(uint64_t, void))(*(void *)v9 + 520LL))(v9, buf[0]);
        }

        else if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_ERROR))
        {
          sub_605B0();
        }
      }
    }

    else if (sub_340E8())
    {
      uint64_t v10 = a1[1137];
      if (v10)
      {
        if (*(_BYTE *)(v10 + 192) && *(_DWORD *)(a1[1156] + 244LL))
        {
          sub_4A414((uint64_t)a1);
          sub_222EC((_BYTE *)a1[1156], 1);
        }
      }
    }
  }

  if (*(_BYTE *)(a1[1156] + 250LL) && !a1[1138])
  {
    char v11 = +[BTAudioSmartRouteManager sharedInstance](&OBJC_CLASS___BTAudioSmartRouteManager, "sharedInstance");
    int v12 = objc_alloc(&OBJC_CLASS___NSString);
    (*(void (**)(_BYTE *__return_ptr, void *))(*a1 + 824LL))(buf, a1);
    if (v24 >= 0) {
      unsigned __int32 v13 = buf;
    }
    else {
      unsigned __int32 v13 = *(_BYTE **)buf;
    }
    BOOL v14 = -[NSString initWithUTF8String:](v12, "initWithUTF8String:", v13);
    if (v24 < 0) {
      operator delete(*(void **)buf);
    }
    int v15 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412290;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Register with Smart Route Managet with BDADDR: %@", buf, 0xCu);
    }

    a1[1138] = -[BTAudioSmartRouteManager registerDevice:deviceAddr:]( v11,  "registerDevice:deviceAddr:",  (*(uint64_t (**)(void *))(*a1 + 16LL))(a1),  v14);
  }

  if (a2 == 1952539500)
  {
    int v18 = (_BYTE *)a1[1136];
    if (v18)
    {
      if (v18[192])
      {
        (*(void (**)(_BYTE *))(*(void *)v18 + 552LL))(v18);
        if (*(_BYTE *)(a1[1156] + 230LL))
        {
          strcpy(buf, "cathbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "tsthbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "vathbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "dmpsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "shpsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "vapsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "ofpsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
          strcpy(buf, "vspsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
        }
      }
    }
  }

  else if (a2 == 1953719151)
  {
    uint64_t result = (_BYTE *)a1[1137];
    if (!result) {
      return result;
    }
    if (result[192])
    {
      BOOL v17 = a1[1157] == 1952539500LL && *(_BYTE *)(a1[1156] + 272LL) != 0;
      (*(void (**)(_BYTE *, BOOL))(*(void *)result + 568LL))(result, v17);
      if (*(_BYTE *)(a1[1137] + 192LL)) {
        uint64_t v19 = a1[1137];
      }
      else {
        uint64_t v19 = 0LL;
      }
      (*(void (**)(uint64_t))(*(void *)v19 + 960LL))(v19);
    }
  }

  uint64_t result = (_BYTE *)a1[1137];
  if (result && result[192] && *(_DWORD *)(a1[1156] + 224LL) == 1) {
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)result + 520LL))(result, 4LL);
  }
  return result;
}

void sub_50AC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_50AE8(void *a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1[1156] + 360LL);
  uint64_t v3 = a1[1157];
  if (v3 != 1952539500)
  {
    return 0LL;
  }

  uint64_t result = (_BYTE *)a1[1136];
  if (!result) {
    return result;
  }
  if (!result[192]) {
    return 0LL;
  }
  int v6 = (*(uint64_t (**)(_BYTE *))(*(void *)result + 640LL))(result);
  uint64_t result = (_BYTE *)(*(uint64_t (**)(void *))(*a1 + 984LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t result = (_BYTE *)(&dword_0 + 1);
    if (v2 > 5 || ((1 << v2) & 0x34) == 0) {
      return (_BYTE *)(v6 == 6);
    }
  }

  return result;
}

uint64_t sub_50BC4(void *a1)
{
  uint64_t v2 = a1[1156];
  int v3 = (*(uint64_t (**)(void *))(*a1 + 984LL))(a1);
  sub_2849C(v2, v3);
  uint64_t v4 = a1[1136];
  if (v4 && *(_BYTE *)(v4 + 192))
  {
    uint64_t v5 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = sub_50AE8(a1);
      int v7 = (*(uint64_t (**)(void *))(*a1 + 984LL))(a1);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v17 = v7;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "Setting Spatial Active: %d Active IO = %d", buf, 0xEu);
    }

    unsigned __int8 v8 = sub_50AE8(a1);
    unsigned int v9 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_50DCC;
    _BYTE v13[3] = &unk_83B40;
    unsigned int v14 = v9;
    unsigned __int8 v15 = v8;
    sub_3E3BC(qword_962E8, v9, v13);
  }

  else
  {
    uint64_t v10 = (os_log_s *)qword_95B00;
    if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = (*(uint64_t (**)(void *))(*a1 + 984LL))(a1);
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "Whether Spatial is Active couldn't be determined. Active IO = %d",  buf,  8u);
    }
  }

  strcpy(buf, "cnpsbolg");
  buf[9] = 0;
  LOWORD(v17) = 0;
  (*(void (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
  strcpy(buf, "ifpsbolg");
  buf[9] = 0;
  LOWORD(v17) = 0;
  return (*(uint64_t (**)(void *, _BYTE *))(*a1 + 248LL))(a1, buf);
}

void *sub_50DCC(uint64_t a1)
{
  uint64_t result = sub_3E48C(qword_962E8, *(_DWORD *)(a1 + 32));
  if (result)
  {
    uint64_t result = (void *)result[1136];
    if (result)
    {
      if (*((_BYTE *)result + 192)) {
        return (void *)(*(uint64_t (**)(void *, void))(*result + 712LL))( result,  *(unsigned __int8 *)(a1 + 36));
      }
    }
  }

  return result;
}

uint64_t sub_50E28(uint64_t result)
{
  if (*(_BYTE *)(*(void *)(result + 9248) + 222LL))
  {
    uint64_t result = *(void *)(result + 9120);
    if (result)
    {
      if (*(_BYTE *)(result + 192)) {
        return (*(uint64_t (**)(uint64_t))(*(void *)result + 1408LL))(result);
      }
    }
  }

  return result;
}

uint64_t sub_50E54(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result = sub_340E8();
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(*(void *)(a1 + 9248) + 472LL)) {
      uint64_t v7 = 4 * a3;
    }
    else {
      uint64_t v7 = a3;
    }
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 500LL;
    }
    if (a2)
    {
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      sub_52B28((uint64_t)&v17, a1 + 9608);
      uint64_t v10 = *(void **)(a1 + 9672);
      if (v10)
      {
        if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9672)))
        {
          int v11 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "Delayed Control Centre Update: Cancelling current Dispatch",  buf,  2u);
            uint64_t v10 = *(void **)(a1 + 9672);
          }

          dispatch_block_cancel(v10);
          uint64_t v10 = *(void **)(a1 + 9672);
        }

        _Block_release(v10);
        *(void *)(a1 + 9672) = 0LL;
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_51134;
      block[3] = &unk_812A8;
      void block[4] = a1;
      *(void *)(a1 + 9672) = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
      sub_52BF4((uint64_t)&v17);
      int v12 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v20 = v8;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "Triggering a delayed Control Centre update : %lld", buf, 0xCu);
      }

      sub_3EB3C(qword_962E8, v8, v9, *(void **)(a1 + 9672));
    }

    else
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      sub_52B28((uint64_t)&v17, a1 + 9608);
      unsigned __int32 v13 = *(void **)(a1 + 9672);
      if (v13)
      {
        if (!dispatch_block_testcancel(*(dispatch_block_t *)(a1 + 9672)))
        {
          unsigned int v14 = (os_log_s *)qword_95B00;
          if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "Control Centre: Cancelling current Dispatch", buf, 2u);
            unsigned __int32 v13 = *(void **)(a1 + 9672);
          }

          dispatch_block_cancel(v13);
          unsigned __int32 v13 = *(void **)(a1 + 9672);
        }

        _Block_release(v13);
        *(void *)(a1 + 9672) = 0LL;
      }

      sub_52BF4((uint64_t)&v17);
      unsigned __int8 v15 = (os_log_s *)qword_95B00;
      if (os_log_type_enabled((os_log_t)qword_95B00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "Triggering a non-delayed Control Centre update", buf, 2u);
      }

      (*(void (**)(uint64_t))(*(void *)a1 + 696LL))(a1);
    }

    return sub_52C5C(&v17);
  }

  return result;
}

void sub_51114( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_51134(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 32);
  v3[0] = 0LL;
  v3[1] = 0LL;
  sub_52B28((uint64_t)v3, (uint64_t)(v1 + 1201));
  _Block_release(v1[1209]);
  v1[1209] = 0LL;
  sub_52BF4((uint64_t)v3);
  (*((void (**)(const void **))*v1 + 87))(v1);
  return sub_52C5C(v3);
}

void sub_51198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_511AC()
{
  return 0LL;
}

uint64_t sub_511B8()
{
  return 0LL;
}

uint64_t sub_511C0()
{
  return 0LL;
}

uint64_t sub_511C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 409) = a2;
  return result;
}

uint64_t sub_511D0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 410) = a2;
  return result;
}

BOOL sub_511D8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 409) != 0;
}

BOOL sub_511E8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 410) != 0;
}

uint64_t sub_51204()
{
  return 0LL;
}

uint64_t sub_5120C()
{
  return 0LL;
}

uint64_t sub_51214()
{
  return 0LL;
}

double sub_51228()
{
  qword_95B00 = (uint64_t)os_log_create("com.apple.bluetooth", "BTAudio");
  xmmword_95B10 = xmmword_65B70;
  byte_95B20 = 0;
  unk_95B24 = xmmword_65B80;
  byte_95B34 = 0;
  unk_95B38 = xmmword_65B90;
  byte_95B48 = 0;
  unk_95B4C = xmmword_65BA0;
  byte_95B5C = 0;
  xmmword_95B60 = xmmword_65BB0;
  byte_95B70 = 0;
  unk_95B74 = xmmword_65BC0;
  byte_95B84 = 0;
  unk_95B88 = xmmword_65BD0;
  byte_95B98 = 0;
  unk_95B9C = xmmword_65BE0;
  byte_95BAC = 0;
  xmmword_95BB0 = xmmword_65BF0;
  byte_95BC0 = 0;
  unk_95BC4 = xmmword_65C00;
  byte_95BD4 = 0;
  unk_95BD8 = xmmword_65C10;
  byte_95BE8 = 0;
  unk_95BEC = xmmword_65C20;
  byte_95BFC = 0;
  xmmword_95C00 = xmmword_65C30;
  byte_95C10 = 0;
  xmmword_95C14 = xmmword_65C40;
  byte_95C24 = 0;
  xmmword_95C28 = xmmword_65C50;
  byte_95C38 = 0;
  xmmword_95C3C = xmmword_65C60;
  byte_95C4C = 1;
  xmmword_95C50 = xmmword_65C70;
  byte_95C60 = 0;
  xmmword_95C64 = xmmword_65C80;
  byte_95C74 = 0;
  xmmword_95C78 = xmmword_65C90;
  byte_95C88 = 1;
  xmmword_95C8C = xmmword_65CA0;
  byte_95C9C = 1;
  xmmword_95CA0 = xmmword_65CB0;
  byte_95CB0 = 0;
  xmmword_95CB4 = xmmword_65CC0;
  byte_95CC4 = 0;
  xmmword_95CC8 = xmmword_65CD0;
  byte_95CD8 = 1;
  xmmword_95CDC = xmmword_65CE0;
  byte_95CEC = 1;
  xmmword_95CF0 = xmmword_65CF0;
  byte_95D00 = 1;
  xmmword_95D04 = xmmword_65D00;
  byte_95D14 = 0;
  xmmword_95D18 = xmmword_65D10;
  byte_95D28 = 0;
  xmmword_95D2C = xmmword_65D20;
  byte_95D3C = 0;
  xmmword_95D40 = xmmword_65D30;
  byte_95D50 = 1;
  xmmword_95D54 = xmmword_65D40;
  byte_95D64 = 0;
  xmmword_95D68 = xmmword_65D50;
  byte_95D78 = 0;
  xmmword_95D7C = xmmword_65D60;
  byte_95D8C = 1;
  xmmword_95D90 = xmmword_65D70;
  byte_95DA0 = 0;
  xmmword_95DA4 = xmmword_65D80;
  byte_95DB4 = 1;
  xmmword_95DB8 = xmmword_65D90;
  byte_95DC8 = 0;
  xmmword_95DCC = xmmword_65DA0;
  byte_95DDC = 1;
  xmmword_95DE0 = xmmword_65DB0;
  byte_95DF0 = 0;
  xmmword_95DF4 = xmmword_65DC0;
  byte_95E04 = 0;
  xmmword_95E08 = xmmword_65DD0;
  byte_95E18 = 0;
  xmmword_95E1C = xmmword_65DE0;
  byte_95E2C = 0;
  xmmword_95E30 = xmmword_65DF0;
  byte_95E40 = 0;
  xmmword_95E44 = xmmword_65E00;
  byte_95E54 = 0;
  xmmword_95E58 = xmmword_65E10;
  byte_95E68 = 1;
  xmmword_95E6C = xmmword_65E20;
  byte_95E7C = 0;
  xmmword_95E80 = xmmword_65E30;
  byte_95E90 = 1;
  xmmword_95E94 = xmmword_65E40;
  byte_95EA4 = 0;
  xmmword_95EA8 = xmmword_65E50;
  byte_95EB8 = 0;
  xmmword_95EBC = xmmword_65E60;
  byte_95ECC = 1;
  xmmword_95ED0 = xmmword_65E70;
  byte_95EE0 = 1;
  xmmword_95EE4 = xmmword_65E80;
  byte_95EF4 = 0;
  xmmword_95EF8 = xmmword_65E90;
  byte_95F08 = 0;
  xmmword_95F0C = xmmword_65EA0;
  byte_95F1C = 1;
  xmmword_95F20 = xmmword_65EB0;
  byte_95F30 = 0;
  xmmword_95F34 = xmmword_65EC0;
  byte_95F44 = sub_340E8();
  xmmword_95F48 = xmmword_65ED0;
  byte_95F58 = 0;
  xmmword_95F5C = xmmword_65EE0;
  byte_95F6C = 0;
  xmmword_95F70 = xmmword_65EF0;
  byte_95F80 = 0;
  xmmword_95F84 = xmmword_65F00;
  byte_95F94 = 1;
  xmmword_95F98 = xmmword_65F10;
  byte_95FA8 = 0;
  xmmword_95FAC = xmmword_65F20;
  byte_95FBC = 0;
  xmmword_95FC0 = xmmword_65F30;
  byte_95FD0 = 0;
  xmmword_95FD4 = xmmword_65F40;
  byte_95FE4 = 0;
  xmmword_95FE8 = xmmword_65F50;
  byte_95FF8 = 0;
  xmmword_95FFC = xmmword_65F60;
  byte_9600C = 1;
  xmmword_96010 = xmmword_65F70;
  byte_96020 = 1;
  xmmword_96024 = xmmword_65F80;
  byte_96034 = 0;
  xmmword_96038 = xmmword_65F90;
  byte_96048 = 1;
  xmmword_9604C = xmmword_65FA0;
  byte_9605C = 0;
  xmmword_96060 = xmmword_65FB0;
  byte_96070 = 1;
  xmmword_96074 = xmmword_65FC0;
  byte_96084 = 1;
  xmmword_96088 = xmmword_65FD0;
  byte_96098 = 1;
  xmmword_9609C = xmmword_65FE0;
  byte_960AC = 0;
  xmmword_960B0 = xmmword_65FF0;
  byte_960C0 = 0;
  xmmword_960C4 = xmmword_66000;
  byte_960D4 = 0;
  xmmword_960D8 = xmmword_66010;
  byte_960E8 = 0;
  xmmword_960EC = xmmword_66020;
  byte_960FC = 1;
  xmmword_96100 = xmmword_66030;
  byte_96110 = 0;
  xmmword_96114 = xmmword_66040;
  byte_96124 = 0;
  xmmword_96128 = xmmword_66050;
  byte_96138 = 1;
  xmmword_9613C = xmmword_66060;
  byte_9614C = 0;
  xmmword_96150 = xmmword_66070;
  byte_96160 = 0;
  xmmword_96164 = xmmword_66080;
  byte_96174 = 0;
  double result = 9.31743829e242;
  xmmword_96178 = xmmword_66090;
  byte_96188 = 0;
  return result;
}

uint64_t sub_51870(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int128 v5 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  uint64_t v10 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v9);
  *unsigned int v6 = &off_83B88;
  if (a2 > 0x11 || ((1 << a2) & 0x30018) == 0)
  {
    uint64_t v8 = (os_log_s *)qword_96190;
    if (os_log_type_enabled((os_log_t)qword_96190, OS_LOG_TYPE_ERROR)) {
      sub_5AA14(a2, v8);
    }
  }

  return a1;
}

void sub_51918(void *a1)
{
  uint64_t v1 = sub_415F0(a1);
  operator delete(v1);
}

uint64_t sub_5192C(uint64_t a1, int a2)
{
  if (a2 == 48000)
  {
    int v2 = 6;
  }

  else
  {
    if (a2 != 64000)
    {
      int v2 = *(_DWORD *)(a1 + 364);
      goto LABEL_7;
    }

    int v2 = 8;
  }

  *(_DWORD *)(a1 + 364) = v2;
LABEL_7:
  g722_decoder_init(a1 + 162, v2);
  return 0LL;
}

uint64_t sub_51978(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8 = a3;
  unsigned int v9 = a2;
  __int16 v29 = 0;
  uint64_t v10 = (int16x4_t *)(a1 + 162);
  unint64_t v11 = *(__int16 *)(a1 + 212);
  if (v11 == 8)
  {
    uint64_t result = g722_decode_frame((int16x4_t *)(a1 + 162), a2, (__int16)a3, a4, &v29);
  }

  else
  {
    unint64_t v14 = 8 * a3 / v11;
    uint64_t v15 = (unsigned __int16)v14;
    __chkstk_darwin(a1);
    uint64_t v17 = &v28[-v16];
    bzero(&v28[-v16], (unsigned __int16)v14);
    int v18 = *(unsigned __int16 *)(a1 + 212);
    if (v18 == 6)
    {
      if ((_WORD)v14)
      {
        unsigned int v21 = 0;
        LOBYTE(v22) = 0;
        int v23 = 0;
        char v24 = v17;
        do
        {
          int v25 = v21 & ~(-1 << v22);
          unsigned int v21 = v9[v23];
          int v26 = v25 << (6 - v22);
          int v27 = 252 << v22;
          int v22 = ((_BYTE)v22 + 2) & 7;
          *v24++ = 4 * (((v27 & v21) >> v22) | v26);
          if (v22) {
            ++v23;
          }
          --v15;
        }

        while (v15);
      }
    }

    else if (v18 == 4 && v8)
    {
      uint64_t v19 = v17 + 1;
      do
      {
        char v20 = *v9++;
        *(v19 - 1) = v20 & 0xF0;
        *uint64_t v19 = 16 * v20;
        v19 += 2;
        --v8;
      }

      while (v8);
    }

    uint64_t result = g722_decode_frame(v10, v17, (__int16)v14, a4, &v29);
  }

  *a6 = 2LL * v29;
  return result;
}

uint64_t sub_51B2C(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 364);
  unsigned int v3 = 2 * a2;
  if (v2 == 8) {
    int v4 = 2 * a2;
  }
  else {
    int v4 = 0;
  }
  if (v2 != 6) {
    unsigned int v3 = v4;
  }
  if (v2 == 4) {
    return (4 * a2);
  }
  else {
    return v3;
  }
}

uint64_t sub_51B54(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 364);
  unsigned int v3 = 2 * a2;
  if (v2 == 8) {
    int v4 = 2 * a2;
  }
  else {
    int v4 = 0;
  }
  if (v2 != 6) {
    unsigned int v3 = v4;
  }
  if (v2 == 4) {
    return (4 * a2);
  }
  else {
    return v3;
  }
}

uint64_t sub_51B7C()
{
  return 90LL;
}

os_log_t sub_51B84()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_96190 = (uint64_t)result;
  return result;
}

void sub_51BB0(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  v5[0] = *(_OWORD *)a3;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a3 + 32);
  sub_415BC(a1, a2, (uint64_t)v5);
  *(void *)uint64_t v4 = &off_83BF8;
  *(_BYTE *)(v4 + 152) = 1;
}

void sub_51BF8(void *a1)
{
  uint64_t v1 = sub_415F0(a1);
  operator delete(v1);
}

uint64_t sub_51C0C(uint64_t a1, int a2)
{
  *(void *)(a1 + 24) = 0x40BF400000000000LL;
  uint64_t v3 = a1 + 24;
  *(_DWORD *)(a1 + 116) = a2;
  *(void *)(a1 + 32) = 1634492791LL;
  uint64_t v4 = (const AudioStreamBasicDescription *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  *(_DWORD *)(a1 + 52) = v5;
  *(void *)(a1 + 56) = 8LL;
  UInt32 ioPropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 64));
  sub_189BC(Property, (uint64_t)"couldn't get output data format");
  OSStatus v7 = AudioConverterNew((const AudioStreamBasicDescription *)v3, v4, (AudioConverterRef *)(v3 - 8));
  sub_189BC(v7, (uint64_t)"Could not create new audio converter");
  *(_DWORD *)(v3 + sub_52C5C(v1 - 96) = 1;
  uint64_t v8 = operator new[](0x10uLL);
  unsigned int v9 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v8;
  if (v9) {
    operator delete[](v9);
  }
  *(_DWORD *)(a1 + 112) = 16450;
  uint64_t v10 = operator new[](0x4042uLL);
  unint64_t v11 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v10;
  if (v11) {
    operator delete[](v11);
  }
  int v12 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0LL;
  if (v12) {
    operator delete[](v12);
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a1 + 112) / *(_DWORD *)(a1 + 80);
  return 0LL;
}

void sub_51D2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t *a6)
{
  if (a3)
  {
    uint64_t v10 = a3;
    do
    {
      int v11 = *a2++;
      *a4++ = alaw_to_linear(v11);
      --v10;
    }

    while (v10);
    uint64_t v12 = 2 * a3;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  *a6 = v12;
}

uint64_t sub_51D90(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_51D98(uint64_t a1, uint64_t a2)
{
  return a2;
}

os_log_t sub_51DA0()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_96198 = (uint64_t)result;
  return result;
}

void sub_51DCC(uint64_t a1, int a2, uint64_t a3, char a4, char a5)
{
  __int128 v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  uint64_t v10 = *(void *)(a3 + 32);
  sub_10344(a1, a2, v9);
  *(void *)uint64_t v8 = off_83C68;
  *(_BYTE *)(v8 + 210) = 0;
  *(_BYTE *)(v8 + sub_52C5C(v49 - 176) = 1;
  *(_BYTE *)(v8 + 20_Block_object_dispose(va, 8) = a5;
  *(_BYTE *)(v8 + 209) = a4;
  *(void *)(v8 + 56) = 0LL;
}

void *sub_51E30(void *a1)
{
  *a1 = off_83C68;
  int v2 = (OpaqueAudioConverter *)a1[7];
  if (v2)
  {
    AudioConverterDispose(v2);
  }

  else
  {
    uint64_t v3 = (os_log_s *)qword_961A0;
    if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_ERROR)) {
      sub_605DC(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }

  return sub_10384(a1);
}

void sub_51E9C(void *a1)
{
  uint64_t v1 = sub_51E30(a1);
  operator delete(v1);
}

uint64_t sub_51EB0(uint64_t a1, int a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 92);
  if (*(_BYTE *)(a1 + 209))
  {
    uint64_t v7 = (os_log_s *)qword_961A0;
    if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "LC3 encoder init to AACELD 48K", buf, 2u);
    }

    int v8 = 1633772389;
  }

  else
  {
    int v8 = 1818440480;
  }

  int v9 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 156) = a2;
  if (v9 <= 259)
  {
    if (v9 == 258)
    {
      int v10 = 180;
      goto LABEL_16;
    }

    if (v9 == 259)
    {
      int v10 = 240;
      goto LABEL_16;
    }
  }

  else
  {
    switch(v9)
    {
      case 260:
        goto LABEL_10;
      case 508:
        int v10 = 480;
        goto LABEL_16;
      case 1633772389:
LABEL_10:
        int v10 = 360;
LABEL_16:
        uint64_t v11 = *(void *)(a1 + 64);
        *(void *)(a1 + 104) = v11;
        *(void *)(a1 + 184) = a3;
        *(void *)(a1 + 200) = 0LL;
        *(void *)(a1 + 192) = 8LL * a3;
        *(_DWORD *)(a1 + 112) = v8;
        *(void *)(a1 + 116) = 0LL;
        *(_DWORD *)(a1 + 124) = v10;
        *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
        *(_DWORD *)(a1 + 132) = v6;
        *(void *)(a1 + 136) = 0LL;
        UInt32 ioPropertyDataSize = 40;
        uint64_t v12 = (os_log_s *)qword_961A0;
        if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          int v14 = *(_DWORD *)(a1 + 76);
          int v15 = *(_DWORD *)(a1 + 80);
          int v16 = *(_DWORD *)(a1 + 84);
          int v17 = *(_DWORD *)(a1 + 88);
          int v18 = *(_DWORD *)(a1 + 92);
          int v19 = *(_DWORD *)(a1 + 96);
          *(_DWORD *)std::string buf = 134219776;
          uint64_t v50 = v11;
          __int16 v51 = 1024;
          int v52 = v13;
          __int16 v53 = 1024;
          int v54 = v14;
          __int16 v55 = 1024;
          int v56 = v15;
          __int16 v57 = 1024;
          int v58 = v16;
          __int16 v59 = 1024;
          int v60 = v17;
          __int16 v61 = 1024;
          int v62 = v18;
          __int16 v63 = 1024;
          int v64 = v19;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "LC3 Encoder input format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPer Packet = %u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
          uint64_t v12 = (os_log_s *)qword_961A0;
        }

        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *(void *)(a1 + 104);
          int v21 = *(_DWORD *)(a1 + 112);
          int v22 = *(_DWORD *)(a1 + 116);
          int v23 = *(_DWORD *)(a1 + 120);
          int v24 = *(_DWORD *)(a1 + 124);
          int v25 = *(_DWORD *)(a1 + 128);
          int v26 = *(_DWORD *)(a1 + 132);
          int v27 = *(_DWORD *)(a1 + 136);
          *(_DWORD *)std::string buf = 134219776;
          uint64_t v50 = v20;
          __int16 v51 = 1024;
          int v52 = v21;
          __int16 v53 = 1024;
          int v54 = v22;
          __int16 v55 = 1024;
          int v56 = v23;
          __int16 v57 = 1024;
          int v58 = v24;
          __int16 v59 = 1024;
          int v60 = v25;
          __int16 v61 = 1024;
          int v62 = v26;
          __int16 v63 = 1024;
          int v64 = v27;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "LC3 Encoder output format:  mSampleRate = %f, mFormatID = %u, mFormatFlags:%u, mBytesPerPacket:%u, mFramesPe rPacket = %u, mBytesPerFrame:%u, mChannelsPerFrame = %u, mBitsPerChannel:%u, format = float PCM\n",  buf,  0x36u);
        }

        OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, (void *)(a1 + 104));
        sub_189BC(Property, (uint64_t)"couldn't create output data format");
        if (*(_BYTE *)(a1 + 48))
        {
          __int16 v29 = (os_log_s *)qword_961A0;
          if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEBUG)) {
            sub_6063C((int *)(a1 + 120), v29);
          }
        }

        OSStatus v30 = AudioConverterNew( (const AudioStreamBasicDescription *)(a1 + 64),  (const AudioStreamBasicDescription *)(a1 + 104),  (AudioConverterRef *)(a1 + 56));
        sub_189BC(v30, (uint64_t)"Could not create new audio converter");
        OSStatus v31 = AudioConverterSetProperty(*(AudioConverterRef *)(a1 + 56), 0x70616B6Cu, 4u, (const void *)(a1 + 192));
        sub_189BC(v31, (uint64_t)"Failed to set target data rate");
        unsigned int v32 = vcvtps_u32_f32((float)(20480 * v6 * *(_DWORD *)(a1 + 88)) / (float)a3);
        *(_DWORD *)(a1 + 160) = v32;
        size_t v33 = v32 * a3;
        *(_DWORD *)(a1 + 152) = v33;
        __int16 v34 = operator new[](v33);
        double v35 = *(void **)(a1 + 144);
        *(void *)(a1 + 144) = v34;
        if (v35)
        {
          operator delete[](v35);
          unsigned int v32 = *(_DWORD *)(a1 + 160);
        }

        __int16 v36 = operator new[](16LL * v32);
        __int128 v37 = *(void **)(a1 + 168);
        *(void *)(a1 + 16_Block_object_dispose(va, 8) = v36;
        if (v37) {
          operator delete[](v37);
        }
        return 0LL;
    }
  }

  uint64_t v38 = 560226676LL;
  __int16 v40 = (os_log_s *)qword_961A0;
  if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_ERROR)) {
    sub_6060C(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  return v38;
}

void sub_52278(uint64_t a1, unsigned __int8 *a2, unsigned int a3, _DWORD *a4, UInt32 a5)
{
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v54 = 0u;
  *(void *)&outOutputData.mNumberBuffers = 0LL;
  UInt32 ioOutputDataPacketSize = *(_DWORD *)(a1 + 160);
  inInputDataProcUserData[0] = a2;
  if (*(_BYTE *)(a1 + 210))
  {
    uint64_t v7 = (os_log_s *)qword_961A0;
    if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a2;
      int v9 = a2[1];
      int v10 = a2[2];
      int v11 = a2[3];
      int v12 = a2[4];
      int v13 = a2[5];
      int v14 = a2[6];
      int v15 = a2[7];
      *(_DWORD *)std::string buf = 67111168;
      LODWORD(v5_Block_object_dispose(va, 8) = a3;
      WORD2(v5_Block_object_dispose(va, 8) = 1024;
      *(_DWORD *)((char *)&v58 + 6) = v8;
      WORD5(v5_Block_object_dispose(va, 8) = 1024;
      HIDWORD(v5_Block_object_dispose(va, 8) = v9;
      *(_WORD *)__int16 v59 = 1024;
      *(_DWORD *)&v59[2] = v10;
      LOWORD(v60) = 1024;
      *(_DWORD *)((char *)&v60 + 2) = v11;
      HIWORD(v60) = 1024;
      *(_DWORD *)__int16 v61 = v12;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)int v62 = v13;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)__int16 v63 = v14;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)int v64 = v15;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "LC3Encoder PCM len:%u, %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x",  buf,  0x38u);
    }
  }

  int v16 = 0;
  int v46 = 0;
  uint64_t v17 = 0LL;
  inInputDataProcUserData[1] = *(unsigned int *)(a1 + 80) * (unint64_t)a3;
  __int128 v18 = *(_OWORD *)(a1 + 80);
  __int128 v51 = *(_OWORD *)(a1 + 64);
  __int128 v52 = v18;
  uint64_t v53 = *(void *)(a1 + 96);
  *a4 = 0;
  do
  {
    UInt32 v19 = *(_DWORD *)(a1 + 132);
    outOutputData.mNumberBuffers = 1;
    UInt32 v20 = *(_DWORD *)(a1 + 152);
    outOutputData.mBuffers[0].mNumberChannels = v19;
    outOutputData.mBuffers[0].size_t mDataByteSize = v20;
    outOutputData.mBuffers[0].mData = (void *)(*(void *)(a1 + 144) + v17);
    if (*(_BYTE *)(a1 + 210))
    {
      int v21 = (os_log_s *)qword_961A0;
      if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        LODWORD(v5_Block_object_dispose(va, 8) = ioOutputDataPacketSize;
        WORD2(v5_Block_object_dispose(va, 8) = 2048;
        *(void *)((char *)&v58 + 6) = v17;
        _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEFAULT, "LC3Encoder ->c io:%u, offset %llu", buf, 0x12u);
      }
    }

    OSStatus v22 = AudioConverterFillComplexBuffer( *(AudioConverterRef *)(a1 + 56),  (AudioConverterComplexInputDataProc)sub_188A8,  inInputDataProcUserData,  &ioOutputDataPacketSize,  &outOutputData,  *(AudioStreamPacketDescription **)(a1 + 168));
    sub_189BC(v22, (uint64_t)"LC3 Encode  AudioConverterFillComplexBuffer failed");
    if (*(_BYTE *)(a1 + 210))
    {
      int v23 = (os_log_s *)qword_961A0;
      if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v5_Block_object_dispose(va, 8) = ioOutputDataPacketSize;
        _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, "LC3Encoder c-> io:%u", buf, 8u);
      }
    }

    UInt32 v24 = ioOutputDataPacketSize;
    if (!ioOutputDataPacketSize) {
      break;
    }
    if (ioOutputDataPacketSize > a5)
    {
      uint64_t v42 = (os_log_s *)qword_961A0;
      if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_ERROR)) {
        sub_606B0(v24, a5, v42);
      }
      *a4 = 0;
      return;
    }

    uint64_t v25 = 0LL;
    unint64_t v26 = 0LL;
    int v44 = v16 + 1;
    uint64_t v27 = *(void *)(a1 + 144) + v17;
    do
    {
      char v28 = (unsigned __int8 *)(v27 + *(void *)(*(void *)(a1 + 168) + v25));
      __int16 v29 = &a4[4 * (v46 + v26)];
      *((void *)v29 + 2) = v28;
      OSStatus v30 = (uint64_t *)(*(void *)(a1 + 168) + v25);
      uint64_t v31 = *((unsigned int *)v30 + 3);
      _OWORD v29[2] = 1;
      v29[3] = v31;
      ++*a4;
      if (*(_BYTE *)(a1 + 210))
      {
        unsigned int v32 = (os_log_s *)qword_961A0;
        if (os_log_type_enabled((os_log_t)qword_961A0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *v30;
          int v34 = *v28;
          int v35 = v28[1];
          int v36 = v28[2];
          int v37 = v28[3];
          *(_DWORD *)std::string buf = 134220032;
          *(void *)&__int128 v58 = v27;
          WORD4(v5_Block_object_dispose(va, 8) = 1024;
          *(_DWORD *)((char *)&v58 + 10) = v26;
          HIWORD(v5_Block_object_dispose(va, 8) = 1024;
          *(_DWORD *)__int16 v59 = v46 + v26;
          *(_WORD *)&v59[4] = 2048;
          uint64_t v60 = v33;
          *(_WORD *)__int16 v61 = 1024;
          *(_DWORD *)&v61[2] = v31;
          *(_WORD *)int v62 = 1024;
          *(_DWORD *)&v62[2] = v34;
          *(_WORD *)__int16 v63 = 1024;
          *(_DWORD *)&v63[2] = v35;
          *(_WORD *)int v64 = 1024;
          *(_DWORD *)&v64[2] = v36;
          __int16 v65 = 1024;
          int v66 = v37;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "LC3Encoder c->%p,%d,%u,%lld,%u,%02x,%02x,%02x,%02x",  buf,  0x40u);
          UInt32 v24 = ioOutputDataPacketSize;
        }
      }

      v17 += v31;
      ++v26;
      v25 += 16LL;
    }

    while (v26 < v24);
    int v16 = v44;
    if (v24 && *(_BYTE *)(a1 + 177))
    {
      UInt32 v38 = 0;
      __int128 v39 = (int *)(*(void *)(a1 + 168) + 12LL);
      uint64_t v40 = v24;
      do
      {
        int v41 = *v39;
        v39 += 4;
        v38 += v41;
        --v40;
      }

      while (v40);
      sub_1097C(a1, v38, v24);
    }

    v46 += v26;
  }

  while (v44 != 10);
}

uint64_t sub_52704()
{
  return 1LL;
}

uint64_t sub_5270C()
{
  return 1LL;
}

os_log_t sub_52714()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_961A0 = (uint64_t)result;
  return result;
}

uint64_t sub_52740(uint64_t result)
{
  return result;
}

uint64_t sub_52770(uint64_t a1)
{
  uint64_t result = 730005540LL;
  if (a1 != 9)
  {
    if (a1 != 10) {
      return result;
    }
    uint64_t result = 730005544LL;
  }

  return kdebug_trace(result, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_527A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return result;
}

uint64_t sub_527C8(uint64_t a1)
{
  uint64_t result = 730005556LL;
  if (a1 != 13)
  {
    if (a1 != 14) {
      return result;
    }
    uint64_t result = 730005560LL;
  }

  return kdebug_trace(result, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_52800(uint64_t a1)
{
  return WriteStackshotReport_stdc(a1, 3172327085LL);
}

uint64_t sub_5280C()
{
  return 1LL;
}

uint64_t sub_52814()
{
  return os_variant_has_internal_content("com.apple.bluetooth");
}

CFStringRef sub_52820()
{
  uint64_t result = (const __CFString *)MGGetStringAnswer(@"HWModelStr");
  if (result)
  {
    uint64_t v1 = result;
    CFIndex length = CFStringFind(result, @"DEV", 4uLL).length;
    CFRelease(v1);
    return (const __CFString *)(length != 0);
  }

  return result;
}

uint64_t sub_52870()
{
  if (qword_961B8 != -1) {
    dispatch_once(&qword_961B8, &stru_83CB0);
  }
  return byte_961B0;
}

void sub_528B0(id a1)
{
  byte_961B0 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) == 7;
}

uint64_t sub_528E0()
{
  return mkdir(byte_961C0, 0x1EDu);
}

pthread_mutex_t *sub_5291C(pthread_mutex_t *a1)
{
  v4.__sig = 0LL;
  *(void *)v4.__opaque = 0LL;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  int v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60734();
    }
  }

  return a1;
}

pthread_mutex_t *sub_529EC(pthread_mutex_t *a1)
{
  if (pthread_mutex_destroy(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60734();
    }
  }

  return a1;
}

uint64_t sub_52A68(pthread_mutex_t *a1)
{
  uint64_t result = pthread_mutex_lock(a1);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60734();
    }
    uint64_t result = os_variant_has_internal_content("com.apple.bluetooth");
    if ((_DWORD)result) {
      abort();
    }
  }

  return result;
}

uint64_t sub_52AC8(pthread_mutex_t *a1)
{
  uint64_t result = pthread_mutex_unlock(a1);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60734();
    }
    uint64_t result = os_variant_has_internal_content("com.apple.bluetooth");
    if ((_DWORD)result) {
      abort();
    }
  }

  return result;
}

uint64_t sub_52B28(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  sub_52B54(a1);
  return a1;
}

uint64_t sub_52B54(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    int v2 = (os_log_s *)qword_961A8;
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60794(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
  return sub_52A68(*(pthread_mutex_t **)a1);
}

uint64_t sub_52BC0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    sub_52BF4(a1);
  }
  return a1;
}

uint64_t sub_52BF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8))
  {
    int v2 = (os_log_s *)qword_961A8;
    if (os_log_type_enabled((os_log_t)qword_961A8, OS_LOG_TYPE_FAULT)) {
      sub_60808(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;
  return sub_52AC8(*(pthread_mutex_t **)a1);
}

void sub_52C60( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

os_log_t sub_52C70()
{
  os_log_t result = os_log_create("com.apple.bluetooth", "BTAudio");
  qword_961A8 = (uint64_t)result;
  return result;
}

_DWORD *decoder_create(int a1)
{
  int v2 = malloc(0x30uLL);
  uint64_t v3 = (int *)((char *)&hmModesConfig + 16 * a1);
  int v4 = *v3;
  uint64_t v5 = v3[1];
  *int v2 = (a1 - 5) < 2;
  v2[1] = v4;
  void v2[2] = v5;
  if ((a1 - 5) <= 1)
  {
    unpack_lite_create();
    *((void *)v2 + 4) = v6;
  }

  *((void *)v2 + 5) = imdct_create(v5);
  *((void *)v2 + 2) = malloc(4 * v5);
  return v2;
}

void decoder_destroy(void *a1)
{
  if (*(_DWORD *)a1 == 1) {
    unpack_lite_destroy(*((void **)a1 + 4));
  }
  imdct_destroy(*((void *)a1 + 5));
  free(*((void **)a1 + 2));
  free(a1);
}

void decode(uint64_t a1, unsigned __int16 *a2, float *a3, int a4)
{
  uint64_t v6 = *(float **)(a1 + 16);
  if (a4)
  {
    float __B = 0.9;
    vDSP_vsmul(v6, 1LL, &__B, v6, 1LL, *(int *)(a1 + 8));
    int v7 = *(_DWORD *)(a1 + 24);
  }

  else
  {
    if (*(_DWORD *)a1) {
      int v8 = unpack_lite_c(*(void *)(a1 + 32), a2, *(unsigned int *)(a1 + 4), (uint64_t)v6, *(_DWORD *)(a1 + 8));
    }
    else {
      int v8 = unpack(a2, *(_DWORD *)(a1 + 4), (uint64_t)v6, *(_DWORD *)(a1 + 8));
    }
    int v7 = v8;
    *(_DWORD *)(a1 + 24) = v8;
  }

  imdct(*(void *)(a1 + 40), v6, v7, a3);
}

_DWORD *encoder_create(int a1)
{
  int v2 = malloc(0x68uLL);
  uint64_t v3 = v2;
  int v4 = (int *)((char *)&hmModesConfig + 16 * a1);
  int v5 = *v4;
  uint64_t v6 = v4[1];
  *int v2 = (a1 - 5) < 2;
  v2[1] = v5;
  *((void *)v2 + 12) = &filters_875;
  int v7 = v4[2];
  void v2[2] = v6;
  v2[3] = v7;
  if (a1 == 6)
  {
    *((void *)v2 + 12) = &filters_583;
  }

  else
  {
    if ((a1 - 5) > 1)
    {
      int v8 = quantizer_create(v6, v7, v5, (float)v4[3]);
      goto LABEL_8;
    }
  }

  quantizer_lite_create();
LABEL_8:
  *((void *)v3 + 11) = v8;
  *((void *)v3 + 7) = mdct_create(v6);
  *((void *)v3 + 10) = malloc(4 * v6);
  size_t v9 = 4LL * ((int)v6 + 2);
  *((void *)v3 + _Block_object_dispose(va, 8) = malloc(v9);
  *((void *)v3 + 9) = malloc(v9);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((void *)v3 + 6) = 0LL;
  return v3;
}

void encoder_destroy(int *a1)
{
  int v2 = *a1;
  uint64_t v3 = (void *)*((void *)a1 + 11);
  if (v2) {
    quantizer_lite_destroy(v3);
  }
  else {
    quantizer_destroy((uint64_t)v3);
  }
  mdct_destroy(*((void *)a1 + 7));
  free(*((void **)a1 + 8));
  free(*((void **)a1 + 9));
  free(*((void **)a1 + 10));
  free(a1);
}

void encode(uint64_t a1, const float *__A, _OWORD *a3)
{
  vDSP_Length v5 = *(int *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(const float **)(a1 + 80);
  *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(a1 + 20);
  vDSP_mmov(__A, (float *)(v6 + 8), v5, 1uLL, v5, v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v6 + 4 * v5);
  uint64_t v9 = 4 * v5 + 4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v6 + v9);
  int v10 = *(const float **)(a1 + 96);
  *(_DWORD *)uint64_t v7 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(a1 + 28);
  vDSP_deq22((const float *)v6, 1LL, v10, (float *)v7, 1LL, v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 + 4 * v5);
  *(_DWORD *)(a1 + 2_Block_object_dispose(va, 8) = *(_DWORD *)(v7 + v9);
  *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(a1 + 36);
  vDSP_deq22((const float *)v7, 1LL, v10 + 5, (float *)v6, 1LL, v5);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v6 + 4 * v5);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(v6 + v9);
  *(_DWORD *)uint64_t v7 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(a1 + 44);
  vDSP_deq22((const float *)v6, 1LL, v10 + 10, (float *)v7, 1LL, v5);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v7 + 4 * v5);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(v7 + v9);
  *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(a1 + 52);
  vDSP_deq22((const float *)v7, 1LL, v10 + 15, (float *)v6, 1LL, v5);
  *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_DWORD *)(v6 + 4 * v5);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(v6 + v9);
  mdct(*(void *)(a1 + 56), (const void *)(v6 + 8), (uint64_t)v8);
  uint64_t v11 = *(void *)(a1 + 88);
  if (*(_DWORD *)a1) {
    quantize_lite(v11, (uint64_t)v8, a3);
  }
  else {
    quantize(v11, v8, (uint64_t)a3);
  }
}

float butterfly2(uint64_t a1, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = 2LL * a3;
    vDSP_Length v5 = (float *)(a1 + 4);
    do
    {
      float v6 = *(v5 - 1);
      float v7 = a2[1];
      float v8 = (float)(v6 * *a2) - (float)(*v5 * v7);
      float v9 = (float)(*v5 * *a2) + (float)(v6 * v7);
      int v10 = &v5[v4];
      float v11 = v5[v4 - 1];
      float v12 = v5[2 * a3];
      float v13 = a2[2 * a3];
      float v14 = a2[v4 + 1];
      float v15 = (float)(v11 * v13) - (float)(v12 * v14);
      float v16 = (float)(v12 * v13) + (float)(v11 * v14);
      float v17 = v9 + v16;
      float result = v9 - v16;
      *(v5 - 1) = v8 + v15;
      float *v5 = v17;
      *(v10 - 1) = v8 - v15;
      *int v10 = result;
      a2 += 2;
      v5 += 2;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t butterfly3(uint64_t result, float *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 4LL * a3;
    uint64_t v4 = (float *)(result + 4);
    uint64_t v5 = 2LL * a3;
    uint64_t v6 = a3;
    do
    {
      float v7 = *(v4 - 1);
      float v8 = a2[1];
      float v9 = (float)(v7 * *a2) - (float)(*v4 * v8);
      float v10 = (float)(*v4 * *a2) + (float)(v7 * v8);
      float v11 = &v4[v5];
      float v12 = v4[v5 - 1];
      float v13 = v4[2 * a3];
      float v14 = a2[2 * a3];
      float v15 = a2[v5 + 1];
      float v16 = (float)(v12 * v14) - (float)(v13 * v15);
      float v17 = (float)(v13 * v14) + (float)(v12 * v15);
      __int128 v18 = &v4[v3];
      float v19 = v4[v3 - 1];
      float v20 = v4[4 * a3];
      float v21 = a2[4 * a3];
      float v22 = a2[v3 + 1];
      float v23 = (float)(v19 * v21) - (float)(v20 * v22);
      float v24 = (float)(v20 * v21) + (float)(v19 * v22);
      *(v4 - 1) = (float)(v9 + v16) + v23;
      float *v4 = (float)(v10 + v17) + v24;
      a2 += 2;
      v4 += 2;
      --v6;
    }

    while (v6);
  }

  return result;
}

float butterfly4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 8LL * a3;
    uint64_t v5 = a2 + 8LL * a3;
    uint64_t v6 = a2 + 16LL * a3;
    uint64_t v7 = 8LL * a3;
    uint64_t v8 = a1 + 24LL * a3 + 4;
    uint64_t v9 = a1 + 16LL * a3 + 4;
    uint64_t v10 = a2 + 24LL * a3;
    do
    {
      float v11 = (float *)(a1 + v3);
      float v12 = *(float *)(a1 + v3);
      float v13 = *(float *)(a1 + v3 + 4);
      float v14 = *(float *)(a2 + v3);
      float v15 = *(float *)(a2 + v3 + 4);
      float v16 = (float)(v12 * v14) - (float)(v13 * v15);
      float v17 = (float)(v13 * v14) + (float)(v12 * v15);
      __int128 v18 = (float *)(v4 + v3);
      float v19 = *(float *)(v4 + v3);
      float v20 = *(float *)(v4 + v3 + 4);
      float v21 = *(float *)(v5 + v3);
      float v22 = *(float *)(v5 + v3 + 4);
      float v23 = (float)(v19 * v21) - (float)(v20 * v22);
      float v24 = (float)(v20 * v21) + (float)(v19 * v22);
      uint64_t v25 = (float *)(v9 + v3);
      float v26 = *(float *)(v9 + v3 - 4);
      float v27 = *(float *)(v9 + v3);
      float v28 = *(float *)(v6 + v3);
      float v29 = *(float *)(v6 + v3 + 4);
      float v30 = (float)(v26 * v28) - (float)(v27 * v29);
      float v31 = (float)(v27 * v28) + (float)(v26 * v29);
      unsigned int v32 = (float *)(v8 + v3);
      float v33 = *(float *)(v8 + v3 - 4);
      float v34 = *(float *)(v8 + v3);
      float v35 = *(float *)(v10 + v3);
      float v36 = *(float *)(v10 + v3 + 4);
      float v37 = (float)(v33 * v35) - (float)(v34 * v36);
      float v38 = (float)(v34 * v35) + (float)(v33 * v36);
      float v39 = v16 + v30;
      float v40 = v17 + v31;
      float v41 = v16 - v30;
      float v42 = v17 - v31;
      float v43 = v24 + v38;
      float v44 = v24 - v38;
      *float v11 = v39 + (float)(v23 + v37);
      v11[1] = v40 + v43;
      float *v18 = v41 + v44;
      v18[1] = v42 + (float)(v37 - v23);
      float result = v42 - (float)(v37 - v23);
      *(v25 - 1) = v39 - (float)(v23 + v37);
      *uint64_t v25 = v40 - v43;
      *(v32 - 1) = v41 - v44;
      *unsigned int v32 = result;
      v3 += 8LL;
    }

    while (v7 != v3);
  }

  return result;
}

uint64_t butterfly5last(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  if (a7 >= 1)
  {
    int v8 = 0;
    for (int i = 0; i != a7; ++i)
    {
      if (a8 >= 1)
      {
        uint64_t v10 = 0LL;
        float v11 = (int *)(a6 + 4LL * v8);
        int v12 = a8;
        do
        {
          uint64_t v13 = *v11++;
          float v14 = *(float *)(result + v10);
          float v15 = *(float *)(result + v10 + 4);
          float v16 = *(float *)(a3 + v10);
          float v17 = *(float *)(a3 + v10 + 4);
          __int128 v18 = (float *)(a4 + 8 * v13);
          float v19 = (float)(v14 * v16) - (float)(v15 * v17);
          float v20 = (float)(v15 * v16) + (float)(v14 * v17);
          float v22 = *(float *)(result + v10 + 8);
          float v21 = *(float *)(result + v10 + 12);
          float v23 = *(float *)(a3 + v10 + 8);
          float v24 = *(float *)(a3 + v10 + 12);
          float v25 = -(float)(v21 * v24);
          float v26 = v21 * v23;
          float v27 = v25 + (float)(v22 * v23);
          float v28 = v26 + (float)(v22 * v24);
          float v29 = *(float *)(result + v10 + 16);
          float v30 = *(float *)(result + v10 + 20);
          float v31 = *(float *)(a3 + v10 + 16);
          float v32 = *(float *)(a3 + v10 + 20);
          float v33 = (float)(v29 * v31) - (float)(v30 * v32);
          float v34 = v30 * v31;
          float v35 = *(float *)(result + v10 + 24);
          float v36 = *(float *)(result + v10 + 28);
          float v37 = v34 + (float)(v29 * v32);
          float v39 = *(float *)(a3 + v10 + 24);
          float v38 = *(float *)(a3 + v10 + 28);
          float v40 = (float)(v35 * v39) - (float)(v36 * v38);
          float v41 = (float)(v36 * v39) + (float)(v35 * v38);
          float v43 = *(float *)(result + v10 + 32);
          float v42 = *(float *)(result + v10 + 36);
          float v44 = *(float *)(a3 + v10 + 32);
          float v45 = *(float *)(a3 + v10 + 36);
          float v46 = -(float)(v42 * v45);
          float v47 = v42 * v44;
          float v48 = v46 + (float)(v43 * v44);
          float v49 = v47 + (float)(v43 * v45);
          float v50 = (float)((float)((float)(v19 + (float)(v27 * 0.30902)) + (float)(v33 * -0.80902))
          float v53 = (float)((float)(v19 + v27) + v33) + v40;
          float v54 = (float)((float)((float)(v20 + (float)(v28 * 0.30902)) + (float)(v37 * -0.80902))
          float v56 = (float)((float)((float)(v20 + v28) + v37) + v41) + v49;
          float *v18 = v53 + v48;
          v18[1] = v56;
          uint64_t v60 = &v18[2 * a5];
          *uint64_t v60 = v51 + v50;
          v60[1] = v54 + v52;
          __int16 v61 = &v60[2 * a5];
          *__int16 v61 = v58 + v55;
          v61[1] = v57 + v59;
          int v62 = &v61[2 * a5];
          *int v62 = v55 - v58;
          v62[1] = v57 - v59;
          __int16 v63 = &v62[2 * a5];
          *__int16 v63 = v50 - v51;
          v63[1] = v54 - v52;
          ++v8;
          v10 += 8LL * (a2 - 4) + 32;
          --v12;
        }

        while (v12);
        result += v10;
      }
    }
  }

  return result;
}

uint64_t idxcomp(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if (a5)
  {
    int v9 = *(_DWORD *)a5;
    if (*(int *)a5 >= 1)
    {
      uint64_t v10 = *(unsigned int *)(a5 + 4);
      int v11 = *(_DWORD *)(a5 + 8);
      do
      {
        float result = idxcomp(v7, v6, v5, v10, *(void *)(a5 + 32));
        uint64_t v6 = (v6 + v10);
        uint64_t v5 = (v5 + v11);
        --v9;
      }

      while (v9);
    }
  }

  else
  {
    *(_DWORD *)(result + 4LL * ((int)a2 / a4)) = a3;
  }

  return result;
}

char *hfft_create(int *a1, int a2)
{
  uint64_t v4 = a1;
  uint64_t v5 = (a2 - 1);
  if (a2 >= 2)
  {
    uint64_t v6 = (a2 - 1);
    uint64_t v7 = a1;
    do
    {
      int v8 = *v7++;
    }

    while (--v6);
  }

  int v9 = (char *)malloc(0x20uLL);
  if (a2 < 1) {
    goto LABEL_27;
  }
  unint64_t v10 = a2;
  int v11 = 1;
  uint64_t v12 = a2;
  uint64_t v13 = v4;
  do
  {
    int v14 = *v13++;
    v11 *= v14;
    --v12;
  }

  while (v12);
  if (a2 < 2)
  {
LABEL_27:
    free(v9);
    return 0LL;
  }

  unint64_t v15 = 0LL;
  float v16 = 0LL;
  float v45 = v9;
  float v46 = v9 + 24;
  float v17 = v4 + 1;
  uint64_t v18 = 1LL;
  int v19 = 1;
  uint64_t v48 = v5;
  float v49 = v4;
  unint64_t v47 = v10;
  do
  {
    float v20 = v16;
    float v21 = (int *)malloc(0x28uLL);
    *((void *)v21 + 4) = 0LL;
    float v22 = v20 + 8;
    if (!v20)
    {
      float v22 = v46;
      int v2 = v21;
    }

    *float v22 = v21;
    uint64_t v23 = v4[v15];
    *float v21 = v23;
    unint64_t v24 = v15 + 1;
    BOOL v25 = v24 >= v10;
    unint64_t v53 = v24;
    float v54 = v2;
    float v52 = v17;
    int v51 = v19;
    int v26 = 1;
    if (!v25)
    {
      unint64_t v27 = v10;
      float v28 = v17;
      do
      {
        int v29 = *v28++;
        v26 *= v29;
        --v27;
      }

      while (v18 != v27);
    }

    v21[1] = v26;
    void v21[2] = v11 / (v26 * (int)v23);
    float v50 = v21;
    float v30 = (char *)malloc(8 * (int)v23 * (uint64_t)v26);
    if ((int)v23 >= 1)
    {
      int v31 = 0;
      int v32 = 0;
      do
      {
        if (v26 >= 1)
        {
          int v33 = 0;
          float v34 = (float32x2_t *)&v30[8 * v31];
          v31 += v26;
          int v35 = v26;
          do
          {
            __double2 v37 = __sincos_stret((float)((float)((float)v33 * -6.2832) / (float)(v26 * v23)));
            v36.f64[0] = v37.__cosval;
            v36.f64[1] = v37.__sinval;
            *v34++ = vcvt_f32_f64(v36);
            v33 += v32;
            --v35;
          }

          while (v35);
        }

        ++v32;
      }

      while (v32 != (_DWORD)v23);
    }

    uint64_t v38 = kernels[v23];
    int v19 = v23 * v51;
    uint64_t v4 = v49;
    float v16 = v50;
    *((void *)v50 + 2) = v30;
    *((void *)v50 + 3) = v38;
    ++v18;
    unint64_t v15 = v53;
    float v17 = v52 + 1;
    unint64_t v10 = v47;
    int v2 = v54;
  }

  while (v53 != v48);
  float v39 = malloc(4 * v50[2] * (uint64_t)*v50);
  int v40 = *v54;
  int v41 = v54[1];
  *(_DWORD *)float v45 = v19;
  if (v40 >= 1)
  {
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
    do
    {
      idxcomp((uint64_t)v39, v42, v43, 0, *((void *)v54 + 4));
      uint64_t v42 = (v42 + v41);
      uint64_t v43 = (v43 + 1);
    }

    while (v40 != (_DWORD)v43);
  }

  float result = v45;
  *((void *)v45 + 1) = v39;
  *((void *)v45 + 2) = butterfly5last;
  return result;
}

void hfft_destroy(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(void *)(v2 + 32);
      free(*(void **)(v2 + 16));
      free((void *)v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  free(*(void **)(a1 + 8));
  free((void *)a1);
}

uint64_t hfft_run(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned int *)*((void *)a1 + 3);
  (*((void (**)(uint64_t, uint64_t, void))v4 + 3))(a2, a3, v4[1]);
  uint64_t v5 = *((void *)v4 + 2);
  signed int v6 = v4[1];
  uint64_t v7 = v4[2];
  uint64_t v8 = *v4;
  int v9 = (unsigned int *)*((void *)v4 + 4);
  if (v9)
  {
    do
    {
      uint64_t v10 = v9[1];
      if ((int)v7 >= 1)
      {
        int v11 = 0;
        float v21 = v9;
        uint64_t v12 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v9 + 3);
        uint64_t v13 = 8LL * v6;
        uint64_t v14 = a2;
        do
        {
          if ((int)v8 >= 1)
          {
            uint64_t v15 = 0LL;
            int v16 = v8;
            do
            {
              v12(v14 + v15, v5 + v15, v10);
              v15 += v13;
              --v16;
            }

            while (v16);
            v14 += v15;
          }

          ++v11;
        }

        while (v11 != (_DWORD)v7);
        int v9 = v21;
        uint64_t v10 = v21[1];
      }

      uint64_t v5 = *((void *)v9 + 2);
      uint64_t v7 = v9[2];
      uint64_t v8 = *v9;
      signed int v6 = v10;
      int v9 = (unsigned int *)*((void *)v9 + 4);
    }

    while (v9);
  }

  else
  {
    uint64_t v10 = v4[1];
  }

  return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))a1 + 2))( a2,  v10,  v5,  a4,  *a1,  *((void *)a1 + 1),  v7,  v8);
}

char *imdct_create(signed int a1)
{
  uint64_t v2 = (char *)malloc(0x60uLL);
  *((_DWORD *)v2 + 4) = a1;
  int32x2_t v3 = vshl_s32(vdup_n_s32(a1), (int32x2_t)0xFFFFFFFEFFFFFFFFLL);
  int v55 = v3.i32[0];
  *(int32x2_t *)(v2 + 20) = v3;
  uint64_t v4 = 2 * a1;
  uint64_t v5 = (float *)malloc(4 * v4);
  *(void *)uint64_t v2 = v5;
  float v45 = malloc(4LL * (a1 + 1));
  *((void *)v2 + 1) = v45;
  int v6 = v55;
  uint64_t v7 = (float *)malloc(4LL * v55);
  *((void *)v2 + 4) = v7;
  uint64_t v8 = (float *)malloc(4LL * v55);
  *((void *)v2 + 5) = v8;
  size_t v9 = 4LL * (v55 + 1);
  *((void *)v2 + 7) = malloc(v9);
  *((void *)v2 + _Block_object_dispose(va, 8) = malloc(v9);
  uint64_t v10 = (char *)malloc(8LL * v55);
  *((void *)v2 + 6) = v10;
  *((void *)v2 + 9) = malloc(8LL * v55);
  *((void *)v2 + 10) = malloc(8LL * v55);
  double v11 = (double)(2 * a1);
  if (2 * a1 >= 1)
  {
    uint64_t v12 = v4;
    float v13 = 3.14159265 / v11;
    double v49 = v13;
    uint64x2_t v48 = (uint64x2_t)vdupq_n_s64((unint64_t)v4 - 1);
    int32x2_t v14 = (int32x2_t)0x100000000LL;
    uint64x2_t v15 = (uint64x2_t)xmmword_66280;
    int v16 = v5 + 1;
    __asm { FMOV            V2.2D, #0.5 }

    float32x2_t v22 = (float32x2_t)vdup_n_s32(0x3FC90FDBu);
    int64x2_t v46 = vdupq_n_s64(2uLL);
    float64x2_t v47 = _Q2;
    do
    {
      int32x2_t v54 = vmovn_s64((int64x2_t)vcgeq_u64(v48, v15));
      int64x2_t v56 = (int64x2_t)v15;
      v23.i64[0] = v14.i32[0];
      v23.i64[1] = v14.i32[1];
      float64x2_t v50 = vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v23), v47), v49);
      double v52 = sin(v50.f64[1]);
      v24.f64[0] = sin(v50.f64[0]);
      v24.f64[1] = v52;
      *(float32x2_t *)&v24.f64[0] = vcvt_f32_f64(v24);
      float64x2_t v51 = vcvtq_f64_f32(vmul_f32(vmul_f32(*(float32x2_t *)&v24.f64[0], v22), *(float32x2_t *)&v24.f64[0]));
      double v53 = sin(v51.f64[1]);
      double v25 = sin(v51.f64[0]);
      if ((v54.i8[0] & 1) != 0)
      {
        float v26 = v25;
        *(v16 - 1) = v26;
      }

      if ((v54.i8[4] & 1) != 0)
      {
        float v27 = v53;
        *int v16 = v27;
      }

      uint64x2_t v15 = (uint64x2_t)vaddq_s64(v56, v46);
      int32x2_t v14 = vadd_s32(v14, (int32x2_t)0x200000002LL);
      v16 += 2;
      v12 -= 2LL;
    }

    while (v12);
  }

  int v28 = 3 * v6;
  if (3 * v6 < (int)v4)
  {
    int v29 = &v5[v28];
    uint64_t v30 = v4 - v28;
    do
    {
      float *v29 = -*v29;
      ++v29;
      --v30;
    }

    while (v30);
  }

  if ((int)v4 >= 2)
  {
    for (uint64_t i = 1LL; i < v4; i += 2LL)
      v5[i] = -v5[i];
  }

  if (a1 >= 2)
  {
    uint64_t v32 = 0LL;
    float v33 = -6.28318531 / v11;
    float v34 = 8.0 / sqrt((float)a1);
    double v35 = sqrtf(v34);
    if (v6 <= 1) {
      uint64_t v36 = 1LL;
    }
    else {
      uint64_t v36 = v6;
    }
    __double2 v37 = (float *)(v10 + 4);
    do
    {
      __double2 v38 = __sincos_stret((float)((float)((float)(int)v32 + 0.125) * v33));
      float v39 = v38.__cosval * v35;
      v7[v32] = v39;
      float v40 = v38.__sinval * v35;
      v8[v32] = v40;
      *(v37 - 1) = v39;
      *__double2 v37 = v40;
      ++v32;
      v37 += 2;
    }

    while (v36 != v32);
  }

  bzero(v45, 4LL * a1);
  *((void *)v2 + 11) = 0LL;
  if (v6 <= 79)
  {
    if (v6 == 40)
    {
      uint64_t v43 = 0x400000002LL;
    }

    else
    {
      if (v6 != 60) {
        goto LABEL_34;
      }
      uint64_t v43 = 0x400000003LL;
    }

void imdct_reset(uint64_t a1)
{
}

void imdct_destroy(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    hfft_destroy(v2);
  }
  free((void *)a1);
}

void imdct(uint64_t a1, float *a2, int a3, float *a4)
{
  uint64_t v7 = *(const float **)a1;
  uint64_t v8 = *(float **)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 20);
  vDSP_Length __N = *(int *)(a1 + 24);
  vDSP_Length v11 = (int)v9;
  uint64_t v12 = *(void *)(a1 + 72);
  float v13 = *(const DSPComplex **)(a1 + 80);
  if (a3 < 0) {
    float v14 = (float)(1 << -(char)a3);
  }
  else {
    float v14 = 1.0 / (double)(1 << a3);
  }
  uint64_t v15 = *(int *)(a1 + 16);
  if ((int)v9 >= 1)
  {
    int v16 = &a2[v15 - 1];
    float v17 = (float *)(v12 + 4);
    do
    {
      float v18 = *a2;
      a2 += 2;
      *(v17 - 1) = v14 * v18;
      float v19 = *v16;
      v16 -= 2;
      *float v17 = v14 * v19;
      v17 += 2;
      --v9;
    }

    while (v9);
  }

  hfft_run(*(unsigned int **)(a1 + 88), v12, *(void *)(a1 + 48), (uint64_t)v13);
  vDSP_ctoz(v13, 2LL, (const DSPSplitComplex *)(a1 + 56), 1LL, v11);
  vDSP_zvmul( (const DSPSplitComplex *)(a1 + 56),  1LL,  (const DSPSplitComplex *)(a1 + 32),  1LL,  (const DSPSplitComplex *)(a1 + 56),  1LL,  v11,  1);
  vDSP_vma((const float *)(*(void *)(a1 + 56) + 4 * __N), 1LL, v7, 2LL, v8, 2LL, a4, 2LL, __N);
  vDSP_vmul((const float *)(*(void *)(a1 + 64) + 4 * __N), 1LL, &v7[v15], 2LL, v8, 2LL, __N);
  vDSP_vma((const float *)(*(void *)(a1 + 64) + 4 * __N - 4), -1LL, v7 + 1, 2LL, v8 + 1, 2LL, a4 + 1, 2LL, __N);
  vDSP_vmul((const float *)(*(void *)(a1 + 56) + 4 * __N - 4), -1LL, &v7[v15 + 1], 2LL, v8 + 1, 2LL, __N);
  float v20 = &v7[v11];
  float v21 = &v8[v11];
  float32x2_t v22 = &a4[v11];
  vDSP_vma(*(const float **)(a1 + 64), 1LL, v20, 2LL, v21, 2LL, v22, 2LL, __N);
  int64x2_t v23 = &v7[3 * (_DWORD)v11];
  vDSP_vmul(*(const float **)(a1 + 56), 1LL, v23, 2LL, v21++, 2LL, __N);
  vDSP_vma((const float *)(*(void *)(a1 + 56) + 4 * v11 - 4), -1LL, v20 + 1, 2LL, v21, 2LL, v22 + 1, 2LL, __N);
  vDSP_vmul((const float *)(*(void *)(a1 + 64) + 4 * v11 - 4), -1LL, v23 + 1, 2LL, v21, 2LL, __N);
}

int32x2_t *mdct_create(signed int a1)
{
  uint64_t v2 = (int32x2_t *)malloc(0x60uLL);
  v2[2].i32[0] = 2 * a1;
  v2[2].i32[1] = a1;
  int32x2_t v3 = vshl_s32(vdup_n_s32(a1), (int32x2_t)0xFFFFFFFEFFFFFFFFLL);
  __int32 v54 = v3.i32[0];
  v2[3] = v3;
  uint64_t v4 = (char *)malloc(8LL * a1);
  *uint64_t v2 = (int32x2_t)v4;
  size_t v44 = 8LL * a1;
  uint64_t v43 = malloc(v44);
  v2[1] = (int32x2_t)v43;
  uint64_t v5 = v54;
  int v6 = (float *)malloc(4LL * v54);
  v2[4] = (int32x2_t)v6;
  uint64_t v7 = (float *)malloc(4LL * v54);
  double v2[5] = (int32x2_t)v7;
  size_t v8 = 4LL * (v54 + 1);
  v2[9] = (int32x2_t)malloc(v8);
  v2[10] = (int32x2_t)malloc(v8);
  size_t v9 = 8LL * v54;
  uint64_t v42 = (char *)malloc(v9);
  v2[6] = (int32x2_t)v42;
  v2[7] = (int32x2_t)malloc(v9);
  v2[8] = (int32x2_t)malloc(v9);
  double v10 = (double)(2 * a1);
  if (2 * a1 >= 1)
  {
    uint64_t v11 = (2 * a1);
    float v12 = 3.14159265 / v10;
    double v48 = v12;
    uint64x2_t v47 = (uint64x2_t)vdupq_n_s64(v11 - 1);
    int32x2_t v13 = (int32x2_t)0x100000000LL;
    uint64x2_t v14 = (uint64x2_t)xmmword_66280;
    uint64_t v15 = (float *)(v4 + 4);
    __asm { FMOV            V2.2D, #0.5 }

    float32x2_t v21 = (float32x2_t)vdup_n_s32(0x3FC90FDBu);
    int64x2_t v45 = vdupq_n_s64(2uLL);
    float64x2_t v46 = _Q2;
    do
    {
      int32x2_t v53 = vmovn_s64((int64x2_t)vcgeq_u64(v47, v14));
      int64x2_t v55 = (int64x2_t)v14;
      v22.i64[0] = v13.i32[0];
      v22.i64[1] = v13.i32[1];
      float64x2_t v49 = vmulq_n_f64(vaddq_f64(vcvtq_f64_s64(v22), v46), v48);
      double v51 = sin(v49.f64[1]);
      v23.f64[0] = sin(v49.f64[0]);
      v23.f64[1] = v51;
      *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(v23);
      float64x2_t v50 = vcvtq_f64_f32(vmul_f32(vmul_f32(*(float32x2_t *)&v23.f64[0], v21), *(float32x2_t *)&v23.f64[0]));
      double v52 = sin(v50.f64[1]);
      double v24 = sin(v50.f64[0]);
      if ((v53.i8[0] & 1) != 0)
      {
        float v25 = v24;
        *(v15 - 1) = v25;
      }

      if ((v53.i8[4] & 1) != 0)
      {
        float v26 = v52;
        *uint64_t v15 = v26;
      }

      uint64x2_t v14 = (uint64x2_t)vaddq_s64(v55, v45);
      int32x2_t v13 = vadd_s32(v13, (int32x2_t)0x200000002LL);
      v15 += 2;
      v11 -= 2LL;
    }

    while (v11);
  }

  if ((int)v5 < 2 * a1)
  {
    float v27 = (float *)&v4[4 * v5];
    uint64_t v28 = 2 * a1 - v5;
    do
    {
      *float v27 = -*v27;
      ++v27;
      --v28;
    }

    while (v28);
  }

  if (a1 >= 2)
  {
    uint64_t v29 = 0LL;
    float v30 = -6.28318531 / v10;
    float v31 = sqrt(0.25 / sqrt((float)a1));
    double v32 = v31;
    else {
      uint64_t v33 = v5;
    }
    float v34 = (float *)(v42 + 4);
    do
    {
      __double2 v35 = __sincos_stret((float)((float)((float)(int)v29 + 0.125) * v30));
      float v36 = v35.__cosval * v32;
      v6[v29] = v36;
      float v37 = v35.__sinval * v32;
      v7[v29] = v37;
      *(v34 - 1) = v36;
      *float v34 = v37;
      ++v29;
      v34 += 2;
    }

    while (v33 != v29);
  }

  bzero(v43, v44);
  v2[11] = 0LL;
  if ((int)v5 <= 79)
  {
    if ((_DWORD)v5 == 40)
    {
      uint64_t v40 = 0x400000002LL;
    }

    else
    {
      if ((_DWORD)v5 != 60) {
        goto LABEL_31;
      }
      uint64_t v40 = 0x400000003LL;
    }

void mdct_reset(uint64_t a1)
{
}

void mdct_destroy(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2) {
    hfft_destroy(v2);
  }
  free((void *)a1);
}

float mdct(uint64_t a1, const void *a2, uint64_t a3)
{
  int v6 = *(const float **)a1;
  uint64_t v7 = *(char **)(a1 + 8);
  uint64_t v8 = *(int *)(a1 + 20);
  vDSP_Length v9 = *(int *)(a1 + 24);
  vDSP_Length __N = *(int *)(a1 + 28);
  uint64_t v20 = *(int *)(a1 + 16);
  float __C = *(DSPComplex **)(a1 + 56);
  int64x2_t v22 = *(const DSPComplex **)(a1 + 64);
  memcpy(v7, &v7[4 * v8], 4 * v8);
  memcpy(&v7[4 * v8], a2, 4 * v8);
  uint64_t v11 = (const float **)(a1 + 72);
  vDSP_vmul(&v6[3 * v9], 2LL, (const float *)&v7[12 * v9], 2LL, *(float **)(a1 + 72), 1LL, __N);
  vDSP_vma(&v6[3 * v9 - 1], -2LL, (const float *)&v7[12 * v9 - 4], -2LL, *v11, 1LL, (float *)*v11, 1LL, __N);
  vDSP_vmul(&v6[v9 - 1], -2LL, (const float *)&v7[4 * v9 - 4], -2LL, *(float **)(a1 + 80), 1LL, __N);
  vDSP_vma( &v6[v9],  2LL,  (const float *)&v7[4 * v9],  2LL,  *(const float **)(a1 + 80),  1LL,  *(float **)(a1 + 80),  1LL,  __N);
  vDSP_vmul(v6, 2LL, (const float *)v7, 2LL, (float *)(*(void *)(a1 + 72) + 4 * __N), 1LL, __N);
  float v12 = (const float *)&v7[4 * v8];
  vDSP_vma(&v6[v8 - 1], -2LL, v12 - 1, -2LL, &(*v11)[__N], 1LL, (float *)&(*v11)[__N], 1LL, __N);
  vDSP_vmul( &v6[v20 - 1],  -2LL,  (const float *)&v7[4 * v20 - 4],  -2LL,  (float *)(*(void *)(a1 + 80) + 4 * __N),  1LL,  __N);
  vDSP_vma( &v6[v8],  2LL,  v12,  2LL,  (const float *)(*(void *)(a1 + 80) + 4 * __N),  1LL,  (float *)(*(void *)(a1 + 80) + 4 * __N),  1LL,  __N);
  vDSP_ztoc((const DSPSplitComplex *)(a1 + 72), 1LL, __C, 2LL, v9);
  hfft_run(*(unsigned int **)(a1 + 88), (uint64_t)__C, *(void *)(a1 + 48), (uint64_t)v22);
  vDSP_ctoz(v22, 2LL, (const DSPSplitComplex *)(a1 + 72), 1LL, v9);
  vDSP_zvmul( (const DSPSplitComplex *)(a1 + 72),  1LL,  (const DSPSplitComplex *)(a1 + 32),  1LL,  (const DSPSplitComplex *)(a1 + 72),  1LL,  v9,  1);
  if ((int)v8 >= 1)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = *(int **)(a1 + 72);
    int v16 = (float *)(*(void *)(a1 + 80) + 4 * v9 - 4);
    do
    {
      int v17 = *v15++;
      uint64_t v18 = a3 + 4 * v14;
      *(_DWORD *)uint64_t v18 = v17;
      float v19 = *v16--;
      float result = -v19;
      *(float *)(v18 + 4) = -v19;
      v14 += 2LL;
    }

    while (v14 < v8);
  }

  return result;
}

void *mask_create(int a1, float a2)
{
  uint64_t v4 = malloc(0x18uLL);
  uint64_t v5 = (a1 - 1);
  int v6 = (float *)malloc(4LL * (int)v5);
  void *v4 = v6;
  uint64_t v7 = (float *)malloc(4LL * (int)v5);
  v4[1] = v7;
  uint64_t v8 = (float *)malloc(4LL * a1);
  _DWORD v4[2] = v8;
  float v26 = a2 / (float)(2 * a1);
  float v9 = v26 * 0.5;
  float v10 = logf((float)(v26 * 0.5) / 800.0) * 426.666667 / 2.30258512;
  float v11 = v10 * 0.000030518;
  BOOL v12 = v10 <= 0.0;
  float v13 = 0.0;
  if (v12) {
    float v13 = v11;
  }
  *uint64_t v8 = v13;
  if (a1 >= 2)
  {
    double v14 = atan(v9 * 0.00076);
    float v15 = atan((float)(v9 * v9) / 56250000.0) * 3.5 + v14 * 13.0;
    int v16 = v8 + 1;
    do
    {
      float v9 = v26 + v9;
      double v17 = atan(v9 * 0.00076);
      float v18 = atan((float)(v9 * v9) / 56250000.0) * 3.5 + v17 * 13.0;
      double v19 = (float)(v18 - v15);
      float v20 = v19 * 213.333333 * 0.0000305175781;
      *v6++ = v20;
      float v21 = v19 * 533.333333 * 0.0000305175781;
      *v7++ = v21;
      float v22 = logf(v9 / 800.0) * 426.666667 / 2.30258512;
      float v23 = v22 * 0.000030518;
      BOOL v12 = v22 <= 0.0;
      float v24 = 0.0;
      if (v12) {
        float v24 = v23;
      }
      *v16++ = v24;
      float v15 = v18;
      --v5;
    }

    while (v5);
  }

  return v4;
}

void mask_destroy(void **a1)
{
}

_DWORD *quantizer_create(int a1, int a2, int a3, float a4)
{
  uint64_t v8 = malloc(0x48uLL);
  *(void *)uint64_t v8 = mask_create(a1, a4);
  _OWORD v8[2] = a1;
  _DWORD v8[3] = a2;
  v8[4] = 16 * a3 - 4;
  v8[5] = a3;
  *((void *)v8 + 5) = malloc(4LL * a1);
  *((void *)v8 + 6) = malloc(4LL * a1);
  size_t v9 = 4LL * a2;
  *((void *)v8 + 7) = malloc(v9);
  size_t v10 = 16LL * a2;
  *((void *)v8 + 3) = malloc(v10);
  *((void *)v8 + 4) = malloc(v10);
  *((void *)v8 + _Block_object_dispose(va, 8) = malloc(v9);
  return v8;
}

void quantizer_destroy(uint64_t a1)
{
}

uint64_t computeMask(uint64_t result, float *a2, float *a3, int a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = *(float **)(result + 16);
  float v6 = (float)(*a2 + *v5) - **(float **)result;
  uint64_t v7 = (a4 - 1);
  if (a4 >= 3)
  {
    uint64_t v8 = (float *)(*(void *)result + 4LL);
    size_t v9 = v5 + 1;
    size_t v10 = a2 + 1;
    float v11 = a3 + 1;
    uint64_t v12 = v7 - 1;
    do
    {
      *v11++ = v6;
      float v13 = *v10++;
      float v14 = v13;
      float v15 = *v9++;
      float v16 = v14 + v15;
      if (v16 > v6) {
        float v6 = v16;
      }
      float v17 = *v8++;
      float v6 = v6 - v17;
      --v12;
    }

    while (v12);
  }

  a3[(int)v7] = v6;
  float v18 = a2[(int)v7] + v5[(int)v7];
  uint64_t v19 = (a4 - 2);
  float v20 = v18 - *(float *)(v4 + 4LL * (int)v19);
  if (a4 >= 3)
  {
    do
    {
      if (a3[v19] < v20) {
        a3[v19] = v20;
      }
      float v21 = v5[v19];
      BOOL v22 = v19-- <= 1;
      float v20 = v20 - *(float *)(v4 + 4LL * v19);
    }

    while (!v22);
  }

  *a3 = v20;
  return result;
}

uint64_t normalize(const float *a1, int a2)
{
  int32x2_t v3 = a1;
  float __C = 0.0;
  vDSP_maxmgv(a1, 1LL, &__C, a2);
  unsigned int v4 = 1056964608 - (LODWORD(__C) & 0xFF800000);
  if (LODWORD(__C) >> 27 < 7) {
    unsigned int v4 = 125829120;
  }
  if (HIBYTE(LODWORD(__C)) <= 0x3Eu) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)v3++ += v5;
      --v6;
    }

    while (v6);
  }

  return v5 >> 23;
}

uint64_t q(float a1)
{
  int v1 = 0;
  unsigned int v2 = 62;
  int v3 = 62;
  do
  {
    int v4 = v1 + (v2 >> 1);
    if (huff_vals[v4] <= a1) {
      int v1 = v4;
    }
    else {
      int v3 = v4;
    }
    unsigned int v2 = v3 - v1;
  }

  while (v3 - v1 > 1);
  if (vabds_f32(huff_vals[v1], a1) >= vabds_f32(huff_vals[v3], a1)) {
    return v3;
  }
  else {
    return v1;
  }
}

uint64_t qred(float a1)
{
  LODWORD(v1) = 0;
  unsigned int v2 = 24;
  int v3 = 24;
  do
  {
    int v4 = v1 + (v2 >> 1);
    if (rhuff_vals[v4] <= a1) {
      LODWORD(v1) = v4;
    }
    else {
      int v3 = v4;
    }
    unsigned int v2 = v3 - v1;
  }

  while (v3 - (int)v1 > 1);
  else {
    uint64_t v1 = (int)v1;
  }
  return rix_xlat[v1];
}

void quantize(uint64_t a1, const float *a2, uint64_t a3)
{
  unsigned int v5 = *(char **)(a1 + 24);
  __int128 __dst = *(char **)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 12);
  size_t v9 = *(float **)(a1 + 40);
  uint64_t v8 = *(float **)(a1 + 48);
  size_t v10 = *(float **)(a1 + 56);
  int v53 = *(_DWORD *)(a1 + 16);
  unsigned int v11 = normalize(a2, v7);
  float v57 = 1.0;
  vDSP_vabs(a2, 1LL, v9, 1LL, v7);
  float __B = 1.0e-10;
  vDSP_vsadd(v9, 1LL, &__B, v9, 1LL, v7);
  vDSP_vdbcon(v9, 1LL, &v57, v9, 1LL, v7, 1u);
  uint64_t v49 = a1;
  computeMask(*(void *)a1, v9, v8, v7);
  double v52 = v8;
  vDSP_vsub(v8, 1LL, v9, 1LL, v10, 1LL, (int)v6);
  if ((int)v6 < 1)
  {
    int v16 = v6;
  }

  else
  {
    uint64_t v12 = 0LL;
    float v13 = v5 + 8;
    do
    {
      *((_DWORD *)v13 - 2) = v12;
      int v14 = q(a2[v12]);
      *((_DWORD *)v13 - 1) = v14;
      *float v13 = *(&bitlists + v14);
      v13 += 2;
      ++v12;
    }

    while (v6 != v12);
    int v15 = 0;
    int v16 = v6;
    do
    {
      if (*(_DWORD *)&v5[16 * v15 + 4] == 31)
      {
        __int128 v17 = *(_OWORD *)&v5[16 * v15];
        *(_OWORD *)&v5[16 * v15] = *(_OWORD *)&v5[16 * --v16];
        *(_OWORD *)&v5[16 * v16] = v17;
        *(float *)&__int128 v17 = v10[v15];
        v10[v15] = v10[v16];
        LODWORD(v10[v16]) = v17;
      }

      else
      {
        ++v15;
      }
    }

    while (v15 < v16);
  }

  memcpy(__dst, v5, 16LL * (int)v6);
  int v18 = v6 - v16;
  if (v16 >= 1)
  {
    for (uint64_t i = 0LL; i != v16; *(void *)&v5[16 * i++ + 8] = v22)
    {
      float v20 = &v5[16 * i];
      int v21 = qred(a2[*(int *)v20]);
      *((_DWORD *)v20 + 1) = v21;
      BOOL v22 = (char *)*(&bitlists + v21) - 4;
      do
      {
        int v23 = *((_DWORD *)v22 + 2);
        v22 += 4;
      }

      while (v23 != -1);
      v18 += huff_bits[v21];
    }
  }

  int v24 = v53;
  if (v18 <= v53) {
    int v25 = v18;
  }
  else {
    int v25 = v6;
  }
  if (v18 <= v53) {
    float v26 = v5;
  }
  else {
    float v26 = __dst;
  }
  if (v25 < v53 && v18 > v53 && v16 >= 1)
  {
    unsigned int v27 = 0;
    do
    {
      __I[0] = 0LL;
      vDSP_maxvi(v10, 1LL, (float *)__I, (vDSP_Length *)((char *)__I + 4), v16);
      uint64_t v28 = SHIDWORD(__I[0]);
      uint64_t v29 = &v26[16 * SHIDWORD(__I[0])];
      double v32 = (int *)*((void *)v29 + 1);
      float v30 = (int **)(v29 + 8);
      float v31 = v32;
      float v34 = v32 + 1;
      uint64_t v33 = v32[1];
      if ((_DWORD)v33 == -1 || (int v35 = huff_bits[v33] - huff_bits[*v31] + v25, v35 > v24))
      {
        __int128 v36 = *(_OWORD *)&v26[16 * SHIDWORD(__I[0])];
        *(_OWORD *)&v26[16 * SHIDWORD(__I[0])] = *(_OWORD *)&v26[16 * --v16];
        *(_OWORD *)&v26[16 * v16] = v36;
        *(float *)&__int128 v36 = v10[v28];
        v10[v28] = v10[v16];
        LODWORD(v10[v16]) = v36;
      }

      else
      {
        char *v30 = v34;
        uint64_t v37 = *(int *)&v26[16 * v28];
        __C[0] = vabds_f32(a2[v37], huff_vals[v33]);
        vDSP_vdbcon(__C, 1LL, &v57, __C, 1LL, 1uLL, 1u);
        float v38 = v52[v37];
        int v24 = v53;
        v10[SHIDWORD(__I[0])] = __C[0] - v38;
        int v25 = v35;
      }

      if (v25 >= v24) {
        break;
      }
      if (v16 < 1) {
        break;
      }
    }

    while (v27++ < 0x9F);
  }

  if ((int)v6 < 1)
  {
    int v45 = 0;
    LOBYTE(v46) = 4;
LABEL_44:
    *(_WORD *)(a3 + 2LL * v45++) = (-1 << v46) | v11;
    goto LABEL_45;
  }

  uint64_t v40 = *(int **)(v49 + 64);
  int v41 = (int **)(v26 + 8);
  uint64_t v42 = v6;
  do
  {
    uint64_t v43 = *((int *)v41 - 2);
    size_t v44 = *v41;
    v41 += 2;
    v40[v43] = *v44;
    --v42;
  }

  while (v42);
  int v45 = 0;
  int v46 = 4;
  do
  {
    uint64_t v47 = *v40++;
    v11 |= (unsigned __int16)huff_symbols[v47] << v46;
    v46 += huff_bits[v47];
    if (v46 >= 16)
    {
      *(_WORD *)(a3 + 2LL * v45++) = v11;
      v11 >>= 16;
      v46 -= 16;
    }

    --v6;
  }

  while (v6);
LABEL_45:
  int v48 = *(_DWORD *)(v49 + 20);
  if (v45 < v48) {
    memset((void *)(a3 + 2LL * v45), 255, 2LL * (v48 + ~v45) + 2);
  }
}

double quantizer_lite_create()
{
  uint64_t v0 = malloc(0x2CuLL);
  _OWORD *v0 = xmmword_66690;
  v0[1] = xmmword_666A0;
  *(void *)&double result = 3LL;
  *((void *)v0 + 4) = 3LL;
  *((_DWORD *)v0 + 10) = 4;
  return result;
}

uint64_t quantize_lite(uint64_t result, uint64_t a2, _OWORD *a3)
{
  uint64_t v3 = 0LL;
  LODWORD(sub_459C(v1, v4) = *(_DWORD *)(result + 36);
  int v5 = *(_DWORD *)(result + 40);
  *(_OWORD *)((char *)a3 + 44) = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v33 = result;
  float v34 = a3;
  do
  {
    uint64_t v6 = (int *)(result + 8 * v3);
    int v7 = *v6;
    uint64_t v8 = (float *)(a2 + 4LL * *v6);
    int v9 = v6[1] - *v6;
    uint64_t v10 = (v9 + 1);
    float v11 = 0.0;
    if (v9 < 0) {
      goto LABEL_8;
    }
    uint64_t v12 = (float *)(a2 + 4LL * v7);
    uint64_t v13 = (v9 + 1);
    do
    {
      float v14 = *v12++;
      float v15 = fabsf(v14);
      if (v15 > v11) {
        float v11 = v15;
      }
      --v13;
    }

    while (v13);
    if (v11 >= 0.5)
    {
      __int16 v17 = 0;
    }

    else
    {
LABEL_8:
      unsigned int v16 = 0;
      do
      {
        float v11 = v11 + v11;
        __int16 v17 = v16 + 1;
      }

      while (v11 < 0.5 && v16++ < 0xE);
    }

    *(_WORD *)a3 |= v17 << (12 - 4 * v3);
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t v37 = v3;
      int v19 = *(_DWORD *)(result + 4 * v3 + 24);
      int v20 = 1 << (v19 - 1);
      int v36 = v19;
      double v21 = (double)(1 << v17);
      int v22 = ~(-1 << v19);
      int v23 = v8;
      uint64_t v24 = (v9 + 1);
      do
      {
        float v25 = *v23;
        float v26 = v21 * fabsf(*v23);
        float v27 = -8.0;
        if (v26 != 0.0) {
          float v27 = logf(v26) / 0.69315;
        }
        float v28 = v27 * -0.125;
        if (v27 < -8.0) {
          float v28 = 1.0;
        }
        int v29 = (int)((float)(v28 * (float)(unsigned __int16)v20) + 0.5);
        if (v25 <= 0.0) {
          __int16 v30 = 0;
        }
        else {
          __int16 v30 = v20;
        }
        *v23++ = (float)(unsigned __int16)((v29 + v30) & v22);
        --v24;
      }

      while (v24);
      double result = v33;
      a3 = v34;
      uint64_t v3 = v37;
      do
      {
        unsigned int v31 = (int)*v8;
        int v32 = v5 - v36;
        if (v5 - v36 < 1)
        {
          if (v5 == v36)
          {
            *((_WORD *)v34 + (int)v4) |= v31;
            int v5 = 16;
            LODWORD(sub_459C(v1, v4) = v4 + 1;
          }

          else
          {
            *((_WORD *)v34 + (int)v4) |= v31 >> (v36 - v5);
            uint64_t v4 = (int)v4 + 1LL;
            int v5 = v32 + 16;
            *((_WORD *)v34 + sub_459C(v1, v4) = v31 << (v32 + 16);
          }
        }

        else
        {
          *((_WORD *)v34 + (int)v4) |= (_WORD)v31 << (v5 - v36);
          v5 -= v36;
        }

        ++v8;
        --v10;
      }

      while (v10);
    }

    ++v3;
  }

  while (v3 != 3);
  return result;
}

uint64_t unpack(unsigned __int16 *a1, int a2, uint64_t a3, int a4)
{
  unsigned int v4 = *a1;
  if (a2 < 1)
  {
    int v5 = 0;
LABEL_13:
    if (v5 < a4) {
      bzero((void *)(a3 + 4LL * v5), 4LL * (~v5 + a4) + 4);
    }
  }

  else
  {
    int v5 = 0;
    uint64_t v6 = root;
    unsigned int v7 = v4 >> 4;
    int v8 = 12;
    uint64_t v9 = 1LL;
    uint64_t v10 = root;
    while (1)
    {
      do
      {
        if ((v7 & 1) != 0) {
          ++v10;
        }
        uint64_t v10 = (_UNKNOWN **********)*v10;
        if (!*v10)
        {
          if (v5 == a4) {
            return v4 & 0xF;
          }
          *(_DWORD *)(a3 + 4LL * v5++) = *((_DWORD *)v10 + 2);
          uint64_t v10 = v6;
        }

        v7 >>= 1;
        --v8;
      }

      while (v8);
      if (v5 == a4) {
        break;
      }
      unsigned int v7 = a1[v9++];
      int v8 = 16;
      if (v9 == a2 + 1) {
        goto LABEL_13;
      }
    }
  }

  return v4 & 0xF;
}

double unpack_lite_create()
{
  uint64_t v0 = malloc(0x2CuLL);
  _OWORD *v0 = xmmword_66690;
  v0[1] = xmmword_666A0;
  *(void *)&double result = 3LL;
  *((void *)v0 + 4) = 3LL;
  *((_DWORD *)v0 + 10) = 4;
  return result;
}

uint64_t unpack_lite_c(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = 0LL;
  int v7 = *(_DWORD *)(a1 + 36);
  int v6 = *(_DWORD *)(a1 + 40);
  unsigned int v8 = *a2;
  do
  {
    uint64_t v9 = (int *)(a1 + 8 * v5);
    int v11 = *v9;
    int v10 = v9[1];
    if (v11 <= v10)
    {
      int v13 = *(unsigned __int16 *)(a1 + 4 * v5 + 24);
      int v12 = v10 + 1;
      float v14 = (float *)(a4 + 4LL * v11);
      int v15 = v12 - v11;
      do
      {
        v6 -= v13;
        if (v6 < 1)
        {
          uint64_t v17 = v7 + 1LL;
          int v16 = a2[v7];
          if (v6)
          {
            int v18 = v16 << -(char)v6;
            v6 += 16;
            int v16 = (a2[v17] >> v6) | v18;
          }

          else
          {
            int v6 = 16;
          }

          int v7 = v17;
        }

        else
        {
          int v16 = a2[v7] >> v6;
        }

        *v14++ = (float)((float)(0x8000u >> (((v8 >> (12 - 4 * v5)) & 0xF)
                                           + (((v16 & ~(-1 << v13))
                                             - ((unsigned __int16)(v16 & ~(-1 << v13)) >> (v13 - 1) << (v13 - 1))) << (4 - v13))))
                       * 0.000030518)
               * (float)(2 * ((unsigned __int16)(v16 & ~(-1 << v13)) >> (v13 - 1)) - 1);
        --v15;
      }

      while (v15);
    }

    else
    {
      int v12 = v11;
    }

    ++v5;
  }

  while (v5 != 3);
  if (v12 < a5) {
    bzero((void *)(a4 + 4LL * v12), 4LL * (~v12 + a5) + 4);
  }
  return 0LL;
}

uint64_t g726_init(uint64_t a1, int a2, __int16 a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)a1 = a3;
  *(_DWORD *)(a1 + 10) = 0;
  *(_DWORD *)(a1 + 3_Block_object_dispose(va, 8) = 0;
  memset_pattern16((void *)(a1 + 42), asc_66720, 4uLL);
  *(_DWORD *)(a1 + 22) = 0;
  *(void *)(a1 + 14) = 0LL;
  memset_pattern16((void *)(a1 + 26), asc_66720, 0xCuLL);
  *(void *)(a1 + 46) = 0LL;
  *(_WORD *)(a1 + 60) = 544;
  *(_DWORD *)(a1 + 56) = 34816;
  return 0LL;
}

uint64_t g726_encode_frame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v69 = 0;
  int v70 = 0;
  unsigned __int16 v68 = 0;
  if (a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = a1 + 26;
    uint64_t v64 = a1 + 28;
    while (1)
    {
      __int16 v10 = *(_WORD *)(a2 + 2 * v5);
      if (*(_WORD *)a1 == 2) {
        __int16 v10 = linear_to_alaw(v10);
      }
      sub_55D48((__int16 *)a1, (_WORD *)&v70 + 1, &v70);
      unsigned int v11 = HIWORD(v70);
      if (*(_WORD *)a1 == 1) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = (int)alaw_to_linear(v10) >> 2;
      }
      __int16 v13 = 0;
      if (v10 >= 0) {
        v12 &= 0x3FFFu;
      }
      if (v12 >= 0x2000) {
        LOWORD(v12) = v12 - 0x4000;
      }
      __int16 v14 = v11 ^ 0x8000;
      if (v11 < 0x4000) {
        __int16 v14 = v11;
      }
      int v15 = (__int16)(v12 - v14);
      int v16 = *(__int16 *)(a1 + 46);
      int v17 = v16 >> 2;
      if (v16 > 255) {
        LOWORD(v17) = 64;
      }
      unsigned int v18 = *(_DWORD *)(a1 + 56);
      unsigned int v19 = (*(_WORD *)(a1 + 60) - (unsigned __int16)(v18 >> 6)) & 0x3FFF;
      unsigned int v20 = (((v18 >> 6) - *(unsigned __int16 *)(a1 + 60)) & 0x1FFF) * (__int16)v17;
      __int16 v21 = (v19 * (__int16)v17) >> 6;
      int v22 = -(v20 >> 6) & 0x3FFF;
      if (v19 >= 0x2000) {
        __int16 v21 = v22;
      }
      if (v15 >= 0) {
        unsigned int v23 = v15;
      }
      else {
        unsigned int v23 = -v15 & 0x7FFF;
      }
      int v24 = (unsigned __int16)v23;
      if (v23 >= 2)
      {
        __int16 v13 = 0;
        int v25 = 2;
        do
        {
          ++v13;
          v25 *= 2;
        }

        while (v25 <= v24);
      }

      __int16 v26 = v21 + (v18 >> 6);
      unsigned int v27 = v26 & 0x1FFF;
      unsigned int v28 = v27 >> 2;
      if (*(_DWORD *)(a1 + 4) != 32000)
      {
        __int16 v30 = 0;
        int v32 = 0;
        goto LABEL_42;
      }

      unsigned int v29 = ((((v24 << 7) >> v13) & 0x7F | (unsigned __int16)(v13 << 7)) - (_WORD)v28) & 0xFFF;
      if (v15 < 0) {
        break;
      }
      if (v29 <= 0xF83)
      {
        if (v29 <= 0x7FF)
        {
          if (v29 <= 0x18F)
          {
            if (v29 <= 0x15C)
            {
              if (v29 <= 0x12B)
              {
                if (v29 <= 0xF5)
                {
                  if (v29 <= 0xB1)
                  {
                    if (v29 <= 0x4F) {
                      __int16 v30 = 1;
                    }
                    else {
                      __int16 v30 = 2;
                    }
                    char v31 = v30;
                  }

                  else
                  {
                    __int16 v30 = 3;
                    char v31 = 3;
                  }
                }

                else
                {
                  __int16 v30 = 4;
                  char v31 = 4;
                }
              }

              else
              {
                __int16 v30 = 5;
                char v31 = 5;
              }
            }

            else
            {
              __int16 v30 = 6;
              char v31 = 6;
            }
          }

          else
          {
            __int16 v30 = 7;
            char v31 = 7;
          }

          goto LABEL_41;
        }

LABEL_40:
    char v31 = 7 - v30;
    goto LABEL_41;
  }

  return a3;
}

uint64_t sub_55D48(__int16 *a1, _WORD *a2, _WORD *a3)
{
  unsigned int v3 = a1[7];
  int v4 = a1[13];
  unsigned int v5 = -(v3 >> 2) & 0x1FFF;
  if ((v3 & 0x80000000) == 0) {
    unsigned int v5 = v3 >> 2;
  }
  if (v5)
  {
    int v6 = 13;
    if (v5 <= 0xFFF)
    {
      for (unsigned int i = 4096; i > v5; i >>= 1)
        --v6;
    }

    int v8 = v5 << 6 >> v6;
  }

  else
  {
    int v6 = 0;
    int v8 = 32;
  }

  int v9 = v6 + ((v4 >> 6) & 0xF);
  signed int v10 = ((8 * (v4 & 0x3F) * v8) & 0xFFFFFF80) + 384;
  int v11 = (v10 << (v9 - 26)) & 0x7F80;
  int v12 = v10 >> (26 - v9);
  if (v9 <= 26) {
    int v13 = v12;
  }
  else {
    int v13 = v11;
  }
  unsigned int v14 = a1[8];
  int v15 = a1[14];
  unsigned int v16 = -(v14 >> 2) & 0x1FFF;
  if ((v14 & 0x80000000) == 0) {
    unsigned int v16 = v14 >> 2;
  }
  if (v16)
  {
    int v17 = 13;
    if (v16 <= 0xFFF)
    {
      for (unsigned int j = 4096; j > v16; j >>= 1)
        --v17;
    }

    int v19 = v16 << 6 >> v17;
  }

  else
  {
    int v17 = 0;
    int v19 = 32;
  }

  int v20 = v17 + ((v15 >> 6) & 0xF);
  signed int v21 = ((8 * (v15 & 0x3F) * v19) & 0xFFFFFF80) + 384;
  if (v20 <= 26) {
    int v22 = v21 >> (26 - v20);
  }
  else {
    int v22 = (v21 << (v20 - 26)) & 0x7F80;
  }
  unsigned int v23 = a1[9];
  int v24 = a1[15];
  unsigned int v25 = -(v23 >> 2) & 0x1FFF;
  if ((v23 & 0x80000000) == 0) {
    unsigned int v25 = v23 >> 2;
  }
  if (v25)
  {
    int v26 = 13;
    if (v25 <= 0xFFF)
    {
      for (unsigned int k = 4096; k > v25; k >>= 1)
        --v26;
    }

    int v28 = v25 << 6 >> v26;
  }

  else
  {
    int v26 = 0;
    int v28 = 32;
  }

  int v29 = v26 + ((v24 >> 6) & 0xF);
  signed int v30 = ((8 * (v24 & 0x3F) * v28) & 0xFFFFFF80) + 384;
  int v31 = (v30 << (v29 - 26)) & 0x7F80;
  int v32 = v30 >> (26 - v29);
  if (v29 <= 26) {
    int v33 = v32;
  }
  else {
    int v33 = v31;
  }
  unsigned int v34 = a1[10];
  int v35 = a1[16];
  unsigned int v36 = -(v34 >> 2) & 0x1FFF;
  if ((v34 & 0x80000000) == 0) {
    unsigned int v36 = v34 >> 2;
  }
  if (v36)
  {
    int v37 = 13;
    if (v36 <= 0xFFF)
    {
      for (unsigned int m = 4096; m > v36; m >>= 1)
        --v37;
    }

    int v39 = v36 << 6 >> v37;
  }

  else
  {
    int v37 = 0;
    int v39 = 32;
  }

  int v40 = v37 + ((v35 >> 6) & 0xF);
  signed int v41 = ((8 * (v35 & 0x3F) * v39) & 0xFFFFFF80) + 384;
  if (v40 <= 26) {
    int v42 = v41 >> (26 - v40);
  }
  else {
    int v42 = (v41 << (v40 - 26)) & 0x7F80;
  }
  unsigned int v43 = a1[11];
  int v44 = a1[17];
  unsigned int v45 = -(v43 >> 2) & 0x1FFF;
  if ((v43 & 0x80000000) == 0) {
    unsigned int v45 = v43 >> 2;
  }
  if (v45)
  {
    int v46 = 13;
    if (v45 <= 0xFFF)
    {
      for (unsigned int n = 4096; n > v45; n >>= 1)
        --v46;
    }

    int v48 = v45 << 6 >> v46;
  }

  else
  {
    int v46 = 0;
    int v48 = 32;
  }

  int v49 = v46 + ((v44 >> 6) & 0xF);
  signed int v50 = ((8 * (v44 & 0x3F) * v48) & 0xFFFFFF80) + 384;
  int v51 = (v50 << (v49 - 26)) & 0x7F80;
  int v52 = v50 >> (26 - v49);
  if (v49 <= 26) {
    int v53 = v52;
  }
  else {
    int v53 = v51;
  }
  unsigned int v54 = a1[12];
  int v55 = a1[18];
  unsigned int v56 = -(v54 >> 2) & 0x1FFF;
  if ((v54 & 0x80000000) == 0) {
    unsigned int v56 = v54 >> 2;
  }
  if (v56)
  {
    int v57 = 13;
    if (v56 <= 0xFFF)
    {
      for (iunsigned int i = 4096; ii > v56; ii >>= 1)
        --v57;
    }

    int v59 = v56 << 6 >> v57;
  }

  else
  {
    int v57 = 0;
    int v59 = 32;
  }

  int v60 = v57 + ((v55 >> 6) & 0xF);
  signed int v61 = ((8 * (v55 & 0x3F) * v59) & 0xFFFFFF80) + 384;
  int v62 = v61 >> (26 - v60);
  if (v60 > 26) {
    int v62 = (v61 << (v60 - 26)) & 0x7F80;
  }
  unsigned int v63 = a1[5];
  int v64 = a1[21];
  unsigned int v65 = -(v63 >> 2) & 0x1FFF;
  if ((v63 & 0x80000000) == 0) {
    unsigned int v65 = v63 >> 2;
  }
  if (v65)
  {
    int v66 = 13;
    if (v65 <= 0xFFF)
    {
      for (junsigned int j = 4096; jj > v65; jj >>= 1)
        --v66;
    }

    int v68 = v65 << 6 >> v66;
  }

  else
  {
    int v66 = 0;
    int v68 = 32;
  }

  int v69 = v66 + ((v64 >> 6) & 0xF);
  signed int v70 = ((8 * (v64 & 0x3F) * v68) & 0xFFFFFF80) + 384;
  int v71 = (v70 << (v69 - 26)) & 0x7F80;
  int v72 = v70 >> (26 - v69);
  if (v69 > 26) {
    int v72 = v71;
  }
  unsigned int v73 = a1[6];
  uint64_t result = a1[22];
  unsigned int v75 = -(v73 >> 2) & 0x1FFF;
  if ((v73 & 0x80000000) == 0) {
    unsigned int v75 = v73 >> 2;
  }
  if (v75)
  {
    int v76 = 13;
    if (v75 <= 0xFFF)
    {
      for (kunsigned int k = 4096; kk > v75; kk >>= 1)
        --v76;
    }

    int v78 = v75 << 6 >> v76;
  }

  else
  {
    int v76 = 0;
    int v78 = 32;
  }

  int v79 = v76 + ((result >> 6) & 0xF);
  int v80 = ((8 * (result & 0x3F) * v78) & 0xFFFFFF80) + 384;
  int v81 = v80 >> (26 - v79);
  if (v79 > 26) {
    int v81 = (v80 << (v79 - 26)) & 0x7F80;
  }
  if (((v63 >> 15) & 1) == v64 >> 10) {
    LOWORD(v82) = v72;
  }
  else {
    int v82 = -v72;
  }
  if (((v3 >> 15) & 1) == v4 >> 10) {
    LOWORD(v83) = v13;
  }
  else {
    int v83 = -v13;
  }
  if (((v14 >> 15) & 1) == v15 >> 10) {
    LOWORD(v84) = v22;
  }
  else {
    int v84 = -v22;
  }
  __int16 v85 = v84 + v83;
  if (((v23 >> 15) & 1) == v24 >> 10) {
    LOWORD(v86) = v33;
  }
  else {
    int v86 = -v33;
  }
  if (((v34 >> 15) & 1) == v35 >> 10) {
    LOWORD(v87) = v42;
  }
  else {
    int v87 = -v42;
  }
  __int16 v88 = v85 + v86 + v87;
  if (((v43 >> 15) & 1) == v44 >> 10) {
    LOWORD(v89) = v53;
  }
  else {
    int v89 = -v53;
  }
  if (((v54 >> 15) & 1) == v55 >> 10) {
    LOWORD(v90) = v62;
  }
  else {
    int v90 = -v62;
  }
  unsigned __int16 v91 = v88 + v89 + v90;
  else {
    int v92 = -v81;
  }
  *a3 = v91 >> 1;
  *a2 = (unsigned __int16)(v82 + v91 + v92) >> 1;
  return result;
}

_WORD *sub_56258(_WORD *result, _WORD *a2, _WORD *a3, _WORD *a4, int a5, unsigned int a6, unsigned int a7)
{
  int v7 = (unsigned __int16)result[20];
  result[20] = result[19];
  if (a5 < 0) {
    int v8 = -(a5 & 0x7FFF);
  }
  else {
    int v8 = a5;
  }
  unsigned int v9 = a7 + 0x8000;
  if (a7 < 0x4000) {
    unsigned int v9 = a7;
  }
  unsigned int v10 = v9 + v8;
  int v11 = (unsigned __int16)(v9 + v8);
  result[19] = (v10 >> 15) & 1;
  __int16 v12 = a6 ^ 0x8000;
  if (a6 < 0x4000) {
    __int16 v12 = a6;
  }
  *a4 = v12 + v8;
  int v13 = (unsigned __int16)result[19];
  unsigned int v14 = (unsigned __int16)result[5];
  unsigned int v15 = (__int16)result[6];
  int v16 = (unsigned __int16)(result[20] ^ v13);
  if (v13 == v7) {
    int v17 = 0x4000;
  }
  else {
    int v17 = 114688;
  }
  if (v14 > 0xE000) {
    int v18 = 4 * (v14 & 0x7FFF);
  }
  else {
    int v18 = 98308;
  }
  if (v14 >= 0x2000) {
    int v19 = 32764;
  }
  else {
    int v19 = 4 * v14;
  }
  if (v16 != 1) {
    int v18 = -v18 & 0x1FFFC;
  }
  unsigned int v20 = v18 + v17;
  if ((v20 & 0x10000) != 0) {
    int v21 = (v20 >> 7) & 0x3FF | 0xFC00;
  }
  else {
    int v21 = (v20 >> 7) & 0x3FF;
  }
  if (!v11) {
    int v21 = 0;
  }
  int v22 = (v15 >> 7) | 0x200;
  if ((v15 & 0x8000) != 0)
  {
    int v23 = 1023;
  }

  else
  {
    int v22 = (unsigned __int16)v15 >> 7;
    int v23 = 0xFFFF;
  }

  int v24 = (v23 & -v22) + v15 + v21;
  else {
    __int16 v25 = -12288;
  }
  else {
    __int16 v26 = 12288;
  }
  *a3 = v24;
  if (result[19] == result[20]) {
    __int16 v27 = 192;
  }
  else {
    __int16 v27 = -192;
  }
  if (v11) {
    __int16 v28 = v27;
  }
  else {
    __int16 v28 = 0;
  }
  int v29 = (__int16)(result[5]
                - ((__int16)result[5] >> 8)
  int v30 = (__int16)(15360 - v24);
  if (v30 < v29) {
    LOWORD(v29) = v30;
  }
  *a2 = v29;
  return result;
}

uint64_t sub_563D4( uint64_t result, unsigned int a2, unsigned int a3, int a4, double a5, double a6, int32x2_t a7)
{
  char v7 = 7 - a2;
  if (a2 < 8) {
    char v7 = a2;
  }
  unsigned int v8 = v7 & 7;
  int v9 = v8 > 2;
  if (v8 == 6) {
    int v9 = 3;
  }
  if (v8 == 7) {
    int v10 = 7;
  }
  else {
    int v10 = v9;
  }
  if (*(_DWORD *)(result + 4) == 32000) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  a7.i16[0] = *(_WORD *)(result + 48);
  a7.i16[2] = *(_WORD *)(result + 50);
  int8x8_t v12 = (int8x8_t)vsub_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(v11), (uint32x2_t)0xB00000009LL), a7);
  uint32x2_t v13 = (uint32x2_t)vand_s8(v12, (int8x8_t)0xFFFF0000FFFFLL);
  uint32x2_t v14 = (uint32x2_t)vand_s8(v12, (int8x8_t)0x7FFF00001FFFLL);
  int8x8_t v15 = vand_s8( (int8x8_t)vadd_s32( (int32x2_t)vbsl_s8( (int8x8_t)vcgt_u32((uint32x2_t)0x400000001000LL, v14),  (int8x8_t)vshl_u32(v14, (uint32x2_t)0xFFFFFFF9FFFFFFFBLL),  vorr_s8( (int8x8_t)vshl_u32(v13, (uint32x2_t)0xFFFFFFF9FFFFFFFBLL),  (int8x8_t)0x3F0000000F00LL)),  a7),  (int8x8_t)0x3FFF00000FFFLL);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = v15.i16[0];
  *(_WORD *)(result + 50) = v15.i16[2];
  if (((4 * v15.i16[0] - v15.i16[2]) & 0x4000) != 0) {
    unsigned int v16 = (v15.i32[1] - 4 * v15.i32[0]) & 0x3FFF;
  }
  else {
    unsigned int v16 = (4 * v15.i16[0] - v15.i16[2]) & 0x7FFF;
  }
  BOOL v18 = v16 < (unsigned __int32)v15.i32[1] >> 3 && a3 > 0x5FF && *(_WORD *)(result + 52) == 0;
  int v19 = *(unsigned __int16 *)(result + 46);
  if (v18) {
    int v20 = 0;
  }
  else {
    int v20 = 512;
  }
  unsigned int v21 = v20 - v19;
  int v22 = (v21 >> 4) & 0x7F;
  if ((v21 & 0x400) != 0) {
    __int16 v23 = v22 | 0x380;
  }
  else {
    __int16 v23 = v22;
  }
  __int16 v24 = (v23 + v19) & 0x3FF;
  if (a4) {
    __int16 v24 = 256;
  }
  *(_WORD *)(result + 46) = v24;
  return result;
}

int16x4_t sub_56508(uint64_t a1, unsigned int a2, int a3)
{
  if (*(_DWORD *)(a1 + 4) == 40000) {
    goto LABEL_12;
  }
  if ((a2 & 0x7FFF) == 0)
  {
    if (!a3)
    {
      int16x4_t result = vadd_s16( vsub_s16(*(int16x4_t *)(a1 + 14), (int16x4_t)vshr_n_u16(*(uint16x4_t *)(a1 + 14), 8uLL)),  (int16x4_t)(*(void *)&vshr_n_u16(*(uint16x4_t *)(a1 + 14), 7uLL) & 0xFF00FF00FF00FF00LL));
      *(int16x4_t *)(a1 + 14) = result;
      *(_WORD *)(a1 + 22) = *(_WORD *)(a1 + 22) - HIBYTE(*(_WORD *)(a1 + 22)) + ((*(_WORD *)(a1 + 22) >> 7) & 0x100);
      *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) - HIBYTE(*(_WORD *)(a1 + 24)) + ((*(_WORD *)(a1 + 24) >> 7) & 0x100);
      return result;
    }

uint64_t g726_decode_frame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v81 = 0;
  __int16 v77 = 0;
  if (a3)
  {
    uint64_t v5 = 0LL;
    __int16 v80 = 0;
    uint64_t v70 = a1 + 26;
    uint64_t v71 = a1 + 28;
    __int16 v79 = 0;
    while (1)
    {
      sub_55D48((__int16 *)a1, &v80, &v79);
      int v8 = *(__int16 *)(a1 + 46);
      int v9 = v8 >> 2;
      if (v8 > 255) {
        LOWORD(sub_52A64(v3, v9) = 64;
      }
      int v10 = *(_DWORD *)(a1 + 56) >> 6;
      unsigned int v11 = (*(_WORD *)(a1 + 60) - (_WORD)v10) & 0x3FFF;
      __int16 v12 = (v11 * (__int16)v9) >> 6;
      unsigned int v13 = -((((v10 - *(unsigned __int16 *)(a1 + 60)) & 0x1FFFu) * (__int16)v9) >> 6) & 0x3FFF;
      if (v11 < 0x2000) {
        LOWORD(v13) = v12;
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + v5);
      if (*(_DWORD *)(a1 + 4) == 32000)
      {
        __int16 v15 = word_66700[v14];
        int v16 = ((_DWORD)v14 << 12) & 0xF8000;
      }

      else
      {
        __int16 v15 = 0;
        int v16 = 0;
      }

      __int16 v17 = v13 + v10;
      unsigned int v75 = ((_WORD)v13 + (_WORD)v10) & 0x1FFF;
      int v18 = v75 >> 2;
      unsigned int v19 = (v15 + (unsigned __int16)(v75 >> 2)) & 0xFFF;
      if (v19 <= 0x7FF) {
        signed int v20 = ((((v15 + (_WORD)v18) & 0x7F) << 7) | 0x4000u) >> (14 - (v19 >> 7));
      }
      else {
        signed int v20 = 0;
      }
      unsigned int v21 = v20 + v16;
      unsigned __int16 v22 = v80;
      int v23 = (__int16)(v20 + v16);
      sub_56258((_WORD *)a1, &v77, &v81, &v78, v23, v80, v79);
      int v27 = *(_DWORD *)(a1 + 56);
      if (*(_DWORD *)(a1 + 4) == 32000)
      {
        char v28 = 7 - v14;
        int v29 = 32 * word_666F0[v28 & 7];
      }

      else
      {
        int v29 = 0;
      }

      unsigned int v30 = v29 - (v17 & 0x1FFF);
      int v31 = (v30 >> 5) & 0xFFF;
      if ((v30 & 0x10000) != 0) {
        __int16 v32 = v31 | 0x1000;
      }
      else {
        __int16 v32 = v31;
      }
      int v33 = (v32 + v17) & 0x1FFF;
      __int16 v34 = v33 + 15840;
      if ((((_WORD)v33 + 11264) & 0x2000) == 0) {
        int v33 = 5120;
      }
      if ((v34 & 0x2000) != 0) {
        int v33 = 544;
      }
      *(_WORD *)(a1 + 60) = v33;
      unsigned int v35 = v33 + (-v27 >> 6);
      if ((v35 & 0x2000) != 0) {
        int v36 = v35 | 0x7C000;
      }
      else {
        int v36 = v35 & 0x3FFF;
      }
      *(_DWORD *)(a1 + 56) = (v36 + v27) & 0x7FFFF;
      if (v23 < 0) {
        int v37 = -(v21 & 0x7FFF);
      }
      else {
        LOWORD(v37) = v21;
      }
      if (v22 >= 0x4000u) {
        __int16 v38 = v22 ^ 0x8000;
      }
      else {
        __int16 v38 = v22;
      }
      int v39 = (__int16)(v37 + v38);
      int v76 = v21 & 0x7FFF;
      if (*(_WORD *)a1 == 2)
      {
        if (v39 < 0x2000)
        {
          __int16 v40 = 4 * v39;
          if (4 * v39 <= -32768) {
            __int16 v40 = 0x8000;
          }
          unsigned int v41 = v75;
        }

        else
        {
          __int16 v40 = 0x7FFF;
          unsigned int v41 = v75;
        }

        goto LABEL_102;
      }

      int v42 = linear_to_alaw(v39);
      if (*(_WORD *)a1 == 1)
      {
        __int16 v43 = 0;
      }

      else
      {
        int v18 = v23;
        unsigned int v44 = v21;
        __int16 v45 = v42;
        int v46 = alaw_to_linear(v42);
        if (v46 < 0) {
          __int16 v43 = ((unsigned __int16)v46 >> 2) | 0xC000;
        }
        else {
          __int16 v43 = (unsigned __int16)v46 >> 2;
        }
        LOWORD(v42) = v45;
        unsigned int v21 = v44;
        int v23 = v18;
        LOWORD(v1_Block_object_dispose(va, 8) = v75 >> 2;
      }

      __int16 v47 = 0;
      unsigned __int16 v48 = v43 - v38;
      int v49 = (__int16)v48;
      if ((v48 & 0x8000u) != 0) {
        unsigned __int16 v48 = -v48 & 0x7FFF;
      }
      if (v48 >= 2u)
      {
        __int16 v47 = 0;
        int v50 = 2;
        do
        {
          ++v47;
          v50 *= 2;
        }

        while (v50 <= v48);
      }

      if (*(_DWORD *)(a1 + 4) != 32000)
      {
        LOWORD(v42) = 0;
        unsigned int v41 = v75;
        goto LABEL_101;
      }

      unsigned int v51 = ((((v48 << 7) >> v47) & 0x7F | (unsigned __int16)(v47 << 7)) - (_WORD)v18) & 0xFFF;
      unsigned int v52 = v14 & 7;
      if (v49 < 0) {
        break;
      }
      if (v51 > 0xF83)
      {
        unsigned int v53 = 9;
LABEL_93:
        unsigned int v41 = v75;
        goto LABEL_94;
      }

      unsigned int v41 = v75;
      if (v51 <= 0x7FF)
      {
        if (v51 <= 0x18F)
        {
          if (v51 <= 0x15C)
          {
            if (v51 <= 0x12B)
            {
              if (v51 <= 0xF5)
              {
                if (v51 <= 0xB1)
                {
                  if (v51 <= 0x4F) {
                    unsigned int v53 = 9;
                  }
                  else {
                    unsigned int v53 = 10;
                  }
                }

                else
                {
                  unsigned int v53 = 11;
                }
              }

              else
              {
                unsigned int v53 = 12;
              }
            }

            else
            {
              unsigned int v53 = 13;
            }
          }

          else
          {
            unsigned int v53 = 14;
          }
        }

        else
        {
          unsigned int v53 = 15;
        }
      }

      else
      {
        unsigned int v53 = 7;
      }

LABEL_94:
      if (*(_WORD *)a1 != 1)
      {
        if (v53 >= v52)
        {
          if (v53 <= v52) {
            goto LABEL_101;
          }
          if ((v42 & 0x80) == 0)
          {
LABEL_100:
            LOWORD(v42) = v42 + 1;
            goto LABEL_101;
          }
        }

        else if ((v42 & 0x80) != 0)
        {
          goto LABEL_100;
        }

        LOWORD(v42) = v42 - 1;
      }

uint64_t linear_to_alaw(int a1)
{
  unsigned int v1 = (a1 >> 4) ^ (a1 >> 15);
  if (v1 >= 0x10)
  {
    if (v1 < 0x20)
    {
      char v5 = 16;
    }

    else
    {
      char v2 = 1;
      do
      {
        __int16 v3 = (unsigned __int16)v1 >> 1;
        unsigned int v4 = (unsigned __int16)v1;
        ++v2;
        LOWORD(v1) = (unsigned __int16)v1 >> 1;
      }

      while (v4 > 0x3F);
      char v5 = 16 * v2;
      LOBYTE(v1) = v3;
    }

    LOBYTE(v1) = v1 + v5 - 16;
  }

  if (a1 >= 0) {
    LOBYTE(v1) = v1 | 0x80;
  }
  return v1 ^ 0x55u;
}

uint64_t alaw_to_linear(int a1)
{
  if ((((a1 ^ 0x55u) >> 4) & 7) != 0) {
    int v1 = ((16 * ((a1 ^ 0x55) & 0xF)) | 0x108) << ((((a1 ^ 0x55u) >> 4) & 7) - 1);
  }
  else {
    int v1 = (16 * ((a1 ^ 0x55) & 0xF)) | 8;
  }
  if ((a1 & 0x80u) == 0) {
    int v1 = -v1;
  }
  return (__int16)v1;
}

uint64_t g722_encode_frame(int16x4_t *a1, __int16 *a2, int a3, _BYTE *a4, _WORD *a5)
{
  if (a3 >> (a1[6].u16[1] != 4) < 1)
  {
    __int16 v36 = 0;
  }

  else
  {
    int v38 = a3 >> (a1[6].u16[1] != 4);
    int v39 = a5;
    uint64_t v8 = (uint64_t)&a1[6] + 4;
    uint64_t v9 = (uint64_t)&a1[15] + 6;
    uint64_t v10 = (unsigned __int16)v38;
    unsigned int v11 = (int16x4_t *)((char *)a1 + 4);
    do
    {
      while (a1[6].i16[1] == 4)
      {
        __int16 v35 = *a2++;
        a1[15].i16[3] = v35;
        sub_56F90(v9);
        *a4++ = (a1[16].i8[4] >> 2) & 0xF;
        if (!--v10) {
          goto LABEL_27;
        }
      }

      __int128 v12 = *(_OWORD *)a1->i8;
      __int128 v13 = *(_OWORD *)a1[2].i8;
      int16x4_t v14 = a1[4];
      v11[5].i32[0] = a1[5].i32[0];
      void v11[4] = v14;
      *(_OWORD *)v11->i8 = v12;
      *(_OWORD *)v11[2].i8 = v13;
      a1->i16[0] = *a2;
      a1->i16[1] = a2[1];
      int8x16_t v15 = (int8x16_t)vmlal_s16( vmlal_s16( vmlal_s16( vmlal_s16( vmlal_s16( vmull_s16((int16x4_t)0x20016A000CFF64LL, a1[1]),  (int16x4_t)0xFFF500350003FFF5LL,  *a1),  (int16x4_t)0x3B70F24FF2EFCDBLL,  a1[2]),  (int16x4_t)0xFCDBFF2E0F2403B7LL,  a1[3]),  (int16x4_t)0xFF64000C016A0020LL,  a1[4]),  (int16x4_t)0xFFF500030035FFF5LL,  a1[5]);
      int32x2_t v16 = vadd_s32(*(int32x2_t *)v15.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      int v17 = (v16.i32[0] + v16.i32[1]) >> 14;
      if (v17 <= -32768) {
        int v17 = -32768;
      }
      if (v17 >= 0x7FFF) {
        LOWORD(v17) = 0x7FFF;
      }
      a1[15].i16[3] = v17;
      int v18 = (v16.i32[1] - v16.i32[0]) >> 14;
      if (v18 <= -32768) {
        int v18 = -32768;
      }
      if (v18 >= 0x7FFF) {
        int v18 = 0x7FFF;
      }
      a1[6].i16[2] = v18;
      int v19 = a1[7].i16[0];
      int v20 = v18 - v19;
      BOOL v21 = v18 >= v19;
      if (v18 - v19 >= 0x7FFF) {
        int v20 = 0x7FFF;
      }
      if (v20 <= -32768) {
        int v20 = -32768;
      }
      a2 += 2;
      if (v18 >= v19) {
        int v22 = v20;
      }
      else {
        int v22 = ~v20;
      }
      a1[6].i16[3] = v20;
      int v23 = a1[7].i16[3];
      __int16 v24 = word_6685C[2 * v21 + (v22 >= (564 * v23) >> 12)];
      a1[7].i16[1] = v24;
      int v25 = (word_66864[v24] * v23) >> 15;
      if (v25 >= 0x7FFF) {
        LOWORD(v25) = 0x7FFF;
      }
      a1[8].i16[0] = v25;
      int v26 = word_66858[v24 & 1] + ((127 * a1[7].i16[2]) >> 7);
      int v27 = v26 & ~(v26 >> 31);
      if (v27 >= 22528) {
        int v27 = 22528;
      }
      a1[7].i16[2] = v27;
      int v28 = (v27 >> 6) & 0x1F;
      unsigned int v29 = v27 >> 11;
      char v30 = 10 - v29;
      int v31 = word_66818[v28];
      BOOL v32 = v29 > 0xA;
      int v33 = v31 << (v29 - 10);
      int v34 = v31 >> v30;
      if (!v32) {
        LOWORD(v33) = v34;
      }
      a1[7].i16[3] = 4 * v33;
      sub_577BC(v8);
      sub_56F90(v9);
      *a4++ = a1[16].i8[4] | (a1[7].i8[2] << 6);
      --v10;
    }

    while (v10);
LABEL_27:
    __int16 v36 = v38;
    a5 = v39;
  }

  *a5 = v36;
  return 0LL;
}

uint64_t sub_56F90(uint64_t result)
{
  int v1 = *(__int16 *)result;
  int v2 = *(__int16 *)(result + 4);
  int v3 = v1 - v2;
  if (v1 - v2 >= 0x7FFF) {
    int v3 = 0x7FFF;
  }
  if (v3 <= -32768) {
    int v3 = -32768;
  }
  if (v1 >= v2) {
    int v4 = v3;
  }
  else {
    int v4 = ~v3;
  }
  *(_WORD *)(result + 2) = v3;
  int v5 = *(__int16 *)(result + 10);
  if (v4 >= (35 * v5) >> 12)
  {
    if (v4 >= (72 * v5) >> 12)
    {
      if (v4 >= (110 * v5) >> 12)
      {
        if (v4 >= (150 * v5) >> 12)
        {
          if (v4 >= (190 * v5) >> 12)
          {
            if (v4 >= (233 * v5) >> 12)
            {
              if (v4 >= (276 * v5) >> 12)
              {
                if (v4 >= (323 * v5) >> 12)
                {
                  if (v4 >= (370 * v5) >> 12)
                  {
                    if (v4 >= (422 * v5) >> 12)
                    {
                      if (v4 >= (473 * v5) >> 12)
                      {
                        if (v4 >= (530 * v5) >> 12)
                        {
                          if (v4 >= (587 * v5) >> 12)
                          {
                            if (v4 >= (650 * v5) >> 12)
                            {
                              if (v4 >= (714 * v5) >> 12)
                              {
                                if (v4 >= (786 * v5) >> 12)
                                {
                                  if (v4 >= (858 * v5) >> 12)
                                  {
                                    if (v4 >= (940 * v5) >> 12)
                                    {
                                      if (v4 >= (1023 * v5) >> 12)
                                      {
                                        if (v4 >= (1121 * v5) >> 12)
                                        {
                                          if (v4 >= (1219 * v5) >> 12)
                                          {
                                            if (v4 >= (1339 * v5) >> 12)
                                            {
                                              if (v4 >= (1458 * v5) >> 12)
                                              {
                                                if (v4 >= (1612 * v5) >> 12)
                                                {
                                                  if (v4 >= (1765 * v5) >> 12)
                                                  {
                                                    if (v4 >= (1980 * v5) >> 12)
                                                    {
                                                      if (v4 >= (2195 * v5) >> 12)
                                                      {
                                                        if (v4 >= (2557 * v5) >> 12)
                                                        {
                                                          BOOL v8 = __OFSUB__(v4, (2919 * v5) >> 12);
                                                          BOOL v7 = v4 - ((2919 * v5) >> 12) < 0;
                                                          uint64_t v6 = 28LL;
                                                          if (v7 == v8) {
                                                            uint64_t v6 = 29LL;
                                                          }
                                                        }

                                                        else
                                                        {
                                                          uint64_t v6 = 27LL;
                                                        }
                                                      }

                                                      else
                                                      {
                                                        uint64_t v6 = 26LL;
                                                      }
                                                    }

                                                    else
                                                    {
                                                      uint64_t v6 = 25LL;
                                                    }
                                                  }

                                                  else
                                                  {
                                                    uint64_t v6 = 24LL;
                                                  }
                                                }

                                                else
                                                {
                                                  uint64_t v6 = 23LL;
                                                }
                                              }

                                              else
                                              {
                                                uint64_t v6 = 22LL;
                                              }
                                            }

                                            else
                                            {
                                              uint64_t v6 = 21LL;
                                            }
                                          }

                                          else
                                          {
                                            uint64_t v6 = 20LL;
                                          }
                                        }

                                        else
                                        {
                                          uint64_t v6 = 19LL;
                                        }
                                      }

                                      else
                                      {
                                        uint64_t v6 = 18LL;
                                      }
                                    }

                                    else
                                    {
                                      uint64_t v6 = 17LL;
                                    }
                                  }

                                  else
                                  {
                                    uint64_t v6 = 16LL;
                                  }
                                }

                                else
                                {
                                  uint64_t v6 = 15LL;
                                }
                              }

                              else
                              {
                                uint64_t v6 = 14LL;
                              }
                            }

                            else
                            {
                              uint64_t v6 = 13LL;
                            }
                          }

                          else
                          {
                            uint64_t v6 = 12LL;
                          }
                        }

                        else
                        {
                          uint64_t v6 = 11LL;
                        }
                      }

                      else
                      {
                        uint64_t v6 = 10LL;
                      }
                    }

                    else
                    {
                      uint64_t v6 = 9LL;
                    }
                  }

                  else
                  {
                    uint64_t v6 = 8LL;
                  }
                }

                else
                {
                  uint64_t v6 = 7LL;
                }
              }

              else
              {
                uint64_t v6 = 6LL;
              }
            }

            else
            {
              uint64_t v6 = 5LL;
            }
          }

          else
          {
            uint64_t v6 = 4LL;
          }
        }

        else
        {
          uint64_t v6 = 3LL;
        }
      }

      else
      {
        uint64_t v6 = 2LL;
      }
    }

    else
    {
      uint64_t v6 = 1LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  int v9 = word_66780[30 * (v1 >= v2) + v6];
  *(_WORD *)(result + 6) = v9;
  uint64_t v10 = 2LL * (v9 >> 2);
  int v11 = (*(__int16 *)((char *)&unk_667F8 + v10) * v5) >> 15;
  if (v11 >= 0x7FFF) {
    __int16 v12 = 0x7FFF;
  }
  else {
    __int16 v12 = v11;
  }
  *(_WORD *)(result + 12) = v12;
  int v13 = (*(__int16 *)((char *)&unk_66760 + v10) + ((127 * *(__int16 *)(result + 8)) >> 7)) & ~((*(__int16 *)((char *)&unk_66760 + v10)
                                                                                              + ((127
                                                                                                * *(__int16 *)(result + 8)) >> 7)) >> 31);
  if (v13 >= 18432) {
    int v13 = 18432;
  }
  *(_WORD *)(result + _Block_object_dispose(va, 8) = v13;
  unsigned int v14 = (v13 >> 6) & 0x1F;
  unsigned int v15 = v13 >> 11;
  char v16 = 8 - v15;
  BOOL v17 = v15 >= 8;
  BOOL v18 = v15 == 8;
  int v19 = word_66818[v14];
  int v20 = v19 << (v15 - 8);
  int v21 = v19 >> v16;
  if (v18 || !v17) {
    LOWORD(v20) = v21;
  }
  *(_WORD *)(result + 10) = 4 * v20;
  return sub_577BC(result);
}

double g722_encoder_init(uint64_t a1, __int16 a2)
{
  *(void *)(a1 + 192) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + sub_52C5C(v49 - 176) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + sub_52C5C(v1 - 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 136) = 32;
  *(_WORD *)(a1 + 62) = 8;
  *(_WORD *)(a1 + 50) = a2;
  return result;
}

uint64_t g722_decode_frame(int16x4_t *a1, _BYTE *a2, int a3, uint64_t a4, _WORD *a5)
{
  if (a3 < 1)
  {
    LOWORD(sub_52A64(v4, v8) = 0;
    goto LABEL_39;
  }

  int v8 = 0;
  int v9 = (_WORD *)&a1[6] + 2;
  uint64_t v10 = (_WORD *)&a1[15] + 3;
  uint64_t v11 = (unsigned __int16)a3;
  unsigned int v41 = a5;
  int v42 = a1 + 16;
  __int16 v12 = (char *)a1 + 4;
  do
  {
    while (1)
    {
      int v38 = a1[6].u16[1];
      if (v38 == 6) {
        break;
      }
      if (v38 == 7)
      {
        unint64_t v13 = (unint64_t)*a2 >> 6;
        a1[7].i16[1] = v13;
        int v14 = (*a2 >> 1) & 0x1F;
        goto LABEL_4;
      }

      if (v38 == 8)
      {
        unint64_t v13 = (unint64_t)*a2 >> 6;
        a1[7].i16[1] = v13;
        LOWORD(v14) = *a2 & 0x3F;
        goto LABEL_4;
      }

      unsigned int v39 = *a2++;
      a1[16].i16[2] = v39 >> 4;
      sub_57664(v38, v10);
      *(_WORD *)(a4 + 2LL * v8++) = v42->i16[0];
      if (!--v11) {
        goto LABEL_37;
      }
    }

    unint64_t v13 = (unint64_t)*a2 >> 6;
    a1[7].i16[1] = v13;
    int v14 = (*a2 >> 2) & 0xF;
LABEL_4:
    a1[16].i16[2] = v14;
    int v15 = (word_66864[v13] * a1[7].i16[3]) >> 15;
    if (v15 >= 0x7FFF) {
      LOWORD(v15) = 0x7FFF;
    }
    a1[8].i16[0] = v15;
    int v16 = a1[7].i16[0] + (__int16)v15;
    if (v16 >= 0x7FFF) {
      int v16 = 0x7FFF;
    }
    if (v16 <= -32768) {
      LOWORD(v16) = 0x8000;
    }
    a1[6].i16[3] = v16;
    int v17 = word_66858[v13 & 1] + ((127 * a1[7].i16[2]) >> 7);
    int v18 = v17 & ~(v17 >> 31);
    if (v18 >= 22528) {
      int v18 = 22528;
    }
    a1[7].i16[2] = v18;
    int v19 = (v18 >> 6) & 0x1F;
    unsigned int v20 = v18 >> 11;
    char v21 = 10 - v20;
    int v22 = word_66818[v19];
    BOOL v23 = v20 > 0xA;
    int v24 = v22 << (v20 - 10);
    int v25 = v22 >> v21;
    if (!v23) {
      LOWORD(v24) = v25;
    }
    a1[7].i16[3] = 4 * v24;
    sub_577BC((uint64_t)v9);
    sub_57664(a1[6].i16[1], v10);
    int v26 = a1[16].i16[0];
    int v27 = a1[6].i16[3];
    int v28 = v26 + v27;
    if (v26 + v27 >= 0x7FFF) {
      int v28 = 0x7FFF;
    }
    if (v28 <= -32768) {
      LOWORD(v2_Block_object_dispose(va, 8) = 0x8000;
    }
    a1[5].i16[2] = v28;
    int v29 = v26 - v27;
    if (v29 >= 0x7FFF) {
      int v29 = 0x7FFF;
    }
    if (v29 <= -32768) {
      LOWORD(v29) = 0x8000;
    }
    a1[5].i16[3] = v29;
    int32x4_t v30 = vmlal_s16( vmlal_s16( vmlal_s16( vmlal_s16( vmlal_s16(vmull_s16((int16x4_t)0x20016A000CFF64LL, a1[1]), (int16x4_t)0xFFF500350003FFF5LL, *a1),  (int16x4_t)0x3B70F24FF2EFCDBLL,  a1[2]),  (int16x4_t)0xFCDBFF2E0F2403B7LL,  a1[3]),  (int16x4_t)0xFF64000C016A0020LL,  a1[4]),  (int16x4_t)0xFFF500030035FFF5LL,  a1[5]);
    int v31 = vaddq_s32(v30, vdupq_laneq_s32(v30, 3)).i32[1];
    __int32 v32 = vaddq_s32(v30, vdupq_laneq_s32(v30, 2)).i32[0] >> 11;
    if (v32 <= -32768) {
      __int32 v32 = -32768;
    }
    if (v32 >= 0x7FFF) {
      LOWORD(v32) = 0x7FFF;
    }
    a1[15].i16[3] = v32;
    int v33 = v31 >> 11;
    if (v33 <= -32768) {
      int v33 = -32768;
    }
    if (v33 >= 0x7FFF) {
      LOWORD(v33) = 0x7FFF;
    }
    a1[6].i16[2] = v33;
    __int32 v34 = *((_DWORD *)v12 + 10);
    __int128 v35 = *(_OWORD *)v12;
    __int128 v36 = *((_OWORD *)v12 + 1);
    a1[4] = *(int16x4_t *)(v12 + 32);
    *(_OWORD *)a1->i8 = v35;
    *(_OWORD *)a1[2].i8 = v36;
    a1[5].i32[0] = v34;
    *(_WORD *)(a4 + 2LL * sub_52A64(v4, v8) = v32;
    int v37 = v8 + 1;
    *(_WORD *)(a4 + 2LL * v37) = *v9;
    int v8 = v37 + 1;
    ++a2;
    --v11;
  }

  while (v11);
LABEL_37:
  a5 = v41;
LABEL_39:
  *a5 = v8;
  return 0LL;
}

uint64_t sub_57664(__int16 a1, _WORD *a2)
{
  if (a1 == 7)
  {
    uint64_t v5 = (__int16)a2[3];
    __int16 v3 = word_668EC[v5];
    int v4 = (int)v5 >> 1;
    a2[3] = v4;
  }

  else if (a1 == 8)
  {
    uint64_t v2 = (__int16)a2[3];
    __int16 v3 = word_6686C[v2];
    int v4 = (int)v2 >> 2;
    a2[3] = v4;
  }

  else
  {
    LOWORD(sub_459C(v1, v4) = a2[3];
    __int16 v3 = word_667F8[(__int16)v4];
  }

  int v6 = (__int16)a2[5];
  int v7 = (__int16)a2[2] + ((v6 * v3) >> 15);
  if (v7 <= -32768) {
    int v7 = -32768;
  }
  if (v7 >= 0x7FFF) {
    LOWORD(sub_459C(v1, v7) = 0x7FFF;
  }
  a2[1] = v7;
  uint64_t v8 = 2LL * (__int16)v4;
  int v9 = ((__int16)word_667F8[(unint64_t)v8 / 2] * v6) >> 15;
  if (v9 >= 0x7FFF) {
    LOWORD(sub_52A64(v3, v9) = 0x7FFF;
  }
  a2[6] = v9;
  if (v10 >= 18432) {
    int v10 = 18432;
  }
  a2[4] = v10;
  int v11 = (v10 >> 6) & 0x1F;
  unsigned int v12 = v10 >> 11;
  char v13 = 8 - v12;
  BOOL v14 = v12 > 8;
  int v15 = word_66818[v11];
  int v16 = v15 << (v12 - 8);
  int v17 = v15 >> v13;
  if (!v14) {
    LOWORD(v16) = v17;
  }
  a2[5] = 4 * v16;
  return sub_577BC((uint64_t)a2);
}

double g722_decoder_init(uint64_t a1, __int16 a2)
{
  *(void *)(a1 + 192) = 0LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + sub_52C5C(v49 - 176) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + sub_52C5C(v1 - 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 136) = 32;
  *(_WORD *)(a1 + 62) = 8;
  *(_WORD *)(a1 + 50) = a2;
  *(_WORD *)(a1 + 4_Block_object_dispose(va, 8) = 22;
  return result;
}

uint64_t sub_577BC(uint64_t result)
{
  unsigned int v1 = *(__int16 *)(result + 12);
  int v2 = *(_WORD *)(result + 12) != 0;
  else {
    int v3 = v1 + *(__int16 *)(result + 72);
  }
  if (v3 <= -32768) {
    int v3 = -32768;
  }
  *(_WORD *)(result + 54) = v3;
  int v4 = v1 + *(__int16 *)(result + 4);
  if (v4 >= 0x7FFF) {
    int v4 = 0x7FFF;
  }
  if (v4 <= -32768) {
    LOWORD(sub_459C(v1, v4) = 0x8000;
  }
  *(_WORD *)(result + 60) = v4;
  int v5 = v3 >> 15;
  int v6 = *(__int16 *)(result + 56);
  int v7 = *(__int16 *)(result + 68);
  int v8 = 4 * v7;
  if (4 * v7 <= -32768) {
    int v8 = -32768;
  }
  if (v8 >= 0x7FFF) {
    int v8 = 0x7FFF;
  }
  BOOL v9 = v5 == v6 >> 15;
  if (v5 == v6 >> 15) {
    int v10 = 192;
  }
  else {
    int v10 = -192;
  }
  if (v9) {
    int v8 = -v8;
  }
  else {
    int v11 = -128;
  }
  int v12 = v11 + (v8 >> 7) + ((32512 * *(__int16 *)(result + 70)) >> 15);
  if (v12 <= -12288) {
    int v12 = -12288;
  }
  if (v12 >= 12288) {
    int v12 = 12288;
  }
  *(_WORD *)(result + 70) = v12;
  int v13 = v10 + ((32640 * v7) >> 15);
  if (v13 <= -32768) {
    int v13 = -32768;
  }
  if (v13 >= 0x7FFF) {
    int v13 = 0x7FFF;
  }
  int v14 = 15360 - v12;
  else {
    LOWORD(v15) = v13;
  }
  if (v14 >= v13) {
    LOWORD(v14) = v15;
  }
  *(_WORD *)(result + 6_Block_object_dispose(va, 8) = v14;
  int8x8_t v16 = *(int8x8_t *)(result + 14);
  int32x4_t v17 = vmull_s16(*(int16x4_t *)(result + 28), vdup_n_s16(0x7F80u));
  v18.i64[0] = vshrq_n_u32((uint32x4_t)v17, 0xFuLL).u64[0];
  v18.i64[1] = vshrq_n_s32(v17, 0xFuLL).i64[1];
  int32x4_t v19 = vaddq_s32( v18,  (int32x4_t)vbslq_s8( (int8x16_t)vmovl_s16(vcltz_s16((int16x4_t)veor_s8(v16, (int8x8_t)vdup_n_s16(v1)))),  (int8x16_t)vdupq_n_s32(-128 * v2),  (int8x16_t)vdupq_n_s32(v2 << 7)));
  int16x4_t v20 = vmovn_s32(v19);
  *(int16x4_t *)(result + 42) = v20;
  int v21 = *(__int16 *)(result + 22);
  if (((v21 ^ v1) & 0x80000000) == 0) {
    int v22 = v2 << 7;
  }
  else {
    int v22 = -128 * v2;
  }
  int v23 = v22 + ((32640 * *(__int16 *)(result + 36)) >> 15);
  *(_WORD *)(result + 50) = v23;
  if (((*(_WORD *)(result + 24) ^ v1) & 0x8000u) == 0) {
    int v24 = v2 << 7;
  }
  else {
    int v24 = -128 * v2;
  }
  int v25 = v24 + ((32640 * *(__int16 *)(result + 38)) >> 15);
  *(_WORD *)(result + 52) = v25;
  *(_WORD *)(result + 24) = v21;
  int v26 = 2 * v21;
  if (2 * v21 <= -32768) {
    int v26 = -32768;
  }
  if (v26 >= 0x7FFF) {
    int v26 = 0x7FFF;
  }
  *(_WORD *)(result + 3_Block_object_dispose(va, 8) = v25;
  int v27 = v26 * v25;
  *(_WORD *)(result + 22) = v16.i16[3];
  int v28 = 2 * v16.i16[3];
  if (v28 <= -32768) {
    int v28 = -32768;
  }
  if (v28 >= 0x7FFF) {
    int v28 = 0x7FFF;
  }
  *(_WORD *)(result + 36) = v23;
  *(_WORD *)(result + 20) = v16.i16[2];
  int v29 = ((v28 * v23) >> 15) + (v27 >> 15);
  int v30 = 2 * v16.i16[2];
  if (v30 <= -32768) {
    int v30 = -32768;
  }
  if (v30 >= 0x7FFF) {
    int v30 = 0x7FFF;
  }
  *(_WORD *)(result + 34) = v20.i16[3];
  __int32 v31 = v29 + ((v30 * v19.i32[3]) >> 15);
  int v32 = *(__int16 *)(result + 16);
  *(_WORD *)(result + 1_Block_object_dispose(va, 8) = v32;
  int v33 = 2 * v32;
  if (v33 <= -32768) {
    int v33 = -32768;
  }
  if (v33 >= 0x7FFF) {
    int v33 = 0x7FFF;
  }
  *(_WORD *)(result + 32) = v20.i16[2];
  __int32 v34 = v31 + ((v33 * v19.i32[2]) >> 15);
  int v35 = *(__int16 *)(result + 14);
  *(_WORD *)(result + 16) = v35;
  int v36 = 2 * v35;
  if (v36 <= -32768) {
    int v36 = -32768;
  }
  if (v36 >= 0x7FFF) {
    int v36 = 0x7FFF;
  }
  int v37 = *(__int16 *)(result + 44);
  *(_WORD *)(result + 30) = *(_WORD *)(result + 44);
  __int32 v38 = v34 + ((v36 * v37) >> 15);
  int v39 = *(__int16 *)(result + 12);
  *(_WORD *)(result + 14) = v39;
  int v40 = 2 * v39;
  if (v40 <= -32768) {
    int v40 = -32768;
  }
  if (v40 >= 0x7FFF) {
    int v40 = 0x7FFF;
  }
  int v41 = *(__int16 *)(result + 42);
  *(_WORD *)(result + 2_Block_object_dispose(va, 8) = *(_WORD *)(result + 42);
  int v42 = v38 + ((v40 * v41) >> 15);
  if (v42 <= -32768) {
    int v42 = -32768;
  }
  if (v42 >= 0x7FFF) {
    int v42 = 0x7FFF;
  }
  *(_WORD *)(result + 72) = v42;
  *(_DWORD *)(result + 56) = *(_DWORD *)(result + 54);
  int v43 = *(__int16 *)(result + 62);
  *(_WORD *)(result + 64) = v43;
  int v44 = 2 * v43;
  if (v44 <= -32768) {
    int v44 = -32768;
  }
  if (v44 >= 0x7FFF) {
    int v44 = 0x7FFF;
  }
  int v45 = v44 * *(__int16 *)(result + 70);
  int v46 = *(__int16 *)(result + 60);
  *(_WORD *)(result + 62) = v46;
  int v47 = 2 * v46;
  if (v47 <= -32768) {
    int v47 = -32768;
  }
  if (v47 >= 0x7FFF) {
    int v47 = 0x7FFF;
  }
  int v48 = ((v47 * *(__int16 *)(result + 68)) >> 15) + (v45 >> 15);
  if (v48 <= -32768) {
    int v48 = -32768;
  }
  if (v48 >= 0x7FFF) {
    int v48 = 0x7FFF;
  }
  int v49 = v48 + v42;
  if (v49 >= 0x7FFF) {
    int v50 = 0x7FFF;
  }
  else {
    int v50 = v49;
  }
  if (v50 <= -32768) {
    LOWORD(v50) = 0x8000;
  }
  *(_WORD *)(result + 4) = v50;
  return result;
}

void sub_57AF8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_57B68( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_57BD8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_57C48()
{
}

void sub_57C74()
{
}

void sub_57CA0(uint8_t *buf, uint64_t a2, int a3, os_log_t log)
{
  *(_DWORD *)std::string buf = 134218240;
  *(void *)(buf + 4) = a2;
  *((_WORD *)buf + 6) = 1024;
  *(_DWORD *)(buf + 14) = a3;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "bufferSize (%lu) exceeds maxFrameSize (%d), not writing",  buf,  0x12u);
}

void sub_57CF4(uint8_t *buf, void *a2, os_log_t log)
{
  *(_DWORD *)std::string buf = 136446210;
  *a2 = "bufferSize <= GetFrameLength()";
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
}

void sub_57D40(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "Input Decode:: decodeInputSize=0 for non-frame based codec",  buf,  2u);
}

void sub_57D7C()
{
}

void sub_57DA8()
{
}

void sub_57DD4()
{
}

void sub_57E00()
{
}

void sub_57E2C()
{
}

void sub_57E58()
{
}

void sub_57E84()
{
}

void sub_57EB0()
{
}

void sub_57EDC()
{
}

void sub_57F08(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "StopIO returns noErr (%llu)", (uint8_t *)&v3, 0xCu);
  sub_A32C();
}

void sub_57F7C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Unable to decode mic mode %d to string", (uint8_t *)v2, 8u);
  sub_A318();
}

double sub_57FEC(__int32 *a1, os_log_s *a2, uint8x8_t a3)
{
  a3.i32[0] = *a1;
  int16x8_t v3 = (int16x8_t)vmovl_u8(a3);
  *(int16x4_t *)v3.i8 = vrev64_s16(*(int16x4_t *)v3.i8);
  unsigned __int32 v5 = vmovn_s16(v3).u32[0];
  char v6 = 0;
  *(_DWORD *)std::string buf = 136446210;
  int v8 = &v5;
  _os_log_error_impl( &dword_0,  a2,  OS_LOG_TYPE_ERROR,  "Error in sending property change for property %{public}s",  buf,  0xCu);
  return result;
}

void sub_5807C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_580EC(int *a1, uint64_t a2, os_log_t log)
{
  int v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 52);
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "Failed in dispatched config change for AudioObjectProperty %u on object %d",  (uint8_t *)v5,  0xEu);
  sub_A32C();
}

void sub_58174( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_581D8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58240(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Wireless Splitter Stop, did not find a valid device", v1, 2u);
}

void sub_58280(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "AACDecoder destructor try releasing NULL converter", v1, 2u);
}

void sub_582C0(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "LEA Packet length is not valid %u", (uint8_t *)v2, 8u);
  sub_A318();
}

void sub_58330( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_583A0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58410( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58480( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_584F0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58560( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_585D0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58640(_BYTE *a1, _BYTE *a2)
{
}

void sub_5866C(_BYTE *a1, _BYTE *a2)
{
}

void sub_58698()
{
}

void sub_586C8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5872C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58790()
{
}

void sub_587C0()
{
}

void sub_587F0(float a1)
{
}

void sub_58864(float a1)
{
}

void sub_588D8()
{
}

void sub_58910()
{
}

void sub_58940( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_589B0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58A20(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( &dword_0,  a2,  OS_LOG_TYPE_ERROR,  "Request to get the volume for wrong catetory: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_58A94(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Manual volume update, device invalid", v1, 2u);
}

void sub_58AD4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58B3C()
{
}

void sub_58B68()
{
}

void sub_58B94( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58BFC()
{
}

void sub_58C28()
{
}

void sub_58C54( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58CBC()
{
}

void sub_58CE8(uint64_t a1, os_log_s *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl( &dword_0,  a2,  OS_LOG_TYPE_ERROR,  "Total number of frames from output file: %lld\n",  (uint8_t *)&v2,  0xCu);
}

void sub_58D5C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58DC0()
{
}

void sub_58DEC(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "GetPropertyInfo for kAudioFilePropertyPacketTableInfo error: %d, isWritable: %u\n",  (uint8_t *)v3,  0xEu);
}

void sub_58E70()
{
}

void sub_58E9C()
{
}

void sub_58EC8()
{
}

void sub_58EF4(int a1, os_log_s *a2)
{
  v2[0] = HIBYTE(a1);
  v2[1] = BYTE2(a1);
  _DWORD v2[2] = BYTE1(a1);
  v2[3] = a1;
  v2[4] = 0;
  *(_DWORD *)std::string buf = 136446210;
  uint64_t v4 = v2;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "device type %{public}s", buf, 0xCu);
}

void sub_58F8C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_58FF4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_59058( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_590BC()
{
}

void sub_5911C()
{
}

void sub_5917C()
{
}

void sub_591A8()
{
}

void sub_591D4()
{
}

void sub_59200()
{
}

void sub_5922C()
{
}

void sub_59258()
{
}

void sub_59284()
{
}

void sub_592B0()
{
}

void sub_592DC()
{
}

void sub_5933C()
{
}

void sub_59368()
{
}

void sub_593C8()
{
}

void sub_593F4()
{
}

void sub_59454()
{
}

void sub_59480()
{
}

void sub_594AC()
{
}

void sub_594D8()
{
}

void sub_59504()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl(&dword_0, v1, OS_LOG_TYPE_DEBUG, "XPC Send Sco Data Source: %u, %u!", v2, 0xEu);
  sub_A32C();
}

void sub_59580()
{
}

void sub_595AC()
{
}

void sub_5960C()
{
}

void sub_59638()
{
}

void sub_59664()
{
}

void sub_59690()
{
}

void sub_596BC()
{
}

void sub_596E8()
{
}

void sub_59714()
{
}

void sub_59740()
{
}

void sub_5976C()
{
}

void sub_59798()
{
}

void sub_597C4()
{
}

void sub_597F0()
{
}

void sub_5981C()
{
}

void sub_59848()
{
}

void sub_59874()
{
}

void sub_598A0()
{
}

void sub_598CC()
{
}

void sub_598F8()
{
}

void sub_59924()
{
}

void sub_59950()
{
}

void sub_5997C()
{
}

void sub_599A8()
{
}

void sub_59A08()
{
}

void sub_59A34()
{
}

void sub_59A60()
{
}

void sub_59AC0()
{
}

void sub_59AEC()
{
}

void sub_59B18()
{
}

void sub_59B44()
{
}

void sub_59B70()
{
}

void sub_59B9C()
{
}

void sub_59BC8()
{
}

void sub_59BF4()
{
}

void sub_59C20()
{
}

void sub_59C4C()
{
}

void sub_59C78()
{
}

void sub_59CD8()
{
}

void sub_59D04()
{
}

void sub_59D30()
{
}

void sub_59D90()
{
}

void sub_59DBC()
{
}

void sub_59DE8()
{
}

void sub_59E48()
{
}

void sub_59E74()
{
}

void sub_59EA0()
{
}

void sub_59F00()
{
}

void sub_59F2C()
{
}

void sub_59F58()
{
}

void sub_59F84()
{
}

void sub_59FB0()
{
}

void sub_59FDC()
{
}

void sub_5A008()
{
}

void sub_5A034()
{
}

void sub_5A060()
{
}

void sub_5A0C0()
{
}

void sub_5A0EC()
{
}

void sub_5A118()
{
}

void sub_5A144()
{
}

void sub_5A170()
{
}

void sub_5A19C()
{
}

void sub_5A1C8()
{
}

void sub_5A1F4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5A25C()
{
}

void sub_5A288()
{
}

void sub_5A2B4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5A31C()
{
}

void sub_5A348()
{
}

void sub_5A374(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl( &dword_0,  a2,  OS_LOG_TYPE_ERROR,  "AudioSkywalk read loop is configured to an invalid audio interval (%llu). Defaulting to 22000us",  (uint8_t *)&v3,  0xCu);
  sub_A32C();
}

void sub_5A3E8()
{
}

void sub_5A414()
{
}

void sub_5A488()
{
}

void sub_5A4B4(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "Unable to write %lu bytes into skywalk pipe, not enough free space (%lu bytes available)",  (uint8_t *)&v3,  0x16u);
  sub_A32C();
}

void sub_5A534()
{
  __int16 v3 = 2048;
  uint64_t v4 = v0;
  _os_log_debug_impl(&dword_0, v1, OS_LOG_TYPE_DEBUG, "Syncing slot %d with length %hu, offset %lu", v2, 0x18u);
  sub_A32C();
}

void sub_5A5BC()
{
}

void sub_5A5E8()
{
}

void sub_5A614( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5A644(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Input decode: requested unsupported PLC", v1, 2u);
}

void sub_5A684(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 136446466;
  uint64_t v4 = a1;
  __int16 v5 = 2082;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Error: %{public}s (%{public}s)\n", (uint8_t *)&v3, 0x16u);
}

void sub_5A708(void *a1, os_log_s *a2)
{
  int v4 = 136315138;
  id v5 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
  sub_1A7E4(&dword_0, a2, v3, "Received IDS message %s with no BTAudioIdsMsgCommands", (uint8_t *)&v4);
  sub_1A7F0();
}

void sub_5A788(void *a1, os_log_s *a2)
{
  int v4 = 136315138;
  id v5 = objc_msgSend(objc_msgSend(a1, "description"), "UTF8String");
  sub_1A7E4(&dword_0, a2, v3, "No value for command %s", (uint8_t *)&v4);
  sub_1A7F0();
}

void sub_5A808(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136446210;
  *(void *)(a2 + 4) = a1;
  sub_1A7E4(&dword_0, a3, (uint64_t)a3, "Unknown arbitration message %{public}s receieved", (uint8_t *)a2);
}

void sub_5A844()
{
}

void sub_5A870()
{
}

void sub_5A89C(uint64_t a1, os_log_s *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl( &dword_0,  a2,  OS_LOG_TYPE_ERROR,  "BTAudioDetect input invalid decodedBytes %zu",  (uint8_t *)&v2,  0xCu);
}

void sub_5A910()
{
}

void sub_5A93C()
{
}

void sub_5A968()
{
}

void sub_5A994(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_0, log, OS_LOG_TYPE_DEBUG, "Sending BTAudioMetricA2DPDynamicLatency", v1, 2u);
}

void sub_5A9D4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "LC3Decoder destructor try releasing NULL converter", v1, 2u);
}

void sub_5AA14(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "No codec found for codecType %u", (uint8_t *)v2, 8u);
}

void sub_5AA88()
{
}

void sub_5AAB4()
{
}

void sub_5AAE0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    atomic_load((unint64_t *)(*(void *)a2 + 24LL));
  }
  sub_1CE60();
  HIWORD(sub_A2F8( &dword_0,  v0,  v1,  "AudioRingBuffer::readFrameInternal, frame header cannot be wrapped around",  v2,  v3,  v4,  v5, v6) = v2;
  sub_1CE4C( &dword_0,  v3,  v4,  "AudioRingBuffer::readFrameInternal, frame length(%lu) bigger than available buffer length (%lu)",  v5,  v6);
}

void sub_5AB5C()
{
}

void sub_5AB88(uint64_t a1)
{
  HIWORD(sub_459C(v1, v4) = v1;
  sub_1CE4C( &dword_0,  v1,  v2,  "Shared memory size (%lu bytes available) has less than requested buffer length (%lu), deferring write",  v3,  v4);
}

void sub_5AC04()
{
}

void sub_5AC30( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5AC60()
{
  __int16 v4 = v0;
  int v5 = v1;
  _os_log_debug_impl( &dword_0,  v2,  OS_LOG_TYPE_DEBUG,  "mOutputBufferSize %u, outputSizePerPacket %u, mNumOutputPackets %u",  v3,  0x14u);
  sub_A32C();
}

void sub_5ACE4()
{
  sub_A334( &dword_0,  v0,  v1,  "kAudioCodecPropertyMaximumPacketByteSize returned max packet size of %u bytes",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5AD48()
{
}

void sub_5ADAC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5AE10()
{
}

void sub_5AE74( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5AEA4()
{
}

void sub_5AF0C()
{
  sub_1D91C(&dword_0, v0, v1, "AACEncoder, mOutputBufferSize(%u) <= offset(%u)", 67109376, v2);
  sub_A32C();
}

void sub_5AF74()
{
}

void sub_5AFA0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B010( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B080( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B0F0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B160( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B1D0()
{
}

void sub_5B1FC()
{
}

void sub_5B228()
{
}

void sub_5B254( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B2C4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B334( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B3A4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B414( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B484( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B4F4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B564( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B5D4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B644( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B6B4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B724( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B794( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B804( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B874( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B8E4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B954( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5B9C4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BA34( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BAA4()
{
}

void sub_5BAD0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BB40( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BBB0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BC20( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BC90( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BD00()
{
}

void sub_5BD2C()
{
}

void sub_5BD58( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BDC8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5BE38()
{
}

void sub_5BE64()
{
}

void sub_5BE90()
{
}

void sub_5BEBC()
{
}

void sub_5BEE8()
{
}

void sub_5BF14()
{
}

void sub_5BF40()
{
}

void sub_5BF6C()
{
}

void sub_5BF98()
{
}

void sub_5BFC4()
{
}

void sub_5BFF0()
{
}

void sub_5C01C()
{
}

void sub_5C048()
{
}

void sub_5C074(void *a1)
{
}

void sub_5C0F8(void *a1)
{
}

void sub_5C168(void *a1)
{
}

void sub_5C1EC(void *a1)
{
}

void sub_5C25C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C28C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C2BC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C2EC(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Wrong Heimdall codec type %d", (uint8_t *)v2, 8u);
}

void sub_5C360(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "mInputFormat.mChannelsPerFrame <= kMaxInputBuffers";
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v1, 0xCu);
}

void sub_5C3E0(int *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl( &dword_0,  a2,  OS_LOG_TYPE_DEBUG,  "kAudioConverterPropertyMaximumOutputPacketSize returned %u",  (uint8_t *)v3,  8u);
}

void sub_5C458(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "Encoder type (%d) is not valid", (uint8_t *)v2, 8u);
  sub_A318();
}

void sub_5C4C8()
{
}

void sub_5C4F4()
{
}

void sub_5C520()
{
}

void sub_5C54C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "Audio Consumption Frame size =%d", (uint8_t *)v2, 8u);
  sub_A318();
}

void sub_5C5BC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C62C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C69C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C70C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C77C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C7EC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C85C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C8CC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C93C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5C9AC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CA1C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CA8C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CAFC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CB6C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CBDC(_BYTE *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = "Schedule Delayed";
  int v4 = *(_DWORD *)(a2 + 9124);
  int v5 = *(_DWORD *)(a2 + 9168);
  if (!*a1) {
    uint64_t v3 = "Immediate";
  }
  int v6 = 136446722;
  uint8_t v7 = v3;
  __int16 v8 = 1024;
  int v9 = v4;
  __int16 v10 = 1024;
  int v11 = v5;
  _os_log_debug_impl( &dword_0,  log,  OS_LOG_TYPE_DEBUG,  "Dynamic Latency : %{public}s Frame Count Update %u -> %u",  (uint8_t *)&v6,  0x18u);
  sub_A32C();
}

void sub_5CC88()
{
}

void sub_5CCF0()
{
}

void sub_5CD1C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDeviceInputAggregate",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5CD48()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kA2DPLowLatencyMode",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5CD74()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyLatencyOverride",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5CDA0(uint64_t a1, os_log_s *a2)
{
  else {
    uint64_t v3 = "Slow Down";
  }
  int v4 = 136446466;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = sub_30818(a1);
  _os_log_debug_impl( &dword_0,  a2,  OS_LOG_TYPE_DEBUG,  "Dynamic Latency : Start Latency Targeted %{public}s initial in-ear-delay=%u",  (uint8_t *)&v4,  0x12u);
}

void sub_5CE54()
{
}

void sub_5CEBC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CF2C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5CF9C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D00C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D07C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D0EC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D15C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D1CC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D23C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D2AC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D31C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D38C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D3FC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D46C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D4DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D54C()
{
}

void sub_5D578()
{
}

void sub_5D5A4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D614( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D684( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D6F4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D764( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D7D4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5D844()
{
}

void sub_5D870(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_0, a2, OS_LOG_TYPE_ERROR, "eq setting id %d is not valid!", (uint8_t *)v2, 8u);
  sub_A318();
}

void sub_5D8E0()
{
}

void sub_5D90C(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_debug_impl( &dword_0,  a2,  OS_LOG_TYPE_DEBUG,  " SetStreamPropertyData sampling freq is %lf",  (uint8_t *)&v3,  0xCu);
  sub_A32C();
}

void sub_5D980()
{
}

void sub_5D9AC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5D9D8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5DA04()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioSelectorControlPropertyCurrentItem for the data source control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5DA30()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioSelectorControlPropertyItemName for the data source control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5DA5C()
{
}

void sub_5DA88()
{
}

void sub_5DAB4()
{
}

void sub_5DAE0()
{
}

void sub_5DB0C()
{
}

void sub_5DB38()
{
}

void sub_5DB64(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136446210;
  uint64_t v4 = a1;
  sub_1A7E4(&dword_0, a2, a3, "XPC server error: %{public}s\n", (uint8_t *)&v3);
  sub_A32C();
}

void sub_5DBCC(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_debug_impl( &dword_0,  log,  OS_LOG_TYPE_DEBUG,  "Audio Message %d from Audio Device UID: %@\n",  (uint8_t *)v3,  0x12u);
  sub_A32C();
}

void sub_5DC4C(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 136446210;
  uint64_t v4 = a1;
  sub_1A7E4(&dword_0, a2, a3, "Unexpected XPC server event: %{public}s\n", (uint8_t *)&v3);
  sub_A32C();
}

void sub_5DCB4(void *a1, os_log_s *a2)
{
  int v3 = 136315138;
  id v4 = [a1 UTF8String];
  _os_log_debug_impl( &dword_0,  a2,  OS_LOG_TYPE_DEBUG,  "Found HAL device for UID: %s, handling msg\n",  (uint8_t *)&v3,  0xCu);
}

void sub_5DD3C(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *a2;
  int v5 = 134218240;
  uint64_t v6 = v3;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "BTAudioPlugin publish ready condition timed out %ld, %ld",  (uint8_t *)&v5,  0x16u);
  sub_A32C();
}

void sub_5DDC4(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "deviceAddress";
  _os_log_fault_impl(&dword_0, log, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v1, 0xCu);
  sub_A32C();
}

void sub_5DE40()
{
}

void sub_5DE6C()
{
}

void sub_5DE98(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  uint64_t v4 = a2;
  sub_1A7E4( &dword_0,  a3,  (uint64_t)a3,  "Asked to take ownership for %{public}s, but device no longer exists",  (uint8_t *)&v3);
  sub_A32C();
}

void sub_5DF10(char *a1, void *a2, os_log_s *a3)
{
  if (*a1 < 0) {
    a2 = (void *)*a2;
  }
  int v3 = 136446210;
  uint64_t v4 = a2;
  sub_1A7E4(&dword_0, a3, (uint64_t)a3, "Ownership requested on disconnected device %{public}s", (uint8_t *)&v3);
  sub_A32C();
}

void sub_5DF88()
{
  sub_A2F8( &dword_0,  v0,  v1,  "Not enough space for the return value of kAudioObjectPropertyBaseClass for the plug-in",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5DFB4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "Not enough space for the return value of kAudioObjectPropertyClass for the plug-in",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5DFE0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "Not enough space for the return value of kAudioObjectPropertyOwner for the plug-in",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5E00C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "Not enough space for the return value of kAudioObjectPropertyManufacturer for the plug-in",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5E038()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioPlugInPropertyTranslateUIDToDevice",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5E064()
{
}

void sub_5E090()
{
}

void sub_5E0BC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioPlugInPropertyResourceBundle",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5E0E8(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 136446210;
  uint64_t v4 = "*theNumberItemsToFetch <= maxItemCount";
  sub_1A7E4(&dword_0, a1, a3, "Assertion failed: %{public}s", (uint8_t *)&v3);
  sub_A32C();
}

void sub_5E15C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioPluginPropertyCustomHRTF",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5E188()
{
}

void sub_5E1B4()
{
}

void sub_5E1E0(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 134217984;
  uint64_t v4 = 0x3FE0000000000000LL;
  sub_1A7E4( &dword_0,  a1,  a3,  "Wireless Splitter : Main Volume requested when aggregation is disabled, Main volume set to  %f",  (uint8_t *)&v3);
  sub_A32C();
}

void sub_5E250()
{
}

void sub_5E27C()
{
  sub_A2F8(&dword_0, v0, v1, "QueryInterface: no place to store the returned interface", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_5E2A8()
{
}

void sub_5E2D4()
{
}

void sub_5E300()
{
}

void sub_5E32C()
{
}

void sub_5E358()
{
}

void sub_5E384()
{
}

void sub_5E3B0()
{
}

void sub_5E3DC()
{
}

void sub_5E408()
{
}

void sub_5E434()
{
}

void sub_5E460()
{
}

void sub_5E48C()
{
}

void sub_5E4B8()
{
}

void sub_5E4E4()
{
}

void sub_5E510()
{
}

void sub_5E570()
{
}

void sub_5E59C()
{
}

void sub_5E5C8()
{
}

void sub_5E628()
{
}

void sub_5E654()
{
  sub_A2F8(&dword_0, v0, v1, "IsPropertySettable: no place to put the return value", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_5E680()
{
}

void sub_5E6AC()
{
}

void sub_5E6D8()
{
  sub_A2F8(&dword_0, v0, v1, "GetPropertyDataSize: no place to put the return value", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_5E704()
{
}

void sub_5E730()
{
}

void sub_5E75C()
{
  sub_A2F8(&dword_0, v0, v1, "GetPropertyData: no place to put the return value size", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_5E788()
{
  sub_A2F8(&dword_0, v0, v1, "GetPropertyData: no place to put the return value", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_5E7B4()
{
}

void sub_5E7E0()
{
}

void sub_5E80C()
{
}

void sub_5E838()
{
}

void sub_5E864()
{
}

void sub_5E8C4()
{
}

void sub_5E8F0()
{
}

void sub_5E91C()
{
}

void sub_5E948()
{
}

void sub_5E974()
{
}

void sub_5E9A0()
{
}

void sub_5E9CC()
{
}

void sub_5E9F8()
{
}

void sub_5EA24()
{
}

void sub_5EA50()
{
}

void sub_5EA7C()
{
}

void sub_5EAA8()
{
}

void sub_5EAD4()
{
}

void sub_5EB00()
{
}

void sub_5EB6C()
{
}

void sub_5EBD8()
{
}

void sub_5EC04()
{
}

void sub_5EC30()
{
}

void sub_5EC5C()
{
}

void sub_5EC88( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_5ECF8(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *std::string buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_0, log, OS_LOG_TYPE_ERROR, "Wireless Splitter device is not an aggregate", buf, 2u);
}

void sub_5ED34()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5ED60()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5ED8C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyOwner for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EDB8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyName for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EDE4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyClockDomain for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EE10()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyManufacturer for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EE3C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceUID for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EE68()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyTransportType for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EE94()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyNominalSampleRate for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EEC0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyZeroTimeStampPeriod for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EEEC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertySafetyOffset for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EF18()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyLatency for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EF44()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyDeviceCanBeDefault for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EF70()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyIsHidden for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EF9C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelsForStereo for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EFC8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: noactive profile the return value of kAudioDevicePropertyPreferredChannelLayout for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5EFF4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyPreferredChannelLayout for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F020()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyDeviceType",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F04C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyInEarDetectEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F078()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyProductID",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F0A4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyDoAPSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F0D0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyIsiAP",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F0FC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyListenModeSupport",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F128()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioDevicePropertyListenMode",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F154()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyInEarStatusPrimary",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F180()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyInEarStatus",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F1AC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyInEarStatusSecondary",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F1D8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyPrimaryBudSide",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F204()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyFixedMicMode",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F230()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyAvailableAudioProfiles",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F25C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyCurrentAudioProfile",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F288()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialVolumeDb",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F2B4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyDoAPUuid",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F2E0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyDosimetrySensitivity",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F30C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyIsAppleAudioDevice",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F338()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyDosimetryVolumeCurve",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F364()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialAudioSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F390()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialAudioEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F3BC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialCCIsAvailable",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F3E8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatializeStereoCCIsAvail",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F414()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyIsAudioSessionSpatial",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F440()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialCCState",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F46C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatializeStereoCCState",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F498()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyIsGenuineAirPods",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F4C4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyAdaptiveVolumeEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F4F0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialNumChannels",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F51C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialFormatId",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F548()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialConfig",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F574()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyExpanseStatus",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F5A0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyCallScreeningStatus",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F5CC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyCustomHRTFAllowed",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F5F8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialMode",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F624()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialAudioUserEnableFeature",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F650()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyStereoHFPSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F67C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyStereoHFPEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F6A8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyStereoHFPAllowed",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F6D4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySoftwareVolumeSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F700()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySoftwareVolumeEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F72C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDeviceWirelessSplitterSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F758()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDeviceWirelessSplitterGuest",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F784()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDeviceWirelessSplitterGuestNotInContacts",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F7B0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of Wireless Splitter Main Volume",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F7DC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyOwnsAudioConnection",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F808()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyLiveListenSupported",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F834()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyAllowScoForTBT",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F860()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyShareplayScreenSharing",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F88C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySupportedFeatures",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F8B8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyBudSideLoudnessEQEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F8E4(int *a1, uint64_t a2, os_log_t log)
{
  int v3 = *a1;
  int v4 = *(_DWORD *)(a2 + 44);
  v5[0] = 67109376;
  v5[1] = v3;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "Failed in dispatched config change for AudioObjectProperty %u on object %d",  (uint8_t *)v5,  0xEu);
  sub_A32C();
}

void sub_5F96C()
{
}

void sub_5F998()
{
}

void sub_5F9C4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyOwnsAudioConnection",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5F9F0()
{
}

void sub_5FA1C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDeviceWirelessSplitterAggregation",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FA48()
{
}

void sub_5FA74()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of Wireless Splitter Main volume",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FAA0()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyCurrentAudioProfile",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FACC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySoftwareVolumeEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FAF8()
{
}

void sub_5FB24()
{
}

void sub_5FB50()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyCallScreeningStatus",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FB7C()
{
}

void sub_5FBA8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialAudioStreamInfo",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FBD4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatialCCState",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FC00()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertySpatializeStereoCCState",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FC2C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyShareplayScreenSharing",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FC58()
{
  sub_A2F8( &dword_0,  v0,  v1,  "setPropertyData: not enough space for the return value of kBluetoothAudioDevicePropertyAllowScoForTBT",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FC84()
{
}

void sub_5FCB0()
{
}

void sub_5FCDC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FD08()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FD34()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyOwner for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FD60()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyIsActive for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FD8C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyDirection for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FDB8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyTerminalType for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FDE4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyStartingChannel for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FE10()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyVirtualFormat for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FE3C()
{
}

void sub_5FE68()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioStreamPropertyAvailablePhysicalFormats for the stream",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FE94()
{
}

void sub_5FEC0()
{
}

void sub_5FEEC()
{
}

void sub_5FF18()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyBaseClass for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FF44()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyClass for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FF70()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioObjectPropertyOwner for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FF9C()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioControlPropertyScope for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FFC8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioControlPropertyElement for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_5FFF4()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioLevelControlPropertyScalarValue for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_60020()
{
}

void sub_6004C()
{
}

void sub_60078()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelValue for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_600A4()
{
}

void sub_600D0()
{
}

void sub_600FC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioLevelControlPropertyDecibelRange for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_60128()
{
}

void sub_60154()
{
}

void sub_60180()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioLevelControlPropertyConvertScalarToDecibels for the volume control",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_601AC()
{
  sub_A2F8( &dword_0,  v0,  v1,  "getPropertyData: not enough space for the return value of kAudioBooleanControlPropertyValue for the device",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_601D8()
{
}

void sub_60204()
{
}

void sub_60230()
{
}

void sub_6025C()
{
}

void sub_60288()
{
}

void sub_602B4()
{
}

void sub_602E0()
{
}

void sub_6030C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_6037C()
{
  sub_A2F8(&dword_0, v0, v1, "No active Bluetooth profile when requesting volume, returning 0", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_603A8()
{
  sub_A2F8( &dword_0,  v0,  v1,  "No active Bluetooth profile when requesting volume, returning kA2DPAudioMinVolumeDB",  v2,  v3,  v4,  v5,  v6);
  sub_A318();
}

void sub_603D4()
{
}

double sub_6040C(__int32 *a1, os_log_s *a2, uint64_t a3, uint8x8_t a4)
{
  a4.i32[0] = *a1;
  int16x8_t v4 = (int16x8_t)vmovl_u8(a4);
  *(int16x4_t *)v4.i8 = vrev64_s16(*(int16x4_t *)v4.i8);
  unsigned __int32 v6 = vmovn_s16(v4).u32[0];
  char v7 = 0;
  int v8 = 136446210;
  int v9 = &v6;
  sub_1A7E4(&dword_0, a2, a3, "Error in sending property change for property %{public}s", (uint8_t *)&v8);
  return result;
}

void sub_60494(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 9080);
  if (*(_BYTE *)(*(void *)(a1 + 9248) + 228LL)) {
    int16x8_t v4 = @"Supported";
  }
  else {
    int16x8_t v4 = @"Not-Supported";
  }
  int v5 = 138543874;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  __int16 v9 = 2112;
  __int16 v10 = v4;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "Dropping Volume update becuase there is one already in flight %{public}@: manualVolumeUpdate: %@ Adaptive Volume: %@",  (uint8_t *)&v5,  0x20u);
}

void sub_60544(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 9080);
  int v4 = 138543362;
  uint64_t v5 = v3;
  sub_1A7E4(&dword_0, a2, a3, "[%{public}@ ] transport update: timed out", (uint8_t *)&v4);
  sub_A32C();
}

void sub_605B0()
{
}

void sub_605DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_6060C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_6063C(int *a1, os_log_s *a2)
{
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl(&dword_0, a2, OS_LOG_TYPE_DEBUG, "mOutputFormat.mBytesPerPacket %u", (uint8_t *)v3, 8u);
  sub_A318();
}

void sub_606B0(int a1, int a2, os_log_t log)
{
  v3[0] = 67109376;
  v3[1] = a1;
  __int16 v4 = 1024;
  int v5 = a2;
  _os_log_error_impl( &dword_0,  log,  OS_LOG_TYPE_ERROR,  "LC3Encoder, skip processing, ioOutputDataPackets(%u) is bigger than numMaxBuffers(%u)",  (uint8_t *)v3,  0xEu);
}

void sub_60734()
{
  sub_52C60(&dword_0, v0, v1, "error = %d", v2, v3, v4, v5, v6);
  sub_A318();
}

void sub_60794( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_60808( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void operator delete[](void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_initWithUUID_productID_vendorID_EURegionBit_audioDevice_readCharacteristics_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithUUID:productID:vendorID:EURegionBit:audioDevice:readCharacteristics:");
}

id objc_msgSend_performVolumeOperation_volume_category_mode_routeName_routeDeviceIdentifier_routeSubtype_outVolume_outSequenceNumber_outMuted_outCategoryCopy_outModeCopy_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "performVolumeOperation:volume:category:mode:routeName:routeDeviceIdentifier:routeSubtype:outVolume:outSequenc eNumber:outMuted:outCategoryCopy:outModeCopy:");
}

id objc_msgSend_performVolumeOperation_volume_category_mode_routeName_routeDeviceIdentifier_routeSubtype_rampUpDuration_rampDownDuration_outVolume_outSequenceNumber_outMuted_outCategoryCopy_outModeCopy_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "performVolumeOperation:volume:category:mode:routeName:routeDeviceIdentifier:routeSubtype:rampUpDuration:rampD ownDuration:outVolume:outSequenceNumber:outMuted:outCategoryCopy:outModeCopy:");
}

id objc_msgSend_updateVolumeForCategories_telephoneVolume_voiceCommandVolume_uid_rampUpDuration_rampDownDuration_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateVolumeForCategories:telephoneVolume:voiceCommandVolume:uid:rampUpDuration:rampDownDuration:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "valueForKey:");
}